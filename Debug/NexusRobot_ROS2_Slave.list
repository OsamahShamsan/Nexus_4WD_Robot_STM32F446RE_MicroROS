
NexusRobot_ROS2_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b698  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001aec  0801b868  0801b868  0001c868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d354  0801d354  0002131c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801d354  0801d354  0001e354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d35c  0801d35c  0002131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801d35c  0801d35c  0001e35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d368  0801d368  0001e368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000231c  20000000  0801d36c  0001f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e4b4  20002320  0801f688  00021320  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200107d4  0801f688  000217d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002131c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e73a  00000000  00000000  0002134c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044e7  00000000  00000000  0003fa86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00043f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012a9  00000000  00000000  00045798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b5e7  00000000  00000000  00046a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000246f4  00000000  00000000  00072028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcaa3  00000000  00000000  0009671c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  001931bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007604  00000000  00000000  00193228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0019a82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20002320 	.word	0x20002320
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b850 	.word	0x0801b850

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20002324 	.word	0x20002324
 800020c:	0801b850 	.word	0x0801b850

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	@ 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__gedf2>:
 80008ac:	f04f 3cff 	mov.w	ip, #4294967295
 80008b0:	e006      	b.n	80008c0 <__cmpdf2+0x4>
 80008b2:	bf00      	nop

080008b4 <__ledf2>:
 80008b4:	f04f 0c01 	mov.w	ip, #1
 80008b8:	e002      	b.n	80008c0 <__cmpdf2+0x4>
 80008ba:	bf00      	nop

080008bc <__cmpdf2>:
 80008bc:	f04f 0c01 	mov.w	ip, #1
 80008c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008d6:	d01b      	beq.n	8000910 <__cmpdf2+0x54>
 80008d8:	b001      	add	sp, #4
 80008da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008de:	bf0c      	ite	eq
 80008e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008e4:	ea91 0f03 	teqne	r1, r3
 80008e8:	bf02      	ittt	eq
 80008ea:	ea90 0f02 	teqeq	r0, r2
 80008ee:	2000      	moveq	r0, #0
 80008f0:	4770      	bxeq	lr
 80008f2:	f110 0f00 	cmn.w	r0, #0
 80008f6:	ea91 0f03 	teq	r1, r3
 80008fa:	bf58      	it	pl
 80008fc:	4299      	cmppl	r1, r3
 80008fe:	bf08      	it	eq
 8000900:	4290      	cmpeq	r0, r2
 8000902:	bf2c      	ite	cs
 8000904:	17d8      	asrcs	r0, r3, #31
 8000906:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800090a:	f040 0001 	orr.w	r0, r0, #1
 800090e:	4770      	bx	lr
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	d102      	bne.n	8000920 <__cmpdf2+0x64>
 800091a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800091e:	d107      	bne.n	8000930 <__cmpdf2+0x74>
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000928:	d1d6      	bne.n	80008d8 <__cmpdf2+0x1c>
 800092a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800092e:	d0d3      	beq.n	80008d8 <__cmpdf2+0x1c>
 8000930:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <__aeabi_cdrcmple>:
 8000938:	4684      	mov	ip, r0
 800093a:	4610      	mov	r0, r2
 800093c:	4662      	mov	r2, ip
 800093e:	468c      	mov	ip, r1
 8000940:	4619      	mov	r1, r3
 8000942:	4663      	mov	r3, ip
 8000944:	e000      	b.n	8000948 <__aeabi_cdcmpeq>
 8000946:	bf00      	nop

08000948 <__aeabi_cdcmpeq>:
 8000948:	b501      	push	{r0, lr}
 800094a:	f7ff ffb7 	bl	80008bc <__cmpdf2>
 800094e:	2800      	cmp	r0, #0
 8000950:	bf48      	it	mi
 8000952:	f110 0f00 	cmnmi.w	r0, #0
 8000956:	bd01      	pop	{r0, pc}

08000958 <__aeabi_dcmpeq>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff fff4 	bl	8000948 <__aeabi_cdcmpeq>
 8000960:	bf0c      	ite	eq
 8000962:	2001      	moveq	r0, #1
 8000964:	2000      	movne	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_dcmplt>:
 800096c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000970:	f7ff ffea 	bl	8000948 <__aeabi_cdcmpeq>
 8000974:	bf34      	ite	cc
 8000976:	2001      	movcc	r0, #1
 8000978:	2000      	movcs	r0, #0
 800097a:	f85d fb08 	ldr.w	pc, [sp], #8
 800097e:	bf00      	nop

08000980 <__aeabi_dcmple>:
 8000980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000984:	f7ff ffe0 	bl	8000948 <__aeabi_cdcmpeq>
 8000988:	bf94      	ite	ls
 800098a:	2001      	movls	r0, #1
 800098c:	2000      	movhi	r0, #0
 800098e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000992:	bf00      	nop

08000994 <__aeabi_dcmpge>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff ffce 	bl	8000938 <__aeabi_cdrcmple>
 800099c:	bf94      	ite	ls
 800099e:	2001      	movls	r0, #1
 80009a0:	2000      	movhi	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmpgt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffc4 	bl	8000938 <__aeabi_cdrcmple>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_d2iz>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009c4:	d215      	bcs.n	80009f2 <__aeabi_d2iz+0x36>
 80009c6:	d511      	bpl.n	80009ec <__aeabi_d2iz+0x30>
 80009c8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d0:	d912      	bls.n	80009f8 <__aeabi_d2iz+0x3c>
 80009d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009de:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009e2:	fa23 f002 	lsr.w	r0, r3, r2
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d105      	bne.n	8000a04 <__aeabi_d2iz+0x48>
 80009f8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009fc:	bf08      	it	eq
 80009fe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295
 8000aca:	f000 b9d3 	b.w	8000e74 <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f84d 	bl	8000b7c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f840 	bl	8000b7c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f82f 	bl	8000b7c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f821 	bl	8000b7c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b988 	b.w	8000e74 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	468e      	mov	lr, r1
 8000b84:	4604      	mov	r4, r0
 8000b86:	4688      	mov	r8, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14a      	bne.n	8000c22 <__udivmoddi4+0xa6>
 8000b8c:	428a      	cmp	r2, r1
 8000b8e:	4617      	mov	r7, r2
 8000b90:	d962      	bls.n	8000c58 <__udivmoddi4+0xdc>
 8000b92:	fab2 f682 	clz	r6, r2
 8000b96:	b14e      	cbz	r6, 8000bac <__udivmoddi4+0x30>
 8000b98:	f1c6 0320 	rsb	r3, r6, #32
 8000b9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000ba0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba4:	40b7      	lsls	r7, r6
 8000ba6:	ea43 0808 	orr.w	r8, r3, r8
 8000baa:	40b4      	lsls	r4, r6
 8000bac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb0:	fa1f fc87 	uxth.w	ip, r7
 8000bb4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bb8:	0c23      	lsrs	r3, r4, #16
 8000bba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc2:	fb01 f20c 	mul.w	r2, r1, ip
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0x62>
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bd0:	f080 80ea 	bcs.w	8000da8 <__udivmoddi4+0x22c>
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	f240 80e7 	bls.w	8000da8 <__udivmoddi4+0x22c>
 8000bda:	3902      	subs	r1, #2
 8000bdc:	443b      	add	r3, r7
 8000bde:	1a9a      	subs	r2, r3, r2
 8000be0:	b2a3      	uxth	r3, r4
 8000be2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bf2:	459c      	cmp	ip, r3
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x8e>
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bfc:	f080 80d6 	bcs.w	8000dac <__udivmoddi4+0x230>
 8000c00:	459c      	cmp	ip, r3
 8000c02:	f240 80d3 	bls.w	8000dac <__udivmoddi4+0x230>
 8000c06:	443b      	add	r3, r7
 8000c08:	3802      	subs	r0, #2
 8000c0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c0e:	eba3 030c 	sub.w	r3, r3, ip
 8000c12:	2100      	movs	r1, #0
 8000c14:	b11d      	cbz	r5, 8000c1e <__udivmoddi4+0xa2>
 8000c16:	40f3      	lsrs	r3, r6
 8000c18:	2200      	movs	r2, #0
 8000c1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d905      	bls.n	8000c32 <__udivmoddi4+0xb6>
 8000c26:	b10d      	cbz	r5, 8000c2c <__udivmoddi4+0xb0>
 8000c28:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4608      	mov	r0, r1
 8000c30:	e7f5      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000c32:	fab3 f183 	clz	r1, r3
 8000c36:	2900      	cmp	r1, #0
 8000c38:	d146      	bne.n	8000cc8 <__udivmoddi4+0x14c>
 8000c3a:	4573      	cmp	r3, lr
 8000c3c:	d302      	bcc.n	8000c44 <__udivmoddi4+0xc8>
 8000c3e:	4282      	cmp	r2, r0
 8000c40:	f200 8105 	bhi.w	8000e4e <__udivmoddi4+0x2d2>
 8000c44:	1a84      	subs	r4, r0, r2
 8000c46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	4690      	mov	r8, r2
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d0e5      	beq.n	8000c1e <__udivmoddi4+0xa2>
 8000c52:	e9c5 4800 	strd	r4, r8, [r5]
 8000c56:	e7e2      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	f000 8090 	beq.w	8000d7e <__udivmoddi4+0x202>
 8000c5e:	fab2 f682 	clz	r6, r2
 8000c62:	2e00      	cmp	r6, #0
 8000c64:	f040 80a4 	bne.w	8000db0 <__udivmoddi4+0x234>
 8000c68:	1a8a      	subs	r2, r1, r2
 8000c6a:	0c03      	lsrs	r3, r0, #16
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	b280      	uxth	r0, r0
 8000c72:	b2bc      	uxth	r4, r7
 8000c74:	2101      	movs	r1, #1
 8000c76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c82:	fb04 f20c 	mul.w	r2, r4, ip
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d907      	bls.n	8000c9a <__udivmoddi4+0x11e>
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c90:	d202      	bcs.n	8000c98 <__udivmoddi4+0x11c>
 8000c92:	429a      	cmp	r2, r3
 8000c94:	f200 80e0 	bhi.w	8000e58 <__udivmoddi4+0x2dc>
 8000c98:	46c4      	mov	ip, r8
 8000c9a:	1a9b      	subs	r3, r3, r2
 8000c9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ca0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ca4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ca8:	fb02 f404 	mul.w	r4, r2, r4
 8000cac:	429c      	cmp	r4, r3
 8000cae:	d907      	bls.n	8000cc0 <__udivmoddi4+0x144>
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x142>
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	f200 80ca 	bhi.w	8000e52 <__udivmoddi4+0x2d6>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	1b1b      	subs	r3, r3, r4
 8000cc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cc6:	e7a5      	b.n	8000c14 <__udivmoddi4+0x98>
 8000cc8:	f1c1 0620 	rsb	r6, r1, #32
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	fa22 f706 	lsr.w	r7, r2, r6
 8000cd2:	431f      	orrs	r7, r3
 8000cd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cdc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ce0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cea:	fa1f fc87 	uxth.w	ip, r7
 8000cee:	fbbe f0f9 	udiv	r0, lr, r9
 8000cf2:	0c1c      	lsrs	r4, r3, #16
 8000cf4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cf8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	fa02 f201 	lsl.w	r2, r2, r1
 8000d06:	d909      	bls.n	8000d1c <__udivmoddi4+0x1a0>
 8000d08:	193c      	adds	r4, r7, r4
 8000d0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d0e:	f080 809c 	bcs.w	8000e4a <__udivmoddi4+0x2ce>
 8000d12:	45a6      	cmp	lr, r4
 8000d14:	f240 8099 	bls.w	8000e4a <__udivmoddi4+0x2ce>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	443c      	add	r4, r7
 8000d1c:	eba4 040e 	sub.w	r4, r4, lr
 8000d20:	fa1f fe83 	uxth.w	lr, r3
 8000d24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d28:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1ce>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d3e:	f080 8082 	bcs.w	8000e46 <__udivmoddi4+0x2ca>
 8000d42:	45a4      	cmp	ip, r4
 8000d44:	d97f      	bls.n	8000e46 <__udivmoddi4+0x2ca>
 8000d46:	3b02      	subs	r3, #2
 8000d48:	443c      	add	r4, r7
 8000d4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d4e:	eba4 040c 	sub.w	r4, r4, ip
 8000d52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d56:	4564      	cmp	r4, ip
 8000d58:	4673      	mov	r3, lr
 8000d5a:	46e1      	mov	r9, ip
 8000d5c:	d362      	bcc.n	8000e24 <__udivmoddi4+0x2a8>
 8000d5e:	d05f      	beq.n	8000e20 <__udivmoddi4+0x2a4>
 8000d60:	b15d      	cbz	r5, 8000d7a <__udivmoddi4+0x1fe>
 8000d62:	ebb8 0203 	subs.w	r2, r8, r3
 8000d66:	eb64 0409 	sbc.w	r4, r4, r9
 8000d6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d72:	431e      	orrs	r6, r3
 8000d74:	40cc      	lsrs	r4, r1
 8000d76:	e9c5 6400 	strd	r6, r4, [r5]
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	e74f      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000d7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d82:	0c01      	lsrs	r1, r0, #16
 8000d84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d88:	b280      	uxth	r0, r0
 8000d8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4638      	mov	r0, r7
 8000d92:	463c      	mov	r4, r7
 8000d94:	46b8      	mov	r8, r7
 8000d96:	46be      	mov	lr, r7
 8000d98:	2620      	movs	r6, #32
 8000d9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d9e:	eba2 0208 	sub.w	r2, r2, r8
 8000da2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000da6:	e766      	b.n	8000c76 <__udivmoddi4+0xfa>
 8000da8:	4601      	mov	r1, r0
 8000daa:	e718      	b.n	8000bde <__udivmoddi4+0x62>
 8000dac:	4610      	mov	r0, r2
 8000dae:	e72c      	b.n	8000c0a <__udivmoddi4+0x8e>
 8000db0:	f1c6 0220 	rsb	r2, r6, #32
 8000db4:	fa2e f302 	lsr.w	r3, lr, r2
 8000db8:	40b7      	lsls	r7, r6
 8000dba:	40b1      	lsls	r1, r6
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dca:	b2bc      	uxth	r4, r7
 8000dcc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dd0:	0c11      	lsrs	r1, r2, #16
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb08 f904 	mul.w	r9, r8, r4
 8000dda:	40b0      	lsls	r0, r6
 8000ddc:	4589      	cmp	r9, r1
 8000dde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000de2:	b280      	uxth	r0, r0
 8000de4:	d93e      	bls.n	8000e64 <__udivmoddi4+0x2e8>
 8000de6:	1879      	adds	r1, r7, r1
 8000de8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000dec:	d201      	bcs.n	8000df2 <__udivmoddi4+0x276>
 8000dee:	4589      	cmp	r9, r1
 8000df0:	d81f      	bhi.n	8000e32 <__udivmoddi4+0x2b6>
 8000df2:	eba1 0109 	sub.w	r1, r1, r9
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fb09 f804 	mul.w	r8, r9, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	b292      	uxth	r2, r2
 8000e04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e08:	4542      	cmp	r2, r8
 8000e0a:	d229      	bcs.n	8000e60 <__udivmoddi4+0x2e4>
 8000e0c:	18ba      	adds	r2, r7, r2
 8000e0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e12:	d2c4      	bcs.n	8000d9e <__udivmoddi4+0x222>
 8000e14:	4542      	cmp	r2, r8
 8000e16:	d2c2      	bcs.n	8000d9e <__udivmoddi4+0x222>
 8000e18:	f1a9 0102 	sub.w	r1, r9, #2
 8000e1c:	443a      	add	r2, r7
 8000e1e:	e7be      	b.n	8000d9e <__udivmoddi4+0x222>
 8000e20:	45f0      	cmp	r8, lr
 8000e22:	d29d      	bcs.n	8000d60 <__udivmoddi4+0x1e4>
 8000e24:	ebbe 0302 	subs.w	r3, lr, r2
 8000e28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	46e1      	mov	r9, ip
 8000e30:	e796      	b.n	8000d60 <__udivmoddi4+0x1e4>
 8000e32:	eba7 0909 	sub.w	r9, r7, r9
 8000e36:	4449      	add	r1, r9
 8000e38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e40:	fb09 f804 	mul.w	r8, r9, r4
 8000e44:	e7db      	b.n	8000dfe <__udivmoddi4+0x282>
 8000e46:	4673      	mov	r3, lr
 8000e48:	e77f      	b.n	8000d4a <__udivmoddi4+0x1ce>
 8000e4a:	4650      	mov	r0, sl
 8000e4c:	e766      	b.n	8000d1c <__udivmoddi4+0x1a0>
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e6fd      	b.n	8000c4e <__udivmoddi4+0xd2>
 8000e52:	443b      	add	r3, r7
 8000e54:	3a02      	subs	r2, #2
 8000e56:	e733      	b.n	8000cc0 <__udivmoddi4+0x144>
 8000e58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5c:	443b      	add	r3, r7
 8000e5e:	e71c      	b.n	8000c9a <__udivmoddi4+0x11e>
 8000e60:	4649      	mov	r1, r9
 8000e62:	e79c      	b.n	8000d9e <__udivmoddi4+0x222>
 8000e64:	eba1 0109 	sub.w	r1, r1, r9
 8000e68:	46c4      	mov	ip, r8
 8000e6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6e:	fb09 f804 	mul.w	r8, r9, r4
 8000e72:	e7c4      	b.n	8000dfe <__udivmoddi4+0x282>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <clamp>:
static inline void setMotorDir(GPIO_TypeDef* INxA_Port, uint16_t INxA_Pin, GPIO_TypeDef* INxB_Port, uint16_t INxB_Pin, float speed);

// ----------------------------------------------------------------------------------
// ----------- Motor control helpers  -----------------------------------------------
// ----------------------------------------------------------------------------------
static inline float clamp(float v, float lo, float hi){
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e82:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e86:	ed87 1a01 	vstr	s2, [r7, #4]
    if (v < lo) 		return lo;
 8000e8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9a:	d501      	bpl.n	8000ea0 <clamp+0x28>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	e00b      	b.n	8000eb8 <clamp+0x40>
    else if (v > hi) 	return hi;
 8000ea0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ea4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb0:	dd01      	ble.n	8000eb6 <clamp+0x3e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	e000      	b.n	8000eb8 <clamp+0x40>
    else 				return v;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	ee07 3a90 	vmov	s15, r3
 8000ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <ramp_step>:

static inline float ramp_step(float target, float current, float step)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b085      	sub	sp, #20
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ed4:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ed8:	ed87 1a01 	vstr	s2, [r7, #4]
    if (target > current + step) 		 return current + step;
 8000edc:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ee0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	dd06      	ble.n	8000f04 <ramp_step+0x3a>
 8000ef6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000efa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f02:	e015      	b.n	8000f30 <ramp_step+0x66>
    else if (target < current - step) 	 return current - step;
 8000f04:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f08:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f10:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	d506      	bpl.n	8000f2c <ramp_step+0x62>
 8000f1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2a:	e001      	b.n	8000f30 <ramp_step+0x66>
    else 								 return target;
 8000f2c:	edd7 7a03 	vldr	s15, [r7, #12]
}
 8000f30:	eeb0 0a67 	vmov.f32	s0, s15
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <setMotorDir>:
{
    if (v_step  > 0.0f) g_v_step   = v_step;
    if (wz_step_radps > 0.0f) g_wz_step_radps = wz_step_radps;
}

static inline void setMotorDir(GPIO_TypeDef* INxA_Port, uint16_t INxA_Pin, GPIO_TypeDef* INxB_Port, uint16_t INxB_Pin, float speed) {
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	ed87 0a00 	vstr	s0, [r7]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	817b      	strh	r3, [r7, #10]
 8000f52:	4613      	mov	r3, r2
 8000f54:	813b      	strh	r3, [r7, #8]

	if (speed > 0.0f) { // Forward
 8000f56:	edd7 7a00 	vldr	s15, [r7]
 8000f5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	dd0c      	ble.n	8000f7e <setMotorDir+0x40>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
 8000f64:	893b      	ldrh	r3, [r7, #8]
 8000f66:	2200      	movs	r2, #0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f003 fa5c 	bl	8004428 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_SET);
 8000f70:	897b      	ldrh	r3, [r7, #10]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4619      	mov	r1, r3
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f003 fa56 	bl	8004428 <HAL_GPIO_WritePin>

	} else { // Stop / Brake
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
	}
}
 8000f7c:	e01f      	b.n	8000fbe <setMotorDir+0x80>
	} else if (speed < 0.0f) { // Reverse
 8000f7e:	edd7 7a00 	vldr	s15, [r7]
 8000f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	d50c      	bpl.n	8000fa6 <setMotorDir+0x68>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
 8000f8c:	897b      	ldrh	r3, [r7, #10]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4619      	mov	r1, r3
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f003 fa48 	bl	8004428 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_SET);
 8000f98:	893b      	ldrh	r3, [r7, #8]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f003 fa42 	bl	8004428 <HAL_GPIO_WritePin>
}
 8000fa4:	e00b      	b.n	8000fbe <setMotorDir+0x80>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
 8000fa6:	897b      	ldrh	r3, [r7, #10]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f003 fa3b 	bl	8004428 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
 8000fb2:	893b      	ldrh	r3, [r7, #8]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f003 fa35 	bl	8004428 <HAL_GPIO_WritePin>
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <init_motors>:

// ----------------------------------------------------------------------------------
// ----------- Motors control functions definitions  ---------------------------------
// ----------------------------------------------------------------------------------
void init_motors(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

	// Set the direction to Forward (INA = 1) & (INB = 0)
	// Rear Left
	HAL_GPIO_WritePin(RL_INB_GPO_GPIO_Port, RL_INB_GPO_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4830      	ldr	r0, [pc, #192]	@ (8001094 <init_motors+0xcc>)
 8000fd2:	f003 fa29 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL_INA_GPO_GPIO_Port, RL_INA_GPO_Pin, GPIO_PIN_SET);
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2108      	movs	r1, #8
 8000fda:	482e      	ldr	r0, [pc, #184]	@ (8001094 <init_motors+0xcc>)
 8000fdc:	f003 fa24 	bl	8004428 <HAL_GPIO_WritePin>
	// Front Left
	HAL_GPIO_WritePin(FL_INB_GPO_GPIO_Port, FL_INB_GPO_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	482b      	ldr	r0, [pc, #172]	@ (8001094 <init_motors+0xcc>)
 8000fe6:	f003 fa1f 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL_INA_GPO_GPIO_Port, FL_INA_GPO_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	4829      	ldr	r0, [pc, #164]	@ (8001094 <init_motors+0xcc>)
 8000ff0:	f003 fa1a 	bl	8004428 <HAL_GPIO_WritePin>
	// Rear Right
	HAL_GPIO_WritePin(RR_INB_GPO_GPIO_Port, RR_INB_GPO_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	4826      	ldr	r0, [pc, #152]	@ (8001094 <init_motors+0xcc>)
 8000ffa:	f003 fa15 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_INA_GPO_GPIO_Port, RR_INA_GPO_Pin, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001004:	4824      	ldr	r0, [pc, #144]	@ (8001098 <init_motors+0xd0>)
 8001006:	f003 fa0f 	bl	8004428 <HAL_GPIO_WritePin>
	// Front Right
	HAL_GPIO_WritePin(FR_INB_GPO_GPIO_Port, FR_INB_GPO_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2120      	movs	r1, #32
 800100e:	4822      	ldr	r0, [pc, #136]	@ (8001098 <init_motors+0xd0>)
 8001010:	f003 fa0a 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800101a:	4820      	ldr	r0, [pc, #128]	@ (800109c <init_motors+0xd4>)
 800101c:	f003 fa04 	bl	8004428 <HAL_GPIO_WritePin>

	// Enable the full bridges of the motor drivers (VDD)
	HAL_GPIO_WritePin(RL_VDD_GPO_GPIO_Port, RL_VDD_GPO_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001026:	481b      	ldr	r0, [pc, #108]	@ (8001094 <init_motors+0xcc>)
 8001028:	f003 f9fe 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FR_VDD_GPO_GPIO_Port, FR_VDD_GPO_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001032:	4818      	ldr	r0, [pc, #96]	@ (8001094 <init_motors+0xcc>)
 8001034:	f003 f9f8 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_VDD_GPO_GPIO_Port, RR_VDD_GPO_Pin, GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800103e:	4815      	ldr	r0, [pc, #84]	@ (8001094 <init_motors+0xcc>)
 8001040:	f003 f9f2 	bl	8004428 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL_VDD_GPO_GPIO_Port, FL_VDD_GPO_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800104a:	4812      	ldr	r0, [pc, #72]	@ (8001094 <init_motors+0xcc>)
 800104c:	f003 f9ec 	bl	8004428 <HAL_GPIO_WritePin>

	// Start the PWM signals
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// RL Motor
 8001050:	2100      	movs	r1, #0
 8001052:	4813      	ldr	r0, [pc, #76]	@ (80010a0 <init_motors+0xd8>)
 8001054:	f004 f936 	bl	80052c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// FL Motor
 8001058:	2104      	movs	r1, #4
 800105a:	4811      	ldr	r0, [pc, #68]	@ (80010a0 <init_motors+0xd8>)
 800105c:	f004 f932 	bl	80052c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// FR Motor
 8001060:	2108      	movs	r1, #8
 8001062:	480f      	ldr	r0, [pc, #60]	@ (80010a0 <init_motors+0xd8>)
 8001064:	f004 f92e 	bl	80052c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// RR Motor
 8001068:	210c      	movs	r1, #12
 800106a:	480d      	ldr	r0, [pc, #52]	@ (80010a0 <init_motors+0xd8>)
 800106c:	f004 f92a 	bl	80052c4 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, i);		// FR Motor
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);		// RR Motor
	  	HAL_Delay(15);
	  }
	*/
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);	// RL Motor
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <init_motors+0xd8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2200      	movs	r2, #0
 8001076:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);	// FL Motor
 8001078:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <init_motors+0xd8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2200      	movs	r2, #0
 800107e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);		// FR Motor
 8001080:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <init_motors+0xd8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2200      	movs	r2, #0
 8001086:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);		// RR Motor
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <init_motors+0xd8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2200      	movs	r2, #0
 800108e:	641a      	str	r2, [r3, #64]	@ 0x40


}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40020800 	.word	0x40020800
 8001098:	40020400 	.word	0x40020400
 800109c:	40020000 	.word	0x40020000
 80010a0:	20006adc 	.word	0x20006adc

080010a4 <Mecanum_Control>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);	// RR Motor
}


void Mecanum_Control(float vx_twist, float vy_twist, float wz_twist)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b093      	sub	sp, #76	@ 0x4c
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80010ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80010b2:	ed87 1a01 	vstr	s2, [r7, #4]

    static float vx_target = 0, vy_target = 0, w_target = 0;
    vx_target = ramp_step(vx_twist, vx_target, g_v_step);
 80010b6:	4bac      	ldr	r3, [pc, #688]	@ (8001368 <Mecanum_Control+0x2c4>)
 80010b8:	edd3 7a00 	vldr	s15, [r3]
 80010bc:	4bab      	ldr	r3, [pc, #684]	@ (800136c <Mecanum_Control+0x2c8>)
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	eeb0 1a47 	vmov.f32	s2, s14
 80010c6:	eef0 0a67 	vmov.f32	s1, s15
 80010ca:	ed97 0a03 	vldr	s0, [r7, #12]
 80010ce:	f7ff fefc 	bl	8000eca <ramp_step>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
 80010d6:	4ba4      	ldr	r3, [pc, #656]	@ (8001368 <Mecanum_Control+0x2c4>)
 80010d8:	edc3 7a00 	vstr	s15, [r3]
    vy_target = ramp_step(vy_twist, vy_target, g_v_step);
 80010dc:	4ba4      	ldr	r3, [pc, #656]	@ (8001370 <Mecanum_Control+0x2cc>)
 80010de:	edd3 7a00 	vldr	s15, [r3]
 80010e2:	4ba2      	ldr	r3, [pc, #648]	@ (800136c <Mecanum_Control+0x2c8>)
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	eeb0 1a47 	vmov.f32	s2, s14
 80010ec:	eef0 0a67 	vmov.f32	s1, s15
 80010f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80010f4:	f7ff fee9 	bl	8000eca <ramp_step>
 80010f8:	eef0 7a40 	vmov.f32	s15, s0
 80010fc:	4b9c      	ldr	r3, [pc, #624]	@ (8001370 <Mecanum_Control+0x2cc>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]
    w_target  = ramp_step(wz_twist,  w_target, g_wz_step_radps);
 8001102:	4b9c      	ldr	r3, [pc, #624]	@ (8001374 <Mecanum_Control+0x2d0>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	4b9b      	ldr	r3, [pc, #620]	@ (8001378 <Mecanum_Control+0x2d4>)
 800110a:	ed93 7a00 	vldr	s14, [r3]
 800110e:	eeb0 1a47 	vmov.f32	s2, s14
 8001112:	eef0 0a67 	vmov.f32	s1, s15
 8001116:	ed97 0a01 	vldr	s0, [r7, #4]
 800111a:	f7ff fed6 	bl	8000eca <ramp_step>
 800111e:	eef0 7a40 	vmov.f32	s15, s0
 8001122:	4b94      	ldr	r3, [pc, #592]	@ (8001374 <Mecanum_Control+0x2d0>)
 8001124:	edc3 7a00 	vstr	s15, [r3]

    // Desired wheel linear velocities
    float V_target[4];
    V_target[0] = +vx_target + vy_target - (A_SUM * w_target);  // RL
 8001128:	4b8f      	ldr	r3, [pc, #572]	@ (8001368 <Mecanum_Control+0x2c4>)
 800112a:	ed93 7a00 	vldr	s14, [r3]
 800112e:	4b90      	ldr	r3, [pc, #576]	@ (8001370 <Mecanum_Control+0x2cc>)
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001138:	4b8e      	ldr	r3, [pc, #568]	@ (8001374 <Mecanum_Control+0x2d0>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 800137c <Mecanum_Control+0x2d8>
 8001142:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001146:	ee77 7a67 	vsub.f32	s15, s14, s15
 800114a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    V_target[1] = +vx_target - vy_target - (A_SUM * w_target);  // FL
 800114e:	4b86      	ldr	r3, [pc, #536]	@ (8001368 <Mecanum_Control+0x2c4>)
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	4b86      	ldr	r3, [pc, #536]	@ (8001370 <Mecanum_Control+0x2cc>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800115e:	4b85      	ldr	r3, [pc, #532]	@ (8001374 <Mecanum_Control+0x2d0>)
 8001160:	edd3 7a00 	vldr	s15, [r3]
 8001164:	eddf 6a85 	vldr	s13, [pc, #532]	@ 800137c <Mecanum_Control+0x2d8>
 8001168:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    V_target[2] = +vx_target + vy_target + (A_SUM * w_target);  // FR
 8001174:	4b7c      	ldr	r3, [pc, #496]	@ (8001368 <Mecanum_Control+0x2c4>)
 8001176:	ed93 7a00 	vldr	s14, [r3]
 800117a:	4b7d      	ldr	r3, [pc, #500]	@ (8001370 <Mecanum_Control+0x2cc>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001184:	4b7b      	ldr	r3, [pc, #492]	@ (8001374 <Mecanum_Control+0x2d0>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 800137c <Mecanum_Control+0x2d8>
 800118e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001196:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    V_target[3] = +vx_target - vy_target + (A_SUM * w_target);  // RR
 800119a:	4b73      	ldr	r3, [pc, #460]	@ (8001368 <Mecanum_Control+0x2c4>)
 800119c:	ed93 7a00 	vldr	s14, [r3]
 80011a0:	4b73      	ldr	r3, [pc, #460]	@ (8001370 <Mecanum_Control+0x2cc>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011aa:	4b72      	ldr	r3, [pc, #456]	@ (8001374 <Mecanum_Control+0x2d0>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eddf 6a72 	vldr	s13, [pc, #456]	@ 800137c <Mecanum_Control+0x2d8>
 80011b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011bc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	 // PWM Conversion and CCR clamping
	setMotorDir(RL_INA_GPO_GPIO_Port, RL_INA_GPO_Pin,
 80011c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	2304      	movs	r3, #4
 80011ca:	4a6d      	ldr	r2, [pc, #436]	@ (8001380 <Mecanum_Control+0x2dc>)
 80011cc:	2108      	movs	r1, #8
 80011ce:	486c      	ldr	r0, [pc, #432]	@ (8001380 <Mecanum_Control+0x2dc>)
 80011d0:	f7ff feb5 	bl	8000f3e <setMotorDir>
				RL_INB_GPO_GPIO_Port, RL_INB_GPO_Pin, V_target[0]);

	setMotorDir(FL_INA_GPO_GPIO_Port, FL_INA_GPO_Pin,
 80011d4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011d8:	eeb0 0a67 	vmov.f32	s0, s15
 80011dc:	2302      	movs	r3, #2
 80011de:	4a68      	ldr	r2, [pc, #416]	@ (8001380 <Mecanum_Control+0x2dc>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	4867      	ldr	r0, [pc, #412]	@ (8001380 <Mecanum_Control+0x2dc>)
 80011e4:	f7ff feab 	bl	8000f3e <setMotorDir>
				FL_INB_GPO_GPIO_Port, FL_INB_GPO_Pin, V_target[1]);

	setMotorDir(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin,
 80011e8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	2320      	movs	r3, #32
 80011f2:	4a64      	ldr	r2, [pc, #400]	@ (8001384 <Mecanum_Control+0x2e0>)
 80011f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011f8:	4863      	ldr	r0, [pc, #396]	@ (8001388 <Mecanum_Control+0x2e4>)
 80011fa:	f7ff fea0 	bl	8000f3e <setMotorDir>
				FR_INB_GPO_GPIO_Port, FR_INB_GPO_Pin, V_target[2]);

	setMotorDir(RR_INA_GPO_GPIO_Port, RR_INA_GPO_Pin,
 80011fe:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001202:	eeb0 0a67 	vmov.f32	s0, s15
 8001206:	2310      	movs	r3, #16
 8001208:	4a5d      	ldr	r2, [pc, #372]	@ (8001380 <Mecanum_Control+0x2dc>)
 800120a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800120e:	485d      	ldr	r0, [pc, #372]	@ (8001384 <Mecanum_Control+0x2e0>)
 8001210:	f7ff fe95 	bl	8000f3e <setMotorDir>
				RR_INB_GPO_GPIO_Port, RR_INB_GPO_Pin, V_target[3]);


	int CCR[4];
	for (int i = 0; i < 4; i++)
 8001214:	2300      	movs	r3, #0
 8001216:	647b      	str	r3, [r7, #68]	@ 0x44
 8001218:	e043      	b.n	80012a2 <Mecanum_Control+0x1fe>
	{
		CCR[i] = (int)((fabsf(V_target[i]) / MAX_WHEEL_LINEAR_V) * CCR_MAX);
 800121a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	3348      	adds	r3, #72	@ 0x48
 8001220:	443b      	add	r3, r7
 8001222:	3b18      	subs	r3, #24
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	eef0 7ae7 	vabs.f32	s15, s15
 800122c:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 800138c <Mecanum_Control+0x2e8>
 8001230:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001234:	ee16 0a90 	vmov	r0, s13
 8001238:	f7ff fae0 	bl	80007fc <__aeabi_f2d>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b53      	ldr	r3, [pc, #332]	@ (8001390 <Mecanum_Control+0x2ec>)
 8001242:	f7ff f84d 	bl	80002e0 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff fbb5 	bl	80009bc <__aeabi_d2iz>
 8001252:	4602      	mov	r2, r0
 8001254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	3348      	adds	r3, #72	@ 0x48
 800125a:	443b      	add	r3, r7
 800125c:	f843 2c28 	str.w	r2, [r3, #-40]
		CCR[i] = (int)clamp((float)CCR[i], 0.0f, CCR_MAX);
 8001260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	3348      	adds	r3, #72	@ 0x48
 8001266:	443b      	add	r3, r7
 8001268:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001274:	ed9f 1a47 	vldr	s2, [pc, #284]	@ 8001394 <Mecanum_Control+0x2f0>
 8001278:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8001398 <Mecanum_Control+0x2f4>
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	f7ff fdfa 	bl	8000e78 <clamp>
 8001284:	eef0 7a40 	vmov.f32	s15, s0
 8001288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128c:	ee17 2a90 	vmov	r2, s15
 8001290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	3348      	adds	r3, #72	@ 0x48
 8001296:	443b      	add	r3, r7
 8001298:	f843 2c28 	str.w	r2, [r3, #-40]
	for (int i = 0; i < 4; i++)
 800129c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800129e:	3301      	adds	r3, #1
 80012a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80012a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	ddb8      	ble.n	800121a <Mecanum_Control+0x176>
        CCR[i] = (int)((fabsf(pid_output[i]) / MAX_WHEEL_LINEAR_V) * CCR_MAX);
        CCR[i] = (int)clamp((float)CCR[i], 0.0f, CCR_MAX);
    }
*/

    uint32_t TIM_CHANNELS[4] = {
 80012a8:	4b3c      	ldr	r3, [pc, #240]	@ (800139c <Mecanum_Control+0x2f8>)
 80012aa:	f107 0410 	add.w	r4, r7, #16
 80012ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    	TIM_CHANNEL_4  // RR
    };


    // Apply PWM
    for (int i = 0; i < 4; i++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80012b8:	e04e      	b.n	8001358 <Mecanum_Control+0x2b4>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNELS[i], CCR[i]);
 80012ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	3348      	adds	r3, #72	@ 0x48
 80012c0:	443b      	add	r3, r7
 80012c2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <Mecanum_Control+0x23a>
 80012ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	3348      	adds	r3, #72	@ 0x48
 80012d0:	443b      	add	r3, r7
 80012d2:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80012d6:	4b32      	ldr	r3, [pc, #200]	@ (80013a0 <Mecanum_Control+0x2fc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	635a      	str	r2, [r3, #52]	@ 0x34
 80012dc:	e02f      	b.n	800133e <Mecanum_Control+0x29a>
 80012de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	3348      	adds	r3, #72	@ 0x48
 80012e4:	443b      	add	r3, r7
 80012e6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d10a      	bne.n	8001304 <Mecanum_Control+0x260>
 80012ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	3348      	adds	r3, #72	@ 0x48
 80012f4:	443b      	add	r3, r7
 80012f6:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80012fa:	4b29      	ldr	r3, [pc, #164]	@ (80013a0 <Mecanum_Control+0x2fc>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	460b      	mov	r3, r1
 8001300:	6393      	str	r3, [r2, #56]	@ 0x38
 8001302:	e01c      	b.n	800133e <Mecanum_Control+0x29a>
 8001304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	3348      	adds	r3, #72	@ 0x48
 800130a:	443b      	add	r3, r7
 800130c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8001310:	2b08      	cmp	r3, #8
 8001312:	d10a      	bne.n	800132a <Mecanum_Control+0x286>
 8001314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	3348      	adds	r3, #72	@ 0x48
 800131a:	443b      	add	r3, r7
 800131c:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8001320:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <Mecanum_Control+0x2fc>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	460b      	mov	r3, r1
 8001326:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001328:	e009      	b.n	800133e <Mecanum_Control+0x29a>
 800132a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	3348      	adds	r3, #72	@ 0x48
 8001330:	443b      	add	r3, r7
 8001332:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <Mecanum_Control+0x2fc>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	460b      	mov	r3, r1
 800133c:	6413      	str	r3, [r2, #64]	@ 0x40
        g_ccr_applied[i] = CCR[i];
 800133e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	3348      	adds	r3, #72	@ 0x48
 8001344:	443b      	add	r3, r7
 8001346:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800134a:	4916      	ldr	r1, [pc, #88]	@ (80013a4 <Mecanum_Control+0x300>)
 800134c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 4; i++) {
 8001352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001354:	3301      	adds	r3, #1
 8001356:	643b      	str	r3, [r7, #64]	@ 0x40
 8001358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800135a:	2b03      	cmp	r3, #3
 800135c:	ddad      	ble.n	80012ba <Mecanum_Control+0x216>
    }
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	374c      	adds	r7, #76	@ 0x4c
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	20002380 	.word	0x20002380
 800136c:	20000000 	.word	0x20000000
 8001370:	20002384 	.word	0x20002384
 8001374:	20002388 	.word	0x20002388
 8001378:	20000004 	.word	0x20000004
 800137c:	3e99999a 	.word	0x3e99999a
 8001380:	40020800 	.word	0x40020800
 8001384:	40020400 	.word	0x40020400
 8001388:	40020000 	.word	0x40020000
 800138c:	3f28f5c3 	.word	0x3f28f5c3
 8001390:	407f4000 	.word	0x407f4000
 8001394:	43fa0000 	.word	0x43fa0000
 8001398:	00000000 	.word	0x00000000
 800139c:	0801b868 	.word	0x0801b868
 80013a0:	20006adc 	.word	0x20006adc
 80013a4:	2000233c 	.word	0x2000233c

080013a8 <compute_and_publish_odometry>:
extern volatile bool encUpdateFlag;

float x = 0.0f, y = 0.0f, theta = 0.0f;

void compute_and_publish_odometry(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	ed2d 8b02 	vpush	{d8}
 80013ae:	b094      	sub	sp, #80	@ 0x50
 80013b0:	af00      	add	r7, sp, #0
    if (!encUpdateFlag) return;
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <compute_and_publish_odometry+0x54>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f083 0301 	eor.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f040 822f 	bne.w	8001822 <compute_and_publish_odometry+0x47a>
    encUpdateFlag = 0;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <compute_and_publish_odometry+0x54>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]

    int16_t localDelta[NUM_WHEELS];
    for (int i = 0; i < NUM_WHEELS; i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013ce:	e00d      	b.n	80013ec <compute_and_publish_odometry+0x44>
        localDelta[i] = deltaEncoder[i];
 80013d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <compute_and_publish_odometry+0x58>)
 80013d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013d8:	b21a      	sxth	r2, r3
 80013da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	3350      	adds	r3, #80	@ 0x50
 80013e0:	443b      	add	r3, r7
 80013e2:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (int i = 0; i < NUM_WHEELS; i++)
 80013e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013e8:	3301      	adds	r3, #1
 80013ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	ddee      	ble.n	80013d0 <compute_and_publish_odometry+0x28>

    const float DT = 0.001f;
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <compute_and_publish_odometry+0x5c>)
 80013f4:	647b      	str	r3, [r7, #68]	@ 0x44
    float w[NUM_WHEELS];
    for (int i = 0; i < NUM_WHEELS; i++)
 80013f6:	2300      	movs	r3, #0
 80013f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013fa:	e027      	b.n	800144c <compute_and_publish_odometry+0xa4>
 80013fc:	20006e40 	.word	0x20006e40
 8001400:	20006e28 	.word	0x20006e28
 8001404:	3a83126f 	.word	0x3a83126f
 8001408:	3b86594b 	.word	0x3b86594b
 800140c:	3e99999a 	.word	0x3e99999a
 8001410:	3c4ccccd 	.word	0x3c4ccccd
        w[i] = localDelta[i] * RAD_PER_TICK / DT;
 8001414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	3350      	adds	r3, #80	@ 0x50
 800141a:	443b      	add	r3, r7
 800141c:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001428:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8001408 <compute_and_publish_odometry+0x60>
 800142c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001430:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	3350      	adds	r3, #80	@ 0x50
 800143e:	443b      	add	r3, r7
 8001440:	3b4c      	subs	r3, #76	@ 0x4c
 8001442:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < NUM_WHEELS; i++)
 8001446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001448:	3301      	adds	r3, #1
 800144a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800144c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800144e:	2b03      	cmp	r3, #3
 8001450:	dde0      	ble.n	8001414 <compute_and_publish_odometry+0x6c>

    float vx = (WHEEL_R / 4.0f) * (w[1] + w[2] + w[0] + w[3]);
 8001452:	ed97 7a02 	vldr	s14, [r7, #8]
 8001456:	edd7 7a03 	vldr	s15, [r7, #12]
 800145a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001462:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001466:	edd7 7a04 	vldr	s15, [r7, #16]
 800146a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146e:	ed1f 7a18 	vldr	s14, [pc, #-96]	@ 8001410 <compute_and_publish_odometry+0x68>
 8001472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001476:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float vy = (WHEEL_R / 4.0f) * (-w[1] + w[2] + w[0] - w[3]);
 800147a:	ed97 7a03 	vldr	s14, [r7, #12]
 800147e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001482:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001486:	edd7 7a01 	vldr	s15, [r7, #4]
 800148a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800148e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001496:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 8001410 <compute_and_publish_odometry+0x68>
 800149a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float wz = (WHEEL_R / 4.0f) * ((-w[1] + w[2] - w[0] + w[3]) / A_SUM);
 80014a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80014a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80014aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80014ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014be:	ed5f 6a2d 	vldr	s13, [pc, #-180]	@ 800140c <compute_and_publish_odometry+0x64>
 80014c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c6:	ed1f 7a2e 	vldr	s14, [pc, #-184]	@ 8001410 <compute_and_publish_odometry+0x68>
 80014ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ce:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    static float acc_vx = 0, acc_vy = 0, acc_wz = 0;
    static uint8_t count = 0;

    acc_vx += vx;
 80014d2:	4bc7      	ldr	r3, [pc, #796]	@ (80017f0 <compute_and_publish_odometry+0x448>)
 80014d4:	ed93 7a00 	vldr	s14, [r3]
 80014d8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	4bc3      	ldr	r3, [pc, #780]	@ (80017f0 <compute_and_publish_odometry+0x448>)
 80014e2:	edc3 7a00 	vstr	s15, [r3]
    acc_vy += vy;
 80014e6:	4bc3      	ldr	r3, [pc, #780]	@ (80017f4 <compute_and_publish_odometry+0x44c>)
 80014e8:	ed93 7a00 	vldr	s14, [r3]
 80014ec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80014f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f4:	4bbf      	ldr	r3, [pc, #764]	@ (80017f4 <compute_and_publish_odometry+0x44c>)
 80014f6:	edc3 7a00 	vstr	s15, [r3]
    acc_wz += wz;
 80014fa:	4bbf      	ldr	r3, [pc, #764]	@ (80017f8 <compute_and_publish_odometry+0x450>)
 80014fc:	ed93 7a00 	vldr	s14, [r3]
 8001500:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001508:	4bbb      	ldr	r3, [pc, #748]	@ (80017f8 <compute_and_publish_odometry+0x450>)
 800150a:	edc3 7a00 	vstr	s15, [r3]
    count++;
 800150e:	4bbb      	ldr	r3, [pc, #748]	@ (80017fc <compute_and_publish_odometry+0x454>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4bb9      	ldr	r3, [pc, #740]	@ (80017fc <compute_and_publish_odometry+0x454>)
 8001518:	701a      	strb	r2, [r3, #0]

    if (count >= 10)  {
 800151a:	4bb8      	ldr	r3, [pc, #736]	@ (80017fc <compute_and_publish_odometry+0x454>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b09      	cmp	r3, #9
 8001520:	f240 8180 	bls.w	8001824 <compute_and_publish_odometry+0x47c>

        vx = acc_vx / count;
 8001524:	4bb2      	ldr	r3, [pc, #712]	@ (80017f0 <compute_and_publish_odometry+0x448>)
 8001526:	edd3 6a00 	vldr	s13, [r3]
 800152a:	4bb4      	ldr	r3, [pc, #720]	@ (80017fc <compute_and_publish_odometry+0x454>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	ee07 3a90 	vmov	s15, r3
 8001532:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800153a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        vy = acc_vy / count;
 800153e:	4bad      	ldr	r3, [pc, #692]	@ (80017f4 <compute_and_publish_odometry+0x44c>)
 8001540:	edd3 6a00 	vldr	s13, [r3]
 8001544:	4bad      	ldr	r3, [pc, #692]	@ (80017fc <compute_and_publish_odometry+0x454>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001554:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        wz = acc_wz / count;
 8001558:	4ba7      	ldr	r3, [pc, #668]	@ (80017f8 <compute_and_publish_odometry+0x450>)
 800155a:	edd3 6a00 	vldr	s13, [r3]
 800155e:	4ba7      	ldr	r3, [pc, #668]	@ (80017fc <compute_and_publish_odometry+0x454>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800156e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        acc_vx = acc_vy = acc_wz = 0;
 8001572:	4ba1      	ldr	r3, [pc, #644]	@ (80017f8 <compute_and_publish_odometry+0x450>)
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	4b9f      	ldr	r3, [pc, #636]	@ (80017f8 <compute_and_publish_odometry+0x450>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a9d      	ldr	r2, [pc, #628]	@ (80017f4 <compute_and_publish_odometry+0x44c>)
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b9c      	ldr	r3, [pc, #624]	@ (80017f4 <compute_and_publish_odometry+0x44c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a9a      	ldr	r2, [pc, #616]	@ (80017f0 <compute_and_publish_odometry+0x448>)
 8001588:	6013      	str	r3, [r2, #0]
        count = 0;
 800158a:	4b9c      	ldr	r3, [pc, #624]	@ (80017fc <compute_and_publish_odometry+0x454>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]

        float dt_publish = 0.010f;
 8001590:	4b9b      	ldr	r3, [pc, #620]	@ (8001800 <compute_and_publish_odometry+0x458>)
 8001592:	637b      	str	r3, [r7, #52]	@ 0x34
        float dx = (vx * cosf(theta) - vy * sinf(theta)) * dt_publish;
 8001594:	4b9b      	ldr	r3, [pc, #620]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	eeb0 0a67 	vmov.f32	s0, s15
 800159e:	f019 fbe3 	bl	801ad68 <cosf>
 80015a2:	eeb0 7a40 	vmov.f32	s14, s0
 80015a6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80015aa:	ee27 8a27 	vmul.f32	s16, s14, s15
 80015ae:	4b95      	ldr	r3, [pc, #596]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	eeb0 0a67 	vmov.f32	s0, s15
 80015b8:	f019 fc1a 	bl	801adf0 <sinf>
 80015bc:	eeb0 7a40 	vmov.f32	s14, s0
 80015c0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80015c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80015cc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        float dy = (vx * sinf(theta) + vy * cosf(theta)) * dt_publish;
 80015d8:	4b8a      	ldr	r3, [pc, #552]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	f019 fc05 	bl	801adf0 <sinf>
 80015e6:	eeb0 7a40 	vmov.f32	s14, s0
 80015ea:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80015ee:	ee27 8a27 	vmul.f32	s16, s14, s15
 80015f2:	4b84      	ldr	r3, [pc, #528]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	eeb0 0a67 	vmov.f32	s0, s15
 80015fc:	f019 fbb4 	bl	801ad68 <cosf>
 8001600:	eeb0 7a40 	vmov.f32	s14, s0
 8001604:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001610:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001618:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        float dtheta = wz * dt_publish;
 800161c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001620:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        x += dx;
 800162c:	4b76      	ldr	r3, [pc, #472]	@ (8001808 <compute_and_publish_odometry+0x460>)
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163a:	4b73      	ldr	r3, [pc, #460]	@ (8001808 <compute_and_publish_odometry+0x460>)
 800163c:	edc3 7a00 	vstr	s15, [r3]
        y += dy;
 8001640:	4b72      	ldr	r3, [pc, #456]	@ (800180c <compute_and_publish_odometry+0x464>)
 8001642:	ed93 7a00 	vldr	s14, [r3]
 8001646:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800164a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164e:	4b6f      	ldr	r3, [pc, #444]	@ (800180c <compute_and_publish_odometry+0x464>)
 8001650:	edc3 7a00 	vstr	s15, [r3]
        theta += dtheta;
 8001654:	4b6b      	ldr	r3, [pc, #428]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 8001656:	ed93 7a00 	vldr	s14, [r3]
 800165a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800165e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001662:	4b68      	ldr	r3, [pc, #416]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 8001664:	edc3 7a00 	vstr	s15, [r3]

        if (theta > M_PI)  theta -= 2.0f * M_PI;
 8001668:	4b66      	ldr	r3, [pc, #408]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff f8c5 	bl	80007fc <__aeabi_f2d>
 8001672:	a357      	add	r3, pc, #348	@ (adr r3, 80017d0 <compute_and_publish_odometry+0x428>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7ff f996 	bl	80009a8 <__aeabi_dcmpgt>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d012      	beq.n	80016a8 <compute_and_publish_odometry+0x300>
 8001682:	4b60      	ldr	r3, [pc, #384]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f8b8 	bl	80007fc <__aeabi_f2d>
 800168c:	a352      	add	r3, pc, #328	@ (adr r3, 80017d8 <compute_and_publish_odometry+0x430>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f7fe ff53 	bl	800053c <__aeabi_dsub>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff f9b5 	bl	8000a0c <__aeabi_d2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	4a57      	ldr	r2, [pc, #348]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 80016a6:	6013      	str	r3, [r2, #0]
        if (theta < -M_PI) theta += 2.0f * M_PI;
 80016a8:	4b56      	ldr	r3, [pc, #344]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff f8a5 	bl	80007fc <__aeabi_f2d>
 80016b2:	a34b      	add	r3, pc, #300	@ (adr r3, 80017e0 <compute_and_publish_odometry+0x438>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7ff f958 	bl	800096c <__aeabi_dcmplt>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d012      	beq.n	80016e8 <compute_and_publish_odometry+0x340>
 80016c2:	4b50      	ldr	r3, [pc, #320]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f898 	bl	80007fc <__aeabi_f2d>
 80016cc:	a342      	add	r3, pc, #264	@ (adr r3, 80017d8 <compute_and_publish_odometry+0x430>)
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f7fe ff35 	bl	8000540 <__adddf3>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff f995 	bl	8000a0c <__aeabi_d2f>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a47      	ldr	r2, [pc, #284]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 80016e6:	6013      	str	r3, [r2, #0]

        odom_msg.pose.pose.position.x = x;
 80016e8:	4b47      	ldr	r3, [pc, #284]	@ (8001808 <compute_and_publish_odometry+0x460>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff f885 	bl	80007fc <__aeabi_f2d>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4946      	ldr	r1, [pc, #280]	@ (8001810 <compute_and_publish_odometry+0x468>)
 80016f8:	e9c1 2308 	strd	r2, r3, [r1, #32]
        odom_msg.pose.pose.position.y = y;
 80016fc:	4b43      	ldr	r3, [pc, #268]	@ (800180c <compute_and_publish_odometry+0x464>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff f87b 	bl	80007fc <__aeabi_f2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4941      	ldr	r1, [pc, #260]	@ (8001810 <compute_and_publish_odometry+0x468>)
 800170c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        odom_msg.pose.pose.orientation.z = sinf(theta / 2.0f);
 8001710:	4b3c      	ldr	r3, [pc, #240]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800171a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800171e:	eeb0 0a47 	vmov.f32	s0, s14
 8001722:	f019 fb65 	bl	801adf0 <sinf>
 8001726:	ee10 3a10 	vmov	r3, s0
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f866 	bl	80007fc <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4936      	ldr	r1, [pc, #216]	@ (8001810 <compute_and_publish_odometry+0x468>)
 8001736:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
        odom_msg.pose.pose.orientation.w = cosf(theta / 2.0f);
 800173a:	4b32      	ldr	r3, [pc, #200]	@ (8001804 <compute_and_publish_odometry+0x45c>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001744:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001748:	eeb0 0a47 	vmov.f32	s0, s14
 800174c:	f019 fb0c 	bl	801ad68 <cosf>
 8001750:	ee10 3a10 	vmov	r3, s0
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff f851 	bl	80007fc <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	492c      	ldr	r1, [pc, #176]	@ (8001810 <compute_and_publish_odometry+0x468>)
 8001760:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

        odom_msg.twist.twist.linear.x = vx;
 8001764:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001766:	f7ff f849 	bl	80007fc <__aeabi_f2d>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4928      	ldr	r1, [pc, #160]	@ (8001810 <compute_and_publish_odometry+0x468>)
 8001770:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178
        odom_msg.twist.twist.linear.y = vy;
 8001774:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001776:	f7ff f841 	bl	80007fc <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4924      	ldr	r1, [pc, #144]	@ (8001810 <compute_and_publish_odometry+0x468>)
 8001780:	e9c1 2360 	strd	r2, r3, [r1, #384]	@ 0x180
        odom_msg.twist.twist.angular.z = wz;
 8001784:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001786:	f7ff f839 	bl	80007fc <__aeabi_f2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4920      	ldr	r1, [pc, #128]	@ (8001810 <compute_and_publish_odometry+0x468>)
 8001790:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0

        uint64_t now_ns = rmw_uros_epoch_nanos();
 8001794:	f00b ff04 	bl	800d5a0 <rmw_uros_epoch_nanos>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        odom_msg.header.stamp.sec = (int32_t)(now_ns / 1000000000ULL);
 80017a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017a4:	a310      	add	r3, pc, #64	@ (adr r3, 80017e8 <compute_and_publish_odometry+0x440>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017aa:	f7ff f9cf 	bl	8000b4c <__aeabi_uldivmod>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4b17      	ldr	r3, [pc, #92]	@ (8001810 <compute_and_publish_odometry+0x468>)
 80017b4:	601a      	str	r2, [r3, #0]
        odom_msg.header.stamp.nanosec = (uint32_t)(now_ns % 1000000000ULL);
 80017b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017ba:	a30b      	add	r3, pc, #44	@ (adr r3, 80017e8 <compute_and_publish_odometry+0x440>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7ff f9c4 	bl	8000b4c <__aeabi_uldivmod>
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <compute_and_publish_odometry+0x468>)
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	e024      	b.n	8001814 <compute_and_publish_odometry+0x46c>
 80017ca:	bf00      	nop
 80017cc:	f3af 8000 	nop.w
 80017d0:	54442d18 	.word	0x54442d18
 80017d4:	400921fb 	.word	0x400921fb
 80017d8:	54442d18 	.word	0x54442d18
 80017dc:	401921fb 	.word	0x401921fb
 80017e0:	54442d18 	.word	0x54442d18
 80017e4:	c00921fb 	.word	0xc00921fb
 80017e8:	3b9aca00 	.word	0x3b9aca00
 80017ec:	00000000 	.word	0x00000000
 80017f0:	20002664 	.word	0x20002664
 80017f4:	20002668 	.word	0x20002668
 80017f8:	2000266c 	.word	0x2000266c
 80017fc:	20002670 	.word	0x20002670
 8001800:	3c23d70a 	.word	0x3c23d70a
 8001804:	20002660 	.word	0x20002660
 8001808:	20002658 	.word	0x20002658
 800180c:	2000265c 	.word	0x2000265c
 8001810:	20002390 	.word	0x20002390

        rcl_ret_t rc1 = rcl_publish(&odom_pub, &odom_msg, NULL);
 8001814:	2200      	movs	r2, #0
 8001816:	4906      	ldr	r1, [pc, #24]	@ (8001830 <compute_and_publish_odometry+0x488>)
 8001818:	4806      	ldr	r0, [pc, #24]	@ (8001834 <compute_and_publish_odometry+0x48c>)
 800181a:	f00a fc7d 	bl	800c118 <rcl_publish>
 800181e:	61f8      	str	r0, [r7, #28]
 8001820:	e000      	b.n	8001824 <compute_and_publish_odometry+0x47c>
    if (!encUpdateFlag) return;
 8001822:	bf00      	nop
        if (rc1 != RCL_RET_OK){	}
    }
}
 8001824:	3750      	adds	r7, #80	@ 0x50
 8001826:	46bd      	mov	sp, r7
 8001828:	ecbd 8b02 	vpop	{d8}
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20002390 	.word	0x20002390
 8001834:	2000238c 	.word	0x2000238c

08001838 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	@ 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001844:	f007 f972 	bl	8008b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001848:	4b5a      	ldr	r3, [pc, #360]	@ (80019b4 <pvPortMallocMicroROS+0x17c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001850:	f000 f986 	bl	8001b60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001854:	4b58      	ldr	r3, [pc, #352]	@ (80019b8 <pvPortMallocMicroROS+0x180>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	f040 8090 	bne.w	8001982 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01e      	beq.n	80018a6 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001868:	2208      	movs	r2, #8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f023 0307 	bic.w	r3, r3, #7
 8001880:	3308      	adds	r3, #8
 8001882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800188e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001892:	f383 8811 	msr	BASEPRI, r3
 8001896:	f3bf 8f6f 	isb	sy
 800189a:	f3bf 8f4f 	dsb	sy
 800189e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	e7fd      	b.n	80018a2 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d06a      	beq.n	8001982 <pvPortMallocMicroROS+0x14a>
 80018ac:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <pvPortMallocMicroROS+0x184>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d865      	bhi.n	8001982 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80018b6:	4b42      	ldr	r3, [pc, #264]	@ (80019c0 <pvPortMallocMicroROS+0x188>)
 80018b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80018ba:	4b41      	ldr	r3, [pc, #260]	@ (80019c0 <pvPortMallocMicroROS+0x188>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018c0:	e004      	b.n	80018cc <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d903      	bls.n	80018de <pvPortMallocMicroROS+0xa6>
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f1      	bne.n	80018c2 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80018de:	4b35      	ldr	r3, [pc, #212]	@ (80019b4 <pvPortMallocMicroROS+0x17c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d04c      	beq.n	8001982 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80018e8:	6a3b      	ldr	r3, [r7, #32]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2208      	movs	r2, #8
 80018ee:	4413      	add	r3, r2
 80018f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	1ad2      	subs	r2, r2, r3
 8001902:	2308      	movs	r3, #8
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	429a      	cmp	r2, r3
 8001908:	d920      	bls.n	800194c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800190a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 800191c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001920:	f383 8811 	msr	BASEPRI, r3
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	613b      	str	r3, [r7, #16]
}
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	1ad2      	subs	r2, r2, r3
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001946:	69b8      	ldr	r0, [r7, #24]
 8001948:	f000 f96c 	bl	8001c24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <pvPortMallocMicroROS+0x184>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	4a19      	ldr	r2, [pc, #100]	@ (80019bc <pvPortMallocMicroROS+0x184>)
 8001958:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <pvPortMallocMicroROS+0x184>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <pvPortMallocMicroROS+0x18c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d203      	bcs.n	800196e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <pvPortMallocMicroROS+0x184>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a16      	ldr	r2, [pc, #88]	@ (80019c4 <pvPortMallocMicroROS+0x18c>)
 800196c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4b11      	ldr	r3, [pc, #68]	@ (80019b8 <pvPortMallocMicroROS+0x180>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	431a      	orrs	r2, r3
 8001978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001982:	f007 f8e1 	bl	8008b48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001994:	f383 8811 	msr	BASEPRI, r3
 8001998:	f3bf 8f6f 	isb	sy
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	60fb      	str	r3, [r7, #12]
}
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80019a8:	69fb      	ldr	r3, [r7, #28]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3728      	adds	r7, #40	@ 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	2000627c 	.word	0x2000627c
 80019b8:	20006288 	.word	0x20006288
 80019bc:	20006280 	.word	0x20006280
 80019c0:	20006274 	.word	0x20006274
 80019c4:	20006284 	.word	0x20006284

080019c8 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d04a      	beq.n	8001a70 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80019da:	2308      	movs	r3, #8
 80019dc:	425b      	negs	r3, r3
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4413      	add	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <vPortFreeMicroROS+0xb0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10b      	bne.n	8001a0e <vPortFreeMicroROS+0x46>
	__asm volatile
 80019f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019fa:	f383 8811 	msr	BASEPRI, r3
 80019fe:	f3bf 8f6f 	isb	sy
 8001a02:	f3bf 8f4f 	dsb	sy
 8001a06:	60fb      	str	r3, [r7, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	e7fd      	b.n	8001a0a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <vPortFreeMicroROS+0x66>
	__asm volatile
 8001a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a1a:	f383 8811 	msr	BASEPRI, r3
 8001a1e:	f3bf 8f6f 	isb	sy
 8001a22:	f3bf 8f4f 	dsb	sy
 8001a26:	60bb      	str	r3, [r7, #8]
}
 8001a28:	bf00      	nop
 8001a2a:	bf00      	nop
 8001a2c:	e7fd      	b.n	8001a2a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <vPortFreeMicroROS+0xb0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d019      	beq.n	8001a70 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d115      	bne.n	8001a70 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <vPortFreeMicroROS+0xb0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	401a      	ands	r2, r3
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001a54:	f007 f86a 	bl	8008b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <vPortFreeMicroROS+0xb4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <vPortFreeMicroROS+0xb4>)
 8001a64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a66:	6938      	ldr	r0, [r7, #16]
 8001a68:	f000 f8dc 	bl	8001c24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001a6c:	f007 f86c 	bl	8008b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20006288 	.word	0x20006288
 8001a7c:	20006280 	.word	0x20006280

08001a80 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	425b      	negs	r3, r3
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	4413      	add	r3, r2
 8001a94:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <getBlockSize+0x38>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]

	return count;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20006288 	.word	0x20006288

08001abc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001ac6:	f007 f831 	bl	8008b2c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f7ff feb4 	bl	8001838 <pvPortMallocMicroROS>
 8001ad0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d017      	beq.n	8001b08 <pvPortReallocMicroROS+0x4c>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d014      	beq.n	8001b08 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffce 	bl	8001a80 <getBlockSize>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d201      	bcs.n	8001af8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	68b8      	ldr	r0, [r7, #8]
 8001afe:	f018 faf6 	bl	801a0ee <memcpy>

		vPortFreeMicroROS(pv);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ff60 	bl	80019c8 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001b08:	f007 f81e 	bl	8008b48 <xTaskResumeAll>

	return newmem;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001b20:	f007 f804 	bl	8008b2c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001b2e:	6978      	ldr	r0, [r7, #20]
 8001b30:	f7ff fe82 	bl	8001838 <pvPortMallocMicroROS>
 8001b34:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001b3a:	e004      	b.n	8001b46 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	613a      	str	r2, [r7, #16]
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	1e5a      	subs	r2, r3, #1
 8001b4a:	617a      	str	r2, [r7, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f5      	bne.n	8001b3c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001b50:	f006 fffa 	bl	8008b48 <xTaskResumeAll>
  	return mem;
 8001b54:	68fb      	ldr	r3, [r7, #12]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001b66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001b6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001b6c:	4b27      	ldr	r3, [pc, #156]	@ (8001c0c <prvHeapInit+0xac>)
 8001b6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00c      	beq.n	8001b94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3307      	adds	r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f023 0307 	bic.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c0c <prvHeapInit+0xac>)
 8001b90:	4413      	add	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b98:	4a1d      	ldr	r2, [pc, #116]	@ (8001c10 <prvHeapInit+0xb0>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <prvHeapInit+0xb0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	4413      	add	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001bac:	2208      	movs	r2, #8
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f023 0307 	bic.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a15      	ldr	r2, [pc, #84]	@ (8001c14 <prvHeapInit+0xb4>)
 8001bc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <prvHeapInit+0xb4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001bca:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <prvHeapInit+0xb4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	1ad2      	subs	r2, r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c14 <prvHeapInit+0xb4>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <prvHeapInit+0xb8>)
 8001bee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a09      	ldr	r2, [pc, #36]	@ (8001c1c <prvHeapInit+0xbc>)
 8001bf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001bf8:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <prvHeapInit+0xc0>)
 8001bfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001bfe:	601a      	str	r2, [r3, #0]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	20002674 	.word	0x20002674
 8001c10:	20006274 	.word	0x20006274
 8001c14:	2000627c 	.word	0x2000627c
 8001c18:	20006284 	.word	0x20006284
 8001c1c:	20006280 	.word	0x20006280
 8001c20:	20006288 	.word	0x20006288

08001c24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001c2c:	4b28      	ldr	r3, [pc, #160]	@ (8001cd0 <prvInsertBlockIntoFreeList+0xac>)
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e002      	b.n	8001c38 <prvInsertBlockIntoFreeList+0x14>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d8f7      	bhi.n	8001c32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d108      	bne.n	8001c66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	441a      	add	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	441a      	add	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d118      	bne.n	8001cac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <prvInsertBlockIntoFreeList+0xb0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d00d      	beq.n	8001ca2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	441a      	add	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e008      	b.n	8001cb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <prvInsertBlockIntoFreeList+0xb0>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e003      	b.n	8001cb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d002      	beq.n	8001cc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20006274 	.word	0x20006274
 8001cd4:	2000627c 	.word	0x2000627c

08001cd8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001ce6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001ce8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cec:	4904      	ldr	r1, [pc, #16]	@ (8001d00 <cubemx_transport_open+0x28>)
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f004 fbf8 	bl	80064e4 <HAL_UART_Receive_DMA>
    return true;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000628c 	.word	0x2000628c

08001d04 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001d12:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f004 fc0a 	bl	800652e <HAL_UART_DMAStop>
    return true;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001d38:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d11c      	bne.n	8001d80 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f004 fb4c 	bl	80063ec <HAL_UART_Transmit_DMA>
 8001d54:	4603      	mov	r3, r0
 8001d56:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001d58:	e002      	b.n	8001d60 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f005 fea4 	bl	8007aa8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001d60:	7cfb      	ldrb	r3, [r7, #19]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <cubemx_transport_write+0x4e>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d1f3      	bne.n	8001d5a <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001d72:	7cfb      	ldrb	r3, [r7, #19]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <cubemx_transport_write+0x58>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	e002      	b.n	8001d82 <cubemx_transport_write+0x5e>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	e000      	b.n	8001d82 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001d80:	2300      	movs	r3, #0
    }
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001da0:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da6:	b672      	cpsid	i
}
 8001da8:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001db6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e28 <cubemx_transport_read+0x9c>)
 8001db8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dba:	b662      	cpsie	i
}
 8001dbc:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f005 fe6f 	bl	8007aa8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001dca:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <cubemx_transport_read+0xa0>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <cubemx_transport_read+0x9c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d103      	bne.n	8001dde <cubemx_transport_read+0x52>
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbe3      	blt.n	8001da6 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001de2:	e011      	b.n	8001e08 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <cubemx_transport_read+0xa0>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	440b      	add	r3, r1
 8001dee:	4910      	ldr	r1, [pc, #64]	@ (8001e30 <cubemx_transport_read+0xa4>)
 8001df0:	5c8a      	ldrb	r2, [r1, r2]
 8001df2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001df4:	4b0d      	ldr	r3, [pc, #52]	@ (8001e2c <cubemx_transport_read+0xa0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001e2c <cubemx_transport_read+0xa0>)
 8001e00:	6013      	str	r3, [r2, #0]
        wrote++;
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	3301      	adds	r3, #1
 8001e06:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <cubemx_transport_read+0xa0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <cubemx_transport_read+0x9c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d003      	beq.n	8001e1c <cubemx_transport_read+0x90>
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d3e3      	bcc.n	8001de4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001e1c:	69bb      	ldr	r3, [r7, #24]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3720      	adds	r7, #32
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20006a90 	.word	0x20006a90
 8001e2c:	20006a8c 	.word	0x20006a8c
 8001e30:	2000628c 	.word	0x2000628c

08001e34 <nexus_bringup>:
volatile int16_t pastCount[4] 	 = {0};		// {RL, FL, FR, RR}
volatile bool encUpdateFlag 	 = 0;

void nexus_bringup(void);

void nexus_bringup(void){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim6);
 8001e38:	480b      	ldr	r0, [pc, #44]	@ (8001e68 <nexus_bringup+0x34>)
 8001e3a:	f003 f979 	bl	8005130 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001e3e:	213c      	movs	r1, #60	@ 0x3c
 8001e40:	480a      	ldr	r0, [pc, #40]	@ (8001e6c <nexus_bringup+0x38>)
 8001e42:	f003 fbad 	bl	80055a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001e46:	213c      	movs	r1, #60	@ 0x3c
 8001e48:	4809      	ldr	r0, [pc, #36]	@ (8001e70 <nexus_bringup+0x3c>)
 8001e4a:	f003 fba9 	bl	80055a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001e4e:	213c      	movs	r1, #60	@ 0x3c
 8001e50:	4808      	ldr	r0, [pc, #32]	@ (8001e74 <nexus_bringup+0x40>)
 8001e52:	f003 fba5 	bl	80055a0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001e56:	213c      	movs	r1, #60	@ 0x3c
 8001e58:	4807      	ldr	r0, [pc, #28]	@ (8001e78 <nexus_bringup+0x44>)
 8001e5a:	f003 fba1 	bl	80055a0 <HAL_TIM_Encoder_Start>

	init_motors();
 8001e5e:	f7ff f8b3 	bl	8000fc8 <init_motors>

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20006bb4 	.word	0x20006bb4
 8001e6c:	20006a94 	.word	0x20006a94
 8001e70:	20006b24 	.word	0x20006b24
 8001e74:	20006b6c 	.word	0x20006b6c
 8001e78:	20006bfc 	.word	0x20006bfc

08001e7c <main>:
 * END OF STEP X
 * --------------------------------------------------------------------------------------
*/

int main(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  HAL_Init();
 8001e80:	f001 fc18 	bl	80036b4 <HAL_Init>
  SystemClock_Config();
 8001e84:	f000 f826 	bl	8001ed4 <SystemClock_Config>
  MX_GPIO_Init();
 8001e88:	f000 fb1e 	bl	80024c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e8c:	f000 fade 	bl	800244c <MX_DMA_Init>
  MX_TIM1_Init();
 8001e90:	f000 f88e 	bl	8001fb0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001e94:	f000 f97a 	bl	800218c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e98:	f000 f9cc 	bl	8002234 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001e9c:	f000 fa54 	bl	8002348 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8001ea0:	f000 faaa 	bl	80023f8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001ea4:	f000 f8dc 	bl	8002060 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001ea8:	f000 fa18 	bl	80022dc <MX_TIM6_Init>

  osKernelInitialize();
 8001eac:	f005 fd20 	bl	80078f0 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001eb0:	4a05      	ldr	r2, [pc, #20]	@ (8001ec8 <main+0x4c>)
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <main+0x50>)
 8001eb6:	f005 fd65 	bl	8007984 <osThreadNew>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4a04      	ldr	r2, [pc, #16]	@ (8001ed0 <main+0x54>)
 8001ebe:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8001ec0:	f005 fd3a 	bl	8007938 <osKernelStart>

  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <main+0x48>
 8001ec8:	0801b8e8 	.word	0x0801b8e8
 8001ecc:	08002671 	.word	0x08002671
 8001ed0:	20006d4c 	.word	0x20006d4c

08001ed4 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b094      	sub	sp, #80	@ 0x50
 8001ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	2234      	movs	r2, #52	@ 0x34
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f018 f828 	bl	8019f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa8 <SystemClock_Config+0xd4>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	4a29      	ldr	r2, [pc, #164]	@ (8001fa8 <SystemClock_Config+0xd4>)
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f08:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <SystemClock_Config+0xd4>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f14:	2300      	movs	r3, #0
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <SystemClock_Config+0xd8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f20:	4a22      	ldr	r2, [pc, #136]	@ (8001fac <SystemClock_Config+0xd8>)
 8001f22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <SystemClock_Config+0xd8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3c:	2310      	movs	r3, #16
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f40:	2302      	movs	r3, #2
 8001f42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f44:	2300      	movs	r3, #0
 8001f46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f48:	2310      	movs	r3, #16
 8001f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f4c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001f50:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f52:	2304      	movs	r3, #4
 8001f54:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f56:	2302      	movs	r3, #2
 8001f58:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4618      	mov	r0, r3
 8001f64:	f002 fdf6 	bl	8004b54 <HAL_RCC_OscConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001f6e:	f000 fcd1 	bl	8002914 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f72:	230f      	movs	r3, #15
 8001f74:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f76:	2302      	movs	r3, #2
 8001f78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f002 fa64 	bl	800445c <HAL_RCC_ClockConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001f9a:	f000 fcbb 	bl	8002914 <Error_Handler>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	3750      	adds	r7, #80	@ 0x50
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40007000 	.word	0x40007000

08001fb0 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	@ 0x30
 8001fb4:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fb6:	f107 030c 	add.w	r3, r7, #12
 8001fba:	2224      	movs	r2, #36	@ 0x24
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f017 ffba 	bl	8019f38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001fcc:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <MX_TIM1_Init+0xa8>)
 8001fce:	4a23      	ldr	r2, [pc, #140]	@ (800205c <MX_TIM1_Init+0xac>)
 8001fd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fd2:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <MX_TIM1_Init+0xa8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002058 <MX_TIM1_Init+0xa8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <MX_TIM1_Init+0xa8>)
 8001fe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fe4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <MX_TIM1_Init+0xa8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fec:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MX_TIM1_Init+0xa8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <MX_TIM1_Init+0xa8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002000:	2301      	movs	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002010:	2301      	movs	r3, #1
 8002012:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	4619      	mov	r1, r3
 8002022:	480d      	ldr	r0, [pc, #52]	@ (8002058 <MX_TIM1_Init+0xa8>)
 8002024:	f003 fa16 	bl	8005454 <HAL_TIM_Encoder_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800202e:	f000 fc71 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	4619      	mov	r1, r3
 800203e:	4806      	ldr	r0, [pc, #24]	@ (8002058 <MX_TIM1_Init+0xa8>)
 8002040:	f004 f8f4 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800204a:	f000 fc63 	bl	8002914 <Error_Handler>
  }

}
 800204e:	bf00      	nop
 8002050:	3730      	adds	r7, #48	@ 0x30
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20006a94 	.word	0x20006a94
 800205c:	40010000 	.word	0x40010000

08002060 <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08e      	sub	sp, #56	@ 0x38
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002066:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	f107 0320 	add.w	r3, r7, #32
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
 800208c:	615a      	str	r2, [r3, #20]
 800208e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002090:	4b3d      	ldr	r3, [pc, #244]	@ (8002188 <MX_TIM2_Init+0x128>)
 8002092:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002096:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8002098:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <MX_TIM2_Init+0x128>)
 800209a:	2208      	movs	r2, #8
 800209c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800209e:	4b3a      	ldr	r3, [pc, #232]	@ (8002188 <MX_TIM2_Init+0x128>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 80020a4:	4b38      	ldr	r3, [pc, #224]	@ (8002188 <MX_TIM2_Init+0x128>)
 80020a6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80020aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <MX_TIM2_Init+0x128>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b2:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <MX_TIM2_Init+0x128>)
 80020b4:	2280      	movs	r2, #128	@ 0x80
 80020b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020b8:	4833      	ldr	r0, [pc, #204]	@ (8002188 <MX_TIM2_Init+0x128>)
 80020ba:	f002 ffe9 	bl	8005090 <HAL_TIM_Base_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80020c4:	f000 fc26 	bl	8002914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020d2:	4619      	mov	r1, r3
 80020d4:	482c      	ldr	r0, [pc, #176]	@ (8002188 <MX_TIM2_Init+0x128>)
 80020d6:	f003 fca3 	bl	8005a20 <HAL_TIM_ConfigClockSource>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80020e0:	f000 fc18 	bl	8002914 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020e4:	4828      	ldr	r0, [pc, #160]	@ (8002188 <MX_TIM2_Init+0x128>)
 80020e6:	f003 f893 	bl	8005210 <HAL_TIM_PWM_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80020f0:	f000 fc10 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020fc:	f107 0320 	add.w	r3, r7, #32
 8002100:	4619      	mov	r1, r3
 8002102:	4821      	ldr	r0, [pc, #132]	@ (8002188 <MX_TIM2_Init+0x128>)
 8002104:	f004 f892 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800210e:	f000 fc01 	bl	8002914 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002112:	2360      	movs	r3, #96	@ 0x60
 8002114:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2200      	movs	r2, #0
 8002126:	4619      	mov	r1, r3
 8002128:	4817      	ldr	r0, [pc, #92]	@ (8002188 <MX_TIM2_Init+0x128>)
 800212a:	f003 fbb7 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002134:	f000 fbee 	bl	8002914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	2204      	movs	r2, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4812      	ldr	r0, [pc, #72]	@ (8002188 <MX_TIM2_Init+0x128>)
 8002140:	f003 fbac 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800214a:	f000 fbe3 	bl	8002914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2208      	movs	r2, #8
 8002152:	4619      	mov	r1, r3
 8002154:	480c      	ldr	r0, [pc, #48]	@ (8002188 <MX_TIM2_Init+0x128>)
 8002156:	f003 fba1 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8002160:	f000 fbd8 	bl	8002914 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	220c      	movs	r2, #12
 8002168:	4619      	mov	r1, r3
 800216a:	4807      	ldr	r0, [pc, #28]	@ (8002188 <MX_TIM2_Init+0x128>)
 800216c:	f003 fb96 	bl	800589c <HAL_TIM_PWM_ConfigChannel>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8002176:	f000 fbcd 	bl	8002914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800217a:	4803      	ldr	r0, [pc, #12]	@ (8002188 <MX_TIM2_Init+0x128>)
 800217c:	f000 fedc 	bl	8002f38 <HAL_TIM_MspPostInit>

}
 8002180:	bf00      	nop
 8002182:	3738      	adds	r7, #56	@ 0x38
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20006adc 	.word	0x20006adc

0800218c <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08c      	sub	sp, #48	@ 0x30
 8002190:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	2224      	movs	r2, #36	@ 0x24
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f017 fecc 	bl	8019f38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80021a8:	4b20      	ldr	r3, [pc, #128]	@ (800222c <MX_TIM3_Init+0xa0>)
 80021aa:	4a21      	ldr	r2, [pc, #132]	@ (8002230 <MX_TIM3_Init+0xa4>)
 80021ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021ae:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <MX_TIM3_Init+0xa0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b4:	4b1d      	ldr	r3, [pc, #116]	@ (800222c <MX_TIM3_Init+0xa0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80021ba:	4b1c      	ldr	r3, [pc, #112]	@ (800222c <MX_TIM3_Init+0xa0>)
 80021bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c2:	4b1a      	ldr	r3, [pc, #104]	@ (800222c <MX_TIM3_Init+0xa0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c8:	4b18      	ldr	r3, [pc, #96]	@ (800222c <MX_TIM3_Init+0xa0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021ce:	2303      	movs	r3, #3
 80021d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021d6:	2301      	movs	r3, #1
 80021d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021e6:	2301      	movs	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	4619      	mov	r1, r3
 80021f8:	480c      	ldr	r0, [pc, #48]	@ (800222c <MX_TIM3_Init+0xa0>)
 80021fa:	f003 f92b 	bl	8005454 <HAL_TIM_Encoder_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002204:	f000 fb86 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	4619      	mov	r1, r3
 8002214:	4805      	ldr	r0, [pc, #20]	@ (800222c <MX_TIM3_Init+0xa0>)
 8002216:	f004 f809 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002220:	f000 fb78 	bl	8002914 <Error_Handler>
  }
}
 8002224:	bf00      	nop
 8002226:	3730      	adds	r7, #48	@ 0x30
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20006b24 	.word	0x20006b24
 8002230:	40000400 	.word	0x40000400

08002234 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08c      	sub	sp, #48	@ 0x30
 8002238:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	2224      	movs	r2, #36	@ 0x24
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f017 fe78 	bl	8019f38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002248:	1d3b      	adds	r3, r7, #4
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002250:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <MX_TIM4_Init+0xa0>)
 8002252:	4a21      	ldr	r2, [pc, #132]	@ (80022d8 <MX_TIM4_Init+0xa4>)
 8002254:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002256:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <MX_TIM4_Init+0xa0>)
 8002258:	2200      	movs	r2, #0
 800225a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <MX_TIM4_Init+0xa0>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002262:	4b1c      	ldr	r3, [pc, #112]	@ (80022d4 <MX_TIM4_Init+0xa0>)
 8002264:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002268:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226a:	4b1a      	ldr	r3, [pc, #104]	@ (80022d4 <MX_TIM4_Init+0xa0>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002270:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <MX_TIM4_Init+0xa0>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002276:	2303      	movs	r3, #3
 8002278:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800227e:	2301      	movs	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800228e:	2301      	movs	r3, #1
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002292:	2300      	movs	r3, #0
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	4619      	mov	r1, r3
 80022a0:	480c      	ldr	r0, [pc, #48]	@ (80022d4 <MX_TIM4_Init+0xa0>)
 80022a2:	f003 f8d7 	bl	8005454 <HAL_TIM_Encoder_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80022ac:	f000 fb32 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b0:	2300      	movs	r3, #0
 80022b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	4805      	ldr	r0, [pc, #20]	@ (80022d4 <MX_TIM4_Init+0xa0>)
 80022be:	f003 ffb5 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80022c8:	f000 fb24 	bl	8002914 <Error_Handler>
  }
}
 80022cc:	bf00      	nop
 80022ce:	3730      	adds	r7, #48	@ 0x30
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20006b6c 	.word	0x20006b6c
 80022d8:	40000800 	.word	0x40000800

080022dc <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0


  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e2:	463b      	mov	r3, r7
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]


  htim6.Instance = TIM6;
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <MX_TIM6_Init+0x64>)
 80022ec:	4a15      	ldr	r2, [pc, #84]	@ (8002344 <MX_TIM6_Init+0x68>)
 80022ee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 80022f0:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <MX_TIM6_Init+0x64>)
 80022f2:	2253      	movs	r2, #83	@ 0x53
 80022f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <MX_TIM6_Init+0x64>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80022fc:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <MX_TIM6_Init+0x64>)
 80022fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002302:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002304:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <MX_TIM6_Init+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800230a:	480d      	ldr	r0, [pc, #52]	@ (8002340 <MX_TIM6_Init+0x64>)
 800230c:	f002 fec0 	bl	8005090 <HAL_TIM_Base_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002316:	f000 fafd 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002322:	463b      	mov	r3, r7
 8002324:	4619      	mov	r1, r3
 8002326:	4806      	ldr	r0, [pc, #24]	@ (8002340 <MX_TIM6_Init+0x64>)
 8002328:	f003 ff80 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002332:	f000 faef 	bl	8002914 <Error_Handler>
  }

}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20006bb4 	.word	0x20006bb4
 8002344:	40001000 	.word	0x40001000

08002348 <MX_TIM8_Init>:

static void MX_TIM8_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	@ 0x30
 800234c:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	2224      	movs	r2, #36	@ 0x24
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f017 fdee 	bl	8019f38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8002364:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <MX_TIM8_Init+0xa8>)
 8002366:	4a23      	ldr	r2, [pc, #140]	@ (80023f4 <MX_TIM8_Init+0xac>)
 8002368:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800236a:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <MX_TIM8_Init+0xa8>)
 800236c:	2200      	movs	r2, #0
 800236e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002370:	4b1f      	ldr	r3, [pc, #124]	@ (80023f0 <MX_TIM8_Init+0xa8>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002376:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <MX_TIM8_Init+0xa8>)
 8002378:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800237c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237e:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <MX_TIM8_Init+0xa8>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002384:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <MX_TIM8_Init+0xa8>)
 8002386:	2200      	movs	r2, #0
 8002388:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238a:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <MX_TIM8_Init+0xa8>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002390:	2303      	movs	r3, #3
 8002392:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002398:	2301      	movs	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023a4:	2300      	movs	r3, #0
 80023a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023a8:	2301      	movs	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	4619      	mov	r1, r3
 80023ba:	480d      	ldr	r0, [pc, #52]	@ (80023f0 <MX_TIM8_Init+0xa8>)
 80023bc:	f003 f84a 	bl	8005454 <HAL_TIM_Encoder_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80023c6:	f000 faa5 	bl	8002914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4806      	ldr	r0, [pc, #24]	@ (80023f0 <MX_TIM8_Init+0xa8>)
 80023d8:	f003 ff28 	bl	800622c <HAL_TIMEx_MasterConfigSynchronization>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80023e2:	f000 fa97 	bl	8002914 <Error_Handler>
  }
}
 80023e6:	bf00      	nop
 80023e8:	3730      	adds	r7, #48	@ 0x30
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20006bfc 	.word	0x20006bfc
 80023f4:	40010400 	.word	0x40010400

080023f8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 80023fc:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <MX_USART2_UART_Init+0x4c>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	@ (8002448 <MX_USART2_UART_Init+0x50>)
 8002400:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002402:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <MX_USART2_UART_Init+0x4c>)
 8002404:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002408:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800240a:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <MX_USART2_UART_Init+0x4c>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002410:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <MX_USART2_UART_Init+0x4c>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002416:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <MX_USART2_UART_Init+0x4c>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800241c:	4b09      	ldr	r3, [pc, #36]	@ (8002444 <MX_USART2_UART_Init+0x4c>)
 800241e:	220c      	movs	r2, #12
 8002420:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002422:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <MX_USART2_UART_Init+0x4c>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <MX_USART2_UART_Init+0x4c>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	@ (8002444 <MX_USART2_UART_Init+0x4c>)
 8002430:	f003 ff8c 	bl	800634c <HAL_UART_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800243a:	f000 fa6b 	bl	8002914 <Error_Handler>
  }


}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20006c44 	.word	0x20006c44
 8002448:	40004400 	.word	0x40004400

0800244c <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0

  __HAL_RCC_DMA1_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b1b      	ldr	r3, [pc, #108]	@ (80024c4 <MX_DMA_Init+0x78>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	4a1a      	ldr	r2, [pc, #104]	@ (80024c4 <MX_DMA_Init+0x78>)
 800245c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002460:	6313      	str	r3, [r2, #48]	@ 0x30
 8002462:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <MX_DMA_Init+0x78>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <MX_DMA_Init+0x78>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a13      	ldr	r2, [pc, #76]	@ (80024c4 <MX_DMA_Init+0x78>)
 8002478:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <MX_DMA_Init+0x78>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]


  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2105      	movs	r1, #5
 800248e:	2010      	movs	r0, #16
 8002490:	f001 fa0a 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002494:	2010      	movs	r0, #16
 8002496:	f001 fa23 	bl	80038e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2105      	movs	r1, #5
 800249e:	2011      	movs	r0, #17
 80024a0:	f001 fa02 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024a4:	2011      	movs	r0, #17
 80024a6:	f001 fa1b 	bl	80038e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2105      	movs	r1, #5
 80024ae:	2038      	movs	r0, #56	@ 0x38
 80024b0:	f001 f9fa 	bl	80038a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024b4:	2038      	movs	r0, #56	@ 0x38
 80024b6:	f001 fa13 	bl	80038e0 <HAL_NVIC_EnableIRQ>

}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ce:	f107 0314 	add.w	r3, r7, #20
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	4b3f      	ldr	r3, [pc, #252]	@ (80025e0 <MX_GPIO_Init+0x118>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	4a3e      	ldr	r2, [pc, #248]	@ (80025e0 <MX_GPIO_Init+0x118>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ee:	4b3c      	ldr	r3, [pc, #240]	@ (80025e0 <MX_GPIO_Init+0x118>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <MX_GPIO_Init+0x118>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a37      	ldr	r2, [pc, #220]	@ (80025e0 <MX_GPIO_Init+0x118>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <MX_GPIO_Init+0x118>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	4b31      	ldr	r3, [pc, #196]	@ (80025e0 <MX_GPIO_Init+0x118>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	4a30      	ldr	r2, [pc, #192]	@ (80025e0 <MX_GPIO_Init+0x118>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	6313      	str	r3, [r2, #48]	@ 0x30
 8002526:	4b2e      	ldr	r3, [pc, #184]	@ (80025e0 <MX_GPIO_Init+0x118>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <MX_GPIO_Init+0x118>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	4a29      	ldr	r2, [pc, #164]	@ (80025e0 <MX_GPIO_Init+0x118>)
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	6313      	str	r3, [r2, #48]	@ 0x30
 8002542:	4b27      	ldr	r3, [pc, #156]	@ (80025e0 <MX_GPIO_Init+0x118>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]


  HAL_GPIO_WritePin(GPIOC, FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 800254e:	2200      	movs	r2, #0
 8002550:	f640 413f 	movw	r1, #3135	@ 0xc3f
 8002554:	4823      	ldr	r0, [pc, #140]	@ (80025e4 <MX_GPIO_Init+0x11c>)
 8002556:	f001 ff67 	bl	8004428 <HAL_GPIO_WritePin>
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RL_VDD_GPO_Pin|FL_VDD_GPO_Pin, GPIO_PIN_RESET);


  HAL_GPIO_WritePin(GPIOB, RR_INA_GPO_Pin|FR_INB_GPO_Pin, GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002560:	4821      	ldr	r0, [pc, #132]	@ (80025e8 <MX_GPIO_Init+0x120>)
 8002562:	f001 ff61 	bl	8004428 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOC, RR_VDD_GPO_Pin|FR_VDD_GPO_Pin, GPIO_PIN_SET);
 8002566:	2201      	movs	r2, #1
 8002568:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800256c:	481d      	ldr	r0, [pc, #116]	@ (80025e4 <MX_GPIO_Init+0x11c>)
 800256e:	f001 ff5b 	bl	8004428 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002578:	481c      	ldr	r0, [pc, #112]	@ (80025ec <MX_GPIO_Init+0x124>)
 800257a:	f001 ff55 	bl	8004428 <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 800257e:	f640 733f 	movw	r3, #3903	@ 0xf3f
 8002582:	617b      	str	r3, [r7, #20]
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RR_VDD_GPO_Pin|FR_VDD_GPO_Pin
                          |RL_VDD_GPO_Pin|FL_VDD_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002584:	2301      	movs	r3, #1
 8002586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4619      	mov	r1, r3
 8002596:	4813      	ldr	r0, [pc, #76]	@ (80025e4 <MX_GPIO_Init+0x11c>)
 8002598:	f001 fdb2 	bl	8004100 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RR_INA_GPO_Pin|FR_INB_GPO_Pin;
 800259c:	f242 0320 	movw	r3, #8224	@ 0x2020
 80025a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a2:	2301      	movs	r3, #1
 80025a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	480c      	ldr	r0, [pc, #48]	@ (80025e8 <MX_GPIO_Init+0x120>)
 80025b6:	f001 fda3 	bl	8004100 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FR_INA_GPO_Pin;
 80025ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c0:	2301      	movs	r3, #1
 80025c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FR_INA_GPO_GPIO_Port, &GPIO_InitStruct);
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4619      	mov	r1, r3
 80025d2:	4806      	ldr	r0, [pc, #24]	@ (80025ec <MX_GPIO_Init+0x124>)
 80025d4:	f001 fd94 	bl	8004100 <HAL_GPIO_Init>

}
 80025d8:	bf00      	nop
 80025da:	3728      	adds	r7, #40	@ 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020400 	.word	0x40020400
 80025ec:	40020000 	.word	0x40020000

080025f0 <odom_timer_cb>:
 * Keeps callbacks lightweight — avoids blocking the micro-ROS executor.
 *
 * --------------------------------------------------------------------------------------
 */
void odom_timer_cb(rcl_timer_t * timer, int64_t last_call_time)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	e9c7 2300 	strd	r2, r3, [r7]
    (void) last_call_time;      // Prevent unused variable warning

    if (timer == NULL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <odom_timer_cb+0x18>
        return;                 // Safety check: avoid null pointer crash

    compute_and_publish_odometry();   // Run the actual odometry computation (user code)
 8002602:	f7fe fed1 	bl	80013a8 <compute_and_publish_odometry>
 8002606:	e000      	b.n	800260a <odom_timer_cb+0x1a>
        return;                 // Safety check: avoid null pointer crash
 8002608:	bf00      	nop
}
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <twist_callback>:

// --- Callback ---
void twist_callback(const void * msgin)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
    const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *) msgin;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	617b      	str	r3, [r7, #20]

    // Extract velocity commands (SI units)
    float vx = msg->linear.x;   // forward/backward [m/s]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	4610      	mov	r0, r2
 8002624:	4619      	mov	r1, r3
 8002626:	f7fe f9f1 	bl	8000a0c <__aeabi_d2f>
 800262a:	4603      	mov	r3, r0
 800262c:	613b      	str	r3, [r7, #16]
    float vy = msg->linear.y;   // lateral [m/s]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f7fe f9e8 	bl	8000a0c <__aeabi_d2f>
 800263c:	4603      	mov	r3, r0
 800263e:	60fb      	str	r3, [r7, #12]
    float wz = msg->angular.z;  // rotation [rad/s]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	f7fe f9df 	bl	8000a0c <__aeabi_d2f>
 800264e:	4603      	mov	r3, r0
 8002650:	60bb      	str	r3, [r7, #8]
    if ((osKernelGetTickCount() - last_cmd_tick) > CMD_TIMEOUT_MS) {
    	Mecanum_Control(0.0f, 0.0f, 0.0f);  // stop robot
	}

     */
    Mecanum_Control(vx, vy, wz);
 8002652:	ed97 1a02 	vldr	s2, [r7, #8]
 8002656:	edd7 0a03 	vldr	s1, [r7, #12]
 800265a:	ed97 0a04 	vldr	s0, [r7, #16]
 800265e:	f7fe fd21 	bl	80010a4 <Mecanum_Control>
}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	0000      	movs	r0, r0
 800266c:	0000      	movs	r0, r0
	...

08002670 <StartDefaultTask>:
 *
 * ======================================================================================
 */

void StartDefaultTask(void *argument)
{
 8002670:	b5b0      	push	{r4, r5, r7, lr}
 8002672:	b098      	sub	sp, #96	@ 0x60
 8002674:	af02      	add	r7, sp, #8
 8002676:	61f8      	str	r0, [r7, #28]

	/*
	  *  Initialize peripherals, motor controllers, encoders, and sensors.
	  *  This part is specific to the robot platform.
	  */
	  nexus_bringup();  // Custom board-level init
 8002678:	f7ff fbdc 	bl	8001e34 <nexus_bringup>
	  for (int i = 0; i < 20; ++i) {
 800267c:	2300      	movs	r3, #0
 800267e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002680:	e005      	b.n	800268e <StartDefaultTask+0x1e>
	        osDelay(100); // short delay to let peripherals stabilize
 8002682:	2064      	movs	r0, #100	@ 0x64
 8002684:	f005 fa10 	bl	8007aa8 <osDelay>
	  for (int i = 0; i < 20; ++i) {
 8002688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800268a:	3301      	adds	r3, #1
 800268c:	657b      	str	r3, [r7, #84]	@ 0x54
 800268e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002690:	2b13      	cmp	r3, #19
 8002692:	ddf6      	ble.n	8002682 <StartDefaultTask+0x12>
	 *  This binds micro-ROS to a communication channel (here UART2).
	 *  The transport functions were defined earlier in transport_cubemx.c.
	 *
	 *    Change &huart2 to &huartX if you use another UART.
	 */
	  rmw_uros_set_custom_transport(
 8002694:	4b4e      	ldr	r3, [pc, #312]	@ (80027d0 <StartDefaultTask+0x160>)
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	4b4e      	ldr	r3, [pc, #312]	@ (80027d4 <StartDefaultTask+0x164>)
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4b4e      	ldr	r3, [pc, #312]	@ (80027d8 <StartDefaultTask+0x168>)
 800269e:	4a4f      	ldr	r2, [pc, #316]	@ (80027dc <StartDefaultTask+0x16c>)
 80026a0:	494f      	ldr	r1, [pc, #316]	@ (80027e0 <StartDefaultTask+0x170>)
 80026a2:	2001      	movs	r0, #1
 80026a4:	f00a fd64 	bl	800d170 <rmw_uros_set_custom_transport>

	  /*
	  *  Replaces default malloc/free with thread-safe versions
	  *  that use FreeRTOS heap functions or user static pool.
	  */
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80026a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026ac:	4618      	mov	r0, r3
 80026ae:	f00a fc85 	bl	800cfbc <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate      = microros_allocate;
 80026b2:	4b4c      	ldr	r3, [pc, #304]	@ (80027e4 <StartDefaultTask+0x174>)
 80026b4:	633b      	str	r3, [r7, #48]	@ 0x30
	  freeRTOS_allocator.deallocate    = microros_deallocate;
 80026b6:	4b4c      	ldr	r3, [pc, #304]	@ (80027e8 <StartDefaultTask+0x178>)
 80026b8:	637b      	str	r3, [r7, #52]	@ 0x34
	  freeRTOS_allocator.reallocate    = microros_reallocate;
 80026ba:	4b4c      	ldr	r3, [pc, #304]	@ (80027ec <StartDefaultTask+0x17c>)
 80026bc:	63bb      	str	r3, [r7, #56]	@ 0x38
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 80026be:	4b4c      	ldr	r3, [pc, #304]	@ (80027f0 <StartDefaultTask+0x180>)
 80026c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  rcl_ret_t rc1 =  rcutils_set_default_allocator(&freeRTOS_allocator);
 80026c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026c6:	4618      	mov	r0, r3
 80026c8:	f00a fc94 	bl	800cff4 <rcutils_set_default_allocator>
 80026cc:	4603      	mov	r3, r0
 80026ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	 /*
	  *  micro-ROS communicates over XRCE-DDS; the Agent must be running
	  *  on the PC (typically `ros2 run micro_ros_agent micro_ros_agent serial ...`)
	  *  before this ping succeeds.
	  */
	  for (int i = 0; i < 50; ++i) {
 80026d0:	2300      	movs	r3, #0
 80026d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80026d4:	e00c      	b.n	80026f0 <StartDefaultTask+0x80>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 80026d6:	2101      	movs	r1, #1
 80026d8:	2064      	movs	r0, #100	@ 0x64
 80026da:	f00a fd5f 	bl	800d19c <rmw_uros_ping_agent>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <StartDefaultTask+0x88>
	    osDelay(100);
 80026e4:	2064      	movs	r0, #100	@ 0x64
 80026e6:	f005 f9df 	bl	8007aa8 <osDelay>
	  for (int i = 0; i < 50; ++i) {
 80026ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ec:	3301      	adds	r3, #1
 80026ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80026f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026f2:	2b31      	cmp	r3, #49	@ 0x31
 80026f4:	ddef      	ble.n	80026d6 <StartDefaultTask+0x66>
 80026f6:	e000      	b.n	80026fa <StartDefaultTask+0x8a>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 80026f8:	bf00      	nop
	  */

	  /*
	  *  These are the core micro-ROS entities for the MCU.
	  */
	  allocator = rcl_get_default_allocator();			 // Retrieve active allocator
 80026fa:	4c3e      	ldr	r4, [pc, #248]	@ (80027f4 <StartDefaultTask+0x184>)
 80026fc:	463b      	mov	r3, r7
 80026fe:	4618      	mov	r0, r3
 8002700:	f00a fc6a 	bl	800cfd8 <rcutils_get_default_allocator>
 8002704:	4625      	mov	r5, r4
 8002706:	463c      	mov	r4, r7
 8002708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800270a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	602b      	str	r3, [r5, #0]
	  rclc_support_init(&support, 0, NULL, &allocator);	 // Init context with default args
 8002710:	4b38      	ldr	r3, [pc, #224]	@ (80027f4 <StartDefaultTask+0x184>)
 8002712:	2200      	movs	r2, #0
 8002714:	2100      	movs	r1, #0
 8002716:	4838      	ldr	r0, [pc, #224]	@ (80027f8 <StartDefaultTask+0x188>)
 8002718:	f00a fb28 	bl	800cd6c <rclc_support_init>

	  rcl_node_t node_base_controller;					 // This MCU node		  rcl_node_t * node,

	  rclc_node_init_default(
 800271c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002720:	4b35      	ldr	r3, [pc, #212]	@ (80027f8 <StartDefaultTask+0x188>)
 8002722:	4a36      	ldr	r2, [pc, #216]	@ (80027fc <StartDefaultTask+0x18c>)
 8002724:	4936      	ldr	r1, [pc, #216]	@ (8002800 <StartDefaultTask+0x190>)
 8002726:	f00a fb6b 	bl	800ce00 <rclc_node_init_default>
			  &node_base_controller,		 						//  param1 => Node
			  "base_controller",									//  param2 => Name
			  "",													//  param3 => Namespace
			  &support);											//  param4 => support to init the node

	  (void) rmw_uros_sync_session(1000);							// Synchronize session timing
 800272a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800272e:	f00a ff45 	bl	800d5bc <rmw_uros_sync_session>
	  */

	 /*
	  *  Publishes to the `/odom` topic using the standard nav_msgs/Odometry type.
	  */
	  rcl_ret_t rc7 = rclc_publisher_init_default(
 8002732:	f009 fb2d 	bl	800bd90 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8002736:	4602      	mov	r2, r0
 8002738:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800273c:	4b31      	ldr	r3, [pc, #196]	@ (8002804 <StartDefaultTask+0x194>)
 800273e:	4832      	ldr	r0, [pc, #200]	@ (8002808 <StartDefaultTask+0x198>)
 8002740:	f00a fb9a 	bl	800ce78 <rclc_publisher_init_default>
 8002744:	64b8      	str	r0, [r7, #72]	@ 0x48
	  }

	  /*
	   * The message header and frame ID are prepared once and reused.
	   */
	  rosidl_runtime_c__String__init(&odom_msg.header.frame_id);
 8002746:	4831      	ldr	r0, [pc, #196]	@ (800280c <StartDefaultTask+0x19c>)
 8002748:	f00b fac8 	bl	800dcdc <rosidl_runtime_c__String__init>
	  rosidl_runtime_c__String__assign(&odom_msg.header.frame_id, "odom");
 800274c:	492d      	ldr	r1, [pc, #180]	@ (8002804 <StartDefaultTask+0x194>)
 800274e:	482f      	ldr	r0, [pc, #188]	@ (800280c <StartDefaultTask+0x19c>)
 8002750:	f00b fb26 	bl	800dda0 <rosidl_runtime_c__String__assign>
	  odom_msg.header.stamp.sec = 0;
 8002754:	4b2e      	ldr	r3, [pc, #184]	@ (8002810 <StartDefaultTask+0x1a0>)
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
	  odom_msg.header.stamp.nanosec = 0;
 800275a:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <StartDefaultTask+0x1a0>)
 800275c:	2200      	movs	r2, #0
 800275e:	605a      	str	r2, [r3, #4]

	  //rcl_ret_t rc8 = rclc_subscribtion_init_defaul();
	  rcl_ret_t rc8 = rclc_subscription_init_default(
 8002760:	f007 fe72 	bl	800a448 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8002764:	4602      	mov	r2, r0
 8002766:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <StartDefaultTask+0x1a4>)
 800276c:	482a      	ldr	r0, [pc, #168]	@ (8002818 <StartDefaultTask+0x1a8>)
 800276e:	f00a fbb7 	bl	800cee0 <rclc_subscription_init_default>
 8002772:	6478      	str	r0, [r7, #68]	@ 0x44

	 /*
	  *  The executor manages all callbacks (timers, subscriptions, etc.).
	  *  Each timer is a periodic callback.
	  */
	  rclc_executor_init(&executor, &support.context, 4, &allocator);
 8002774:	4b1f      	ldr	r3, [pc, #124]	@ (80027f4 <StartDefaultTask+0x184>)
 8002776:	2204      	movs	r2, #4
 8002778:	491f      	ldr	r1, [pc, #124]	@ (80027f8 <StartDefaultTask+0x188>)
 800277a:	4828      	ldr	r0, [pc, #160]	@ (800281c <StartDefaultTask+0x1ac>)
 800277c:	f00a f87c 	bl	800c878 <rclc_executor_init>

	  rcl_timer_t timer_odom;

	  // Here, we set up odometry @ 100 Hz.
	  rclc_timer_init_default2(
 8002780:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002784:	2301      	movs	r3, #1
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	4b25      	ldr	r3, [pc, #148]	@ (8002820 <StartDefaultTask+0x1b0>)
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4a25      	ldr	r2, [pc, #148]	@ (8002824 <StartDefaultTask+0x1b4>)
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	4919      	ldr	r1, [pc, #100]	@ (80027f8 <StartDefaultTask+0x188>)
 8002794:	f00a fbd8 	bl	800cf48 <rclc_timer_init_default2>
			  &support,					// Ensures entities share the same ROS context, clock, and memory and Holds micro-ROS runtime context and allocator
			  RCL_MS_TO_NS(10),			// callback period = 10 ms
			  odom_timer_cb,			// callback function
			  true);	 				// autostart = true

	  rclc_executor_add_timer(&executor, &timer_odom);
 8002798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800279c:	4619      	mov	r1, r3
 800279e:	481f      	ldr	r0, [pc, #124]	@ (800281c <StartDefaultTask+0x1ac>)
 80027a0:	f00a f90a 	bl	800c9b8 <rclc_executor_add_timer>

	  rclc_executor_add_subscription(&executor, &twist_sub, &twist_msg, &twist_callback, ON_NEW_DATA);
 80027a4:	2300      	movs	r3, #0
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002828 <StartDefaultTask+0x1b8>)
 80027aa:	4a20      	ldr	r2, [pc, #128]	@ (800282c <StartDefaultTask+0x1bc>)
 80027ac:	491a      	ldr	r1, [pc, #104]	@ (8002818 <StartDefaultTask+0x1a8>)
 80027ae:	481b      	ldr	r0, [pc, #108]	@ (800281c <StartDefaultTask+0x1ac>)
 80027b0:	f00a f8ce 	bl	800c950 <rclc_executor_add_subscription>
	 /*
	  *  Non-blocking spin_some() allows other RTOS tasks to run concurrently.
	  *  You can replace with rclc_executor_spin() for blocking loop.
	  */
	  for (;;) {
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(5));		// check callbacks every 5 ms
 80027b4:	a304      	add	r3, pc, #16	@ (adr r3, 80027c8 <StartDefaultTask+0x158>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	4818      	ldr	r0, [pc, #96]	@ (800281c <StartDefaultTask+0x1ac>)
 80027bc:	f00a f970 	bl	800caa0 <rclc_executor_spin_some>
 80027c0:	e7f8      	b.n	80027b4 <StartDefaultTask+0x144>
 80027c2:	bf00      	nop
 80027c4:	f3af 8000 	nop.w
 80027c8:	004c4b40 	.word	0x004c4b40
 80027cc:	00000000 	.word	0x00000000
 80027d0:	08001d8d 	.word	0x08001d8d
 80027d4:	08001d25 	.word	0x08001d25
 80027d8:	08001d05 	.word	0x08001d05
 80027dc:	08001cd9 	.word	0x08001cd9
 80027e0:	20006c44 	.word	0x20006c44
 80027e4:	08002921 	.word	0x08002921
 80027e8:	08002965 	.word	0x08002965
 80027ec:	0800299d 	.word	0x0800299d
 80027f0:	08002a09 	.word	0x08002a09
 80027f4:	20006d50 	.word	0x20006d50
 80027f8:	20006d64 	.word	0x20006d64
 80027fc:	0801b884 	.word	0x0801b884
 8002800:	0801b888 	.word	0x0801b888
 8002804:	0801b898 	.word	0x0801b898
 8002808:	2000238c 	.word	0x2000238c
 800280c:	20002398 	.word	0x20002398
 8002810:	20002390 	.word	0x20002390
 8002814:	0801b8a0 	.word	0x0801b8a0
 8002818:	2000234c 	.word	0x2000234c
 800281c:	20006d98 	.word	0x20006d98
 8002820:	080025f1 	.word	0x080025f1
 8002824:	00989680 	.word	0x00989680
 8002828:	08002611 	.word	0x08002611
 800282c:	20002350 	.word	0x20002350

08002830 <HAL_TIM_PeriodElapsedCallback>:
	    //osDelay(5);												// optional if CPU load is high
	  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2b      	ldr	r2, [pc, #172]	@ (80028ec <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d148      	bne.n	80028d4 <HAL_TIM_PeriodElapsedCallback+0xa4>
		currCount[0] = __HAL_TIM_GET_COUNTER(&htim4);
 8002842:	4b2b      	ldr	r3, [pc, #172]	@ (80028f0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	b21a      	sxth	r2, r3
 800284a:	4b2a      	ldr	r3, [pc, #168]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800284c:	801a      	strh	r2, [r3, #0]
		currCount[1] = __HAL_TIM_GET_COUNTER(&htim1);
 800284e:	4b2a      	ldr	r3, [pc, #168]	@ (80028f8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	b21a      	sxth	r2, r3
 8002856:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002858:	805a      	strh	r2, [r3, #2]
		currCount[2] = __HAL_TIM_GET_COUNTER(&htim3);
 800285a:	4b28      	ldr	r3, [pc, #160]	@ (80028fc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	b21a      	sxth	r2, r3
 8002862:	4b24      	ldr	r3, [pc, #144]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002864:	809a      	strh	r2, [r3, #4]
		currCount[3] = __HAL_TIM_GET_COUNTER(&htim8);
 8002866:	4b26      	ldr	r3, [pc, #152]	@ (8002900 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	b21a      	sxth	r2, r3
 800286e:	4b21      	ldr	r3, [pc, #132]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002870:	80da      	strh	r2, [r3, #6]

		for (int i=0; i<4; i++) {
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e026      	b.n	80028c6 <HAL_TIM_PeriodElapsedCallback+0x96>

		  deltaEncoder[i] = (int16_t)(currCount[i] - pastCount[i]);
 8002878:	4a1e      	ldr	r2, [pc, #120]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002880:	b21b      	sxth	r3, r3
 8002882:	b29a      	uxth	r2, r3
 8002884:	491f      	ldr	r1, [pc, #124]	@ (8002904 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800288c:	b21b      	sxth	r3, r3
 800288e:	b29b      	uxth	r3, r3
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	b29b      	uxth	r3, r3
 8002894:	b219      	sxth	r1, r3
 8002896:	4a1c      	ldr	r2, [pc, #112]	@ (8002908 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  if (deltaEncoder[i] > 32767)       deltaEncoder[i] -= 65536;
 800289e:	4a1a      	ldr	r2, [pc, #104]	@ (8002908 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		  else if (deltaEncoder[i] < -32768) deltaEncoder[i] += 65536;
 80028a6:	4a18      	ldr	r2, [pc, #96]	@ (8002908 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]

		  pastCount[i] = currCount[i];
 80028ae:	4a11      	ldr	r2, [pc, #68]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028b6:	b219      	sxth	r1, r3
 80028b8:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<4; i++) {
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3301      	adds	r3, #1
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	ddd5      	ble.n	8002878 <HAL_TIM_PeriodElapsedCallback+0x48>

	  }
		encUpdateFlag = 1;
 80028cc:	4b0f      	ldr	r3, [pc, #60]	@ (800290c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	701a      	strb	r2, [r3, #0]
	else if (htim->Instance == TIM7)
  {
    HAL_IncTick();
  }

}
 80028d2:	e006      	b.n	80028e2 <HAL_TIM_PeriodElapsedCallback+0xb2>
	else if (htim->Instance == TIM7)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_TIM_PeriodElapsedCallback+0xb2>
    HAL_IncTick();
 80028de:	f000 ff0b 	bl	80036f8 <HAL_IncTick>
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40001000 	.word	0x40001000
 80028f0:	20006b6c 	.word	0x20006b6c
 80028f4:	20006e30 	.word	0x20006e30
 80028f8:	20006a94 	.word	0x20006a94
 80028fc:	20006b24 	.word	0x20006b24
 8002900:	20006bfc 	.word	0x20006bfc
 8002904:	20006e38 	.word	0x20006e38
 8002908:	20006e28 	.word	0x20006e28
 800290c:	20006e40 	.word	0x20006e40
 8002910:	40001400 	.word	0x40001400

08002914 <Error_Handler>:


void Error_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002918:	b672      	cpsid	i
}
 800291a:	bf00      	nop

  __disable_irq();
  while (1)
 800291c:	bf00      	nop
 800291e:	e7fd      	b.n	800291c <Error_Handler+0x8>

08002920 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800292a:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <microros_allocate+0x3c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4413      	add	r3, r2
 8002934:	461a      	mov	r2, r3
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <microros_allocate+0x3c>)
 8002938:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800293a:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <microros_allocate+0x40>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <microros_allocate+0x40>)
 8002948:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe ff74 	bl	8001838 <pvPortMallocMicroROS>
 8002950:	4603      	mov	r3, r0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20006e44 	.word	0x20006e44
 8002960:	20006e48 	.word	0x20006e48

08002964 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00c      	beq.n	800298e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff f883 	bl	8001a80 <getBlockSize>
 800297a:	4603      	mov	r3, r0
 800297c:	4a06      	ldr	r2, [pc, #24]	@ (8002998 <microros_deallocate+0x34>)
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	461a      	mov	r2, r3
 8002984:	4b04      	ldr	r3, [pc, #16]	@ (8002998 <microros_deallocate+0x34>)
 8002986:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff f81d 	bl	80019c8 <vPortFreeMicroROS>
  }
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20006e48 	.word	0x20006e48

0800299c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80029a8:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <microros_reallocate+0x64>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4413      	add	r3, r2
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <microros_reallocate+0x64>)
 80029b6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <microros_reallocate+0x68>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4413      	add	r3, r2
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <microros_reallocate+0x68>)
 80029c6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80029ce:	68b8      	ldr	r0, [r7, #8]
 80029d0:	f7fe ff32 	bl	8001838 <pvPortMallocMicroROS>
 80029d4:	4603      	mov	r3, r0
 80029d6:	e00e      	b.n	80029f6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7ff f851 	bl	8001a80 <getBlockSize>
 80029de:	4603      	mov	r3, r0
 80029e0:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <microros_reallocate+0x68>)
 80029e2:	6812      	ldr	r2, [r2, #0]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <microros_reallocate+0x68>)
 80029ea:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff f864 	bl	8001abc <pvPortReallocMicroROS>
 80029f4:	4603      	mov	r3, r0
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20006e44 	.word	0x20006e44
 8002a04:	20006e48 	.word	0x20006e48

08002a08 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002a50 <microros_zero_allocate+0x48>)
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	4413      	add	r3, r2
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b0a      	ldr	r3, [pc, #40]	@ (8002a50 <microros_zero_allocate+0x48>)
 8002a26:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	4a08      	ldr	r2, [pc, #32]	@ (8002a54 <microros_zero_allocate+0x4c>)
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <microros_zero_allocate+0x4c>)
 8002a3a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7ff f869 	bl	8001b16 <pvPortCallocMicroROS>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20006e44 	.word	0x20006e44
 8002a54:	20006e48 	.word	0x20006e48

08002a58 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002a58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002a6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a6e:	a320      	add	r3, pc, #128	@ (adr r3, 8002af0 <UTILS_NanosecondsToTimespec+0x98>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fe f81a 	bl	8000aac <__aeabi_ldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002a82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a86:	a31a      	add	r3, pc, #104	@ (adr r3, 8002af0 <UTILS_NanosecondsToTimespec+0x98>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fe f80e 	bl	8000aac <__aeabi_ldivmod>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	da20      	bge.n	8002ade <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4a11      	ldr	r2, [pc, #68]	@ (8002ae8 <UTILS_NanosecondsToTimespec+0x90>)
 8002aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa6:	1712      	asrs	r2, r2, #28
 8002aa8:	17db      	asrs	r3, r3, #31
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	3301      	adds	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	6979      	ldr	r1, [r7, #20]
 8002ab8:	17c8      	asrs	r0, r1, #31
 8002aba:	460c      	mov	r4, r1
 8002abc:	4605      	mov	r5, r0
 8002abe:	ebb2 0804 	subs.w	r8, r2, r4
 8002ac2:	eb63 0905 	sbc.w	r9, r3, r5
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	4906      	ldr	r1, [pc, #24]	@ (8002aec <UTILS_NanosecondsToTimespec+0x94>)
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	441a      	add	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	609a      	str	r2, [r3, #8]
    }
}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ae8:	44b82fa1 	.word	0x44b82fa1
 8002aec:	3b9aca00 	.word	0x3b9aca00
 8002af0:	3b9aca00 	.word	0x3b9aca00
 8002af4:	00000000 	.word	0x00000000

08002af8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002afc:	b08e      	sub	sp, #56	@ 0x38
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b02:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002b04:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002b08:	2300      	movs	r3, #0
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002b1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f006 fa8e 	bl	8009040 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b26:	17da      	asrs	r2, r3, #31
 8002b28:	61bb      	str	r3, [r7, #24]
 8002b2a:	61fa      	str	r2, [r7, #28]
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	000b      	movs	r3, r1
 8002b38:	2200      	movs	r2, #0
 8002b3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b40:	2200      	movs	r2, #0
 8002b42:	461c      	mov	r4, r3
 8002b44:	4615      	mov	r5, r2
 8002b46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002b4a:	1911      	adds	r1, r2, r4
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	416b      	adcs	r3, r5
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002b56:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002b5a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	f04f 0400 	mov.w	r4, #0
 8002b66:	f04f 0500 	mov.w	r5, #0
 8002b6a:	015d      	lsls	r5, r3, #5
 8002b6c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002b70:	0154      	lsls	r4, r2, #5
 8002b72:	4622      	mov	r2, r4
 8002b74:	462b      	mov	r3, r5
 8002b76:	ebb2 0800 	subs.w	r8, r2, r0
 8002b7a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002b8a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002b8e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002b92:	4690      	mov	r8, r2
 8002b94:	4699      	mov	r9, r3
 8002b96:	eb18 0a00 	adds.w	sl, r8, r0
 8002b9a:	eb49 0b01 	adc.w	fp, r9, r1
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002baa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bae:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bb2:	ebb2 040a 	subs.w	r4, r2, sl
 8002bb6:	603c      	str	r4, [r7, #0]
 8002bb8:	eb63 030b 	sbc.w	r3, r3, fp
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bc2:	4623      	mov	r3, r4
 8002bc4:	181b      	adds	r3, r3, r0
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	462b      	mov	r3, r5
 8002bca:	eb41 0303 	adc.w	r3, r1, r3
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	6a3a      	ldr	r2, [r7, #32]
 8002bd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bd6:	f7ff ff3f 	bl	8002a58 <UTILS_NanosecondsToTimespec>

    return 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3738      	adds	r7, #56	@ 0x38
 8002be0:	46bd      	mov	sp, r7
 8002be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002be8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	4b12      	ldr	r3, [pc, #72]	@ (8002c3c <HAL_MspInit+0x54>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	4a11      	ldr	r2, [pc, #68]	@ (8002c3c <HAL_MspInit+0x54>)
 8002bf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8002c3c <HAL_MspInit+0x54>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <HAL_MspInit+0x54>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <HAL_MspInit+0x54>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1a:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <HAL_MspInit+0x54>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	210f      	movs	r1, #15
 8002c2a:	f06f 0001 	mvn.w	r0, #1
 8002c2e:	f000 fe3b 	bl	80038a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800

08002c40 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b090      	sub	sp, #64	@ 0x40
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a8c      	ldr	r2, [pc, #560]	@ (8002e90 <HAL_TIM_Encoder_MspInit+0x250>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d14d      	bne.n	8002cfe <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c66:	4b8b      	ldr	r3, [pc, #556]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	4a8a      	ldr	r2, [pc, #552]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c72:	4b88      	ldr	r3, [pc, #544]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c82:	4b84      	ldr	r3, [pc, #528]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	4a83      	ldr	r2, [pc, #524]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c8e:	4b81      	ldr	r3, [pc, #516]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FL_ENC_B_T1C1_Pin|FL_ENC_A_T1C2_Pin;
 8002c9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cac:	2301      	movs	r3, #1
 8002cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4878      	ldr	r0, [pc, #480]	@ (8002e98 <HAL_TIM_Encoder_MspInit+0x258>)
 8002cb8:	f001 fa22 	bl	8004100 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2105      	movs	r1, #5
 8002cc0:	2018      	movs	r0, #24
 8002cc2:	f000 fdf1 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002cc6:	2018      	movs	r0, #24
 8002cc8:	f000 fe0a 	bl	80038e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2105      	movs	r1, #5
 8002cd0:	2019      	movs	r0, #25
 8002cd2:	f000 fde9 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002cd6:	2019      	movs	r0, #25
 8002cd8:	f000 fe02 	bl	80038e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2105      	movs	r1, #5
 8002ce0:	201a      	movs	r0, #26
 8002ce2:	f000 fde1 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ce6:	201a      	movs	r0, #26
 8002ce8:	f000 fdfa 	bl	80038e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2105      	movs	r1, #5
 8002cf0:	201b      	movs	r0, #27
 8002cf2:	f000 fdd9 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002cf6:	201b      	movs	r0, #27
 8002cf8:	f000 fdf2 	bl	80038e0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002cfc:	e0c4      	b.n	8002e88 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM3)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a66      	ldr	r2, [pc, #408]	@ (8002e9c <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d134      	bne.n	8002d72 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	4b61      	ldr	r3, [pc, #388]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	4a60      	ldr	r2, [pc, #384]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d18:	4b5e      	ldr	r3, [pc, #376]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	623b      	str	r3, [r7, #32]
 8002d22:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	4b5a      	ldr	r3, [pc, #360]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	4a59      	ldr	r2, [pc, #356]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d34:	4b57      	ldr	r3, [pc, #348]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FR_ENC_A_T3C1_Pin|FR_ENC_B_T3C2_Pin;
 8002d40:	23c0      	movs	r3, #192	@ 0xc0
 8002d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d50:	2302      	movs	r3, #2
 8002d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d58:	4619      	mov	r1, r3
 8002d5a:	484f      	ldr	r0, [pc, #316]	@ (8002e98 <HAL_TIM_Encoder_MspInit+0x258>)
 8002d5c:	f001 f9d0 	bl	8004100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2105      	movs	r1, #5
 8002d64:	201d      	movs	r0, #29
 8002d66:	f000 fd9f 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d6a:	201d      	movs	r0, #29
 8002d6c:	f000 fdb8 	bl	80038e0 <HAL_NVIC_EnableIRQ>
}
 8002d70:	e08a      	b.n	8002e88 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM4)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a4a      	ldr	r2, [pc, #296]	@ (8002ea0 <HAL_TIM_Encoder_MspInit+0x260>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d134      	bne.n	8002de6 <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	4b44      	ldr	r3, [pc, #272]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d84:	4a43      	ldr	r2, [pc, #268]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d8c:	4b41      	ldr	r3, [pc, #260]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	61bb      	str	r3, [r7, #24]
 8002d96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	4a3c      	ldr	r2, [pc, #240]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002da2:	f043 0302 	orr.w	r3, r3, #2
 8002da6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da8:	4b3a      	ldr	r3, [pc, #232]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RL_ENC_B_T4C1_Pin|RL_ENC_A_T4C2_Pin;
 8002db4:	23c0      	movs	r3, #192	@ 0xc0
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4835      	ldr	r0, [pc, #212]	@ (8002ea4 <HAL_TIM_Encoder_MspInit+0x264>)
 8002dd0:	f001 f996 	bl	8004100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2105      	movs	r1, #5
 8002dd8:	201e      	movs	r0, #30
 8002dda:	f000 fd65 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dde:	201e      	movs	r0, #30
 8002de0:	f000 fd7e 	bl	80038e0 <HAL_NVIC_EnableIRQ>
}
 8002de4:	e050      	b.n	8002e88 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM8)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea8 <HAL_TIM_Encoder_MspInit+0x268>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d14b      	bne.n	8002e88 <HAL_TIM_Encoder_MspInit+0x248>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	4b27      	ldr	r3, [pc, #156]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df8:	4a26      	ldr	r2, [pc, #152]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002dfa:	f043 0302 	orr.w	r3, r3, #2
 8002dfe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e00:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	4b20      	ldr	r3, [pc, #128]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	4a1f      	ldr	r2, [pc, #124]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <HAL_TIM_Encoder_MspInit+0x254>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RR_ENC_A_T8C1_Pin|RR_ENC_B_T8C2_Pin;
 8002e28:	23c0      	movs	r3, #192	@ 0xc0
 8002e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e40:	4619      	mov	r1, r3
 8002e42:	481a      	ldr	r0, [pc, #104]	@ (8002eac <HAL_TIM_Encoder_MspInit+0x26c>)
 8002e44:	f001 f95c 	bl	8004100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2105      	movs	r1, #5
 8002e4c:	202b      	movs	r0, #43	@ 0x2b
 8002e4e:	f000 fd2b 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002e52:	202b      	movs	r0, #43	@ 0x2b
 8002e54:	f000 fd44 	bl	80038e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2105      	movs	r1, #5
 8002e5c:	202c      	movs	r0, #44	@ 0x2c
 8002e5e:	f000 fd23 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002e62:	202c      	movs	r0, #44	@ 0x2c
 8002e64:	f000 fd3c 	bl	80038e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2105      	movs	r1, #5
 8002e6c:	202d      	movs	r0, #45	@ 0x2d
 8002e6e:	f000 fd1b 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e72:	202d      	movs	r0, #45	@ 0x2d
 8002e74:	f000 fd34 	bl	80038e0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2105      	movs	r1, #5
 8002e7c:	202e      	movs	r0, #46	@ 0x2e
 8002e7e:	f000 fd13 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002e82:	202e      	movs	r0, #46	@ 0x2e
 8002e84:	f000 fd2c 	bl	80038e0 <HAL_NVIC_EnableIRQ>
}
 8002e88:	bf00      	nop
 8002e8a:	3740      	adds	r7, #64	@ 0x40
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40010400 	.word	0x40010400
 8002eac:	40020800 	.word	0x40020800

08002eb0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec0:	d116      	bne.n	8002ef0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f30 <HAL_TIM_Base_MspInit+0x80>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	4a19      	ldr	r2, [pc, #100]	@ (8002f30 <HAL_TIM_Base_MspInit+0x80>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed2:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <HAL_TIM_Base_MspInit+0x80>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2105      	movs	r1, #5
 8002ee2:	201c      	movs	r0, #28
 8002ee4:	f000 fce0 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ee8:	201c      	movs	r0, #28
 8002eea:	f000 fcf9 	bl	80038e0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002eee:	e01a      	b.n	8002f26 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f34 <HAL_TIM_Base_MspInit+0x84>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d115      	bne.n	8002f26 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <HAL_TIM_Base_MspInit+0x80>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	4a0b      	ldr	r2, [pc, #44]	@ (8002f30 <HAL_TIM_Base_MspInit+0x80>)
 8002f04:	f043 0310 	orr.w	r3, r3, #16
 8002f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_TIM_Base_MspInit+0x80>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2105      	movs	r1, #5
 8002f1a:	2036      	movs	r0, #54	@ 0x36
 8002f1c:	f000 fcc4 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f20:	2036      	movs	r0, #54	@ 0x36
 8002f22:	f000 fcdd 	bl	80038e0 <HAL_NVIC_EnableIRQ>
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40001000 	.word	0x40001000

08002f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	@ 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f58:	d13c      	bne.n	8002fd4 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fdc <HAL_TIM_MspPostInit+0xa4>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	4a1e      	ldr	r2, [pc, #120]	@ (8002fdc <HAL_TIM_MspPostInit+0xa4>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fdc <HAL_TIM_MspPostInit+0xa4>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b18      	ldr	r3, [pc, #96]	@ (8002fdc <HAL_TIM_MspPostInit+0xa4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	4a17      	ldr	r2, [pc, #92]	@ (8002fdc <HAL_TIM_MspPostInit+0xa4>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f86:	4b15      	ldr	r3, [pc, #84]	@ (8002fdc <HAL_TIM_MspPostInit+0xa4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_PWM_T2C1_Pin|FL_PWM_T2C2_Pin;
 8002f92:	2303      	movs	r3, #3
 8002f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f96:	2302      	movs	r3, #2
 8002f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa6:	f107 0314 	add.w	r3, r7, #20
 8002faa:	4619      	mov	r1, r3
 8002fac:	480c      	ldr	r0, [pc, #48]	@ (8002fe0 <HAL_TIM_MspPostInit+0xa8>)
 8002fae:	f001 f8a7 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_PWM_T2C4_Pin|FR_PWM_T2C3_Pin;
 8002fb2:	f240 4304 	movw	r3, #1028	@ 0x404
 8002fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4805      	ldr	r0, [pc, #20]	@ (8002fe4 <HAL_TIM_MspPostInit+0xac>)
 8002fd0:	f001 f896 	bl	8004100 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fd4:	bf00      	nop
 8002fd6:	3728      	adds	r7, #40	@ 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40020000 	.word	0x40020000
 8002fe4:	40020400 	.word	0x40020400

08002fe8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	@ 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 031c 	add.w	r3, r7, #28
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a79      	ldr	r2, [pc, #484]	@ (80031ec <HAL_UART_MspInit+0x204>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d153      	bne.n	80030b2 <HAL_UART_MspInit+0xca>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	4b78      	ldr	r3, [pc, #480]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	4a77      	ldr	r2, [pc, #476]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 8003014:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003018:	6413      	str	r3, [r2, #64]	@ 0x40
 800301a:	4b75      	ldr	r3, [pc, #468]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	4b71      	ldr	r3, [pc, #452]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	4a70      	ldr	r2, [pc, #448]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	6313      	str	r3, [r2, #48]	@ 0x30
 8003036:	4b6e      	ldr	r3, [pc, #440]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	4b6a      	ldr	r3, [pc, #424]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304a:	4a69      	ldr	r2, [pc, #420]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 800304c:	f043 0308 	orr.w	r3, r3, #8
 8003050:	6313      	str	r3, [r2, #48]	@ 0x30
 8003052:	4b67      	ldr	r3, [pc, #412]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800305e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003070:	2308      	movs	r3, #8
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	4619      	mov	r1, r3
 800307a:	485e      	ldr	r0, [pc, #376]	@ (80031f4 <HAL_UART_MspInit+0x20c>)
 800307c:	f001 f840 	bl	8004100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003080:	2304      	movs	r3, #4
 8003082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308c:	2303      	movs	r3, #3
 800308e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003090:	2308      	movs	r3, #8
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4619      	mov	r1, r3
 800309a:	4857      	ldr	r0, [pc, #348]	@ (80031f8 <HAL_UART_MspInit+0x210>)
 800309c:	f001 f830 	bl	8004100 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2105      	movs	r1, #5
 80030a4:	2035      	movs	r0, #53	@ 0x35
 80030a6:	f000 fbff 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80030aa:	2035      	movs	r0, #53	@ 0x35
 80030ac:	f000 fc18 	bl	80038e0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80030b0:	e098      	b.n	80031e4 <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a51      	ldr	r2, [pc, #324]	@ (80031fc <HAL_UART_MspInit+0x214>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	f040 8093 	bne.w	80031e4 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b4b      	ldr	r3, [pc, #300]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	4a4a      	ldr	r2, [pc, #296]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 80030c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ce:	4b48      	ldr	r3, [pc, #288]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	4b44      	ldr	r3, [pc, #272]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	4a43      	ldr	r2, [pc, #268]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ea:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_UART_MspInit+0x208>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80030f6:	230c      	movs	r3, #12
 80030f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fa:	2302      	movs	r3, #2
 80030fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003102:	2303      	movs	r3, #3
 8003104:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003106:	2307      	movs	r3, #7
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310a:	f107 031c 	add.w	r3, r7, #28
 800310e:	4619      	mov	r1, r3
 8003110:	483b      	ldr	r0, [pc, #236]	@ (8003200 <HAL_UART_MspInit+0x218>)
 8003112:	f000 fff5 	bl	8004100 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003116:	4b3b      	ldr	r3, [pc, #236]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 8003118:	4a3b      	ldr	r2, [pc, #236]	@ (8003208 <HAL_UART_MspInit+0x220>)
 800311a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800311c:	4b39      	ldr	r3, [pc, #228]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 800311e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003122:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003124:	4b37      	ldr	r3, [pc, #220]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800312a:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 800312c:	2200      	movs	r2, #0
 800312e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003130:	4b34      	ldr	r3, [pc, #208]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 8003132:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003136:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003138:	4b32      	ldr	r3, [pc, #200]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 800313a:	2200      	movs	r2, #0
 800313c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800313e:	4b31      	ldr	r3, [pc, #196]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 8003140:	2200      	movs	r2, #0
 8003142:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003144:	4b2f      	ldr	r3, [pc, #188]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 8003146:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800314a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800314c:	4b2d      	ldr	r3, [pc, #180]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 800314e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003152:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003154:	4b2b      	ldr	r3, [pc, #172]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 8003156:	2200      	movs	r2, #0
 8003158:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800315a:	482a      	ldr	r0, [pc, #168]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 800315c:	f000 fbce 	bl	80038fc <HAL_DMA_Init>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8003166:	f7ff fbd5 	bl	8002914 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a25      	ldr	r2, [pc, #148]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 800316e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003170:	4a24      	ldr	r2, [pc, #144]	@ (8003204 <HAL_UART_MspInit+0x21c>)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003176:	4b25      	ldr	r3, [pc, #148]	@ (800320c <HAL_UART_MspInit+0x224>)
 8003178:	4a25      	ldr	r2, [pc, #148]	@ (8003210 <HAL_UART_MspInit+0x228>)
 800317a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800317c:	4b23      	ldr	r3, [pc, #140]	@ (800320c <HAL_UART_MspInit+0x224>)
 800317e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003182:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003184:	4b21      	ldr	r3, [pc, #132]	@ (800320c <HAL_UART_MspInit+0x224>)
 8003186:	2240      	movs	r2, #64	@ 0x40
 8003188:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800318a:	4b20      	ldr	r3, [pc, #128]	@ (800320c <HAL_UART_MspInit+0x224>)
 800318c:	2200      	movs	r2, #0
 800318e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003190:	4b1e      	ldr	r3, [pc, #120]	@ (800320c <HAL_UART_MspInit+0x224>)
 8003192:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003196:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003198:	4b1c      	ldr	r3, [pc, #112]	@ (800320c <HAL_UART_MspInit+0x224>)
 800319a:	2200      	movs	r2, #0
 800319c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800319e:	4b1b      	ldr	r3, [pc, #108]	@ (800320c <HAL_UART_MspInit+0x224>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80031a4:	4b19      	ldr	r3, [pc, #100]	@ (800320c <HAL_UART_MspInit+0x224>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031aa:	4b18      	ldr	r3, [pc, #96]	@ (800320c <HAL_UART_MspInit+0x224>)
 80031ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031b2:	4b16      	ldr	r3, [pc, #88]	@ (800320c <HAL_UART_MspInit+0x224>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80031b8:	4814      	ldr	r0, [pc, #80]	@ (800320c <HAL_UART_MspInit+0x224>)
 80031ba:	f000 fb9f 	bl	80038fc <HAL_DMA_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80031c4:	f7ff fba6 	bl	8002914 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a10      	ldr	r2, [pc, #64]	@ (800320c <HAL_UART_MspInit+0x224>)
 80031cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80031ce:	4a0f      	ldr	r2, [pc, #60]	@ (800320c <HAL_UART_MspInit+0x224>)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2105      	movs	r1, #5
 80031d8:	2026      	movs	r0, #38	@ 0x26
 80031da:	f000 fb65 	bl	80038a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031de:	2026      	movs	r0, #38	@ 0x26
 80031e0:	f000 fb7e 	bl	80038e0 <HAL_NVIC_EnableIRQ>
}
 80031e4:	bf00      	nop
 80031e6:	3730      	adds	r7, #48	@ 0x30
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40005000 	.word	0x40005000
 80031f0:	40023800 	.word	0x40023800
 80031f4:	40020800 	.word	0x40020800
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40004400 	.word	0x40004400
 8003200:	40020000 	.word	0x40020000
 8003204:	20006c8c 	.word	0x20006c8c
 8003208:	40026088 	.word	0x40026088
 800320c:	20006cec 	.word	0x20006cec
 8003210:	400260a0 	.word	0x400260a0

08003214 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08e      	sub	sp, #56	@ 0x38
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	4b33      	ldr	r3, [pc, #204]	@ (80032f8 <HAL_InitTick+0xe4>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	4a32      	ldr	r2, [pc, #200]	@ (80032f8 <HAL_InitTick+0xe4>)
 800322e:	f043 0320 	orr.w	r3, r3, #32
 8003232:	6413      	str	r3, [r2, #64]	@ 0x40
 8003234:	4b30      	ldr	r3, [pc, #192]	@ (80032f8 <HAL_InitTick+0xe4>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003240:	f107 0210 	add.w	r2, r7, #16
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f001 fa20 	bl	8004690 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800325a:	f001 f9f1 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 800325e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003260:	e004      	b.n	800326c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003262:	f001 f9ed 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8003266:	4603      	mov	r3, r0
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800326c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326e:	4a23      	ldr	r2, [pc, #140]	@ (80032fc <HAL_InitTick+0xe8>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	0c9b      	lsrs	r3, r3, #18
 8003276:	3b01      	subs	r3, #1
 8003278:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800327a:	4b21      	ldr	r3, [pc, #132]	@ (8003300 <HAL_InitTick+0xec>)
 800327c:	4a21      	ldr	r2, [pc, #132]	@ (8003304 <HAL_InitTick+0xf0>)
 800327e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003280:	4b1f      	ldr	r3, [pc, #124]	@ (8003300 <HAL_InitTick+0xec>)
 8003282:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003286:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003288:	4a1d      	ldr	r2, [pc, #116]	@ (8003300 <HAL_InitTick+0xec>)
 800328a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800328e:	4b1c      	ldr	r3, [pc, #112]	@ (8003300 <HAL_InitTick+0xec>)
 8003290:	2200      	movs	r2, #0
 8003292:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003294:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <HAL_InitTick+0xec>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329a:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <HAL_InitTick+0xec>)
 800329c:	2200      	movs	r2, #0
 800329e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80032a0:	4817      	ldr	r0, [pc, #92]	@ (8003300 <HAL_InitTick+0xec>)
 80032a2:	f001 fef5 	bl	8005090 <HAL_TIM_Base_Init>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80032ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11b      	bne.n	80032ec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80032b4:	4812      	ldr	r0, [pc, #72]	@ (8003300 <HAL_InitTick+0xec>)
 80032b6:	f001 ff3b 	bl	8005130 <HAL_TIM_Base_Start_IT>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80032c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d111      	bne.n	80032ec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80032c8:	2037      	movs	r0, #55	@ 0x37
 80032ca:	f000 fb09 	bl	80038e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d808      	bhi.n	80032e6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80032d4:	2200      	movs	r2, #0
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	2037      	movs	r0, #55	@ 0x37
 80032da:	f000 fae5 	bl	80038a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032de:	4a0a      	ldr	r2, [pc, #40]	@ (8003308 <HAL_InitTick+0xf4>)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	e002      	b.n	80032ec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80032ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3738      	adds	r7, #56	@ 0x38
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	431bde83 	.word	0x431bde83
 8003300:	20006e4c 	.word	0x20006e4c
 8003304:	40001400 	.word	0x40001400
 8003308:	20000010 	.word	0x20000010

0800330c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <NMI_Handler+0x4>

08003314 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <HardFault_Handler+0x4>

0800331c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <MemManage_Handler+0x4>

08003324 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <BusFault_Handler+0x4>

0800332c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <UsageFault_Handler+0x4>

08003334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003348:	4802      	ldr	r0, [pc, #8]	@ (8003354 <DMA1_Stream5_IRQHandler+0x10>)
 800334a:	f000 fc6f 	bl	8003c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20006c8c 	.word	0x20006c8c

08003358 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800335c:	4802      	ldr	r0, [pc, #8]	@ (8003368 <DMA1_Stream6_IRQHandler+0x10>)
 800335e:	f000 fc65 	bl	8003c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20006cec 	.word	0x20006cec

0800336c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_IRQn 0 */
  //HAL_ADC_IRQHandler(&hadc1);
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003380:	4802      	ldr	r0, [pc, #8]	@ (800338c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003382:	f002 f99b 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20006a94 	.word	0x20006a94

08003390 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003394:	4802      	ldr	r0, [pc, #8]	@ (80033a0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003396:	f002 f991 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20006a94 	.word	0x20006a94

080033a4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033a8:	4802      	ldr	r0, [pc, #8]	@ (80033b4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80033aa:	f002 f987 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20006a94 	.word	0x20006a94

080033b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033bc:	4802      	ldr	r0, [pc, #8]	@ (80033c8 <TIM1_CC_IRQHandler+0x10>)
 80033be:	f002 f97d 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80033c2:	bf00      	nop
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20006a94 	.word	0x20006a94

080033cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033e0:	4802      	ldr	r0, [pc, #8]	@ (80033ec <TIM3_IRQHandler+0x10>)
 80033e2:	f002 f96b 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20006b24 	.word	0x20006b24

080033f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033f4:	4802      	ldr	r0, [pc, #8]	@ (8003400 <TIM4_IRQHandler+0x10>)
 80033f6:	f002 f961 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20006b6c 	.word	0x20006b6c

08003404 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003408:	4802      	ldr	r0, [pc, #8]	@ (8003414 <USART2_IRQHandler+0x10>)
 800340a:	f003 f90f 	bl	800662c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800340e:	bf00      	nop
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20006c44 	.word	0x20006c44

08003418 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800341c:	4802      	ldr	r0, [pc, #8]	@ (8003428 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800341e:	f002 f94d 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20006bfc 	.word	0x20006bfc

0800342c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003430:	4802      	ldr	r0, [pc, #8]	@ (800343c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003432:	f002 f943 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20006bfc 	.word	0x20006bfc

08003440 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003444:	4802      	ldr	r0, [pc, #8]	@ (8003450 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003446:	f002 f939 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20006bfc 	.word	0x20006bfc

08003454 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003458:	4802      	ldr	r0, [pc, #8]	@ (8003464 <TIM8_CC_IRQHandler+0x10>)
 800345a:	f002 f92f 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20006bfc 	.word	0x20006bfc

08003468 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_IRQn 0 */
  //HAL_UART_IRQHandler(&huart5);
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
	...

08003478 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800347c:	4802      	ldr	r0, [pc, #8]	@ (8003488 <TIM6_DAC_IRQHandler+0x10>)
 800347e:	f002 f91d 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20006bb4 	.word	0x20006bb4

0800348c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003490:	4802      	ldr	r0, [pc, #8]	@ (800349c <TIM7_IRQHandler+0x10>)
 8003492:	f002 f913 	bl	80056bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20006e4c 	.word	0x20006e4c

080034a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0
  return 1;
 80034b2:	2301      	movs	r3, #1
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <_kill>:

int _kill(int pid, int sig)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034c8:	f016 fddc 	bl	801a084 <__errno>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2216      	movs	r2, #22
 80034d0:	601a      	str	r2, [r3, #0]
  return -1;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <_exit>:

void _exit (int status)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b082      	sub	sp, #8
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034e6:	f04f 31ff 	mov.w	r1, #4294967295
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff ffe7 	bl	80034be <_kill>
  while (1) {}    /* Make sure we hang here */
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <_exit+0x12>

080034f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e00a      	b.n	800351c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003506:	f3af 8000 	nop.w
 800350a:	4601      	mov	r1, r0
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	60ba      	str	r2, [r7, #8]
 8003512:	b2ca      	uxtb	r2, r1
 8003514:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	3301      	adds	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	dbf0      	blt.n	8003506 <_read+0x12>
  }

  return len;
 8003524:	687b      	ldr	r3, [r7, #4]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e009      	b.n	8003554 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	60ba      	str	r2, [r7, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	3301      	adds	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	dbf1      	blt.n	8003540 <_write+0x12>
  }
  return len;
 800355c:	687b      	ldr	r3, [r7, #4]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_close>:

int _close(int file)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800358e:	605a      	str	r2, [r3, #4]
  return 0;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <_isatty>:

int _isatty(int file)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035a6:	2301      	movs	r3, #1
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d8:	4a14      	ldr	r2, [pc, #80]	@ (800362c <_sbrk+0x5c>)
 80035da:	4b15      	ldr	r3, [pc, #84]	@ (8003630 <_sbrk+0x60>)
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035e4:	4b13      	ldr	r3, [pc, #76]	@ (8003634 <_sbrk+0x64>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035ec:	4b11      	ldr	r3, [pc, #68]	@ (8003634 <_sbrk+0x64>)
 80035ee:	4a12      	ldr	r2, [pc, #72]	@ (8003638 <_sbrk+0x68>)
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035f2:	4b10      	ldr	r3, [pc, #64]	@ (8003634 <_sbrk+0x64>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d207      	bcs.n	8003610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003600:	f016 fd40 	bl	801a084 <__errno>
 8003604:	4603      	mov	r3, r0
 8003606:	220c      	movs	r2, #12
 8003608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800360a:	f04f 33ff 	mov.w	r3, #4294967295
 800360e:	e009      	b.n	8003624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003610:	4b08      	ldr	r3, [pc, #32]	@ (8003634 <_sbrk+0x64>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003616:	4b07      	ldr	r3, [pc, #28]	@ (8003634 <_sbrk+0x64>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	4a05      	ldr	r2, [pc, #20]	@ (8003634 <_sbrk+0x64>)
 8003620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003622:	68fb      	ldr	r3, [r7, #12]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20020000 	.word	0x20020000
 8003630:	00000400 	.word	0x00000400
 8003634:	20006e98 	.word	0x20006e98
 8003638:	200107d8 	.word	0x200107d8

0800363c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003640:	4b06      	ldr	r3, [pc, #24]	@ (800365c <SystemInit+0x20>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003646:	4a05      	ldr	r2, [pc, #20]	@ (800365c <SystemInit+0x20>)
 8003648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800364c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003698 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003664:	f7ff ffea 	bl	800363c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003668:	480c      	ldr	r0, [pc, #48]	@ (800369c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800366a:	490d      	ldr	r1, [pc, #52]	@ (80036a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800366c:	4a0d      	ldr	r2, [pc, #52]	@ (80036a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800366e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003670:	e002      	b.n	8003678 <LoopCopyDataInit>

08003672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003676:	3304      	adds	r3, #4

08003678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800367a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800367c:	d3f9      	bcc.n	8003672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800367e:	4a0a      	ldr	r2, [pc, #40]	@ (80036a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003680:	4c0a      	ldr	r4, [pc, #40]	@ (80036ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003684:	e001      	b.n	800368a <LoopFillZerobss>

08003686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003688:	3204      	adds	r2, #4

0800368a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800368a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800368c:	d3fb      	bcc.n	8003686 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800368e:	f016 fcff 	bl	801a090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003692:	f7fe fbf3 	bl	8001e7c <main>
  bx  lr    
 8003696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003698:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800369c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a0:	2000231c 	.word	0x2000231c
  ldr r2, =_sidata
 80036a4:	0801d36c 	.word	0x0801d36c
  ldr r2, =_sbss
 80036a8:	20002320 	.word	0x20002320
  ldr r4, =_ebss
 80036ac:	200107d4 	.word	0x200107d4

080036b0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036b0:	e7fe      	b.n	80036b0 <CAN1_RX0_IRQHandler>
	...

080036b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036b8:	4b0e      	ldr	r3, [pc, #56]	@ (80036f4 <HAL_Init+0x40>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0d      	ldr	r2, [pc, #52]	@ (80036f4 <HAL_Init+0x40>)
 80036be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036c4:	4b0b      	ldr	r3, [pc, #44]	@ (80036f4 <HAL_Init+0x40>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <HAL_Init+0x40>)
 80036ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d0:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <HAL_Init+0x40>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a07      	ldr	r2, [pc, #28]	@ (80036f4 <HAL_Init+0x40>)
 80036d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036dc:	2003      	movs	r0, #3
 80036de:	f000 f8d8 	bl	8003892 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036e2:	200f      	movs	r0, #15
 80036e4:	f7ff fd96 	bl	8003214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e8:	f7ff fa7e 	bl	8002be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40023c00 	.word	0x40023c00

080036f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <HAL_IncTick+0x20>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	461a      	mov	r2, r3
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <HAL_IncTick+0x24>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4413      	add	r3, r2
 8003708:	4a04      	ldr	r2, [pc, #16]	@ (800371c <HAL_IncTick+0x24>)
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000014 	.word	0x20000014
 800371c:	20006e9c 	.word	0x20006e9c

08003720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return uwTick;
 8003724:	4b03      	ldr	r3, [pc, #12]	@ (8003734 <HAL_GetTick+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20006e9c 	.word	0x20006e9c

08003738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003748:	4b0c      	ldr	r3, [pc, #48]	@ (800377c <__NVIC_SetPriorityGrouping+0x44>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003754:	4013      	ands	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003760:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800376a:	4a04      	ldr	r2, [pc, #16]	@ (800377c <__NVIC_SetPriorityGrouping+0x44>)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	60d3      	str	r3, [r2, #12]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003784:	4b04      	ldr	r3, [pc, #16]	@ (8003798 <__NVIC_GetPriorityGrouping+0x18>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	0a1b      	lsrs	r3, r3, #8
 800378a:	f003 0307 	and.w	r3, r3, #7
}
 800378e:	4618      	mov	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	db0b      	blt.n	80037c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	4907      	ldr	r1, [pc, #28]	@ (80037d4 <__NVIC_EnableIRQ+0x38>)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	095b      	lsrs	r3, r3, #5
 80037bc:	2001      	movs	r0, #1
 80037be:	fa00 f202 	lsl.w	r2, r0, r2
 80037c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	e000e100 	.word	0xe000e100

080037d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	db0a      	blt.n	8003802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	490c      	ldr	r1, [pc, #48]	@ (8003824 <__NVIC_SetPriority+0x4c>)
 80037f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	440b      	add	r3, r1
 80037fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003800:	e00a      	b.n	8003818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4908      	ldr	r1, [pc, #32]	@ (8003828 <__NVIC_SetPriority+0x50>)
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	3b04      	subs	r3, #4
 8003810:	0112      	lsls	r2, r2, #4
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	440b      	add	r3, r1
 8003816:	761a      	strb	r2, [r3, #24]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	e000e100 	.word	0xe000e100
 8003828:	e000ed00 	.word	0xe000ed00

0800382c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	@ 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f1c3 0307 	rsb	r3, r3, #7
 8003846:	2b04      	cmp	r3, #4
 8003848:	bf28      	it	cs
 800384a:	2304      	movcs	r3, #4
 800384c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3304      	adds	r3, #4
 8003852:	2b06      	cmp	r3, #6
 8003854:	d902      	bls.n	800385c <NVIC_EncodePriority+0x30>
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3b03      	subs	r3, #3
 800385a:	e000      	b.n	800385e <NVIC_EncodePriority+0x32>
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003860:	f04f 32ff 	mov.w	r2, #4294967295
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43da      	mvns	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	401a      	ands	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003874:	f04f 31ff 	mov.w	r1, #4294967295
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	fa01 f303 	lsl.w	r3, r1, r3
 800387e:	43d9      	mvns	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	4313      	orrs	r3, r2
         );
}
 8003886:	4618      	mov	r0, r3
 8003888:	3724      	adds	r7, #36	@ 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ff4c 	bl	8003738 <__NVIC_SetPriorityGrouping>
}
 80038a0:	bf00      	nop
 80038a2:	3708      	adds	r7, #8
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038ba:	f7ff ff61 	bl	8003780 <__NVIC_GetPriorityGrouping>
 80038be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	6978      	ldr	r0, [r7, #20]
 80038c6:	f7ff ffb1 	bl	800382c <NVIC_EncodePriority>
 80038ca:	4602      	mov	r2, r0
 80038cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ff80 	bl	80037d8 <__NVIC_SetPriority>
}
 80038d8:	bf00      	nop
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff54 	bl	800379c <__NVIC_EnableIRQ>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7ff ff0a 	bl	8003720 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e099      	b.n	8003a4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003938:	e00f      	b.n	800395a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800393a:	f7ff fef1 	bl	8003720 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b05      	cmp	r3, #5
 8003946:	d908      	bls.n	800395a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2203      	movs	r2, #3
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e078      	b.n	8003a4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e8      	bne.n	800393a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4b38      	ldr	r3, [pc, #224]	@ (8003a54 <HAL_DMA_Init+0x158>)
 8003974:	4013      	ands	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003986:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d107      	bne.n	80039c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	4313      	orrs	r3, r2
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0307 	bic.w	r3, r3, #7
 80039da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	d117      	bne.n	8003a1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fb01 	bl	8004008 <DMA_CheckFifoParam>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2240      	movs	r2, #64	@ 0x40
 8003a10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e016      	b.n	8003a4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fab8 	bl	8003f9c <DMA_CalcBaseAndBitshift>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	223f      	movs	r2, #63	@ 0x3f
 8003a36:	409a      	lsls	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	f010803f 	.word	0xf010803f

08003a58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_DMA_Start_IT+0x26>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e040      	b.n	8003b00 <HAL_DMA_Start_IT+0xa8>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d12f      	bne.n	8003af2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2202      	movs	r2, #2
 8003a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fa4a 	bl	8003f40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab0:	223f      	movs	r2, #63	@ 0x3f
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0216 	orr.w	r2, r2, #22
 8003ac6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0208 	orr.w	r2, r2, #8
 8003ade:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	e005      	b.n	8003afe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
 8003afc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b16:	f7ff fe03 	bl	8003720 <HAL_GetTick>
 8003b1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d008      	beq.n	8003b3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2280      	movs	r2, #128	@ 0x80
 8003b2c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e052      	b.n	8003be0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0216 	bic.w	r2, r2, #22
 8003b48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d103      	bne.n	8003b6a <HAL_DMA_Abort+0x62>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0208 	bic.w	r2, r2, #8
 8003b78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0201 	bic.w	r2, r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b8a:	e013      	b.n	8003bb4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b8c:	f7ff fdc8 	bl	8003720 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	d90c      	bls.n	8003bb4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e015      	b.n	8003be0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e4      	bne.n	8003b8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc6:	223f      	movs	r2, #63	@ 0x3f
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d004      	beq.n	8003c06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2280      	movs	r2, #128	@ 0x80
 8003c00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e00c      	b.n	8003c20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2205      	movs	r2, #5
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0201 	bic.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c38:	4b8e      	ldr	r3, [pc, #568]	@ (8003e74 <HAL_DMA_IRQHandler+0x248>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a8e      	ldr	r2, [pc, #568]	@ (8003e78 <HAL_DMA_IRQHandler+0x24c>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	0a9b      	lsrs	r3, r3, #10
 8003c44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c56:	2208      	movs	r2, #8
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01a      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d013      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0204 	bic.w	r2, r2, #4
 8003c7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c84:	2208      	movs	r2, #8
 8003c86:	409a      	lsls	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c90:	f043 0201 	orr.w	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d012      	beq.n	8003cce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cba:	2201      	movs	r2, #1
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc6:	f043 0202 	orr.w	r2, r3, #2
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d012      	beq.n	8003d04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00b      	beq.n	8003d04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	f043 0204 	orr.w	r2, r3, #4
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d08:	2210      	movs	r2, #16
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d043      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d03c      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d26:	2210      	movs	r2, #16
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d018      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d108      	bne.n	8003d5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d024      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	4798      	blx	r3
 8003d5a:	e01f      	b.n	8003d9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01b      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
 8003d6c:	e016      	b.n	8003d9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d107      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0208 	bic.w	r2, r2, #8
 8003d8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da0:	2220      	movs	r2, #32
 8003da2:	409a      	lsls	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 808f 	beq.w	8003ecc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8087 	beq.w	8003ecc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d136      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0216 	bic.w	r2, r2, #22
 8003de4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003df4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <HAL_DMA_IRQHandler+0x1da>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d007      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0208 	bic.w	r2, r2, #8
 8003e14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1a:	223f      	movs	r2, #63	@ 0x3f
 8003e1c:	409a      	lsls	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d07e      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
        }
        return;
 8003e42:	e079      	b.n	8003f38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01d      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d031      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
 8003e70:	e02c      	b.n	8003ecc <HAL_DMA_IRQHandler+0x2a0>
 8003e72:	bf00      	nop
 8003e74:	2000000c 	.word	0x2000000c
 8003e78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d023      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
 8003e8c:	e01e      	b.n	8003ecc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10f      	bne.n	8003ebc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0210 	bic.w	r2, r2, #16
 8003eaa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d032      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d022      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2205      	movs	r2, #5
 8003ee4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0201 	bic.w	r2, r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	3301      	adds	r3, #1
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d307      	bcc.n	8003f14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f2      	bne.n	8003ef8 <HAL_DMA_IRQHandler+0x2cc>
 8003f12:	e000      	b.n	8003f16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
 8003f36:	e000      	b.n	8003f3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f38:	bf00      	nop
    }
  }
}
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b40      	cmp	r3, #64	@ 0x40
 8003f6c:	d108      	bne.n	8003f80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f7e:	e007      	b.n	8003f90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	60da      	str	r2, [r3, #12]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	3b10      	subs	r3, #16
 8003fac:	4a14      	ldr	r2, [pc, #80]	@ (8004000 <DMA_CalcBaseAndBitshift+0x64>)
 8003fae:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fb6:	4a13      	ldr	r2, [pc, #76]	@ (8004004 <DMA_CalcBaseAndBitshift+0x68>)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d909      	bls.n	8003fde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fd2:	f023 0303 	bic.w	r3, r3, #3
 8003fd6:	1d1a      	adds	r2, r3, #4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	659a      	str	r2, [r3, #88]	@ 0x58
 8003fdc:	e007      	b.n	8003fee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	aaaaaaab 	.word	0xaaaaaaab
 8004004:	0801b924 	.word	0x0801b924

08004008 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004018:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d11f      	bne.n	8004062 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b03      	cmp	r3, #3
 8004026:	d856      	bhi.n	80040d6 <DMA_CheckFifoParam+0xce>
 8004028:	a201      	add	r2, pc, #4	@ (adr r2, 8004030 <DMA_CheckFifoParam+0x28>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004041 	.word	0x08004041
 8004034:	08004053 	.word	0x08004053
 8004038:	08004041 	.word	0x08004041
 800403c:	080040d7 	.word	0x080040d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d046      	beq.n	80040da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004050:	e043      	b.n	80040da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004056:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800405a:	d140      	bne.n	80040de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004060:	e03d      	b.n	80040de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406a:	d121      	bne.n	80040b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b03      	cmp	r3, #3
 8004070:	d837      	bhi.n	80040e2 <DMA_CheckFifoParam+0xda>
 8004072:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <DMA_CheckFifoParam+0x70>)
 8004074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004078:	08004089 	.word	0x08004089
 800407c:	0800408f 	.word	0x0800408f
 8004080:	08004089 	.word	0x08004089
 8004084:	080040a1 	.word	0x080040a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
      break;
 800408c:	e030      	b.n	80040f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d025      	beq.n	80040e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409e:	e022      	b.n	80040e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040a8:	d11f      	bne.n	80040ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040ae:	e01c      	b.n	80040ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d903      	bls.n	80040be <DMA_CheckFifoParam+0xb6>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d003      	beq.n	80040c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040bc:	e018      	b.n	80040f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
      break;
 80040c2:	e015      	b.n	80040f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00e      	beq.n	80040ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      break;
 80040d4:	e00b      	b.n	80040ee <DMA_CheckFifoParam+0xe6>
      break;
 80040d6:	bf00      	nop
 80040d8:	e00a      	b.n	80040f0 <DMA_CheckFifoParam+0xe8>
      break;
 80040da:	bf00      	nop
 80040dc:	e008      	b.n	80040f0 <DMA_CheckFifoParam+0xe8>
      break;
 80040de:	bf00      	nop
 80040e0:	e006      	b.n	80040f0 <DMA_CheckFifoParam+0xe8>
      break;
 80040e2:	bf00      	nop
 80040e4:	e004      	b.n	80040f0 <DMA_CheckFifoParam+0xe8>
      break;
 80040e6:	bf00      	nop
 80040e8:	e002      	b.n	80040f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80040ea:	bf00      	nop
 80040ec:	e000      	b.n	80040f0 <DMA_CheckFifoParam+0xe8>
      break;
 80040ee:	bf00      	nop
    }
  } 
  
  return status; 
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop

08004100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004100:	b480      	push	{r7}
 8004102:	b089      	sub	sp, #36	@ 0x24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800410e:	2300      	movs	r3, #0
 8004110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	e165      	b.n	80043e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800411c:	2201      	movs	r2, #1
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4013      	ands	r3, r2
 800412e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	429a      	cmp	r2, r3
 8004136:	f040 8154 	bne.w	80043e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d005      	beq.n	8004152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800414e:	2b02      	cmp	r3, #2
 8004150:	d130      	bne.n	80041b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4013      	ands	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004188:	2201      	movs	r2, #1
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 0201 	and.w	r2, r3, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 0303 	and.w	r3, r3, #3
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d017      	beq.n	80041f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	2203      	movs	r2, #3
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43db      	mvns	r3, r3
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4013      	ands	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d123      	bne.n	8004244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	08da      	lsrs	r2, r3, #3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3208      	adds	r2, #8
 8004204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	220f      	movs	r2, #15
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	08da      	lsrs	r2, r3, #3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3208      	adds	r2, #8
 800423e:	69b9      	ldr	r1, [r7, #24]
 8004240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	2203      	movs	r2, #3
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 0203 	and.w	r2, r3, #3
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80ae 	beq.w	80043e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	4b5d      	ldr	r3, [pc, #372]	@ (8004400 <HAL_GPIO_Init+0x300>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428e:	4a5c      	ldr	r2, [pc, #368]	@ (8004400 <HAL_GPIO_Init+0x300>)
 8004290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004294:	6453      	str	r3, [r2, #68]	@ 0x44
 8004296:	4b5a      	ldr	r3, [pc, #360]	@ (8004400 <HAL_GPIO_Init+0x300>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042a2:	4a58      	ldr	r2, [pc, #352]	@ (8004404 <HAL_GPIO_Init+0x304>)
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	3302      	adds	r3, #2
 80042aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	220f      	movs	r2, #15
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	43db      	mvns	r3, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4013      	ands	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a4f      	ldr	r2, [pc, #316]	@ (8004408 <HAL_GPIO_Init+0x308>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d025      	beq.n	800431a <HAL_GPIO_Init+0x21a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a4e      	ldr	r2, [pc, #312]	@ (800440c <HAL_GPIO_Init+0x30c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d01f      	beq.n	8004316 <HAL_GPIO_Init+0x216>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a4d      	ldr	r2, [pc, #308]	@ (8004410 <HAL_GPIO_Init+0x310>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d019      	beq.n	8004312 <HAL_GPIO_Init+0x212>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a4c      	ldr	r2, [pc, #304]	@ (8004414 <HAL_GPIO_Init+0x314>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d013      	beq.n	800430e <HAL_GPIO_Init+0x20e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004418 <HAL_GPIO_Init+0x318>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00d      	beq.n	800430a <HAL_GPIO_Init+0x20a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a4a      	ldr	r2, [pc, #296]	@ (800441c <HAL_GPIO_Init+0x31c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <HAL_GPIO_Init+0x206>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a49      	ldr	r2, [pc, #292]	@ (8004420 <HAL_GPIO_Init+0x320>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <HAL_GPIO_Init+0x202>
 80042fe:	2306      	movs	r3, #6
 8004300:	e00c      	b.n	800431c <HAL_GPIO_Init+0x21c>
 8004302:	2307      	movs	r3, #7
 8004304:	e00a      	b.n	800431c <HAL_GPIO_Init+0x21c>
 8004306:	2305      	movs	r3, #5
 8004308:	e008      	b.n	800431c <HAL_GPIO_Init+0x21c>
 800430a:	2304      	movs	r3, #4
 800430c:	e006      	b.n	800431c <HAL_GPIO_Init+0x21c>
 800430e:	2303      	movs	r3, #3
 8004310:	e004      	b.n	800431c <HAL_GPIO_Init+0x21c>
 8004312:	2302      	movs	r3, #2
 8004314:	e002      	b.n	800431c <HAL_GPIO_Init+0x21c>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <HAL_GPIO_Init+0x21c>
 800431a:	2300      	movs	r3, #0
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	f002 0203 	and.w	r2, r2, #3
 8004322:	0092      	lsls	r2, r2, #2
 8004324:	4093      	lsls	r3, r2
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800432c:	4935      	ldr	r1, [pc, #212]	@ (8004404 <HAL_GPIO_Init+0x304>)
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	3302      	adds	r3, #2
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800433a:	4b3a      	ldr	r3, [pc, #232]	@ (8004424 <HAL_GPIO_Init+0x324>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	43db      	mvns	r3, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4013      	ands	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800435e:	4a31      	ldr	r2, [pc, #196]	@ (8004424 <HAL_GPIO_Init+0x324>)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004364:	4b2f      	ldr	r3, [pc, #188]	@ (8004424 <HAL_GPIO_Init+0x324>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004388:	4a26      	ldr	r2, [pc, #152]	@ (8004424 <HAL_GPIO_Init+0x324>)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800438e:	4b25      	ldr	r3, [pc, #148]	@ (8004424 <HAL_GPIO_Init+0x324>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004424 <HAL_GPIO_Init+0x324>)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004424 <HAL_GPIO_Init+0x324>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4013      	ands	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043dc:	4a11      	ldr	r2, [pc, #68]	@ (8004424 <HAL_GPIO_Init+0x324>)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	3301      	adds	r3, #1
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b0f      	cmp	r3, #15
 80043ec:	f67f ae96 	bls.w	800411c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043f0:	bf00      	nop
 80043f2:	bf00      	nop
 80043f4:	3724      	adds	r7, #36	@ 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800
 8004404:	40013800 	.word	0x40013800
 8004408:	40020000 	.word	0x40020000
 800440c:	40020400 	.word	0x40020400
 8004410:	40020800 	.word	0x40020800
 8004414:	40020c00 	.word	0x40020c00
 8004418:	40021000 	.word	0x40021000
 800441c:	40021400 	.word	0x40021400
 8004420:	40021800 	.word	0x40021800
 8004424:	40013c00 	.word	0x40013c00

08004428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]
 8004434:	4613      	mov	r3, r2
 8004436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004438:	787b      	ldrb	r3, [r7, #1]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800443e:	887a      	ldrh	r2, [r7, #2]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004444:	e003      	b.n	800444e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004446:	887b      	ldrh	r3, [r7, #2]
 8004448:	041a      	lsls	r2, r3, #16
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	619a      	str	r2, [r3, #24]
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0cc      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004470:	4b68      	ldr	r3, [pc, #416]	@ (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d90c      	bls.n	8004498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	4b65      	ldr	r3, [pc, #404]	@ (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004486:	4b63      	ldr	r3, [pc, #396]	@ (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0b8      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b0:	4b59      	ldr	r3, [pc, #356]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a58      	ldr	r2, [pc, #352]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044c8:	4b53      	ldr	r3, [pc, #332]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a52      	ldr	r2, [pc, #328]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d4:	4b50      	ldr	r3, [pc, #320]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	494d      	ldr	r1, [pc, #308]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d044      	beq.n	800457c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	4b47      	ldr	r3, [pc, #284]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d119      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e07f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b02      	cmp	r3, #2
 8004510:	d003      	beq.n	800451a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004516:	2b03      	cmp	r3, #3
 8004518:	d107      	bne.n	800452a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451a:	4b3f      	ldr	r3, [pc, #252]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e06f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452a:	4b3b      	ldr	r3, [pc, #236]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e067      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800453a:	4b37      	ldr	r3, [pc, #220]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 0203 	bic.w	r2, r3, #3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4934      	ldr	r1, [pc, #208]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	4313      	orrs	r3, r2
 800454a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800454c:	f7ff f8e8 	bl	8003720 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	e00a      	b.n	800456a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004554:	f7ff f8e4 	bl	8003720 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d901      	bls.n	800456a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e04f      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456a:	4b2b      	ldr	r3, [pc, #172]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 020c 	and.w	r2, r3, #12
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	429a      	cmp	r2, r3
 800457a:	d1eb      	bne.n	8004554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800457c:	4b25      	ldr	r3, [pc, #148]	@ (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d20c      	bcs.n	80045a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b22      	ldr	r3, [pc, #136]	@ (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b20      	ldr	r3, [pc, #128]	@ (8004614 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e032      	b.n	800460a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d008      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b0:	4b19      	ldr	r3, [pc, #100]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	4916      	ldr	r1, [pc, #88]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0308 	and.w	r3, r3, #8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d009      	beq.n	80045e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ce:	4b12      	ldr	r3, [pc, #72]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	490e      	ldr	r1, [pc, #56]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045e2:	f000 f887 	bl	80046f4 <HAL_RCC_GetSysClockFreq>
 80045e6:	4602      	mov	r2, r0
 80045e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	490a      	ldr	r1, [pc, #40]	@ (800461c <HAL_RCC_ClockConfig+0x1c0>)
 80045f4:	5ccb      	ldrb	r3, [r1, r3]
 80045f6:	fa22 f303 	lsr.w	r3, r2, r3
 80045fa:	4a09      	ldr	r2, [pc, #36]	@ (8004620 <HAL_RCC_ClockConfig+0x1c4>)
 80045fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045fe:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <HAL_RCC_ClockConfig+0x1c8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fe fe06 	bl	8003214 <HAL_InitTick>

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023c00 	.word	0x40023c00
 8004618:	40023800 	.word	0x40023800
 800461c:	0801b90c 	.word	0x0801b90c
 8004620:	2000000c 	.word	0x2000000c
 8004624:	20000010 	.word	0x20000010

08004628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800462c:	4b03      	ldr	r3, [pc, #12]	@ (800463c <HAL_RCC_GetHCLKFreq+0x14>)
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	2000000c 	.word	0x2000000c

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004644:	f7ff fff0 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0a9b      	lsrs	r3, r3, #10
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	@ (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	0801b91c 	.word	0x0801b91c

08004668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800466c:	f7ff ffdc 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	0b5b      	lsrs	r3, r3, #13
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4903      	ldr	r1, [pc, #12]	@ (800468c <HAL_RCC_GetPCLK2Freq+0x24>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40023800 	.word	0x40023800
 800468c:	0801b91c 	.word	0x0801b91c

08004690 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	220f      	movs	r2, #15
 800469e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046a0:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <HAL_RCC_GetClockConfig+0x5c>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0203 	and.w	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046ac:	4b0f      	ldr	r3, [pc, #60]	@ (80046ec <HAL_RCC_GetClockConfig+0x5c>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046b8:	4b0c      	ldr	r3, [pc, #48]	@ (80046ec <HAL_RCC_GetClockConfig+0x5c>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046c4:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <HAL_RCC_GetClockConfig+0x5c>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046d2:	4b07      	ldr	r3, [pc, #28]	@ (80046f0 <HAL_RCC_GetClockConfig+0x60>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 020f 	and.w	r2, r3, #15
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	601a      	str	r2, [r3, #0]
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40023c00 	.word	0x40023c00

080046f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f8:	b0ae      	sub	sp, #184	@ 0xb8
 80046fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800471a:	4bcb      	ldr	r3, [pc, #812]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b0c      	cmp	r3, #12
 8004724:	f200 8206 	bhi.w	8004b34 <HAL_RCC_GetSysClockFreq+0x440>
 8004728:	a201      	add	r2, pc, #4	@ (adr r2, 8004730 <HAL_RCC_GetSysClockFreq+0x3c>)
 800472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472e:	bf00      	nop
 8004730:	08004765 	.word	0x08004765
 8004734:	08004b35 	.word	0x08004b35
 8004738:	08004b35 	.word	0x08004b35
 800473c:	08004b35 	.word	0x08004b35
 8004740:	0800476d 	.word	0x0800476d
 8004744:	08004b35 	.word	0x08004b35
 8004748:	08004b35 	.word	0x08004b35
 800474c:	08004b35 	.word	0x08004b35
 8004750:	08004775 	.word	0x08004775
 8004754:	08004b35 	.word	0x08004b35
 8004758:	08004b35 	.word	0x08004b35
 800475c:	08004b35 	.word	0x08004b35
 8004760:	08004965 	.word	0x08004965
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004764:	4bb9      	ldr	r3, [pc, #740]	@ (8004a4c <HAL_RCC_GetSysClockFreq+0x358>)
 8004766:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800476a:	e1e7      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800476c:	4bb8      	ldr	r3, [pc, #736]	@ (8004a50 <HAL_RCC_GetSysClockFreq+0x35c>)
 800476e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004772:	e1e3      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004774:	4bb4      	ldr	r3, [pc, #720]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800477c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004780:	4bb1      	ldr	r3, [pc, #708]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d071      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800478c:	4bae      	ldr	r3, [pc, #696]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	2200      	movs	r2, #0
 8004794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004798:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800479c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047a8:	2300      	movs	r3, #0
 80047aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047b2:	4622      	mov	r2, r4
 80047b4:	462b      	mov	r3, r5
 80047b6:	f04f 0000 	mov.w	r0, #0
 80047ba:	f04f 0100 	mov.w	r1, #0
 80047be:	0159      	lsls	r1, r3, #5
 80047c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c4:	0150      	lsls	r0, r2, #5
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4621      	mov	r1, r4
 80047cc:	1a51      	subs	r1, r2, r1
 80047ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80047d0:	4629      	mov	r1, r5
 80047d2:	eb63 0301 	sbc.w	r3, r3, r1
 80047d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80047e4:	4649      	mov	r1, r9
 80047e6:	018b      	lsls	r3, r1, #6
 80047e8:	4641      	mov	r1, r8
 80047ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ee:	4641      	mov	r1, r8
 80047f0:	018a      	lsls	r2, r1, #6
 80047f2:	4641      	mov	r1, r8
 80047f4:	1a51      	subs	r1, r2, r1
 80047f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80047f8:	4649      	mov	r1, r9
 80047fa:	eb63 0301 	sbc.w	r3, r3, r1
 80047fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800480c:	4649      	mov	r1, r9
 800480e:	00cb      	lsls	r3, r1, #3
 8004810:	4641      	mov	r1, r8
 8004812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004816:	4641      	mov	r1, r8
 8004818:	00ca      	lsls	r2, r1, #3
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	4603      	mov	r3, r0
 8004820:	4622      	mov	r2, r4
 8004822:	189b      	adds	r3, r3, r2
 8004824:	633b      	str	r3, [r7, #48]	@ 0x30
 8004826:	462b      	mov	r3, r5
 8004828:	460a      	mov	r2, r1
 800482a:	eb42 0303 	adc.w	r3, r2, r3
 800482e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800483c:	4629      	mov	r1, r5
 800483e:	024b      	lsls	r3, r1, #9
 8004840:	4621      	mov	r1, r4
 8004842:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004846:	4621      	mov	r1, r4
 8004848:	024a      	lsls	r2, r1, #9
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004858:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800485c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004860:	f7fc f974 	bl	8000b4c <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4613      	mov	r3, r2
 800486a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800486e:	e067      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004870:	4b75      	ldr	r3, [pc, #468]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	099b      	lsrs	r3, r3, #6
 8004876:	2200      	movs	r2, #0
 8004878:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800487c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004880:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	67bb      	str	r3, [r7, #120]	@ 0x78
 800488a:	2300      	movs	r3, #0
 800488c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800488e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004892:	4622      	mov	r2, r4
 8004894:	462b      	mov	r3, r5
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	0159      	lsls	r1, r3, #5
 80048a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a4:	0150      	lsls	r0, r2, #5
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4621      	mov	r1, r4
 80048ac:	1a51      	subs	r1, r2, r1
 80048ae:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048b0:	4629      	mov	r1, r5
 80048b2:	eb63 0301 	sbc.w	r3, r3, r1
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80048c4:	4649      	mov	r1, r9
 80048c6:	018b      	lsls	r3, r1, #6
 80048c8:	4641      	mov	r1, r8
 80048ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ce:	4641      	mov	r1, r8
 80048d0:	018a      	lsls	r2, r1, #6
 80048d2:	4641      	mov	r1, r8
 80048d4:	ebb2 0a01 	subs.w	sl, r2, r1
 80048d8:	4649      	mov	r1, r9
 80048da:	eb63 0b01 	sbc.w	fp, r3, r1
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048f2:	4692      	mov	sl, r2
 80048f4:	469b      	mov	fp, r3
 80048f6:	4623      	mov	r3, r4
 80048f8:	eb1a 0303 	adds.w	r3, sl, r3
 80048fc:	623b      	str	r3, [r7, #32]
 80048fe:	462b      	mov	r3, r5
 8004900:	eb4b 0303 	adc.w	r3, fp, r3
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004912:	4629      	mov	r1, r5
 8004914:	028b      	lsls	r3, r1, #10
 8004916:	4621      	mov	r1, r4
 8004918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800491c:	4621      	mov	r1, r4
 800491e:	028a      	lsls	r2, r1, #10
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004928:	2200      	movs	r2, #0
 800492a:	673b      	str	r3, [r7, #112]	@ 0x70
 800492c:	677a      	str	r2, [r7, #116]	@ 0x74
 800492e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004932:	f7fc f90b 	bl	8000b4c <__aeabi_uldivmod>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4613      	mov	r3, r2
 800493c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004940:	4b41      	ldr	r3, [pc, #260]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	f003 0303 	and.w	r3, r3, #3
 800494a:	3301      	adds	r3, #1
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004952:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004962:	e0eb      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004964:	4b38      	ldr	r3, [pc, #224]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800496c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004970:	4b35      	ldr	r3, [pc, #212]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d06b      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497c:	4b32      	ldr	r3, [pc, #200]	@ (8004a48 <HAL_RCC_GetSysClockFreq+0x354>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	099b      	lsrs	r3, r3, #6
 8004982:	2200      	movs	r2, #0
 8004984:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004988:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800498a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004990:	2300      	movs	r3, #0
 8004992:	667b      	str	r3, [r7, #100]	@ 0x64
 8004994:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004998:	4622      	mov	r2, r4
 800499a:	462b      	mov	r3, r5
 800499c:	f04f 0000 	mov.w	r0, #0
 80049a0:	f04f 0100 	mov.w	r1, #0
 80049a4:	0159      	lsls	r1, r3, #5
 80049a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049aa:	0150      	lsls	r0, r2, #5
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4621      	mov	r1, r4
 80049b2:	1a51      	subs	r1, r2, r1
 80049b4:	61b9      	str	r1, [r7, #24]
 80049b6:	4629      	mov	r1, r5
 80049b8:	eb63 0301 	sbc.w	r3, r3, r1
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80049ca:	4659      	mov	r1, fp
 80049cc:	018b      	lsls	r3, r1, #6
 80049ce:	4651      	mov	r1, sl
 80049d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049d4:	4651      	mov	r1, sl
 80049d6:	018a      	lsls	r2, r1, #6
 80049d8:	4651      	mov	r1, sl
 80049da:	ebb2 0801 	subs.w	r8, r2, r1
 80049de:	4659      	mov	r1, fp
 80049e0:	eb63 0901 	sbc.w	r9, r3, r1
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f8:	4690      	mov	r8, r2
 80049fa:	4699      	mov	r9, r3
 80049fc:	4623      	mov	r3, r4
 80049fe:	eb18 0303 	adds.w	r3, r8, r3
 8004a02:	613b      	str	r3, [r7, #16]
 8004a04:	462b      	mov	r3, r5
 8004a06:	eb49 0303 	adc.w	r3, r9, r3
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a18:	4629      	mov	r1, r5
 8004a1a:	024b      	lsls	r3, r1, #9
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a22:	4621      	mov	r1, r4
 8004a24:	024a      	lsls	r2, r1, #9
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a2e:	2200      	movs	r2, #0
 8004a30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a32:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004a34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a38:	f7fc f888 	bl	8000b4c <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4613      	mov	r3, r2
 8004a42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a46:	e065      	b.n	8004b14 <HAL_RCC_GetSysClockFreq+0x420>
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	00f42400 	.word	0x00f42400
 8004a50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a54:	4b3d      	ldr	r3, [pc, #244]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x458>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	099b      	lsrs	r3, r3, #6
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	4611      	mov	r1, r2
 8004a60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a64:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a66:	2300      	movs	r3, #0
 8004a68:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004a6e:	4642      	mov	r2, r8
 8004a70:	464b      	mov	r3, r9
 8004a72:	f04f 0000 	mov.w	r0, #0
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	0159      	lsls	r1, r3, #5
 8004a7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a80:	0150      	lsls	r0, r2, #5
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4641      	mov	r1, r8
 8004a88:	1a51      	subs	r1, r2, r1
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	018b      	lsls	r3, r1, #6
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004aaa:	4651      	mov	r1, sl
 8004aac:	018a      	lsls	r2, r1, #6
 8004aae:	4651      	mov	r1, sl
 8004ab0:	1a54      	subs	r4, r2, r1
 8004ab2:	4659      	mov	r1, fp
 8004ab4:	eb63 0501 	sbc.w	r5, r3, r1
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	00eb      	lsls	r3, r5, #3
 8004ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac6:	00e2      	lsls	r2, r4, #3
 8004ac8:	4614      	mov	r4, r2
 8004aca:	461d      	mov	r5, r3
 8004acc:	4643      	mov	r3, r8
 8004ace:	18e3      	adds	r3, r4, r3
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	464b      	mov	r3, r9
 8004ad4:	eb45 0303 	adc.w	r3, r5, r3
 8004ad8:	607b      	str	r3, [r7, #4]
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ae6:	4629      	mov	r1, r5
 8004ae8:	028b      	lsls	r3, r1, #10
 8004aea:	4621      	mov	r1, r4
 8004aec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004af0:	4621      	mov	r1, r4
 8004af2:	028a      	lsls	r2, r1, #10
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004afc:	2200      	movs	r2, #0
 8004afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b00:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004b02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b06:	f7fc f821 	bl	8000b4c <__aeabi_uldivmod>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4613      	mov	r3, r2
 8004b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b14:	4b0d      	ldr	r3, [pc, #52]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x458>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	0f1b      	lsrs	r3, r3, #28
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b32:	e003      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b34:	4b06      	ldr	r3, [pc, #24]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004b36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004b3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	37b8      	adds	r7, #184	@ 0xb8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	00f42400 	.word	0x00f42400

08004b54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e28d      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 8083 	beq.w	8004c7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b74:	4b94      	ldr	r3, [pc, #592]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d019      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004b80:	4b91      	ldr	r3, [pc, #580]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 030c 	and.w	r3, r3, #12
        || \
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004b8c:	4b8e      	ldr	r3, [pc, #568]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b98:	d00c      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	d112      	bne.n	8004bcc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ba6:	4b88      	ldr	r3, [pc, #544]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bb2:	d10b      	bne.n	8004bcc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb4:	4b84      	ldr	r3, [pc, #528]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d05b      	beq.n	8004c78 <HAL_RCC_OscConfig+0x124>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d157      	bne.n	8004c78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e25a      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd4:	d106      	bne.n	8004be4 <HAL_RCC_OscConfig+0x90>
 8004bd6:	4b7c      	ldr	r3, [pc, #496]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7b      	ldr	r2, [pc, #492]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e01d      	b.n	8004c20 <HAL_RCC_OscConfig+0xcc>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCC_OscConfig+0xb4>
 8004bee:	4b76      	ldr	r3, [pc, #472]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a75      	ldr	r2, [pc, #468]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	4b73      	ldr	r3, [pc, #460]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a72      	ldr	r2, [pc, #456]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e00b      	b.n	8004c20 <HAL_RCC_OscConfig+0xcc>
 8004c08:	4b6f      	ldr	r3, [pc, #444]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b6c      	ldr	r3, [pc, #432]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6b      	ldr	r2, [pc, #428]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d013      	beq.n	8004c50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c28:	f7fe fd7a 	bl	8003720 <HAL_GetTick>
 8004c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c30:	f7fe fd76 	bl	8003720 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	@ 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e21f      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	4b61      	ldr	r3, [pc, #388]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCC_OscConfig+0xdc>
 8004c4e:	e014      	b.n	8004c7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fe fd66 	bl	8003720 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c58:	f7fe fd62 	bl	8003720 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b64      	cmp	r3, #100	@ 0x64
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e20b      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	4b57      	ldr	r3, [pc, #348]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1f0      	bne.n	8004c58 <HAL_RCC_OscConfig+0x104>
 8004c76:	e000      	b.n	8004c7a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d06f      	beq.n	8004d66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c86:	4b50      	ldr	r3, [pc, #320]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d017      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004c92:	4b4d      	ldr	r3, [pc, #308]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f003 030c 	and.w	r3, r3, #12
        || \
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d105      	bne.n	8004caa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004caa:	4b47      	ldr	r3, [pc, #284]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004cb2:	2b0c      	cmp	r3, #12
 8004cb4:	d11c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb6:	4b44      	ldr	r3, [pc, #272]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc2:	4b41      	ldr	r3, [pc, #260]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_RCC_OscConfig+0x186>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e1d3      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cda:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4937      	ldr	r1, [pc, #220]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cee:	e03a      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf8:	4b34      	ldr	r3, [pc, #208]	@ (8004dcc <HAL_RCC_OscConfig+0x278>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fe fd0f 	bl	8003720 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d06:	f7fe fd0b 	bl	8003720 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e1b4      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	4b28      	ldr	r3, [pc, #160]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4925      	ldr	r1, [pc, #148]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]
 8004d38:	e015      	b.n	8004d66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3a:	4b24      	ldr	r3, [pc, #144]	@ (8004dcc <HAL_RCC_OscConfig+0x278>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe fcee 	bl	8003720 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d48:	f7fe fcea 	bl	8003720 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e193      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d036      	beq.n	8004de0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7a:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fe fcce 	bl	8003720 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d88:	f7fe fcca 	bl	8003720 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e173      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCC_OscConfig+0x234>
 8004da6:	e01b      	b.n	8004de0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da8:	4b09      	ldr	r3, [pc, #36]	@ (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dae:	f7fe fcb7 	bl	8003720 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	e00e      	b.n	8004dd4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db6:	f7fe fcb3 	bl	8003720 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d907      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e15c      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	42470000 	.word	0x42470000
 8004dd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd4:	4b8a      	ldr	r3, [pc, #552]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ea      	bne.n	8004db6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8097 	beq.w	8004f1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df2:	4b83      	ldr	r3, [pc, #524]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	4b7f      	ldr	r3, [pc, #508]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	4a7e      	ldr	r2, [pc, #504]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b79      	ldr	r3, [pc, #484]	@ (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d118      	bne.n	8004e5c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2a:	4b76      	ldr	r3, [pc, #472]	@ (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a75      	ldr	r2, [pc, #468]	@ (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e36:	f7fe fc73 	bl	8003720 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fe fc6f 	bl	8003720 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e118      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	4b6c      	ldr	r3, [pc, #432]	@ (8005004 <HAL_RCC_OscConfig+0x4b0>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <HAL_RCC_OscConfig+0x31e>
 8004e64:	4b66      	ldr	r3, [pc, #408]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e68:	4a65      	ldr	r2, [pc, #404]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e70:	e01c      	b.n	8004eac <HAL_RCC_OscConfig+0x358>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x340>
 8004e7a:	4b61      	ldr	r3, [pc, #388]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7e:	4a60      	ldr	r2, [pc, #384]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e86:	4b5e      	ldr	r3, [pc, #376]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0x358>
 8004e94:	4b5a      	ldr	r3, [pc, #360]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e98:	4a59      	ldr	r2, [pc, #356]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea0:	4b57      	ldr	r3, [pc, #348]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea4:	4a56      	ldr	r2, [pc, #344]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fe fc34 	bl	8003720 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fe fc30 	bl	8003720 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0d7      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ee      	beq.n	8004ebc <HAL_RCC_OscConfig+0x368>
 8004ede:	e014      	b.n	8004f0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee0:	f7fe fc1e 	bl	8003720 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fe fc1a 	bl	8003720 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e0c1      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efe:	4b40      	ldr	r3, [pc, #256]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ee      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f10:	4b3b      	ldr	r3, [pc, #236]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	4a3a      	ldr	r2, [pc, #232]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80ad 	beq.w	8005080 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f26:	4b36      	ldr	r3, [pc, #216]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d060      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d145      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3a:	4b33      	ldr	r3, [pc, #204]	@ (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f40:	f7fe fbee 	bl	8003720 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fe fbea 	bl	8003720 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e093      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	491b      	ldr	r1, [pc, #108]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f98:	4b1b      	ldr	r3, [pc, #108]	@ (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9e:	f7fe fbbf 	bl	8003720 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa6:	f7fe fbbb 	bl	8003720 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e064      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb8:	4b11      	ldr	r3, [pc, #68]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d0f0      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x452>
 8004fc4:	e05c      	b.n	8005080 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b10      	ldr	r3, [pc, #64]	@ (8005008 <HAL_RCC_OscConfig+0x4b4>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fe fba8 	bl	8003720 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fe fba4 	bl	8003720 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e04d      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x480>
 8004ff2:	e045      	b.n	8005080 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d107      	bne.n	800500c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e040      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
 8005000:	40023800 	.word	0x40023800
 8005004:	40007000 	.word	0x40007000
 8005008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800500c:	4b1f      	ldr	r3, [pc, #124]	@ (800508c <HAL_RCC_OscConfig+0x538>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d030      	beq.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005024:	429a      	cmp	r2, r3
 8005026:	d129      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005032:	429a      	cmp	r2, r3
 8005034:	d122      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005044:	4293      	cmp	r3, r2
 8005046:	d119      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005052:	085b      	lsrs	r3, r3, #1
 8005054:	3b01      	subs	r3, #1
 8005056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d10f      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d107      	bne.n	800507c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e000      	b.n	8005082 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800

08005090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e041      	b.n	8005126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fd fefa 	bl	8002eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f000 fd96 	bl	8005c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d001      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e04e      	b.n	80051e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a23      	ldr	r2, [pc, #140]	@ (80051f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d022      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005172:	d01d      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1f      	ldr	r2, [pc, #124]	@ (80051f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d018      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1e      	ldr	r2, [pc, #120]	@ (80051fc <HAL_TIM_Base_Start_IT+0xcc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1c      	ldr	r2, [pc, #112]	@ (8005200 <HAL_TIM_Base_Start_IT+0xd0>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00e      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1b      	ldr	r2, [pc, #108]	@ (8005204 <HAL_TIM_Base_Start_IT+0xd4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <HAL_TIM_Base_Start_IT+0xd8>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <HAL_TIM_Base_Start_IT+0x80>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a18      	ldr	r2, [pc, #96]	@ (800520c <HAL_TIM_Base_Start_IT+0xdc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d111      	bne.n	80051d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b06      	cmp	r3, #6
 80051c0:	d010      	beq.n	80051e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d2:	e007      	b.n	80051e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00
 8005204:	40010400 	.word	0x40010400
 8005208:	40014000 	.word	0x40014000
 800520c:	40001800 	.word	0x40001800

08005210 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e041      	b.n	80052a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f839 	bl	80052ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f000 fcd6 	bl	8005c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d109      	bne.n	80052e8 <HAL_TIM_PWM_Start+0x24>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b01      	cmp	r3, #1
 80052de:	bf14      	ite	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	2300      	moveq	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e022      	b.n	800532e <HAL_TIM_PWM_Start+0x6a>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d109      	bne.n	8005302 <HAL_TIM_PWM_Start+0x3e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	bf14      	ite	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	2300      	moveq	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	e015      	b.n	800532e <HAL_TIM_PWM_Start+0x6a>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d109      	bne.n	800531c <HAL_TIM_PWM_Start+0x58>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e008      	b.n	800532e <HAL_TIM_PWM_Start+0x6a>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b01      	cmp	r3, #1
 8005326:	bf14      	ite	ne
 8005328:	2301      	movne	r3, #1
 800532a:	2300      	moveq	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e07c      	b.n	8005430 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <HAL_TIM_PWM_Start+0x82>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005344:	e013      	b.n	800536e <HAL_TIM_PWM_Start+0xaa>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b04      	cmp	r3, #4
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Start+0x92>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005354:	e00b      	b.n	800536e <HAL_TIM_PWM_Start+0xaa>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d104      	bne.n	8005366 <HAL_TIM_PWM_Start+0xa2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005364:	e003      	b.n	800536e <HAL_TIM_PWM_Start+0xaa>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2201      	movs	r2, #1
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 ff32 	bl	80061e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a2d      	ldr	r2, [pc, #180]	@ (8005438 <HAL_TIM_PWM_Start+0x174>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d004      	beq.n	8005390 <HAL_TIM_PWM_Start+0xcc>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a2c      	ldr	r2, [pc, #176]	@ (800543c <HAL_TIM_PWM_Start+0x178>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d101      	bne.n	8005394 <HAL_TIM_PWM_Start+0xd0>
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <HAL_TIM_PWM_Start+0xd2>
 8005394:	2300      	movs	r3, #0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a22      	ldr	r2, [pc, #136]	@ (8005438 <HAL_TIM_PWM_Start+0x174>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d022      	beq.n	80053fa <HAL_TIM_PWM_Start+0x136>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053bc:	d01d      	beq.n	80053fa <HAL_TIM_PWM_Start+0x136>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005440 <HAL_TIM_PWM_Start+0x17c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_TIM_PWM_Start+0x136>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005444 <HAL_TIM_PWM_Start+0x180>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_TIM_PWM_Start+0x136>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005448 <HAL_TIM_PWM_Start+0x184>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIM_PWM_Start+0x136>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a16      	ldr	r2, [pc, #88]	@ (800543c <HAL_TIM_PWM_Start+0x178>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIM_PWM_Start+0x136>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a18      	ldr	r2, [pc, #96]	@ (800544c <HAL_TIM_PWM_Start+0x188>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIM_PWM_Start+0x136>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a16      	ldr	r2, [pc, #88]	@ (8005450 <HAL_TIM_PWM_Start+0x18c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d111      	bne.n	800541e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b06      	cmp	r3, #6
 800540a:	d010      	beq.n	800542e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541c:	e007      	b.n	800542e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0201 	orr.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40010000 	.word	0x40010000
 800543c:	40010400 	.word	0x40010400
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40000c00 	.word	0x40000c00
 800544c:	40014000 	.word	0x40014000
 8005450:	40001800 	.word	0x40001800

08005454 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e097      	b.n	8005598 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d106      	bne.n	8005482 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f7fd fbdf 	bl	8002c40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005498:	f023 0307 	bic.w	r3, r3, #7
 800549c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f000 fba9 	bl	8005c00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054d6:	f023 0303 	bic.w	r3, r3, #3
 80054da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	4313      	orrs	r3, r2
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80054f4:	f023 030c 	bic.w	r3, r3, #12
 80054f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005500:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	4313      	orrs	r3, r2
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	011a      	lsls	r2, r3, #4
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	031b      	lsls	r3, r3, #12
 8005524:	4313      	orrs	r3, r2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005532:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800553a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	4313      	orrs	r3, r2
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d110      	bne.n	80055f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d102      	bne.n	80055dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80055d6:	7b7b      	ldrb	r3, [r7, #13]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d001      	beq.n	80055e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e069      	b.n	80056b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055f0:	e031      	b.n	8005656 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d110      	bne.n	800561a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055f8:	7bbb      	ldrb	r3, [r7, #14]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d102      	bne.n	8005604 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055fe:	7b3b      	ldrb	r3, [r7, #12]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d001      	beq.n	8005608 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e055      	b.n	80056b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005618:	e01d      	b.n	8005656 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d108      	bne.n	8005632 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005620:	7bbb      	ldrb	r3, [r7, #14]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d105      	bne.n	8005632 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005626:	7b7b      	ldrb	r3, [r7, #13]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d102      	bne.n	8005632 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800562c:	7b3b      	ldrb	r3, [r7, #12]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d001      	beq.n	8005636 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e03e      	b.n	80056b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_TIM_Encoder_Start+0xc4>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b04      	cmp	r3, #4
 8005660:	d008      	beq.n	8005674 <HAL_TIM_Encoder_Start+0xd4>
 8005662:	e00f      	b.n	8005684 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2201      	movs	r2, #1
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fdb7 	bl	80061e0 <TIM_CCxChannelCmd>
      break;
 8005672:	e016      	b.n	80056a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2201      	movs	r2, #1
 800567a:	2104      	movs	r1, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f000 fdaf 	bl	80061e0 <TIM_CCxChannelCmd>
      break;
 8005682:	e00e      	b.n	80056a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2201      	movs	r2, #1
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fda7 	bl	80061e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2201      	movs	r2, #1
 8005698:	2104      	movs	r1, #4
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fda0 	bl	80061e0 <TIM_CCxChannelCmd>
      break;
 80056a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d020      	beq.n	8005720 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01b      	beq.n	8005720 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0202 	mvn.w	r2, #2
 80056f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fa5b 	bl	8005bc2 <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa4d 	bl	8005bae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa5e 	bl	8005bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d020      	beq.n	800576c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01b      	beq.n	800576c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0204 	mvn.w	r2, #4
 800573c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa35 	bl	8005bc2 <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa27 	bl	8005bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fa38 	bl	8005bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d020      	beq.n	80057b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0208 	mvn.w	r2, #8
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2204      	movs	r2, #4
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa0f 	bl	8005bc2 <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa01 	bl	8005bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fa12 	bl	8005bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d020      	beq.n	8005804 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01b      	beq.n	8005804 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0210 	mvn.w	r2, #16
 80057d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2208      	movs	r2, #8
 80057da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f9e9 	bl	8005bc2 <HAL_TIM_IC_CaptureCallback>
 80057f0:	e005      	b.n	80057fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9db 	bl	8005bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f9ec 	bl	8005bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0201 	mvn.w	r2, #1
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fd f804 	bl	8002830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00c      	beq.n	800584c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d007      	beq.n	800584c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fd76 	bl	8006338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00c      	beq.n	8005870 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9bd 	bl	8005bea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00c      	beq.n	8005894 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0220 	mvn.w	r2, #32
 800588c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fd48 	bl	8006324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d101      	bne.n	80058ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058b6:	2302      	movs	r3, #2
 80058b8:	e0ae      	b.n	8005a18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b0c      	cmp	r3, #12
 80058c6:	f200 809f 	bhi.w	8005a08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058ca:	a201      	add	r2, pc, #4	@ (adr r2, 80058d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	08005905 	.word	0x08005905
 80058d4:	08005a09 	.word	0x08005a09
 80058d8:	08005a09 	.word	0x08005a09
 80058dc:	08005a09 	.word	0x08005a09
 80058e0:	08005945 	.word	0x08005945
 80058e4:	08005a09 	.word	0x08005a09
 80058e8:	08005a09 	.word	0x08005a09
 80058ec:	08005a09 	.word	0x08005a09
 80058f0:	08005987 	.word	0x08005987
 80058f4:	08005a09 	.word	0x08005a09
 80058f8:	08005a09 	.word	0x08005a09
 80058fc:	08005a09 	.word	0x08005a09
 8005900:	080059c7 	.word	0x080059c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fa1e 	bl	8005d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0208 	orr.w	r2, r2, #8
 800591e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0204 	bic.w	r2, r2, #4
 800592e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6999      	ldr	r1, [r3, #24]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	619a      	str	r2, [r3, #24]
      break;
 8005942:	e064      	b.n	8005a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fa6e 	bl	8005e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800595e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800596e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6999      	ldr	r1, [r3, #24]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	021a      	lsls	r2, r3, #8
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	619a      	str	r2, [r3, #24]
      break;
 8005984:	e043      	b.n	8005a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fac3 	bl	8005f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0208 	orr.w	r2, r2, #8
 80059a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0204 	bic.w	r2, r2, #4
 80059b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	61da      	str	r2, [r3, #28]
      break;
 80059c4:	e023      	b.n	8005a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fb17 	bl	8006000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	69da      	ldr	r2, [r3, #28]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69da      	ldr	r2, [r3, #28]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	69d9      	ldr	r1, [r3, #28]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	021a      	lsls	r2, r3, #8
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	61da      	str	r2, [r3, #28]
      break;
 8005a06:	e002      	b.n	8005a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIM_ConfigClockSource+0x1c>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e0b4      	b.n	8005ba6 <HAL_TIM_ConfigClockSource+0x186>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a74:	d03e      	beq.n	8005af4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a7a:	f200 8087 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a82:	f000 8086 	beq.w	8005b92 <HAL_TIM_ConfigClockSource+0x172>
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8a:	d87f      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8c:	2b70      	cmp	r3, #112	@ 0x70
 8005a8e:	d01a      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0xa6>
 8005a90:	2b70      	cmp	r3, #112	@ 0x70
 8005a92:	d87b      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005a94:	2b60      	cmp	r3, #96	@ 0x60
 8005a96:	d050      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x11a>
 8005a98:	2b60      	cmp	r3, #96	@ 0x60
 8005a9a:	d877      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005a9c:	2b50      	cmp	r3, #80	@ 0x50
 8005a9e:	d03c      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0xfa>
 8005aa0:	2b50      	cmp	r3, #80	@ 0x50
 8005aa2:	d873      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005aa4:	2b40      	cmp	r3, #64	@ 0x40
 8005aa6:	d058      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x13a>
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	d86f      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005aac:	2b30      	cmp	r3, #48	@ 0x30
 8005aae:	d064      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x15a>
 8005ab0:	2b30      	cmp	r3, #48	@ 0x30
 8005ab2:	d86b      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d060      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x15a>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d867      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d05c      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x15a>
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d05a      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x15a>
 8005ac4:	e062      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ad6:	f000 fb63 	bl	80061a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	609a      	str	r2, [r3, #8]
      break;
 8005af2:	e04f      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b04:	f000 fb4c 	bl	80061a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b16:	609a      	str	r2, [r3, #8]
      break;
 8005b18:	e03c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b26:	461a      	mov	r2, r3
 8005b28:	f000 fac0 	bl	80060ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2150      	movs	r1, #80	@ 0x50
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fb19 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005b38:	e02c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b46:	461a      	mov	r2, r3
 8005b48:	f000 fadf 	bl	800610a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2160      	movs	r1, #96	@ 0x60
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fb09 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005b58:	e01c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	461a      	mov	r2, r3
 8005b68:	f000 faa0 	bl	80060ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2140      	movs	r1, #64	@ 0x40
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 faf9 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005b78:	e00c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f000 faf0 	bl	800616a <TIM_ITRx_SetConfig>
      break;
 8005b8a:	e003      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b90:	e000      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a43      	ldr	r2, [pc, #268]	@ (8005d20 <TIM_Base_SetConfig+0x120>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c1e:	d00f      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a40      	ldr	r2, [pc, #256]	@ (8005d24 <TIM_Base_SetConfig+0x124>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00b      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005d28 <TIM_Base_SetConfig+0x128>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d007      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a3e      	ldr	r2, [pc, #248]	@ (8005d2c <TIM_Base_SetConfig+0x12c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8005d30 <TIM_Base_SetConfig+0x130>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d108      	bne.n	8005c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a32      	ldr	r2, [pc, #200]	@ (8005d20 <TIM_Base_SetConfig+0x120>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d02b      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c60:	d027      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a2f      	ldr	r2, [pc, #188]	@ (8005d24 <TIM_Base_SetConfig+0x124>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d023      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005d28 <TIM_Base_SetConfig+0x128>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01f      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2d      	ldr	r2, [pc, #180]	@ (8005d2c <TIM_Base_SetConfig+0x12c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01b      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005d30 <TIM_Base_SetConfig+0x130>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d017      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2b      	ldr	r2, [pc, #172]	@ (8005d34 <TIM_Base_SetConfig+0x134>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8005d38 <TIM_Base_SetConfig+0x138>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00f      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a29      	ldr	r2, [pc, #164]	@ (8005d3c <TIM_Base_SetConfig+0x13c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a28      	ldr	r2, [pc, #160]	@ (8005d40 <TIM_Base_SetConfig+0x140>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d007      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a27      	ldr	r2, [pc, #156]	@ (8005d44 <TIM_Base_SetConfig+0x144>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a26      	ldr	r2, [pc, #152]	@ (8005d48 <TIM_Base_SetConfig+0x148>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d108      	bne.n	8005cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a0e      	ldr	r2, [pc, #56]	@ (8005d20 <TIM_Base_SetConfig+0x120>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_Base_SetConfig+0xf2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a10      	ldr	r2, [pc, #64]	@ (8005d30 <TIM_Base_SetConfig+0x130>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d103      	bne.n	8005cfa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f043 0204 	orr.w	r2, r3, #4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	601a      	str	r2, [r3, #0]
}
 8005d12:	bf00      	nop
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40000400 	.word	0x40000400
 8005d28:	40000800 	.word	0x40000800
 8005d2c:	40000c00 	.word	0x40000c00
 8005d30:	40010400 	.word	0x40010400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800
 8005d40:	40001800 	.word	0x40001800
 8005d44:	40001c00 	.word	0x40001c00
 8005d48:	40002000 	.word	0x40002000

08005d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f023 0201 	bic.w	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f023 0302 	bic.w	r3, r3, #2
 8005d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a20      	ldr	r2, [pc, #128]	@ (8005e24 <TIM_OC1_SetConfig+0xd8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_OC1_SetConfig+0x64>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a1f      	ldr	r2, [pc, #124]	@ (8005e28 <TIM_OC1_SetConfig+0xdc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d10c      	bne.n	8005dca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0308 	bic.w	r3, r3, #8
 8005db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f023 0304 	bic.w	r3, r3, #4
 8005dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a15      	ldr	r2, [pc, #84]	@ (8005e24 <TIM_OC1_SetConfig+0xd8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d003      	beq.n	8005dda <TIM_OC1_SetConfig+0x8e>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a14      	ldr	r2, [pc, #80]	@ (8005e28 <TIM_OC1_SetConfig+0xdc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d111      	bne.n	8005dfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	621a      	str	r2, [r3, #32]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	40010000 	.word	0x40010000
 8005e28:	40010400 	.word	0x40010400

08005e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	f023 0210 	bic.w	r2, r3, #16
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f023 0320 	bic.w	r3, r3, #32
 8005e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a22      	ldr	r2, [pc, #136]	@ (8005f10 <TIM_OC2_SetConfig+0xe4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_OC2_SetConfig+0x68>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a21      	ldr	r2, [pc, #132]	@ (8005f14 <TIM_OC2_SetConfig+0xe8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d10d      	bne.n	8005eb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a17      	ldr	r2, [pc, #92]	@ (8005f10 <TIM_OC2_SetConfig+0xe4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_OC2_SetConfig+0x94>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a16      	ldr	r2, [pc, #88]	@ (8005f14 <TIM_OC2_SetConfig+0xe8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d113      	bne.n	8005ee8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ec6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ece:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40010000 	.word	0x40010000
 8005f14:	40010400 	.word	0x40010400

08005f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0303 	bic.w	r3, r3, #3
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a21      	ldr	r2, [pc, #132]	@ (8005ff8 <TIM_OC3_SetConfig+0xe0>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d003      	beq.n	8005f7e <TIM_OC3_SetConfig+0x66>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a20      	ldr	r2, [pc, #128]	@ (8005ffc <TIM_OC3_SetConfig+0xe4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d10d      	bne.n	8005f9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	021b      	lsls	r3, r3, #8
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a16      	ldr	r2, [pc, #88]	@ (8005ff8 <TIM_OC3_SetConfig+0xe0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_OC3_SetConfig+0x92>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a15      	ldr	r2, [pc, #84]	@ (8005ffc <TIM_OC3_SetConfig+0xe4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d113      	bne.n	8005fd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	621a      	str	r2, [r3, #32]
}
 8005fec:	bf00      	nop
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40010400 	.word	0x40010400

08006000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800602e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800604a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	031b      	lsls	r3, r3, #12
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a12      	ldr	r2, [pc, #72]	@ (80060a4 <TIM_OC4_SetConfig+0xa4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_OC4_SetConfig+0x68>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a11      	ldr	r2, [pc, #68]	@ (80060a8 <TIM_OC4_SetConfig+0xa8>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d109      	bne.n	800607c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800606e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	019b      	lsls	r3, r3, #6
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	621a      	str	r2, [r3, #32]
}
 8006096:	bf00      	nop
 8006098:	371c      	adds	r7, #28
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400

080060ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f023 030a 	bic.w	r3, r3, #10
 80060e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	621a      	str	r2, [r3, #32]
}
 80060fe:	bf00      	nop
 8006100:	371c      	adds	r7, #28
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800610a:	b480      	push	{r7}
 800610c:	b087      	sub	sp, #28
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	f023 0210 	bic.w	r2, r3, #16
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	031b      	lsls	r3, r3, #12
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006146:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006180:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	f043 0307 	orr.w	r3, r3, #7
 800618c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	609a      	str	r2, [r3, #8]
}
 8006194:	bf00      	nop
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	021a      	lsls	r2, r3, #8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	609a      	str	r2, [r3, #8]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 031f 	and.w	r3, r3, #31
 80061f2:	2201      	movs	r2, #1
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	43db      	mvns	r3, r3
 8006202:	401a      	ands	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a1a      	ldr	r2, [r3, #32]
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	6879      	ldr	r1, [r7, #4]
 8006214:	fa01 f303 	lsl.w	r3, r1, r3
 8006218:	431a      	orrs	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
	...

0800622c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006240:	2302      	movs	r3, #2
 8006242:	e05a      	b.n	80062fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a21      	ldr	r2, [pc, #132]	@ (8006308 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006290:	d01d      	beq.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1d      	ldr	r2, [pc, #116]	@ (800630c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006314 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a18      	ldr	r2, [pc, #96]	@ (8006318 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a17      	ldr	r2, [pc, #92]	@ (800631c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a15      	ldr	r2, [pc, #84]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d10c      	bne.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40010000 	.word	0x40010000
 800630c:	40000400 	.word	0x40000400
 8006310:	40000800 	.word	0x40000800
 8006314:	40000c00 	.word	0x40000c00
 8006318:	40010400 	.word	0x40010400
 800631c:	40014000 	.word	0x40014000
 8006320:	40001800 	.word	0x40001800

08006324 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e042      	b.n	80063e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d106      	bne.n	8006378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fc fe38 	bl	8002fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2224      	movs	r2, #36	@ 0x24
 800637c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68da      	ldr	r2, [r3, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800638e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fff5 	bl	8007380 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695a      	ldr	r2, [r3, #20]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08c      	sub	sp, #48	@ 0x30
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b20      	cmp	r3, #32
 8006404:	d162      	bne.n	80064cc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_UART_Transmit_DMA+0x26>
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e05b      	b.n	80064ce <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	88fa      	ldrh	r2, [r7, #6]
 8006426:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2221      	movs	r2, #33	@ 0x21
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643a:	4a27      	ldr	r2, [pc, #156]	@ (80064d8 <HAL_UART_Transmit_DMA+0xec>)
 800643c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006442:	4a26      	ldr	r2, [pc, #152]	@ (80064dc <HAL_UART_Transmit_DMA+0xf0>)
 8006444:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644a:	4a25      	ldr	r2, [pc, #148]	@ (80064e0 <HAL_UART_Transmit_DMA+0xf4>)
 800644c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006452:	2200      	movs	r2, #0
 8006454:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006456:	f107 0308 	add.w	r3, r7, #8
 800645a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	3304      	adds	r3, #4
 800646a:	461a      	mov	r2, r3
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	f7fd faf3 	bl	8003a58 <HAL_DMA_Start_IT>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d008      	beq.n	800648a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2210      	movs	r2, #16
 800647c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e021      	b.n	80064ce <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006492:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3314      	adds	r3, #20
 800649a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	e853 3f00 	ldrex	r3, [r3]
 80064a2:	617b      	str	r3, [r7, #20]
   return(result);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3314      	adds	r3, #20
 80064b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80064b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b8:	6a39      	ldr	r1, [r7, #32]
 80064ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064bc:	e841 2300 	strex	r3, r2, [r1]
 80064c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1e5      	bne.n	8006494 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e000      	b.n	80064ce <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80064cc:	2302      	movs	r3, #2
  }
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3730      	adds	r7, #48	@ 0x30
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	08006bfd 	.word	0x08006bfd
 80064dc:	08006c97 	.word	0x08006c97
 80064e0:	08006e1b 	.word	0x08006e1b

080064e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	4613      	mov	r3, r2
 80064f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d112      	bne.n	8006524 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_UART_Receive_DMA+0x26>
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e00b      	b.n	8006526 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	461a      	mov	r2, r3
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fcc8 	bl	8006eb0 <UART_Start_Receive_DMA>
 8006520:	4603      	mov	r3, r0
 8006522:	e000      	b.n	8006526 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006524:	2302      	movs	r3, #2
  }
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b090      	sub	sp, #64	@ 0x40
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006536:	2300      	movs	r3, #0
 8006538:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695b      	ldr	r3, [r3, #20]
 8006540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006544:	2b80      	cmp	r3, #128	@ 0x80
 8006546:	bf0c      	ite	eq
 8006548:	2301      	moveq	r3, #1
 800654a:	2300      	movne	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b21      	cmp	r3, #33	@ 0x21
 800655a:	d128      	bne.n	80065ae <HAL_UART_DMAStop+0x80>
 800655c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d025      	beq.n	80065ae <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3314      	adds	r3, #20
 8006568:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	623b      	str	r3, [r7, #32]
   return(result);
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006578:	63bb      	str	r3, [r7, #56]	@ 0x38
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3314      	adds	r3, #20
 8006580:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006582:	633a      	str	r2, [r7, #48]	@ 0x30
 8006584:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006588:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800658a:	e841 2300 	strex	r3, r2, [r1]
 800658e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1e5      	bne.n	8006562 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fd fab0 	bl	8003b08 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fd27 	bl	8006ffc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b8:	2b40      	cmp	r3, #64	@ 0x40
 80065ba:	bf0c      	ite	eq
 80065bc:	2301      	moveq	r3, #1
 80065be:	2300      	movne	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b22      	cmp	r3, #34	@ 0x22
 80065ce:	d128      	bne.n	8006622 <HAL_UART_DMAStop+0xf4>
 80065d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d025      	beq.n	8006622 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3314      	adds	r3, #20
 80065dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3314      	adds	r3, #20
 80065f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065f6:	61fa      	str	r2, [r7, #28]
 80065f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	69b9      	ldr	r1, [r7, #24]
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	617b      	str	r3, [r7, #20]
   return(result);
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e5      	bne.n	80065d6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d004      	beq.n	800661c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006616:	4618      	mov	r0, r3
 8006618:	f7fd fa76 	bl	8003b08 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fd15 	bl	800704c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3740      	adds	r7, #64	@ 0x40
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b0ba      	sub	sp, #232	@ 0xe8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006652:	2300      	movs	r3, #0
 8006654:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006658:	2300      	movs	r3, #0
 800665a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800665e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800666a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10f      	bne.n	8006692 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006676:	f003 0320 	and.w	r3, r3, #32
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <HAL_UART_IRQHandler+0x66>
 800667e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fdba 	bl	8007204 <UART_Receive_IT>
      return;
 8006690:	e273      	b.n	8006b7a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 80de 	beq.w	8006858 <HAL_UART_IRQHandler+0x22c>
 800669c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 80d1 	beq.w	8006858 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00b      	beq.n	80066da <HAL_UART_IRQHandler+0xae>
 80066c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d005      	beq.n	80066da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d2:	f043 0201 	orr.w	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <HAL_UART_IRQHandler+0xd2>
 80066e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f6:	f043 0202 	orr.w	r2, r3, #2
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <HAL_UART_IRQHandler+0xf6>
 800670a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d011      	beq.n	8006752 <HAL_UART_IRQHandler+0x126>
 800672e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d105      	bne.n	8006746 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800673a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674a:	f043 0208 	orr.w	r2, r3, #8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 820a 	beq.w	8006b70 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800675c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d008      	beq.n	800677a <HAL_UART_IRQHandler+0x14e>
 8006768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fd45 	bl	8007204 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006784:	2b40      	cmp	r3, #64	@ 0x40
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d103      	bne.n	80067a6 <HAL_UART_IRQHandler+0x17a>
 800679e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d04f      	beq.n	8006846 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fc50 	bl	800704c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b6:	2b40      	cmp	r3, #64	@ 0x40
 80067b8:	d141      	bne.n	800683e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3314      	adds	r3, #20
 80067c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3314      	adds	r3, #20
 80067e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1d9      	bne.n	80067ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680a:	2b00      	cmp	r3, #0
 800680c:	d013      	beq.n	8006836 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006812:	4a8a      	ldr	r2, [pc, #552]	@ (8006a3c <HAL_UART_IRQHandler+0x410>)
 8006814:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681a:	4618      	mov	r0, r3
 800681c:	f7fd f9e4 	bl	8003be8 <HAL_DMA_Abort_IT>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d016      	beq.n	8006854 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800682a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006830:	4610      	mov	r0, r2
 8006832:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006834:	e00e      	b.n	8006854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f9ca 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683c:	e00a      	b.n	8006854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f9c6 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006844:	e006      	b.n	8006854 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f9c2 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006852:	e18d      	b.n	8006b70 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006854:	bf00      	nop
    return;
 8006856:	e18b      	b.n	8006b70 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800685c:	2b01      	cmp	r3, #1
 800685e:	f040 8167 	bne.w	8006b30 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 8160 	beq.w	8006b30 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 8159 	beq.w	8006b30 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800687e:	2300      	movs	r3, #0
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	60bb      	str	r3, [r7, #8]
 8006892:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689e:	2b40      	cmp	r3, #64	@ 0x40
 80068a0:	f040 80ce 	bne.w	8006a40 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80a9 	beq.w	8006a0c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068c2:	429a      	cmp	r2, r3
 80068c4:	f080 80a2 	bcs.w	8006a0c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068da:	f000 8088 	beq.w	80069ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	330c      	adds	r3, #12
 80068e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068ec:	e853 3f00 	ldrex	r3, [r3]
 80068f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	330c      	adds	r3, #12
 8006906:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800690a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800690e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006916:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1d9      	bne.n	80068de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3314      	adds	r3, #20
 8006930:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800693a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3314      	adds	r3, #20
 800694a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800694e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006952:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006956:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e1      	bne.n	800692a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3314      	adds	r3, #20
 800696c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800697c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3314      	adds	r3, #20
 8006986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800698a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800698c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006990:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e3      	bne.n	8006966 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	330c      	adds	r3, #12
 80069b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069be:	f023 0310 	bic.w	r3, r3, #16
 80069c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	330c      	adds	r3, #12
 80069cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e3      	bne.n	80069ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fd f88d 	bl	8003b08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2202      	movs	r2, #2
 80069f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f8ed 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006a0a:	e0b3      	b.n	8006b74 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a14:	429a      	cmp	r2, r3
 8006a16:	f040 80ad 	bne.w	8006b74 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a24:	f040 80a6 	bne.w	8006b74 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8d5 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
      return;
 8006a3a:	e09b      	b.n	8006b74 <HAL_UART_IRQHandler+0x548>
 8006a3c:	08007113 	.word	0x08007113
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 808e 	beq.w	8006b78 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8089 	beq.w	8006b78 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	330c      	adds	r3, #12
 8006a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	330c      	adds	r3, #12
 8006a86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a92:	e841 2300 	strex	r3, r2, [r1]
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1e3      	bne.n	8006a66 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3314      	adds	r3, #20
 8006aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	e853 3f00 	ldrex	r3, [r3]
 8006aac:	623b      	str	r3, [r7, #32]
   return(result);
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	f023 0301 	bic.w	r3, r3, #1
 8006ab4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3314      	adds	r3, #20
 8006abe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ac2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e3      	bne.n	8006a9e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	330c      	adds	r3, #12
 8006aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0310 	bic.w	r3, r3, #16
 8006afa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	330c      	adds	r3, #12
 8006b04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b08:	61fa      	str	r2, [r7, #28]
 8006b0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	69b9      	ldr	r1, [r7, #24]
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	617b      	str	r3, [r7, #20]
   return(result);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e3      	bne.n	8006ae4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f85b 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b2e:	e023      	b.n	8006b78 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d009      	beq.n	8006b50 <HAL_UART_IRQHandler+0x524>
 8006b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 faf3 	bl	8007134 <UART_Transmit_IT>
    return;
 8006b4e:	e014      	b.n	8006b7a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00e      	beq.n	8006b7a <HAL_UART_IRQHandler+0x54e>
 8006b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d008      	beq.n	8006b7a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fb33 	bl	80071d4 <UART_EndTransmit_IT>
    return;
 8006b6e:	e004      	b.n	8006b7a <HAL_UART_IRQHandler+0x54e>
    return;
 8006b70:	bf00      	nop
 8006b72:	e002      	b.n	8006b7a <HAL_UART_IRQHandler+0x54e>
      return;
 8006b74:	bf00      	nop
 8006b76:	e000      	b.n	8006b7a <HAL_UART_IRQHandler+0x54e>
      return;
 8006b78:	bf00      	nop
  }
}
 8006b7a:	37e8      	adds	r7, #232	@ 0xe8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b090      	sub	sp, #64	@ 0x40
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d137      	bne.n	8006c88 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3314      	adds	r3, #20
 8006c24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e5      	bne.n	8006c1e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	330c      	adds	r3, #12
 8006c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	330c      	adds	r3, #12
 8006c70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c72:	61fa      	str	r2, [r7, #28]
 8006c74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	69b9      	ldr	r1, [r7, #24]
 8006c78:	69fa      	ldr	r2, [r7, #28]
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e5      	bne.n	8006c52 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c86:	e002      	b.n	8006c8e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c88:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c8a:	f7ff ff79 	bl	8006b80 <HAL_UART_TxCpltCallback>
}
 8006c8e:	bf00      	nop
 8006c90:	3740      	adds	r7, #64	@ 0x40
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff ff75 	bl	8006b94 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006caa:	bf00      	nop
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b09c      	sub	sp, #112	@ 0x70
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d172      	bne.n	8006db4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006cce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	330c      	adds	r3, #12
 8006cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ce6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	330c      	adds	r3, #12
 8006cf2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006cf4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cf6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e5      	bne.n	8006cd4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3314      	adds	r3, #20
 8006d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1a:	f023 0301 	bic.w	r3, r3, #1
 8006d1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3314      	adds	r3, #20
 8006d26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d28:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d2a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e5      	bne.n	8006d08 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3314      	adds	r3, #20
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d52:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	3314      	adds	r3, #20
 8006d5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e5      	bne.n	8006d3c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d72:	2220      	movs	r2, #32
 8006d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d119      	bne.n	8006db4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	330c      	adds	r3, #12
 8006d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0310 	bic.w	r3, r3, #16
 8006d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	330c      	adds	r3, #12
 8006d9e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006da0:	61fa      	str	r2, [r7, #28]
 8006da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	69b9      	ldr	r1, [r7, #24]
 8006da6:	69fa      	ldr	r2, [r7, #28]
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	617b      	str	r3, [r7, #20]
   return(result);
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e5      	bne.n	8006d80 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006db4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006db6:	2200      	movs	r2, #0
 8006db8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d106      	bne.n	8006dd0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006dca:	f7ff ff0b 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dce:	e002      	b.n	8006dd6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006dd0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006dd2:	f7ff fee9 	bl	8006ba8 <HAL_UART_RxCpltCallback>
}
 8006dd6:	bf00      	nop
 8006dd8:	3770      	adds	r7, #112	@ 0x70
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d108      	bne.n	8006e0c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dfe:	085b      	lsrs	r3, r3, #1
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	4619      	mov	r1, r3
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff feed 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e0a:	e002      	b.n	8006e12 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff fed5 	bl	8006bbc <HAL_UART_RxHalfCpltCallback>
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e36:	2b80      	cmp	r3, #128	@ 0x80
 8006e38:	bf0c      	ite	eq
 8006e3a:	2301      	moveq	r3, #1
 8006e3c:	2300      	movne	r3, #0
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b21      	cmp	r3, #33	@ 0x21
 8006e4c:	d108      	bne.n	8006e60 <UART_DMAError+0x46>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2200      	movs	r2, #0
 8006e58:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006e5a:	68b8      	ldr	r0, [r7, #8]
 8006e5c:	f000 f8ce 	bl	8006ffc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e6a:	2b40      	cmp	r3, #64	@ 0x40
 8006e6c:	bf0c      	ite	eq
 8006e6e:	2301      	moveq	r3, #1
 8006e70:	2300      	movne	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b22      	cmp	r3, #34	@ 0x22
 8006e80:	d108      	bne.n	8006e94 <UART_DMAError+0x7a>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006e8e:	68b8      	ldr	r0, [r7, #8]
 8006e90:	f000 f8dc 	bl	800704c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e98:	f043 0210 	orr.w	r2, r3, #16
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ea0:	68b8      	ldr	r0, [r7, #8]
 8006ea2:	f7ff fe95 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ea6:	bf00      	nop
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b098      	sub	sp, #96	@ 0x60
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	88fa      	ldrh	r2, [r7, #6]
 8006ec8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2222      	movs	r2, #34	@ 0x22
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006edc:	4a44      	ldr	r2, [pc, #272]	@ (8006ff0 <UART_Start_Receive_DMA+0x140>)
 8006ede:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee4:	4a43      	ldr	r2, [pc, #268]	@ (8006ff4 <UART_Start_Receive_DMA+0x144>)
 8006ee6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eec:	4a42      	ldr	r2, [pc, #264]	@ (8006ff8 <UART_Start_Receive_DMA+0x148>)
 8006eee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ef8:	f107 0308 	add.w	r3, r7, #8
 8006efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	88fb      	ldrh	r3, [r7, #6]
 8006f10:	f7fc fda2 	bl	8003a58 <HAL_DMA_Start_IT>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2210      	movs	r2, #16
 8006f1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2220      	movs	r2, #32
 8006f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e05d      	b.n	8006fe8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d019      	beq.n	8006f7e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006f70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e5      	bne.n	8006f4a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3314      	adds	r3, #20
 8006f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3314      	adds	r3, #20
 8006f9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f9e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006fa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006fa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e5      	bne.n	8006f7e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3314      	adds	r3, #20
 8006fb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006fd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6a39      	ldr	r1, [r7, #32]
 8006fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e5      	bne.n	8006fb2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3760      	adds	r7, #96	@ 0x60
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	08006cb3 	.word	0x08006cb3
 8006ff4:	08006ddf 	.word	0x08006ddf
 8006ff8:	08006e1b 	.word	0x08006e1b

08006ffc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b089      	sub	sp, #36	@ 0x24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60bb      	str	r3, [r7, #8]
   return(result);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	330c      	adds	r3, #12
 8007022:	69fa      	ldr	r2, [r7, #28]
 8007024:	61ba      	str	r2, [r7, #24]
 8007026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	613b      	str	r3, [r7, #16]
   return(result);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e5      	bne.n	8007004 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007040:	bf00      	nop
 8007042:	3724      	adds	r7, #36	@ 0x24
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800704c:	b480      	push	{r7}
 800704e:	b095      	sub	sp, #84	@ 0x54
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800706a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007074:	643a      	str	r2, [r7, #64]	@ 0x40
 8007076:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800707a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3314      	adds	r3, #20
 800708e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	61fb      	str	r3, [r7, #28]
   return(result);
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3314      	adds	r3, #20
 80070a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e5      	bne.n	8007088 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d119      	bne.n	80070f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f023 0310 	bic.w	r3, r3, #16
 80070da:	647b      	str	r3, [r7, #68]	@ 0x44
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	330c      	adds	r3, #12
 80070e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070e4:	61ba      	str	r2, [r7, #24]
 80070e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6979      	ldr	r1, [r7, #20]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	613b      	str	r3, [r7, #16]
   return(result);
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e5      	bne.n	80070c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007106:	bf00      	nop
 8007108:	3754      	adds	r7, #84	@ 0x54
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff fd52 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b21      	cmp	r3, #33	@ 0x21
 8007146:	d13e      	bne.n	80071c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007150:	d114      	bne.n	800717c <UART_Transmit_IT+0x48>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d110      	bne.n	800717c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800716e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	1c9a      	adds	r2, r3, #2
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	621a      	str	r2, [r3, #32]
 800717a:	e008      	b.n	800718e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	1c59      	adds	r1, r3, #1
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6211      	str	r1, [r2, #32]
 8007186:	781a      	ldrb	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b01      	subs	r3, #1
 8007196:	b29b      	uxth	r3, r3
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	4619      	mov	r1, r3
 800719c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10f      	bne.n	80071c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e000      	b.n	80071c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071c6:	2302      	movs	r3, #2
  }
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3714      	adds	r7, #20
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff fcc3 	bl	8006b80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08c      	sub	sp, #48	@ 0x30
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800720c:	2300      	movs	r3, #0
 800720e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007210:	2300      	movs	r3, #0
 8007212:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b22      	cmp	r3, #34	@ 0x22
 800721e:	f040 80aa 	bne.w	8007376 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722a:	d115      	bne.n	8007258 <UART_Receive_IT+0x54>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d111      	bne.n	8007258 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007238:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	b29b      	uxth	r3, r3
 8007242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007246:	b29a      	uxth	r2, r3
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007250:	1c9a      	adds	r2, r3, #2
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	629a      	str	r2, [r3, #40]	@ 0x28
 8007256:	e024      	b.n	80072a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007266:	d007      	beq.n	8007278 <UART_Receive_IT+0x74>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <UART_Receive_IT+0x82>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d106      	bne.n	8007286 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	b2da      	uxtb	r2, r3
 8007280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	e008      	b.n	8007298 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007292:	b2da      	uxtb	r2, r3
 8007294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007296:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729c:	1c5a      	adds	r2, r3, #1
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	4619      	mov	r1, r3
 80072b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d15d      	bne.n	8007372 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68da      	ldr	r2, [r3, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0220 	bic.w	r2, r2, #32
 80072c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	695a      	ldr	r2, [r3, #20]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0201 	bic.w	r2, r2, #1
 80072e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d135      	bne.n	8007368 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	330c      	adds	r3, #12
 8007308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	613b      	str	r3, [r7, #16]
   return(result);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f023 0310 	bic.w	r3, r3, #16
 8007318:	627b      	str	r3, [r7, #36]	@ 0x24
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	330c      	adds	r3, #12
 8007320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007322:	623a      	str	r2, [r7, #32]
 8007324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	69f9      	ldr	r1, [r7, #28]
 8007328:	6a3a      	ldr	r2, [r7, #32]
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e5      	bne.n	8007302 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b10      	cmp	r3, #16
 8007342:	d10a      	bne.n	800735a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60fb      	str	r3, [r7, #12]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff fc3f 	bl	8006be4 <HAL_UARTEx_RxEventCallback>
 8007366:	e002      	b.n	800736e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f7ff fc1d 	bl	8006ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	e002      	b.n	8007378 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	e000      	b.n	8007378 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007376:	2302      	movs	r3, #2
  }
}
 8007378:	4618      	mov	r0, r3
 800737a:	3730      	adds	r7, #48	@ 0x30
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007384:	b0c0      	sub	sp, #256	@ 0x100
 8007386:	af00      	add	r7, sp, #0
 8007388:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800739c:	68d9      	ldr	r1, [r3, #12]
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	ea40 0301 	orr.w	r3, r0, r1
 80073a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	431a      	orrs	r2, r3
 80073c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073d8:	f021 010c 	bic.w	r1, r1, #12
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073e6:	430b      	orrs	r3, r1
 80073e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80073f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fa:	6999      	ldr	r1, [r3, #24]
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	ea40 0301 	orr.w	r3, r0, r1
 8007406:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	4b8f      	ldr	r3, [pc, #572]	@ (800764c <UART_SetConfig+0x2cc>)
 8007410:	429a      	cmp	r2, r3
 8007412:	d005      	beq.n	8007420 <UART_SetConfig+0xa0>
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b8d      	ldr	r3, [pc, #564]	@ (8007650 <UART_SetConfig+0x2d0>)
 800741c:	429a      	cmp	r2, r3
 800741e:	d104      	bne.n	800742a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007420:	f7fd f922 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 8007424:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007428:	e003      	b.n	8007432 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800742a:	f7fd f909 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 800742e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800743c:	f040 810c 	bne.w	8007658 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007444:	2200      	movs	r2, #0
 8007446:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800744a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800744e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007452:	4622      	mov	r2, r4
 8007454:	462b      	mov	r3, r5
 8007456:	1891      	adds	r1, r2, r2
 8007458:	65b9      	str	r1, [r7, #88]	@ 0x58
 800745a:	415b      	adcs	r3, r3
 800745c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800745e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007462:	4621      	mov	r1, r4
 8007464:	eb12 0801 	adds.w	r8, r2, r1
 8007468:	4629      	mov	r1, r5
 800746a:	eb43 0901 	adc.w	r9, r3, r1
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	f04f 0300 	mov.w	r3, #0
 8007476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800747a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800747e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007482:	4690      	mov	r8, r2
 8007484:	4699      	mov	r9, r3
 8007486:	4623      	mov	r3, r4
 8007488:	eb18 0303 	adds.w	r3, r8, r3
 800748c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007490:	462b      	mov	r3, r5
 8007492:	eb49 0303 	adc.w	r3, r9, r3
 8007496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800749a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80074a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80074aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074ae:	460b      	mov	r3, r1
 80074b0:	18db      	adds	r3, r3, r3
 80074b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074b4:	4613      	mov	r3, r2
 80074b6:	eb42 0303 	adc.w	r3, r2, r3
 80074ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80074bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074c4:	f7f9 fb42 	bl	8000b4c <__aeabi_uldivmod>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4b61      	ldr	r3, [pc, #388]	@ (8007654 <UART_SetConfig+0x2d4>)
 80074ce:	fba3 2302 	umull	r2, r3, r3, r2
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	011c      	lsls	r4, r3, #4
 80074d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80074e8:	4642      	mov	r2, r8
 80074ea:	464b      	mov	r3, r9
 80074ec:	1891      	adds	r1, r2, r2
 80074ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074f0:	415b      	adcs	r3, r3
 80074f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80074f8:	4641      	mov	r1, r8
 80074fa:	eb12 0a01 	adds.w	sl, r2, r1
 80074fe:	4649      	mov	r1, r9
 8007500:	eb43 0b01 	adc.w	fp, r3, r1
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007510:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007518:	4692      	mov	sl, r2
 800751a:	469b      	mov	fp, r3
 800751c:	4643      	mov	r3, r8
 800751e:	eb1a 0303 	adds.w	r3, sl, r3
 8007522:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007526:	464b      	mov	r3, r9
 8007528:	eb4b 0303 	adc.w	r3, fp, r3
 800752c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800753c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007540:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007544:	460b      	mov	r3, r1
 8007546:	18db      	adds	r3, r3, r3
 8007548:	643b      	str	r3, [r7, #64]	@ 0x40
 800754a:	4613      	mov	r3, r2
 800754c:	eb42 0303 	adc.w	r3, r2, r3
 8007550:	647b      	str	r3, [r7, #68]	@ 0x44
 8007552:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007556:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800755a:	f7f9 faf7 	bl	8000b4c <__aeabi_uldivmod>
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4611      	mov	r1, r2
 8007564:	4b3b      	ldr	r3, [pc, #236]	@ (8007654 <UART_SetConfig+0x2d4>)
 8007566:	fba3 2301 	umull	r2, r3, r3, r1
 800756a:	095b      	lsrs	r3, r3, #5
 800756c:	2264      	movs	r2, #100	@ 0x64
 800756e:	fb02 f303 	mul.w	r3, r2, r3
 8007572:	1acb      	subs	r3, r1, r3
 8007574:	00db      	lsls	r3, r3, #3
 8007576:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800757a:	4b36      	ldr	r3, [pc, #216]	@ (8007654 <UART_SetConfig+0x2d4>)
 800757c:	fba3 2302 	umull	r2, r3, r3, r2
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007588:	441c      	add	r4, r3
 800758a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800758e:	2200      	movs	r2, #0
 8007590:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007594:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007598:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800759c:	4642      	mov	r2, r8
 800759e:	464b      	mov	r3, r9
 80075a0:	1891      	adds	r1, r2, r2
 80075a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80075a4:	415b      	adcs	r3, r3
 80075a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075ac:	4641      	mov	r1, r8
 80075ae:	1851      	adds	r1, r2, r1
 80075b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80075b2:	4649      	mov	r1, r9
 80075b4:	414b      	adcs	r3, r1
 80075b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075c4:	4659      	mov	r1, fp
 80075c6:	00cb      	lsls	r3, r1, #3
 80075c8:	4651      	mov	r1, sl
 80075ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ce:	4651      	mov	r1, sl
 80075d0:	00ca      	lsls	r2, r1, #3
 80075d2:	4610      	mov	r0, r2
 80075d4:	4619      	mov	r1, r3
 80075d6:	4603      	mov	r3, r0
 80075d8:	4642      	mov	r2, r8
 80075da:	189b      	adds	r3, r3, r2
 80075dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075e0:	464b      	mov	r3, r9
 80075e2:	460a      	mov	r2, r1
 80075e4:	eb42 0303 	adc.w	r3, r2, r3
 80075e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80075fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007600:	460b      	mov	r3, r1
 8007602:	18db      	adds	r3, r3, r3
 8007604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007606:	4613      	mov	r3, r2
 8007608:	eb42 0303 	adc.w	r3, r2, r3
 800760c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800760e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007612:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007616:	f7f9 fa99 	bl	8000b4c <__aeabi_uldivmod>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4b0d      	ldr	r3, [pc, #52]	@ (8007654 <UART_SetConfig+0x2d4>)
 8007620:	fba3 1302 	umull	r1, r3, r3, r2
 8007624:	095b      	lsrs	r3, r3, #5
 8007626:	2164      	movs	r1, #100	@ 0x64
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	3332      	adds	r3, #50	@ 0x32
 8007632:	4a08      	ldr	r2, [pc, #32]	@ (8007654 <UART_SetConfig+0x2d4>)
 8007634:	fba2 2303 	umull	r2, r3, r2, r3
 8007638:	095b      	lsrs	r3, r3, #5
 800763a:	f003 0207 	and.w	r2, r3, #7
 800763e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4422      	add	r2, r4
 8007646:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007648:	e106      	b.n	8007858 <UART_SetConfig+0x4d8>
 800764a:	bf00      	nop
 800764c:	40011000 	.word	0x40011000
 8007650:	40011400 	.word	0x40011400
 8007654:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800765c:	2200      	movs	r2, #0
 800765e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007662:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007666:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800766a:	4642      	mov	r2, r8
 800766c:	464b      	mov	r3, r9
 800766e:	1891      	adds	r1, r2, r2
 8007670:	6239      	str	r1, [r7, #32]
 8007672:	415b      	adcs	r3, r3
 8007674:	627b      	str	r3, [r7, #36]	@ 0x24
 8007676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800767a:	4641      	mov	r1, r8
 800767c:	1854      	adds	r4, r2, r1
 800767e:	4649      	mov	r1, r9
 8007680:	eb43 0501 	adc.w	r5, r3, r1
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	00eb      	lsls	r3, r5, #3
 800768e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007692:	00e2      	lsls	r2, r4, #3
 8007694:	4614      	mov	r4, r2
 8007696:	461d      	mov	r5, r3
 8007698:	4643      	mov	r3, r8
 800769a:	18e3      	adds	r3, r4, r3
 800769c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076a0:	464b      	mov	r3, r9
 80076a2:	eb45 0303 	adc.w	r3, r5, r3
 80076a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076c6:	4629      	mov	r1, r5
 80076c8:	008b      	lsls	r3, r1, #2
 80076ca:	4621      	mov	r1, r4
 80076cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076d0:	4621      	mov	r1, r4
 80076d2:	008a      	lsls	r2, r1, #2
 80076d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076d8:	f7f9 fa38 	bl	8000b4c <__aeabi_uldivmod>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4b60      	ldr	r3, [pc, #384]	@ (8007864 <UART_SetConfig+0x4e4>)
 80076e2:	fba3 2302 	umull	r2, r3, r3, r2
 80076e6:	095b      	lsrs	r3, r3, #5
 80076e8:	011c      	lsls	r4, r3, #4
 80076ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80076fc:	4642      	mov	r2, r8
 80076fe:	464b      	mov	r3, r9
 8007700:	1891      	adds	r1, r2, r2
 8007702:	61b9      	str	r1, [r7, #24]
 8007704:	415b      	adcs	r3, r3
 8007706:	61fb      	str	r3, [r7, #28]
 8007708:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800770c:	4641      	mov	r1, r8
 800770e:	1851      	adds	r1, r2, r1
 8007710:	6139      	str	r1, [r7, #16]
 8007712:	4649      	mov	r1, r9
 8007714:	414b      	adcs	r3, r1
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	f04f 0300 	mov.w	r3, #0
 8007720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007724:	4659      	mov	r1, fp
 8007726:	00cb      	lsls	r3, r1, #3
 8007728:	4651      	mov	r1, sl
 800772a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800772e:	4651      	mov	r1, sl
 8007730:	00ca      	lsls	r2, r1, #3
 8007732:	4610      	mov	r0, r2
 8007734:	4619      	mov	r1, r3
 8007736:	4603      	mov	r3, r0
 8007738:	4642      	mov	r2, r8
 800773a:	189b      	adds	r3, r3, r2
 800773c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007740:	464b      	mov	r3, r9
 8007742:	460a      	mov	r2, r1
 8007744:	eb42 0303 	adc.w	r3, r2, r3
 8007748:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800774c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007756:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007758:	f04f 0200 	mov.w	r2, #0
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007764:	4649      	mov	r1, r9
 8007766:	008b      	lsls	r3, r1, #2
 8007768:	4641      	mov	r1, r8
 800776a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800776e:	4641      	mov	r1, r8
 8007770:	008a      	lsls	r2, r1, #2
 8007772:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007776:	f7f9 f9e9 	bl	8000b4c <__aeabi_uldivmod>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4611      	mov	r1, r2
 8007780:	4b38      	ldr	r3, [pc, #224]	@ (8007864 <UART_SetConfig+0x4e4>)
 8007782:	fba3 2301 	umull	r2, r3, r3, r1
 8007786:	095b      	lsrs	r3, r3, #5
 8007788:	2264      	movs	r2, #100	@ 0x64
 800778a:	fb02 f303 	mul.w	r3, r2, r3
 800778e:	1acb      	subs	r3, r1, r3
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	3332      	adds	r3, #50	@ 0x32
 8007794:	4a33      	ldr	r2, [pc, #204]	@ (8007864 <UART_SetConfig+0x4e4>)
 8007796:	fba2 2303 	umull	r2, r3, r2, r3
 800779a:	095b      	lsrs	r3, r3, #5
 800779c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077a0:	441c      	add	r4, r3
 80077a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077a6:	2200      	movs	r2, #0
 80077a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80077aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80077ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	1891      	adds	r1, r2, r2
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	415b      	adcs	r3, r3
 80077ba:	60fb      	str	r3, [r7, #12]
 80077bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077c0:	4641      	mov	r1, r8
 80077c2:	1851      	adds	r1, r2, r1
 80077c4:	6039      	str	r1, [r7, #0]
 80077c6:	4649      	mov	r1, r9
 80077c8:	414b      	adcs	r3, r1
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	f04f 0200 	mov.w	r2, #0
 80077d0:	f04f 0300 	mov.w	r3, #0
 80077d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077d8:	4659      	mov	r1, fp
 80077da:	00cb      	lsls	r3, r1, #3
 80077dc:	4651      	mov	r1, sl
 80077de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077e2:	4651      	mov	r1, sl
 80077e4:	00ca      	lsls	r2, r1, #3
 80077e6:	4610      	mov	r0, r2
 80077e8:	4619      	mov	r1, r3
 80077ea:	4603      	mov	r3, r0
 80077ec:	4642      	mov	r2, r8
 80077ee:	189b      	adds	r3, r3, r2
 80077f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077f2:	464b      	mov	r3, r9
 80077f4:	460a      	mov	r2, r1
 80077f6:	eb42 0303 	adc.w	r3, r2, r3
 80077fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	663b      	str	r3, [r7, #96]	@ 0x60
 8007806:	667a      	str	r2, [r7, #100]	@ 0x64
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	f04f 0300 	mov.w	r3, #0
 8007810:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007814:	4649      	mov	r1, r9
 8007816:	008b      	lsls	r3, r1, #2
 8007818:	4641      	mov	r1, r8
 800781a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800781e:	4641      	mov	r1, r8
 8007820:	008a      	lsls	r2, r1, #2
 8007822:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007826:	f7f9 f991 	bl	8000b4c <__aeabi_uldivmod>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4b0d      	ldr	r3, [pc, #52]	@ (8007864 <UART_SetConfig+0x4e4>)
 8007830:	fba3 1302 	umull	r1, r3, r3, r2
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	2164      	movs	r1, #100	@ 0x64
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	3332      	adds	r3, #50	@ 0x32
 8007842:	4a08      	ldr	r2, [pc, #32]	@ (8007864 <UART_SetConfig+0x4e4>)
 8007844:	fba2 2303 	umull	r2, r3, r2, r3
 8007848:	095b      	lsrs	r3, r3, #5
 800784a:	f003 020f 	and.w	r2, r3, #15
 800784e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4422      	add	r2, r4
 8007856:	609a      	str	r2, [r3, #8]
}
 8007858:	bf00      	nop
 800785a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800785e:	46bd      	mov	sp, r7
 8007860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007864:	51eb851f 	.word	0x51eb851f

08007868 <__NVIC_SetPriority>:
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	6039      	str	r1, [r7, #0]
 8007872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007878:	2b00      	cmp	r3, #0
 800787a:	db0a      	blt.n	8007892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	b2da      	uxtb	r2, r3
 8007880:	490c      	ldr	r1, [pc, #48]	@ (80078b4 <__NVIC_SetPriority+0x4c>)
 8007882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007886:	0112      	lsls	r2, r2, #4
 8007888:	b2d2      	uxtb	r2, r2
 800788a:	440b      	add	r3, r1
 800788c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007890:	e00a      	b.n	80078a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	b2da      	uxtb	r2, r3
 8007896:	4908      	ldr	r1, [pc, #32]	@ (80078b8 <__NVIC_SetPriority+0x50>)
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	f003 030f 	and.w	r3, r3, #15
 800789e:	3b04      	subs	r3, #4
 80078a0:	0112      	lsls	r2, r2, #4
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	440b      	add	r3, r1
 80078a6:	761a      	strb	r2, [r3, #24]
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	e000e100 	.word	0xe000e100
 80078b8:	e000ed00 	.word	0xe000ed00

080078bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80078c0:	4b05      	ldr	r3, [pc, #20]	@ (80078d8 <SysTick_Handler+0x1c>)
 80078c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80078c4:	f001 fd40 	bl	8009348 <xTaskGetSchedulerState>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d001      	beq.n	80078d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80078ce:	f002 fb3b 	bl	8009f48 <xPortSysTickHandler>
  }
}
 80078d2:	bf00      	nop
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	e000e010 	.word	0xe000e010

080078dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80078e0:	2100      	movs	r1, #0
 80078e2:	f06f 0004 	mvn.w	r0, #4
 80078e6:	f7ff ffbf 	bl	8007868 <__NVIC_SetPriority>
#endif
}
 80078ea:	bf00      	nop
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078f6:	f3ef 8305 	mrs	r3, IPSR
 80078fa:	603b      	str	r3, [r7, #0]
  return(result);
 80078fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007902:	f06f 0305 	mvn.w	r3, #5
 8007906:	607b      	str	r3, [r7, #4]
 8007908:	e00c      	b.n	8007924 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800790a:	4b0a      	ldr	r3, [pc, #40]	@ (8007934 <osKernelInitialize+0x44>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d105      	bne.n	800791e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007912:	4b08      	ldr	r3, [pc, #32]	@ (8007934 <osKernelInitialize+0x44>)
 8007914:	2201      	movs	r2, #1
 8007916:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007918:	2300      	movs	r3, #0
 800791a:	607b      	str	r3, [r7, #4]
 800791c:	e002      	b.n	8007924 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800791e:	f04f 33ff 	mov.w	r3, #4294967295
 8007922:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007924:	687b      	ldr	r3, [r7, #4]
}
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	20006ea0 	.word	0x20006ea0

08007938 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800793e:	f3ef 8305 	mrs	r3, IPSR
 8007942:	603b      	str	r3, [r7, #0]
  return(result);
 8007944:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <osKernelStart+0x1a>
    stat = osErrorISR;
 800794a:	f06f 0305 	mvn.w	r3, #5
 800794e:	607b      	str	r3, [r7, #4]
 8007950:	e010      	b.n	8007974 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007952:	4b0b      	ldr	r3, [pc, #44]	@ (8007980 <osKernelStart+0x48>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d109      	bne.n	800796e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800795a:	f7ff ffbf 	bl	80078dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800795e:	4b08      	ldr	r3, [pc, #32]	@ (8007980 <osKernelStart+0x48>)
 8007960:	2202      	movs	r2, #2
 8007962:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007964:	f001 f87a 	bl	8008a5c <vTaskStartScheduler>
      stat = osOK;
 8007968:	2300      	movs	r3, #0
 800796a:	607b      	str	r3, [r7, #4]
 800796c:	e002      	b.n	8007974 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800796e:	f04f 33ff 	mov.w	r3, #4294967295
 8007972:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007974:	687b      	ldr	r3, [r7, #4]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20006ea0 	.word	0x20006ea0

08007984 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b08e      	sub	sp, #56	@ 0x38
 8007988:	af04      	add	r7, sp, #16
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007994:	f3ef 8305 	mrs	r3, IPSR
 8007998:	617b      	str	r3, [r7, #20]
  return(result);
 800799a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800799c:	2b00      	cmp	r3, #0
 800799e:	d17e      	bne.n	8007a9e <osThreadNew+0x11a>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d07b      	beq.n	8007a9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80079a6:	2380      	movs	r3, #128	@ 0x80
 80079a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80079aa:	2318      	movs	r3, #24
 80079ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80079b2:	f04f 33ff 	mov.w	r3, #4294967295
 80079b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d045      	beq.n	8007a4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <osThreadNew+0x48>
        name = attr->name;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d008      	beq.n	80079f2 <osThreadNew+0x6e>
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	2b38      	cmp	r3, #56	@ 0x38
 80079e4:	d805      	bhi.n	80079f2 <osThreadNew+0x6e>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <osThreadNew+0x72>
        return (NULL);
 80079f2:	2300      	movs	r3, #0
 80079f4:	e054      	b.n	8007aa0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	089b      	lsrs	r3, r3, #2
 8007a04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00e      	beq.n	8007a2c <osThreadNew+0xa8>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	2b5b      	cmp	r3, #91	@ 0x5b
 8007a14:	d90a      	bls.n	8007a2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d006      	beq.n	8007a2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <osThreadNew+0xa8>
        mem = 1;
 8007a26:	2301      	movs	r3, #1
 8007a28:	61bb      	str	r3, [r7, #24]
 8007a2a:	e010      	b.n	8007a4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10c      	bne.n	8007a4e <osThreadNew+0xca>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d108      	bne.n	8007a4e <osThreadNew+0xca>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d104      	bne.n	8007a4e <osThreadNew+0xca>
          mem = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	61bb      	str	r3, [r7, #24]
 8007a48:	e001      	b.n	8007a4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d110      	bne.n	8007a76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007a5c:	9202      	str	r2, [sp, #8]
 8007a5e:	9301      	str	r3, [sp, #4]
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	6a3a      	ldr	r2, [r7, #32]
 8007a68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 fe1a 	bl	80086a4 <xTaskCreateStatic>
 8007a70:	4603      	mov	r3, r0
 8007a72:	613b      	str	r3, [r7, #16]
 8007a74:	e013      	b.n	8007a9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d110      	bne.n	8007a9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	f107 0310 	add.w	r3, r7, #16
 8007a84:	9301      	str	r3, [sp, #4]
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fe68 	bl	8008764 <xTaskCreate>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d001      	beq.n	8007a9e <osThreadNew+0x11a>
            hTask = NULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a9e:	693b      	ldr	r3, [r7, #16]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3728      	adds	r7, #40	@ 0x28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab0:	f3ef 8305 	mrs	r3, IPSR
 8007ab4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <osDelay+0x1c>
    stat = osErrorISR;
 8007abc:	f06f 0305 	mvn.w	r3, #5
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e007      	b.n	8007ad4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 ff8e 	bl	80089f0 <vTaskDelay>
    }
  }

  return (stat);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4a07      	ldr	r2, [pc, #28]	@ (8007b0c <vApplicationGetIdleTaskMemory+0x2c>)
 8007af0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	4a06      	ldr	r2, [pc, #24]	@ (8007b10 <vApplicationGetIdleTaskMemory+0x30>)
 8007af6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2280      	movs	r2, #128	@ 0x80
 8007afc:	601a      	str	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20006ea4 	.word	0x20006ea4
 8007b10:	20006f00 	.word	0x20006f00

08007b14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4a07      	ldr	r2, [pc, #28]	@ (8007b40 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	4a06      	ldr	r2, [pc, #24]	@ (8007b44 <vApplicationGetTimerTaskMemory+0x30>)
 8007b2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b32:	601a      	str	r2, [r3, #0]
}
 8007b34:	bf00      	nop
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	20007100 	.word	0x20007100
 8007b44:	2000715c 	.word	0x2000715c

08007b48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f103 0208 	add.w	r2, r3, #8
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f103 0208 	add.w	r2, r3, #8
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f103 0208 	add.w	r2, r3, #8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
}
 8007bde:	bf00      	nop
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bea:	b480      	push	{r7}
 8007bec:	b085      	sub	sp, #20
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d103      	bne.n	8007c0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e00c      	b.n	8007c24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e002      	b.n	8007c18 <vListInsert+0x2e>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d2f6      	bcs.n	8007c12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6892      	ldr	r2, [r2, #8]
 8007c72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	6852      	ldr	r2, [r2, #4]
 8007c7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d103      	bne.n	8007c90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	1e5a      	subs	r2, r3, #1
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10b      	bne.n	8007cdc <xQueueGenericReset+0x2c>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	60bb      	str	r3, [r7, #8]
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	e7fd      	b.n	8007cd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cdc:	f002 f8a4 	bl	8009e28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce8:	68f9      	ldr	r1, [r7, #12]
 8007cea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007cec:	fb01 f303 	mul.w	r3, r1, r3
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	68f9      	ldr	r1, [r7, #12]
 8007d10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007d12:	fb01 f303 	mul.w	r3, r1, r3
 8007d16:	441a      	add	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	22ff      	movs	r2, #255	@ 0xff
 8007d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	22ff      	movs	r2, #255	@ 0xff
 8007d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d114      	bne.n	8007d5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01a      	beq.n	8007d70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3310      	adds	r3, #16
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 f91a 	bl	8008f78 <xTaskRemoveFromEventList>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d012      	beq.n	8007d70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d80 <xQueueGenericReset+0xd0>)
 8007d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d50:	601a      	str	r2, [r3, #0]
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	e009      	b.n	8007d70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3310      	adds	r3, #16
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff fef1 	bl	8007b48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3324      	adds	r3, #36	@ 0x24
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff feec 	bl	8007b48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d70:	f002 f88c 	bl	8009e8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d74:	2301      	movs	r3, #1
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	e000ed04 	.word	0xe000ed04

08007d84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08e      	sub	sp, #56	@ 0x38
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10b      	bne.n	8007db0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	e7fd      	b.n	8007dac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10b      	bne.n	8007dce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	e7fd      	b.n	8007dca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <xQueueGenericCreateStatic+0x56>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <xQueueGenericCreateStatic+0x5a>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e000      	b.n	8007de0 <xQueueGenericCreateStatic+0x5c>
 8007dde:	2300      	movs	r3, #0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10b      	bne.n	8007dfc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	623b      	str	r3, [r7, #32]
}
 8007df6:	bf00      	nop
 8007df8:	bf00      	nop
 8007dfa:	e7fd      	b.n	8007df8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d102      	bne.n	8007e08 <xQueueGenericCreateStatic+0x84>
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <xQueueGenericCreateStatic+0x88>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <xQueueGenericCreateStatic+0x8a>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10b      	bne.n	8007e2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	61fb      	str	r3, [r7, #28]
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	e7fd      	b.n	8007e26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e2a:	2350      	movs	r3, #80	@ 0x50
 8007e2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	2b50      	cmp	r3, #80	@ 0x50
 8007e32:	d00b      	beq.n	8007e4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	61bb      	str	r3, [r7, #24]
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	e7fd      	b.n	8007e48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00d      	beq.n	8007e74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f805 	bl	8007e7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3730      	adds	r7, #48	@ 0x30
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d103      	bne.n	8007e9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	e002      	b.n	8007ea0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007eac:	2101      	movs	r1, #1
 8007eae:	69b8      	ldr	r0, [r7, #24]
 8007eb0:	f7ff fefe 	bl	8007cb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	78fa      	ldrb	r2, [r7, #3]
 8007eb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08e      	sub	sp, #56	@ 0x38
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
 8007ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10b      	bne.n	8007ef8 <xQueueGenericSend+0x34>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <xQueueGenericSend+0x42>
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <xQueueGenericSend+0x46>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <xQueueGenericSend+0x48>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <xQueueGenericSend+0x64>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f22:	bf00      	nop
 8007f24:	bf00      	nop
 8007f26:	e7fd      	b.n	8007f24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d103      	bne.n	8007f36 <xQueueGenericSend+0x72>
 8007f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d101      	bne.n	8007f3a <xQueueGenericSend+0x76>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e000      	b.n	8007f3c <xQueueGenericSend+0x78>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10b      	bne.n	8007f58 <xQueueGenericSend+0x94>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	623b      	str	r3, [r7, #32]
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	e7fd      	b.n	8007f54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f58:	f001 f9f6 	bl	8009348 <xTaskGetSchedulerState>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d102      	bne.n	8007f68 <xQueueGenericSend+0xa4>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <xQueueGenericSend+0xa8>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e000      	b.n	8007f6e <xQueueGenericSend+0xaa>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10b      	bne.n	8007f8a <xQueueGenericSend+0xc6>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	61fb      	str	r3, [r7, #28]
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop
 8007f88:	e7fd      	b.n	8007f86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f8a:	f001 ff4d 	bl	8009e28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d302      	bcc.n	8007fa0 <xQueueGenericSend+0xdc>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b02      	cmp	r3, #2
 8007f9e:	d129      	bne.n	8007ff4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	68b9      	ldr	r1, [r7, #8]
 8007fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007fa6:	f000 fa0f 	bl	80083c8 <prvCopyDataToQueue>
 8007faa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d010      	beq.n	8007fd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb6:	3324      	adds	r3, #36	@ 0x24
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 ffdd 	bl	8008f78 <xTaskRemoveFromEventList>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d013      	beq.n	8007fec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80080c4 <xQueueGenericSend+0x200>)
 8007fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	e00a      	b.n	8007fec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d007      	beq.n	8007fec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fdc:	4b39      	ldr	r3, [pc, #228]	@ (80080c4 <xQueueGenericSend+0x200>)
 8007fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fe2:	601a      	str	r2, [r3, #0]
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fec:	f001 ff4e 	bl	8009e8c <vPortExitCritical>
				return pdPASS;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e063      	b.n	80080bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d103      	bne.n	8008002 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ffa:	f001 ff47 	bl	8009e8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	e05c      	b.n	80080bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008004:	2b00      	cmp	r3, #0
 8008006:	d106      	bne.n	8008016 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008008:	f107 0314 	add.w	r3, r7, #20
 800800c:	4618      	mov	r0, r3
 800800e:	f001 f83f 	bl	8009090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008012:	2301      	movs	r3, #1
 8008014:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008016:	f001 ff39 	bl	8009e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800801a:	f000 fd87 	bl	8008b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800801e:	f001 ff03 	bl	8009e28 <vPortEnterCritical>
 8008022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008028:	b25b      	sxtb	r3, r3
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d103      	bne.n	8008038 <xQueueGenericSend+0x174>
 8008030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800803e:	b25b      	sxtb	r3, r3
 8008040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008044:	d103      	bne.n	800804e <xQueueGenericSend+0x18a>
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800804e:	f001 ff1d 	bl	8009e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008052:	1d3a      	adds	r2, r7, #4
 8008054:	f107 0314 	add.w	r3, r7, #20
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f001 f82e 	bl	80090bc <xTaskCheckForTimeOut>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d124      	bne.n	80080b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008066:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008068:	f000 faa6 	bl	80085b8 <prvIsQueueFull>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d018      	beq.n	80080a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008074:	3310      	adds	r3, #16
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	4611      	mov	r1, r2
 800807a:	4618      	mov	r0, r3
 800807c:	f000 ff2a 	bl	8008ed4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008082:	f000 fa31 	bl	80084e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008086:	f000 fd5f 	bl	8008b48 <xTaskResumeAll>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	f47f af7c 	bne.w	8007f8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008092:	4b0c      	ldr	r3, [pc, #48]	@ (80080c4 <xQueueGenericSend+0x200>)
 8008094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	e772      	b.n	8007f8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080a6:	f000 fa1f 	bl	80084e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080aa:	f000 fd4d 	bl	8008b48 <xTaskResumeAll>
 80080ae:	e76c      	b.n	8007f8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80080b2:	f000 fa19 	bl	80084e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080b6:	f000 fd47 	bl	8008b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3738      	adds	r7, #56	@ 0x38
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b090      	sub	sp, #64	@ 0x40
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	e7fd      	b.n	80080f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d103      	bne.n	8008106 <xQueueGenericSendFromISR+0x3e>
 80080fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <xQueueGenericSendFromISR+0x42>
 8008106:	2301      	movs	r3, #1
 8008108:	e000      	b.n	800810c <xQueueGenericSendFromISR+0x44>
 800810a:	2300      	movs	r3, #0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10b      	bne.n	8008128 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008122:	bf00      	nop
 8008124:	bf00      	nop
 8008126:	e7fd      	b.n	8008124 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d103      	bne.n	8008136 <xQueueGenericSendFromISR+0x6e>
 800812e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <xQueueGenericSendFromISR+0x72>
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <xQueueGenericSendFromISR+0x74>
 800813a:	2300      	movs	r3, #0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10b      	bne.n	8008158 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	623b      	str	r3, [r7, #32]
}
 8008152:	bf00      	nop
 8008154:	bf00      	nop
 8008156:	e7fd      	b.n	8008154 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008158:	f001 ff46 	bl	8009fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800815c:	f3ef 8211 	mrs	r2, BASEPRI
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	61fa      	str	r2, [r7, #28]
 8008172:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008174:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008176:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800817c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008180:	429a      	cmp	r2, r3
 8008182:	d302      	bcc.n	800818a <xQueueGenericSendFromISR+0xc2>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b02      	cmp	r3, #2
 8008188:	d12f      	bne.n	80081ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800818a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008190:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008198:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	68b9      	ldr	r1, [r7, #8]
 800819e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80081a0:	f000 f912 	bl	80083c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80081a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ac:	d112      	bne.n	80081d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d016      	beq.n	80081e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b8:	3324      	adds	r3, #36	@ 0x24
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fedc 	bl	8008f78 <xTaskRemoveFromEventList>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00e      	beq.n	80081e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	e007      	b.n	80081e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80081d8:	3301      	adds	r3, #1
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	b25a      	sxtb	r2, r3
 80081de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80081e4:	2301      	movs	r3, #1
 80081e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80081e8:	e001      	b.n	80081ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3740      	adds	r7, #64	@ 0x40
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08c      	sub	sp, #48	@ 0x30
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008210:	2300      	movs	r3, #0
 8008212:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10b      	bne.n	8008236 <xQueueReceive+0x32>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	623b      	str	r3, [r7, #32]
}
 8008230:	bf00      	nop
 8008232:	bf00      	nop
 8008234:	e7fd      	b.n	8008232 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <xQueueReceive+0x40>
 800823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <xQueueReceive+0x44>
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <xQueueReceive+0x46>
 8008248:	2300      	movs	r3, #0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10b      	bne.n	8008266 <xQueueReceive+0x62>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	61fb      	str	r3, [r7, #28]
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	e7fd      	b.n	8008262 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008266:	f001 f86f 	bl	8009348 <xTaskGetSchedulerState>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d102      	bne.n	8008276 <xQueueReceive+0x72>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <xQueueReceive+0x76>
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <xQueueReceive+0x78>
 800827a:	2300      	movs	r3, #0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10b      	bne.n	8008298 <xQueueReceive+0x94>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	61bb      	str	r3, [r7, #24]
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008298:	f001 fdc6 	bl	8009e28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800829c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01f      	beq.n	80082e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082a8:	68b9      	ldr	r1, [r7, #8]
 80082aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082ac:	f000 f8f6 	bl	800849c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	1e5a      	subs	r2, r3, #1
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00f      	beq.n	80082e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c2:	3310      	adds	r3, #16
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fe57 	bl	8008f78 <xTaskRemoveFromEventList>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d007      	beq.n	80082e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082d0:	4b3c      	ldr	r3, [pc, #240]	@ (80083c4 <xQueueReceive+0x1c0>)
 80082d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082e0:	f001 fdd4 	bl	8009e8c <vPortExitCritical>
				return pdPASS;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e069      	b.n	80083bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d103      	bne.n	80082f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082ee:	f001 fdcd 	bl	8009e8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e062      	b.n	80083bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d106      	bne.n	800830a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082fc:	f107 0310 	add.w	r3, r7, #16
 8008300:	4618      	mov	r0, r3
 8008302:	f000 fec5 	bl	8009090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008306:	2301      	movs	r3, #1
 8008308:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800830a:	f001 fdbf 	bl	8009e8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800830e:	f000 fc0d 	bl	8008b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008312:	f001 fd89 	bl	8009e28 <vPortEnterCritical>
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800831c:	b25b      	sxtb	r3, r3
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d103      	bne.n	800832c <xQueueReceive+0x128>
 8008324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800832c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008332:	b25b      	sxtb	r3, r3
 8008334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008338:	d103      	bne.n	8008342 <xQueueReceive+0x13e>
 800833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008342:	f001 fda3 	bl	8009e8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008346:	1d3a      	adds	r2, r7, #4
 8008348:	f107 0310 	add.w	r3, r7, #16
 800834c:	4611      	mov	r1, r2
 800834e:	4618      	mov	r0, r3
 8008350:	f000 feb4 	bl	80090bc <xTaskCheckForTimeOut>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d123      	bne.n	80083a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800835a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800835c:	f000 f916 	bl	800858c <prvIsQueueEmpty>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d017      	beq.n	8008396 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008368:	3324      	adds	r3, #36	@ 0x24
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	4611      	mov	r1, r2
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fdb0 	bl	8008ed4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008376:	f000 f8b7 	bl	80084e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800837a:	f000 fbe5 	bl	8008b48 <xTaskResumeAll>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d189      	bne.n	8008298 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008384:	4b0f      	ldr	r3, [pc, #60]	@ (80083c4 <xQueueReceive+0x1c0>)
 8008386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	e780      	b.n	8008298 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008398:	f000 f8a6 	bl	80084e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800839c:	f000 fbd4 	bl	8008b48 <xTaskResumeAll>
 80083a0:	e77a      	b.n	8008298 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80083a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083a4:	f000 f8a0 	bl	80084e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083a8:	f000 fbce 	bl	8008b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ae:	f000 f8ed 	bl	800858c <prvIsQueueEmpty>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f43f af6f 	beq.w	8008298 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3730      	adds	r7, #48	@ 0x30
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	e000ed04 	.word	0xe000ed04

080083c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083d4:	2300      	movs	r3, #0
 80083d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10d      	bne.n	8008402 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d14d      	bne.n	800848a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 ffc6 	bl	8009384 <xTaskPriorityDisinherit>
 80083f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2200      	movs	r2, #0
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	e043      	b.n	800848a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d119      	bne.n	800843c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6858      	ldr	r0, [r3, #4]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008410:	461a      	mov	r2, r3
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	f011 fe6b 	bl	801a0ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008420:	441a      	add	r2, r3
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	429a      	cmp	r2, r3
 8008430:	d32b      	bcc.n	800848a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	605a      	str	r2, [r3, #4]
 800843a:	e026      	b.n	800848a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68d8      	ldr	r0, [r3, #12]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008444:	461a      	mov	r2, r3
 8008446:	68b9      	ldr	r1, [r7, #8]
 8008448:	f011 fe51 	bl	801a0ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008454:	425b      	negs	r3, r3
 8008456:	441a      	add	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d207      	bcs.n	8008478 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008470:	425b      	negs	r3, r3
 8008472:	441a      	add	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d105      	bne.n	800848a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	3b01      	subs	r3, #1
 8008488:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1c5a      	adds	r2, r3, #1
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008492:	697b      	ldr	r3, [r7, #20]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d018      	beq.n	80084e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b6:	441a      	add	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d303      	bcc.n	80084d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68d9      	ldr	r1, [r3, #12]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d8:	461a      	mov	r2, r3
 80084da:	6838      	ldr	r0, [r7, #0]
 80084dc:	f011 fe07 	bl	801a0ee <memcpy>
	}
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084f0:	f001 fc9a 	bl	8009e28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084fc:	e011      	b.n	8008522 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008502:	2b00      	cmp	r3, #0
 8008504:	d012      	beq.n	800852c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3324      	adds	r3, #36	@ 0x24
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fd34 	bl	8008f78 <xTaskRemoveFromEventList>
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008516:	f000 fe35 	bl	8009184 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	3b01      	subs	r3, #1
 800851e:	b2db      	uxtb	r3, r3
 8008520:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008526:	2b00      	cmp	r3, #0
 8008528:	dce9      	bgt.n	80084fe <prvUnlockQueue+0x16>
 800852a:	e000      	b.n	800852e <prvUnlockQueue+0x46>
					break;
 800852c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	22ff      	movs	r2, #255	@ 0xff
 8008532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008536:	f001 fca9 	bl	8009e8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800853a:	f001 fc75 	bl	8009e28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008544:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008546:	e011      	b.n	800856c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d012      	beq.n	8008576 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3310      	adds	r3, #16
 8008554:	4618      	mov	r0, r3
 8008556:	f000 fd0f 	bl	8008f78 <xTaskRemoveFromEventList>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008560:	f000 fe10 	bl	8009184 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008564:	7bbb      	ldrb	r3, [r7, #14]
 8008566:	3b01      	subs	r3, #1
 8008568:	b2db      	uxtb	r3, r3
 800856a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800856c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008570:	2b00      	cmp	r3, #0
 8008572:	dce9      	bgt.n	8008548 <prvUnlockQueue+0x60>
 8008574:	e000      	b.n	8008578 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008576:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	22ff      	movs	r2, #255	@ 0xff
 800857c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008580:	f001 fc84 	bl	8009e8c <vPortExitCritical>
}
 8008584:	bf00      	nop
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008594:	f001 fc48 	bl	8009e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859c:	2b00      	cmp	r3, #0
 800859e:	d102      	bne.n	80085a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80085a0:	2301      	movs	r3, #1
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e001      	b.n	80085aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085aa:	f001 fc6f 	bl	8009e8c <vPortExitCritical>

	return xReturn;
 80085ae:	68fb      	ldr	r3, [r7, #12]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085c0:	f001 fc32 	bl	8009e28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d102      	bne.n	80085d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085d0:	2301      	movs	r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	e001      	b.n	80085da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085da:	f001 fc57 	bl	8009e8c <vPortExitCritical>

	return xReturn;
 80085de:	68fb      	ldr	r3, [r7, #12]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	e014      	b.n	8008622 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085f8:	4a0f      	ldr	r2, [pc, #60]	@ (8008638 <vQueueAddToRegistry+0x50>)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10b      	bne.n	800861c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008604:	490c      	ldr	r1, [pc, #48]	@ (8008638 <vQueueAddToRegistry+0x50>)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800860e:	4a0a      	ldr	r2, [pc, #40]	@ (8008638 <vQueueAddToRegistry+0x50>)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	4413      	add	r3, r2
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800861a:	e006      	b.n	800862a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3301      	adds	r3, #1
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2b07      	cmp	r3, #7
 8008626:	d9e7      	bls.n	80085f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	2000755c 	.word	0x2000755c

0800863c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800864c:	f001 fbec 	bl	8009e28 <vPortEnterCritical>
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008656:	b25b      	sxtb	r3, r3
 8008658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865c:	d103      	bne.n	8008666 <vQueueWaitForMessageRestricted+0x2a>
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800866c:	b25b      	sxtb	r3, r3
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d103      	bne.n	800867c <vQueueWaitForMessageRestricted+0x40>
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800867c:	f001 fc06 	bl	8009e8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008684:	2b00      	cmp	r3, #0
 8008686:	d106      	bne.n	8008696 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	3324      	adds	r3, #36	@ 0x24
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	68b9      	ldr	r1, [r7, #8]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fc45 	bl	8008f20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008696:	6978      	ldr	r0, [r7, #20]
 8008698:	f7ff ff26 	bl	80084e8 <prvUnlockQueue>
	}
 800869c:	bf00      	nop
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08e      	sub	sp, #56	@ 0x38
 80086a8:	af04      	add	r7, sp, #16
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10b      	bne.n	80086d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	623b      	str	r3, [r7, #32]
}
 80086ca:	bf00      	nop
 80086cc:	bf00      	nop
 80086ce:	e7fd      	b.n	80086cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	61fb      	str	r3, [r7, #28]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086ee:	235c      	movs	r3, #92	@ 0x5c
 80086f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80086f6:	d00b      	beq.n	8008710 <xTaskCreateStatic+0x6c>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	61bb      	str	r3, [r7, #24]
}
 800870a:	bf00      	nop
 800870c:	bf00      	nop
 800870e:	e7fd      	b.n	800870c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008710:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01e      	beq.n	8008756 <xTaskCreateStatic+0xb2>
 8008718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871a:	2b00      	cmp	r3, #0
 800871c:	d01b      	beq.n	8008756 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800871e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008720:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008726:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872a:	2202      	movs	r2, #2
 800872c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008730:	2300      	movs	r3, #0
 8008732:	9303      	str	r3, [sp, #12]
 8008734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	f107 0314 	add.w	r3, r7, #20
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f000 f850 	bl	80087ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800874e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008750:	f000 f8de 	bl	8008910 <prvAddNewTaskToReadyList>
 8008754:	e001      	b.n	800875a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800875a:	697b      	ldr	r3, [r7, #20]
	}
 800875c:	4618      	mov	r0, r3
 800875e:	3728      	adds	r7, #40	@ 0x28
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008764:	b580      	push	{r7, lr}
 8008766:	b08c      	sub	sp, #48	@ 0x30
 8008768:	af04      	add	r7, sp, #16
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	603b      	str	r3, [r7, #0]
 8008770:	4613      	mov	r3, r2
 8008772:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008774:	88fb      	ldrh	r3, [r7, #6]
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4618      	mov	r0, r3
 800877a:	f001 fc77 	bl	800a06c <pvPortMalloc>
 800877e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00e      	beq.n	80087a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008786:	205c      	movs	r0, #92	@ 0x5c
 8008788:	f001 fc70 	bl	800a06c <pvPortMalloc>
 800878c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	631a      	str	r2, [r3, #48]	@ 0x30
 800879a:	e005      	b.n	80087a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800879c:	6978      	ldr	r0, [r7, #20]
 800879e:	f001 fd33 	bl	800a208 <vPortFree>
 80087a2:	e001      	b.n	80087a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d017      	beq.n	80087de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087b6:	88fa      	ldrh	r2, [r7, #6]
 80087b8:	2300      	movs	r3, #0
 80087ba:	9303      	str	r3, [sp, #12]
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	9302      	str	r3, [sp, #8]
 80087c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087c2:	9301      	str	r3, [sp, #4]
 80087c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c6:	9300      	str	r3, [sp, #0]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	68b9      	ldr	r1, [r7, #8]
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f000 f80e 	bl	80087ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087d2:	69f8      	ldr	r0, [r7, #28]
 80087d4:	f000 f89c 	bl	8008910 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087d8:	2301      	movs	r3, #1
 80087da:	61bb      	str	r3, [r7, #24]
 80087dc:	e002      	b.n	80087e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087de:	f04f 33ff 	mov.w	r3, #4294967295
 80087e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087e4:	69bb      	ldr	r3, [r7, #24]
	}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b088      	sub	sp, #32
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
 80087fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	461a      	mov	r2, r3
 8008806:	21a5      	movs	r1, #165	@ 0xa5
 8008808:	f011 fb96 	bl	8019f38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008816:	3b01      	subs	r3, #1
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4413      	add	r3, r2
 800881c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	f023 0307 	bic.w	r3, r3, #7
 8008824:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	f003 0307 	and.w	r3, r3, #7
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	617b      	str	r3, [r7, #20]
}
 8008842:	bf00      	nop
 8008844:	bf00      	nop
 8008846:	e7fd      	b.n	8008844 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01f      	beq.n	800888e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800884e:	2300      	movs	r3, #0
 8008850:	61fb      	str	r3, [r7, #28]
 8008852:	e012      	b.n	800887a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	4413      	add	r3, r2
 800885a:	7819      	ldrb	r1, [r3, #0]
 800885c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	4413      	add	r3, r2
 8008862:	3334      	adds	r3, #52	@ 0x34
 8008864:	460a      	mov	r2, r1
 8008866:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008868:	68ba      	ldr	r2, [r7, #8]
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	4413      	add	r3, r2
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d006      	beq.n	8008882 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	3301      	adds	r3, #1
 8008878:	61fb      	str	r3, [r7, #28]
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	2b0f      	cmp	r3, #15
 800887e:	d9e9      	bls.n	8008854 <prvInitialiseNewTask+0x66>
 8008880:	e000      	b.n	8008884 <prvInitialiseNewTask+0x96>
			{
				break;
 8008882:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800888c:	e003      	b.n	8008896 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008898:	2b37      	cmp	r3, #55	@ 0x37
 800889a:	d901      	bls.n	80088a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800889c:	2337      	movs	r3, #55	@ 0x37
 800889e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80088ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ae:	2200      	movs	r2, #0
 80088b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	3304      	adds	r3, #4
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff f966 	bl	8007b88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	3318      	adds	r3, #24
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff f961 	bl	8007b88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	2200      	movs	r2, #0
 80088e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	68f9      	ldr	r1, [r7, #12]
 80088ee:	69b8      	ldr	r0, [r7, #24]
 80088f0:	f001 f966 	bl	8009bc0 <pxPortInitialiseStack>
 80088f4:	4602      	mov	r2, r0
 80088f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008906:	bf00      	nop
 8008908:	3720      	adds	r7, #32
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008918:	f001 fa86 	bl	8009e28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800891c:	4b2d      	ldr	r3, [pc, #180]	@ (80089d4 <prvAddNewTaskToReadyList+0xc4>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3301      	adds	r3, #1
 8008922:	4a2c      	ldr	r2, [pc, #176]	@ (80089d4 <prvAddNewTaskToReadyList+0xc4>)
 8008924:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008926:	4b2c      	ldr	r3, [pc, #176]	@ (80089d8 <prvAddNewTaskToReadyList+0xc8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800892e:	4a2a      	ldr	r2, [pc, #168]	@ (80089d8 <prvAddNewTaskToReadyList+0xc8>)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008934:	4b27      	ldr	r3, [pc, #156]	@ (80089d4 <prvAddNewTaskToReadyList+0xc4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d110      	bne.n	800895e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800893c:	f000 fc46 	bl	80091cc <prvInitialiseTaskLists>
 8008940:	e00d      	b.n	800895e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008942:	4b26      	ldr	r3, [pc, #152]	@ (80089dc <prvAddNewTaskToReadyList+0xcc>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800894a:	4b23      	ldr	r3, [pc, #140]	@ (80089d8 <prvAddNewTaskToReadyList+0xc8>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008954:	429a      	cmp	r2, r3
 8008956:	d802      	bhi.n	800895e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008958:	4a1f      	ldr	r2, [pc, #124]	@ (80089d8 <prvAddNewTaskToReadyList+0xc8>)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800895e:	4b20      	ldr	r3, [pc, #128]	@ (80089e0 <prvAddNewTaskToReadyList+0xd0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3301      	adds	r3, #1
 8008964:	4a1e      	ldr	r2, [pc, #120]	@ (80089e0 <prvAddNewTaskToReadyList+0xd0>)
 8008966:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008968:	4b1d      	ldr	r3, [pc, #116]	@ (80089e0 <prvAddNewTaskToReadyList+0xd0>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008974:	4b1b      	ldr	r3, [pc, #108]	@ (80089e4 <prvAddNewTaskToReadyList+0xd4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	429a      	cmp	r2, r3
 800897a:	d903      	bls.n	8008984 <prvAddNewTaskToReadyList+0x74>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008980:	4a18      	ldr	r2, [pc, #96]	@ (80089e4 <prvAddNewTaskToReadyList+0xd4>)
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4a15      	ldr	r2, [pc, #84]	@ (80089e8 <prvAddNewTaskToReadyList+0xd8>)
 8008992:	441a      	add	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3304      	adds	r3, #4
 8008998:	4619      	mov	r1, r3
 800899a:	4610      	mov	r0, r2
 800899c:	f7ff f901 	bl	8007ba2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089a0:	f001 fa74 	bl	8009e8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089a4:	4b0d      	ldr	r3, [pc, #52]	@ (80089dc <prvAddNewTaskToReadyList+0xcc>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089ac:	4b0a      	ldr	r3, [pc, #40]	@ (80089d8 <prvAddNewTaskToReadyList+0xc8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d207      	bcs.n	80089ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089ba:	4b0c      	ldr	r3, [pc, #48]	@ (80089ec <prvAddNewTaskToReadyList+0xdc>)
 80089bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089ca:	bf00      	nop
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20007a70 	.word	0x20007a70
 80089d8:	2000759c 	.word	0x2000759c
 80089dc:	20007a7c 	.word	0x20007a7c
 80089e0:	20007a8c 	.word	0x20007a8c
 80089e4:	20007a78 	.word	0x20007a78
 80089e8:	200075a0 	.word	0x200075a0
 80089ec:	e000ed04 	.word	0xe000ed04

080089f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d018      	beq.n	8008a34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a02:	4b14      	ldr	r3, [pc, #80]	@ (8008a54 <vTaskDelay+0x64>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00b      	beq.n	8008a22 <vTaskDelay+0x32>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	60bb      	str	r3, [r7, #8]
}
 8008a1c:	bf00      	nop
 8008a1e:	bf00      	nop
 8008a20:	e7fd      	b.n	8008a1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a22:	f000 f883 	bl	8008b2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a26:	2100      	movs	r1, #0
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fd1b 	bl	8009464 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a2e:	f000 f88b 	bl	8008b48 <xTaskResumeAll>
 8008a32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d107      	bne.n	8008a4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a3a:	4b07      	ldr	r3, [pc, #28]	@ (8008a58 <vTaskDelay+0x68>)
 8008a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20007a98 	.word	0x20007a98
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	@ 0x28
 8008a60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a6a:	463a      	mov	r2, r7
 8008a6c:	1d39      	adds	r1, r7, #4
 8008a6e:	f107 0308 	add.w	r3, r7, #8
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7ff f834 	bl	8007ae0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	9202      	str	r2, [sp, #8]
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	2300      	movs	r3, #0
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	2300      	movs	r3, #0
 8008a88:	460a      	mov	r2, r1
 8008a8a:	4922      	ldr	r1, [pc, #136]	@ (8008b14 <vTaskStartScheduler+0xb8>)
 8008a8c:	4822      	ldr	r0, [pc, #136]	@ (8008b18 <vTaskStartScheduler+0xbc>)
 8008a8e:	f7ff fe09 	bl	80086a4 <xTaskCreateStatic>
 8008a92:	4603      	mov	r3, r0
 8008a94:	4a21      	ldr	r2, [pc, #132]	@ (8008b1c <vTaskStartScheduler+0xc0>)
 8008a96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a98:	4b20      	ldr	r3, [pc, #128]	@ (8008b1c <vTaskStartScheduler+0xc0>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	e001      	b.n	8008aaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d102      	bne.n	8008ab6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ab0:	f000 fd2c 	bl	800950c <xTimerCreateTimerTask>
 8008ab4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d116      	bne.n	8008aea <vTaskStartScheduler+0x8e>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	613b      	str	r3, [r7, #16]
}
 8008ace:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ad0:	4b13      	ldr	r3, [pc, #76]	@ (8008b20 <vTaskStartScheduler+0xc4>)
 8008ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ad8:	4b12      	ldr	r3, [pc, #72]	@ (8008b24 <vTaskStartScheduler+0xc8>)
 8008ada:	2201      	movs	r2, #1
 8008adc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ade:	4b12      	ldr	r3, [pc, #72]	@ (8008b28 <vTaskStartScheduler+0xcc>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ae4:	f001 f8fc 	bl	8009ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ae8:	e00f      	b.n	8008b0a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d10b      	bne.n	8008b0a <vTaskStartScheduler+0xae>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	60fb      	str	r3, [r7, #12]
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop
 8008b08:	e7fd      	b.n	8008b06 <vTaskStartScheduler+0xaa>
}
 8008b0a:	bf00      	nop
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	0801b8b0 	.word	0x0801b8b0
 8008b18:	0800919d 	.word	0x0800919d
 8008b1c:	20007a94 	.word	0x20007a94
 8008b20:	20007a90 	.word	0x20007a90
 8008b24:	20007a7c 	.word	0x20007a7c
 8008b28:	20007a74 	.word	0x20007a74

08008b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b30:	4b04      	ldr	r3, [pc, #16]	@ (8008b44 <vTaskSuspendAll+0x18>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	3301      	adds	r3, #1
 8008b36:	4a03      	ldr	r2, [pc, #12]	@ (8008b44 <vTaskSuspendAll+0x18>)
 8008b38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b3a:	bf00      	nop
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr
 8008b44:	20007a98 	.word	0x20007a98

08008b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b56:	4b42      	ldr	r3, [pc, #264]	@ (8008c60 <xTaskResumeAll+0x118>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10b      	bne.n	8008b76 <xTaskResumeAll+0x2e>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	603b      	str	r3, [r7, #0]
}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	e7fd      	b.n	8008b72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b76:	f001 f957 	bl	8009e28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b7a:	4b39      	ldr	r3, [pc, #228]	@ (8008c60 <xTaskResumeAll+0x118>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	4a37      	ldr	r2, [pc, #220]	@ (8008c60 <xTaskResumeAll+0x118>)
 8008b82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b84:	4b36      	ldr	r3, [pc, #216]	@ (8008c60 <xTaskResumeAll+0x118>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d162      	bne.n	8008c52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b8c:	4b35      	ldr	r3, [pc, #212]	@ (8008c64 <xTaskResumeAll+0x11c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d05e      	beq.n	8008c52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b94:	e02f      	b.n	8008bf6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b96:	4b34      	ldr	r3, [pc, #208]	@ (8008c68 <xTaskResumeAll+0x120>)
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	3318      	adds	r3, #24
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff f85a 	bl	8007c5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3304      	adds	r3, #4
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff f855 	bl	8007c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8008c6c <xTaskResumeAll+0x124>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d903      	bls.n	8008bc6 <xTaskResumeAll+0x7e>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8008c6c <xTaskResumeAll+0x124>)
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4a27      	ldr	r2, [pc, #156]	@ (8008c70 <xTaskResumeAll+0x128>)
 8008bd4:	441a      	add	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3304      	adds	r3, #4
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f7fe ffe0 	bl	8007ba2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be6:	4b23      	ldr	r3, [pc, #140]	@ (8008c74 <xTaskResumeAll+0x12c>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d302      	bcc.n	8008bf6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008bf0:	4b21      	ldr	r3, [pc, #132]	@ (8008c78 <xTaskResumeAll+0x130>)
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8008c68 <xTaskResumeAll+0x120>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1cb      	bne.n	8008b96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c04:	f000 fb80 	bl	8009308 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c08:	4b1c      	ldr	r3, [pc, #112]	@ (8008c7c <xTaskResumeAll+0x134>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d010      	beq.n	8008c36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c14:	f000 f846 	bl	8008ca4 <xTaskIncrementTick>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d002      	beq.n	8008c24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c1e:	4b16      	ldr	r3, [pc, #88]	@ (8008c78 <xTaskResumeAll+0x130>)
 8008c20:	2201      	movs	r2, #1
 8008c22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1f1      	bne.n	8008c14 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c30:	4b12      	ldr	r3, [pc, #72]	@ (8008c7c <xTaskResumeAll+0x134>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c36:	4b10      	ldr	r3, [pc, #64]	@ (8008c78 <xTaskResumeAll+0x130>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c42:	4b0f      	ldr	r3, [pc, #60]	@ (8008c80 <xTaskResumeAll+0x138>)
 8008c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c52:	f001 f91b 	bl	8009e8c <vPortExitCritical>

	return xAlreadyYielded;
 8008c56:	68bb      	ldr	r3, [r7, #8]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20007a98 	.word	0x20007a98
 8008c64:	20007a70 	.word	0x20007a70
 8008c68:	20007a30 	.word	0x20007a30
 8008c6c:	20007a78 	.word	0x20007a78
 8008c70:	200075a0 	.word	0x200075a0
 8008c74:	2000759c 	.word	0x2000759c
 8008c78:	20007a84 	.word	0x20007a84
 8008c7c:	20007a80 	.word	0x20007a80
 8008c80:	e000ed04 	.word	0xe000ed04

08008c84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c8a:	4b05      	ldr	r3, [pc, #20]	@ (8008ca0 <xTaskGetTickCount+0x1c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c90:	687b      	ldr	r3, [r7, #4]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	20007a74 	.word	0x20007a74

08008ca4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008caa:	2300      	movs	r3, #0
 8008cac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cae:	4b4f      	ldr	r3, [pc, #316]	@ (8008dec <xTaskIncrementTick+0x148>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f040 8090 	bne.w	8008dd8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8008df0 <xTaskIncrementTick+0x14c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8008df0 <xTaskIncrementTick+0x14c>)
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d121      	bne.n	8008d10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ccc:	4b49      	ldr	r3, [pc, #292]	@ (8008df4 <xTaskIncrementTick+0x150>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00b      	beq.n	8008cee <xTaskIncrementTick+0x4a>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	603b      	str	r3, [r7, #0]
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	e7fd      	b.n	8008cea <xTaskIncrementTick+0x46>
 8008cee:	4b41      	ldr	r3, [pc, #260]	@ (8008df4 <xTaskIncrementTick+0x150>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	4b40      	ldr	r3, [pc, #256]	@ (8008df8 <xTaskIncrementTick+0x154>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8008df4 <xTaskIncrementTick+0x150>)
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	4a3e      	ldr	r2, [pc, #248]	@ (8008df8 <xTaskIncrementTick+0x154>)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	4b3e      	ldr	r3, [pc, #248]	@ (8008dfc <xTaskIncrementTick+0x158>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3301      	adds	r3, #1
 8008d08:	4a3c      	ldr	r2, [pc, #240]	@ (8008dfc <xTaskIncrementTick+0x158>)
 8008d0a:	6013      	str	r3, [r2, #0]
 8008d0c:	f000 fafc 	bl	8009308 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d10:	4b3b      	ldr	r3, [pc, #236]	@ (8008e00 <xTaskIncrementTick+0x15c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d349      	bcc.n	8008dae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d1a:	4b36      	ldr	r3, [pc, #216]	@ (8008df4 <xTaskIncrementTick+0x150>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d104      	bne.n	8008d2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d24:	4b36      	ldr	r3, [pc, #216]	@ (8008e00 <xTaskIncrementTick+0x15c>)
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2a:	601a      	str	r2, [r3, #0]
					break;
 8008d2c:	e03f      	b.n	8008dae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d2e:	4b31      	ldr	r3, [pc, #196]	@ (8008df4 <xTaskIncrementTick+0x150>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d203      	bcs.n	8008d4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d46:	4a2e      	ldr	r2, [pc, #184]	@ (8008e00 <xTaskIncrementTick+0x15c>)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d4c:	e02f      	b.n	8008dae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe ff82 	bl	8007c5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d004      	beq.n	8008d6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	3318      	adds	r3, #24
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe ff79 	bl	8007c5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6e:	4b25      	ldr	r3, [pc, #148]	@ (8008e04 <xTaskIncrementTick+0x160>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d903      	bls.n	8008d7e <xTaskIncrementTick+0xda>
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7a:	4a22      	ldr	r2, [pc, #136]	@ (8008e04 <xTaskIncrementTick+0x160>)
 8008d7c:	6013      	str	r3, [r2, #0]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8008e08 <xTaskIncrementTick+0x164>)
 8008d8c:	441a      	add	r2, r3
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	3304      	adds	r3, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4610      	mov	r0, r2
 8008d96:	f7fe ff04 	bl	8007ba2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8008e0c <xTaskIncrementTick+0x168>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d3b8      	bcc.n	8008d1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008da8:	2301      	movs	r3, #1
 8008daa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dac:	e7b5      	b.n	8008d1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008dae:	4b17      	ldr	r3, [pc, #92]	@ (8008e0c <xTaskIncrementTick+0x168>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db4:	4914      	ldr	r1, [pc, #80]	@ (8008e08 <xTaskIncrementTick+0x164>)
 8008db6:	4613      	mov	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	440b      	add	r3, r1
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d901      	bls.n	8008dca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008dca:	4b11      	ldr	r3, [pc, #68]	@ (8008e10 <xTaskIncrementTick+0x16c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d007      	beq.n	8008de2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	e004      	b.n	8008de2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e14 <xTaskIncrementTick+0x170>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	4a0d      	ldr	r2, [pc, #52]	@ (8008e14 <xTaskIncrementTick+0x170>)
 8008de0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008de2:	697b      	ldr	r3, [r7, #20]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3718      	adds	r7, #24
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	20007a98 	.word	0x20007a98
 8008df0:	20007a74 	.word	0x20007a74
 8008df4:	20007a28 	.word	0x20007a28
 8008df8:	20007a2c 	.word	0x20007a2c
 8008dfc:	20007a88 	.word	0x20007a88
 8008e00:	20007a90 	.word	0x20007a90
 8008e04:	20007a78 	.word	0x20007a78
 8008e08:	200075a0 	.word	0x200075a0
 8008e0c:	2000759c 	.word	0x2000759c
 8008e10:	20007a84 	.word	0x20007a84
 8008e14:	20007a80 	.word	0x20007a80

08008e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e1e:	4b28      	ldr	r3, [pc, #160]	@ (8008ec0 <vTaskSwitchContext+0xa8>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e26:	4b27      	ldr	r3, [pc, #156]	@ (8008ec4 <vTaskSwitchContext+0xac>)
 8008e28:	2201      	movs	r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e2c:	e042      	b.n	8008eb4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008e2e:	4b25      	ldr	r3, [pc, #148]	@ (8008ec4 <vTaskSwitchContext+0xac>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e34:	4b24      	ldr	r3, [pc, #144]	@ (8008ec8 <vTaskSwitchContext+0xb0>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	60fb      	str	r3, [r7, #12]
 8008e3a:	e011      	b.n	8008e60 <vTaskSwitchContext+0x48>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10b      	bne.n	8008e5a <vTaskSwitchContext+0x42>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	607b      	str	r3, [r7, #4]
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	e7fd      	b.n	8008e56 <vTaskSwitchContext+0x3e>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	491a      	ldr	r1, [pc, #104]	@ (8008ecc <vTaskSwitchContext+0xb4>)
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4613      	mov	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0e3      	beq.n	8008e3c <vTaskSwitchContext+0x24>
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4a13      	ldr	r2, [pc, #76]	@ (8008ecc <vTaskSwitchContext+0xb4>)
 8008e80:	4413      	add	r3, r2
 8008e82:	60bb      	str	r3, [r7, #8]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	605a      	str	r2, [r3, #4]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	3308      	adds	r3, #8
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d104      	bne.n	8008ea4 <vTaskSwitchContext+0x8c>
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	605a      	str	r2, [r3, #4]
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	4a09      	ldr	r2, [pc, #36]	@ (8008ed0 <vTaskSwitchContext+0xb8>)
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	4a06      	ldr	r2, [pc, #24]	@ (8008ec8 <vTaskSwitchContext+0xb0>)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6013      	str	r3, [r2, #0]
}
 8008eb4:	bf00      	nop
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	20007a98 	.word	0x20007a98
 8008ec4:	20007a84 	.word	0x20007a84
 8008ec8:	20007a78 	.word	0x20007a78
 8008ecc:	200075a0 	.word	0x200075a0
 8008ed0:	2000759c 	.word	0x2000759c

08008ed4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10b      	bne.n	8008efc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	60fb      	str	r3, [r7, #12]
}
 8008ef6:	bf00      	nop
 8008ef8:	bf00      	nop
 8008efa:	e7fd      	b.n	8008ef8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008efc:	4b07      	ldr	r3, [pc, #28]	@ (8008f1c <vTaskPlaceOnEventList+0x48>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3318      	adds	r3, #24
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7fe fe70 	bl	8007bea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	6838      	ldr	r0, [r7, #0]
 8008f0e:	f000 faa9 	bl	8009464 <prvAddCurrentTaskToDelayedList>
}
 8008f12:	bf00      	nop
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	2000759c 	.word	0x2000759c

08008f20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10b      	bne.n	8008f4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	617b      	str	r3, [r7, #20]
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	e7fd      	b.n	8008f46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f74 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3318      	adds	r3, #24
 8008f50:	4619      	mov	r1, r3
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f7fe fe25 	bl	8007ba2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	68b8      	ldr	r0, [r7, #8]
 8008f68:	f000 fa7c 	bl	8009464 <prvAddCurrentTaskToDelayedList>
	}
 8008f6c:	bf00      	nop
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	2000759c 	.word	0x2000759c

08008f78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10b      	bne.n	8008fa6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f92:	f383 8811 	msr	BASEPRI, r3
 8008f96:	f3bf 8f6f 	isb	sy
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	60fb      	str	r3, [r7, #12]
}
 8008fa0:	bf00      	nop
 8008fa2:	bf00      	nop
 8008fa4:	e7fd      	b.n	8008fa2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	3318      	adds	r3, #24
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe fe56 	bl	8007c5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8009028 <xTaskRemoveFromEventList+0xb0>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d11d      	bne.n	8008ff4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	3304      	adds	r3, #4
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe fe4d 	bl	8007c5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fc6:	4b19      	ldr	r3, [pc, #100]	@ (800902c <xTaskRemoveFromEventList+0xb4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d903      	bls.n	8008fd6 <xTaskRemoveFromEventList+0x5e>
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd2:	4a16      	ldr	r2, [pc, #88]	@ (800902c <xTaskRemoveFromEventList+0xb4>)
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fda:	4613      	mov	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4413      	add	r3, r2
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4a13      	ldr	r2, [pc, #76]	@ (8009030 <xTaskRemoveFromEventList+0xb8>)
 8008fe4:	441a      	add	r2, r3
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	3304      	adds	r3, #4
 8008fea:	4619      	mov	r1, r3
 8008fec:	4610      	mov	r0, r2
 8008fee:	f7fe fdd8 	bl	8007ba2 <vListInsertEnd>
 8008ff2:	e005      	b.n	8009000 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	3318      	adds	r3, #24
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	480e      	ldr	r0, [pc, #56]	@ (8009034 <xTaskRemoveFromEventList+0xbc>)
 8008ffc:	f7fe fdd1 	bl	8007ba2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009004:	4b0c      	ldr	r3, [pc, #48]	@ (8009038 <xTaskRemoveFromEventList+0xc0>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800900a:	429a      	cmp	r2, r3
 800900c:	d905      	bls.n	800901a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800900e:	2301      	movs	r3, #1
 8009010:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009012:	4b0a      	ldr	r3, [pc, #40]	@ (800903c <xTaskRemoveFromEventList+0xc4>)
 8009014:	2201      	movs	r2, #1
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	e001      	b.n	800901e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800901a:	2300      	movs	r3, #0
 800901c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800901e:	697b      	ldr	r3, [r7, #20]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	20007a98 	.word	0x20007a98
 800902c:	20007a78 	.word	0x20007a78
 8009030:	200075a0 	.word	0x200075a0
 8009034:	20007a30 	.word	0x20007a30
 8009038:	2000759c 	.word	0x2000759c
 800903c:	20007a84 	.word	0x20007a84

08009040 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	60fb      	str	r3, [r7, #12]
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	e7fd      	b.n	8009062 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009066:	f000 fedf 	bl	8009e28 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800906a:	4b07      	ldr	r3, [pc, #28]	@ (8009088 <vTaskSetTimeOutState+0x48>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009072:	4b06      	ldr	r3, [pc, #24]	@ (800908c <vTaskSetTimeOutState+0x4c>)
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800907a:	f000 ff07 	bl	8009e8c <vPortExitCritical>
}
 800907e:	bf00      	nop
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20007a88 	.word	0x20007a88
 800908c:	20007a74 	.word	0x20007a74

08009090 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009098:	4b06      	ldr	r3, [pc, #24]	@ (80090b4 <vTaskInternalSetTimeOutState+0x24>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090a0:	4b05      	ldr	r3, [pc, #20]	@ (80090b8 <vTaskInternalSetTimeOutState+0x28>)
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	605a      	str	r2, [r3, #4]
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	20007a88 	.word	0x20007a88
 80090b8:	20007a74 	.word	0x20007a74

080090bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b088      	sub	sp, #32
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10b      	bne.n	80090e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	613b      	str	r3, [r7, #16]
}
 80090de:	bf00      	nop
 80090e0:	bf00      	nop
 80090e2:	e7fd      	b.n	80090e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	60fb      	str	r3, [r7, #12]
}
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
 8009100:	e7fd      	b.n	80090fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009102:	f000 fe91 	bl	8009e28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009106:	4b1d      	ldr	r3, [pc, #116]	@ (800917c <xTaskCheckForTimeOut+0xc0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	69ba      	ldr	r2, [r7, #24]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911e:	d102      	bne.n	8009126 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009120:	2300      	movs	r3, #0
 8009122:	61fb      	str	r3, [r7, #28]
 8009124:	e023      	b.n	800916e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	4b15      	ldr	r3, [pc, #84]	@ (8009180 <xTaskCheckForTimeOut+0xc4>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d007      	beq.n	8009142 <xTaskCheckForTimeOut+0x86>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	429a      	cmp	r2, r3
 800913a:	d302      	bcc.n	8009142 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800913c:	2301      	movs	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]
 8009140:	e015      	b.n	800916e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	429a      	cmp	r2, r3
 800914a:	d20b      	bcs.n	8009164 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	1ad2      	subs	r2, r2, r3
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f7ff ff99 	bl	8009090 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800915e:	2300      	movs	r3, #0
 8009160:	61fb      	str	r3, [r7, #28]
 8009162:	e004      	b.n	800916e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2200      	movs	r2, #0
 8009168:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800916a:	2301      	movs	r3, #1
 800916c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800916e:	f000 fe8d 	bl	8009e8c <vPortExitCritical>

	return xReturn;
 8009172:	69fb      	ldr	r3, [r7, #28]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3720      	adds	r7, #32
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	20007a74 	.word	0x20007a74
 8009180:	20007a88 	.word	0x20007a88

08009184 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009184:	b480      	push	{r7}
 8009186:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009188:	4b03      	ldr	r3, [pc, #12]	@ (8009198 <vTaskMissedYield+0x14>)
 800918a:	2201      	movs	r2, #1
 800918c:	601a      	str	r2, [r3, #0]
}
 800918e:	bf00      	nop
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	20007a84 	.word	0x20007a84

0800919c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091a4:	f000 f852 	bl	800924c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091a8:	4b06      	ldr	r3, [pc, #24]	@ (80091c4 <prvIdleTask+0x28>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d9f9      	bls.n	80091a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091b0:	4b05      	ldr	r3, [pc, #20]	@ (80091c8 <prvIdleTask+0x2c>)
 80091b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091c0:	e7f0      	b.n	80091a4 <prvIdleTask+0x8>
 80091c2:	bf00      	nop
 80091c4:	200075a0 	.word	0x200075a0
 80091c8:	e000ed04 	.word	0xe000ed04

080091cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091d2:	2300      	movs	r3, #0
 80091d4:	607b      	str	r3, [r7, #4]
 80091d6:	e00c      	b.n	80091f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4a12      	ldr	r2, [pc, #72]	@ (800922c <prvInitialiseTaskLists+0x60>)
 80091e4:	4413      	add	r3, r2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fcae 	bl	8007b48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3301      	adds	r3, #1
 80091f0:	607b      	str	r3, [r7, #4]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b37      	cmp	r3, #55	@ 0x37
 80091f6:	d9ef      	bls.n	80091d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091f8:	480d      	ldr	r0, [pc, #52]	@ (8009230 <prvInitialiseTaskLists+0x64>)
 80091fa:	f7fe fca5 	bl	8007b48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091fe:	480d      	ldr	r0, [pc, #52]	@ (8009234 <prvInitialiseTaskLists+0x68>)
 8009200:	f7fe fca2 	bl	8007b48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009204:	480c      	ldr	r0, [pc, #48]	@ (8009238 <prvInitialiseTaskLists+0x6c>)
 8009206:	f7fe fc9f 	bl	8007b48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800920a:	480c      	ldr	r0, [pc, #48]	@ (800923c <prvInitialiseTaskLists+0x70>)
 800920c:	f7fe fc9c 	bl	8007b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009210:	480b      	ldr	r0, [pc, #44]	@ (8009240 <prvInitialiseTaskLists+0x74>)
 8009212:	f7fe fc99 	bl	8007b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009216:	4b0b      	ldr	r3, [pc, #44]	@ (8009244 <prvInitialiseTaskLists+0x78>)
 8009218:	4a05      	ldr	r2, [pc, #20]	@ (8009230 <prvInitialiseTaskLists+0x64>)
 800921a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800921c:	4b0a      	ldr	r3, [pc, #40]	@ (8009248 <prvInitialiseTaskLists+0x7c>)
 800921e:	4a05      	ldr	r2, [pc, #20]	@ (8009234 <prvInitialiseTaskLists+0x68>)
 8009220:	601a      	str	r2, [r3, #0]
}
 8009222:	bf00      	nop
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	200075a0 	.word	0x200075a0
 8009230:	20007a00 	.word	0x20007a00
 8009234:	20007a14 	.word	0x20007a14
 8009238:	20007a30 	.word	0x20007a30
 800923c:	20007a44 	.word	0x20007a44
 8009240:	20007a5c 	.word	0x20007a5c
 8009244:	20007a28 	.word	0x20007a28
 8009248:	20007a2c 	.word	0x20007a2c

0800924c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009252:	e019      	b.n	8009288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009254:	f000 fde8 	bl	8009e28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009258:	4b10      	ldr	r3, [pc, #64]	@ (800929c <prvCheckTasksWaitingTermination+0x50>)
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3304      	adds	r3, #4
 8009264:	4618      	mov	r0, r3
 8009266:	f7fe fcf9 	bl	8007c5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800926a:	4b0d      	ldr	r3, [pc, #52]	@ (80092a0 <prvCheckTasksWaitingTermination+0x54>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3b01      	subs	r3, #1
 8009270:	4a0b      	ldr	r2, [pc, #44]	@ (80092a0 <prvCheckTasksWaitingTermination+0x54>)
 8009272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009274:	4b0b      	ldr	r3, [pc, #44]	@ (80092a4 <prvCheckTasksWaitingTermination+0x58>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3b01      	subs	r3, #1
 800927a:	4a0a      	ldr	r2, [pc, #40]	@ (80092a4 <prvCheckTasksWaitingTermination+0x58>)
 800927c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800927e:	f000 fe05 	bl	8009e8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f810 	bl	80092a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009288:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <prvCheckTasksWaitingTermination+0x58>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1e1      	bne.n	8009254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	20007a44 	.word	0x20007a44
 80092a0:	20007a70 	.word	0x20007a70
 80092a4:	20007a58 	.word	0x20007a58

080092a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d108      	bne.n	80092cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 ffa2 	bl	800a208 <vPortFree>
				vPortFree( pxTCB );
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 ff9f 	bl	800a208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092ca:	e019      	b.n	8009300 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d103      	bne.n	80092de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 ff96 	bl	800a208 <vPortFree>
	}
 80092dc:	e010      	b.n	8009300 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d00b      	beq.n	8009300 <prvDeleteTCB+0x58>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	60fb      	str	r3, [r7, #12]
}
 80092fa:	bf00      	nop
 80092fc:	bf00      	nop
 80092fe:	e7fd      	b.n	80092fc <prvDeleteTCB+0x54>
	}
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800930e:	4b0c      	ldr	r3, [pc, #48]	@ (8009340 <prvResetNextTaskUnblockTime+0x38>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d104      	bne.n	8009322 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009318:	4b0a      	ldr	r3, [pc, #40]	@ (8009344 <prvResetNextTaskUnblockTime+0x3c>)
 800931a:	f04f 32ff 	mov.w	r2, #4294967295
 800931e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009320:	e008      	b.n	8009334 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009322:	4b07      	ldr	r3, [pc, #28]	@ (8009340 <prvResetNextTaskUnblockTime+0x38>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	4a04      	ldr	r2, [pc, #16]	@ (8009344 <prvResetNextTaskUnblockTime+0x3c>)
 8009332:	6013      	str	r3, [r2, #0]
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	20007a28 	.word	0x20007a28
 8009344:	20007a90 	.word	0x20007a90

08009348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800934e:	4b0b      	ldr	r3, [pc, #44]	@ (800937c <xTaskGetSchedulerState+0x34>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d102      	bne.n	800935c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009356:	2301      	movs	r3, #1
 8009358:	607b      	str	r3, [r7, #4]
 800935a:	e008      	b.n	800936e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800935c:	4b08      	ldr	r3, [pc, #32]	@ (8009380 <xTaskGetSchedulerState+0x38>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d102      	bne.n	800936a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009364:	2302      	movs	r3, #2
 8009366:	607b      	str	r3, [r7, #4]
 8009368:	e001      	b.n	800936e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800936a:	2300      	movs	r3, #0
 800936c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800936e:	687b      	ldr	r3, [r7, #4]
	}
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr
 800937c:	20007a7c 	.word	0x20007a7c
 8009380:	20007a98 	.word	0x20007a98

08009384 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009390:	2300      	movs	r3, #0
 8009392:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d058      	beq.n	800944c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800939a:	4b2f      	ldr	r3, [pc, #188]	@ (8009458 <xTaskPriorityDisinherit+0xd4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d00b      	beq.n	80093bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	60fb      	str	r3, [r7, #12]
}
 80093b6:	bf00      	nop
 80093b8:	bf00      	nop
 80093ba:	e7fd      	b.n	80093b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d10b      	bne.n	80093dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80093c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c8:	f383 8811 	msr	BASEPRI, r3
 80093cc:	f3bf 8f6f 	isb	sy
 80093d0:	f3bf 8f4f 	dsb	sy
 80093d4:	60bb      	str	r3, [r7, #8]
}
 80093d6:	bf00      	nop
 80093d8:	bf00      	nop
 80093da:	e7fd      	b.n	80093d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e0:	1e5a      	subs	r2, r3, #1
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d02c      	beq.n	800944c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d128      	bne.n	800944c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	3304      	adds	r3, #4
 80093fe:	4618      	mov	r0, r3
 8009400:	f7fe fc2c 	bl	8007c5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009410:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800941c:	4b0f      	ldr	r3, [pc, #60]	@ (800945c <xTaskPriorityDisinherit+0xd8>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	429a      	cmp	r2, r3
 8009422:	d903      	bls.n	800942c <xTaskPriorityDisinherit+0xa8>
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009428:	4a0c      	ldr	r2, [pc, #48]	@ (800945c <xTaskPriorityDisinherit+0xd8>)
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009430:	4613      	mov	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	4a09      	ldr	r2, [pc, #36]	@ (8009460 <xTaskPriorityDisinherit+0xdc>)
 800943a:	441a      	add	r2, r3
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	3304      	adds	r3, #4
 8009440:	4619      	mov	r1, r3
 8009442:	4610      	mov	r0, r2
 8009444:	f7fe fbad 	bl	8007ba2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009448:	2301      	movs	r3, #1
 800944a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800944c:	697b      	ldr	r3, [r7, #20]
	}
 800944e:	4618      	mov	r0, r3
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	2000759c 	.word	0x2000759c
 800945c:	20007a78 	.word	0x20007a78
 8009460:	200075a0 	.word	0x200075a0

08009464 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800946e:	4b21      	ldr	r3, [pc, #132]	@ (80094f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009474:	4b20      	ldr	r3, [pc, #128]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3304      	adds	r3, #4
 800947a:	4618      	mov	r0, r3
 800947c:	f7fe fbee 	bl	8007c5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009486:	d10a      	bne.n	800949e <prvAddCurrentTaskToDelayedList+0x3a>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d007      	beq.n	800949e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800948e:	4b1a      	ldr	r3, [pc, #104]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3304      	adds	r3, #4
 8009494:	4619      	mov	r1, r3
 8009496:	4819      	ldr	r0, [pc, #100]	@ (80094fc <prvAddCurrentTaskToDelayedList+0x98>)
 8009498:	f7fe fb83 	bl	8007ba2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800949c:	e026      	b.n	80094ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800949e:	68fa      	ldr	r2, [r7, #12]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4413      	add	r3, r2
 80094a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094a6:	4b14      	ldr	r3, [pc, #80]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d209      	bcs.n	80094ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094b6:	4b12      	ldr	r3, [pc, #72]	@ (8009500 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	4b0f      	ldr	r3, [pc, #60]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3304      	adds	r3, #4
 80094c0:	4619      	mov	r1, r3
 80094c2:	4610      	mov	r0, r2
 80094c4:	f7fe fb91 	bl	8007bea <vListInsert>
}
 80094c8:	e010      	b.n	80094ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ca:	4b0e      	ldr	r3, [pc, #56]	@ (8009504 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	4b0a      	ldr	r3, [pc, #40]	@ (80094f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4619      	mov	r1, r3
 80094d6:	4610      	mov	r0, r2
 80094d8:	f7fe fb87 	bl	8007bea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009508 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d202      	bcs.n	80094ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094e6:	4a08      	ldr	r2, [pc, #32]	@ (8009508 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	6013      	str	r3, [r2, #0]
}
 80094ec:	bf00      	nop
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	20007a74 	.word	0x20007a74
 80094f8:	2000759c 	.word	0x2000759c
 80094fc:	20007a5c 	.word	0x20007a5c
 8009500:	20007a2c 	.word	0x20007a2c
 8009504:	20007a28 	.word	0x20007a28
 8009508:	20007a90 	.word	0x20007a90

0800950c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08a      	sub	sp, #40	@ 0x28
 8009510:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009516:	f000 fb13 	bl	8009b40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800951a:	4b1d      	ldr	r3, [pc, #116]	@ (8009590 <xTimerCreateTimerTask+0x84>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d021      	beq.n	8009566 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009526:	2300      	movs	r3, #0
 8009528:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800952a:	1d3a      	adds	r2, r7, #4
 800952c:	f107 0108 	add.w	r1, r7, #8
 8009530:	f107 030c 	add.w	r3, r7, #12
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe faed 	bl	8007b14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	68fa      	ldr	r2, [r7, #12]
 8009540:	9202      	str	r2, [sp, #8]
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	2302      	movs	r3, #2
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	2300      	movs	r3, #0
 800954a:	460a      	mov	r2, r1
 800954c:	4911      	ldr	r1, [pc, #68]	@ (8009594 <xTimerCreateTimerTask+0x88>)
 800954e:	4812      	ldr	r0, [pc, #72]	@ (8009598 <xTimerCreateTimerTask+0x8c>)
 8009550:	f7ff f8a8 	bl	80086a4 <xTaskCreateStatic>
 8009554:	4603      	mov	r3, r0
 8009556:	4a11      	ldr	r2, [pc, #68]	@ (800959c <xTimerCreateTimerTask+0x90>)
 8009558:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800955a:	4b10      	ldr	r3, [pc, #64]	@ (800959c <xTimerCreateTimerTask+0x90>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009562:	2301      	movs	r3, #1
 8009564:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10b      	bne.n	8009584 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	613b      	str	r3, [r7, #16]
}
 800957e:	bf00      	nop
 8009580:	bf00      	nop
 8009582:	e7fd      	b.n	8009580 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009584:	697b      	ldr	r3, [r7, #20]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20007acc 	.word	0x20007acc
 8009594:	0801b8b8 	.word	0x0801b8b8
 8009598:	080096d9 	.word	0x080096d9
 800959c:	20007ad0 	.word	0x20007ad0

080095a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b08a      	sub	sp, #40	@ 0x28
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	607a      	str	r2, [r7, #4]
 80095ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10b      	bne.n	80095d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	623b      	str	r3, [r7, #32]
}
 80095ca:	bf00      	nop
 80095cc:	bf00      	nop
 80095ce:	e7fd      	b.n	80095cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095d0:	4b19      	ldr	r3, [pc, #100]	@ (8009638 <xTimerGenericCommand+0x98>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d02a      	beq.n	800962e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2b05      	cmp	r3, #5
 80095e8:	dc18      	bgt.n	800961c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095ea:	f7ff fead 	bl	8009348 <xTaskGetSchedulerState>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d109      	bne.n	8009608 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095f4:	4b10      	ldr	r3, [pc, #64]	@ (8009638 <xTimerGenericCommand+0x98>)
 80095f6:	6818      	ldr	r0, [r3, #0]
 80095f8:	f107 0110 	add.w	r1, r7, #16
 80095fc:	2300      	movs	r3, #0
 80095fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009600:	f7fe fc60 	bl	8007ec4 <xQueueGenericSend>
 8009604:	6278      	str	r0, [r7, #36]	@ 0x24
 8009606:	e012      	b.n	800962e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009608:	4b0b      	ldr	r3, [pc, #44]	@ (8009638 <xTimerGenericCommand+0x98>)
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	f107 0110 	add.w	r1, r7, #16
 8009610:	2300      	movs	r3, #0
 8009612:	2200      	movs	r2, #0
 8009614:	f7fe fc56 	bl	8007ec4 <xQueueGenericSend>
 8009618:	6278      	str	r0, [r7, #36]	@ 0x24
 800961a:	e008      	b.n	800962e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800961c:	4b06      	ldr	r3, [pc, #24]	@ (8009638 <xTimerGenericCommand+0x98>)
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	f107 0110 	add.w	r1, r7, #16
 8009624:	2300      	movs	r3, #0
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	f7fe fd4e 	bl	80080c8 <xQueueGenericSendFromISR>
 800962c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800962e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009630:	4618      	mov	r0, r3
 8009632:	3728      	adds	r7, #40	@ 0x28
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20007acc 	.word	0x20007acc

0800963c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af02      	add	r7, sp, #8
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009646:	4b23      	ldr	r3, [pc, #140]	@ (80096d4 <prvProcessExpiredTimer+0x98>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	3304      	adds	r3, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f7fe fb01 	bl	8007c5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d023      	beq.n	80096b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	699a      	ldr	r2, [r3, #24]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	18d1      	adds	r1, r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	6978      	ldr	r0, [r7, #20]
 8009676:	f000 f8d5 	bl	8009824 <prvInsertTimerInActiveList>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d020      	beq.n	80096c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009680:	2300      	movs	r3, #0
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	2300      	movs	r3, #0
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	2100      	movs	r1, #0
 800968a:	6978      	ldr	r0, [r7, #20]
 800968c:	f7ff ff88 	bl	80095a0 <xTimerGenericCommand>
 8009690:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d114      	bne.n	80096c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	60fb      	str	r3, [r7, #12]
}
 80096aa:	bf00      	nop
 80096ac:	bf00      	nop
 80096ae:	e7fd      	b.n	80096ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80096b6:	f023 0301 	bic.w	r3, r3, #1
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	6a1b      	ldr	r3, [r3, #32]
 80096c6:	6978      	ldr	r0, [r7, #20]
 80096c8:	4798      	blx	r3
}
 80096ca:	bf00      	nop
 80096cc:	3718      	adds	r7, #24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	20007ac4 	.word	0x20007ac4

080096d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096e0:	f107 0308 	add.w	r3, r7, #8
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f859 	bl	800979c <prvGetNextExpireTime>
 80096ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4619      	mov	r1, r3
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f805 	bl	8009700 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096f6:	f000 f8d7 	bl	80098a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096fa:	bf00      	nop
 80096fc:	e7f0      	b.n	80096e0 <prvTimerTask+0x8>
	...

08009700 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800970a:	f7ff fa0f 	bl	8008b2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800970e:	f107 0308 	add.w	r3, r7, #8
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f866 	bl	80097e4 <prvSampleTimeNow>
 8009718:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d130      	bne.n	8009782 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10a      	bne.n	800973c <prvProcessTimerOrBlockTask+0x3c>
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	429a      	cmp	r2, r3
 800972c:	d806      	bhi.n	800973c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800972e:	f7ff fa0b 	bl	8008b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009732:	68f9      	ldr	r1, [r7, #12]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff ff81 	bl	800963c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800973a:	e024      	b.n	8009786 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d008      	beq.n	8009754 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009742:	4b13      	ldr	r3, [pc, #76]	@ (8009790 <prvProcessTimerOrBlockTask+0x90>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <prvProcessTimerOrBlockTask+0x50>
 800974c:	2301      	movs	r3, #1
 800974e:	e000      	b.n	8009752 <prvProcessTimerOrBlockTask+0x52>
 8009750:	2300      	movs	r3, #0
 8009752:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009754:	4b0f      	ldr	r3, [pc, #60]	@ (8009794 <prvProcessTimerOrBlockTask+0x94>)
 8009756:	6818      	ldr	r0, [r3, #0]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	4619      	mov	r1, r3
 8009762:	f7fe ff6b 	bl	800863c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009766:	f7ff f9ef 	bl	8008b48 <xTaskResumeAll>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009770:	4b09      	ldr	r3, [pc, #36]	@ (8009798 <prvProcessTimerOrBlockTask+0x98>)
 8009772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	f3bf 8f6f 	isb	sy
}
 8009780:	e001      	b.n	8009786 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009782:	f7ff f9e1 	bl	8008b48 <xTaskResumeAll>
}
 8009786:	bf00      	nop
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20007ac8 	.word	0x20007ac8
 8009794:	20007acc 	.word	0x20007acc
 8009798:	e000ed04 	.word	0xe000ed04

0800979c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097a4:	4b0e      	ldr	r3, [pc, #56]	@ (80097e0 <prvGetNextExpireTime+0x44>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d101      	bne.n	80097b2 <prvGetNextExpireTime+0x16>
 80097ae:	2201      	movs	r2, #1
 80097b0:	e000      	b.n	80097b4 <prvGetNextExpireTime+0x18>
 80097b2:	2200      	movs	r2, #0
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d105      	bne.n	80097cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097c0:	4b07      	ldr	r3, [pc, #28]	@ (80097e0 <prvGetNextExpireTime+0x44>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	e001      	b.n	80097d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097d0:	68fb      	ldr	r3, [r7, #12]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	20007ac4 	.word	0x20007ac4

080097e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097ec:	f7ff fa4a 	bl	8008c84 <xTaskGetTickCount>
 80097f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <prvSampleTimeNow+0x3c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d205      	bcs.n	8009808 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097fc:	f000 f93a 	bl	8009a74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	e002      	b.n	800980e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800980e:	4a04      	ldr	r2, [pc, #16]	@ (8009820 <prvSampleTimeNow+0x3c>)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009814:	68fb      	ldr	r3, [r7, #12]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20007ad4 	.word	0x20007ad4

08009824 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009832:	2300      	movs	r3, #0
 8009834:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	429a      	cmp	r2, r3
 8009848:	d812      	bhi.n	8009870 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	1ad2      	subs	r2, r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	429a      	cmp	r2, r3
 8009856:	d302      	bcc.n	800985e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009858:	2301      	movs	r3, #1
 800985a:	617b      	str	r3, [r7, #20]
 800985c:	e01b      	b.n	8009896 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800985e:	4b10      	ldr	r3, [pc, #64]	@ (80098a0 <prvInsertTimerInActiveList+0x7c>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3304      	adds	r3, #4
 8009866:	4619      	mov	r1, r3
 8009868:	4610      	mov	r0, r2
 800986a:	f7fe f9be 	bl	8007bea <vListInsert>
 800986e:	e012      	b.n	8009896 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d206      	bcs.n	8009886 <prvInsertTimerInActiveList+0x62>
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	429a      	cmp	r2, r3
 800987e:	d302      	bcc.n	8009886 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009880:	2301      	movs	r3, #1
 8009882:	617b      	str	r3, [r7, #20]
 8009884:	e007      	b.n	8009896 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009886:	4b07      	ldr	r3, [pc, #28]	@ (80098a4 <prvInsertTimerInActiveList+0x80>)
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3304      	adds	r3, #4
 800988e:	4619      	mov	r1, r3
 8009890:	4610      	mov	r0, r2
 8009892:	f7fe f9aa 	bl	8007bea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009896:	697b      	ldr	r3, [r7, #20]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	20007ac8 	.word	0x20007ac8
 80098a4:	20007ac4 	.word	0x20007ac4

080098a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08e      	sub	sp, #56	@ 0x38
 80098ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098ae:	e0ce      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	da19      	bge.n	80098ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098b6:	1d3b      	adds	r3, r7, #4
 80098b8:	3304      	adds	r3, #4
 80098ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10b      	bne.n	80098da <prvProcessReceivedCommands+0x32>
	__asm volatile
 80098c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c6:	f383 8811 	msr	BASEPRI, r3
 80098ca:	f3bf 8f6f 	isb	sy
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	61fb      	str	r3, [r7, #28]
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop
 80098d8:	e7fd      	b.n	80098d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098e0:	6850      	ldr	r0, [r2, #4]
 80098e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098e4:	6892      	ldr	r2, [r2, #8]
 80098e6:	4611      	mov	r1, r2
 80098e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f2c0 80ae 	blt.w	8009a4e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	3304      	adds	r3, #4
 8009902:	4618      	mov	r0, r3
 8009904:	f7fe f9aa 	bl	8007c5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009908:	463b      	mov	r3, r7
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff ff6a 	bl	80097e4 <prvSampleTimeNow>
 8009910:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b09      	cmp	r3, #9
 8009916:	f200 8097 	bhi.w	8009a48 <prvProcessReceivedCommands+0x1a0>
 800991a:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <prvProcessReceivedCommands+0x78>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009949 	.word	0x08009949
 8009924:	08009949 	.word	0x08009949
 8009928:	08009949 	.word	0x08009949
 800992c:	080099bf 	.word	0x080099bf
 8009930:	080099d3 	.word	0x080099d3
 8009934:	08009a1f 	.word	0x08009a1f
 8009938:	08009949 	.word	0x08009949
 800993c:	08009949 	.word	0x08009949
 8009940:	080099bf 	.word	0x080099bf
 8009944:	080099d3 	.word	0x080099d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	b2da      	uxtb	r2, r3
 8009954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009956:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	18d1      	adds	r1, r2, r3
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009968:	f7ff ff5c 	bl	8009824 <prvInsertTimerInActiveList>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d06c      	beq.n	8009a4c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009978:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800997a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009980:	f003 0304 	and.w	r3, r3, #4
 8009984:	2b00      	cmp	r3, #0
 8009986:	d061      	beq.n	8009a4c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	441a      	add	r2, r3
 8009990:	2300      	movs	r3, #0
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	2100      	movs	r1, #0
 8009998:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800999a:	f7ff fe01 	bl	80095a0 <xTimerGenericCommand>
 800999e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d152      	bne.n	8009a4c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80099a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	61bb      	str	r3, [r7, #24]
}
 80099b8:	bf00      	nop
 80099ba:	bf00      	nop
 80099bc:	e7fd      	b.n	80099ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c4:	f023 0301 	bic.w	r3, r3, #1
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099d0:	e03d      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099d8:	f043 0301 	orr.w	r3, r3, #1
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ec:	699b      	ldr	r3, [r3, #24]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10b      	bne.n	8009a0a <prvProcessReceivedCommands+0x162>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	617b      	str	r3, [r7, #20]
}
 8009a04:	bf00      	nop
 8009a06:	bf00      	nop
 8009a08:	e7fd      	b.n	8009a06 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0c:	699a      	ldr	r2, [r3, #24]
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a10:	18d1      	adds	r1, r2, r3
 8009a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a18:	f7ff ff04 	bl	8009824 <prvInsertTimerInActiveList>
					break;
 8009a1c:	e017      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d103      	bne.n	8009a34 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009a2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a2e:	f000 fbeb 	bl	800a208 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a32:	e00c      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a3a:	f023 0301 	bic.w	r3, r3, #1
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a46:	e002      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a48:	bf00      	nop
 8009a4a:	e000      	b.n	8009a4e <prvProcessReceivedCommands+0x1a6>
					break;
 8009a4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a4e:	4b08      	ldr	r3, [pc, #32]	@ (8009a70 <prvProcessReceivedCommands+0x1c8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	1d39      	adds	r1, r7, #4
 8009a54:	2200      	movs	r2, #0
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7fe fbd4 	bl	8008204 <xQueueReceive>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f47f af26 	bne.w	80098b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop
 8009a68:	3730      	adds	r7, #48	@ 0x30
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20007acc 	.word	0x20007acc

08009a74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b088      	sub	sp, #32
 8009a78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a7a:	e049      	b.n	8009b10 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a86:	4b2c      	ldr	r3, [pc, #176]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3304      	adds	r3, #4
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe f8e1 	bl	8007c5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009aa8:	f003 0304 	and.w	r3, r3, #4
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d02f      	beq.n	8009b10 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d90e      	bls.n	8009ae0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ace:	4b1a      	ldr	r3, [pc, #104]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	4610      	mov	r0, r2
 8009ada:	f7fe f886 	bl	8007bea <vListInsert>
 8009ade:	e017      	b.n	8009b10 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	2100      	movs	r1, #0
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f7ff fd58 	bl	80095a0 <xTimerGenericCommand>
 8009af0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10b      	bne.n	8009b10 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	603b      	str	r3, [r7, #0]
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b10:	4b09      	ldr	r3, [pc, #36]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1b0      	bne.n	8009a7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b1a:	4b07      	ldr	r3, [pc, #28]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b20:	4b06      	ldr	r3, [pc, #24]	@ (8009b3c <prvSwitchTimerLists+0xc8>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a04      	ldr	r2, [pc, #16]	@ (8009b38 <prvSwitchTimerLists+0xc4>)
 8009b26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b28:	4a04      	ldr	r2, [pc, #16]	@ (8009b3c <prvSwitchTimerLists+0xc8>)
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	6013      	str	r3, [r2, #0]
}
 8009b2e:	bf00      	nop
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20007ac4 	.word	0x20007ac4
 8009b3c:	20007ac8 	.word	0x20007ac8

08009b40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b46:	f000 f96f 	bl	8009e28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b4a:	4b15      	ldr	r3, [pc, #84]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d120      	bne.n	8009b94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b52:	4814      	ldr	r0, [pc, #80]	@ (8009ba4 <prvCheckForValidListAndQueue+0x64>)
 8009b54:	f7fd fff8 	bl	8007b48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b58:	4813      	ldr	r0, [pc, #76]	@ (8009ba8 <prvCheckForValidListAndQueue+0x68>)
 8009b5a:	f7fd fff5 	bl	8007b48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b5e:	4b13      	ldr	r3, [pc, #76]	@ (8009bac <prvCheckForValidListAndQueue+0x6c>)
 8009b60:	4a10      	ldr	r2, [pc, #64]	@ (8009ba4 <prvCheckForValidListAndQueue+0x64>)
 8009b62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b64:	4b12      	ldr	r3, [pc, #72]	@ (8009bb0 <prvCheckForValidListAndQueue+0x70>)
 8009b66:	4a10      	ldr	r2, [pc, #64]	@ (8009ba8 <prvCheckForValidListAndQueue+0x68>)
 8009b68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	4b11      	ldr	r3, [pc, #68]	@ (8009bb4 <prvCheckForValidListAndQueue+0x74>)
 8009b70:	4a11      	ldr	r2, [pc, #68]	@ (8009bb8 <prvCheckForValidListAndQueue+0x78>)
 8009b72:	2110      	movs	r1, #16
 8009b74:	200a      	movs	r0, #10
 8009b76:	f7fe f905 	bl	8007d84 <xQueueGenericCreateStatic>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	4a08      	ldr	r2, [pc, #32]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b80:	4b07      	ldr	r3, [pc, #28]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d005      	beq.n	8009b94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b88:	4b05      	ldr	r3, [pc, #20]	@ (8009ba0 <prvCheckForValidListAndQueue+0x60>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	490b      	ldr	r1, [pc, #44]	@ (8009bbc <prvCheckForValidListAndQueue+0x7c>)
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fe fd2a 	bl	80085e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b94:	f000 f97a 	bl	8009e8c <vPortExitCritical>
}
 8009b98:	bf00      	nop
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20007acc 	.word	0x20007acc
 8009ba4:	20007a9c 	.word	0x20007a9c
 8009ba8:	20007ab0 	.word	0x20007ab0
 8009bac:	20007ac4 	.word	0x20007ac4
 8009bb0:	20007ac8 	.word	0x20007ac8
 8009bb4:	20007b78 	.word	0x20007b78
 8009bb8:	20007ad8 	.word	0x20007ad8
 8009bbc:	0801b8c0 	.word	0x0801b8c0

08009bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3b04      	subs	r3, #4
 8009bd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3b04      	subs	r3, #4
 8009bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f023 0201 	bic.w	r2, r3, #1
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3b04      	subs	r3, #4
 8009bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8009c24 <pxPortInitialiseStack+0x64>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3b14      	subs	r3, #20
 8009bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3b04      	subs	r3, #4
 8009c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f06f 0202 	mvn.w	r2, #2
 8009c0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3b20      	subs	r3, #32
 8009c14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c16:	68fb      	ldr	r3, [r7, #12]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3714      	adds	r7, #20
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr
 8009c24:	08009c29 	.word	0x08009c29

08009c28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c32:	4b13      	ldr	r3, [pc, #76]	@ (8009c80 <prvTaskExitError+0x58>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c3a:	d00b      	beq.n	8009c54 <prvTaskExitError+0x2c>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	60fb      	str	r3, [r7, #12]
}
 8009c4e:	bf00      	nop
 8009c50:	bf00      	nop
 8009c52:	e7fd      	b.n	8009c50 <prvTaskExitError+0x28>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	60bb      	str	r3, [r7, #8]
}
 8009c66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c68:	bf00      	nop
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0fc      	beq.n	8009c6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	20000018 	.word	0x20000018
	...

08009c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c90:	4b07      	ldr	r3, [pc, #28]	@ (8009cb0 <pxCurrentTCBConst2>)
 8009c92:	6819      	ldr	r1, [r3, #0]
 8009c94:	6808      	ldr	r0, [r1, #0]
 8009c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	f380 8809 	msr	PSP, r0
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f04f 0000 	mov.w	r0, #0
 8009ca6:	f380 8811 	msr	BASEPRI, r0
 8009caa:	4770      	bx	lr
 8009cac:	f3af 8000 	nop.w

08009cb0 <pxCurrentTCBConst2>:
 8009cb0:	2000759c 	.word	0x2000759c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop

08009cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cb8:	4808      	ldr	r0, [pc, #32]	@ (8009cdc <prvPortStartFirstTask+0x24>)
 8009cba:	6800      	ldr	r0, [r0, #0]
 8009cbc:	6800      	ldr	r0, [r0, #0]
 8009cbe:	f380 8808 	msr	MSP, r0
 8009cc2:	f04f 0000 	mov.w	r0, #0
 8009cc6:	f380 8814 	msr	CONTROL, r0
 8009cca:	b662      	cpsie	i
 8009ccc:	b661      	cpsie	f
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	df00      	svc	0
 8009cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cda:	bf00      	nop
 8009cdc:	e000ed08 	.word	0xe000ed08

08009ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ce6:	4b47      	ldr	r3, [pc, #284]	@ (8009e04 <xPortStartScheduler+0x124>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a47      	ldr	r2, [pc, #284]	@ (8009e08 <xPortStartScheduler+0x128>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d10b      	bne.n	8009d08 <xPortStartScheduler+0x28>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	60fb      	str	r3, [r7, #12]
}
 8009d02:	bf00      	nop
 8009d04:	bf00      	nop
 8009d06:	e7fd      	b.n	8009d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d08:	4b3e      	ldr	r3, [pc, #248]	@ (8009e04 <xPortStartScheduler+0x124>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a3f      	ldr	r2, [pc, #252]	@ (8009e0c <xPortStartScheduler+0x12c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d10b      	bne.n	8009d2a <xPortStartScheduler+0x4a>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	613b      	str	r3, [r7, #16]
}
 8009d24:	bf00      	nop
 8009d26:	bf00      	nop
 8009d28:	e7fd      	b.n	8009d26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d2a:	4b39      	ldr	r3, [pc, #228]	@ (8009e10 <xPortStartScheduler+0x130>)
 8009d2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	22ff      	movs	r2, #255	@ 0xff
 8009d3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d44:	78fb      	ldrb	r3, [r7, #3]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d4c:	b2da      	uxtb	r2, r3
 8009d4e:	4b31      	ldr	r3, [pc, #196]	@ (8009e14 <xPortStartScheduler+0x134>)
 8009d50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d52:	4b31      	ldr	r3, [pc, #196]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d54:	2207      	movs	r2, #7
 8009d56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d58:	e009      	b.n	8009d6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	4a2d      	ldr	r2, [pc, #180]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d64:	78fb      	ldrb	r3, [r7, #3]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	005b      	lsls	r3, r3, #1
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d6e:	78fb      	ldrb	r3, [r7, #3]
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d76:	2b80      	cmp	r3, #128	@ 0x80
 8009d78:	d0ef      	beq.n	8009d5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d7a:	4b27      	ldr	r3, [pc, #156]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f1c3 0307 	rsb	r3, r3, #7
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d00b      	beq.n	8009d9e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60bb      	str	r3, [r7, #8]
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	4a1c      	ldr	r2, [pc, #112]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009da6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009da8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009db0:	4a19      	ldr	r2, [pc, #100]	@ (8009e18 <xPortStartScheduler+0x138>)
 8009db2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	b2da      	uxtb	r2, r3
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dbc:	4b17      	ldr	r3, [pc, #92]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a16      	ldr	r2, [pc, #88]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dc2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009dc6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009dc8:	4b14      	ldr	r3, [pc, #80]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a13      	ldr	r2, [pc, #76]	@ (8009e1c <xPortStartScheduler+0x13c>)
 8009dce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009dd2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dd4:	f000 f8da 	bl	8009f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009dd8:	4b11      	ldr	r3, [pc, #68]	@ (8009e20 <xPortStartScheduler+0x140>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dde:	f000 f8f9 	bl	8009fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009de2:	4b10      	ldr	r3, [pc, #64]	@ (8009e24 <xPortStartScheduler+0x144>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a0f      	ldr	r2, [pc, #60]	@ (8009e24 <xPortStartScheduler+0x144>)
 8009de8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009dec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dee:	f7ff ff63 	bl	8009cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009df2:	f7ff f811 	bl	8008e18 <vTaskSwitchContext>
	prvTaskExitError();
 8009df6:	f7ff ff17 	bl	8009c28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	e000ed00 	.word	0xe000ed00
 8009e08:	410fc271 	.word	0x410fc271
 8009e0c:	410fc270 	.word	0x410fc270
 8009e10:	e000e400 	.word	0xe000e400
 8009e14:	20007bc8 	.word	0x20007bc8
 8009e18:	20007bcc 	.word	0x20007bcc
 8009e1c:	e000ed20 	.word	0xe000ed20
 8009e20:	20000018 	.word	0x20000018
 8009e24:	e000ef34 	.word	0xe000ef34

08009e28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	607b      	str	r3, [r7, #4]
}
 8009e40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e42:	4b10      	ldr	r3, [pc, #64]	@ (8009e84 <vPortEnterCritical+0x5c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3301      	adds	r3, #1
 8009e48:	4a0e      	ldr	r2, [pc, #56]	@ (8009e84 <vPortEnterCritical+0x5c>)
 8009e4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e84 <vPortEnterCritical+0x5c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d110      	bne.n	8009e76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e54:	4b0c      	ldr	r3, [pc, #48]	@ (8009e88 <vPortEnterCritical+0x60>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00b      	beq.n	8009e76 <vPortEnterCritical+0x4e>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	603b      	str	r3, [r7, #0]
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	e7fd      	b.n	8009e72 <vPortEnterCritical+0x4a>
	}
}
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	20000018 	.word	0x20000018
 8009e88:	e000ed04 	.word	0xe000ed04

08009e8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e92:	4b12      	ldr	r3, [pc, #72]	@ (8009edc <vPortExitCritical+0x50>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10b      	bne.n	8009eb2 <vPortExitCritical+0x26>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	607b      	str	r3, [r7, #4]
}
 8009eac:	bf00      	nop
 8009eae:	bf00      	nop
 8009eb0:	e7fd      	b.n	8009eae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009edc <vPortExitCritical+0x50>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	4a08      	ldr	r2, [pc, #32]	@ (8009edc <vPortExitCritical+0x50>)
 8009eba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ebc:	4b07      	ldr	r3, [pc, #28]	@ (8009edc <vPortExitCritical+0x50>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d105      	bne.n	8009ed0 <vPortExitCritical+0x44>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	f383 8811 	msr	BASEPRI, r3
}
 8009ece:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	20000018 	.word	0x20000018

08009ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ee0:	f3ef 8009 	mrs	r0, PSP
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	4b15      	ldr	r3, [pc, #84]	@ (8009f40 <pxCurrentTCBConst>)
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	f01e 0f10 	tst.w	lr, #16
 8009ef0:	bf08      	it	eq
 8009ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efa:	6010      	str	r0, [r2, #0]
 8009efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009f04:	f380 8811 	msr	BASEPRI, r0
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f7fe ff82 	bl	8008e18 <vTaskSwitchContext>
 8009f14:	f04f 0000 	mov.w	r0, #0
 8009f18:	f380 8811 	msr	BASEPRI, r0
 8009f1c:	bc09      	pop	{r0, r3}
 8009f1e:	6819      	ldr	r1, [r3, #0]
 8009f20:	6808      	ldr	r0, [r1, #0]
 8009f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f26:	f01e 0f10 	tst.w	lr, #16
 8009f2a:	bf08      	it	eq
 8009f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f30:	f380 8809 	msr	PSP, r0
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	f3af 8000 	nop.w

08009f40 <pxCurrentTCBConst>:
 8009f40:	2000759c 	.word	0x2000759c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop

08009f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	607b      	str	r3, [r7, #4]
}
 8009f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f62:	f7fe fe9f 	bl	8008ca4 <xTaskIncrementTick>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f6c:	4b06      	ldr	r3, [pc, #24]	@ (8009f88 <xPortSysTickHandler+0x40>)
 8009f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	2300      	movs	r3, #0
 8009f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	f383 8811 	msr	BASEPRI, r3
}
 8009f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f90:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc0 <vPortSetupTimerInterrupt+0x34>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f96:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc4 <vPortSetupTimerInterrupt+0x38>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc8 <vPortSetupTimerInterrupt+0x3c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8009fcc <vPortSetupTimerInterrupt+0x40>)
 8009fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa6:	099b      	lsrs	r3, r3, #6
 8009fa8:	4a09      	ldr	r2, [pc, #36]	@ (8009fd0 <vPortSetupTimerInterrupt+0x44>)
 8009faa:	3b01      	subs	r3, #1
 8009fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fae:	4b04      	ldr	r3, [pc, #16]	@ (8009fc0 <vPortSetupTimerInterrupt+0x34>)
 8009fb0:	2207      	movs	r2, #7
 8009fb2:	601a      	str	r2, [r3, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	e000e010 	.word	0xe000e010
 8009fc4:	e000e018 	.word	0xe000e018
 8009fc8:	2000000c 	.word	0x2000000c
 8009fcc:	10624dd3 	.word	0x10624dd3
 8009fd0:	e000e014 	.word	0xe000e014

08009fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009fe4 <vPortEnableVFP+0x10>
 8009fd8:	6801      	ldr	r1, [r0, #0]
 8009fda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009fde:	6001      	str	r1, [r0, #0]
 8009fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fe2:	bf00      	nop
 8009fe4:	e000ed88 	.word	0xe000ed88

08009fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fee:	f3ef 8305 	mrs	r3, IPSR
 8009ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2b0f      	cmp	r3, #15
 8009ff8:	d915      	bls.n	800a026 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ffa:	4a18      	ldr	r2, [pc, #96]	@ (800a05c <vPortValidateInterruptPriority+0x74>)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	4413      	add	r3, r2
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a004:	4b16      	ldr	r3, [pc, #88]	@ (800a060 <vPortValidateInterruptPriority+0x78>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	7afa      	ldrb	r2, [r7, #11]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d20b      	bcs.n	800a026 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	607b      	str	r3, [r7, #4]
}
 800a020:	bf00      	nop
 800a022:	bf00      	nop
 800a024:	e7fd      	b.n	800a022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a026:	4b0f      	ldr	r3, [pc, #60]	@ (800a064 <vPortValidateInterruptPriority+0x7c>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a02e:	4b0e      	ldr	r3, [pc, #56]	@ (800a068 <vPortValidateInterruptPriority+0x80>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d90b      	bls.n	800a04e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	603b      	str	r3, [r7, #0]
}
 800a048:	bf00      	nop
 800a04a:	bf00      	nop
 800a04c:	e7fd      	b.n	800a04a <vPortValidateInterruptPriority+0x62>
	}
 800a04e:	bf00      	nop
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	e000e3f0 	.word	0xe000e3f0
 800a060:	20007bc8 	.word	0x20007bc8
 800a064:	e000ed0c 	.word	0xe000ed0c
 800a068:	20007bcc 	.word	0x20007bcc

0800a06c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b08a      	sub	sp, #40	@ 0x28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a074:	2300      	movs	r3, #0
 800a076:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a078:	f7fe fd58 	bl	8008b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a07c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1f0 <pvPortMalloc+0x184>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a084:	f000 f924 	bl	800a2d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a088:	4b5a      	ldr	r3, [pc, #360]	@ (800a1f4 <pvPortMalloc+0x188>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4013      	ands	r3, r2
 800a090:	2b00      	cmp	r3, #0
 800a092:	f040 8095 	bne.w	800a1c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01e      	beq.n	800a0da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a09c:	2208      	movs	r2, #8
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d015      	beq.n	800a0da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f023 0307 	bic.w	r3, r3, #7
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f003 0307 	and.w	r3, r3, #7
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00b      	beq.n	800a0da <pvPortMalloc+0x6e>
	__asm volatile
 800a0c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	617b      	str	r3, [r7, #20]
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop
 800a0d8:	e7fd      	b.n	800a0d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d06f      	beq.n	800a1c0 <pvPortMalloc+0x154>
 800a0e0:	4b45      	ldr	r3, [pc, #276]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d86a      	bhi.n	800a1c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0ea:	4b44      	ldr	r3, [pc, #272]	@ (800a1fc <pvPortMalloc+0x190>)
 800a0ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0ee:	4b43      	ldr	r3, [pc, #268]	@ (800a1fc <pvPortMalloc+0x190>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0f4:	e004      	b.n	800a100 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	429a      	cmp	r2, r3
 800a108:	d903      	bls.n	800a112 <pvPortMalloc+0xa6>
 800a10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1f1      	bne.n	800a0f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a112:	4b37      	ldr	r3, [pc, #220]	@ (800a1f0 <pvPortMalloc+0x184>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a118:	429a      	cmp	r2, r3
 800a11a:	d051      	beq.n	800a1c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2208      	movs	r2, #8
 800a122:	4413      	add	r3, r2
 800a124:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a130:	685a      	ldr	r2, [r3, #4]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	1ad2      	subs	r2, r2, r3
 800a136:	2308      	movs	r3, #8
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d920      	bls.n	800a180 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a13e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4413      	add	r3, r2
 800a144:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <pvPortMalloc+0xfc>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	613b      	str	r3, [r7, #16]
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a17a:	69b8      	ldr	r0, [r7, #24]
 800a17c:	f000 f90a 	bl	800a394 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a180:	4b1d      	ldr	r3, [pc, #116]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a18c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a18e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	4b1b      	ldr	r3, [pc, #108]	@ (800a200 <pvPortMalloc+0x194>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d203      	bcs.n	800a1a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a19a:	4b17      	ldr	r3, [pc, #92]	@ (800a1f8 <pvPortMalloc+0x18c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a18      	ldr	r2, [pc, #96]	@ (800a200 <pvPortMalloc+0x194>)
 800a1a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	4b13      	ldr	r3, [pc, #76]	@ (800a1f4 <pvPortMalloc+0x188>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1b6:	4b13      	ldr	r3, [pc, #76]	@ (800a204 <pvPortMalloc+0x198>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	4a11      	ldr	r2, [pc, #68]	@ (800a204 <pvPortMalloc+0x198>)
 800a1be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1c0:	f7fe fcc2 	bl	8008b48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00b      	beq.n	800a1e6 <pvPortMalloc+0x17a>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	60fb      	str	r3, [r7, #12]
}
 800a1e0:	bf00      	nop
 800a1e2:	bf00      	nop
 800a1e4:	e7fd      	b.n	800a1e2 <pvPortMalloc+0x176>
	return pvReturn;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3728      	adds	r7, #40	@ 0x28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	2000b7d8 	.word	0x2000b7d8
 800a1f4:	2000b7ec 	.word	0x2000b7ec
 800a1f8:	2000b7dc 	.word	0x2000b7dc
 800a1fc:	2000b7d0 	.word	0x2000b7d0
 800a200:	2000b7e0 	.word	0x2000b7e0
 800a204:	2000b7e4 	.word	0x2000b7e4

0800a208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d04f      	beq.n	800a2ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a21a:	2308      	movs	r3, #8
 800a21c:	425b      	negs	r3, r3
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	4413      	add	r3, r2
 800a222:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	4b25      	ldr	r3, [pc, #148]	@ (800a2c4 <vPortFree+0xbc>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4013      	ands	r3, r2
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10b      	bne.n	800a24e <vPortFree+0x46>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	60fb      	str	r3, [r7, #12]
}
 800a248:	bf00      	nop
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00b      	beq.n	800a26e <vPortFree+0x66>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	60bb      	str	r3, [r7, #8]
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	e7fd      	b.n	800a26a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	4b14      	ldr	r3, [pc, #80]	@ (800a2c4 <vPortFree+0xbc>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4013      	ands	r3, r2
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01e      	beq.n	800a2ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d11a      	bne.n	800a2ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c4 <vPortFree+0xbc>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	43db      	mvns	r3, r3
 800a28e:	401a      	ands	r2, r3
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a294:	f7fe fc4a 	bl	8008b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c8 <vPortFree+0xc0>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	4a09      	ldr	r2, [pc, #36]	@ (800a2c8 <vPortFree+0xc0>)
 800a2a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2a6:	6938      	ldr	r0, [r7, #16]
 800a2a8:	f000 f874 	bl	800a394 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2ac:	4b07      	ldr	r3, [pc, #28]	@ (800a2cc <vPortFree+0xc4>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	4a06      	ldr	r2, [pc, #24]	@ (800a2cc <vPortFree+0xc4>)
 800a2b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2b6:	f7fe fc47 	bl	8008b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2ba:	bf00      	nop
 800a2bc:	3718      	adds	r7, #24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	2000b7ec 	.word	0x2000b7ec
 800a2c8:	2000b7dc 	.word	0x2000b7dc
 800a2cc:	2000b7e8 	.word	0x2000b7e8

0800a2d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a2da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2dc:	4b27      	ldr	r3, [pc, #156]	@ (800a37c <prvHeapInit+0xac>)
 800a2de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00c      	beq.n	800a304 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3307      	adds	r3, #7
 800a2ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f023 0307 	bic.w	r3, r3, #7
 800a2f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a37c <prvHeapInit+0xac>)
 800a300:	4413      	add	r3, r2
 800a302:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a308:	4a1d      	ldr	r2, [pc, #116]	@ (800a380 <prvHeapInit+0xb0>)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a30e:	4b1c      	ldr	r3, [pc, #112]	@ (800a380 <prvHeapInit+0xb0>)
 800a310:	2200      	movs	r2, #0
 800a312:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	4413      	add	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a31c:	2208      	movs	r2, #8
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	1a9b      	subs	r3, r3, r2
 800a322:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f023 0307 	bic.w	r3, r3, #7
 800a32a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4a15      	ldr	r2, [pc, #84]	@ (800a384 <prvHeapInit+0xb4>)
 800a330:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a332:	4b14      	ldr	r3, [pc, #80]	@ (800a384 <prvHeapInit+0xb4>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2200      	movs	r2, #0
 800a338:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a33a:	4b12      	ldr	r3, [pc, #72]	@ (800a384 <prvHeapInit+0xb4>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	1ad2      	subs	r2, r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a350:	4b0c      	ldr	r3, [pc, #48]	@ (800a384 <prvHeapInit+0xb4>)
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	4a0a      	ldr	r2, [pc, #40]	@ (800a388 <prvHeapInit+0xb8>)
 800a35e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	4a09      	ldr	r2, [pc, #36]	@ (800a38c <prvHeapInit+0xbc>)
 800a366:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a368:	4b09      	ldr	r3, [pc, #36]	@ (800a390 <prvHeapInit+0xc0>)
 800a36a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a36e:	601a      	str	r2, [r3, #0]
}
 800a370:	bf00      	nop
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	20007bd0 	.word	0x20007bd0
 800a380:	2000b7d0 	.word	0x2000b7d0
 800a384:	2000b7d8 	.word	0x2000b7d8
 800a388:	2000b7e0 	.word	0x2000b7e0
 800a38c:	2000b7dc 	.word	0x2000b7dc
 800a390:	2000b7ec 	.word	0x2000b7ec

0800a394 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a39c:	4b28      	ldr	r3, [pc, #160]	@ (800a440 <prvInsertBlockIntoFreeList+0xac>)
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	e002      	b.n	800a3a8 <prvInsertBlockIntoFreeList+0x14>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	60fb      	str	r3, [r7, #12]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d8f7      	bhi.n	800a3a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	4413      	add	r3, r2
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d108      	bne.n	800a3d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	441a      	add	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	441a      	add	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d118      	bne.n	800a41c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	4b15      	ldr	r3, [pc, #84]	@ (800a444 <prvInsertBlockIntoFreeList+0xb0>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d00d      	beq.n	800a412 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	441a      	add	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	e008      	b.n	800a424 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a412:	4b0c      	ldr	r3, [pc, #48]	@ (800a444 <prvInsertBlockIntoFreeList+0xb0>)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	e003      	b.n	800a424 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d002      	beq.n	800a432 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a432:	bf00      	nop
 800a434:	3714      	adds	r7, #20
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr
 800a43e:	bf00      	nop
 800a440:	2000b7d0 	.word	0x2000b7d0
 800a444:	2000b7d8 	.word	0x2000b7d8

0800a448 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a448:	4b04      	ldr	r3, [pc, #16]	@ (800a45c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	b10a      	cbz	r2, 800a452 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800a44e:	4803      	ldr	r0, [pc, #12]	@ (800a45c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a450:	4770      	bx	lr
 800a452:	4a03      	ldr	r2, [pc, #12]	@ (800a460 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800a454:	4801      	ldr	r0, [pc, #4]	@ (800a45c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	4770      	bx	lr
 800a45c:	2000001c 	.word	0x2000001c
 800a460:	20000370 	.word	0x20000370

0800a464 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a464:	4a02      	ldr	r2, [pc, #8]	@ (800a470 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800a466:	4b03      	ldr	r3, [pc, #12]	@ (800a474 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800a468:	6812      	ldr	r2, [r2, #0]
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	20000370 	.word	0x20000370
 800a474:	2000001c 	.word	0x2000001c

0800a478 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800a478:	f003 be60 	b.w	800e13c <geometry_msgs__msg__Twist__init>

0800a47c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800a47c:	f003 be7e 	b.w	800e17c <geometry_msgs__msg__Twist__fini>

0800a480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a480:	b510      	push	{r4, lr}
 800a482:	f000 f819 	bl	800a4b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a486:	4c07      	ldr	r4, [pc, #28]	@ (800a4a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800a488:	60e0      	str	r0, [r4, #12]
 800a48a:	f000 f815 	bl	800a4b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a48e:	4b06      	ldr	r3, [pc, #24]	@ (800a4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a490:	64a0      	str	r0, [r4, #72]	@ 0x48
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	b10a      	cbz	r2, 800a49a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800a496:	4804      	ldr	r0, [pc, #16]	@ (800a4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a498:	bd10      	pop	{r4, pc}
 800a49a:	4a04      	ldr	r2, [pc, #16]	@ (800a4ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800a49c:	4802      	ldr	r0, [pc, #8]	@ (800a4a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	601a      	str	r2, [r3, #0]
 800a4a2:	bd10      	pop	{r4, pc}
 800a4a4:	20000054 	.word	0x20000054
 800a4a8:	2000003c 	.word	0x2000003c
 800a4ac:	20000374 	.word	0x20000374

0800a4b0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800a4b0:	f003 bea0 	b.w	800e1f4 <geometry_msgs__msg__Vector3__init>

0800a4b4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800a4b4:	f003 bea2 	b.w	800e1fc <geometry_msgs__msg__Vector3__fini>

0800a4b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a4b8:	4b04      	ldr	r3, [pc, #16]	@ (800a4cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	b10a      	cbz	r2, 800a4c2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800a4be:	4803      	ldr	r0, [pc, #12]	@ (800a4cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a4c0:	4770      	bx	lr
 800a4c2:	4a03      	ldr	r2, [pc, #12]	@ (800a4d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800a4c4:	4801      	ldr	r0, [pc, #4]	@ (800a4cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800a4c6:	6812      	ldr	r2, [r2, #0]
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	4770      	bx	lr
 800a4cc:	200000cc 	.word	0x200000cc
 800a4d0:	20000374 	.word	0x20000374

0800a4d4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	b148      	cbz	r0, 800a4ee <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800a4da:	460d      	mov	r5, r1
 800a4dc:	f000 f86a 	bl	800a5b4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	1829      	adds	r1, r5, r0
 800a4e4:	f104 0018 	add.w	r0, r4, #24
 800a4e8:	f000 f864 	bl	800a5b4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a4ec:	4430      	add	r0, r6
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}

0800a4f0 <_Twist__cdr_deserialize>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	b189      	cbz	r1, 800a51a <_Twist__cdr_deserialize+0x2a>
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	f000 f8e8 	bl	800a6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a4fc:	6843      	ldr	r3, [r0, #4]
 800a4fe:	4621      	mov	r1, r4
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	4628      	mov	r0, r5
 800a504:	4798      	blx	r3
 800a506:	f000 f8e1 	bl	800a6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a50a:	6843      	ldr	r3, [r0, #4]
 800a50c:	f104 0118 	add.w	r1, r4, #24
 800a510:	4628      	mov	r0, r5
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a518:	4718      	bx	r3
 800a51a:	4608      	mov	r0, r1
 800a51c:	bd70      	pop	{r4, r5, r6, pc}
 800a51e:	bf00      	nop

0800a520 <_Twist__cdr_serialize>:
 800a520:	b198      	cbz	r0, 800a54a <_Twist__cdr_serialize+0x2a>
 800a522:	b570      	push	{r4, r5, r6, lr}
 800a524:	460d      	mov	r5, r1
 800a526:	4604      	mov	r4, r0
 800a528:	f000 f8d0 	bl	800a6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a52c:	6843      	ldr	r3, [r0, #4]
 800a52e:	4629      	mov	r1, r5
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	4620      	mov	r0, r4
 800a534:	4798      	blx	r3
 800a536:	f000 f8c9 	bl	800a6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800a53a:	6843      	ldr	r3, [r0, #4]
 800a53c:	4629      	mov	r1, r5
 800a53e:	f104 0018 	add.w	r0, r4, #24
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a548:	4718      	bx	r3
 800a54a:	4770      	bx	lr

0800a54c <_Twist__get_serialized_size>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4604      	mov	r4, r0
 800a550:	b148      	cbz	r0, 800a566 <_Twist__get_serialized_size+0x1a>
 800a552:	2100      	movs	r1, #0
 800a554:	f000 f82e 	bl	800a5b4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a558:	4605      	mov	r5, r0
 800a55a:	4601      	mov	r1, r0
 800a55c:	f104 0018 	add.w	r0, r4, #24
 800a560:	f000 f828 	bl	800a5b4 <get_serialized_size_geometry_msgs__msg__Vector3>
 800a564:	4428      	add	r0, r5
 800a566:	bd38      	pop	{r3, r4, r5, pc}

0800a568 <_Twist__max_serialized_size>:
 800a568:	b510      	push	{r4, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	2301      	movs	r3, #1
 800a56e:	2100      	movs	r1, #0
 800a570:	f10d 0007 	add.w	r0, sp, #7
 800a574:	f88d 3007 	strb.w	r3, [sp, #7]
 800a578:	f000 f88e 	bl	800a698 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a57c:	4604      	mov	r4, r0
 800a57e:	4601      	mov	r1, r0
 800a580:	f10d 0007 	add.w	r0, sp, #7
 800a584:	f000 f888 	bl	800a698 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a588:	4420      	add	r0, r4
 800a58a:	b002      	add	sp, #8
 800a58c:	bd10      	pop	{r4, pc}
 800a58e:	bf00      	nop

0800a590 <max_serialized_size_geometry_msgs__msg__Twist>:
 800a590:	2301      	movs	r3, #1
 800a592:	b570      	push	{r4, r5, r6, lr}
 800a594:	7003      	strb	r3, [r0, #0]
 800a596:	4605      	mov	r5, r0
 800a598:	460e      	mov	r6, r1
 800a59a:	f000 f87d 	bl	800a698 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a59e:	4604      	mov	r4, r0
 800a5a0:	1831      	adds	r1, r6, r0
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	f000 f878 	bl	800a698 <max_serialized_size_geometry_msgs__msg__Vector3>
 800a5a8:	4420      	add	r0, r4
 800a5aa:	bd70      	pop	{r4, r5, r6, pc}

0800a5ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800a5ac:	4800      	ldr	r0, [pc, #0]	@ (800a5b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800a5ae:	4770      	bx	lr
 800a5b0:	20000198 	.word	0x20000198

0800a5b4 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800a5b4:	b1b8      	cbz	r0, 800a5e6 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800a5b6:	b570      	push	{r4, r5, r6, lr}
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	2108      	movs	r1, #8
 800a5be:	f001 fb7b 	bl	800bcb8 <ucdr_alignment>
 800a5c2:	2108      	movs	r1, #8
 800a5c4:	186e      	adds	r6, r5, r1
 800a5c6:	4406      	add	r6, r0
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f001 fb75 	bl	800bcb8 <ucdr_alignment>
 800a5ce:	f100 0408 	add.w	r4, r0, #8
 800a5d2:	4434      	add	r4, r6
 800a5d4:	2108      	movs	r1, #8
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f001 fb6e 	bl	800bcb8 <ucdr_alignment>
 800a5dc:	f1c5 0508 	rsb	r5, r5, #8
 800a5e0:	4405      	add	r5, r0
 800a5e2:	1928      	adds	r0, r5, r4
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
 800a5e6:	4770      	bx	lr

0800a5e8 <_Vector3__cdr_deserialize>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	b171      	cbz	r1, 800a60c <_Vector3__cdr_deserialize+0x24>
 800a5ee:	4605      	mov	r5, r0
 800a5f0:	f001 f984 	bl	800b8fc <ucdr_deserialize_double>
 800a5f4:	f104 0108 	add.w	r1, r4, #8
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f001 f97f 	bl	800b8fc <ucdr_deserialize_double>
 800a5fe:	f104 0110 	add.w	r1, r4, #16
 800a602:	4628      	mov	r0, r5
 800a604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a608:	f001 b978 	b.w	800b8fc <ucdr_deserialize_double>
 800a60c:	4608      	mov	r0, r1
 800a60e:	bd38      	pop	{r3, r4, r5, pc}

0800a610 <_Vector3__cdr_serialize>:
 800a610:	b198      	cbz	r0, 800a63a <_Vector3__cdr_serialize+0x2a>
 800a612:	b538      	push	{r3, r4, r5, lr}
 800a614:	ed90 0b00 	vldr	d0, [r0]
 800a618:	460d      	mov	r5, r1
 800a61a:	4604      	mov	r4, r0
 800a61c:	4608      	mov	r0, r1
 800a61e:	f000 ffdd 	bl	800b5dc <ucdr_serialize_double>
 800a622:	ed94 0b02 	vldr	d0, [r4, #8]
 800a626:	4628      	mov	r0, r5
 800a628:	f000 ffd8 	bl	800b5dc <ucdr_serialize_double>
 800a62c:	ed94 0b04 	vldr	d0, [r4, #16]
 800a630:	4628      	mov	r0, r5
 800a632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a636:	f000 bfd1 	b.w	800b5dc <ucdr_serialize_double>
 800a63a:	4770      	bx	lr

0800a63c <_Vector3__get_serialized_size>:
 800a63c:	b1a0      	cbz	r0, 800a668 <_Vector3__get_serialized_size+0x2c>
 800a63e:	b538      	push	{r3, r4, r5, lr}
 800a640:	2108      	movs	r1, #8
 800a642:	2000      	movs	r0, #0
 800a644:	f001 fb38 	bl	800bcb8 <ucdr_alignment>
 800a648:	f100 0508 	add.w	r5, r0, #8
 800a64c:	2108      	movs	r1, #8
 800a64e:	4628      	mov	r0, r5
 800a650:	f001 fb32 	bl	800bcb8 <ucdr_alignment>
 800a654:	f100 0408 	add.w	r4, r0, #8
 800a658:	442c      	add	r4, r5
 800a65a:	2108      	movs	r1, #8
 800a65c:	4620      	mov	r0, r4
 800a65e:	f001 fb2b 	bl	800bcb8 <ucdr_alignment>
 800a662:	3008      	adds	r0, #8
 800a664:	4420      	add	r0, r4
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	4770      	bx	lr
 800a66a:	bf00      	nop

0800a66c <_Vector3__max_serialized_size>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	2108      	movs	r1, #8
 800a670:	2000      	movs	r0, #0
 800a672:	f001 fb21 	bl	800bcb8 <ucdr_alignment>
 800a676:	f100 0508 	add.w	r5, r0, #8
 800a67a:	2108      	movs	r1, #8
 800a67c:	4628      	mov	r0, r5
 800a67e:	f001 fb1b 	bl	800bcb8 <ucdr_alignment>
 800a682:	f100 0408 	add.w	r4, r0, #8
 800a686:	442c      	add	r4, r5
 800a688:	2108      	movs	r1, #8
 800a68a:	4620      	mov	r0, r4
 800a68c:	f001 fb14 	bl	800bcb8 <ucdr_alignment>
 800a690:	3008      	adds	r0, #8
 800a692:	4420      	add	r0, r4
 800a694:	bd38      	pop	{r3, r4, r5, pc}
 800a696:	bf00      	nop

0800a698 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800a698:	b570      	push	{r4, r5, r6, lr}
 800a69a:	2301      	movs	r3, #1
 800a69c:	460c      	mov	r4, r1
 800a69e:	7003      	strb	r3, [r0, #0]
 800a6a0:	2108      	movs	r1, #8
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f001 fb08 	bl	800bcb8 <ucdr_alignment>
 800a6a8:	2108      	movs	r1, #8
 800a6aa:	1863      	adds	r3, r4, r1
 800a6ac:	18c6      	adds	r6, r0, r3
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f001 fb02 	bl	800bcb8 <ucdr_alignment>
 800a6b4:	f100 0508 	add.w	r5, r0, #8
 800a6b8:	4435      	add	r5, r6
 800a6ba:	2108      	movs	r1, #8
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f001 fafb 	bl	800bcb8 <ucdr_alignment>
 800a6c2:	f1c4 0408 	rsb	r4, r4, #8
 800a6c6:	4420      	add	r0, r4
 800a6c8:	4428      	add	r0, r5
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}

0800a6cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800a6cc:	4800      	ldr	r0, [pc, #0]	@ (800a6d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800a6ce:	4770      	bx	lr
 800a6d0:	200001cc 	.word	0x200001cc

0800a6d4 <ucdr_serialize_bool>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	2101      	movs	r1, #1
 800a6da:	4604      	mov	r4, r0
 800a6dc:	f001 faa0 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800a6e0:	b148      	cbz	r0, 800a6f6 <ucdr_serialize_bool+0x22>
 800a6e2:	68a3      	ldr	r3, [r4, #8]
 800a6e4:	701d      	strb	r5, [r3, #0]
 800a6e6:	68a2      	ldr	r2, [r4, #8]
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	440a      	add	r2, r1
 800a6ee:	440b      	add	r3, r1
 800a6f0:	60a2      	str	r2, [r4, #8]
 800a6f2:	6123      	str	r3, [r4, #16]
 800a6f4:	7561      	strb	r1, [r4, #21]
 800a6f6:	7da0      	ldrb	r0, [r4, #22]
 800a6f8:	f080 0001 	eor.w	r0, r0, #1
 800a6fc:	bd38      	pop	{r3, r4, r5, pc}
 800a6fe:	bf00      	nop

0800a700 <ucdr_deserialize_bool>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	460d      	mov	r5, r1
 800a704:	2101      	movs	r1, #1
 800a706:	4604      	mov	r4, r0
 800a708:	f001 fa8a 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800a70c:	b160      	cbz	r0, 800a728 <ucdr_deserialize_bool+0x28>
 800a70e:	68a2      	ldr	r2, [r4, #8]
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a716:	3900      	subs	r1, #0
 800a718:	bf18      	it	ne
 800a71a:	2101      	movne	r1, #1
 800a71c:	7029      	strb	r1, [r5, #0]
 800a71e:	3301      	adds	r3, #1
 800a720:	2101      	movs	r1, #1
 800a722:	60a2      	str	r2, [r4, #8]
 800a724:	6123      	str	r3, [r4, #16]
 800a726:	7561      	strb	r1, [r4, #21]
 800a728:	7da0      	ldrb	r0, [r4, #22]
 800a72a:	f080 0001 	eor.w	r0, r0, #1
 800a72e:	bd38      	pop	{r3, r4, r5, pc}

0800a730 <ucdr_serialize_uint8_t>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	460d      	mov	r5, r1
 800a734:	2101      	movs	r1, #1
 800a736:	4604      	mov	r4, r0
 800a738:	f001 fa72 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800a73c:	b148      	cbz	r0, 800a752 <ucdr_serialize_uint8_t+0x22>
 800a73e:	68a3      	ldr	r3, [r4, #8]
 800a740:	701d      	strb	r5, [r3, #0]
 800a742:	68a2      	ldr	r2, [r4, #8]
 800a744:	6923      	ldr	r3, [r4, #16]
 800a746:	2101      	movs	r1, #1
 800a748:	440a      	add	r2, r1
 800a74a:	440b      	add	r3, r1
 800a74c:	60a2      	str	r2, [r4, #8]
 800a74e:	6123      	str	r3, [r4, #16]
 800a750:	7561      	strb	r1, [r4, #21]
 800a752:	7da0      	ldrb	r0, [r4, #22]
 800a754:	f080 0001 	eor.w	r0, r0, #1
 800a758:	bd38      	pop	{r3, r4, r5, pc}
 800a75a:	bf00      	nop

0800a75c <ucdr_deserialize_uint8_t>:
 800a75c:	b538      	push	{r3, r4, r5, lr}
 800a75e:	460d      	mov	r5, r1
 800a760:	2101      	movs	r1, #1
 800a762:	4604      	mov	r4, r0
 800a764:	f001 fa5c 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800a768:	b150      	cbz	r0, 800a780 <ucdr_deserialize_uint8_t+0x24>
 800a76a:	68a3      	ldr	r3, [r4, #8]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	702b      	strb	r3, [r5, #0]
 800a770:	68a2      	ldr	r2, [r4, #8]
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	2101      	movs	r1, #1
 800a776:	440a      	add	r2, r1
 800a778:	440b      	add	r3, r1
 800a77a:	60a2      	str	r2, [r4, #8]
 800a77c:	6123      	str	r3, [r4, #16]
 800a77e:	7561      	strb	r1, [r4, #21]
 800a780:	7da0      	ldrb	r0, [r4, #22]
 800a782:	f080 0001 	eor.w	r0, r0, #1
 800a786:	bd38      	pop	{r3, r4, r5, pc}

0800a788 <ucdr_serialize_uint16_t>:
 800a788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a78c:	b082      	sub	sp, #8
 800a78e:	460b      	mov	r3, r1
 800a790:	2102      	movs	r1, #2
 800a792:	4604      	mov	r4, r0
 800a794:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a798:	f001 fa96 	bl	800bcc8 <ucdr_buffer_alignment>
 800a79c:	4601      	mov	r1, r0
 800a79e:	4620      	mov	r0, r4
 800a7a0:	7d67      	ldrb	r7, [r4, #21]
 800a7a2:	f001 fad5 	bl	800bd50 <ucdr_advance_buffer>
 800a7a6:	2102      	movs	r1, #2
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f001 fa2d 	bl	800bc08 <ucdr_check_buffer_available_for>
 800a7ae:	b1c0      	cbz	r0, 800a7e2 <ucdr_serialize_uint16_t+0x5a>
 800a7b0:	7d22      	ldrb	r2, [r4, #20]
 800a7b2:	68a3      	ldr	r3, [r4, #8]
 800a7b4:	2a01      	cmp	r2, #1
 800a7b6:	d04e      	beq.n	800a856 <ucdr_serialize_uint16_t+0xce>
 800a7b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a7bc:	701a      	strb	r2, [r3, #0]
 800a7be:	68a3      	ldr	r3, [r4, #8]
 800a7c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a7c4:	705a      	strb	r2, [r3, #1]
 800a7c6:	68a2      	ldr	r2, [r4, #8]
 800a7c8:	6923      	ldr	r3, [r4, #16]
 800a7ca:	3202      	adds	r2, #2
 800a7cc:	3302      	adds	r3, #2
 800a7ce:	2102      	movs	r1, #2
 800a7d0:	60a2      	str	r2, [r4, #8]
 800a7d2:	6123      	str	r3, [r4, #16]
 800a7d4:	7561      	strb	r1, [r4, #21]
 800a7d6:	7da0      	ldrb	r0, [r4, #22]
 800a7d8:	f080 0001 	eor.w	r0, r0, #1
 800a7dc:	b002      	add	sp, #8
 800a7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800a7e6:	42ab      	cmp	r3, r5
 800a7e8:	d923      	bls.n	800a832 <ucdr_serialize_uint16_t+0xaa>
 800a7ea:	1b5e      	subs	r6, r3, r5
 800a7ec:	60a3      	str	r3, [r4, #8]
 800a7ee:	6923      	ldr	r3, [r4, #16]
 800a7f0:	f1c6 0802 	rsb	r8, r6, #2
 800a7f4:	4433      	add	r3, r6
 800a7f6:	6123      	str	r3, [r4, #16]
 800a7f8:	4641      	mov	r1, r8
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f001 fa10 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800a800:	b368      	cbz	r0, 800a85e <ucdr_serialize_uint16_t+0xd6>
 800a802:	7d23      	ldrb	r3, [r4, #20]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d03b      	beq.n	800a880 <ucdr_serialize_uint16_t+0xf8>
 800a808:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a80c:	702b      	strb	r3, [r5, #0]
 800a80e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a812:	706b      	strb	r3, [r5, #1]
 800a814:	6923      	ldr	r3, [r4, #16]
 800a816:	68a2      	ldr	r2, [r4, #8]
 800a818:	7da0      	ldrb	r0, [r4, #22]
 800a81a:	3302      	adds	r3, #2
 800a81c:	4442      	add	r2, r8
 800a81e:	1b9b      	subs	r3, r3, r6
 800a820:	2102      	movs	r1, #2
 800a822:	f080 0001 	eor.w	r0, r0, #1
 800a826:	60a2      	str	r2, [r4, #8]
 800a828:	6123      	str	r3, [r4, #16]
 800a82a:	7561      	strb	r1, [r4, #21]
 800a82c:	b002      	add	sp, #8
 800a82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a832:	2102      	movs	r1, #2
 800a834:	4620      	mov	r0, r4
 800a836:	f001 f9f3 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d0cb      	beq.n	800a7d6 <ucdr_serialize_uint16_t+0x4e>
 800a83e:	7d23      	ldrb	r3, [r4, #20]
 800a840:	68a2      	ldr	r2, [r4, #8]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d018      	beq.n	800a878 <ucdr_serialize_uint16_t+0xf0>
 800a846:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a84a:	7013      	strb	r3, [r2, #0]
 800a84c:	68a3      	ldr	r3, [r4, #8]
 800a84e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a852:	705a      	strb	r2, [r3, #1]
 800a854:	e7b7      	b.n	800a7c6 <ucdr_serialize_uint16_t+0x3e>
 800a856:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a85a:	801a      	strh	r2, [r3, #0]
 800a85c:	e7b3      	b.n	800a7c6 <ucdr_serialize_uint16_t+0x3e>
 800a85e:	68a2      	ldr	r2, [r4, #8]
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	7da0      	ldrb	r0, [r4, #22]
 800a864:	7567      	strb	r7, [r4, #21]
 800a866:	1b92      	subs	r2, r2, r6
 800a868:	1b9b      	subs	r3, r3, r6
 800a86a:	f080 0001 	eor.w	r0, r0, #1
 800a86e:	60a2      	str	r2, [r4, #8]
 800a870:	6123      	str	r3, [r4, #16]
 800a872:	b002      	add	sp, #8
 800a874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a878:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a87c:	8013      	strh	r3, [r2, #0]
 800a87e:	e7a2      	b.n	800a7c6 <ucdr_serialize_uint16_t+0x3e>
 800a880:	4628      	mov	r0, r5
 800a882:	f10d 0506 	add.w	r5, sp, #6
 800a886:	4632      	mov	r2, r6
 800a888:	4629      	mov	r1, r5
 800a88a:	f00f fc30 	bl	801a0ee <memcpy>
 800a88e:	68a0      	ldr	r0, [r4, #8]
 800a890:	4642      	mov	r2, r8
 800a892:	19a9      	adds	r1, r5, r6
 800a894:	f00f fc2b 	bl	801a0ee <memcpy>
 800a898:	e7bc      	b.n	800a814 <ucdr_serialize_uint16_t+0x8c>
 800a89a:	bf00      	nop

0800a89c <ucdr_serialize_endian_uint16_t>:
 800a89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	460d      	mov	r5, r1
 800a8a4:	2102      	movs	r1, #2
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a8ac:	f001 fa0c 	bl	800bcc8 <ucdr_buffer_alignment>
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a8b8:	f001 fa4a 	bl	800bd50 <ucdr_advance_buffer>
 800a8bc:	2102      	movs	r1, #2
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f001 f9a2 	bl	800bc08 <ucdr_check_buffer_available_for>
 800a8c4:	bb60      	cbnz	r0, 800a920 <ucdr_serialize_endian_uint16_t+0x84>
 800a8c6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a8ca:	42be      	cmp	r6, r7
 800a8cc:	d923      	bls.n	800a916 <ucdr_serialize_endian_uint16_t+0x7a>
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	60a6      	str	r6, [r4, #8]
 800a8d2:	1bf6      	subs	r6, r6, r7
 800a8d4:	4433      	add	r3, r6
 800a8d6:	f1c6 0902 	rsb	r9, r6, #2
 800a8da:	6123      	str	r3, [r4, #16]
 800a8dc:	4649      	mov	r1, r9
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f001 f99e 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d037      	beq.n	800a958 <ucdr_serialize_endian_uint16_t+0xbc>
 800a8e8:	2d01      	cmp	r5, #1
 800a8ea:	d043      	beq.n	800a974 <ucdr_serialize_endian_uint16_t+0xd8>
 800a8ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a8f0:	703b      	strb	r3, [r7, #0]
 800a8f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a8f6:	707b      	strb	r3, [r7, #1]
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	68a2      	ldr	r2, [r4, #8]
 800a8fc:	7da0      	ldrb	r0, [r4, #22]
 800a8fe:	3302      	adds	r3, #2
 800a900:	444a      	add	r2, r9
 800a902:	1b9b      	subs	r3, r3, r6
 800a904:	2102      	movs	r1, #2
 800a906:	f080 0001 	eor.w	r0, r0, #1
 800a90a:	60a2      	str	r2, [r4, #8]
 800a90c:	6123      	str	r3, [r4, #16]
 800a90e:	7561      	strb	r1, [r4, #21]
 800a910:	b003      	add	sp, #12
 800a912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a916:	2102      	movs	r1, #2
 800a918:	4620      	mov	r0, r4
 800a91a:	f001 f981 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800a91e:	b188      	cbz	r0, 800a944 <ucdr_serialize_endian_uint16_t+0xa8>
 800a920:	2d01      	cmp	r5, #1
 800a922:	68a3      	ldr	r3, [r4, #8]
 800a924:	d014      	beq.n	800a950 <ucdr_serialize_endian_uint16_t+0xb4>
 800a926:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a92a:	701a      	strb	r2, [r3, #0]
 800a92c:	68a3      	ldr	r3, [r4, #8]
 800a92e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800a932:	705a      	strb	r2, [r3, #1]
 800a934:	68a2      	ldr	r2, [r4, #8]
 800a936:	6923      	ldr	r3, [r4, #16]
 800a938:	3202      	adds	r2, #2
 800a93a:	3302      	adds	r3, #2
 800a93c:	2102      	movs	r1, #2
 800a93e:	60a2      	str	r2, [r4, #8]
 800a940:	6123      	str	r3, [r4, #16]
 800a942:	7561      	strb	r1, [r4, #21]
 800a944:	7da0      	ldrb	r0, [r4, #22]
 800a946:	f080 0001 	eor.w	r0, r0, #1
 800a94a:	b003      	add	sp, #12
 800a94c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a950:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800a954:	801a      	strh	r2, [r3, #0]
 800a956:	e7ed      	b.n	800a934 <ucdr_serialize_endian_uint16_t+0x98>
 800a958:	68a2      	ldr	r2, [r4, #8]
 800a95a:	6923      	ldr	r3, [r4, #16]
 800a95c:	7da0      	ldrb	r0, [r4, #22]
 800a95e:	f884 8015 	strb.w	r8, [r4, #21]
 800a962:	1b92      	subs	r2, r2, r6
 800a964:	1b9b      	subs	r3, r3, r6
 800a966:	f080 0001 	eor.w	r0, r0, #1
 800a96a:	60a2      	str	r2, [r4, #8]
 800a96c:	6123      	str	r3, [r4, #16]
 800a96e:	b003      	add	sp, #12
 800a970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a974:	f10d 0506 	add.w	r5, sp, #6
 800a978:	4632      	mov	r2, r6
 800a97a:	4629      	mov	r1, r5
 800a97c:	4638      	mov	r0, r7
 800a97e:	f00f fbb6 	bl	801a0ee <memcpy>
 800a982:	68a0      	ldr	r0, [r4, #8]
 800a984:	464a      	mov	r2, r9
 800a986:	19a9      	adds	r1, r5, r6
 800a988:	f00f fbb1 	bl	801a0ee <memcpy>
 800a98c:	e7b4      	b.n	800a8f8 <ucdr_serialize_endian_uint16_t+0x5c>
 800a98e:	bf00      	nop

0800a990 <ucdr_deserialize_uint16_t>:
 800a990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a994:	460d      	mov	r5, r1
 800a996:	2102      	movs	r1, #2
 800a998:	4604      	mov	r4, r0
 800a99a:	f001 f995 	bl	800bcc8 <ucdr_buffer_alignment>
 800a99e:	4601      	mov	r1, r0
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800a9a6:	f001 f9d3 	bl	800bd50 <ucdr_advance_buffer>
 800a9aa:	2102      	movs	r1, #2
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f001 f92b 	bl	800bc08 <ucdr_check_buffer_available_for>
 800a9b2:	b1a8      	cbz	r0, 800a9e0 <ucdr_deserialize_uint16_t+0x50>
 800a9b4:	7d22      	ldrb	r2, [r4, #20]
 800a9b6:	68a3      	ldr	r3, [r4, #8]
 800a9b8:	2a01      	cmp	r2, #1
 800a9ba:	d046      	beq.n	800aa4a <ucdr_deserialize_uint16_t+0xba>
 800a9bc:	785b      	ldrb	r3, [r3, #1]
 800a9be:	702b      	strb	r3, [r5, #0]
 800a9c0:	68a3      	ldr	r3, [r4, #8]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	706b      	strb	r3, [r5, #1]
 800a9c6:	68a2      	ldr	r2, [r4, #8]
 800a9c8:	6923      	ldr	r3, [r4, #16]
 800a9ca:	3202      	adds	r2, #2
 800a9cc:	3302      	adds	r3, #2
 800a9ce:	2102      	movs	r1, #2
 800a9d0:	60a2      	str	r2, [r4, #8]
 800a9d2:	6123      	str	r3, [r4, #16]
 800a9d4:	7561      	strb	r1, [r4, #21]
 800a9d6:	7da0      	ldrb	r0, [r4, #22]
 800a9d8:	f080 0001 	eor.w	r0, r0, #1
 800a9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800a9e4:	42be      	cmp	r6, r7
 800a9e6:	d920      	bls.n	800aa2a <ucdr_deserialize_uint16_t+0x9a>
 800a9e8:	6923      	ldr	r3, [r4, #16]
 800a9ea:	60a6      	str	r6, [r4, #8]
 800a9ec:	1bf6      	subs	r6, r6, r7
 800a9ee:	4433      	add	r3, r6
 800a9f0:	f1c6 0902 	rsb	r9, r6, #2
 800a9f4:	6123      	str	r3, [r4, #16]
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f001 f911 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800a9fe:	b338      	cbz	r0, 800aa50 <ucdr_deserialize_uint16_t+0xc0>
 800aa00:	7d23      	ldrb	r3, [r4, #20]
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d034      	beq.n	800aa70 <ucdr_deserialize_uint16_t+0xe0>
 800aa06:	787b      	ldrb	r3, [r7, #1]
 800aa08:	702b      	strb	r3, [r5, #0]
 800aa0a:	783b      	ldrb	r3, [r7, #0]
 800aa0c:	706b      	strb	r3, [r5, #1]
 800aa0e:	6923      	ldr	r3, [r4, #16]
 800aa10:	68a2      	ldr	r2, [r4, #8]
 800aa12:	7da0      	ldrb	r0, [r4, #22]
 800aa14:	2102      	movs	r1, #2
 800aa16:	3302      	adds	r3, #2
 800aa18:	444a      	add	r2, r9
 800aa1a:	1b9b      	subs	r3, r3, r6
 800aa1c:	7561      	strb	r1, [r4, #21]
 800aa1e:	60a2      	str	r2, [r4, #8]
 800aa20:	6123      	str	r3, [r4, #16]
 800aa22:	f080 0001 	eor.w	r0, r0, #1
 800aa26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa2a:	2102      	movs	r1, #2
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f001 f8f7 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d0cf      	beq.n	800a9d6 <ucdr_deserialize_uint16_t+0x46>
 800aa36:	7d23      	ldrb	r3, [r4, #20]
 800aa38:	68a2      	ldr	r2, [r4, #8]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d015      	beq.n	800aa6a <ucdr_deserialize_uint16_t+0xda>
 800aa3e:	7853      	ldrb	r3, [r2, #1]
 800aa40:	702b      	strb	r3, [r5, #0]
 800aa42:	68a3      	ldr	r3, [r4, #8]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	706b      	strb	r3, [r5, #1]
 800aa48:	e7bd      	b.n	800a9c6 <ucdr_deserialize_uint16_t+0x36>
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	802b      	strh	r3, [r5, #0]
 800aa4e:	e7ba      	b.n	800a9c6 <ucdr_deserialize_uint16_t+0x36>
 800aa50:	68a2      	ldr	r2, [r4, #8]
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	7da0      	ldrb	r0, [r4, #22]
 800aa56:	f884 8015 	strb.w	r8, [r4, #21]
 800aa5a:	1b92      	subs	r2, r2, r6
 800aa5c:	1b9b      	subs	r3, r3, r6
 800aa5e:	60a2      	str	r2, [r4, #8]
 800aa60:	6123      	str	r3, [r4, #16]
 800aa62:	f080 0001 	eor.w	r0, r0, #1
 800aa66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa6a:	8813      	ldrh	r3, [r2, #0]
 800aa6c:	802b      	strh	r3, [r5, #0]
 800aa6e:	e7aa      	b.n	800a9c6 <ucdr_deserialize_uint16_t+0x36>
 800aa70:	4639      	mov	r1, r7
 800aa72:	4632      	mov	r2, r6
 800aa74:	4628      	mov	r0, r5
 800aa76:	f00f fb3a 	bl	801a0ee <memcpy>
 800aa7a:	68a1      	ldr	r1, [r4, #8]
 800aa7c:	464a      	mov	r2, r9
 800aa7e:	19a8      	adds	r0, r5, r6
 800aa80:	f00f fb35 	bl	801a0ee <memcpy>
 800aa84:	e7c3      	b.n	800aa0e <ucdr_deserialize_uint16_t+0x7e>
 800aa86:	bf00      	nop

0800aa88 <ucdr_deserialize_endian_uint16_t>:
 800aa88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa8c:	460e      	mov	r6, r1
 800aa8e:	2102      	movs	r1, #2
 800aa90:	4604      	mov	r4, r0
 800aa92:	4615      	mov	r5, r2
 800aa94:	f001 f918 	bl	800bcc8 <ucdr_buffer_alignment>
 800aa98:	4601      	mov	r1, r0
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800aaa0:	f001 f956 	bl	800bd50 <ucdr_advance_buffer>
 800aaa4:	2102      	movs	r1, #2
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f001 f8ae 	bl	800bc08 <ucdr_check_buffer_available_for>
 800aaac:	bb60      	cbnz	r0, 800ab08 <ucdr_deserialize_endian_uint16_t+0x80>
 800aaae:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800aab2:	4547      	cmp	r7, r8
 800aab4:	d923      	bls.n	800aafe <ucdr_deserialize_endian_uint16_t+0x76>
 800aab6:	6923      	ldr	r3, [r4, #16]
 800aab8:	60a7      	str	r7, [r4, #8]
 800aaba:	eba7 0708 	sub.w	r7, r7, r8
 800aabe:	443b      	add	r3, r7
 800aac0:	f1c7 0a02 	rsb	sl, r7, #2
 800aac4:	6123      	str	r3, [r4, #16]
 800aac6:	4651      	mov	r1, sl
 800aac8:	4620      	mov	r0, r4
 800aaca:	f001 f8a9 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d032      	beq.n	800ab38 <ucdr_deserialize_endian_uint16_t+0xb0>
 800aad2:	2e01      	cmp	r6, #1
 800aad4:	d03d      	beq.n	800ab52 <ucdr_deserialize_endian_uint16_t+0xca>
 800aad6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aada:	702b      	strb	r3, [r5, #0]
 800aadc:	f898 3000 	ldrb.w	r3, [r8]
 800aae0:	706b      	strb	r3, [r5, #1]
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	68a2      	ldr	r2, [r4, #8]
 800aae6:	7da0      	ldrb	r0, [r4, #22]
 800aae8:	2102      	movs	r1, #2
 800aaea:	3302      	adds	r3, #2
 800aaec:	4452      	add	r2, sl
 800aaee:	1bdb      	subs	r3, r3, r7
 800aaf0:	7561      	strb	r1, [r4, #21]
 800aaf2:	60a2      	str	r2, [r4, #8]
 800aaf4:	6123      	str	r3, [r4, #16]
 800aaf6:	f080 0001 	eor.w	r0, r0, #1
 800aafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aafe:	2102      	movs	r1, #2
 800ab00:	4620      	mov	r0, r4
 800ab02:	f001 f88d 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800ab06:	b178      	cbz	r0, 800ab28 <ucdr_deserialize_endian_uint16_t+0xa0>
 800ab08:	2e01      	cmp	r6, #1
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	d011      	beq.n	800ab32 <ucdr_deserialize_endian_uint16_t+0xaa>
 800ab0e:	785b      	ldrb	r3, [r3, #1]
 800ab10:	702b      	strb	r3, [r5, #0]
 800ab12:	68a3      	ldr	r3, [r4, #8]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	706b      	strb	r3, [r5, #1]
 800ab18:	68a2      	ldr	r2, [r4, #8]
 800ab1a:	6923      	ldr	r3, [r4, #16]
 800ab1c:	3202      	adds	r2, #2
 800ab1e:	3302      	adds	r3, #2
 800ab20:	2102      	movs	r1, #2
 800ab22:	60a2      	str	r2, [r4, #8]
 800ab24:	6123      	str	r3, [r4, #16]
 800ab26:	7561      	strb	r1, [r4, #21]
 800ab28:	7da0      	ldrb	r0, [r4, #22]
 800ab2a:	f080 0001 	eor.w	r0, r0, #1
 800ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	802b      	strh	r3, [r5, #0]
 800ab36:	e7ef      	b.n	800ab18 <ucdr_deserialize_endian_uint16_t+0x90>
 800ab38:	68a2      	ldr	r2, [r4, #8]
 800ab3a:	6923      	ldr	r3, [r4, #16]
 800ab3c:	7da0      	ldrb	r0, [r4, #22]
 800ab3e:	f884 9015 	strb.w	r9, [r4, #21]
 800ab42:	1bd2      	subs	r2, r2, r7
 800ab44:	1bdb      	subs	r3, r3, r7
 800ab46:	60a2      	str	r2, [r4, #8]
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	f080 0001 	eor.w	r0, r0, #1
 800ab4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab52:	4641      	mov	r1, r8
 800ab54:	463a      	mov	r2, r7
 800ab56:	4628      	mov	r0, r5
 800ab58:	f00f fac9 	bl	801a0ee <memcpy>
 800ab5c:	68a1      	ldr	r1, [r4, #8]
 800ab5e:	4652      	mov	r2, sl
 800ab60:	19e8      	adds	r0, r5, r7
 800ab62:	f00f fac4 	bl	801a0ee <memcpy>
 800ab66:	e7bc      	b.n	800aae2 <ucdr_deserialize_endian_uint16_t+0x5a>

0800ab68 <ucdr_serialize_uint32_t>:
 800ab68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	4604      	mov	r4, r0
 800ab70:	9101      	str	r1, [sp, #4]
 800ab72:	2104      	movs	r1, #4
 800ab74:	f001 f8a8 	bl	800bcc8 <ucdr_buffer_alignment>
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	7d67      	ldrb	r7, [r4, #21]
 800ab7e:	f001 f8e7 	bl	800bd50 <ucdr_advance_buffer>
 800ab82:	2104      	movs	r1, #4
 800ab84:	4620      	mov	r0, r4
 800ab86:	f001 f83f 	bl	800bc08 <ucdr_check_buffer_available_for>
 800ab8a:	b300      	cbz	r0, 800abce <ucdr_serialize_uint32_t+0x66>
 800ab8c:	7d22      	ldrb	r2, [r4, #20]
 800ab8e:	68a3      	ldr	r3, [r4, #8]
 800ab90:	2a01      	cmp	r2, #1
 800ab92:	d05d      	beq.n	800ac50 <ucdr_serialize_uint32_t+0xe8>
 800ab94:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ab98:	701a      	strb	r2, [r3, #0]
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800aba0:	705a      	strb	r2, [r3, #1]
 800aba2:	68a3      	ldr	r3, [r4, #8]
 800aba4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800aba8:	709a      	strb	r2, [r3, #2]
 800abaa:	68a3      	ldr	r3, [r4, #8]
 800abac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800abb0:	70da      	strb	r2, [r3, #3]
 800abb2:	68a2      	ldr	r2, [r4, #8]
 800abb4:	6923      	ldr	r3, [r4, #16]
 800abb6:	3204      	adds	r2, #4
 800abb8:	3304      	adds	r3, #4
 800abba:	2104      	movs	r1, #4
 800abbc:	60a2      	str	r2, [r4, #8]
 800abbe:	6123      	str	r3, [r4, #16]
 800abc0:	7561      	strb	r1, [r4, #21]
 800abc2:	7da0      	ldrb	r0, [r4, #22]
 800abc4:	f080 0001 	eor.w	r0, r0, #1
 800abc8:	b002      	add	sp, #8
 800abca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abce:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800abd2:	42ab      	cmp	r3, r5
 800abd4:	d92e      	bls.n	800ac34 <ucdr_serialize_uint32_t+0xcc>
 800abd6:	1b5e      	subs	r6, r3, r5
 800abd8:	60a3      	str	r3, [r4, #8]
 800abda:	6923      	ldr	r3, [r4, #16]
 800abdc:	f1c6 0804 	rsb	r8, r6, #4
 800abe0:	4433      	add	r3, r6
 800abe2:	6123      	str	r3, [r4, #16]
 800abe4:	4641      	mov	r1, r8
 800abe6:	4620      	mov	r0, r4
 800abe8:	f001 f81a 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800abec:	b398      	cbz	r0, 800ac56 <ucdr_serialize_uint32_t+0xee>
 800abee:	7d23      	ldrb	r3, [r4, #20]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d046      	beq.n	800ac82 <ucdr_serialize_uint32_t+0x11a>
 800abf4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800abf8:	702b      	strb	r3, [r5, #0]
 800abfa:	2e01      	cmp	r6, #1
 800abfc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ac00:	706b      	strb	r3, [r5, #1]
 800ac02:	d035      	beq.n	800ac70 <ucdr_serialize_uint32_t+0x108>
 800ac04:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ac08:	70ab      	strb	r3, [r5, #2]
 800ac0a:	2e02      	cmp	r6, #2
 800ac0c:	d034      	beq.n	800ac78 <ucdr_serialize_uint32_t+0x110>
 800ac0e:	3503      	adds	r5, #3
 800ac10:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ac14:	702b      	strb	r3, [r5, #0]
 800ac16:	6923      	ldr	r3, [r4, #16]
 800ac18:	68a2      	ldr	r2, [r4, #8]
 800ac1a:	7da0      	ldrb	r0, [r4, #22]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	4442      	add	r2, r8
 800ac20:	1b9b      	subs	r3, r3, r6
 800ac22:	2104      	movs	r1, #4
 800ac24:	f080 0001 	eor.w	r0, r0, #1
 800ac28:	60a2      	str	r2, [r4, #8]
 800ac2a:	6123      	str	r3, [r4, #16]
 800ac2c:	7561      	strb	r1, [r4, #21]
 800ac2e:	b002      	add	sp, #8
 800ac30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac34:	2104      	movs	r1, #4
 800ac36:	4620      	mov	r0, r4
 800ac38:	f000 fff2 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d0c0      	beq.n	800abc2 <ucdr_serialize_uint32_t+0x5a>
 800ac40:	7d23      	ldrb	r3, [r4, #20]
 800ac42:	68a2      	ldr	r2, [r4, #8]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d019      	beq.n	800ac7c <ucdr_serialize_uint32_t+0x114>
 800ac48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ac4c:	7013      	strb	r3, [r2, #0]
 800ac4e:	e7a4      	b.n	800ab9a <ucdr_serialize_uint32_t+0x32>
 800ac50:	9a01      	ldr	r2, [sp, #4]
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	e7ad      	b.n	800abb2 <ucdr_serialize_uint32_t+0x4a>
 800ac56:	68a2      	ldr	r2, [r4, #8]
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	7da0      	ldrb	r0, [r4, #22]
 800ac5c:	7567      	strb	r7, [r4, #21]
 800ac5e:	1b92      	subs	r2, r2, r6
 800ac60:	1b9b      	subs	r3, r3, r6
 800ac62:	f080 0001 	eor.w	r0, r0, #1
 800ac66:	60a2      	str	r2, [r4, #8]
 800ac68:	6123      	str	r3, [r4, #16]
 800ac6a:	b002      	add	sp, #8
 800ac6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac70:	68a3      	ldr	r3, [r4, #8]
 800ac72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	68a5      	ldr	r5, [r4, #8]
 800ac7a:	e7c9      	b.n	800ac10 <ucdr_serialize_uint32_t+0xa8>
 800ac7c:	9b01      	ldr	r3, [sp, #4]
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	e797      	b.n	800abb2 <ucdr_serialize_uint32_t+0x4a>
 800ac82:	4628      	mov	r0, r5
 800ac84:	ad01      	add	r5, sp, #4
 800ac86:	4632      	mov	r2, r6
 800ac88:	4629      	mov	r1, r5
 800ac8a:	f00f fa30 	bl	801a0ee <memcpy>
 800ac8e:	68a0      	ldr	r0, [r4, #8]
 800ac90:	4642      	mov	r2, r8
 800ac92:	19a9      	adds	r1, r5, r6
 800ac94:	f00f fa2b 	bl	801a0ee <memcpy>
 800ac98:	e7bd      	b.n	800ac16 <ucdr_serialize_uint32_t+0xae>
 800ac9a:	bf00      	nop

0800ac9c <ucdr_serialize_endian_uint32_t>:
 800ac9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aca0:	b083      	sub	sp, #12
 800aca2:	460d      	mov	r5, r1
 800aca4:	2104      	movs	r1, #4
 800aca6:	4604      	mov	r4, r0
 800aca8:	9201      	str	r2, [sp, #4]
 800acaa:	f001 f80d 	bl	800bcc8 <ucdr_buffer_alignment>
 800acae:	4601      	mov	r1, r0
 800acb0:	4620      	mov	r0, r4
 800acb2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800acb6:	f001 f84b 	bl	800bd50 <ucdr_advance_buffer>
 800acba:	2104      	movs	r1, #4
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 ffa3 	bl	800bc08 <ucdr_check_buffer_available_for>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d137      	bne.n	800ad36 <ucdr_serialize_endian_uint32_t+0x9a>
 800acc6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800acca:	42b7      	cmp	r7, r6
 800accc:	d92e      	bls.n	800ad2c <ucdr_serialize_endian_uint32_t+0x90>
 800acce:	6923      	ldr	r3, [r4, #16]
 800acd0:	60a7      	str	r7, [r4, #8]
 800acd2:	1bbf      	subs	r7, r7, r6
 800acd4:	443b      	add	r3, r7
 800acd6:	f1c7 0904 	rsb	r9, r7, #4
 800acda:	6123      	str	r3, [r4, #16]
 800acdc:	4649      	mov	r1, r9
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 ff9e 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	d049      	beq.n	800ad7c <ucdr_serialize_endian_uint32_t+0xe0>
 800ace8:	2d01      	cmp	r5, #1
 800acea:	d05b      	beq.n	800ada4 <ucdr_serialize_endian_uint32_t+0x108>
 800acec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800acf0:	7033      	strb	r3, [r6, #0]
 800acf2:	2f01      	cmp	r7, #1
 800acf4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800acf8:	7073      	strb	r3, [r6, #1]
 800acfa:	d04d      	beq.n	800ad98 <ucdr_serialize_endian_uint32_t+0xfc>
 800acfc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad00:	70b3      	strb	r3, [r6, #2]
 800ad02:	2f02      	cmp	r7, #2
 800ad04:	d04c      	beq.n	800ada0 <ucdr_serialize_endian_uint32_t+0x104>
 800ad06:	3603      	adds	r6, #3
 800ad08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ad0c:	7033      	strb	r3, [r6, #0]
 800ad0e:	6923      	ldr	r3, [r4, #16]
 800ad10:	68a2      	ldr	r2, [r4, #8]
 800ad12:	7da0      	ldrb	r0, [r4, #22]
 800ad14:	3304      	adds	r3, #4
 800ad16:	444a      	add	r2, r9
 800ad18:	1bdb      	subs	r3, r3, r7
 800ad1a:	2104      	movs	r1, #4
 800ad1c:	f080 0001 	eor.w	r0, r0, #1
 800ad20:	60a2      	str	r2, [r4, #8]
 800ad22:	6123      	str	r3, [r4, #16]
 800ad24:	7561      	strb	r1, [r4, #21]
 800ad26:	b003      	add	sp, #12
 800ad28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad2c:	2104      	movs	r1, #4
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 ff76 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800ad34:	b1c8      	cbz	r0, 800ad6a <ucdr_serialize_endian_uint32_t+0xce>
 800ad36:	2d01      	cmp	r5, #1
 800ad38:	68a3      	ldr	r3, [r4, #8]
 800ad3a:	d01c      	beq.n	800ad76 <ucdr_serialize_endian_uint32_t+0xda>
 800ad3c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ad40:	701a      	strb	r2, [r3, #0]
 800ad42:	68a3      	ldr	r3, [r4, #8]
 800ad44:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ad48:	705a      	strb	r2, [r3, #1]
 800ad4a:	68a3      	ldr	r3, [r4, #8]
 800ad4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad50:	709a      	strb	r2, [r3, #2]
 800ad52:	68a3      	ldr	r3, [r4, #8]
 800ad54:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad58:	70da      	strb	r2, [r3, #3]
 800ad5a:	68a2      	ldr	r2, [r4, #8]
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	3204      	adds	r2, #4
 800ad60:	3304      	adds	r3, #4
 800ad62:	2104      	movs	r1, #4
 800ad64:	60a2      	str	r2, [r4, #8]
 800ad66:	6123      	str	r3, [r4, #16]
 800ad68:	7561      	strb	r1, [r4, #21]
 800ad6a:	7da0      	ldrb	r0, [r4, #22]
 800ad6c:	f080 0001 	eor.w	r0, r0, #1
 800ad70:	b003      	add	sp, #12
 800ad72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad76:	9a01      	ldr	r2, [sp, #4]
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	e7ee      	b.n	800ad5a <ucdr_serialize_endian_uint32_t+0xbe>
 800ad7c:	68a2      	ldr	r2, [r4, #8]
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	7da0      	ldrb	r0, [r4, #22]
 800ad82:	f884 8015 	strb.w	r8, [r4, #21]
 800ad86:	1bd2      	subs	r2, r2, r7
 800ad88:	1bdb      	subs	r3, r3, r7
 800ad8a:	f080 0001 	eor.w	r0, r0, #1
 800ad8e:	60a2      	str	r2, [r4, #8]
 800ad90:	6123      	str	r3, [r4, #16]
 800ad92:	b003      	add	sp, #12
 800ad94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad98:	68a3      	ldr	r3, [r4, #8]
 800ad9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ad9e:	701a      	strb	r2, [r3, #0]
 800ada0:	68a6      	ldr	r6, [r4, #8]
 800ada2:	e7b1      	b.n	800ad08 <ucdr_serialize_endian_uint32_t+0x6c>
 800ada4:	ad01      	add	r5, sp, #4
 800ada6:	463a      	mov	r2, r7
 800ada8:	4629      	mov	r1, r5
 800adaa:	4630      	mov	r0, r6
 800adac:	f00f f99f 	bl	801a0ee <memcpy>
 800adb0:	68a0      	ldr	r0, [r4, #8]
 800adb2:	464a      	mov	r2, r9
 800adb4:	19e9      	adds	r1, r5, r7
 800adb6:	f00f f99a 	bl	801a0ee <memcpy>
 800adba:	e7a8      	b.n	800ad0e <ucdr_serialize_endian_uint32_t+0x72>

0800adbc <ucdr_deserialize_uint32_t>:
 800adbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc0:	460d      	mov	r5, r1
 800adc2:	2104      	movs	r1, #4
 800adc4:	4604      	mov	r4, r0
 800adc6:	f000 ff7f 	bl	800bcc8 <ucdr_buffer_alignment>
 800adca:	4601      	mov	r1, r0
 800adcc:	4620      	mov	r0, r4
 800adce:	f894 8015 	ldrb.w	r8, [r4, #21]
 800add2:	f000 ffbd 	bl	800bd50 <ucdr_advance_buffer>
 800add6:	2104      	movs	r1, #4
 800add8:	4620      	mov	r0, r4
 800adda:	f000 ff15 	bl	800bc08 <ucdr_check_buffer_available_for>
 800adde:	b1d8      	cbz	r0, 800ae18 <ucdr_deserialize_uint32_t+0x5c>
 800ade0:	7d22      	ldrb	r2, [r4, #20]
 800ade2:	68a3      	ldr	r3, [r4, #8]
 800ade4:	2a01      	cmp	r2, #1
 800ade6:	d052      	beq.n	800ae8e <ucdr_deserialize_uint32_t+0xd2>
 800ade8:	78db      	ldrb	r3, [r3, #3]
 800adea:	702b      	strb	r3, [r5, #0]
 800adec:	68a3      	ldr	r3, [r4, #8]
 800adee:	789b      	ldrb	r3, [r3, #2]
 800adf0:	706b      	strb	r3, [r5, #1]
 800adf2:	68a3      	ldr	r3, [r4, #8]
 800adf4:	785b      	ldrb	r3, [r3, #1]
 800adf6:	70ab      	strb	r3, [r5, #2]
 800adf8:	68a3      	ldr	r3, [r4, #8]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	70eb      	strb	r3, [r5, #3]
 800adfe:	68a2      	ldr	r2, [r4, #8]
 800ae00:	6923      	ldr	r3, [r4, #16]
 800ae02:	3204      	adds	r2, #4
 800ae04:	3304      	adds	r3, #4
 800ae06:	2104      	movs	r1, #4
 800ae08:	60a2      	str	r2, [r4, #8]
 800ae0a:	6123      	str	r3, [r4, #16]
 800ae0c:	7561      	strb	r1, [r4, #21]
 800ae0e:	7da0      	ldrb	r0, [r4, #22]
 800ae10:	f080 0001 	eor.w	r0, r0, #1
 800ae14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae18:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ae1c:	42b7      	cmp	r7, r6
 800ae1e:	d92a      	bls.n	800ae76 <ucdr_deserialize_uint32_t+0xba>
 800ae20:	6923      	ldr	r3, [r4, #16]
 800ae22:	60a7      	str	r7, [r4, #8]
 800ae24:	1bbf      	subs	r7, r7, r6
 800ae26:	443b      	add	r3, r7
 800ae28:	f1c7 0904 	rsb	r9, r7, #4
 800ae2c:	6123      	str	r3, [r4, #16]
 800ae2e:	4649      	mov	r1, r9
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 fef5 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800ae36:	b368      	cbz	r0, 800ae94 <ucdr_deserialize_uint32_t+0xd8>
 800ae38:	7d23      	ldrb	r3, [r4, #20]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d040      	beq.n	800aec0 <ucdr_deserialize_uint32_t+0x104>
 800ae3e:	78f3      	ldrb	r3, [r6, #3]
 800ae40:	702b      	strb	r3, [r5, #0]
 800ae42:	78b3      	ldrb	r3, [r6, #2]
 800ae44:	706b      	strb	r3, [r5, #1]
 800ae46:	2f01      	cmp	r7, #1
 800ae48:	d031      	beq.n	800aeae <ucdr_deserialize_uint32_t+0xf2>
 800ae4a:	7873      	ldrb	r3, [r6, #1]
 800ae4c:	70ab      	strb	r3, [r5, #2]
 800ae4e:	2f02      	cmp	r7, #2
 800ae50:	f105 0503 	add.w	r5, r5, #3
 800ae54:	d02f      	beq.n	800aeb6 <ucdr_deserialize_uint32_t+0xfa>
 800ae56:	7833      	ldrb	r3, [r6, #0]
 800ae58:	702b      	strb	r3, [r5, #0]
 800ae5a:	6923      	ldr	r3, [r4, #16]
 800ae5c:	68a2      	ldr	r2, [r4, #8]
 800ae5e:	7da0      	ldrb	r0, [r4, #22]
 800ae60:	2104      	movs	r1, #4
 800ae62:	3304      	adds	r3, #4
 800ae64:	444a      	add	r2, r9
 800ae66:	1bdb      	subs	r3, r3, r7
 800ae68:	7561      	strb	r1, [r4, #21]
 800ae6a:	60a2      	str	r2, [r4, #8]
 800ae6c:	6123      	str	r3, [r4, #16]
 800ae6e:	f080 0001 	eor.w	r0, r0, #1
 800ae72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae76:	2104      	movs	r1, #4
 800ae78:	4620      	mov	r0, r4
 800ae7a:	f000 fed1 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d0c5      	beq.n	800ae0e <ucdr_deserialize_uint32_t+0x52>
 800ae82:	7d23      	ldrb	r3, [r4, #20]
 800ae84:	68a2      	ldr	r2, [r4, #8]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d017      	beq.n	800aeba <ucdr_deserialize_uint32_t+0xfe>
 800ae8a:	78d3      	ldrb	r3, [r2, #3]
 800ae8c:	e7ad      	b.n	800adea <ucdr_deserialize_uint32_t+0x2e>
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	602b      	str	r3, [r5, #0]
 800ae92:	e7b4      	b.n	800adfe <ucdr_deserialize_uint32_t+0x42>
 800ae94:	68a2      	ldr	r2, [r4, #8]
 800ae96:	6923      	ldr	r3, [r4, #16]
 800ae98:	7da0      	ldrb	r0, [r4, #22]
 800ae9a:	f884 8015 	strb.w	r8, [r4, #21]
 800ae9e:	1bd2      	subs	r2, r2, r7
 800aea0:	1bdb      	subs	r3, r3, r7
 800aea2:	60a2      	str	r2, [r4, #8]
 800aea4:	6123      	str	r3, [r4, #16]
 800aea6:	f080 0001 	eor.w	r0, r0, #1
 800aeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeae:	68a3      	ldr	r3, [r4, #8]
 800aeb0:	785b      	ldrb	r3, [r3, #1]
 800aeb2:	70ab      	strb	r3, [r5, #2]
 800aeb4:	3503      	adds	r5, #3
 800aeb6:	68a6      	ldr	r6, [r4, #8]
 800aeb8:	e7cd      	b.n	800ae56 <ucdr_deserialize_uint32_t+0x9a>
 800aeba:	6813      	ldr	r3, [r2, #0]
 800aebc:	602b      	str	r3, [r5, #0]
 800aebe:	e79e      	b.n	800adfe <ucdr_deserialize_uint32_t+0x42>
 800aec0:	4631      	mov	r1, r6
 800aec2:	463a      	mov	r2, r7
 800aec4:	4628      	mov	r0, r5
 800aec6:	f00f f912 	bl	801a0ee <memcpy>
 800aeca:	68a1      	ldr	r1, [r4, #8]
 800aecc:	464a      	mov	r2, r9
 800aece:	19e8      	adds	r0, r5, r7
 800aed0:	f00f f90d 	bl	801a0ee <memcpy>
 800aed4:	e7c1      	b.n	800ae5a <ucdr_deserialize_uint32_t+0x9e>
 800aed6:	bf00      	nop

0800aed8 <ucdr_deserialize_endian_uint32_t>:
 800aed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aedc:	460e      	mov	r6, r1
 800aede:	2104      	movs	r1, #4
 800aee0:	4604      	mov	r4, r0
 800aee2:	4615      	mov	r5, r2
 800aee4:	f000 fef0 	bl	800bcc8 <ucdr_buffer_alignment>
 800aee8:	4601      	mov	r1, r0
 800aeea:	4620      	mov	r0, r4
 800aeec:	f894 9015 	ldrb.w	r9, [r4, #21]
 800aef0:	f000 ff2e 	bl	800bd50 <ucdr_advance_buffer>
 800aef4:	2104      	movs	r1, #4
 800aef6:	4620      	mov	r0, r4
 800aef8:	f000 fe86 	bl	800bc08 <ucdr_check_buffer_available_for>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d137      	bne.n	800af70 <ucdr_deserialize_endian_uint32_t+0x98>
 800af00:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800af04:	42bb      	cmp	r3, r7
 800af06:	d92e      	bls.n	800af66 <ucdr_deserialize_endian_uint32_t+0x8e>
 800af08:	eba3 0807 	sub.w	r8, r3, r7
 800af0c:	60a3      	str	r3, [r4, #8]
 800af0e:	6923      	ldr	r3, [r4, #16]
 800af10:	f1c8 0a04 	rsb	sl, r8, #4
 800af14:	4443      	add	r3, r8
 800af16:	6123      	str	r3, [r4, #16]
 800af18:	4651      	mov	r1, sl
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 fe80 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800af20:	2800      	cmp	r0, #0
 800af22:	d043      	beq.n	800afac <ucdr_deserialize_endian_uint32_t+0xd4>
 800af24:	2e01      	cmp	r6, #1
 800af26:	d056      	beq.n	800afd6 <ucdr_deserialize_endian_uint32_t+0xfe>
 800af28:	78fb      	ldrb	r3, [r7, #3]
 800af2a:	702b      	strb	r3, [r5, #0]
 800af2c:	78bb      	ldrb	r3, [r7, #2]
 800af2e:	706b      	strb	r3, [r5, #1]
 800af30:	f1b8 0f01 	cmp.w	r8, #1
 800af34:	d049      	beq.n	800afca <ucdr_deserialize_endian_uint32_t+0xf2>
 800af36:	787b      	ldrb	r3, [r7, #1]
 800af38:	70ab      	strb	r3, [r5, #2]
 800af3a:	f1b8 0f02 	cmp.w	r8, #2
 800af3e:	f105 0503 	add.w	r5, r5, #3
 800af42:	d046      	beq.n	800afd2 <ucdr_deserialize_endian_uint32_t+0xfa>
 800af44:	783b      	ldrb	r3, [r7, #0]
 800af46:	702b      	strb	r3, [r5, #0]
 800af48:	6923      	ldr	r3, [r4, #16]
 800af4a:	68a2      	ldr	r2, [r4, #8]
 800af4c:	7da0      	ldrb	r0, [r4, #22]
 800af4e:	2104      	movs	r1, #4
 800af50:	3304      	adds	r3, #4
 800af52:	4452      	add	r2, sl
 800af54:	eba3 0308 	sub.w	r3, r3, r8
 800af58:	7561      	strb	r1, [r4, #21]
 800af5a:	60a2      	str	r2, [r4, #8]
 800af5c:	6123      	str	r3, [r4, #16]
 800af5e:	f080 0001 	eor.w	r0, r0, #1
 800af62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af66:	2104      	movs	r1, #4
 800af68:	4620      	mov	r0, r4
 800af6a:	f000 fe59 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800af6e:	b1a8      	cbz	r0, 800af9c <ucdr_deserialize_endian_uint32_t+0xc4>
 800af70:	2e01      	cmp	r6, #1
 800af72:	68a3      	ldr	r3, [r4, #8]
 800af74:	d017      	beq.n	800afa6 <ucdr_deserialize_endian_uint32_t+0xce>
 800af76:	78db      	ldrb	r3, [r3, #3]
 800af78:	702b      	strb	r3, [r5, #0]
 800af7a:	68a3      	ldr	r3, [r4, #8]
 800af7c:	789b      	ldrb	r3, [r3, #2]
 800af7e:	706b      	strb	r3, [r5, #1]
 800af80:	68a3      	ldr	r3, [r4, #8]
 800af82:	785b      	ldrb	r3, [r3, #1]
 800af84:	70ab      	strb	r3, [r5, #2]
 800af86:	68a3      	ldr	r3, [r4, #8]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	70eb      	strb	r3, [r5, #3]
 800af8c:	68a2      	ldr	r2, [r4, #8]
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	3204      	adds	r2, #4
 800af92:	3304      	adds	r3, #4
 800af94:	2104      	movs	r1, #4
 800af96:	60a2      	str	r2, [r4, #8]
 800af98:	6123      	str	r3, [r4, #16]
 800af9a:	7561      	strb	r1, [r4, #21]
 800af9c:	7da0      	ldrb	r0, [r4, #22]
 800af9e:	f080 0001 	eor.w	r0, r0, #1
 800afa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	602b      	str	r3, [r5, #0]
 800afaa:	e7ef      	b.n	800af8c <ucdr_deserialize_endian_uint32_t+0xb4>
 800afac:	68a2      	ldr	r2, [r4, #8]
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	7da0      	ldrb	r0, [r4, #22]
 800afb2:	f884 9015 	strb.w	r9, [r4, #21]
 800afb6:	eba2 0208 	sub.w	r2, r2, r8
 800afba:	eba3 0308 	sub.w	r3, r3, r8
 800afbe:	60a2      	str	r2, [r4, #8]
 800afc0:	6123      	str	r3, [r4, #16]
 800afc2:	f080 0001 	eor.w	r0, r0, #1
 800afc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	785b      	ldrb	r3, [r3, #1]
 800afce:	70ab      	strb	r3, [r5, #2]
 800afd0:	3503      	adds	r5, #3
 800afd2:	68a7      	ldr	r7, [r4, #8]
 800afd4:	e7b6      	b.n	800af44 <ucdr_deserialize_endian_uint32_t+0x6c>
 800afd6:	4639      	mov	r1, r7
 800afd8:	4642      	mov	r2, r8
 800afda:	4628      	mov	r0, r5
 800afdc:	f00f f887 	bl	801a0ee <memcpy>
 800afe0:	68a1      	ldr	r1, [r4, #8]
 800afe2:	4652      	mov	r2, sl
 800afe4:	eb05 0008 	add.w	r0, r5, r8
 800afe8:	f00f f881 	bl	801a0ee <memcpy>
 800afec:	e7ac      	b.n	800af48 <ucdr_deserialize_endian_uint32_t+0x70>
 800afee:	bf00      	nop

0800aff0 <ucdr_serialize_uint64_t>:
 800aff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff4:	2108      	movs	r1, #8
 800aff6:	b082      	sub	sp, #8
 800aff8:	4604      	mov	r4, r0
 800affa:	e9cd 2300 	strd	r2, r3, [sp]
 800affe:	f000 fe63 	bl	800bcc8 <ucdr_buffer_alignment>
 800b002:	4601      	mov	r1, r0
 800b004:	4620      	mov	r0, r4
 800b006:	7d67      	ldrb	r7, [r4, #21]
 800b008:	f000 fea2 	bl	800bd50 <ucdr_advance_buffer>
 800b00c:	2108      	movs	r1, #8
 800b00e:	4620      	mov	r0, r4
 800b010:	f000 fdfa 	bl	800bc08 <ucdr_check_buffer_available_for>
 800b014:	2800      	cmp	r0, #0
 800b016:	d14d      	bne.n	800b0b4 <ucdr_serialize_uint64_t+0xc4>
 800b018:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b01c:	42ab      	cmp	r3, r5
 800b01e:	d944      	bls.n	800b0aa <ucdr_serialize_uint64_t+0xba>
 800b020:	1b5e      	subs	r6, r3, r5
 800b022:	60a3      	str	r3, [r4, #8]
 800b024:	6923      	ldr	r3, [r4, #16]
 800b026:	f1c6 0808 	rsb	r8, r6, #8
 800b02a:	4433      	add	r3, r6
 800b02c:	6123      	str	r3, [r4, #16]
 800b02e:	4641      	mov	r1, r8
 800b030:	4620      	mov	r0, r4
 800b032:	f000 fdf5 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b036:	2800      	cmp	r0, #0
 800b038:	d072      	beq.n	800b120 <ucdr_serialize_uint64_t+0x130>
 800b03a:	7d23      	ldrb	r3, [r4, #20]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	f000 8092 	beq.w	800b166 <ucdr_serialize_uint64_t+0x176>
 800b042:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b046:	702b      	strb	r3, [r5, #0]
 800b048:	2e01      	cmp	r6, #1
 800b04a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b04e:	706b      	strb	r3, [r5, #1]
 800b050:	d073      	beq.n	800b13a <ucdr_serialize_uint64_t+0x14a>
 800b052:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b056:	70ab      	strb	r3, [r5, #2]
 800b058:	2e02      	cmp	r6, #2
 800b05a:	d072      	beq.n	800b142 <ucdr_serialize_uint64_t+0x152>
 800b05c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b060:	70eb      	strb	r3, [r5, #3]
 800b062:	2e03      	cmp	r6, #3
 800b064:	d071      	beq.n	800b14a <ucdr_serialize_uint64_t+0x15a>
 800b066:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b06a:	712b      	strb	r3, [r5, #4]
 800b06c:	2e04      	cmp	r6, #4
 800b06e:	d070      	beq.n	800b152 <ucdr_serialize_uint64_t+0x162>
 800b070:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b074:	716b      	strb	r3, [r5, #5]
 800b076:	2e05      	cmp	r6, #5
 800b078:	d06f      	beq.n	800b15a <ucdr_serialize_uint64_t+0x16a>
 800b07a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b07e:	71ab      	strb	r3, [r5, #6]
 800b080:	2e06      	cmp	r6, #6
 800b082:	d06e      	beq.n	800b162 <ucdr_serialize_uint64_t+0x172>
 800b084:	3507      	adds	r5, #7
 800b086:	f89d 3000 	ldrb.w	r3, [sp]
 800b08a:	702b      	strb	r3, [r5, #0]
 800b08c:	6923      	ldr	r3, [r4, #16]
 800b08e:	68a2      	ldr	r2, [r4, #8]
 800b090:	7da0      	ldrb	r0, [r4, #22]
 800b092:	3308      	adds	r3, #8
 800b094:	4442      	add	r2, r8
 800b096:	1b9b      	subs	r3, r3, r6
 800b098:	2108      	movs	r1, #8
 800b09a:	f080 0001 	eor.w	r0, r0, #1
 800b09e:	60a2      	str	r2, [r4, #8]
 800b0a0:	6123      	str	r3, [r4, #16]
 800b0a2:	7561      	strb	r1, [r4, #21]
 800b0a4:	b002      	add	sp, #8
 800b0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0aa:	2108      	movs	r1, #8
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 fdb7 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b0b2:	b350      	cbz	r0, 800b10a <ucdr_serialize_uint64_t+0x11a>
 800b0b4:	7d22      	ldrb	r2, [r4, #20]
 800b0b6:	68a3      	ldr	r3, [r4, #8]
 800b0b8:	2a01      	cmp	r2, #1
 800b0ba:	d02c      	beq.n	800b116 <ucdr_serialize_uint64_t+0x126>
 800b0bc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0c0:	701a      	strb	r2, [r3, #0]
 800b0c2:	68a3      	ldr	r3, [r4, #8]
 800b0c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0c8:	705a      	strb	r2, [r3, #1]
 800b0ca:	68a3      	ldr	r3, [r4, #8]
 800b0cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b0d0:	709a      	strb	r2, [r3, #2]
 800b0d2:	68a3      	ldr	r3, [r4, #8]
 800b0d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b0d8:	70da      	strb	r2, [r3, #3]
 800b0da:	68a3      	ldr	r3, [r4, #8]
 800b0dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b0e0:	711a      	strb	r2, [r3, #4]
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b0e8:	715a      	strb	r2, [r3, #5]
 800b0ea:	68a3      	ldr	r3, [r4, #8]
 800b0ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b0f0:	719a      	strb	r2, [r3, #6]
 800b0f2:	68a3      	ldr	r3, [r4, #8]
 800b0f4:	f89d 2000 	ldrb.w	r2, [sp]
 800b0f8:	71da      	strb	r2, [r3, #7]
 800b0fa:	68a2      	ldr	r2, [r4, #8]
 800b0fc:	6923      	ldr	r3, [r4, #16]
 800b0fe:	3208      	adds	r2, #8
 800b100:	3308      	adds	r3, #8
 800b102:	2108      	movs	r1, #8
 800b104:	60a2      	str	r2, [r4, #8]
 800b106:	6123      	str	r3, [r4, #16]
 800b108:	7561      	strb	r1, [r4, #21]
 800b10a:	7da0      	ldrb	r0, [r4, #22]
 800b10c:	f080 0001 	eor.w	r0, r0, #1
 800b110:	b002      	add	sp, #8
 800b112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b116:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b11a:	6019      	str	r1, [r3, #0]
 800b11c:	605a      	str	r2, [r3, #4]
 800b11e:	e7ec      	b.n	800b0fa <ucdr_serialize_uint64_t+0x10a>
 800b120:	68a2      	ldr	r2, [r4, #8]
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	7da0      	ldrb	r0, [r4, #22]
 800b126:	7567      	strb	r7, [r4, #21]
 800b128:	1b92      	subs	r2, r2, r6
 800b12a:	1b9b      	subs	r3, r3, r6
 800b12c:	f080 0001 	eor.w	r0, r0, #1
 800b130:	60a2      	str	r2, [r4, #8]
 800b132:	6123      	str	r3, [r4, #16]
 800b134:	b002      	add	sp, #8
 800b136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b13a:	68a3      	ldr	r3, [r4, #8]
 800b13c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b140:	701a      	strb	r2, [r3, #0]
 800b142:	68a3      	ldr	r3, [r4, #8]
 800b144:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b150:	701a      	strb	r2, [r3, #0]
 800b152:	68a3      	ldr	r3, [r4, #8]
 800b154:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b158:	701a      	strb	r2, [r3, #0]
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b160:	701a      	strb	r2, [r3, #0]
 800b162:	68a5      	ldr	r5, [r4, #8]
 800b164:	e78f      	b.n	800b086 <ucdr_serialize_uint64_t+0x96>
 800b166:	4628      	mov	r0, r5
 800b168:	466d      	mov	r5, sp
 800b16a:	4632      	mov	r2, r6
 800b16c:	4629      	mov	r1, r5
 800b16e:	f00e ffbe 	bl	801a0ee <memcpy>
 800b172:	68a0      	ldr	r0, [r4, #8]
 800b174:	4642      	mov	r2, r8
 800b176:	19a9      	adds	r1, r5, r6
 800b178:	f00e ffb9 	bl	801a0ee <memcpy>
 800b17c:	e786      	b.n	800b08c <ucdr_serialize_uint64_t+0x9c>
 800b17e:	bf00      	nop

0800b180 <ucdr_serialize_int16_t>:
 800b180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b184:	b082      	sub	sp, #8
 800b186:	460b      	mov	r3, r1
 800b188:	2102      	movs	r1, #2
 800b18a:	4604      	mov	r4, r0
 800b18c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b190:	f000 fd9a 	bl	800bcc8 <ucdr_buffer_alignment>
 800b194:	4601      	mov	r1, r0
 800b196:	4620      	mov	r0, r4
 800b198:	7d67      	ldrb	r7, [r4, #21]
 800b19a:	f000 fdd9 	bl	800bd50 <ucdr_advance_buffer>
 800b19e:	2102      	movs	r1, #2
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f000 fd31 	bl	800bc08 <ucdr_check_buffer_available_for>
 800b1a6:	b1c0      	cbz	r0, 800b1da <ucdr_serialize_int16_t+0x5a>
 800b1a8:	7d22      	ldrb	r2, [r4, #20]
 800b1aa:	68a3      	ldr	r3, [r4, #8]
 800b1ac:	2a01      	cmp	r2, #1
 800b1ae:	d04e      	beq.n	800b24e <ucdr_serialize_int16_t+0xce>
 800b1b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	68a3      	ldr	r3, [r4, #8]
 800b1b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1bc:	705a      	strb	r2, [r3, #1]
 800b1be:	68a2      	ldr	r2, [r4, #8]
 800b1c0:	6923      	ldr	r3, [r4, #16]
 800b1c2:	3202      	adds	r2, #2
 800b1c4:	3302      	adds	r3, #2
 800b1c6:	2102      	movs	r1, #2
 800b1c8:	60a2      	str	r2, [r4, #8]
 800b1ca:	6123      	str	r3, [r4, #16]
 800b1cc:	7561      	strb	r1, [r4, #21]
 800b1ce:	7da0      	ldrb	r0, [r4, #22]
 800b1d0:	f080 0001 	eor.w	r0, r0, #1
 800b1d4:	b002      	add	sp, #8
 800b1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1da:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b1de:	42ab      	cmp	r3, r5
 800b1e0:	d923      	bls.n	800b22a <ucdr_serialize_int16_t+0xaa>
 800b1e2:	1b5e      	subs	r6, r3, r5
 800b1e4:	60a3      	str	r3, [r4, #8]
 800b1e6:	6923      	ldr	r3, [r4, #16]
 800b1e8:	f1c6 0802 	rsb	r8, r6, #2
 800b1ec:	4433      	add	r3, r6
 800b1ee:	6123      	str	r3, [r4, #16]
 800b1f0:	4641      	mov	r1, r8
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 fd14 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b1f8:	b368      	cbz	r0, 800b256 <ucdr_serialize_int16_t+0xd6>
 800b1fa:	7d23      	ldrb	r3, [r4, #20]
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d03b      	beq.n	800b278 <ucdr_serialize_int16_t+0xf8>
 800b200:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b204:	702b      	strb	r3, [r5, #0]
 800b206:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b20a:	706b      	strb	r3, [r5, #1]
 800b20c:	6923      	ldr	r3, [r4, #16]
 800b20e:	68a2      	ldr	r2, [r4, #8]
 800b210:	7da0      	ldrb	r0, [r4, #22]
 800b212:	3302      	adds	r3, #2
 800b214:	4442      	add	r2, r8
 800b216:	1b9b      	subs	r3, r3, r6
 800b218:	2102      	movs	r1, #2
 800b21a:	f080 0001 	eor.w	r0, r0, #1
 800b21e:	60a2      	str	r2, [r4, #8]
 800b220:	6123      	str	r3, [r4, #16]
 800b222:	7561      	strb	r1, [r4, #21]
 800b224:	b002      	add	sp, #8
 800b226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b22a:	2102      	movs	r1, #2
 800b22c:	4620      	mov	r0, r4
 800b22e:	f000 fcf7 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b232:	2800      	cmp	r0, #0
 800b234:	d0cb      	beq.n	800b1ce <ucdr_serialize_int16_t+0x4e>
 800b236:	7d23      	ldrb	r3, [r4, #20]
 800b238:	68a2      	ldr	r2, [r4, #8]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d018      	beq.n	800b270 <ucdr_serialize_int16_t+0xf0>
 800b23e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b242:	7013      	strb	r3, [r2, #0]
 800b244:	68a3      	ldr	r3, [r4, #8]
 800b246:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b24a:	705a      	strb	r2, [r3, #1]
 800b24c:	e7b7      	b.n	800b1be <ucdr_serialize_int16_t+0x3e>
 800b24e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b252:	801a      	strh	r2, [r3, #0]
 800b254:	e7b3      	b.n	800b1be <ucdr_serialize_int16_t+0x3e>
 800b256:	68a2      	ldr	r2, [r4, #8]
 800b258:	6923      	ldr	r3, [r4, #16]
 800b25a:	7da0      	ldrb	r0, [r4, #22]
 800b25c:	7567      	strb	r7, [r4, #21]
 800b25e:	1b92      	subs	r2, r2, r6
 800b260:	1b9b      	subs	r3, r3, r6
 800b262:	f080 0001 	eor.w	r0, r0, #1
 800b266:	60a2      	str	r2, [r4, #8]
 800b268:	6123      	str	r3, [r4, #16]
 800b26a:	b002      	add	sp, #8
 800b26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b270:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800b274:	8013      	strh	r3, [r2, #0]
 800b276:	e7a2      	b.n	800b1be <ucdr_serialize_int16_t+0x3e>
 800b278:	4628      	mov	r0, r5
 800b27a:	f10d 0506 	add.w	r5, sp, #6
 800b27e:	4632      	mov	r2, r6
 800b280:	4629      	mov	r1, r5
 800b282:	f00e ff34 	bl	801a0ee <memcpy>
 800b286:	68a0      	ldr	r0, [r4, #8]
 800b288:	4642      	mov	r2, r8
 800b28a:	19a9      	adds	r1, r5, r6
 800b28c:	f00e ff2f 	bl	801a0ee <memcpy>
 800b290:	e7bc      	b.n	800b20c <ucdr_serialize_int16_t+0x8c>
 800b292:	bf00      	nop

0800b294 <ucdr_deserialize_int16_t>:
 800b294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b298:	460d      	mov	r5, r1
 800b29a:	2102      	movs	r1, #2
 800b29c:	4604      	mov	r4, r0
 800b29e:	f000 fd13 	bl	800bcc8 <ucdr_buffer_alignment>
 800b2a2:	4601      	mov	r1, r0
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b2aa:	f000 fd51 	bl	800bd50 <ucdr_advance_buffer>
 800b2ae:	2102      	movs	r1, #2
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 fca9 	bl	800bc08 <ucdr_check_buffer_available_for>
 800b2b6:	b1a8      	cbz	r0, 800b2e4 <ucdr_deserialize_int16_t+0x50>
 800b2b8:	7d22      	ldrb	r2, [r4, #20]
 800b2ba:	68a3      	ldr	r3, [r4, #8]
 800b2bc:	2a01      	cmp	r2, #1
 800b2be:	d046      	beq.n	800b34e <ucdr_deserialize_int16_t+0xba>
 800b2c0:	785b      	ldrb	r3, [r3, #1]
 800b2c2:	702b      	strb	r3, [r5, #0]
 800b2c4:	68a3      	ldr	r3, [r4, #8]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	706b      	strb	r3, [r5, #1]
 800b2ca:	68a2      	ldr	r2, [r4, #8]
 800b2cc:	6923      	ldr	r3, [r4, #16]
 800b2ce:	3202      	adds	r2, #2
 800b2d0:	3302      	adds	r3, #2
 800b2d2:	2102      	movs	r1, #2
 800b2d4:	60a2      	str	r2, [r4, #8]
 800b2d6:	6123      	str	r3, [r4, #16]
 800b2d8:	7561      	strb	r1, [r4, #21]
 800b2da:	7da0      	ldrb	r0, [r4, #22]
 800b2dc:	f080 0001 	eor.w	r0, r0, #1
 800b2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2e4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b2e8:	42be      	cmp	r6, r7
 800b2ea:	d920      	bls.n	800b32e <ucdr_deserialize_int16_t+0x9a>
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	60a6      	str	r6, [r4, #8]
 800b2f0:	1bf6      	subs	r6, r6, r7
 800b2f2:	4433      	add	r3, r6
 800b2f4:	f1c6 0902 	rsb	r9, r6, #2
 800b2f8:	6123      	str	r3, [r4, #16]
 800b2fa:	4649      	mov	r1, r9
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f000 fc8f 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b302:	b338      	cbz	r0, 800b354 <ucdr_deserialize_int16_t+0xc0>
 800b304:	7d23      	ldrb	r3, [r4, #20]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d034      	beq.n	800b374 <ucdr_deserialize_int16_t+0xe0>
 800b30a:	787b      	ldrb	r3, [r7, #1]
 800b30c:	702b      	strb	r3, [r5, #0]
 800b30e:	783b      	ldrb	r3, [r7, #0]
 800b310:	706b      	strb	r3, [r5, #1]
 800b312:	6923      	ldr	r3, [r4, #16]
 800b314:	68a2      	ldr	r2, [r4, #8]
 800b316:	7da0      	ldrb	r0, [r4, #22]
 800b318:	2102      	movs	r1, #2
 800b31a:	3302      	adds	r3, #2
 800b31c:	444a      	add	r2, r9
 800b31e:	1b9b      	subs	r3, r3, r6
 800b320:	7561      	strb	r1, [r4, #21]
 800b322:	60a2      	str	r2, [r4, #8]
 800b324:	6123      	str	r3, [r4, #16]
 800b326:	f080 0001 	eor.w	r0, r0, #1
 800b32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b32e:	2102      	movs	r1, #2
 800b330:	4620      	mov	r0, r4
 800b332:	f000 fc75 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b336:	2800      	cmp	r0, #0
 800b338:	d0cf      	beq.n	800b2da <ucdr_deserialize_int16_t+0x46>
 800b33a:	7d23      	ldrb	r3, [r4, #20]
 800b33c:	68a2      	ldr	r2, [r4, #8]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d015      	beq.n	800b36e <ucdr_deserialize_int16_t+0xda>
 800b342:	7853      	ldrb	r3, [r2, #1]
 800b344:	702b      	strb	r3, [r5, #0]
 800b346:	68a3      	ldr	r3, [r4, #8]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	706b      	strb	r3, [r5, #1]
 800b34c:	e7bd      	b.n	800b2ca <ucdr_deserialize_int16_t+0x36>
 800b34e:	881b      	ldrh	r3, [r3, #0]
 800b350:	802b      	strh	r3, [r5, #0]
 800b352:	e7ba      	b.n	800b2ca <ucdr_deserialize_int16_t+0x36>
 800b354:	68a2      	ldr	r2, [r4, #8]
 800b356:	6923      	ldr	r3, [r4, #16]
 800b358:	7da0      	ldrb	r0, [r4, #22]
 800b35a:	f884 8015 	strb.w	r8, [r4, #21]
 800b35e:	1b92      	subs	r2, r2, r6
 800b360:	1b9b      	subs	r3, r3, r6
 800b362:	60a2      	str	r2, [r4, #8]
 800b364:	6123      	str	r3, [r4, #16]
 800b366:	f080 0001 	eor.w	r0, r0, #1
 800b36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b36e:	8813      	ldrh	r3, [r2, #0]
 800b370:	802b      	strh	r3, [r5, #0]
 800b372:	e7aa      	b.n	800b2ca <ucdr_deserialize_int16_t+0x36>
 800b374:	4639      	mov	r1, r7
 800b376:	4632      	mov	r2, r6
 800b378:	4628      	mov	r0, r5
 800b37a:	f00e feb8 	bl	801a0ee <memcpy>
 800b37e:	68a1      	ldr	r1, [r4, #8]
 800b380:	464a      	mov	r2, r9
 800b382:	19a8      	adds	r0, r5, r6
 800b384:	f00e feb3 	bl	801a0ee <memcpy>
 800b388:	e7c3      	b.n	800b312 <ucdr_deserialize_int16_t+0x7e>
 800b38a:	bf00      	nop

0800b38c <ucdr_serialize_int32_t>:
 800b38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b390:	b082      	sub	sp, #8
 800b392:	4604      	mov	r4, r0
 800b394:	9101      	str	r1, [sp, #4]
 800b396:	2104      	movs	r1, #4
 800b398:	f000 fc96 	bl	800bcc8 <ucdr_buffer_alignment>
 800b39c:	4601      	mov	r1, r0
 800b39e:	4620      	mov	r0, r4
 800b3a0:	7d67      	ldrb	r7, [r4, #21]
 800b3a2:	f000 fcd5 	bl	800bd50 <ucdr_advance_buffer>
 800b3a6:	2104      	movs	r1, #4
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f000 fc2d 	bl	800bc08 <ucdr_check_buffer_available_for>
 800b3ae:	b300      	cbz	r0, 800b3f2 <ucdr_serialize_int32_t+0x66>
 800b3b0:	7d22      	ldrb	r2, [r4, #20]
 800b3b2:	68a3      	ldr	r3, [r4, #8]
 800b3b4:	2a01      	cmp	r2, #1
 800b3b6:	d05d      	beq.n	800b474 <ucdr_serialize_int32_t+0xe8>
 800b3b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b3bc:	701a      	strb	r2, [r3, #0]
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3c4:	705a      	strb	r2, [r3, #1]
 800b3c6:	68a3      	ldr	r3, [r4, #8]
 800b3c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b3cc:	709a      	strb	r2, [r3, #2]
 800b3ce:	68a3      	ldr	r3, [r4, #8]
 800b3d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b3d4:	70da      	strb	r2, [r3, #3]
 800b3d6:	68a2      	ldr	r2, [r4, #8]
 800b3d8:	6923      	ldr	r3, [r4, #16]
 800b3da:	3204      	adds	r2, #4
 800b3dc:	3304      	adds	r3, #4
 800b3de:	2104      	movs	r1, #4
 800b3e0:	60a2      	str	r2, [r4, #8]
 800b3e2:	6123      	str	r3, [r4, #16]
 800b3e4:	7561      	strb	r1, [r4, #21]
 800b3e6:	7da0      	ldrb	r0, [r4, #22]
 800b3e8:	f080 0001 	eor.w	r0, r0, #1
 800b3ec:	b002      	add	sp, #8
 800b3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b3f6:	42ab      	cmp	r3, r5
 800b3f8:	d92e      	bls.n	800b458 <ucdr_serialize_int32_t+0xcc>
 800b3fa:	1b5e      	subs	r6, r3, r5
 800b3fc:	60a3      	str	r3, [r4, #8]
 800b3fe:	6923      	ldr	r3, [r4, #16]
 800b400:	f1c6 0804 	rsb	r8, r6, #4
 800b404:	4433      	add	r3, r6
 800b406:	6123      	str	r3, [r4, #16]
 800b408:	4641      	mov	r1, r8
 800b40a:	4620      	mov	r0, r4
 800b40c:	f000 fc08 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b410:	b398      	cbz	r0, 800b47a <ucdr_serialize_int32_t+0xee>
 800b412:	7d23      	ldrb	r3, [r4, #20]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d046      	beq.n	800b4a6 <ucdr_serialize_int32_t+0x11a>
 800b418:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b41c:	702b      	strb	r3, [r5, #0]
 800b41e:	2e01      	cmp	r6, #1
 800b420:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b424:	706b      	strb	r3, [r5, #1]
 800b426:	d035      	beq.n	800b494 <ucdr_serialize_int32_t+0x108>
 800b428:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b42c:	70ab      	strb	r3, [r5, #2]
 800b42e:	2e02      	cmp	r6, #2
 800b430:	d034      	beq.n	800b49c <ucdr_serialize_int32_t+0x110>
 800b432:	3503      	adds	r5, #3
 800b434:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b438:	702b      	strb	r3, [r5, #0]
 800b43a:	6923      	ldr	r3, [r4, #16]
 800b43c:	68a2      	ldr	r2, [r4, #8]
 800b43e:	7da0      	ldrb	r0, [r4, #22]
 800b440:	3304      	adds	r3, #4
 800b442:	4442      	add	r2, r8
 800b444:	1b9b      	subs	r3, r3, r6
 800b446:	2104      	movs	r1, #4
 800b448:	f080 0001 	eor.w	r0, r0, #1
 800b44c:	60a2      	str	r2, [r4, #8]
 800b44e:	6123      	str	r3, [r4, #16]
 800b450:	7561      	strb	r1, [r4, #21]
 800b452:	b002      	add	sp, #8
 800b454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b458:	2104      	movs	r1, #4
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 fbe0 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b460:	2800      	cmp	r0, #0
 800b462:	d0c0      	beq.n	800b3e6 <ucdr_serialize_int32_t+0x5a>
 800b464:	7d23      	ldrb	r3, [r4, #20]
 800b466:	68a2      	ldr	r2, [r4, #8]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d019      	beq.n	800b4a0 <ucdr_serialize_int32_t+0x114>
 800b46c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b470:	7013      	strb	r3, [r2, #0]
 800b472:	e7a4      	b.n	800b3be <ucdr_serialize_int32_t+0x32>
 800b474:	9a01      	ldr	r2, [sp, #4]
 800b476:	601a      	str	r2, [r3, #0]
 800b478:	e7ad      	b.n	800b3d6 <ucdr_serialize_int32_t+0x4a>
 800b47a:	68a2      	ldr	r2, [r4, #8]
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	7da0      	ldrb	r0, [r4, #22]
 800b480:	7567      	strb	r7, [r4, #21]
 800b482:	1b92      	subs	r2, r2, r6
 800b484:	1b9b      	subs	r3, r3, r6
 800b486:	f080 0001 	eor.w	r0, r0, #1
 800b48a:	60a2      	str	r2, [r4, #8]
 800b48c:	6123      	str	r3, [r4, #16]
 800b48e:	b002      	add	sp, #8
 800b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b494:	68a3      	ldr	r3, [r4, #8]
 800b496:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	68a5      	ldr	r5, [r4, #8]
 800b49e:	e7c9      	b.n	800b434 <ucdr_serialize_int32_t+0xa8>
 800b4a0:	9b01      	ldr	r3, [sp, #4]
 800b4a2:	6013      	str	r3, [r2, #0]
 800b4a4:	e797      	b.n	800b3d6 <ucdr_serialize_int32_t+0x4a>
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	ad01      	add	r5, sp, #4
 800b4aa:	4632      	mov	r2, r6
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	f00e fe1e 	bl	801a0ee <memcpy>
 800b4b2:	68a0      	ldr	r0, [r4, #8]
 800b4b4:	4642      	mov	r2, r8
 800b4b6:	19a9      	adds	r1, r5, r6
 800b4b8:	f00e fe19 	bl	801a0ee <memcpy>
 800b4bc:	e7bd      	b.n	800b43a <ucdr_serialize_int32_t+0xae>
 800b4be:	bf00      	nop

0800b4c0 <ucdr_deserialize_int32_t>:
 800b4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c4:	460d      	mov	r5, r1
 800b4c6:	2104      	movs	r1, #4
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	f000 fbfd 	bl	800bcc8 <ucdr_buffer_alignment>
 800b4ce:	4601      	mov	r1, r0
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b4d6:	f000 fc3b 	bl	800bd50 <ucdr_advance_buffer>
 800b4da:	2104      	movs	r1, #4
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f000 fb93 	bl	800bc08 <ucdr_check_buffer_available_for>
 800b4e2:	b1d8      	cbz	r0, 800b51c <ucdr_deserialize_int32_t+0x5c>
 800b4e4:	7d22      	ldrb	r2, [r4, #20]
 800b4e6:	68a3      	ldr	r3, [r4, #8]
 800b4e8:	2a01      	cmp	r2, #1
 800b4ea:	d052      	beq.n	800b592 <ucdr_deserialize_int32_t+0xd2>
 800b4ec:	78db      	ldrb	r3, [r3, #3]
 800b4ee:	702b      	strb	r3, [r5, #0]
 800b4f0:	68a3      	ldr	r3, [r4, #8]
 800b4f2:	789b      	ldrb	r3, [r3, #2]
 800b4f4:	706b      	strb	r3, [r5, #1]
 800b4f6:	68a3      	ldr	r3, [r4, #8]
 800b4f8:	785b      	ldrb	r3, [r3, #1]
 800b4fa:	70ab      	strb	r3, [r5, #2]
 800b4fc:	68a3      	ldr	r3, [r4, #8]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	70eb      	strb	r3, [r5, #3]
 800b502:	68a2      	ldr	r2, [r4, #8]
 800b504:	6923      	ldr	r3, [r4, #16]
 800b506:	3204      	adds	r2, #4
 800b508:	3304      	adds	r3, #4
 800b50a:	2104      	movs	r1, #4
 800b50c:	60a2      	str	r2, [r4, #8]
 800b50e:	6123      	str	r3, [r4, #16]
 800b510:	7561      	strb	r1, [r4, #21]
 800b512:	7da0      	ldrb	r0, [r4, #22]
 800b514:	f080 0001 	eor.w	r0, r0, #1
 800b518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b520:	42b7      	cmp	r7, r6
 800b522:	d92a      	bls.n	800b57a <ucdr_deserialize_int32_t+0xba>
 800b524:	6923      	ldr	r3, [r4, #16]
 800b526:	60a7      	str	r7, [r4, #8]
 800b528:	1bbf      	subs	r7, r7, r6
 800b52a:	443b      	add	r3, r7
 800b52c:	f1c7 0904 	rsb	r9, r7, #4
 800b530:	6123      	str	r3, [r4, #16]
 800b532:	4649      	mov	r1, r9
 800b534:	4620      	mov	r0, r4
 800b536:	f000 fb73 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b53a:	b368      	cbz	r0, 800b598 <ucdr_deserialize_int32_t+0xd8>
 800b53c:	7d23      	ldrb	r3, [r4, #20]
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d040      	beq.n	800b5c4 <ucdr_deserialize_int32_t+0x104>
 800b542:	78f3      	ldrb	r3, [r6, #3]
 800b544:	702b      	strb	r3, [r5, #0]
 800b546:	78b3      	ldrb	r3, [r6, #2]
 800b548:	706b      	strb	r3, [r5, #1]
 800b54a:	2f01      	cmp	r7, #1
 800b54c:	d031      	beq.n	800b5b2 <ucdr_deserialize_int32_t+0xf2>
 800b54e:	7873      	ldrb	r3, [r6, #1]
 800b550:	70ab      	strb	r3, [r5, #2]
 800b552:	2f02      	cmp	r7, #2
 800b554:	f105 0503 	add.w	r5, r5, #3
 800b558:	d02f      	beq.n	800b5ba <ucdr_deserialize_int32_t+0xfa>
 800b55a:	7833      	ldrb	r3, [r6, #0]
 800b55c:	702b      	strb	r3, [r5, #0]
 800b55e:	6923      	ldr	r3, [r4, #16]
 800b560:	68a2      	ldr	r2, [r4, #8]
 800b562:	7da0      	ldrb	r0, [r4, #22]
 800b564:	2104      	movs	r1, #4
 800b566:	3304      	adds	r3, #4
 800b568:	444a      	add	r2, r9
 800b56a:	1bdb      	subs	r3, r3, r7
 800b56c:	7561      	strb	r1, [r4, #21]
 800b56e:	60a2      	str	r2, [r4, #8]
 800b570:	6123      	str	r3, [r4, #16]
 800b572:	f080 0001 	eor.w	r0, r0, #1
 800b576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b57a:	2104      	movs	r1, #4
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 fb4f 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b582:	2800      	cmp	r0, #0
 800b584:	d0c5      	beq.n	800b512 <ucdr_deserialize_int32_t+0x52>
 800b586:	7d23      	ldrb	r3, [r4, #20]
 800b588:	68a2      	ldr	r2, [r4, #8]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d017      	beq.n	800b5be <ucdr_deserialize_int32_t+0xfe>
 800b58e:	78d3      	ldrb	r3, [r2, #3]
 800b590:	e7ad      	b.n	800b4ee <ucdr_deserialize_int32_t+0x2e>
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	602b      	str	r3, [r5, #0]
 800b596:	e7b4      	b.n	800b502 <ucdr_deserialize_int32_t+0x42>
 800b598:	68a2      	ldr	r2, [r4, #8]
 800b59a:	6923      	ldr	r3, [r4, #16]
 800b59c:	7da0      	ldrb	r0, [r4, #22]
 800b59e:	f884 8015 	strb.w	r8, [r4, #21]
 800b5a2:	1bd2      	subs	r2, r2, r7
 800b5a4:	1bdb      	subs	r3, r3, r7
 800b5a6:	60a2      	str	r2, [r4, #8]
 800b5a8:	6123      	str	r3, [r4, #16]
 800b5aa:	f080 0001 	eor.w	r0, r0, #1
 800b5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5b2:	68a3      	ldr	r3, [r4, #8]
 800b5b4:	785b      	ldrb	r3, [r3, #1]
 800b5b6:	70ab      	strb	r3, [r5, #2]
 800b5b8:	3503      	adds	r5, #3
 800b5ba:	68a6      	ldr	r6, [r4, #8]
 800b5bc:	e7cd      	b.n	800b55a <ucdr_deserialize_int32_t+0x9a>
 800b5be:	6813      	ldr	r3, [r2, #0]
 800b5c0:	602b      	str	r3, [r5, #0]
 800b5c2:	e79e      	b.n	800b502 <ucdr_deserialize_int32_t+0x42>
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	463a      	mov	r2, r7
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f00e fd90 	bl	801a0ee <memcpy>
 800b5ce:	68a1      	ldr	r1, [r4, #8]
 800b5d0:	464a      	mov	r2, r9
 800b5d2:	19e8      	adds	r0, r5, r7
 800b5d4:	f00e fd8b 	bl	801a0ee <memcpy>
 800b5d8:	e7c1      	b.n	800b55e <ucdr_deserialize_int32_t+0x9e>
 800b5da:	bf00      	nop

0800b5dc <ucdr_serialize_double>:
 800b5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e0:	2108      	movs	r1, #8
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	4604      	mov	r4, r0
 800b5e6:	ed8d 0b00 	vstr	d0, [sp]
 800b5ea:	f000 fb6d 	bl	800bcc8 <ucdr_buffer_alignment>
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	7d67      	ldrb	r7, [r4, #21]
 800b5f4:	f000 fbac 	bl	800bd50 <ucdr_advance_buffer>
 800b5f8:	2108      	movs	r1, #8
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 fb04 	bl	800bc08 <ucdr_check_buffer_available_for>
 800b600:	2800      	cmp	r0, #0
 800b602:	d14d      	bne.n	800b6a0 <ucdr_serialize_double+0xc4>
 800b604:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b608:	42ab      	cmp	r3, r5
 800b60a:	d944      	bls.n	800b696 <ucdr_serialize_double+0xba>
 800b60c:	1b5e      	subs	r6, r3, r5
 800b60e:	60a3      	str	r3, [r4, #8]
 800b610:	6923      	ldr	r3, [r4, #16]
 800b612:	f1c6 0808 	rsb	r8, r6, #8
 800b616:	4433      	add	r3, r6
 800b618:	6123      	str	r3, [r4, #16]
 800b61a:	4641      	mov	r1, r8
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 faff 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b622:	2800      	cmp	r0, #0
 800b624:	d072      	beq.n	800b70c <ucdr_serialize_double+0x130>
 800b626:	7d23      	ldrb	r3, [r4, #20]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	f000 8092 	beq.w	800b752 <ucdr_serialize_double+0x176>
 800b62e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b632:	702b      	strb	r3, [r5, #0]
 800b634:	2e01      	cmp	r6, #1
 800b636:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b63a:	706b      	strb	r3, [r5, #1]
 800b63c:	d073      	beq.n	800b726 <ucdr_serialize_double+0x14a>
 800b63e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b642:	70ab      	strb	r3, [r5, #2]
 800b644:	2e02      	cmp	r6, #2
 800b646:	d072      	beq.n	800b72e <ucdr_serialize_double+0x152>
 800b648:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b64c:	70eb      	strb	r3, [r5, #3]
 800b64e:	2e03      	cmp	r6, #3
 800b650:	d071      	beq.n	800b736 <ucdr_serialize_double+0x15a>
 800b652:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b656:	712b      	strb	r3, [r5, #4]
 800b658:	2e04      	cmp	r6, #4
 800b65a:	d070      	beq.n	800b73e <ucdr_serialize_double+0x162>
 800b65c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b660:	716b      	strb	r3, [r5, #5]
 800b662:	2e05      	cmp	r6, #5
 800b664:	d06f      	beq.n	800b746 <ucdr_serialize_double+0x16a>
 800b666:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b66a:	71ab      	strb	r3, [r5, #6]
 800b66c:	2e06      	cmp	r6, #6
 800b66e:	d06e      	beq.n	800b74e <ucdr_serialize_double+0x172>
 800b670:	3507      	adds	r5, #7
 800b672:	f89d 3000 	ldrb.w	r3, [sp]
 800b676:	702b      	strb	r3, [r5, #0]
 800b678:	6923      	ldr	r3, [r4, #16]
 800b67a:	68a2      	ldr	r2, [r4, #8]
 800b67c:	7da0      	ldrb	r0, [r4, #22]
 800b67e:	3308      	adds	r3, #8
 800b680:	4442      	add	r2, r8
 800b682:	1b9b      	subs	r3, r3, r6
 800b684:	2108      	movs	r1, #8
 800b686:	f080 0001 	eor.w	r0, r0, #1
 800b68a:	60a2      	str	r2, [r4, #8]
 800b68c:	6123      	str	r3, [r4, #16]
 800b68e:	7561      	strb	r1, [r4, #21]
 800b690:	b002      	add	sp, #8
 800b692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b696:	2108      	movs	r1, #8
 800b698:	4620      	mov	r0, r4
 800b69a:	f000 fac1 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b69e:	b350      	cbz	r0, 800b6f6 <ucdr_serialize_double+0x11a>
 800b6a0:	7d22      	ldrb	r2, [r4, #20]
 800b6a2:	68a3      	ldr	r3, [r4, #8]
 800b6a4:	2a01      	cmp	r2, #1
 800b6a6:	d02c      	beq.n	800b702 <ucdr_serialize_double+0x126>
 800b6a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b6ac:	701a      	strb	r2, [r3, #0]
 800b6ae:	68a3      	ldr	r3, [r4, #8]
 800b6b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6b4:	705a      	strb	r2, [r3, #1]
 800b6b6:	68a3      	ldr	r3, [r4, #8]
 800b6b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b6bc:	709a      	strb	r2, [r3, #2]
 800b6be:	68a3      	ldr	r3, [r4, #8]
 800b6c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b6c4:	70da      	strb	r2, [r3, #3]
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b6cc:	711a      	strb	r2, [r3, #4]
 800b6ce:	68a3      	ldr	r3, [r4, #8]
 800b6d0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b6d4:	715a      	strb	r2, [r3, #5]
 800b6d6:	68a3      	ldr	r3, [r4, #8]
 800b6d8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b6dc:	719a      	strb	r2, [r3, #6]
 800b6de:	68a3      	ldr	r3, [r4, #8]
 800b6e0:	f89d 2000 	ldrb.w	r2, [sp]
 800b6e4:	71da      	strb	r2, [r3, #7]
 800b6e6:	68a2      	ldr	r2, [r4, #8]
 800b6e8:	6923      	ldr	r3, [r4, #16]
 800b6ea:	3208      	adds	r2, #8
 800b6ec:	3308      	adds	r3, #8
 800b6ee:	2108      	movs	r1, #8
 800b6f0:	60a2      	str	r2, [r4, #8]
 800b6f2:	6123      	str	r3, [r4, #16]
 800b6f4:	7561      	strb	r1, [r4, #21]
 800b6f6:	7da0      	ldrb	r0, [r4, #22]
 800b6f8:	f080 0001 	eor.w	r0, r0, #1
 800b6fc:	b002      	add	sp, #8
 800b6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b702:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b706:	6019      	str	r1, [r3, #0]
 800b708:	605a      	str	r2, [r3, #4]
 800b70a:	e7ec      	b.n	800b6e6 <ucdr_serialize_double+0x10a>
 800b70c:	68a2      	ldr	r2, [r4, #8]
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	7da0      	ldrb	r0, [r4, #22]
 800b712:	7567      	strb	r7, [r4, #21]
 800b714:	1b92      	subs	r2, r2, r6
 800b716:	1b9b      	subs	r3, r3, r6
 800b718:	f080 0001 	eor.w	r0, r0, #1
 800b71c:	60a2      	str	r2, [r4, #8]
 800b71e:	6123      	str	r3, [r4, #16]
 800b720:	b002      	add	sp, #8
 800b722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b726:	68a3      	ldr	r3, [r4, #8]
 800b728:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b72c:	701a      	strb	r2, [r3, #0]
 800b72e:	68a3      	ldr	r3, [r4, #8]
 800b730:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b734:	701a      	strb	r2, [r3, #0]
 800b736:	68a3      	ldr	r3, [r4, #8]
 800b738:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b744:	701a      	strb	r2, [r3, #0]
 800b746:	68a3      	ldr	r3, [r4, #8]
 800b748:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b74c:	701a      	strb	r2, [r3, #0]
 800b74e:	68a5      	ldr	r5, [r4, #8]
 800b750:	e78f      	b.n	800b672 <ucdr_serialize_double+0x96>
 800b752:	4628      	mov	r0, r5
 800b754:	466d      	mov	r5, sp
 800b756:	4632      	mov	r2, r6
 800b758:	4629      	mov	r1, r5
 800b75a:	f00e fcc8 	bl	801a0ee <memcpy>
 800b75e:	68a0      	ldr	r0, [r4, #8]
 800b760:	4642      	mov	r2, r8
 800b762:	19a9      	adds	r1, r5, r6
 800b764:	f00e fcc3 	bl	801a0ee <memcpy>
 800b768:	e786      	b.n	800b678 <ucdr_serialize_double+0x9c>
 800b76a:	bf00      	nop

0800b76c <ucdr_serialize_endian_double>:
 800b76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b770:	460e      	mov	r6, r1
 800b772:	b083      	sub	sp, #12
 800b774:	2108      	movs	r1, #8
 800b776:	4604      	mov	r4, r0
 800b778:	ed8d 0b00 	vstr	d0, [sp]
 800b77c:	f000 faa4 	bl	800bcc8 <ucdr_buffer_alignment>
 800b780:	4601      	mov	r1, r0
 800b782:	4620      	mov	r0, r4
 800b784:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b788:	f000 fae2 	bl	800bd50 <ucdr_advance_buffer>
 800b78c:	2108      	movs	r1, #8
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 fa3a 	bl	800bc08 <ucdr_check_buffer_available_for>
 800b794:	2800      	cmp	r0, #0
 800b796:	d14c      	bne.n	800b832 <ucdr_serialize_endian_double+0xc6>
 800b798:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800b79c:	42bd      	cmp	r5, r7
 800b79e:	d943      	bls.n	800b828 <ucdr_serialize_endian_double+0xbc>
 800b7a0:	6923      	ldr	r3, [r4, #16]
 800b7a2:	60a5      	str	r5, [r4, #8]
 800b7a4:	1bed      	subs	r5, r5, r7
 800b7a6:	442b      	add	r3, r5
 800b7a8:	f1c5 0908 	rsb	r9, r5, #8
 800b7ac:	6123      	str	r3, [r4, #16]
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f000 fa35 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d070      	beq.n	800b89c <ucdr_serialize_endian_double+0x130>
 800b7ba:	2e01      	cmp	r6, #1
 800b7bc:	f000 8092 	beq.w	800b8e4 <ucdr_serialize_endian_double+0x178>
 800b7c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b7c4:	703b      	strb	r3, [r7, #0]
 800b7c6:	2d01      	cmp	r5, #1
 800b7c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b7cc:	707b      	strb	r3, [r7, #1]
 800b7ce:	d073      	beq.n	800b8b8 <ucdr_serialize_endian_double+0x14c>
 800b7d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b7d4:	70bb      	strb	r3, [r7, #2]
 800b7d6:	2d02      	cmp	r5, #2
 800b7d8:	d072      	beq.n	800b8c0 <ucdr_serialize_endian_double+0x154>
 800b7da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b7de:	70fb      	strb	r3, [r7, #3]
 800b7e0:	2d03      	cmp	r5, #3
 800b7e2:	d071      	beq.n	800b8c8 <ucdr_serialize_endian_double+0x15c>
 800b7e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b7e8:	713b      	strb	r3, [r7, #4]
 800b7ea:	2d04      	cmp	r5, #4
 800b7ec:	d070      	beq.n	800b8d0 <ucdr_serialize_endian_double+0x164>
 800b7ee:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b7f2:	717b      	strb	r3, [r7, #5]
 800b7f4:	2d05      	cmp	r5, #5
 800b7f6:	d06f      	beq.n	800b8d8 <ucdr_serialize_endian_double+0x16c>
 800b7f8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b7fc:	71bb      	strb	r3, [r7, #6]
 800b7fe:	2d06      	cmp	r5, #6
 800b800:	d06e      	beq.n	800b8e0 <ucdr_serialize_endian_double+0x174>
 800b802:	3707      	adds	r7, #7
 800b804:	f89d 3000 	ldrb.w	r3, [sp]
 800b808:	703b      	strb	r3, [r7, #0]
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	68a2      	ldr	r2, [r4, #8]
 800b80e:	7da0      	ldrb	r0, [r4, #22]
 800b810:	3308      	adds	r3, #8
 800b812:	444a      	add	r2, r9
 800b814:	1b5b      	subs	r3, r3, r5
 800b816:	2108      	movs	r1, #8
 800b818:	f080 0001 	eor.w	r0, r0, #1
 800b81c:	60a2      	str	r2, [r4, #8]
 800b81e:	6123      	str	r3, [r4, #16]
 800b820:	7561      	strb	r1, [r4, #21]
 800b822:	b003      	add	sp, #12
 800b824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b828:	2108      	movs	r1, #8
 800b82a:	4620      	mov	r0, r4
 800b82c:	f000 f9f8 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b830:	b348      	cbz	r0, 800b886 <ucdr_serialize_endian_double+0x11a>
 800b832:	2e01      	cmp	r6, #1
 800b834:	68a3      	ldr	r3, [r4, #8]
 800b836:	d02c      	beq.n	800b892 <ucdr_serialize_endian_double+0x126>
 800b838:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b83c:	701a      	strb	r2, [r3, #0]
 800b83e:	68a3      	ldr	r3, [r4, #8]
 800b840:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b844:	705a      	strb	r2, [r3, #1]
 800b846:	68a3      	ldr	r3, [r4, #8]
 800b848:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b84c:	709a      	strb	r2, [r3, #2]
 800b84e:	68a3      	ldr	r3, [r4, #8]
 800b850:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b854:	70da      	strb	r2, [r3, #3]
 800b856:	68a3      	ldr	r3, [r4, #8]
 800b858:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b85c:	711a      	strb	r2, [r3, #4]
 800b85e:	68a3      	ldr	r3, [r4, #8]
 800b860:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b864:	715a      	strb	r2, [r3, #5]
 800b866:	68a3      	ldr	r3, [r4, #8]
 800b868:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b86c:	719a      	strb	r2, [r3, #6]
 800b86e:	68a3      	ldr	r3, [r4, #8]
 800b870:	f89d 2000 	ldrb.w	r2, [sp]
 800b874:	71da      	strb	r2, [r3, #7]
 800b876:	68a2      	ldr	r2, [r4, #8]
 800b878:	6923      	ldr	r3, [r4, #16]
 800b87a:	3208      	adds	r2, #8
 800b87c:	3308      	adds	r3, #8
 800b87e:	2108      	movs	r1, #8
 800b880:	60a2      	str	r2, [r4, #8]
 800b882:	6123      	str	r3, [r4, #16]
 800b884:	7561      	strb	r1, [r4, #21]
 800b886:	7da0      	ldrb	r0, [r4, #22]
 800b888:	f080 0001 	eor.w	r0, r0, #1
 800b88c:	b003      	add	sp, #12
 800b88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b892:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b896:	6019      	str	r1, [r3, #0]
 800b898:	605a      	str	r2, [r3, #4]
 800b89a:	e7ec      	b.n	800b876 <ucdr_serialize_endian_double+0x10a>
 800b89c:	68a2      	ldr	r2, [r4, #8]
 800b89e:	6923      	ldr	r3, [r4, #16]
 800b8a0:	7da0      	ldrb	r0, [r4, #22]
 800b8a2:	f884 8015 	strb.w	r8, [r4, #21]
 800b8a6:	1b52      	subs	r2, r2, r5
 800b8a8:	1b5b      	subs	r3, r3, r5
 800b8aa:	f080 0001 	eor.w	r0, r0, #1
 800b8ae:	60a2      	str	r2, [r4, #8]
 800b8b0:	6123      	str	r3, [r4, #16]
 800b8b2:	b003      	add	sp, #12
 800b8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8b8:	68a3      	ldr	r3, [r4, #8]
 800b8ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8be:	701a      	strb	r2, [r3, #0]
 800b8c0:	68a3      	ldr	r3, [r4, #8]
 800b8c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8c6:	701a      	strb	r2, [r3, #0]
 800b8c8:	68a3      	ldr	r3, [r4, #8]
 800b8ca:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b8ce:	701a      	strb	r2, [r3, #0]
 800b8d0:	68a3      	ldr	r3, [r4, #8]
 800b8d2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b8d6:	701a      	strb	r2, [r3, #0]
 800b8d8:	68a3      	ldr	r3, [r4, #8]
 800b8da:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b8de:	701a      	strb	r2, [r3, #0]
 800b8e0:	68a7      	ldr	r7, [r4, #8]
 800b8e2:	e78f      	b.n	800b804 <ucdr_serialize_endian_double+0x98>
 800b8e4:	466e      	mov	r6, sp
 800b8e6:	462a      	mov	r2, r5
 800b8e8:	4631      	mov	r1, r6
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	f00e fbff 	bl	801a0ee <memcpy>
 800b8f0:	68a0      	ldr	r0, [r4, #8]
 800b8f2:	464a      	mov	r2, r9
 800b8f4:	1971      	adds	r1, r6, r5
 800b8f6:	f00e fbfa 	bl	801a0ee <memcpy>
 800b8fa:	e786      	b.n	800b80a <ucdr_serialize_endian_double+0x9e>

0800b8fc <ucdr_deserialize_double>:
 800b8fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b900:	460d      	mov	r5, r1
 800b902:	2108      	movs	r1, #8
 800b904:	4604      	mov	r4, r0
 800b906:	f000 f9df 	bl	800bcc8 <ucdr_buffer_alignment>
 800b90a:	4601      	mov	r1, r0
 800b90c:	4620      	mov	r0, r4
 800b90e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b912:	f000 fa1d 	bl	800bd50 <ucdr_advance_buffer>
 800b916:	2108      	movs	r1, #8
 800b918:	4620      	mov	r0, r4
 800b91a:	f000 f975 	bl	800bc08 <ucdr_check_buffer_available_for>
 800b91e:	2800      	cmp	r0, #0
 800b920:	d147      	bne.n	800b9b2 <ucdr_deserialize_double+0xb6>
 800b922:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b926:	42be      	cmp	r6, r7
 800b928:	d93e      	bls.n	800b9a8 <ucdr_deserialize_double+0xac>
 800b92a:	6923      	ldr	r3, [r4, #16]
 800b92c:	60a6      	str	r6, [r4, #8]
 800b92e:	1bf6      	subs	r6, r6, r7
 800b930:	4433      	add	r3, r6
 800b932:	f1c6 0908 	rsb	r9, r6, #8
 800b936:	6123      	str	r3, [r4, #16]
 800b938:	4649      	mov	r1, r9
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 f970 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b940:	2800      	cmp	r0, #0
 800b942:	d063      	beq.n	800ba0c <ucdr_deserialize_double+0x110>
 800b944:	7d23      	ldrb	r3, [r4, #20]
 800b946:	2b01      	cmp	r3, #1
 800b948:	f000 8083 	beq.w	800ba52 <ucdr_deserialize_double+0x156>
 800b94c:	79fb      	ldrb	r3, [r7, #7]
 800b94e:	702b      	strb	r3, [r5, #0]
 800b950:	79bb      	ldrb	r3, [r7, #6]
 800b952:	706b      	strb	r3, [r5, #1]
 800b954:	2e01      	cmp	r6, #1
 800b956:	d066      	beq.n	800ba26 <ucdr_deserialize_double+0x12a>
 800b958:	797b      	ldrb	r3, [r7, #5]
 800b95a:	70ab      	strb	r3, [r5, #2]
 800b95c:	2e02      	cmp	r6, #2
 800b95e:	f000 8089 	beq.w	800ba74 <ucdr_deserialize_double+0x178>
 800b962:	793b      	ldrb	r3, [r7, #4]
 800b964:	70eb      	strb	r3, [r5, #3]
 800b966:	2e03      	cmp	r6, #3
 800b968:	f000 8082 	beq.w	800ba70 <ucdr_deserialize_double+0x174>
 800b96c:	78fb      	ldrb	r3, [r7, #3]
 800b96e:	712b      	strb	r3, [r5, #4]
 800b970:	2e04      	cmp	r6, #4
 800b972:	d07b      	beq.n	800ba6c <ucdr_deserialize_double+0x170>
 800b974:	78bb      	ldrb	r3, [r7, #2]
 800b976:	716b      	strb	r3, [r5, #5]
 800b978:	2e05      	cmp	r6, #5
 800b97a:	d075      	beq.n	800ba68 <ucdr_deserialize_double+0x16c>
 800b97c:	787b      	ldrb	r3, [r7, #1]
 800b97e:	71ab      	strb	r3, [r5, #6]
 800b980:	2e06      	cmp	r6, #6
 800b982:	f105 0507 	add.w	r5, r5, #7
 800b986:	d062      	beq.n	800ba4e <ucdr_deserialize_double+0x152>
 800b988:	783b      	ldrb	r3, [r7, #0]
 800b98a:	702b      	strb	r3, [r5, #0]
 800b98c:	6923      	ldr	r3, [r4, #16]
 800b98e:	68a2      	ldr	r2, [r4, #8]
 800b990:	7da0      	ldrb	r0, [r4, #22]
 800b992:	2108      	movs	r1, #8
 800b994:	3308      	adds	r3, #8
 800b996:	444a      	add	r2, r9
 800b998:	1b9b      	subs	r3, r3, r6
 800b99a:	7561      	strb	r1, [r4, #21]
 800b99c:	60a2      	str	r2, [r4, #8]
 800b99e:	6123      	str	r3, [r4, #16]
 800b9a0:	f080 0001 	eor.w	r0, r0, #1
 800b9a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a8:	2108      	movs	r1, #8
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f000 f938 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800b9b0:	b310      	cbz	r0, 800b9f8 <ucdr_deserialize_double+0xfc>
 800b9b2:	7d22      	ldrb	r2, [r4, #20]
 800b9b4:	68a3      	ldr	r3, [r4, #8]
 800b9b6:	2a01      	cmp	r2, #1
 800b9b8:	d023      	beq.n	800ba02 <ucdr_deserialize_double+0x106>
 800b9ba:	79db      	ldrb	r3, [r3, #7]
 800b9bc:	702b      	strb	r3, [r5, #0]
 800b9be:	68a3      	ldr	r3, [r4, #8]
 800b9c0:	799b      	ldrb	r3, [r3, #6]
 800b9c2:	706b      	strb	r3, [r5, #1]
 800b9c4:	68a3      	ldr	r3, [r4, #8]
 800b9c6:	795b      	ldrb	r3, [r3, #5]
 800b9c8:	70ab      	strb	r3, [r5, #2]
 800b9ca:	68a3      	ldr	r3, [r4, #8]
 800b9cc:	791b      	ldrb	r3, [r3, #4]
 800b9ce:	70eb      	strb	r3, [r5, #3]
 800b9d0:	68a3      	ldr	r3, [r4, #8]
 800b9d2:	78db      	ldrb	r3, [r3, #3]
 800b9d4:	712b      	strb	r3, [r5, #4]
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	789b      	ldrb	r3, [r3, #2]
 800b9da:	716b      	strb	r3, [r5, #5]
 800b9dc:	68a3      	ldr	r3, [r4, #8]
 800b9de:	785b      	ldrb	r3, [r3, #1]
 800b9e0:	71ab      	strb	r3, [r5, #6]
 800b9e2:	68a3      	ldr	r3, [r4, #8]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	71eb      	strb	r3, [r5, #7]
 800b9e8:	68a2      	ldr	r2, [r4, #8]
 800b9ea:	6923      	ldr	r3, [r4, #16]
 800b9ec:	3208      	adds	r2, #8
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	2108      	movs	r1, #8
 800b9f2:	60a2      	str	r2, [r4, #8]
 800b9f4:	6123      	str	r3, [r4, #16]
 800b9f6:	7561      	strb	r1, [r4, #21]
 800b9f8:	7da0      	ldrb	r0, [r4, #22]
 800b9fa:	f080 0001 	eor.w	r0, r0, #1
 800b9fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	606b      	str	r3, [r5, #4]
 800ba08:	602a      	str	r2, [r5, #0]
 800ba0a:	e7ed      	b.n	800b9e8 <ucdr_deserialize_double+0xec>
 800ba0c:	68a2      	ldr	r2, [r4, #8]
 800ba0e:	6923      	ldr	r3, [r4, #16]
 800ba10:	7da0      	ldrb	r0, [r4, #22]
 800ba12:	f884 8015 	strb.w	r8, [r4, #21]
 800ba16:	1b92      	subs	r2, r2, r6
 800ba18:	1b9b      	subs	r3, r3, r6
 800ba1a:	60a2      	str	r2, [r4, #8]
 800ba1c:	6123      	str	r3, [r4, #16]
 800ba1e:	f080 0001 	eor.w	r0, r0, #1
 800ba22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	795b      	ldrb	r3, [r3, #5]
 800ba2a:	70ab      	strb	r3, [r5, #2]
 800ba2c:	3503      	adds	r5, #3
 800ba2e:	68a3      	ldr	r3, [r4, #8]
 800ba30:	791b      	ldrb	r3, [r3, #4]
 800ba32:	f805 3b01 	strb.w	r3, [r5], #1
 800ba36:	68a3      	ldr	r3, [r4, #8]
 800ba38:	78db      	ldrb	r3, [r3, #3]
 800ba3a:	f805 3b01 	strb.w	r3, [r5], #1
 800ba3e:	68a3      	ldr	r3, [r4, #8]
 800ba40:	789b      	ldrb	r3, [r3, #2]
 800ba42:	f805 3b01 	strb.w	r3, [r5], #1
 800ba46:	68a3      	ldr	r3, [r4, #8]
 800ba48:	785b      	ldrb	r3, [r3, #1]
 800ba4a:	f805 3b01 	strb.w	r3, [r5], #1
 800ba4e:	68a7      	ldr	r7, [r4, #8]
 800ba50:	e79a      	b.n	800b988 <ucdr_deserialize_double+0x8c>
 800ba52:	4639      	mov	r1, r7
 800ba54:	4632      	mov	r2, r6
 800ba56:	4628      	mov	r0, r5
 800ba58:	f00e fb49 	bl	801a0ee <memcpy>
 800ba5c:	68a1      	ldr	r1, [r4, #8]
 800ba5e:	464a      	mov	r2, r9
 800ba60:	19a8      	adds	r0, r5, r6
 800ba62:	f00e fb44 	bl	801a0ee <memcpy>
 800ba66:	e791      	b.n	800b98c <ucdr_deserialize_double+0x90>
 800ba68:	3506      	adds	r5, #6
 800ba6a:	e7ec      	b.n	800ba46 <ucdr_deserialize_double+0x14a>
 800ba6c:	3505      	adds	r5, #5
 800ba6e:	e7e6      	b.n	800ba3e <ucdr_deserialize_double+0x142>
 800ba70:	3504      	adds	r5, #4
 800ba72:	e7e0      	b.n	800ba36 <ucdr_deserialize_double+0x13a>
 800ba74:	3503      	adds	r5, #3
 800ba76:	e7da      	b.n	800ba2e <ucdr_deserialize_double+0x132>

0800ba78 <ucdr_deserialize_endian_double>:
 800ba78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba7c:	460f      	mov	r7, r1
 800ba7e:	2108      	movs	r1, #8
 800ba80:	4604      	mov	r4, r0
 800ba82:	4615      	mov	r5, r2
 800ba84:	f000 f920 	bl	800bcc8 <ucdr_buffer_alignment>
 800ba88:	4601      	mov	r1, r0
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ba90:	f000 f95e 	bl	800bd50 <ucdr_advance_buffer>
 800ba94:	2108      	movs	r1, #8
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 f8b6 	bl	800bc08 <ucdr_check_buffer_available_for>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d14f      	bne.n	800bb40 <ucdr_deserialize_endian_double+0xc8>
 800baa0:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800baa4:	4546      	cmp	r6, r8
 800baa6:	d946      	bls.n	800bb36 <ucdr_deserialize_endian_double+0xbe>
 800baa8:	6923      	ldr	r3, [r4, #16]
 800baaa:	60a6      	str	r6, [r4, #8]
 800baac:	eba6 0608 	sub.w	r6, r6, r8
 800bab0:	4433      	add	r3, r6
 800bab2:	f1c6 0a08 	rsb	sl, r6, #8
 800bab6:	6123      	str	r3, [r4, #16]
 800bab8:	4651      	mov	r1, sl
 800baba:	4620      	mov	r0, r4
 800babc:	f000 f8b0 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d069      	beq.n	800bb98 <ucdr_deserialize_endian_double+0x120>
 800bac4:	2f01      	cmp	r7, #1
 800bac6:	f000 808b 	beq.w	800bbe0 <ucdr_deserialize_endian_double+0x168>
 800baca:	f898 3007 	ldrb.w	r3, [r8, #7]
 800bace:	702b      	strb	r3, [r5, #0]
 800bad0:	f898 3006 	ldrb.w	r3, [r8, #6]
 800bad4:	706b      	strb	r3, [r5, #1]
 800bad6:	2e01      	cmp	r6, #1
 800bad8:	d06b      	beq.n	800bbb2 <ucdr_deserialize_endian_double+0x13a>
 800bada:	f898 3005 	ldrb.w	r3, [r8, #5]
 800bade:	70ab      	strb	r3, [r5, #2]
 800bae0:	2e02      	cmp	r6, #2
 800bae2:	f000 808e 	beq.w	800bc02 <ucdr_deserialize_endian_double+0x18a>
 800bae6:	f898 3004 	ldrb.w	r3, [r8, #4]
 800baea:	70eb      	strb	r3, [r5, #3]
 800baec:	2e03      	cmp	r6, #3
 800baee:	f000 8086 	beq.w	800bbfe <ucdr_deserialize_endian_double+0x186>
 800baf2:	f898 3003 	ldrb.w	r3, [r8, #3]
 800baf6:	712b      	strb	r3, [r5, #4]
 800baf8:	2e04      	cmp	r6, #4
 800bafa:	d07e      	beq.n	800bbfa <ucdr_deserialize_endian_double+0x182>
 800bafc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bb00:	716b      	strb	r3, [r5, #5]
 800bb02:	2e05      	cmp	r6, #5
 800bb04:	d077      	beq.n	800bbf6 <ucdr_deserialize_endian_double+0x17e>
 800bb06:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bb0a:	71ab      	strb	r3, [r5, #6]
 800bb0c:	2e06      	cmp	r6, #6
 800bb0e:	f105 0507 	add.w	r5, r5, #7
 800bb12:	d062      	beq.n	800bbda <ucdr_deserialize_endian_double+0x162>
 800bb14:	f898 3000 	ldrb.w	r3, [r8]
 800bb18:	702b      	strb	r3, [r5, #0]
 800bb1a:	6923      	ldr	r3, [r4, #16]
 800bb1c:	68a2      	ldr	r2, [r4, #8]
 800bb1e:	7da0      	ldrb	r0, [r4, #22]
 800bb20:	2108      	movs	r1, #8
 800bb22:	3308      	adds	r3, #8
 800bb24:	4452      	add	r2, sl
 800bb26:	1b9b      	subs	r3, r3, r6
 800bb28:	7561      	strb	r1, [r4, #21]
 800bb2a:	60a2      	str	r2, [r4, #8]
 800bb2c:	6123      	str	r3, [r4, #16]
 800bb2e:	f080 0001 	eor.w	r0, r0, #1
 800bb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb36:	2108      	movs	r1, #8
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 f871 	bl	800bc20 <ucdr_check_final_buffer_behavior>
 800bb3e:	b308      	cbz	r0, 800bb84 <ucdr_deserialize_endian_double+0x10c>
 800bb40:	2f01      	cmp	r7, #1
 800bb42:	68a3      	ldr	r3, [r4, #8]
 800bb44:	d023      	beq.n	800bb8e <ucdr_deserialize_endian_double+0x116>
 800bb46:	79db      	ldrb	r3, [r3, #7]
 800bb48:	702b      	strb	r3, [r5, #0]
 800bb4a:	68a3      	ldr	r3, [r4, #8]
 800bb4c:	799b      	ldrb	r3, [r3, #6]
 800bb4e:	706b      	strb	r3, [r5, #1]
 800bb50:	68a3      	ldr	r3, [r4, #8]
 800bb52:	795b      	ldrb	r3, [r3, #5]
 800bb54:	70ab      	strb	r3, [r5, #2]
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	791b      	ldrb	r3, [r3, #4]
 800bb5a:	70eb      	strb	r3, [r5, #3]
 800bb5c:	68a3      	ldr	r3, [r4, #8]
 800bb5e:	78db      	ldrb	r3, [r3, #3]
 800bb60:	712b      	strb	r3, [r5, #4]
 800bb62:	68a3      	ldr	r3, [r4, #8]
 800bb64:	789b      	ldrb	r3, [r3, #2]
 800bb66:	716b      	strb	r3, [r5, #5]
 800bb68:	68a3      	ldr	r3, [r4, #8]
 800bb6a:	785b      	ldrb	r3, [r3, #1]
 800bb6c:	71ab      	strb	r3, [r5, #6]
 800bb6e:	68a3      	ldr	r3, [r4, #8]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	71eb      	strb	r3, [r5, #7]
 800bb74:	68a2      	ldr	r2, [r4, #8]
 800bb76:	6923      	ldr	r3, [r4, #16]
 800bb78:	3208      	adds	r2, #8
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	2108      	movs	r1, #8
 800bb7e:	60a2      	str	r2, [r4, #8]
 800bb80:	6123      	str	r3, [r4, #16]
 800bb82:	7561      	strb	r1, [r4, #21]
 800bb84:	7da0      	ldrb	r0, [r4, #22]
 800bb86:	f080 0001 	eor.w	r0, r0, #1
 800bb8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	606b      	str	r3, [r5, #4]
 800bb94:	602a      	str	r2, [r5, #0]
 800bb96:	e7ed      	b.n	800bb74 <ucdr_deserialize_endian_double+0xfc>
 800bb98:	68a2      	ldr	r2, [r4, #8]
 800bb9a:	6923      	ldr	r3, [r4, #16]
 800bb9c:	7da0      	ldrb	r0, [r4, #22]
 800bb9e:	f884 9015 	strb.w	r9, [r4, #21]
 800bba2:	1b92      	subs	r2, r2, r6
 800bba4:	1b9b      	subs	r3, r3, r6
 800bba6:	60a2      	str	r2, [r4, #8]
 800bba8:	6123      	str	r3, [r4, #16]
 800bbaa:	f080 0001 	eor.w	r0, r0, #1
 800bbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb2:	68a3      	ldr	r3, [r4, #8]
 800bbb4:	795b      	ldrb	r3, [r3, #5]
 800bbb6:	70ab      	strb	r3, [r5, #2]
 800bbb8:	3503      	adds	r5, #3
 800bbba:	68a3      	ldr	r3, [r4, #8]
 800bbbc:	791b      	ldrb	r3, [r3, #4]
 800bbbe:	f805 3b01 	strb.w	r3, [r5], #1
 800bbc2:	68a3      	ldr	r3, [r4, #8]
 800bbc4:	78db      	ldrb	r3, [r3, #3]
 800bbc6:	f805 3b01 	strb.w	r3, [r5], #1
 800bbca:	68a3      	ldr	r3, [r4, #8]
 800bbcc:	789b      	ldrb	r3, [r3, #2]
 800bbce:	f805 3b01 	strb.w	r3, [r5], #1
 800bbd2:	68a3      	ldr	r3, [r4, #8]
 800bbd4:	785b      	ldrb	r3, [r3, #1]
 800bbd6:	f805 3b01 	strb.w	r3, [r5], #1
 800bbda:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800bbde:	e799      	b.n	800bb14 <ucdr_deserialize_endian_double+0x9c>
 800bbe0:	4641      	mov	r1, r8
 800bbe2:	4632      	mov	r2, r6
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	f00e fa82 	bl	801a0ee <memcpy>
 800bbea:	68a1      	ldr	r1, [r4, #8]
 800bbec:	4652      	mov	r2, sl
 800bbee:	19a8      	adds	r0, r5, r6
 800bbf0:	f00e fa7d 	bl	801a0ee <memcpy>
 800bbf4:	e791      	b.n	800bb1a <ucdr_deserialize_endian_double+0xa2>
 800bbf6:	3506      	adds	r5, #6
 800bbf8:	e7eb      	b.n	800bbd2 <ucdr_deserialize_endian_double+0x15a>
 800bbfa:	3505      	adds	r5, #5
 800bbfc:	e7e5      	b.n	800bbca <ucdr_deserialize_endian_double+0x152>
 800bbfe:	3504      	adds	r5, #4
 800bc00:	e7df      	b.n	800bbc2 <ucdr_deserialize_endian_double+0x14a>
 800bc02:	3503      	adds	r5, #3
 800bc04:	e7d9      	b.n	800bbba <ucdr_deserialize_endian_double+0x142>
 800bc06:	bf00      	nop

0800bc08 <ucdr_check_buffer_available_for>:
 800bc08:	7d83      	ldrb	r3, [r0, #22]
 800bc0a:	b93b      	cbnz	r3, 800bc1c <ucdr_check_buffer_available_for+0x14>
 800bc0c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800bc10:	440b      	add	r3, r1
 800bc12:	4298      	cmp	r0, r3
 800bc14:	bf34      	ite	cc
 800bc16:	2000      	movcc	r0, #0
 800bc18:	2001      	movcs	r0, #1
 800bc1a:	4770      	bx	lr
 800bc1c:	2000      	movs	r0, #0
 800bc1e:	4770      	bx	lr

0800bc20 <ucdr_check_final_buffer_behavior>:
 800bc20:	7d83      	ldrb	r3, [r0, #22]
 800bc22:	b943      	cbnz	r3, 800bc36 <ucdr_check_final_buffer_behavior+0x16>
 800bc24:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800bc28:	4291      	cmp	r1, r2
 800bc2a:	b510      	push	{r4, lr}
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	d205      	bcs.n	800bc3c <ucdr_check_final_buffer_behavior+0x1c>
 800bc30:	2301      	movs	r3, #1
 800bc32:	4618      	mov	r0, r3
 800bc34:	bd10      	pop	{r4, pc}
 800bc36:	2300      	movs	r3, #0
 800bc38:	4618      	mov	r0, r3
 800bc3a:	4770      	bx	lr
 800bc3c:	6982      	ldr	r2, [r0, #24]
 800bc3e:	b13a      	cbz	r2, 800bc50 <ucdr_check_final_buffer_behavior+0x30>
 800bc40:	69c1      	ldr	r1, [r0, #28]
 800bc42:	4790      	blx	r2
 800bc44:	f080 0301 	eor.w	r3, r0, #1
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	75a0      	strb	r0, [r4, #22]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	bd10      	pop	{r4, pc}
 800bc50:	2001      	movs	r0, #1
 800bc52:	75a0      	strb	r0, [r4, #22]
 800bc54:	e7fa      	b.n	800bc4c <ucdr_check_final_buffer_behavior+0x2c>
 800bc56:	bf00      	nop

0800bc58 <ucdr_set_on_full_buffer_callback>:
 800bc58:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop

0800bc60 <ucdr_init_buffer_origin_offset_endian>:
 800bc60:	b410      	push	{r4}
 800bc62:	9c01      	ldr	r4, [sp, #4]
 800bc64:	6001      	str	r1, [r0, #0]
 800bc66:	440a      	add	r2, r1
 800bc68:	6042      	str	r2, [r0, #4]
 800bc6a:	190a      	adds	r2, r1, r4
 800bc6c:	441c      	add	r4, r3
 800bc6e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800bc72:	6082      	str	r2, [r0, #8]
 800bc74:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bc78:	7503      	strb	r3, [r0, #20]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800bc80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc84:	7542      	strb	r2, [r0, #21]
 800bc86:	7582      	strb	r2, [r0, #22]
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop

0800bc8c <ucdr_init_buffer_origin_offset>:
 800bc8c:	b510      	push	{r4, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	9c04      	ldr	r4, [sp, #16]
 800bc92:	9400      	str	r4, [sp, #0]
 800bc94:	2401      	movs	r4, #1
 800bc96:	9401      	str	r4, [sp, #4]
 800bc98:	f7ff ffe2 	bl	800bc60 <ucdr_init_buffer_origin_offset_endian>
 800bc9c:	b002      	add	sp, #8
 800bc9e:	bd10      	pop	{r4, pc}

0800bca0 <ucdr_init_buffer_origin>:
 800bca0:	b510      	push	{r4, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	2400      	movs	r4, #0
 800bca6:	9400      	str	r4, [sp, #0]
 800bca8:	f7ff fff0 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 800bcac:	b002      	add	sp, #8
 800bcae:	bd10      	pop	{r4, pc}

0800bcb0 <ucdr_init_buffer>:
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	f7ff bff5 	b.w	800bca0 <ucdr_init_buffer_origin>
 800bcb6:	bf00      	nop

0800bcb8 <ucdr_alignment>:
 800bcb8:	fbb0 f3f1 	udiv	r3, r0, r1
 800bcbc:	fb03 0011 	mls	r0, r3, r1, r0
 800bcc0:	1a08      	subs	r0, r1, r0
 800bcc2:	3901      	subs	r1, #1
 800bcc4:	4008      	ands	r0, r1
 800bcc6:	4770      	bx	lr

0800bcc8 <ucdr_buffer_alignment>:
 800bcc8:	7d43      	ldrb	r3, [r0, #21]
 800bcca:	428b      	cmp	r3, r1
 800bccc:	d208      	bcs.n	800bce0 <ucdr_buffer_alignment+0x18>
 800bcce:	6900      	ldr	r0, [r0, #16]
 800bcd0:	fbb0 f3f1 	udiv	r3, r0, r1
 800bcd4:	fb01 0013 	mls	r0, r1, r3, r0
 800bcd8:	1a08      	subs	r0, r1, r0
 800bcda:	3901      	subs	r1, #1
 800bcdc:	4008      	ands	r0, r1
 800bcde:	4770      	bx	lr
 800bce0:	2000      	movs	r0, #0
 800bce2:	4770      	bx	lr

0800bce4 <ucdr_align_to>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	4604      	mov	r4, r0
 800bce8:	460d      	mov	r5, r1
 800bcea:	f7ff ffed 	bl	800bcc8 <ucdr_buffer_alignment>
 800bcee:	68a3      	ldr	r3, [r4, #8]
 800bcf0:	6861      	ldr	r1, [r4, #4]
 800bcf2:	6922      	ldr	r2, [r4, #16]
 800bcf4:	7565      	strb	r5, [r4, #21]
 800bcf6:	4403      	add	r3, r0
 800bcf8:	428b      	cmp	r3, r1
 800bcfa:	bf28      	it	cs
 800bcfc:	460b      	movcs	r3, r1
 800bcfe:	4402      	add	r2, r0
 800bd00:	60a3      	str	r3, [r4, #8]
 800bd02:	6122      	str	r2, [r4, #16]
 800bd04:	bd38      	pop	{r3, r4, r5, pc}
 800bd06:	bf00      	nop

0800bd08 <ucdr_buffer_length>:
 800bd08:	6882      	ldr	r2, [r0, #8]
 800bd0a:	6800      	ldr	r0, [r0, #0]
 800bd0c:	1a10      	subs	r0, r2, r0
 800bd0e:	4770      	bx	lr

0800bd10 <ucdr_buffer_remaining>:
 800bd10:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800bd14:	1a10      	subs	r0, r2, r0
 800bd16:	4770      	bx	lr

0800bd18 <ucdr_check_final_buffer_behavior_array>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	7d83      	ldrb	r3, [r0, #22]
 800bd1c:	b963      	cbnz	r3, 800bd38 <ucdr_check_final_buffer_behavior_array+0x20>
 800bd1e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	4604      	mov	r4, r0
 800bd26:	460d      	mov	r5, r1
 800bd28:	d308      	bcc.n	800bd3c <ucdr_check_final_buffer_behavior_array+0x24>
 800bd2a:	b139      	cbz	r1, 800bd3c <ucdr_check_final_buffer_behavior_array+0x24>
 800bd2c:	6983      	ldr	r3, [r0, #24]
 800bd2e:	b163      	cbz	r3, 800bd4a <ucdr_check_final_buffer_behavior_array+0x32>
 800bd30:	69c1      	ldr	r1, [r0, #28]
 800bd32:	4798      	blx	r3
 800bd34:	75a0      	strb	r0, [r4, #22]
 800bd36:	b108      	cbz	r0, 800bd3c <ucdr_check_final_buffer_behavior_array+0x24>
 800bd38:	2000      	movs	r0, #0
 800bd3a:	bd38      	pop	{r3, r4, r5, pc}
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f7ff ffe7 	bl	800bd10 <ucdr_buffer_remaining>
 800bd42:	42a8      	cmp	r0, r5
 800bd44:	bf28      	it	cs
 800bd46:	4628      	movcs	r0, r5
 800bd48:	bd38      	pop	{r3, r4, r5, pc}
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	7583      	strb	r3, [r0, #22]
 800bd4e:	e7f3      	b.n	800bd38 <ucdr_check_final_buffer_behavior_array+0x20>

0800bd50 <ucdr_advance_buffer>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4604      	mov	r4, r0
 800bd54:	460d      	mov	r5, r1
 800bd56:	f7ff ff57 	bl	800bc08 <ucdr_check_buffer_available_for>
 800bd5a:	b178      	cbz	r0, 800bd7c <ucdr_advance_buffer+0x2c>
 800bd5c:	6923      	ldr	r3, [r4, #16]
 800bd5e:	68a2      	ldr	r2, [r4, #8]
 800bd60:	442b      	add	r3, r5
 800bd62:	6123      	str	r3, [r4, #16]
 800bd64:	2301      	movs	r3, #1
 800bd66:	442a      	add	r2, r5
 800bd68:	7563      	strb	r3, [r4, #21]
 800bd6a:	60a2      	str	r2, [r4, #8]
 800bd6c:	bd38      	pop	{r3, r4, r5, pc}
 800bd6e:	68a2      	ldr	r2, [r4, #8]
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	4402      	add	r2, r0
 800bd74:	4403      	add	r3, r0
 800bd76:	1a2d      	subs	r5, r5, r0
 800bd78:	60a2      	str	r2, [r4, #8]
 800bd7a:	6123      	str	r3, [r4, #16]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	4629      	mov	r1, r5
 800bd80:	4620      	mov	r0, r4
 800bd82:	f7ff ffc9 	bl	800bd18 <ucdr_check_final_buffer_behavior_array>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d1f1      	bne.n	800bd6e <ucdr_advance_buffer+0x1e>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	7563      	strb	r3, [r4, #21]
 800bd8e:	bd38      	pop	{r3, r4, r5, pc}

0800bd90 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800bd90:	4b04      	ldr	r3, [pc, #16]	@ (800bda4 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	b10a      	cbz	r2, 800bd9a <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800bd96:	4803      	ldr	r0, [pc, #12]	@ (800bda4 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800bd98:	4770      	bx	lr
 800bd9a:	4a03      	ldr	r2, [pc, #12]	@ (800bda8 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 800bd9c:	4801      	ldr	r0, [pc, #4]	@ (800bda4 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800bd9e:	6812      	ldr	r2, [r2, #0]
 800bda0:	601a      	str	r2, [r3, #0]
 800bda2:	4770      	bx	lr
 800bda4:	20000200 	.word	0x20000200
 800bda8:	20000370 	.word	0x20000370

0800bdac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800bdac:	4a02      	ldr	r2, [pc, #8]	@ (800bdb8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 800bdae:	4b03      	ldr	r3, [pc, #12]	@ (800bdbc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 800bdb0:	6812      	ldr	r2, [r2, #0]
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	20000370 	.word	0x20000370
 800bdbc:	20000200 	.word	0x20000200

0800bdc0 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 800bdc0:	f006 bb4a 	b.w	8012458 <nav_msgs__msg__Odometry__init>

0800bdc4 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800bdc4:	f006 bb94 	b.w	80124f0 <nav_msgs__msg__Odometry__fini>

0800bdc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800bdc8:	b510      	push	{r4, lr}
 800bdca:	f002 f84b 	bl	800de64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800bdce:	4c0a      	ldr	r4, [pc, #40]	@ (800bdf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 800bdd0:	60e0      	str	r0, [r4, #12]
 800bdd2:	f002 fa33 	bl	800e23c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800bdd6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800bdda:	f002 fa63 	bl	800e2a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800bdde:	4b07      	ldr	r3, [pc, #28]	@ (800bdfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800bde0:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	b10a      	cbz	r2, 800bdec <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 800bde8:	4804      	ldr	r0, [pc, #16]	@ (800bdfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800bdea:	bd10      	pop	{r4, pc}
 800bdec:	4a04      	ldr	r2, [pc, #16]	@ (800be00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 800bdee:	4803      	ldr	r0, [pc, #12]	@ (800bdfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 800bdf0:	6812      	ldr	r2, [r2, #0]
 800bdf2:	601a      	str	r2, [r3, #0]
 800bdf4:	bd10      	pop	{r4, pc}
 800bdf6:	bf00      	nop
 800bdf8:	20000238 	.word	0x20000238
 800bdfc:	20000220 	.word	0x20000220
 800be00:	20000374 	.word	0x20000374

0800be04 <get_serialized_size_nav_msgs__msg__Odometry>:
 800be04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be06:	4604      	mov	r4, r0
 800be08:	b1c0      	cbz	r0, 800be3c <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 800be0a:	460e      	mov	r6, r1
 800be0c:	f002 f84e 	bl	800deac <get_serialized_size_std_msgs__msg__Header>
 800be10:	1837      	adds	r7, r6, r0
 800be12:	2104      	movs	r1, #4
 800be14:	4638      	mov	r0, r7
 800be16:	f7ff ff4f 	bl	800bcb8 <ucdr_alignment>
 800be1a:	69a5      	ldr	r5, [r4, #24]
 800be1c:	3505      	adds	r5, #5
 800be1e:	4405      	add	r5, r0
 800be20:	443d      	add	r5, r7
 800be22:	4629      	mov	r1, r5
 800be24:	f104 0020 	add.w	r0, r4, #32
 800be28:	f002 fa52 	bl	800e2d0 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800be2c:	4405      	add	r5, r0
 800be2e:	4629      	mov	r1, r5
 800be30:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800be34:	f002 fabc 	bl	800e3b0 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800be38:	1b80      	subs	r0, r0, r6
 800be3a:	4428      	add	r0, r5
 800be3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be3e:	bf00      	nop

0800be40 <_Odometry__cdr_deserialize>:
 800be40:	b570      	push	{r4, r5, r6, lr}
 800be42:	460c      	mov	r4, r1
 800be44:	b082      	sub	sp, #8
 800be46:	b349      	cbz	r1, 800be9c <_Odometry__cdr_deserialize+0x5c>
 800be48:	4605      	mov	r5, r0
 800be4a:	f002 f8b1 	bl	800dfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800be4e:	6843      	ldr	r3, [r0, #4]
 800be50:	4621      	mov	r1, r4
 800be52:	68db      	ldr	r3, [r3, #12]
 800be54:	4628      	mov	r0, r5
 800be56:	4798      	blx	r3
 800be58:	69e6      	ldr	r6, [r4, #28]
 800be5a:	6961      	ldr	r1, [r4, #20]
 800be5c:	ab01      	add	r3, sp, #4
 800be5e:	4632      	mov	r2, r6
 800be60:	4628      	mov	r0, r5
 800be62:	f002 fcfd 	bl	800e860 <ucdr_deserialize_sequence_char>
 800be66:	9b01      	ldr	r3, [sp, #4]
 800be68:	b9a0      	cbnz	r0, 800be94 <_Odometry__cdr_deserialize+0x54>
 800be6a:	429e      	cmp	r6, r3
 800be6c:	d319      	bcc.n	800bea2 <_Odometry__cdr_deserialize+0x62>
 800be6e:	f002 fa9b 	bl	800e3a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800be72:	6843      	ldr	r3, [r0, #4]
 800be74:	f104 0120 	add.w	r1, r4, #32
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	4628      	mov	r0, r5
 800be7c:	4798      	blx	r3
 800be7e:	f002 fb03 	bl	800e488 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800be82:	6843      	ldr	r3, [r0, #4]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800be8a:	4628      	mov	r0, r5
 800be8c:	b002      	add	sp, #8
 800be8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800be92:	4718      	bx	r3
 800be94:	b103      	cbz	r3, 800be98 <_Odometry__cdr_deserialize+0x58>
 800be96:	3b01      	subs	r3, #1
 800be98:	61a3      	str	r3, [r4, #24]
 800be9a:	e7e8      	b.n	800be6e <_Odometry__cdr_deserialize+0x2e>
 800be9c:	4608      	mov	r0, r1
 800be9e:	b002      	add	sp, #8
 800bea0:	bd70      	pop	{r4, r5, r6, pc}
 800bea2:	2101      	movs	r1, #1
 800bea4:	75a8      	strb	r0, [r5, #22]
 800bea6:	7569      	strb	r1, [r5, #21]
 800bea8:	61a0      	str	r0, [r4, #24]
 800beaa:	4628      	mov	r0, r5
 800beac:	f7ff ff1a 	bl	800bce4 <ucdr_align_to>
 800beb0:	9901      	ldr	r1, [sp, #4]
 800beb2:	4628      	mov	r0, r5
 800beb4:	f7ff ff4c 	bl	800bd50 <ucdr_advance_buffer>
 800beb8:	e7d9      	b.n	800be6e <_Odometry__cdr_deserialize+0x2e>
 800beba:	bf00      	nop

0800bebc <_Odometry__cdr_serialize>:
 800bebc:	b348      	cbz	r0, 800bf12 <_Odometry__cdr_serialize+0x56>
 800bebe:	b570      	push	{r4, r5, r6, lr}
 800bec0:	4604      	mov	r4, r0
 800bec2:	460e      	mov	r6, r1
 800bec4:	f002 f874 	bl	800dfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800bec8:	6843      	ldr	r3, [r0, #4]
 800beca:	4631      	mov	r1, r6
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	4620      	mov	r0, r4
 800bed0:	4798      	blx	r3
 800bed2:	6965      	ldr	r5, [r4, #20]
 800bed4:	b1d5      	cbz	r5, 800bf0c <_Odometry__cdr_serialize+0x50>
 800bed6:	4628      	mov	r0, r5
 800bed8:	f7f4 f9fa 	bl	80002d0 <strlen>
 800bedc:	1c42      	adds	r2, r0, #1
 800bede:	4629      	mov	r1, r5
 800bee0:	61a0      	str	r0, [r4, #24]
 800bee2:	4630      	mov	r0, r6
 800bee4:	f002 fcaa 	bl	800e83c <ucdr_serialize_sequence_char>
 800bee8:	f002 fa5e 	bl	800e3a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800beec:	6843      	ldr	r3, [r0, #4]
 800beee:	4631      	mov	r1, r6
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f104 0020 	add.w	r0, r4, #32
 800bef6:	4798      	blx	r3
 800bef8:	f002 fac6 	bl	800e488 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800befc:	6843      	ldr	r3, [r0, #4]
 800befe:	4631      	mov	r1, r6
 800bf00:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bf0a:	4718      	bx	r3
 800bf0c:	462a      	mov	r2, r5
 800bf0e:	4628      	mov	r0, r5
 800bf10:	e7e5      	b.n	800bede <_Odometry__cdr_serialize+0x22>
 800bf12:	4770      	bx	lr

0800bf14 <_Odometry__max_serialized_size>:
 800bf14:	b510      	push	{r4, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	2301      	movs	r3, #1
 800bf1a:	2100      	movs	r1, #0
 800bf1c:	f10d 0007 	add.w	r0, sp, #7
 800bf20:	f88d 3007 	strb.w	r3, [sp, #7]
 800bf24:	f002 f83a 	bl	800df9c <max_serialized_size_std_msgs__msg__Header>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	4601      	mov	r1, r0
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	f10d 0007 	add.w	r0, sp, #7
 800bf32:	f88d 3007 	strb.w	r3, [sp, #7]
 800bf36:	f002 fa27 	bl	800e388 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800bf3a:	4404      	add	r4, r0
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	f10d 0007 	add.w	r0, sp, #7
 800bf42:	f002 fa91 	bl	800e468 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800bf46:	4420      	add	r0, r4
 800bf48:	b002      	add	sp, #8
 800bf4a:	bd10      	pop	{r4, pc}

0800bf4c <_Odometry__get_serialized_size>:
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	4604      	mov	r4, r0
 800bf50:	b1b8      	cbz	r0, 800bf82 <_Odometry__get_serialized_size+0x36>
 800bf52:	2100      	movs	r1, #0
 800bf54:	f001 ffaa 	bl	800deac <get_serialized_size_std_msgs__msg__Header>
 800bf58:	2104      	movs	r1, #4
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	f7ff feac 	bl	800bcb8 <ucdr_alignment>
 800bf60:	69a5      	ldr	r5, [r4, #24]
 800bf62:	3505      	adds	r5, #5
 800bf64:	4603      	mov	r3, r0
 800bf66:	4435      	add	r5, r6
 800bf68:	441d      	add	r5, r3
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	f104 0020 	add.w	r0, r4, #32
 800bf70:	f002 f9ae 	bl	800e2d0 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800bf74:	4405      	add	r5, r0
 800bf76:	4629      	mov	r1, r5
 800bf78:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800bf7c:	f002 fa18 	bl	800e3b0 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800bf80:	4428      	add	r0, r5
 800bf82:	bd70      	pop	{r4, r5, r6, pc}

0800bf84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800bf84:	4800      	ldr	r0, [pc, #0]	@ (800bf88 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800bf86:	4770      	bx	lr
 800bf88:	20000328 	.word	0x20000328

0800bf8c <rcl_get_zero_initialized_publisher>:
 800bf8c:	4b01      	ldr	r3, [pc, #4]	@ (800bf94 <rcl_get_zero_initialized_publisher+0x8>)
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	4770      	bx	lr
 800bf92:	bf00      	nop
 800bf94:	0801c324 	.word	0x0801c324

0800bf98 <rcl_publisher_init>:
 800bf98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf9c:	b088      	sub	sp, #32
 800bf9e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bfa0:	2d00      	cmp	r5, #0
 800bfa2:	d06a      	beq.n	800c07a <rcl_publisher_init+0xe2>
 800bfa4:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	4648      	mov	r0, r9
 800bfac:	460e      	mov	r6, r1
 800bfae:	4690      	mov	r8, r2
 800bfb0:	461f      	mov	r7, r3
 800bfb2:	f001 f83d 	bl	800d030 <rcutils_allocator_is_valid>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d05f      	beq.n	800c07a <rcl_publisher_init+0xe2>
 800bfba:	2c00      	cmp	r4, #0
 800bfbc:	d05d      	beq.n	800c07a <rcl_publisher_init+0xe2>
 800bfbe:	f8d4 a000 	ldr.w	sl, [r4]
 800bfc2:	f1ba 0f00 	cmp.w	sl, #0
 800bfc6:	d004      	beq.n	800bfd2 <rcl_publisher_init+0x3a>
 800bfc8:	2764      	movs	r7, #100	@ 0x64
 800bfca:	4638      	mov	r0, r7
 800bfcc:	b008      	add	sp, #32
 800bfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	f006 ff36 	bl	8012e44 <rcl_node_is_valid>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d053      	beq.n	800c084 <rcl_publisher_init+0xec>
 800bfdc:	f1b8 0f00 	cmp.w	r8, #0
 800bfe0:	d04b      	beq.n	800c07a <rcl_publisher_init+0xe2>
 800bfe2:	2f00      	cmp	r7, #0
 800bfe4:	d049      	beq.n	800c07a <rcl_publisher_init+0xe2>
 800bfe6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800bfea:	aa07      	add	r2, sp, #28
 800bfec:	9205      	str	r2, [sp, #20]
 800bfee:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800bff2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bff6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800bffa:	f8cd a01c 	str.w	sl, [sp, #28]
 800bffe:	4639      	mov	r1, r7
 800c000:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c004:	4630      	mov	r0, r6
 800c006:	f006 ffad 	bl	8012f64 <rcl_node_resolve_name>
 800c00a:	4607      	mov	r7, r0
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d150      	bne.n	800c0b2 <rcl_publisher_init+0x11a>
 800c010:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800c014:	21c8      	movs	r1, #200	@ 0xc8
 800c016:	2001      	movs	r0, #1
 800c018:	4798      	blx	r3
 800c01a:	6020      	str	r0, [r4, #0]
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d04e      	beq.n	800c0be <rcl_publisher_init+0x126>
 800c020:	4630      	mov	r0, r6
 800c022:	f006 ff31 	bl	8012e88 <rcl_node_get_rmw_handle>
 800c026:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	9a07      	ldr	r2, [sp, #28]
 800c02e:	6827      	ldr	r7, [r4, #0]
 800c030:	462b      	mov	r3, r5
 800c032:	4641      	mov	r1, r8
 800c034:	f001 f960 	bl	800d2f8 <rmw_create_publisher>
 800c038:	6823      	ldr	r3, [r4, #0]
 800c03a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c03e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c042:	b370      	cbz	r0, 800c0a2 <rcl_publisher_init+0x10a>
 800c044:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c048:	f001 fa32 	bl	800d4b0 <rmw_publisher_get_actual_qos>
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	4607      	mov	r7, r0
 800c050:	b9d0      	cbnz	r0, 800c088 <rcl_publisher_init+0xf0>
 800c052:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c056:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c05a:	4629      	mov	r1, r5
 800c05c:	2270      	movs	r2, #112	@ 0x70
 800c05e:	4618      	mov	r0, r3
 800c060:	f00e f845 	bl	801a0ee <memcpy>
 800c064:	6832      	ldr	r2, [r6, #0]
 800c066:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c06a:	9807      	ldr	r0, [sp, #28]
 800c06c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c06e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c070:	4798      	blx	r3
 800c072:	4638      	mov	r0, r7
 800c074:	b008      	add	sp, #32
 800c076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07a:	270b      	movs	r7, #11
 800c07c:	4638      	mov	r0, r7
 800c07e:	b008      	add	sp, #32
 800c080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c084:	27c8      	movs	r7, #200	@ 0xc8
 800c086:	e7a0      	b.n	800bfca <rcl_publisher_init+0x32>
 800c088:	b18b      	cbz	r3, 800c0ae <rcl_publisher_init+0x116>
 800c08a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c08e:	b142      	cbz	r2, 800c0a2 <rcl_publisher_init+0x10a>
 800c090:	4630      	mov	r0, r6
 800c092:	f006 fef9 	bl	8012e88 <rcl_node_get_rmw_handle>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c09c:	f001 fa16 	bl	800d4cc <rmw_destroy_publisher>
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c0a4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	4790      	blx	r2
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	2701      	movs	r7, #1
 800c0b0:	e7db      	b.n	800c06a <rcl_publisher_init+0xd2>
 800c0b2:	2867      	cmp	r0, #103	@ 0x67
 800c0b4:	d0d9      	beq.n	800c06a <rcl_publisher_init+0xd2>
 800c0b6:	2869      	cmp	r0, #105	@ 0x69
 800c0b8:	d003      	beq.n	800c0c2 <rcl_publisher_init+0x12a>
 800c0ba:	280a      	cmp	r0, #10
 800c0bc:	d1f7      	bne.n	800c0ae <rcl_publisher_init+0x116>
 800c0be:	270a      	movs	r7, #10
 800c0c0:	e7d3      	b.n	800c06a <rcl_publisher_init+0xd2>
 800c0c2:	2767      	movs	r7, #103	@ 0x67
 800c0c4:	e7d1      	b.n	800c06a <rcl_publisher_init+0xd2>
 800c0c6:	bf00      	nop

0800c0c8 <rcl_publisher_get_default_options>:
 800c0c8:	b530      	push	{r4, r5, lr}
 800c0ca:	4912      	ldr	r1, [pc, #72]	@ (800c114 <rcl_publisher_get_default_options+0x4c>)
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	2250      	movs	r2, #80	@ 0x50
 800c0d0:	4604      	mov	r4, r0
 800c0d2:	f00e f80c 	bl	801a0ee <memcpy>
 800c0d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c0da:	f000 ff7d 	bl	800cfd8 <rcutils_get_default_allocator>
 800c0de:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800c0e2:	f001 f841 	bl	800d168 <rmw_get_default_publisher_options>
 800c0e6:	2500      	movs	r5, #0
 800c0e8:	f10d 0007 	add.w	r0, sp, #7
 800c0ec:	f88d 5007 	strb.w	r5, [sp, #7]
 800c0f0:	f006 fed0 	bl	8012e94 <rcl_get_disable_loaned_message>
 800c0f4:	b930      	cbnz	r0, 800c104 <rcl_publisher_get_default_options+0x3c>
 800c0f6:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800c0fa:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 800c0fe:	4620      	mov	r0, r4
 800c100:	b003      	add	sp, #12
 800c102:	bd30      	pop	{r4, r5, pc}
 800c104:	f000 ffc0 	bl	800d088 <rcutils_reset_error>
 800c108:	4620      	mov	r0, r4
 800c10a:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 800c10e:	b003      	add	sp, #12
 800c110:	bd30      	pop	{r4, r5, pc}
 800c112:	bf00      	nop
 800c114:	0801c328 	.word	0x0801c328

0800c118 <rcl_publish>:
 800c118:	b308      	cbz	r0, 800c15e <rcl_publish+0x46>
 800c11a:	6803      	ldr	r3, [r0, #0]
 800c11c:	b570      	push	{r4, r5, r6, lr}
 800c11e:	4604      	mov	r4, r0
 800c120:	b1c3      	cbz	r3, 800c154 <rcl_publish+0x3c>
 800c122:	4616      	mov	r6, r2
 800c124:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c128:	b1a2      	cbz	r2, 800c154 <rcl_publish+0x3c>
 800c12a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c12e:	460d      	mov	r5, r1
 800c130:	f006 fada 	bl	80126e8 <rcl_context_is_valid>
 800c134:	b160      	cbz	r0, 800c150 <rcl_publish+0x38>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c13c:	b150      	cbz	r0, 800c154 <rcl_publish+0x3c>
 800c13e:	b165      	cbz	r5, 800c15a <rcl_publish+0x42>
 800c140:	4632      	mov	r2, r6
 800c142:	4629      	mov	r1, r5
 800c144:	f001 f878 	bl	800d238 <rmw_publish>
 800c148:	3800      	subs	r0, #0
 800c14a:	bf18      	it	ne
 800c14c:	2001      	movne	r0, #1
 800c14e:	bd70      	pop	{r4, r5, r6, pc}
 800c150:	f000 ff7c 	bl	800d04c <rcutils_error_is_set>
 800c154:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c158:	bd70      	pop	{r4, r5, r6, pc}
 800c15a:	200b      	movs	r0, #11
 800c15c:	bd70      	pop	{r4, r5, r6, pc}
 800c15e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c162:	4770      	bx	lr

0800c164 <rcl_publisher_is_valid>:
 800c164:	b1b0      	cbz	r0, 800c194 <rcl_publisher_is_valid+0x30>
 800c166:	6803      	ldr	r3, [r0, #0]
 800c168:	b510      	push	{r4, lr}
 800c16a:	4604      	mov	r4, r0
 800c16c:	b183      	cbz	r3, 800c190 <rcl_publisher_is_valid+0x2c>
 800c16e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c172:	b16a      	cbz	r2, 800c190 <rcl_publisher_is_valid+0x2c>
 800c174:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c178:	f006 fab6 	bl	80126e8 <rcl_context_is_valid>
 800c17c:	b130      	cbz	r0, 800c18c <rcl_publisher_is_valid+0x28>
 800c17e:	6823      	ldr	r3, [r4, #0]
 800c180:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c184:	3800      	subs	r0, #0
 800c186:	bf18      	it	ne
 800c188:	2001      	movne	r0, #1
 800c18a:	bd10      	pop	{r4, pc}
 800c18c:	f000 ff5e 	bl	800d04c <rcutils_error_is_set>
 800c190:	2000      	movs	r0, #0
 800c192:	bd10      	pop	{r4, pc}
 800c194:	2000      	movs	r0, #0
 800c196:	4770      	bx	lr

0800c198 <rcl_publisher_is_valid_except_context>:
 800c198:	b130      	cbz	r0, 800c1a8 <rcl_publisher_is_valid_except_context+0x10>
 800c19a:	6800      	ldr	r0, [r0, #0]
 800c19c:	b120      	cbz	r0, 800c1a8 <rcl_publisher_is_valid_except_context+0x10>
 800c19e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c1a2:	3800      	subs	r0, #0
 800c1a4:	bf18      	it	ne
 800c1a6:	2001      	movne	r0, #1
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop

0800c1ac <_rclc_check_for_new_data>:
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d046      	beq.n	800c23e <_rclc_check_for_new_data+0x92>
 800c1b0:	b510      	push	{r4, lr}
 800c1b2:	7802      	ldrb	r2, [r0, #0]
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	2a0a      	cmp	r2, #10
 800c1ba:	d842      	bhi.n	800c242 <_rclc_check_for_new_data+0x96>
 800c1bc:	e8df f002 	tbb	[pc, r2]
 800c1c0:	14181212 	.word	0x14181212
 800c1c4:	06060614 	.word	0x06060614
 800c1c8:	2e1a      	.short	0x2e1a
 800c1ca:	16          	.byte	0x16
 800c1cb:	00          	.byte	0x00
 800c1cc:	6a0a      	ldr	r2, [r1, #32]
 800c1ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c1d0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c1d4:	3a00      	subs	r2, #0
 800c1d6:	bf18      	it	ne
 800c1d8:	2201      	movne	r2, #1
 800c1da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c1de:	2000      	movs	r0, #0
 800c1e0:	b004      	add	sp, #16
 800c1e2:	bd10      	pop	{r4, pc}
 800c1e4:	680a      	ldr	r2, [r1, #0]
 800c1e6:	e7f2      	b.n	800c1ce <_rclc_check_for_new_data+0x22>
 800c1e8:	698a      	ldr	r2, [r1, #24]
 800c1ea:	e7f0      	b.n	800c1ce <_rclc_check_for_new_data+0x22>
 800c1ec:	688a      	ldr	r2, [r1, #8]
 800c1ee:	e7ee      	b.n	800c1ce <_rclc_check_for_new_data+0x22>
 800c1f0:	690a      	ldr	r2, [r1, #16]
 800c1f2:	e7ec      	b.n	800c1ce <_rclc_check_for_new_data+0x22>
 800c1f4:	685c      	ldr	r4, [r3, #4]
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c1fc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c200:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c204:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c208:	9300      	str	r3, [sp, #0]
 800c20a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c20e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c212:	f104 0110 	add.w	r1, r4, #16
 800c216:	f008 fd4b 	bl	8014cb0 <rcl_action_client_wait_set_get_entities_ready>
 800c21a:	e7e1      	b.n	800c1e0 <_rclc_check_for_new_data+0x34>
 800c21c:	685c      	ldr	r4, [r3, #4]
 800c21e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c222:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c226:	e9cd 3200 	strd	r3, r2, [sp]
 800c22a:	4608      	mov	r0, r1
 800c22c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c230:	f104 0220 	add.w	r2, r4, #32
 800c234:	f104 0110 	add.w	r1, r4, #16
 800c238:	f008 ff3c 	bl	80150b4 <rcl_action_server_wait_set_get_entities_ready>
 800c23c:	e7d0      	b.n	800c1e0 <_rclc_check_for_new_data+0x34>
 800c23e:	200b      	movs	r0, #11
 800c240:	4770      	bx	lr
 800c242:	2001      	movs	r0, #1
 800c244:	e7cc      	b.n	800c1e0 <_rclc_check_for_new_data+0x34>
 800c246:	bf00      	nop

0800c248 <_rclc_take_new_data>:
 800c248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c24a:	b099      	sub	sp, #100	@ 0x64
 800c24c:	2800      	cmp	r0, #0
 800c24e:	f000 8082 	beq.w	800c356 <_rclc_take_new_data+0x10e>
 800c252:	7803      	ldrb	r3, [r0, #0]
 800c254:	4604      	mov	r4, r0
 800c256:	2b0a      	cmp	r3, #10
 800c258:	f200 815d 	bhi.w	800c516 <_rclc_take_new_data+0x2ce>
 800c25c:	e8df f003 	tbb	[pc, r3]
 800c260:	31531f1f 	.word	0x31531f1f
 800c264:	06060631 	.word	0x06060631
 800c268:	4555      	.short	0x4555
 800c26a:	53          	.byte	0x53
 800c26b:	00          	.byte	0x00
 800c26c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c26e:	6a0b      	ldr	r3, [r1, #32]
 800c270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d046      	beq.n	800c306 <_rclc_take_new_data+0xbe>
 800c278:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c27c:	f104 0110 	add.w	r1, r4, #16
 800c280:	f006 ff1e 	bl	80130c0 <rcl_take_request>
 800c284:	4605      	mov	r5, r0
 800c286:	2800      	cmp	r0, #0
 800c288:	d03d      	beq.n	800c306 <_rclc_take_new_data+0xbe>
 800c28a:	f240 2359 	movw	r3, #601	@ 0x259
 800c28e:	4298      	cmp	r0, r3
 800c290:	d128      	bne.n	800c2e4 <_rclc_take_new_data+0x9c>
 800c292:	2300      	movs	r3, #0
 800c294:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c298:	4628      	mov	r0, r5
 800c29a:	b019      	add	sp, #100	@ 0x64
 800c29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c29e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c2a0:	680b      	ldr	r3, [r1, #0]
 800c2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a6:	b373      	cbz	r3, 800c306 <_rclc_take_new_data+0xbe>
 800c2a8:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	aa0a      	add	r2, sp, #40	@ 0x28
 800c2b0:	f007 f8da 	bl	8013468 <rcl_take>
 800c2b4:	4605      	mov	r5, r0
 800c2b6:	b330      	cbz	r0, 800c306 <_rclc_take_new_data+0xbe>
 800c2b8:	f240 1391 	movw	r3, #401	@ 0x191
 800c2bc:	4298      	cmp	r0, r3
 800c2be:	d0e8      	beq.n	800c292 <_rclc_take_new_data+0x4a>
 800c2c0:	e010      	b.n	800c2e4 <_rclc_take_new_data+0x9c>
 800c2c2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c2c4:	698b      	ldr	r3, [r1, #24]
 800c2c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ca:	b1e3      	cbz	r3, 800c306 <_rclc_take_new_data+0xbe>
 800c2cc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c2d0:	f104 0110 	add.w	r1, r4, #16
 800c2d4:	f006 f978 	bl	80125c8 <rcl_take_response>
 800c2d8:	4605      	mov	r5, r0
 800c2da:	b1a0      	cbz	r0, 800c306 <_rclc_take_new_data+0xbe>
 800c2dc:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c2e0:	4298      	cmp	r0, r3
 800c2e2:	d0d9      	beq.n	800c298 <_rclc_take_new_data+0x50>
 800c2e4:	f000 fed0 	bl	800d088 <rcutils_reset_error>
 800c2e8:	e7d6      	b.n	800c298 <_rclc_take_new_data+0x50>
 800c2ea:	6840      	ldr	r0, [r0, #4]
 800c2ec:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d15f      	bne.n	800c3b4 <_rclc_take_new_data+0x16c>
 800c2f4:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d179      	bne.n	800c3f0 <_rclc_take_new_data+0x1a8>
 800c2fc:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c300:	2b00      	cmp	r3, #0
 800c302:	f040 8096 	bne.w	800c432 <_rclc_take_new_data+0x1ea>
 800c306:	2500      	movs	r5, #0
 800c308:	e7c6      	b.n	800c298 <_rclc_take_new_data+0x50>
 800c30a:	6840      	ldr	r0, [r0, #4]
 800c30c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c310:	2b00      	cmp	r3, #0
 800c312:	d138      	bne.n	800c386 <_rclc_take_new_data+0x13e>
 800c314:	69c3      	ldr	r3, [r0, #28]
 800c316:	b113      	cbz	r3, 800c31e <_rclc_take_new_data+0xd6>
 800c318:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c31c:	b9fb      	cbnz	r3, 800c35e <_rclc_take_new_data+0x116>
 800c31e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c322:	2b00      	cmp	r3, #0
 800c324:	f040 80a8 	bne.w	800c478 <_rclc_take_new_data+0x230>
 800c328:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d0ea      	beq.n	800c306 <_rclc_take_new_data+0xbe>
 800c330:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c332:	a90a      	add	r1, sp, #40	@ 0x28
 800c334:	3010      	adds	r0, #16
 800c336:	f008 fb9f 	bl	8014a78 <rcl_action_take_result_response>
 800c33a:	4605      	mov	r5, r0
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d1d1      	bne.n	800c2e4 <_rclc_take_new_data+0x9c>
 800c340:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c344:	6860      	ldr	r0, [r4, #4]
 800c346:	f008 ffdf 	bl	8015308 <rclc_action_find_handle_by_result_request_sequence_number>
 800c34a:	2800      	cmp	r0, #0
 800c34c:	d0db      	beq.n	800c306 <_rclc_take_new_data+0xbe>
 800c34e:	2301      	movs	r3, #1
 800c350:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c354:	e7d7      	b.n	800c306 <_rclc_take_new_data+0xbe>
 800c356:	250b      	movs	r5, #11
 800c358:	4628      	mov	r0, r5
 800c35a:	b019      	add	sp, #100	@ 0x64
 800c35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c360:	3010      	adds	r0, #16
 800c362:	f008 fc05 	bl	8014b70 <rcl_action_take_feedback>
 800c366:	4605      	mov	r5, r0
 800c368:	2800      	cmp	r0, #0
 800c36a:	d1bb      	bne.n	800c2e4 <_rclc_take_new_data+0x9c>
 800c36c:	6860      	ldr	r0, [r4, #4]
 800c36e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c370:	f008 ff88 	bl	8015284 <rclc_action_find_goal_handle_by_uuid>
 800c374:	4603      	mov	r3, r0
 800c376:	2800      	cmp	r0, #0
 800c378:	f000 80c4 	beq.w	800c504 <_rclc_take_new_data+0x2bc>
 800c37c:	2201      	movs	r2, #1
 800c37e:	6860      	ldr	r0, [r4, #4]
 800c380:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c384:	e7cb      	b.n	800c31e <_rclc_take_new_data+0xd6>
 800c386:	aa04      	add	r2, sp, #16
 800c388:	a90a      	add	r1, sp, #40	@ 0x28
 800c38a:	3010      	adds	r0, #16
 800c38c:	f008 fb04 	bl	8014998 <rcl_action_take_goal_response>
 800c390:	4605      	mov	r5, r0
 800c392:	2800      	cmp	r0, #0
 800c394:	d1a6      	bne.n	800c2e4 <_rclc_take_new_data+0x9c>
 800c396:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c39a:	6860      	ldr	r0, [r4, #4]
 800c39c:	f008 ffa2 	bl	80152e4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800c3a0:	b130      	cbz	r0, 800c3b0 <_rclc_take_new_data+0x168>
 800c3a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c3a6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	f880 2020 	strb.w	r2, [r0, #32]
 800c3b0:	6860      	ldr	r0, [r4, #4]
 800c3b2:	e7af      	b.n	800c314 <_rclc_take_new_data+0xcc>
 800c3b4:	f008 ff40 	bl	8015238 <rclc_action_take_goal_handle>
 800c3b8:	4606      	mov	r6, r0
 800c3ba:	6860      	ldr	r0, [r4, #4]
 800c3bc:	2e00      	cmp	r6, #0
 800c3be:	d099      	beq.n	800c2f4 <_rclc_take_new_data+0xac>
 800c3c0:	6070      	str	r0, [r6, #4]
 800c3c2:	69f2      	ldr	r2, [r6, #28]
 800c3c4:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c3c8:	3010      	adds	r0, #16
 800c3ca:	f008 fd01 	bl	8014dd0 <rcl_action_take_goal_request>
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	f040 8099 	bne.w	800c508 <_rclc_take_new_data+0x2c0>
 800c3d6:	69f7      	ldr	r7, [r6, #28]
 800c3d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c3da:	7235      	strb	r5, [r6, #8]
 800c3dc:	f8c6 0009 	str.w	r0, [r6, #9]
 800c3e0:	f8c6 100d 	str.w	r1, [r6, #13]
 800c3e4:	6860      	ldr	r0, [r4, #4]
 800c3e6:	f8c6 2011 	str.w	r2, [r6, #17]
 800c3ea:	f8c6 3015 	str.w	r3, [r6, #21]
 800c3ee:	e781      	b.n	800c2f4 <_rclc_take_new_data+0xac>
 800c3f0:	aa04      	add	r2, sp, #16
 800c3f2:	3010      	adds	r0, #16
 800c3f4:	a90a      	add	r1, sp, #40	@ 0x28
 800c3f6:	f008 fd5b 	bl	8014eb0 <rcl_action_take_result_request>
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	f47f af71 	bne.w	800c2e4 <_rclc_take_new_data+0x9c>
 800c402:	6860      	ldr	r0, [r4, #4]
 800c404:	a904      	add	r1, sp, #16
 800c406:	f008 ff3d 	bl	8015284 <rclc_action_find_goal_handle_by_uuid>
 800c40a:	4607      	mov	r7, r0
 800c40c:	b160      	cbz	r0, 800c428 <_rclc_take_new_data+0x1e0>
 800c40e:	ad0a      	add	r5, sp, #40	@ 0x28
 800c410:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c416:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c418:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c41c:	f04f 0c02 	mov.w	ip, #2
 800c420:	e886 0003 	stmia.w	r6, {r0, r1}
 800c424:	f887 c008 	strb.w	ip, [r7, #8]
 800c428:	6860      	ldr	r0, [r4, #4]
 800c42a:	2300      	movs	r3, #0
 800c42c:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c430:	e764      	b.n	800c2fc <_rclc_take_new_data+0xb4>
 800c432:	ae04      	add	r6, sp, #16
 800c434:	aa0a      	add	r2, sp, #40	@ 0x28
 800c436:	3010      	adds	r0, #16
 800c438:	4631      	mov	r1, r6
 800c43a:	f008 fd77 	bl	8014f2c <rcl_action_take_cancel_request>
 800c43e:	4605      	mov	r5, r0
 800c440:	2800      	cmp	r0, #0
 800c442:	f47f af4f 	bne.w	800c2e4 <_rclc_take_new_data+0x9c>
 800c446:	6860      	ldr	r0, [r4, #4]
 800c448:	a90a      	add	r1, sp, #40	@ 0x28
 800c44a:	f008 ff1b 	bl	8015284 <rclc_action_find_goal_handle_by_uuid>
 800c44e:	4605      	mov	r5, r0
 800c450:	2800      	cmp	r0, #0
 800c452:	d04c      	beq.n	800c4ee <_rclc_take_new_data+0x2a6>
 800c454:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c458:	2101      	movs	r1, #1
 800c45a:	f008 fe9b 	bl	8015194 <rcl_action_transition_goal_state>
 800c45e:	2803      	cmp	r0, #3
 800c460:	4607      	mov	r7, r0
 800c462:	d139      	bne.n	800c4d8 <_rclc_take_new_data+0x290>
 800c464:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c466:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800c46a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c46c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c470:	e884 0003 	stmia.w	r4, {r0, r1}
 800c474:	722f      	strb	r7, [r5, #8]
 800c476:	e746      	b.n	800c306 <_rclc_take_new_data+0xbe>
 800c478:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c47c:	a90a      	add	r1, sp, #40	@ 0x28
 800c47e:	3010      	adds	r0, #16
 800c480:	f008 fb38 	bl	8014af4 <rcl_action_take_cancel_response>
 800c484:	4605      	mov	r5, r0
 800c486:	2800      	cmp	r0, #0
 800c488:	f47f af2c 	bne.w	800c2e4 <_rclc_take_new_data+0x9c>
 800c48c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c490:	6860      	ldr	r0, [r4, #4]
 800c492:	f008 ff4b 	bl	801532c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c496:	4606      	mov	r6, r0
 800c498:	6860      	ldr	r0, [r4, #4]
 800c49a:	2e00      	cmp	r6, #0
 800c49c:	f43f af44 	beq.w	800c328 <_rclc_take_new_data+0xe0>
 800c4a0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c4a2:	2701      	movs	r7, #1
 800c4a4:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	f43f af3e 	beq.w	800c328 <_rclc_take_new_data+0xe0>
 800c4ac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c4ae:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c4b2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c4b6:	f008 fee5 	bl	8015284 <rclc_action_find_goal_handle_by_uuid>
 800c4ba:	b138      	cbz	r0, 800c4cc <_rclc_take_new_data+0x284>
 800c4bc:	6860      	ldr	r0, [r4, #4]
 800c4be:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c4c0:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c4c4:	3501      	adds	r5, #1
 800c4c6:	42ab      	cmp	r3, r5
 800c4c8:	d8f0      	bhi.n	800c4ac <_rclc_take_new_data+0x264>
 800c4ca:	e72d      	b.n	800c328 <_rclc_take_new_data+0xe0>
 800c4cc:	6860      	ldr	r0, [r4, #4]
 800c4ce:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c4d0:	3501      	adds	r5, #1
 800c4d2:	42ab      	cmp	r3, r5
 800c4d4:	d8ea      	bhi.n	800c4ac <_rclc_take_new_data+0x264>
 800c4d6:	e727      	b.n	800c328 <_rclc_take_new_data+0xe0>
 800c4d8:	ab06      	add	r3, sp, #24
 800c4da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c4dc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c4e0:	2103      	movs	r1, #3
 800c4e2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c4e6:	6860      	ldr	r0, [r4, #4]
 800c4e8:	f008 ff96 	bl	8015418 <rclc_action_server_goal_cancel_reject>
 800c4ec:	e70b      	b.n	800c306 <_rclc_take_new_data+0xbe>
 800c4ee:	ab06      	add	r3, sp, #24
 800c4f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c4f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c4f6:	2102      	movs	r1, #2
 800c4f8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c4fc:	6860      	ldr	r0, [r4, #4]
 800c4fe:	f008 ff8b 	bl	8015418 <rclc_action_server_goal_cancel_reject>
 800c502:	e700      	b.n	800c306 <_rclc_take_new_data+0xbe>
 800c504:	6860      	ldr	r0, [r4, #4]
 800c506:	e70a      	b.n	800c31e <_rclc_take_new_data+0xd6>
 800c508:	6860      	ldr	r0, [r4, #4]
 800c50a:	4631      	mov	r1, r6
 800c50c:	f008 fea4 	bl	8015258 <rclc_action_remove_used_goal_handle>
 800c510:	f000 fdba 	bl	800d088 <rcutils_reset_error>
 800c514:	e6c0      	b.n	800c298 <_rclc_take_new_data+0x50>
 800c516:	2501      	movs	r5, #1
 800c518:	e6be      	b.n	800c298 <_rclc_take_new_data+0x50>
 800c51a:	bf00      	nop

0800c51c <rclc_executor_trigger_any>:
 800c51c:	4603      	mov	r3, r0
 800c51e:	b370      	cbz	r0, 800c57e <rclc_executor_trigger_any+0x62>
 800c520:	b379      	cbz	r1, 800c582 <rclc_executor_trigger_any+0x66>
 800c522:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800c526:	2200      	movs	r2, #0
 800c528:	b350      	cbz	r0, 800c580 <rclc_executor_trigger_any+0x64>
 800c52a:	b430      	push	{r4, r5}
 800c52c:	f893 c000 	ldrb.w	ip, [r3]
 800c530:	f1bc 0f08 	cmp.w	ip, #8
 800c534:	d017      	beq.n	800c566 <rclc_executor_trigger_any+0x4a>
 800c536:	f1bc 0f09 	cmp.w	ip, #9
 800c53a:	d00d      	beq.n	800c558 <rclc_executor_trigger_any+0x3c>
 800c53c:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800c540:	b940      	cbnz	r0, 800c554 <rclc_executor_trigger_any+0x38>
 800c542:	3201      	adds	r2, #1
 800c544:	4291      	cmp	r1, r2
 800c546:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800c54a:	d003      	beq.n	800c554 <rclc_executor_trigger_any+0x38>
 800c54c:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800c550:	2800      	cmp	r0, #0
 800c552:	d1eb      	bne.n	800c52c <rclc_executor_trigger_any+0x10>
 800c554:	bc30      	pop	{r4, r5}
 800c556:	4770      	bx	lr
 800c558:	685c      	ldr	r4, [r3, #4]
 800c55a:	6a25      	ldr	r5, [r4, #32]
 800c55c:	2d00      	cmp	r5, #0
 800c55e:	d1f9      	bne.n	800c554 <rclc_executor_trigger_any+0x38>
 800c560:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800c564:	e7ec      	b.n	800c540 <rclc_executor_trigger_any+0x24>
 800c566:	685c      	ldr	r4, [r3, #4]
 800c568:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c56a:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800c56e:	d1f1      	bne.n	800c554 <rclc_executor_trigger_any+0x38>
 800c570:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800c574:	2800      	cmp	r0, #0
 800c576:	d1ed      	bne.n	800c554 <rclc_executor_trigger_any+0x38>
 800c578:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800c57c:	e7e0      	b.n	800c540 <rclc_executor_trigger_any+0x24>
 800c57e:	4770      	bx	lr
 800c580:	4770      	bx	lr
 800c582:	4608      	mov	r0, r1
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop

0800c588 <_rclc_execute>:
 800c588:	2800      	cmp	r0, #0
 800c58a:	f000 80dc 	beq.w	800c746 <_rclc_execute+0x1be>
 800c58e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c590:	7843      	ldrb	r3, [r0, #1]
 800c592:	b087      	sub	sp, #28
 800c594:	4604      	mov	r4, r0
 800c596:	b123      	cbz	r3, 800c5a2 <_rclc_execute+0x1a>
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d01c      	beq.n	800c5d6 <_rclc_execute+0x4e>
 800c59c:	2000      	movs	r0, #0
 800c59e:	b007      	add	sp, #28
 800c5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5a2:	7803      	ldrb	r3, [r0, #0]
 800c5a4:	2b08      	cmp	r3, #8
 800c5a6:	f000 80a0 	beq.w	800c6ea <_rclc_execute+0x162>
 800c5aa:	2b09      	cmp	r3, #9
 800c5ac:	d024      	beq.n	800c5f8 <_rclc_execute+0x70>
 800c5ae:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d0f2      	beq.n	800c59c <_rclc_execute+0x14>
 800c5b6:	2b0a      	cmp	r3, #10
 800c5b8:	f200 815a 	bhi.w	800c870 <_rclc_execute+0x2e8>
 800c5bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c5c0:	008e006f 	.word	0x008e006f
 800c5c4:	006f007c 	.word	0x006f007c
 800c5c8:	00590073 	.word	0x00590073
 800c5cc:	00590059 	.word	0x00590059
 800c5d0:	01580158 	.word	0x01580158
 800c5d4:	0079      	.short	0x0079
 800c5d6:	7803      	ldrb	r3, [r0, #0]
 800c5d8:	2b0a      	cmp	r3, #10
 800c5da:	f200 8149 	bhi.w	800c870 <_rclc_execute+0x2e8>
 800c5de:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c5e2:	00f9      	.short	0x00f9
 800c5e4:	006b007b 	.word	0x006b007b
 800c5e8:	0062005e 	.word	0x0062005e
 800c5ec:	00480048 	.word	0x00480048
 800c5f0:	01000048 	.word	0x01000048
 800c5f4:	00680102 	.word	0x00680102
 800c5f8:	6840      	ldr	r0, [r0, #4]
 800c5fa:	6a02      	ldr	r2, [r0, #32]
 800c5fc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c600:	2a00      	cmp	r2, #0
 800c602:	f040 80f3 	bne.w	800c7ec <_rclc_execute+0x264>
 800c606:	2b00      	cmp	r3, #0
 800c608:	d0c8      	beq.n	800c59c <_rclc_execute+0x14>
 800c60a:	e003      	b.n	800c614 <_rclc_execute+0x8c>
 800c60c:	6858      	ldr	r0, [r3, #4]
 800c60e:	f008 fe23 	bl	8015258 <rclc_action_remove_used_goal_handle>
 800c612:	6860      	ldr	r0, [r4, #4]
 800c614:	f008 fe5a 	bl	80152cc <rclc_action_find_first_terminated_handle>
 800c618:	4603      	mov	r3, r0
 800c61a:	4601      	mov	r1, r0
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d1f5      	bne.n	800c60c <_rclc_execute+0x84>
 800c620:	6860      	ldr	r0, [r4, #4]
 800c622:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800c626:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 80eb 	beq.w	800c806 <_rclc_execute+0x27e>
 800c630:	f241 0604 	movw	r6, #4100	@ 0x1004
 800c634:	2701      	movs	r7, #1
 800c636:	e007      	b.n	800c648 <_rclc_execute+0xc0>
 800c638:	4628      	mov	r0, r5
 800c63a:	f008 fea1 	bl	8015380 <rclc_action_server_response_goal_request>
 800c63e:	6860      	ldr	r0, [r4, #4]
 800c640:	4629      	mov	r1, r5
 800c642:	f008 fe09 	bl	8015258 <rclc_action_remove_used_goal_handle>
 800c646:	6860      	ldr	r0, [r4, #4]
 800c648:	2100      	movs	r1, #0
 800c64a:	f008 fe33 	bl	80152b4 <rclc_action_find_first_handle_by_status>
 800c64e:	4605      	mov	r5, r0
 800c650:	2800      	cmp	r0, #0
 800c652:	f000 80d5 	beq.w	800c800 <_rclc_execute+0x278>
 800c656:	6863      	ldr	r3, [r4, #4]
 800c658:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c65a:	699b      	ldr	r3, [r3, #24]
 800c65c:	4798      	blx	r3
 800c65e:	42b0      	cmp	r0, r6
 800c660:	f04f 0100 	mov.w	r1, #0
 800c664:	d1e8      	bne.n	800c638 <_rclc_execute+0xb0>
 800c666:	2101      	movs	r1, #1
 800c668:	4628      	mov	r0, r5
 800c66a:	f008 fe89 	bl	8015380 <rclc_action_server_response_goal_request>
 800c66e:	722f      	strb	r7, [r5, #8]
 800c670:	e7e9      	b.n	800c646 <_rclc_execute+0xbe>
 800c672:	2b06      	cmp	r3, #6
 800c674:	68a0      	ldr	r0, [r4, #8]
 800c676:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c678:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800c67a:	f000 80bb 	beq.w	800c7f4 <_rclc_execute+0x26c>
 800c67e:	2b07      	cmp	r3, #7
 800c680:	f000 80f1 	beq.w	800c866 <_rclc_execute+0x2de>
 800c684:	47b0      	blx	r6
 800c686:	f104 0510 	add.w	r5, r4, #16
 800c68a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c68c:	6860      	ldr	r0, [r4, #4]
 800c68e:	4629      	mov	r1, r5
 800c690:	f006 fd66 	bl	8013160 <rcl_send_response>
 800c694:	2802      	cmp	r0, #2
 800c696:	d117      	bne.n	800c6c8 <_rclc_execute+0x140>
 800c698:	f000 fcf6 	bl	800d088 <rcutils_reset_error>
 800c69c:	e77e      	b.n	800c59c <_rclc_execute+0x14>
 800c69e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c6a0:	68a0      	ldr	r0, [r4, #8]
 800c6a2:	4798      	blx	r3
 800c6a4:	e77a      	b.n	800c59c <_rclc_execute+0x14>
 800c6a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c6a8:	68a0      	ldr	r0, [r4, #8]
 800c6aa:	f104 0110 	add.w	r1, r4, #16
 800c6ae:	4798      	blx	r3
 800c6b0:	e774      	b.n	800c59c <_rclc_execute+0x14>
 800c6b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c6b4:	4798      	blx	r3
 800c6b6:	e771      	b.n	800c59c <_rclc_execute+0x14>
 800c6b8:	6860      	ldr	r0, [r4, #4]
 800c6ba:	f007 fa19 	bl	8013af0 <rcl_timer_call>
 800c6be:	f240 3321 	movw	r3, #801	@ 0x321
 800c6c2:	4298      	cmp	r0, r3
 800c6c4:	f43f af6a 	beq.w	800c59c <_rclc_execute+0x14>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	f43f af68 	beq.w	800c59e <_rclc_execute+0x16>
 800c6ce:	9005      	str	r0, [sp, #20]
 800c6d0:	f000 fcda 	bl	800d088 <rcutils_reset_error>
 800c6d4:	9805      	ldr	r0, [sp, #20]
 800c6d6:	e762      	b.n	800c59e <_rclc_execute+0x16>
 800c6d8:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800c6dc:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d0e4      	beq.n	800c6ae <_rclc_execute+0x126>
 800c6e4:	68a0      	ldr	r0, [r4, #8]
 800c6e6:	4798      	blx	r3
 800c6e8:	e758      	b.n	800c59c <_rclc_execute+0x14>
 800c6ea:	6840      	ldr	r0, [r0, #4]
 800c6ec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c6ee:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800c6f2:	d107      	bne.n	800c704 <_rclc_execute+0x17c>
 800c6f4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c6f8:	b923      	cbnz	r3, 800c704 <_rclc_execute+0x17c>
 800c6fa:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f43f af4c 	beq.w	800c59c <_rclc_execute+0x14>
 800c704:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c708:	b303      	cbz	r3, 800c74c <_rclc_execute+0x1c4>
 800c70a:	2600      	movs	r6, #0
 800c70c:	2701      	movs	r7, #1
 800c70e:	e004      	b.n	800c71a <_rclc_execute+0x192>
 800c710:	f008 fd6c 	bl	80151ec <rclc_action_send_result_request>
 800c714:	b990      	cbnz	r0, 800c73c <_rclc_execute+0x1b4>
 800c716:	722f      	strb	r7, [r5, #8]
 800c718:	6860      	ldr	r0, [r4, #4]
 800c71a:	f008 fe19 	bl	8015350 <rclc_action_find_first_handle_with_goal_response>
 800c71e:	4605      	mov	r5, r0
 800c720:	b198      	cbz	r0, 800c74a <_rclc_execute+0x1c2>
 800c722:	6863      	ldr	r3, [r4, #4]
 800c724:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c72c:	f885 6020 	strb.w	r6, [r5, #32]
 800c730:	4798      	blx	r3
 800c732:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c736:	4628      	mov	r0, r5
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1e9      	bne.n	800c710 <_rclc_execute+0x188>
 800c73c:	6860      	ldr	r0, [r4, #4]
 800c73e:	4629      	mov	r1, r5
 800c740:	f008 fd8a 	bl	8015258 <rclc_action_remove_used_goal_handle>
 800c744:	e7e8      	b.n	800c718 <_rclc_execute+0x190>
 800c746:	200b      	movs	r0, #11
 800c748:	4770      	bx	lr
 800c74a:	6860      	ldr	r0, [r4, #4]
 800c74c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c750:	b18b      	cbz	r3, 800c776 <_rclc_execute+0x1ee>
 800c752:	68c5      	ldr	r5, [r0, #12]
 800c754:	b32d      	cbz	r5, 800c7a2 <_rclc_execute+0x21a>
 800c756:	2600      	movs	r6, #0
 800c758:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c75c:	b143      	cbz	r3, 800c770 <_rclc_execute+0x1e8>
 800c75e:	69c3      	ldr	r3, [r0, #28]
 800c760:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c764:	b123      	cbz	r3, 800c770 <_rclc_execute+0x1e8>
 800c766:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c768:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c76a:	4628      	mov	r0, r5
 800c76c:	4798      	blx	r3
 800c76e:	6860      	ldr	r0, [r4, #4]
 800c770:	682d      	ldr	r5, [r5, #0]
 800c772:	2d00      	cmp	r5, #0
 800c774:	d1f0      	bne.n	800c758 <_rclc_execute+0x1d0>
 800c776:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c77a:	b193      	cbz	r3, 800c7a2 <_rclc_execute+0x21a>
 800c77c:	68c5      	ldr	r5, [r0, #12]
 800c77e:	b185      	cbz	r5, 800c7a2 <_rclc_execute+0x21a>
 800c780:	2600      	movs	r6, #0
 800c782:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c786:	b14b      	cbz	r3, 800c79c <_rclc_execute+0x214>
 800c788:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c78a:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c78e:	b12b      	cbz	r3, 800c79c <_rclc_execute+0x214>
 800c790:	4628      	mov	r0, r5
 800c792:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c794:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c798:	4798      	blx	r3
 800c79a:	6860      	ldr	r0, [r4, #4]
 800c79c:	682d      	ldr	r5, [r5, #0]
 800c79e:	2d00      	cmp	r5, #0
 800c7a0:	d1ef      	bne.n	800c782 <_rclc_execute+0x1fa>
 800c7a2:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f43f aef8 	beq.w	800c59c <_rclc_execute+0x14>
 800c7ac:	2700      	movs	r7, #0
 800c7ae:	e00b      	b.n	800c7c8 <_rclc_execute+0x240>
 800c7b0:	6863      	ldr	r3, [r4, #4]
 800c7b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c7b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c7b6:	6a1e      	ldr	r6, [r3, #32]
 800c7b8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800c7bc:	47b0      	blx	r6
 800c7be:	6860      	ldr	r0, [r4, #4]
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	f008 fd49 	bl	8015258 <rclc_action_remove_used_goal_handle>
 800c7c6:	6860      	ldr	r0, [r4, #4]
 800c7c8:	f008 fdce 	bl	8015368 <rclc_action_find_first_handle_with_result_response>
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d1ee      	bne.n	800c7b0 <_rclc_execute+0x228>
 800c7d2:	e6e3      	b.n	800c59c <_rclc_execute+0x14>
 800c7d4:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800c7d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c7da:	2800      	cmp	r0, #0
 800c7dc:	f43f af61 	beq.w	800c6a2 <_rclc_execute+0x11a>
 800c7e0:	e75e      	b.n	800c6a0 <_rclc_execute+0x118>
 800c7e2:	6840      	ldr	r0, [r0, #4]
 800c7e4:	e78e      	b.n	800c704 <_rclc_execute+0x17c>
 800c7e6:	6840      	ldr	r0, [r0, #4]
 800c7e8:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f43f af1a 	beq.w	800c626 <_rclc_execute+0x9e>
 800c7f2:	e70f      	b.n	800c614 <_rclc_execute+0x8c>
 800c7f4:	f104 0510 	add.w	r5, r4, #16
 800c7f8:	460a      	mov	r2, r1
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	47b0      	blx	r6
 800c7fe:	e744      	b.n	800c68a <_rclc_execute+0x102>
 800c800:	6860      	ldr	r0, [r4, #4]
 800c802:	f880 5020 	strb.w	r5, [r0, #32]
 800c806:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f43f aec6 	beq.w	800c59c <_rclc_execute+0x14>
 800c810:	68c5      	ldr	r5, [r0, #12]
 800c812:	b325      	cbz	r5, 800c85e <_rclc_execute+0x2d6>
 800c814:	2602      	movs	r6, #2
 800c816:	e001      	b.n	800c81c <_rclc_execute+0x294>
 800c818:	682d      	ldr	r5, [r5, #0]
 800c81a:	b305      	cbz	r5, 800c85e <_rclc_execute+0x2d6>
 800c81c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c820:	2b03      	cmp	r3, #3
 800c822:	d1f9      	bne.n	800c818 <_rclc_execute+0x290>
 800c824:	69c3      	ldr	r3, [r0, #28]
 800c826:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c828:	4628      	mov	r0, r5
 800c82a:	4798      	blx	r3
 800c82c:	4603      	mov	r3, r0
 800c82e:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800c832:	4628      	mov	r0, r5
 800c834:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800c838:	b11b      	cbz	r3, 800c842 <_rclc_execute+0x2ba>
 800c83a:	f008 fdc1 	bl	80153c0 <rclc_action_server_goal_cancel_accept>
 800c83e:	6860      	ldr	r0, [r4, #4]
 800c840:	e7ea      	b.n	800c818 <_rclc_execute+0x290>
 800c842:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c844:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c848:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800c84c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c850:	6860      	ldr	r0, [r4, #4]
 800c852:	2101      	movs	r1, #1
 800c854:	f008 fde0 	bl	8015418 <rclc_action_server_goal_cancel_reject>
 800c858:	722e      	strb	r6, [r5, #8]
 800c85a:	6860      	ldr	r0, [r4, #4]
 800c85c:	e7dc      	b.n	800c818 <_rclc_execute+0x290>
 800c85e:	2300      	movs	r3, #0
 800c860:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c864:	e69a      	b.n	800c59c <_rclc_execute+0x14>
 800c866:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c868:	47b0      	blx	r6
 800c86a:	f104 0510 	add.w	r5, r4, #16
 800c86e:	e70c      	b.n	800c68a <_rclc_execute+0x102>
 800c870:	2001      	movs	r0, #1
 800c872:	e694      	b.n	800c59e <_rclc_execute+0x16>
 800c874:	0000      	movs	r0, r0
	...

0800c878 <rclc_executor_init>:
 800c878:	2800      	cmp	r0, #0
 800c87a:	d05a      	beq.n	800c932 <rclc_executor_init+0xba>
 800c87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c880:	460d      	mov	r5, r1
 800c882:	b0b2      	sub	sp, #200	@ 0xc8
 800c884:	2900      	cmp	r1, #0
 800c886:	d050      	beq.n	800c92a <rclc_executor_init+0xb2>
 800c888:	4604      	mov	r4, r0
 800c88a:	4618      	mov	r0, r3
 800c88c:	4616      	mov	r6, r2
 800c88e:	461f      	mov	r7, r3
 800c890:	f000 fbce 	bl	800d030 <rcutils_allocator_is_valid>
 800c894:	2800      	cmp	r0, #0
 800c896:	d048      	beq.n	800c92a <rclc_executor_init+0xb2>
 800c898:	2e00      	cmp	r6, #0
 800c89a:	d046      	beq.n	800c92a <rclc_executor_init+0xb2>
 800c89c:	492a      	ldr	r1, [pc, #168]	@ (800c948 <rclc_executor_init+0xd0>)
 800c89e:	2290      	movs	r2, #144	@ 0x90
 800c8a0:	a80e      	add	r0, sp, #56	@ 0x38
 800c8a2:	f00d fc24 	bl	801a0ee <memcpy>
 800c8a6:	a90e      	add	r1, sp, #56	@ 0x38
 800c8a8:	2290      	movs	r2, #144	@ 0x90
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f00d fc1f 	bl	801a0ee <memcpy>
 800c8b0:	6065      	str	r5, [r4, #4]
 800c8b2:	4668      	mov	r0, sp
 800c8b4:	60e6      	str	r6, [r4, #12]
 800c8b6:	466d      	mov	r5, sp
 800c8b8:	f007 fa0c 	bl	8013cd4 <rcl_get_zero_initialized_wait_set>
 800c8bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8be:	f104 0c18 	add.w	ip, r4, #24
 800c8c2:	f8d7 8000 	ldr.w	r8, [r7]
 800c8c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c8ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c8d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c8d6:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800c940 <rclc_executor_init+0xc8>
 800c8da:	682b      	ldr	r3, [r5, #0]
 800c8dc:	f8cc 3000 	str.w	r3, [ip]
 800c8e0:	6939      	ldr	r1, [r7, #16]
 800c8e2:	6167      	str	r7, [r4, #20]
 800c8e4:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800c8e8:	01b0      	lsls	r0, r6, #6
 800c8ea:	47c0      	blx	r8
 800c8ec:	60a0      	str	r0, [r4, #8]
 800c8ee:	b310      	cbz	r0, 800c936 <rclc_executor_init+0xbe>
 800c8f0:	2500      	movs	r5, #0
 800c8f2:	e000      	b.n	800c8f6 <rclc_executor_init+0x7e>
 800c8f4:	68a0      	ldr	r0, [r4, #8]
 800c8f6:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	3501      	adds	r5, #1
 800c8fe:	f000 fa25 	bl	800cd4c <rclc_executor_handle_init>
 800c902:	42ae      	cmp	r6, r5
 800c904:	d1f6      	bne.n	800c8f4 <rclc_executor_init+0x7c>
 800c906:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800c90a:	f000 fa15 	bl	800cd38 <rclc_executor_handle_counters_zero_init>
 800c90e:	490f      	ldr	r1, [pc, #60]	@ (800c94c <rclc_executor_init+0xd4>)
 800c910:	68a2      	ldr	r2, [r4, #8]
 800c912:	2300      	movs	r3, #0
 800c914:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800c918:	b12a      	cbz	r2, 800c926 <rclc_executor_init+0xae>
 800c91a:	6962      	ldr	r2, [r4, #20]
 800c91c:	b11a      	cbz	r2, 800c926 <rclc_executor_init+0xae>
 800c91e:	68e2      	ldr	r2, [r4, #12]
 800c920:	b10a      	cbz	r2, 800c926 <rclc_executor_init+0xae>
 800c922:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800c926:	2000      	movs	r0, #0
 800c928:	e000      	b.n	800c92c <rclc_executor_init+0xb4>
 800c92a:	200b      	movs	r0, #11
 800c92c:	b032      	add	sp, #200	@ 0xc8
 800c92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c932:	200b      	movs	r0, #11
 800c934:	4770      	bx	lr
 800c936:	200a      	movs	r0, #10
 800c938:	e7f8      	b.n	800c92c <rclc_executor_init+0xb4>
 800c93a:	bf00      	nop
 800c93c:	f3af 8000 	nop.w
 800c940:	3b9aca00 	.word	0x3b9aca00
 800c944:	00000000 	.word	0x00000000
 800c948:	0801c378 	.word	0x0801c378
 800c94c:	0800c51d 	.word	0x0800c51d

0800c950 <rclc_executor_add_subscription>:
 800c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c952:	f89d e018 	ldrb.w	lr, [sp, #24]
 800c956:	b338      	cbz	r0, 800c9a8 <rclc_executor_add_subscription+0x58>
 800c958:	b331      	cbz	r1, 800c9a8 <rclc_executor_add_subscription+0x58>
 800c95a:	b32a      	cbz	r2, 800c9a8 <rclc_executor_add_subscription+0x58>
 800c95c:	b323      	cbz	r3, 800c9a8 <rclc_executor_add_subscription+0x58>
 800c95e:	4604      	mov	r4, r0
 800c960:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800c964:	42a8      	cmp	r0, r5
 800c966:	d301      	bcc.n	800c96c <rclc_executor_add_subscription+0x1c>
 800c968:	2001      	movs	r0, #1
 800c96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c96c:	68a6      	ldr	r6, [r4, #8]
 800c96e:	0187      	lsls	r7, r0, #6
 800c970:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800c974:	2500      	movs	r5, #0
 800c976:	55f5      	strb	r5, [r6, r7]
 800c978:	3001      	adds	r0, #1
 800c97a:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800c97e:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800c982:	2301      	movs	r3, #1
 800c984:	f104 0518 	add.w	r5, r4, #24
 800c988:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800c98c:	f88c e001 	strb.w	lr, [ip, #1]
 800c990:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800c994:	6120      	str	r0, [r4, #16]
 800c996:	4628      	mov	r0, r5
 800c998:	f007 f9b0 	bl	8013cfc <rcl_wait_set_is_valid>
 800c99c:	b930      	cbnz	r0, 800c9ac <rclc_executor_add_subscription+0x5c>
 800c99e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800c9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a8:	200b      	movs	r0, #11
 800c9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f007 f9ab 	bl	8013d08 <rcl_wait_set_fini>
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	d0f3      	beq.n	800c99e <rclc_executor_add_subscription+0x4e>
 800c9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9b8 <rclc_executor_add_timer>:
 800c9b8:	b300      	cbz	r0, 800c9fc <rclc_executor_add_timer+0x44>
 800c9ba:	b1f9      	cbz	r1, 800c9fc <rclc_executor_add_timer+0x44>
 800c9bc:	b538      	push	{r3, r4, r5, lr}
 800c9be:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	4604      	mov	r4, r0
 800c9c6:	d301      	bcc.n	800c9cc <rclc_executor_add_timer+0x14>
 800c9c8:	2001      	movs	r0, #1
 800c9ca:	bd38      	pop	{r3, r4, r5, pc}
 800c9cc:	6880      	ldr	r0, [r0, #8]
 800c9ce:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800c9d2:	019d      	lsls	r5, r3, #6
 800c9d4:	6051      	str	r1, [r2, #4]
 800c9d6:	2102      	movs	r1, #2
 800c9d8:	5341      	strh	r1, [r0, r5]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	2000      	movs	r0, #0
 800c9de:	2101      	movs	r1, #1
 800c9e0:	f104 0518 	add.w	r5, r4, #24
 800c9e4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800c9e6:	8711      	strh	r1, [r2, #56]	@ 0x38
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	6123      	str	r3, [r4, #16]
 800c9ec:	f007 f986 	bl	8013cfc <rcl_wait_set_is_valid>
 800c9f0:	b930      	cbnz	r0, 800ca00 <rclc_executor_add_timer+0x48>
 800c9f2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	6523      	str	r3, [r4, #80]	@ 0x50
 800c9fa:	bd38      	pop	{r3, r4, r5, pc}
 800c9fc:	200b      	movs	r0, #11
 800c9fe:	4770      	bx	lr
 800ca00:	4628      	mov	r0, r5
 800ca02:	f007 f981 	bl	8013d08 <rcl_wait_set_fini>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d0f3      	beq.n	800c9f2 <rclc_executor_add_timer+0x3a>
 800ca0a:	bd38      	pop	{r3, r4, r5, pc}

0800ca0c <rclc_executor_prepare>:
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d044      	beq.n	800ca9a <rclc_executor_prepare+0x8e>
 800ca10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca12:	f100 0518 	add.w	r5, r0, #24
 800ca16:	b09b      	sub	sp, #108	@ 0x6c
 800ca18:	4604      	mov	r4, r0
 800ca1a:	4628      	mov	r0, r5
 800ca1c:	f007 f96e 	bl	8013cfc <rcl_wait_set_is_valid>
 800ca20:	b110      	cbz	r0, 800ca28 <rclc_executor_prepare+0x1c>
 800ca22:	2000      	movs	r0, #0
 800ca24:	b01b      	add	sp, #108	@ 0x6c
 800ca26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f007 f96d 	bl	8013d08 <rcl_wait_set_fini>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d130      	bne.n	800ca94 <rclc_executor_prepare+0x88>
 800ca32:	a80c      	add	r0, sp, #48	@ 0x30
 800ca34:	f007 f94e 	bl	8013cd4 <rcl_get_zero_initialized_wait_set>
 800ca38:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ca3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca40:	46ae      	mov	lr, r5
 800ca42:	6967      	ldr	r7, [r4, #20]
 800ca44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca58:	f8dc 3000 	ldr.w	r3, [ip]
 800ca5c:	f8ce 3000 	str.w	r3, [lr]
 800ca60:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ca62:	ae04      	add	r6, sp, #16
 800ca64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	6862      	ldr	r2, [r4, #4]
 800ca6a:	6033      	str	r3, [r6, #0]
 800ca6c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800ca6e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800ca70:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ca74:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800ca78:	e9cd 2100 	strd	r2, r1, [sp]
 800ca7c:	4628      	mov	r0, r5
 800ca7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca80:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800ca82:	f007 fc71 	bl	8014368 <rcl_wait_set_init>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d0cc      	beq.n	800ca24 <rclc_executor_prepare+0x18>
 800ca8a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ca8c:	f000 fafc 	bl	800d088 <rcutils_reset_error>
 800ca90:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ca92:	e7c7      	b.n	800ca24 <rclc_executor_prepare+0x18>
 800ca94:	f000 faf8 	bl	800d088 <rcutils_reset_error>
 800ca98:	e7cb      	b.n	800ca32 <rclc_executor_prepare+0x26>
 800ca9a:	200b      	movs	r0, #11
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop

0800caa0 <rclc_executor_spin_some>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	b083      	sub	sp, #12
 800caa6:	2800      	cmp	r0, #0
 800caa8:	f000 8091 	beq.w	800cbce <rclc_executor_spin_some+0x12e>
 800caac:	4604      	mov	r4, r0
 800caae:	6840      	ldr	r0, [r0, #4]
 800cab0:	4690      	mov	r8, r2
 800cab2:	4699      	mov	r9, r3
 800cab4:	f005 fe18 	bl	80126e8 <rcl_context_is_valid>
 800cab8:	2800      	cmp	r0, #0
 800caba:	d037      	beq.n	800cb2c <rclc_executor_spin_some+0x8c>
 800cabc:	4620      	mov	r0, r4
 800cabe:	f104 0718 	add.w	r7, r4, #24
 800cac2:	f7ff ffa3 	bl	800ca0c <rclc_executor_prepare>
 800cac6:	4638      	mov	r0, r7
 800cac8:	f007 fa02 	bl	8013ed0 <rcl_wait_set_clear>
 800cacc:	4606      	mov	r6, r0
 800cace:	2800      	cmp	r0, #0
 800cad0:	d177      	bne.n	800cbc2 <rclc_executor_spin_some+0x122>
 800cad2:	68e3      	ldr	r3, [r4, #12]
 800cad4:	4605      	mov	r5, r0
 800cad6:	b1eb      	cbz	r3, 800cb14 <rclc_executor_spin_some+0x74>
 800cad8:	68a1      	ldr	r1, [r4, #8]
 800cada:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800cade:	01aa      	lsls	r2, r5, #6
 800cae0:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cae4:	b1b3      	cbz	r3, 800cb14 <rclc_executor_spin_some+0x74>
 800cae6:	5c8b      	ldrb	r3, [r1, r2]
 800cae8:	2b0a      	cmp	r3, #10
 800caea:	d81f      	bhi.n	800cb2c <rclc_executor_spin_some+0x8c>
 800caec:	e8df f003 	tbb	[pc, r3]
 800caf0:	253e3434 	.word	0x253e3434
 800caf4:	06060625 	.word	0x06060625
 800caf8:	525d      	.short	0x525d
 800cafa:	48          	.byte	0x48
 800cafb:	00          	.byte	0x00
 800cafc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cb00:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cb04:	4638      	mov	r0, r7
 800cb06:	f007 fd39 	bl	801457c <rcl_wait_set_add_service>
 800cb0a:	b9f8      	cbnz	r0, 800cb4c <rclc_executor_spin_some+0xac>
 800cb0c:	68e3      	ldr	r3, [r4, #12]
 800cb0e:	3501      	adds	r5, #1
 800cb10:	42ab      	cmp	r3, r5
 800cb12:	d8e1      	bhi.n	800cad8 <rclc_executor_spin_some+0x38>
 800cb14:	4642      	mov	r2, r8
 800cb16:	464b      	mov	r3, r9
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f007 fd5d 	bl	80145d8 <rcl_wait>
 800cb1e:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800cb22:	2d00      	cmp	r5, #0
 800cb24:	f000 80ab 	beq.w	800cc7e <rclc_executor_spin_some+0x1de>
 800cb28:	2d01      	cmp	r5, #1
 800cb2a:	d055      	beq.n	800cbd8 <rclc_executor_spin_some+0x138>
 800cb2c:	f000 faac 	bl	800d088 <rcutils_reset_error>
 800cb30:	2601      	movs	r6, #1
 800cb32:	4630      	mov	r0, r6
 800cb34:	b003      	add	sp, #12
 800cb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb3a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cb3e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cb42:	4638      	mov	r0, r7
 800cb44:	f007 fcee 	bl	8014524 <rcl_wait_set_add_client>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d0df      	beq.n	800cb0c <rclc_executor_spin_some+0x6c>
 800cb4c:	9001      	str	r0, [sp, #4]
 800cb4e:	f000 fa9b 	bl	800d088 <rcutils_reset_error>
 800cb52:	9801      	ldr	r0, [sp, #4]
 800cb54:	4606      	mov	r6, r0
 800cb56:	e7ec      	b.n	800cb32 <rclc_executor_spin_some+0x92>
 800cb58:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cb5c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cb60:	4638      	mov	r0, r7
 800cb62:	f007 f989 	bl	8013e78 <rcl_wait_set_add_subscription>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d0d0      	beq.n	800cb0c <rclc_executor_spin_some+0x6c>
 800cb6a:	e7ef      	b.n	800cb4c <rclc_executor_spin_some+0xac>
 800cb6c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cb70:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cb74:	4638      	mov	r0, r7
 800cb76:	f007 fca5 	bl	80144c4 <rcl_wait_set_add_timer>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	d0c6      	beq.n	800cb0c <rclc_executor_spin_some+0x6c>
 800cb7e:	e7e5      	b.n	800cb4c <rclc_executor_spin_some+0xac>
 800cb80:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cb84:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cb88:	4638      	mov	r0, r7
 800cb8a:	f007 fc6f 	bl	801446c <rcl_wait_set_add_guard_condition>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d0bc      	beq.n	800cb0c <rclc_executor_spin_some+0x6c>
 800cb92:	e7db      	b.n	800cb4c <rclc_executor_spin_some+0xac>
 800cb94:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cb98:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cb9c:	3110      	adds	r1, #16
 800cb9e:	4638      	mov	r0, r7
 800cba0:	f008 fa38 	bl	8015014 <rcl_action_wait_set_add_action_server>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d0b1      	beq.n	800cb0c <rclc_executor_spin_some+0x6c>
 800cba8:	e7d0      	b.n	800cb4c <rclc_executor_spin_some+0xac>
 800cbaa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cbae:	2300      	movs	r3, #0
 800cbb0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cbb4:	3110      	adds	r1, #16
 800cbb6:	4638      	mov	r0, r7
 800cbb8:	f008 f81a 	bl	8014bf0 <rcl_action_wait_set_add_action_client>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d0a5      	beq.n	800cb0c <rclc_executor_spin_some+0x6c>
 800cbc0:	e7c4      	b.n	800cb4c <rclc_executor_spin_some+0xac>
 800cbc2:	f000 fa61 	bl	800d088 <rcutils_reset_error>
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	b003      	add	sp, #12
 800cbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbce:	260b      	movs	r6, #11
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	b003      	add	sp, #12
 800cbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd8:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800cbdc:	4663      	mov	r3, ip
 800cbde:	4615      	mov	r5, r2
 800cbe0:	b1ca      	cbz	r2, 800cc16 <rclc_executor_spin_some+0x176>
 800cbe2:	2500      	movs	r5, #0
 800cbe4:	46a8      	mov	r8, r5
 800cbe6:	f240 1991 	movw	r9, #401	@ 0x191
 800cbea:	e00c      	b.n	800cc06 <rclc_executor_spin_some+0x166>
 800cbec:	f7ff fade 	bl	800c1ac <_rclc_check_for_new_data>
 800cbf0:	f108 0801 	add.w	r8, r8, #1
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	b108      	cbz	r0, 800cbfc <rclc_executor_spin_some+0x15c>
 800cbf8:	4548      	cmp	r0, r9
 800cbfa:	d13e      	bne.n	800cc7a <rclc_executor_spin_some+0x1da>
 800cbfc:	68e2      	ldr	r2, [r4, #12]
 800cbfe:	4590      	cmp	r8, r2
 800cc00:	f080 808b 	bcs.w	800cd1a <rclc_executor_spin_some+0x27a>
 800cc04:	68a3      	ldr	r3, [r4, #8]
 800cc06:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800cc0a:	469c      	mov	ip, r3
 800cc0c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cc10:	4639      	mov	r1, r7
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1ea      	bne.n	800cbec <rclc_executor_spin_some+0x14c>
 800cc16:	4611      	mov	r1, r2
 800cc18:	4660      	mov	r0, ip
 800cc1a:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800cc1e:	4798      	blx	r3
 800cc20:	b358      	cbz	r0, 800cc7a <rclc_executor_spin_some+0x1da>
 800cc22:	68e3      	ldr	r3, [r4, #12]
 800cc24:	b34b      	cbz	r3, 800cc7a <rclc_executor_spin_some+0x1da>
 800cc26:	f04f 0800 	mov.w	r8, #0
 800cc2a:	f240 1991 	movw	r9, #401	@ 0x191
 800cc2e:	e00a      	b.n	800cc46 <rclc_executor_spin_some+0x1a6>
 800cc30:	f7ff fb0a 	bl	800c248 <_rclc_take_new_data>
 800cc34:	f108 0801 	add.w	r8, r8, #1
 800cc38:	4605      	mov	r5, r0
 800cc3a:	b108      	cbz	r0, 800cc40 <rclc_executor_spin_some+0x1a0>
 800cc3c:	4548      	cmp	r0, r9
 800cc3e:	d11c      	bne.n	800cc7a <rclc_executor_spin_some+0x1da>
 800cc40:	68e3      	ldr	r3, [r4, #12]
 800cc42:	4598      	cmp	r8, r3
 800cc44:	d26f      	bcs.n	800cd26 <rclc_executor_spin_some+0x286>
 800cc46:	68a3      	ldr	r3, [r4, #8]
 800cc48:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800cc52:	2a00      	cmp	r2, #0
 800cc54:	d1ec      	bne.n	800cc30 <rclc_executor_spin_some+0x190>
 800cc56:	2700      	movs	r7, #0
 800cc58:	e009      	b.n	800cc6e <rclc_executor_spin_some+0x1ce>
 800cc5a:	f7ff fc95 	bl	800c588 <_rclc_execute>
 800cc5e:	3701      	adds	r7, #1
 800cc60:	4605      	mov	r5, r0
 800cc62:	b950      	cbnz	r0, 800cc7a <rclc_executor_spin_some+0x1da>
 800cc64:	68e3      	ldr	r3, [r4, #12]
 800cc66:	429f      	cmp	r7, r3
 800cc68:	f4bf af63 	bcs.w	800cb32 <rclc_executor_spin_some+0x92>
 800cc6c:	68a3      	ldr	r3, [r4, #8]
 800cc6e:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800cc72:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1ef      	bne.n	800cc5a <rclc_executor_spin_some+0x1ba>
 800cc7a:	462e      	mov	r6, r5
 800cc7c:	e759      	b.n	800cb32 <rclc_executor_spin_some+0x92>
 800cc7e:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800cc82:	4663      	mov	r3, ip
 800cc84:	2a00      	cmp	r2, #0
 800cc86:	d054      	beq.n	800cd32 <rclc_executor_spin_some+0x292>
 800cc88:	46a8      	mov	r8, r5
 800cc8a:	f240 1991 	movw	r9, #401	@ 0x191
 800cc8e:	e00b      	b.n	800cca8 <rclc_executor_spin_some+0x208>
 800cc90:	f7ff fa8c 	bl	800c1ac <_rclc_check_for_new_data>
 800cc94:	f108 0801 	add.w	r8, r8, #1
 800cc98:	4605      	mov	r5, r0
 800cc9a:	b108      	cbz	r0, 800cca0 <rclc_executor_spin_some+0x200>
 800cc9c:	4548      	cmp	r0, r9
 800cc9e:	d1ec      	bne.n	800cc7a <rclc_executor_spin_some+0x1da>
 800cca0:	68e2      	ldr	r2, [r4, #12]
 800cca2:	4590      	cmp	r8, r2
 800cca4:	d23c      	bcs.n	800cd20 <rclc_executor_spin_some+0x280>
 800cca6:	68a3      	ldr	r3, [r4, #8]
 800cca8:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800ccac:	469c      	mov	ip, r3
 800ccae:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1eb      	bne.n	800cc90 <rclc_executor_spin_some+0x1f0>
 800ccb8:	4611      	mov	r1, r2
 800ccba:	4660      	mov	r0, ip
 800ccbc:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800ccc0:	4798      	blx	r3
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d0d9      	beq.n	800cc7a <rclc_executor_spin_some+0x1da>
 800ccc6:	68e3      	ldr	r3, [r4, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d0d6      	beq.n	800cc7a <rclc_executor_spin_some+0x1da>
 800cccc:	f04f 0a00 	mov.w	sl, #0
 800ccd0:	f240 1891 	movw	r8, #401	@ 0x191
 800ccd4:	f240 2959 	movw	r9, #601	@ 0x259
 800ccd8:	e013      	b.n	800cd02 <rclc_executor_spin_some+0x262>
 800ccda:	f7ff fab5 	bl	800c248 <_rclc_take_new_data>
 800ccde:	b118      	cbz	r0, 800cce8 <rclc_executor_spin_some+0x248>
 800cce0:	4540      	cmp	r0, r8
 800cce2:	d001      	beq.n	800cce8 <rclc_executor_spin_some+0x248>
 800cce4:	4548      	cmp	r0, r9
 800cce6:	d122      	bne.n	800cd2e <rclc_executor_spin_some+0x28e>
 800cce8:	68a0      	ldr	r0, [r4, #8]
 800ccea:	4458      	add	r0, fp
 800ccec:	f7ff fc4c 	bl	800c588 <_rclc_execute>
 800ccf0:	f10a 0a01 	add.w	sl, sl, #1
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d1bf      	bne.n	800cc7a <rclc_executor_spin_some+0x1da>
 800ccfa:	68e3      	ldr	r3, [r4, #12]
 800ccfc:	459a      	cmp	sl, r3
 800ccfe:	f4bf af18 	bcs.w	800cb32 <rclc_executor_spin_some+0x92>
 800cd02:	68a0      	ldr	r0, [r4, #8]
 800cd04:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800cd08:	4639      	mov	r1, r7
 800cd0a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cd0e:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1e1      	bne.n	800ccda <rclc_executor_spin_some+0x23a>
 800cd16:	462e      	mov	r6, r5
 800cd18:	e70b      	b.n	800cb32 <rclc_executor_spin_some+0x92>
 800cd1a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800cd1e:	e77a      	b.n	800cc16 <rclc_executor_spin_some+0x176>
 800cd20:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800cd24:	e7c8      	b.n	800ccb8 <rclc_executor_spin_some+0x218>
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d0a7      	beq.n	800cc7a <rclc_executor_spin_some+0x1da>
 800cd2a:	68a3      	ldr	r3, [r4, #8]
 800cd2c:	e793      	b.n	800cc56 <rclc_executor_spin_some+0x1b6>
 800cd2e:	4606      	mov	r6, r0
 800cd30:	e6ff      	b.n	800cb32 <rclc_executor_spin_some+0x92>
 800cd32:	4615      	mov	r5, r2
 800cd34:	e7c0      	b.n	800ccb8 <rclc_executor_spin_some+0x218>
 800cd36:	bf00      	nop

0800cd38 <rclc_executor_handle_counters_zero_init>:
 800cd38:	b130      	cbz	r0, 800cd48 <rclc_executor_handle_counters_zero_init+0x10>
 800cd3a:	b508      	push	{r3, lr}
 800cd3c:	2220      	movs	r2, #32
 800cd3e:	2100      	movs	r1, #0
 800cd40:	f00d f8fa 	bl	8019f38 <memset>
 800cd44:	2000      	movs	r0, #0
 800cd46:	bd08      	pop	{r3, pc}
 800cd48:	200b      	movs	r0, #11
 800cd4a:	4770      	bx	lr

0800cd4c <rclc_executor_handle_init>:
 800cd4c:	b158      	cbz	r0, 800cd66 <rclc_executor_handle_init+0x1a>
 800cd4e:	2300      	movs	r3, #0
 800cd50:	220b      	movs	r2, #11
 800cd52:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800cd56:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800cd5a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800cd5e:	8002      	strh	r2, [r0, #0]
 800cd60:	8703      	strh	r3, [r0, #56]	@ 0x38
 800cd62:	4618      	mov	r0, r3
 800cd64:	4770      	bx	lr
 800cd66:	200b      	movs	r0, #11
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop

0800cd6c <rclc_support_init>:
 800cd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd70:	b086      	sub	sp, #24
 800cd72:	b3b8      	cbz	r0, 800cde4 <rclc_support_init+0x78>
 800cd74:	461c      	mov	r4, r3
 800cd76:	b3ab      	cbz	r3, 800cde4 <rclc_support_init+0x78>
 800cd78:	460f      	mov	r7, r1
 800cd7a:	4690      	mov	r8, r2
 800cd7c:	4606      	mov	r6, r0
 800cd7e:	f005 fe1d 	bl	80129bc <rcl_get_zero_initialized_init_options>
 800cd82:	f104 030c 	add.w	r3, r4, #12
 800cd86:	9005      	str	r0, [sp, #20]
 800cd88:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd8c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cd90:	a805      	add	r0, sp, #20
 800cd92:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cd96:	f005 fe13 	bl	80129c0 <rcl_init_options_init>
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	b9e0      	cbnz	r0, 800cdd8 <rclc_support_init+0x6c>
 800cd9e:	ad02      	add	r5, sp, #8
 800cda0:	4628      	mov	r0, r5
 800cda2:	f005 fc9d 	bl	80126e0 <rcl_get_zero_initialized_context>
 800cda6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cdaa:	4633      	mov	r3, r6
 800cdac:	e886 0003 	stmia.w	r6, {r0, r1}
 800cdb0:	aa05      	add	r2, sp, #20
 800cdb2:	4641      	mov	r1, r8
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	f005 fcfd 	bl	80127b4 <rcl_init>
 800cdba:	4605      	mov	r5, r0
 800cdbc:	b9b8      	cbnz	r0, 800cdee <rclc_support_init+0x82>
 800cdbe:	60b4      	str	r4, [r6, #8]
 800cdc0:	4622      	mov	r2, r4
 800cdc2:	f106 010c 	add.w	r1, r6, #12
 800cdc6:	2003      	movs	r0, #3
 800cdc8:	f006 fbda 	bl	8013580 <rcl_clock_init>
 800cdcc:	4605      	mov	r5, r0
 800cdce:	b970      	cbnz	r0, 800cdee <rclc_support_init+0x82>
 800cdd0:	a805      	add	r0, sp, #20
 800cdd2:	f005 fe51 	bl	8012a78 <rcl_init_options_fini>
 800cdd6:	b108      	cbz	r0, 800cddc <rclc_support_init+0x70>
 800cdd8:	f000 f956 	bl	800d088 <rcutils_reset_error>
 800cddc:	4628      	mov	r0, r5
 800cdde:	b006      	add	sp, #24
 800cde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cde4:	250b      	movs	r5, #11
 800cde6:	4628      	mov	r0, r5
 800cde8:	b006      	add	sp, #24
 800cdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdee:	f000 f94b 	bl	800d088 <rcutils_reset_error>
 800cdf2:	a805      	add	r0, sp, #20
 800cdf4:	f005 fe40 	bl	8012a78 <rcl_init_options_fini>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	d0ef      	beq.n	800cddc <rclc_support_init+0x70>
 800cdfc:	e7ec      	b.n	800cdd8 <rclc_support_init+0x6c>
 800cdfe:	bf00      	nop

0800ce00 <rclc_node_init_default>:
 800ce00:	b3b8      	cbz	r0, 800ce72 <rclc_node_init_default+0x72>
 800ce02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce06:	460d      	mov	r5, r1
 800ce08:	b0a1      	sub	sp, #132	@ 0x84
 800ce0a:	b329      	cbz	r1, 800ce58 <rclc_node_init_default+0x58>
 800ce0c:	4616      	mov	r6, r2
 800ce0e:	b31a      	cbz	r2, 800ce58 <rclc_node_init_default+0x58>
 800ce10:	461f      	mov	r7, r3
 800ce12:	b30b      	cbz	r3, 800ce58 <rclc_node_init_default+0x58>
 800ce14:	f10d 0810 	add.w	r8, sp, #16
 800ce18:	4604      	mov	r4, r0
 800ce1a:	4640      	mov	r0, r8
 800ce1c:	f005 feb2 	bl	8012b84 <rcl_get_zero_initialized_node>
 800ce20:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ce24:	f10d 0918 	add.w	r9, sp, #24
 800ce28:	e884 0003 	stmia.w	r4, {r0, r1}
 800ce2c:	4648      	mov	r0, r9
 800ce2e:	f006 f851 	bl	8012ed4 <rcl_node_get_default_options>
 800ce32:	4640      	mov	r0, r8
 800ce34:	f005 fea6 	bl	8012b84 <rcl_get_zero_initialized_node>
 800ce38:	f8cd 9000 	str.w	r9, [sp]
 800ce3c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ce40:	463b      	mov	r3, r7
 800ce42:	e884 0003 	stmia.w	r4, {r0, r1}
 800ce46:	4632      	mov	r2, r6
 800ce48:	4629      	mov	r1, r5
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f005 fea4 	bl	8012b98 <rcl_node_init>
 800ce50:	b930      	cbnz	r0, 800ce60 <rclc_node_init_default+0x60>
 800ce52:	b021      	add	sp, #132	@ 0x84
 800ce54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce58:	200b      	movs	r0, #11
 800ce5a:	b021      	add	sp, #132	@ 0x84
 800ce5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce60:	9003      	str	r0, [sp, #12]
 800ce62:	f000 f911 	bl	800d088 <rcutils_reset_error>
 800ce66:	f000 f90f 	bl	800d088 <rcutils_reset_error>
 800ce6a:	9803      	ldr	r0, [sp, #12]
 800ce6c:	b021      	add	sp, #132	@ 0x84
 800ce6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce72:	200b      	movs	r0, #11
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop

0800ce78 <rclc_publisher_init_default>:
 800ce78:	b368      	cbz	r0, 800ced6 <rclc_publisher_init_default+0x5e>
 800ce7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7e:	460d      	mov	r5, r1
 800ce80:	b0a0      	sub	sp, #128	@ 0x80
 800ce82:	b321      	cbz	r1, 800cece <rclc_publisher_init_default+0x56>
 800ce84:	4616      	mov	r6, r2
 800ce86:	b312      	cbz	r2, 800cece <rclc_publisher_init_default+0x56>
 800ce88:	461f      	mov	r7, r3
 800ce8a:	b303      	cbz	r3, 800cece <rclc_publisher_init_default+0x56>
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	f7ff f87d 	bl	800bf8c <rcl_get_zero_initialized_publisher>
 800ce92:	f10d 0810 	add.w	r8, sp, #16
 800ce96:	6020      	str	r0, [r4, #0]
 800ce98:	4640      	mov	r0, r8
 800ce9a:	f7ff f915 	bl	800c0c8 <rcl_publisher_get_default_options>
 800ce9e:	490f      	ldr	r1, [pc, #60]	@ (800cedc <rclc_publisher_init_default+0x64>)
 800cea0:	2250      	movs	r2, #80	@ 0x50
 800cea2:	4640      	mov	r0, r8
 800cea4:	f00d f923 	bl	801a0ee <memcpy>
 800cea8:	f8cd 8000 	str.w	r8, [sp]
 800ceac:	463b      	mov	r3, r7
 800ceae:	4632      	mov	r2, r6
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f7ff f870 	bl	800bf98 <rcl_publisher_init>
 800ceb8:	b910      	cbnz	r0, 800cec0 <rclc_publisher_init_default+0x48>
 800ceba:	b020      	add	sp, #128	@ 0x80
 800cebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec0:	9003      	str	r0, [sp, #12]
 800cec2:	f000 f8e1 	bl	800d088 <rcutils_reset_error>
 800cec6:	9803      	ldr	r0, [sp, #12]
 800cec8:	b020      	add	sp, #128	@ 0x80
 800ceca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cece:	200b      	movs	r0, #11
 800ced0:	b020      	add	sp, #128	@ 0x80
 800ced2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced6:	200b      	movs	r0, #11
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	0801c408 	.word	0x0801c408

0800cee0 <rclc_subscription_init_default>:
 800cee0:	b368      	cbz	r0, 800cf3e <rclc_subscription_init_default+0x5e>
 800cee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cee6:	460d      	mov	r5, r1
 800cee8:	b0a2      	sub	sp, #136	@ 0x88
 800ceea:	b321      	cbz	r1, 800cf36 <rclc_subscription_init_default+0x56>
 800ceec:	4616      	mov	r6, r2
 800ceee:	b312      	cbz	r2, 800cf36 <rclc_subscription_init_default+0x56>
 800cef0:	461f      	mov	r7, r3
 800cef2:	b303      	cbz	r3, 800cf36 <rclc_subscription_init_default+0x56>
 800cef4:	4604      	mov	r4, r0
 800cef6:	f006 f9f7 	bl	80132e8 <rcl_get_zero_initialized_subscription>
 800cefa:	f10d 0810 	add.w	r8, sp, #16
 800cefe:	6020      	str	r0, [r4, #0]
 800cf00:	4640      	mov	r0, r8
 800cf02:	f006 fa9f 	bl	8013444 <rcl_subscription_get_default_options>
 800cf06:	490f      	ldr	r1, [pc, #60]	@ (800cf44 <rclc_subscription_init_default+0x64>)
 800cf08:	2250      	movs	r2, #80	@ 0x50
 800cf0a:	4640      	mov	r0, r8
 800cf0c:	f00d f8ef 	bl	801a0ee <memcpy>
 800cf10:	f8cd 8000 	str.w	r8, [sp]
 800cf14:	463b      	mov	r3, r7
 800cf16:	4632      	mov	r2, r6
 800cf18:	4629      	mov	r1, r5
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	f006 f9ea 	bl	80132f4 <rcl_subscription_init>
 800cf20:	b910      	cbnz	r0, 800cf28 <rclc_subscription_init_default+0x48>
 800cf22:	b022      	add	sp, #136	@ 0x88
 800cf24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf28:	9003      	str	r0, [sp, #12]
 800cf2a:	f000 f8ad 	bl	800d088 <rcutils_reset_error>
 800cf2e:	9803      	ldr	r0, [sp, #12]
 800cf30:	b022      	add	sp, #136	@ 0x88
 800cf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf36:	200b      	movs	r0, #11
 800cf38:	b022      	add	sp, #136	@ 0x88
 800cf3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf3e:	200b      	movs	r0, #11
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	0801c458 	.word	0x0801c458

0800cf48 <rclc_timer_init_default2>:
 800cf48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf4c:	b08c      	sub	sp, #48	@ 0x30
 800cf4e:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 800cf52:	b330      	cbz	r0, 800cfa2 <rclc_timer_init_default2+0x5a>
 800cf54:	460e      	mov	r6, r1
 800cf56:	b321      	cbz	r1, 800cfa2 <rclc_timer_init_default2+0x5a>
 800cf58:	4690      	mov	r8, r2
 800cf5a:	461f      	mov	r7, r3
 800cf5c:	4605      	mov	r5, r0
 800cf5e:	f006 fcef 	bl	8013940 <rcl_get_zero_initialized_timer>
 800cf62:	9408      	str	r4, [sp, #32]
 800cf64:	68b4      	ldr	r4, [r6, #8]
 800cf66:	6028      	str	r0, [r5, #0]
 800cf68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cf6a:	f10d 0c0c 	add.w	ip, sp, #12
 800cf6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf72:	6823      	ldr	r3, [r4, #0]
 800cf74:	f8cc 3000 	str.w	r3, [ip]
 800cf78:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf7a:	9302      	str	r3, [sp, #8]
 800cf7c:	e9cd 8700 	strd	r8, r7, [sp]
 800cf80:	4628      	mov	r0, r5
 800cf82:	4632      	mov	r2, r6
 800cf84:	f106 010c 	add.w	r1, r6, #12
 800cf88:	f006 fce2 	bl	8013950 <rcl_timer_init2>
 800cf8c:	b910      	cbnz	r0, 800cf94 <rclc_timer_init_default2+0x4c>
 800cf8e:	b00c      	add	sp, #48	@ 0x30
 800cf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf94:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cf96:	f000 f877 	bl	800d088 <rcutils_reset_error>
 800cf9a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cf9c:	b00c      	add	sp, #48	@ 0x30
 800cf9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfa2:	200b      	movs	r0, #11
 800cfa4:	b00c      	add	sp, #48	@ 0x30
 800cfa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfaa:	bf00      	nop

0800cfac <__default_zero_allocate>:
 800cfac:	f00c bae6 	b.w	801957c <calloc>

0800cfb0 <__default_reallocate>:
 800cfb0:	f00c bc84 	b.w	80198bc <realloc>

0800cfb4 <__default_deallocate>:
 800cfb4:	f00c bb60 	b.w	8019678 <free>

0800cfb8 <__default_allocate>:
 800cfb8:	f00c bb56 	b.w	8019668 <malloc>

0800cfbc <rcutils_get_zero_initialized_allocator>:
 800cfbc:	b510      	push	{r4, lr}
 800cfbe:	4c05      	ldr	r4, [pc, #20]	@ (800cfd4 <rcutils_get_zero_initialized_allocator+0x18>)
 800cfc0:	4686      	mov	lr, r0
 800cfc2:	4684      	mov	ip, r0
 800cfc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cfca:	6823      	ldr	r3, [r4, #0]
 800cfcc:	f8cc 3000 	str.w	r3, [ip]
 800cfd0:	4670      	mov	r0, lr
 800cfd2:	bd10      	pop	{r4, pc}
 800cfd4:	0801c4a8 	.word	0x0801c4a8

0800cfd8 <rcutils_get_default_allocator>:
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	4c05      	ldr	r4, [pc, #20]	@ (800cff0 <rcutils_get_default_allocator+0x18>)
 800cfdc:	4686      	mov	lr, r0
 800cfde:	4684      	mov	ip, r0
 800cfe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cfe6:	6823      	ldr	r3, [r4, #0]
 800cfe8:	f8cc 3000 	str.w	r3, [ip]
 800cfec:	4670      	mov	r0, lr
 800cfee:	bd10      	pop	{r4, pc}
 800cff0:	2000035c 	.word	0x2000035c

0800cff4 <rcutils_set_default_allocator>:
 800cff4:	b1a8      	cbz	r0, 800d022 <rcutils_set_default_allocator+0x2e>
 800cff6:	6802      	ldr	r2, [r0, #0]
 800cff8:	b1a2      	cbz	r2, 800d024 <rcutils_set_default_allocator+0x30>
 800cffa:	6841      	ldr	r1, [r0, #4]
 800cffc:	b1a1      	cbz	r1, 800d028 <rcutils_set_default_allocator+0x34>
 800cffe:	b410      	push	{r4}
 800d000:	68c4      	ldr	r4, [r0, #12]
 800d002:	b164      	cbz	r4, 800d01e <rcutils_set_default_allocator+0x2a>
 800d004:	6880      	ldr	r0, [r0, #8]
 800d006:	b138      	cbz	r0, 800d018 <rcutils_set_default_allocator+0x24>
 800d008:	4b08      	ldr	r3, [pc, #32]	@ (800d02c <rcutils_set_default_allocator+0x38>)
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	2200      	movs	r2, #0
 800d00e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d012:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d016:	2001      	movs	r0, #1
 800d018:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d01c:	4770      	bx	lr
 800d01e:	4620      	mov	r0, r4
 800d020:	e7fa      	b.n	800d018 <rcutils_set_default_allocator+0x24>
 800d022:	4770      	bx	lr
 800d024:	4610      	mov	r0, r2
 800d026:	4770      	bx	lr
 800d028:	4608      	mov	r0, r1
 800d02a:	4770      	bx	lr
 800d02c:	2000035c 	.word	0x2000035c

0800d030 <rcutils_allocator_is_valid>:
 800d030:	b158      	cbz	r0, 800d04a <rcutils_allocator_is_valid+0x1a>
 800d032:	6803      	ldr	r3, [r0, #0]
 800d034:	b143      	cbz	r3, 800d048 <rcutils_allocator_is_valid+0x18>
 800d036:	6843      	ldr	r3, [r0, #4]
 800d038:	b133      	cbz	r3, 800d048 <rcutils_allocator_is_valid+0x18>
 800d03a:	68c3      	ldr	r3, [r0, #12]
 800d03c:	b123      	cbz	r3, 800d048 <rcutils_allocator_is_valid+0x18>
 800d03e:	6880      	ldr	r0, [r0, #8]
 800d040:	3800      	subs	r0, #0
 800d042:	bf18      	it	ne
 800d044:	2001      	movne	r0, #1
 800d046:	4770      	bx	lr
 800d048:	4618      	mov	r0, r3
 800d04a:	4770      	bx	lr

0800d04c <rcutils_error_is_set>:
 800d04c:	4b01      	ldr	r3, [pc, #4]	@ (800d054 <rcutils_error_is_set+0x8>)
 800d04e:	7818      	ldrb	r0, [r3, #0]
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	2000b7f0 	.word	0x2000b7f0

0800d058 <rcutils_get_error_string>:
 800d058:	4b06      	ldr	r3, [pc, #24]	@ (800d074 <rcutils_get_error_string+0x1c>)
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	b13b      	cbz	r3, 800d06e <rcutils_get_error_string+0x16>
 800d05e:	4b06      	ldr	r3, [pc, #24]	@ (800d078 <rcutils_get_error_string+0x20>)
 800d060:	781a      	ldrb	r2, [r3, #0]
 800d062:	b90a      	cbnz	r2, 800d068 <rcutils_get_error_string+0x10>
 800d064:	2201      	movs	r2, #1
 800d066:	701a      	strb	r2, [r3, #0]
 800d068:	4b04      	ldr	r3, [pc, #16]	@ (800d07c <rcutils_get_error_string+0x24>)
 800d06a:	7818      	ldrb	r0, [r3, #0]
 800d06c:	4770      	bx	lr
 800d06e:	4b04      	ldr	r3, [pc, #16]	@ (800d080 <rcutils_get_error_string+0x28>)
 800d070:	7818      	ldrb	r0, [r3, #0]
 800d072:	4770      	bx	lr
 800d074:	2000b7f0 	.word	0x2000b7f0
 800d078:	2000b7f5 	.word	0x2000b7f5
 800d07c:	2000b7f4 	.word	0x2000b7f4
 800d080:	0801bba0 	.word	0x0801bba0
 800d084:	00000000 	.word	0x00000000

0800d088 <rcutils_reset_error>:
 800d088:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d0a8 <rcutils_reset_error+0x20>
 800d08c:	4a08      	ldr	r2, [pc, #32]	@ (800d0b0 <rcutils_reset_error+0x28>)
 800d08e:	4809      	ldr	r0, [pc, #36]	@ (800d0b4 <rcutils_reset_error+0x2c>)
 800d090:	4909      	ldr	r1, [pc, #36]	@ (800d0b8 <rcutils_reset_error+0x30>)
 800d092:	2300      	movs	r3, #0
 800d094:	8013      	strh	r3, [r2, #0]
 800d096:	ed82 7b02 	vstr	d7, [r2, #8]
 800d09a:	4a08      	ldr	r2, [pc, #32]	@ (800d0bc <rcutils_reset_error+0x34>)
 800d09c:	7003      	strb	r3, [r0, #0]
 800d09e:	700b      	strb	r3, [r1, #0]
 800d0a0:	7013      	strb	r3, [r2, #0]
 800d0a2:	4770      	bx	lr
 800d0a4:	f3af 8000 	nop.w
	...
 800d0b0:	2000b7f8 	.word	0x2000b7f8
 800d0b4:	2000b7f5 	.word	0x2000b7f5
 800d0b8:	2000b7f4 	.word	0x2000b7f4
 800d0bc:	2000b7f0 	.word	0x2000b7f0

0800d0c0 <rcutils_system_time_now>:
 800d0c0:	b318      	cbz	r0, 800d10a <rcutils_system_time_now+0x4a>
 800d0c2:	b570      	push	{r4, r5, r6, lr}
 800d0c4:	b084      	sub	sp, #16
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	4669      	mov	r1, sp
 800d0ca:	2001      	movs	r0, #1
 800d0cc:	f7f5 fd14 	bl	8002af8 <clock_gettime>
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	db17      	blt.n	800d104 <rcutils_system_time_now+0x44>
 800d0d4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d0d8:	2900      	cmp	r1, #0
 800d0da:	db13      	blt.n	800d104 <rcutils_system_time_now+0x44>
 800d0dc:	9d02      	ldr	r5, [sp, #8]
 800d0de:	2d00      	cmp	r5, #0
 800d0e0:	db0d      	blt.n	800d0fe <rcutils_system_time_now+0x3e>
 800d0e2:	4e0b      	ldr	r6, [pc, #44]	@ (800d110 <rcutils_system_time_now+0x50>)
 800d0e4:	fba3 3206 	umull	r3, r2, r3, r6
 800d0e8:	195b      	adds	r3, r3, r5
 800d0ea:	fb06 2201 	mla	r2, r6, r1, r2
 800d0ee:	f04f 0000 	mov.w	r0, #0
 800d0f2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800d0f6:	e9c4 3200 	strd	r3, r2, [r4]
 800d0fa:	b004      	add	sp, #16
 800d0fc:	bd70      	pop	{r4, r5, r6, pc}
 800d0fe:	ea53 0201 	orrs.w	r2, r3, r1
 800d102:	d1ee      	bne.n	800d0e2 <rcutils_system_time_now+0x22>
 800d104:	2002      	movs	r0, #2
 800d106:	b004      	add	sp, #16
 800d108:	bd70      	pop	{r4, r5, r6, pc}
 800d10a:	200b      	movs	r0, #11
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop
 800d110:	3b9aca00 	.word	0x3b9aca00

0800d114 <rcutils_steady_time_now>:
 800d114:	b318      	cbz	r0, 800d15e <rcutils_steady_time_now+0x4a>
 800d116:	b570      	push	{r4, r5, r6, lr}
 800d118:	b084      	sub	sp, #16
 800d11a:	4604      	mov	r4, r0
 800d11c:	4669      	mov	r1, sp
 800d11e:	2000      	movs	r0, #0
 800d120:	f7f5 fcea 	bl	8002af8 <clock_gettime>
 800d124:	2800      	cmp	r0, #0
 800d126:	db17      	blt.n	800d158 <rcutils_steady_time_now+0x44>
 800d128:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d12c:	2900      	cmp	r1, #0
 800d12e:	db13      	blt.n	800d158 <rcutils_steady_time_now+0x44>
 800d130:	9d02      	ldr	r5, [sp, #8]
 800d132:	2d00      	cmp	r5, #0
 800d134:	db0d      	blt.n	800d152 <rcutils_steady_time_now+0x3e>
 800d136:	4e0b      	ldr	r6, [pc, #44]	@ (800d164 <rcutils_steady_time_now+0x50>)
 800d138:	fba3 3206 	umull	r3, r2, r3, r6
 800d13c:	195b      	adds	r3, r3, r5
 800d13e:	fb06 2201 	mla	r2, r6, r1, r2
 800d142:	f04f 0000 	mov.w	r0, #0
 800d146:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800d14a:	e9c4 3200 	strd	r3, r2, [r4]
 800d14e:	b004      	add	sp, #16
 800d150:	bd70      	pop	{r4, r5, r6, pc}
 800d152:	ea53 0201 	orrs.w	r2, r3, r1
 800d156:	d1ee      	bne.n	800d136 <rcutils_steady_time_now+0x22>
 800d158:	2002      	movs	r0, #2
 800d15a:	b004      	add	sp, #16
 800d15c:	bd70      	pop	{r4, r5, r6, pc}
 800d15e:	200b      	movs	r0, #11
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	3b9aca00 	.word	0x3b9aca00

0800d168 <rmw_get_default_publisher_options>:
 800d168:	2200      	movs	r2, #0
 800d16a:	6002      	str	r2, [r0, #0]
 800d16c:	7102      	strb	r2, [r0, #4]
 800d16e:	4770      	bx	lr

0800d170 <rmw_uros_set_custom_transport>:
 800d170:	b470      	push	{r4, r5, r6}
 800d172:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d176:	b162      	cbz	r2, 800d192 <rmw_uros_set_custom_transport+0x22>
 800d178:	b15b      	cbz	r3, 800d192 <rmw_uros_set_custom_transport+0x22>
 800d17a:	b155      	cbz	r5, 800d192 <rmw_uros_set_custom_transport+0x22>
 800d17c:	b14e      	cbz	r6, 800d192 <rmw_uros_set_custom_transport+0x22>
 800d17e:	4c06      	ldr	r4, [pc, #24]	@ (800d198 <rmw_uros_set_custom_transport+0x28>)
 800d180:	7020      	strb	r0, [r4, #0]
 800d182:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d186:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d18a:	6166      	str	r6, [r4, #20]
 800d18c:	2000      	movs	r0, #0
 800d18e:	bc70      	pop	{r4, r5, r6}
 800d190:	4770      	bx	lr
 800d192:	200b      	movs	r0, #11
 800d194:	bc70      	pop	{r4, r5, r6}
 800d196:	4770      	bx	lr
 800d198:	2000b808 	.word	0x2000b808

0800d19c <rmw_uros_ping_agent>:
 800d19c:	b570      	push	{r4, r5, r6, lr}
 800d19e:	4b22      	ldr	r3, [pc, #136]	@ (800d228 <rmw_uros_ping_agent+0x8c>)
 800d1a0:	7b1a      	ldrb	r2, [r3, #12]
 800d1a2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d1a6:	4605      	mov	r5, r0
 800d1a8:	460e      	mov	r6, r1
 800d1aa:	b10a      	cbz	r2, 800d1b0 <rmw_uros_ping_agent+0x14>
 800d1ac:	681c      	ldr	r4, [r3, #0]
 800d1ae:	b9bc      	cbnz	r4, 800d1e0 <rmw_uros_ping_agent+0x44>
 800d1b0:	4b1e      	ldr	r3, [pc, #120]	@ (800d22c <rmw_uros_ping_agent+0x90>)
 800d1b2:	781a      	ldrb	r2, [r3, #0]
 800d1b4:	6918      	ldr	r0, [r3, #16]
 800d1b6:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800d1ba:	685a      	ldr	r2, [r3, #4]
 800d1bc:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800d1be:	2100      	movs	r1, #0
 800d1c0:	68da      	ldr	r2, [r3, #12]
 800d1c2:	909c      	str	r0, [sp, #624]	@ 0x270
 800d1c4:	6958      	ldr	r0, [r3, #20]
 800d1c6:	929b      	str	r2, [sp, #620]	@ 0x26c
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	909d      	str	r0, [sp, #628]	@ 0x274
 800d1cc:	466a      	mov	r2, sp
 800d1ce:	4608      	mov	r0, r1
 800d1d0:	939a      	str	r3, [sp, #616]	@ 0x268
 800d1d2:	f000 f9cd 	bl	800d570 <rmw_uxrce_transport_init>
 800d1d6:	b198      	cbz	r0, 800d200 <rmw_uros_ping_agent+0x64>
 800d1d8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d1dc:	bd70      	pop	{r4, r5, r6, pc}
 800d1de:	b9f0      	cbnz	r0, 800d21e <rmw_uros_ping_agent+0x82>
 800d1e0:	68a0      	ldr	r0, [r4, #8]
 800d1e2:	4632      	mov	r2, r6
 800d1e4:	4629      	mov	r1, r5
 800d1e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d1ea:	f001 fe4b 	bl	800ee84 <uxr_ping_agent_session>
 800d1ee:	6864      	ldr	r4, [r4, #4]
 800d1f0:	2c00      	cmp	r4, #0
 800d1f2:	d1f4      	bne.n	800d1de <rmw_uros_ping_agent+0x42>
 800d1f4:	f080 0001 	eor.w	r0, r0, #1
 800d1f8:	b2c0      	uxtb	r0, r0
 800d1fa:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d1fe:	bd70      	pop	{r4, r5, r6, pc}
 800d200:	4632      	mov	r2, r6
 800d202:	4629      	mov	r1, r5
 800d204:	a89e      	add	r0, sp, #632	@ 0x278
 800d206:	f001 fe8d 	bl	800ef24 <uxr_ping_agent_attempts>
 800d20a:	4604      	mov	r4, r0
 800d20c:	4668      	mov	r0, sp
 800d20e:	f001 fe07 	bl	800ee20 <uxr_close_custom_transport>
 800d212:	f084 0001 	eor.w	r0, r4, #1
 800d216:	b2c0      	uxtb	r0, r0
 800d218:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d21c:	bd70      	pop	{r4, r5, r6, pc}
 800d21e:	2000      	movs	r0, #0
 800d220:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d224:	bd70      	pop	{r4, r5, r6, pc}
 800d226:	bf00      	nop
 800d228:	20010168 	.word	0x20010168
 800d22c:	2000b808 	.word	0x2000b808

0800d230 <flush_session>:
 800d230:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800d232:	f002 bbc9 	b.w	800f9c8 <uxr_run_session_until_confirm_delivery>
 800d236:	bf00      	nop

0800d238 <rmw_publish>:
 800d238:	2800      	cmp	r0, #0
 800d23a:	d053      	beq.n	800d2e4 <rmw_publish+0xac>
 800d23c:	b570      	push	{r4, r5, r6, lr}
 800d23e:	460d      	mov	r5, r1
 800d240:	b08e      	sub	sp, #56	@ 0x38
 800d242:	2900      	cmp	r1, #0
 800d244:	d04b      	beq.n	800d2de <rmw_publish+0xa6>
 800d246:	4604      	mov	r4, r0
 800d248:	6800      	ldr	r0, [r0, #0]
 800d24a:	f000 fd2d 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 800d24e:	2800      	cmp	r0, #0
 800d250:	d045      	beq.n	800d2de <rmw_publish+0xa6>
 800d252:	6866      	ldr	r6, [r4, #4]
 800d254:	2e00      	cmp	r6, #0
 800d256:	d042      	beq.n	800d2de <rmw_publish+0xa6>
 800d258:	69b4      	ldr	r4, [r6, #24]
 800d25a:	4628      	mov	r0, r5
 800d25c:	6923      	ldr	r3, [r4, #16]
 800d25e:	4798      	blx	r3
 800d260:	69f3      	ldr	r3, [r6, #28]
 800d262:	9005      	str	r0, [sp, #20]
 800d264:	b113      	cbz	r3, 800d26c <rmw_publish+0x34>
 800d266:	a805      	add	r0, sp, #20
 800d268:	4798      	blx	r3
 800d26a:	9805      	ldr	r0, [sp, #20]
 800d26c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d270:	691b      	ldr	r3, [r3, #16]
 800d272:	9000      	str	r0, [sp, #0]
 800d274:	6972      	ldr	r2, [r6, #20]
 800d276:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d278:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800d27c:	ab06      	add	r3, sp, #24
 800d27e:	f003 fe63 	bl	8010f48 <uxr_prepare_output_stream>
 800d282:	b1d8      	cbz	r0, 800d2bc <rmw_publish+0x84>
 800d284:	68a3      	ldr	r3, [r4, #8]
 800d286:	a906      	add	r1, sp, #24
 800d288:	4628      	mov	r0, r5
 800d28a:	4798      	blx	r3
 800d28c:	6a33      	ldr	r3, [r6, #32]
 800d28e:	4604      	mov	r4, r0
 800d290:	b10b      	cbz	r3, 800d296 <rmw_publish+0x5e>
 800d292:	a806      	add	r0, sp, #24
 800d294:	4798      	blx	r3
 800d296:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800d29a:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	6910      	ldr	r0, [r2, #16]
 800d2a2:	d021      	beq.n	800d2e8 <rmw_publish+0xb0>
 800d2a4:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800d2a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d2aa:	f002 fb8d 	bl	800f9c8 <uxr_run_session_until_confirm_delivery>
 800d2ae:	4004      	ands	r4, r0
 800d2b0:	b2e4      	uxtb	r4, r4
 800d2b2:	f084 0001 	eor.w	r0, r4, #1
 800d2b6:	b2c0      	uxtb	r0, r0
 800d2b8:	b00e      	add	sp, #56	@ 0x38
 800d2ba:	bd70      	pop	{r4, r5, r6, pc}
 800d2bc:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800d2c0:	6918      	ldr	r0, [r3, #16]
 800d2c2:	4b0c      	ldr	r3, [pc, #48]	@ (800d2f4 <rmw_publish+0xbc>)
 800d2c4:	9301      	str	r3, [sp, #4]
 800d2c6:	9b05      	ldr	r3, [sp, #20]
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	9602      	str	r6, [sp, #8]
 800d2cc:	6972      	ldr	r2, [r6, #20]
 800d2ce:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800d2d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d2d4:	ab06      	add	r3, sp, #24
 800d2d6:	f003 fe67 	bl	8010fa8 <uxr_prepare_output_stream_fragmented>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d1d2      	bne.n	800d284 <rmw_publish+0x4c>
 800d2de:	2001      	movs	r0, #1
 800d2e0:	b00e      	add	sp, #56	@ 0x38
 800d2e2:	bd70      	pop	{r4, r5, r6, pc}
 800d2e4:	2001      	movs	r0, #1
 800d2e6:	4770      	bx	lr
 800d2e8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d2ec:	f001 ffd4 	bl	800f298 <uxr_flash_output_streams>
 800d2f0:	e7df      	b.n	800d2b2 <rmw_publish+0x7a>
 800d2f2:	bf00      	nop
 800d2f4:	0800d231 	.word	0x0800d231

0800d2f8 <rmw_create_publisher>:
 800d2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fc:	b087      	sub	sp, #28
 800d2fe:	2800      	cmp	r0, #0
 800d300:	f000 80c9 	beq.w	800d496 <rmw_create_publisher+0x19e>
 800d304:	460f      	mov	r7, r1
 800d306:	2900      	cmp	r1, #0
 800d308:	f000 80c5 	beq.w	800d496 <rmw_create_publisher+0x19e>
 800d30c:	4604      	mov	r4, r0
 800d30e:	6800      	ldr	r0, [r0, #0]
 800d310:	4615      	mov	r5, r2
 800d312:	461e      	mov	r6, r3
 800d314:	f000 fcc8 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 800d318:	2800      	cmp	r0, #0
 800d31a:	f000 80bc 	beq.w	800d496 <rmw_create_publisher+0x19e>
 800d31e:	2d00      	cmp	r5, #0
 800d320:	f000 80b9 	beq.w	800d496 <rmw_create_publisher+0x19e>
 800d324:	782b      	ldrb	r3, [r5, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	f000 80b5 	beq.w	800d496 <rmw_create_publisher+0x19e>
 800d32c:	2e00      	cmp	r6, #0
 800d32e:	f000 80b2 	beq.w	800d496 <rmw_create_publisher+0x19e>
 800d332:	485c      	ldr	r0, [pc, #368]	@ (800d4a4 <rmw_create_publisher+0x1ac>)
 800d334:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800d338:	f008 fde4 	bl	8015f04 <get_memory>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	f000 80aa 	beq.w	800d496 <rmw_create_publisher+0x19e>
 800d342:	6884      	ldr	r4, [r0, #8]
 800d344:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800d348:	f008 fe62 	bl	8016010 <rmw_get_implementation_identifier>
 800d34c:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800d350:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800d354:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800d358:	4628      	mov	r0, r5
 800d35a:	f7f2 ffb9 	bl	80002d0 <strlen>
 800d35e:	3001      	adds	r0, #1
 800d360:	283c      	cmp	r0, #60	@ 0x3c
 800d362:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800d366:	f200 808f 	bhi.w	800d488 <rmw_create_publisher+0x190>
 800d36a:	4a4f      	ldr	r2, [pc, #316]	@ (800d4a8 <rmw_create_publisher+0x1b0>)
 800d36c:	462b      	mov	r3, r5
 800d36e:	213c      	movs	r1, #60	@ 0x3c
 800d370:	4650      	mov	r0, sl
 800d372:	f00c fc6d 	bl	8019c50 <sniprintf>
 800d376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d37a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800d37c:	4631      	mov	r1, r6
 800d37e:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800d382:	2250      	movs	r2, #80	@ 0x50
 800d384:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800d388:	f00c feb1 	bl	801a0ee <memcpy>
 800d38c:	7a33      	ldrb	r3, [r6, #8]
 800d38e:	4947      	ldr	r1, [pc, #284]	@ (800d4ac <rmw_create_publisher+0x1b4>)
 800d390:	2b02      	cmp	r3, #2
 800d392:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d396:	bf0c      	ite	eq
 800d398:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800d39c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800d3a0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800d3a8:	4638      	mov	r0, r7
 800d3aa:	f000 fc8b 	bl	800dcc4 <get_message_typesupport_handle>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d06a      	beq.n	800d488 <rmw_create_publisher+0x190>
 800d3b2:	6842      	ldr	r2, [r0, #4]
 800d3b4:	61a2      	str	r2, [r4, #24]
 800d3b6:	2a00      	cmp	r2, #0
 800d3b8:	d066      	beq.n	800d488 <rmw_create_publisher+0x190>
 800d3ba:	4629      	mov	r1, r5
 800d3bc:	4633      	mov	r3, r6
 800d3be:	4648      	mov	r0, r9
 800d3c0:	f009 f882 	bl	80164c8 <create_topic>
 800d3c4:	6260      	str	r0, [r4, #36]	@ 0x24
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d062      	beq.n	800d490 <rmw_create_publisher+0x198>
 800d3ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d3d2:	2103      	movs	r1, #3
 800d3d4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800d3d8:	1c42      	adds	r2, r0, #1
 800d3da:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800d3de:	f001 fd23 	bl	800ee28 <uxr_object_id>
 800d3e2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800d3e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3ea:	6120      	str	r0, [r4, #16]
 800d3ec:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800d3f0:	6910      	ldr	r0, [r2, #16]
 800d3f2:	2506      	movs	r5, #6
 800d3f4:	9500      	str	r5, [sp, #0]
 800d3f6:	6819      	ldr	r1, [r3, #0]
 800d3f8:	6922      	ldr	r2, [r4, #16]
 800d3fa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d3fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d402:	f001 fb27 	bl	800ea54 <uxr_buffer_create_publisher_bin>
 800d406:	4602      	mov	r2, r0
 800d408:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d40c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d410:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d414:	f000 fbc2 	bl	800db9c <run_xrce_session>
 800d418:	b3b0      	cbz	r0, 800d488 <rmw_create_publisher+0x190>
 800d41a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d41e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d422:	2105      	movs	r1, #5
 800d424:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800d428:	1c42      	adds	r2, r0, #1
 800d42a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800d42e:	f001 fcfb 	bl	800ee28 <uxr_object_id>
 800d432:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d436:	6160      	str	r0, [r4, #20]
 800d438:	4631      	mov	r1, r6
 800d43a:	af04      	add	r7, sp, #16
 800d43c:	691e      	ldr	r6, [r3, #16]
 800d43e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d442:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800d446:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800d44a:	4638      	mov	r0, r7
 800d44c:	f000 fbc6 	bl	800dbdc <convert_qos_profile>
 800d450:	9503      	str	r5, [sp, #12]
 800d452:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d456:	9001      	str	r0, [sp, #4]
 800d458:	f8ad 1008 	strh.w	r1, [sp, #8]
 800d45c:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800d466:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d46a:	f8da 1000 	ldr.w	r1, [sl]
 800d46e:	4630      	mov	r0, r6
 800d470:	f001 fb4e 	bl	800eb10 <uxr_buffer_create_datawriter_bin>
 800d474:	4602      	mov	r2, r0
 800d476:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d47a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d47e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d482:	f000 fb8b 	bl	800db9c <run_xrce_session>
 800d486:	b940      	cbnz	r0, 800d49a <rmw_create_publisher+0x1a2>
 800d488:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d48a:	b108      	cbz	r0, 800d490 <rmw_create_publisher+0x198>
 800d48c:	f000 fa7e 	bl	800d98c <rmw_uxrce_fini_topic_memory>
 800d490:	4640      	mov	r0, r8
 800d492:	f000 fa23 	bl	800d8dc <rmw_uxrce_fini_publisher_memory>
 800d496:	f04f 0800 	mov.w	r8, #0
 800d49a:	4640      	mov	r0, r8
 800d49c:	b007      	add	sp, #28
 800d49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a2:	bf00      	nop
 800d4a4:	2000eaf8 	.word	0x2000eaf8
 800d4a8:	0801bbb4 	.word	0x0801bbb4
 800d4ac:	0801ba20 	.word	0x0801ba20

0800d4b0 <rmw_publisher_get_actual_qos>:
 800d4b0:	b508      	push	{r3, lr}
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	b140      	cbz	r0, 800d4c8 <rmw_publisher_get_actual_qos+0x18>
 800d4b6:	4608      	mov	r0, r1
 800d4b8:	b131      	cbz	r1, 800d4c8 <rmw_publisher_get_actual_qos+0x18>
 800d4ba:	6859      	ldr	r1, [r3, #4]
 800d4bc:	2250      	movs	r2, #80	@ 0x50
 800d4be:	3128      	adds	r1, #40	@ 0x28
 800d4c0:	f00c fe15 	bl	801a0ee <memcpy>
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	bd08      	pop	{r3, pc}
 800d4c8:	200b      	movs	r0, #11
 800d4ca:	bd08      	pop	{r3, pc}

0800d4cc <rmw_destroy_publisher>:
 800d4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d0:	b128      	cbz	r0, 800d4de <rmw_destroy_publisher+0x12>
 800d4d2:	4604      	mov	r4, r0
 800d4d4:	6800      	ldr	r0, [r0, #0]
 800d4d6:	460d      	mov	r5, r1
 800d4d8:	f000 fbe6 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 800d4dc:	b918      	cbnz	r0, 800d4e6 <rmw_destroy_publisher+0x1a>
 800d4de:	2401      	movs	r4, #1
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e6:	6863      	ldr	r3, [r4, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d0f8      	beq.n	800d4de <rmw_destroy_publisher+0x12>
 800d4ec:	2d00      	cmp	r5, #0
 800d4ee:	d0f6      	beq.n	800d4de <rmw_destroy_publisher+0x12>
 800d4f0:	6828      	ldr	r0, [r5, #0]
 800d4f2:	f000 fbd9 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d0f1      	beq.n	800d4de <rmw_destroy_publisher+0x12>
 800d4fa:	686c      	ldr	r4, [r5, #4]
 800d4fc:	2c00      	cmp	r4, #0
 800d4fe:	d0ee      	beq.n	800d4de <rmw_destroy_publisher+0x12>
 800d500:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800d502:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800d506:	f009 f833 	bl	8016570 <destroy_topic>
 800d50a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d50e:	6962      	ldr	r2, [r4, #20]
 800d510:	6918      	ldr	r0, [r3, #16]
 800d512:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d516:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d51a:	6819      	ldr	r1, [r3, #0]
 800d51c:	f001 f9ea 	bl	800e8f4 <uxr_buffer_delete_entity>
 800d520:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800d524:	6922      	ldr	r2, [r4, #16]
 800d526:	4680      	mov	r8, r0
 800d528:	6918      	ldr	r0, [r3, #16]
 800d52a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800d52e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d532:	6819      	ldr	r1, [r3, #0]
 800d534:	f001 f9de 	bl	800e8f4 <uxr_buffer_delete_entity>
 800d538:	4606      	mov	r6, r0
 800d53a:	6938      	ldr	r0, [r7, #16]
 800d53c:	4642      	mov	r2, r8
 800d53e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d542:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d546:	f000 fb29 	bl	800db9c <run_xrce_session>
 800d54a:	4604      	mov	r4, r0
 800d54c:	6938      	ldr	r0, [r7, #16]
 800d54e:	4632      	mov	r2, r6
 800d550:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800d554:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800d558:	f000 fb20 	bl	800db9c <run_xrce_session>
 800d55c:	4004      	ands	r4, r0
 800d55e:	f084 0401 	eor.w	r4, r4, #1
 800d562:	b2e4      	uxtb	r4, r4
 800d564:	4628      	mov	r0, r5
 800d566:	0064      	lsls	r4, r4, #1
 800d568:	f000 f9b8 	bl	800d8dc <rmw_uxrce_fini_publisher_memory>
 800d56c:	e7b8      	b.n	800d4e0 <rmw_destroy_publisher+0x14>
 800d56e:	bf00      	nop

0800d570 <rmw_uxrce_transport_init>:
 800d570:	b508      	push	{r3, lr}
 800d572:	b108      	cbz	r0, 800d578 <rmw_uxrce_transport_init+0x8>
 800d574:	f100 0210 	add.w	r2, r0, #16
 800d578:	b139      	cbz	r1, 800d58a <rmw_uxrce_transport_init+0x1a>
 800d57a:	6949      	ldr	r1, [r1, #20]
 800d57c:	4610      	mov	r0, r2
 800d57e:	f001 fc1b 	bl	800edb8 <uxr_init_custom_transport>
 800d582:	f080 0001 	eor.w	r0, r0, #1
 800d586:	b2c0      	uxtb	r0, r0
 800d588:	bd08      	pop	{r3, pc}
 800d58a:	4b04      	ldr	r3, [pc, #16]	@ (800d59c <rmw_uxrce_transport_init+0x2c>)
 800d58c:	4610      	mov	r0, r2
 800d58e:	6859      	ldr	r1, [r3, #4]
 800d590:	f001 fc12 	bl	800edb8 <uxr_init_custom_transport>
 800d594:	f080 0001 	eor.w	r0, r0, #1
 800d598:	b2c0      	uxtb	r0, r0
 800d59a:	bd08      	pop	{r3, pc}
 800d59c:	2000b808 	.word	0x2000b808

0800d5a0 <rmw_uros_epoch_nanos>:
 800d5a0:	4b05      	ldr	r3, [pc, #20]	@ (800d5b8 <rmw_uros_epoch_nanos+0x18>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	b123      	cbz	r3, 800d5b0 <rmw_uros_epoch_nanos+0x10>
 800d5a6:	6898      	ldr	r0, [r3, #8]
 800d5a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d5ac:	f001 be6a 	b.w	800f284 <uxr_epoch_nanos>
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop
 800d5b8:	20010168 	.word	0x20010168

0800d5bc <rmw_uros_sync_session>:
 800d5bc:	b508      	push	{r3, lr}
 800d5be:	4b07      	ldr	r3, [pc, #28]	@ (800d5dc <rmw_uros_sync_session+0x20>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	b14b      	cbz	r3, 800d5d8 <rmw_uros_sync_session+0x1c>
 800d5c4:	4601      	mov	r1, r0
 800d5c6:	6898      	ldr	r0, [r3, #8]
 800d5c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d5cc:	f002 fa78 	bl	800fac0 <uxr_sync_session>
 800d5d0:	f080 0001 	eor.w	r0, r0, #1
 800d5d4:	b2c0      	uxtb	r0, r0
 800d5d6:	bd08      	pop	{r3, pc}
 800d5d8:	2001      	movs	r0, #1
 800d5da:	bd08      	pop	{r3, pc}
 800d5dc:	20010168 	.word	0x20010168

0800d5e0 <rmw_uxrce_init_service_memory>:
 800d5e0:	b1e2      	cbz	r2, 800d61c <rmw_uxrce_init_service_memory+0x3c>
 800d5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e6:	7b05      	ldrb	r5, [r0, #12]
 800d5e8:	4606      	mov	r6, r0
 800d5ea:	b9ad      	cbnz	r5, 800d618 <rmw_uxrce_init_service_memory+0x38>
 800d5ec:	23c8      	movs	r3, #200	@ 0xc8
 800d5ee:	e9c0 5500 	strd	r5, r5, [r0]
 800d5f2:	6083      	str	r3, [r0, #8]
 800d5f4:	f240 1301 	movw	r3, #257	@ 0x101
 800d5f8:	4617      	mov	r7, r2
 800d5fa:	8183      	strh	r3, [r0, #12]
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	46a8      	mov	r8, r5
 800d600:	4621      	mov	r1, r4
 800d602:	4630      	mov	r0, r6
 800d604:	3501      	adds	r5, #1
 800d606:	f008 fc8d 	bl	8015f24 <put_memory>
 800d60a:	42af      	cmp	r7, r5
 800d60c:	60a4      	str	r4, [r4, #8]
 800d60e:	f884 800c 	strb.w	r8, [r4, #12]
 800d612:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d616:	d1f3      	bne.n	800d600 <rmw_uxrce_init_service_memory+0x20>
 800d618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop

0800d620 <rmw_uxrce_init_client_memory>:
 800d620:	b1e2      	cbz	r2, 800d65c <rmw_uxrce_init_client_memory+0x3c>
 800d622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d626:	7b05      	ldrb	r5, [r0, #12]
 800d628:	4606      	mov	r6, r0
 800d62a:	b9ad      	cbnz	r5, 800d658 <rmw_uxrce_init_client_memory+0x38>
 800d62c:	23c8      	movs	r3, #200	@ 0xc8
 800d62e:	e9c0 5500 	strd	r5, r5, [r0]
 800d632:	6083      	str	r3, [r0, #8]
 800d634:	f240 1301 	movw	r3, #257	@ 0x101
 800d638:	4617      	mov	r7, r2
 800d63a:	8183      	strh	r3, [r0, #12]
 800d63c:	460c      	mov	r4, r1
 800d63e:	46a8      	mov	r8, r5
 800d640:	4621      	mov	r1, r4
 800d642:	4630      	mov	r0, r6
 800d644:	3501      	adds	r5, #1
 800d646:	f008 fc6d 	bl	8015f24 <put_memory>
 800d64a:	42af      	cmp	r7, r5
 800d64c:	60a4      	str	r4, [r4, #8]
 800d64e:	f884 800c 	strb.w	r8, [r4, #12]
 800d652:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800d656:	d1f3      	bne.n	800d640 <rmw_uxrce_init_client_memory+0x20>
 800d658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop

0800d660 <rmw_uxrce_init_publisher_memory>:
 800d660:	b1e2      	cbz	r2, 800d69c <rmw_uxrce_init_publisher_memory+0x3c>
 800d662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d666:	7b05      	ldrb	r5, [r0, #12]
 800d668:	4606      	mov	r6, r0
 800d66a:	b9ad      	cbnz	r5, 800d698 <rmw_uxrce_init_publisher_memory+0x38>
 800d66c:	23d8      	movs	r3, #216	@ 0xd8
 800d66e:	e9c0 5500 	strd	r5, r5, [r0]
 800d672:	6083      	str	r3, [r0, #8]
 800d674:	f240 1301 	movw	r3, #257	@ 0x101
 800d678:	4617      	mov	r7, r2
 800d67a:	8183      	strh	r3, [r0, #12]
 800d67c:	460c      	mov	r4, r1
 800d67e:	46a8      	mov	r8, r5
 800d680:	4621      	mov	r1, r4
 800d682:	4630      	mov	r0, r6
 800d684:	3501      	adds	r5, #1
 800d686:	f008 fc4d 	bl	8015f24 <put_memory>
 800d68a:	42af      	cmp	r7, r5
 800d68c:	60a4      	str	r4, [r4, #8]
 800d68e:	f884 800c 	strb.w	r8, [r4, #12]
 800d692:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d696:	d1f3      	bne.n	800d680 <rmw_uxrce_init_publisher_memory+0x20>
 800d698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop

0800d6a0 <rmw_uxrce_init_subscription_memory>:
 800d6a0:	b1e2      	cbz	r2, 800d6dc <rmw_uxrce_init_subscription_memory+0x3c>
 800d6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a6:	7b05      	ldrb	r5, [r0, #12]
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	b9ad      	cbnz	r5, 800d6d8 <rmw_uxrce_init_subscription_memory+0x38>
 800d6ac:	23d8      	movs	r3, #216	@ 0xd8
 800d6ae:	e9c0 5500 	strd	r5, r5, [r0]
 800d6b2:	6083      	str	r3, [r0, #8]
 800d6b4:	f240 1301 	movw	r3, #257	@ 0x101
 800d6b8:	4617      	mov	r7, r2
 800d6ba:	8183      	strh	r3, [r0, #12]
 800d6bc:	460c      	mov	r4, r1
 800d6be:	46a8      	mov	r8, r5
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	4630      	mov	r0, r6
 800d6c4:	3501      	adds	r5, #1
 800d6c6:	f008 fc2d 	bl	8015f24 <put_memory>
 800d6ca:	42af      	cmp	r7, r5
 800d6cc:	60a4      	str	r4, [r4, #8]
 800d6ce:	f884 800c 	strb.w	r8, [r4, #12]
 800d6d2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800d6d6:	d1f3      	bne.n	800d6c0 <rmw_uxrce_init_subscription_memory+0x20>
 800d6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop

0800d6e0 <rmw_uxrce_init_node_memory>:
 800d6e0:	b1e2      	cbz	r2, 800d71c <rmw_uxrce_init_node_memory+0x3c>
 800d6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6e6:	7b05      	ldrb	r5, [r0, #12]
 800d6e8:	4606      	mov	r6, r0
 800d6ea:	b9ad      	cbnz	r5, 800d718 <rmw_uxrce_init_node_memory+0x38>
 800d6ec:	23a4      	movs	r3, #164	@ 0xa4
 800d6ee:	e9c0 5500 	strd	r5, r5, [r0]
 800d6f2:	6083      	str	r3, [r0, #8]
 800d6f4:	f240 1301 	movw	r3, #257	@ 0x101
 800d6f8:	4617      	mov	r7, r2
 800d6fa:	8183      	strh	r3, [r0, #12]
 800d6fc:	460c      	mov	r4, r1
 800d6fe:	46a8      	mov	r8, r5
 800d700:	4621      	mov	r1, r4
 800d702:	4630      	mov	r0, r6
 800d704:	3501      	adds	r5, #1
 800d706:	f008 fc0d 	bl	8015f24 <put_memory>
 800d70a:	42af      	cmp	r7, r5
 800d70c:	60a4      	str	r4, [r4, #8]
 800d70e:	f884 800c 	strb.w	r8, [r4, #12]
 800d712:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800d716:	d1f3      	bne.n	800d700 <rmw_uxrce_init_node_memory+0x20>
 800d718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop

0800d720 <rmw_uxrce_init_session_memory>:
 800d720:	b1ea      	cbz	r2, 800d75e <rmw_uxrce_init_session_memory+0x3e>
 800d722:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d726:	7b05      	ldrb	r5, [r0, #12]
 800d728:	4606      	mov	r6, r0
 800d72a:	b9b5      	cbnz	r5, 800d75a <rmw_uxrce_init_session_memory+0x3a>
 800d72c:	e9c0 5500 	strd	r5, r5, [r0]
 800d730:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800d734:	f240 1301 	movw	r3, #257	@ 0x101
 800d738:	4617      	mov	r7, r2
 800d73a:	f8c0 8008 	str.w	r8, [r0, #8]
 800d73e:	460c      	mov	r4, r1
 800d740:	8183      	strh	r3, [r0, #12]
 800d742:	46a9      	mov	r9, r5
 800d744:	4621      	mov	r1, r4
 800d746:	4630      	mov	r0, r6
 800d748:	3501      	adds	r5, #1
 800d74a:	f008 fbeb 	bl	8015f24 <put_memory>
 800d74e:	42af      	cmp	r7, r5
 800d750:	60a4      	str	r4, [r4, #8]
 800d752:	f884 900c 	strb.w	r9, [r4, #12]
 800d756:	4444      	add	r4, r8
 800d758:	d1f4      	bne.n	800d744 <rmw_uxrce_init_session_memory+0x24>
 800d75a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d75e:	4770      	bx	lr

0800d760 <rmw_uxrce_init_topic_memory>:
 800d760:	b1e2      	cbz	r2, 800d79c <rmw_uxrce_init_topic_memory+0x3c>
 800d762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d766:	7b05      	ldrb	r5, [r0, #12]
 800d768:	4606      	mov	r6, r0
 800d76a:	b9ad      	cbnz	r5, 800d798 <rmw_uxrce_init_topic_memory+0x38>
 800d76c:	231c      	movs	r3, #28
 800d76e:	e9c0 5500 	strd	r5, r5, [r0]
 800d772:	6083      	str	r3, [r0, #8]
 800d774:	f240 1301 	movw	r3, #257	@ 0x101
 800d778:	4617      	mov	r7, r2
 800d77a:	8183      	strh	r3, [r0, #12]
 800d77c:	460c      	mov	r4, r1
 800d77e:	46a8      	mov	r8, r5
 800d780:	4621      	mov	r1, r4
 800d782:	4630      	mov	r0, r6
 800d784:	3501      	adds	r5, #1
 800d786:	f008 fbcd 	bl	8015f24 <put_memory>
 800d78a:	42af      	cmp	r7, r5
 800d78c:	60a4      	str	r4, [r4, #8]
 800d78e:	f884 800c 	strb.w	r8, [r4, #12]
 800d792:	f104 041c 	add.w	r4, r4, #28
 800d796:	d1f3      	bne.n	800d780 <rmw_uxrce_init_topic_memory+0x20>
 800d798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop

0800d7a0 <rmw_uxrce_init_static_input_buffer_memory>:
 800d7a0:	b1ea      	cbz	r2, 800d7de <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800d7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a6:	7b05      	ldrb	r5, [r0, #12]
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	b9b5      	cbnz	r5, 800d7da <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800d7ac:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800d7b0:	e9c0 5500 	strd	r5, r5, [r0]
 800d7b4:	6083      	str	r3, [r0, #8]
 800d7b6:	f240 1301 	movw	r3, #257	@ 0x101
 800d7ba:	4617      	mov	r7, r2
 800d7bc:	8183      	strh	r3, [r0, #12]
 800d7be:	460c      	mov	r4, r1
 800d7c0:	46a8      	mov	r8, r5
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	3501      	adds	r5, #1
 800d7c8:	f008 fbac 	bl	8015f24 <put_memory>
 800d7cc:	42af      	cmp	r7, r5
 800d7ce:	60a4      	str	r4, [r4, #8]
 800d7d0:	f884 800c 	strb.w	r8, [r4, #12]
 800d7d4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800d7d8:	d1f3      	bne.n	800d7c2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800d7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7de:	4770      	bx	lr

0800d7e0 <rmw_uxrce_init_init_options_impl_memory>:
 800d7e0:	b1e2      	cbz	r2, 800d81c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800d7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e6:	7b05      	ldrb	r5, [r0, #12]
 800d7e8:	4606      	mov	r6, r0
 800d7ea:	b9ad      	cbnz	r5, 800d818 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800d7ec:	232c      	movs	r3, #44	@ 0x2c
 800d7ee:	e9c0 5500 	strd	r5, r5, [r0]
 800d7f2:	6083      	str	r3, [r0, #8]
 800d7f4:	f240 1301 	movw	r3, #257	@ 0x101
 800d7f8:	4617      	mov	r7, r2
 800d7fa:	8183      	strh	r3, [r0, #12]
 800d7fc:	460c      	mov	r4, r1
 800d7fe:	46a8      	mov	r8, r5
 800d800:	4621      	mov	r1, r4
 800d802:	4630      	mov	r0, r6
 800d804:	3501      	adds	r5, #1
 800d806:	f008 fb8d 	bl	8015f24 <put_memory>
 800d80a:	42af      	cmp	r7, r5
 800d80c:	60a4      	str	r4, [r4, #8]
 800d80e:	f884 800c 	strb.w	r8, [r4, #12]
 800d812:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800d816:	d1f3      	bne.n	800d800 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800d818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop

0800d820 <rmw_uxrce_init_wait_set_memory>:
 800d820:	b1e2      	cbz	r2, 800d85c <rmw_uxrce_init_wait_set_memory+0x3c>
 800d822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d826:	7b05      	ldrb	r5, [r0, #12]
 800d828:	4606      	mov	r6, r0
 800d82a:	b9ad      	cbnz	r5, 800d858 <rmw_uxrce_init_wait_set_memory+0x38>
 800d82c:	231c      	movs	r3, #28
 800d82e:	e9c0 5500 	strd	r5, r5, [r0]
 800d832:	6083      	str	r3, [r0, #8]
 800d834:	f240 1301 	movw	r3, #257	@ 0x101
 800d838:	4617      	mov	r7, r2
 800d83a:	8183      	strh	r3, [r0, #12]
 800d83c:	460c      	mov	r4, r1
 800d83e:	46a8      	mov	r8, r5
 800d840:	4621      	mov	r1, r4
 800d842:	4630      	mov	r0, r6
 800d844:	3501      	adds	r5, #1
 800d846:	f008 fb6d 	bl	8015f24 <put_memory>
 800d84a:	42af      	cmp	r7, r5
 800d84c:	60a4      	str	r4, [r4, #8]
 800d84e:	f884 800c 	strb.w	r8, [r4, #12]
 800d852:	f104 041c 	add.w	r4, r4, #28
 800d856:	d1f3      	bne.n	800d840 <rmw_uxrce_init_wait_set_memory+0x20>
 800d858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop

0800d860 <rmw_uxrce_init_guard_condition_memory>:
 800d860:	b1e2      	cbz	r2, 800d89c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800d862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d866:	7b05      	ldrb	r5, [r0, #12]
 800d868:	4606      	mov	r6, r0
 800d86a:	b9ad      	cbnz	r5, 800d898 <rmw_uxrce_init_guard_condition_memory+0x38>
 800d86c:	2320      	movs	r3, #32
 800d86e:	e9c0 5500 	strd	r5, r5, [r0]
 800d872:	6083      	str	r3, [r0, #8]
 800d874:	f240 1301 	movw	r3, #257	@ 0x101
 800d878:	4617      	mov	r7, r2
 800d87a:	8183      	strh	r3, [r0, #12]
 800d87c:	460c      	mov	r4, r1
 800d87e:	46a8      	mov	r8, r5
 800d880:	4621      	mov	r1, r4
 800d882:	4630      	mov	r0, r6
 800d884:	3501      	adds	r5, #1
 800d886:	f008 fb4d 	bl	8015f24 <put_memory>
 800d88a:	42af      	cmp	r7, r5
 800d88c:	60a4      	str	r4, [r4, #8]
 800d88e:	f884 800c 	strb.w	r8, [r4, #12]
 800d892:	f104 0420 	add.w	r4, r4, #32
 800d896:	d1f3      	bne.n	800d880 <rmw_uxrce_init_guard_condition_memory+0x20>
 800d898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop

0800d8a0 <rmw_uxrce_fini_session_memory>:
 800d8a0:	4601      	mov	r1, r0
 800d8a2:	4801      	ldr	r0, [pc, #4]	@ (800d8a8 <rmw_uxrce_fini_session_memory+0x8>)
 800d8a4:	f008 bb3e 	b.w	8015f24 <put_memory>
 800d8a8:	20010168 	.word	0x20010168

0800d8ac <rmw_uxrce_fini_node_memory>:
 800d8ac:	b538      	push	{r3, r4, r5, lr}
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	6800      	ldr	r0, [r0, #0]
 800d8b2:	b128      	cbz	r0, 800d8c0 <rmw_uxrce_fini_node_memory+0x14>
 800d8b4:	4b07      	ldr	r3, [pc, #28]	@ (800d8d4 <rmw_uxrce_fini_node_memory+0x28>)
 800d8b6:	6819      	ldr	r1, [r3, #0]
 800d8b8:	f7f2 fcaa 	bl	8000210 <strcmp>
 800d8bc:	b940      	cbnz	r0, 800d8d0 <rmw_uxrce_fini_node_memory+0x24>
 800d8be:	6020      	str	r0, [r4, #0]
 800d8c0:	6861      	ldr	r1, [r4, #4]
 800d8c2:	b129      	cbz	r1, 800d8d0 <rmw_uxrce_fini_node_memory+0x24>
 800d8c4:	2500      	movs	r5, #0
 800d8c6:	4804      	ldr	r0, [pc, #16]	@ (800d8d8 <rmw_uxrce_fini_node_memory+0x2c>)
 800d8c8:	610d      	str	r5, [r1, #16]
 800d8ca:	f008 fb2b 	bl	8015f24 <put_memory>
 800d8ce:	6065      	str	r5, [r4, #4]
 800d8d0:	bd38      	pop	{r3, r4, r5, pc}
 800d8d2:	bf00      	nop
 800d8d4:	0801cabc 	.word	0x0801cabc
 800d8d8:	2000ebac 	.word	0x2000ebac

0800d8dc <rmw_uxrce_fini_publisher_memory>:
 800d8dc:	b510      	push	{r4, lr}
 800d8de:	4604      	mov	r4, r0
 800d8e0:	6800      	ldr	r0, [r0, #0]
 800d8e2:	b128      	cbz	r0, 800d8f0 <rmw_uxrce_fini_publisher_memory+0x14>
 800d8e4:	4b06      	ldr	r3, [pc, #24]	@ (800d900 <rmw_uxrce_fini_publisher_memory+0x24>)
 800d8e6:	6819      	ldr	r1, [r3, #0]
 800d8e8:	f7f2 fc92 	bl	8000210 <strcmp>
 800d8ec:	b938      	cbnz	r0, 800d8fe <rmw_uxrce_fini_publisher_memory+0x22>
 800d8ee:	6020      	str	r0, [r4, #0]
 800d8f0:	6861      	ldr	r1, [r4, #4]
 800d8f2:	b121      	cbz	r1, 800d8fe <rmw_uxrce_fini_publisher_memory+0x22>
 800d8f4:	4803      	ldr	r0, [pc, #12]	@ (800d904 <rmw_uxrce_fini_publisher_memory+0x28>)
 800d8f6:	f008 fb15 	bl	8015f24 <put_memory>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	6063      	str	r3, [r4, #4]
 800d8fe:	bd10      	pop	{r4, pc}
 800d900:	0801cabc 	.word	0x0801cabc
 800d904:	2000eaf8 	.word	0x2000eaf8

0800d908 <rmw_uxrce_fini_subscription_memory>:
 800d908:	b510      	push	{r4, lr}
 800d90a:	4604      	mov	r4, r0
 800d90c:	6800      	ldr	r0, [r0, #0]
 800d90e:	b128      	cbz	r0, 800d91c <rmw_uxrce_fini_subscription_memory+0x14>
 800d910:	4b06      	ldr	r3, [pc, #24]	@ (800d92c <rmw_uxrce_fini_subscription_memory+0x24>)
 800d912:	6819      	ldr	r1, [r3, #0]
 800d914:	f7f2 fc7c 	bl	8000210 <strcmp>
 800d918:	b938      	cbnz	r0, 800d92a <rmw_uxrce_fini_subscription_memory+0x22>
 800d91a:	6020      	str	r0, [r4, #0]
 800d91c:	6861      	ldr	r1, [r4, #4]
 800d91e:	b121      	cbz	r1, 800d92a <rmw_uxrce_fini_subscription_memory+0x22>
 800d920:	4803      	ldr	r0, [pc, #12]	@ (800d930 <rmw_uxrce_fini_subscription_memory+0x28>)
 800d922:	f008 faff 	bl	8015f24 <put_memory>
 800d926:	2300      	movs	r3, #0
 800d928:	6063      	str	r3, [r4, #4]
 800d92a:	bd10      	pop	{r4, pc}
 800d92c:	0801cabc 	.word	0x0801cabc
 800d930:	2000e278 	.word	0x2000e278

0800d934 <rmw_uxrce_fini_service_memory>:
 800d934:	b510      	push	{r4, lr}
 800d936:	4604      	mov	r4, r0
 800d938:	6800      	ldr	r0, [r0, #0]
 800d93a:	b128      	cbz	r0, 800d948 <rmw_uxrce_fini_service_memory+0x14>
 800d93c:	4b06      	ldr	r3, [pc, #24]	@ (800d958 <rmw_uxrce_fini_service_memory+0x24>)
 800d93e:	6819      	ldr	r1, [r3, #0]
 800d940:	f7f2 fc66 	bl	8000210 <strcmp>
 800d944:	b938      	cbnz	r0, 800d956 <rmw_uxrce_fini_service_memory+0x22>
 800d946:	6020      	str	r0, [r4, #0]
 800d948:	6861      	ldr	r1, [r4, #4]
 800d94a:	b121      	cbz	r1, 800d956 <rmw_uxrce_fini_service_memory+0x22>
 800d94c:	4803      	ldr	r0, [pc, #12]	@ (800d95c <rmw_uxrce_fini_service_memory+0x28>)
 800d94e:	f008 fae9 	bl	8015f24 <put_memory>
 800d952:	2300      	movs	r3, #0
 800d954:	6063      	str	r3, [r4, #4]
 800d956:	bd10      	pop	{r4, pc}
 800d958:	0801cabc 	.word	0x0801cabc
 800d95c:	2000de30 	.word	0x2000de30

0800d960 <rmw_uxrce_fini_client_memory>:
 800d960:	b510      	push	{r4, lr}
 800d962:	4604      	mov	r4, r0
 800d964:	6800      	ldr	r0, [r0, #0]
 800d966:	b128      	cbz	r0, 800d974 <rmw_uxrce_fini_client_memory+0x14>
 800d968:	4b06      	ldr	r3, [pc, #24]	@ (800d984 <rmw_uxrce_fini_client_memory+0x24>)
 800d96a:	6819      	ldr	r1, [r3, #0]
 800d96c:	f7f2 fc50 	bl	8000210 <strcmp>
 800d970:	b938      	cbnz	r0, 800d982 <rmw_uxrce_fini_client_memory+0x22>
 800d972:	6020      	str	r0, [r4, #0]
 800d974:	6861      	ldr	r1, [r4, #4]
 800d976:	b121      	cbz	r1, 800d982 <rmw_uxrce_fini_client_memory+0x22>
 800d978:	4803      	ldr	r0, [pc, #12]	@ (800d988 <rmw_uxrce_fini_client_memory+0x28>)
 800d97a:	f008 fad3 	bl	8015f24 <put_memory>
 800d97e:	2300      	movs	r3, #0
 800d980:	6063      	str	r3, [r4, #4]
 800d982:	bd10      	pop	{r4, pc}
 800d984:	0801cabc 	.word	0x0801cabc
 800d988:	2000dd58 	.word	0x2000dd58

0800d98c <rmw_uxrce_fini_topic_memory>:
 800d98c:	b510      	push	{r4, lr}
 800d98e:	4604      	mov	r4, r0
 800d990:	4621      	mov	r1, r4
 800d992:	4803      	ldr	r0, [pc, #12]	@ (800d9a0 <rmw_uxrce_fini_topic_memory+0x14>)
 800d994:	f008 fac6 	bl	8015f24 <put_memory>
 800d998:	2300      	movs	r3, #0
 800d99a:	61a3      	str	r3, [r4, #24]
 800d99c:	bd10      	pop	{r4, pc}
 800d99e:	bf00      	nop
 800d9a0:	2000dc7c 	.word	0x2000dc7c

0800d9a4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800d9a4:	b082      	sub	sp, #8
 800d9a6:	b530      	push	{r4, r5, lr}
 800d9a8:	4929      	ldr	r1, [pc, #164]	@ (800da50 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800d9aa:	ac03      	add	r4, sp, #12
 800d9ac:	e884 000c 	stmia.w	r4, {r2, r3}
 800d9b0:	680c      	ldr	r4, [r1, #0]
 800d9b2:	461d      	mov	r5, r3
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	2c00      	cmp	r4, #0
 800d9b8:	d043      	beq.n	800da42 <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	2100      	movs	r1, #0
 800d9be:	6883      	ldr	r3, [r0, #8]
 800d9c0:	6840      	ldr	r0, [r0, #4]
 800d9c2:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	bf08      	it	eq
 800d9ca:	3101      	addeq	r1, #1
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d1f6      	bne.n	800d9be <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800d9d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d027      	beq.n	800da28 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800d9d8:	d906      	bls.n	800d9e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d9da:	2b03      	cmp	r3, #3
 800d9dc:	d004      	beq.n	800d9e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800d9de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	b002      	add	sp, #8
 800d9e6:	4770      	bx	lr
 800d9e8:	b1fd      	cbz	r5, 800da2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d9ea:	428d      	cmp	r5, r1
 800d9ec:	d81d      	bhi.n	800da2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800d9ee:	2c00      	cmp	r4, #0
 800d9f0:	d0f5      	beq.n	800d9de <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	f04f 3cff 	mov.w	ip, #4294967295
 800d9f8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800d9fc:	e001      	b.n	800da02 <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800d9fe:	6864      	ldr	r4, [r4, #4]
 800da00:	b1dc      	cbz	r4, 800da3a <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800da02:	68a3      	ldr	r3, [r4, #8]
 800da04:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800da08:	428a      	cmp	r2, r1
 800da0a:	d1f8      	bne.n	800d9fe <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800da0c:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800da10:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800da14:	4561      	cmp	r1, ip
 800da16:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800da1a:	eb73 0e05 	sbcs.w	lr, r3, r5
 800da1e:	daee      	bge.n	800d9fe <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800da20:	468c      	mov	ip, r1
 800da22:	461d      	mov	r5, r3
 800da24:	4620      	mov	r0, r4
 800da26:	e7ea      	b.n	800d9fe <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800da28:	b92d      	cbnz	r5, 800da36 <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800da2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da2e:	4808      	ldr	r0, [pc, #32]	@ (800da50 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800da30:	b002      	add	sp, #8
 800da32:	f008 ba67 	b.w	8015f04 <get_memory>
 800da36:	428d      	cmp	r5, r1
 800da38:	d8f7      	bhi.n	800da2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800da3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da3e:	b002      	add	sp, #8
 800da40:	4770      	bx	lr
 800da42:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800da46:	2b02      	cmp	r3, #2
 800da48:	d0ef      	beq.n	800da2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800da4a:	d9ee      	bls.n	800da2a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800da4c:	4621      	mov	r1, r4
 800da4e:	e7c4      	b.n	800d9da <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800da50:	2000dac8 	.word	0x2000dac8

0800da54 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800da54:	4b11      	ldr	r3, [pc, #68]	@ (800da9c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	b1eb      	cbz	r3, 800da96 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800da5a:	b530      	push	{r4, r5, lr}
 800da5c:	4684      	mov	ip, r0
 800da5e:	f04f 34ff 	mov.w	r4, #4294967295
 800da62:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800da66:	2000      	movs	r0, #0
 800da68:	e001      	b.n	800da6e <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	b193      	cbz	r3, 800da94 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800da6e:	689a      	ldr	r2, [r3, #8]
 800da70:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800da74:	458c      	cmp	ip, r1
 800da76:	d1f8      	bne.n	800da6a <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800da78:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800da7c:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800da80:	42a1      	cmp	r1, r4
 800da82:	eb72 050e 	sbcs.w	r5, r2, lr
 800da86:	daf0      	bge.n	800da6a <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800da88:	4618      	mov	r0, r3
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	460c      	mov	r4, r1
 800da8e:	4696      	mov	lr, r2
 800da90:	2b00      	cmp	r3, #0
 800da92:	d1ec      	bne.n	800da6e <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800da94:	bd30      	pop	{r4, r5, pc}
 800da96:	4618      	mov	r0, r3
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	2000dac8 	.word	0x2000dac8

0800daa0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa4:	4b3c      	ldr	r3, [pc, #240]	@ (800db98 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800daa6:	ed2d 8b06 	vpush	{d8-d10}
 800daaa:	f8d3 8000 	ldr.w	r8, [r3]
 800daae:	b08d      	sub	sp, #52	@ 0x34
 800dab0:	f7ff fd76 	bl	800d5a0 <rmw_uros_epoch_nanos>
 800dab4:	f1b8 0f00 	cmp.w	r8, #0
 800dab8:	d05c      	beq.n	800db74 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800daba:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800dabe:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800dac2:	2b04      	cmp	r3, #4
 800dac4:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800db80 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800dac8:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800db88 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800dacc:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800db90 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800dad0:	4683      	mov	fp, r0
 800dad2:	ac04      	add	r4, sp, #16
 800dad4:	468a      	mov	sl, r1
 800dad6:	d03f      	beq.n	800db58 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800dad8:	2b05      	cmp	r3, #5
 800dada:	d044      	beq.n	800db66 <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800dadc:	2b03      	cmp	r3, #3
 800dade:	d03b      	beq.n	800db58 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800dae0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800dae4:	ed8d ab06 	vstr	d10, [sp, #24]
 800dae8:	ed8d 8b08 	vstr	d8, [sp, #32]
 800daec:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800daf0:	ab08      	add	r3, sp, #32
 800daf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800daf4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800daf8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800dafc:	f008 f838 	bl	8015b70 <rmw_time_equal>
 800db00:	b118      	cbz	r0, 800db0a <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800db02:	ed8d 9b04 	vstr	d9, [sp, #16]
 800db06:	ed8d 8b06 	vstr	d8, [sp, #24]
 800db0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800db0e:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800db12:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800db16:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800db1a:	f008 f87d 	bl	8015c18 <rmw_time_total_nsec>
 800db1e:	183f      	adds	r7, r7, r0
 800db20:	eb46 0601 	adc.w	r6, r6, r1
 800db24:	455f      	cmp	r7, fp
 800db26:	eb76 060a 	sbcs.w	r6, r6, sl
 800db2a:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800db2e:	db05      	blt.n	800db3c <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800db30:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800db34:	4593      	cmp	fp, r2
 800db36:	eb7a 0303 	sbcs.w	r3, sl, r3
 800db3a:	da03      	bge.n	800db44 <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800db3c:	4816      	ldr	r0, [pc, #88]	@ (800db98 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800db3e:	4641      	mov	r1, r8
 800db40:	f008 f9f0 	bl	8015f24 <put_memory>
 800db44:	f1b9 0f00 	cmp.w	r9, #0
 800db48:	d014      	beq.n	800db74 <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800db4a:	46c8      	mov	r8, r9
 800db4c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800db50:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800db54:	2b04      	cmp	r3, #4
 800db56:	d1bf      	bne.n	800dad8 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800db58:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800db5c:	3340      	adds	r3, #64	@ 0x40
 800db5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800db64:	e7c0      	b.n	800dae8 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800db66:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800db6a:	3348      	adds	r3, #72	@ 0x48
 800db6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800db72:	e7b9      	b.n	800dae8 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800db74:	b00d      	add	sp, #52	@ 0x34
 800db76:	ecbd 8b06 	vpop	{d8-d10}
 800db7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db7e:	bf00      	nop
	...
 800db88:	00000001 	.word	0x00000001
 800db8c:	00000000 	.word	0x00000000
 800db90:	0000001e 	.word	0x0000001e
 800db94:	00000000 	.word	0x00000000
 800db98:	2000dac8 	.word	0x2000dac8

0800db9c <run_xrce_session>:
 800db9c:	b500      	push	{lr}
 800db9e:	f891 c002 	ldrb.w	ip, [r1, #2]
 800dba2:	b087      	sub	sp, #28
 800dba4:	f1bc 0f01 	cmp.w	ip, #1
 800dba8:	f8ad 200e 	strh.w	r2, [sp, #14]
 800dbac:	d00f      	beq.n	800dbce <run_xrce_session+0x32>
 800dbae:	4619      	mov	r1, r3
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	f10d 020e 	add.w	r2, sp, #14
 800dbb8:	f10d 0317 	add.w	r3, sp, #23
 800dbbc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dbc0:	f001 ff28 	bl	800fa14 <uxr_run_session_until_all_status>
 800dbc4:	b100      	cbz	r0, 800dbc8 <run_xrce_session+0x2c>
 800dbc6:	2001      	movs	r0, #1
 800dbc8:	b007      	add	sp, #28
 800dbca:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dbd2:	f001 fb61 	bl	800f298 <uxr_flash_output_streams>
 800dbd6:	2001      	movs	r0, #1
 800dbd8:	e7f6      	b.n	800dbc8 <run_xrce_session+0x2c>
 800dbda:	bf00      	nop

0800dbdc <convert_qos_profile>:
 800dbdc:	780a      	ldrb	r2, [r1, #0]
 800dbde:	f891 c008 	ldrb.w	ip, [r1, #8]
 800dbe2:	f1a2 0202 	sub.w	r2, r2, #2
 800dbe6:	fab2 f282 	clz	r2, r2
 800dbea:	0952      	lsrs	r2, r2, #5
 800dbec:	7082      	strb	r2, [r0, #2]
 800dbee:	7a4a      	ldrb	r2, [r1, #9]
 800dbf0:	8889      	ldrh	r1, [r1, #4]
 800dbf2:	8081      	strh	r1, [r0, #4]
 800dbf4:	f1a2 0202 	sub.w	r2, r2, #2
 800dbf8:	f1ac 0c02 	sub.w	ip, ip, #2
 800dbfc:	fab2 f282 	clz	r2, r2
 800dc00:	fabc fc8c 	clz	ip, ip
 800dc04:	0952      	lsrs	r2, r2, #5
 800dc06:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800dc0a:	0052      	lsls	r2, r2, #1
 800dc0c:	f880 c001 	strb.w	ip, [r0, #1]
 800dc10:	7002      	strb	r2, [r0, #0]
 800dc12:	4770      	bx	lr

0800dc14 <generate_type_name>:
 800dc14:	b530      	push	{r4, r5, lr}
 800dc16:	2300      	movs	r3, #0
 800dc18:	700b      	strb	r3, [r1, #0]
 800dc1a:	6803      	ldr	r3, [r0, #0]
 800dc1c:	b087      	sub	sp, #28
 800dc1e:	4614      	mov	r4, r2
 800dc20:	b1d3      	cbz	r3, 800dc58 <generate_type_name+0x44>
 800dc22:	4a0f      	ldr	r2, [pc, #60]	@ (800dc60 <generate_type_name+0x4c>)
 800dc24:	4615      	mov	r5, r2
 800dc26:	9203      	str	r2, [sp, #12]
 800dc28:	9500      	str	r5, [sp, #0]
 800dc2a:	6842      	ldr	r2, [r0, #4]
 800dc2c:	480d      	ldr	r0, [pc, #52]	@ (800dc64 <generate_type_name+0x50>)
 800dc2e:	9001      	str	r0, [sp, #4]
 800dc30:	4608      	mov	r0, r1
 800dc32:	490d      	ldr	r1, [pc, #52]	@ (800dc68 <generate_type_name+0x54>)
 800dc34:	9204      	str	r2, [sp, #16]
 800dc36:	9105      	str	r1, [sp, #20]
 800dc38:	9102      	str	r1, [sp, #8]
 800dc3a:	4a0c      	ldr	r2, [pc, #48]	@ (800dc6c <generate_type_name+0x58>)
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	f00c f807 	bl	8019c50 <sniprintf>
 800dc42:	2800      	cmp	r0, #0
 800dc44:	db05      	blt.n	800dc52 <generate_type_name+0x3e>
 800dc46:	4284      	cmp	r4, r0
 800dc48:	bfd4      	ite	le
 800dc4a:	2000      	movle	r0, #0
 800dc4c:	2001      	movgt	r0, #1
 800dc4e:	b007      	add	sp, #28
 800dc50:	bd30      	pop	{r4, r5, pc}
 800dc52:	2000      	movs	r0, #0
 800dc54:	b007      	add	sp, #28
 800dc56:	bd30      	pop	{r4, r5, pc}
 800dc58:	4b05      	ldr	r3, [pc, #20]	@ (800dc70 <generate_type_name+0x5c>)
 800dc5a:	4a01      	ldr	r2, [pc, #4]	@ (800dc60 <generate_type_name+0x4c>)
 800dc5c:	461d      	mov	r5, r3
 800dc5e:	e7e2      	b.n	800dc26 <generate_type_name+0x12>
 800dc60:	0801bba4 	.word	0x0801bba4
 800dc64:	0801bbbc 	.word	0x0801bbbc
 800dc68:	0801bbb8 	.word	0x0801bbb8
 800dc6c:	0801bba8 	.word	0x0801bba8
 800dc70:	0801bc14 	.word	0x0801bc14

0800dc74 <generate_topic_name>:
 800dc74:	b510      	push	{r4, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	4614      	mov	r4, r2
 800dc7a:	9000      	str	r0, [sp, #0]
 800dc7c:	4b08      	ldr	r3, [pc, #32]	@ (800dca0 <generate_topic_name+0x2c>)
 800dc7e:	4a09      	ldr	r2, [pc, #36]	@ (800dca4 <generate_topic_name+0x30>)
 800dc80:	4608      	mov	r0, r1
 800dc82:	4621      	mov	r1, r4
 800dc84:	f00b ffe4 	bl	8019c50 <sniprintf>
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	db05      	blt.n	800dc98 <generate_topic_name+0x24>
 800dc8c:	4284      	cmp	r4, r0
 800dc8e:	bfd4      	ite	le
 800dc90:	2000      	movle	r0, #0
 800dc92:	2001      	movgt	r0, #1
 800dc94:	b002      	add	sp, #8
 800dc96:	bd10      	pop	{r4, pc}
 800dc98:	2000      	movs	r0, #0
 800dc9a:	b002      	add	sp, #8
 800dc9c:	bd10      	pop	{r4, pc}
 800dc9e:	bf00      	nop
 800dca0:	0801c4bc 	.word	0x0801c4bc
 800dca4:	0801bbc0 	.word	0x0801bbc0

0800dca8 <is_uxrce_rmw_identifier_valid>:
 800dca8:	b510      	push	{r4, lr}
 800dcaa:	4604      	mov	r4, r0
 800dcac:	b140      	cbz	r0, 800dcc0 <is_uxrce_rmw_identifier_valid+0x18>
 800dcae:	f008 f9af 	bl	8016010 <rmw_get_implementation_identifier>
 800dcb2:	4601      	mov	r1, r0
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f7f2 faab 	bl	8000210 <strcmp>
 800dcba:	fab0 f080 	clz	r0, r0
 800dcbe:	0940      	lsrs	r0, r0, #5
 800dcc0:	bd10      	pop	{r4, pc}
 800dcc2:	bf00      	nop

0800dcc4 <get_message_typesupport_handle>:
 800dcc4:	6883      	ldr	r3, [r0, #8]
 800dcc6:	4718      	bx	r3

0800dcc8 <get_message_typesupport_handle_function>:
 800dcc8:	b510      	push	{r4, lr}
 800dcca:	4604      	mov	r4, r0
 800dccc:	6800      	ldr	r0, [r0, #0]
 800dcce:	f7f2 fa9f 	bl	8000210 <strcmp>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	bf0c      	ite	eq
 800dcd6:	4620      	moveq	r0, r4
 800dcd8:	2000      	movne	r0, #0
 800dcda:	bd10      	pop	{r4, pc}

0800dcdc <rosidl_runtime_c__String__init>:
 800dcdc:	b1b0      	cbz	r0, 800dd0c <rosidl_runtime_c__String__init+0x30>
 800dcde:	b510      	push	{r4, lr}
 800dce0:	b086      	sub	sp, #24
 800dce2:	4604      	mov	r4, r0
 800dce4:	a801      	add	r0, sp, #4
 800dce6:	f7ff f977 	bl	800cfd8 <rcutils_get_default_allocator>
 800dcea:	9b01      	ldr	r3, [sp, #4]
 800dcec:	9905      	ldr	r1, [sp, #20]
 800dcee:	2001      	movs	r0, #1
 800dcf0:	4798      	blx	r3
 800dcf2:	6020      	str	r0, [r4, #0]
 800dcf4:	b138      	cbz	r0, 800dd06 <rosidl_runtime_c__String__init+0x2a>
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	7002      	strb	r2, [r0, #0]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800dd02:	b006      	add	sp, #24
 800dd04:	bd10      	pop	{r4, pc}
 800dd06:	2000      	movs	r0, #0
 800dd08:	b006      	add	sp, #24
 800dd0a:	bd10      	pop	{r4, pc}
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	4770      	bx	lr

0800dd10 <rosidl_runtime_c__String__fini>:
 800dd10:	b320      	cbz	r0, 800dd5c <rosidl_runtime_c__String__fini+0x4c>
 800dd12:	b510      	push	{r4, lr}
 800dd14:	6803      	ldr	r3, [r0, #0]
 800dd16:	b086      	sub	sp, #24
 800dd18:	4604      	mov	r4, r0
 800dd1a:	b173      	cbz	r3, 800dd3a <rosidl_runtime_c__String__fini+0x2a>
 800dd1c:	6883      	ldr	r3, [r0, #8]
 800dd1e:	b1f3      	cbz	r3, 800dd5e <rosidl_runtime_c__String__fini+0x4e>
 800dd20:	a801      	add	r0, sp, #4
 800dd22:	f7ff f959 	bl	800cfd8 <rcutils_get_default_allocator>
 800dd26:	9b02      	ldr	r3, [sp, #8]
 800dd28:	9905      	ldr	r1, [sp, #20]
 800dd2a:	6820      	ldr	r0, [r4, #0]
 800dd2c:	4798      	blx	r3
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e9c4 3300 	strd	r3, r3, [r4]
 800dd34:	60a3      	str	r3, [r4, #8]
 800dd36:	b006      	add	sp, #24
 800dd38:	bd10      	pop	{r4, pc}
 800dd3a:	6843      	ldr	r3, [r0, #4]
 800dd3c:	b9db      	cbnz	r3, 800dd76 <rosidl_runtime_c__String__fini+0x66>
 800dd3e:	6883      	ldr	r3, [r0, #8]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d0f8      	beq.n	800dd36 <rosidl_runtime_c__String__fini+0x26>
 800dd44:	4b12      	ldr	r3, [pc, #72]	@ (800dd90 <rosidl_runtime_c__String__fini+0x80>)
 800dd46:	4813      	ldr	r0, [pc, #76]	@ (800dd94 <rosidl_runtime_c__String__fini+0x84>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2251      	movs	r2, #81	@ 0x51
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	2101      	movs	r1, #1
 800dd50:	f00b ff70 	bl	8019c34 <fwrite>
 800dd54:	f04f 30ff 	mov.w	r0, #4294967295
 800dd58:	f00b fc2c 	bl	80195b4 <exit>
 800dd5c:	4770      	bx	lr
 800dd5e:	4b0c      	ldr	r3, [pc, #48]	@ (800dd90 <rosidl_runtime_c__String__fini+0x80>)
 800dd60:	480d      	ldr	r0, [pc, #52]	@ (800dd98 <rosidl_runtime_c__String__fini+0x88>)
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	224c      	movs	r2, #76	@ 0x4c
 800dd66:	68db      	ldr	r3, [r3, #12]
 800dd68:	2101      	movs	r1, #1
 800dd6a:	f00b ff63 	bl	8019c34 <fwrite>
 800dd6e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd72:	f00b fc1f 	bl	80195b4 <exit>
 800dd76:	4b06      	ldr	r3, [pc, #24]	@ (800dd90 <rosidl_runtime_c__String__fini+0x80>)
 800dd78:	4808      	ldr	r0, [pc, #32]	@ (800dd9c <rosidl_runtime_c__String__fini+0x8c>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	224e      	movs	r2, #78	@ 0x4e
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	2101      	movs	r1, #1
 800dd82:	f00b ff57 	bl	8019c34 <fwrite>
 800dd86:	f04f 30ff 	mov.w	r0, #4294967295
 800dd8a:	f00b fc13 	bl	80195b4 <exit>
 800dd8e:	bf00      	nop
 800dd90:	200022cc 	.word	0x200022cc
 800dd94:	0801bc68 	.word	0x0801bc68
 800dd98:	0801bbc8 	.word	0x0801bbc8
 800dd9c:	0801bc18 	.word	0x0801bc18

0800dda0 <rosidl_runtime_c__String__assign>:
 800dda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dda4:	460c      	mov	r4, r1
 800dda6:	b086      	sub	sp, #24
 800dda8:	b319      	cbz	r1, 800ddf2 <rosidl_runtime_c__String__assign+0x52>
 800ddaa:	4605      	mov	r5, r0
 800ddac:	4608      	mov	r0, r1
 800ddae:	f7f2 fa8f 	bl	80002d0 <strlen>
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	b1cd      	cbz	r5, 800ddea <rosidl_runtime_c__String__assign+0x4a>
 800ddb6:	a801      	add	r0, sp, #4
 800ddb8:	f106 0801 	add.w	r8, r6, #1
 800ddbc:	f7ff f90c 	bl	800cfd8 <rcutils_get_default_allocator>
 800ddc0:	9b03      	ldr	r3, [sp, #12]
 800ddc2:	9a05      	ldr	r2, [sp, #20]
 800ddc4:	6828      	ldr	r0, [r5, #0]
 800ddc6:	4641      	mov	r1, r8
 800ddc8:	4798      	blx	r3
 800ddca:	4607      	mov	r7, r0
 800ddcc:	b168      	cbz	r0, 800ddea <rosidl_runtime_c__String__assign+0x4a>
 800ddce:	4621      	mov	r1, r4
 800ddd0:	4632      	mov	r2, r6
 800ddd2:	f00c f98c 	bl	801a0ee <memcpy>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	2001      	movs	r0, #1
 800ddda:	55bb      	strb	r3, [r7, r6]
 800dddc:	e9c5 7600 	strd	r7, r6, [r5]
 800dde0:	f8c5 8008 	str.w	r8, [r5, #8]
 800dde4:	b006      	add	sp, #24
 800dde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddea:	2000      	movs	r0, #0
 800ddec:	b006      	add	sp, #24
 800ddee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf2:	4608      	mov	r0, r1
 800ddf4:	b006      	add	sp, #24
 800ddf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddfa:	bf00      	nop

0800ddfc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800ddfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de00:	6805      	ldr	r5, [r0, #0]
 800de02:	4604      	mov	r4, r0
 800de04:	4628      	mov	r0, r5
 800de06:	460e      	mov	r6, r1
 800de08:	f7f2 fa02 	bl	8000210 <strcmp>
 800de0c:	b308      	cbz	r0, 800de52 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800de0e:	4b12      	ldr	r3, [pc, #72]	@ (800de58 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800de10:	4628      	mov	r0, r5
 800de12:	6819      	ldr	r1, [r3, #0]
 800de14:	f7f2 f9fc 	bl	8000210 <strcmp>
 800de18:	4605      	mov	r5, r0
 800de1a:	b980      	cbnz	r0, 800de3e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800de1c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800de20:	f8d8 4000 	ldr.w	r4, [r8]
 800de24:	b1ac      	cbz	r4, 800de52 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800de26:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800de2a:	3f04      	subs	r7, #4
 800de2c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800de30:	4631      	mov	r1, r6
 800de32:	f7f2 f9ed 	bl	8000210 <strcmp>
 800de36:	b128      	cbz	r0, 800de44 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800de38:	3501      	adds	r5, #1
 800de3a:	42a5      	cmp	r5, r4
 800de3c:	d1f6      	bne.n	800de2c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800de3e:	2000      	movs	r0, #0
 800de40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de44:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800de48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800de4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de50:	4718      	bx	r3
 800de52:	4620      	mov	r0, r4
 800de54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de58:	20000370 	.word	0x20000370

0800de5c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800de5c:	f009 b9d4 	b.w	8017208 <std_msgs__msg__Header__init>

0800de60 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800de60:	f009 b9f2 	b.w	8017248 <std_msgs__msg__Header__fini>

0800de64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800de64:	b508      	push	{r3, lr}
 800de66:	f000 f8ab 	bl	800dfc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800de6a:	4b06      	ldr	r3, [pc, #24]	@ (800de84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800de6c:	4906      	ldr	r1, [pc, #24]	@ (800de88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	60c8      	str	r0, [r1, #12]
 800de72:	b10a      	cbz	r2, 800de78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800de74:	4803      	ldr	r0, [pc, #12]	@ (800de84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800de76:	bd08      	pop	{r3, pc}
 800de78:	4a04      	ldr	r2, [pc, #16]	@ (800de8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800de7a:	4802      	ldr	r0, [pc, #8]	@ (800de84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800de7c:	6812      	ldr	r2, [r2, #0]
 800de7e:	601a      	str	r2, [r3, #0]
 800de80:	bd08      	pop	{r3, pc}
 800de82:	bf00      	nop
 800de84:	20000378 	.word	0x20000378
 800de88:	20000390 	.word	0x20000390
 800de8c:	20000374 	.word	0x20000374

0800de90 <_Header__max_serialized_size>:
 800de90:	b500      	push	{lr}
 800de92:	b083      	sub	sp, #12
 800de94:	2301      	movs	r3, #1
 800de96:	2100      	movs	r1, #0
 800de98:	f10d 0007 	add.w	r0, sp, #7
 800de9c:	f88d 3007 	strb.w	r3, [sp, #7]
 800dea0:	f000 f8ec 	bl	800e07c <max_serialized_size_builtin_interfaces__msg__Time>
 800dea4:	b003      	add	sp, #12
 800dea6:	f85d fb04 	ldr.w	pc, [sp], #4
 800deaa:	bf00      	nop

0800deac <get_serialized_size_std_msgs__msg__Header>:
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	4605      	mov	r5, r0
 800deb0:	b168      	cbz	r0, 800dece <get_serialized_size_std_msgs__msg__Header+0x22>
 800deb2:	460c      	mov	r4, r1
 800deb4:	f000 f892 	bl	800dfdc <get_serialized_size_builtin_interfaces__msg__Time>
 800deb8:	1826      	adds	r6, r4, r0
 800deba:	2104      	movs	r1, #4
 800debc:	4630      	mov	r0, r6
 800debe:	f7fd fefb 	bl	800bcb8 <ucdr_alignment>
 800dec2:	68eb      	ldr	r3, [r5, #12]
 800dec4:	f1c4 0405 	rsb	r4, r4, #5
 800dec8:	441c      	add	r4, r3
 800deca:	4404      	add	r4, r0
 800decc:	19a0      	adds	r0, r4, r6
 800dece:	bd70      	pop	{r4, r5, r6, pc}

0800ded0 <_Header__cdr_deserialize>:
 800ded0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ded2:	460c      	mov	r4, r1
 800ded4:	b083      	sub	sp, #12
 800ded6:	b1e1      	cbz	r1, 800df12 <_Header__cdr_deserialize+0x42>
 800ded8:	4606      	mov	r6, r0
 800deda:	f000 f8e3 	bl	800e0a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dede:	6843      	ldr	r3, [r0, #4]
 800dee0:	4621      	mov	r1, r4
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	4630      	mov	r0, r6
 800dee6:	4798      	blx	r3
 800dee8:	6927      	ldr	r7, [r4, #16]
 800deea:	68a1      	ldr	r1, [r4, #8]
 800deec:	ab01      	add	r3, sp, #4
 800deee:	463a      	mov	r2, r7
 800def0:	4630      	mov	r0, r6
 800def2:	f000 fcb5 	bl	800e860 <ucdr_deserialize_sequence_char>
 800def6:	9b01      	ldr	r3, [sp, #4]
 800def8:	4605      	mov	r5, r0
 800defa:	b920      	cbnz	r0, 800df06 <_Header__cdr_deserialize+0x36>
 800defc:	429f      	cmp	r7, r3
 800defe:	d30c      	bcc.n	800df1a <_Header__cdr_deserialize+0x4a>
 800df00:	4628      	mov	r0, r5
 800df02:	b003      	add	sp, #12
 800df04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df06:	b103      	cbz	r3, 800df0a <_Header__cdr_deserialize+0x3a>
 800df08:	3b01      	subs	r3, #1
 800df0a:	4628      	mov	r0, r5
 800df0c:	60e3      	str	r3, [r4, #12]
 800df0e:	b003      	add	sp, #12
 800df10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df12:	460d      	mov	r5, r1
 800df14:	4628      	mov	r0, r5
 800df16:	b003      	add	sp, #12
 800df18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df1a:	2101      	movs	r1, #1
 800df1c:	75b0      	strb	r0, [r6, #22]
 800df1e:	7571      	strb	r1, [r6, #21]
 800df20:	60e0      	str	r0, [r4, #12]
 800df22:	4630      	mov	r0, r6
 800df24:	f7fd fede 	bl	800bce4 <ucdr_align_to>
 800df28:	4630      	mov	r0, r6
 800df2a:	9901      	ldr	r1, [sp, #4]
 800df2c:	f7fd ff10 	bl	800bd50 <ucdr_advance_buffer>
 800df30:	4628      	mov	r0, r5
 800df32:	b003      	add	sp, #12
 800df34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df36:	bf00      	nop

0800df38 <_Header__cdr_serialize>:
 800df38:	b1f8      	cbz	r0, 800df7a <_Header__cdr_serialize+0x42>
 800df3a:	b570      	push	{r4, r5, r6, lr}
 800df3c:	4604      	mov	r4, r0
 800df3e:	460d      	mov	r5, r1
 800df40:	f000 f8b0 	bl	800e0a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800df44:	6843      	ldr	r3, [r0, #4]
 800df46:	4629      	mov	r1, r5
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	4620      	mov	r0, r4
 800df4c:	4798      	blx	r3
 800df4e:	68a6      	ldr	r6, [r4, #8]
 800df50:	b156      	cbz	r6, 800df68 <_Header__cdr_serialize+0x30>
 800df52:	4630      	mov	r0, r6
 800df54:	f7f2 f9bc 	bl	80002d0 <strlen>
 800df58:	4631      	mov	r1, r6
 800df5a:	60e0      	str	r0, [r4, #12]
 800df5c:	1c42      	adds	r2, r0, #1
 800df5e:	4628      	mov	r0, r5
 800df60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df64:	f000 bc6a 	b.w	800e83c <ucdr_serialize_sequence_char>
 800df68:	4630      	mov	r0, r6
 800df6a:	60e0      	str	r0, [r4, #12]
 800df6c:	4632      	mov	r2, r6
 800df6e:	4631      	mov	r1, r6
 800df70:	4628      	mov	r0, r5
 800df72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df76:	f000 bc61 	b.w	800e83c <ucdr_serialize_sequence_char>
 800df7a:	4770      	bx	lr

0800df7c <_Header__get_serialized_size>:
 800df7c:	b538      	push	{r3, r4, r5, lr}
 800df7e:	4604      	mov	r4, r0
 800df80:	b150      	cbz	r0, 800df98 <_Header__get_serialized_size+0x1c>
 800df82:	2100      	movs	r1, #0
 800df84:	f000 f82a 	bl	800dfdc <get_serialized_size_builtin_interfaces__msg__Time>
 800df88:	2104      	movs	r1, #4
 800df8a:	4605      	mov	r5, r0
 800df8c:	f7fd fe94 	bl	800bcb8 <ucdr_alignment>
 800df90:	68e4      	ldr	r4, [r4, #12]
 800df92:	3405      	adds	r4, #5
 800df94:	442c      	add	r4, r5
 800df96:	4420      	add	r0, r4
 800df98:	bd38      	pop	{r3, r4, r5, pc}
 800df9a:	bf00      	nop

0800df9c <max_serialized_size_std_msgs__msg__Header>:
 800df9c:	b510      	push	{r4, lr}
 800df9e:	2301      	movs	r3, #1
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	7003      	strb	r3, [r0, #0]
 800dfa4:	f000 f86a 	bl	800e07c <max_serialized_size_builtin_interfaces__msg__Time>
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	7023      	strb	r3, [r4, #0]
 800dfac:	bd10      	pop	{r4, pc}
 800dfae:	bf00      	nop

0800dfb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800dfb0:	4800      	ldr	r0, [pc, #0]	@ (800dfb4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800dfb2:	4770      	bx	lr
 800dfb4:	20000408 	.word	0x20000408

0800dfb8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800dfb8:	f009 b982 	b.w	80172c0 <builtin_interfaces__msg__Time__init>

0800dfbc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800dfbc:	f009 b984 	b.w	80172c8 <builtin_interfaces__msg__Time__fini>

0800dfc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800dfc0:	4b04      	ldr	r3, [pc, #16]	@ (800dfd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800dfc2:	681a      	ldr	r2, [r3, #0]
 800dfc4:	b10a      	cbz	r2, 800dfca <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800dfc6:	4803      	ldr	r0, [pc, #12]	@ (800dfd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800dfc8:	4770      	bx	lr
 800dfca:	4a03      	ldr	r2, [pc, #12]	@ (800dfd8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800dfcc:	4801      	ldr	r0, [pc, #4]	@ (800dfd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800dfce:	6812      	ldr	r2, [r2, #0]
 800dfd0:	601a      	str	r2, [r3, #0]
 800dfd2:	4770      	bx	lr
 800dfd4:	2000043c 	.word	0x2000043c
 800dfd8:	20000374 	.word	0x20000374

0800dfdc <get_serialized_size_builtin_interfaces__msg__Time>:
 800dfdc:	b180      	cbz	r0, 800e000 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800dfde:	b538      	push	{r3, r4, r5, lr}
 800dfe0:	460d      	mov	r5, r1
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	2104      	movs	r1, #4
 800dfe6:	f7fd fe67 	bl	800bcb8 <ucdr_alignment>
 800dfea:	2104      	movs	r1, #4
 800dfec:	186c      	adds	r4, r5, r1
 800dfee:	4404      	add	r4, r0
 800dff0:	4620      	mov	r0, r4
 800dff2:	f7fd fe61 	bl	800bcb8 <ucdr_alignment>
 800dff6:	f1c5 0504 	rsb	r5, r5, #4
 800dffa:	4405      	add	r5, r0
 800dffc:	1928      	adds	r0, r5, r4
 800dffe:	bd38      	pop	{r3, r4, r5, pc}
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop

0800e004 <_Time__cdr_deserialize>:
 800e004:	b538      	push	{r3, r4, r5, lr}
 800e006:	460c      	mov	r4, r1
 800e008:	b141      	cbz	r1, 800e01c <_Time__cdr_deserialize+0x18>
 800e00a:	4605      	mov	r5, r0
 800e00c:	f7fd fa58 	bl	800b4c0 <ucdr_deserialize_int32_t>
 800e010:	1d21      	adds	r1, r4, #4
 800e012:	4628      	mov	r0, r5
 800e014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e018:	f7fc bed0 	b.w	800adbc <ucdr_deserialize_uint32_t>
 800e01c:	4608      	mov	r0, r1
 800e01e:	bd38      	pop	{r3, r4, r5, pc}

0800e020 <_Time__cdr_serialize>:
 800e020:	b160      	cbz	r0, 800e03c <_Time__cdr_serialize+0x1c>
 800e022:	b538      	push	{r3, r4, r5, lr}
 800e024:	460d      	mov	r5, r1
 800e026:	4604      	mov	r4, r0
 800e028:	6801      	ldr	r1, [r0, #0]
 800e02a:	4628      	mov	r0, r5
 800e02c:	f7fd f9ae 	bl	800b38c <ucdr_serialize_int32_t>
 800e030:	6861      	ldr	r1, [r4, #4]
 800e032:	4628      	mov	r0, r5
 800e034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e038:	f7fc bd96 	b.w	800ab68 <ucdr_serialize_uint32_t>
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop

0800e040 <_Time__get_serialized_size>:
 800e040:	b160      	cbz	r0, 800e05c <_Time__get_serialized_size+0x1c>
 800e042:	b510      	push	{r4, lr}
 800e044:	2104      	movs	r1, #4
 800e046:	2000      	movs	r0, #0
 800e048:	f7fd fe36 	bl	800bcb8 <ucdr_alignment>
 800e04c:	1d04      	adds	r4, r0, #4
 800e04e:	2104      	movs	r1, #4
 800e050:	4620      	mov	r0, r4
 800e052:	f7fd fe31 	bl	800bcb8 <ucdr_alignment>
 800e056:	3004      	adds	r0, #4
 800e058:	4420      	add	r0, r4
 800e05a:	bd10      	pop	{r4, pc}
 800e05c:	4770      	bx	lr
 800e05e:	bf00      	nop

0800e060 <_Time__max_serialized_size>:
 800e060:	b510      	push	{r4, lr}
 800e062:	2104      	movs	r1, #4
 800e064:	2000      	movs	r0, #0
 800e066:	f7fd fe27 	bl	800bcb8 <ucdr_alignment>
 800e06a:	1d04      	adds	r4, r0, #4
 800e06c:	2104      	movs	r1, #4
 800e06e:	4620      	mov	r0, r4
 800e070:	f7fd fe22 	bl	800bcb8 <ucdr_alignment>
 800e074:	3004      	adds	r0, #4
 800e076:	4420      	add	r0, r4
 800e078:	bd10      	pop	{r4, pc}
 800e07a:	bf00      	nop

0800e07c <max_serialized_size_builtin_interfaces__msg__Time>:
 800e07c:	b538      	push	{r3, r4, r5, lr}
 800e07e:	460c      	mov	r4, r1
 800e080:	2301      	movs	r3, #1
 800e082:	7003      	strb	r3, [r0, #0]
 800e084:	2104      	movs	r1, #4
 800e086:	4620      	mov	r0, r4
 800e088:	f7fd fe16 	bl	800bcb8 <ucdr_alignment>
 800e08c:	2104      	movs	r1, #4
 800e08e:	1863      	adds	r3, r4, r1
 800e090:	18c5      	adds	r5, r0, r3
 800e092:	4628      	mov	r0, r5
 800e094:	f7fd fe10 	bl	800bcb8 <ucdr_alignment>
 800e098:	f1c4 0404 	rsb	r4, r4, #4
 800e09c:	4420      	add	r0, r4
 800e09e:	4428      	add	r0, r5
 800e0a0:	bd38      	pop	{r3, r4, r5, pc}
 800e0a2:	bf00      	nop

0800e0a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e0a4:	4800      	ldr	r0, [pc, #0]	@ (800e0a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800e0a6:	4770      	bx	lr
 800e0a8:	200004cc 	.word	0x200004cc

0800e0ac <geometry_msgs__msg__Twist__get_type_hash>:
 800e0ac:	4800      	ldr	r0, [pc, #0]	@ (800e0b0 <geometry_msgs__msg__Twist__get_type_hash+0x4>)
 800e0ae:	4770      	bx	lr
 800e0b0:	20000500 	.word	0x20000500

0800e0b4 <geometry_msgs__msg__Twist__get_type_description>:
 800e0b4:	b510      	push	{r4, lr}
 800e0b6:	4c08      	ldr	r4, [pc, #32]	@ (800e0d8 <geometry_msgs__msg__Twist__get_type_description+0x24>)
 800e0b8:	7820      	ldrb	r0, [r4, #0]
 800e0ba:	b108      	cbz	r0, 800e0c0 <geometry_msgs__msg__Twist__get_type_description+0xc>
 800e0bc:	4807      	ldr	r0, [pc, #28]	@ (800e0dc <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800e0be:	bd10      	pop	{r4, pc}
 800e0c0:	f000 f86c 	bl	800e19c <geometry_msgs__msg__Vector3__get_type_description>
 800e0c4:	300c      	adds	r0, #12
 800e0c6:	c807      	ldmia	r0, {r0, r1, r2}
 800e0c8:	4b05      	ldr	r3, [pc, #20]	@ (800e0e0 <geometry_msgs__msg__Twist__get_type_description+0x2c>)
 800e0ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	4802      	ldr	r0, [pc, #8]	@ (800e0dc <geometry_msgs__msg__Twist__get_type_description+0x28>)
 800e0d2:	7023      	strb	r3, [r4, #0]
 800e0d4:	bd10      	pop	{r4, pc}
 800e0d6:	bf00      	nop
 800e0d8:	200101c1 	.word	0x200101c1
 800e0dc:	0801c530 	.word	0x0801c530
 800e0e0:	200005a8 	.word	0x200005a8

0800e0e4 <geometry_msgs__msg__Twist__get_individual_type_description_source>:
 800e0e4:	4800      	ldr	r0, [pc, #0]	@ (800e0e8 <geometry_msgs__msg__Twist__get_individual_type_description_source+0x4>)
 800e0e6:	4770      	bx	lr
 800e0e8:	0801c50c 	.word	0x0801c50c

0800e0ec <geometry_msgs__msg__Twist__get_type_description_sources>:
 800e0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ee:	4e0f      	ldr	r6, [pc, #60]	@ (800e12c <geometry_msgs__msg__Twist__get_type_description_sources+0x40>)
 800e0f0:	7837      	ldrb	r7, [r6, #0]
 800e0f2:	b10f      	cbz	r7, 800e0f8 <geometry_msgs__msg__Twist__get_type_description_sources+0xc>
 800e0f4:	480e      	ldr	r0, [pc, #56]	@ (800e130 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800e0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0f8:	4d0e      	ldr	r5, [pc, #56]	@ (800e134 <geometry_msgs__msg__Twist__get_type_description_sources+0x48>)
 800e0fa:	4c0f      	ldr	r4, [pc, #60]	@ (800e138 <geometry_msgs__msg__Twist__get_type_description_sources+0x4c>)
 800e0fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e104:	682b      	ldr	r3, [r5, #0]
 800e106:	f844 3b04 	str.w	r3, [r4], #4
 800e10a:	4638      	mov	r0, r7
 800e10c:	f000 f852 	bl	800e1b4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 800e110:	2301      	movs	r3, #1
 800e112:	4684      	mov	ip, r0
 800e114:	7033      	strb	r3, [r6, #0]
 800e116:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e11a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e11c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e122:	f8dc 3000 	ldr.w	r3, [ip]
 800e126:	4802      	ldr	r0, [pc, #8]	@ (800e130 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 800e128:	6023      	str	r3, [r4, #0]
 800e12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e12c:	200101c0 	.word	0x200101c0
 800e130:	0801c500 	.word	0x0801c500
 800e134:	0801c50c 	.word	0x0801c50c
 800e138:	20010178 	.word	0x20010178

0800e13c <geometry_msgs__msg__Twist__init>:
 800e13c:	b1d8      	cbz	r0, 800e176 <geometry_msgs__msg__Twist__init+0x3a>
 800e13e:	b538      	push	{r3, r4, r5, lr}
 800e140:	4604      	mov	r4, r0
 800e142:	f000 f857 	bl	800e1f4 <geometry_msgs__msg__Vector3__init>
 800e146:	b130      	cbz	r0, 800e156 <geometry_msgs__msg__Twist__init+0x1a>
 800e148:	f104 0518 	add.w	r5, r4, #24
 800e14c:	4628      	mov	r0, r5
 800e14e:	f000 f851 	bl	800e1f4 <geometry_msgs__msg__Vector3__init>
 800e152:	b148      	cbz	r0, 800e168 <geometry_msgs__msg__Twist__init+0x2c>
 800e154:	bd38      	pop	{r3, r4, r5, pc}
 800e156:	4620      	mov	r0, r4
 800e158:	f000 f850 	bl	800e1fc <geometry_msgs__msg__Vector3__fini>
 800e15c:	f104 0018 	add.w	r0, r4, #24
 800e160:	f000 f84c 	bl	800e1fc <geometry_msgs__msg__Vector3__fini>
 800e164:	2000      	movs	r0, #0
 800e166:	bd38      	pop	{r3, r4, r5, pc}
 800e168:	4620      	mov	r0, r4
 800e16a:	f000 f847 	bl	800e1fc <geometry_msgs__msg__Vector3__fini>
 800e16e:	4628      	mov	r0, r5
 800e170:	f000 f844 	bl	800e1fc <geometry_msgs__msg__Vector3__fini>
 800e174:	e7f6      	b.n	800e164 <geometry_msgs__msg__Twist__init+0x28>
 800e176:	2000      	movs	r0, #0
 800e178:	4770      	bx	lr
 800e17a:	bf00      	nop

0800e17c <geometry_msgs__msg__Twist__fini>:
 800e17c:	b148      	cbz	r0, 800e192 <geometry_msgs__msg__Twist__fini+0x16>
 800e17e:	b510      	push	{r4, lr}
 800e180:	4604      	mov	r4, r0
 800e182:	f000 f83b 	bl	800e1fc <geometry_msgs__msg__Vector3__fini>
 800e186:	f104 0018 	add.w	r0, r4, #24
 800e18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e18e:	f000 b835 	b.w	800e1fc <geometry_msgs__msg__Vector3__fini>
 800e192:	4770      	bx	lr

0800e194 <geometry_msgs__msg__Vector3__get_type_hash>:
 800e194:	4800      	ldr	r0, [pc, #0]	@ (800e198 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 800e196:	4770      	bx	lr
 800e198:	2000068c 	.word	0x2000068c

0800e19c <geometry_msgs__msg__Vector3__get_type_description>:
 800e19c:	4b03      	ldr	r3, [pc, #12]	@ (800e1ac <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 800e19e:	781a      	ldrb	r2, [r3, #0]
 800e1a0:	b90a      	cbnz	r2, 800e1a6 <geometry_msgs__msg__Vector3__get_type_description+0xa>
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	701a      	strb	r2, [r3, #0]
 800e1a6:	4802      	ldr	r0, [pc, #8]	@ (800e1b0 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	200101e9 	.word	0x200101e9
 800e1b0:	0801c584 	.word	0x0801c584

0800e1b4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 800e1b4:	4800      	ldr	r0, [pc, #0]	@ (800e1b8 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 800e1b6:	4770      	bx	lr
 800e1b8:	0801c560 	.word	0x0801c560

0800e1bc <geometry_msgs__msg__Vector3__get_type_description_sources>:
 800e1bc:	4b09      	ldr	r3, [pc, #36]	@ (800e1e4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 800e1be:	781a      	ldrb	r2, [r3, #0]
 800e1c0:	b96a      	cbnz	r2, 800e1de <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 800e1c2:	b430      	push	{r4, r5}
 800e1c4:	4d08      	ldr	r5, [pc, #32]	@ (800e1e8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 800e1c6:	4c09      	ldr	r4, [pc, #36]	@ (800e1ec <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	701a      	strb	r2, [r3, #0]
 800e1cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1d4:	682b      	ldr	r3, [r5, #0]
 800e1d6:	4806      	ldr	r0, [pc, #24]	@ (800e1f0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800e1d8:	6023      	str	r3, [r4, #0]
 800e1da:	bc30      	pop	{r4, r5}
 800e1dc:	4770      	bx	lr
 800e1de:	4804      	ldr	r0, [pc, #16]	@ (800e1f0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 800e1e0:	4770      	bx	lr
 800e1e2:	bf00      	nop
 800e1e4:	200101e8 	.word	0x200101e8
 800e1e8:	0801c560 	.word	0x0801c560
 800e1ec:	200101c4 	.word	0x200101c4
 800e1f0:	0801c554 	.word	0x0801c554

0800e1f4 <geometry_msgs__msg__Vector3__init>:
 800e1f4:	3800      	subs	r0, #0
 800e1f6:	bf18      	it	ne
 800e1f8:	2001      	movne	r0, #1
 800e1fa:	4770      	bx	lr

0800e1fc <geometry_msgs__msg__Vector3__fini>:
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop

0800e200 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 800e200:	2024      	movs	r0, #36	@ 0x24
 800e202:	4770      	bx	lr

0800e204 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 800e204:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop

0800e20c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 800e20c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e210:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e214:	e9c2 0100 	strd	r0, r1, [r2]
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop

0800e21c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 800e21c:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e220:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e224:	e9c0 2300 	strd	r2, r3, [r0]
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop

0800e22c <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 800e22c:	f009 b956 	b.w	80174dc <geometry_msgs__msg__PoseWithCovariance__init>

0800e230 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 800e230:	f009 b962 	b.w	80174f8 <geometry_msgs__msg__PoseWithCovariance__fini>

0800e234 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 800e234:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop

0800e23c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800e23c:	b508      	push	{r3, lr}
 800e23e:	f009 fa05 	bl	801764c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800e242:	4b06      	ldr	r3, [pc, #24]	@ (800e25c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800e244:	4906      	ldr	r1, [pc, #24]	@ (800e260 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	60c8      	str	r0, [r1, #12]
 800e24a:	b10a      	cbz	r2, 800e250 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 800e24c:	4803      	ldr	r0, [pc, #12]	@ (800e25c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800e24e:	bd08      	pop	{r3, pc}
 800e250:	4a04      	ldr	r2, [pc, #16]	@ (800e264 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 800e252:	4802      	ldr	r0, [pc, #8]	@ (800e25c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800e254:	6812      	ldr	r2, [r2, #0]
 800e256:	601a      	str	r2, [r3, #0]
 800e258:	bd08      	pop	{r3, pc}
 800e25a:	bf00      	nop
 800e25c:	200008b0 	.word	0x200008b0
 800e260:	200008c8 	.word	0x200008c8
 800e264:	20000374 	.word	0x20000374

0800e268 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 800e268:	2024      	movs	r0, #36	@ 0x24
 800e26a:	4770      	bx	lr

0800e26c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 800e26c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop

0800e274 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 800e274:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e278:	e9d0 0100 	ldrd	r0, r1, [r0]
 800e27c:	e9c2 0100 	strd	r0, r1, [r2]
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop

0800e284 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 800e284:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e288:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e28c:	e9c0 2300 	strd	r2, r3, [r0]
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop

0800e294 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 800e294:	f009 b9c4 	b.w	8017620 <geometry_msgs__msg__TwistWithCovariance__init>

0800e298 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 800e298:	f009 b9d0 	b.w	801763c <geometry_msgs__msg__TwistWithCovariance__fini>

0800e29c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 800e29c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop

0800e2a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800e2a4:	b508      	push	{r3, lr}
 800e2a6:	f7fc f8eb 	bl	800a480 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800e2aa:	4b06      	ldr	r3, [pc, #24]	@ (800e2c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800e2ac:	4906      	ldr	r1, [pc, #24]	@ (800e2c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	60c8      	str	r0, [r1, #12]
 800e2b2:	b10a      	cbz	r2, 800e2b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 800e2b4:	4803      	ldr	r0, [pc, #12]	@ (800e2c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800e2b6:	bd08      	pop	{r3, pc}
 800e2b8:	4a04      	ldr	r2, [pc, #16]	@ (800e2cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 800e2ba:	4802      	ldr	r0, [pc, #8]	@ (800e2c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800e2bc:	6812      	ldr	r2, [r2, #0]
 800e2be:	601a      	str	r2, [r3, #0]
 800e2c0:	bd08      	pop	{r3, pc}
 800e2c2:	bf00      	nop
 800e2c4:	20000940 	.word	0x20000940
 800e2c8:	20000958 	.word	0x20000958
 800e2cc:	20000374 	.word	0x20000374

0800e2d0 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	b158      	cbz	r0, 800e2ec <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 800e2d4:	460d      	mov	r5, r1
 800e2d6:	f009 f9e3 	bl	80176a0 <get_serialized_size_geometry_msgs__msg__Pose>
 800e2da:	182c      	adds	r4, r5, r0
 800e2dc:	2108      	movs	r1, #8
 800e2de:	4620      	mov	r0, r4
 800e2e0:	f7fd fcea 	bl	800bcb8 <ucdr_alignment>
 800e2e4:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800e2e8:	4405      	add	r5, r0
 800e2ea:	1928      	adds	r0, r5, r4
 800e2ec:	bd38      	pop	{r3, r4, r5, pc}
 800e2ee:	bf00      	nop

0800e2f0 <_PoseWithCovariance__cdr_deserialize>:
 800e2f0:	b538      	push	{r3, r4, r5, lr}
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	b179      	cbz	r1, 800e316 <_PoseWithCovariance__cdr_deserialize+0x26>
 800e2f6:	4605      	mov	r5, r0
 800e2f8:	f009 fa3e 	bl	8017778 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800e2fc:	6843      	ldr	r3, [r0, #4]
 800e2fe:	4621      	mov	r1, r4
 800e300:	68db      	ldr	r3, [r3, #12]
 800e302:	4628      	mov	r0, r5
 800e304:	4798      	blx	r3
 800e306:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800e30a:	4628      	mov	r0, r5
 800e30c:	2224      	movs	r2, #36	@ 0x24
 800e30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e312:	f000 ba3d 	b.w	800e790 <ucdr_deserialize_array_double>
 800e316:	4608      	mov	r0, r1
 800e318:	bd38      	pop	{r3, r4, r5, pc}
 800e31a:	bf00      	nop

0800e31c <_PoseWithCovariance__cdr_serialize>:
 800e31c:	b188      	cbz	r0, 800e342 <_PoseWithCovariance__cdr_serialize+0x26>
 800e31e:	b538      	push	{r3, r4, r5, lr}
 800e320:	460d      	mov	r5, r1
 800e322:	4604      	mov	r4, r0
 800e324:	f009 fa28 	bl	8017778 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800e328:	6843      	ldr	r3, [r0, #4]
 800e32a:	4629      	mov	r1, r5
 800e32c:	689b      	ldr	r3, [r3, #8]
 800e32e:	4620      	mov	r0, r4
 800e330:	4798      	blx	r3
 800e332:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800e336:	4628      	mov	r0, r5
 800e338:	2224      	movs	r2, #36	@ 0x24
 800e33a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e33e:	f000 b9d3 	b.w	800e6e8 <ucdr_serialize_array_double>
 800e342:	4770      	bx	lr

0800e344 <_PoseWithCovariance__get_serialized_size>:
 800e344:	b158      	cbz	r0, 800e35e <_PoseWithCovariance__get_serialized_size+0x1a>
 800e346:	b510      	push	{r4, lr}
 800e348:	2100      	movs	r1, #0
 800e34a:	f009 f9a9 	bl	80176a0 <get_serialized_size_geometry_msgs__msg__Pose>
 800e34e:	2108      	movs	r1, #8
 800e350:	4604      	mov	r4, r0
 800e352:	f7fd fcb1 	bl	800bcb8 <ucdr_alignment>
 800e356:	4420      	add	r0, r4
 800e358:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800e35c:	bd10      	pop	{r4, pc}
 800e35e:	4770      	bx	lr

0800e360 <_PoseWithCovariance__max_serialized_size>:
 800e360:	b510      	push	{r4, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	2301      	movs	r3, #1
 800e366:	2100      	movs	r1, #0
 800e368:	f10d 0007 	add.w	r0, sp, #7
 800e36c:	f88d 3007 	strb.w	r3, [sp, #7]
 800e370:	f009 f9f4 	bl	801775c <max_serialized_size_geometry_msgs__msg__Pose>
 800e374:	2108      	movs	r1, #8
 800e376:	4604      	mov	r4, r0
 800e378:	f7fd fc9e 	bl	800bcb8 <ucdr_alignment>
 800e37c:	4420      	add	r0, r4
 800e37e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800e382:	b002      	add	sp, #8
 800e384:	bd10      	pop	{r4, pc}
 800e386:	bf00      	nop

0800e388 <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800e388:	b538      	push	{r3, r4, r5, lr}
 800e38a:	2301      	movs	r3, #1
 800e38c:	7003      	strb	r3, [r0, #0]
 800e38e:	460c      	mov	r4, r1
 800e390:	f009 f9e4 	bl	801775c <max_serialized_size_geometry_msgs__msg__Pose>
 800e394:	1825      	adds	r5, r4, r0
 800e396:	2108      	movs	r1, #8
 800e398:	4628      	mov	r0, r5
 800e39a:	f7fd fc8d 	bl	800bcb8 <ucdr_alignment>
 800e39e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800e3a2:	4420      	add	r0, r4
 800e3a4:	4428      	add	r0, r5
 800e3a6:	bd38      	pop	{r3, r4, r5, pc}

0800e3a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800e3a8:	4800      	ldr	r0, [pc, #0]	@ (800e3ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 800e3aa:	4770      	bx	lr
 800e3ac:	200009d0 	.word	0x200009d0

0800e3b0 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800e3b0:	b538      	push	{r3, r4, r5, lr}
 800e3b2:	b158      	cbz	r0, 800e3cc <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 800e3b4:	460d      	mov	r5, r1
 800e3b6:	f7fc f88d 	bl	800a4d4 <get_serialized_size_geometry_msgs__msg__Twist>
 800e3ba:	182c      	adds	r4, r5, r0
 800e3bc:	2108      	movs	r1, #8
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f7fd fc7a 	bl	800bcb8 <ucdr_alignment>
 800e3c4:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800e3c8:	4405      	add	r5, r0
 800e3ca:	1928      	adds	r0, r5, r4
 800e3cc:	bd38      	pop	{r3, r4, r5, pc}
 800e3ce:	bf00      	nop

0800e3d0 <_TwistWithCovariance__cdr_deserialize>:
 800e3d0:	b538      	push	{r3, r4, r5, lr}
 800e3d2:	460c      	mov	r4, r1
 800e3d4:	b179      	cbz	r1, 800e3f6 <_TwistWithCovariance__cdr_deserialize+0x26>
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	f7fc f8e8 	bl	800a5ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800e3dc:	6843      	ldr	r3, [r0, #4]
 800e3de:	4621      	mov	r1, r4
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	4628      	mov	r0, r5
 800e3e4:	4798      	blx	r3
 800e3e6:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	2224      	movs	r2, #36	@ 0x24
 800e3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3f2:	f000 b9cd 	b.w	800e790 <ucdr_deserialize_array_double>
 800e3f6:	4608      	mov	r0, r1
 800e3f8:	bd38      	pop	{r3, r4, r5, pc}
 800e3fa:	bf00      	nop

0800e3fc <_TwistWithCovariance__cdr_serialize>:
 800e3fc:	b188      	cbz	r0, 800e422 <_TwistWithCovariance__cdr_serialize+0x26>
 800e3fe:	b538      	push	{r3, r4, r5, lr}
 800e400:	460d      	mov	r5, r1
 800e402:	4604      	mov	r4, r0
 800e404:	f7fc f8d2 	bl	800a5ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800e408:	6843      	ldr	r3, [r0, #4]
 800e40a:	4629      	mov	r1, r5
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	4620      	mov	r0, r4
 800e410:	4798      	blx	r3
 800e412:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e416:	4628      	mov	r0, r5
 800e418:	2224      	movs	r2, #36	@ 0x24
 800e41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e41e:	f000 b963 	b.w	800e6e8 <ucdr_serialize_array_double>
 800e422:	4770      	bx	lr

0800e424 <_TwistWithCovariance__get_serialized_size>:
 800e424:	b158      	cbz	r0, 800e43e <_TwistWithCovariance__get_serialized_size+0x1a>
 800e426:	b510      	push	{r4, lr}
 800e428:	2100      	movs	r1, #0
 800e42a:	f7fc f853 	bl	800a4d4 <get_serialized_size_geometry_msgs__msg__Twist>
 800e42e:	2108      	movs	r1, #8
 800e430:	4604      	mov	r4, r0
 800e432:	f7fd fc41 	bl	800bcb8 <ucdr_alignment>
 800e436:	4420      	add	r0, r4
 800e438:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800e43c:	bd10      	pop	{r4, pc}
 800e43e:	4770      	bx	lr

0800e440 <_TwistWithCovariance__max_serialized_size>:
 800e440:	b510      	push	{r4, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	2301      	movs	r3, #1
 800e446:	2100      	movs	r1, #0
 800e448:	f10d 0007 	add.w	r0, sp, #7
 800e44c:	f88d 3007 	strb.w	r3, [sp, #7]
 800e450:	f7fc f89e 	bl	800a590 <max_serialized_size_geometry_msgs__msg__Twist>
 800e454:	2108      	movs	r1, #8
 800e456:	4604      	mov	r4, r0
 800e458:	f7fd fc2e 	bl	800bcb8 <ucdr_alignment>
 800e45c:	4420      	add	r0, r4
 800e45e:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800e462:	b002      	add	sp, #8
 800e464:	bd10      	pop	{r4, pc}
 800e466:	bf00      	nop

0800e468 <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800e468:	b538      	push	{r3, r4, r5, lr}
 800e46a:	2301      	movs	r3, #1
 800e46c:	7003      	strb	r3, [r0, #0]
 800e46e:	460c      	mov	r4, r1
 800e470:	f7fc f88e 	bl	800a590 <max_serialized_size_geometry_msgs__msg__Twist>
 800e474:	1825      	adds	r5, r4, r0
 800e476:	2108      	movs	r1, #8
 800e478:	4628      	mov	r0, r5
 800e47a:	f7fd fc1d 	bl	800bcb8 <ucdr_alignment>
 800e47e:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800e482:	4420      	add	r0, r4
 800e484:	4428      	add	r0, r5
 800e486:	bd38      	pop	{r3, r4, r5, pc}

0800e488 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800e488:	4800      	ldr	r0, [pc, #0]	@ (800e48c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 800e48a:	4770      	bx	lr
 800e48c:	20000a04 	.word	0x20000a04

0800e490 <ucdr_serialize_endian_array_char>:
 800e490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e494:	4619      	mov	r1, r3
 800e496:	461f      	mov	r7, r3
 800e498:	4605      	mov	r5, r0
 800e49a:	4690      	mov	r8, r2
 800e49c:	f7fd fbb4 	bl	800bc08 <ucdr_check_buffer_available_for>
 800e4a0:	b9e0      	cbnz	r0, 800e4dc <ucdr_serialize_endian_array_char+0x4c>
 800e4a2:	463e      	mov	r6, r7
 800e4a4:	e009      	b.n	800e4ba <ucdr_serialize_endian_array_char+0x2a>
 800e4a6:	68a8      	ldr	r0, [r5, #8]
 800e4a8:	f00b fe21 	bl	801a0ee <memcpy>
 800e4ac:	68ab      	ldr	r3, [r5, #8]
 800e4ae:	6928      	ldr	r0, [r5, #16]
 800e4b0:	4423      	add	r3, r4
 800e4b2:	4420      	add	r0, r4
 800e4b4:	1b36      	subs	r6, r6, r4
 800e4b6:	60ab      	str	r3, [r5, #8]
 800e4b8:	6128      	str	r0, [r5, #16]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	4631      	mov	r1, r6
 800e4be:	4628      	mov	r0, r5
 800e4c0:	f7fd fc2a 	bl	800bd18 <ucdr_check_final_buffer_behavior_array>
 800e4c4:	1bb9      	subs	r1, r7, r6
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	4602      	mov	r2, r0
 800e4ca:	4441      	add	r1, r8
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d1ea      	bne.n	800e4a6 <ucdr_serialize_endian_array_char+0x16>
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	7da8      	ldrb	r0, [r5, #22]
 800e4d4:	756b      	strb	r3, [r5, #21]
 800e4d6:	4058      	eors	r0, r3
 800e4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4dc:	463a      	mov	r2, r7
 800e4de:	68a8      	ldr	r0, [r5, #8]
 800e4e0:	4641      	mov	r1, r8
 800e4e2:	f00b fe04 	bl	801a0ee <memcpy>
 800e4e6:	68aa      	ldr	r2, [r5, #8]
 800e4e8:	692b      	ldr	r3, [r5, #16]
 800e4ea:	443a      	add	r2, r7
 800e4ec:	443b      	add	r3, r7
 800e4ee:	60aa      	str	r2, [r5, #8]
 800e4f0:	612b      	str	r3, [r5, #16]
 800e4f2:	e7ed      	b.n	800e4d0 <ucdr_serialize_endian_array_char+0x40>

0800e4f4 <ucdr_deserialize_endian_array_char>:
 800e4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	461f      	mov	r7, r3
 800e4fc:	4605      	mov	r5, r0
 800e4fe:	4690      	mov	r8, r2
 800e500:	f7fd fb82 	bl	800bc08 <ucdr_check_buffer_available_for>
 800e504:	b9e0      	cbnz	r0, 800e540 <ucdr_deserialize_endian_array_char+0x4c>
 800e506:	463e      	mov	r6, r7
 800e508:	e009      	b.n	800e51e <ucdr_deserialize_endian_array_char+0x2a>
 800e50a:	68a9      	ldr	r1, [r5, #8]
 800e50c:	f00b fdef 	bl	801a0ee <memcpy>
 800e510:	68aa      	ldr	r2, [r5, #8]
 800e512:	692b      	ldr	r3, [r5, #16]
 800e514:	4422      	add	r2, r4
 800e516:	4423      	add	r3, r4
 800e518:	1b36      	subs	r6, r6, r4
 800e51a:	60aa      	str	r2, [r5, #8]
 800e51c:	612b      	str	r3, [r5, #16]
 800e51e:	2201      	movs	r2, #1
 800e520:	4631      	mov	r1, r6
 800e522:	4628      	mov	r0, r5
 800e524:	f7fd fbf8 	bl	800bd18 <ucdr_check_final_buffer_behavior_array>
 800e528:	4604      	mov	r4, r0
 800e52a:	1bb8      	subs	r0, r7, r6
 800e52c:	4622      	mov	r2, r4
 800e52e:	4440      	add	r0, r8
 800e530:	2c00      	cmp	r4, #0
 800e532:	d1ea      	bne.n	800e50a <ucdr_deserialize_endian_array_char+0x16>
 800e534:	2301      	movs	r3, #1
 800e536:	7da8      	ldrb	r0, [r5, #22]
 800e538:	756b      	strb	r3, [r5, #21]
 800e53a:	4058      	eors	r0, r3
 800e53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e540:	463a      	mov	r2, r7
 800e542:	68a9      	ldr	r1, [r5, #8]
 800e544:	4640      	mov	r0, r8
 800e546:	f00b fdd2 	bl	801a0ee <memcpy>
 800e54a:	68aa      	ldr	r2, [r5, #8]
 800e54c:	692b      	ldr	r3, [r5, #16]
 800e54e:	443a      	add	r2, r7
 800e550:	443b      	add	r3, r7
 800e552:	60aa      	str	r2, [r5, #8]
 800e554:	612b      	str	r3, [r5, #16]
 800e556:	e7ed      	b.n	800e534 <ucdr_deserialize_endian_array_char+0x40>

0800e558 <ucdr_serialize_array_uint8_t>:
 800e558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e55c:	4688      	mov	r8, r1
 800e55e:	4611      	mov	r1, r2
 800e560:	4617      	mov	r7, r2
 800e562:	4605      	mov	r5, r0
 800e564:	f7fd fb50 	bl	800bc08 <ucdr_check_buffer_available_for>
 800e568:	b9e0      	cbnz	r0, 800e5a4 <ucdr_serialize_array_uint8_t+0x4c>
 800e56a:	463e      	mov	r6, r7
 800e56c:	e009      	b.n	800e582 <ucdr_serialize_array_uint8_t+0x2a>
 800e56e:	68a8      	ldr	r0, [r5, #8]
 800e570:	f00b fdbd 	bl	801a0ee <memcpy>
 800e574:	68aa      	ldr	r2, [r5, #8]
 800e576:	692b      	ldr	r3, [r5, #16]
 800e578:	4422      	add	r2, r4
 800e57a:	4423      	add	r3, r4
 800e57c:	1b36      	subs	r6, r6, r4
 800e57e:	60aa      	str	r2, [r5, #8]
 800e580:	612b      	str	r3, [r5, #16]
 800e582:	2201      	movs	r2, #1
 800e584:	4631      	mov	r1, r6
 800e586:	4628      	mov	r0, r5
 800e588:	f7fd fbc6 	bl	800bd18 <ucdr_check_final_buffer_behavior_array>
 800e58c:	1bb9      	subs	r1, r7, r6
 800e58e:	4604      	mov	r4, r0
 800e590:	4602      	mov	r2, r0
 800e592:	4441      	add	r1, r8
 800e594:	2800      	cmp	r0, #0
 800e596:	d1ea      	bne.n	800e56e <ucdr_serialize_array_uint8_t+0x16>
 800e598:	2301      	movs	r3, #1
 800e59a:	7da8      	ldrb	r0, [r5, #22]
 800e59c:	756b      	strb	r3, [r5, #21]
 800e59e:	4058      	eors	r0, r3
 800e5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a4:	463a      	mov	r2, r7
 800e5a6:	68a8      	ldr	r0, [r5, #8]
 800e5a8:	4641      	mov	r1, r8
 800e5aa:	f00b fda0 	bl	801a0ee <memcpy>
 800e5ae:	68aa      	ldr	r2, [r5, #8]
 800e5b0:	692b      	ldr	r3, [r5, #16]
 800e5b2:	443a      	add	r2, r7
 800e5b4:	443b      	add	r3, r7
 800e5b6:	60aa      	str	r2, [r5, #8]
 800e5b8:	612b      	str	r3, [r5, #16]
 800e5ba:	e7ed      	b.n	800e598 <ucdr_serialize_array_uint8_t+0x40>

0800e5bc <ucdr_serialize_endian_array_uint8_t>:
 800e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	461f      	mov	r7, r3
 800e5c4:	4605      	mov	r5, r0
 800e5c6:	4690      	mov	r8, r2
 800e5c8:	f7fd fb1e 	bl	800bc08 <ucdr_check_buffer_available_for>
 800e5cc:	b9e0      	cbnz	r0, 800e608 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e5ce:	463e      	mov	r6, r7
 800e5d0:	e009      	b.n	800e5e6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800e5d2:	68a8      	ldr	r0, [r5, #8]
 800e5d4:	f00b fd8b 	bl	801a0ee <memcpy>
 800e5d8:	68ab      	ldr	r3, [r5, #8]
 800e5da:	6928      	ldr	r0, [r5, #16]
 800e5dc:	4423      	add	r3, r4
 800e5de:	4420      	add	r0, r4
 800e5e0:	1b36      	subs	r6, r6, r4
 800e5e2:	60ab      	str	r3, [r5, #8]
 800e5e4:	6128      	str	r0, [r5, #16]
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	4631      	mov	r1, r6
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f7fd fb94 	bl	800bd18 <ucdr_check_final_buffer_behavior_array>
 800e5f0:	1bb9      	subs	r1, r7, r6
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	4441      	add	r1, r8
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d1ea      	bne.n	800e5d2 <ucdr_serialize_endian_array_uint8_t+0x16>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	7da8      	ldrb	r0, [r5, #22]
 800e600:	756b      	strb	r3, [r5, #21]
 800e602:	4058      	eors	r0, r3
 800e604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e608:	463a      	mov	r2, r7
 800e60a:	68a8      	ldr	r0, [r5, #8]
 800e60c:	4641      	mov	r1, r8
 800e60e:	f00b fd6e 	bl	801a0ee <memcpy>
 800e612:	68aa      	ldr	r2, [r5, #8]
 800e614:	692b      	ldr	r3, [r5, #16]
 800e616:	443a      	add	r2, r7
 800e618:	443b      	add	r3, r7
 800e61a:	60aa      	str	r2, [r5, #8]
 800e61c:	612b      	str	r3, [r5, #16]
 800e61e:	e7ed      	b.n	800e5fc <ucdr_serialize_endian_array_uint8_t+0x40>

0800e620 <ucdr_deserialize_array_uint8_t>:
 800e620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e624:	4688      	mov	r8, r1
 800e626:	4611      	mov	r1, r2
 800e628:	4617      	mov	r7, r2
 800e62a:	4605      	mov	r5, r0
 800e62c:	f7fd faec 	bl	800bc08 <ucdr_check_buffer_available_for>
 800e630:	b9e0      	cbnz	r0, 800e66c <ucdr_deserialize_array_uint8_t+0x4c>
 800e632:	463e      	mov	r6, r7
 800e634:	e009      	b.n	800e64a <ucdr_deserialize_array_uint8_t+0x2a>
 800e636:	68a9      	ldr	r1, [r5, #8]
 800e638:	f00b fd59 	bl	801a0ee <memcpy>
 800e63c:	68aa      	ldr	r2, [r5, #8]
 800e63e:	692b      	ldr	r3, [r5, #16]
 800e640:	4422      	add	r2, r4
 800e642:	4423      	add	r3, r4
 800e644:	1b36      	subs	r6, r6, r4
 800e646:	60aa      	str	r2, [r5, #8]
 800e648:	612b      	str	r3, [r5, #16]
 800e64a:	2201      	movs	r2, #1
 800e64c:	4631      	mov	r1, r6
 800e64e:	4628      	mov	r0, r5
 800e650:	f7fd fb62 	bl	800bd18 <ucdr_check_final_buffer_behavior_array>
 800e654:	4604      	mov	r4, r0
 800e656:	1bb8      	subs	r0, r7, r6
 800e658:	4622      	mov	r2, r4
 800e65a:	4440      	add	r0, r8
 800e65c:	2c00      	cmp	r4, #0
 800e65e:	d1ea      	bne.n	800e636 <ucdr_deserialize_array_uint8_t+0x16>
 800e660:	2301      	movs	r3, #1
 800e662:	7da8      	ldrb	r0, [r5, #22]
 800e664:	756b      	strb	r3, [r5, #21]
 800e666:	4058      	eors	r0, r3
 800e668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e66c:	463a      	mov	r2, r7
 800e66e:	68a9      	ldr	r1, [r5, #8]
 800e670:	4640      	mov	r0, r8
 800e672:	f00b fd3c 	bl	801a0ee <memcpy>
 800e676:	68aa      	ldr	r2, [r5, #8]
 800e678:	692b      	ldr	r3, [r5, #16]
 800e67a:	443a      	add	r2, r7
 800e67c:	443b      	add	r3, r7
 800e67e:	60aa      	str	r2, [r5, #8]
 800e680:	612b      	str	r3, [r5, #16]
 800e682:	e7ed      	b.n	800e660 <ucdr_deserialize_array_uint8_t+0x40>

0800e684 <ucdr_deserialize_endian_array_uint8_t>:
 800e684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e688:	4619      	mov	r1, r3
 800e68a:	461f      	mov	r7, r3
 800e68c:	4605      	mov	r5, r0
 800e68e:	4690      	mov	r8, r2
 800e690:	f7fd faba 	bl	800bc08 <ucdr_check_buffer_available_for>
 800e694:	b9e0      	cbnz	r0, 800e6d0 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e696:	463e      	mov	r6, r7
 800e698:	e009      	b.n	800e6ae <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800e69a:	68a9      	ldr	r1, [r5, #8]
 800e69c:	f00b fd27 	bl	801a0ee <memcpy>
 800e6a0:	68aa      	ldr	r2, [r5, #8]
 800e6a2:	692b      	ldr	r3, [r5, #16]
 800e6a4:	4422      	add	r2, r4
 800e6a6:	4423      	add	r3, r4
 800e6a8:	1b36      	subs	r6, r6, r4
 800e6aa:	60aa      	str	r2, [r5, #8]
 800e6ac:	612b      	str	r3, [r5, #16]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	4631      	mov	r1, r6
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	f7fd fb30 	bl	800bd18 <ucdr_check_final_buffer_behavior_array>
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	1bb8      	subs	r0, r7, r6
 800e6bc:	4622      	mov	r2, r4
 800e6be:	4440      	add	r0, r8
 800e6c0:	2c00      	cmp	r4, #0
 800e6c2:	d1ea      	bne.n	800e69a <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	7da8      	ldrb	r0, [r5, #22]
 800e6c8:	756b      	strb	r3, [r5, #21]
 800e6ca:	4058      	eors	r0, r3
 800e6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d0:	463a      	mov	r2, r7
 800e6d2:	68a9      	ldr	r1, [r5, #8]
 800e6d4:	4640      	mov	r0, r8
 800e6d6:	f00b fd0a 	bl	801a0ee <memcpy>
 800e6da:	68aa      	ldr	r2, [r5, #8]
 800e6dc:	692b      	ldr	r3, [r5, #16]
 800e6de:	443a      	add	r2, r7
 800e6e0:	443b      	add	r3, r7
 800e6e2:	60aa      	str	r2, [r5, #8]
 800e6e4:	612b      	str	r3, [r5, #16]
 800e6e6:	e7ed      	b.n	800e6c4 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800e6e8 <ucdr_serialize_array_double>:
 800e6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ec:	460e      	mov	r6, r1
 800e6ee:	2108      	movs	r1, #8
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	4617      	mov	r7, r2
 800e6f4:	f7fd fae8 	bl	800bcc8 <ucdr_buffer_alignment>
 800e6f8:	4601      	mov	r1, r0
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	7d65      	ldrb	r5, [r4, #21]
 800e6fe:	f7fd fb27 	bl	800bd50 <ucdr_advance_buffer>
 800e702:	7d21      	ldrb	r1, [r4, #20]
 800e704:	7565      	strb	r5, [r4, #21]
 800e706:	2901      	cmp	r1, #1
 800e708:	d010      	beq.n	800e72c <ucdr_serialize_array_double+0x44>
 800e70a:	b157      	cbz	r7, 800e722 <ucdr_serialize_array_double+0x3a>
 800e70c:	2500      	movs	r5, #0
 800e70e:	e000      	b.n	800e712 <ucdr_serialize_array_double+0x2a>
 800e710:	7d21      	ldrb	r1, [r4, #20]
 800e712:	ecb6 0b02 	vldmia	r6!, {d0}
 800e716:	4620      	mov	r0, r4
 800e718:	3501      	adds	r5, #1
 800e71a:	f7fd f827 	bl	800b76c <ucdr_serialize_endian_double>
 800e71e:	42af      	cmp	r7, r5
 800e720:	d1f6      	bne.n	800e710 <ucdr_serialize_array_double+0x28>
 800e722:	7da0      	ldrb	r0, [r4, #22]
 800e724:	f080 0001 	eor.w	r0, r0, #1
 800e728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e72c:	00ff      	lsls	r7, r7, #3
 800e72e:	4639      	mov	r1, r7
 800e730:	4620      	mov	r0, r4
 800e732:	f7fd fa69 	bl	800bc08 <ucdr_check_buffer_available_for>
 800e736:	b9f8      	cbnz	r0, 800e778 <ucdr_serialize_array_double+0x90>
 800e738:	46b8      	mov	r8, r7
 800e73a:	e00a      	b.n	800e752 <ucdr_serialize_array_double+0x6a>
 800e73c:	68a0      	ldr	r0, [r4, #8]
 800e73e:	f00b fcd6 	bl	801a0ee <memcpy>
 800e742:	68a2      	ldr	r2, [r4, #8]
 800e744:	6923      	ldr	r3, [r4, #16]
 800e746:	442a      	add	r2, r5
 800e748:	442b      	add	r3, r5
 800e74a:	eba8 0805 	sub.w	r8, r8, r5
 800e74e:	60a2      	str	r2, [r4, #8]
 800e750:	6123      	str	r3, [r4, #16]
 800e752:	2208      	movs	r2, #8
 800e754:	4641      	mov	r1, r8
 800e756:	4620      	mov	r0, r4
 800e758:	f7fd fade 	bl	800bd18 <ucdr_check_final_buffer_behavior_array>
 800e75c:	eba7 0108 	sub.w	r1, r7, r8
 800e760:	4605      	mov	r5, r0
 800e762:	4602      	mov	r2, r0
 800e764:	4431      	add	r1, r6
 800e766:	2800      	cmp	r0, #0
 800e768:	d1e8      	bne.n	800e73c <ucdr_serialize_array_double+0x54>
 800e76a:	7da0      	ldrb	r0, [r4, #22]
 800e76c:	2308      	movs	r3, #8
 800e76e:	7563      	strb	r3, [r4, #21]
 800e770:	f080 0001 	eor.w	r0, r0, #1
 800e774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e778:	463a      	mov	r2, r7
 800e77a:	68a0      	ldr	r0, [r4, #8]
 800e77c:	4631      	mov	r1, r6
 800e77e:	f00b fcb6 	bl	801a0ee <memcpy>
 800e782:	68a2      	ldr	r2, [r4, #8]
 800e784:	6923      	ldr	r3, [r4, #16]
 800e786:	443a      	add	r2, r7
 800e788:	443b      	add	r3, r7
 800e78a:	60a2      	str	r2, [r4, #8]
 800e78c:	6123      	str	r3, [r4, #16]
 800e78e:	e7ec      	b.n	800e76a <ucdr_serialize_array_double+0x82>

0800e790 <ucdr_deserialize_array_double>:
 800e790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e794:	460e      	mov	r6, r1
 800e796:	2108      	movs	r1, #8
 800e798:	4604      	mov	r4, r0
 800e79a:	4617      	mov	r7, r2
 800e79c:	f7fd fa94 	bl	800bcc8 <ucdr_buffer_alignment>
 800e7a0:	4601      	mov	r1, r0
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	7d65      	ldrb	r5, [r4, #21]
 800e7a6:	f7fd fad3 	bl	800bd50 <ucdr_advance_buffer>
 800e7aa:	7d21      	ldrb	r1, [r4, #20]
 800e7ac:	7565      	strb	r5, [r4, #21]
 800e7ae:	2901      	cmp	r1, #1
 800e7b0:	d011      	beq.n	800e7d6 <ucdr_deserialize_array_double+0x46>
 800e7b2:	b15f      	cbz	r7, 800e7cc <ucdr_deserialize_array_double+0x3c>
 800e7b4:	2500      	movs	r5, #0
 800e7b6:	e000      	b.n	800e7ba <ucdr_deserialize_array_double+0x2a>
 800e7b8:	7d21      	ldrb	r1, [r4, #20]
 800e7ba:	4632      	mov	r2, r6
 800e7bc:	4620      	mov	r0, r4
 800e7be:	3501      	adds	r5, #1
 800e7c0:	f7fd f95a 	bl	800ba78 <ucdr_deserialize_endian_double>
 800e7c4:	42af      	cmp	r7, r5
 800e7c6:	f106 0608 	add.w	r6, r6, #8
 800e7ca:	d1f5      	bne.n	800e7b8 <ucdr_deserialize_array_double+0x28>
 800e7cc:	7da0      	ldrb	r0, [r4, #22]
 800e7ce:	f080 0001 	eor.w	r0, r0, #1
 800e7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d6:	00ff      	lsls	r7, r7, #3
 800e7d8:	4639      	mov	r1, r7
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f7fd fa14 	bl	800bc08 <ucdr_check_buffer_available_for>
 800e7e0:	b9f8      	cbnz	r0, 800e822 <ucdr_deserialize_array_double+0x92>
 800e7e2:	46b8      	mov	r8, r7
 800e7e4:	e00a      	b.n	800e7fc <ucdr_deserialize_array_double+0x6c>
 800e7e6:	68a1      	ldr	r1, [r4, #8]
 800e7e8:	f00b fc81 	bl	801a0ee <memcpy>
 800e7ec:	68a2      	ldr	r2, [r4, #8]
 800e7ee:	6923      	ldr	r3, [r4, #16]
 800e7f0:	442a      	add	r2, r5
 800e7f2:	442b      	add	r3, r5
 800e7f4:	eba8 0805 	sub.w	r8, r8, r5
 800e7f8:	60a2      	str	r2, [r4, #8]
 800e7fa:	6123      	str	r3, [r4, #16]
 800e7fc:	2208      	movs	r2, #8
 800e7fe:	4641      	mov	r1, r8
 800e800:	4620      	mov	r0, r4
 800e802:	f7fd fa89 	bl	800bd18 <ucdr_check_final_buffer_behavior_array>
 800e806:	4605      	mov	r5, r0
 800e808:	eba7 0008 	sub.w	r0, r7, r8
 800e80c:	462a      	mov	r2, r5
 800e80e:	4430      	add	r0, r6
 800e810:	2d00      	cmp	r5, #0
 800e812:	d1e8      	bne.n	800e7e6 <ucdr_deserialize_array_double+0x56>
 800e814:	7da0      	ldrb	r0, [r4, #22]
 800e816:	2308      	movs	r3, #8
 800e818:	7563      	strb	r3, [r4, #21]
 800e81a:	f080 0001 	eor.w	r0, r0, #1
 800e81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e822:	463a      	mov	r2, r7
 800e824:	68a1      	ldr	r1, [r4, #8]
 800e826:	4630      	mov	r0, r6
 800e828:	f00b fc61 	bl	801a0ee <memcpy>
 800e82c:	68a2      	ldr	r2, [r4, #8]
 800e82e:	6923      	ldr	r3, [r4, #16]
 800e830:	443a      	add	r2, r7
 800e832:	443b      	add	r3, r7
 800e834:	60a2      	str	r2, [r4, #8]
 800e836:	6123      	str	r3, [r4, #16]
 800e838:	e7ec      	b.n	800e814 <ucdr_deserialize_array_double+0x84>
 800e83a:	bf00      	nop

0800e83c <ucdr_serialize_sequence_char>:
 800e83c:	b570      	push	{r4, r5, r6, lr}
 800e83e:	460e      	mov	r6, r1
 800e840:	4615      	mov	r5, r2
 800e842:	7d01      	ldrb	r1, [r0, #20]
 800e844:	4604      	mov	r4, r0
 800e846:	f7fc fa29 	bl	800ac9c <ucdr_serialize_endian_uint32_t>
 800e84a:	b90d      	cbnz	r5, 800e850 <ucdr_serialize_sequence_char+0x14>
 800e84c:	2001      	movs	r0, #1
 800e84e:	bd70      	pop	{r4, r5, r6, pc}
 800e850:	7d21      	ldrb	r1, [r4, #20]
 800e852:	462b      	mov	r3, r5
 800e854:	4632      	mov	r2, r6
 800e856:	4620      	mov	r0, r4
 800e858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e85c:	f7ff be18 	b.w	800e490 <ucdr_serialize_endian_array_char>

0800e860 <ucdr_deserialize_sequence_char>:
 800e860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e864:	461d      	mov	r5, r3
 800e866:	4616      	mov	r6, r2
 800e868:	460f      	mov	r7, r1
 800e86a:	461a      	mov	r2, r3
 800e86c:	7d01      	ldrb	r1, [r0, #20]
 800e86e:	4604      	mov	r4, r0
 800e870:	f7fc fb32 	bl	800aed8 <ucdr_deserialize_endian_uint32_t>
 800e874:	682b      	ldr	r3, [r5, #0]
 800e876:	429e      	cmp	r6, r3
 800e878:	d208      	bcs.n	800e88c <ucdr_deserialize_sequence_char+0x2c>
 800e87a:	2201      	movs	r2, #1
 800e87c:	75a2      	strb	r2, [r4, #22]
 800e87e:	7d21      	ldrb	r1, [r4, #20]
 800e880:	463a      	mov	r2, r7
 800e882:	4620      	mov	r0, r4
 800e884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e888:	f7ff be34 	b.w	800e4f4 <ucdr_deserialize_endian_array_char>
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d1f6      	bne.n	800e87e <ucdr_deserialize_sequence_char+0x1e>
 800e890:	2001      	movs	r0, #1
 800e892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e896:	bf00      	nop

0800e898 <ucdr_serialize_sequence_uint8_t>:
 800e898:	b570      	push	{r4, r5, r6, lr}
 800e89a:	460e      	mov	r6, r1
 800e89c:	4615      	mov	r5, r2
 800e89e:	7d01      	ldrb	r1, [r0, #20]
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	f7fc f9fb 	bl	800ac9c <ucdr_serialize_endian_uint32_t>
 800e8a6:	b90d      	cbnz	r5, 800e8ac <ucdr_serialize_sequence_uint8_t+0x14>
 800e8a8:	2001      	movs	r0, #1
 800e8aa:	bd70      	pop	{r4, r5, r6, pc}
 800e8ac:	7d21      	ldrb	r1, [r4, #20]
 800e8ae:	462b      	mov	r3, r5
 800e8b0:	4632      	mov	r2, r6
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8b8:	f7ff be80 	b.w	800e5bc <ucdr_serialize_endian_array_uint8_t>

0800e8bc <ucdr_deserialize_sequence_uint8_t>:
 800e8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c0:	461d      	mov	r5, r3
 800e8c2:	4616      	mov	r6, r2
 800e8c4:	460f      	mov	r7, r1
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	7d01      	ldrb	r1, [r0, #20]
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	f7fc fb04 	bl	800aed8 <ucdr_deserialize_endian_uint32_t>
 800e8d0:	682b      	ldr	r3, [r5, #0]
 800e8d2:	429e      	cmp	r6, r3
 800e8d4:	d208      	bcs.n	800e8e8 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	75a2      	strb	r2, [r4, #22]
 800e8da:	7d21      	ldrb	r1, [r4, #20]
 800e8dc:	463a      	mov	r2, r7
 800e8de:	4620      	mov	r0, r4
 800e8e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e4:	f7ff bece 	b.w	800e684 <ucdr_deserialize_endian_array_uint8_t>
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1f6      	bne.n	800e8da <ucdr_deserialize_sequence_uint8_t+0x1e>
 800e8ec:	2001      	movs	r0, #1
 800e8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f2:	bf00      	nop

0800e8f4 <uxr_buffer_delete_entity>:
 800e8f4:	b510      	push	{r4, lr}
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	b08e      	sub	sp, #56	@ 0x38
 800e8fa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e8fe:	2303      	movs	r3, #3
 800e900:	9300      	str	r3, [sp, #0]
 800e902:	2204      	movs	r2, #4
 800e904:	ab06      	add	r3, sp, #24
 800e906:	4604      	mov	r4, r0
 800e908:	f001 fb32 	bl	800ff70 <uxr_prepare_stream_to_write_submessage>
 800e90c:	b918      	cbnz	r0, 800e916 <uxr_buffer_delete_entity+0x22>
 800e90e:	4604      	mov	r4, r0
 800e910:	4620      	mov	r0, r4
 800e912:	b00e      	add	sp, #56	@ 0x38
 800e914:	bd10      	pop	{r4, pc}
 800e916:	9902      	ldr	r1, [sp, #8]
 800e918:	aa05      	add	r2, sp, #20
 800e91a:	4620      	mov	r0, r4
 800e91c:	f001 fc62 	bl	80101e4 <uxr_init_base_object_request>
 800e920:	a905      	add	r1, sp, #20
 800e922:	4604      	mov	r4, r0
 800e924:	a806      	add	r0, sp, #24
 800e926:	f003 fae9 	bl	8011efc <uxr_serialize_DELETE_Payload>
 800e92a:	4620      	mov	r0, r4
 800e92c:	b00e      	add	sp, #56	@ 0x38
 800e92e:	bd10      	pop	{r4, pc}

0800e930 <uxr_common_create_entity>:
 800e930:	b510      	push	{r4, lr}
 800e932:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e936:	b08c      	sub	sp, #48	@ 0x30
 800e938:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e93c:	f1bc 0f01 	cmp.w	ip, #1
 800e940:	bf08      	it	eq
 800e942:	f003 0201 	andeq.w	r2, r3, #1
 800e946:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e94a:	bf18      	it	ne
 800e94c:	2200      	movne	r2, #0
 800e94e:	330e      	adds	r3, #14
 800e950:	441a      	add	r2, r3
 800e952:	2301      	movs	r3, #1
 800e954:	e9cd 3100 	strd	r3, r1, [sp]
 800e958:	b292      	uxth	r2, r2
 800e95a:	9903      	ldr	r1, [sp, #12]
 800e95c:	ab04      	add	r3, sp, #16
 800e95e:	4604      	mov	r4, r0
 800e960:	f001 fb06 	bl	800ff70 <uxr_prepare_stream_to_write_submessage>
 800e964:	b918      	cbnz	r0, 800e96e <uxr_common_create_entity+0x3e>
 800e966:	4604      	mov	r4, r0
 800e968:	4620      	mov	r0, r4
 800e96a:	b00c      	add	sp, #48	@ 0x30
 800e96c:	bd10      	pop	{r4, pc}
 800e96e:	9902      	ldr	r1, [sp, #8]
 800e970:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e972:	4620      	mov	r0, r4
 800e974:	f001 fc36 	bl	80101e4 <uxr_init_base_object_request>
 800e978:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e97a:	4604      	mov	r4, r0
 800e97c:	a804      	add	r0, sp, #16
 800e97e:	f003 fa07 	bl	8011d90 <uxr_serialize_CREATE_Payload>
 800e982:	4620      	mov	r0, r4
 800e984:	b00c      	add	sp, #48	@ 0x30
 800e986:	bd10      	pop	{r4, pc}

0800e988 <uxr_buffer_create_participant_bin>:
 800e988:	b570      	push	{r4, r5, r6, lr}
 800e98a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e98e:	ac11      	add	r4, sp, #68	@ 0x44
 800e990:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e994:	2303      	movs	r3, #3
 800e996:	7223      	strb	r3, [r4, #8]
 800e998:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e99a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e99e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	4605      	mov	r5, r0
 800e9a8:	7122      	strb	r2, [r4, #4]
 800e9aa:	f88d 1014 	strb.w	r1, [sp, #20]
 800e9ae:	b1cb      	cbz	r3, 800e9e4 <uxr_buffer_create_participant_bin+0x5c>
 800e9b0:	f88d 201c 	strb.w	r2, [sp, #28]
 800e9b4:	9308      	str	r3, [sp, #32]
 800e9b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9ba:	a915      	add	r1, sp, #84	@ 0x54
 800e9bc:	a809      	add	r0, sp, #36	@ 0x24
 800e9be:	f7fd f977 	bl	800bcb0 <ucdr_init_buffer>
 800e9c2:	a905      	add	r1, sp, #20
 800e9c4:	a809      	add	r0, sp, #36	@ 0x24
 800e9c6:	f002 fdeb 	bl	80115a0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e9ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9cc:	9600      	str	r6, [sp, #0]
 800e9ce:	9401      	str	r4, [sp, #4]
 800e9d0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e9d4:	60e3      	str	r3, [r4, #12]
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	f7ff ffa9 	bl	800e930 <uxr_common_create_entity>
 800e9de:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e9e2:	bd70      	pop	{r4, r5, r6, pc}
 800e9e4:	f88d 301c 	strb.w	r3, [sp, #28]
 800e9e8:	e7e5      	b.n	800e9b6 <uxr_buffer_create_participant_bin+0x2e>
 800e9ea:	bf00      	nop

0800e9ec <uxr_buffer_create_topic_bin>:
 800e9ec:	b570      	push	{r4, r5, r6, lr}
 800e9ee:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e9f2:	4605      	mov	r5, r0
 800e9f4:	9105      	str	r1, [sp, #20]
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	a997      	add	r1, sp, #604	@ 0x25c
 800e9fa:	2302      	movs	r3, #2
 800e9fc:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800ea00:	9204      	str	r2, [sp, #16]
 800ea02:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800ea06:	f000 fa31 	bl	800ee6c <uxr_object_id_to_raw>
 800ea0a:	2303      	movs	r3, #3
 800ea0c:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ea10:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800ea12:	9306      	str	r3, [sp, #24]
 800ea14:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800ea16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea18:	2301      	movs	r3, #1
 800ea1a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ea1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea22:	2300      	movs	r3, #0
 800ea24:	a917      	add	r1, sp, #92	@ 0x5c
 800ea26:	a80b      	add	r0, sp, #44	@ 0x2c
 800ea28:	f88d 301c 	strb.w	r3, [sp, #28]
 800ea2c:	f7fd f940 	bl	800bcb0 <ucdr_init_buffer>
 800ea30:	a906      	add	r1, sp, #24
 800ea32:	a80b      	add	r0, sp, #44	@ 0x2c
 800ea34:	f002 fdd6 	bl	80115e4 <uxr_serialize_OBJK_Topic_Binary>
 800ea38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea3a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ea3c:	ac13      	add	r4, sp, #76	@ 0x4c
 800ea3e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ea42:	9600      	str	r6, [sp, #0]
 800ea44:	9401      	str	r4, [sp, #4]
 800ea46:	b29b      	uxth	r3, r3
 800ea48:	4628      	mov	r0, r5
 800ea4a:	f7ff ff71 	bl	800e930 <uxr_common_create_entity>
 800ea4e:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800ea52:	bd70      	pop	{r4, r5, r6, pc}

0800ea54 <uxr_buffer_create_publisher_bin>:
 800ea54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea56:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800ea5a:	4605      	mov	r5, r0
 800ea5c:	9105      	str	r1, [sp, #20]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	2603      	movs	r6, #3
 800ea62:	a992      	add	r1, sp, #584	@ 0x248
 800ea64:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800ea68:	9204      	str	r2, [sp, #16]
 800ea6a:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800ea6e:	f000 f9fd 	bl	800ee6c <uxr_object_id_to_raw>
 800ea72:	2300      	movs	r3, #0
 800ea74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea78:	a912      	add	r1, sp, #72	@ 0x48
 800ea7a:	a806      	add	r0, sp, #24
 800ea7c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800ea80:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800ea84:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800ea88:	f7fd f912 	bl	800bcb0 <ucdr_init_buffer>
 800ea8c:	a993      	add	r1, sp, #588	@ 0x24c
 800ea8e:	a806      	add	r0, sp, #24
 800ea90:	f002 fe5e 	bl	8011750 <uxr_serialize_OBJK_Publisher_Binary>
 800ea94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea96:	9311      	str	r3, [sp, #68]	@ 0x44
 800ea98:	ac0e      	add	r4, sp, #56	@ 0x38
 800ea9a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ea9e:	9700      	str	r7, [sp, #0]
 800eaa0:	9401      	str	r4, [sp, #4]
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	f7ff ff43 	bl	800e930 <uxr_common_create_entity>
 800eaaa:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800eaae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eab0 <uxr_buffer_create_subscriber_bin>:
 800eab0:	b570      	push	{r4, r5, r6, lr}
 800eab2:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800eab6:	4605      	mov	r5, r0
 800eab8:	9105      	str	r1, [sp, #20]
 800eaba:	4618      	mov	r0, r3
 800eabc:	a992      	add	r1, sp, #584	@ 0x248
 800eabe:	2304      	movs	r3, #4
 800eac0:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800eac4:	9204      	str	r2, [sp, #16]
 800eac6:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800eaca:	f000 f9cf 	bl	800ee6c <uxr_object_id_to_raw>
 800eace:	2203      	movs	r2, #3
 800ead0:	2300      	movs	r3, #0
 800ead2:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 800ead6:	a912      	add	r1, sp, #72	@ 0x48
 800ead8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eadc:	a806      	add	r0, sp, #24
 800eade:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800eae2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800eae6:	f7fd f8e3 	bl	800bcb0 <ucdr_init_buffer>
 800eaea:	a993      	add	r1, sp, #588	@ 0x24c
 800eaec:	a806      	add	r0, sp, #24
 800eaee:	f002 fee1 	bl	80118b4 <uxr_serialize_OBJK_Subscriber_Binary>
 800eaf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eaf4:	9311      	str	r3, [sp, #68]	@ 0x44
 800eaf6:	ac0e      	add	r4, sp, #56	@ 0x38
 800eaf8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800eafc:	9600      	str	r6, [sp, #0]
 800eafe:	9401      	str	r4, [sp, #4]
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	4628      	mov	r0, r5
 800eb04:	f7ff ff14 	bl	800e930 <uxr_common_create_entity>
 800eb08:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800eb0c:	bd70      	pop	{r4, r5, r6, pc}
 800eb0e:	bf00      	nop

0800eb10 <uxr_buffer_create_datawriter_bin>:
 800eb10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb12:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800eb16:	ac1d      	add	r4, sp, #116	@ 0x74
 800eb18:	9105      	str	r1, [sp, #20]
 800eb1a:	4605      	mov	r5, r0
 800eb1c:	a9a1      	add	r1, sp, #644	@ 0x284
 800eb1e:	4618      	mov	r0, r3
 800eb20:	2305      	movs	r3, #5
 800eb22:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800eb26:	9204      	str	r2, [sp, #16]
 800eb28:	7123      	strb	r3, [r4, #4]
 800eb2a:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800eb2e:	f000 f99d 	bl	800ee6c <uxr_object_id_to_raw>
 800eb32:	2303      	movs	r3, #3
 800eb34:	a90e      	add	r1, sp, #56	@ 0x38
 800eb36:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800eb38:	7223      	strb	r3, [r4, #8]
 800eb3a:	f000 f997 	bl	800ee6c <uxr_object_id_to_raw>
 800eb3e:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800eb42:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800eb46:	2200      	movs	r2, #0
 800eb48:	3f00      	subs	r7, #0
 800eb4a:	fab3 f383 	clz	r3, r3
 800eb4e:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800eb52:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800eb56:	bf18      	it	ne
 800eb58:	2701      	movne	r7, #1
 800eb5a:	095b      	lsrs	r3, r3, #5
 800eb5c:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800eb60:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800eb64:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800eb68:	2201      	movs	r2, #1
 800eb6a:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800eb6e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800eb72:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800eb76:	b919      	cbnz	r1, 800eb80 <uxr_buffer_create_datawriter_bin+0x70>
 800eb78:	f043 0302 	orr.w	r3, r3, #2
 800eb7c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800eb80:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800eb84:	2a01      	cmp	r2, #1
 800eb86:	d022      	beq.n	800ebce <uxr_buffer_create_datawriter_bin+0xbe>
 800eb88:	2a03      	cmp	r2, #3
 800eb8a:	d01b      	beq.n	800ebc4 <uxr_buffer_create_datawriter_bin+0xb4>
 800eb8c:	b91a      	cbnz	r2, 800eb96 <uxr_buffer_create_datawriter_bin+0x86>
 800eb8e:	f043 0308 	orr.w	r3, r3, #8
 800eb92:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800eb96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb9a:	a921      	add	r1, sp, #132	@ 0x84
 800eb9c:	a806      	add	r0, sp, #24
 800eb9e:	f7fd f887 	bl	800bcb0 <ucdr_init_buffer>
 800eba2:	a90e      	add	r1, sp, #56	@ 0x38
 800eba4:	a806      	add	r0, sp, #24
 800eba6:	f002 ff27 	bl	80119f8 <uxr_serialize_OBJK_DataWriter_Binary>
 800ebaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebac:	9600      	str	r6, [sp, #0]
 800ebae:	9401      	str	r4, [sp, #4]
 800ebb0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ebb4:	60e3      	str	r3, [r4, #12]
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	b29b      	uxth	r3, r3
 800ebba:	f7ff feb9 	bl	800e930 <uxr_common_create_entity>
 800ebbe:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800ebc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebc4:	f043 0320 	orr.w	r3, r3, #32
 800ebc8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ebcc:	e7e3      	b.n	800eb96 <uxr_buffer_create_datawriter_bin+0x86>
 800ebce:	f043 0310 	orr.w	r3, r3, #16
 800ebd2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ebd6:	e7de      	b.n	800eb96 <uxr_buffer_create_datawriter_bin+0x86>

0800ebd8 <uxr_buffer_create_datareader_bin>:
 800ebd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebda:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 800ebde:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ebe0:	9105      	str	r1, [sp, #20]
 800ebe2:	4605      	mov	r5, r0
 800ebe4:	a9a3      	add	r1, sp, #652	@ 0x28c
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	2306      	movs	r3, #6
 800ebea:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 800ebee:	9204      	str	r2, [sp, #16]
 800ebf0:	7123      	strb	r3, [r4, #4]
 800ebf2:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 800ebf6:	f000 f939 	bl	800ee6c <uxr_object_id_to_raw>
 800ebfa:	2303      	movs	r3, #3
 800ebfc:	a90e      	add	r1, sp, #56	@ 0x38
 800ebfe:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800ec00:	7223      	strb	r3, [r4, #8]
 800ec02:	f000 f933 	bl	800ee6c <uxr_object_id_to_raw>
 800ec06:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 800ec0a:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800ec0e:	2200      	movs	r2, #0
 800ec10:	3f00      	subs	r7, #0
 800ec12:	fab3 f383 	clz	r3, r3
 800ec16:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 800ec1a:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 800ec1e:	bf18      	it	ne
 800ec20:	2701      	movne	r7, #1
 800ec22:	095b      	lsrs	r3, r3, #5
 800ec24:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800ec28:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800ec2c:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800ec30:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800ec34:	2201      	movs	r2, #1
 800ec36:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800ec3a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ec3e:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800ec42:	b919      	cbnz	r1, 800ec4c <uxr_buffer_create_datareader_bin+0x74>
 800ec44:	f043 0302 	orr.w	r3, r3, #2
 800ec48:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ec4c:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 800ec50:	2a01      	cmp	r2, #1
 800ec52:	d022      	beq.n	800ec9a <uxr_buffer_create_datareader_bin+0xc2>
 800ec54:	2a03      	cmp	r2, #3
 800ec56:	d01b      	beq.n	800ec90 <uxr_buffer_create_datareader_bin+0xb8>
 800ec58:	b91a      	cbnz	r2, 800ec62 <uxr_buffer_create_datareader_bin+0x8a>
 800ec5a:	f043 0308 	orr.w	r3, r3, #8
 800ec5e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ec62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec66:	a923      	add	r1, sp, #140	@ 0x8c
 800ec68:	a806      	add	r0, sp, #24
 800ec6a:	f7fd f821 	bl	800bcb0 <ucdr_init_buffer>
 800ec6e:	a90e      	add	r1, sp, #56	@ 0x38
 800ec70:	a806      	add	r0, sp, #24
 800ec72:	f002 fe85 	bl	8011980 <uxr_serialize_OBJK_DataReader_Binary>
 800ec76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec78:	9600      	str	r6, [sp, #0]
 800ec7a:	9401      	str	r4, [sp, #4]
 800ec7c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ec80:	60e3      	str	r3, [r4, #12]
 800ec82:	4628      	mov	r0, r5
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	f7ff fe53 	bl	800e930 <uxr_common_create_entity>
 800ec8a:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 800ec8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec90:	f043 0320 	orr.w	r3, r3, #32
 800ec94:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ec98:	e7e3      	b.n	800ec62 <uxr_buffer_create_datareader_bin+0x8a>
 800ec9a:	f043 0310 	orr.w	r3, r3, #16
 800ec9e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800eca2:	e7de      	b.n	800ec62 <uxr_buffer_create_datareader_bin+0x8a>

0800eca4 <get_custom_error>:
 800eca4:	4b01      	ldr	r3, [pc, #4]	@ (800ecac <get_custom_error+0x8>)
 800eca6:	7818      	ldrb	r0, [r3, #0]
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	200101ea 	.word	0x200101ea

0800ecb0 <recv_custom_msg>:
 800ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb4:	b089      	sub	sp, #36	@ 0x24
 800ecb6:	4693      	mov	fp, r2
 800ecb8:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800ecbc:	9104      	str	r1, [sp, #16]
 800ecbe:	2100      	movs	r1, #0
 800ecc0:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800ecc4:	9305      	str	r3, [sp, #20]
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	f88d 101e 	strb.w	r1, [sp, #30]
 800eccc:	b332      	cbz	r2, 800ed1c <recv_custom_msg+0x6c>
 800ecce:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800ecd2:	f10d 091f 	add.w	r9, sp, #31
 800ecd6:	f10d 0814 	add.w	r8, sp, #20
 800ecda:	f10d 071e 	add.w	r7, sp, #30
 800ecde:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800ece2:	e004      	b.n	800ecee <recv_custom_msg+0x3e>
 800ece4:	9b05      	ldr	r3, [sp, #20]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	dd10      	ble.n	800ed0c <recv_custom_msg+0x5c>
 800ecea:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800ecee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ecf2:	e9cd 6700 	strd	r6, r7, [sp]
 800ecf6:	4623      	mov	r3, r4
 800ecf8:	4622      	mov	r2, r4
 800ecfa:	4629      	mov	r1, r5
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	f001 fc83 	bl	8010608 <uxr_read_framed_msg>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d0ee      	beq.n	800ece4 <recv_custom_msg+0x34>
 800ed06:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ed0a:	b1a3      	cbz	r3, 800ed36 <recv_custom_msg+0x86>
 800ed0c:	4b0e      	ldr	r3, [pc, #56]	@ (800ed48 <recv_custom_msg+0x98>)
 800ed0e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ed12:	701a      	strb	r2, [r3, #0]
 800ed14:	2000      	movs	r0, #0
 800ed16:	b009      	add	sp, #36	@ 0x24
 800ed18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed1c:	f10d 021f 	add.w	r2, sp, #31
 800ed20:	9200      	str	r2, [sp, #0]
 800ed22:	4601      	mov	r1, r0
 800ed24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ed28:	47a8      	blx	r5
 800ed2a:	2800      	cmp	r0, #0
 800ed2c:	d0ee      	beq.n	800ed0c <recv_custom_msg+0x5c>
 800ed2e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1ea      	bne.n	800ed0c <recv_custom_msg+0x5c>
 800ed36:	9b04      	ldr	r3, [sp, #16]
 800ed38:	f8cb 0000 	str.w	r0, [fp]
 800ed3c:	2001      	movs	r0, #1
 800ed3e:	601c      	str	r4, [r3, #0]
 800ed40:	b009      	add	sp, #36	@ 0x24
 800ed42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed46:	bf00      	nop
 800ed48:	200101ea 	.word	0x200101ea

0800ed4c <send_custom_msg>:
 800ed4c:	b570      	push	{r4, r5, r6, lr}
 800ed4e:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800ed52:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800ed56:	b086      	sub	sp, #24
 800ed58:	4616      	mov	r6, r2
 800ed5a:	b965      	cbnz	r5, 800ed76 <send_custom_msg+0x2a>
 800ed5c:	f10d 0317 	add.w	r3, sp, #23
 800ed60:	47a0      	blx	r4
 800ed62:	b108      	cbz	r0, 800ed68 <send_custom_msg+0x1c>
 800ed64:	42b0      	cmp	r0, r6
 800ed66:	d014      	beq.n	800ed92 <send_custom_msg+0x46>
 800ed68:	4b0b      	ldr	r3, [pc, #44]	@ (800ed98 <send_custom_msg+0x4c>)
 800ed6a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800ed6e:	701a      	strb	r2, [r3, #0]
 800ed70:	2000      	movs	r0, #0
 800ed72:	b006      	add	sp, #24
 800ed74:	bd70      	pop	{r4, r5, r6, pc}
 800ed76:	f10d 0217 	add.w	r2, sp, #23
 800ed7a:	9202      	str	r2, [sp, #8]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	e9cd 6200 	strd	r6, r2, [sp]
 800ed82:	460b      	mov	r3, r1
 800ed84:	4602      	mov	r2, r0
 800ed86:	4621      	mov	r1, r4
 800ed88:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800ed8c:	f001 fa5e 	bl	801024c <uxr_write_framed_msg>
 800ed90:	e7e7      	b.n	800ed62 <send_custom_msg+0x16>
 800ed92:	2001      	movs	r0, #1
 800ed94:	b006      	add	sp, #24
 800ed96:	bd70      	pop	{r4, r5, r6, pc}
 800ed98:	200101ea 	.word	0x200101ea

0800ed9c <uxr_set_custom_transport_callbacks>:
 800ed9c:	b410      	push	{r4}
 800ed9e:	9c01      	ldr	r4, [sp, #4]
 800eda0:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800eda4:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800eda8:	9b02      	ldr	r3, [sp, #8]
 800edaa:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800edae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edb2:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800edb6:	4770      	bx	lr

0800edb8 <uxr_init_custom_transport>:
 800edb8:	b538      	push	{r3, r4, r5, lr}
 800edba:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800edbe:	b303      	cbz	r3, 800ee02 <uxr_init_custom_transport+0x4a>
 800edc0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800edc4:	4604      	mov	r4, r0
 800edc6:	b1e2      	cbz	r2, 800ee02 <uxr_init_custom_transport+0x4a>
 800edc8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800edcc:	b1ca      	cbz	r2, 800ee02 <uxr_init_custom_transport+0x4a>
 800edce:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800edd2:	b1b2      	cbz	r2, 800ee02 <uxr_init_custom_transport+0x4a>
 800edd4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800edd8:	4798      	blx	r3
 800edda:	4605      	mov	r5, r0
 800eddc:	b188      	cbz	r0, 800ee02 <uxr_init_custom_transport+0x4a>
 800edde:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800ede2:	b98b      	cbnz	r3, 800ee08 <uxr_init_custom_transport+0x50>
 800ede4:	490b      	ldr	r1, [pc, #44]	@ (800ee14 <uxr_init_custom_transport+0x5c>)
 800ede6:	4b0c      	ldr	r3, [pc, #48]	@ (800ee18 <uxr_init_custom_transport+0x60>)
 800ede8:	4a0c      	ldr	r2, [pc, #48]	@ (800ee1c <uxr_init_custom_transport+0x64>)
 800edea:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800edee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800edf2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800edf6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800edfa:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800edfe:	4628      	mov	r0, r5
 800ee00:	bd38      	pop	{r3, r4, r5, pc}
 800ee02:	2500      	movs	r5, #0
 800ee04:	4628      	mov	r0, r5
 800ee06:	bd38      	pop	{r3, r4, r5, pc}
 800ee08:	2100      	movs	r1, #0
 800ee0a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800ee0e:	f001 fa17 	bl	8010240 <uxr_init_framing_io>
 800ee12:	e7e7      	b.n	800ede4 <uxr_init_custom_transport+0x2c>
 800ee14:	0800ed4d 	.word	0x0800ed4d
 800ee18:	0800ecb1 	.word	0x0800ecb1
 800ee1c:	0800eca5 	.word	0x0800eca5

0800ee20 <uxr_close_custom_transport>:
 800ee20:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800ee24:	4718      	bx	r3
 800ee26:	bf00      	nop

0800ee28 <uxr_object_id>:
 800ee28:	b082      	sub	sp, #8
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	f88d 1006 	strb.w	r1, [sp, #6]
 800ee30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee34:	f360 030f 	bfi	r3, r0, #0, #16
 800ee38:	f362 431f 	bfi	r3, r2, #16, #16
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	b002      	add	sp, #8
 800ee40:	4770      	bx	lr
 800ee42:	bf00      	nop

0800ee44 <uxr_object_id_from_raw>:
 800ee44:	7843      	ldrb	r3, [r0, #1]
 800ee46:	7801      	ldrb	r1, [r0, #0]
 800ee48:	b082      	sub	sp, #8
 800ee4a:	f003 020f 	and.w	r2, r3, #15
 800ee4e:	f88d 2006 	strb.w	r2, [sp, #6]
 800ee52:	091b      	lsrs	r3, r3, #4
 800ee54:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ee58:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ee5c:	2000      	movs	r0, #0
 800ee5e:	f363 000f 	bfi	r0, r3, #0, #16
 800ee62:	f362 401f 	bfi	r0, r2, #16, #16
 800ee66:	b002      	add	sp, #8
 800ee68:	4770      	bx	lr
 800ee6a:	bf00      	nop

0800ee6c <uxr_object_id_to_raw>:
 800ee6c:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ee70:	b082      	sub	sp, #8
 800ee72:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800ee76:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800ee7a:	700a      	strb	r2, [r1, #0]
 800ee7c:	704b      	strb	r3, [r1, #1]
 800ee7e:	b002      	add	sp, #8
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop

0800ee84 <uxr_ping_agent_session>:
 800ee84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee88:	4616      	mov	r6, r2
 800ee8a:	b091      	sub	sp, #68	@ 0x44
 800ee8c:	2210      	movs	r2, #16
 800ee8e:	4605      	mov	r5, r0
 800ee90:	460f      	mov	r7, r1
 800ee92:	a808      	add	r0, sp, #32
 800ee94:	eb0d 0102 	add.w	r1, sp, r2
 800ee98:	f7fc ff0a 	bl	800bcb0 <ucdr_init_buffer>
 800ee9c:	4b20      	ldr	r3, [pc, #128]	@ (800ef20 <uxr_ping_agent_session+0x9c>)
 800ee9e:	2400      	movs	r4, #0
 800eea0:	881b      	ldrh	r3, [r3, #0]
 800eea2:	f8ad 300a 	strh.w	r3, [sp, #10]
 800eea6:	9400      	str	r4, [sp, #0]
 800eea8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800eeac:	f04f 0802 	mov.w	r8, #2
 800eeb0:	7829      	ldrb	r1, [r5, #0]
 800eeb2:	f8ad 3008 	strh.w	r3, [sp, #8]
 800eeb6:	4622      	mov	r2, r4
 800eeb8:	4623      	mov	r3, r4
 800eeba:	a808      	add	r0, sp, #32
 800eebc:	f8cd 800c 	str.w	r8, [sp, #12]
 800eec0:	f002 f93e 	bl	8011140 <uxr_serialize_message_header>
 800eec4:	4641      	mov	r1, r8
 800eec6:	4623      	mov	r3, r4
 800eec8:	2208      	movs	r2, #8
 800eeca:	a808      	add	r0, sp, #32
 800eecc:	f001 ff3a 	bl	8010d44 <uxr_buffer_submessage_header>
 800eed0:	a902      	add	r1, sp, #8
 800eed2:	4680      	mov	r8, r0
 800eed4:	a808      	add	r0, sp, #32
 800eed6:	f002 ffe9 	bl	8011eac <uxr_serialize_GET_INFO_Payload>
 800eeda:	f1b8 0f00 	cmp.w	r8, #0
 800eede:	d000      	beq.n	800eee2 <uxr_ping_agent_session+0x5e>
 800eee0:	b918      	cbnz	r0, 800eeea <uxr_ping_agent_session+0x66>
 800eee2:	2000      	movs	r0, #0
 800eee4:	b011      	add	sp, #68	@ 0x44
 800eee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeea:	a808      	add	r0, sp, #32
 800eeec:	f7fc ff0c 	bl	800bd08 <ucdr_buffer_length>
 800eef0:	4680      	mov	r8, r0
 800eef2:	2e00      	cmp	r6, #0
 800eef4:	d0f5      	beq.n	800eee2 <uxr_ping_agent_session+0x5e>
 800eef6:	46a1      	mov	r9, r4
 800eef8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800eefa:	4642      	mov	r2, r8
 800eefc:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ef00:	a904      	add	r1, sp, #16
 800ef02:	47a0      	blx	r4
 800ef04:	4639      	mov	r1, r7
 800ef06:	4604      	mov	r4, r0
 800ef08:	4628      	mov	r0, r5
 800ef0a:	f000 fe25 	bl	800fb58 <uxr_run_session_until_pong>
 800ef0e:	4020      	ands	r0, r4
 800ef10:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800ef14:	f109 0901 	add.w	r9, r9, #1
 800ef18:	d1e4      	bne.n	800eee4 <uxr_ping_agent_session+0x60>
 800ef1a:	454e      	cmp	r6, r9
 800ef1c:	d1ec      	bne.n	800eef8 <uxr_ping_agent_session+0x74>
 800ef1e:	e7e0      	b.n	800eee2 <uxr_ping_agent_session+0x5e>
 800ef20:	0801b8c8 	.word	0x0801b8c8

0800ef24 <uxr_ping_agent_attempts>:
 800ef24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef28:	b0d3      	sub	sp, #332	@ 0x14c
 800ef2a:	4606      	mov	r6, r0
 800ef2c:	4688      	mov	r8, r1
 800ef2e:	a810      	add	r0, sp, #64	@ 0x40
 800ef30:	a90c      	add	r1, sp, #48	@ 0x30
 800ef32:	4692      	mov	sl, r2
 800ef34:	2210      	movs	r2, #16
 800ef36:	f7fc febb 	bl	800bcb0 <ucdr_init_buffer>
 800ef3a:	4b56      	ldr	r3, [pc, #344]	@ (800f094 <uxr_ping_agent_attempts+0x170>)
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 800ef42:	2400      	movs	r4, #0
 800ef44:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800ef48:	2502      	movs	r5, #2
 800ef4a:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 800ef4e:	4622      	mov	r2, r4
 800ef50:	4623      	mov	r3, r4
 800ef52:	2180      	movs	r1, #128	@ 0x80
 800ef54:	a810      	add	r0, sp, #64	@ 0x40
 800ef56:	9400      	str	r4, [sp, #0]
 800ef58:	9521      	str	r5, [sp, #132]	@ 0x84
 800ef5a:	f002 f8f1 	bl	8011140 <uxr_serialize_message_header>
 800ef5e:	4629      	mov	r1, r5
 800ef60:	4623      	mov	r3, r4
 800ef62:	2208      	movs	r2, #8
 800ef64:	a810      	add	r0, sp, #64	@ 0x40
 800ef66:	f001 feed 	bl	8010d44 <uxr_buffer_submessage_header>
 800ef6a:	a920      	add	r1, sp, #128	@ 0x80
 800ef6c:	4605      	mov	r5, r0
 800ef6e:	a810      	add	r0, sp, #64	@ 0x40
 800ef70:	f002 ff9c 	bl	8011eac <uxr_serialize_GET_INFO_Payload>
 800ef74:	4005      	ands	r5, r0
 800ef76:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 800ef7a:	d104      	bne.n	800ef86 <uxr_ping_agent_attempts+0x62>
 800ef7c:	2500      	movs	r5, #0
 800ef7e:	4628      	mov	r0, r5
 800ef80:	b053      	add	sp, #332	@ 0x14c
 800ef82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef86:	a810      	add	r0, sp, #64	@ 0x40
 800ef88:	f7fc febe 	bl	800bd08 <ucdr_buffer_length>
 800ef8c:	9004      	str	r0, [sp, #16]
 800ef8e:	f1ba 0f00 	cmp.w	sl, #0
 800ef92:	d0f3      	beq.n	800ef7c <uxr_ping_agent_attempts+0x58>
 800ef94:	9505      	str	r5, [sp, #20]
 800ef96:	46a1      	mov	r9, r4
 800ef98:	4627      	mov	r7, r4
 800ef9a:	4655      	mov	r5, sl
 800ef9c:	e9d6 0300 	ldrd	r0, r3, [r6]
 800efa0:	9a04      	ldr	r2, [sp, #16]
 800efa2:	a90c      	add	r1, sp, #48	@ 0x30
 800efa4:	4798      	blx	r3
 800efa6:	f001 ff13 	bl	8010dd0 <uxr_millis>
 800efaa:	46c2      	mov	sl, r8
 800efac:	4604      	mov	r4, r0
 800efae:	9503      	str	r5, [sp, #12]
 800efb0:	6830      	ldr	r0, [r6, #0]
 800efb2:	68b5      	ldr	r5, [r6, #8]
 800efb4:	9708      	str	r7, [sp, #32]
 800efb6:	4643      	mov	r3, r8
 800efb8:	aa09      	add	r2, sp, #36	@ 0x24
 800efba:	a908      	add	r1, sp, #32
 800efbc:	47a8      	blx	r5
 800efbe:	4683      	mov	fp, r0
 800efc0:	b998      	cbnz	r0, 800efea <uxr_ping_agent_attempts+0xc6>
 800efc2:	f001 ff05 	bl	8010dd0 <uxr_millis>
 800efc6:	1b00      	subs	r0, r0, r4
 800efc8:	ebaa 0a00 	sub.w	sl, sl, r0
 800efcc:	f001 ff00 	bl	8010dd0 <uxr_millis>
 800efd0:	f1ba 0f00 	cmp.w	sl, #0
 800efd4:	4604      	mov	r4, r0
 800efd6:	dceb      	bgt.n	800efb0 <uxr_ping_agent_attempts+0x8c>
 800efd8:	9d03      	ldr	r5, [sp, #12]
 800efda:	f109 0901 	add.w	r9, r9, #1
 800efde:	f1bb 0f00 	cmp.w	fp, #0
 800efe2:	d12a      	bne.n	800f03a <uxr_ping_agent_attempts+0x116>
 800efe4:	45a9      	cmp	r9, r5
 800efe6:	d1d9      	bne.n	800ef9c <uxr_ping_agent_attempts+0x78>
 800efe8:	e7c8      	b.n	800ef7c <uxr_ping_agent_attempts+0x58>
 800efea:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800efee:	a818      	add	r0, sp, #96	@ 0x60
 800eff0:	f7fc fe5e 	bl	800bcb0 <ucdr_init_buffer>
 800eff4:	ab07      	add	r3, sp, #28
 800eff6:	f10d 0219 	add.w	r2, sp, #25
 800effa:	a918      	add	r1, sp, #96	@ 0x60
 800effc:	a80a      	add	r0, sp, #40	@ 0x28
 800effe:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 800f002:	f001 f8a9 	bl	8010158 <uxr_read_session_header>
 800f006:	22c8      	movs	r2, #200	@ 0xc8
 800f008:	2100      	movs	r1, #0
 800f00a:	a820      	add	r0, sp, #128	@ 0x80
 800f00c:	f00a ff94 	bl	8019f38 <memset>
 800f010:	a818      	add	r0, sp, #96	@ 0x60
 800f012:	f7fc fe7d 	bl	800bd10 <ucdr_buffer_remaining>
 800f016:	2804      	cmp	r0, #4
 800f018:	d814      	bhi.n	800f044 <uxr_ping_agent_attempts+0x120>
 800f01a:	f89d b135 	ldrb.w	fp, [sp, #309]	@ 0x135
 800f01e:	f001 fed7 	bl	8010dd0 <uxr_millis>
 800f022:	1b00      	subs	r0, r0, r4
 800f024:	ebaa 0a00 	sub.w	sl, sl, r0
 800f028:	f001 fed2 	bl	8010dd0 <uxr_millis>
 800f02c:	f1ba 0f00 	cmp.w	sl, #0
 800f030:	4604      	mov	r4, r0
 800f032:	dd28      	ble.n	800f086 <uxr_ping_agent_attempts+0x162>
 800f034:	f1bb 0f00 	cmp.w	fp, #0
 800f038:	d0ba      	beq.n	800efb0 <uxr_ping_agent_attempts+0x8c>
 800f03a:	9d05      	ldr	r5, [sp, #20]
 800f03c:	4628      	mov	r0, r5
 800f03e:	b053      	add	sp, #332	@ 0x14c
 800f040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f044:	f10d 031e 	add.w	r3, sp, #30
 800f048:	f10d 021b 	add.w	r2, sp, #27
 800f04c:	f10d 011a 	add.w	r1, sp, #26
 800f050:	a818      	add	r0, sp, #96	@ 0x60
 800f052:	f88d 701a 	strb.w	r7, [sp, #26]
 800f056:	f88d 701b 	strb.w	r7, [sp, #27]
 800f05a:	f8ad 701e 	strh.w	r7, [sp, #30]
 800f05e:	f002 f8bf 	bl	80111e0 <uxr_deserialize_submessage_header>
 800f062:	a818      	add	r0, sp, #96	@ 0x60
 800f064:	f7fc fe54 	bl	800bd10 <ucdr_buffer_remaining>
 800f068:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f06c:	4298      	cmp	r0, r3
 800f06e:	d3d4      	bcc.n	800f01a <uxr_ping_agent_attempts+0xf6>
 800f070:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800f074:	2b06      	cmp	r3, #6
 800f076:	d1d0      	bne.n	800f01a <uxr_ping_agent_attempts+0xf6>
 800f078:	a918      	add	r1, sp, #96	@ 0x60
 800f07a:	a820      	add	r0, sp, #128	@ 0x80
 800f07c:	f88d 7135 	strb.w	r7, [sp, #309]	@ 0x135
 800f080:	f000 f976 	bl	800f370 <read_submessage_info>
 800f084:	e7c9      	b.n	800f01a <uxr_ping_agent_attempts+0xf6>
 800f086:	f1bb 0b00 	subs.w	fp, fp, #0
 800f08a:	9d03      	ldr	r5, [sp, #12]
 800f08c:	bf18      	it	ne
 800f08e:	f04f 0b01 	movne.w	fp, #1
 800f092:	e7a2      	b.n	800efda <uxr_ping_agent_attempts+0xb6>
 800f094:	0801b8c8 	.word	0x0801b8c8

0800f098 <on_get_fragmentation_info>:
 800f098:	b500      	push	{lr}
 800f09a:	b08b      	sub	sp, #44	@ 0x2c
 800f09c:	4601      	mov	r1, r0
 800f09e:	2204      	movs	r2, #4
 800f0a0:	a802      	add	r0, sp, #8
 800f0a2:	f7fc fe05 	bl	800bcb0 <ucdr_init_buffer>
 800f0a6:	f10d 0305 	add.w	r3, sp, #5
 800f0aa:	f10d 0206 	add.w	r2, sp, #6
 800f0ae:	a901      	add	r1, sp, #4
 800f0b0:	a802      	add	r0, sp, #8
 800f0b2:	f001 fe61 	bl	8010d78 <uxr_read_submessage_header>
 800f0b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f0ba:	2b0d      	cmp	r3, #13
 800f0bc:	d003      	beq.n	800f0c6 <on_get_fragmentation_info+0x2e>
 800f0be:	2000      	movs	r0, #0
 800f0c0:	b00b      	add	sp, #44	@ 0x2c
 800f0c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f0ca:	f013 0f02 	tst.w	r3, #2
 800f0ce:	bf0c      	ite	eq
 800f0d0:	2001      	moveq	r0, #1
 800f0d2:	2002      	movne	r0, #2
 800f0d4:	b00b      	add	sp, #44	@ 0x2c
 800f0d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f0da:	bf00      	nop

0800f0dc <read_submessage_get_info>:
 800f0dc:	b570      	push	{r4, r5, r6, lr}
 800f0de:	2500      	movs	r5, #0
 800f0e0:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800f0ea:	460e      	mov	r6, r1
 800f0ec:	a810      	add	r0, sp, #64	@ 0x40
 800f0ee:	4629      	mov	r1, r5
 800f0f0:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800f0f4:	f00a ff20 	bl	8019f38 <memset>
 800f0f8:	a903      	add	r1, sp, #12
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	f002 feea 	bl	8011ed4 <uxr_deserialize_GET_INFO_Payload>
 800f100:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800f104:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800f108:	4620      	mov	r0, r4
 800f10a:	f001 f863 	bl	80101d4 <uxr_session_header_offset>
 800f10e:	462b      	mov	r3, r5
 800f110:	9000      	str	r0, [sp, #0]
 800f112:	220c      	movs	r2, #12
 800f114:	a905      	add	r1, sp, #20
 800f116:	a808      	add	r0, sp, #32
 800f118:	f7fc fdb8 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 800f11c:	a910      	add	r1, sp, #64	@ 0x40
 800f11e:	a808      	add	r0, sp, #32
 800f120:	f002 ff4a 	bl	8011fb8 <uxr_serialize_INFO_Payload>
 800f124:	9b08      	ldr	r3, [sp, #32]
 800f126:	462a      	mov	r2, r5
 800f128:	4629      	mov	r1, r5
 800f12a:	4620      	mov	r0, r4
 800f12c:	f000 fffe 	bl	801012c <uxr_stamp_session_header>
 800f130:	a808      	add	r0, sp, #32
 800f132:	f7fc fde9 	bl	800bd08 <ucdr_buffer_length>
 800f136:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f138:	4602      	mov	r2, r0
 800f13a:	a905      	add	r1, sp, #20
 800f13c:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f140:	47a0      	blx	r4
 800f142:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800f146:	bd70      	pop	{r4, r5, r6, pc}

0800f148 <write_submessage_acknack.isra.0>:
 800f148:	b570      	push	{r4, r5, r6, lr}
 800f14a:	b092      	sub	sp, #72	@ 0x48
 800f14c:	4605      	mov	r5, r0
 800f14e:	460e      	mov	r6, r1
 800f150:	4614      	mov	r4, r2
 800f152:	f001 f83f 	bl	80101d4 <uxr_session_header_offset>
 800f156:	a905      	add	r1, sp, #20
 800f158:	9000      	str	r0, [sp, #0]
 800f15a:	2300      	movs	r3, #0
 800f15c:	a80a      	add	r0, sp, #40	@ 0x28
 800f15e:	2211      	movs	r2, #17
 800f160:	f7fc fd94 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 800f164:	2318      	movs	r3, #24
 800f166:	fb03 5404 	mla	r4, r3, r4, r5
 800f16a:	2205      	movs	r2, #5
 800f16c:	2300      	movs	r3, #0
 800f16e:	3450      	adds	r4, #80	@ 0x50
 800f170:	210a      	movs	r1, #10
 800f172:	a80a      	add	r0, sp, #40	@ 0x28
 800f174:	f001 fde6 	bl	8010d44 <uxr_buffer_submessage_header>
 800f178:	a903      	add	r1, sp, #12
 800f17a:	4620      	mov	r0, r4
 800f17c:	f008 fd64 	bl	8017c48 <uxr_compute_acknack>
 800f180:	ba40      	rev16	r0, r0
 800f182:	f8ad 000e 	strh.w	r0, [sp, #14]
 800f186:	a903      	add	r1, sp, #12
 800f188:	a80a      	add	r0, sp, #40	@ 0x28
 800f18a:	f88d 6010 	strb.w	r6, [sp, #16]
 800f18e:	f002 ff83 	bl	8012098 <uxr_serialize_ACKNACK_Payload>
 800f192:	2200      	movs	r2, #0
 800f194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f196:	4611      	mov	r1, r2
 800f198:	4628      	mov	r0, r5
 800f19a:	f000 ffc7 	bl	801012c <uxr_stamp_session_header>
 800f19e:	a80a      	add	r0, sp, #40	@ 0x28
 800f1a0:	f7fc fdb2 	bl	800bd08 <ucdr_buffer_length>
 800f1a4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	a905      	add	r1, sp, #20
 800f1aa:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f1ae:	47a0      	blx	r4
 800f1b0:	b012      	add	sp, #72	@ 0x48
 800f1b2:	bd70      	pop	{r4, r5, r6, pc}
 800f1b4:	0000      	movs	r0, r0
	...

0800f1b8 <uxr_init_session>:
 800f1b8:	b510      	push	{r4, lr}
 800f1ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800f1f0 <uxr_init_session+0x38>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800f1ca:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800f1ce:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800f1d2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800f1d6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800f1da:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800f1de:	2181      	movs	r1, #129	@ 0x81
 800f1e0:	f000 ff08 	bl	800fff4 <uxr_init_session_info>
 800f1e4:	f104 0008 	add.w	r0, r4, #8
 800f1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1ec:	f001 bcc6 	b.w	8010b7c <uxr_init_stream_storage>
	...

0800f1f8 <uxr_set_status_callback>:
 800f1f8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop

0800f200 <uxr_set_topic_callback>:
 800f200:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop

0800f208 <uxr_set_request_callback>:
 800f208:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800f20c:	4770      	bx	lr
 800f20e:	bf00      	nop

0800f210 <uxr_set_reply_callback>:
 800f210:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800f214:	4770      	bx	lr
 800f216:	bf00      	nop

0800f218 <uxr_create_output_best_effort_stream>:
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	4604      	mov	r4, r0
 800f21e:	460d      	mov	r5, r1
 800f220:	4616      	mov	r6, r2
 800f222:	f000 ffd7 	bl	80101d4 <uxr_session_header_offset>
 800f226:	4632      	mov	r2, r6
 800f228:	4603      	mov	r3, r0
 800f22a:	4629      	mov	r1, r5
 800f22c:	f104 0008 	add.w	r0, r4, #8
 800f230:	b002      	add	sp, #8
 800f232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f236:	f001 bceb 	b.w	8010c10 <uxr_add_output_best_effort_buffer>
 800f23a:	bf00      	nop

0800f23c <uxr_create_output_reliable_stream>:
 800f23c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f23e:	b085      	sub	sp, #20
 800f240:	4604      	mov	r4, r0
 800f242:	460d      	mov	r5, r1
 800f244:	4616      	mov	r6, r2
 800f246:	461f      	mov	r7, r3
 800f248:	f000 ffc4 	bl	80101d4 <uxr_session_header_offset>
 800f24c:	463b      	mov	r3, r7
 800f24e:	9000      	str	r0, [sp, #0]
 800f250:	4632      	mov	r2, r6
 800f252:	4629      	mov	r1, r5
 800f254:	f104 0008 	add.w	r0, r4, #8
 800f258:	f001 fcee 	bl	8010c38 <uxr_add_output_reliable_buffer>
 800f25c:	b005      	add	sp, #20
 800f25e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f260 <uxr_create_input_best_effort_stream>:
 800f260:	b082      	sub	sp, #8
 800f262:	3008      	adds	r0, #8
 800f264:	b002      	add	sp, #8
 800f266:	f001 bd01 	b.w	8010c6c <uxr_add_input_best_effort_buffer>
 800f26a:	bf00      	nop

0800f26c <uxr_create_input_reliable_stream>:
 800f26c:	b510      	push	{r4, lr}
 800f26e:	b084      	sub	sp, #16
 800f270:	4c03      	ldr	r4, [pc, #12]	@ (800f280 <uxr_create_input_reliable_stream+0x14>)
 800f272:	9400      	str	r4, [sp, #0]
 800f274:	3008      	adds	r0, #8
 800f276:	f001 fd0f 	bl	8010c98 <uxr_add_input_reliable_buffer>
 800f27a:	b004      	add	sp, #16
 800f27c:	bd10      	pop	{r4, pc}
 800f27e:	bf00      	nop
 800f280:	0800f099 	.word	0x0800f099

0800f284 <uxr_epoch_nanos>:
 800f284:	b510      	push	{r4, lr}
 800f286:	4604      	mov	r4, r0
 800f288:	f001 fdbc 	bl	8010e04 <uxr_nanos>
 800f28c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f290:	1ac0      	subs	r0, r0, r3
 800f292:	eb61 0102 	sbc.w	r1, r1, r2
 800f296:	bd10      	pop	{r4, pc}

0800f298 <uxr_flash_output_streams>:
 800f298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f29c:	7e03      	ldrb	r3, [r0, #24]
 800f29e:	b084      	sub	sp, #16
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	b373      	cbz	r3, 800f302 <uxr_flash_output_streams+0x6a>
 800f2a4:	2500      	movs	r5, #0
 800f2a6:	f100 0908 	add.w	r9, r0, #8
 800f2aa:	f10d 0802 	add.w	r8, sp, #2
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	af03      	add	r7, sp, #12
 800f2b2:	ae02      	add	r6, sp, #8
 800f2b4:	e006      	b.n	800f2c4 <uxr_flash_output_streams+0x2c>
 800f2b6:	7e23      	ldrb	r3, [r4, #24]
 800f2b8:	3501      	adds	r5, #1
 800f2ba:	b2e8      	uxtb	r0, r5
 800f2bc:	4283      	cmp	r3, r0
 800f2be:	f109 0910 	add.w	r9, r9, #16
 800f2c2:	d91e      	bls.n	800f302 <uxr_flash_output_streams+0x6a>
 800f2c4:	2201      	movs	r2, #1
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	f001 fc20 	bl	8010b0c <uxr_stream_id>
 800f2cc:	4643      	mov	r3, r8
 800f2ce:	4684      	mov	ip, r0
 800f2d0:	463a      	mov	r2, r7
 800f2d2:	4631      	mov	r1, r6
 800f2d4:	4648      	mov	r0, r9
 800f2d6:	f8cd c004 	str.w	ip, [sp, #4]
 800f2da:	f008 fd39 	bl	8017d50 <uxr_prepare_best_effort_buffer_to_send>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d0e9      	beq.n	800f2b6 <uxr_flash_output_streams+0x1e>
 800f2e2:	9b02      	ldr	r3, [sp, #8]
 800f2e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f2e8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f000 ff1d 	bl	801012c <uxr_stamp_session_header>
 800f2f2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f2f4:	9a03      	ldr	r2, [sp, #12]
 800f2f6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f2fa:	9902      	ldr	r1, [sp, #8]
 800f2fc:	6818      	ldr	r0, [r3, #0]
 800f2fe:	47d0      	blx	sl
 800f300:	e7d9      	b.n	800f2b6 <uxr_flash_output_streams+0x1e>
 800f302:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f306:	b37b      	cbz	r3, 800f368 <uxr_flash_output_streams+0xd0>
 800f308:	f04f 0900 	mov.w	r9, #0
 800f30c:	f104 0520 	add.w	r5, r4, #32
 800f310:	f10d 0802 	add.w	r8, sp, #2
 800f314:	af03      	add	r7, sp, #12
 800f316:	ae02      	add	r6, sp, #8
 800f318:	4648      	mov	r0, r9
 800f31a:	2201      	movs	r2, #1
 800f31c:	2102      	movs	r1, #2
 800f31e:	f001 fbf5 	bl	8010b0c <uxr_stream_id>
 800f322:	9001      	str	r0, [sp, #4]
 800f324:	e00e      	b.n	800f344 <uxr_flash_output_streams+0xac>
 800f326:	9b02      	ldr	r3, [sp, #8]
 800f328:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f32c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f330:	4620      	mov	r0, r4
 800f332:	f000 fefb 	bl	801012c <uxr_stamp_session_header>
 800f336:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f338:	9a03      	ldr	r2, [sp, #12]
 800f33a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f33e:	9902      	ldr	r1, [sp, #8]
 800f340:	6818      	ldr	r0, [r3, #0]
 800f342:	47d0      	blx	sl
 800f344:	4643      	mov	r3, r8
 800f346:	463a      	mov	r2, r7
 800f348:	4631      	mov	r1, r6
 800f34a:	4628      	mov	r0, r5
 800f34c:	f008 ff14 	bl	8018178 <uxr_prepare_next_reliable_buffer_to_send>
 800f350:	2800      	cmp	r0, #0
 800f352:	d1e8      	bne.n	800f326 <uxr_flash_output_streams+0x8e>
 800f354:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f358:	f109 0901 	add.w	r9, r9, #1
 800f35c:	fa5f f089 	uxtb.w	r0, r9
 800f360:	4283      	cmp	r3, r0
 800f362:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800f366:	d8d8      	bhi.n	800f31a <uxr_flash_output_streams+0x82>
 800f368:	b004      	add	sp, #16
 800f36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f36e:	bf00      	nop

0800f370 <read_submessage_info>:
 800f370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f374:	460d      	mov	r5, r1
 800f376:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f37a:	4669      	mov	r1, sp
 800f37c:	4607      	mov	r7, r0
 800f37e:	4628      	mov	r0, r5
 800f380:	f002 fca4 	bl	8011ccc <uxr_deserialize_BaseObjectReply>
 800f384:	a902      	add	r1, sp, #8
 800f386:	4604      	mov	r4, r0
 800f388:	4628      	mov	r0, r5
 800f38a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f38e:	f7fb f9b7 	bl	800a700 <ucdr_deserialize_bool>
 800f392:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f396:	4004      	ands	r4, r0
 800f398:	b2e4      	uxtb	r4, r4
 800f39a:	b95b      	cbnz	r3, 800f3b4 <read_submessage_info+0x44>
 800f39c:	a987      	add	r1, sp, #540	@ 0x21c
 800f39e:	4628      	mov	r0, r5
 800f3a0:	f7fb f9ae 	bl	800a700 <ucdr_deserialize_bool>
 800f3a4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f3a8:	4606      	mov	r6, r0
 800f3aa:	b94b      	cbnz	r3, 800f3c0 <read_submessage_info+0x50>
 800f3ac:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b4:	a903      	add	r1, sp, #12
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f002 fb4a 	bl	8011a50 <uxr_deserialize_ObjectVariant>
 800f3bc:	4004      	ands	r4, r0
 800f3be:	e7ed      	b.n	800f39c <read_submessage_info+0x2c>
 800f3c0:	a988      	add	r1, sp, #544	@ 0x220
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	f7fb f9ca 	bl	800a75c <ucdr_deserialize_uint8_t>
 800f3c8:	4234      	tst	r4, r6
 800f3ca:	d0ef      	beq.n	800f3ac <read_submessage_info+0x3c>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d0ed      	beq.n	800f3ac <read_submessage_info+0x3c>
 800f3d0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f3d4:	2b0d      	cmp	r3, #13
 800f3d6:	d1e9      	bne.n	800f3ac <read_submessage_info+0x3c>
 800f3d8:	a98a      	add	r1, sp, #552	@ 0x228
 800f3da:	4628      	mov	r0, r5
 800f3dc:	f7fb ff5a 	bl	800b294 <ucdr_deserialize_int16_t>
 800f3e0:	b140      	cbz	r0, 800f3f4 <read_submessage_info+0x84>
 800f3e2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	dd07      	ble.n	800f3fa <read_submessage_info+0x8a>
 800f3ea:	f1b8 0f00 	cmp.w	r8, #0
 800f3ee:	bf0c      	ite	eq
 800f3f0:	2002      	moveq	r0, #2
 800f3f2:	2001      	movne	r0, #1
 800f3f4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f3f8:	e7d8      	b.n	800f3ac <read_submessage_info+0x3c>
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	e7fa      	b.n	800f3f4 <read_submessage_info+0x84>
 800f3fe:	bf00      	nop

0800f400 <read_submessage_list>:
 800f400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f404:	b097      	sub	sp, #92	@ 0x5c
 800f406:	4604      	mov	r4, r0
 800f408:	460d      	mov	r5, r1
 800f40a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f40c:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f410:	aa0c      	add	r2, sp, #48	@ 0x30
 800f412:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f416:	4628      	mov	r0, r5
 800f418:	f001 fcae 	bl	8010d78 <uxr_read_submessage_header>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	f000 812c 	beq.w	800f67a <read_submessage_list+0x27a>
 800f422:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800f426:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f428:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800f42c:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800f430:	3902      	subs	r1, #2
 800f432:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f436:	290d      	cmp	r1, #13
 800f438:	d8e8      	bhi.n	800f40c <read_submessage_list+0xc>
 800f43a:	a201      	add	r2, pc, #4	@ (adr r2, 800f440 <read_submessage_list+0x40>)
 800f43c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800f440:	0800f671 	.word	0x0800f671
 800f444:	0800f40d 	.word	0x0800f40d
 800f448:	0800f661 	.word	0x0800f661
 800f44c:	0800f603 	.word	0x0800f603
 800f450:	0800f5f9 	.word	0x0800f5f9
 800f454:	0800f40d 	.word	0x0800f40d
 800f458:	0800f40d 	.word	0x0800f40d
 800f45c:	0800f57d 	.word	0x0800f57d
 800f460:	0800f515 	.word	0x0800f515
 800f464:	0800f4d5 	.word	0x0800f4d5
 800f468:	0800f40d 	.word	0x0800f40d
 800f46c:	0800f40d 	.word	0x0800f40d
 800f470:	0800f40d 	.word	0x0800f40d
 800f474:	0800f479 	.word	0x0800f479
 800f478:	a910      	add	r1, sp, #64	@ 0x40
 800f47a:	4628      	mov	r0, r5
 800f47c:	f002 fe6a 	bl	8012154 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f480:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800f484:	2e00      	cmp	r6, #0
 800f486:	f000 8100 	beq.w	800f68a <read_submessage_list+0x28a>
 800f48a:	f001 fcbb 	bl	8010e04 <uxr_nanos>
 800f48e:	f04f 0800 	mov.w	r8, #0
 800f492:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f494:	4602      	mov	r2, r0
 800f496:	460b      	mov	r3, r1
 800f498:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f49a:	4990      	ldr	r1, [pc, #576]	@ (800f6dc <read_submessage_list+0x2dc>)
 800f49c:	46c4      	mov	ip, r8
 800f49e:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800f4a2:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f4a6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f4a8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f4aa:	46c6      	mov	lr, r8
 800f4ac:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800f4b0:	46bc      	mov	ip, r7
 800f4b2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f4b6:	fbc0 7801 	smlal	r7, r8, r0, r1
 800f4ba:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800f4be:	e9cd 7800 	strd	r7, r8, [sp]
 800f4c2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f4c6:	9106      	str	r1, [sp, #24]
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	47b0      	blx	r6
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800f4d2:	e79b      	b.n	800f40c <read_submessage_list+0xc>
 800f4d4:	a910      	add	r1, sp, #64	@ 0x40
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	f002 fe1c 	bl	8012114 <uxr_deserialize_HEARTBEAT_Payload>
 800f4dc:	2100      	movs	r1, #0
 800f4de:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f4e2:	f001 fb2f 	bl	8010b44 <uxr_stream_id_from_raw>
 800f4e6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f4ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f4ec:	4631      	mov	r1, r6
 800f4ee:	f104 0008 	add.w	r0, r4, #8
 800f4f2:	f001 fc07 	bl	8010d04 <uxr_get_input_reliable_stream>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d088      	beq.n	800f40c <read_submessage_list+0xc>
 800f4fa:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f4fe:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f502:	f008 fb95 	bl	8017c30 <uxr_process_heartbeat>
 800f506:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f50a:	4632      	mov	r2, r6
 800f50c:	4620      	mov	r0, r4
 800f50e:	f7ff fe1b 	bl	800f148 <write_submessage_acknack.isra.0>
 800f512:	e77b      	b.n	800f40c <read_submessage_list+0xc>
 800f514:	a910      	add	r1, sp, #64	@ 0x40
 800f516:	4628      	mov	r0, r5
 800f518:	f002 fdd4 	bl	80120c4 <uxr_deserialize_ACKNACK_Payload>
 800f51c:	2100      	movs	r1, #0
 800f51e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f522:	f001 fb0f 	bl	8010b44 <uxr_stream_id_from_raw>
 800f526:	900d      	str	r0, [sp, #52]	@ 0x34
 800f528:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f52c:	f104 0008 	add.w	r0, r4, #8
 800f530:	f001 fbd4 	bl	8010cdc <uxr_get_output_reliable_stream>
 800f534:	4606      	mov	r6, r0
 800f536:	2800      	cmp	r0, #0
 800f538:	f43f af68 	beq.w	800f40c <read_submessage_list+0xc>
 800f53c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800f540:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f544:	ba49      	rev16	r1, r1
 800f546:	b289      	uxth	r1, r1
 800f548:	f008 fec0 	bl	80182cc <uxr_process_acknack>
 800f54c:	4630      	mov	r0, r6
 800f54e:	f008 fe81 	bl	8018254 <uxr_begin_output_nack_buffer_it>
 800f552:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800f556:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800f55a:	e005      	b.n	800f568 <read_submessage_list+0x168>
 800f55c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f55e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f560:	685f      	ldr	r7, [r3, #4]
 800f562:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f564:	6818      	ldr	r0, [r3, #0]
 800f566:	47b8      	blx	r7
 800f568:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800f56c:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f56e:	4641      	mov	r1, r8
 800f570:	4630      	mov	r0, r6
 800f572:	f008 fe71 	bl	8018258 <uxr_next_reliable_nack_buffer_to_send>
 800f576:	2800      	cmp	r0, #0
 800f578:	d1f0      	bne.n	800f55c <read_submessage_list+0x15c>
 800f57a:	e747      	b.n	800f40c <read_submessage_list+0xc>
 800f57c:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800f580:	4641      	mov	r1, r8
 800f582:	900d      	str	r0, [sp, #52]	@ 0x34
 800f584:	4628      	mov	r0, r5
 800f586:	f002 fb03 	bl	8011b90 <uxr_deserialize_BaseObjectRequest>
 800f58a:	3e04      	subs	r6, #4
 800f58c:	4640      	mov	r0, r8
 800f58e:	a90f      	add	r1, sp, #60	@ 0x3c
 800f590:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f594:	f000 fe44 	bl	8010220 <uxr_parse_base_object_request>
 800f598:	fa1f f886 	uxth.w	r8, r6
 800f59c:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800f5a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f5a2:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800f5a6:	9110      	str	r1, [sp, #64]	@ 0x40
 800f5a8:	f007 070e 	and.w	r7, r7, #14
 800f5ac:	b136      	cbz	r6, 800f5bc <read_submessage_list+0x1bc>
 800f5ae:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	464a      	mov	r2, r9
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	47b0      	blx	r6
 800f5bc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800f5be:	b16b      	cbz	r3, 800f5dc <read_submessage_list+0x1dc>
 800f5c0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f5c2:	2100      	movs	r1, #0
 800f5c4:	3802      	subs	r0, #2
 800f5c6:	e002      	b.n	800f5ce <read_submessage_list+0x1ce>
 800f5c8:	3101      	adds	r1, #1
 800f5ca:	428b      	cmp	r3, r1
 800f5cc:	d006      	beq.n	800f5dc <read_submessage_list+0x1dc>
 800f5ce:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800f5d2:	454e      	cmp	r6, r9
 800f5d4:	d1f8      	bne.n	800f5c8 <read_submessage_list+0x1c8>
 800f5d6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f5d8:	2200      	movs	r2, #0
 800f5da:	545a      	strb	r2, [r3, r1]
 800f5dc:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800f5e0:	9102      	str	r1, [sp, #8]
 800f5e2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f5e4:	9101      	str	r1, [sp, #4]
 800f5e6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f5e8:	9100      	str	r1, [sp, #0]
 800f5ea:	463b      	mov	r3, r7
 800f5ec:	4642      	mov	r2, r8
 800f5ee:	4629      	mov	r1, r5
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	f008 ff23 	bl	801843c <read_submessage_format>
 800f5f6:	e709      	b.n	800f40c <read_submessage_list+0xc>
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	f7ff feb8 	bl	800f370 <read_submessage_info>
 800f600:	e704      	b.n	800f40c <read_submessage_list+0xc>
 800f602:	2b00      	cmp	r3, #0
 800f604:	d03c      	beq.n	800f680 <read_submessage_list+0x280>
 800f606:	a910      	add	r1, sp, #64	@ 0x40
 800f608:	4628      	mov	r0, r5
 800f60a:	f002 fcb7 	bl	8011f7c <uxr_deserialize_STATUS_Payload>
 800f60e:	a90e      	add	r1, sp, #56	@ 0x38
 800f610:	a810      	add	r0, sp, #64	@ 0x40
 800f612:	aa0d      	add	r2, sp, #52	@ 0x34
 800f614:	f000 fe04 	bl	8010220 <uxr_parse_base_object_request>
 800f618:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800f61c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f61e:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800f622:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800f626:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f628:	b136      	cbz	r6, 800f638 <read_submessage_list+0x238>
 800f62a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f62e:	9300      	str	r3, [sp, #0]
 800f630:	463a      	mov	r2, r7
 800f632:	4643      	mov	r3, r8
 800f634:	4620      	mov	r0, r4
 800f636:	47b0      	blx	r6
 800f638:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f63a:	2a00      	cmp	r2, #0
 800f63c:	f43f aee6 	beq.w	800f40c <read_submessage_list+0xc>
 800f640:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f642:	2100      	movs	r1, #0
 800f644:	3802      	subs	r0, #2
 800f646:	e003      	b.n	800f650 <read_submessage_list+0x250>
 800f648:	3101      	adds	r1, #1
 800f64a:	4291      	cmp	r1, r2
 800f64c:	f43f aede 	beq.w	800f40c <read_submessage_list+0xc>
 800f650:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800f654:	42be      	cmp	r6, r7
 800f656:	d1f7      	bne.n	800f648 <read_submessage_list+0x248>
 800f658:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f65a:	f803 8001 	strb.w	r8, [r3, r1]
 800f65e:	e6d5      	b.n	800f40c <read_submessage_list+0xc>
 800f660:	2b00      	cmp	r3, #0
 800f662:	f47f aed3 	bne.w	800f40c <read_submessage_list+0xc>
 800f666:	4629      	mov	r1, r5
 800f668:	4620      	mov	r0, r4
 800f66a:	f000 fd21 	bl	80100b0 <uxr_read_create_session_status>
 800f66e:	e6cd      	b.n	800f40c <read_submessage_list+0xc>
 800f670:	4629      	mov	r1, r5
 800f672:	4620      	mov	r0, r4
 800f674:	f7ff fd32 	bl	800f0dc <read_submessage_get_info>
 800f678:	e6c8      	b.n	800f40c <read_submessage_list+0xc>
 800f67a:	b017      	add	sp, #92	@ 0x5c
 800f67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f680:	4629      	mov	r1, r5
 800f682:	4620      	mov	r0, r4
 800f684:	f000 fd22 	bl	80100cc <uxr_read_delete_session_status>
 800f688:	e6c0      	b.n	800f40c <read_submessage_list+0xc>
 800f68a:	f001 fbbb 	bl	8010e04 <uxr_nanos>
 800f68e:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800f692:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800f6dc <read_submessage_list+0x2dc>
 800f696:	4633      	mov	r3, r6
 800f698:	fbc7 230c 	smlal	r2, r3, r7, ip
 800f69c:	1810      	adds	r0, r2, r0
 800f69e:	eb43 0301 	adc.w	r3, r3, r1
 800f6a2:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800f6a6:	46b6      	mov	lr, r6
 800f6a8:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800f6ac:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800f6b0:	fbc1 760c 	smlal	r7, r6, r1, ip
 800f6b4:	19d2      	adds	r2, r2, r7
 800f6b6:	eb4e 0106 	adc.w	r1, lr, r6
 800f6ba:	1a80      	subs	r0, r0, r2
 800f6bc:	eb63 0301 	sbc.w	r3, r3, r1
 800f6c0:	0fda      	lsrs	r2, r3, #31
 800f6c2:	1812      	adds	r2, r2, r0
 800f6c4:	f143 0300 	adc.w	r3, r3, #0
 800f6c8:	0852      	lsrs	r2, r2, #1
 800f6ca:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f6ce:	105b      	asrs	r3, r3, #1
 800f6d0:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f6d4:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f6d8:	e6f8      	b.n	800f4cc <read_submessage_list+0xcc>
 800f6da:	bf00      	nop
 800f6dc:	3b9aca00 	.word	0x3b9aca00

0800f6e0 <listen_message_reliably>:
 800f6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e4:	f1b1 0b00 	subs.w	fp, r1, #0
 800f6e8:	b09f      	sub	sp, #124	@ 0x7c
 800f6ea:	4606      	mov	r6, r0
 800f6ec:	bfb8      	it	lt
 800f6ee:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800f6f2:	f001 fb6d 	bl	8010dd0 <uxr_millis>
 800f6f6:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f6fa:	9003      	str	r0, [sp, #12]
 800f6fc:	9104      	str	r1, [sp, #16]
 800f6fe:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800f702:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800f706:	2b00      	cmp	r3, #0
 800f708:	f000 80a4 	beq.w	800f854 <listen_message_reliably+0x174>
 800f70c:	2500      	movs	r5, #0
 800f70e:	e9cd b806 	strd	fp, r8, [sp, #24]
 800f712:	f106 0420 	add.w	r4, r6, #32
 800f716:	f04f 37ff 	mov.w	r7, #4294967295
 800f71a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800f71e:	4628      	mov	r0, r5
 800f720:	e011      	b.n	800f746 <listen_message_reliably+0x66>
 800f722:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800f726:	42ba      	cmp	r2, r7
 800f728:	eb73 0109 	sbcs.w	r1, r3, r9
 800f72c:	bfb8      	it	lt
 800f72e:	4699      	movlt	r9, r3
 800f730:	f105 0501 	add.w	r5, r5, #1
 800f734:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f738:	b2e8      	uxtb	r0, r5
 800f73a:	bfb8      	it	lt
 800f73c:	4617      	movlt	r7, r2
 800f73e:	4283      	cmp	r3, r0
 800f740:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800f744:	d94a      	bls.n	800f7dc <listen_message_reliably+0xfc>
 800f746:	2201      	movs	r2, #1
 800f748:	2102      	movs	r1, #2
 800f74a:	f001 f9df 	bl	8010b0c <uxr_stream_id>
 800f74e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800f752:	4601      	mov	r1, r0
 800f754:	4620      	mov	r0, r4
 800f756:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f758:	f008 fd4c 	bl	80181f4 <uxr_update_output_stream_heartbeat_timestamp>
 800f75c:	2800      	cmp	r0, #0
 800f75e:	d0e0      	beq.n	800f722 <listen_message_reliably+0x42>
 800f760:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800f764:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800f768:	9305      	str	r3, [sp, #20]
 800f76a:	4630      	mov	r0, r6
 800f76c:	f000 fd32 	bl	80101d4 <uxr_session_header_offset>
 800f770:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800f774:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800f778:	9000      	str	r0, [sp, #0]
 800f77a:	a90e      	add	r1, sp, #56	@ 0x38
 800f77c:	4640      	mov	r0, r8
 800f77e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800f782:	2300      	movs	r3, #0
 800f784:	2211      	movs	r2, #17
 800f786:	f7fc fa81 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 800f78a:	2300      	movs	r3, #0
 800f78c:	2205      	movs	r2, #5
 800f78e:	210b      	movs	r1, #11
 800f790:	4640      	mov	r0, r8
 800f792:	f001 fad7 	bl	8010d44 <uxr_buffer_submessage_header>
 800f796:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800f79a:	2101      	movs	r1, #1
 800f79c:	f008 ff22 	bl	80185e4 <uxr_seq_num_add>
 800f7a0:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800f7a4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	9b05      	ldr	r3, [sp, #20]
 800f7ac:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800f7b0:	a90c      	add	r1, sp, #48	@ 0x30
 800f7b2:	4640      	mov	r0, r8
 800f7b4:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800f7b8:	f002 fc98 	bl	80120ec <uxr_serialize_HEARTBEAT_Payload>
 800f7bc:	2200      	movs	r2, #0
 800f7be:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f7c0:	4611      	mov	r1, r2
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	f000 fcb2 	bl	801012c <uxr_stamp_session_header>
 800f7c8:	4640      	mov	r0, r8
 800f7ca:	f7fc fa9d 	bl	800bd08 <ucdr_buffer_length>
 800f7ce:	4602      	mov	r2, r0
 800f7d0:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800f7d2:	a90e      	add	r1, sp, #56	@ 0x38
 800f7d4:	e9d0 0300 	ldrd	r0, r3, [r0]
 800f7d8:	4798      	blx	r3
 800f7da:	e7a2      	b.n	800f722 <listen_message_reliably+0x42>
 800f7dc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f7e0:	4599      	cmp	r9, r3
 800f7e2:	bf08      	it	eq
 800f7e4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 800f7e8:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800f7ec:	d032      	beq.n	800f854 <listen_message_reliably+0x174>
 800f7ee:	9b03      	ldr	r3, [sp, #12]
 800f7f0:	1aff      	subs	r7, r7, r3
 800f7f2:	2f00      	cmp	r7, #0
 800f7f4:	bf08      	it	eq
 800f7f6:	2701      	moveq	r7, #1
 800f7f8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800f7fa:	455f      	cmp	r7, fp
 800f7fc:	bfa8      	it	ge
 800f7fe:	465f      	movge	r7, fp
 800f800:	689c      	ldr	r4, [r3, #8]
 800f802:	6818      	ldr	r0, [r3, #0]
 800f804:	4642      	mov	r2, r8
 800f806:	463b      	mov	r3, r7
 800f808:	4651      	mov	r1, sl
 800f80a:	47a0      	blx	r4
 800f80c:	ebab 0b07 	sub.w	fp, fp, r7
 800f810:	b958      	cbnz	r0, 800f82a <listen_message_reliably+0x14a>
 800f812:	f1bb 0f00 	cmp.w	fp, #0
 800f816:	dd44      	ble.n	800f8a2 <listen_message_reliably+0x1c2>
 800f818:	f001 fada 	bl	8010dd0 <uxr_millis>
 800f81c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800f820:	2b00      	cmp	r3, #0
 800f822:	d03c      	beq.n	800f89e <listen_message_reliably+0x1be>
 800f824:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800f828:	e770      	b.n	800f70c <listen_message_reliably+0x2c>
 800f82a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800f82e:	4604      	mov	r4, r0
 800f830:	a80e      	add	r0, sp, #56	@ 0x38
 800f832:	f7fc fa3d 	bl	800bcb0 <ucdr_init_buffer>
 800f836:	2500      	movs	r5, #0
 800f838:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800f83c:	aa08      	add	r2, sp, #32
 800f83e:	a90e      	add	r1, sp, #56	@ 0x38
 800f840:	4630      	mov	r0, r6
 800f842:	f88d 5020 	strb.w	r5, [sp, #32]
 800f846:	f000 fc87 	bl	8010158 <uxr_read_session_header>
 800f84a:	b928      	cbnz	r0, 800f858 <listen_message_reliably+0x178>
 800f84c:	4620      	mov	r0, r4
 800f84e:	b01f      	add	sp, #124	@ 0x7c
 800f850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f854:	465f      	mov	r7, fp
 800f856:	e7cc      	b.n	800f7f2 <listen_message_reliably+0x112>
 800f858:	4629      	mov	r1, r5
 800f85a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800f85e:	f001 f971 	bl	8010b44 <uxr_stream_id_from_raw>
 800f862:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f866:	2f01      	cmp	r7, #1
 800f868:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800f86c:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800f870:	fa5f f880 	uxtb.w	r8, r0
 800f874:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800f878:	d050      	beq.n	800f91c <listen_message_reliably+0x23c>
 800f87a:	2f02      	cmp	r7, #2
 800f87c:	d016      	beq.n	800f8ac <listen_message_reliably+0x1cc>
 800f87e:	2f00      	cmp	r7, #0
 800f880:	d1e4      	bne.n	800f84c <listen_message_reliably+0x16c>
 800f882:	4639      	mov	r1, r7
 800f884:	4638      	mov	r0, r7
 800f886:	f001 f95d 	bl	8010b44 <uxr_stream_id_from_raw>
 800f88a:	a90e      	add	r1, sp, #56	@ 0x38
 800f88c:	4602      	mov	r2, r0
 800f88e:	4630      	mov	r0, r6
 800f890:	920c      	str	r2, [sp, #48]	@ 0x30
 800f892:	f7ff fdb5 	bl	800f400 <read_submessage_list>
 800f896:	4620      	mov	r0, r4
 800f898:	b01f      	add	sp, #124	@ 0x7c
 800f89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f89e:	465f      	mov	r7, fp
 800f8a0:	e7aa      	b.n	800f7f8 <listen_message_reliably+0x118>
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	b01f      	add	sp, #124	@ 0x7c
 800f8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ac:	4629      	mov	r1, r5
 800f8ae:	f106 0008 	add.w	r0, r6, #8
 800f8b2:	f001 fa27 	bl	8010d04 <uxr_get_input_reliable_stream>
 800f8b6:	4681      	mov	r9, r0
 800f8b8:	b338      	cbz	r0, 800f90a <listen_message_reliably+0x22a>
 800f8ba:	a80e      	add	r0, sp, #56	@ 0x38
 800f8bc:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800f8c0:	f7fc fa26 	bl	800bd10 <ucdr_buffer_remaining>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800f8ca:	9000      	str	r0, [sp, #0]
 800f8cc:	465a      	mov	r2, fp
 800f8ce:	4651      	mov	r1, sl
 800f8d0:	4648      	mov	r0, r9
 800f8d2:	f008 f8bb 	bl	8017a4c <uxr_receive_reliable_message>
 800f8d6:	b1c0      	cbz	r0, 800f90a <listen_message_reliably+0x22a>
 800f8d8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800f8dc:	b393      	cbz	r3, 800f944 <listen_message_reliably+0x264>
 800f8de:	af16      	add	r7, sp, #88	@ 0x58
 800f8e0:	f04f 0a02 	mov.w	sl, #2
 800f8e4:	e00a      	b.n	800f8fc <listen_message_reliably+0x21c>
 800f8e6:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800f8ea:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800f8ee:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800f8f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f8f4:	4639      	mov	r1, r7
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	f7ff fd82 	bl	800f400 <read_submessage_list>
 800f8fc:	2204      	movs	r2, #4
 800f8fe:	4639      	mov	r1, r7
 800f900:	4648      	mov	r0, r9
 800f902:	f008 f91d 	bl	8017b40 <uxr_next_input_reliable_buffer_available>
 800f906:	2800      	cmp	r0, #0
 800f908:	d1ed      	bne.n	800f8e6 <listen_message_reliably+0x206>
 800f90a:	4630      	mov	r0, r6
 800f90c:	462a      	mov	r2, r5
 800f90e:	4641      	mov	r1, r8
 800f910:	f7ff fc1a 	bl	800f148 <write_submessage_acknack.isra.0>
 800f914:	4620      	mov	r0, r4
 800f916:	b01f      	add	sp, #124	@ 0x7c
 800f918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f91c:	4629      	mov	r1, r5
 800f91e:	f106 0008 	add.w	r0, r6, #8
 800f922:	f001 f9e5 	bl	8010cf0 <uxr_get_input_best_effort_stream>
 800f926:	2800      	cmp	r0, #0
 800f928:	d090      	beq.n	800f84c <listen_message_reliably+0x16c>
 800f92a:	4651      	mov	r1, sl
 800f92c:	f007 fffe 	bl	801792c <uxr_receive_best_effort_message>
 800f930:	2800      	cmp	r0, #0
 800f932:	d08b      	beq.n	800f84c <listen_message_reliably+0x16c>
 800f934:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800f938:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f93a:	a90e      	add	r1, sp, #56	@ 0x38
 800f93c:	4630      	mov	r0, r6
 800f93e:	f7ff fd5f 	bl	800f400 <read_submessage_list>
 800f942:	e783      	b.n	800f84c <listen_message_reliably+0x16c>
 800f944:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800f948:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f94a:	a90e      	add	r1, sp, #56	@ 0x38
 800f94c:	4630      	mov	r0, r6
 800f94e:	f7ff fd57 	bl	800f400 <read_submessage_list>
 800f952:	e7c4      	b.n	800f8de <listen_message_reliably+0x1fe>

0800f954 <uxr_run_session_timeout>:
 800f954:	b570      	push	{r4, r5, r6, lr}
 800f956:	4604      	mov	r4, r0
 800f958:	460d      	mov	r5, r1
 800f95a:	f001 fa39 	bl	8010dd0 <uxr_millis>
 800f95e:	4606      	mov	r6, r0
 800f960:	4620      	mov	r0, r4
 800f962:	f7ff fc99 	bl	800f298 <uxr_flash_output_streams>
 800f966:	4629      	mov	r1, r5
 800f968:	4620      	mov	r0, r4
 800f96a:	f7ff feb9 	bl	800f6e0 <listen_message_reliably>
 800f96e:	f001 fa2f 	bl	8010dd0 <uxr_millis>
 800f972:	1b81      	subs	r1, r0, r6
 800f974:	1a69      	subs	r1, r5, r1
 800f976:	2900      	cmp	r1, #0
 800f978:	dcf6      	bgt.n	800f968 <uxr_run_session_timeout+0x14>
 800f97a:	f104 0008 	add.w	r0, r4, #8
 800f97e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f982:	f001 b9c9 	b.w	8010d18 <uxr_output_streams_confirmed>
 800f986:	bf00      	nop

0800f988 <uxr_run_session_until_data>:
 800f988:	b570      	push	{r4, r5, r6, lr}
 800f98a:	4604      	mov	r4, r0
 800f98c:	460d      	mov	r5, r1
 800f98e:	f001 fa1f 	bl	8010dd0 <uxr_millis>
 800f992:	4606      	mov	r6, r0
 800f994:	4620      	mov	r0, r4
 800f996:	f7ff fc7f 	bl	800f298 <uxr_flash_output_streams>
 800f99a:	2300      	movs	r3, #0
 800f99c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f9a0:	4629      	mov	r1, r5
 800f9a2:	e005      	b.n	800f9b0 <uxr_run_session_until_data+0x28>
 800f9a4:	f001 fa14 	bl	8010dd0 <uxr_millis>
 800f9a8:	1b81      	subs	r1, r0, r6
 800f9aa:	1a69      	subs	r1, r5, r1
 800f9ac:	2900      	cmp	r1, #0
 800f9ae:	dd07      	ble.n	800f9c0 <uxr_run_session_until_data+0x38>
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	f7ff fe95 	bl	800f6e0 <listen_message_reliably>
 800f9b6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d0f2      	beq.n	800f9a4 <uxr_run_session_until_data+0x1c>
 800f9be:	bd70      	pop	{r4, r5, r6, pc}
 800f9c0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f9c4:	bd70      	pop	{r4, r5, r6, pc}
 800f9c6:	bf00      	nop

0800f9c8 <uxr_run_session_until_confirm_delivery>:
 800f9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9cc:	4606      	mov	r6, r0
 800f9ce:	460d      	mov	r5, r1
 800f9d0:	f001 f9fe 	bl	8010dd0 <uxr_millis>
 800f9d4:	4607      	mov	r7, r0
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	f7ff fc5e 	bl	800f298 <uxr_flash_output_streams>
 800f9dc:	2d00      	cmp	r5, #0
 800f9de:	db16      	blt.n	800fa0e <uxr_run_session_until_confirm_delivery+0x46>
 800f9e0:	462c      	mov	r4, r5
 800f9e2:	f106 0808 	add.w	r8, r6, #8
 800f9e6:	e008      	b.n	800f9fa <uxr_run_session_until_confirm_delivery+0x32>
 800f9e8:	4621      	mov	r1, r4
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f7ff fe78 	bl	800f6e0 <listen_message_reliably>
 800f9f0:	f001 f9ee 	bl	8010dd0 <uxr_millis>
 800f9f4:	1bc1      	subs	r1, r0, r7
 800f9f6:	1a6c      	subs	r4, r5, r1
 800f9f8:	d404      	bmi.n	800fa04 <uxr_run_session_until_confirm_delivery+0x3c>
 800f9fa:	4640      	mov	r0, r8
 800f9fc:	f001 f98c 	bl	8010d18 <uxr_output_streams_confirmed>
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d0f1      	beq.n	800f9e8 <uxr_run_session_until_confirm_delivery+0x20>
 800fa04:	4640      	mov	r0, r8
 800fa06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa0a:	f001 b985 	b.w	8010d18 <uxr_output_streams_confirmed>
 800fa0e:	f106 0808 	add.w	r8, r6, #8
 800fa12:	e7f7      	b.n	800fa04 <uxr_run_session_until_confirm_delivery+0x3c>

0800fa14 <uxr_run_session_until_all_status>:
 800fa14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa18:	9c08      	ldr	r4, [sp, #32]
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	460f      	mov	r7, r1
 800fa1e:	4690      	mov	r8, r2
 800fa20:	461e      	mov	r6, r3
 800fa22:	f7ff fc39 	bl	800f298 <uxr_flash_output_streams>
 800fa26:	b124      	cbz	r4, 800fa32 <uxr_run_session_until_all_status+0x1e>
 800fa28:	4622      	mov	r2, r4
 800fa2a:	21ff      	movs	r1, #255	@ 0xff
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	f00a fa83 	bl	8019f38 <memset>
 800fa32:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800fa36:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800fa38:	f001 f9ca 	bl	8010dd0 <uxr_millis>
 800fa3c:	4639      	mov	r1, r7
 800fa3e:	4681      	mov	r9, r0
 800fa40:	4628      	mov	r0, r5
 800fa42:	f7ff fe4d 	bl	800f6e0 <listen_message_reliably>
 800fa46:	f001 f9c3 	bl	8010dd0 <uxr_millis>
 800fa4a:	eba0 0109 	sub.w	r1, r0, r9
 800fa4e:	1a79      	subs	r1, r7, r1
 800fa50:	b36c      	cbz	r4, 800faae <uxr_run_session_until_all_status+0x9a>
 800fa52:	1e70      	subs	r0, r6, #1
 800fa54:	46c6      	mov	lr, r8
 800fa56:	1902      	adds	r2, r0, r4
 800fa58:	4684      	mov	ip, r0
 800fa5a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800fa5e:	2bff      	cmp	r3, #255	@ 0xff
 800fa60:	d007      	beq.n	800fa72 <uxr_run_session_until_all_status+0x5e>
 800fa62:	4594      	cmp	ip, r2
 800fa64:	d00f      	beq.n	800fa86 <uxr_run_session_until_all_status+0x72>
 800fa66:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800fa6a:	2bff      	cmp	r3, #255	@ 0xff
 800fa6c:	f10e 0e02 	add.w	lr, lr, #2
 800fa70:	d1f7      	bne.n	800fa62 <uxr_run_session_until_all_status+0x4e>
 800fa72:	4594      	cmp	ip, r2
 800fa74:	f8be 3000 	ldrh.w	r3, [lr]
 800fa78:	d014      	beq.n	800faa4 <uxr_run_session_until_all_status+0x90>
 800fa7a:	f10e 0e02 	add.w	lr, lr, #2
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d0eb      	beq.n	800fa5a <uxr_run_session_until_all_status+0x46>
 800fa82:	2900      	cmp	r1, #0
 800fa84:	dcdc      	bgt.n	800fa40 <uxr_run_session_until_all_status+0x2c>
 800fa86:	2300      	movs	r3, #0
 800fa88:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800fa8a:	e001      	b.n	800fa90 <uxr_run_session_until_all_status+0x7c>
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d812      	bhi.n	800fab6 <uxr_run_session_until_all_status+0xa2>
 800fa90:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800fa94:	4290      	cmp	r0, r2
 800fa96:	d1f9      	bne.n	800fa8c <uxr_run_session_until_all_status+0x78>
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	bf8c      	ite	hi
 800fa9c:	2000      	movhi	r0, #0
 800fa9e:	2001      	movls	r0, #1
 800faa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faa4:	2900      	cmp	r1, #0
 800faa6:	ddee      	ble.n	800fa86 <uxr_run_session_until_all_status+0x72>
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d1c9      	bne.n	800fa40 <uxr_run_session_until_all_status+0x2c>
 800faac:	e7eb      	b.n	800fa86 <uxr_run_session_until_all_status+0x72>
 800faae:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800fab0:	2001      	movs	r0, #1
 800fab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fab6:	2000      	movs	r0, #0
 800fab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fabc:	0000      	movs	r0, r0
	...

0800fac0 <uxr_sync_session>:
 800fac0:	b570      	push	{r4, r5, r6, lr}
 800fac2:	b092      	sub	sp, #72	@ 0x48
 800fac4:	4604      	mov	r4, r0
 800fac6:	460d      	mov	r5, r1
 800fac8:	f000 fb84 	bl	80101d4 <uxr_session_header_offset>
 800facc:	2214      	movs	r2, #20
 800face:	eb0d 0102 	add.w	r1, sp, r2
 800fad2:	9000      	str	r0, [sp, #0]
 800fad4:	2300      	movs	r3, #0
 800fad6:	a80a      	add	r0, sp, #40	@ 0x28
 800fad8:	f7fc f8d8 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 800fadc:	2300      	movs	r3, #0
 800fade:	2208      	movs	r2, #8
 800fae0:	210e      	movs	r1, #14
 800fae2:	a80a      	add	r0, sp, #40	@ 0x28
 800fae4:	f001 f92e 	bl	8010d44 <uxr_buffer_submessage_header>
 800fae8:	f001 f98c 	bl	8010e04 <uxr_nanos>
 800faec:	a318      	add	r3, pc, #96	@ (adr r3, 800fb50 <uxr_sync_session+0x90>)
 800faee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf2:	f7f0 ffdb 	bl	8000aac <__aeabi_ldivmod>
 800faf6:	a903      	add	r1, sp, #12
 800faf8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 800fafc:	a80a      	add	r0, sp, #40	@ 0x28
 800fafe:	f002 fb1b 	bl	8012138 <uxr_serialize_TIMESTAMP_Payload>
 800fb02:	2200      	movs	r2, #0
 800fb04:	4611      	mov	r1, r2
 800fb06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb08:	4620      	mov	r0, r4
 800fb0a:	f000 fb0f 	bl	801012c <uxr_stamp_session_header>
 800fb0e:	a80a      	add	r0, sp, #40	@ 0x28
 800fb10:	f7fc f8fa 	bl	800bd08 <ucdr_buffer_length>
 800fb14:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb16:	4602      	mov	r2, r0
 800fb18:	a905      	add	r1, sp, #20
 800fb1a:	e9d3 0600 	ldrd	r0, r6, [r3]
 800fb1e:	47b0      	blx	r6
 800fb20:	f001 f956 	bl	8010dd0 <uxr_millis>
 800fb24:	2300      	movs	r3, #0
 800fb26:	4606      	mov	r6, r0
 800fb28:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800fb2c:	4629      	mov	r1, r5
 800fb2e:	e000      	b.n	800fb32 <uxr_sync_session+0x72>
 800fb30:	b950      	cbnz	r0, 800fb48 <uxr_sync_session+0x88>
 800fb32:	4620      	mov	r0, r4
 800fb34:	f7ff fdd4 	bl	800f6e0 <listen_message_reliably>
 800fb38:	f001 f94a 	bl	8010dd0 <uxr_millis>
 800fb3c:	1b81      	subs	r1, r0, r6
 800fb3e:	1a69      	subs	r1, r5, r1
 800fb40:	2900      	cmp	r1, #0
 800fb42:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800fb46:	dcf3      	bgt.n	800fb30 <uxr_sync_session+0x70>
 800fb48:	b012      	add	sp, #72	@ 0x48
 800fb4a:	bd70      	pop	{r4, r5, r6, pc}
 800fb4c:	f3af 8000 	nop.w
 800fb50:	3b9aca00 	.word	0x3b9aca00
 800fb54:	00000000 	.word	0x00000000

0800fb58 <uxr_run_session_until_pong>:
 800fb58:	b570      	push	{r4, r5, r6, lr}
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	460d      	mov	r5, r1
 800fb5e:	f001 f937 	bl	8010dd0 <uxr_millis>
 800fb62:	4606      	mov	r6, r0
 800fb64:	4620      	mov	r0, r4
 800fb66:	f7ff fb97 	bl	800f298 <uxr_flash_output_streams>
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 800fb70:	4629      	mov	r1, r5
 800fb72:	e005      	b.n	800fb80 <uxr_run_session_until_pong+0x28>
 800fb74:	f001 f92c 	bl	8010dd0 <uxr_millis>
 800fb78:	1b81      	subs	r1, r0, r6
 800fb7a:	1a69      	subs	r1, r5, r1
 800fb7c:	2900      	cmp	r1, #0
 800fb7e:	dd0c      	ble.n	800fb9a <uxr_run_session_until_pong+0x42>
 800fb80:	4620      	mov	r0, r4
 800fb82:	f7ff fdad 	bl	800f6e0 <listen_message_reliably>
 800fb86:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d0f2      	beq.n	800fb74 <uxr_run_session_until_pong+0x1c>
 800fb8e:	f1a0 0001 	sub.w	r0, r0, #1
 800fb92:	fab0 f080 	clz	r0, r0
 800fb96:	0940      	lsrs	r0, r0, #5
 800fb98:	bd70      	pop	{r4, r5, r6, pc}
 800fb9a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800fb9e:	f1a0 0001 	sub.w	r0, r0, #1
 800fba2:	fab0 f080 	clz	r0, r0
 800fba6:	0940      	lsrs	r0, r0, #5
 800fba8:	bd70      	pop	{r4, r5, r6, pc}
 800fbaa:	bf00      	nop

0800fbac <wait_session_status>:
 800fbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb0:	4604      	mov	r4, r0
 800fbb2:	20ff      	movs	r0, #255	@ 0xff
 800fbb4:	b09f      	sub	sp, #124	@ 0x7c
 800fbb6:	7160      	strb	r0, [r4, #5]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f000 80bb 	beq.w	800fd34 <wait_session_status+0x188>
 800fbbe:	4692      	mov	sl, r2
 800fbc0:	469b      	mov	fp, r3
 800fbc2:	f04f 0800 	mov.w	r8, #0
 800fbc6:	9105      	str	r1, [sp, #20]
 800fbc8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fbca:	9905      	ldr	r1, [sp, #20]
 800fbcc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fbd0:	4652      	mov	r2, sl
 800fbd2:	47a8      	blx	r5
 800fbd4:	f001 f8fc 	bl	8010dd0 <uxr_millis>
 800fbd8:	2700      	movs	r7, #0
 800fbda:	4605      	mov	r5, r0
 800fbdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fbe0:	e009      	b.n	800fbf6 <wait_session_status+0x4a>
 800fbe2:	f001 f8f5 	bl	8010dd0 <uxr_millis>
 800fbe6:	1b43      	subs	r3, r0, r5
 800fbe8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	7962      	ldrb	r2, [r4, #5]
 800fbf0:	dd3d      	ble.n	800fc6e <wait_session_status+0xc2>
 800fbf2:	2aff      	cmp	r2, #255	@ 0xff
 800fbf4:	d13b      	bne.n	800fc6e <wait_session_status+0xc2>
 800fbf6:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fbf8:	a90a      	add	r1, sp, #40	@ 0x28
 800fbfa:	6896      	ldr	r6, [r2, #8]
 800fbfc:	6810      	ldr	r0, [r2, #0]
 800fbfe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fc00:	47b0      	blx	r6
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d0ed      	beq.n	800fbe2 <wait_session_status+0x36>
 800fc06:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800fc0a:	a80e      	add	r0, sp, #56	@ 0x38
 800fc0c:	f7fc f850 	bl	800bcb0 <ucdr_init_buffer>
 800fc10:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800fc14:	aa09      	add	r2, sp, #36	@ 0x24
 800fc16:	a90e      	add	r1, sp, #56	@ 0x38
 800fc18:	4620      	mov	r0, r4
 800fc1a:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800fc1e:	f000 fa9b 	bl	8010158 <uxr_read_session_header>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	d0dd      	beq.n	800fbe2 <wait_session_status+0x36>
 800fc26:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	f000 ff8a 	bl	8010b44 <uxr_stream_id_from_raw>
 800fc30:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800fc34:	9304      	str	r3, [sp, #16]
 800fc36:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800fc3a:	b2c3      	uxtb	r3, r0
 800fc3c:	f1b9 0f01 	cmp.w	r9, #1
 800fc40:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800fc44:	9303      	str	r3, [sp, #12]
 800fc46:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fc4a:	d05d      	beq.n	800fd08 <wait_session_status+0x15c>
 800fc4c:	f1b9 0f02 	cmp.w	r9, #2
 800fc50:	d01a      	beq.n	800fc88 <wait_session_status+0xdc>
 800fc52:	f1b9 0f00 	cmp.w	r9, #0
 800fc56:	d1c4      	bne.n	800fbe2 <wait_session_status+0x36>
 800fc58:	4649      	mov	r1, r9
 800fc5a:	4648      	mov	r0, r9
 800fc5c:	f000 ff72 	bl	8010b44 <uxr_stream_id_from_raw>
 800fc60:	a90e      	add	r1, sp, #56	@ 0x38
 800fc62:	4602      	mov	r2, r0
 800fc64:	900d      	str	r0, [sp, #52]	@ 0x34
 800fc66:	4620      	mov	r0, r4
 800fc68:	f7ff fbca 	bl	800f400 <read_submessage_list>
 800fc6c:	e7b9      	b.n	800fbe2 <wait_session_status+0x36>
 800fc6e:	f108 0801 	add.w	r8, r8, #1
 800fc72:	45c3      	cmp	fp, r8
 800fc74:	d001      	beq.n	800fc7a <wait_session_status+0xce>
 800fc76:	2aff      	cmp	r2, #255	@ 0xff
 800fc78:	d0a6      	beq.n	800fbc8 <wait_session_status+0x1c>
 800fc7a:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800fc7e:	bf18      	it	ne
 800fc80:	2001      	movne	r0, #1
 800fc82:	b01f      	add	sp, #124	@ 0x7c
 800fc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc88:	4631      	mov	r1, r6
 800fc8a:	f104 0008 	add.w	r0, r4, #8
 800fc8e:	f001 f839 	bl	8010d04 <uxr_get_input_reliable_stream>
 800fc92:	9006      	str	r0, [sp, #24]
 800fc94:	2800      	cmp	r0, #0
 800fc96:	d031      	beq.n	800fcfc <wait_session_status+0x150>
 800fc98:	aa0e      	add	r2, sp, #56	@ 0x38
 800fc9a:	4610      	mov	r0, r2
 800fc9c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800fc9e:	9207      	str	r2, [sp, #28]
 800fca0:	f7fc f836 	bl	800bd10 <ucdr_buffer_remaining>
 800fca4:	4603      	mov	r3, r0
 800fca6:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800fcaa:	9000      	str	r0, [sp, #0]
 800fcac:	9a07      	ldr	r2, [sp, #28]
 800fcae:	9904      	ldr	r1, [sp, #16]
 800fcb0:	9806      	ldr	r0, [sp, #24]
 800fcb2:	f007 fecb 	bl	8017a4c <uxr_receive_reliable_message>
 800fcb6:	b308      	cbz	r0, 800fcfc <wait_session_status+0x150>
 800fcb8:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d041      	beq.n	800fd44 <wait_session_status+0x198>
 800fcc0:	f8cd 8010 	str.w	r8, [sp, #16]
 800fcc4:	9507      	str	r5, [sp, #28]
 800fcc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fcca:	9d06      	ldr	r5, [sp, #24]
 800fccc:	f04f 0902 	mov.w	r9, #2
 800fcd0:	e00a      	b.n	800fce8 <wait_session_status+0x13c>
 800fcd2:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800fcd6:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800fcda:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800fcde:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fce0:	a916      	add	r1, sp, #88	@ 0x58
 800fce2:	4620      	mov	r0, r4
 800fce4:	f7ff fb8c 	bl	800f400 <read_submessage_list>
 800fce8:	2204      	movs	r2, #4
 800fcea:	a916      	add	r1, sp, #88	@ 0x58
 800fcec:	4628      	mov	r0, r5
 800fcee:	f007 ff27 	bl	8017b40 <uxr_next_input_reliable_buffer_available>
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	d1ed      	bne.n	800fcd2 <wait_session_status+0x126>
 800fcf6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800fcfa:	9d07      	ldr	r5, [sp, #28]
 800fcfc:	9903      	ldr	r1, [sp, #12]
 800fcfe:	4632      	mov	r2, r6
 800fd00:	4620      	mov	r0, r4
 800fd02:	f7ff fa21 	bl	800f148 <write_submessage_acknack.isra.0>
 800fd06:	e76c      	b.n	800fbe2 <wait_session_status+0x36>
 800fd08:	4631      	mov	r1, r6
 800fd0a:	f104 0008 	add.w	r0, r4, #8
 800fd0e:	f000 ffef 	bl	8010cf0 <uxr_get_input_best_effort_stream>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	f43f af65 	beq.w	800fbe2 <wait_session_status+0x36>
 800fd18:	9904      	ldr	r1, [sp, #16]
 800fd1a:	f007 fe07 	bl	801792c <uxr_receive_best_effort_message>
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	f43f af5f 	beq.w	800fbe2 <wait_session_status+0x36>
 800fd24:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800fd28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd2a:	a90e      	add	r1, sp, #56	@ 0x38
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f7ff fb67 	bl	800f400 <read_submessage_list>
 800fd32:	e756      	b.n	800fbe2 <wait_session_status+0x36>
 800fd34:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fd36:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fd3a:	47a0      	blx	r4
 800fd3c:	2001      	movs	r0, #1
 800fd3e:	b01f      	add	sp, #124	@ 0x7c
 800fd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd44:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800fd48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd4a:	a90e      	add	r1, sp, #56	@ 0x38
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f7ff fb57 	bl	800f400 <read_submessage_list>
 800fd52:	e7b5      	b.n	800fcc0 <wait_session_status+0x114>

0800fd54 <uxr_delete_session_retries>:
 800fd54:	b530      	push	{r4, r5, lr}
 800fd56:	b08f      	sub	sp, #60	@ 0x3c
 800fd58:	4604      	mov	r4, r0
 800fd5a:	460d      	mov	r5, r1
 800fd5c:	f000 fa3a 	bl	80101d4 <uxr_session_header_offset>
 800fd60:	2300      	movs	r3, #0
 800fd62:	2210      	movs	r2, #16
 800fd64:	9000      	str	r0, [sp, #0]
 800fd66:	a902      	add	r1, sp, #8
 800fd68:	a806      	add	r0, sp, #24
 800fd6a:	f7fb ff8f 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 800fd6e:	a906      	add	r1, sp, #24
 800fd70:	4620      	mov	r0, r4
 800fd72:	f000 f981 	bl	8010078 <uxr_buffer_delete_session>
 800fd76:	2200      	movs	r2, #0
 800fd78:	4611      	mov	r1, r2
 800fd7a:	9b06      	ldr	r3, [sp, #24]
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f000 f9d5 	bl	801012c <uxr_stamp_session_header>
 800fd82:	a806      	add	r0, sp, #24
 800fd84:	f7fb ffc0 	bl	800bd08 <ucdr_buffer_length>
 800fd88:	462b      	mov	r3, r5
 800fd8a:	4602      	mov	r2, r0
 800fd8c:	a902      	add	r1, sp, #8
 800fd8e:	4620      	mov	r0, r4
 800fd90:	f7ff ff0c 	bl	800fbac <wait_session_status>
 800fd94:	b118      	cbz	r0, 800fd9e <uxr_delete_session_retries+0x4a>
 800fd96:	7960      	ldrb	r0, [r4, #5]
 800fd98:	fab0 f080 	clz	r0, r0
 800fd9c:	0940      	lsrs	r0, r0, #5
 800fd9e:	b00f      	add	sp, #60	@ 0x3c
 800fda0:	bd30      	pop	{r4, r5, pc}
 800fda2:	bf00      	nop

0800fda4 <uxr_create_session>:
 800fda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda8:	f100 0308 	add.w	r3, r0, #8
 800fdac:	b0ab      	sub	sp, #172	@ 0xac
 800fdae:	4604      	mov	r4, r0
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	9303      	str	r3, [sp, #12]
 800fdb4:	f000 feec 	bl	8010b90 <uxr_reset_stream_storage>
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f000 fa0b 	bl	80101d4 <uxr_session_header_offset>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	9000      	str	r0, [sp, #0]
 800fdc2:	221c      	movs	r2, #28
 800fdc4:	a90b      	add	r1, sp, #44	@ 0x2c
 800fdc6:	a812      	add	r0, sp, #72	@ 0x48
 800fdc8:	f7fb ff60 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 800fdcc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fdce:	8a1a      	ldrh	r2, [r3, #16]
 800fdd0:	3a04      	subs	r2, #4
 800fdd2:	b292      	uxth	r2, r2
 800fdd4:	a912      	add	r1, sp, #72	@ 0x48
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f000 f924 	bl	8010024 <uxr_buffer_create_session>
 800fddc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fdde:	4620      	mov	r0, r4
 800fde0:	f000 f990 	bl	8010104 <uxr_stamp_create_session_header>
 800fde4:	a812      	add	r0, sp, #72	@ 0x48
 800fde6:	f7fb ff8f 	bl	800bd08 <ucdr_buffer_length>
 800fdea:	23ff      	movs	r3, #255	@ 0xff
 800fdec:	4683      	mov	fp, r0
 800fdee:	7163      	strb	r3, [r4, #5]
 800fdf0:	f04f 080a 	mov.w	r8, #10
 800fdf4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fdf6:	465a      	mov	r2, fp
 800fdf8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fdfc:	a90b      	add	r1, sp, #44	@ 0x2c
 800fdfe:	47a8      	blx	r5
 800fe00:	f000 ffe6 	bl	8010dd0 <uxr_millis>
 800fe04:	2700      	movs	r7, #0
 800fe06:	4605      	mov	r5, r0
 800fe08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe0c:	e009      	b.n	800fe22 <uxr_create_session+0x7e>
 800fe0e:	f000 ffdf 	bl	8010dd0 <uxr_millis>
 800fe12:	1b43      	subs	r3, r0, r5
 800fe14:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	7962      	ldrb	r2, [r4, #5]
 800fe1c:	dd3d      	ble.n	800fe9a <uxr_create_session+0xf6>
 800fe1e:	2aff      	cmp	r2, #255	@ 0xff
 800fe20:	d13b      	bne.n	800fe9a <uxr_create_session+0xf6>
 800fe22:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fe24:	a907      	add	r1, sp, #28
 800fe26:	6896      	ldr	r6, [r2, #8]
 800fe28:	6810      	ldr	r0, [r2, #0]
 800fe2a:	aa08      	add	r2, sp, #32
 800fe2c:	47b0      	blx	r6
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d0ed      	beq.n	800fe0e <uxr_create_session+0x6a>
 800fe32:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fe36:	a81a      	add	r0, sp, #104	@ 0x68
 800fe38:	f7fb ff3a 	bl	800bcb0 <ucdr_init_buffer>
 800fe3c:	f10d 031a 	add.w	r3, sp, #26
 800fe40:	aa06      	add	r2, sp, #24
 800fe42:	a91a      	add	r1, sp, #104	@ 0x68
 800fe44:	4620      	mov	r0, r4
 800fe46:	f88d 7018 	strb.w	r7, [sp, #24]
 800fe4a:	f000 f985 	bl	8010158 <uxr_read_session_header>
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d0dd      	beq.n	800fe0e <uxr_create_session+0x6a>
 800fe52:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fe56:	2100      	movs	r1, #0
 800fe58:	f000 fe74 	bl	8010b44 <uxr_stream_id_from_raw>
 800fe5c:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800fe60:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800fe64:	9302      	str	r3, [sp, #8]
 800fe66:	f1b9 0f01 	cmp.w	r9, #1
 800fe6a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fe6e:	fa5f fa80 	uxtb.w	sl, r0
 800fe72:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800fe76:	d056      	beq.n	800ff26 <uxr_create_session+0x182>
 800fe78:	f1b9 0f02 	cmp.w	r9, #2
 800fe7c:	d018      	beq.n	800feb0 <uxr_create_session+0x10c>
 800fe7e:	f1b9 0f00 	cmp.w	r9, #0
 800fe82:	d1c4      	bne.n	800fe0e <uxr_create_session+0x6a>
 800fe84:	4649      	mov	r1, r9
 800fe86:	4648      	mov	r0, r9
 800fe88:	f000 fe5c 	bl	8010b44 <uxr_stream_id_from_raw>
 800fe8c:	a91a      	add	r1, sp, #104	@ 0x68
 800fe8e:	4602      	mov	r2, r0
 800fe90:	900a      	str	r0, [sp, #40]	@ 0x28
 800fe92:	4620      	mov	r0, r4
 800fe94:	f7ff fab4 	bl	800f400 <read_submessage_list>
 800fe98:	e7b9      	b.n	800fe0e <uxr_create_session+0x6a>
 800fe9a:	f1b8 0801 	subs.w	r8, r8, #1
 800fe9e:	d001      	beq.n	800fea4 <uxr_create_session+0x100>
 800fea0:	2aff      	cmp	r2, #255	@ 0xff
 800fea2:	d0a7      	beq.n	800fdf4 <uxr_create_session+0x50>
 800fea4:	2a00      	cmp	r2, #0
 800fea6:	d05b      	beq.n	800ff60 <uxr_create_session+0x1bc>
 800fea8:	2000      	movs	r0, #0
 800feaa:	b02b      	add	sp, #172	@ 0xac
 800feac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb0:	9803      	ldr	r0, [sp, #12]
 800feb2:	4631      	mov	r1, r6
 800feb4:	f000 ff26 	bl	8010d04 <uxr_get_input_reliable_stream>
 800feb8:	9004      	str	r0, [sp, #16]
 800feba:	b370      	cbz	r0, 800ff1a <uxr_create_session+0x176>
 800febc:	aa1a      	add	r2, sp, #104	@ 0x68
 800febe:	4610      	mov	r0, r2
 800fec0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fec2:	9205      	str	r2, [sp, #20]
 800fec4:	f7fb ff24 	bl	800bd10 <ucdr_buffer_remaining>
 800fec8:	4603      	mov	r3, r0
 800feca:	f10d 0019 	add.w	r0, sp, #25
 800fece:	9000      	str	r0, [sp, #0]
 800fed0:	9a05      	ldr	r2, [sp, #20]
 800fed2:	9902      	ldr	r1, [sp, #8]
 800fed4:	9804      	ldr	r0, [sp, #16]
 800fed6:	f007 fdb9 	bl	8017a4c <uxr_receive_reliable_message>
 800feda:	b1f0      	cbz	r0, 800ff1a <uxr_create_session+0x176>
 800fedc:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d035      	beq.n	800ff50 <uxr_create_session+0x1ac>
 800fee4:	f8cd b008 	str.w	fp, [sp, #8]
 800fee8:	f04f 0902 	mov.w	r9, #2
 800feec:	f8dd b010 	ldr.w	fp, [sp, #16]
 800fef0:	e00a      	b.n	800ff08 <uxr_create_session+0x164>
 800fef2:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800fef6:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800fefa:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800fefe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff00:	a922      	add	r1, sp, #136	@ 0x88
 800ff02:	4620      	mov	r0, r4
 800ff04:	f7ff fa7c 	bl	800f400 <read_submessage_list>
 800ff08:	2204      	movs	r2, #4
 800ff0a:	a922      	add	r1, sp, #136	@ 0x88
 800ff0c:	4658      	mov	r0, fp
 800ff0e:	f007 fe17 	bl	8017b40 <uxr_next_input_reliable_buffer_available>
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d1ed      	bne.n	800fef2 <uxr_create_session+0x14e>
 800ff16:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ff1a:	4632      	mov	r2, r6
 800ff1c:	4651      	mov	r1, sl
 800ff1e:	4620      	mov	r0, r4
 800ff20:	f7ff f912 	bl	800f148 <write_submessage_acknack.isra.0>
 800ff24:	e773      	b.n	800fe0e <uxr_create_session+0x6a>
 800ff26:	9803      	ldr	r0, [sp, #12]
 800ff28:	4631      	mov	r1, r6
 800ff2a:	f000 fee1 	bl	8010cf0 <uxr_get_input_best_effort_stream>
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	f43f af6d 	beq.w	800fe0e <uxr_create_session+0x6a>
 800ff34:	9902      	ldr	r1, [sp, #8]
 800ff36:	f007 fcf9 	bl	801792c <uxr_receive_best_effort_message>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	f43f af67 	beq.w	800fe0e <uxr_create_session+0x6a>
 800ff40:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800ff44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff46:	a91a      	add	r1, sp, #104	@ 0x68
 800ff48:	4620      	mov	r0, r4
 800ff4a:	f7ff fa59 	bl	800f400 <read_submessage_list>
 800ff4e:	e75e      	b.n	800fe0e <uxr_create_session+0x6a>
 800ff50:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800ff54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ff56:	a91a      	add	r1, sp, #104	@ 0x68
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f7ff fa51 	bl	800f400 <read_submessage_list>
 800ff5e:	e7c1      	b.n	800fee4 <uxr_create_session+0x140>
 800ff60:	9803      	ldr	r0, [sp, #12]
 800ff62:	f000 fe15 	bl	8010b90 <uxr_reset_stream_storage>
 800ff66:	2001      	movs	r0, #1
 800ff68:	b02b      	add	sp, #172	@ 0xac
 800ff6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff6e:	bf00      	nop

0800ff70 <uxr_prepare_stream_to_write_submessage>:
 800ff70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff74:	b082      	sub	sp, #8
 800ff76:	4606      	mov	r6, r0
 800ff78:	4610      	mov	r0, r2
 800ff7a:	4614      	mov	r4, r2
 800ff7c:	9101      	str	r1, [sp, #4]
 800ff7e:	461f      	mov	r7, r3
 800ff80:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800ff84:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800ff88:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800ff8c:	f000 ff1a 	bl	8010dc4 <uxr_submessage_padding>
 800ff90:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff94:	1d21      	adds	r1, r4, #4
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	eb01 0a00 	add.w	sl, r1, r0
 800ff9c:	d012      	beq.n	800ffc4 <uxr_prepare_stream_to_write_submessage+0x54>
 800ff9e:	2b02      	cmp	r3, #2
 800ffa0:	d003      	beq.n	800ffaa <uxr_prepare_stream_to_write_submessage+0x3a>
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	b002      	add	sp, #8
 800ffa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffaa:	4629      	mov	r1, r5
 800ffac:	f106 0008 	add.w	r0, r6, #8
 800ffb0:	f000 fe94 	bl	8010cdc <uxr_get_output_reliable_stream>
 800ffb4:	2800      	cmp	r0, #0
 800ffb6:	d0f4      	beq.n	800ffa2 <uxr_prepare_stream_to_write_submessage+0x32>
 800ffb8:	4651      	mov	r1, sl
 800ffba:	463a      	mov	r2, r7
 800ffbc:	f007 ff76 	bl	8017eac <uxr_prepare_reliable_buffer_to_write>
 800ffc0:	b968      	cbnz	r0, 800ffde <uxr_prepare_stream_to_write_submessage+0x6e>
 800ffc2:	e7ee      	b.n	800ffa2 <uxr_prepare_stream_to_write_submessage+0x32>
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	f106 0008 	add.w	r0, r6, #8
 800ffca:	f000 fe7f 	bl	8010ccc <uxr_get_output_best_effort_stream>
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	d0e7      	beq.n	800ffa2 <uxr_prepare_stream_to_write_submessage+0x32>
 800ffd2:	4651      	mov	r1, sl
 800ffd4:	463a      	mov	r2, r7
 800ffd6:	f007 fe9b 	bl	8017d10 <uxr_prepare_best_effort_buffer_to_write>
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	d0e1      	beq.n	800ffa2 <uxr_prepare_stream_to_write_submessage+0x32>
 800ffde:	464b      	mov	r3, r9
 800ffe0:	b2a2      	uxth	r2, r4
 800ffe2:	4641      	mov	r1, r8
 800ffe4:	4638      	mov	r0, r7
 800ffe6:	f000 fead 	bl	8010d44 <uxr_buffer_submessage_header>
 800ffea:	2001      	movs	r0, #1
 800ffec:	b002      	add	sp, #8
 800ffee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fff2:	bf00      	nop

0800fff4 <uxr_init_session_info>:
 800fff4:	2300      	movs	r3, #0
 800fff6:	f361 0307 	bfi	r3, r1, #0, #8
 800fffa:	0e11      	lsrs	r1, r2, #24
 800fffc:	f361 230f 	bfi	r3, r1, #8, #8
 8010000:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8010004:	f361 4317 	bfi	r3, r1, #16, #8
 8010008:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801000c:	f361 631f 	bfi	r3, r1, #24, #8
 8010010:	f04f 0c09 	mov.w	ip, #9
 8010014:	21ff      	movs	r1, #255	@ 0xff
 8010016:	6003      	str	r3, [r0, #0]
 8010018:	7102      	strb	r2, [r0, #4]
 801001a:	f8a0 c006 	strh.w	ip, [r0, #6]
 801001e:	7141      	strb	r1, [r0, #5]
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop

08010024 <uxr_buffer_create_session>:
 8010024:	b530      	push	{r4, r5, lr}
 8010026:	4d13      	ldr	r5, [pc, #76]	@ (8010074 <uxr_buffer_create_session+0x50>)
 8010028:	b089      	sub	sp, #36	@ 0x24
 801002a:	2300      	movs	r3, #0
 801002c:	9307      	str	r3, [sp, #28]
 801002e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010032:	682a      	ldr	r2, [r5, #0]
 8010034:	9200      	str	r2, [sp, #0]
 8010036:	460c      	mov	r4, r1
 8010038:	2201      	movs	r2, #1
 801003a:	88a9      	ldrh	r1, [r5, #4]
 801003c:	9301      	str	r3, [sp, #4]
 801003e:	80c2      	strh	r2, [r0, #6]
 8010040:	f8ad 1006 	strh.w	r1, [sp, #6]
 8010044:	f8d0 1001 	ldr.w	r1, [r0, #1]
 8010048:	7800      	ldrb	r0, [r0, #0]
 801004a:	9303      	str	r3, [sp, #12]
 801004c:	f88d 2004 	strb.w	r2, [sp, #4]
 8010050:	9102      	str	r1, [sp, #8]
 8010052:	2210      	movs	r2, #16
 8010054:	4619      	mov	r1, r3
 8010056:	f88d 000c 	strb.w	r0, [sp, #12]
 801005a:	4620      	mov	r0, r4
 801005c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8010060:	9306      	str	r3, [sp, #24]
 8010062:	f000 fe6f 	bl	8010d44 <uxr_buffer_submessage_header>
 8010066:	4669      	mov	r1, sp
 8010068:	4620      	mov	r0, r4
 801006a:	f001 fe8f 	bl	8011d8c <uxr_serialize_CREATE_CLIENT_Payload>
 801006e:	b009      	add	sp, #36	@ 0x24
 8010070:	bd30      	pop	{r4, r5, pc}
 8010072:	bf00      	nop
 8010074:	0801b8cc 	.word	0x0801b8cc

08010078 <uxr_buffer_delete_session>:
 8010078:	b510      	push	{r4, lr}
 801007a:	4a0c      	ldr	r2, [pc, #48]	@ (80100ac <uxr_buffer_delete_session+0x34>)
 801007c:	b082      	sub	sp, #8
 801007e:	460c      	mov	r4, r1
 8010080:	2302      	movs	r3, #2
 8010082:	8911      	ldrh	r1, [r2, #8]
 8010084:	80c3      	strh	r3, [r0, #6]
 8010086:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801008a:	2300      	movs	r3, #0
 801008c:	2204      	movs	r2, #4
 801008e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8010092:	4620      	mov	r0, r4
 8010094:	2103      	movs	r1, #3
 8010096:	f8ad c004 	strh.w	ip, [sp, #4]
 801009a:	f000 fe53 	bl	8010d44 <uxr_buffer_submessage_header>
 801009e:	a901      	add	r1, sp, #4
 80100a0:	4620      	mov	r0, r4
 80100a2:	f001 ff2b 	bl	8011efc <uxr_serialize_DELETE_Payload>
 80100a6:	b002      	add	sp, #8
 80100a8:	bd10      	pop	{r4, pc}
 80100aa:	bf00      	nop
 80100ac:	0801b8cc 	.word	0x0801b8cc

080100b0 <uxr_read_create_session_status>:
 80100b0:	b510      	push	{r4, lr}
 80100b2:	460b      	mov	r3, r1
 80100b4:	b088      	sub	sp, #32
 80100b6:	4604      	mov	r4, r0
 80100b8:	a901      	add	r1, sp, #4
 80100ba:	4618      	mov	r0, r3
 80100bc:	f001 ff2e 	bl	8011f1c <uxr_deserialize_STATUS_AGENT_Payload>
 80100c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80100c4:	7163      	strb	r3, [r4, #5]
 80100c6:	b008      	add	sp, #32
 80100c8:	bd10      	pop	{r4, pc}
 80100ca:	bf00      	nop

080100cc <uxr_read_delete_session_status>:
 80100cc:	b510      	push	{r4, lr}
 80100ce:	460b      	mov	r3, r1
 80100d0:	b082      	sub	sp, #8
 80100d2:	4604      	mov	r4, r0
 80100d4:	4669      	mov	r1, sp
 80100d6:	4618      	mov	r0, r3
 80100d8:	f001 ff50 	bl	8011f7c <uxr_deserialize_STATUS_Payload>
 80100dc:	88e3      	ldrh	r3, [r4, #6]
 80100de:	2b02      	cmp	r3, #2
 80100e0:	d001      	beq.n	80100e6 <uxr_read_delete_session_status+0x1a>
 80100e2:	b002      	add	sp, #8
 80100e4:	bd10      	pop	{r4, pc}
 80100e6:	f10d 0002 	add.w	r0, sp, #2
 80100ea:	f7fe feab 	bl	800ee44 <uxr_object_id_from_raw>
 80100ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80100f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80100f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80100fa:	bf08      	it	eq
 80100fc:	7162      	strbeq	r2, [r4, #5]
 80100fe:	b002      	add	sp, #8
 8010100:	bd10      	pop	{r4, pc}
 8010102:	bf00      	nop

08010104 <uxr_stamp_create_session_header>:
 8010104:	b510      	push	{r4, lr}
 8010106:	2208      	movs	r2, #8
 8010108:	b08a      	sub	sp, #40	@ 0x28
 801010a:	4604      	mov	r4, r0
 801010c:	eb0d 0002 	add.w	r0, sp, r2
 8010110:	f7fb fdce 	bl	800bcb0 <ucdr_init_buffer>
 8010114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010118:	9400      	str	r4, [sp, #0]
 801011a:	2300      	movs	r3, #0
 801011c:	461a      	mov	r2, r3
 801011e:	a802      	add	r0, sp, #8
 8010120:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8010124:	f001 f80c 	bl	8011140 <uxr_serialize_message_header>
 8010128:	b00a      	add	sp, #40	@ 0x28
 801012a:	bd10      	pop	{r4, pc}

0801012c <uxr_stamp_session_header>:
 801012c:	b570      	push	{r4, r5, r6, lr}
 801012e:	4604      	mov	r4, r0
 8010130:	b08a      	sub	sp, #40	@ 0x28
 8010132:	4616      	mov	r6, r2
 8010134:	2208      	movs	r2, #8
 8010136:	eb0d 0002 	add.w	r0, sp, r2
 801013a:	460d      	mov	r5, r1
 801013c:	4619      	mov	r1, r3
 801013e:	f7fb fdb7 	bl	800bcb0 <ucdr_init_buffer>
 8010142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010146:	9400      	str	r4, [sp, #0]
 8010148:	4633      	mov	r3, r6
 801014a:	462a      	mov	r2, r5
 801014c:	a802      	add	r0, sp, #8
 801014e:	f000 fff7 	bl	8011140 <uxr_serialize_message_header>
 8010152:	b00a      	add	sp, #40	@ 0x28
 8010154:	bd70      	pop	{r4, r5, r6, pc}
 8010156:	bf00      	nop

08010158 <uxr_read_session_header>:
 8010158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801015a:	4607      	mov	r7, r0
 801015c:	b085      	sub	sp, #20
 801015e:	4608      	mov	r0, r1
 8010160:	460c      	mov	r4, r1
 8010162:	4615      	mov	r5, r2
 8010164:	461e      	mov	r6, r3
 8010166:	f7fb fdd3 	bl	800bd10 <ucdr_buffer_remaining>
 801016a:	2808      	cmp	r0, #8
 801016c:	d802      	bhi.n	8010174 <uxr_read_session_header+0x1c>
 801016e:	2000      	movs	r0, #0
 8010170:	b005      	add	sp, #20
 8010172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010174:	ab03      	add	r3, sp, #12
 8010176:	9300      	str	r3, [sp, #0]
 8010178:	462a      	mov	r2, r5
 801017a:	4633      	mov	r3, r6
 801017c:	f10d 010b 	add.w	r1, sp, #11
 8010180:	4620      	mov	r0, r4
 8010182:	f000 fffb 	bl	801117c <uxr_deserialize_message_header>
 8010186:	783a      	ldrb	r2, [r7, #0]
 8010188:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801018c:	4293      	cmp	r3, r2
 801018e:	d1ee      	bne.n	801016e <uxr_read_session_header+0x16>
 8010190:	061b      	lsls	r3, r3, #24
 8010192:	d41c      	bmi.n	80101ce <uxr_read_session_header+0x76>
 8010194:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8010198:	787b      	ldrb	r3, [r7, #1]
 801019a:	429a      	cmp	r2, r3
 801019c:	d003      	beq.n	80101a6 <uxr_read_session_header+0x4e>
 801019e:	2001      	movs	r0, #1
 80101a0:	f080 0001 	eor.w	r0, r0, #1
 80101a4:	e7e4      	b.n	8010170 <uxr_read_session_header+0x18>
 80101a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80101aa:	78bb      	ldrb	r3, [r7, #2]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	f107 0102 	add.w	r1, r7, #2
 80101b2:	d1f4      	bne.n	801019e <uxr_read_session_header+0x46>
 80101b4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80101b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80101bc:	429a      	cmp	r2, r3
 80101be:	d1ee      	bne.n	801019e <uxr_read_session_header+0x46>
 80101c0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80101c4:	784b      	ldrb	r3, [r1, #1]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d1e9      	bne.n	801019e <uxr_read_session_header+0x46>
 80101ca:	2000      	movs	r0, #0
 80101cc:	e7e8      	b.n	80101a0 <uxr_read_session_header+0x48>
 80101ce:	2001      	movs	r0, #1
 80101d0:	e7ce      	b.n	8010170 <uxr_read_session_header+0x18>
 80101d2:	bf00      	nop

080101d4 <uxr_session_header_offset>:
 80101d4:	f990 3000 	ldrsb.w	r3, [r0]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	bfb4      	ite	lt
 80101dc:	2004      	movlt	r0, #4
 80101de:	2008      	movge	r0, #8
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop

080101e4 <uxr_init_base_object_request>:
 80101e4:	b510      	push	{r4, lr}
 80101e6:	88c3      	ldrh	r3, [r0, #6]
 80101e8:	b082      	sub	sp, #8
 80101ea:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80101ee:	9101      	str	r1, [sp, #4]
 80101f0:	f1a3 010a 	sub.w	r1, r3, #10
 80101f4:	b289      	uxth	r1, r1
 80101f6:	42a1      	cmp	r1, r4
 80101f8:	d80e      	bhi.n	8010218 <uxr_init_base_object_request+0x34>
 80101fa:	3301      	adds	r3, #1
 80101fc:	b29c      	uxth	r4, r3
 80101fe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010202:	b2db      	uxtb	r3, r3
 8010204:	80c4      	strh	r4, [r0, #6]
 8010206:	9801      	ldr	r0, [sp, #4]
 8010208:	7011      	strb	r1, [r2, #0]
 801020a:	7053      	strb	r3, [r2, #1]
 801020c:	1c91      	adds	r1, r2, #2
 801020e:	f7fe fe2d 	bl	800ee6c <uxr_object_id_to_raw>
 8010212:	4620      	mov	r0, r4
 8010214:	b002      	add	sp, #8
 8010216:	bd10      	pop	{r4, pc}
 8010218:	230a      	movs	r3, #10
 801021a:	2100      	movs	r1, #0
 801021c:	461c      	mov	r4, r3
 801021e:	e7f1      	b.n	8010204 <uxr_init_base_object_request+0x20>

08010220 <uxr_parse_base_object_request>:
 8010220:	b570      	push	{r4, r5, r6, lr}
 8010222:	4604      	mov	r4, r0
 8010224:	3002      	adds	r0, #2
 8010226:	460d      	mov	r5, r1
 8010228:	4616      	mov	r6, r2
 801022a:	f7fe fe0b 	bl	800ee44 <uxr_object_id_from_raw>
 801022e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8010232:	8028      	strh	r0, [r5, #0]
 8010234:	806b      	strh	r3, [r5, #2]
 8010236:	8823      	ldrh	r3, [r4, #0]
 8010238:	ba5b      	rev16	r3, r3
 801023a:	8033      	strh	r3, [r6, #0]
 801023c:	bd70      	pop	{r4, r5, r6, pc}
 801023e:	bf00      	nop

08010240 <uxr_init_framing_io>:
 8010240:	2300      	movs	r3, #0
 8010242:	7041      	strb	r1, [r0, #1]
 8010244:	7003      	strb	r3, [r0, #0]
 8010246:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop

0801024c <uxr_write_framed_msg>:
 801024c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010250:	f890 c001 	ldrb.w	ip, [r0, #1]
 8010254:	4617      	mov	r7, r2
 8010256:	227e      	movs	r2, #126	@ 0x7e
 8010258:	b085      	sub	sp, #20
 801025a:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 801025e:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 8010262:	2a01      	cmp	r2, #1
 8010264:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8010268:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 801026c:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010270:	4604      	mov	r4, r0
 8010272:	460e      	mov	r6, r1
 8010274:	469a      	mov	sl, r3
 8010276:	f240 812e 	bls.w	80104d6 <uxr_write_framed_msg+0x28a>
 801027a:	2003      	movs	r0, #3
 801027c:	2102      	movs	r1, #2
 801027e:	f04f 0905 	mov.w	r9, #5
 8010282:	2204      	movs	r2, #4
 8010284:	4686      	mov	lr, r0
 8010286:	460b      	mov	r3, r1
 8010288:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 801028c:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8010290:	f1bc 0f01 	cmp.w	ip, #1
 8010294:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010298:	4421      	add	r1, r4
 801029a:	f240 8110 	bls.w	80104be <uxr_write_framed_msg+0x272>
 801029e:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80102a2:	fa5f fc8b 	uxtb.w	ip, fp
 80102a6:	f3cb 2107 	ubfx	r1, fp, #8, #8
 80102aa:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 80102ae:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 80102b2:	f1be 0f01 	cmp.w	lr, #1
 80102b6:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 80102ba:	b2ed      	uxtb	r5, r5
 80102bc:	d94c      	bls.n	8010358 <uxr_write_framed_msg+0x10c>
 80102be:	4420      	add	r0, r4
 80102c0:	2d01      	cmp	r5, #1
 80102c2:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80102c6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80102ca:	d95d      	bls.n	8010388 <uxr_write_framed_msg+0x13c>
 80102cc:	18a0      	adds	r0, r4, r2
 80102ce:	3201      	adds	r2, #1
 80102d0:	b2d2      	uxtb	r2, r2
 80102d2:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80102d6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80102da:	f1bb 0f00 	cmp.w	fp, #0
 80102de:	f000 8108 	beq.w	80104f2 <uxr_write_framed_msg+0x2a6>
 80102e2:	f04f 0c00 	mov.w	ip, #0
 80102e6:	4661      	mov	r1, ip
 80102e8:	46de      	mov	lr, fp
 80102ea:	46e3      	mov	fp, ip
 80102ec:	46d4      	mov	ip, sl
 80102ee:	468a      	mov	sl, r1
 80102f0:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 80104fc <uxr_write_framed_msg+0x2b0>
 80102f4:	f81c 300a 	ldrb.w	r3, [ip, sl]
 80102f8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80102fc:	2901      	cmp	r1, #1
 80102fe:	d91b      	bls.n	8010338 <uxr_write_framed_msg+0xec>
 8010300:	2a29      	cmp	r2, #41	@ 0x29
 8010302:	d84e      	bhi.n	80103a2 <uxr_write_framed_msg+0x156>
 8010304:	18a1      	adds	r1, r4, r2
 8010306:	3201      	adds	r2, #1
 8010308:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801030c:	b2d2      	uxtb	r2, r2
 801030e:	ea8b 0303 	eor.w	r3, fp, r3
 8010312:	b2db      	uxtb	r3, r3
 8010314:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010318:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 801031c:	f10a 0a01 	add.w	sl, sl, #1
 8010320:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 8010324:	45d6      	cmp	lr, sl
 8010326:	d95a      	bls.n	80103de <uxr_write_framed_msg+0x192>
 8010328:	f81c 300a 	ldrb.w	r3, [ip, sl]
 801032c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010330:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8010334:	2901      	cmp	r1, #1
 8010336:	d8e3      	bhi.n	8010300 <uxr_write_framed_msg+0xb4>
 8010338:	1c51      	adds	r1, r2, #1
 801033a:	b2c9      	uxtb	r1, r1
 801033c:	2929      	cmp	r1, #41	@ 0x29
 801033e:	d830      	bhi.n	80103a2 <uxr_write_framed_msg+0x156>
 8010340:	18a1      	adds	r1, r4, r2
 8010342:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 8010346:	3202      	adds	r2, #2
 8010348:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801034c:	f083 0020 	eor.w	r0, r3, #32
 8010350:	b2d2      	uxtb	r2, r2
 8010352:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 8010356:	e7da      	b.n	801030e <uxr_write_framed_msg+0xc2>
 8010358:	eb04 0e00 	add.w	lr, r4, r0
 801035c:	f08c 0c20 	eor.w	ip, ip, #32
 8010360:	1c82      	adds	r2, r0, #2
 8010362:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 8010366:	b2d2      	uxtb	r2, r2
 8010368:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801036c:	2d01      	cmp	r5, #1
 801036e:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 8010372:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010376:	d907      	bls.n	8010388 <uxr_write_framed_msg+0x13c>
 8010378:	4422      	add	r2, r4
 801037a:	3003      	adds	r0, #3
 801037c:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 8010380:	b2c2      	uxtb	r2, r0
 8010382:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010386:	e7ac      	b.n	80102e2 <uxr_write_framed_msg+0x96>
 8010388:	18a0      	adds	r0, r4, r2
 801038a:	f081 0120 	eor.w	r1, r1, #32
 801038e:	3202      	adds	r2, #2
 8010390:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8010394:	b2d2      	uxtb	r2, r2
 8010396:	217d      	movs	r1, #125	@ 0x7d
 8010398:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801039c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80103a0:	e79f      	b.n	80102e2 <uxr_write_framed_msg+0x96>
 80103a2:	e9cd ba00 	strd	fp, sl, [sp]
 80103a6:	2500      	movs	r5, #0
 80103a8:	46e2      	mov	sl, ip
 80103aa:	46f3      	mov	fp, lr
 80103ac:	e000      	b.n	80103b0 <uxr_write_framed_msg+0x164>
 80103ae:	b190      	cbz	r0, 80103d6 <uxr_write_framed_msg+0x18a>
 80103b0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80103b4:	1b52      	subs	r2, r2, r5
 80103b6:	4643      	mov	r3, r8
 80103b8:	4421      	add	r1, r4
 80103ba:	4638      	mov	r0, r7
 80103bc:	47b0      	blx	r6
 80103be:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80103c2:	4405      	add	r5, r0
 80103c4:	4295      	cmp	r5, r2
 80103c6:	d3f2      	bcc.n	80103ae <uxr_write_framed_msg+0x162>
 80103c8:	46d4      	mov	ip, sl
 80103ca:	46de      	mov	lr, fp
 80103cc:	f8dd a004 	ldr.w	sl, [sp, #4]
 80103d0:	f8dd b000 	ldr.w	fp, [sp]
 80103d4:	d06f      	beq.n	80104b6 <uxr_write_framed_msg+0x26a>
 80103d6:	2000      	movs	r0, #0
 80103d8:	b005      	add	sp, #20
 80103da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103de:	46dc      	mov	ip, fp
 80103e0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80103e4:	f8ad c00c 	strh.w	ip, [sp, #12]
 80103e8:	46f3      	mov	fp, lr
 80103ea:	fa5f fc8c 	uxtb.w	ip, ip
 80103ee:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	f04f 0900 	mov.w	r9, #0
 80103f8:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 80103fc:	d930      	bls.n	8010460 <uxr_write_framed_msg+0x214>
 80103fe:	2a29      	cmp	r2, #41	@ 0x29
 8010400:	d91c      	bls.n	801043c <uxr_write_framed_msg+0x1f0>
 8010402:	2500      	movs	r5, #0
 8010404:	e001      	b.n	801040a <uxr_write_framed_msg+0x1be>
 8010406:	2800      	cmp	r0, #0
 8010408:	d0e5      	beq.n	80103d6 <uxr_write_framed_msg+0x18a>
 801040a:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801040e:	1b52      	subs	r2, r2, r5
 8010410:	4643      	mov	r3, r8
 8010412:	4421      	add	r1, r4
 8010414:	4638      	mov	r0, r7
 8010416:	47b0      	blx	r6
 8010418:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801041c:	4405      	add	r5, r0
 801041e:	4295      	cmp	r5, r2
 8010420:	d3f1      	bcc.n	8010406 <uxr_write_framed_msg+0x1ba>
 8010422:	d1d8      	bne.n	80103d6 <uxr_write_framed_msg+0x18a>
 8010424:	f109 0310 	add.w	r3, r9, #16
 8010428:	446b      	add	r3, sp
 801042a:	2200      	movs	r2, #0
 801042c:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 8010430:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010434:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8010438:	2b01      	cmp	r3, #1
 801043a:	d911      	bls.n	8010460 <uxr_write_framed_msg+0x214>
 801043c:	18a3      	adds	r3, r4, r2
 801043e:	3201      	adds	r2, #1
 8010440:	b2d2      	uxtb	r2, r2
 8010442:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8010446:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801044a:	f1b9 0f00 	cmp.w	r9, #0
 801044e:	d119      	bne.n	8010484 <uxr_write_framed_msg+0x238>
 8010450:	f89d c00d 	ldrb.w	ip, [sp, #13]
 8010454:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8010458:	2b01      	cmp	r3, #1
 801045a:	f04f 0901 	mov.w	r9, #1
 801045e:	d8ce      	bhi.n	80103fe <uxr_write_framed_msg+0x1b2>
 8010460:	1c53      	adds	r3, r2, #1
 8010462:	b2db      	uxtb	r3, r3
 8010464:	2b29      	cmp	r3, #41	@ 0x29
 8010466:	d8cc      	bhi.n	8010402 <uxr_write_framed_msg+0x1b6>
 8010468:	18a3      	adds	r3, r4, r2
 801046a:	3202      	adds	r2, #2
 801046c:	f08c 0c20 	eor.w	ip, ip, #32
 8010470:	b2d2      	uxtb	r2, r2
 8010472:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 8010476:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 801047a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801047e:	f1b9 0f00 	cmp.w	r9, #0
 8010482:	d0e5      	beq.n	8010450 <uxr_write_framed_msg+0x204>
 8010484:	2500      	movs	r5, #0
 8010486:	e001      	b.n	801048c <uxr_write_framed_msg+0x240>
 8010488:	2800      	cmp	r0, #0
 801048a:	d0a4      	beq.n	80103d6 <uxr_write_framed_msg+0x18a>
 801048c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010490:	1b52      	subs	r2, r2, r5
 8010492:	4643      	mov	r3, r8
 8010494:	4421      	add	r1, r4
 8010496:	4638      	mov	r0, r7
 8010498:	47b0      	blx	r6
 801049a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801049e:	4405      	add	r5, r0
 80104a0:	4295      	cmp	r5, r2
 80104a2:	d3f1      	bcc.n	8010488 <uxr_write_framed_msg+0x23c>
 80104a4:	d197      	bne.n	80103d6 <uxr_write_framed_msg+0x18a>
 80104a6:	2300      	movs	r3, #0
 80104a8:	fa1f f08b 	uxth.w	r0, fp
 80104ac:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80104b0:	b005      	add	sp, #20
 80104b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104b6:	2300      	movs	r3, #0
 80104b8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80104bc:	e732      	b.n	8010324 <uxr_write_framed_msg+0xd8>
 80104be:	44a6      	add	lr, r4
 80104c0:	f085 0520 	eor.w	r5, r5, #32
 80104c4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80104c8:	4610      	mov	r0, r2
 80104ca:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80104ce:	464a      	mov	r2, r9
 80104d0:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 80104d4:	e6e5      	b.n	80102a2 <uxr_write_framed_msg+0x56>
 80104d6:	f08c 0c20 	eor.w	ip, ip, #32
 80104da:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 80104de:	2103      	movs	r1, #3
 80104e0:	2004      	movs	r0, #4
 80104e2:	f04f 0906 	mov.w	r9, #6
 80104e6:	2205      	movs	r2, #5
 80104e8:	4686      	mov	lr, r0
 80104ea:	460b      	mov	r3, r1
 80104ec:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80104f0:	e6ca      	b.n	8010288 <uxr_write_framed_msg+0x3c>
 80104f2:	f8ad b00c 	strh.w	fp, [sp, #12]
 80104f6:	46dc      	mov	ip, fp
 80104f8:	e779      	b.n	80103ee <uxr_write_framed_msg+0x1a2>
 80104fa:	bf00      	nop
 80104fc:	0801c5e8 	.word	0x0801c5e8

08010500 <uxr_framing_read_transport>:
 8010500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010504:	4604      	mov	r4, r0
 8010506:	b083      	sub	sp, #12
 8010508:	461f      	mov	r7, r3
 801050a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801050e:	4689      	mov	r9, r1
 8010510:	4692      	mov	sl, r2
 8010512:	f000 fc5d 	bl	8010dd0 <uxr_millis>
 8010516:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801051a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801051e:	42b3      	cmp	r3, r6
 8010520:	4680      	mov	r8, r0
 8010522:	d062      	beq.n	80105ea <uxr_framing_read_transport+0xea>
 8010524:	d81c      	bhi.n	8010560 <uxr_framing_read_transport+0x60>
 8010526:	1e75      	subs	r5, r6, #1
 8010528:	1aed      	subs	r5, r5, r3
 801052a:	b2ed      	uxtb	r5, r5
 801052c:	2600      	movs	r6, #0
 801052e:	455d      	cmp	r5, fp
 8010530:	d81f      	bhi.n	8010572 <uxr_framing_read_transport+0x72>
 8010532:	19ab      	adds	r3, r5, r6
 8010534:	455b      	cmp	r3, fp
 8010536:	bf84      	itt	hi
 8010538:	ebab 0b05 	subhi.w	fp, fp, r5
 801053c:	fa5f f68b 	uxtbhi.w	r6, fp
 8010540:	b9e5      	cbnz	r5, 801057c <uxr_framing_read_transport+0x7c>
 8010542:	f04f 0b00 	mov.w	fp, #0
 8010546:	f000 fc43 	bl	8010dd0 <uxr_millis>
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	eba0 0108 	sub.w	r1, r0, r8
 8010550:	1a5b      	subs	r3, r3, r1
 8010552:	4658      	mov	r0, fp
 8010554:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010558:	603b      	str	r3, [r7, #0]
 801055a:	b003      	add	sp, #12
 801055c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010560:	2e00      	cmp	r6, #0
 8010562:	d04a      	beq.n	80105fa <uxr_framing_read_transport+0xfa>
 8010564:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8010568:	b2dd      	uxtb	r5, r3
 801056a:	3e01      	subs	r6, #1
 801056c:	455d      	cmp	r5, fp
 801056e:	b2f6      	uxtb	r6, r6
 8010570:	d9df      	bls.n	8010532 <uxr_framing_read_transport+0x32>
 8010572:	fa5f f58b 	uxtb.w	r5, fp
 8010576:	2600      	movs	r6, #0
 8010578:	2d00      	cmp	r5, #0
 801057a:	d0e2      	beq.n	8010542 <uxr_framing_read_transport+0x42>
 801057c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010580:	3102      	adds	r1, #2
 8010582:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010584:	9300      	str	r3, [sp, #0]
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	4421      	add	r1, r4
 801058a:	462a      	mov	r2, r5
 801058c:	4650      	mov	r0, sl
 801058e:	47c8      	blx	r9
 8010590:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010594:	4a1b      	ldr	r2, [pc, #108]	@ (8010604 <uxr_framing_read_transport+0x104>)
 8010596:	4403      	add	r3, r0
 8010598:	0859      	lsrs	r1, r3, #1
 801059a:	4683      	mov	fp, r0
 801059c:	fba2 0101 	umull	r0, r1, r2, r1
 80105a0:	0889      	lsrs	r1, r1, #2
 80105a2:	222a      	movs	r2, #42	@ 0x2a
 80105a4:	fb02 3111 	mls	r1, r2, r1, r3
 80105a8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80105ac:	f1bb 0f00 	cmp.w	fp, #0
 80105b0:	d0c7      	beq.n	8010542 <uxr_framing_read_transport+0x42>
 80105b2:	45ab      	cmp	fp, r5
 80105b4:	d1c7      	bne.n	8010546 <uxr_framing_read_transport+0x46>
 80105b6:	2e00      	cmp	r6, #0
 80105b8:	d0c5      	beq.n	8010546 <uxr_framing_read_transport+0x46>
 80105ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	3102      	adds	r1, #2
 80105c0:	4632      	mov	r2, r6
 80105c2:	4421      	add	r1, r4
 80105c4:	2300      	movs	r3, #0
 80105c6:	4650      	mov	r0, sl
 80105c8:	47c8      	blx	r9
 80105ca:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80105ce:	4a0d      	ldr	r2, [pc, #52]	@ (8010604 <uxr_framing_read_transport+0x104>)
 80105d0:	4403      	add	r3, r0
 80105d2:	0859      	lsrs	r1, r3, #1
 80105d4:	fba2 2101 	umull	r2, r1, r2, r1
 80105d8:	0889      	lsrs	r1, r1, #2
 80105da:	222a      	movs	r2, #42	@ 0x2a
 80105dc:	fb02 3311 	mls	r3, r2, r1, r3
 80105e0:	eb00 0b05 	add.w	fp, r0, r5
 80105e4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80105e8:	e7ad      	b.n	8010546 <uxr_framing_read_transport+0x46>
 80105ea:	2600      	movs	r6, #0
 80105ec:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80105f0:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80105f2:	d9be      	bls.n	8010572 <uxr_framing_read_transport+0x72>
 80105f4:	2529      	movs	r5, #41	@ 0x29
 80105f6:	2102      	movs	r1, #2
 80105f8:	e7c3      	b.n	8010582 <uxr_framing_read_transport+0x82>
 80105fa:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 80105fe:	b2dd      	uxtb	r5, r3
 8010600:	e795      	b.n	801052e <uxr_framing_read_transport+0x2e>
 8010602:	bf00      	nop
 8010604:	30c30c31 	.word	0x30c30c31

08010608 <uxr_read_framed_msg>:
 8010608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060c:	461d      	mov	r5, r3
 801060e:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 8010612:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8010616:	b085      	sub	sp, #20
 8010618:	459c      	cmp	ip, r3
 801061a:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 801061e:	4604      	mov	r4, r0
 8010620:	460f      	mov	r7, r1
 8010622:	4616      	mov	r6, r2
 8010624:	f000 81ae 	beq.w	8010984 <uxr_read_framed_msg+0x37c>
 8010628:	2000      	movs	r0, #0
 801062a:	4639      	mov	r1, r7
 801062c:	2800      	cmp	r0, #0
 801062e:	d138      	bne.n	80106a2 <uxr_read_framed_msg+0x9a>
 8010630:	468a      	mov	sl, r1
 8010632:	7823      	ldrb	r3, [r4, #0]
 8010634:	2b07      	cmp	r3, #7
 8010636:	d8fd      	bhi.n	8010634 <uxr_read_framed_msg+0x2c>
 8010638:	e8df f013 	tbh	[pc, r3, lsl #1]
 801063c:	0116013b 	.word	0x0116013b
 8010640:	00cd00f0 	.word	0x00cd00f0
 8010644:	005a00a0 	.word	0x005a00a0
 8010648:	00080037 	.word	0x00080037
 801064c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010650:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010654:	4290      	cmp	r0, r2
 8010656:	f000 8167 	beq.w	8010928 <uxr_read_framed_msg+0x320>
 801065a:	18a3      	adds	r3, r4, r2
 801065c:	1c57      	adds	r7, r2, #1
 801065e:	49c7      	ldr	r1, [pc, #796]	@ (801097c <uxr_read_framed_msg+0x374>)
 8010660:	f893 c002 	ldrb.w	ip, [r3, #2]
 8010664:	087b      	lsrs	r3, r7, #1
 8010666:	fba1 8303 	umull	r8, r3, r1, r3
 801066a:	089b      	lsrs	r3, r3, #2
 801066c:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8010670:	fb08 7313 	mls	r3, r8, r3, r7
 8010674:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8010678:	b2df      	uxtb	r7, r3
 801067a:	f000 81b2 	beq.w	80109e2 <uxr_read_framed_msg+0x3da>
 801067e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010682:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 8010686:	f000 8220 	beq.w	8010aca <uxr_read_framed_msg+0x4c2>
 801068a:	4661      	mov	r1, ip
 801068c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801068e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8010690:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010694:	b29b      	uxth	r3, r3
 8010696:	2100      	movs	r1, #0
 8010698:	429a      	cmp	r2, r3
 801069a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801069c:	7021      	strb	r1, [r4, #0]
 801069e:	f000 8198 	beq.w	80109d2 <uxr_read_framed_msg+0x3ca>
 80106a2:	2000      	movs	r0, #0
 80106a4:	b005      	add	sp, #20
 80106a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106aa:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 80106ae:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80106b2:	4297      	cmp	r7, r2
 80106b4:	f000 8148 	beq.w	8010948 <uxr_read_framed_msg+0x340>
 80106b8:	18a3      	adds	r3, r4, r2
 80106ba:	f102 0c01 	add.w	ip, r2, #1
 80106be:	49af      	ldr	r1, [pc, #700]	@ (801097c <uxr_read_framed_msg+0x374>)
 80106c0:	7898      	ldrb	r0, [r3, #2]
 80106c2:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80106c6:	fba1 8303 	umull	r8, r3, r1, r3
 80106ca:	089b      	lsrs	r3, r3, #2
 80106cc:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80106d0:	fb08 c313 	mls	r3, r8, r3, ip
 80106d4:	287d      	cmp	r0, #125	@ 0x7d
 80106d6:	fa5f fc83 	uxtb.w	ip, r3
 80106da:	f000 8194 	beq.w	8010a06 <uxr_read_framed_msg+0x3fe>
 80106de:	287e      	cmp	r0, #126	@ 0x7e
 80106e0:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80106e4:	f000 8200 	beq.w	8010ae8 <uxr_read_framed_msg+0x4e0>
 80106e8:	2307      	movs	r3, #7
 80106ea:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80106ec:	7023      	strb	r3, [r4, #0]
 80106ee:	e7a0      	b.n	8010632 <uxr_read_framed_msg+0x2a>
 80106f0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80106f2:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 80106f4:	429f      	cmp	r7, r3
 80106f6:	f240 8164 	bls.w	80109c2 <uxr_read_framed_msg+0x3ba>
 80106fa:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 801097c <uxr_read_framed_msg+0x374>
 80106fe:	f8cd a00c 	str.w	sl, [sp, #12]
 8010702:	212a      	movs	r1, #42	@ 0x2a
 8010704:	e01f      	b.n	8010746 <uxr_read_framed_msg+0x13e>
 8010706:	f89a e002 	ldrb.w	lr, [sl, #2]
 801070a:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 801070e:	f000 80ea 	beq.w	80108e6 <uxr_read_framed_msg+0x2de>
 8010712:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8010716:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 801071a:	f000 8142 	beq.w	80109a2 <uxr_read_framed_msg+0x39a>
 801071e:	f805 e003 	strb.w	lr, [r5, r3]
 8010722:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8010724:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010726:	4f96      	ldr	r7, [pc, #600]	@ (8010980 <uxr_read_framed_msg+0x378>)
 8010728:	ea80 020e 	eor.w	r2, r0, lr
 801072c:	b2d2      	uxtb	r2, r2
 801072e:	3301      	adds	r3, #1
 8010730:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8010734:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8010736:	b29b      	uxth	r3, r3
 8010738:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801073c:	42bb      	cmp	r3, r7
 801073e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8010740:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8010742:	f080 80e7 	bcs.w	8010914 <uxr_read_framed_msg+0x30c>
 8010746:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801074a:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 801074e:	f100 0c01 	add.w	ip, r0, #1
 8010752:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 8010756:	fba9 e20e 	umull	lr, r2, r9, lr
 801075a:	0892      	lsrs	r2, r2, #2
 801075c:	fb01 c212 	mls	r2, r1, r2, ip
 8010760:	4580      	cmp	r8, r0
 8010762:	eb04 0a00 	add.w	sl, r4, r0
 8010766:	fa5f fc82 	uxtb.w	ip, r2
 801076a:	d1cc      	bne.n	8010706 <uxr_read_framed_msg+0xfe>
 801076c:	42bb      	cmp	r3, r7
 801076e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8010772:	f040 8128 	bne.w	80109c6 <uxr_read_framed_msg+0x3be>
 8010776:	2306      	movs	r3, #6
 8010778:	7023      	strb	r3, [r4, #0]
 801077a:	e75a      	b.n	8010632 <uxr_read_framed_msg+0x2a>
 801077c:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8010780:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010784:	4297      	cmp	r7, r2
 8010786:	f000 80cf 	beq.w	8010928 <uxr_read_framed_msg+0x320>
 801078a:	18a3      	adds	r3, r4, r2
 801078c:	f102 0c01 	add.w	ip, r2, #1
 8010790:	497a      	ldr	r1, [pc, #488]	@ (801097c <uxr_read_framed_msg+0x374>)
 8010792:	7898      	ldrb	r0, [r3, #2]
 8010794:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8010798:	fba1 8303 	umull	r8, r3, r1, r3
 801079c:	089b      	lsrs	r3, r3, #2
 801079e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80107a2:	fb08 c313 	mls	r3, r8, r3, ip
 80107a6:	287d      	cmp	r0, #125	@ 0x7d
 80107a8:	fa5f fc83 	uxtb.w	ip, r3
 80107ac:	f000 813d 	beq.w	8010a2a <uxr_read_framed_msg+0x422>
 80107b0:	287e      	cmp	r0, #126	@ 0x7e
 80107b2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80107b6:	f000 8188 	beq.w	8010aca <uxr_read_framed_msg+0x4c2>
 80107ba:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80107bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80107be:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	2200      	movs	r2, #0
 80107c6:	428b      	cmp	r3, r1
 80107c8:	8623      	strh	r3, [r4, #48]	@ 0x30
 80107ca:	8662      	strh	r2, [r4, #50]	@ 0x32
 80107cc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80107ce:	f240 80f5 	bls.w	80109bc <uxr_read_framed_msg+0x3b4>
 80107d2:	7022      	strb	r2, [r4, #0]
 80107d4:	e765      	b.n	80106a2 <uxr_read_framed_msg+0x9a>
 80107d6:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 80107da:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80107de:	4297      	cmp	r7, r2
 80107e0:	f000 80b2 	beq.w	8010948 <uxr_read_framed_msg+0x340>
 80107e4:	18a3      	adds	r3, r4, r2
 80107e6:	f102 0c01 	add.w	ip, r2, #1
 80107ea:	4964      	ldr	r1, [pc, #400]	@ (801097c <uxr_read_framed_msg+0x374>)
 80107ec:	7898      	ldrb	r0, [r3, #2]
 80107ee:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80107f2:	fba1 8303 	umull	r8, r3, r1, r3
 80107f6:	089b      	lsrs	r3, r3, #2
 80107f8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80107fc:	fb08 c313 	mls	r3, r8, r3, ip
 8010800:	287d      	cmp	r0, #125	@ 0x7d
 8010802:	fa5f fc83 	uxtb.w	ip, r3
 8010806:	f000 813b 	beq.w	8010a80 <uxr_read_framed_msg+0x478>
 801080a:	287e      	cmp	r0, #126	@ 0x7e
 801080c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8010810:	f000 816a 	beq.w	8010ae8 <uxr_read_framed_msg+0x4e0>
 8010814:	2304      	movs	r3, #4
 8010816:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010818:	7023      	strb	r3, [r4, #0]
 801081a:	e70a      	b.n	8010632 <uxr_read_framed_msg+0x2a>
 801081c:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8010820:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010824:	4297      	cmp	r7, r2
 8010826:	f000 80c4 	beq.w	80109b2 <uxr_read_framed_msg+0x3aa>
 801082a:	18a3      	adds	r3, r4, r2
 801082c:	f102 0c01 	add.w	ip, r2, #1
 8010830:	4952      	ldr	r1, [pc, #328]	@ (801097c <uxr_read_framed_msg+0x374>)
 8010832:	7898      	ldrb	r0, [r3, #2]
 8010834:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8010838:	fba1 8303 	umull	r8, r3, r1, r3
 801083c:	089b      	lsrs	r3, r3, #2
 801083e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8010842:	fb08 c313 	mls	r3, r8, r3, ip
 8010846:	287d      	cmp	r0, #125	@ 0x7d
 8010848:	fa5f fc83 	uxtb.w	ip, r3
 801084c:	f000 812b 	beq.w	8010aa6 <uxr_read_framed_msg+0x49e>
 8010850:	287e      	cmp	r0, #126	@ 0x7e
 8010852:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8010856:	f000 8155 	beq.w	8010b04 <uxr_read_framed_msg+0x4fc>
 801085a:	7863      	ldrb	r3, [r4, #1]
 801085c:	4283      	cmp	r3, r0
 801085e:	bf0c      	ite	eq
 8010860:	2303      	moveq	r3, #3
 8010862:	2300      	movne	r3, #0
 8010864:	7023      	strb	r3, [r4, #0]
 8010866:	e6e4      	b.n	8010632 <uxr_read_framed_msg+0x2a>
 8010868:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801086c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010870:	2300      	movs	r3, #0
 8010872:	4290      	cmp	r0, r2
 8010874:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8010878:	d06b      	beq.n	8010952 <uxr_read_framed_msg+0x34a>
 801087a:	18a3      	adds	r3, r4, r2
 801087c:	f102 0c01 	add.w	ip, r2, #1
 8010880:	493e      	ldr	r1, [pc, #248]	@ (801097c <uxr_read_framed_msg+0x374>)
 8010882:	789f      	ldrb	r7, [r3, #2]
 8010884:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8010888:	fba1 8303 	umull	r8, r3, r1, r3
 801088c:	089b      	lsrs	r3, r3, #2
 801088e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8010892:	fb08 c313 	mls	r3, r8, r3, ip
 8010896:	2f7d      	cmp	r7, #125	@ 0x7d
 8010898:	fa5f fc83 	uxtb.w	ip, r3
 801089c:	f000 80d8 	beq.w	8010a50 <uxr_read_framed_msg+0x448>
 80108a0:	2f7e      	cmp	r7, #126	@ 0x7e
 80108a2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80108a6:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 80108aa:	d052      	beq.n	8010952 <uxr_read_framed_msg+0x34a>
 80108ac:	2302      	movs	r3, #2
 80108ae:	7023      	strb	r3, [r4, #0]
 80108b0:	e6bf      	b.n	8010632 <uxr_read_framed_msg+0x2a>
 80108b2:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 80108b6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80108ba:	4930      	ldr	r1, [pc, #192]	@ (801097c <uxr_read_framed_msg+0x374>)
 80108bc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80108c0:	e004      	b.n	80108cc <uxr_read_framed_msg+0x2c4>
 80108c2:	78bb      	ldrb	r3, [r7, #2]
 80108c4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80108c8:	2b7e      	cmp	r3, #126	@ 0x7e
 80108ca:	d02a      	beq.n	8010922 <uxr_read_framed_msg+0x31a>
 80108cc:	1c50      	adds	r0, r2, #1
 80108ce:	0843      	lsrs	r3, r0, #1
 80108d0:	fba1 e303 	umull	lr, r3, r1, r3
 80108d4:	089b      	lsrs	r3, r3, #2
 80108d6:	fb0c 0013 	mls	r0, ip, r3, r0
 80108da:	4590      	cmp	r8, r2
 80108dc:	eb04 0702 	add.w	r7, r4, r2
 80108e0:	b2c2      	uxtb	r2, r0
 80108e2:	d1ee      	bne.n	80108c2 <uxr_read_framed_msg+0x2ba>
 80108e4:	e6dd      	b.n	80106a2 <uxr_read_framed_msg+0x9a>
 80108e6:	3002      	adds	r0, #2
 80108e8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80108ec:	eb04 0a02 	add.w	sl, r4, r2
 80108f0:	fba9 e20e 	umull	lr, r2, r9, lr
 80108f4:	0892      	lsrs	r2, r2, #2
 80108f6:	45e0      	cmp	r8, ip
 80108f8:	fb01 0012 	mls	r0, r1, r2, r0
 80108fc:	f43f af36 	beq.w	801076c <uxr_read_framed_msg+0x164>
 8010900:	f89a e002 	ldrb.w	lr, [sl, #2]
 8010904:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8010908:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801090c:	d049      	beq.n	80109a2 <uxr_read_framed_msg+0x39a>
 801090e:	f08e 0e20 	eor.w	lr, lr, #32
 8010912:	e704      	b.n	801071e <uxr_read_framed_msg+0x116>
 8010914:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8010918:	f43f af2d 	beq.w	8010776 <uxr_read_framed_msg+0x16e>
 801091c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8010920:	d151      	bne.n	80109c6 <uxr_read_framed_msg+0x3be>
 8010922:	2301      	movs	r3, #1
 8010924:	7023      	strb	r3, [r4, #0]
 8010926:	e684      	b.n	8010632 <uxr_read_framed_msg+0x2a>
 8010928:	4651      	mov	r1, sl
 801092a:	f8cd b000 	str.w	fp, [sp]
 801092e:	2301      	movs	r3, #1
 8010930:	9301      	str	r3, [sp, #4]
 8010932:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010934:	9103      	str	r1, [sp, #12]
 8010936:	4632      	mov	r2, r6
 8010938:	4620      	mov	r0, r4
 801093a:	f7ff fde1 	bl	8010500 <uxr_framing_read_transport>
 801093e:	fab0 f080 	clz	r0, r0
 8010942:	9903      	ldr	r1, [sp, #12]
 8010944:	0940      	lsrs	r0, r0, #5
 8010946:	e671      	b.n	801062c <uxr_read_framed_msg+0x24>
 8010948:	4651      	mov	r1, sl
 801094a:	f8cd b000 	str.w	fp, [sp]
 801094e:	2302      	movs	r3, #2
 8010950:	e7ee      	b.n	8010930 <uxr_read_framed_msg+0x328>
 8010952:	2304      	movs	r3, #4
 8010954:	9301      	str	r3, [sp, #4]
 8010956:	f8cd b000 	str.w	fp, [sp]
 801095a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801095c:	4632      	mov	r2, r6
 801095e:	4651      	mov	r1, sl
 8010960:	4620      	mov	r0, r4
 8010962:	f7ff fdcd 	bl	8010500 <uxr_framing_read_transport>
 8010966:	2800      	cmp	r0, #0
 8010968:	f47f ae63 	bne.w	8010632 <uxr_read_framed_msg+0x2a>
 801096c:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8010970:	387e      	subs	r0, #126	@ 0x7e
 8010972:	4651      	mov	r1, sl
 8010974:	bf18      	it	ne
 8010976:	2001      	movne	r0, #1
 8010978:	e658      	b.n	801062c <uxr_read_framed_msg+0x24>
 801097a:	bf00      	nop
 801097c:	30c30c31 	.word	0x30c30c31
 8010980:	0801c5e8 	.word	0x0801c5e8
 8010984:	2305      	movs	r3, #5
 8010986:	9301      	str	r3, [sp, #4]
 8010988:	f8cd b000 	str.w	fp, [sp]
 801098c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801098e:	f7ff fdb7 	bl	8010500 <uxr_framing_read_transport>
 8010992:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8010996:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801099a:	429a      	cmp	r2, r3
 801099c:	f43f ae81 	beq.w	80106a2 <uxr_read_framed_msg+0x9a>
 80109a0:	e642      	b.n	8010628 <uxr_read_framed_msg+0x20>
 80109a2:	42bb      	cmp	r3, r7
 80109a4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80109a8:	f43f aee5 	beq.w	8010776 <uxr_read_framed_msg+0x16e>
 80109ac:	2301      	movs	r3, #1
 80109ae:	7023      	strb	r3, [r4, #0]
 80109b0:	e63f      	b.n	8010632 <uxr_read_framed_msg+0x2a>
 80109b2:	4651      	mov	r1, sl
 80109b4:	f8cd b000 	str.w	fp, [sp]
 80109b8:	2303      	movs	r3, #3
 80109ba:	e7b9      	b.n	8010930 <uxr_read_framed_msg+0x328>
 80109bc:	2305      	movs	r3, #5
 80109be:	7023      	strb	r3, [r4, #0]
 80109c0:	e637      	b.n	8010632 <uxr_read_framed_msg+0x2a>
 80109c2:	f43f aed8 	beq.w	8010776 <uxr_read_framed_msg+0x16e>
 80109c6:	1afb      	subs	r3, r7, r3
 80109c8:	3302      	adds	r3, #2
 80109ca:	e9cd b300 	strd	fp, r3, [sp]
 80109ce:	4651      	mov	r1, sl
 80109d0:	e7af      	b.n	8010932 <uxr_read_framed_msg+0x32a>
 80109d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109d4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80109d8:	7013      	strb	r3, [r2, #0]
 80109da:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80109dc:	b005      	add	sp, #20
 80109de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109e2:	4287      	cmp	r7, r0
 80109e4:	d0a0      	beq.n	8010928 <uxr_read_framed_msg+0x320>
 80109e6:	4423      	add	r3, r4
 80109e8:	3202      	adds	r2, #2
 80109ea:	7898      	ldrb	r0, [r3, #2]
 80109ec:	0853      	lsrs	r3, r2, #1
 80109ee:	fba1 e303 	umull	lr, r3, r1, r3
 80109f2:	089b      	lsrs	r3, r3, #2
 80109f4:	fb08 2213 	mls	r2, r8, r3, r2
 80109f8:	287e      	cmp	r0, #126	@ 0x7e
 80109fa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80109fe:	d064      	beq.n	8010aca <uxr_read_framed_msg+0x4c2>
 8010a00:	f080 0120 	eor.w	r1, r0, #32
 8010a04:	e642      	b.n	801068c <uxr_read_framed_msg+0x84>
 8010a06:	45bc      	cmp	ip, r7
 8010a08:	d09e      	beq.n	8010948 <uxr_read_framed_msg+0x340>
 8010a0a:	4423      	add	r3, r4
 8010a0c:	3202      	adds	r2, #2
 8010a0e:	7898      	ldrb	r0, [r3, #2]
 8010a10:	0853      	lsrs	r3, r2, #1
 8010a12:	fba1 e303 	umull	lr, r3, r1, r3
 8010a16:	089b      	lsrs	r3, r3, #2
 8010a18:	fb08 2213 	mls	r2, r8, r3, r2
 8010a1c:	287e      	cmp	r0, #126	@ 0x7e
 8010a1e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010a22:	d061      	beq.n	8010ae8 <uxr_read_framed_msg+0x4e0>
 8010a24:	f080 0020 	eor.w	r0, r0, #32
 8010a28:	e65e      	b.n	80106e8 <uxr_read_framed_msg+0xe0>
 8010a2a:	4567      	cmp	r7, ip
 8010a2c:	f43f af7c 	beq.w	8010928 <uxr_read_framed_msg+0x320>
 8010a30:	4423      	add	r3, r4
 8010a32:	3202      	adds	r2, #2
 8010a34:	7898      	ldrb	r0, [r3, #2]
 8010a36:	0853      	lsrs	r3, r2, #1
 8010a38:	fba1 e303 	umull	lr, r3, r1, r3
 8010a3c:	089b      	lsrs	r3, r3, #2
 8010a3e:	fb08 2213 	mls	r2, r8, r3, r2
 8010a42:	287e      	cmp	r0, #126	@ 0x7e
 8010a44:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010a48:	d03f      	beq.n	8010aca <uxr_read_framed_msg+0x4c2>
 8010a4a:	f080 0020 	eor.w	r0, r0, #32
 8010a4e:	e6b4      	b.n	80107ba <uxr_read_framed_msg+0x1b2>
 8010a50:	4560      	cmp	r0, ip
 8010a52:	f43f af7e 	beq.w	8010952 <uxr_read_framed_msg+0x34a>
 8010a56:	4423      	add	r3, r4
 8010a58:	3202      	adds	r2, #2
 8010a5a:	7898      	ldrb	r0, [r3, #2]
 8010a5c:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8010a60:	0853      	lsrs	r3, r2, #1
 8010a62:	fba1 e303 	umull	lr, r3, r1, r3
 8010a66:	089b      	lsrs	r3, r3, #2
 8010a68:	fb08 2213 	mls	r2, r8, r3, r2
 8010a6c:	287e      	cmp	r0, #126	@ 0x7e
 8010a6e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010a72:	f43f af6e 	beq.w	8010952 <uxr_read_framed_msg+0x34a>
 8010a76:	f080 0020 	eor.w	r0, r0, #32
 8010a7a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8010a7e:	e715      	b.n	80108ac <uxr_read_framed_msg+0x2a4>
 8010a80:	4567      	cmp	r7, ip
 8010a82:	f43f af61 	beq.w	8010948 <uxr_read_framed_msg+0x340>
 8010a86:	4423      	add	r3, r4
 8010a88:	3202      	adds	r2, #2
 8010a8a:	7898      	ldrb	r0, [r3, #2]
 8010a8c:	0853      	lsrs	r3, r2, #1
 8010a8e:	fba1 e303 	umull	lr, r3, r1, r3
 8010a92:	089b      	lsrs	r3, r3, #2
 8010a94:	fb08 2213 	mls	r2, r8, r3, r2
 8010a98:	287e      	cmp	r0, #126	@ 0x7e
 8010a9a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010a9e:	d023      	beq.n	8010ae8 <uxr_read_framed_msg+0x4e0>
 8010aa0:	f080 0020 	eor.w	r0, r0, #32
 8010aa4:	e6b6      	b.n	8010814 <uxr_read_framed_msg+0x20c>
 8010aa6:	45bc      	cmp	ip, r7
 8010aa8:	d083      	beq.n	80109b2 <uxr_read_framed_msg+0x3aa>
 8010aaa:	4423      	add	r3, r4
 8010aac:	3202      	adds	r2, #2
 8010aae:	7898      	ldrb	r0, [r3, #2]
 8010ab0:	0853      	lsrs	r3, r2, #1
 8010ab2:	fba1 e303 	umull	lr, r3, r1, r3
 8010ab6:	089b      	lsrs	r3, r3, #2
 8010ab8:	fb08 2213 	mls	r2, r8, r3, r2
 8010abc:	287e      	cmp	r0, #126	@ 0x7e
 8010abe:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010ac2:	d01f      	beq.n	8010b04 <uxr_read_framed_msg+0x4fc>
 8010ac4:	f080 0020 	eor.w	r0, r0, #32
 8010ac8:	e6c7      	b.n	801085a <uxr_read_framed_msg+0x252>
 8010aca:	2701      	movs	r7, #1
 8010acc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ace:	f8cd b000 	str.w	fp, [sp]
 8010ad2:	9701      	str	r7, [sp, #4]
 8010ad4:	4632      	mov	r2, r6
 8010ad6:	4651      	mov	r1, sl
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f7ff fd11 	bl	8010500 <uxr_framing_read_transport>
 8010ade:	2800      	cmp	r0, #0
 8010ae0:	f47f ada7 	bne.w	8010632 <uxr_read_framed_msg+0x2a>
 8010ae4:	7027      	strb	r7, [r4, #0]
 8010ae6:	e5a4      	b.n	8010632 <uxr_read_framed_msg+0x2a>
 8010ae8:	f8cd b000 	str.w	fp, [sp]
 8010aec:	2302      	movs	r3, #2
 8010aee:	9301      	str	r3, [sp, #4]
 8010af0:	4632      	mov	r2, r6
 8010af2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010af4:	4651      	mov	r1, sl
 8010af6:	4620      	mov	r0, r4
 8010af8:	f7ff fd02 	bl	8010500 <uxr_framing_read_transport>
 8010afc:	2800      	cmp	r0, #0
 8010afe:	f47f ad98 	bne.w	8010632 <uxr_read_framed_msg+0x2a>
 8010b02:	e70e      	b.n	8010922 <uxr_read_framed_msg+0x31a>
 8010b04:	f8cd b000 	str.w	fp, [sp]
 8010b08:	2303      	movs	r3, #3
 8010b0a:	e7f0      	b.n	8010aee <uxr_read_framed_msg+0x4e6>

08010b0c <uxr_stream_id>:
 8010b0c:	2901      	cmp	r1, #1
 8010b0e:	b082      	sub	sp, #8
 8010b10:	4603      	mov	r3, r0
 8010b12:	d011      	beq.n	8010b38 <uxr_stream_id+0x2c>
 8010b14:	2902      	cmp	r1, #2
 8010b16:	f04f 0c00 	mov.w	ip, #0
 8010b1a:	d00a      	beq.n	8010b32 <uxr_stream_id+0x26>
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	f36c 0007 	bfi	r0, ip, #0, #8
 8010b22:	f363 200f 	bfi	r0, r3, #8, #8
 8010b26:	f361 4017 	bfi	r0, r1, #16, #8
 8010b2a:	f362 601f 	bfi	r0, r2, #24, #8
 8010b2e:	b002      	add	sp, #8
 8010b30:	4770      	bx	lr
 8010b32:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010b36:	e7f1      	b.n	8010b1c <uxr_stream_id+0x10>
 8010b38:	f100 0c01 	add.w	ip, r0, #1
 8010b3c:	fa5f fc8c 	uxtb.w	ip, ip
 8010b40:	e7ec      	b.n	8010b1c <uxr_stream_id+0x10>
 8010b42:	bf00      	nop

08010b44 <uxr_stream_id_from_raw>:
 8010b44:	b082      	sub	sp, #8
 8010b46:	4603      	mov	r3, r0
 8010b48:	b130      	cbz	r0, 8010b58 <uxr_stream_id_from_raw+0x14>
 8010b4a:	0602      	lsls	r2, r0, #24
 8010b4c:	d411      	bmi.n	8010b72 <uxr_stream_id_from_raw+0x2e>
 8010b4e:	1e42      	subs	r2, r0, #1
 8010b50:	b2d2      	uxtb	r2, r2
 8010b52:	f04f 0c01 	mov.w	ip, #1
 8010b56:	e001      	b.n	8010b5c <uxr_stream_id_from_raw+0x18>
 8010b58:	4684      	mov	ip, r0
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	f363 0007 	bfi	r0, r3, #0, #8
 8010b62:	f362 200f 	bfi	r0, r2, #8, #8
 8010b66:	f36c 4017 	bfi	r0, ip, #16, #8
 8010b6a:	f361 601f 	bfi	r0, r1, #24, #8
 8010b6e:	b002      	add	sp, #8
 8010b70:	4770      	bx	lr
 8010b72:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010b76:	f04f 0c02 	mov.w	ip, #2
 8010b7a:	e7ef      	b.n	8010b5c <uxr_stream_id_from_raw+0x18>

08010b7c <uxr_init_stream_storage>:
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	7403      	strb	r3, [r0, #16]
 8010b80:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010b84:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010b88:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010b8c:	4770      	bx	lr
 8010b8e:	bf00      	nop

08010b90 <uxr_reset_stream_storage>:
 8010b90:	b570      	push	{r4, r5, r6, lr}
 8010b92:	7c03      	ldrb	r3, [r0, #16]
 8010b94:	4604      	mov	r4, r0
 8010b96:	b153      	cbz	r3, 8010bae <uxr_reset_stream_storage+0x1e>
 8010b98:	4606      	mov	r6, r0
 8010b9a:	2500      	movs	r5, #0
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	f007 f8b1 	bl	8017d04 <uxr_reset_output_best_effort_stream>
 8010ba2:	7c23      	ldrb	r3, [r4, #16]
 8010ba4:	3501      	adds	r5, #1
 8010ba6:	42ab      	cmp	r3, r5
 8010ba8:	f106 0610 	add.w	r6, r6, #16
 8010bac:	d8f6      	bhi.n	8010b9c <uxr_reset_stream_storage+0xc>
 8010bae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010bb2:	b163      	cbz	r3, 8010bce <uxr_reset_stream_storage+0x3e>
 8010bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010bb8:	2500      	movs	r5, #0
 8010bba:	4630      	mov	r0, r6
 8010bbc:	f006 feb2 	bl	8017924 <uxr_reset_input_best_effort_stream>
 8010bc0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010bc4:	3501      	adds	r5, #1
 8010bc6:	42ab      	cmp	r3, r5
 8010bc8:	f106 0602 	add.w	r6, r6, #2
 8010bcc:	d8f5      	bhi.n	8010bba <uxr_reset_stream_storage+0x2a>
 8010bce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010bd2:	b163      	cbz	r3, 8010bee <uxr_reset_stream_storage+0x5e>
 8010bd4:	f104 0618 	add.w	r6, r4, #24
 8010bd8:	2500      	movs	r5, #0
 8010bda:	4630      	mov	r0, r6
 8010bdc:	f007 f93c 	bl	8017e58 <uxr_reset_output_reliable_stream>
 8010be0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010be4:	3501      	adds	r5, #1
 8010be6:	42ab      	cmp	r3, r5
 8010be8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8010bec:	d8f5      	bhi.n	8010bda <uxr_reset_stream_storage+0x4a>
 8010bee:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010bf2:	b163      	cbz	r3, 8010c0e <uxr_reset_stream_storage+0x7e>
 8010bf4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010bf8:	2500      	movs	r5, #0
 8010bfa:	4630      	mov	r0, r6
 8010bfc:	f006 ff02 	bl	8017a04 <uxr_reset_input_reliable_stream>
 8010c00:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010c04:	3501      	adds	r5, #1
 8010c06:	42ab      	cmp	r3, r5
 8010c08:	f106 0618 	add.w	r6, r6, #24
 8010c0c:	d8f5      	bhi.n	8010bfa <uxr_reset_stream_storage+0x6a>
 8010c0e:	bd70      	pop	{r4, r5, r6, pc}

08010c10 <uxr_add_output_best_effort_buffer>:
 8010c10:	b510      	push	{r4, lr}
 8010c12:	7c04      	ldrb	r4, [r0, #16]
 8010c14:	f104 0c01 	add.w	ip, r4, #1
 8010c18:	b082      	sub	sp, #8
 8010c1a:	f880 c010 	strb.w	ip, [r0, #16]
 8010c1e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010c22:	f007 f865 	bl	8017cf0 <uxr_init_output_best_effort_stream>
 8010c26:	2201      	movs	r2, #1
 8010c28:	4611      	mov	r1, r2
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	b002      	add	sp, #8
 8010c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c32:	f7ff bf6b 	b.w	8010b0c <uxr_stream_id>
 8010c36:	bf00      	nop

08010c38 <uxr_add_output_reliable_buffer>:
 8010c38:	b510      	push	{r4, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	4684      	mov	ip, r0
 8010c3e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010c42:	9000      	str	r0, [sp, #0]
 8010c44:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010c48:	2028      	movs	r0, #40	@ 0x28
 8010c4a:	fb00 c004 	mla	r0, r0, r4, ip
 8010c4e:	f104 0e01 	add.w	lr, r4, #1
 8010c52:	3018      	adds	r0, #24
 8010c54:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010c58:	f007 f8c6 	bl	8017de8 <uxr_init_output_reliable_stream>
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	2102      	movs	r1, #2
 8010c60:	4620      	mov	r0, r4
 8010c62:	b004      	add	sp, #16
 8010c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c68:	f7ff bf50 	b.w	8010b0c <uxr_stream_id>

08010c6c <uxr_add_input_best_effort_buffer>:
 8010c6c:	b510      	push	{r4, lr}
 8010c6e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010c72:	1c62      	adds	r2, r4, #1
 8010c74:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8010c78:	b082      	sub	sp, #8
 8010c7a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8010c7e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8010c82:	f006 fe4b 	bl	801791c <uxr_init_input_best_effort_stream>
 8010c86:	2200      	movs	r2, #0
 8010c88:	2101      	movs	r1, #1
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	b002      	add	sp, #8
 8010c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c92:	f7ff bf3b 	b.w	8010b0c <uxr_stream_id>
 8010c96:	bf00      	nop

08010c98 <uxr_add_input_reliable_buffer>:
 8010c98:	b510      	push	{r4, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	4684      	mov	ip, r0
 8010c9e:	9806      	ldr	r0, [sp, #24]
 8010ca0:	9000      	str	r0, [sp, #0]
 8010ca2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010ca6:	2018      	movs	r0, #24
 8010ca8:	fb00 c004 	mla	r0, r0, r4, ip
 8010cac:	f104 0e01 	add.w	lr, r4, #1
 8010cb0:	3048      	adds	r0, #72	@ 0x48
 8010cb2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010cb6:	f006 fe79 	bl	80179ac <uxr_init_input_reliable_stream>
 8010cba:	2200      	movs	r2, #0
 8010cbc:	2102      	movs	r1, #2
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	b004      	add	sp, #16
 8010cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010cc6:	f7ff bf21 	b.w	8010b0c <uxr_stream_id>
 8010cca:	bf00      	nop

08010ccc <uxr_get_output_best_effort_stream>:
 8010ccc:	7c03      	ldrb	r3, [r0, #16]
 8010cce:	428b      	cmp	r3, r1
 8010cd0:	bf8c      	ite	hi
 8010cd2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010cd6:	2000      	movls	r0, #0
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop

08010cdc <uxr_get_output_reliable_stream>:
 8010cdc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010ce0:	428b      	cmp	r3, r1
 8010ce2:	bf83      	ittte	hi
 8010ce4:	2328      	movhi	r3, #40	@ 0x28
 8010ce6:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010cea:	3018      	addhi	r0, #24
 8010cec:	2000      	movls	r0, #0
 8010cee:	4770      	bx	lr

08010cf0 <uxr_get_input_best_effort_stream>:
 8010cf0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010cf4:	428b      	cmp	r3, r1
 8010cf6:	bf86      	itte	hi
 8010cf8:	3121      	addhi	r1, #33	@ 0x21
 8010cfa:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010cfe:	2000      	movls	r0, #0
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop

08010d04 <uxr_get_input_reliable_stream>:
 8010d04:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010d08:	428b      	cmp	r3, r1
 8010d0a:	bf83      	ittte	hi
 8010d0c:	2318      	movhi	r3, #24
 8010d0e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010d12:	3048      	addhi	r0, #72	@ 0x48
 8010d14:	2000      	movls	r0, #0
 8010d16:	4770      	bx	lr

08010d18 <uxr_output_streams_confirmed>:
 8010d18:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010d1c:	b183      	cbz	r3, 8010d40 <uxr_output_streams_confirmed+0x28>
 8010d1e:	b570      	push	{r4, r5, r6, lr}
 8010d20:	4606      	mov	r6, r0
 8010d22:	f100 0518 	add.w	r5, r0, #24
 8010d26:	2400      	movs	r4, #0
 8010d28:	e001      	b.n	8010d2e <uxr_output_streams_confirmed+0x16>
 8010d2a:	3528      	adds	r5, #40	@ 0x28
 8010d2c:	b138      	cbz	r0, 8010d3e <uxr_output_streams_confirmed+0x26>
 8010d2e:	4628      	mov	r0, r5
 8010d30:	f007 fafa 	bl	8018328 <uxr_is_output_up_to_date>
 8010d34:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010d38:	3401      	adds	r4, #1
 8010d3a:	42a3      	cmp	r3, r4
 8010d3c:	d8f5      	bhi.n	8010d2a <uxr_output_streams_confirmed+0x12>
 8010d3e:	bd70      	pop	{r4, r5, r6, pc}
 8010d40:	2001      	movs	r0, #1
 8010d42:	4770      	bx	lr

08010d44 <uxr_buffer_submessage_header>:
 8010d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d46:	4604      	mov	r4, r0
 8010d48:	460e      	mov	r6, r1
 8010d4a:	2104      	movs	r1, #4
 8010d4c:	4615      	mov	r5, r2
 8010d4e:	461f      	mov	r7, r3
 8010d50:	f7fa ffc8 	bl	800bce4 <ucdr_align_to>
 8010d54:	2301      	movs	r3, #1
 8010d56:	7523      	strb	r3, [r4, #20]
 8010d58:	f047 0201 	orr.w	r2, r7, #1
 8010d5c:	462b      	mov	r3, r5
 8010d5e:	4631      	mov	r1, r6
 8010d60:	4620      	mov	r0, r4
 8010d62:	f000 fa2b 	bl	80111bc <uxr_serialize_submessage_header>
 8010d66:	4620      	mov	r0, r4
 8010d68:	f7fa ffd2 	bl	800bd10 <ucdr_buffer_remaining>
 8010d6c:	42a8      	cmp	r0, r5
 8010d6e:	bf34      	ite	cc
 8010d70:	2000      	movcc	r0, #0
 8010d72:	2001      	movcs	r0, #1
 8010d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d76:	bf00      	nop

08010d78 <uxr_read_submessage_header>:
 8010d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7c:	4604      	mov	r4, r0
 8010d7e:	460d      	mov	r5, r1
 8010d80:	2104      	movs	r1, #4
 8010d82:	4616      	mov	r6, r2
 8010d84:	4698      	mov	r8, r3
 8010d86:	f7fa ffad 	bl	800bce4 <ucdr_align_to>
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	f7fa ffc0 	bl	800bd10 <ucdr_buffer_remaining>
 8010d90:	2803      	cmp	r0, #3
 8010d92:	bf8c      	ite	hi
 8010d94:	2701      	movhi	r7, #1
 8010d96:	2700      	movls	r7, #0
 8010d98:	d802      	bhi.n	8010da0 <uxr_read_submessage_header+0x28>
 8010d9a:	4638      	mov	r0, r7
 8010d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010da0:	4633      	mov	r3, r6
 8010da2:	4642      	mov	r2, r8
 8010da4:	4620      	mov	r0, r4
 8010da6:	4629      	mov	r1, r5
 8010da8:	f000 fa1a 	bl	80111e0 <uxr_deserialize_submessage_header>
 8010dac:	f898 3000 	ldrb.w	r3, [r8]
 8010db0:	f003 0201 	and.w	r2, r3, #1
 8010db4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010db8:	f888 3000 	strb.w	r3, [r8]
 8010dbc:	7522      	strb	r2, [r4, #20]
 8010dbe:	4638      	mov	r0, r7
 8010dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010dc4 <uxr_submessage_padding>:
 8010dc4:	f010 0003 	ands.w	r0, r0, #3
 8010dc8:	bf18      	it	ne
 8010dca:	f1c0 0004 	rsbne	r0, r0, #4
 8010dce:	4770      	bx	lr

08010dd0 <uxr_millis>:
 8010dd0:	b510      	push	{r4, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	4669      	mov	r1, sp
 8010dd6:	2001      	movs	r0, #1
 8010dd8:	f7f1 fe8e 	bl	8002af8 <clock_gettime>
 8010ddc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010de0:	4b06      	ldr	r3, [pc, #24]	@ (8010dfc <uxr_millis+0x2c>)
 8010de2:	fba0 0103 	umull	r0, r1, r0, r3
 8010de6:	1900      	adds	r0, r0, r4
 8010de8:	fb03 1102 	mla	r1, r3, r2, r1
 8010dec:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010df0:	4a03      	ldr	r2, [pc, #12]	@ (8010e00 <uxr_millis+0x30>)
 8010df2:	2300      	movs	r3, #0
 8010df4:	f7ef fe5a 	bl	8000aac <__aeabi_ldivmod>
 8010df8:	b004      	add	sp, #16
 8010dfa:	bd10      	pop	{r4, pc}
 8010dfc:	3b9aca00 	.word	0x3b9aca00
 8010e00:	000f4240 	.word	0x000f4240

08010e04 <uxr_nanos>:
 8010e04:	b510      	push	{r4, lr}
 8010e06:	b084      	sub	sp, #16
 8010e08:	4669      	mov	r1, sp
 8010e0a:	2001      	movs	r0, #1
 8010e0c:	f7f1 fe74 	bl	8002af8 <clock_gettime>
 8010e10:	4a06      	ldr	r2, [pc, #24]	@ (8010e2c <uxr_nanos+0x28>)
 8010e12:	9800      	ldr	r0, [sp, #0]
 8010e14:	9902      	ldr	r1, [sp, #8]
 8010e16:	9c01      	ldr	r4, [sp, #4]
 8010e18:	fba0 0302 	umull	r0, r3, r0, r2
 8010e1c:	1840      	adds	r0, r0, r1
 8010e1e:	fb02 3304 	mla	r3, r2, r4, r3
 8010e22:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010e26:	b004      	add	sp, #16
 8010e28:	bd10      	pop	{r4, pc}
 8010e2a:	bf00      	nop
 8010e2c:	3b9aca00 	.word	0x3b9aca00

08010e30 <on_full_output_buffer_fragmented>:
 8010e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e34:	460c      	mov	r4, r1
 8010e36:	b08a      	sub	sp, #40	@ 0x28
 8010e38:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010e3c:	4606      	mov	r6, r0
 8010e3e:	f104 0008 	add.w	r0, r4, #8
 8010e42:	f7ff ff4b 	bl	8010cdc <uxr_get_output_reliable_stream>
 8010e46:	4605      	mov	r5, r0
 8010e48:	f007 fa78 	bl	801833c <get_available_free_slots>
 8010e4c:	b968      	cbnz	r0, 8010e6a <on_full_output_buffer_fragmented+0x3a>
 8010e4e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010e52:	4620      	mov	r0, r4
 8010e54:	4798      	blx	r3
 8010e56:	b918      	cbnz	r0, 8010e60 <on_full_output_buffer_fragmented+0x30>
 8010e58:	2001      	movs	r0, #1
 8010e5a:	b00a      	add	sp, #40	@ 0x28
 8010e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e60:	4628      	mov	r0, r5
 8010e62:	f007 fa6b 	bl	801833c <get_available_free_slots>
 8010e66:	2800      	cmp	r0, #0
 8010e68:	d0f6      	beq.n	8010e58 <on_full_output_buffer_fragmented+0x28>
 8010e6a:	892a      	ldrh	r2, [r5, #8]
 8010e6c:	686b      	ldr	r3, [r5, #4]
 8010e6e:	fbb3 f8f2 	udiv	r8, r3, r2
 8010e72:	89eb      	ldrh	r3, [r5, #14]
 8010e74:	7b29      	ldrb	r1, [r5, #12]
 8010e76:	fbb3 f0f2 	udiv	r0, r3, r2
 8010e7a:	fb02 3310 	mls	r3, r2, r0, r3
 8010e7e:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	fb08 f303 	mul.w	r3, r8, r3
 8010e88:	31fc      	adds	r1, #252	@ 0xfc
 8010e8a:	f1a8 0804 	sub.w	r8, r8, #4
 8010e8e:	4441      	add	r1, r8
 8010e90:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010e94:	b28f      	uxth	r7, r1
 8010e96:	6829      	ldr	r1, [r5, #0]
 8010e98:	3304      	adds	r3, #4
 8010e9a:	1bd2      	subs	r2, r2, r7
 8010e9c:	4419      	add	r1, r3
 8010e9e:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 8010ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ea6:	9300      	str	r3, [sp, #0]
 8010ea8:	4642      	mov	r2, r8
 8010eaa:	2300      	movs	r3, #0
 8010eac:	a802      	add	r0, sp, #8
 8010eae:	f7fa feed 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 8010eb2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010eb6:	f102 0308 	add.w	r3, r2, #8
 8010eba:	4543      	cmp	r3, r8
 8010ebc:	d928      	bls.n	8010f10 <on_full_output_buffer_fragmented+0xe0>
 8010ebe:	463a      	mov	r2, r7
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	210d      	movs	r1, #13
 8010ec4:	a802      	add	r0, sp, #8
 8010ec6:	f7ff ff3d 	bl	8010d44 <uxr_buffer_submessage_header>
 8010eca:	8929      	ldrh	r1, [r5, #8]
 8010ecc:	89eb      	ldrh	r3, [r5, #14]
 8010ece:	fbb3 f2f1 	udiv	r2, r3, r1
 8010ed2:	fb01 3312 	mls	r3, r1, r2, r3
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	686a      	ldr	r2, [r5, #4]
 8010eda:	fbb2 f2f1 	udiv	r2, r2, r1
 8010ede:	fb02 f303 	mul.w	r3, r2, r3
 8010ee2:	682a      	ldr	r2, [r5, #0]
 8010ee4:	f842 8003 	str.w	r8, [r2, r3]
 8010ee8:	89e8      	ldrh	r0, [r5, #14]
 8010eea:	2101      	movs	r1, #1
 8010eec:	f007 fb7a 	bl	80185e4 <uxr_seq_num_add>
 8010ef0:	9904      	ldr	r1, [sp, #16]
 8010ef2:	9a03      	ldr	r2, [sp, #12]
 8010ef4:	81e8      	strh	r0, [r5, #14]
 8010ef6:	1a52      	subs	r2, r2, r1
 8010ef8:	4630      	mov	r0, r6
 8010efa:	f7fa fed9 	bl	800bcb0 <ucdr_init_buffer>
 8010efe:	4630      	mov	r0, r6
 8010f00:	4910      	ldr	r1, [pc, #64]	@ (8010f44 <on_full_output_buffer_fragmented+0x114>)
 8010f02:	4622      	mov	r2, r4
 8010f04:	f7fa fea8 	bl	800bc58 <ucdr_set_on_full_buffer_callback>
 8010f08:	2000      	movs	r0, #0
 8010f0a:	b00a      	add	sp, #40	@ 0x28
 8010f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f10:	b292      	uxth	r2, r2
 8010f12:	2302      	movs	r3, #2
 8010f14:	210d      	movs	r1, #13
 8010f16:	a802      	add	r0, sp, #8
 8010f18:	f7ff ff14 	bl	8010d44 <uxr_buffer_submessage_header>
 8010f1c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010f20:	8928      	ldrh	r0, [r5, #8]
 8010f22:	f103 0208 	add.w	r2, r3, #8
 8010f26:	89eb      	ldrh	r3, [r5, #14]
 8010f28:	fbb3 f1f0 	udiv	r1, r3, r0
 8010f2c:	fb00 3311 	mls	r3, r0, r1, r3
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	6869      	ldr	r1, [r5, #4]
 8010f34:	fbb1 f1f0 	udiv	r1, r1, r0
 8010f38:	fb01 f303 	mul.w	r3, r1, r3
 8010f3c:	6829      	ldr	r1, [r5, #0]
 8010f3e:	50ca      	str	r2, [r1, r3]
 8010f40:	e7d2      	b.n	8010ee8 <on_full_output_buffer_fragmented+0xb8>
 8010f42:	bf00      	nop
 8010f44:	08010e31 	.word	0x08010e31

08010f48 <uxr_prepare_output_stream>:
 8010f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f4a:	b087      	sub	sp, #28
 8010f4c:	2707      	movs	r7, #7
 8010f4e:	9202      	str	r2, [sp, #8]
 8010f50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010f52:	2500      	movs	r5, #0
 8010f54:	3204      	adds	r2, #4
 8010f56:	e9cd 7500 	strd	r7, r5, [sp]
 8010f5a:	461c      	mov	r4, r3
 8010f5c:	4606      	mov	r6, r0
 8010f5e:	f7ff f807 	bl	800ff70 <uxr_prepare_stream_to_write_submessage>
 8010f62:	f080 0201 	eor.w	r2, r0, #1
 8010f66:	b2d2      	uxtb	r2, r2
 8010f68:	75a2      	strb	r2, [r4, #22]
 8010f6a:	b112      	cbz	r2, 8010f72 <uxr_prepare_output_stream+0x2a>
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	b007      	add	sp, #28
 8010f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f72:	aa05      	add	r2, sp, #20
 8010f74:	9902      	ldr	r1, [sp, #8]
 8010f76:	4630      	mov	r0, r6
 8010f78:	f7ff f934 	bl	80101e4 <uxr_init_base_object_request>
 8010f7c:	a905      	add	r1, sp, #20
 8010f7e:	4605      	mov	r5, r0
 8010f80:	4620      	mov	r0, r4
 8010f82:	f001 f879 	bl	8012078 <uxr_serialize_WRITE_DATA_Payload_Data>
 8010f86:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010f8a:	69a6      	ldr	r6, [r4, #24]
 8010f8c:	69e7      	ldr	r7, [r4, #28]
 8010f8e:	1a52      	subs	r2, r2, r1
 8010f90:	4620      	mov	r0, r4
 8010f92:	f7fa fe8d 	bl	800bcb0 <ucdr_init_buffer>
 8010f96:	4620      	mov	r0, r4
 8010f98:	463a      	mov	r2, r7
 8010f9a:	4631      	mov	r1, r6
 8010f9c:	f7fa fe5c 	bl	800bc58 <ucdr_set_on_full_buffer_callback>
 8010fa0:	4628      	mov	r0, r5
 8010fa2:	b007      	add	sp, #28
 8010fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fa6:	bf00      	nop

08010fa8 <uxr_prepare_output_stream_fragmented>:
 8010fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fac:	b093      	sub	sp, #76	@ 0x4c
 8010fae:	4605      	mov	r5, r0
 8010fb0:	9107      	str	r1, [sp, #28]
 8010fb2:	3008      	adds	r0, #8
 8010fb4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010fb8:	9303      	str	r3, [sp, #12]
 8010fba:	9206      	str	r2, [sp, #24]
 8010fbc:	f7ff fe8e 	bl	8010cdc <uxr_get_output_reliable_stream>
 8010fc0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	f000 8095 	beq.w	80110f4 <uxr_prepare_output_stream_fragmented+0x14c>
 8010fca:	4604      	mov	r4, r0
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	f000 8091 	beq.w	80110f4 <uxr_prepare_output_stream_fragmented+0x14c>
 8010fd2:	f007 f9b3 	bl	801833c <get_available_free_slots>
 8010fd6:	2800      	cmp	r0, #0
 8010fd8:	f000 8087 	beq.w	80110ea <uxr_prepare_output_stream_fragmented+0x142>
 8010fdc:	8922      	ldrh	r2, [r4, #8]
 8010fde:	89e7      	ldrh	r7, [r4, #14]
 8010fe0:	fbb7 f3f2 	udiv	r3, r7, r2
 8010fe4:	fb02 7313 	mls	r3, r2, r3, r7
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	6861      	ldr	r1, [r4, #4]
 8010fec:	fbb1 f1f2 	udiv	r1, r1, r2
 8010ff0:	6822      	ldr	r2, [r4, #0]
 8010ff2:	9105      	str	r1, [sp, #20]
 8010ff4:	fb01 f303 	mul.w	r3, r1, r3
 8010ff8:	3304      	adds	r3, #4
 8010ffa:	eb02 0903 	add.w	r9, r2, r3
 8010ffe:	7b23      	ldrb	r3, [r4, #12]
 8011000:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8011004:	4543      	cmp	r3, r8
 8011006:	f1a1 0b04 	sub.w	fp, r1, #4
 801100a:	d37f      	bcc.n	801110c <uxr_prepare_output_stream_fragmented+0x164>
 801100c:	f1ab 0a04 	sub.w	sl, fp, #4
 8011010:	ebaa 0a03 	sub.w	sl, sl, r3
 8011014:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011016:	f8cd 8000 	str.w	r8, [sp]
 801101a:	fa1f f38a 	uxth.w	r3, sl
 801101e:	9304      	str	r3, [sp, #16]
 8011020:	465a      	mov	r2, fp
 8011022:	2300      	movs	r3, #0
 8011024:	4649      	mov	r1, r9
 8011026:	a80a      	add	r0, sp, #40	@ 0x28
 8011028:	f7fa fe30 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 801102c:	f106 0a08 	add.w	sl, r6, #8
 8011030:	45da      	cmp	sl, fp
 8011032:	bf2c      	ite	cs
 8011034:	2300      	movcs	r3, #0
 8011036:	2301      	movcc	r3, #1
 8011038:	9a04      	ldr	r2, [sp, #16]
 801103a:	005b      	lsls	r3, r3, #1
 801103c:	210d      	movs	r1, #13
 801103e:	a80a      	add	r0, sp, #40	@ 0x28
 8011040:	f7ff fe80 	bl	8010d44 <uxr_buffer_submessage_header>
 8011044:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011048:	fbb7 f2fc 	udiv	r2, r7, ip
 801104c:	fb0c 7212 	mls	r2, ip, r2, r7
 8011050:	b292      	uxth	r2, r2
 8011052:	6863      	ldr	r3, [r4, #4]
 8011054:	fbb3 f3fc 	udiv	r3, r3, ip
 8011058:	fb02 f303 	mul.w	r3, r2, r3
 801105c:	6822      	ldr	r2, [r4, #0]
 801105e:	2101      	movs	r1, #1
 8011060:	f842 b003 	str.w	fp, [r2, r3]
 8011064:	4638      	mov	r0, r7
 8011066:	f007 fabd 	bl	80185e4 <uxr_seq_num_add>
 801106a:	9b05      	ldr	r3, [sp, #20]
 801106c:	9e03      	ldr	r6, [sp, #12]
 801106e:	f1a3 0208 	sub.w	r2, r3, #8
 8011072:	f108 0104 	add.w	r1, r8, #4
 8011076:	4607      	mov	r7, r0
 8011078:	eba2 0208 	sub.w	r2, r2, r8
 801107c:	4449      	add	r1, r9
 801107e:	4630      	mov	r0, r6
 8011080:	f7fa fe16 	bl	800bcb0 <ucdr_init_buffer>
 8011084:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8011086:	81e7      	strh	r7, [r4, #14]
 8011088:	1d1a      	adds	r2, r3, #4
 801108a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801108e:	bf28      	it	cs
 8011090:	2200      	movcs	r2, #0
 8011092:	2300      	movs	r3, #0
 8011094:	b292      	uxth	r2, r2
 8011096:	2107      	movs	r1, #7
 8011098:	4630      	mov	r0, r6
 801109a:	f7ff fe53 	bl	8010d44 <uxr_buffer_submessage_header>
 801109e:	9906      	ldr	r1, [sp, #24]
 80110a0:	aa09      	add	r2, sp, #36	@ 0x24
 80110a2:	4628      	mov	r0, r5
 80110a4:	f7ff f89e 	bl	80101e4 <uxr_init_base_object_request>
 80110a8:	4604      	mov	r4, r0
 80110aa:	b320      	cbz	r0, 80110f6 <uxr_prepare_output_stream_fragmented+0x14e>
 80110ac:	9e03      	ldr	r6, [sp, #12]
 80110ae:	a909      	add	r1, sp, #36	@ 0x24
 80110b0:	4630      	mov	r0, r6
 80110b2:	f000 ffe1 	bl	8012078 <uxr_serialize_WRITE_DATA_Payload_Data>
 80110b6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80110ba:	4630      	mov	r0, r6
 80110bc:	1a52      	subs	r2, r2, r1
 80110be:	f7fa fdf7 	bl	800bcb0 <ucdr_init_buffer>
 80110c2:	9b07      	ldr	r3, [sp, #28]
 80110c4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80110c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80110ca:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80110ce:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80110d0:	491a      	ldr	r1, [pc, #104]	@ (801113c <uxr_prepare_output_stream_fragmented+0x194>)
 80110d2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80110d6:	4630      	mov	r0, r6
 80110d8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80110dc:	462a      	mov	r2, r5
 80110de:	f7fa fdbb 	bl	800bc58 <ucdr_set_on_full_buffer_callback>
 80110e2:	4620      	mov	r0, r4
 80110e4:	b013      	add	sp, #76	@ 0x4c
 80110e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ea:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80110ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80110ee:	4628      	mov	r0, r5
 80110f0:	4798      	blx	r3
 80110f2:	b920      	cbnz	r0, 80110fe <uxr_prepare_output_stream_fragmented+0x156>
 80110f4:	2400      	movs	r4, #0
 80110f6:	4620      	mov	r0, r4
 80110f8:	b013      	add	sp, #76	@ 0x4c
 80110fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fe:	4620      	mov	r0, r4
 8011100:	f007 f91c 	bl	801833c <get_available_free_slots>
 8011104:	2800      	cmp	r0, #0
 8011106:	f47f af69 	bne.w	8010fdc <uxr_prepare_output_stream_fragmented+0x34>
 801110a:	e7f3      	b.n	80110f4 <uxr_prepare_output_stream_fragmented+0x14c>
 801110c:	4638      	mov	r0, r7
 801110e:	2101      	movs	r1, #1
 8011110:	f007 fa68 	bl	80185e4 <uxr_seq_num_add>
 8011114:	8921      	ldrh	r1, [r4, #8]
 8011116:	fbb0 f2f1 	udiv	r2, r0, r1
 801111a:	fb01 0212 	mls	r2, r1, r2, r0
 801111e:	b292      	uxth	r2, r2
 8011120:	6863      	ldr	r3, [r4, #4]
 8011122:	fbb3 f3f1 	udiv	r3, r3, r1
 8011126:	fb02 f303 	mul.w	r3, r2, r3
 801112a:	6822      	ldr	r2, [r4, #0]
 801112c:	3304      	adds	r3, #4
 801112e:	eb02 0903 	add.w	r9, r2, r3
 8011132:	4607      	mov	r7, r0
 8011134:	7b23      	ldrb	r3, [r4, #12]
 8011136:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801113a:	e767      	b.n	801100c <uxr_prepare_output_stream_fragmented+0x64>
 801113c:	08010e31 	.word	0x08010e31

08011140 <uxr_serialize_message_header>:
 8011140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011144:	4617      	mov	r7, r2
 8011146:	4604      	mov	r4, r0
 8011148:	461e      	mov	r6, r3
 801114a:	460d      	mov	r5, r1
 801114c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8011150:	f7f9 faee 	bl	800a730 <ucdr_serialize_uint8_t>
 8011154:	4639      	mov	r1, r7
 8011156:	4620      	mov	r0, r4
 8011158:	f7f9 faea 	bl	800a730 <ucdr_serialize_uint8_t>
 801115c:	4632      	mov	r2, r6
 801115e:	2101      	movs	r1, #1
 8011160:	4620      	mov	r0, r4
 8011162:	f7f9 fb9b 	bl	800a89c <ucdr_serialize_endian_uint16_t>
 8011166:	062b      	lsls	r3, r5, #24
 8011168:	d501      	bpl.n	801116e <uxr_serialize_message_header+0x2e>
 801116a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801116e:	4641      	mov	r1, r8
 8011170:	4620      	mov	r0, r4
 8011172:	2204      	movs	r2, #4
 8011174:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011178:	f7fd b9ee 	b.w	800e558 <ucdr_serialize_array_uint8_t>

0801117c <uxr_deserialize_message_header>:
 801117c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011180:	4617      	mov	r7, r2
 8011182:	4604      	mov	r4, r0
 8011184:	461e      	mov	r6, r3
 8011186:	460d      	mov	r5, r1
 8011188:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801118c:	f7f9 fae6 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011190:	4639      	mov	r1, r7
 8011192:	4620      	mov	r0, r4
 8011194:	f7f9 fae2 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011198:	4632      	mov	r2, r6
 801119a:	2101      	movs	r1, #1
 801119c:	4620      	mov	r0, r4
 801119e:	f7f9 fc73 	bl	800aa88 <ucdr_deserialize_endian_uint16_t>
 80111a2:	f995 3000 	ldrsb.w	r3, [r5]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	da01      	bge.n	80111ae <uxr_deserialize_message_header+0x32>
 80111aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ae:	4641      	mov	r1, r8
 80111b0:	4620      	mov	r0, r4
 80111b2:	2204      	movs	r2, #4
 80111b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111b8:	f7fd ba32 	b.w	800e620 <ucdr_deserialize_array_uint8_t>

080111bc <uxr_serialize_submessage_header>:
 80111bc:	b570      	push	{r4, r5, r6, lr}
 80111be:	4616      	mov	r6, r2
 80111c0:	4604      	mov	r4, r0
 80111c2:	461d      	mov	r5, r3
 80111c4:	f7f9 fab4 	bl	800a730 <ucdr_serialize_uint8_t>
 80111c8:	4631      	mov	r1, r6
 80111ca:	4620      	mov	r0, r4
 80111cc:	f7f9 fab0 	bl	800a730 <ucdr_serialize_uint8_t>
 80111d0:	462a      	mov	r2, r5
 80111d2:	4620      	mov	r0, r4
 80111d4:	2101      	movs	r1, #1
 80111d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111da:	f7f9 bb5f 	b.w	800a89c <ucdr_serialize_endian_uint16_t>
 80111de:	bf00      	nop

080111e0 <uxr_deserialize_submessage_header>:
 80111e0:	b570      	push	{r4, r5, r6, lr}
 80111e2:	4616      	mov	r6, r2
 80111e4:	4604      	mov	r4, r0
 80111e6:	461d      	mov	r5, r3
 80111e8:	f7f9 fab8 	bl	800a75c <ucdr_deserialize_uint8_t>
 80111ec:	4631      	mov	r1, r6
 80111ee:	4620      	mov	r0, r4
 80111f0:	f7f9 fab4 	bl	800a75c <ucdr_deserialize_uint8_t>
 80111f4:	462a      	mov	r2, r5
 80111f6:	4620      	mov	r0, r4
 80111f8:	2101      	movs	r1, #1
 80111fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80111fe:	f7f9 bc43 	b.w	800aa88 <ucdr_deserialize_endian_uint16_t>
 8011202:	bf00      	nop

08011204 <uxr_serialize_CLIENT_Representation>:
 8011204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011208:	2204      	movs	r2, #4
 801120a:	460e      	mov	r6, r1
 801120c:	4605      	mov	r5, r0
 801120e:	f7fd f9a3 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011212:	2202      	movs	r2, #2
 8011214:	1d31      	adds	r1, r6, #4
 8011216:	4604      	mov	r4, r0
 8011218:	4628      	mov	r0, r5
 801121a:	f7fd f99d 	bl	800e558 <ucdr_serialize_array_uint8_t>
 801121e:	2202      	movs	r2, #2
 8011220:	4004      	ands	r4, r0
 8011222:	1db1      	adds	r1, r6, #6
 8011224:	4628      	mov	r0, r5
 8011226:	f7fd f997 	bl	800e558 <ucdr_serialize_array_uint8_t>
 801122a:	b2e4      	uxtb	r4, r4
 801122c:	2204      	movs	r2, #4
 801122e:	4004      	ands	r4, r0
 8011230:	f106 0108 	add.w	r1, r6, #8
 8011234:	4628      	mov	r0, r5
 8011236:	f7fd f98f 	bl	800e558 <ucdr_serialize_array_uint8_t>
 801123a:	7b31      	ldrb	r1, [r6, #12]
 801123c:	ea00 0804 	and.w	r8, r0, r4
 8011240:	4628      	mov	r0, r5
 8011242:	f7f9 fa75 	bl	800a730 <ucdr_serialize_uint8_t>
 8011246:	7b71      	ldrb	r1, [r6, #13]
 8011248:	ea08 0800 	and.w	r8, r8, r0
 801124c:	4628      	mov	r0, r5
 801124e:	f7f9 fa41 	bl	800a6d4 <ucdr_serialize_bool>
 8011252:	7b73      	ldrb	r3, [r6, #13]
 8011254:	ea08 0800 	and.w	r8, r8, r0
 8011258:	b93b      	cbnz	r3, 801126a <uxr_serialize_CLIENT_Representation+0x66>
 801125a:	8bb1      	ldrh	r1, [r6, #28]
 801125c:	4628      	mov	r0, r5
 801125e:	f7f9 fa93 	bl	800a788 <ucdr_serialize_uint16_t>
 8011262:	ea08 0000 	and.w	r0, r8, r0
 8011266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801126a:	6931      	ldr	r1, [r6, #16]
 801126c:	4628      	mov	r0, r5
 801126e:	f7f9 fc7b 	bl	800ab68 <ucdr_serialize_uint32_t>
 8011272:	6933      	ldr	r3, [r6, #16]
 8011274:	b1e3      	cbz	r3, 80112b0 <uxr_serialize_CLIENT_Representation+0xac>
 8011276:	b1c0      	cbz	r0, 80112aa <uxr_serialize_CLIENT_Representation+0xa6>
 8011278:	4637      	mov	r7, r6
 801127a:	f04f 0900 	mov.w	r9, #0
 801127e:	e001      	b.n	8011284 <uxr_serialize_CLIENT_Representation+0x80>
 8011280:	3708      	adds	r7, #8
 8011282:	b194      	cbz	r4, 80112aa <uxr_serialize_CLIENT_Representation+0xa6>
 8011284:	6979      	ldr	r1, [r7, #20]
 8011286:	4628      	mov	r0, r5
 8011288:	f006 fb32 	bl	80178f0 <ucdr_serialize_string>
 801128c:	69b9      	ldr	r1, [r7, #24]
 801128e:	4604      	mov	r4, r0
 8011290:	4628      	mov	r0, r5
 8011292:	f006 fb2d 	bl	80178f0 <ucdr_serialize_string>
 8011296:	6933      	ldr	r3, [r6, #16]
 8011298:	f109 0901 	add.w	r9, r9, #1
 801129c:	4004      	ands	r4, r0
 801129e:	4599      	cmp	r9, r3
 80112a0:	b2e4      	uxtb	r4, r4
 80112a2:	d3ed      	bcc.n	8011280 <uxr_serialize_CLIENT_Representation+0x7c>
 80112a4:	ea08 0804 	and.w	r8, r8, r4
 80112a8:	e7d7      	b.n	801125a <uxr_serialize_CLIENT_Representation+0x56>
 80112aa:	f04f 0800 	mov.w	r8, #0
 80112ae:	e7d4      	b.n	801125a <uxr_serialize_CLIENT_Representation+0x56>
 80112b0:	ea08 0800 	and.w	r8, r8, r0
 80112b4:	e7d1      	b.n	801125a <uxr_serialize_CLIENT_Representation+0x56>
 80112b6:	bf00      	nop

080112b8 <uxr_deserialize_CLIENT_Representation>:
 80112b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112bc:	2204      	movs	r2, #4
 80112be:	460c      	mov	r4, r1
 80112c0:	4605      	mov	r5, r0
 80112c2:	f7fd f9ad 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 80112c6:	2202      	movs	r2, #2
 80112c8:	1d21      	adds	r1, r4, #4
 80112ca:	4606      	mov	r6, r0
 80112cc:	4628      	mov	r0, r5
 80112ce:	f7fd f9a7 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 80112d2:	2202      	movs	r2, #2
 80112d4:	4006      	ands	r6, r0
 80112d6:	1da1      	adds	r1, r4, #6
 80112d8:	4628      	mov	r0, r5
 80112da:	f7fd f9a1 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 80112de:	b2f6      	uxtb	r6, r6
 80112e0:	2204      	movs	r2, #4
 80112e2:	4006      	ands	r6, r0
 80112e4:	f104 0108 	add.w	r1, r4, #8
 80112e8:	4628      	mov	r0, r5
 80112ea:	f7fd f999 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 80112ee:	f104 010c 	add.w	r1, r4, #12
 80112f2:	ea00 0706 	and.w	r7, r0, r6
 80112f6:	4628      	mov	r0, r5
 80112f8:	f7f9 fa30 	bl	800a75c <ucdr_deserialize_uint8_t>
 80112fc:	f104 010d 	add.w	r1, r4, #13
 8011300:	4007      	ands	r7, r0
 8011302:	4628      	mov	r0, r5
 8011304:	f7f9 f9fc 	bl	800a700 <ucdr_deserialize_bool>
 8011308:	7b63      	ldrb	r3, [r4, #13]
 801130a:	4007      	ands	r7, r0
 801130c:	b93b      	cbnz	r3, 801131e <uxr_deserialize_CLIENT_Representation+0x66>
 801130e:	f104 011c 	add.w	r1, r4, #28
 8011312:	4628      	mov	r0, r5
 8011314:	f7f9 fb3c 	bl	800a990 <ucdr_deserialize_uint16_t>
 8011318:	4038      	ands	r0, r7
 801131a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801131e:	f104 0110 	add.w	r1, r4, #16
 8011322:	4628      	mov	r0, r5
 8011324:	f7f9 fd4a 	bl	800adbc <ucdr_deserialize_uint32_t>
 8011328:	6923      	ldr	r3, [r4, #16]
 801132a:	2b01      	cmp	r3, #1
 801132c:	d903      	bls.n	8011336 <uxr_deserialize_CLIENT_Representation+0x7e>
 801132e:	2301      	movs	r3, #1
 8011330:	75ab      	strb	r3, [r5, #22]
 8011332:	2700      	movs	r7, #0
 8011334:	e7eb      	b.n	801130e <uxr_deserialize_CLIENT_Representation+0x56>
 8011336:	b30b      	cbz	r3, 801137c <uxr_deserialize_CLIENT_Representation+0xc4>
 8011338:	2800      	cmp	r0, #0
 801133a:	d0fa      	beq.n	8011332 <uxr_deserialize_CLIENT_Representation+0x7a>
 801133c:	46a0      	mov	r8, r4
 801133e:	f04f 0900 	mov.w	r9, #0
 8011342:	e003      	b.n	801134c <uxr_deserialize_CLIENT_Representation+0x94>
 8011344:	f108 0808 	add.w	r8, r8, #8
 8011348:	2e00      	cmp	r6, #0
 801134a:	d0f2      	beq.n	8011332 <uxr_deserialize_CLIENT_Representation+0x7a>
 801134c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011354:	4628      	mov	r0, r5
 8011356:	f006 fad9 	bl	801790c <ucdr_deserialize_string>
 801135a:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801135e:	4606      	mov	r6, r0
 8011360:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011364:	4628      	mov	r0, r5
 8011366:	f006 fad1 	bl	801790c <ucdr_deserialize_string>
 801136a:	6923      	ldr	r3, [r4, #16]
 801136c:	f109 0901 	add.w	r9, r9, #1
 8011370:	4006      	ands	r6, r0
 8011372:	4599      	cmp	r9, r3
 8011374:	b2f6      	uxtb	r6, r6
 8011376:	d3e5      	bcc.n	8011344 <uxr_deserialize_CLIENT_Representation+0x8c>
 8011378:	4037      	ands	r7, r6
 801137a:	e7c8      	b.n	801130e <uxr_deserialize_CLIENT_Representation+0x56>
 801137c:	4007      	ands	r7, r0
 801137e:	e7c6      	b.n	801130e <uxr_deserialize_CLIENT_Representation+0x56>

08011380 <uxr_serialize_AGENT_Representation>:
 8011380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011384:	2204      	movs	r2, #4
 8011386:	460f      	mov	r7, r1
 8011388:	4605      	mov	r5, r0
 801138a:	f7fd f8e5 	bl	800e558 <ucdr_serialize_array_uint8_t>
 801138e:	2202      	movs	r2, #2
 8011390:	4604      	mov	r4, r0
 8011392:	1d39      	adds	r1, r7, #4
 8011394:	4628      	mov	r0, r5
 8011396:	f7fd f8df 	bl	800e558 <ucdr_serialize_array_uint8_t>
 801139a:	4020      	ands	r0, r4
 801139c:	2202      	movs	r2, #2
 801139e:	b2c4      	uxtb	r4, r0
 80113a0:	1db9      	adds	r1, r7, #6
 80113a2:	4628      	mov	r0, r5
 80113a4:	f7fd f8d8 	bl	800e558 <ucdr_serialize_array_uint8_t>
 80113a8:	7a39      	ldrb	r1, [r7, #8]
 80113aa:	4004      	ands	r4, r0
 80113ac:	4628      	mov	r0, r5
 80113ae:	f7f9 f991 	bl	800a6d4 <ucdr_serialize_bool>
 80113b2:	7a3b      	ldrb	r3, [r7, #8]
 80113b4:	ea00 0804 	and.w	r8, r0, r4
 80113b8:	b913      	cbnz	r3, 80113c0 <uxr_serialize_AGENT_Representation+0x40>
 80113ba:	4640      	mov	r0, r8
 80113bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113c0:	68f9      	ldr	r1, [r7, #12]
 80113c2:	4628      	mov	r0, r5
 80113c4:	f7f9 fbd0 	bl	800ab68 <ucdr_serialize_uint32_t>
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	b303      	cbz	r3, 801140e <uxr_serialize_AGENT_Representation+0x8e>
 80113cc:	b1d0      	cbz	r0, 8011404 <uxr_serialize_AGENT_Representation+0x84>
 80113ce:	463e      	mov	r6, r7
 80113d0:	f04f 0900 	mov.w	r9, #0
 80113d4:	e001      	b.n	80113da <uxr_serialize_AGENT_Representation+0x5a>
 80113d6:	3608      	adds	r6, #8
 80113d8:	b1a4      	cbz	r4, 8011404 <uxr_serialize_AGENT_Representation+0x84>
 80113da:	6931      	ldr	r1, [r6, #16]
 80113dc:	4628      	mov	r0, r5
 80113de:	f006 fa87 	bl	80178f0 <ucdr_serialize_string>
 80113e2:	6971      	ldr	r1, [r6, #20]
 80113e4:	4604      	mov	r4, r0
 80113e6:	4628      	mov	r0, r5
 80113e8:	f006 fa82 	bl	80178f0 <ucdr_serialize_string>
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f109 0901 	add.w	r9, r9, #1
 80113f2:	4004      	ands	r4, r0
 80113f4:	4599      	cmp	r9, r3
 80113f6:	b2e4      	uxtb	r4, r4
 80113f8:	d3ed      	bcc.n	80113d6 <uxr_serialize_AGENT_Representation+0x56>
 80113fa:	ea08 0804 	and.w	r8, r8, r4
 80113fe:	4640      	mov	r0, r8
 8011400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011404:	f04f 0800 	mov.w	r8, #0
 8011408:	4640      	mov	r0, r8
 801140a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801140e:	ea08 0800 	and.w	r8, r8, r0
 8011412:	e7d2      	b.n	80113ba <uxr_serialize_AGENT_Representation+0x3a>

08011414 <uxr_serialize_DATAWRITER_Representation>:
 8011414:	b570      	push	{r4, r5, r6, lr}
 8011416:	460d      	mov	r5, r1
 8011418:	7809      	ldrb	r1, [r1, #0]
 801141a:	4606      	mov	r6, r0
 801141c:	f7f9 f988 	bl	800a730 <ucdr_serialize_uint8_t>
 8011420:	4604      	mov	r4, r0
 8011422:	b130      	cbz	r0, 8011432 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011424:	782b      	ldrb	r3, [r5, #0]
 8011426:	2b02      	cmp	r3, #2
 8011428:	d00c      	beq.n	8011444 <uxr_serialize_DATAWRITER_Representation+0x30>
 801142a:	2b03      	cmp	r3, #3
 801142c:	d010      	beq.n	8011450 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801142e:	2b01      	cmp	r3, #1
 8011430:	d008      	beq.n	8011444 <uxr_serialize_DATAWRITER_Representation+0x30>
 8011432:	2202      	movs	r2, #2
 8011434:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011438:	4630      	mov	r0, r6
 801143a:	f7fd f88d 	bl	800e558 <ucdr_serialize_array_uint8_t>
 801143e:	4020      	ands	r0, r4
 8011440:	b2c0      	uxtb	r0, r0
 8011442:	bd70      	pop	{r4, r5, r6, pc}
 8011444:	6869      	ldr	r1, [r5, #4]
 8011446:	4630      	mov	r0, r6
 8011448:	f006 fa52 	bl	80178f0 <ucdr_serialize_string>
 801144c:	4604      	mov	r4, r0
 801144e:	e7f0      	b.n	8011432 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011450:	4629      	mov	r1, r5
 8011452:	4630      	mov	r0, r6
 8011454:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8011458:	3104      	adds	r1, #4
 801145a:	f7fd fa1d 	bl	800e898 <ucdr_serialize_sequence_uint8_t>
 801145e:	4604      	mov	r4, r0
 8011460:	e7e7      	b.n	8011432 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011462:	bf00      	nop

08011464 <uxr_serialize_ObjectVariant.part.0>:
 8011464:	b570      	push	{r4, r5, r6, lr}
 8011466:	780b      	ldrb	r3, [r1, #0]
 8011468:	3b01      	subs	r3, #1
 801146a:	460c      	mov	r4, r1
 801146c:	4605      	mov	r5, r0
 801146e:	2b0d      	cmp	r3, #13
 8011470:	d816      	bhi.n	80114a0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011472:	e8df f003 	tbb	[pc, r3]
 8011476:	0733      	.short	0x0733
 8011478:	07071717 	.word	0x07071717
 801147c:	0c150707 	.word	0x0c150707
 8011480:	4c510c0c 	.word	0x4c510c0c
 8011484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011488:	3104      	adds	r1, #4
 801148a:	f7ff bfc3 	b.w	8011414 <uxr_serialize_DATAWRITER_Representation>
 801148e:	7909      	ldrb	r1, [r1, #4]
 8011490:	f7f9 f94e 	bl	800a730 <ucdr_serialize_uint8_t>
 8011494:	b300      	cbz	r0, 80114d8 <uxr_serialize_ObjectVariant.part.0+0x74>
 8011496:	7923      	ldrb	r3, [r4, #4]
 8011498:	2b01      	cmp	r3, #1
 801149a:	d042      	beq.n	8011522 <uxr_serialize_ObjectVariant.part.0+0xbe>
 801149c:	2b02      	cmp	r3, #2
 801149e:	d040      	beq.n	8011522 <uxr_serialize_ObjectVariant.part.0+0xbe>
 80114a0:	2001      	movs	r0, #1
 80114a2:	bd70      	pop	{r4, r5, r6, pc}
 80114a4:	7909      	ldrb	r1, [r1, #4]
 80114a6:	f7f9 f943 	bl	800a730 <ucdr_serialize_uint8_t>
 80114aa:	4606      	mov	r6, r0
 80114ac:	b158      	cbz	r0, 80114c6 <uxr_serialize_ObjectVariant.part.0+0x62>
 80114ae:	7923      	ldrb	r3, [r4, #4]
 80114b0:	2b02      	cmp	r3, #2
 80114b2:	d03c      	beq.n	801152e <uxr_serialize_ObjectVariant.part.0+0xca>
 80114b4:	2b03      	cmp	r3, #3
 80114b6:	d106      	bne.n	80114c6 <uxr_serialize_ObjectVariant.part.0+0x62>
 80114b8:	68a2      	ldr	r2, [r4, #8]
 80114ba:	f104 010c 	add.w	r1, r4, #12
 80114be:	4628      	mov	r0, r5
 80114c0:	f7fd f9ea 	bl	800e898 <ucdr_serialize_sequence_uint8_t>
 80114c4:	4606      	mov	r6, r0
 80114c6:	2202      	movs	r2, #2
 80114c8:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80114cc:	4628      	mov	r0, r5
 80114ce:	f7fd f843 	bl	800e558 <ucdr_serialize_array_uint8_t>
 80114d2:	4030      	ands	r0, r6
 80114d4:	b2c0      	uxtb	r0, r0
 80114d6:	bd70      	pop	{r4, r5, r6, pc}
 80114d8:	2000      	movs	r0, #0
 80114da:	bd70      	pop	{r4, r5, r6, pc}
 80114dc:	7909      	ldrb	r1, [r1, #4]
 80114de:	f7f9 f927 	bl	800a730 <ucdr_serialize_uint8_t>
 80114e2:	4606      	mov	r6, r0
 80114e4:	b158      	cbz	r0, 80114fe <uxr_serialize_ObjectVariant.part.0+0x9a>
 80114e6:	7923      	ldrb	r3, [r4, #4]
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	d003      	beq.n	80114f4 <uxr_serialize_ObjectVariant.part.0+0x90>
 80114ec:	2b03      	cmp	r3, #3
 80114ee:	d024      	beq.n	801153a <uxr_serialize_ObjectVariant.part.0+0xd6>
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d104      	bne.n	80114fe <uxr_serialize_ObjectVariant.part.0+0x9a>
 80114f4:	68a1      	ldr	r1, [r4, #8]
 80114f6:	4628      	mov	r0, r5
 80114f8:	f006 f9fa 	bl	80178f0 <ucdr_serialize_string>
 80114fc:	4606      	mov	r6, r0
 80114fe:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8011502:	4628      	mov	r0, r5
 8011504:	f7f9 fe3c 	bl	800b180 <ucdr_serialize_int16_t>
 8011508:	4030      	ands	r0, r6
 801150a:	b2c0      	uxtb	r0, r0
 801150c:	bd70      	pop	{r4, r5, r6, pc}
 801150e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011512:	3104      	adds	r1, #4
 8011514:	f7ff be76 	b.w	8011204 <uxr_serialize_CLIENT_Representation>
 8011518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801151c:	3104      	adds	r1, #4
 801151e:	f7ff bf2f 	b.w	8011380 <uxr_serialize_AGENT_Representation>
 8011522:	68a1      	ldr	r1, [r4, #8]
 8011524:	4628      	mov	r0, r5
 8011526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801152a:	f006 b9e1 	b.w	80178f0 <ucdr_serialize_string>
 801152e:	68a1      	ldr	r1, [r4, #8]
 8011530:	4628      	mov	r0, r5
 8011532:	f006 f9dd 	bl	80178f0 <ucdr_serialize_string>
 8011536:	4606      	mov	r6, r0
 8011538:	e7c5      	b.n	80114c6 <uxr_serialize_ObjectVariant.part.0+0x62>
 801153a:	68a2      	ldr	r2, [r4, #8]
 801153c:	f104 010c 	add.w	r1, r4, #12
 8011540:	4628      	mov	r0, r5
 8011542:	f7fd f9a9 	bl	800e898 <ucdr_serialize_sequence_uint8_t>
 8011546:	4606      	mov	r6, r0
 8011548:	e7d9      	b.n	80114fe <uxr_serialize_ObjectVariant.part.0+0x9a>
 801154a:	bf00      	nop

0801154c <uxr_deserialize_DATAWRITER_Representation>:
 801154c:	b570      	push	{r4, r5, r6, lr}
 801154e:	4606      	mov	r6, r0
 8011550:	460d      	mov	r5, r1
 8011552:	f7f9 f903 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011556:	4604      	mov	r4, r0
 8011558:	b130      	cbz	r0, 8011568 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801155a:	782b      	ldrb	r3, [r5, #0]
 801155c:	2b02      	cmp	r3, #2
 801155e:	d00c      	beq.n	801157a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011560:	2b03      	cmp	r3, #3
 8011562:	d012      	beq.n	801158a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011564:	2b01      	cmp	r3, #1
 8011566:	d008      	beq.n	801157a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011568:	2202      	movs	r2, #2
 801156a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801156e:	4630      	mov	r0, r6
 8011570:	f7fd f856 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011574:	4020      	ands	r0, r4
 8011576:	b2c0      	uxtb	r0, r0
 8011578:	bd70      	pop	{r4, r5, r6, pc}
 801157a:	6869      	ldr	r1, [r5, #4]
 801157c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011580:	4630      	mov	r0, r6
 8011582:	f006 f9c3 	bl	801790c <ucdr_deserialize_string>
 8011586:	4604      	mov	r4, r0
 8011588:	e7ee      	b.n	8011568 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801158a:	1d2b      	adds	r3, r5, #4
 801158c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011590:	f105 0108 	add.w	r1, r5, #8
 8011594:	4630      	mov	r0, r6
 8011596:	f7fd f991 	bl	800e8bc <ucdr_deserialize_sequence_uint8_t>
 801159a:	4604      	mov	r4, r0
 801159c:	e7e4      	b.n	8011568 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801159e:	bf00      	nop

080115a0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80115a0:	b570      	push	{r4, r5, r6, lr}
 80115a2:	460d      	mov	r5, r1
 80115a4:	7809      	ldrb	r1, [r1, #0]
 80115a6:	4606      	mov	r6, r0
 80115a8:	f7f9 f894 	bl	800a6d4 <ucdr_serialize_bool>
 80115ac:	782b      	ldrb	r3, [r5, #0]
 80115ae:	4604      	mov	r4, r0
 80115b0:	b94b      	cbnz	r3, 80115c6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80115b2:	7a29      	ldrb	r1, [r5, #8]
 80115b4:	4630      	mov	r0, r6
 80115b6:	f7f9 f88d 	bl	800a6d4 <ucdr_serialize_bool>
 80115ba:	7a2b      	ldrb	r3, [r5, #8]
 80115bc:	4004      	ands	r4, r0
 80115be:	b2e4      	uxtb	r4, r4
 80115c0:	b943      	cbnz	r3, 80115d4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80115c2:	4620      	mov	r0, r4
 80115c4:	bd70      	pop	{r4, r5, r6, pc}
 80115c6:	6869      	ldr	r1, [r5, #4]
 80115c8:	4630      	mov	r0, r6
 80115ca:	f006 f991 	bl	80178f0 <ucdr_serialize_string>
 80115ce:	4004      	ands	r4, r0
 80115d0:	b2e4      	uxtb	r4, r4
 80115d2:	e7ee      	b.n	80115b2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80115d4:	68e9      	ldr	r1, [r5, #12]
 80115d6:	4630      	mov	r0, r6
 80115d8:	f006 f98a 	bl	80178f0 <ucdr_serialize_string>
 80115dc:	4004      	ands	r4, r0
 80115de:	4620      	mov	r0, r4
 80115e0:	bd70      	pop	{r4, r5, r6, pc}
 80115e2:	bf00      	nop

080115e4 <uxr_serialize_OBJK_Topic_Binary>:
 80115e4:	b570      	push	{r4, r5, r6, lr}
 80115e6:	460d      	mov	r5, r1
 80115e8:	6809      	ldr	r1, [r1, #0]
 80115ea:	4606      	mov	r6, r0
 80115ec:	f006 f980 	bl	80178f0 <ucdr_serialize_string>
 80115f0:	7929      	ldrb	r1, [r5, #4]
 80115f2:	4604      	mov	r4, r0
 80115f4:	4630      	mov	r0, r6
 80115f6:	f7f9 f86d 	bl	800a6d4 <ucdr_serialize_bool>
 80115fa:	792b      	ldrb	r3, [r5, #4]
 80115fc:	4004      	ands	r4, r0
 80115fe:	b2e4      	uxtb	r4, r4
 8011600:	b943      	cbnz	r3, 8011614 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8011602:	7b29      	ldrb	r1, [r5, #12]
 8011604:	4630      	mov	r0, r6
 8011606:	f7f9 f865 	bl	800a6d4 <ucdr_serialize_bool>
 801160a:	7b2b      	ldrb	r3, [r5, #12]
 801160c:	4004      	ands	r4, r0
 801160e:	b93b      	cbnz	r3, 8011620 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8011610:	4620      	mov	r0, r4
 8011612:	bd70      	pop	{r4, r5, r6, pc}
 8011614:	68a9      	ldr	r1, [r5, #8]
 8011616:	4630      	mov	r0, r6
 8011618:	f006 f96a 	bl	80178f0 <ucdr_serialize_string>
 801161c:	4004      	ands	r4, r0
 801161e:	e7f0      	b.n	8011602 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8011620:	6929      	ldr	r1, [r5, #16]
 8011622:	4630      	mov	r0, r6
 8011624:	f006 f964 	bl	80178f0 <ucdr_serialize_string>
 8011628:	4004      	ands	r4, r0
 801162a:	b2e4      	uxtb	r4, r4
 801162c:	4620      	mov	r0, r4
 801162e:	bd70      	pop	{r4, r5, r6, pc}

08011630 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8011630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011634:	460c      	mov	r4, r1
 8011636:	7809      	ldrb	r1, [r1, #0]
 8011638:	4606      	mov	r6, r0
 801163a:	f7f9 f84b 	bl	800a6d4 <ucdr_serialize_bool>
 801163e:	7823      	ldrb	r3, [r4, #0]
 8011640:	4605      	mov	r5, r0
 8011642:	b96b      	cbnz	r3, 8011660 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011644:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011648:	4630      	mov	r0, r6
 801164a:	f7f9 f843 	bl	800a6d4 <ucdr_serialize_bool>
 801164e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011652:	4005      	ands	r5, r0
 8011654:	b2ed      	uxtb	r5, r5
 8011656:	2b00      	cmp	r3, #0
 8011658:	d16a      	bne.n	8011730 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 801165a:	4628      	mov	r0, r5
 801165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011660:	6861      	ldr	r1, [r4, #4]
 8011662:	4630      	mov	r0, r6
 8011664:	f7f9 fa80 	bl	800ab68 <ucdr_serialize_uint32_t>
 8011668:	6863      	ldr	r3, [r4, #4]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d06c      	beq.n	8011748 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 801166e:	2800      	cmp	r0, #0
 8011670:	d068      	beq.n	8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8011672:	68a1      	ldr	r1, [r4, #8]
 8011674:	4630      	mov	r0, r6
 8011676:	f006 f93b 	bl	80178f0 <ucdr_serialize_string>
 801167a:	6862      	ldr	r2, [r4, #4]
 801167c:	2a01      	cmp	r2, #1
 801167e:	d953      	bls.n	8011728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011680:	2800      	cmp	r0, #0
 8011682:	d05f      	beq.n	8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8011684:	68e1      	ldr	r1, [r4, #12]
 8011686:	4630      	mov	r0, r6
 8011688:	f006 f932 	bl	80178f0 <ucdr_serialize_string>
 801168c:	6862      	ldr	r2, [r4, #4]
 801168e:	2a02      	cmp	r2, #2
 8011690:	d94a      	bls.n	8011728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011692:	2800      	cmp	r0, #0
 8011694:	d056      	beq.n	8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8011696:	6921      	ldr	r1, [r4, #16]
 8011698:	4630      	mov	r0, r6
 801169a:	f006 f929 	bl	80178f0 <ucdr_serialize_string>
 801169e:	6862      	ldr	r2, [r4, #4]
 80116a0:	2a03      	cmp	r2, #3
 80116a2:	d941      	bls.n	8011728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116a4:	2800      	cmp	r0, #0
 80116a6:	d04d      	beq.n	8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80116a8:	6961      	ldr	r1, [r4, #20]
 80116aa:	4630      	mov	r0, r6
 80116ac:	f006 f920 	bl	80178f0 <ucdr_serialize_string>
 80116b0:	6862      	ldr	r2, [r4, #4]
 80116b2:	2a04      	cmp	r2, #4
 80116b4:	d938      	bls.n	8011728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116b6:	2800      	cmp	r0, #0
 80116b8:	d044      	beq.n	8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80116ba:	69a1      	ldr	r1, [r4, #24]
 80116bc:	4630      	mov	r0, r6
 80116be:	f006 f917 	bl	80178f0 <ucdr_serialize_string>
 80116c2:	6862      	ldr	r2, [r4, #4]
 80116c4:	2a05      	cmp	r2, #5
 80116c6:	d92f      	bls.n	8011728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116c8:	2800      	cmp	r0, #0
 80116ca:	d03b      	beq.n	8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80116cc:	69e1      	ldr	r1, [r4, #28]
 80116ce:	4630      	mov	r0, r6
 80116d0:	f006 f90e 	bl	80178f0 <ucdr_serialize_string>
 80116d4:	6862      	ldr	r2, [r4, #4]
 80116d6:	2a06      	cmp	r2, #6
 80116d8:	d926      	bls.n	8011728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116da:	b398      	cbz	r0, 8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80116dc:	6a21      	ldr	r1, [r4, #32]
 80116de:	4630      	mov	r0, r6
 80116e0:	f006 f906 	bl	80178f0 <ucdr_serialize_string>
 80116e4:	6862      	ldr	r2, [r4, #4]
 80116e6:	2a07      	cmp	r2, #7
 80116e8:	d91e      	bls.n	8011728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116ea:	b358      	cbz	r0, 8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80116ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80116ee:	4630      	mov	r0, r6
 80116f0:	f006 f8fe 	bl	80178f0 <ucdr_serialize_string>
 80116f4:	6862      	ldr	r2, [r4, #4]
 80116f6:	2a08      	cmp	r2, #8
 80116f8:	d916      	bls.n	8011728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80116fa:	b318      	cbz	r0, 8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80116fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80116fe:	4630      	mov	r0, r6
 8011700:	f006 f8f6 	bl	80178f0 <ucdr_serialize_string>
 8011704:	6862      	ldr	r2, [r4, #4]
 8011706:	2a09      	cmp	r2, #9
 8011708:	d90e      	bls.n	8011728 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801170a:	b1d8      	cbz	r0, 8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801170c:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8011710:	2709      	movs	r7, #9
 8011712:	e000      	b.n	8011716 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8011714:	b1b0      	cbz	r0, 8011744 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8011716:	f858 1f04 	ldr.w	r1, [r8, #4]!
 801171a:	4630      	mov	r0, r6
 801171c:	f006 f8e8 	bl	80178f0 <ucdr_serialize_string>
 8011720:	6862      	ldr	r2, [r4, #4]
 8011722:	3701      	adds	r7, #1
 8011724:	4297      	cmp	r7, r2
 8011726:	d3f5      	bcc.n	8011714 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8011728:	ea05 0300 	and.w	r3, r5, r0
 801172c:	b2dd      	uxtb	r5, r3
 801172e:	e789      	b.n	8011644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011730:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011732:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011736:	4630      	mov	r0, r6
 8011738:	f7fd f8ae 	bl	800e898 <ucdr_serialize_sequence_uint8_t>
 801173c:	4005      	ands	r5, r0
 801173e:	4628      	mov	r0, r5
 8011740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011744:	2500      	movs	r5, #0
 8011746:	e77d      	b.n	8011644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8011748:	4028      	ands	r0, r5
 801174a:	b2c5      	uxtb	r5, r0
 801174c:	e77a      	b.n	8011644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801174e:	bf00      	nop

08011750 <uxr_serialize_OBJK_Publisher_Binary>:
 8011750:	b570      	push	{r4, r5, r6, lr}
 8011752:	460d      	mov	r5, r1
 8011754:	7809      	ldrb	r1, [r1, #0]
 8011756:	4606      	mov	r6, r0
 8011758:	f7f8 ffbc 	bl	800a6d4 <ucdr_serialize_bool>
 801175c:	782b      	ldrb	r3, [r5, #0]
 801175e:	4604      	mov	r4, r0
 8011760:	b94b      	cbnz	r3, 8011776 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011762:	7a29      	ldrb	r1, [r5, #8]
 8011764:	4630      	mov	r0, r6
 8011766:	f7f8 ffb5 	bl	800a6d4 <ucdr_serialize_bool>
 801176a:	7a2b      	ldrb	r3, [r5, #8]
 801176c:	4004      	ands	r4, r0
 801176e:	b2e4      	uxtb	r4, r4
 8011770:	b943      	cbnz	r3, 8011784 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011772:	4620      	mov	r0, r4
 8011774:	bd70      	pop	{r4, r5, r6, pc}
 8011776:	6869      	ldr	r1, [r5, #4]
 8011778:	4630      	mov	r0, r6
 801177a:	f006 f8b9 	bl	80178f0 <ucdr_serialize_string>
 801177e:	4004      	ands	r4, r0
 8011780:	b2e4      	uxtb	r4, r4
 8011782:	e7ee      	b.n	8011762 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011784:	f105 010c 	add.w	r1, r5, #12
 8011788:	4630      	mov	r0, r6
 801178a:	f7ff ff51 	bl	8011630 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801178e:	4004      	ands	r4, r0
 8011790:	4620      	mov	r0, r4
 8011792:	bd70      	pop	{r4, r5, r6, pc}

08011794 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8011794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011798:	460c      	mov	r4, r1
 801179a:	7809      	ldrb	r1, [r1, #0]
 801179c:	4606      	mov	r6, r0
 801179e:	f7f8 ff99 	bl	800a6d4 <ucdr_serialize_bool>
 80117a2:	7823      	ldrb	r3, [r4, #0]
 80117a4:	4605      	mov	r5, r0
 80117a6:	b96b      	cbnz	r3, 80117c4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80117a8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80117ac:	4630      	mov	r0, r6
 80117ae:	f7f8 ff91 	bl	800a6d4 <ucdr_serialize_bool>
 80117b2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80117b6:	4005      	ands	r5, r0
 80117b8:	b2ed      	uxtb	r5, r5
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d16a      	bne.n	8011894 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 80117be:	4628      	mov	r0, r5
 80117c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c4:	6861      	ldr	r1, [r4, #4]
 80117c6:	4630      	mov	r0, r6
 80117c8:	f7f9 f9ce 	bl	800ab68 <ucdr_serialize_uint32_t>
 80117cc:	6863      	ldr	r3, [r4, #4]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d06c      	beq.n	80118ac <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d068      	beq.n	80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80117d6:	68a1      	ldr	r1, [r4, #8]
 80117d8:	4630      	mov	r0, r6
 80117da:	f006 f889 	bl	80178f0 <ucdr_serialize_string>
 80117de:	6862      	ldr	r2, [r4, #4]
 80117e0:	2a01      	cmp	r2, #1
 80117e2:	d953      	bls.n	801188c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80117e4:	2800      	cmp	r0, #0
 80117e6:	d05f      	beq.n	80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80117e8:	68e1      	ldr	r1, [r4, #12]
 80117ea:	4630      	mov	r0, r6
 80117ec:	f006 f880 	bl	80178f0 <ucdr_serialize_string>
 80117f0:	6862      	ldr	r2, [r4, #4]
 80117f2:	2a02      	cmp	r2, #2
 80117f4:	d94a      	bls.n	801188c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80117f6:	2800      	cmp	r0, #0
 80117f8:	d056      	beq.n	80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80117fa:	6921      	ldr	r1, [r4, #16]
 80117fc:	4630      	mov	r0, r6
 80117fe:	f006 f877 	bl	80178f0 <ucdr_serialize_string>
 8011802:	6862      	ldr	r2, [r4, #4]
 8011804:	2a03      	cmp	r2, #3
 8011806:	d941      	bls.n	801188c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011808:	2800      	cmp	r0, #0
 801180a:	d04d      	beq.n	80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801180c:	6961      	ldr	r1, [r4, #20]
 801180e:	4630      	mov	r0, r6
 8011810:	f006 f86e 	bl	80178f0 <ucdr_serialize_string>
 8011814:	6862      	ldr	r2, [r4, #4]
 8011816:	2a04      	cmp	r2, #4
 8011818:	d938      	bls.n	801188c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801181a:	2800      	cmp	r0, #0
 801181c:	d044      	beq.n	80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801181e:	69a1      	ldr	r1, [r4, #24]
 8011820:	4630      	mov	r0, r6
 8011822:	f006 f865 	bl	80178f0 <ucdr_serialize_string>
 8011826:	6862      	ldr	r2, [r4, #4]
 8011828:	2a05      	cmp	r2, #5
 801182a:	d92f      	bls.n	801188c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801182c:	2800      	cmp	r0, #0
 801182e:	d03b      	beq.n	80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8011830:	69e1      	ldr	r1, [r4, #28]
 8011832:	4630      	mov	r0, r6
 8011834:	f006 f85c 	bl	80178f0 <ucdr_serialize_string>
 8011838:	6862      	ldr	r2, [r4, #4]
 801183a:	2a06      	cmp	r2, #6
 801183c:	d926      	bls.n	801188c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801183e:	b398      	cbz	r0, 80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8011840:	6a21      	ldr	r1, [r4, #32]
 8011842:	4630      	mov	r0, r6
 8011844:	f006 f854 	bl	80178f0 <ucdr_serialize_string>
 8011848:	6862      	ldr	r2, [r4, #4]
 801184a:	2a07      	cmp	r2, #7
 801184c:	d91e      	bls.n	801188c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801184e:	b358      	cbz	r0, 80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8011850:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011852:	4630      	mov	r0, r6
 8011854:	f006 f84c 	bl	80178f0 <ucdr_serialize_string>
 8011858:	6862      	ldr	r2, [r4, #4]
 801185a:	2a08      	cmp	r2, #8
 801185c:	d916      	bls.n	801188c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801185e:	b318      	cbz	r0, 80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8011860:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011862:	4630      	mov	r0, r6
 8011864:	f006 f844 	bl	80178f0 <ucdr_serialize_string>
 8011868:	6862      	ldr	r2, [r4, #4]
 801186a:	2a09      	cmp	r2, #9
 801186c:	d90e      	bls.n	801188c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801186e:	b1d8      	cbz	r0, 80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8011870:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8011874:	2709      	movs	r7, #9
 8011876:	e000      	b.n	801187a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8011878:	b1b0      	cbz	r0, 80118a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801187a:	f858 1f04 	ldr.w	r1, [r8, #4]!
 801187e:	4630      	mov	r0, r6
 8011880:	f006 f836 	bl	80178f0 <ucdr_serialize_string>
 8011884:	6862      	ldr	r2, [r4, #4]
 8011886:	3701      	adds	r7, #1
 8011888:	4297      	cmp	r7, r2
 801188a:	d3f5      	bcc.n	8011878 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801188c:	ea05 0300 	and.w	r3, r5, r0
 8011890:	b2dd      	uxtb	r5, r3
 8011892:	e789      	b.n	80117a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011894:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8011896:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801189a:	4630      	mov	r0, r6
 801189c:	f7fc fffc 	bl	800e898 <ucdr_serialize_sequence_uint8_t>
 80118a0:	4005      	ands	r5, r0
 80118a2:	4628      	mov	r0, r5
 80118a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118a8:	2500      	movs	r5, #0
 80118aa:	e77d      	b.n	80117a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80118ac:	4028      	ands	r0, r5
 80118ae:	b2c5      	uxtb	r5, r0
 80118b0:	e77a      	b.n	80117a8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80118b2:	bf00      	nop

080118b4 <uxr_serialize_OBJK_Subscriber_Binary>:
 80118b4:	b570      	push	{r4, r5, r6, lr}
 80118b6:	460d      	mov	r5, r1
 80118b8:	7809      	ldrb	r1, [r1, #0]
 80118ba:	4606      	mov	r6, r0
 80118bc:	f7f8 ff0a 	bl	800a6d4 <ucdr_serialize_bool>
 80118c0:	782b      	ldrb	r3, [r5, #0]
 80118c2:	4604      	mov	r4, r0
 80118c4:	b94b      	cbnz	r3, 80118da <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80118c6:	7a29      	ldrb	r1, [r5, #8]
 80118c8:	4630      	mov	r0, r6
 80118ca:	f7f8 ff03 	bl	800a6d4 <ucdr_serialize_bool>
 80118ce:	7a2b      	ldrb	r3, [r5, #8]
 80118d0:	4004      	ands	r4, r0
 80118d2:	b2e4      	uxtb	r4, r4
 80118d4:	b943      	cbnz	r3, 80118e8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80118d6:	4620      	mov	r0, r4
 80118d8:	bd70      	pop	{r4, r5, r6, pc}
 80118da:	6869      	ldr	r1, [r5, #4]
 80118dc:	4630      	mov	r0, r6
 80118de:	f006 f807 	bl	80178f0 <ucdr_serialize_string>
 80118e2:	4004      	ands	r4, r0
 80118e4:	b2e4      	uxtb	r4, r4
 80118e6:	e7ee      	b.n	80118c6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80118e8:	f105 010c 	add.w	r1, r5, #12
 80118ec:	4630      	mov	r0, r6
 80118ee:	f7ff ff51 	bl	8011794 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80118f2:	4004      	ands	r4, r0
 80118f4:	4620      	mov	r0, r4
 80118f6:	bd70      	pop	{r4, r5, r6, pc}

080118f8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80118f8:	b570      	push	{r4, r5, r6, lr}
 80118fa:	460d      	mov	r5, r1
 80118fc:	8809      	ldrh	r1, [r1, #0]
 80118fe:	4606      	mov	r6, r0
 8011900:	f7f8 ff42 	bl	800a788 <ucdr_serialize_uint16_t>
 8011904:	78a9      	ldrb	r1, [r5, #2]
 8011906:	4604      	mov	r4, r0
 8011908:	4630      	mov	r0, r6
 801190a:	f7f8 fee3 	bl	800a6d4 <ucdr_serialize_bool>
 801190e:	78ab      	ldrb	r3, [r5, #2]
 8011910:	4004      	ands	r4, r0
 8011912:	b2e4      	uxtb	r4, r4
 8011914:	b9b3      	cbnz	r3, 8011944 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8011916:	79a9      	ldrb	r1, [r5, #6]
 8011918:	4630      	mov	r0, r6
 801191a:	f7f8 fedb 	bl	800a6d4 <ucdr_serialize_bool>
 801191e:	79ab      	ldrb	r3, [r5, #6]
 8011920:	4004      	ands	r4, r0
 8011922:	bb33      	cbnz	r3, 8011972 <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8011924:	7b29      	ldrb	r1, [r5, #12]
 8011926:	4630      	mov	r0, r6
 8011928:	f7f8 fed4 	bl	800a6d4 <ucdr_serialize_bool>
 801192c:	7b2b      	ldrb	r3, [r5, #12]
 801192e:	4004      	ands	r4, r0
 8011930:	b9c3      	cbnz	r3, 8011964 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8011932:	7d29      	ldrb	r1, [r5, #20]
 8011934:	4630      	mov	r0, r6
 8011936:	f7f8 fecd 	bl	800a6d4 <ucdr_serialize_bool>
 801193a:	7d2b      	ldrb	r3, [r5, #20]
 801193c:	4004      	ands	r4, r0
 801193e:	b93b      	cbnz	r3, 8011950 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8011940:	4620      	mov	r0, r4
 8011942:	bd70      	pop	{r4, r5, r6, pc}
 8011944:	88a9      	ldrh	r1, [r5, #4]
 8011946:	4630      	mov	r0, r6
 8011948:	f7f8 ff1e 	bl	800a788 <ucdr_serialize_uint16_t>
 801194c:	4004      	ands	r4, r0
 801194e:	e7e2      	b.n	8011916 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8011950:	69aa      	ldr	r2, [r5, #24]
 8011952:	f105 011c 	add.w	r1, r5, #28
 8011956:	4630      	mov	r0, r6
 8011958:	f7fc ff9e 	bl	800e898 <ucdr_serialize_sequence_uint8_t>
 801195c:	4004      	ands	r4, r0
 801195e:	b2e4      	uxtb	r4, r4
 8011960:	4620      	mov	r0, r4
 8011962:	bd70      	pop	{r4, r5, r6, pc}
 8011964:	6929      	ldr	r1, [r5, #16]
 8011966:	4630      	mov	r0, r6
 8011968:	f7f9 f8fe 	bl	800ab68 <ucdr_serialize_uint32_t>
 801196c:	4004      	ands	r4, r0
 801196e:	b2e4      	uxtb	r4, r4
 8011970:	e7df      	b.n	8011932 <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8011972:	68a9      	ldr	r1, [r5, #8]
 8011974:	4630      	mov	r0, r6
 8011976:	f7f9 f8f7 	bl	800ab68 <ucdr_serialize_uint32_t>
 801197a:	4004      	ands	r4, r0
 801197c:	b2e4      	uxtb	r4, r4
 801197e:	e7d1      	b.n	8011924 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08011980 <uxr_serialize_OBJK_DataReader_Binary>:
 8011980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011982:	2202      	movs	r2, #2
 8011984:	460c      	mov	r4, r1
 8011986:	4606      	mov	r6, r0
 8011988:	f7fc fde6 	bl	800e558 <ucdr_serialize_array_uint8_t>
 801198c:	78a1      	ldrb	r1, [r4, #2]
 801198e:	4605      	mov	r5, r0
 8011990:	4630      	mov	r0, r6
 8011992:	f7f8 fe9f 	bl	800a6d4 <ucdr_serialize_bool>
 8011996:	78a3      	ldrb	r3, [r4, #2]
 8011998:	4005      	ands	r5, r0
 801199a:	b2ed      	uxtb	r5, r5
 801199c:	b90b      	cbnz	r3, 80119a2 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 801199e:	4628      	mov	r0, r5
 80119a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119a2:	f104 0108 	add.w	r1, r4, #8
 80119a6:	4630      	mov	r0, r6
 80119a8:	f7ff ffa6 	bl	80118f8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80119ac:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80119b0:	4607      	mov	r7, r0
 80119b2:	4630      	mov	r0, r6
 80119b4:	f7f8 fe8e 	bl	800a6d4 <ucdr_serialize_bool>
 80119b8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80119bc:	4007      	ands	r7, r0
 80119be:	b2ff      	uxtb	r7, r7
 80119c0:	b95b      	cbnz	r3, 80119da <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80119c2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80119c6:	4630      	mov	r0, r6
 80119c8:	f7f8 fe84 	bl	800a6d4 <ucdr_serialize_bool>
 80119cc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80119d0:	4007      	ands	r7, r0
 80119d2:	b94b      	cbnz	r3, 80119e8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80119d4:	403d      	ands	r5, r7
 80119d6:	4628      	mov	r0, r5
 80119d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119da:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80119de:	4630      	mov	r0, r6
 80119e0:	f7f9 fb06 	bl	800aff0 <ucdr_serialize_uint64_t>
 80119e4:	4007      	ands	r7, r0
 80119e6:	e7ec      	b.n	80119c2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80119e8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80119ea:	4630      	mov	r0, r6
 80119ec:	f005 ff80 	bl	80178f0 <ucdr_serialize_string>
 80119f0:	4007      	ands	r7, r0
 80119f2:	b2ff      	uxtb	r7, r7
 80119f4:	e7ee      	b.n	80119d4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80119f6:	bf00      	nop

080119f8 <uxr_serialize_OBJK_DataWriter_Binary>:
 80119f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119fa:	2202      	movs	r2, #2
 80119fc:	460d      	mov	r5, r1
 80119fe:	4606      	mov	r6, r0
 8011a00:	f7fc fdaa 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011a04:	78a9      	ldrb	r1, [r5, #2]
 8011a06:	4604      	mov	r4, r0
 8011a08:	4630      	mov	r0, r6
 8011a0a:	f7f8 fe63 	bl	800a6d4 <ucdr_serialize_bool>
 8011a0e:	78ab      	ldrb	r3, [r5, #2]
 8011a10:	4004      	ands	r4, r0
 8011a12:	b2e4      	uxtb	r4, r4
 8011a14:	b90b      	cbnz	r3, 8011a1a <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8011a16:	4620      	mov	r0, r4
 8011a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a1a:	f105 0108 	add.w	r1, r5, #8
 8011a1e:	4630      	mov	r0, r6
 8011a20:	f7ff ff6a 	bl	80118f8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011a24:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8011a28:	4607      	mov	r7, r0
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	f7f8 fe52 	bl	800a6d4 <ucdr_serialize_bool>
 8011a30:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011a34:	4007      	ands	r7, r0
 8011a36:	b2ff      	uxtb	r7, r7
 8011a38:	b913      	cbnz	r3, 8011a40 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8011a3a:	403c      	ands	r4, r7
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a40:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011a44:	4630      	mov	r0, r6
 8011a46:	f7f9 fad3 	bl	800aff0 <ucdr_serialize_uint64_t>
 8011a4a:	4007      	ands	r7, r0
 8011a4c:	e7f5      	b.n	8011a3a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011a4e:	bf00      	nop

08011a50 <uxr_deserialize_ObjectVariant>:
 8011a50:	b570      	push	{r4, r5, r6, lr}
 8011a52:	4605      	mov	r5, r0
 8011a54:	460e      	mov	r6, r1
 8011a56:	f7f8 fe81 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011a5a:	b168      	cbz	r0, 8011a78 <uxr_deserialize_ObjectVariant+0x28>
 8011a5c:	7833      	ldrb	r3, [r6, #0]
 8011a5e:	3b01      	subs	r3, #1
 8011a60:	4604      	mov	r4, r0
 8011a62:	2b0d      	cmp	r3, #13
 8011a64:	d809      	bhi.n	8011a7a <uxr_deserialize_ObjectVariant+0x2a>
 8011a66:	e8df f003 	tbb	[pc, r3]
 8011a6a:	0a64      	.short	0x0a64
 8011a6c:	0a0a2323 	.word	0x0a0a2323
 8011a70:	10080a0a 	.word	0x10080a0a
 8011a74:	5e411010 	.word	0x5e411010
 8011a78:	2400      	movs	r4, #0
 8011a7a:	4620      	mov	r0, r4
 8011a7c:	bd70      	pop	{r4, r5, r6, pc}
 8011a7e:	1d31      	adds	r1, r6, #4
 8011a80:	4628      	mov	r0, r5
 8011a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a86:	f7ff bd61 	b.w	801154c <uxr_deserialize_DATAWRITER_Representation>
 8011a8a:	1d31      	adds	r1, r6, #4
 8011a8c:	4628      	mov	r0, r5
 8011a8e:	f7f8 fe65 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011a92:	2800      	cmp	r0, #0
 8011a94:	d0f0      	beq.n	8011a78 <uxr_deserialize_ObjectVariant+0x28>
 8011a96:	7933      	ldrb	r3, [r6, #4]
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d001      	beq.n	8011aa0 <uxr_deserialize_ObjectVariant+0x50>
 8011a9c:	2b02      	cmp	r3, #2
 8011a9e:	d1ec      	bne.n	8011a7a <uxr_deserialize_ObjectVariant+0x2a>
 8011aa0:	68b1      	ldr	r1, [r6, #8]
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011aac:	f005 bf2e 	b.w	801790c <ucdr_deserialize_string>
 8011ab0:	1d31      	adds	r1, r6, #4
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	f7f8 fe52 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011ab8:	4604      	mov	r4, r0
 8011aba:	b170      	cbz	r0, 8011ada <uxr_deserialize_ObjectVariant+0x8a>
 8011abc:	7933      	ldrb	r3, [r6, #4]
 8011abe:	2b02      	cmp	r3, #2
 8011ac0:	d053      	beq.n	8011b6a <uxr_deserialize_ObjectVariant+0x11a>
 8011ac2:	2b03      	cmp	r3, #3
 8011ac4:	d109      	bne.n	8011ada <uxr_deserialize_ObjectVariant+0x8a>
 8011ac6:	f106 0308 	add.w	r3, r6, #8
 8011aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011ace:	f106 010c 	add.w	r1, r6, #12
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	f7fc fef2 	bl	800e8bc <ucdr_deserialize_sequence_uint8_t>
 8011ad8:	4604      	mov	r4, r0
 8011ada:	2202      	movs	r2, #2
 8011adc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	f7fc fd9d 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011ae6:	4004      	ands	r4, r0
 8011ae8:	b2e4      	uxtb	r4, r4
 8011aea:	e7c6      	b.n	8011a7a <uxr_deserialize_ObjectVariant+0x2a>
 8011aec:	2204      	movs	r2, #4
 8011aee:	18b1      	adds	r1, r6, r2
 8011af0:	4628      	mov	r0, r5
 8011af2:	f7fc fd95 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011af6:	2202      	movs	r2, #2
 8011af8:	f106 0108 	add.w	r1, r6, #8
 8011afc:	4604      	mov	r4, r0
 8011afe:	4628      	mov	r0, r5
 8011b00:	f7fc fd8e 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011b04:	2202      	movs	r2, #2
 8011b06:	4004      	ands	r4, r0
 8011b08:	f106 010a 	add.w	r1, r6, #10
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	f7fc fd87 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011b12:	b2e4      	uxtb	r4, r4
 8011b14:	4603      	mov	r3, r0
 8011b16:	f106 010c 	add.w	r1, r6, #12
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	401c      	ands	r4, r3
 8011b1e:	f7f8 fdef 	bl	800a700 <ucdr_deserialize_bool>
 8011b22:	4004      	ands	r4, r0
 8011b24:	e7a9      	b.n	8011a7a <uxr_deserialize_ObjectVariant+0x2a>
 8011b26:	1d31      	adds	r1, r6, #4
 8011b28:	4628      	mov	r0, r5
 8011b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b2e:	f7ff bbc3 	b.w	80112b8 <uxr_deserialize_CLIENT_Representation>
 8011b32:	1d31      	adds	r1, r6, #4
 8011b34:	4628      	mov	r0, r5
 8011b36:	f7f8 fe11 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	b168      	cbz	r0, 8011b5a <uxr_deserialize_ObjectVariant+0x10a>
 8011b3e:	7933      	ldrb	r3, [r6, #4]
 8011b40:	2b02      	cmp	r3, #2
 8011b42:	d003      	beq.n	8011b4c <uxr_deserialize_ObjectVariant+0xfc>
 8011b44:	2b03      	cmp	r3, #3
 8011b46:	d018      	beq.n	8011b7a <uxr_deserialize_ObjectVariant+0x12a>
 8011b48:	2b01      	cmp	r3, #1
 8011b4a:	d106      	bne.n	8011b5a <uxr_deserialize_ObjectVariant+0x10a>
 8011b4c:	68b1      	ldr	r1, [r6, #8]
 8011b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b52:	4628      	mov	r0, r5
 8011b54:	f005 feda 	bl	801790c <ucdr_deserialize_string>
 8011b58:	4604      	mov	r4, r0
 8011b5a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011b5e:	4628      	mov	r0, r5
 8011b60:	f7f9 fb98 	bl	800b294 <ucdr_deserialize_int16_t>
 8011b64:	4004      	ands	r4, r0
 8011b66:	b2e4      	uxtb	r4, r4
 8011b68:	e787      	b.n	8011a7a <uxr_deserialize_ObjectVariant+0x2a>
 8011b6a:	68b1      	ldr	r1, [r6, #8]
 8011b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b70:	4628      	mov	r0, r5
 8011b72:	f005 fecb 	bl	801790c <ucdr_deserialize_string>
 8011b76:	4604      	mov	r4, r0
 8011b78:	e7af      	b.n	8011ada <uxr_deserialize_ObjectVariant+0x8a>
 8011b7a:	f106 0308 	add.w	r3, r6, #8
 8011b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011b82:	f106 010c 	add.w	r1, r6, #12
 8011b86:	4628      	mov	r0, r5
 8011b88:	f7fc fe98 	bl	800e8bc <ucdr_deserialize_sequence_uint8_t>
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	e7e4      	b.n	8011b5a <uxr_deserialize_ObjectVariant+0x10a>

08011b90 <uxr_deserialize_BaseObjectRequest>:
 8011b90:	b570      	push	{r4, r5, r6, lr}
 8011b92:	2202      	movs	r2, #2
 8011b94:	4605      	mov	r5, r0
 8011b96:	460e      	mov	r6, r1
 8011b98:	f7fc fd42 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011b9c:	2202      	movs	r2, #2
 8011b9e:	4604      	mov	r4, r0
 8011ba0:	18b1      	adds	r1, r6, r2
 8011ba2:	4628      	mov	r0, r5
 8011ba4:	f7fc fd3c 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011ba8:	4020      	ands	r0, r4
 8011baa:	b2c0      	uxtb	r0, r0
 8011bac:	bd70      	pop	{r4, r5, r6, pc}
 8011bae:	bf00      	nop

08011bb0 <uxr_serialize_ActivityInfoVariant>:
 8011bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bb4:	460d      	mov	r5, r1
 8011bb6:	7809      	ldrb	r1, [r1, #0]
 8011bb8:	4606      	mov	r6, r0
 8011bba:	f7f8 fdb9 	bl	800a730 <ucdr_serialize_uint8_t>
 8011bbe:	b130      	cbz	r0, 8011bce <uxr_serialize_ActivityInfoVariant+0x1e>
 8011bc0:	782b      	ldrb	r3, [r5, #0]
 8011bc2:	2b06      	cmp	r3, #6
 8011bc4:	d014      	beq.n	8011bf0 <uxr_serialize_ActivityInfoVariant+0x40>
 8011bc6:	2b0d      	cmp	r3, #13
 8011bc8:	d019      	beq.n	8011bfe <uxr_serialize_ActivityInfoVariant+0x4e>
 8011bca:	2b05      	cmp	r3, #5
 8011bcc:	d001      	beq.n	8011bd2 <uxr_serialize_ActivityInfoVariant+0x22>
 8011bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bd2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011bd6:	4630      	mov	r0, r6
 8011bd8:	f7f9 fad2 	bl	800b180 <ucdr_serialize_int16_t>
 8011bdc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8011be0:	4604      	mov	r4, r0
 8011be2:	4630      	mov	r0, r6
 8011be4:	f7f9 fa04 	bl	800aff0 <ucdr_serialize_uint64_t>
 8011be8:	4020      	ands	r0, r4
 8011bea:	b2c0      	uxtb	r0, r0
 8011bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bf0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011bf4:	4630      	mov	r0, r6
 8011bf6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bfa:	f7f9 bac1 	b.w	800b180 <ucdr_serialize_int16_t>
 8011bfe:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011c02:	4630      	mov	r0, r6
 8011c04:	f7f9 fabc 	bl	800b180 <ucdr_serialize_int16_t>
 8011c08:	68e9      	ldr	r1, [r5, #12]
 8011c0a:	4681      	mov	r9, r0
 8011c0c:	4630      	mov	r0, r6
 8011c0e:	f7f8 ffab 	bl	800ab68 <ucdr_serialize_uint32_t>
 8011c12:	68eb      	ldr	r3, [r5, #12]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d051      	beq.n	8011cbc <uxr_serialize_ActivityInfoVariant+0x10c>
 8011c18:	b1e8      	cbz	r0, 8011c56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8011c1a:	f105 0714 	add.w	r7, r5, #20
 8011c1e:	f04f 0800 	mov.w	r8, #0
 8011c22:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8011c26:	4630      	mov	r0, r6
 8011c28:	f7f8 fd82 	bl	800a730 <ucdr_serialize_uint8_t>
 8011c2c:	b198      	cbz	r0, 8011c56 <uxr_serialize_ActivityInfoVariant+0xa6>
 8011c2e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8011c32:	2b03      	cmp	r3, #3
 8011c34:	d839      	bhi.n	8011caa <uxr_serialize_ActivityInfoVariant+0xfa>
 8011c36:	e8df f003 	tbb	[pc, r3]
 8011c3a:	1e2b      	.short	0x1e2b
 8011c3c:	0211      	.short	0x0211
 8011c3e:	6839      	ldr	r1, [r7, #0]
 8011c40:	4630      	mov	r0, r6
 8011c42:	f005 fe55 	bl	80178f0 <ucdr_serialize_string>
 8011c46:	68eb      	ldr	r3, [r5, #12]
 8011c48:	f108 0801 	add.w	r8, r8, #1
 8011c4c:	4598      	cmp	r8, r3
 8011c4e:	d231      	bcs.n	8011cb4 <uxr_serialize_ActivityInfoVariant+0x104>
 8011c50:	3718      	adds	r7, #24
 8011c52:	2800      	cmp	r0, #0
 8011c54:	d1e5      	bne.n	8011c22 <uxr_serialize_ActivityInfoVariant+0x72>
 8011c56:	2000      	movs	r0, #0
 8011c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c5c:	2210      	movs	r2, #16
 8011c5e:	4639      	mov	r1, r7
 8011c60:	4630      	mov	r0, r6
 8011c62:	f7fc fc79 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011c66:	6939      	ldr	r1, [r7, #16]
 8011c68:	4604      	mov	r4, r0
 8011c6a:	4630      	mov	r0, r6
 8011c6c:	f7f8 ff7c 	bl	800ab68 <ucdr_serialize_uint32_t>
 8011c70:	4020      	ands	r0, r4
 8011c72:	b2c0      	uxtb	r0, r0
 8011c74:	e7e7      	b.n	8011c46 <uxr_serialize_ActivityInfoVariant+0x96>
 8011c76:	2204      	movs	r2, #4
 8011c78:	4639      	mov	r1, r7
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	f7fc fc6c 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011c80:	88b9      	ldrh	r1, [r7, #4]
 8011c82:	4604      	mov	r4, r0
 8011c84:	4630      	mov	r0, r6
 8011c86:	f7f8 fd7f 	bl	800a788 <ucdr_serialize_uint16_t>
 8011c8a:	4020      	ands	r0, r4
 8011c8c:	b2c0      	uxtb	r0, r0
 8011c8e:	e7da      	b.n	8011c46 <uxr_serialize_ActivityInfoVariant+0x96>
 8011c90:	2202      	movs	r2, #2
 8011c92:	4639      	mov	r1, r7
 8011c94:	4630      	mov	r0, r6
 8011c96:	f7fc fc5f 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011c9a:	78b9      	ldrb	r1, [r7, #2]
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	4630      	mov	r0, r6
 8011ca0:	f7f8 fd46 	bl	800a730 <ucdr_serialize_uint8_t>
 8011ca4:	4020      	ands	r0, r4
 8011ca6:	b2c0      	uxtb	r0, r0
 8011ca8:	e7cd      	b.n	8011c46 <uxr_serialize_ActivityInfoVariant+0x96>
 8011caa:	68eb      	ldr	r3, [r5, #12]
 8011cac:	f108 0801 	add.w	r8, r8, #1
 8011cb0:	4598      	cmp	r8, r3
 8011cb2:	d308      	bcc.n	8011cc6 <uxr_serialize_ActivityInfoVariant+0x116>
 8011cb4:	ea09 0000 	and.w	r0, r9, r0
 8011cb8:	b2c0      	uxtb	r0, r0
 8011cba:	e788      	b.n	8011bce <uxr_serialize_ActivityInfoVariant+0x1e>
 8011cbc:	ea09 0900 	and.w	r9, r9, r0
 8011cc0:	fa5f f089 	uxtb.w	r0, r9
 8011cc4:	e783      	b.n	8011bce <uxr_serialize_ActivityInfoVariant+0x1e>
 8011cc6:	3718      	adds	r7, #24
 8011cc8:	e7ab      	b.n	8011c22 <uxr_serialize_ActivityInfoVariant+0x72>
 8011cca:	bf00      	nop

08011ccc <uxr_deserialize_BaseObjectReply>:
 8011ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cd0:	2202      	movs	r2, #2
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	460f      	mov	r7, r1
 8011cd6:	f7fc fca3 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011cda:	2202      	movs	r2, #2
 8011cdc:	18b9      	adds	r1, r7, r2
 8011cde:	4605      	mov	r5, r0
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f7fc fc9d 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011ce6:	1d39      	adds	r1, r7, #4
 8011ce8:	4680      	mov	r8, r0
 8011cea:	4630      	mov	r0, r6
 8011cec:	f7f8 fd36 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011cf0:	1d79      	adds	r1, r7, #5
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	4630      	mov	r0, r6
 8011cf6:	f7f8 fd31 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011cfa:	ea05 0508 	and.w	r5, r5, r8
 8011cfe:	402c      	ands	r4, r5
 8011d00:	4020      	ands	r0, r4
 8011d02:	b2c0      	uxtb	r0, r0
 8011d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d08 <uxr_serialize_ReadSpecification>:
 8011d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d0c:	460d      	mov	r5, r1
 8011d0e:	7809      	ldrb	r1, [r1, #0]
 8011d10:	4606      	mov	r6, r0
 8011d12:	f7f8 fd0d 	bl	800a730 <ucdr_serialize_uint8_t>
 8011d16:	7869      	ldrb	r1, [r5, #1]
 8011d18:	4604      	mov	r4, r0
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	f7f8 fd08 	bl	800a730 <ucdr_serialize_uint8_t>
 8011d20:	78a9      	ldrb	r1, [r5, #2]
 8011d22:	4004      	ands	r4, r0
 8011d24:	4630      	mov	r0, r6
 8011d26:	f7f8 fcd5 	bl	800a6d4 <ucdr_serialize_bool>
 8011d2a:	78ab      	ldrb	r3, [r5, #2]
 8011d2c:	b2e4      	uxtb	r4, r4
 8011d2e:	4004      	ands	r4, r0
 8011d30:	b94b      	cbnz	r3, 8011d46 <uxr_serialize_ReadSpecification+0x3e>
 8011d32:	7a29      	ldrb	r1, [r5, #8]
 8011d34:	4630      	mov	r0, r6
 8011d36:	f7f8 fccd 	bl	800a6d4 <ucdr_serialize_bool>
 8011d3a:	7a2b      	ldrb	r3, [r5, #8]
 8011d3c:	4004      	ands	r4, r0
 8011d3e:	b943      	cbnz	r3, 8011d52 <uxr_serialize_ReadSpecification+0x4a>
 8011d40:	4620      	mov	r0, r4
 8011d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d46:	6869      	ldr	r1, [r5, #4]
 8011d48:	4630      	mov	r0, r6
 8011d4a:	f005 fdd1 	bl	80178f0 <ucdr_serialize_string>
 8011d4e:	4004      	ands	r4, r0
 8011d50:	e7ef      	b.n	8011d32 <uxr_serialize_ReadSpecification+0x2a>
 8011d52:	8969      	ldrh	r1, [r5, #10]
 8011d54:	4630      	mov	r0, r6
 8011d56:	f7f8 fd17 	bl	800a788 <ucdr_serialize_uint16_t>
 8011d5a:	89a9      	ldrh	r1, [r5, #12]
 8011d5c:	4607      	mov	r7, r0
 8011d5e:	4630      	mov	r0, r6
 8011d60:	f7f8 fd12 	bl	800a788 <ucdr_serialize_uint16_t>
 8011d64:	89e9      	ldrh	r1, [r5, #14]
 8011d66:	4007      	ands	r7, r0
 8011d68:	4630      	mov	r0, r6
 8011d6a:	f7f8 fd0d 	bl	800a788 <ucdr_serialize_uint16_t>
 8011d6e:	8a29      	ldrh	r1, [r5, #16]
 8011d70:	4680      	mov	r8, r0
 8011d72:	4630      	mov	r0, r6
 8011d74:	f7f8 fd08 	bl	800a788 <ucdr_serialize_uint16_t>
 8011d78:	b2ff      	uxtb	r7, r7
 8011d7a:	ea04 0507 	and.w	r5, r4, r7
 8011d7e:	ea05 0508 	and.w	r5, r5, r8
 8011d82:	ea00 0405 	and.w	r4, r0, r5
 8011d86:	4620      	mov	r0, r4
 8011d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d8c <uxr_serialize_CREATE_CLIENT_Payload>:
 8011d8c:	f7ff ba3a 	b.w	8011204 <uxr_serialize_CLIENT_Representation>

08011d90 <uxr_serialize_CREATE_Payload>:
 8011d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d92:	2202      	movs	r2, #2
 8011d94:	4606      	mov	r6, r0
 8011d96:	460d      	mov	r5, r1
 8011d98:	f7fc fbde 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011d9c:	2202      	movs	r2, #2
 8011d9e:	18a9      	adds	r1, r5, r2
 8011da0:	4604      	mov	r4, r0
 8011da2:	4630      	mov	r0, r6
 8011da4:	f7fc fbd8 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011da8:	7929      	ldrb	r1, [r5, #4]
 8011daa:	4607      	mov	r7, r0
 8011dac:	4630      	mov	r0, r6
 8011dae:	f7f8 fcbf 	bl	800a730 <ucdr_serialize_uint8_t>
 8011db2:	b170      	cbz	r0, 8011dd2 <uxr_serialize_CREATE_Payload+0x42>
 8011db4:	792b      	ldrb	r3, [r5, #4]
 8011db6:	403c      	ands	r4, r7
 8011db8:	3b01      	subs	r3, #1
 8011dba:	b2e4      	uxtb	r4, r4
 8011dbc:	2b0d      	cmp	r3, #13
 8011dbe:	d809      	bhi.n	8011dd4 <uxr_serialize_CREATE_Payload+0x44>
 8011dc0:	e8df f003 	tbb	[pc, r3]
 8011dc4:	23230a3e 	.word	0x23230a3e
 8011dc8:	0a0a0a0a 	.word	0x0a0a0a0a
 8011dcc:	12121208 	.word	0x12121208
 8011dd0:	5f58      	.short	0x5f58
 8011dd2:	2400      	movs	r4, #0
 8011dd4:	4620      	mov	r0, r4
 8011dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dd8:	f105 0108 	add.w	r1, r5, #8
 8011ddc:	4630      	mov	r0, r6
 8011dde:	f7ff fb19 	bl	8011414 <uxr_serialize_DATAWRITER_Representation>
 8011de2:	4004      	ands	r4, r0
 8011de4:	4620      	mov	r0, r4
 8011de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011de8:	7a29      	ldrb	r1, [r5, #8]
 8011dea:	4630      	mov	r0, r6
 8011dec:	f7f8 fca0 	bl	800a730 <ucdr_serialize_uint8_t>
 8011df0:	2800      	cmp	r0, #0
 8011df2:	d0ee      	beq.n	8011dd2 <uxr_serialize_CREATE_Payload+0x42>
 8011df4:	7a2b      	ldrb	r3, [r5, #8]
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d001      	beq.n	8011dfe <uxr_serialize_CREATE_Payload+0x6e>
 8011dfa:	2b02      	cmp	r3, #2
 8011dfc:	d1ea      	bne.n	8011dd4 <uxr_serialize_CREATE_Payload+0x44>
 8011dfe:	68e9      	ldr	r1, [r5, #12]
 8011e00:	4630      	mov	r0, r6
 8011e02:	f005 fd75 	bl	80178f0 <ucdr_serialize_string>
 8011e06:	4004      	ands	r4, r0
 8011e08:	e7e4      	b.n	8011dd4 <uxr_serialize_CREATE_Payload+0x44>
 8011e0a:	7a29      	ldrb	r1, [r5, #8]
 8011e0c:	4630      	mov	r0, r6
 8011e0e:	f7f8 fc8f 	bl	800a730 <ucdr_serialize_uint8_t>
 8011e12:	4607      	mov	r7, r0
 8011e14:	b158      	cbz	r0, 8011e2e <uxr_serialize_CREATE_Payload+0x9e>
 8011e16:	7a2b      	ldrb	r3, [r5, #8]
 8011e18:	2b02      	cmp	r3, #2
 8011e1a:	d039      	beq.n	8011e90 <uxr_serialize_CREATE_Payload+0x100>
 8011e1c:	2b03      	cmp	r3, #3
 8011e1e:	d106      	bne.n	8011e2e <uxr_serialize_CREATE_Payload+0x9e>
 8011e20:	68ea      	ldr	r2, [r5, #12]
 8011e22:	f105 0110 	add.w	r1, r5, #16
 8011e26:	4630      	mov	r0, r6
 8011e28:	f7fc fd36 	bl	800e898 <ucdr_serialize_sequence_uint8_t>
 8011e2c:	4607      	mov	r7, r0
 8011e2e:	2202      	movs	r2, #2
 8011e30:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8011e34:	4630      	mov	r0, r6
 8011e36:	f7fc fb8f 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011e3a:	4038      	ands	r0, r7
 8011e3c:	4004      	ands	r4, r0
 8011e3e:	e7c9      	b.n	8011dd4 <uxr_serialize_CREATE_Payload+0x44>
 8011e40:	7a29      	ldrb	r1, [r5, #8]
 8011e42:	4630      	mov	r0, r6
 8011e44:	f7f8 fc74 	bl	800a730 <ucdr_serialize_uint8_t>
 8011e48:	4607      	mov	r7, r0
 8011e4a:	b158      	cbz	r0, 8011e64 <uxr_serialize_CREATE_Payload+0xd4>
 8011e4c:	7a2b      	ldrb	r3, [r5, #8]
 8011e4e:	2b02      	cmp	r3, #2
 8011e50:	d003      	beq.n	8011e5a <uxr_serialize_CREATE_Payload+0xca>
 8011e52:	2b03      	cmp	r3, #3
 8011e54:	d022      	beq.n	8011e9c <uxr_serialize_CREATE_Payload+0x10c>
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d104      	bne.n	8011e64 <uxr_serialize_CREATE_Payload+0xd4>
 8011e5a:	68e9      	ldr	r1, [r5, #12]
 8011e5c:	4630      	mov	r0, r6
 8011e5e:	f005 fd47 	bl	80178f0 <ucdr_serialize_string>
 8011e62:	4607      	mov	r7, r0
 8011e64:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8011e68:	4630      	mov	r0, r6
 8011e6a:	f7f9 f989 	bl	800b180 <ucdr_serialize_int16_t>
 8011e6e:	4038      	ands	r0, r7
 8011e70:	4004      	ands	r4, r0
 8011e72:	e7af      	b.n	8011dd4 <uxr_serialize_CREATE_Payload+0x44>
 8011e74:	f105 0108 	add.w	r1, r5, #8
 8011e78:	4630      	mov	r0, r6
 8011e7a:	f7ff fa81 	bl	8011380 <uxr_serialize_AGENT_Representation>
 8011e7e:	4004      	ands	r4, r0
 8011e80:	e7a8      	b.n	8011dd4 <uxr_serialize_CREATE_Payload+0x44>
 8011e82:	f105 0108 	add.w	r1, r5, #8
 8011e86:	4630      	mov	r0, r6
 8011e88:	f7ff f9bc 	bl	8011204 <uxr_serialize_CLIENT_Representation>
 8011e8c:	4004      	ands	r4, r0
 8011e8e:	e7a1      	b.n	8011dd4 <uxr_serialize_CREATE_Payload+0x44>
 8011e90:	68e9      	ldr	r1, [r5, #12]
 8011e92:	4630      	mov	r0, r6
 8011e94:	f005 fd2c 	bl	80178f0 <ucdr_serialize_string>
 8011e98:	4607      	mov	r7, r0
 8011e9a:	e7c8      	b.n	8011e2e <uxr_serialize_CREATE_Payload+0x9e>
 8011e9c:	68ea      	ldr	r2, [r5, #12]
 8011e9e:	f105 0110 	add.w	r1, r5, #16
 8011ea2:	4630      	mov	r0, r6
 8011ea4:	f7fc fcf8 	bl	800e898 <ucdr_serialize_sequence_uint8_t>
 8011ea8:	4607      	mov	r7, r0
 8011eaa:	e7db      	b.n	8011e64 <uxr_serialize_CREATE_Payload+0xd4>

08011eac <uxr_serialize_GET_INFO_Payload>:
 8011eac:	b570      	push	{r4, r5, r6, lr}
 8011eae:	2202      	movs	r2, #2
 8011eb0:	4605      	mov	r5, r0
 8011eb2:	460e      	mov	r6, r1
 8011eb4:	f7fc fb50 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011eb8:	2202      	movs	r2, #2
 8011eba:	18b1      	adds	r1, r6, r2
 8011ebc:	4604      	mov	r4, r0
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	f7fc fb4a 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011ec4:	6871      	ldr	r1, [r6, #4]
 8011ec6:	4004      	ands	r4, r0
 8011ec8:	4628      	mov	r0, r5
 8011eca:	f7f8 fe4d 	bl	800ab68 <ucdr_serialize_uint32_t>
 8011ece:	b2e4      	uxtb	r4, r4
 8011ed0:	4020      	ands	r0, r4
 8011ed2:	bd70      	pop	{r4, r5, r6, pc}

08011ed4 <uxr_deserialize_GET_INFO_Payload>:
 8011ed4:	b570      	push	{r4, r5, r6, lr}
 8011ed6:	2202      	movs	r2, #2
 8011ed8:	4605      	mov	r5, r0
 8011eda:	460e      	mov	r6, r1
 8011edc:	f7fc fba0 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011ee0:	2202      	movs	r2, #2
 8011ee2:	18b1      	adds	r1, r6, r2
 8011ee4:	4604      	mov	r4, r0
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	f7fc fb9a 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011eec:	1d31      	adds	r1, r6, #4
 8011eee:	4004      	ands	r4, r0
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	f7f8 ff63 	bl	800adbc <ucdr_deserialize_uint32_t>
 8011ef6:	b2e4      	uxtb	r4, r4
 8011ef8:	4020      	ands	r0, r4
 8011efa:	bd70      	pop	{r4, r5, r6, pc}

08011efc <uxr_serialize_DELETE_Payload>:
 8011efc:	b570      	push	{r4, r5, r6, lr}
 8011efe:	2202      	movs	r2, #2
 8011f00:	4605      	mov	r5, r0
 8011f02:	460e      	mov	r6, r1
 8011f04:	f7fc fb28 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011f08:	2202      	movs	r2, #2
 8011f0a:	4604      	mov	r4, r0
 8011f0c:	18b1      	adds	r1, r6, r2
 8011f0e:	4628      	mov	r0, r5
 8011f10:	f7fc fb22 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011f14:	4020      	ands	r0, r4
 8011f16:	b2c0      	uxtb	r0, r0
 8011f18:	bd70      	pop	{r4, r5, r6, pc}
 8011f1a:	bf00      	nop

08011f1c <uxr_deserialize_STATUS_AGENT_Payload>:
 8011f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f20:	4605      	mov	r5, r0
 8011f22:	460e      	mov	r6, r1
 8011f24:	f7f8 fc1a 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011f28:	1c71      	adds	r1, r6, #1
 8011f2a:	4604      	mov	r4, r0
 8011f2c:	4628      	mov	r0, r5
 8011f2e:	f7f8 fc15 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011f32:	2204      	movs	r2, #4
 8011f34:	18b1      	adds	r1, r6, r2
 8011f36:	4681      	mov	r9, r0
 8011f38:	4628      	mov	r0, r5
 8011f3a:	f7fc fb71 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011f3e:	f106 0108 	add.w	r1, r6, #8
 8011f42:	4680      	mov	r8, r0
 8011f44:	2202      	movs	r2, #2
 8011f46:	4628      	mov	r0, r5
 8011f48:	f7fc fb6a 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011f4c:	2202      	movs	r2, #2
 8011f4e:	f106 010a 	add.w	r1, r6, #10
 8011f52:	4607      	mov	r7, r0
 8011f54:	4628      	mov	r0, r5
 8011f56:	f7fc fb63 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011f5a:	ea04 0409 	and.w	r4, r4, r9
 8011f5e:	4603      	mov	r3, r0
 8011f60:	f106 010c 	add.w	r1, r6, #12
 8011f64:	4628      	mov	r0, r5
 8011f66:	b2e4      	uxtb	r4, r4
 8011f68:	461d      	mov	r5, r3
 8011f6a:	ea04 0408 	and.w	r4, r4, r8
 8011f6e:	f7f8 fbc7 	bl	800a700 <ucdr_deserialize_bool>
 8011f72:	4027      	ands	r7, r4
 8011f74:	403d      	ands	r5, r7
 8011f76:	4028      	ands	r0, r5
 8011f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011f7c <uxr_deserialize_STATUS_Payload>:
 8011f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f80:	2202      	movs	r2, #2
 8011f82:	4606      	mov	r6, r0
 8011f84:	460f      	mov	r7, r1
 8011f86:	f7fc fb4b 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011f8a:	2202      	movs	r2, #2
 8011f8c:	18b9      	adds	r1, r7, r2
 8011f8e:	4605      	mov	r5, r0
 8011f90:	4630      	mov	r0, r6
 8011f92:	f7fc fb45 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8011f96:	1d39      	adds	r1, r7, #4
 8011f98:	4680      	mov	r8, r0
 8011f9a:	4630      	mov	r0, r6
 8011f9c:	f7f8 fbde 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011fa0:	1d79      	adds	r1, r7, #5
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	4630      	mov	r0, r6
 8011fa6:	f7f8 fbd9 	bl	800a75c <ucdr_deserialize_uint8_t>
 8011faa:	ea05 0508 	and.w	r5, r5, r8
 8011fae:	402c      	ands	r4, r5
 8011fb0:	4020      	ands	r0, r4
 8011fb2:	b2c0      	uxtb	r0, r0
 8011fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011fb8 <uxr_serialize_INFO_Payload>:
 8011fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fbc:	2202      	movs	r2, #2
 8011fbe:	460c      	mov	r4, r1
 8011fc0:	4605      	mov	r5, r0
 8011fc2:	f7fc fac9 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011fc6:	2202      	movs	r2, #2
 8011fc8:	18a1      	adds	r1, r4, r2
 8011fca:	4680      	mov	r8, r0
 8011fcc:	4628      	mov	r0, r5
 8011fce:	f7fc fac3 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8011fd2:	7921      	ldrb	r1, [r4, #4]
 8011fd4:	4607      	mov	r7, r0
 8011fd6:	4628      	mov	r0, r5
 8011fd8:	f7f8 fbaa 	bl	800a730 <ucdr_serialize_uint8_t>
 8011fdc:	7961      	ldrb	r1, [r4, #5]
 8011fde:	4606      	mov	r6, r0
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	f7f8 fba5 	bl	800a730 <ucdr_serialize_uint8_t>
 8011fe6:	ea08 0807 	and.w	r8, r8, r7
 8011fea:	ea06 0608 	and.w	r6, r6, r8
 8011fee:	ea00 0706 	and.w	r7, r0, r6
 8011ff2:	7a21      	ldrb	r1, [r4, #8]
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	f7f8 fb6d 	bl	800a6d4 <ucdr_serialize_bool>
 8011ffa:	7a23      	ldrb	r3, [r4, #8]
 8011ffc:	b2ff      	uxtb	r7, r7
 8011ffe:	4606      	mov	r6, r0
 8012000:	b96b      	cbnz	r3, 801201e <uxr_serialize_INFO_Payload+0x66>
 8012002:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8012006:	4628      	mov	r0, r5
 8012008:	f7f8 fb64 	bl	800a6d4 <ucdr_serialize_bool>
 801200c:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8012010:	4030      	ands	r0, r6
 8012012:	b2c6      	uxtb	r6, r0
 8012014:	b983      	cbnz	r3, 8012038 <uxr_serialize_INFO_Payload+0x80>
 8012016:	ea06 0007 	and.w	r0, r6, r7
 801201a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801201e:	7b21      	ldrb	r1, [r4, #12]
 8012020:	4628      	mov	r0, r5
 8012022:	f7f8 fb85 	bl	800a730 <ucdr_serialize_uint8_t>
 8012026:	b188      	cbz	r0, 801204c <uxr_serialize_INFO_Payload+0x94>
 8012028:	f104 010c 	add.w	r1, r4, #12
 801202c:	4628      	mov	r0, r5
 801202e:	f7ff fa19 	bl	8011464 <uxr_serialize_ObjectVariant.part.0>
 8012032:	4030      	ands	r0, r6
 8012034:	b2c6      	uxtb	r6, r0
 8012036:	e7e4      	b.n	8012002 <uxr_serialize_INFO_Payload+0x4a>
 8012038:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801203c:	4628      	mov	r0, r5
 801203e:	f7ff fdb7 	bl	8011bb0 <uxr_serialize_ActivityInfoVariant>
 8012042:	4006      	ands	r6, r0
 8012044:	ea06 0007 	and.w	r0, r6, r7
 8012048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801204c:	4606      	mov	r6, r0
 801204e:	e7d8      	b.n	8012002 <uxr_serialize_INFO_Payload+0x4a>

08012050 <uxr_serialize_READ_DATA_Payload>:
 8012050:	b570      	push	{r4, r5, r6, lr}
 8012052:	2202      	movs	r2, #2
 8012054:	4605      	mov	r5, r0
 8012056:	460e      	mov	r6, r1
 8012058:	f7fc fa7e 	bl	800e558 <ucdr_serialize_array_uint8_t>
 801205c:	2202      	movs	r2, #2
 801205e:	18b1      	adds	r1, r6, r2
 8012060:	4604      	mov	r4, r0
 8012062:	4628      	mov	r0, r5
 8012064:	f7fc fa78 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8012068:	1d31      	adds	r1, r6, #4
 801206a:	4004      	ands	r4, r0
 801206c:	4628      	mov	r0, r5
 801206e:	f7ff fe4b 	bl	8011d08 <uxr_serialize_ReadSpecification>
 8012072:	b2e4      	uxtb	r4, r4
 8012074:	4020      	ands	r0, r4
 8012076:	bd70      	pop	{r4, r5, r6, pc}

08012078 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8012078:	b570      	push	{r4, r5, r6, lr}
 801207a:	2202      	movs	r2, #2
 801207c:	4605      	mov	r5, r0
 801207e:	460e      	mov	r6, r1
 8012080:	f7fc fa6a 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8012084:	2202      	movs	r2, #2
 8012086:	4604      	mov	r4, r0
 8012088:	18b1      	adds	r1, r6, r2
 801208a:	4628      	mov	r0, r5
 801208c:	f7fc fa64 	bl	800e558 <ucdr_serialize_array_uint8_t>
 8012090:	4020      	ands	r0, r4
 8012092:	b2c0      	uxtb	r0, r0
 8012094:	bd70      	pop	{r4, r5, r6, pc}
 8012096:	bf00      	nop

08012098 <uxr_serialize_ACKNACK_Payload>:
 8012098:	b570      	push	{r4, r5, r6, lr}
 801209a:	460c      	mov	r4, r1
 801209c:	460e      	mov	r6, r1
 801209e:	f834 1b02 	ldrh.w	r1, [r4], #2
 80120a2:	4605      	mov	r5, r0
 80120a4:	f7f8 fb70 	bl	800a788 <ucdr_serialize_uint16_t>
 80120a8:	2202      	movs	r2, #2
 80120aa:	4621      	mov	r1, r4
 80120ac:	4604      	mov	r4, r0
 80120ae:	4628      	mov	r0, r5
 80120b0:	f7fc fa52 	bl	800e558 <ucdr_serialize_array_uint8_t>
 80120b4:	7931      	ldrb	r1, [r6, #4]
 80120b6:	4004      	ands	r4, r0
 80120b8:	4628      	mov	r0, r5
 80120ba:	f7f8 fb39 	bl	800a730 <ucdr_serialize_uint8_t>
 80120be:	b2e4      	uxtb	r4, r4
 80120c0:	4020      	ands	r0, r4
 80120c2:	bd70      	pop	{r4, r5, r6, pc}

080120c4 <uxr_deserialize_ACKNACK_Payload>:
 80120c4:	b570      	push	{r4, r5, r6, lr}
 80120c6:	4605      	mov	r5, r0
 80120c8:	460e      	mov	r6, r1
 80120ca:	f7f8 fc61 	bl	800a990 <ucdr_deserialize_uint16_t>
 80120ce:	2202      	movs	r2, #2
 80120d0:	18b1      	adds	r1, r6, r2
 80120d2:	4604      	mov	r4, r0
 80120d4:	4628      	mov	r0, r5
 80120d6:	f7fc faa3 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 80120da:	1d31      	adds	r1, r6, #4
 80120dc:	4004      	ands	r4, r0
 80120de:	4628      	mov	r0, r5
 80120e0:	f7f8 fb3c 	bl	800a75c <ucdr_deserialize_uint8_t>
 80120e4:	b2e4      	uxtb	r4, r4
 80120e6:	4020      	ands	r0, r4
 80120e8:	bd70      	pop	{r4, r5, r6, pc}
 80120ea:	bf00      	nop

080120ec <uxr_serialize_HEARTBEAT_Payload>:
 80120ec:	b570      	push	{r4, r5, r6, lr}
 80120ee:	460d      	mov	r5, r1
 80120f0:	8809      	ldrh	r1, [r1, #0]
 80120f2:	4606      	mov	r6, r0
 80120f4:	f7f8 fb48 	bl	800a788 <ucdr_serialize_uint16_t>
 80120f8:	8869      	ldrh	r1, [r5, #2]
 80120fa:	4604      	mov	r4, r0
 80120fc:	4630      	mov	r0, r6
 80120fe:	f7f8 fb43 	bl	800a788 <ucdr_serialize_uint16_t>
 8012102:	7929      	ldrb	r1, [r5, #4]
 8012104:	4004      	ands	r4, r0
 8012106:	4630      	mov	r0, r6
 8012108:	f7f8 fb12 	bl	800a730 <ucdr_serialize_uint8_t>
 801210c:	b2e4      	uxtb	r4, r4
 801210e:	4020      	ands	r0, r4
 8012110:	bd70      	pop	{r4, r5, r6, pc}
 8012112:	bf00      	nop

08012114 <uxr_deserialize_HEARTBEAT_Payload>:
 8012114:	b570      	push	{r4, r5, r6, lr}
 8012116:	4605      	mov	r5, r0
 8012118:	460e      	mov	r6, r1
 801211a:	f7f8 fc39 	bl	800a990 <ucdr_deserialize_uint16_t>
 801211e:	1cb1      	adds	r1, r6, #2
 8012120:	4604      	mov	r4, r0
 8012122:	4628      	mov	r0, r5
 8012124:	f7f8 fc34 	bl	800a990 <ucdr_deserialize_uint16_t>
 8012128:	1d31      	adds	r1, r6, #4
 801212a:	4004      	ands	r4, r0
 801212c:	4628      	mov	r0, r5
 801212e:	f7f8 fb15 	bl	800a75c <ucdr_deserialize_uint8_t>
 8012132:	b2e4      	uxtb	r4, r4
 8012134:	4020      	ands	r0, r4
 8012136:	bd70      	pop	{r4, r5, r6, pc}

08012138 <uxr_serialize_TIMESTAMP_Payload>:
 8012138:	b570      	push	{r4, r5, r6, lr}
 801213a:	460d      	mov	r5, r1
 801213c:	6809      	ldr	r1, [r1, #0]
 801213e:	4606      	mov	r6, r0
 8012140:	f7f9 f924 	bl	800b38c <ucdr_serialize_int32_t>
 8012144:	6869      	ldr	r1, [r5, #4]
 8012146:	4604      	mov	r4, r0
 8012148:	4630      	mov	r0, r6
 801214a:	f7f8 fd0d 	bl	800ab68 <ucdr_serialize_uint32_t>
 801214e:	4020      	ands	r0, r4
 8012150:	b2c0      	uxtb	r0, r0
 8012152:	bd70      	pop	{r4, r5, r6, pc}

08012154 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8012154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012158:	4605      	mov	r5, r0
 801215a:	460e      	mov	r6, r1
 801215c:	f7f9 f9b0 	bl	800b4c0 <ucdr_deserialize_int32_t>
 8012160:	1d31      	adds	r1, r6, #4
 8012162:	4607      	mov	r7, r0
 8012164:	4628      	mov	r0, r5
 8012166:	f7f8 fe29 	bl	800adbc <ucdr_deserialize_uint32_t>
 801216a:	f106 0108 	add.w	r1, r6, #8
 801216e:	4680      	mov	r8, r0
 8012170:	4628      	mov	r0, r5
 8012172:	f7f9 f9a5 	bl	800b4c0 <ucdr_deserialize_int32_t>
 8012176:	f106 010c 	add.w	r1, r6, #12
 801217a:	4604      	mov	r4, r0
 801217c:	4628      	mov	r0, r5
 801217e:	f7f8 fe1d 	bl	800adbc <ucdr_deserialize_uint32_t>
 8012182:	ea07 0708 	and.w	r7, r7, r8
 8012186:	403c      	ands	r4, r7
 8012188:	f106 0110 	add.w	r1, r6, #16
 801218c:	4004      	ands	r4, r0
 801218e:	4628      	mov	r0, r5
 8012190:	f7f9 f996 	bl	800b4c0 <ucdr_deserialize_int32_t>
 8012194:	f106 0114 	add.w	r1, r6, #20
 8012198:	4607      	mov	r7, r0
 801219a:	4628      	mov	r0, r5
 801219c:	f7f8 fe0e 	bl	800adbc <ucdr_deserialize_uint32_t>
 80121a0:	b2e4      	uxtb	r4, r4
 80121a2:	403c      	ands	r4, r7
 80121a4:	4020      	ands	r0, r4
 80121a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121aa:	bf00      	nop

080121ac <uxr_serialize_SampleIdentity>:
 80121ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121b0:	220c      	movs	r2, #12
 80121b2:	4604      	mov	r4, r0
 80121b4:	460d      	mov	r5, r1
 80121b6:	f7fc f9cf 	bl	800e558 <ucdr_serialize_array_uint8_t>
 80121ba:	2203      	movs	r2, #3
 80121bc:	f105 010c 	add.w	r1, r5, #12
 80121c0:	4680      	mov	r8, r0
 80121c2:	4620      	mov	r0, r4
 80121c4:	f7fc f9c8 	bl	800e558 <ucdr_serialize_array_uint8_t>
 80121c8:	7be9      	ldrb	r1, [r5, #15]
 80121ca:	4681      	mov	r9, r0
 80121cc:	4620      	mov	r0, r4
 80121ce:	f7f8 faaf 	bl	800a730 <ucdr_serialize_uint8_t>
 80121d2:	6929      	ldr	r1, [r5, #16]
 80121d4:	4607      	mov	r7, r0
 80121d6:	4620      	mov	r0, r4
 80121d8:	f7f9 f8d8 	bl	800b38c <ucdr_serialize_int32_t>
 80121dc:	6969      	ldr	r1, [r5, #20]
 80121de:	4606      	mov	r6, r0
 80121e0:	4620      	mov	r0, r4
 80121e2:	f7f8 fcc1 	bl	800ab68 <ucdr_serialize_uint32_t>
 80121e6:	ea08 0809 	and.w	r8, r8, r9
 80121ea:	ea07 0708 	and.w	r7, r7, r8
 80121ee:	403e      	ands	r6, r7
 80121f0:	4030      	ands	r0, r6
 80121f2:	b2c0      	uxtb	r0, r0
 80121f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080121f8 <uxr_deserialize_SampleIdentity>:
 80121f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121fc:	220c      	movs	r2, #12
 80121fe:	4604      	mov	r4, r0
 8012200:	460d      	mov	r5, r1
 8012202:	f7fc fa0d 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8012206:	2203      	movs	r2, #3
 8012208:	f105 010c 	add.w	r1, r5, #12
 801220c:	4680      	mov	r8, r0
 801220e:	4620      	mov	r0, r4
 8012210:	f7fc fa06 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8012214:	f105 010f 	add.w	r1, r5, #15
 8012218:	4681      	mov	r9, r0
 801221a:	4620      	mov	r0, r4
 801221c:	f7f8 fa9e 	bl	800a75c <ucdr_deserialize_uint8_t>
 8012220:	f105 0110 	add.w	r1, r5, #16
 8012224:	4607      	mov	r7, r0
 8012226:	4620      	mov	r0, r4
 8012228:	f7f9 f94a 	bl	800b4c0 <ucdr_deserialize_int32_t>
 801222c:	f105 0114 	add.w	r1, r5, #20
 8012230:	4606      	mov	r6, r0
 8012232:	4620      	mov	r0, r4
 8012234:	f7f8 fdc2 	bl	800adbc <ucdr_deserialize_uint32_t>
 8012238:	ea08 0809 	and.w	r8, r8, r9
 801223c:	ea07 0708 	and.w	r7, r7, r8
 8012240:	403e      	ands	r6, r7
 8012242:	4030      	ands	r0, r6
 8012244:	b2c0      	uxtb	r0, r0
 8012246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801224a:	bf00      	nop

0801224c <nav_msgs__msg__Odometry__get_type_hash>:
 801224c:	4800      	ldr	r0, [pc, #0]	@ (8012250 <nav_msgs__msg__Odometry__get_type_hash+0x4>)
 801224e:	4770      	bx	lr
 8012250:	20000a38 	.word	0x20000a38

08012254 <nav_msgs__msg__Odometry__get_type_description>:
 8012254:	b570      	push	{r4, r5, r6, lr}
 8012256:	4e2c      	ldr	r6, [pc, #176]	@ (8012308 <nav_msgs__msg__Odometry__get_type_description+0xb4>)
 8012258:	7835      	ldrb	r5, [r6, #0]
 801225a:	b10d      	cbz	r5, 8012260 <nav_msgs__msg__Odometry__get_type_description+0xc>
 801225c:	482b      	ldr	r0, [pc, #172]	@ (801230c <nav_msgs__msg__Odometry__get_type_description+0xb8>)
 801225e:	bd70      	pop	{r4, r5, r6, pc}
 8012260:	4628      	mov	r0, r5
 8012262:	f005 f801 	bl	8017268 <builtin_interfaces__msg__Time__get_type_description>
 8012266:	300c      	adds	r0, #12
 8012268:	c807      	ldmia	r0, {r0, r1, r2}
 801226a:	4c29      	ldr	r4, [pc, #164]	@ (8012310 <nav_msgs__msg__Odometry__get_type_description+0xbc>)
 801226c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012270:	4628      	mov	r0, r5
 8012272:	f005 f82f 	bl	80172d4 <geometry_msgs__msg__Point__get_type_description>
 8012276:	300c      	adds	r0, #12
 8012278:	c807      	ldmia	r0, {r0, r1, r2}
 801227a:	f104 0318 	add.w	r3, r4, #24
 801227e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012282:	4628      	mov	r0, r5
 8012284:	f005 f856 	bl	8017334 <geometry_msgs__msg__Pose__get_type_description>
 8012288:	300c      	adds	r0, #12
 801228a:	c807      	ldmia	r0, {r0, r1, r2}
 801228c:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8012290:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012294:	4628      	mov	r0, r5
 8012296:	f005 f8ad 	bl	80173f4 <geometry_msgs__msg__PoseWithCovariance__get_type_description>
 801229a:	300c      	adds	r0, #12
 801229c:	c807      	ldmia	r0, {r0, r1, r2}
 801229e:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80122a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122a6:	4628      	mov	r0, r5
 80122a8:	f005 f92e 	bl	8017508 <geometry_msgs__msg__Quaternion__get_type_description>
 80122ac:	300c      	adds	r0, #12
 80122ae:	c807      	ldmia	r0, {r0, r1, r2}
 80122b0:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 80122b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122b8:	4628      	mov	r0, r5
 80122ba:	f7fb fefb 	bl	800e0b4 <geometry_msgs__msg__Twist__get_type_description>
 80122be:	300c      	adds	r0, #12
 80122c0:	c807      	ldmia	r0, {r0, r1, r2}
 80122c2:	f104 0378 	add.w	r3, r4, #120	@ 0x78
 80122c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122ca:	4628      	mov	r0, r5
 80122cc:	f005 f94c 	bl	8017568 <geometry_msgs__msg__TwistWithCovariance__get_type_description>
 80122d0:	300c      	adds	r0, #12
 80122d2:	c807      	ldmia	r0, {r0, r1, r2}
 80122d4:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 80122d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122dc:	4628      	mov	r0, r5
 80122de:	f7fb ff5d 	bl	800e19c <geometry_msgs__msg__Vector3__get_type_description>
 80122e2:	300c      	adds	r0, #12
 80122e4:	c807      	ldmia	r0, {r0, r1, r2}
 80122e6:	f104 03a8 	add.w	r3, r4, #168	@ 0xa8
 80122ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80122ee:	4628      	mov	r0, r5
 80122f0:	f004 ff46 	bl	8017180 <std_msgs__msg__Header__get_type_description>
 80122f4:	300c      	adds	r0, #12
 80122f6:	c807      	ldmia	r0, {r0, r1, r2}
 80122f8:	34c0      	adds	r4, #192	@ 0xc0
 80122fa:	2301      	movs	r3, #1
 80122fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012300:	7033      	strb	r3, [r6, #0]
 8012302:	4802      	ldr	r0, [pc, #8]	@ (801230c <nav_msgs__msg__Odometry__get_type_description+0xb8>)
 8012304:	bd70      	pop	{r4, r5, r6, pc}
 8012306:	bf00      	nop
 8012308:	20010355 	.word	0x20010355
 801230c:	0801c818 	.word	0x0801c818
 8012310:	20000cf4 	.word	0x20000cf4

08012314 <nav_msgs__msg__Odometry__get_type_description_sources>:
 8012314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012316:	4d4c      	ldr	r5, [pc, #304]	@ (8012448 <nav_msgs__msg__Odometry__get_type_description_sources+0x134>)
 8012318:	782e      	ldrb	r6, [r5, #0]
 801231a:	b10e      	cbz	r6, 8012320 <nav_msgs__msg__Odometry__get_type_description_sources+0xc>
 801231c:	484b      	ldr	r0, [pc, #300]	@ (801244c <nav_msgs__msg__Odometry__get_type_description_sources+0x138>)
 801231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012320:	4f4b      	ldr	r7, [pc, #300]	@ (8012450 <nav_msgs__msg__Odometry__get_type_description_sources+0x13c>)
 8012322:	4c4c      	ldr	r4, [pc, #304]	@ (8012454 <nav_msgs__msg__Odometry__get_type_description_sources+0x140>)
 8012324:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012328:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801232a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	4627      	mov	r7, r4
 8012330:	4630      	mov	r0, r6
 8012332:	f847 3b04 	str.w	r3, [r7], #4
 8012336:	f004 ffa3 	bl	8017280 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801233a:	4684      	mov	ip, r0
 801233c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012340:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012342:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012346:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012348:	4630      	mov	r0, r6
 801234a:	f8dc 3000 	ldr.w	r3, [ip]
 801234e:	603b      	str	r3, [r7, #0]
 8012350:	f004 ffcc 	bl	80172ec <geometry_msgs__msg__Point__get_individual_type_description_source>
 8012354:	4684      	mov	ip, r0
 8012356:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801235a:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 801235e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012360:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012364:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012366:	4630      	mov	r0, r6
 8012368:	f8dc 3000 	ldr.w	r3, [ip]
 801236c:	603b      	str	r3, [r7, #0]
 801236e:	f005 f801 	bl	8017374 <geometry_msgs__msg__Pose__get_individual_type_description_source>
 8012372:	4684      	mov	ip, r0
 8012374:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012378:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 801237c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801237e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012382:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012384:	4630      	mov	r0, r6
 8012386:	f8dc 3000 	ldr.w	r3, [ip]
 801238a:	603b      	str	r3, [r7, #0]
 801238c:	f005 f85c 	bl	8017448 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>
 8012390:	4684      	mov	ip, r0
 8012392:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012396:	f104 0770 	add.w	r7, r4, #112	@ 0x70
 801239a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801239c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123a2:	4630      	mov	r0, r6
 80123a4:	f8dc 3000 	ldr.w	r3, [ip]
 80123a8:	603b      	str	r3, [r7, #0]
 80123aa:	f005 f8b9 	bl	8017520 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 80123ae:	4684      	mov	ip, r0
 80123b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123b4:	f104 0794 	add.w	r7, r4, #148	@ 0x94
 80123b8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123be:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123c0:	4630      	mov	r0, r6
 80123c2:	f8dc 3000 	ldr.w	r3, [ip]
 80123c6:	603b      	str	r3, [r7, #0]
 80123c8:	f7fb fe8c 	bl	800e0e4 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 80123cc:	4684      	mov	ip, r0
 80123ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123d2:	f104 07b8 	add.w	r7, r4, #184	@ 0xb8
 80123d6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123dc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123de:	4630      	mov	r0, r6
 80123e0:	f8dc 3000 	ldr.w	r3, [ip]
 80123e4:	603b      	str	r3, [r7, #0]
 80123e6:	f005 f8df 	bl	80175a8 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>
 80123ea:	4684      	mov	ip, r0
 80123ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123f0:	f104 07dc 	add.w	r7, r4, #220	@ 0xdc
 80123f4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80123fa:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80123fc:	4630      	mov	r0, r6
 80123fe:	f8dc 3000 	ldr.w	r3, [ip]
 8012402:	603b      	str	r3, [r7, #0]
 8012404:	f7fb fed6 	bl	800e1b4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8012408:	4684      	mov	ip, r0
 801240a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801240e:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 8012412:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012414:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012418:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801241a:	4630      	mov	r0, r6
 801241c:	f8dc 3000 	ldr.w	r3, [ip]
 8012420:	603b      	str	r3, [r7, #0]
 8012422:	f004 fec5 	bl	80171b0 <std_msgs__msg__Header__get_individual_type_description_source>
 8012426:	2301      	movs	r3, #1
 8012428:	4684      	mov	ip, r0
 801242a:	702b      	strb	r3, [r5, #0]
 801242c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012430:	f504 7492 	add.w	r4, r4, #292	@ 0x124
 8012434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012436:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801243a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801243c:	f8dc 3000 	ldr.w	r3, [ip]
 8012440:	4802      	ldr	r0, [pc, #8]	@ (801244c <nav_msgs__msg__Odometry__get_type_description_sources+0x138>)
 8012442:	6023      	str	r3, [r4, #0]
 8012444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012446:	bf00      	nop
 8012448:	20010354 	.word	0x20010354
 801244c:	0801c7e8 	.word	0x0801c7e8
 8012450:	0801c7f4 	.word	0x0801c7f4
 8012454:	200101ec 	.word	0x200101ec

08012458 <nav_msgs__msg__Odometry__init>:
 8012458:	b3d8      	cbz	r0, 80124d2 <nav_msgs__msg__Odometry__init+0x7a>
 801245a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801245c:	4604      	mov	r4, r0
 801245e:	f004 fed3 	bl	8017208 <std_msgs__msg__Header__init>
 8012462:	b190      	cbz	r0, 801248a <nav_msgs__msg__Odometry__init+0x32>
 8012464:	f104 0514 	add.w	r5, r4, #20
 8012468:	4628      	mov	r0, r5
 801246a:	f7fb fc37 	bl	800dcdc <rosidl_runtime_c__String__init>
 801246e:	b358      	cbz	r0, 80124c8 <nav_msgs__msg__Odometry__init+0x70>
 8012470:	f104 0620 	add.w	r6, r4, #32
 8012474:	4630      	mov	r0, r6
 8012476:	f005 f831 	bl	80174dc <geometry_msgs__msg__PoseWithCovariance__init>
 801247a:	b1b8      	cbz	r0, 80124ac <nav_msgs__msg__Odometry__init+0x54>
 801247c:	f504 77bc 	add.w	r7, r4, #376	@ 0x178
 8012480:	4638      	mov	r0, r7
 8012482:	f005 f8cd 	bl	8017620 <geometry_msgs__msg__TwistWithCovariance__init>
 8012486:	b330      	cbz	r0, 80124d6 <nav_msgs__msg__Odometry__init+0x7e>
 8012488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801248a:	4620      	mov	r0, r4
 801248c:	f004 fedc 	bl	8017248 <std_msgs__msg__Header__fini>
 8012490:	f104 0014 	add.w	r0, r4, #20
 8012494:	f7fb fc3c 	bl	800dd10 <rosidl_runtime_c__String__fini>
 8012498:	f104 0020 	add.w	r0, r4, #32
 801249c:	f005 f82c 	bl	80174f8 <geometry_msgs__msg__PoseWithCovariance__fini>
 80124a0:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80124a4:	f005 f8ca 	bl	801763c <geometry_msgs__msg__TwistWithCovariance__fini>
 80124a8:	2000      	movs	r0, #0
 80124aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124ac:	4620      	mov	r0, r4
 80124ae:	f004 fecb 	bl	8017248 <std_msgs__msg__Header__fini>
 80124b2:	4628      	mov	r0, r5
 80124b4:	f7fb fc2c 	bl	800dd10 <rosidl_runtime_c__String__fini>
 80124b8:	4630      	mov	r0, r6
 80124ba:	f005 f81d 	bl	80174f8 <geometry_msgs__msg__PoseWithCovariance__fini>
 80124be:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80124c2:	f005 f8bb 	bl	801763c <geometry_msgs__msg__TwistWithCovariance__fini>
 80124c6:	e7ef      	b.n	80124a8 <nav_msgs__msg__Odometry__init+0x50>
 80124c8:	4620      	mov	r0, r4
 80124ca:	f004 febd 	bl	8017248 <std_msgs__msg__Header__fini>
 80124ce:	4628      	mov	r0, r5
 80124d0:	e7e0      	b.n	8012494 <nav_msgs__msg__Odometry__init+0x3c>
 80124d2:	2000      	movs	r0, #0
 80124d4:	4770      	bx	lr
 80124d6:	4620      	mov	r0, r4
 80124d8:	f004 feb6 	bl	8017248 <std_msgs__msg__Header__fini>
 80124dc:	4628      	mov	r0, r5
 80124de:	f7fb fc17 	bl	800dd10 <rosidl_runtime_c__String__fini>
 80124e2:	4630      	mov	r0, r6
 80124e4:	f005 f808 	bl	80174f8 <geometry_msgs__msg__PoseWithCovariance__fini>
 80124e8:	4638      	mov	r0, r7
 80124ea:	f005 f8a7 	bl	801763c <geometry_msgs__msg__TwistWithCovariance__fini>
 80124ee:	e7db      	b.n	80124a8 <nav_msgs__msg__Odometry__init+0x50>

080124f0 <nav_msgs__msg__Odometry__fini>:
 80124f0:	b188      	cbz	r0, 8012516 <nav_msgs__msg__Odometry__fini+0x26>
 80124f2:	b510      	push	{r4, lr}
 80124f4:	4604      	mov	r4, r0
 80124f6:	f004 fea7 	bl	8017248 <std_msgs__msg__Header__fini>
 80124fa:	f104 0014 	add.w	r0, r4, #20
 80124fe:	f7fb fc07 	bl	800dd10 <rosidl_runtime_c__String__fini>
 8012502:	f104 0020 	add.w	r0, r4, #32
 8012506:	f004 fff7 	bl	80174f8 <geometry_msgs__msg__PoseWithCovariance__fini>
 801250a:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 801250e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012512:	f005 b893 	b.w	801763c <geometry_msgs__msg__TwistWithCovariance__fini>
 8012516:	4770      	bx	lr

08012518 <rcl_client_get_rmw_handle>:
 8012518:	b118      	cbz	r0, 8012522 <rcl_client_get_rmw_handle+0xa>
 801251a:	6800      	ldr	r0, [r0, #0]
 801251c:	b108      	cbz	r0, 8012522 <rcl_client_get_rmw_handle+0xa>
 801251e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012522:	4770      	bx	lr

08012524 <rcl_send_request>:
 8012524:	2800      	cmp	r0, #0
 8012526:	d048      	beq.n	80125ba <rcl_send_request+0x96>
 8012528:	b570      	push	{r4, r5, r6, lr}
 801252a:	4604      	mov	r4, r0
 801252c:	6800      	ldr	r0, [r0, #0]
 801252e:	b08a      	sub	sp, #40	@ 0x28
 8012530:	b1c0      	cbz	r0, 8012564 <rcl_send_request+0x40>
 8012532:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8012536:	b1ab      	cbz	r3, 8012564 <rcl_send_request+0x40>
 8012538:	460e      	mov	r6, r1
 801253a:	b1b9      	cbz	r1, 801256c <rcl_send_request+0x48>
 801253c:	4615      	mov	r5, r2
 801253e:	b1aa      	cbz	r2, 801256c <rcl_send_request+0x48>
 8012540:	2105      	movs	r1, #5
 8012542:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8012546:	f002 ff87 	bl	8015458 <__atomic_load_8>
 801254a:	6823      	ldr	r3, [r4, #0]
 801254c:	e9c5 0100 	strd	r0, r1, [r5]
 8012550:	462a      	mov	r2, r5
 8012552:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012556:	4631      	mov	r1, r6
 8012558:	f004 f940 	bl	80167dc <rmw_send_request>
 801255c:	b148      	cbz	r0, 8012572 <rcl_send_request+0x4e>
 801255e:	2001      	movs	r0, #1
 8012560:	b00a      	add	sp, #40	@ 0x28
 8012562:	bd70      	pop	{r4, r5, r6, pc}
 8012564:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8012568:	b00a      	add	sp, #40	@ 0x28
 801256a:	bd70      	pop	{r4, r5, r6, pc}
 801256c:	200b      	movs	r0, #11
 801256e:	b00a      	add	sp, #40	@ 0x28
 8012570:	bd70      	pop	{r4, r5, r6, pc}
 8012572:	6820      	ldr	r0, [r4, #0]
 8012574:	2305      	movs	r3, #5
 8012576:	9300      	str	r3, [sp, #0]
 8012578:	e9d5 2300 	ldrd	r2, r3, [r5]
 801257c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8012580:	f002 ffd6 	bl	8015530 <__atomic_exchange_8>
 8012584:	6823      	ldr	r3, [r4, #0]
 8012586:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801258a:	b1a2      	cbz	r2, 80125b6 <rcl_send_request+0x92>
 801258c:	a905      	add	r1, sp, #20
 801258e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012592:	f003 fd1f 	bl	8015fd4 <rmw_get_gid_for_client>
 8012596:	4601      	mov	r1, r0
 8012598:	b990      	cbnz	r0, 80125c0 <rcl_send_request+0x9c>
 801259a:	6822      	ldr	r2, [r4, #0]
 801259c:	ab06      	add	r3, sp, #24
 801259e:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 80125a2:	9302      	str	r3, [sp, #8]
 80125a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80125a8:	4632      	mov	r2, r6
 80125aa:	e9cd 4500 	strd	r4, r5, [sp]
 80125ae:	f000 fe13 	bl	80131d8 <rcl_send_service_event_message>
 80125b2:	2800      	cmp	r0, #0
 80125b4:	d1d4      	bne.n	8012560 <rcl_send_request+0x3c>
 80125b6:	2000      	movs	r0, #0
 80125b8:	e7d2      	b.n	8012560 <rcl_send_request+0x3c>
 80125ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80125be:	4770      	bx	lr
 80125c0:	f000 f878 	bl	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 80125c4:	e7cc      	b.n	8012560 <rcl_send_request+0x3c>
 80125c6:	bf00      	nop

080125c8 <rcl_take_response>:
 80125c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125ca:	468e      	mov	lr, r1
 80125cc:	460c      	mov	r4, r1
 80125ce:	4617      	mov	r7, r2
 80125d0:	4605      	mov	r5, r0
 80125d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80125d6:	b095      	sub	sp, #84	@ 0x54
 80125d8:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 80125dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80125e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80125e8:	2d00      	cmp	r5, #0
 80125ea:	d044      	beq.n	8012676 <rcl_take_response+0xae>
 80125ec:	682b      	ldr	r3, [r5, #0]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d041      	beq.n	8012676 <rcl_take_response+0xae>
 80125f2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80125f6:	2800      	cmp	r0, #0
 80125f8:	d03d      	beq.n	8012676 <rcl_take_response+0xae>
 80125fa:	2f00      	cmp	r7, #0
 80125fc:	d03e      	beq.n	801267c <rcl_take_response+0xb4>
 80125fe:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8012698 <rcl_take_response+0xd0>
 8012602:	2300      	movs	r3, #0
 8012604:	f88d 3013 	strb.w	r3, [sp, #19]
 8012608:	463a      	mov	r2, r7
 801260a:	f10d 0313 	add.w	r3, sp, #19
 801260e:	a90a      	add	r1, sp, #40	@ 0x28
 8012610:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8012614:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012618:	f004 f9e0 	bl	80169dc <rmw_take_response>
 801261c:	4606      	mov	r6, r0
 801261e:	bb78      	cbnz	r0, 8012680 <rcl_take_response+0xb8>
 8012620:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8012624:	b373      	cbz	r3, 8012684 <rcl_take_response+0xbc>
 8012626:	682b      	ldr	r3, [r5, #0]
 8012628:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801262c:	b1aa      	cbz	r2, 801265a <rcl_take_response+0x92>
 801262e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8012632:	a905      	add	r1, sp, #20
 8012634:	f003 fcce 	bl	8015fd4 <rmw_get_gid_for_client>
 8012638:	bb38      	cbnz	r0, 801268a <rcl_take_response+0xc2>
 801263a:	682b      	ldr	r3, [r5, #0]
 801263c:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8012640:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 8012644:	ab06      	add	r3, sp, #24
 8012646:	ed8d 7b00 	vstr	d7, [sp]
 801264a:	463a      	mov	r2, r7
 801264c:	9302      	str	r3, [sp, #8]
 801264e:	2103      	movs	r1, #3
 8012650:	f000 fdc2 	bl	80131d8 <rcl_send_service_event_message>
 8012654:	2800      	cmp	r0, #0
 8012656:	bf18      	it	ne
 8012658:	4606      	movne	r6, r0
 801265a:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 801265e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012662:	46a4      	mov	ip, r4
 8012664:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012668:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801266c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012670:	4630      	mov	r0, r6
 8012672:	b015      	add	sp, #84	@ 0x54
 8012674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012676:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801267a:	e7ee      	b.n	801265a <rcl_take_response+0x92>
 801267c:	260b      	movs	r6, #11
 801267e:	e7ec      	b.n	801265a <rcl_take_response+0x92>
 8012680:	2601      	movs	r6, #1
 8012682:	e7ea      	b.n	801265a <rcl_take_response+0x92>
 8012684:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8012688:	e7e7      	b.n	801265a <rcl_take_response+0x92>
 801268a:	f000 f813 	bl	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 801268e:	4606      	mov	r6, r0
 8012690:	e7e3      	b.n	801265a <rcl_take_response+0x92>
 8012692:	bf00      	nop
 8012694:	f3af 8000 	nop.w
	...

080126a0 <rcl_client_is_valid>:
 80126a0:	b130      	cbz	r0, 80126b0 <rcl_client_is_valid+0x10>
 80126a2:	6800      	ldr	r0, [r0, #0]
 80126a4:	b120      	cbz	r0, 80126b0 <rcl_client_is_valid+0x10>
 80126a6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80126aa:	3800      	subs	r0, #0
 80126ac:	bf18      	it	ne
 80126ae:	2001      	movne	r0, #1
 80126b0:	4770      	bx	lr
 80126b2:	bf00      	nop

080126b4 <rcl_convert_rmw_ret_to_rcl_ret>:
 80126b4:	280b      	cmp	r0, #11
 80126b6:	dc0d      	bgt.n	80126d4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80126b8:	2800      	cmp	r0, #0
 80126ba:	db09      	blt.n	80126d0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80126bc:	280b      	cmp	r0, #11
 80126be:	d807      	bhi.n	80126d0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80126c0:	e8df f000 	tbb	[pc, r0]
 80126c4:	07060607 	.word	0x07060607
 80126c8:	06060606 	.word	0x06060606
 80126cc:	07070606 	.word	0x07070606
 80126d0:	2001      	movs	r0, #1
 80126d2:	4770      	bx	lr
 80126d4:	28cb      	cmp	r0, #203	@ 0xcb
 80126d6:	bf14      	ite	ne
 80126d8:	2001      	movne	r0, #1
 80126da:	20cb      	moveq	r0, #203	@ 0xcb
 80126dc:	4770      	bx	lr
 80126de:	bf00      	nop

080126e0 <rcl_get_zero_initialized_context>:
 80126e0:	2200      	movs	r2, #0
 80126e2:	e9c0 2200 	strd	r2, r2, [r0]
 80126e6:	4770      	bx	lr

080126e8 <rcl_context_is_valid>:
 80126e8:	b118      	cbz	r0, 80126f2 <rcl_context_is_valid+0xa>
 80126ea:	6840      	ldr	r0, [r0, #4]
 80126ec:	3800      	subs	r0, #0
 80126ee:	bf18      	it	ne
 80126f0:	2001      	movne	r0, #1
 80126f2:	4770      	bx	lr

080126f4 <__cleanup_context>:
 80126f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126f8:	4606      	mov	r6, r0
 80126fa:	6800      	ldr	r0, [r0, #0]
 80126fc:	2300      	movs	r3, #0
 80126fe:	6073      	str	r3, [r6, #4]
 8012700:	2800      	cmp	r0, #0
 8012702:	d042      	beq.n	801278a <__cleanup_context+0x96>
 8012704:	6943      	ldr	r3, [r0, #20]
 8012706:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801270a:	6907      	ldr	r7, [r0, #16]
 801270c:	b39b      	cbz	r3, 8012776 <__cleanup_context+0x82>
 801270e:	3014      	adds	r0, #20
 8012710:	f000 f9b2 	bl	8012a78 <rcl_init_options_fini>
 8012714:	4680      	mov	r8, r0
 8012716:	2800      	cmp	r0, #0
 8012718:	d144      	bne.n	80127a4 <__cleanup_context+0xb0>
 801271a:	6830      	ldr	r0, [r6, #0]
 801271c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801271e:	b123      	cbz	r3, 801272a <__cleanup_context+0x36>
 8012720:	3028      	adds	r0, #40	@ 0x28
 8012722:	f003 fe9f 	bl	8016464 <rmw_context_fini>
 8012726:	bbb8      	cbnz	r0, 8012798 <__cleanup_context+0xa4>
 8012728:	6830      	ldr	r0, [r6, #0]
 801272a:	6a03      	ldr	r3, [r0, #32]
 801272c:	b1db      	cbz	r3, 8012766 <__cleanup_context+0x72>
 801272e:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8012732:	2a01      	cmp	r2, #1
 8012734:	f17c 0100 	sbcs.w	r1, ip, #0
 8012738:	db11      	blt.n	801275e <__cleanup_context+0x6a>
 801273a:	2400      	movs	r4, #0
 801273c:	4625      	mov	r5, r4
 801273e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012742:	4639      	mov	r1, r7
 8012744:	b1c8      	cbz	r0, 801277a <__cleanup_context+0x86>
 8012746:	47c8      	blx	r9
 8012748:	6833      	ldr	r3, [r6, #0]
 801274a:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801274e:	3401      	adds	r4, #1
 8012750:	f145 0500 	adc.w	r5, r5, #0
 8012754:	4294      	cmp	r4, r2
 8012756:	eb75 010c 	sbcs.w	r1, r5, ip
 801275a:	6a1b      	ldr	r3, [r3, #32]
 801275c:	dbef      	blt.n	801273e <__cleanup_context+0x4a>
 801275e:	4618      	mov	r0, r3
 8012760:	4639      	mov	r1, r7
 8012762:	47c8      	blx	r9
 8012764:	6830      	ldr	r0, [r6, #0]
 8012766:	4639      	mov	r1, r7
 8012768:	47c8      	blx	r9
 801276a:	2300      	movs	r3, #0
 801276c:	e9c6 3300 	strd	r3, r3, [r6]
 8012770:	4640      	mov	r0, r8
 8012772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012776:	4698      	mov	r8, r3
 8012778:	e7d0      	b.n	801271c <__cleanup_context+0x28>
 801277a:	3401      	adds	r4, #1
 801277c:	f145 0500 	adc.w	r5, r5, #0
 8012780:	4294      	cmp	r4, r2
 8012782:	eb75 010c 	sbcs.w	r1, r5, ip
 8012786:	dbda      	blt.n	801273e <__cleanup_context+0x4a>
 8012788:	e7e9      	b.n	801275e <__cleanup_context+0x6a>
 801278a:	4680      	mov	r8, r0
 801278c:	2300      	movs	r3, #0
 801278e:	e9c6 3300 	strd	r3, r3, [r6]
 8012792:	4640      	mov	r0, r8
 8012794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012798:	f1b8 0f00 	cmp.w	r8, #0
 801279c:	d005      	beq.n	80127aa <__cleanup_context+0xb6>
 801279e:	f7fa fc73 	bl	800d088 <rcutils_reset_error>
 80127a2:	e7c1      	b.n	8012728 <__cleanup_context+0x34>
 80127a4:	f7fa fc70 	bl	800d088 <rcutils_reset_error>
 80127a8:	e7b7      	b.n	801271a <__cleanup_context+0x26>
 80127aa:	f7ff ff83 	bl	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 80127ae:	4680      	mov	r8, r0
 80127b0:	e7f5      	b.n	801279e <__cleanup_context+0xaa>
 80127b2:	bf00      	nop

080127b4 <rcl_init>:
 80127b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127b8:	1e04      	subs	r4, r0, #0
 80127ba:	b0a5      	sub	sp, #148	@ 0x94
 80127bc:	460d      	mov	r5, r1
 80127be:	4617      	mov	r7, r2
 80127c0:	461e      	mov	r6, r3
 80127c2:	dd13      	ble.n	80127ec <rcl_init+0x38>
 80127c4:	b161      	cbz	r1, 80127e0 <rcl_init+0x2c>
 80127c6:	f1a1 0e04 	sub.w	lr, r1, #4
 80127ca:	f04f 0c00 	mov.w	ip, #0
 80127ce:	e001      	b.n	80127d4 <rcl_init+0x20>
 80127d0:	4564      	cmp	r4, ip
 80127d2:	d00d      	beq.n	80127f0 <rcl_init+0x3c>
 80127d4:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 80127d8:	f10c 0c01 	add.w	ip, ip, #1
 80127dc:	2800      	cmp	r0, #0
 80127de:	d1f7      	bne.n	80127d0 <rcl_init+0x1c>
 80127e0:	f04f 080b 	mov.w	r8, #11
 80127e4:	4640      	mov	r0, r8
 80127e6:	b025      	add	sp, #148	@ 0x94
 80127e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127ec:	2900      	cmp	r1, #0
 80127ee:	d1f7      	bne.n	80127e0 <rcl_init+0x2c>
 80127f0:	2f00      	cmp	r7, #0
 80127f2:	d0f5      	beq.n	80127e0 <rcl_init+0x2c>
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d0f2      	beq.n	80127e0 <rcl_init+0x2c>
 80127fa:	469c      	mov	ip, r3
 80127fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012800:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8012804:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012808:	f8dc 3000 	ldr.w	r3, [ip]
 801280c:	f8ce 3000 	str.w	r3, [lr]
 8012810:	a81f      	add	r0, sp, #124	@ 0x7c
 8012812:	f7fa fc0d 	bl	800d030 <rcutils_allocator_is_valid>
 8012816:	2800      	cmp	r0, #0
 8012818:	d0e2      	beq.n	80127e0 <rcl_init+0x2c>
 801281a:	2e00      	cmp	r6, #0
 801281c:	d0e0      	beq.n	80127e0 <rcl_init+0x2c>
 801281e:	6833      	ldr	r3, [r6, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d173      	bne.n	801290c <rcl_init+0x158>
 8012824:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8012828:	2198      	movs	r1, #152	@ 0x98
 801282a:	2001      	movs	r0, #1
 801282c:	4798      	blx	r3
 801282e:	4680      	mov	r8, r0
 8012830:	6030      	str	r0, [r6, #0]
 8012832:	2800      	cmp	r0, #0
 8012834:	f000 80ac 	beq.w	8012990 <rcl_init+0x1dc>
 8012838:	a802      	add	r0, sp, #8
 801283a:	f003 f965 	bl	8015b08 <rmw_get_zero_initialized_context>
 801283e:	a902      	add	r1, sp, #8
 8012840:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8012844:	2270      	movs	r2, #112	@ 0x70
 8012846:	f007 fc52 	bl	801a0ee <memcpy>
 801284a:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 801284e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012852:	f8d6 8000 	ldr.w	r8, [r6]
 8012856:	46c4      	mov	ip, r8
 8012858:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801285c:	f8de 3000 	ldr.w	r3, [lr]
 8012860:	f8cc 3000 	str.w	r3, [ip]
 8012864:	f108 0114 	add.w	r1, r8, #20
 8012868:	4638      	mov	r0, r7
 801286a:	f000 f92f 	bl	8012acc <rcl_init_options_copy>
 801286e:	4680      	mov	r8, r0
 8012870:	2800      	cmp	r0, #0
 8012872:	d147      	bne.n	8012904 <rcl_init+0x150>
 8012874:	f8d6 9000 	ldr.w	r9, [r6]
 8012878:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 801287c:	f8c9 0020 	str.w	r0, [r9, #32]
 8012880:	f8c9 4018 	str.w	r4, [r9, #24]
 8012884:	f8c9 a01c 	str.w	sl, [r9, #28]
 8012888:	2c00      	cmp	r4, #0
 801288a:	d047      	beq.n	801291c <rcl_init+0x168>
 801288c:	2d00      	cmp	r5, #0
 801288e:	d045      	beq.n	801291c <rcl_init+0x168>
 8012890:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8012894:	2104      	movs	r1, #4
 8012896:	4620      	mov	r0, r4
 8012898:	4798      	blx	r3
 801289a:	f8c9 0020 	str.w	r0, [r9, #32]
 801289e:	f8d6 9000 	ldr.w	r9, [r6]
 80128a2:	f8d9 b020 	ldr.w	fp, [r9, #32]
 80128a6:	f1bb 0f00 	cmp.w	fp, #0
 80128aa:	d029      	beq.n	8012900 <rcl_init+0x14c>
 80128ac:	2c01      	cmp	r4, #1
 80128ae:	f17a 0300 	sbcs.w	r3, sl, #0
 80128b2:	db33      	blt.n	801291c <rcl_init+0x168>
 80128b4:	f04f 0800 	mov.w	r8, #0
 80128b8:	3d04      	subs	r5, #4
 80128ba:	46c1      	mov	r9, r8
 80128bc:	e00d      	b.n	80128da <rcl_init+0x126>
 80128be:	6829      	ldr	r1, [r5, #0]
 80128c0:	f007 fc15 	bl	801a0ee <memcpy>
 80128c4:	f118 0801 	adds.w	r8, r8, #1
 80128c8:	f149 0900 	adc.w	r9, r9, #0
 80128cc:	45ca      	cmp	sl, r9
 80128ce:	bf08      	it	eq
 80128d0:	4544      	cmpeq	r4, r8
 80128d2:	d021      	beq.n	8012918 <rcl_init+0x164>
 80128d4:	6833      	ldr	r3, [r6, #0]
 80128d6:	f8d3 b020 	ldr.w	fp, [r3, #32]
 80128da:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80128de:	f7ed fcf7 	bl	80002d0 <strlen>
 80128e2:	1c42      	adds	r2, r0, #1
 80128e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80128e6:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 80128e8:	9201      	str	r2, [sp, #4]
 80128ea:	4610      	mov	r0, r2
 80128ec:	4798      	blx	r3
 80128ee:	6833      	ldr	r3, [r6, #0]
 80128f0:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 80128f4:	6a1b      	ldr	r3, [r3, #32]
 80128f6:	9a01      	ldr	r2, [sp, #4]
 80128f8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80128fc:	2800      	cmp	r0, #0
 80128fe:	d1de      	bne.n	80128be <rcl_init+0x10a>
 8012900:	f04f 080a 	mov.w	r8, #10
 8012904:	4630      	mov	r0, r6
 8012906:	f7ff fef5 	bl	80126f4 <__cleanup_context>
 801290a:	e76b      	b.n	80127e4 <rcl_init+0x30>
 801290c:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8012910:	4640      	mov	r0, r8
 8012912:	b025      	add	sp, #148	@ 0x94
 8012914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012918:	f8d6 9000 	ldr.w	r9, [r6]
 801291c:	4a26      	ldr	r2, [pc, #152]	@ (80129b8 <rcl_init+0x204>)
 801291e:	6813      	ldr	r3, [r2, #0]
 8012920:	3301      	adds	r3, #1
 8012922:	d030      	beq.n	8012986 <rcl_init+0x1d2>
 8012924:	461d      	mov	r5, r3
 8012926:	2000      	movs	r0, #0
 8012928:	4619      	mov	r1, r3
 801292a:	f8d9 4014 	ldr.w	r4, [r9, #20]
 801292e:	6073      	str	r3, [r6, #4]
 8012930:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012932:	6011      	str	r1, [r2, #0]
 8012934:	3301      	adds	r3, #1
 8012936:	e9c4 5006 	strd	r5, r0, [r4, #24]
 801293a:	d033      	beq.n	80129a4 <rcl_init+0x1f0>
 801293c:	683b      	ldr	r3, [r7, #0]
 801293e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012942:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 8012946:	b333      	cbz	r3, 8012996 <rcl_init+0x1e2>
 8012948:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801294a:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 801294e:	b953      	cbnz	r3, 8012966 <rcl_init+0x1b2>
 8012950:	2801      	cmp	r0, #1
 8012952:	d008      	beq.n	8012966 <rcl_init+0x1b2>
 8012954:	a91f      	add	r1, sp, #124	@ 0x7c
 8012956:	4628      	mov	r0, r5
 8012958:	f005 feae 	bl	80186b8 <rcl_get_discovery_static_peers>
 801295c:	4680      	mov	r8, r0
 801295e:	2800      	cmp	r0, #0
 8012960:	d1d0      	bne.n	8012904 <rcl_init+0x150>
 8012962:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8012966:	f005 fe9d 	bl	80186a4 <rcl_automatic_discovery_range_to_string>
 801296a:	6831      	ldr	r1, [r6, #0]
 801296c:	6948      	ldr	r0, [r1, #20]
 801296e:	3128      	adds	r1, #40	@ 0x28
 8012970:	3018      	adds	r0, #24
 8012972:	f003 fc43 	bl	80161fc <rmw_init>
 8012976:	4680      	mov	r8, r0
 8012978:	2800      	cmp	r0, #0
 801297a:	f43f af33 	beq.w	80127e4 <rcl_init+0x30>
 801297e:	f7ff fe99 	bl	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012982:	4680      	mov	r8, r0
 8012984:	e7be      	b.n	8012904 <rcl_init+0x150>
 8012986:	2101      	movs	r1, #1
 8012988:	4618      	mov	r0, r3
 801298a:	460d      	mov	r5, r1
 801298c:	460b      	mov	r3, r1
 801298e:	e7cc      	b.n	801292a <rcl_init+0x176>
 8012990:	f04f 080a 	mov.w	r8, #10
 8012994:	e726      	b.n	80127e4 <rcl_init+0x30>
 8012996:	4628      	mov	r0, r5
 8012998:	f005 fe42 	bl	8018620 <rcl_get_automatic_discovery_range>
 801299c:	4680      	mov	r8, r0
 801299e:	2800      	cmp	r0, #0
 80129a0:	d0d2      	beq.n	8012948 <rcl_init+0x194>
 80129a2:	e7af      	b.n	8012904 <rcl_init+0x150>
 80129a4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80129a8:	f005 fef0 	bl	801878c <rcl_get_default_domain_id>
 80129ac:	4680      	mov	r8, r0
 80129ae:	2800      	cmp	r0, #0
 80129b0:	d1a8      	bne.n	8012904 <rcl_init+0x150>
 80129b2:	6833      	ldr	r3, [r6, #0]
 80129b4:	695c      	ldr	r4, [r3, #20]
 80129b6:	e7c1      	b.n	801293c <rcl_init+0x188>
 80129b8:	20010358 	.word	0x20010358

080129bc <rcl_get_zero_initialized_init_options>:
 80129bc:	2000      	movs	r0, #0
 80129be:	4770      	bx	lr

080129c0 <rcl_init_options_init>:
 80129c0:	b084      	sub	sp, #16
 80129c2:	b570      	push	{r4, r5, r6, lr}
 80129c4:	b09e      	sub	sp, #120	@ 0x78
 80129c6:	ad23      	add	r5, sp, #140	@ 0x8c
 80129c8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80129cc:	2800      	cmp	r0, #0
 80129ce:	d046      	beq.n	8012a5e <rcl_init_options_init+0x9e>
 80129d0:	6803      	ldr	r3, [r0, #0]
 80129d2:	4604      	mov	r4, r0
 80129d4:	b133      	cbz	r3, 80129e4 <rcl_init_options_init+0x24>
 80129d6:	2564      	movs	r5, #100	@ 0x64
 80129d8:	4628      	mov	r0, r5
 80129da:	b01e      	add	sp, #120	@ 0x78
 80129dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129e0:	b004      	add	sp, #16
 80129e2:	4770      	bx	lr
 80129e4:	4628      	mov	r0, r5
 80129e6:	f7fa fb23 	bl	800d030 <rcutils_allocator_is_valid>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d037      	beq.n	8012a5e <rcl_init_options_init+0x9e>
 80129ee:	46ae      	mov	lr, r5
 80129f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80129f4:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80129f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80129fc:	f8de 3000 	ldr.w	r3, [lr]
 8012a00:	f8cc 3000 	str.w	r3, [ip]
 8012a04:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8012a06:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012a08:	2070      	movs	r0, #112	@ 0x70
 8012a0a:	4798      	blx	r3
 8012a0c:	4606      	mov	r6, r0
 8012a0e:	6020      	str	r0, [r4, #0]
 8012a10:	b338      	cbz	r0, 8012a62 <rcl_init_options_init+0xa2>
 8012a12:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8012a16:	4686      	mov	lr, r0
 8012a18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012a20:	f8dc 3000 	ldr.w	r3, [ip]
 8012a24:	f8ce 3000 	str.w	r3, [lr]
 8012a28:	a802      	add	r0, sp, #8
 8012a2a:	f003 f877 	bl	8015b1c <rmw_get_zero_initialized_init_options>
 8012a2e:	2258      	movs	r2, #88	@ 0x58
 8012a30:	a902      	add	r1, sp, #8
 8012a32:	f106 0018 	add.w	r0, r6, #24
 8012a36:	f007 fb5a 	bl	801a0ee <memcpy>
 8012a3a:	ab26      	add	r3, sp, #152	@ 0x98
 8012a3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012a40:	6826      	ldr	r6, [r4, #0]
 8012a42:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012a46:	f106 0018 	add.w	r0, r6, #24
 8012a4a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8012a4e:	f003 fae5 	bl	801601c <rmw_init_options_init>
 8012a52:	4605      	mov	r5, r0
 8012a54:	b938      	cbnz	r0, 8012a66 <rcl_init_options_init+0xa6>
 8012a56:	6823      	ldr	r3, [r4, #0]
 8012a58:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 8012a5c:	e7bc      	b.n	80129d8 <rcl_init_options_init+0x18>
 8012a5e:	250b      	movs	r5, #11
 8012a60:	e7ba      	b.n	80129d8 <rcl_init_options_init+0x18>
 8012a62:	250a      	movs	r5, #10
 8012a64:	e7b8      	b.n	80129d8 <rcl_init_options_init+0x18>
 8012a66:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8012a68:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8012a6a:	6820      	ldr	r0, [r4, #0]
 8012a6c:	4798      	blx	r3
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f7ff fe20 	bl	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012a74:	4605      	mov	r5, r0
 8012a76:	e7af      	b.n	80129d8 <rcl_init_options_init+0x18>

08012a78 <rcl_init_options_fini>:
 8012a78:	b530      	push	{r4, r5, lr}
 8012a7a:	b087      	sub	sp, #28
 8012a7c:	b1f0      	cbz	r0, 8012abc <rcl_init_options_fini+0x44>
 8012a7e:	6803      	ldr	r3, [r0, #0]
 8012a80:	4604      	mov	r4, r0
 8012a82:	b1db      	cbz	r3, 8012abc <rcl_init_options_fini+0x44>
 8012a84:	469c      	mov	ip, r3
 8012a86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a8a:	f10d 0e04 	add.w	lr, sp, #4
 8012a8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012a92:	f8dc 3000 	ldr.w	r3, [ip]
 8012a96:	f8ce 3000 	str.w	r3, [lr]
 8012a9a:	a801      	add	r0, sp, #4
 8012a9c:	f7fa fac8 	bl	800d030 <rcutils_allocator_is_valid>
 8012aa0:	b160      	cbz	r0, 8012abc <rcl_init_options_fini+0x44>
 8012aa2:	6820      	ldr	r0, [r4, #0]
 8012aa4:	3018      	adds	r0, #24
 8012aa6:	f003 fb6b 	bl	8016180 <rmw_init_options_fini>
 8012aaa:	4605      	mov	r5, r0
 8012aac:	b950      	cbnz	r0, 8012ac4 <rcl_init_options_fini+0x4c>
 8012aae:	6820      	ldr	r0, [r4, #0]
 8012ab0:	9b02      	ldr	r3, [sp, #8]
 8012ab2:	9905      	ldr	r1, [sp, #20]
 8012ab4:	4798      	blx	r3
 8012ab6:	4628      	mov	r0, r5
 8012ab8:	b007      	add	sp, #28
 8012aba:	bd30      	pop	{r4, r5, pc}
 8012abc:	250b      	movs	r5, #11
 8012abe:	4628      	mov	r0, r5
 8012ac0:	b007      	add	sp, #28
 8012ac2:	bd30      	pop	{r4, r5, pc}
 8012ac4:	f7ff fdf6 	bl	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012ac8:	4605      	mov	r5, r0
 8012aca:	e7f8      	b.n	8012abe <rcl_init_options_fini+0x46>

08012acc <rcl_init_options_copy>:
 8012acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ace:	b09d      	sub	sp, #116	@ 0x74
 8012ad0:	2800      	cmp	r0, #0
 8012ad2:	d04a      	beq.n	8012b6a <rcl_init_options_copy+0x9e>
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	6800      	ldr	r0, [r0, #0]
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	d046      	beq.n	8012b6a <rcl_init_options_copy+0x9e>
 8012adc:	460d      	mov	r5, r1
 8012ade:	f7fa faa7 	bl	800d030 <rcutils_allocator_is_valid>
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	d041      	beq.n	8012b6a <rcl_init_options_copy+0x9e>
 8012ae6:	2d00      	cmp	r5, #0
 8012ae8:	d03f      	beq.n	8012b6a <rcl_init_options_copy+0x9e>
 8012aea:	682b      	ldr	r3, [r5, #0]
 8012aec:	b11b      	cbz	r3, 8012af6 <rcl_init_options_copy+0x2a>
 8012aee:	2464      	movs	r4, #100	@ 0x64
 8012af0:	4620      	mov	r0, r4
 8012af2:	b01d      	add	sp, #116	@ 0x74
 8012af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012af6:	6826      	ldr	r6, [r4, #0]
 8012af8:	46b6      	mov	lr, r6
 8012afa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012afe:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8012b02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b06:	f8de 3000 	ldr.w	r3, [lr]
 8012b0a:	6837      	ldr	r7, [r6, #0]
 8012b0c:	f8cc 3000 	str.w	r3, [ip]
 8012b10:	4619      	mov	r1, r3
 8012b12:	2070      	movs	r0, #112	@ 0x70
 8012b14:	47b8      	blx	r7
 8012b16:	4606      	mov	r6, r0
 8012b18:	6028      	str	r0, [r5, #0]
 8012b1a:	b350      	cbz	r0, 8012b72 <rcl_init_options_copy+0xa6>
 8012b1c:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8012b20:	4686      	mov	lr, r0
 8012b22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012b2a:	f8dc 3000 	ldr.w	r3, [ip]
 8012b2e:	f8ce 3000 	str.w	r3, [lr]
 8012b32:	4668      	mov	r0, sp
 8012b34:	f002 fff2 	bl	8015b1c <rmw_get_zero_initialized_init_options>
 8012b38:	2258      	movs	r2, #88	@ 0x58
 8012b3a:	4669      	mov	r1, sp
 8012b3c:	f106 0018 	add.w	r0, r6, #24
 8012b40:	f007 fad5 	bl	801a0ee <memcpy>
 8012b44:	6820      	ldr	r0, [r4, #0]
 8012b46:	6829      	ldr	r1, [r5, #0]
 8012b48:	3018      	adds	r0, #24
 8012b4a:	3118      	adds	r1, #24
 8012b4c:	f003 fac8 	bl	80160e0 <rmw_init_options_copy>
 8012b50:	4604      	mov	r4, r0
 8012b52:	2800      	cmp	r0, #0
 8012b54:	d0cc      	beq.n	8012af0 <rcl_init_options_copy+0x24>
 8012b56:	f7fa fa7f 	bl	800d058 <rcutils_get_error_string>
 8012b5a:	f7fa fa95 	bl	800d088 <rcutils_reset_error>
 8012b5e:	4628      	mov	r0, r5
 8012b60:	f7ff ff8a 	bl	8012a78 <rcl_init_options_fini>
 8012b64:	b138      	cbz	r0, 8012b76 <rcl_init_options_copy+0xaa>
 8012b66:	4604      	mov	r4, r0
 8012b68:	e7c2      	b.n	8012af0 <rcl_init_options_copy+0x24>
 8012b6a:	240b      	movs	r4, #11
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	b01d      	add	sp, #116	@ 0x74
 8012b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b72:	240a      	movs	r4, #10
 8012b74:	e7bc      	b.n	8012af0 <rcl_init_options_copy+0x24>
 8012b76:	4620      	mov	r0, r4
 8012b78:	b01d      	add	sp, #116	@ 0x74
 8012b7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012b7e:	f7ff bd99 	b.w	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 8012b82:	bf00      	nop

08012b84 <rcl_get_zero_initialized_node>:
 8012b84:	4a03      	ldr	r2, [pc, #12]	@ (8012b94 <rcl_get_zero_initialized_node+0x10>)
 8012b86:	4603      	mov	r3, r0
 8012b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8012b90:	4618      	mov	r0, r3
 8012b92:	4770      	bx	lr
 8012b94:	0801c83c 	.word	0x0801c83c

08012b98 <rcl_node_init>:
 8012b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9c:	b0ab      	sub	sp, #172	@ 0xac
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8012ba2:	a825      	add	r0, sp, #148	@ 0x94
 8012ba4:	4689      	mov	r9, r1
 8012ba6:	4690      	mov	r8, r2
 8012ba8:	461f      	mov	r7, r3
 8012baa:	f006 f861 	bl	8018c70 <rcl_guard_condition_get_default_options>
 8012bae:	2d00      	cmp	r5, #0
 8012bb0:	f000 80d8 	beq.w	8012d64 <rcl_node_init+0x1cc>
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	f7fa fa3b 	bl	800d030 <rcutils_allocator_is_valid>
 8012bba:	2800      	cmp	r0, #0
 8012bbc:	f000 80d2 	beq.w	8012d64 <rcl_node_init+0x1cc>
 8012bc0:	f1b9 0f00 	cmp.w	r9, #0
 8012bc4:	f000 80ce 	beq.w	8012d64 <rcl_node_init+0x1cc>
 8012bc8:	f1b8 0f00 	cmp.w	r8, #0
 8012bcc:	f000 80ca 	beq.w	8012d64 <rcl_node_init+0x1cc>
 8012bd0:	2c00      	cmp	r4, #0
 8012bd2:	f000 80c7 	beq.w	8012d64 <rcl_node_init+0x1cc>
 8012bd6:	6866      	ldr	r6, [r4, #4]
 8012bd8:	2e00      	cmp	r6, #0
 8012bda:	f040 80ca 	bne.w	8012d72 <rcl_node_init+0x1da>
 8012bde:	2f00      	cmp	r7, #0
 8012be0:	f000 80c0 	beq.w	8012d64 <rcl_node_init+0x1cc>
 8012be4:	4638      	mov	r0, r7
 8012be6:	f7ff fd7f 	bl	80126e8 <rcl_context_is_valid>
 8012bea:	2800      	cmp	r0, #0
 8012bec:	f000 80bf 	beq.w	8012d6e <rcl_node_init+0x1d6>
 8012bf0:	4632      	mov	r2, r6
 8012bf2:	a924      	add	r1, sp, #144	@ 0x90
 8012bf4:	4648      	mov	r0, r9
 8012bf6:	9624      	str	r6, [sp, #144]	@ 0x90
 8012bf8:	f003 f92c 	bl	8015e54 <rmw_validate_node_name>
 8012bfc:	4606      	mov	r6, r0
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	f040 80b1 	bne.w	8012d66 <rcl_node_init+0x1ce>
 8012c04:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8012c06:	2800      	cmp	r0, #0
 8012c08:	f040 8104 	bne.w	8012e14 <rcl_node_init+0x27c>
 8012c0c:	f898 3000 	ldrb.w	r3, [r8]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	f000 80f0 	beq.w	8012df6 <rcl_node_init+0x25e>
 8012c16:	2b2f      	cmp	r3, #47	@ 0x2f
 8012c18:	f000 80b0 	beq.w	8012d7c <rcl_node_init+0x1e4>
 8012c1c:	4b85      	ldr	r3, [pc, #532]	@ (8012e34 <rcl_node_init+0x29c>)
 8012c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012c22:	9302      	str	r3, [sp, #8]
 8012c24:	692b      	ldr	r3, [r5, #16]
 8012c26:	9300      	str	r3, [sp, #0]
 8012c28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012c2c:	9301      	str	r3, [sp, #4]
 8012c2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012c32:	f002 fccf 	bl	80155d4 <rcutils_format_string_limit>
 8012c36:	4680      	mov	r8, r0
 8012c38:	f1b8 0f00 	cmp.w	r8, #0
 8012c3c:	f000 80e8 	beq.w	8012e10 <rcl_node_init+0x278>
 8012c40:	2200      	movs	r2, #0
 8012c42:	a924      	add	r1, sp, #144	@ 0x90
 8012c44:	4640      	mov	r0, r8
 8012c46:	9224      	str	r2, [sp, #144]	@ 0x90
 8012c48:	f003 f8e6 	bl	8015e18 <rmw_validate_namespace>
 8012c4c:	4606      	mov	r6, r0
 8012c4e:	2800      	cmp	r0, #0
 8012c50:	f040 80a4 	bne.w	8012d9c <rcl_node_init+0x204>
 8012c54:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8012c56:	2800      	cmp	r0, #0
 8012c58:	f040 809d 	bne.w	8012d96 <rcl_node_init+0x1fe>
 8012c5c:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8012c60:	2178      	movs	r1, #120	@ 0x78
 8012c62:	2001      	movs	r0, #1
 8012c64:	4798      	blx	r3
 8012c66:	4606      	mov	r6, r0
 8012c68:	6060      	str	r0, [r4, #4]
 8012c6a:	2800      	cmp	r0, #0
 8012c6c:	f000 80d6 	beq.w	8012e1c <rcl_node_init+0x284>
 8012c70:	a80a      	add	r0, sp, #40	@ 0x28
 8012c72:	f000 f92f 	bl	8012ed4 <rcl_node_get_default_options>
 8012c76:	a90a      	add	r1, sp, #40	@ 0x28
 8012c78:	4630      	mov	r0, r6
 8012c7a:	2268      	movs	r2, #104	@ 0x68
 8012c7c:	f007 fa37 	bl	801a0ee <memcpy>
 8012c80:	6861      	ldr	r1, [r4, #4]
 8012c82:	6027      	str	r7, [r4, #0]
 8012c84:	4628      	mov	r0, r5
 8012c86:	f000 f933 	bl	8012ef0 <rcl_node_options_copy>
 8012c8a:	4606      	mov	r6, r0
 8012c8c:	2800      	cmp	r0, #0
 8012c8e:	f040 8085 	bne.w	8012d9c <rcl_node_init+0x204>
 8012c92:	4640      	mov	r0, r8
 8012c94:	f7ed fb1c 	bl	80002d0 <strlen>
 8012c98:	eb08 0300 	add.w	r3, r8, r0
 8012c9c:	6866      	ldr	r6, [r4, #4]
 8012c9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012ca2:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8012ca6:	2b2f      	cmp	r3, #47	@ 0x2f
 8012ca8:	bf0c      	ite	eq
 8012caa:	4b63      	ldreq	r3, [pc, #396]	@ (8012e38 <rcl_node_init+0x2a0>)
 8012cac:	4b63      	ldrne	r3, [pc, #396]	@ (8012e3c <rcl_node_init+0x2a4>)
 8012cae:	9302      	str	r3, [sp, #8]
 8012cb0:	692b      	ldr	r3, [r5, #16]
 8012cb2:	9300      	str	r3, [sp, #0]
 8012cb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012cb8:	9301      	str	r3, [sp, #4]
 8012cba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012cbe:	f002 fc89 	bl	80155d4 <rcutils_format_string_limit>
 8012cc2:	6863      	ldr	r3, [r4, #4]
 8012cc4:	6770      	str	r0, [r6, #116]	@ 0x74
 8012cc6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8012cc8:	2a00      	cmp	r2, #0
 8012cca:	f000 80a9 	beq.w	8012e20 <rcl_node_init+0x288>
 8012cce:	6822      	ldr	r2, [r4, #0]
 8012cd0:	9307      	str	r3, [sp, #28]
 8012cd2:	6810      	ldr	r0, [r2, #0]
 8012cd4:	4649      	mov	r1, r9
 8012cd6:	3028      	adds	r0, #40	@ 0x28
 8012cd8:	4642      	mov	r2, r8
 8012cda:	f003 fce7 	bl	80166ac <rmw_create_node>
 8012cde:	9b07      	ldr	r3, [sp, #28]
 8012ce0:	6698      	str	r0, [r3, #104]	@ 0x68
 8012ce2:	6863      	ldr	r3, [r4, #4]
 8012ce4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012ce6:	2800      	cmp	r0, #0
 8012ce8:	f000 809d 	beq.w	8012e26 <rcl_node_init+0x28e>
 8012cec:	f003 fd70 	bl	80167d0 <rmw_node_get_graph_guard_condition>
 8012cf0:	4681      	mov	r9, r0
 8012cf2:	2800      	cmp	r0, #0
 8012cf4:	f000 809c 	beq.w	8012e30 <rcl_node_init+0x298>
 8012cf8:	682b      	ldr	r3, [r5, #0]
 8012cfa:	6929      	ldr	r1, [r5, #16]
 8012cfc:	6866      	ldr	r6, [r4, #4]
 8012cfe:	2008      	movs	r0, #8
 8012d00:	4798      	blx	r3
 8012d02:	6863      	ldr	r3, [r4, #4]
 8012d04:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8012d06:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8012d0a:	f1ba 0f00 	cmp.w	sl, #0
 8012d0e:	f000 808d 	beq.w	8012e2c <rcl_node_init+0x294>
 8012d12:	f10d 0b20 	add.w	fp, sp, #32
 8012d16:	4658      	mov	r0, fp
 8012d18:	f005 fed2 	bl	8018ac0 <rcl_get_zero_initialized_guard_condition>
 8012d1c:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8012d20:	6863      	ldr	r3, [r4, #4]
 8012d22:	46ac      	mov	ip, r5
 8012d24:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012d28:	e88a 0003 	stmia.w	sl, {r0, r1}
 8012d2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012d30:	ae25      	add	r6, sp, #148	@ 0x94
 8012d32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012d34:	f8dc 3000 	ldr.w	r3, [ip]
 8012d38:	6033      	str	r3, [r6, #0]
 8012d3a:	ab2a      	add	r3, sp, #168	@ 0xa8
 8012d3c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012d40:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012d44:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8012d46:	463a      	mov	r2, r7
 8012d48:	4649      	mov	r1, r9
 8012d4a:	4670      	mov	r0, lr
 8012d4c:	f005 ff0e 	bl	8018b6c <rcl_guard_condition_init_from_rmw>
 8012d50:	4606      	mov	r6, r0
 8012d52:	bb18      	cbnz	r0, 8012d9c <rcl_node_init+0x204>
 8012d54:	686b      	ldr	r3, [r5, #4]
 8012d56:	6929      	ldr	r1, [r5, #16]
 8012d58:	4798      	blx	r3
 8012d5a:	686b      	ldr	r3, [r5, #4]
 8012d5c:	6929      	ldr	r1, [r5, #16]
 8012d5e:	4640      	mov	r0, r8
 8012d60:	4798      	blx	r3
 8012d62:	e000      	b.n	8012d66 <rcl_node_init+0x1ce>
 8012d64:	260b      	movs	r6, #11
 8012d66:	4630      	mov	r0, r6
 8012d68:	b02b      	add	sp, #172	@ 0xac
 8012d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6e:	2665      	movs	r6, #101	@ 0x65
 8012d70:	e7f9      	b.n	8012d66 <rcl_node_init+0x1ce>
 8012d72:	2664      	movs	r6, #100	@ 0x64
 8012d74:	4630      	mov	r0, r6
 8012d76:	b02b      	add	sp, #172	@ 0xac
 8012d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d7c:	f105 030c 	add.w	r3, r5, #12
 8012d80:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012d84:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012d88:	4640      	mov	r0, r8
 8012d8a:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8012d8e:	f002 fd3f 	bl	8015810 <rcutils_strdup>
 8012d92:	4680      	mov	r8, r0
 8012d94:	e750      	b.n	8012c38 <rcl_node_init+0xa0>
 8012d96:	f003 f851 	bl	8015e3c <rmw_namespace_validation_result_string>
 8012d9a:	26ca      	movs	r6, #202	@ 0xca
 8012d9c:	6863      	ldr	r3, [r4, #4]
 8012d9e:	b1f3      	cbz	r3, 8012dde <rcl_node_init+0x246>
 8012da0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012da2:	b138      	cbz	r0, 8012db4 <rcl_node_init+0x21c>
 8012da4:	f005 ff42 	bl	8018c2c <rcl_guard_condition_fini>
 8012da8:	6863      	ldr	r3, [r4, #4]
 8012daa:	6929      	ldr	r1, [r5, #16]
 8012dac:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012dae:	686b      	ldr	r3, [r5, #4]
 8012db0:	4798      	blx	r3
 8012db2:	6863      	ldr	r3, [r4, #4]
 8012db4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8012db6:	b110      	cbz	r0, 8012dbe <rcl_node_init+0x226>
 8012db8:	f003 fc8e 	bl	80166d8 <rmw_destroy_node>
 8012dbc:	6863      	ldr	r3, [r4, #4]
 8012dbe:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8012dc0:	6929      	ldr	r1, [r5, #16]
 8012dc2:	686b      	ldr	r3, [r5, #4]
 8012dc4:	4798      	blx	r3
 8012dc6:	6863      	ldr	r3, [r4, #4]
 8012dc8:	6929      	ldr	r1, [r5, #16]
 8012dca:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012dcc:	686b      	ldr	r3, [r5, #4]
 8012dce:	4798      	blx	r3
 8012dd0:	6860      	ldr	r0, [r4, #4]
 8012dd2:	f000 f8ab 	bl	8012f2c <rcl_node_options_fini>
 8012dd6:	686b      	ldr	r3, [r5, #4]
 8012dd8:	6929      	ldr	r1, [r5, #16]
 8012dda:	6860      	ldr	r0, [r4, #4]
 8012ddc:	4798      	blx	r3
 8012dde:	686b      	ldr	r3, [r5, #4]
 8012de0:	6929      	ldr	r1, [r5, #16]
 8012de2:	2000      	movs	r0, #0
 8012de4:	4798      	blx	r3
 8012de6:	686b      	ldr	r3, [r5, #4]
 8012de8:	6929      	ldr	r1, [r5, #16]
 8012dea:	4640      	mov	r0, r8
 8012dec:	4798      	blx	r3
 8012dee:	2300      	movs	r3, #0
 8012df0:	e9c4 3300 	strd	r3, r3, [r4]
 8012df4:	e7b7      	b.n	8012d66 <rcl_node_init+0x1ce>
 8012df6:	f105 030c 	add.w	r3, r5, #12
 8012dfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012dfe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012e02:	480f      	ldr	r0, [pc, #60]	@ (8012e40 <rcl_node_init+0x2a8>)
 8012e04:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8012e08:	f002 fd02 	bl	8015810 <rcutils_strdup>
 8012e0c:	4680      	mov	r8, r0
 8012e0e:	e713      	b.n	8012c38 <rcl_node_init+0xa0>
 8012e10:	260a      	movs	r6, #10
 8012e12:	e7a8      	b.n	8012d66 <rcl_node_init+0x1ce>
 8012e14:	f003 f86a 	bl	8015eec <rmw_node_name_validation_result_string>
 8012e18:	26c9      	movs	r6, #201	@ 0xc9
 8012e1a:	e7a4      	b.n	8012d66 <rcl_node_init+0x1ce>
 8012e1c:	260a      	movs	r6, #10
 8012e1e:	e7de      	b.n	8012dde <rcl_node_init+0x246>
 8012e20:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012e22:	260a      	movs	r6, #10
 8012e24:	e7bd      	b.n	8012da2 <rcl_node_init+0x20a>
 8012e26:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012e28:	2601      	movs	r6, #1
 8012e2a:	e7ba      	b.n	8012da2 <rcl_node_init+0x20a>
 8012e2c:	260a      	movs	r6, #10
 8012e2e:	e7c1      	b.n	8012db4 <rcl_node_init+0x21c>
 8012e30:	2601      	movs	r6, #1
 8012e32:	e7b3      	b.n	8012d9c <rcl_node_init+0x204>
 8012e34:	0801bd8c 	.word	0x0801bd8c
 8012e38:	0801bbc0 	.word	0x0801bbc0
 8012e3c:	0801bd90 	.word	0x0801bd90
 8012e40:	0801bd88 	.word	0x0801bd88

08012e44 <rcl_node_is_valid>:
 8012e44:	b130      	cbz	r0, 8012e54 <rcl_node_is_valid+0x10>
 8012e46:	6843      	ldr	r3, [r0, #4]
 8012e48:	b123      	cbz	r3, 8012e54 <rcl_node_is_valid+0x10>
 8012e4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012e4c:	b113      	cbz	r3, 8012e54 <rcl_node_is_valid+0x10>
 8012e4e:	6800      	ldr	r0, [r0, #0]
 8012e50:	f7ff bc4a 	b.w	80126e8 <rcl_context_is_valid>
 8012e54:	2000      	movs	r0, #0
 8012e56:	4770      	bx	lr

08012e58 <rcl_node_get_name>:
 8012e58:	b120      	cbz	r0, 8012e64 <rcl_node_get_name+0xc>
 8012e5a:	6840      	ldr	r0, [r0, #4]
 8012e5c:	b110      	cbz	r0, 8012e64 <rcl_node_get_name+0xc>
 8012e5e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012e60:	b100      	cbz	r0, 8012e64 <rcl_node_get_name+0xc>
 8012e62:	6880      	ldr	r0, [r0, #8]
 8012e64:	4770      	bx	lr
 8012e66:	bf00      	nop

08012e68 <rcl_node_get_namespace>:
 8012e68:	b120      	cbz	r0, 8012e74 <rcl_node_get_namespace+0xc>
 8012e6a:	6840      	ldr	r0, [r0, #4]
 8012e6c:	b110      	cbz	r0, 8012e74 <rcl_node_get_namespace+0xc>
 8012e6e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012e70:	b100      	cbz	r0, 8012e74 <rcl_node_get_namespace+0xc>
 8012e72:	68c0      	ldr	r0, [r0, #12]
 8012e74:	4770      	bx	lr
 8012e76:	bf00      	nop

08012e78 <rcl_node_get_options>:
 8012e78:	b128      	cbz	r0, 8012e86 <rcl_node_get_options+0xe>
 8012e7a:	6840      	ldr	r0, [r0, #4]
 8012e7c:	b118      	cbz	r0, 8012e86 <rcl_node_get_options+0xe>
 8012e7e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	bf08      	it	eq
 8012e84:	2000      	moveq	r0, #0
 8012e86:	4770      	bx	lr

08012e88 <rcl_node_get_rmw_handle>:
 8012e88:	b110      	cbz	r0, 8012e90 <rcl_node_get_rmw_handle+0x8>
 8012e8a:	6840      	ldr	r0, [r0, #4]
 8012e8c:	b100      	cbz	r0, 8012e90 <rcl_node_get_rmw_handle+0x8>
 8012e8e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012e90:	4770      	bx	lr
 8012e92:	bf00      	nop

08012e94 <rcl_get_disable_loaned_message>:
 8012e94:	b510      	push	{r4, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	2300      	movs	r3, #0
 8012e9a:	9301      	str	r3, [sp, #4]
 8012e9c:	b1a0      	cbz	r0, 8012ec8 <rcl_get_disable_loaned_message+0x34>
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	a901      	add	r1, sp, #4
 8012ea2:	480b      	ldr	r0, [pc, #44]	@ (8012ed0 <rcl_get_disable_loaned_message+0x3c>)
 8012ea4:	f002 fb7e 	bl	80155a4 <rcutils_get_env>
 8012ea8:	b110      	cbz	r0, 8012eb0 <rcl_get_disable_loaned_message+0x1c>
 8012eaa:	2001      	movs	r0, #1
 8012eac:	b002      	add	sp, #8
 8012eae:	bd10      	pop	{r4, pc}
 8012eb0:	9a01      	ldr	r2, [sp, #4]
 8012eb2:	7813      	ldrb	r3, [r2, #0]
 8012eb4:	3b31      	subs	r3, #49	@ 0x31
 8012eb6:	bf08      	it	eq
 8012eb8:	7853      	ldrbeq	r3, [r2, #1]
 8012eba:	fab3 f383 	clz	r3, r3
 8012ebe:	095b      	lsrs	r3, r3, #5
 8012ec0:	2000      	movs	r0, #0
 8012ec2:	7023      	strb	r3, [r4, #0]
 8012ec4:	b002      	add	sp, #8
 8012ec6:	bd10      	pop	{r4, pc}
 8012ec8:	200b      	movs	r0, #11
 8012eca:	b002      	add	sp, #8
 8012ecc:	bd10      	pop	{r4, pc}
 8012ece:	bf00      	nop
 8012ed0:	0801bd98 	.word	0x0801bd98

08012ed4 <rcl_node_get_default_options>:
 8012ed4:	b510      	push	{r4, lr}
 8012ed6:	2253      	movs	r2, #83	@ 0x53
 8012ed8:	4604      	mov	r4, r0
 8012eda:	2100      	movs	r1, #0
 8012edc:	3015      	adds	r0, #21
 8012ede:	f007 f82b 	bl	8019f38 <memset>
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	f7fa f878 	bl	800cfd8 <rcutils_get_default_allocator>
 8012ee8:	2301      	movs	r3, #1
 8012eea:	7523      	strb	r3, [r4, #20]
 8012eec:	4620      	mov	r0, r4
 8012eee:	bd10      	pop	{r4, pc}

08012ef0 <rcl_node_options_copy>:
 8012ef0:	b1d0      	cbz	r0, 8012f28 <rcl_node_options_copy+0x38>
 8012ef2:	b570      	push	{r4, r5, r6, lr}
 8012ef4:	460c      	mov	r4, r1
 8012ef6:	b1a9      	cbz	r1, 8012f24 <rcl_node_options_copy+0x34>
 8012ef8:	4288      	cmp	r0, r1
 8012efa:	4684      	mov	ip, r0
 8012efc:	d012      	beq.n	8012f24 <rcl_node_options_copy+0x34>
 8012efe:	4605      	mov	r5, r0
 8012f00:	8a86      	ldrh	r6, [r0, #20]
 8012f02:	468e      	mov	lr, r1
 8012f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012f0a:	682b      	ldr	r3, [r5, #0]
 8012f0c:	f8ce 3000 	str.w	r3, [lr]
 8012f10:	f10c 0118 	add.w	r1, ip, #24
 8012f14:	2250      	movs	r2, #80	@ 0x50
 8012f16:	82a6      	strh	r6, [r4, #20]
 8012f18:	f104 0018 	add.w	r0, r4, #24
 8012f1c:	f007 f8e7 	bl	801a0ee <memcpy>
 8012f20:	2000      	movs	r0, #0
 8012f22:	bd70      	pop	{r4, r5, r6, pc}
 8012f24:	200b      	movs	r0, #11
 8012f26:	bd70      	pop	{r4, r5, r6, pc}
 8012f28:	200b      	movs	r0, #11
 8012f2a:	4770      	bx	lr

08012f2c <rcl_node_options_fini>:
 8012f2c:	b1c0      	cbz	r0, 8012f60 <rcl_node_options_fini+0x34>
 8012f2e:	b500      	push	{lr}
 8012f30:	4684      	mov	ip, r0
 8012f32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012f36:	b087      	sub	sp, #28
 8012f38:	f10d 0e04 	add.w	lr, sp, #4
 8012f3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012f40:	f8dc 3000 	ldr.w	r3, [ip]
 8012f44:	f8ce 3000 	str.w	r3, [lr]
 8012f48:	a801      	add	r0, sp, #4
 8012f4a:	f7fa f871 	bl	800d030 <rcutils_allocator_is_valid>
 8012f4e:	b118      	cbz	r0, 8012f58 <rcl_node_options_fini+0x2c>
 8012f50:	2000      	movs	r0, #0
 8012f52:	b007      	add	sp, #28
 8012f54:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f58:	200b      	movs	r0, #11
 8012f5a:	b007      	add	sp, #28
 8012f5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f60:	200b      	movs	r0, #11
 8012f62:	4770      	bx	lr

08012f64 <rcl_node_resolve_name>:
 8012f64:	b082      	sub	sp, #8
 8012f66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f6a:	b091      	sub	sp, #68	@ 0x44
 8012f6c:	ac1a      	add	r4, sp, #104	@ 0x68
 8012f6e:	e884 000c 	stmia.w	r4, {r2, r3}
 8012f72:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012f76:	2800      	cmp	r0, #0
 8012f78:	d03a      	beq.n	8012ff0 <rcl_node_resolve_name+0x8c>
 8012f7a:	460c      	mov	r4, r1
 8012f7c:	4605      	mov	r5, r0
 8012f7e:	f7ff ff7b 	bl	8012e78 <rcl_node_get_options>
 8012f82:	b370      	cbz	r0, 8012fe2 <rcl_node_resolve_name+0x7e>
 8012f84:	4628      	mov	r0, r5
 8012f86:	f7ff ff67 	bl	8012e58 <rcl_node_get_name>
 8012f8a:	4681      	mov	r9, r0
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	f7ff ff6b 	bl	8012e68 <rcl_node_get_namespace>
 8012f92:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012f96:	4607      	mov	r7, r0
 8012f98:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f9c:	ad0b      	add	r5, sp, #44	@ 0x2c
 8012f9e:	46ac      	mov	ip, r5
 8012fa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012fa4:	f8de 3000 	ldr.w	r3, [lr]
 8012fa8:	f8cc 3000 	str.w	r3, [ip]
 8012fac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012fae:	b1fb      	cbz	r3, 8012ff0 <rcl_node_resolve_name+0x8c>
 8012fb0:	468a      	mov	sl, r1
 8012fb2:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012fb6:	f002 fc8b 	bl	80158d0 <rcutils_get_zero_initialized_string_map>
 8012fba:	ab10      	add	r3, sp, #64	@ 0x40
 8012fbc:	9008      	str	r0, [sp, #32]
 8012fbe:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012fc2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012fc6:	2100      	movs	r1, #0
 8012fc8:	e895 000c 	ldmia.w	r5, {r2, r3}
 8012fcc:	a808      	add	r0, sp, #32
 8012fce:	f002 fcd9 	bl	8015984 <rcutils_string_map_init>
 8012fd2:	4606      	mov	r6, r0
 8012fd4:	b170      	cbz	r0, 8012ff4 <rcl_node_resolve_name+0x90>
 8012fd6:	f7fa f83f 	bl	800d058 <rcutils_get_error_string>
 8012fda:	f7fa f855 	bl	800d088 <rcutils_reset_error>
 8012fde:	2e0a      	cmp	r6, #10
 8012fe0:	d000      	beq.n	8012fe4 <rcl_node_resolve_name+0x80>
 8012fe2:	2601      	movs	r6, #1
 8012fe4:	4630      	mov	r0, r6
 8012fe6:	b011      	add	sp, #68	@ 0x44
 8012fe8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fec:	b002      	add	sp, #8
 8012fee:	4770      	bx	lr
 8012ff0:	260b      	movs	r6, #11
 8012ff2:	e7f7      	b.n	8012fe4 <rcl_node_resolve_name+0x80>
 8012ff4:	9009      	str	r0, [sp, #36]	@ 0x24
 8012ff6:	9007      	str	r0, [sp, #28]
 8012ff8:	a808      	add	r0, sp, #32
 8012ffa:	f005 fd5b 	bl	8018ab4 <rcl_get_default_topic_name_substitutions>
 8012ffe:	4606      	mov	r6, r0
 8013000:	b1b0      	cbz	r0, 8013030 <rcl_node_resolve_name+0xcc>
 8013002:	280a      	cmp	r0, #10
 8013004:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8013008:	d000      	beq.n	801300c <rcl_node_resolve_name+0xa8>
 801300a:	2601      	movs	r6, #1
 801300c:	a808      	add	r0, sp, #32
 801300e:	f002 fcf7 	bl	8015a00 <rcutils_string_map_fini>
 8013012:	2800      	cmp	r0, #0
 8013014:	d132      	bne.n	801307c <rcl_node_resolve_name+0x118>
 8013016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013018:	4659      	mov	r1, fp
 801301a:	47d0      	blx	sl
 801301c:	4659      	mov	r1, fp
 801301e:	4648      	mov	r0, r9
 8013020:	47d0      	blx	sl
 8013022:	f1b8 0f00 	cmp.w	r8, #0
 8013026:	d0dd      	beq.n	8012fe4 <rcl_node_resolve_name+0x80>
 8013028:	2e67      	cmp	r6, #103	@ 0x67
 801302a:	bf08      	it	eq
 801302c:	2668      	moveq	r6, #104	@ 0x68
 801302e:	e7d9      	b.n	8012fe4 <rcl_node_resolve_name+0x80>
 8013030:	ab09      	add	r3, sp, #36	@ 0x24
 8013032:	9305      	str	r3, [sp, #20]
 8013034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013036:	46ec      	mov	ip, sp
 8013038:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801303c:	682b      	ldr	r3, [r5, #0]
 801303e:	f8cc 3000 	str.w	r3, [ip]
 8013042:	463a      	mov	r2, r7
 8013044:	4649      	mov	r1, r9
 8013046:	4620      	mov	r0, r4
 8013048:	ab08      	add	r3, sp, #32
 801304a:	f005 fbcd 	bl	80187e8 <rcl_expand_topic_name>
 801304e:	4606      	mov	r6, r0
 8013050:	b9c8      	cbnz	r0, 8013086 <rcl_node_resolve_name+0x122>
 8013052:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8013056:	9009      	str	r0, [sp, #36]	@ 0x24
 8013058:	4602      	mov	r2, r0
 801305a:	a90a      	add	r1, sp, #40	@ 0x28
 801305c:	4648      	mov	r0, r9
 801305e:	f002 fe23 	bl	8015ca8 <rmw_validate_full_topic_name>
 8013062:	b998      	cbnz	r0, 801308c <rcl_node_resolve_name+0x128>
 8013064:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013066:	bb14      	cbnz	r4, 80130ae <rcl_node_resolve_name+0x14a>
 8013068:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801306a:	a808      	add	r0, sp, #32
 801306c:	f8c3 9000 	str.w	r9, [r3]
 8013070:	f002 fcc6 	bl	8015a00 <rcutils_string_map_fini>
 8013074:	4606      	mov	r6, r0
 8013076:	b978      	cbnz	r0, 8013098 <rcl_node_resolve_name+0x134>
 8013078:	4681      	mov	r9, r0
 801307a:	e7cc      	b.n	8013016 <rcl_node_resolve_name+0xb2>
 801307c:	f7f9 ffec 	bl	800d058 <rcutils_get_error_string>
 8013080:	f7fa f802 	bl	800d088 <rcutils_reset_error>
 8013084:	e7c7      	b.n	8013016 <rcl_node_resolve_name+0xb2>
 8013086:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801308a:	e7bf      	b.n	801300c <rcl_node_resolve_name+0xa8>
 801308c:	f7f9 ffe4 	bl	800d058 <rcutils_get_error_string>
 8013090:	2601      	movs	r6, #1
 8013092:	f7f9 fff9 	bl	800d088 <rcutils_reset_error>
 8013096:	e7b9      	b.n	801300c <rcl_node_resolve_name+0xa8>
 8013098:	f7f9 ffde 	bl	800d058 <rcutils_get_error_string>
 801309c:	f7f9 fff4 	bl	800d088 <rcutils_reset_error>
 80130a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80130a2:	4659      	mov	r1, fp
 80130a4:	47d0      	blx	sl
 80130a6:	4659      	mov	r1, fp
 80130a8:	4620      	mov	r0, r4
 80130aa:	47d0      	blx	sl
 80130ac:	e799      	b.n	8012fe2 <rcl_node_resolve_name+0x7e>
 80130ae:	2667      	movs	r6, #103	@ 0x67
 80130b0:	e7ac      	b.n	801300c <rcl_node_resolve_name+0xa8>
 80130b2:	bf00      	nop

080130b4 <rcl_service_get_rmw_handle>:
 80130b4:	b118      	cbz	r0, 80130be <rcl_service_get_rmw_handle+0xa>
 80130b6:	6800      	ldr	r0, [r0, #0]
 80130b8:	b108      	cbz	r0, 80130be <rcl_service_get_rmw_handle+0xa>
 80130ba:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80130be:	4770      	bx	lr

080130c0 <rcl_take_request>:
 80130c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130c2:	468e      	mov	lr, r1
 80130c4:	460c      	mov	r4, r1
 80130c6:	4617      	mov	r7, r2
 80130c8:	4605      	mov	r5, r0
 80130ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80130ce:	b091      	sub	sp, #68	@ 0x44
 80130d0:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 80130d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80130dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80130e0:	b30d      	cbz	r5, 8013126 <rcl_take_request+0x66>
 80130e2:	682b      	ldr	r3, [r5, #0]
 80130e4:	b1fb      	cbz	r3, 8013126 <rcl_take_request+0x66>
 80130e6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80130ea:	b1e0      	cbz	r0, 8013126 <rcl_take_request+0x66>
 80130ec:	b397      	cbz	r7, 8013154 <rcl_take_request+0x94>
 80130ee:	2300      	movs	r3, #0
 80130f0:	f88d 3017 	strb.w	r3, [sp, #23]
 80130f4:	463a      	mov	r2, r7
 80130f6:	f10d 0317 	add.w	r3, sp, #23
 80130fa:	a906      	add	r1, sp, #24
 80130fc:	f003 fbb6 	bl	801686c <rmw_take_request>
 8013100:	4606      	mov	r6, r0
 8013102:	b198      	cbz	r0, 801312c <rcl_take_request+0x6c>
 8013104:	280a      	cmp	r0, #10
 8013106:	bf18      	it	ne
 8013108:	2601      	movne	r6, #1
 801310a:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801310e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013112:	46a6      	mov	lr, r4
 8013114:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013118:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801311c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8013120:	4630      	mov	r0, r6
 8013122:	b011      	add	sp, #68	@ 0x44
 8013124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013126:	f44f 7616 	mov.w	r6, #600	@ 0x258
 801312a:	e7ee      	b.n	801310a <rcl_take_request+0x4a>
 801312c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8013130:	b193      	cbz	r3, 8013158 <rcl_take_request+0x98>
 8013132:	682b      	ldr	r3, [r5, #0]
 8013134:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8013138:	2800      	cmp	r0, #0
 801313a:	d0e6      	beq.n	801310a <rcl_take_request+0x4a>
 801313c:	463a      	mov	r2, r7
 801313e:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8013142:	ab0a      	add	r3, sp, #40	@ 0x28
 8013144:	e9cd 6700 	strd	r6, r7, [sp]
 8013148:	9302      	str	r3, [sp, #8]
 801314a:	2101      	movs	r1, #1
 801314c:	f000 f844 	bl	80131d8 <rcl_send_service_event_message>
 8013150:	4606      	mov	r6, r0
 8013152:	e7da      	b.n	801310a <rcl_take_request+0x4a>
 8013154:	260b      	movs	r6, #11
 8013156:	e7d8      	b.n	801310a <rcl_take_request+0x4a>
 8013158:	f240 2659 	movw	r6, #601	@ 0x259
 801315c:	e7d5      	b.n	801310a <rcl_take_request+0x4a>
 801315e:	bf00      	nop

08013160 <rcl_send_response>:
 8013160:	b350      	cbz	r0, 80131b8 <rcl_send_response+0x58>
 8013162:	b570      	push	{r4, r5, r6, lr}
 8013164:	6803      	ldr	r3, [r0, #0]
 8013166:	b084      	sub	sp, #16
 8013168:	4604      	mov	r4, r0
 801316a:	b1cb      	cbz	r3, 80131a0 <rcl_send_response+0x40>
 801316c:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8013170:	b1b0      	cbz	r0, 80131a0 <rcl_send_response+0x40>
 8013172:	460e      	mov	r6, r1
 8013174:	b1e9      	cbz	r1, 80131b2 <rcl_send_response+0x52>
 8013176:	4615      	mov	r5, r2
 8013178:	b1da      	cbz	r2, 80131b2 <rcl_send_response+0x52>
 801317a:	f003 fbd5 	bl	8016928 <rmw_send_response>
 801317e:	b998      	cbnz	r0, 80131a8 <rcl_send_response+0x48>
 8013180:	6823      	ldr	r3, [r4, #0]
 8013182:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8013186:	b16b      	cbz	r3, 80131a4 <rcl_send_response+0x44>
 8013188:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 801318c:	462a      	mov	r2, r5
 801318e:	e9cd 0100 	strd	r0, r1, [sp]
 8013192:	9602      	str	r6, [sp, #8]
 8013194:	2102      	movs	r1, #2
 8013196:	4618      	mov	r0, r3
 8013198:	f000 f81e 	bl	80131d8 <rcl_send_service_event_message>
 801319c:	b004      	add	sp, #16
 801319e:	bd70      	pop	{r4, r5, r6, pc}
 80131a0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80131a4:	b004      	add	sp, #16
 80131a6:	bd70      	pop	{r4, r5, r6, pc}
 80131a8:	2802      	cmp	r0, #2
 80131aa:	bf18      	it	ne
 80131ac:	2001      	movne	r0, #1
 80131ae:	b004      	add	sp, #16
 80131b0:	bd70      	pop	{r4, r5, r6, pc}
 80131b2:	200b      	movs	r0, #11
 80131b4:	b004      	add	sp, #16
 80131b6:	bd70      	pop	{r4, r5, r6, pc}
 80131b8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80131bc:	4770      	bx	lr
 80131be:	bf00      	nop

080131c0 <rcl_service_is_valid>:
 80131c0:	b130      	cbz	r0, 80131d0 <rcl_service_is_valid+0x10>
 80131c2:	6800      	ldr	r0, [r0, #0]
 80131c4:	b120      	cbz	r0, 80131d0 <rcl_service_is_valid+0x10>
 80131c6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80131ca:	3800      	subs	r0, #0
 80131cc:	bf18      	it	ne
 80131ce:	2001      	movne	r0, #1
 80131d0:	4770      	bx	lr
 80131d2:	bf00      	nop
 80131d4:	0000      	movs	r0, r0
	...

080131d8 <rcl_send_service_event_message>:
 80131d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131da:	b093      	sub	sp, #76	@ 0x4c
 80131dc:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80131de:	b17a      	cbz	r2, 8013200 <rcl_send_service_event_message+0x28>
 80131e0:	b176      	cbz	r6, 8013200 <rcl_send_service_event_message+0x28>
 80131e2:	4604      	mov	r4, r0
 80131e4:	b150      	cbz	r0, 80131fc <rcl_send_service_event_message+0x24>
 80131e6:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80131ea:	b13b      	cbz	r3, 80131fc <rcl_send_service_event_message+0x24>
 80131ec:	68c0      	ldr	r0, [r0, #12]
 80131ee:	460f      	mov	r7, r1
 80131f0:	4615      	mov	r5, r2
 80131f2:	f000 f9bb 	bl	801356c <rcl_clock_valid>
 80131f6:	b108      	cbz	r0, 80131fc <rcl_send_service_event_message+0x24>
 80131f8:	7a23      	ldrb	r3, [r4, #8]
 80131fa:	b92b      	cbnz	r3, 8013208 <rcl_send_service_event_message+0x30>
 80131fc:	2501      	movs	r5, #1
 80131fe:	e000      	b.n	8013202 <rcl_send_service_event_message+0x2a>
 8013200:	250b      	movs	r5, #11
 8013202:	4628      	mov	r0, r5
 8013204:	b013      	add	sp, #76	@ 0x4c
 8013206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013208:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 801320c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013210:	f10d 0c0c 	add.w	ip, sp, #12
 8013214:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013218:	f8de 3000 	ldr.w	r3, [lr]
 801321c:	f8cc 3000 	str.w	r3, [ip]
 8013220:	a803      	add	r0, sp, #12
 8013222:	f7f9 ff05 	bl	800d030 <rcutils_allocator_is_valid>
 8013226:	2800      	cmp	r0, #0
 8013228:	d0ea      	beq.n	8013200 <rcl_send_service_event_message+0x28>
 801322a:	6820      	ldr	r0, [r4, #0]
 801322c:	f7f8 ff9a 	bl	800c164 <rcl_publisher_is_valid>
 8013230:	2800      	cmp	r0, #0
 8013232:	d045      	beq.n	80132c0 <rcl_send_service_event_message+0xe8>
 8013234:	4669      	mov	r1, sp
 8013236:	68e0      	ldr	r0, [r4, #12]
 8013238:	f000 fa10 	bl	801365c <rcl_clock_get_now>
 801323c:	4601      	mov	r1, r0
 801323e:	2800      	cmp	r0, #0
 8013240:	d13b      	bne.n	80132ba <rcl_send_service_event_message+0xe2>
 8013242:	2220      	movs	r2, #32
 8013244:	eb0d 0002 	add.w	r0, sp, r2
 8013248:	f006 fe76 	bl	8019f38 <memset>
 801324c:	a324      	add	r3, pc, #144	@ (adr r3, 80132e0 <rcl_send_service_event_message+0x108>)
 801324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013252:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013256:	f88d 7020 	strb.w	r7, [sp, #32]
 801325a:	f7ed fc27 	bl	8000aac <__aeabi_ldivmod>
 801325e:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 8013262:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 8013266:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801326a:	7a23      	ldrb	r3, [r4, #8]
 801326c:	6830      	ldr	r0, [r6, #0]
 801326e:	6871      	ldr	r1, [r6, #4]
 8013270:	68b2      	ldr	r2, [r6, #8]
 8013272:	2b01      	cmp	r3, #1
 8013274:	68f3      	ldr	r3, [r6, #12]
 8013276:	bf08      	it	eq
 8013278:	2500      	moveq	r5, #0
 801327a:	ae0b      	add	r6, sp, #44	@ 0x2c
 801327c:	2f01      	cmp	r7, #1
 801327e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013280:	d821      	bhi.n	80132c6 <rcl_send_service_event_message+0xee>
 8013282:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8013286:	462a      	mov	r2, r5
 8013288:	a808      	add	r0, sp, #32
 801328a:	699d      	ldr	r5, [r3, #24]
 801328c:	a903      	add	r1, sp, #12
 801328e:	2300      	movs	r3, #0
 8013290:	47a8      	blx	r5
 8013292:	4606      	mov	r6, r0
 8013294:	2e00      	cmp	r6, #0
 8013296:	d0b1      	beq.n	80131fc <rcl_send_service_event_message+0x24>
 8013298:	4631      	mov	r1, r6
 801329a:	6820      	ldr	r0, [r4, #0]
 801329c:	2200      	movs	r2, #0
 801329e:	f7f8 ff3b 	bl	800c118 <rcl_publish>
 80132a2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80132a6:	4605      	mov	r5, r0
 80132a8:	69db      	ldr	r3, [r3, #28]
 80132aa:	a903      	add	r1, sp, #12
 80132ac:	4630      	mov	r0, r6
 80132ae:	4798      	blx	r3
 80132b0:	2d00      	cmp	r5, #0
 80132b2:	d0a6      	beq.n	8013202 <rcl_send_service_event_message+0x2a>
 80132b4:	f7f9 fee8 	bl	800d088 <rcutils_reset_error>
 80132b8:	e7a3      	b.n	8013202 <rcl_send_service_event_message+0x2a>
 80132ba:	f7f9 fee5 	bl	800d088 <rcutils_reset_error>
 80132be:	e79d      	b.n	80131fc <rcl_send_service_event_message+0x24>
 80132c0:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80132c4:	e79d      	b.n	8013202 <rcl_send_service_event_message+0x2a>
 80132c6:	1eb9      	subs	r1, r7, #2
 80132c8:	2901      	cmp	r1, #1
 80132ca:	d8f6      	bhi.n	80132ba <rcl_send_service_event_message+0xe2>
 80132cc:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80132d0:	462b      	mov	r3, r5
 80132d2:	a808      	add	r0, sp, #32
 80132d4:	6995      	ldr	r5, [r2, #24]
 80132d6:	a903      	add	r1, sp, #12
 80132d8:	2200      	movs	r2, #0
 80132da:	47a8      	blx	r5
 80132dc:	4606      	mov	r6, r0
 80132de:	e7d9      	b.n	8013294 <rcl_send_service_event_message+0xbc>
 80132e0:	3b9aca00 	.word	0x3b9aca00
 80132e4:	00000000 	.word	0x00000000

080132e8 <rcl_get_zero_initialized_subscription>:
 80132e8:	4b01      	ldr	r3, [pc, #4]	@ (80132f0 <rcl_get_zero_initialized_subscription+0x8>)
 80132ea:	6818      	ldr	r0, [r3, #0]
 80132ec:	4770      	bx	lr
 80132ee:	bf00      	nop
 80132f0:	0801c844 	.word	0x0801c844

080132f4 <rcl_subscription_init>:
 80132f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132f8:	b089      	sub	sp, #36	@ 0x24
 80132fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80132fc:	b1d6      	cbz	r6, 8013334 <rcl_subscription_init+0x40>
 80132fe:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8013302:	4604      	mov	r4, r0
 8013304:	4648      	mov	r0, r9
 8013306:	460d      	mov	r5, r1
 8013308:	4690      	mov	r8, r2
 801330a:	461f      	mov	r7, r3
 801330c:	f7f9 fe90 	bl	800d030 <rcutils_allocator_is_valid>
 8013310:	b180      	cbz	r0, 8013334 <rcl_subscription_init+0x40>
 8013312:	b17c      	cbz	r4, 8013334 <rcl_subscription_init+0x40>
 8013314:	4628      	mov	r0, r5
 8013316:	f7ff fd95 	bl	8012e44 <rcl_node_is_valid>
 801331a:	2800      	cmp	r0, #0
 801331c:	d054      	beq.n	80133c8 <rcl_subscription_init+0xd4>
 801331e:	f1b8 0f00 	cmp.w	r8, #0
 8013322:	d007      	beq.n	8013334 <rcl_subscription_init+0x40>
 8013324:	b137      	cbz	r7, 8013334 <rcl_subscription_init+0x40>
 8013326:	6823      	ldr	r3, [r4, #0]
 8013328:	b14b      	cbz	r3, 801333e <rcl_subscription_init+0x4a>
 801332a:	2764      	movs	r7, #100	@ 0x64
 801332c:	4638      	mov	r0, r7
 801332e:	b009      	add	sp, #36	@ 0x24
 8013330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013334:	270b      	movs	r7, #11
 8013336:	4638      	mov	r0, r7
 8013338:	b009      	add	sp, #36	@ 0x24
 801333a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801333e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8013342:	aa07      	add	r2, sp, #28
 8013344:	9205      	str	r2, [sp, #20]
 8013346:	9307      	str	r3, [sp, #28]
 8013348:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801334c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013350:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013354:	4639      	mov	r1, r7
 8013356:	e899 000c 	ldmia.w	r9, {r2, r3}
 801335a:	4628      	mov	r0, r5
 801335c:	f7ff fe02 	bl	8012f64 <rcl_node_resolve_name>
 8013360:	4607      	mov	r7, r0
 8013362:	2800      	cmp	r0, #0
 8013364:	d15f      	bne.n	8013426 <rcl_subscription_init+0x132>
 8013366:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801336a:	21d0      	movs	r1, #208	@ 0xd0
 801336c:	2001      	movs	r0, #1
 801336e:	4798      	blx	r3
 8013370:	6020      	str	r0, [r4, #0]
 8013372:	2800      	cmp	r0, #0
 8013374:	d05d      	beq.n	8013432 <rcl_subscription_init+0x13e>
 8013376:	2278      	movs	r2, #120	@ 0x78
 8013378:	4631      	mov	r1, r6
 801337a:	f006 feb8 	bl	801a0ee <memcpy>
 801337e:	4628      	mov	r0, r5
 8013380:	f7ff fd82 	bl	8012e88 <rcl_node_get_rmw_handle>
 8013384:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8013388:	9300      	str	r3, [sp, #0]
 801338a:	9a07      	ldr	r2, [sp, #28]
 801338c:	6827      	ldr	r7, [r4, #0]
 801338e:	4641      	mov	r1, r8
 8013390:	4633      	mov	r3, r6
 8013392:	f003 fbb1 	bl	8016af8 <rmw_create_subscription>
 8013396:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 801339a:	6827      	ldr	r7, [r4, #0]
 801339c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80133a0:	b338      	cbz	r0, 80133f2 <rcl_subscription_init+0xfe>
 80133a2:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80133a6:	f003 fc87 	bl	8016cb8 <rmw_subscription_get_actual_qos>
 80133aa:	4607      	mov	r7, r0
 80133ac:	b988      	cbnz	r0, 80133d2 <rcl_subscription_init+0xde>
 80133ae:	6823      	ldr	r3, [r4, #0]
 80133b0:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 80133b4:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 80133b8:	9807      	ldr	r0, [sp, #28]
 80133ba:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80133bc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80133be:	4798      	blx	r3
 80133c0:	4638      	mov	r0, r7
 80133c2:	b009      	add	sp, #36	@ 0x24
 80133c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133c8:	27c8      	movs	r7, #200	@ 0xc8
 80133ca:	4638      	mov	r0, r7
 80133cc:	b009      	add	sp, #36	@ 0x24
 80133ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133d2:	6827      	ldr	r7, [r4, #0]
 80133d4:	b32f      	cbz	r7, 8013422 <rcl_subscription_init+0x12e>
 80133d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80133da:	b153      	cbz	r3, 80133f2 <rcl_subscription_init+0xfe>
 80133dc:	4628      	mov	r0, r5
 80133de:	f7ff fd53 	bl	8012e88 <rcl_node_get_rmw_handle>
 80133e2:	6823      	ldr	r3, [r4, #0]
 80133e4:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 80133e8:	f003 fc74 	bl	8016cd4 <rmw_destroy_subscription>
 80133ec:	6827      	ldr	r7, [r4, #0]
 80133ee:	4638      	mov	r0, r7
 80133f0:	b197      	cbz	r7, 8013418 <rcl_subscription_init+0x124>
 80133f2:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80133f6:	4628      	mov	r0, r5
 80133f8:	f7f9 fe1a 	bl	800d030 <rcutils_allocator_is_valid>
 80133fc:	b1e8      	cbz	r0, 801343a <rcl_subscription_init+0x146>
 80133fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013400:	b1d8      	cbz	r0, 801343a <rcl_subscription_init+0x146>
 8013402:	4629      	mov	r1, r5
 8013404:	f002 fb94 	bl	8015b30 <rmw_subscription_content_filter_options_fini>
 8013408:	4605      	mov	r5, r0
 801340a:	b9a0      	cbnz	r0, 8013436 <rcl_subscription_init+0x142>
 801340c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801340e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013410:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013412:	4798      	blx	r3
 8013414:	6820      	ldr	r0, [r4, #0]
 8013416:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8013418:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801341a:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801341c:	4798      	blx	r3
 801341e:	2300      	movs	r3, #0
 8013420:	6023      	str	r3, [r4, #0]
 8013422:	2701      	movs	r7, #1
 8013424:	e7c8      	b.n	80133b8 <rcl_subscription_init+0xc4>
 8013426:	2867      	cmp	r0, #103	@ 0x67
 8013428:	d0c6      	beq.n	80133b8 <rcl_subscription_init+0xc4>
 801342a:	2869      	cmp	r0, #105	@ 0x69
 801342c:	d007      	beq.n	801343e <rcl_subscription_init+0x14a>
 801342e:	280a      	cmp	r0, #10
 8013430:	d1f7      	bne.n	8013422 <rcl_subscription_init+0x12e>
 8013432:	270a      	movs	r7, #10
 8013434:	e7c0      	b.n	80133b8 <rcl_subscription_init+0xc4>
 8013436:	f7ff f93d 	bl	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 801343a:	6820      	ldr	r0, [r4, #0]
 801343c:	e7ec      	b.n	8013418 <rcl_subscription_init+0x124>
 801343e:	2767      	movs	r7, #103	@ 0x67
 8013440:	e7ba      	b.n	80133b8 <rcl_subscription_init+0xc4>
 8013442:	bf00      	nop

08013444 <rcl_subscription_get_default_options>:
 8013444:	b510      	push	{r4, lr}
 8013446:	4907      	ldr	r1, [pc, #28]	@ (8013464 <rcl_subscription_get_default_options+0x20>)
 8013448:	4604      	mov	r4, r0
 801344a:	2250      	movs	r2, #80	@ 0x50
 801344c:	f006 fe4f 	bl	801a0ee <memcpy>
 8013450:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013454:	f7f9 fdc0 	bl	800cfd8 <rcutils_get_default_allocator>
 8013458:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 801345c:	f002 fb82 	bl	8015b64 <rmw_get_default_subscription_options>
 8013460:	4620      	mov	r0, r4
 8013462:	bd10      	pop	{r4, pc}
 8013464:	0801c848 	.word	0x0801c848

08013468 <rcl_take>:
 8013468:	2800      	cmp	r0, #0
 801346a:	d04b      	beq.n	8013504 <rcl_take+0x9c>
 801346c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013470:	4615      	mov	r5, r2
 8013472:	6802      	ldr	r2, [r0, #0]
 8013474:	b0a0      	sub	sp, #128	@ 0x80
 8013476:	4604      	mov	r4, r0
 8013478:	2a00      	cmp	r2, #0
 801347a:	d03b      	beq.n	80134f4 <rcl_take+0x8c>
 801347c:	461f      	mov	r7, r3
 801347e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 8013482:	2b00      	cmp	r3, #0
 8013484:	d036      	beq.n	80134f4 <rcl_take+0x8c>
 8013486:	460e      	mov	r6, r1
 8013488:	2900      	cmp	r1, #0
 801348a:	d039      	beq.n	8013500 <rcl_take+0x98>
 801348c:	2d00      	cmp	r5, #0
 801348e:	d03d      	beq.n	801350c <rcl_take+0xa4>
 8013490:	a802      	add	r0, sp, #8
 8013492:	f002 fbf3 	bl	8015c7c <rmw_get_zero_initialized_message_info>
 8013496:	6823      	ldr	r3, [r4, #0]
 8013498:	f10d 0c08 	add.w	ip, sp, #8
 801349c:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 80134a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134a4:	46ae      	mov	lr, r5
 80134a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80134aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80134b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80134b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80134ba:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80134be:	462b      	mov	r3, r5
 80134c0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80134c4:	f04f 0800 	mov.w	r8, #0
 80134c8:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 80134cc:	4631      	mov	r1, r6
 80134ce:	4620      	mov	r0, r4
 80134d0:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 80134d4:	9700      	str	r7, [sp, #0]
 80134d6:	f003 fc5d 	bl	8016d94 <rmw_take_with_info>
 80134da:	4603      	mov	r3, r0
 80134dc:	b9c0      	cbnz	r0, 8013510 <rcl_take+0xa8>
 80134de:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 80134e2:	f240 1291 	movw	r2, #401	@ 0x191
 80134e6:	2900      	cmp	r1, #0
 80134e8:	bf08      	it	eq
 80134ea:	4613      	moveq	r3, r2
 80134ec:	4618      	mov	r0, r3
 80134ee:	b020      	add	sp, #128	@ 0x80
 80134f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80134f8:	4618      	mov	r0, r3
 80134fa:	b020      	add	sp, #128	@ 0x80
 80134fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013500:	230b      	movs	r3, #11
 8013502:	e7f3      	b.n	80134ec <rcl_take+0x84>
 8013504:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8013508:	4618      	mov	r0, r3
 801350a:	4770      	bx	lr
 801350c:	ad12      	add	r5, sp, #72	@ 0x48
 801350e:	e7bf      	b.n	8013490 <rcl_take+0x28>
 8013510:	f7ff f8d0 	bl	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 8013514:	4603      	mov	r3, r0
 8013516:	e7e9      	b.n	80134ec <rcl_take+0x84>

08013518 <rcl_subscription_get_rmw_handle>:
 8013518:	b118      	cbz	r0, 8013522 <rcl_subscription_get_rmw_handle+0xa>
 801351a:	6800      	ldr	r0, [r0, #0]
 801351c:	b108      	cbz	r0, 8013522 <rcl_subscription_get_rmw_handle+0xa>
 801351e:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8013522:	4770      	bx	lr

08013524 <rcl_subscription_is_valid>:
 8013524:	b130      	cbz	r0, 8013534 <rcl_subscription_is_valid+0x10>
 8013526:	6800      	ldr	r0, [r0, #0]
 8013528:	b120      	cbz	r0, 8013534 <rcl_subscription_is_valid+0x10>
 801352a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 801352e:	3800      	subs	r0, #0
 8013530:	bf18      	it	ne
 8013532:	2001      	movne	r0, #1
 8013534:	4770      	bx	lr
 8013536:	bf00      	nop

08013538 <rcl_get_system_time>:
 8013538:	4608      	mov	r0, r1
 801353a:	f7f9 bdc1 	b.w	800d0c0 <rcutils_system_time_now>
 801353e:	bf00      	nop

08013540 <rcl_get_steady_time>:
 8013540:	4608      	mov	r0, r1
 8013542:	f7f9 bde7 	b.w	800d114 <rcutils_steady_time_now>
 8013546:	bf00      	nop

08013548 <rcl_get_ros_time>:
 8013548:	7a03      	ldrb	r3, [r0, #8]
 801354a:	b510      	push	{r4, lr}
 801354c:	460c      	mov	r4, r1
 801354e:	b143      	cbz	r3, 8013562 <rcl_get_ros_time+0x1a>
 8013550:	2105      	movs	r1, #5
 8013552:	f001 ff81 	bl	8015458 <__atomic_load_8>
 8013556:	4602      	mov	r2, r0
 8013558:	460b      	mov	r3, r1
 801355a:	e9c4 2300 	strd	r2, r3, [r4]
 801355e:	2000      	movs	r0, #0
 8013560:	bd10      	pop	{r4, pc}
 8013562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013566:	4608      	mov	r0, r1
 8013568:	f7f9 bdaa 	b.w	800d0c0 <rcutils_system_time_now>

0801356c <rcl_clock_valid>:
 801356c:	b138      	cbz	r0, 801357e <rcl_clock_valid+0x12>
 801356e:	7803      	ldrb	r3, [r0, #0]
 8013570:	b123      	cbz	r3, 801357c <rcl_clock_valid+0x10>
 8013572:	68c0      	ldr	r0, [r0, #12]
 8013574:	3800      	subs	r0, #0
 8013576:	bf18      	it	ne
 8013578:	2001      	movne	r0, #1
 801357a:	4770      	bx	lr
 801357c:	4618      	mov	r0, r3
 801357e:	4770      	bx	lr

08013580 <rcl_clock_init>:
 8013580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013582:	4605      	mov	r5, r0
 8013584:	4610      	mov	r0, r2
 8013586:	4614      	mov	r4, r2
 8013588:	460e      	mov	r6, r1
 801358a:	f7f9 fd51 	bl	800d030 <rcutils_allocator_is_valid>
 801358e:	b128      	cbz	r0, 801359c <rcl_clock_init+0x1c>
 8013590:	2d03      	cmp	r5, #3
 8013592:	d803      	bhi.n	801359c <rcl_clock_init+0x1c>
 8013594:	e8df f005 	tbb	[pc, r5]
 8013598:	044c291a 	.word	0x044c291a
 801359c:	200b      	movs	r0, #11
 801359e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135a0:	2e00      	cmp	r6, #0
 80135a2:	d0fb      	beq.n	801359c <rcl_clock_init+0x1c>
 80135a4:	2c00      	cmp	r4, #0
 80135a6:	d0f9      	beq.n	801359c <rcl_clock_init+0x1c>
 80135a8:	2300      	movs	r3, #0
 80135aa:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80135ae:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8013654 <rcl_clock_init+0xd4>
 80135b2:	6133      	str	r3, [r6, #16]
 80135b4:	f106 0514 	add.w	r5, r6, #20
 80135b8:	2703      	movs	r7, #3
 80135ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80135be:	6823      	ldr	r3, [r4, #0]
 80135c0:	602b      	str	r3, [r5, #0]
 80135c2:	f8c6 c00c 	str.w	ip, [r6, #12]
 80135c6:	7037      	strb	r7, [r6, #0]
 80135c8:	2000      	movs	r0, #0
 80135ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135cc:	2e00      	cmp	r6, #0
 80135ce:	d0e5      	beq.n	801359c <rcl_clock_init+0x1c>
 80135d0:	2300      	movs	r3, #0
 80135d2:	7033      	strb	r3, [r6, #0]
 80135d4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80135d8:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80135dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135de:	f106 0514 	add.w	r5, r6, #20
 80135e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80135e4:	6823      	ldr	r3, [r4, #0]
 80135e6:	602b      	str	r3, [r5, #0]
 80135e8:	e7ee      	b.n	80135c8 <rcl_clock_init+0x48>
 80135ea:	2e00      	cmp	r6, #0
 80135ec:	d0d6      	beq.n	801359c <rcl_clock_init+0x1c>
 80135ee:	2c00      	cmp	r4, #0
 80135f0:	d0d4      	beq.n	801359c <rcl_clock_init+0x1c>
 80135f2:	2700      	movs	r7, #0
 80135f4:	7037      	strb	r7, [r6, #0]
 80135f6:	46a4      	mov	ip, r4
 80135f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135fc:	f106 0514 	add.w	r5, r6, #20
 8013600:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8013604:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8013608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801360a:	f8dc 3000 	ldr.w	r3, [ip]
 801360e:	602b      	str	r3, [r5, #0]
 8013610:	6921      	ldr	r1, [r4, #16]
 8013612:	6823      	ldr	r3, [r4, #0]
 8013614:	2010      	movs	r0, #16
 8013616:	4798      	blx	r3
 8013618:	6130      	str	r0, [r6, #16]
 801361a:	b1b8      	cbz	r0, 801364c <rcl_clock_init+0xcc>
 801361c:	2200      	movs	r2, #0
 801361e:	2300      	movs	r3, #0
 8013620:	e9c0 2300 	strd	r2, r3, [r0]
 8013624:	4a0a      	ldr	r2, [pc, #40]	@ (8013650 <rcl_clock_init+0xd0>)
 8013626:	7207      	strb	r7, [r0, #8]
 8013628:	2301      	movs	r3, #1
 801362a:	60f2      	str	r2, [r6, #12]
 801362c:	7033      	strb	r3, [r6, #0]
 801362e:	e7cb      	b.n	80135c8 <rcl_clock_init+0x48>
 8013630:	2e00      	cmp	r6, #0
 8013632:	d0b3      	beq.n	801359c <rcl_clock_init+0x1c>
 8013634:	2c00      	cmp	r4, #0
 8013636:	d0b1      	beq.n	801359c <rcl_clock_init+0x1c>
 8013638:	2300      	movs	r3, #0
 801363a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801363e:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8013658 <rcl_clock_init+0xd8>
 8013642:	6133      	str	r3, [r6, #16]
 8013644:	f106 0514 	add.w	r5, r6, #20
 8013648:	2702      	movs	r7, #2
 801364a:	e7b6      	b.n	80135ba <rcl_clock_init+0x3a>
 801364c:	200a      	movs	r0, #10
 801364e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013650:	08013549 	.word	0x08013549
 8013654:	08013541 	.word	0x08013541
 8013658:	08013539 	.word	0x08013539

0801365c <rcl_clock_get_now>:
 801365c:	b140      	cbz	r0, 8013670 <rcl_clock_get_now+0x14>
 801365e:	b139      	cbz	r1, 8013670 <rcl_clock_get_now+0x14>
 8013660:	7803      	ldrb	r3, [r0, #0]
 8013662:	b11b      	cbz	r3, 801366c <rcl_clock_get_now+0x10>
 8013664:	68c3      	ldr	r3, [r0, #12]
 8013666:	b10b      	cbz	r3, 801366c <rcl_clock_get_now+0x10>
 8013668:	6900      	ldr	r0, [r0, #16]
 801366a:	4718      	bx	r3
 801366c:	2001      	movs	r0, #1
 801366e:	4770      	bx	lr
 8013670:	200b      	movs	r0, #11
 8013672:	4770      	bx	lr

08013674 <rcl_is_enabled_ros_time_override>:
 8013674:	b158      	cbz	r0, 801368e <rcl_is_enabled_ros_time_override+0x1a>
 8013676:	b151      	cbz	r1, 801368e <rcl_is_enabled_ros_time_override+0x1a>
 8013678:	7803      	ldrb	r3, [r0, #0]
 801367a:	2b01      	cmp	r3, #1
 801367c:	d105      	bne.n	801368a <rcl_is_enabled_ros_time_override+0x16>
 801367e:	6902      	ldr	r2, [r0, #16]
 8013680:	b11a      	cbz	r2, 801368a <rcl_is_enabled_ros_time_override+0x16>
 8013682:	7a13      	ldrb	r3, [r2, #8]
 8013684:	700b      	strb	r3, [r1, #0]
 8013686:	2000      	movs	r0, #0
 8013688:	4770      	bx	lr
 801368a:	2001      	movs	r0, #1
 801368c:	4770      	bx	lr
 801368e:	200b      	movs	r0, #11
 8013690:	4770      	bx	lr
 8013692:	bf00      	nop

08013694 <rcl_clock_add_jump_callback>:
 8013694:	b082      	sub	sp, #8
 8013696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801369a:	a906      	add	r1, sp, #24
 801369c:	e881 000c 	stmia.w	r1, {r2, r3}
 80136a0:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 80136a4:	b320      	cbz	r0, 80136f0 <rcl_clock_add_jump_callback+0x5c>
 80136a6:	4605      	mov	r5, r0
 80136a8:	3014      	adds	r0, #20
 80136aa:	f7f9 fcc1 	bl	800d030 <rcutils_allocator_is_valid>
 80136ae:	b1f8      	cbz	r0, 80136f0 <rcl_clock_add_jump_callback+0x5c>
 80136b0:	b1f7      	cbz	r7, 80136f0 <rcl_clock_add_jump_callback+0x5c>
 80136b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	db1b      	blt.n	80136f0 <rcl_clock_add_jump_callback+0x5c>
 80136b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80136bc:	2a01      	cmp	r2, #1
 80136be:	f173 0300 	sbcs.w	r3, r3, #0
 80136c2:	da15      	bge.n	80136f0 <rcl_clock_add_jump_callback+0x5c>
 80136c4:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 80136c8:	2c00      	cmp	r4, #0
 80136ca:	d042      	beq.n	8013752 <rcl_clock_add_jump_callback+0xbe>
 80136cc:	4603      	mov	r3, r0
 80136ce:	2200      	movs	r2, #0
 80136d0:	e003      	b.n	80136da <rcl_clock_add_jump_callback+0x46>
 80136d2:	4294      	cmp	r4, r2
 80136d4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80136d8:	d011      	beq.n	80136fe <rcl_clock_add_jump_callback+0x6a>
 80136da:	6819      	ldr	r1, [r3, #0]
 80136dc:	42b9      	cmp	r1, r7
 80136de:	f102 0201 	add.w	r2, r2, #1
 80136e2:	d1f6      	bne.n	80136d2 <rcl_clock_add_jump_callback+0x3e>
 80136e4:	6a19      	ldr	r1, [r3, #32]
 80136e6:	42b1      	cmp	r1, r6
 80136e8:	d1f3      	bne.n	80136d2 <rcl_clock_add_jump_callback+0x3e>
 80136ea:	f04f 0e01 	mov.w	lr, #1
 80136ee:	e001      	b.n	80136f4 <rcl_clock_add_jump_callback+0x60>
 80136f0:	f04f 0e0b 	mov.w	lr, #11
 80136f4:	4670      	mov	r0, lr
 80136f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136fa:	b002      	add	sp, #8
 80136fc:	4770      	bx	lr
 80136fe:	3401      	adds	r4, #1
 8013700:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8013704:	00e1      	lsls	r1, r4, #3
 8013706:	69eb      	ldr	r3, [r5, #28]
 8013708:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801370a:	4798      	blx	r3
 801370c:	b1f0      	cbz	r0, 801374c <rcl_clock_add_jump_callback+0xb8>
 801370e:	68ab      	ldr	r3, [r5, #8]
 8013710:	6068      	str	r0, [r5, #4]
 8013712:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8013716:	f10d 0c18 	add.w	ip, sp, #24
 801371a:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 801371e:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 8013722:	f103 0801 	add.w	r8, r3, #1
 8013726:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801372a:	f104 0708 	add.w	r7, r4, #8
 801372e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013730:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8013734:	f04f 0e00 	mov.w	lr, #0
 8013738:	e887 0003 	stmia.w	r7, {r0, r1}
 801373c:	6226      	str	r6, [r4, #32]
 801373e:	4670      	mov	r0, lr
 8013740:	f8c5 8008 	str.w	r8, [r5, #8]
 8013744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013748:	b002      	add	sp, #8
 801374a:	4770      	bx	lr
 801374c:	f04f 0e0a 	mov.w	lr, #10
 8013750:	e7d0      	b.n	80136f4 <rcl_clock_add_jump_callback+0x60>
 8013752:	2128      	movs	r1, #40	@ 0x28
 8013754:	e7d7      	b.n	8013706 <rcl_clock_add_jump_callback+0x72>
 8013756:	bf00      	nop

08013758 <rcl_clock_remove_jump_callback>:
 8013758:	2800      	cmp	r0, #0
 801375a:	d05a      	beq.n	8013812 <rcl_clock_remove_jump_callback+0xba>
 801375c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013760:	4605      	mov	r5, r0
 8013762:	3014      	adds	r0, #20
 8013764:	460f      	mov	r7, r1
 8013766:	4692      	mov	sl, r2
 8013768:	f7f9 fc62 	bl	800d030 <rcutils_allocator_is_valid>
 801376c:	2800      	cmp	r0, #0
 801376e:	d03f      	beq.n	80137f0 <rcl_clock_remove_jump_callback+0x98>
 8013770:	2f00      	cmp	r7, #0
 8013772:	d03d      	beq.n	80137f0 <rcl_clock_remove_jump_callback+0x98>
 8013774:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8013778:	f1b8 0f00 	cmp.w	r8, #0
 801377c:	d00c      	beq.n	8013798 <rcl_clock_remove_jump_callback+0x40>
 801377e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013782:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8013786:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 801378a:	464c      	mov	r4, r9
 801378c:	6823      	ldr	r3, [r4, #0]
 801378e:	42bb      	cmp	r3, r7
 8013790:	d005      	beq.n	801379e <rcl_clock_remove_jump_callback+0x46>
 8013792:	3428      	adds	r4, #40	@ 0x28
 8013794:	42b4      	cmp	r4, r6
 8013796:	d1f9      	bne.n	801378c <rcl_clock_remove_jump_callback+0x34>
 8013798:	2001      	movs	r0, #1
 801379a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801379e:	6a23      	ldr	r3, [r4, #32]
 80137a0:	3428      	adds	r4, #40	@ 0x28
 80137a2:	42b4      	cmp	r4, r6
 80137a4:	d02c      	beq.n	8013800 <rcl_clock_remove_jump_callback+0xa8>
 80137a6:	4553      	cmp	r3, sl
 80137a8:	d1f0      	bne.n	801378c <rcl_clock_remove_jump_callback+0x34>
 80137aa:	46a6      	mov	lr, r4
 80137ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80137b0:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80137b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80137bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80137c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80137c4:	3428      	adds	r4, #40	@ 0x28
 80137c6:	42a6      	cmp	r6, r4
 80137c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80137cc:	d1ed      	bne.n	80137aa <rcl_clock_remove_jump_callback+0x52>
 80137ce:	f108 34ff 	add.w	r4, r8, #4294967295
 80137d2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80137d4:	60ac      	str	r4, [r5, #8]
 80137d6:	b174      	cbz	r4, 80137f6 <rcl_clock_remove_jump_callback+0x9e>
 80137d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80137dc:	00e1      	lsls	r1, r4, #3
 80137de:	69eb      	ldr	r3, [r5, #28]
 80137e0:	4648      	mov	r0, r9
 80137e2:	4798      	blx	r3
 80137e4:	4604      	mov	r4, r0
 80137e6:	b1b0      	cbz	r0, 8013816 <rcl_clock_remove_jump_callback+0xbe>
 80137e8:	606c      	str	r4, [r5, #4]
 80137ea:	2000      	movs	r0, #0
 80137ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137f0:	200b      	movs	r0, #11
 80137f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137f6:	69ab      	ldr	r3, [r5, #24]
 80137f8:	4611      	mov	r1, r2
 80137fa:	4648      	mov	r0, r9
 80137fc:	4798      	blx	r3
 80137fe:	e7f3      	b.n	80137e8 <rcl_clock_remove_jump_callback+0x90>
 8013800:	4553      	cmp	r3, sl
 8013802:	d1c9      	bne.n	8013798 <rcl_clock_remove_jump_callback+0x40>
 8013804:	f108 34ff 	add.w	r4, r8, #4294967295
 8013808:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 801380a:	60ac      	str	r4, [r5, #8]
 801380c:	2c00      	cmp	r4, #0
 801380e:	d1e3      	bne.n	80137d8 <rcl_clock_remove_jump_callback+0x80>
 8013810:	e7f1      	b.n	80137f6 <rcl_clock_remove_jump_callback+0x9e>
 8013812:	200b      	movs	r0, #11
 8013814:	4770      	bx	lr
 8013816:	200a      	movs	r0, #10
 8013818:	e7eb      	b.n	80137f2 <rcl_clock_remove_jump_callback+0x9a>
 801381a:	bf00      	nop

0801381c <_rcl_timer_time_jump>:
 801381c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013820:	4681      	mov	r9, r0
 8013822:	b087      	sub	sp, #28
 8013824:	4614      	mov	r4, r2
 8013826:	b131      	cbz	r1, 8013836 <_rcl_timer_time_jump+0x1a>
 8013828:	7803      	ldrb	r3, [r0, #0]
 801382a:	3b02      	subs	r3, #2
 801382c:	2b01      	cmp	r3, #1
 801382e:	d93e      	bls.n	80138ae <_rcl_timer_time_jump+0x92>
 8013830:	b007      	add	sp, #28
 8013832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013836:	6810      	ldr	r0, [r2, #0]
 8013838:	a904      	add	r1, sp, #16
 801383a:	f7ff ff0f 	bl	801365c <rcl_clock_get_now>
 801383e:	2800      	cmp	r0, #0
 8013840:	d1f6      	bne.n	8013830 <_rcl_timer_time_jump+0x14>
 8013842:	f104 0a20 	add.w	sl, r4, #32
 8013846:	2105      	movs	r1, #5
 8013848:	4650      	mov	r0, sl
 801384a:	f001 fe05 	bl	8015458 <__atomic_load_8>
 801384e:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 8013852:	4680      	mov	r8, r0
 8013854:	460e      	mov	r6, r1
 8013856:	4658      	mov	r0, fp
 8013858:	2105      	movs	r1, #5
 801385a:	f001 fdfd 	bl	8015458 <__atomic_load_8>
 801385e:	4607      	mov	r7, r0
 8013860:	460d      	mov	r5, r1
 8013862:	f104 0018 	add.w	r0, r4, #24
 8013866:	2105      	movs	r1, #5
 8013868:	f001 fdf6 	bl	8015458 <__atomic_load_8>
 801386c:	f899 3000 	ldrb.w	r3, [r9]
 8013870:	9003      	str	r0, [sp, #12]
 8013872:	3b02      	subs	r3, #2
 8013874:	2b01      	cmp	r3, #1
 8013876:	4689      	mov	r9, r1
 8013878:	d935      	bls.n	80138e6 <_rcl_timer_time_jump+0xca>
 801387a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801387e:	42ba      	cmp	r2, r7
 8013880:	eb73 0505 	sbcs.w	r5, r3, r5
 8013884:	da57      	bge.n	8013936 <_rcl_timer_time_jump+0x11a>
 8013886:	4542      	cmp	r2, r8
 8013888:	eb73 0606 	sbcs.w	r6, r3, r6
 801388c:	dad0      	bge.n	8013830 <_rcl_timer_time_jump+0x14>
 801388e:	1882      	adds	r2, r0, r2
 8013890:	f04f 0405 	mov.w	r4, #5
 8013894:	eb43 0309 	adc.w	r3, r3, r9
 8013898:	4658      	mov	r0, fp
 801389a:	9400      	str	r4, [sp, #0]
 801389c:	f001 fe12 	bl	80154c4 <__atomic_store_8>
 80138a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138a4:	9400      	str	r4, [sp, #0]
 80138a6:	4650      	mov	r0, sl
 80138a8:	f001 fe0c 	bl	80154c4 <__atomic_store_8>
 80138ac:	e7c0      	b.n	8013830 <_rcl_timer_time_jump+0x14>
 80138ae:	6810      	ldr	r0, [r2, #0]
 80138b0:	a904      	add	r1, sp, #16
 80138b2:	f7ff fed3 	bl	801365c <rcl_clock_get_now>
 80138b6:	2800      	cmp	r0, #0
 80138b8:	d1ba      	bne.n	8013830 <_rcl_timer_time_jump+0x14>
 80138ba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80138be:	4313      	orrs	r3, r2
 80138c0:	d0b6      	beq.n	8013830 <_rcl_timer_time_jump+0x14>
 80138c2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80138c6:	2105      	movs	r1, #5
 80138c8:	f001 fdc6 	bl	8015458 <__atomic_load_8>
 80138cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138d0:	1a82      	subs	r2, r0, r2
 80138d2:	f04f 0005 	mov.w	r0, #5
 80138d6:	9000      	str	r0, [sp, #0]
 80138d8:	eb61 0303 	sbc.w	r3, r1, r3
 80138dc:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80138e0:	f001 fdf0 	bl	80154c4 <__atomic_store_8>
 80138e4:	e7a4      	b.n	8013830 <_rcl_timer_time_jump+0x14>
 80138e6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80138ea:	4313      	orrs	r3, r2
 80138ec:	d0a0      	beq.n	8013830 <_rcl_timer_time_jump+0x14>
 80138ee:	2605      	movs	r6, #5
 80138f0:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80138f4:	2300      	movs	r3, #0
 80138f6:	9600      	str	r6, [sp, #0]
 80138f8:	2200      	movs	r2, #0
 80138fa:	f001 fe19 	bl	8015530 <__atomic_exchange_8>
 80138fe:	ea51 0300 	orrs.w	r3, r1, r0
 8013902:	4604      	mov	r4, r0
 8013904:	460d      	mov	r5, r1
 8013906:	d093      	beq.n	8013830 <_rcl_timer_time_jump+0x14>
 8013908:	9a04      	ldr	r2, [sp, #16]
 801390a:	9b05      	ldr	r3, [sp, #20]
 801390c:	9600      	str	r6, [sp, #0]
 801390e:	1b12      	subs	r2, r2, r4
 8013910:	eb63 0301 	sbc.w	r3, r3, r1
 8013914:	9903      	ldr	r1, [sp, #12]
 8013916:	1852      	adds	r2, r2, r1
 8013918:	eb43 0309 	adc.w	r3, r3, r9
 801391c:	4658      	mov	r0, fp
 801391e:	f001 fdd1 	bl	80154c4 <__atomic_store_8>
 8013922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013926:	1b12      	subs	r2, r2, r4
 8013928:	9600      	str	r6, [sp, #0]
 801392a:	eb63 0305 	sbc.w	r3, r3, r5
 801392e:	4650      	mov	r0, sl
 8013930:	f001 fdc8 	bl	80154c4 <__atomic_store_8>
 8013934:	e77c      	b.n	8013830 <_rcl_timer_time_jump+0x14>
 8013936:	f104 0008 	add.w	r0, r4, #8
 801393a:	f005 f99f 	bl	8018c7c <rcl_trigger_guard_condition>
 801393e:	e777      	b.n	8013830 <_rcl_timer_time_jump+0x14>

08013940 <rcl_get_zero_initialized_timer>:
 8013940:	4b01      	ldr	r3, [pc, #4]	@ (8013948 <rcl_get_zero_initialized_timer+0x8>)
 8013942:	6818      	ldr	r0, [r3, #0]
 8013944:	4770      	bx	lr
 8013946:	bf00      	nop
 8013948:	0801c898 	.word	0x0801c898
 801394c:	00000000 	.word	0x00000000

08013950 <rcl_timer_init2>:
 8013950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013954:	b0ae      	sub	sp, #184	@ 0xb8
 8013956:	4604      	mov	r4, r0
 8013958:	a839      	add	r0, sp, #228	@ 0xe4
 801395a:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 801395e:	460d      	mov	r5, r1
 8013960:	4691      	mov	r9, r2
 8013962:	f7f9 fb65 	bl	800d030 <rcutils_allocator_is_valid>
 8013966:	2800      	cmp	r0, #0
 8013968:	f000 8097 	beq.w	8013a9a <rcl_timer_init2+0x14a>
 801396c:	2c00      	cmp	r4, #0
 801396e:	f000 8094 	beq.w	8013a9a <rcl_timer_init2+0x14a>
 8013972:	2d00      	cmp	r5, #0
 8013974:	f000 8091 	beq.w	8013a9a <rcl_timer_init2+0x14a>
 8013978:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 801397a:	2b00      	cmp	r3, #0
 801397c:	f2c0 808d 	blt.w	8013a9a <rcl_timer_init2+0x14a>
 8013980:	6823      	ldr	r3, [r4, #0]
 8013982:	b123      	cbz	r3, 801398e <rcl_timer_init2+0x3e>
 8013984:	2664      	movs	r6, #100	@ 0x64
 8013986:	4630      	mov	r0, r6
 8013988:	b02e      	add	sp, #184	@ 0xb8
 801398a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801398e:	a908      	add	r1, sp, #32
 8013990:	4628      	mov	r0, r5
 8013992:	f7ff fe63 	bl	801365c <rcl_clock_get_now>
 8013996:	4606      	mov	r6, r0
 8013998:	2800      	cmp	r0, #0
 801399a:	d1f4      	bne.n	8013986 <rcl_timer_init2+0x36>
 801399c:	ae06      	add	r6, sp, #24
 801399e:	4630      	mov	r0, r6
 80139a0:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 80139a4:	f005 f88c 	bl	8018ac0 <rcl_get_zero_initialized_guard_condition>
 80139a8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80139ac:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80139b0:	ae0b      	add	r6, sp, #44	@ 0x2c
 80139b2:	e88a 0003 	stmia.w	sl, {r0, r1}
 80139b6:	4630      	mov	r0, r6
 80139b8:	f005 f95a 	bl	8018c70 <rcl_guard_condition_get_default_options>
 80139bc:	ab0d      	add	r3, sp, #52	@ 0x34
 80139be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80139c2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80139c6:	4649      	mov	r1, r9
 80139c8:	e896 000c 	ldmia.w	r6, {r2, r3}
 80139cc:	4650      	mov	r0, sl
 80139ce:	f005 f881 	bl	8018ad4 <rcl_guard_condition_init>
 80139d2:	4606      	mov	r6, r0
 80139d4:	2800      	cmp	r0, #0
 80139d6:	d1d6      	bne.n	8013986 <rcl_timer_init2+0x36>
 80139d8:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80139da:	931a      	str	r3, [sp, #104]	@ 0x68
 80139dc:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 80139e0:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80139e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80139e8:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 80139ea:	902a      	str	r0, [sp, #168]	@ 0xa8
 80139ec:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
 80139f0:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 8013ac8 <rcl_timer_init2+0x178>
 80139f4:	19d0      	adds	r0, r2, r7
 80139f6:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 80139f8:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 80139fc:	eb43 0107 	adc.w	r1, r3, r7
 8013a00:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8013a04:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8013a08:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8013a0c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013a10:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 8013a14:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013a18:	f8dc 3000 	ldr.w	r3, [ip]
 8013a1c:	f8ce 3000 	str.w	r3, [lr]
 8013a20:	f088 0801 	eor.w	r8, r8, #1
 8013a24:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 8013a28:	4619      	mov	r1, r3
 8013a2a:	2060      	movs	r0, #96	@ 0x60
 8013a2c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8013a2e:	4798      	blx	r3
 8013a30:	4680      	mov	r8, r0
 8013a32:	6020      	str	r0, [r4, #0]
 8013a34:	2800      	cmp	r0, #0
 8013a36:	d035      	beq.n	8013aa4 <rcl_timer_init2+0x154>
 8013a38:	a916      	add	r1, sp, #88	@ 0x58
 8013a3a:	2260      	movs	r2, #96	@ 0x60
 8013a3c:	f006 fb57 	bl	801a0ee <memcpy>
 8013a40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	2b01      	cmp	r3, #1
 8013a46:	d19e      	bne.n	8013986 <rcl_timer_init2+0x36>
 8013a48:	2001      	movs	r0, #1
 8013a4a:	2100      	movs	r1, #0
 8013a4c:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8013a50:	f04f 30ff 	mov.w	r0, #4294967295
 8013a54:	f04f 31ff 	mov.w	r1, #4294967295
 8013a58:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8013a5c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8013a60:	4b1b      	ldr	r3, [pc, #108]	@ (8013ad0 <rcl_timer_init2+0x180>)
 8013a62:	9304      	str	r3, [sp, #16]
 8013a64:	f8cd 8014 	str.w	r8, [sp, #20]
 8013a68:	ab12      	add	r3, sp, #72	@ 0x48
 8013a6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013a6c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013a70:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013a74:	4628      	mov	r0, r5
 8013a76:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8013a7a:	f7ff fe0b 	bl	8013694 <rcl_clock_add_jump_callback>
 8013a7e:	4605      	mov	r5, r0
 8013a80:	2800      	cmp	r0, #0
 8013a82:	d080      	beq.n	8013986 <rcl_timer_init2+0x36>
 8013a84:	4650      	mov	r0, sl
 8013a86:	f005 f8d1 	bl	8018c2c <rcl_guard_condition_fini>
 8013a8a:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8013a8c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8013a8e:	6820      	ldr	r0, [r4, #0]
 8013a90:	4798      	blx	r3
 8013a92:	2300      	movs	r3, #0
 8013a94:	6023      	str	r3, [r4, #0]
 8013a96:	462e      	mov	r6, r5
 8013a98:	e775      	b.n	8013986 <rcl_timer_init2+0x36>
 8013a9a:	260b      	movs	r6, #11
 8013a9c:	4630      	mov	r0, r6
 8013a9e:	b02e      	add	sp, #184	@ 0xb8
 8013aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013aa4:	4650      	mov	r0, sl
 8013aa6:	f005 f8c1 	bl	8018c2c <rcl_guard_condition_fini>
 8013aaa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	2b01      	cmp	r3, #1
 8013ab0:	d001      	beq.n	8013ab6 <rcl_timer_init2+0x166>
 8013ab2:	260a      	movs	r6, #10
 8013ab4:	e767      	b.n	8013986 <rcl_timer_init2+0x36>
 8013ab6:	4906      	ldr	r1, [pc, #24]	@ (8013ad0 <rcl_timer_init2+0x180>)
 8013ab8:	4622      	mov	r2, r4
 8013aba:	4628      	mov	r0, r5
 8013abc:	f7ff fe4c 	bl	8013758 <rcl_clock_remove_jump_callback>
 8013ac0:	e7f7      	b.n	8013ab2 <rcl_timer_init2+0x162>
 8013ac2:	bf00      	nop
 8013ac4:	f3af 8000 	nop.w
	...
 8013ad0:	0801381d 	.word	0x0801381d

08013ad4 <rcl_timer_clock>:
 8013ad4:	b130      	cbz	r0, 8013ae4 <rcl_timer_clock+0x10>
 8013ad6:	b129      	cbz	r1, 8013ae4 <rcl_timer_clock+0x10>
 8013ad8:	6803      	ldr	r3, [r0, #0]
 8013ada:	b12b      	cbz	r3, 8013ae8 <rcl_timer_clock+0x14>
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	600b      	str	r3, [r1, #0]
 8013ae0:	2000      	movs	r0, #0
 8013ae2:	4770      	bx	lr
 8013ae4:	200b      	movs	r0, #11
 8013ae6:	4770      	bx	lr
 8013ae8:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8013aec:	4770      	bx	lr
 8013aee:	bf00      	nop

08013af0 <rcl_timer_call>:
 8013af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af4:	b087      	sub	sp, #28
 8013af6:	2800      	cmp	r0, #0
 8013af8:	d067      	beq.n	8013bca <rcl_timer_call+0xda>
 8013afa:	6803      	ldr	r3, [r0, #0]
 8013afc:	4604      	mov	r4, r0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d068      	beq.n	8013bd4 <rcl_timer_call+0xe4>
 8013b02:	f3bf 8f5b 	dmb	ish
 8013b06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013b0a:	f3bf 8f5b 	dmb	ish
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d150      	bne.n	8013bb4 <rcl_timer_call+0xc4>
 8013b12:	6803      	ldr	r3, [r0, #0]
 8013b14:	a904      	add	r1, sp, #16
 8013b16:	6818      	ldr	r0, [r3, #0]
 8013b18:	f7ff fda0 	bl	801365c <rcl_clock_get_now>
 8013b1c:	4605      	mov	r5, r0
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	d144      	bne.n	8013bac <rcl_timer_call+0xbc>
 8013b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	db4a      	blt.n	8013bc0 <rcl_timer_call+0xd0>
 8013b2a:	6820      	ldr	r0, [r4, #0]
 8013b2c:	f04f 0a05 	mov.w	sl, #5
 8013b30:	f8cd a000 	str.w	sl, [sp]
 8013b34:	3020      	adds	r0, #32
 8013b36:	f001 fcfb 	bl	8015530 <__atomic_exchange_8>
 8013b3a:	6823      	ldr	r3, [r4, #0]
 8013b3c:	f3bf 8f5b 	dmb	ish
 8013b40:	4680      	mov	r8, r0
 8013b42:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8013b46:	f3bf 8f5b 	dmb	ish
 8013b4a:	6820      	ldr	r0, [r4, #0]
 8013b4c:	4689      	mov	r9, r1
 8013b4e:	3028      	adds	r0, #40	@ 0x28
 8013b50:	4651      	mov	r1, sl
 8013b52:	f001 fc81 	bl	8015458 <__atomic_load_8>
 8013b56:	4606      	mov	r6, r0
 8013b58:	6820      	ldr	r0, [r4, #0]
 8013b5a:	460f      	mov	r7, r1
 8013b5c:	3018      	adds	r0, #24
 8013b5e:	4651      	mov	r1, sl
 8013b60:	f001 fc7a 	bl	8015458 <__atomic_load_8>
 8013b64:	1836      	adds	r6, r6, r0
 8013b66:	eb41 0707 	adc.w	r7, r1, r7
 8013b6a:	4602      	mov	r2, r0
 8013b6c:	460b      	mov	r3, r1
 8013b6e:	4682      	mov	sl, r0
 8013b70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013b74:	42b0      	cmp	r0, r6
 8013b76:	eb71 0c07 	sbcs.w	ip, r1, r7
 8013b7a:	db04      	blt.n	8013b86 <rcl_timer_call+0x96>
 8013b7c:	ea53 0c02 	orrs.w	ip, r3, r2
 8013b80:	d12b      	bne.n	8013bda <rcl_timer_call+0xea>
 8013b82:	4606      	mov	r6, r0
 8013b84:	460f      	mov	r7, r1
 8013b86:	6820      	ldr	r0, [r4, #0]
 8013b88:	2105      	movs	r1, #5
 8013b8a:	4632      	mov	r2, r6
 8013b8c:	463b      	mov	r3, r7
 8013b8e:	3028      	adds	r0, #40	@ 0x28
 8013b90:	9100      	str	r1, [sp, #0]
 8013b92:	f001 fc97 	bl	80154c4 <__atomic_store_8>
 8013b96:	f1bb 0f00 	cmp.w	fp, #0
 8013b9a:	d007      	beq.n	8013bac <rcl_timer_call+0xbc>
 8013b9c:	9a04      	ldr	r2, [sp, #16]
 8013b9e:	9b05      	ldr	r3, [sp, #20]
 8013ba0:	ebb2 0208 	subs.w	r2, r2, r8
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	eb63 0309 	sbc.w	r3, r3, r9
 8013baa:	47d8      	blx	fp
 8013bac:	4628      	mov	r0, r5
 8013bae:	b007      	add	sp, #28
 8013bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bb4:	f240 3521 	movw	r5, #801	@ 0x321
 8013bb8:	4628      	mov	r0, r5
 8013bba:	b007      	add	sp, #28
 8013bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bc0:	2501      	movs	r5, #1
 8013bc2:	4628      	mov	r0, r5
 8013bc4:	b007      	add	sp, #28
 8013bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bca:	250b      	movs	r5, #11
 8013bcc:	4628      	mov	r0, r5
 8013bce:	b007      	add	sp, #28
 8013bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bd4:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013bd8:	e7e8      	b.n	8013bac <rcl_timer_call+0xbc>
 8013bda:	1b80      	subs	r0, r0, r6
 8013bdc:	eb61 0107 	sbc.w	r1, r1, r7
 8013be0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013be4:	f7ec ff62 	bl	8000aac <__aeabi_ldivmod>
 8013be8:	9b02      	ldr	r3, [sp, #8]
 8013bea:	3001      	adds	r0, #1
 8013bec:	f141 0100 	adc.w	r1, r1, #0
 8013bf0:	fb00 f303 	mul.w	r3, r0, r3
 8013bf4:	fb01 330a 	mla	r3, r1, sl, r3
 8013bf8:	fba0 0a0a 	umull	r0, sl, r0, sl
 8013bfc:	1830      	adds	r0, r6, r0
 8013bfe:	4453      	add	r3, sl
 8013c00:	eb43 0707 	adc.w	r7, r3, r7
 8013c04:	4606      	mov	r6, r0
 8013c06:	e7be      	b.n	8013b86 <rcl_timer_call+0x96>

08013c08 <rcl_timer_is_ready>:
 8013c08:	b398      	cbz	r0, 8013c72 <rcl_timer_is_ready+0x6a>
 8013c0a:	b530      	push	{r4, r5, lr}
 8013c0c:	6803      	ldr	r3, [r0, #0]
 8013c0e:	b083      	sub	sp, #12
 8013c10:	4604      	mov	r4, r0
 8013c12:	b383      	cbz	r3, 8013c76 <rcl_timer_is_ready+0x6e>
 8013c14:	460d      	mov	r5, r1
 8013c16:	b349      	cbz	r1, 8013c6c <rcl_timer_is_ready+0x64>
 8013c18:	f3bf 8f5b 	dmb	ish
 8013c1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013c20:	f3bf 8f5b 	dmb	ish
 8013c24:	b9fb      	cbnz	r3, 8013c66 <rcl_timer_is_ready+0x5e>
 8013c26:	6803      	ldr	r3, [r0, #0]
 8013c28:	4669      	mov	r1, sp
 8013c2a:	6818      	ldr	r0, [r3, #0]
 8013c2c:	f7ff fd16 	bl	801365c <rcl_clock_get_now>
 8013c30:	b128      	cbz	r0, 8013c3e <rcl_timer_is_ready+0x36>
 8013c32:	f240 3321 	movw	r3, #801	@ 0x321
 8013c36:	4298      	cmp	r0, r3
 8013c38:	d015      	beq.n	8013c66 <rcl_timer_is_ready+0x5e>
 8013c3a:	b003      	add	sp, #12
 8013c3c:	bd30      	pop	{r4, r5, pc}
 8013c3e:	6820      	ldr	r0, [r4, #0]
 8013c40:	2105      	movs	r1, #5
 8013c42:	3028      	adds	r0, #40	@ 0x28
 8013c44:	f001 fc08 	bl	8015458 <__atomic_load_8>
 8013c48:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013c4c:	1ac0      	subs	r0, r0, r3
 8013c4e:	eb61 0102 	sbc.w	r1, r1, r2
 8013c52:	2801      	cmp	r0, #1
 8013c54:	f171 0100 	sbcs.w	r1, r1, #0
 8013c58:	bfb4      	ite	lt
 8013c5a:	2301      	movlt	r3, #1
 8013c5c:	2300      	movge	r3, #0
 8013c5e:	702b      	strb	r3, [r5, #0]
 8013c60:	2000      	movs	r0, #0
 8013c62:	b003      	add	sp, #12
 8013c64:	bd30      	pop	{r4, r5, pc}
 8013c66:	2300      	movs	r3, #0
 8013c68:	702b      	strb	r3, [r5, #0]
 8013c6a:	e7f9      	b.n	8013c60 <rcl_timer_is_ready+0x58>
 8013c6c:	200b      	movs	r0, #11
 8013c6e:	b003      	add	sp, #12
 8013c70:	bd30      	pop	{r4, r5, pc}
 8013c72:	200b      	movs	r0, #11
 8013c74:	4770      	bx	lr
 8013c76:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8013c7a:	e7de      	b.n	8013c3a <rcl_timer_is_ready+0x32>

08013c7c <rcl_timer_get_next_call_time>:
 8013c7c:	b1d8      	cbz	r0, 8013cb6 <rcl_timer_get_next_call_time+0x3a>
 8013c7e:	b538      	push	{r3, r4, r5, lr}
 8013c80:	6803      	ldr	r3, [r0, #0]
 8013c82:	b1d3      	cbz	r3, 8013cba <rcl_timer_get_next_call_time+0x3e>
 8013c84:	460c      	mov	r4, r1
 8013c86:	b1a1      	cbz	r1, 8013cb2 <rcl_timer_get_next_call_time+0x36>
 8013c88:	f3bf 8f5b 	dmb	ish
 8013c8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013c90:	f3bf 8f5b 	dmb	ish
 8013c94:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8013c98:	b943      	cbnz	r3, 8013cac <rcl_timer_get_next_call_time+0x30>
 8013c9a:	6800      	ldr	r0, [r0, #0]
 8013c9c:	2105      	movs	r1, #5
 8013c9e:	3028      	adds	r0, #40	@ 0x28
 8013ca0:	f001 fbda 	bl	8015458 <__atomic_load_8>
 8013ca4:	e9c4 0100 	strd	r0, r1, [r4]
 8013ca8:	4628      	mov	r0, r5
 8013caa:	bd38      	pop	{r3, r4, r5, pc}
 8013cac:	f240 3021 	movw	r0, #801	@ 0x321
 8013cb0:	bd38      	pop	{r3, r4, r5, pc}
 8013cb2:	200b      	movs	r0, #11
 8013cb4:	bd38      	pop	{r3, r4, r5, pc}
 8013cb6:	200b      	movs	r0, #11
 8013cb8:	4770      	bx	lr
 8013cba:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8013cbe:	bd38      	pop	{r3, r4, r5, pc}

08013cc0 <rcl_timer_get_guard_condition>:
 8013cc0:	b130      	cbz	r0, 8013cd0 <rcl_timer_get_guard_condition+0x10>
 8013cc2:	6800      	ldr	r0, [r0, #0]
 8013cc4:	b120      	cbz	r0, 8013cd0 <rcl_timer_get_guard_condition+0x10>
 8013cc6:	68c3      	ldr	r3, [r0, #12]
 8013cc8:	b10b      	cbz	r3, 8013cce <rcl_timer_get_guard_condition+0xe>
 8013cca:	3008      	adds	r0, #8
 8013ccc:	4770      	bx	lr
 8013cce:	4618      	mov	r0, r3
 8013cd0:	4770      	bx	lr
 8013cd2:	bf00      	nop

08013cd4 <rcl_get_zero_initialized_wait_set>:
 8013cd4:	b510      	push	{r4, lr}
 8013cd6:	4c08      	ldr	r4, [pc, #32]	@ (8013cf8 <rcl_get_zero_initialized_wait_set+0x24>)
 8013cd8:	4686      	mov	lr, r0
 8013cda:	4684      	mov	ip, r0
 8013cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013cde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ce4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013cea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013cee:	6823      	ldr	r3, [r4, #0]
 8013cf0:	f8cc 3000 	str.w	r3, [ip]
 8013cf4:	4670      	mov	r0, lr
 8013cf6:	bd10      	pop	{r4, pc}
 8013cf8:	0801c89c 	.word	0x0801c89c

08013cfc <rcl_wait_set_is_valid>:
 8013cfc:	b118      	cbz	r0, 8013d06 <rcl_wait_set_is_valid+0xa>
 8013cfe:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013d00:	3800      	subs	r0, #0
 8013d02:	bf18      	it	ne
 8013d04:	2001      	movne	r0, #1
 8013d06:	4770      	bx	lr

08013d08 <rcl_wait_set_fini>:
 8013d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d0c:	2800      	cmp	r0, #0
 8013d0e:	f000 80ab 	beq.w	8013e68 <rcl_wait_set_fini+0x160>
 8013d12:	4605      	mov	r5, r0
 8013d14:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013d16:	2800      	cmp	r0, #0
 8013d18:	f000 809c 	beq.w	8013e54 <rcl_wait_set_fini+0x14c>
 8013d1c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8013d1e:	f003 fa17 	bl	8017150 <rmw_destroy_wait_set>
 8013d22:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013d24:	4680      	mov	r8, r0
 8013d26:	2800      	cmp	r0, #0
 8013d28:	f040 808e 	bne.w	8013e48 <rcl_wait_set_fini+0x140>
 8013d2c:	2c00      	cmp	r4, #0
 8013d2e:	f000 80a0 	beq.w	8013e72 <rcl_wait_set_fini+0x16a>
 8013d32:	6828      	ldr	r0, [r5, #0]
 8013d34:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8013d36:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013d3a:	2600      	movs	r6, #0
 8013d3c:	606e      	str	r6, [r5, #4]
 8013d3e:	6026      	str	r6, [r4, #0]
 8013d40:	b118      	cbz	r0, 8013d4a <rcl_wait_set_fini+0x42>
 8013d42:	4649      	mov	r1, r9
 8013d44:	47b8      	blx	r7
 8013d46:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013d48:	602e      	str	r6, [r5, #0]
 8013d4a:	68a0      	ldr	r0, [r4, #8]
 8013d4c:	b128      	cbz	r0, 8013d5a <rcl_wait_set_fini+0x52>
 8013d4e:	4649      	mov	r1, r9
 8013d50:	47b8      	blx	r7
 8013d52:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013d54:	2300      	movs	r3, #0
 8013d56:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8013d5a:	68a8      	ldr	r0, [r5, #8]
 8013d5c:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8013d5e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013d60:	f04f 0900 	mov.w	r9, #0
 8013d64:	f8c5 900c 	str.w	r9, [r5, #12]
 8013d68:	f8c4 900c 	str.w	r9, [r4, #12]
 8013d6c:	b130      	cbz	r0, 8013d7c <rcl_wait_set_fini+0x74>
 8013d6e:	4639      	mov	r1, r7
 8013d70:	47b0      	blx	r6
 8013d72:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013d74:	f8c5 9008 	str.w	r9, [r5, #8]
 8013d78:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8013d7a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013d7c:	6960      	ldr	r0, [r4, #20]
 8013d7e:	f04f 0900 	mov.w	r9, #0
 8013d82:	f8c4 9010 	str.w	r9, [r4, #16]
 8013d86:	b130      	cbz	r0, 8013d96 <rcl_wait_set_fini+0x8e>
 8013d88:	4639      	mov	r1, r7
 8013d8a:	47b0      	blx	r6
 8013d8c:	f8c4 9014 	str.w	r9, [r4, #20]
 8013d90:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013d92:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8013d94:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013d96:	6928      	ldr	r0, [r5, #16]
 8013d98:	f04f 0900 	mov.w	r9, #0
 8013d9c:	f8c5 9014 	str.w	r9, [r5, #20]
 8013da0:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 8013da4:	b130      	cbz	r0, 8013db4 <rcl_wait_set_fini+0xac>
 8013da6:	4639      	mov	r1, r7
 8013da8:	47b0      	blx	r6
 8013daa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013dac:	f8c5 9010 	str.w	r9, [r5, #16]
 8013db0:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8013db2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013db4:	69a8      	ldr	r0, [r5, #24]
 8013db6:	f04f 0900 	mov.w	r9, #0
 8013dba:	f8c5 901c 	str.w	r9, [r5, #28]
 8013dbe:	f8c4 9018 	str.w	r9, [r4, #24]
 8013dc2:	b120      	cbz	r0, 8013dce <rcl_wait_set_fini+0xc6>
 8013dc4:	4639      	mov	r1, r7
 8013dc6:	47b0      	blx	r6
 8013dc8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013dca:	f8c5 9018 	str.w	r9, [r5, #24]
 8013dce:	6a20      	ldr	r0, [r4, #32]
 8013dd0:	b128      	cbz	r0, 8013dde <rcl_wait_set_fini+0xd6>
 8013dd2:	4639      	mov	r1, r7
 8013dd4:	47b0      	blx	r6
 8013dd6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013dd8:	2300      	movs	r3, #0
 8013dda:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013dde:	6a28      	ldr	r0, [r5, #32]
 8013de0:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8013de2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013de6:	2600      	movs	r6, #0
 8013de8:	626e      	str	r6, [r5, #36]	@ 0x24
 8013dea:	6266      	str	r6, [r4, #36]	@ 0x24
 8013dec:	b118      	cbz	r0, 8013df6 <rcl_wait_set_fini+0xee>
 8013dee:	4649      	mov	r1, r9
 8013df0:	47b8      	blx	r7
 8013df2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013df4:	622e      	str	r6, [r5, #32]
 8013df6:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013df8:	b128      	cbz	r0, 8013e06 <rcl_wait_set_fini+0xfe>
 8013dfa:	4649      	mov	r1, r9
 8013dfc:	47b8      	blx	r7
 8013dfe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013e00:	2300      	movs	r3, #0
 8013e02:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013e06:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013e08:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8013e0a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013e0e:	2600      	movs	r6, #0
 8013e10:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013e12:	6326      	str	r6, [r4, #48]	@ 0x30
 8013e14:	b118      	cbz	r0, 8013e1e <rcl_wait_set_fini+0x116>
 8013e16:	4649      	mov	r1, r9
 8013e18:	47b8      	blx	r7
 8013e1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013e1c:	62ae      	str	r6, [r5, #40]	@ 0x28
 8013e1e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013e20:	b1e0      	cbz	r0, 8013e5c <rcl_wait_set_fini+0x154>
 8013e22:	4649      	mov	r1, r9
 8013e24:	47b8      	blx	r7
 8013e26:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013e28:	2300      	movs	r3, #0
 8013e2a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8013e2e:	4598      	cmp	r8, r3
 8013e30:	bf18      	it	ne
 8013e32:	f44f 7861 	movne.w	r8, #900	@ 0x384
 8013e36:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8013e38:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	4798      	blx	r3
 8013e3e:	2300      	movs	r3, #0
 8013e40:	632b      	str	r3, [r5, #48]	@ 0x30
 8013e42:	4640      	mov	r0, r8
 8013e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e48:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8013e4c:	2c00      	cmp	r4, #0
 8013e4e:	f47f af70 	bne.w	8013d32 <rcl_wait_set_fini+0x2a>
 8013e52:	e7f6      	b.n	8013e42 <rcl_wait_set_fini+0x13a>
 8013e54:	4680      	mov	r8, r0
 8013e56:	4640      	mov	r0, r8
 8013e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e5c:	f1b8 0f00 	cmp.w	r8, #0
 8013e60:	bf18      	it	ne
 8013e62:	f44f 7861 	movne.w	r8, #900	@ 0x384
 8013e66:	e7e6      	b.n	8013e36 <rcl_wait_set_fini+0x12e>
 8013e68:	f04f 080b 	mov.w	r8, #11
 8013e6c:	4640      	mov	r0, r8
 8013e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e72:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8013e76:	e7e4      	b.n	8013e42 <rcl_wait_set_fini+0x13a>

08013e78 <rcl_wait_set_add_subscription>:
 8013e78:	b318      	cbz	r0, 8013ec2 <rcl_wait_set_add_subscription+0x4a>
 8013e7a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013e7c:	b570      	push	{r4, r5, r6, lr}
 8013e7e:	4604      	mov	r4, r0
 8013e80:	b30b      	cbz	r3, 8013ec6 <rcl_wait_set_add_subscription+0x4e>
 8013e82:	b319      	cbz	r1, 8013ecc <rcl_wait_set_add_subscription+0x54>
 8013e84:	681d      	ldr	r5, [r3, #0]
 8013e86:	6840      	ldr	r0, [r0, #4]
 8013e88:	4285      	cmp	r5, r0
 8013e8a:	d217      	bcs.n	8013ebc <rcl_wait_set_add_subscription+0x44>
 8013e8c:	6820      	ldr	r0, [r4, #0]
 8013e8e:	1c6e      	adds	r6, r5, #1
 8013e90:	601e      	str	r6, [r3, #0]
 8013e92:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013e96:	b102      	cbz	r2, 8013e9a <rcl_wait_set_add_subscription+0x22>
 8013e98:	6015      	str	r5, [r2, #0]
 8013e9a:	4608      	mov	r0, r1
 8013e9c:	f7ff fb3c 	bl	8013518 <rcl_subscription_get_rmw_handle>
 8013ea0:	b150      	cbz	r0, 8013eb8 <rcl_wait_set_add_subscription+0x40>
 8013ea2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013ea4:	6842      	ldr	r2, [r0, #4]
 8013ea6:	689b      	ldr	r3, [r3, #8]
 8013ea8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013eac:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013eae:	6853      	ldr	r3, [r2, #4]
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	2000      	movs	r0, #0
 8013eb4:	6053      	str	r3, [r2, #4]
 8013eb6:	bd70      	pop	{r4, r5, r6, pc}
 8013eb8:	2001      	movs	r0, #1
 8013eba:	bd70      	pop	{r4, r5, r6, pc}
 8013ebc:	f240 3086 	movw	r0, #902	@ 0x386
 8013ec0:	bd70      	pop	{r4, r5, r6, pc}
 8013ec2:	200b      	movs	r0, #11
 8013ec4:	4770      	bx	lr
 8013ec6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013eca:	bd70      	pop	{r4, r5, r6, pc}
 8013ecc:	200b      	movs	r0, #11
 8013ece:	bd70      	pop	{r4, r5, r6, pc}

08013ed0 <rcl_wait_set_clear>:
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	d074      	beq.n	8013fbe <rcl_wait_set_clear+0xee>
 8013ed4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013ed6:	b510      	push	{r4, lr}
 8013ed8:	4604      	mov	r4, r0
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d071      	beq.n	8013fc2 <rcl_wait_set_clear+0xf2>
 8013ede:	6800      	ldr	r0, [r0, #0]
 8013ee0:	b138      	cbz	r0, 8013ef2 <rcl_wait_set_clear+0x22>
 8013ee2:	6862      	ldr	r2, [r4, #4]
 8013ee4:	2100      	movs	r1, #0
 8013ee6:	0092      	lsls	r2, r2, #2
 8013ee8:	f006 f826 	bl	8019f38 <memset>
 8013eec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013eee:	2200      	movs	r2, #0
 8013ef0:	601a      	str	r2, [r3, #0]
 8013ef2:	68a0      	ldr	r0, [r4, #8]
 8013ef4:	b138      	cbz	r0, 8013f06 <rcl_wait_set_clear+0x36>
 8013ef6:	68e2      	ldr	r2, [r4, #12]
 8013ef8:	2100      	movs	r1, #0
 8013efa:	0092      	lsls	r2, r2, #2
 8013efc:	f006 f81c 	bl	8019f38 <memset>
 8013f00:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f02:	2200      	movs	r2, #0
 8013f04:	60da      	str	r2, [r3, #12]
 8013f06:	69a0      	ldr	r0, [r4, #24]
 8013f08:	b138      	cbz	r0, 8013f1a <rcl_wait_set_clear+0x4a>
 8013f0a:	69e2      	ldr	r2, [r4, #28]
 8013f0c:	2100      	movs	r1, #0
 8013f0e:	0092      	lsls	r2, r2, #2
 8013f10:	f006 f812 	bl	8019f38 <memset>
 8013f14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f16:	2200      	movs	r2, #0
 8013f18:	619a      	str	r2, [r3, #24]
 8013f1a:	6a20      	ldr	r0, [r4, #32]
 8013f1c:	b138      	cbz	r0, 8013f2e <rcl_wait_set_clear+0x5e>
 8013f1e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013f20:	2100      	movs	r1, #0
 8013f22:	0092      	lsls	r2, r2, #2
 8013f24:	f006 f808 	bl	8019f38 <memset>
 8013f28:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8013f2e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013f30:	b138      	cbz	r0, 8013f42 <rcl_wait_set_clear+0x72>
 8013f32:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013f34:	2100      	movs	r1, #0
 8013f36:	0092      	lsls	r2, r2, #2
 8013f38:	f005 fffe 	bl	8019f38 <memset>
 8013f3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f3e:	2200      	movs	r2, #0
 8013f40:	631a      	str	r2, [r3, #48]	@ 0x30
 8013f42:	6920      	ldr	r0, [r4, #16]
 8013f44:	b138      	cbz	r0, 8013f56 <rcl_wait_set_clear+0x86>
 8013f46:	6962      	ldr	r2, [r4, #20]
 8013f48:	2100      	movs	r1, #0
 8013f4a:	0092      	lsls	r2, r2, #2
 8013f4c:	f005 fff4 	bl	8019f38 <memset>
 8013f50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f52:	2200      	movs	r2, #0
 8013f54:	641a      	str	r2, [r3, #64]	@ 0x40
 8013f56:	6898      	ldr	r0, [r3, #8]
 8013f58:	b138      	cbz	r0, 8013f6a <rcl_wait_set_clear+0x9a>
 8013f5a:	685a      	ldr	r2, [r3, #4]
 8013f5c:	2100      	movs	r1, #0
 8013f5e:	0092      	lsls	r2, r2, #2
 8013f60:	f005 ffea 	bl	8019f38 <memset>
 8013f64:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f66:	2200      	movs	r2, #0
 8013f68:	605a      	str	r2, [r3, #4]
 8013f6a:	6958      	ldr	r0, [r3, #20]
 8013f6c:	b138      	cbz	r0, 8013f7e <rcl_wait_set_clear+0xae>
 8013f6e:	691a      	ldr	r2, [r3, #16]
 8013f70:	2100      	movs	r1, #0
 8013f72:	0092      	lsls	r2, r2, #2
 8013f74:	f005 ffe0 	bl	8019f38 <memset>
 8013f78:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	611a      	str	r2, [r3, #16]
 8013f7e:	6a18      	ldr	r0, [r3, #32]
 8013f80:	b138      	cbz	r0, 8013f92 <rcl_wait_set_clear+0xc2>
 8013f82:	69da      	ldr	r2, [r3, #28]
 8013f84:	2100      	movs	r1, #0
 8013f86:	0092      	lsls	r2, r2, #2
 8013f88:	f005 ffd6 	bl	8019f38 <memset>
 8013f8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f8e:	2200      	movs	r2, #0
 8013f90:	61da      	str	r2, [r3, #28]
 8013f92:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013f94:	b138      	cbz	r0, 8013fa6 <rcl_wait_set_clear+0xd6>
 8013f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013f98:	2100      	movs	r1, #0
 8013f9a:	0092      	lsls	r2, r2, #2
 8013f9c:	f005 ffcc 	bl	8019f38 <memset>
 8013fa0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	629a      	str	r2, [r3, #40]	@ 0x28
 8013fa6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013fa8:	b138      	cbz	r0, 8013fba <rcl_wait_set_clear+0xea>
 8013faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013fac:	2100      	movs	r1, #0
 8013fae:	0092      	lsls	r2, r2, #2
 8013fb0:	f005 ffc2 	bl	8019f38 <memset>
 8013fb4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8013fba:	2000      	movs	r0, #0
 8013fbc:	bd10      	pop	{r4, pc}
 8013fbe:	200b      	movs	r0, #11
 8013fc0:	4770      	bx	lr
 8013fc2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013fc6:	bd10      	pop	{r4, pc}

08013fc8 <rcl_wait_set_resize>:
 8013fc8:	2800      	cmp	r0, #0
 8013fca:	f000 81a1 	beq.w	8014310 <rcl_wait_set_resize+0x348>
 8013fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd2:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	4604      	mov	r4, r0
 8013fda:	f1ba 0f00 	cmp.w	sl, #0
 8013fde:	f000 8199 	beq.w	8014314 <rcl_wait_set_resize+0x34c>
 8013fe2:	f04f 0800 	mov.w	r8, #0
 8013fe6:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8013fea:	461e      	mov	r6, r3
 8013fec:	460f      	mov	r7, r1
 8013fee:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8013ff2:	4615      	mov	r5, r2
 8013ff4:	f8c0 8004 	str.w	r8, [r0, #4]
 8013ff8:	6800      	ldr	r0, [r0, #0]
 8013ffa:	f8ca 8000 	str.w	r8, [sl]
 8013ffe:	2900      	cmp	r1, #0
 8014000:	f000 80cf 	beq.w	80141a2 <rcl_wait_set_resize+0x1da>
 8014004:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8014008:	464a      	mov	r2, r9
 801400a:	4651      	mov	r1, sl
 801400c:	9301      	str	r3, [sp, #4]
 801400e:	4798      	blx	r3
 8014010:	9b01      	ldr	r3, [sp, #4]
 8014012:	6020      	str	r0, [r4, #0]
 8014014:	2800      	cmp	r0, #0
 8014016:	f000 8109 	beq.w	801422c <rcl_wait_set_resize+0x264>
 801401a:	4652      	mov	r2, sl
 801401c:	4641      	mov	r1, r8
 801401e:	9301      	str	r3, [sp, #4]
 8014020:	f005 ff8a 	bl	8019f38 <memset>
 8014024:	6067      	str	r7, [r4, #4]
 8014026:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8014028:	9b01      	ldr	r3, [sp, #4]
 801402a:	68b8      	ldr	r0, [r7, #8]
 801402c:	f8c7 8004 	str.w	r8, [r7, #4]
 8014030:	464a      	mov	r2, r9
 8014032:	4651      	mov	r1, sl
 8014034:	4798      	blx	r3
 8014036:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014038:	60b8      	str	r0, [r7, #8]
 801403a:	689f      	ldr	r7, [r3, #8]
 801403c:	2f00      	cmp	r7, #0
 801403e:	f000 80f0 	beq.w	8014222 <rcl_wait_set_resize+0x25a>
 8014042:	4652      	mov	r2, sl
 8014044:	4641      	mov	r1, r8
 8014046:	4638      	mov	r0, r7
 8014048:	f005 ff76 	bl	8019f38 <memset>
 801404c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014050:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8014054:	68a0      	ldr	r0, [r4, #8]
 8014056:	2700      	movs	r7, #0
 8014058:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 801405c:	60e7      	str	r7, [r4, #12]
 801405e:	f8ca 700c 	str.w	r7, [sl, #12]
 8014062:	2d00      	cmp	r5, #0
 8014064:	f040 80b0 	bne.w	80141c8 <rcl_wait_set_resize+0x200>
 8014068:	b130      	cbz	r0, 8014078 <rcl_wait_set_resize+0xb0>
 801406a:	4641      	mov	r1, r8
 801406c:	4790      	blx	r2
 801406e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014072:	60a5      	str	r5, [r4, #8]
 8014074:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8014078:	f8da 0014 	ldr.w	r0, [sl, #20]
 801407c:	2700      	movs	r7, #0
 801407e:	19ad      	adds	r5, r5, r6
 8014080:	f8ca 7010 	str.w	r7, [sl, #16]
 8014084:	f040 80b8 	bne.w	80141f8 <rcl_wait_set_resize+0x230>
 8014088:	b148      	cbz	r0, 801409e <rcl_wait_set_resize+0xd6>
 801408a:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 801408e:	4641      	mov	r1, r8
 8014090:	4798      	blx	r3
 8014092:	f8ca 5014 	str.w	r5, [sl, #20]
 8014096:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801409a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801409e:	6920      	ldr	r0, [r4, #16]
 80140a0:	2500      	movs	r5, #0
 80140a2:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80140a6:	6165      	str	r5, [r4, #20]
 80140a8:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 80140ac:	2e00      	cmp	r6, #0
 80140ae:	f040 80c1 	bne.w	8014234 <rcl_wait_set_resize+0x26c>
 80140b2:	b140      	cbz	r0, 80140c6 <rcl_wait_set_resize+0xfe>
 80140b4:	4641      	mov	r1, r8
 80140b6:	47c8      	blx	r9
 80140b8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80140bc:	6126      	str	r6, [r4, #16]
 80140be:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80140c2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80140c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140c8:	69a0      	ldr	r0, [r4, #24]
 80140ca:	2500      	movs	r5, #0
 80140cc:	61e5      	str	r5, [r4, #28]
 80140ce:	f8ca 5018 	str.w	r5, [sl, #24]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	f040 80c2 	bne.w	801425c <rcl_wait_set_resize+0x294>
 80140d8:	b128      	cbz	r0, 80140e6 <rcl_wait_set_resize+0x11e>
 80140da:	4641      	mov	r1, r8
 80140dc:	47c8      	blx	r9
 80140de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80140e0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80140e4:	61a3      	str	r3, [r4, #24]
 80140e6:	f8da 0020 	ldr.w	r0, [sl, #32]
 80140ea:	b130      	cbz	r0, 80140fa <rcl_wait_set_resize+0x132>
 80140ec:	4641      	mov	r1, r8
 80140ee:	47c8      	blx	r9
 80140f0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80140f4:	2300      	movs	r3, #0
 80140f6:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80140fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80140fc:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8014100:	6a20      	ldr	r0, [r4, #32]
 8014102:	2500      	movs	r5, #0
 8014104:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8014108:	6265      	str	r5, [r4, #36]	@ 0x24
 801410a:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 801410e:	2b00      	cmp	r3, #0
 8014110:	f000 80c8 	beq.w	80142a4 <rcl_wait_set_resize+0x2dc>
 8014114:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8014118:	4632      	mov	r2, r6
 801411a:	4649      	mov	r1, r9
 801411c:	47c0      	blx	r8
 801411e:	6220      	str	r0, [r4, #32]
 8014120:	2800      	cmp	r0, #0
 8014122:	f000 8083 	beq.w	801422c <rcl_wait_set_resize+0x264>
 8014126:	464a      	mov	r2, r9
 8014128:	4629      	mov	r1, r5
 801412a:	f005 ff05 	bl	8019f38 <memset>
 801412e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014132:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014134:	6263      	str	r3, [r4, #36]	@ 0x24
 8014136:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 801413a:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 801413e:	4632      	mov	r2, r6
 8014140:	4649      	mov	r1, r9
 8014142:	47c0      	blx	r8
 8014144:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014146:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 801414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801414c:	2b00      	cmp	r3, #0
 801414e:	f000 80fb 	beq.w	8014348 <rcl_wait_set_resize+0x380>
 8014152:	464a      	mov	r2, r9
 8014154:	4629      	mov	r1, r5
 8014156:	4618      	mov	r0, r3
 8014158:	f005 feee 	bl	8019f38 <memset>
 801415c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014160:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014162:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8014166:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8014168:	2500      	movs	r5, #0
 801416a:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 801416e:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8014170:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8014174:	2b00      	cmp	r3, #0
 8014176:	f040 80a9 	bne.w	80142cc <rcl_wait_set_resize+0x304>
 801417a:	b128      	cbz	r0, 8014188 <rcl_wait_set_resize+0x1c0>
 801417c:	4631      	mov	r1, r6
 801417e:	47b8      	blx	r7
 8014180:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014182:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014186:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014188:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801418c:	b128      	cbz	r0, 801419a <rcl_wait_set_resize+0x1d2>
 801418e:	4631      	mov	r1, r6
 8014190:	47b8      	blx	r7
 8014192:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014194:	2200      	movs	r2, #0
 8014196:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 801419a:	2000      	movs	r0, #0
 801419c:	b003      	add	sp, #12
 801419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141a2:	b120      	cbz	r0, 80141ae <rcl_wait_set_resize+0x1e6>
 80141a4:	4649      	mov	r1, r9
 80141a6:	47d8      	blx	fp
 80141a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80141ac:	6027      	str	r7, [r4, #0]
 80141ae:	f8da 0008 	ldr.w	r0, [sl, #8]
 80141b2:	2800      	cmp	r0, #0
 80141b4:	f43f af4c 	beq.w	8014050 <rcl_wait_set_resize+0x88>
 80141b8:	4649      	mov	r1, r9
 80141ba:	47d8      	blx	fp
 80141bc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80141c0:	2300      	movs	r3, #0
 80141c2:	e9ca 3301 	strd	r3, r3, [sl, #4]
 80141c6:	e743      	b.n	8014050 <rcl_wait_set_resize+0x88>
 80141c8:	4642      	mov	r2, r8
 80141ca:	ea4f 0885 	mov.w	r8, r5, lsl #2
 80141ce:	4641      	mov	r1, r8
 80141d0:	4798      	blx	r3
 80141d2:	60a0      	str	r0, [r4, #8]
 80141d4:	b350      	cbz	r0, 801422c <rcl_wait_set_resize+0x264>
 80141d6:	4642      	mov	r2, r8
 80141d8:	4639      	mov	r1, r7
 80141da:	f005 fead 	bl	8019f38 <memset>
 80141de:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80141e2:	60e5      	str	r5, [r4, #12]
 80141e4:	2700      	movs	r7, #0
 80141e6:	19ad      	adds	r5, r5, r6
 80141e8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80141ec:	f8da 0014 	ldr.w	r0, [sl, #20]
 80141f0:	f8ca 7010 	str.w	r7, [sl, #16]
 80141f4:	f43f af48 	beq.w	8014088 <rcl_wait_set_resize+0xc0>
 80141f8:	00ad      	lsls	r5, r5, #2
 80141fa:	4642      	mov	r2, r8
 80141fc:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8014200:	4629      	mov	r1, r5
 8014202:	4798      	blx	r3
 8014204:	4680      	mov	r8, r0
 8014206:	f8ca 0014 	str.w	r0, [sl, #20]
 801420a:	2800      	cmp	r0, #0
 801420c:	f000 8085 	beq.w	801431a <rcl_wait_set_resize+0x352>
 8014210:	462a      	mov	r2, r5
 8014212:	4639      	mov	r1, r7
 8014214:	f005 fe90 	bl	8019f38 <memset>
 8014218:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801421c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8014220:	e73d      	b.n	801409e <rcl_wait_set_resize+0xd6>
 8014222:	6820      	ldr	r0, [r4, #0]
 8014224:	4649      	mov	r1, r9
 8014226:	47d8      	blx	fp
 8014228:	e9c4 7700 	strd	r7, r7, [r4]
 801422c:	200a      	movs	r0, #10
 801422e:	b003      	add	sp, #12
 8014230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014234:	4642      	mov	r2, r8
 8014236:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801423a:	4641      	mov	r1, r8
 801423c:	47b8      	blx	r7
 801423e:	6120      	str	r0, [r4, #16]
 8014240:	2800      	cmp	r0, #0
 8014242:	d0f3      	beq.n	801422c <rcl_wait_set_resize+0x264>
 8014244:	4642      	mov	r2, r8
 8014246:	4629      	mov	r1, r5
 8014248:	f005 fe76 	bl	8019f38 <memset>
 801424c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014250:	6166      	str	r6, [r4, #20]
 8014252:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8014256:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801425a:	e734      	b.n	80140c6 <rcl_wait_set_resize+0xfe>
 801425c:	009e      	lsls	r6, r3, #2
 801425e:	4642      	mov	r2, r8
 8014260:	4631      	mov	r1, r6
 8014262:	47b8      	blx	r7
 8014264:	61a0      	str	r0, [r4, #24]
 8014266:	2800      	cmp	r0, #0
 8014268:	d0e0      	beq.n	801422c <rcl_wait_set_resize+0x264>
 801426a:	4632      	mov	r2, r6
 801426c:	4629      	mov	r1, r5
 801426e:	f005 fe63 	bl	8019f38 <memset>
 8014272:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8014276:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014278:	61e3      	str	r3, [r4, #28]
 801427a:	f8da 0020 	ldr.w	r0, [sl, #32]
 801427e:	f8ca 501c 	str.w	r5, [sl, #28]
 8014282:	4642      	mov	r2, r8
 8014284:	4631      	mov	r1, r6
 8014286:	47b8      	blx	r7
 8014288:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801428a:	f8ca 0020 	str.w	r0, [sl, #32]
 801428e:	6a1f      	ldr	r7, [r3, #32]
 8014290:	2f00      	cmp	r7, #0
 8014292:	d053      	beq.n	801433c <rcl_wait_set_resize+0x374>
 8014294:	4632      	mov	r2, r6
 8014296:	4629      	mov	r1, r5
 8014298:	4638      	mov	r0, r7
 801429a:	f005 fe4d 	bl	8019f38 <memset>
 801429e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80142a2:	e72a      	b.n	80140fa <rcl_wait_set_resize+0x132>
 80142a4:	b128      	cbz	r0, 80142b2 <rcl_wait_set_resize+0x2ea>
 80142a6:	4631      	mov	r1, r6
 80142a8:	47b8      	blx	r7
 80142aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80142ac:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80142b0:	6223      	str	r3, [r4, #32]
 80142b2:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80142b6:	2800      	cmp	r0, #0
 80142b8:	f43f af52 	beq.w	8014160 <rcl_wait_set_resize+0x198>
 80142bc:	4631      	mov	r1, r6
 80142be:	47b8      	blx	r7
 80142c0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80142c4:	2300      	movs	r3, #0
 80142c6:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 80142ca:	e749      	b.n	8014160 <rcl_wait_set_resize+0x198>
 80142cc:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80142d0:	4632      	mov	r2, r6
 80142d2:	4649      	mov	r1, r9
 80142d4:	47c0      	blx	r8
 80142d6:	62a0      	str	r0, [r4, #40]	@ 0x28
 80142d8:	2800      	cmp	r0, #0
 80142da:	d0a7      	beq.n	801422c <rcl_wait_set_resize+0x264>
 80142dc:	464a      	mov	r2, r9
 80142de:	4629      	mov	r1, r5
 80142e0:	f005 fe2a 	bl	8019f38 <memset>
 80142e4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80142e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80142ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80142ec:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80142f0:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 80142f4:	4632      	mov	r2, r6
 80142f6:	4649      	mov	r1, r9
 80142f8:	47c0      	blx	r8
 80142fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80142fc:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8014300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014302:	b34b      	cbz	r3, 8014358 <rcl_wait_set_resize+0x390>
 8014304:	464a      	mov	r2, r9
 8014306:	4629      	mov	r1, r5
 8014308:	4618      	mov	r0, r3
 801430a:	f005 fe15 	bl	8019f38 <memset>
 801430e:	e744      	b.n	801419a <rcl_wait_set_resize+0x1d2>
 8014310:	200b      	movs	r0, #11
 8014312:	4770      	bx	lr
 8014314:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014318:	e789      	b.n	801422e <rcl_wait_set_resize+0x266>
 801431a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801431c:	68a0      	ldr	r0, [r4, #8]
 801431e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014320:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8014322:	4790      	blx	r2
 8014324:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014326:	6920      	ldr	r0, [r4, #16]
 8014328:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801432a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801432c:	f8c4 800c 	str.w	r8, [r4, #12]
 8014330:	f8c4 8008 	str.w	r8, [r4, #8]
 8014334:	4790      	blx	r2
 8014336:	e9c4 8804 	strd	r8, r8, [r4, #16]
 801433a:	e777      	b.n	801422c <rcl_wait_set_resize+0x264>
 801433c:	69a0      	ldr	r0, [r4, #24]
 801433e:	4641      	mov	r1, r8
 8014340:	47c8      	blx	r9
 8014342:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8014346:	e771      	b.n	801422c <rcl_wait_set_resize+0x264>
 8014348:	6a20      	ldr	r0, [r4, #32]
 801434a:	9301      	str	r3, [sp, #4]
 801434c:	4631      	mov	r1, r6
 801434e:	47b8      	blx	r7
 8014350:	9b01      	ldr	r3, [sp, #4]
 8014352:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8014356:	e769      	b.n	801422c <rcl_wait_set_resize+0x264>
 8014358:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801435a:	9301      	str	r3, [sp, #4]
 801435c:	4631      	mov	r1, r6
 801435e:	47b8      	blx	r7
 8014360:	9b01      	ldr	r3, [sp, #4]
 8014362:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8014366:	e761      	b.n	801422c <rcl_wait_set_resize+0x264>

08014368 <rcl_wait_set_init>:
 8014368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801436c:	b084      	sub	sp, #16
 801436e:	4604      	mov	r4, r0
 8014370:	a810      	add	r0, sp, #64	@ 0x40
 8014372:	460d      	mov	r5, r1
 8014374:	4690      	mov	r8, r2
 8014376:	461f      	mov	r7, r3
 8014378:	f7f8 fe5a 	bl	800d030 <rcutils_allocator_is_valid>
 801437c:	2800      	cmp	r0, #0
 801437e:	d068      	beq.n	8014452 <rcl_wait_set_init+0xea>
 8014380:	2c00      	cmp	r4, #0
 8014382:	d066      	beq.n	8014452 <rcl_wait_set_init+0xea>
 8014384:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8014386:	b126      	cbz	r6, 8014392 <rcl_wait_set_init+0x2a>
 8014388:	2564      	movs	r5, #100	@ 0x64
 801438a:	4628      	mov	r0, r5
 801438c:	b004      	add	sp, #16
 801438e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014392:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014394:	2b00      	cmp	r3, #0
 8014396:	d05c      	beq.n	8014452 <rcl_wait_set_init+0xea>
 8014398:	4618      	mov	r0, r3
 801439a:	f7fe f9a5 	bl	80126e8 <rcl_context_is_valid>
 801439e:	2800      	cmp	r0, #0
 80143a0:	d05c      	beq.n	801445c <rcl_wait_set_init+0xf4>
 80143a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80143a4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80143a6:	205c      	movs	r0, #92	@ 0x5c
 80143a8:	4798      	blx	r3
 80143aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80143ac:	2800      	cmp	r0, #0
 80143ae:	d059      	beq.n	8014464 <rcl_wait_set_init+0xfc>
 80143b0:	4631      	mov	r1, r6
 80143b2:	225c      	movs	r2, #92	@ 0x5c
 80143b4:	f005 fdc0 	bl	8019f38 <memset>
 80143b8:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 80143bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143be:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 80143c2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80143c6:	eb03 0e02 	add.w	lr, r3, r2
 80143ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80143cc:	449e      	add	lr, r3
 80143ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143d0:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80143d4:	f8d3 a000 	ldr.w	sl, [r3]
 80143d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80143dc:	e9c9 6601 	strd	r6, r6, [r9, #4]
 80143e0:	e9c9 6604 	strd	r6, r6, [r9, #16]
 80143e4:	e9c9 6607 	strd	r6, r6, [r9, #28]
 80143e8:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 80143ec:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 80143f0:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 80143f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80143f6:	44c6      	add	lr, r8
 80143f8:	f8dc 3000 	ldr.w	r3, [ip]
 80143fc:	6033      	str	r3, [r6, #0]
 80143fe:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 8014402:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8014406:	f002 fe99 	bl	801713c <rmw_create_wait_set>
 801440a:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 801440e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014410:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8014412:	b32b      	cbz	r3, 8014460 <rcl_wait_set_init+0xf8>
 8014414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014416:	9302      	str	r3, [sp, #8]
 8014418:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801441a:	9301      	str	r3, [sp, #4]
 801441c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801441e:	9300      	str	r3, [sp, #0]
 8014420:	4629      	mov	r1, r5
 8014422:	463b      	mov	r3, r7
 8014424:	4642      	mov	r2, r8
 8014426:	4620      	mov	r0, r4
 8014428:	f7ff fdce 	bl	8013fc8 <rcl_wait_set_resize>
 801442c:	4605      	mov	r5, r0
 801442e:	2800      	cmp	r0, #0
 8014430:	d0ab      	beq.n	801438a <rcl_wait_set_init+0x22>
 8014432:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014434:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8014436:	b133      	cbz	r3, 8014446 <rcl_wait_set_init+0xde>
 8014438:	4618      	mov	r0, r3
 801443a:	f002 fe89 	bl	8017150 <rmw_destroy_wait_set>
 801443e:	b198      	cbz	r0, 8014468 <rcl_wait_set_init+0x100>
 8014440:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014442:	f44f 7561 	mov.w	r5, #900	@ 0x384
 8014446:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014448:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801444a:	4798      	blx	r3
 801444c:	2300      	movs	r3, #0
 801444e:	6323      	str	r3, [r4, #48]	@ 0x30
 8014450:	e79b      	b.n	801438a <rcl_wait_set_init+0x22>
 8014452:	250b      	movs	r5, #11
 8014454:	4628      	mov	r0, r5
 8014456:	b004      	add	sp, #16
 8014458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801445c:	2565      	movs	r5, #101	@ 0x65
 801445e:	e794      	b.n	801438a <rcl_wait_set_init+0x22>
 8014460:	250a      	movs	r5, #10
 8014462:	e7f0      	b.n	8014446 <rcl_wait_set_init+0xde>
 8014464:	250a      	movs	r5, #10
 8014466:	e790      	b.n	801438a <rcl_wait_set_init+0x22>
 8014468:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801446a:	e7ec      	b.n	8014446 <rcl_wait_set_init+0xde>

0801446c <rcl_wait_set_add_guard_condition>:
 801446c:	b318      	cbz	r0, 80144b6 <rcl_wait_set_add_guard_condition+0x4a>
 801446e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014470:	b570      	push	{r4, r5, r6, lr}
 8014472:	4604      	mov	r4, r0
 8014474:	b30b      	cbz	r3, 80144ba <rcl_wait_set_add_guard_condition+0x4e>
 8014476:	b319      	cbz	r1, 80144c0 <rcl_wait_set_add_guard_condition+0x54>
 8014478:	68dd      	ldr	r5, [r3, #12]
 801447a:	68c0      	ldr	r0, [r0, #12]
 801447c:	4285      	cmp	r5, r0
 801447e:	d217      	bcs.n	80144b0 <rcl_wait_set_add_guard_condition+0x44>
 8014480:	68a0      	ldr	r0, [r4, #8]
 8014482:	1c6e      	adds	r6, r5, #1
 8014484:	60de      	str	r6, [r3, #12]
 8014486:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801448a:	b102      	cbz	r2, 801448e <rcl_wait_set_add_guard_condition+0x22>
 801448c:	6015      	str	r5, [r2, #0]
 801448e:	4608      	mov	r0, r1
 8014490:	f004 fc04 	bl	8018c9c <rcl_guard_condition_get_rmw_handle>
 8014494:	b150      	cbz	r0, 80144ac <rcl_wait_set_add_guard_condition+0x40>
 8014496:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014498:	6842      	ldr	r2, [r0, #4]
 801449a:	695b      	ldr	r3, [r3, #20]
 801449c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80144a0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80144a2:	6913      	ldr	r3, [r2, #16]
 80144a4:	3301      	adds	r3, #1
 80144a6:	2000      	movs	r0, #0
 80144a8:	6113      	str	r3, [r2, #16]
 80144aa:	bd70      	pop	{r4, r5, r6, pc}
 80144ac:	2001      	movs	r0, #1
 80144ae:	bd70      	pop	{r4, r5, r6, pc}
 80144b0:	f240 3086 	movw	r0, #902	@ 0x386
 80144b4:	bd70      	pop	{r4, r5, r6, pc}
 80144b6:	200b      	movs	r0, #11
 80144b8:	4770      	bx	lr
 80144ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80144be:	bd70      	pop	{r4, r5, r6, pc}
 80144c0:	200b      	movs	r0, #11
 80144c2:	bd70      	pop	{r4, r5, r6, pc}

080144c4 <rcl_wait_set_add_timer>:
 80144c4:	b328      	cbz	r0, 8014512 <rcl_wait_set_add_timer+0x4e>
 80144c6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80144c8:	b570      	push	{r4, r5, r6, lr}
 80144ca:	4604      	mov	r4, r0
 80144cc:	b31b      	cbz	r3, 8014516 <rcl_wait_set_add_timer+0x52>
 80144ce:	b329      	cbz	r1, 801451c <rcl_wait_set_add_timer+0x58>
 80144d0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80144d2:	6965      	ldr	r5, [r4, #20]
 80144d4:	42a8      	cmp	r0, r5
 80144d6:	d219      	bcs.n	801450c <rcl_wait_set_add_timer+0x48>
 80144d8:	6925      	ldr	r5, [r4, #16]
 80144da:	1c46      	adds	r6, r0, #1
 80144dc:	641e      	str	r6, [r3, #64]	@ 0x40
 80144de:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80144e2:	b102      	cbz	r2, 80144e6 <rcl_wait_set_add_timer+0x22>
 80144e4:	6010      	str	r0, [r2, #0]
 80144e6:	4608      	mov	r0, r1
 80144e8:	f7ff fbea 	bl	8013cc0 <rcl_timer_get_guard_condition>
 80144ec:	b160      	cbz	r0, 8014508 <rcl_wait_set_add_timer+0x44>
 80144ee:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80144f0:	68e3      	ldr	r3, [r4, #12]
 80144f2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80144f4:	3b01      	subs	r3, #1
 80144f6:	441d      	add	r5, r3
 80144f8:	f004 fbd0 	bl	8018c9c <rcl_guard_condition_get_rmw_handle>
 80144fc:	b180      	cbz	r0, 8014520 <rcl_wait_set_add_timer+0x5c>
 80144fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014500:	6842      	ldr	r2, [r0, #4]
 8014502:	695b      	ldr	r3, [r3, #20]
 8014504:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014508:	2000      	movs	r0, #0
 801450a:	bd70      	pop	{r4, r5, r6, pc}
 801450c:	f240 3086 	movw	r0, #902	@ 0x386
 8014510:	bd70      	pop	{r4, r5, r6, pc}
 8014512:	200b      	movs	r0, #11
 8014514:	4770      	bx	lr
 8014516:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801451a:	bd70      	pop	{r4, r5, r6, pc}
 801451c:	200b      	movs	r0, #11
 801451e:	bd70      	pop	{r4, r5, r6, pc}
 8014520:	2001      	movs	r0, #1
 8014522:	bd70      	pop	{r4, r5, r6, pc}

08014524 <rcl_wait_set_add_client>:
 8014524:	b318      	cbz	r0, 801456e <rcl_wait_set_add_client+0x4a>
 8014526:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	4604      	mov	r4, r0
 801452c:	b30b      	cbz	r3, 8014572 <rcl_wait_set_add_client+0x4e>
 801452e:	b319      	cbz	r1, 8014578 <rcl_wait_set_add_client+0x54>
 8014530:	699d      	ldr	r5, [r3, #24]
 8014532:	69c0      	ldr	r0, [r0, #28]
 8014534:	4285      	cmp	r5, r0
 8014536:	d217      	bcs.n	8014568 <rcl_wait_set_add_client+0x44>
 8014538:	69a0      	ldr	r0, [r4, #24]
 801453a:	1c6e      	adds	r6, r5, #1
 801453c:	619e      	str	r6, [r3, #24]
 801453e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8014542:	b102      	cbz	r2, 8014546 <rcl_wait_set_add_client+0x22>
 8014544:	6015      	str	r5, [r2, #0]
 8014546:	4608      	mov	r0, r1
 8014548:	f7fd ffe6 	bl	8012518 <rcl_client_get_rmw_handle>
 801454c:	b150      	cbz	r0, 8014564 <rcl_wait_set_add_client+0x40>
 801454e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014550:	6842      	ldr	r2, [r0, #4]
 8014552:	6a1b      	ldr	r3, [r3, #32]
 8014554:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014558:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801455a:	69d3      	ldr	r3, [r2, #28]
 801455c:	3301      	adds	r3, #1
 801455e:	2000      	movs	r0, #0
 8014560:	61d3      	str	r3, [r2, #28]
 8014562:	bd70      	pop	{r4, r5, r6, pc}
 8014564:	2001      	movs	r0, #1
 8014566:	bd70      	pop	{r4, r5, r6, pc}
 8014568:	f240 3086 	movw	r0, #902	@ 0x386
 801456c:	bd70      	pop	{r4, r5, r6, pc}
 801456e:	200b      	movs	r0, #11
 8014570:	4770      	bx	lr
 8014572:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014576:	bd70      	pop	{r4, r5, r6, pc}
 8014578:	200b      	movs	r0, #11
 801457a:	bd70      	pop	{r4, r5, r6, pc}

0801457c <rcl_wait_set_add_service>:
 801457c:	b318      	cbz	r0, 80145c6 <rcl_wait_set_add_service+0x4a>
 801457e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014580:	b570      	push	{r4, r5, r6, lr}
 8014582:	4604      	mov	r4, r0
 8014584:	b30b      	cbz	r3, 80145ca <rcl_wait_set_add_service+0x4e>
 8014586:	b319      	cbz	r1, 80145d0 <rcl_wait_set_add_service+0x54>
 8014588:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801458a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801458c:	4285      	cmp	r5, r0
 801458e:	d217      	bcs.n	80145c0 <rcl_wait_set_add_service+0x44>
 8014590:	6a20      	ldr	r0, [r4, #32]
 8014592:	1c6e      	adds	r6, r5, #1
 8014594:	625e      	str	r6, [r3, #36]	@ 0x24
 8014596:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801459a:	b102      	cbz	r2, 801459e <rcl_wait_set_add_service+0x22>
 801459c:	6015      	str	r5, [r2, #0]
 801459e:	4608      	mov	r0, r1
 80145a0:	f7fe fd88 	bl	80130b4 <rcl_service_get_rmw_handle>
 80145a4:	b150      	cbz	r0, 80145bc <rcl_wait_set_add_service+0x40>
 80145a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80145a8:	6842      	ldr	r2, [r0, #4]
 80145aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ac:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80145b0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80145b2:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80145b4:	3301      	adds	r3, #1
 80145b6:	2000      	movs	r0, #0
 80145b8:	6293      	str	r3, [r2, #40]	@ 0x28
 80145ba:	bd70      	pop	{r4, r5, r6, pc}
 80145bc:	2001      	movs	r0, #1
 80145be:	bd70      	pop	{r4, r5, r6, pc}
 80145c0:	f240 3086 	movw	r0, #902	@ 0x386
 80145c4:	bd70      	pop	{r4, r5, r6, pc}
 80145c6:	200b      	movs	r0, #11
 80145c8:	4770      	bx	lr
 80145ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80145ce:	bd70      	pop	{r4, r5, r6, pc}
 80145d0:	200b      	movs	r0, #11
 80145d2:	bd70      	pop	{r4, r5, r6, pc}
 80145d4:	0000      	movs	r0, r0
	...

080145d8 <rcl_wait>:
 80145d8:	2800      	cmp	r0, #0
 80145da:	f000 81d4 	beq.w	8014986 <rcl_wait+0x3ae>
 80145de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e2:	ed2d 8b02 	vpush	{d8}
 80145e6:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 80145e8:	b099      	sub	sp, #100	@ 0x64
 80145ea:	4604      	mov	r4, r0
 80145ec:	2d00      	cmp	r5, #0
 80145ee:	f000 8178 	beq.w	80148e2 <rcl_wait+0x30a>
 80145f2:	461f      	mov	r7, r3
 80145f4:	6843      	ldr	r3, [r0, #4]
 80145f6:	4690      	mov	r8, r2
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	f000 809b 	beq.w	8014734 <rcl_wait+0x15c>
 80145fe:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8014600:	2e00      	cmp	r6, #0
 8014602:	f000 80b2 	beq.w	801476a <rcl_wait+0x192>
 8014606:	2100      	movs	r1, #0
 8014608:	468c      	mov	ip, r1
 801460a:	460a      	mov	r2, r1
 801460c:	46a6      	mov	lr, r4
 801460e:	f8de 3010 	ldr.w	r3, [lr, #16]
 8014612:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014616:	b173      	cbz	r3, 8014636 <rcl_wait+0x5e>
 8014618:	f8de 300c 	ldr.w	r3, [lr, #12]
 801461c:	6968      	ldr	r0, [r5, #20]
 801461e:	440b      	add	r3, r1
 8014620:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8014624:	b13c      	cbz	r4, 8014636 <rcl_wait+0x5e>
 8014626:	692b      	ldr	r3, [r5, #16]
 8014628:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 801462c:	3301      	adds	r3, #1
 801462e:	612b      	str	r3, [r5, #16]
 8014630:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 8014634:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8014636:	3101      	adds	r1, #1
 8014638:	f14c 0c00 	adc.w	ip, ip, #0
 801463c:	42b1      	cmp	r1, r6
 801463e:	f17c 0300 	sbcs.w	r3, ip, #0
 8014642:	d3e4      	bcc.n	801460e <rcl_wait+0x36>
 8014644:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 80148f0 <rcl_wait+0x318>
 8014648:	ea58 0307 	orrs.w	r3, r8, r7
 801464c:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8014650:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8014654:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8014658:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 801465c:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8014660:	4674      	mov	r4, lr
 8014662:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8014666:	f000 8094 	beq.w	8014792 <rcl_wait+0x1ba>
 801466a:	2e00      	cmp	r6, #0
 801466c:	f000 8145 	beq.w	80148fa <rcl_wait+0x322>
 8014670:	2500      	movs	r5, #0
 8014672:	46bb      	mov	fp, r7
 8014674:	e02c      	b.n	80146d0 <rcl_wait+0xf8>
 8014676:	6923      	ldr	r3, [r4, #16]
 8014678:	f853 0009 	ldr.w	r0, [r3, r9]
 801467c:	a908      	add	r1, sp, #32
 801467e:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014682:	f7ff fafb 	bl	8013c7c <rcl_timer_get_next_call_time>
 8014686:	f240 3321 	movw	r3, #801	@ 0x321
 801468a:	4298      	cmp	r0, r3
 801468c:	f000 80bb 	beq.w	8014806 <rcl_wait+0x22e>
 8014690:	2800      	cmp	r0, #0
 8014692:	d165      	bne.n	8014760 <rcl_wait+0x188>
 8014694:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8014698:	7830      	ldrb	r0, [r6, #0]
 801469a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801469c:	ab18      	add	r3, sp, #96	@ 0x60
 801469e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80146a2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80146a6:	9205      	str	r2, [sp, #20]
 80146a8:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80146ac:	4297      	cmp	r7, r2
 80146ae:	9a05      	ldr	r2, [sp, #20]
 80146b0:	eb71 0202 	sbcs.w	r2, r1, r2
 80146b4:	da06      	bge.n	80146c4 <rcl_wait+0xec>
 80146b6:	e943 7108 	strd	r7, r1, [r3, #-32]
 80146ba:	ab18      	add	r3, sp, #96	@ 0x60
 80146bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80146c0:	f840 6c30 	str.w	r6, [r0, #-48]
 80146c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80146c6:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 80146c8:	3501      	adds	r5, #1
 80146ca:	42b5      	cmp	r5, r6
 80146cc:	f080 8114 	bcs.w	80148f8 <rcl_wait+0x320>
 80146d0:	6923      	ldr	r3, [r4, #16]
 80146d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80146d6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80146da:	2800      	cmp	r0, #0
 80146dc:	d0f4      	beq.n	80146c8 <rcl_wait+0xf0>
 80146de:	a907      	add	r1, sp, #28
 80146e0:	f7ff f9f8 	bl	8013ad4 <rcl_timer_clock>
 80146e4:	4603      	mov	r3, r0
 80146e6:	2800      	cmp	r0, #0
 80146e8:	f040 8141 	bne.w	801496e <rcl_wait+0x396>
 80146ec:	9807      	ldr	r0, [sp, #28]
 80146ee:	7802      	ldrb	r2, [r0, #0]
 80146f0:	2a01      	cmp	r2, #1
 80146f2:	d1c0      	bne.n	8014676 <rcl_wait+0x9e>
 80146f4:	f10d 011b 	add.w	r1, sp, #27
 80146f8:	f88d 301b 	strb.w	r3, [sp, #27]
 80146fc:	f7fe ffba 	bl	8013674 <rcl_is_enabled_ros_time_override>
 8014700:	4602      	mov	r2, r0
 8014702:	2800      	cmp	r0, #0
 8014704:	f040 8133 	bne.w	801496e <rcl_wait+0x396>
 8014708:	6923      	ldr	r3, [r4, #16]
 801470a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 801470e:	f853 0009 	ldr.w	r0, [r3, r9]
 8014712:	2900      	cmp	r1, #0
 8014714:	d0b0      	beq.n	8014678 <rcl_wait+0xa0>
 8014716:	ae08      	add	r6, sp, #32
 8014718:	4631      	mov	r1, r6
 801471a:	f88d 2020 	strb.w	r2, [sp, #32]
 801471e:	f7ff fa73 	bl	8013c08 <rcl_timer_is_ready>
 8014722:	2800      	cmp	r0, #0
 8014724:	f040 8123 	bne.w	801496e <rcl_wait+0x396>
 8014728:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d0c9      	beq.n	80146c4 <rcl_wait+0xec>
 8014730:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014732:	e02f      	b.n	8014794 <rcl_wait+0x1bc>
 8014734:	68c3      	ldr	r3, [r0, #12]
 8014736:	2b00      	cmp	r3, #0
 8014738:	f47f af61 	bne.w	80145fe <rcl_wait+0x26>
 801473c:	6943      	ldr	r3, [r0, #20]
 801473e:	2b00      	cmp	r3, #0
 8014740:	f47f af5d 	bne.w	80145fe <rcl_wait+0x26>
 8014744:	69c3      	ldr	r3, [r0, #28]
 8014746:	2b00      	cmp	r3, #0
 8014748:	f47f af59 	bne.w	80145fe <rcl_wait+0x26>
 801474c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801474e:	2b00      	cmp	r3, #0
 8014750:	f47f af55 	bne.w	80145fe <rcl_wait+0x26>
 8014754:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8014756:	2b00      	cmp	r3, #0
 8014758:	f47f af51 	bne.w	80145fe <rcl_wait+0x26>
 801475c:	f240 3085 	movw	r0, #901	@ 0x385
 8014760:	b019      	add	sp, #100	@ 0x64
 8014762:	ecbd 8b02 	vpop	{d8}
 8014766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801476a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801476e:	f04f 32ff 	mov.w	r2, #4294967295
 8014772:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8014776:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 801477a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 801477e:	ea58 0307 	orrs.w	r3, r8, r7
 8014782:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8014786:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 801478a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801478e:	f040 80b4 	bne.w	80148fa <rcl_wait+0x322>
 8014792:	ae08      	add	r6, sp, #32
 8014794:	2200      	movs	r2, #0
 8014796:	2300      	movs	r3, #0
 8014798:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801479c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80147a0:	9602      	str	r6, [sp, #8]
 80147a2:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80147a4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80147a8:	e9cd 3200 	strd	r3, r2, [sp]
 80147ac:	f105 0110 	add.w	r1, r5, #16
 80147b0:	f105 031c 	add.w	r3, r5, #28
 80147b4:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 80147b8:	1d28      	adds	r0, r5, #4
 80147ba:	f002 fb3d 	bl	8016e38 <rmw_wait>
 80147be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80147c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80147c2:	4680      	mov	r8, r0
 80147c4:	b332      	cbz	r2, 8014814 <rcl_wait+0x23c>
 80147c6:	2500      	movs	r5, #0
 80147c8:	462f      	mov	r7, r5
 80147ca:	462e      	mov	r6, r5
 80147cc:	e007      	b.n	80147de <rcl_wait+0x206>
 80147ce:	6922      	ldr	r2, [r4, #16]
 80147d0:	f842 3009 	str.w	r3, [r2, r9]
 80147d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80147d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80147d8:	3501      	adds	r5, #1
 80147da:	4295      	cmp	r5, r2
 80147dc:	d21b      	bcs.n	8014816 <rcl_wait+0x23e>
 80147de:	6920      	ldr	r0, [r4, #16]
 80147e0:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80147e4:	a907      	add	r1, sp, #28
 80147e6:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80147ea:	2800      	cmp	r0, #0
 80147ec:	d0f4      	beq.n	80147d8 <rcl_wait+0x200>
 80147ee:	f88d 601c 	strb.w	r6, [sp, #28]
 80147f2:	f7ff fa09 	bl	8013c08 <rcl_timer_is_ready>
 80147f6:	2800      	cmp	r0, #0
 80147f8:	d1b2      	bne.n	8014760 <rcl_wait+0x188>
 80147fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d0e5      	beq.n	80147ce <rcl_wait+0x1f6>
 8014802:	461f      	mov	r7, r3
 8014804:	e7e6      	b.n	80147d4 <rcl_wait+0x1fc>
 8014806:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014808:	6923      	ldr	r3, [r4, #16]
 801480a:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 801480c:	2200      	movs	r2, #0
 801480e:	f843 2009 	str.w	r2, [r3, r9]
 8014812:	e759      	b.n	80146c8 <rcl_wait+0xf0>
 8014814:	4617      	mov	r7, r2
 8014816:	f038 0002 	bics.w	r0, r8, #2
 801481a:	f040 80a8 	bne.w	801496e <rcl_wait+0x396>
 801481e:	6866      	ldr	r6, [r4, #4]
 8014820:	4602      	mov	r2, r0
 8014822:	b91e      	cbnz	r6, 801482c <rcl_wait+0x254>
 8014824:	e00d      	b.n	8014842 <rcl_wait+0x26a>
 8014826:	3201      	adds	r2, #1
 8014828:	4296      	cmp	r6, r2
 801482a:	d00a      	beq.n	8014842 <rcl_wait+0x26a>
 801482c:	6899      	ldr	r1, [r3, #8]
 801482e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014832:	2900      	cmp	r1, #0
 8014834:	d1f7      	bne.n	8014826 <rcl_wait+0x24e>
 8014836:	6825      	ldr	r5, [r4, #0]
 8014838:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801483c:	3201      	adds	r2, #1
 801483e:	4296      	cmp	r6, r2
 8014840:	d1f4      	bne.n	801482c <rcl_wait+0x254>
 8014842:	68e6      	ldr	r6, [r4, #12]
 8014844:	2200      	movs	r2, #0
 8014846:	b91e      	cbnz	r6, 8014850 <rcl_wait+0x278>
 8014848:	e00d      	b.n	8014866 <rcl_wait+0x28e>
 801484a:	3201      	adds	r2, #1
 801484c:	42b2      	cmp	r2, r6
 801484e:	d00a      	beq.n	8014866 <rcl_wait+0x28e>
 8014850:	6959      	ldr	r1, [r3, #20]
 8014852:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014856:	2900      	cmp	r1, #0
 8014858:	d1f7      	bne.n	801484a <rcl_wait+0x272>
 801485a:	68a5      	ldr	r5, [r4, #8]
 801485c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014860:	3201      	adds	r2, #1
 8014862:	42b2      	cmp	r2, r6
 8014864:	d1f4      	bne.n	8014850 <rcl_wait+0x278>
 8014866:	69e6      	ldr	r6, [r4, #28]
 8014868:	2200      	movs	r2, #0
 801486a:	b91e      	cbnz	r6, 8014874 <rcl_wait+0x29c>
 801486c:	e00d      	b.n	801488a <rcl_wait+0x2b2>
 801486e:	3201      	adds	r2, #1
 8014870:	4296      	cmp	r6, r2
 8014872:	d00a      	beq.n	801488a <rcl_wait+0x2b2>
 8014874:	6a19      	ldr	r1, [r3, #32]
 8014876:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801487a:	2900      	cmp	r1, #0
 801487c:	d1f7      	bne.n	801486e <rcl_wait+0x296>
 801487e:	69a5      	ldr	r5, [r4, #24]
 8014880:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8014884:	3201      	adds	r2, #1
 8014886:	4296      	cmp	r6, r2
 8014888:	d1f4      	bne.n	8014874 <rcl_wait+0x29c>
 801488a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 801488c:	2200      	movs	r2, #0
 801488e:	b91e      	cbnz	r6, 8014898 <rcl_wait+0x2c0>
 8014890:	e00d      	b.n	80148ae <rcl_wait+0x2d6>
 8014892:	3201      	adds	r2, #1
 8014894:	42b2      	cmp	r2, r6
 8014896:	d00a      	beq.n	80148ae <rcl_wait+0x2d6>
 8014898:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801489a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801489e:	2900      	cmp	r1, #0
 80148a0:	d1f7      	bne.n	8014892 <rcl_wait+0x2ba>
 80148a2:	6a25      	ldr	r5, [r4, #32]
 80148a4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80148a8:	3201      	adds	r2, #1
 80148aa:	42b2      	cmp	r2, r6
 80148ac:	d1f4      	bne.n	8014898 <rcl_wait+0x2c0>
 80148ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80148b0:	2200      	movs	r2, #0
 80148b2:	b91e      	cbnz	r6, 80148bc <rcl_wait+0x2e4>
 80148b4:	e00d      	b.n	80148d2 <rcl_wait+0x2fa>
 80148b6:	3201      	adds	r2, #1
 80148b8:	42b2      	cmp	r2, r6
 80148ba:	d00a      	beq.n	80148d2 <rcl_wait+0x2fa>
 80148bc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80148be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80148c2:	2900      	cmp	r1, #0
 80148c4:	d1f7      	bne.n	80148b6 <rcl_wait+0x2de>
 80148c6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80148c8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80148cc:	3201      	adds	r2, #1
 80148ce:	42b2      	cmp	r2, r6
 80148d0:	d1f4      	bne.n	80148bc <rcl_wait+0x2e4>
 80148d2:	f1b8 0f02 	cmp.w	r8, #2
 80148d6:	f47f af43 	bne.w	8014760 <rcl_wait+0x188>
 80148da:	f087 0701 	eor.w	r7, r7, #1
 80148de:	0078      	lsls	r0, r7, #1
 80148e0:	e73e      	b.n	8014760 <rcl_wait+0x188>
 80148e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80148e6:	b019      	add	sp, #100	@ 0x64
 80148e8:	ecbd 8b02 	vpop	{d8}
 80148ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f0:	ffffffff 	.word	0xffffffff
 80148f4:	7fffffff 	.word	0x7fffffff
 80148f8:	465f      	mov	r7, fp
 80148fa:	f1b8 0f01 	cmp.w	r8, #1
 80148fe:	f177 0300 	sbcs.w	r3, r7, #0
 8014902:	db3a      	blt.n	801497a <rcl_wait+0x3a2>
 8014904:	2601      	movs	r6, #1
 8014906:	ad10      	add	r5, sp, #64	@ 0x40
 8014908:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 801490c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8014910:	a908      	add	r1, sp, #32
 8014912:	b1a0      	cbz	r0, 801493e <rcl_wait+0x366>
 8014914:	f7fe fea2 	bl	801365c <rcl_clock_get_now>
 8014918:	2800      	cmp	r0, #0
 801491a:	f47f af21 	bne.w	8014760 <rcl_wait+0x188>
 801491e:	9a08      	ldr	r2, [sp, #32]
 8014920:	68ab      	ldr	r3, [r5, #8]
 8014922:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014924:	1a9b      	subs	r3, r3, r2
 8014926:	68ea      	ldr	r2, [r5, #12]
 8014928:	eb62 0201 	sbc.w	r2, r2, r1
 801492c:	4598      	cmp	r8, r3
 801492e:	eb77 0102 	sbcs.w	r1, r7, r2
 8014932:	bfba      	itte	lt
 8014934:	4643      	movlt	r3, r8
 8014936:	463a      	movlt	r2, r7
 8014938:	2601      	movge	r6, #1
 801493a:	4698      	mov	r8, r3
 801493c:	4617      	mov	r7, r2
 801493e:	3508      	adds	r5, #8
 8014940:	45a9      	cmp	r9, r5
 8014942:	d1e3      	bne.n	801490c <rcl_wait+0x334>
 8014944:	2f00      	cmp	r7, #0
 8014946:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8014948:	bfab      	itete	ge
 801494a:	4640      	movge	r0, r8
 801494c:	2000      	movlt	r0, #0
 801494e:	4639      	movge	r1, r7
 8014950:	2100      	movlt	r1, #0
 8014952:	2e00      	cmp	r6, #0
 8014954:	f43f af24 	beq.w	80147a0 <rcl_wait+0x1c8>
 8014958:	a30d      	add	r3, pc, #52	@ (adr r3, 8014990 <rcl_wait+0x3b8>)
 801495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495e:	f7ec f8a5 	bl	8000aac <__aeabi_ldivmod>
 8014962:	ae08      	add	r6, sp, #32
 8014964:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014968:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801496c:	e718      	b.n	80147a0 <rcl_wait+0x1c8>
 801496e:	2001      	movs	r0, #1
 8014970:	b019      	add	sp, #100	@ 0x64
 8014972:	ecbd 8b02 	vpop	{d8}
 8014976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801497a:	2600      	movs	r6, #0
 801497c:	f04f 38ff 	mov.w	r8, #4294967295
 8014980:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8014984:	e7bf      	b.n	8014906 <rcl_wait+0x32e>
 8014986:	200b      	movs	r0, #11
 8014988:	4770      	bx	lr
 801498a:	bf00      	nop
 801498c:	f3af 8000 	nop.w
 8014990:	3b9aca00 	.word	0x3b9aca00
 8014994:	00000000 	.word	0x00000000

08014998 <rcl_action_take_goal_response>:
 8014998:	b3b0      	cbz	r0, 8014a08 <rcl_action_take_goal_response+0x70>
 801499a:	b570      	push	{r4, r5, r6, lr}
 801499c:	4604      	mov	r4, r0
 801499e:	6800      	ldr	r0, [r0, #0]
 80149a0:	b368      	cbz	r0, 80149fe <rcl_action_take_goal_response+0x66>
 80149a2:	460d      	mov	r5, r1
 80149a4:	4616      	mov	r6, r2
 80149a6:	f7fd fe7b 	bl	80126a0 <rcl_client_is_valid>
 80149aa:	b330      	cbz	r0, 80149fa <rcl_action_take_goal_response+0x62>
 80149ac:	6820      	ldr	r0, [r4, #0]
 80149ae:	3004      	adds	r0, #4
 80149b0:	f7fd fe76 	bl	80126a0 <rcl_client_is_valid>
 80149b4:	b308      	cbz	r0, 80149fa <rcl_action_take_goal_response+0x62>
 80149b6:	6820      	ldr	r0, [r4, #0]
 80149b8:	3008      	adds	r0, #8
 80149ba:	f7fd fe71 	bl	80126a0 <rcl_client_is_valid>
 80149be:	b1e0      	cbz	r0, 80149fa <rcl_action_take_goal_response+0x62>
 80149c0:	6820      	ldr	r0, [r4, #0]
 80149c2:	300c      	adds	r0, #12
 80149c4:	f7fe fdae 	bl	8013524 <rcl_subscription_is_valid>
 80149c8:	b1b8      	cbz	r0, 80149fa <rcl_action_take_goal_response+0x62>
 80149ca:	6820      	ldr	r0, [r4, #0]
 80149cc:	3010      	adds	r0, #16
 80149ce:	f7fe fda9 	bl	8013524 <rcl_subscription_is_valid>
 80149d2:	b190      	cbz	r0, 80149fa <rcl_action_take_goal_response+0x62>
 80149d4:	b1b5      	cbz	r5, 8014a04 <rcl_action_take_goal_response+0x6c>
 80149d6:	b1ae      	cbz	r6, 8014a04 <rcl_action_take_goal_response+0x6c>
 80149d8:	6820      	ldr	r0, [r4, #0]
 80149da:	4632      	mov	r2, r6
 80149dc:	4629      	mov	r1, r5
 80149de:	f7fd fdf3 	bl	80125c8 <rcl_take_response>
 80149e2:	b148      	cbz	r0, 80149f8 <rcl_action_take_goal_response+0x60>
 80149e4:	280a      	cmp	r0, #10
 80149e6:	d007      	beq.n	80149f8 <rcl_action_take_goal_response+0x60>
 80149e8:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80149ec:	f241 0307 	movw	r3, #4103	@ 0x1007
 80149f0:	4290      	cmp	r0, r2
 80149f2:	bf0c      	ite	eq
 80149f4:	4618      	moveq	r0, r3
 80149f6:	2001      	movne	r0, #1
 80149f8:	bd70      	pop	{r4, r5, r6, pc}
 80149fa:	f7f8 fb45 	bl	800d088 <rcutils_reset_error>
 80149fe:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014a02:	bd70      	pop	{r4, r5, r6, pc}
 8014a04:	200b      	movs	r0, #11
 8014a06:	bd70      	pop	{r4, r5, r6, pc}
 8014a08:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014a0c:	4770      	bx	lr
 8014a0e:	bf00      	nop

08014a10 <rcl_action_send_result_request>:
 8014a10:	b378      	cbz	r0, 8014a72 <rcl_action_send_result_request+0x62>
 8014a12:	b570      	push	{r4, r5, r6, lr}
 8014a14:	4604      	mov	r4, r0
 8014a16:	6800      	ldr	r0, [r0, #0]
 8014a18:	b330      	cbz	r0, 8014a68 <rcl_action_send_result_request+0x58>
 8014a1a:	460d      	mov	r5, r1
 8014a1c:	4616      	mov	r6, r2
 8014a1e:	f7fd fe3f 	bl	80126a0 <rcl_client_is_valid>
 8014a22:	b1f8      	cbz	r0, 8014a64 <rcl_action_send_result_request+0x54>
 8014a24:	6820      	ldr	r0, [r4, #0]
 8014a26:	3004      	adds	r0, #4
 8014a28:	f7fd fe3a 	bl	80126a0 <rcl_client_is_valid>
 8014a2c:	b1d0      	cbz	r0, 8014a64 <rcl_action_send_result_request+0x54>
 8014a2e:	6820      	ldr	r0, [r4, #0]
 8014a30:	3008      	adds	r0, #8
 8014a32:	f7fd fe35 	bl	80126a0 <rcl_client_is_valid>
 8014a36:	b1a8      	cbz	r0, 8014a64 <rcl_action_send_result_request+0x54>
 8014a38:	6820      	ldr	r0, [r4, #0]
 8014a3a:	300c      	adds	r0, #12
 8014a3c:	f7fe fd72 	bl	8013524 <rcl_subscription_is_valid>
 8014a40:	b180      	cbz	r0, 8014a64 <rcl_action_send_result_request+0x54>
 8014a42:	6820      	ldr	r0, [r4, #0]
 8014a44:	3010      	adds	r0, #16
 8014a46:	f7fe fd6d 	bl	8013524 <rcl_subscription_is_valid>
 8014a4a:	b158      	cbz	r0, 8014a64 <rcl_action_send_result_request+0x54>
 8014a4c:	b17d      	cbz	r5, 8014a6e <rcl_action_send_result_request+0x5e>
 8014a4e:	b176      	cbz	r6, 8014a6e <rcl_action_send_result_request+0x5e>
 8014a50:	6820      	ldr	r0, [r4, #0]
 8014a52:	4632      	mov	r2, r6
 8014a54:	4629      	mov	r1, r5
 8014a56:	3008      	adds	r0, #8
 8014a58:	f7fd fd64 	bl	8012524 <rcl_send_request>
 8014a5c:	3800      	subs	r0, #0
 8014a5e:	bf18      	it	ne
 8014a60:	2001      	movne	r0, #1
 8014a62:	bd70      	pop	{r4, r5, r6, pc}
 8014a64:	f7f8 fb10 	bl	800d088 <rcutils_reset_error>
 8014a68:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014a6c:	bd70      	pop	{r4, r5, r6, pc}
 8014a6e:	200b      	movs	r0, #11
 8014a70:	bd70      	pop	{r4, r5, r6, pc}
 8014a72:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014a76:	4770      	bx	lr

08014a78 <rcl_action_take_result_response>:
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d037      	beq.n	8014aec <rcl_action_take_result_response+0x74>
 8014a7c:	b570      	push	{r4, r5, r6, lr}
 8014a7e:	4604      	mov	r4, r0
 8014a80:	6800      	ldr	r0, [r0, #0]
 8014a82:	b370      	cbz	r0, 8014ae2 <rcl_action_take_result_response+0x6a>
 8014a84:	460d      	mov	r5, r1
 8014a86:	4616      	mov	r6, r2
 8014a88:	f7fd fe0a 	bl	80126a0 <rcl_client_is_valid>
 8014a8c:	b338      	cbz	r0, 8014ade <rcl_action_take_result_response+0x66>
 8014a8e:	6820      	ldr	r0, [r4, #0]
 8014a90:	3004      	adds	r0, #4
 8014a92:	f7fd fe05 	bl	80126a0 <rcl_client_is_valid>
 8014a96:	b310      	cbz	r0, 8014ade <rcl_action_take_result_response+0x66>
 8014a98:	6820      	ldr	r0, [r4, #0]
 8014a9a:	3008      	adds	r0, #8
 8014a9c:	f7fd fe00 	bl	80126a0 <rcl_client_is_valid>
 8014aa0:	b1e8      	cbz	r0, 8014ade <rcl_action_take_result_response+0x66>
 8014aa2:	6820      	ldr	r0, [r4, #0]
 8014aa4:	300c      	adds	r0, #12
 8014aa6:	f7fe fd3d 	bl	8013524 <rcl_subscription_is_valid>
 8014aaa:	b1c0      	cbz	r0, 8014ade <rcl_action_take_result_response+0x66>
 8014aac:	6820      	ldr	r0, [r4, #0]
 8014aae:	3010      	adds	r0, #16
 8014ab0:	f7fe fd38 	bl	8013524 <rcl_subscription_is_valid>
 8014ab4:	b198      	cbz	r0, 8014ade <rcl_action_take_result_response+0x66>
 8014ab6:	b1bd      	cbz	r5, 8014ae8 <rcl_action_take_result_response+0x70>
 8014ab8:	b1b6      	cbz	r6, 8014ae8 <rcl_action_take_result_response+0x70>
 8014aba:	6820      	ldr	r0, [r4, #0]
 8014abc:	4632      	mov	r2, r6
 8014abe:	4629      	mov	r1, r5
 8014ac0:	3008      	adds	r0, #8
 8014ac2:	f7fd fd81 	bl	80125c8 <rcl_take_response>
 8014ac6:	b148      	cbz	r0, 8014adc <rcl_action_take_result_response+0x64>
 8014ac8:	280a      	cmp	r0, #10
 8014aca:	d007      	beq.n	8014adc <rcl_action_take_result_response+0x64>
 8014acc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014ad0:	f241 0307 	movw	r3, #4103	@ 0x1007
 8014ad4:	4290      	cmp	r0, r2
 8014ad6:	bf0c      	ite	eq
 8014ad8:	4618      	moveq	r0, r3
 8014ada:	2001      	movne	r0, #1
 8014adc:	bd70      	pop	{r4, r5, r6, pc}
 8014ade:	f7f8 fad3 	bl	800d088 <rcutils_reset_error>
 8014ae2:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014ae6:	bd70      	pop	{r4, r5, r6, pc}
 8014ae8:	200b      	movs	r0, #11
 8014aea:	bd70      	pop	{r4, r5, r6, pc}
 8014aec:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop

08014af4 <rcl_action_take_cancel_response>:
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d037      	beq.n	8014b68 <rcl_action_take_cancel_response+0x74>
 8014af8:	b570      	push	{r4, r5, r6, lr}
 8014afa:	4604      	mov	r4, r0
 8014afc:	6800      	ldr	r0, [r0, #0]
 8014afe:	b370      	cbz	r0, 8014b5e <rcl_action_take_cancel_response+0x6a>
 8014b00:	460d      	mov	r5, r1
 8014b02:	4616      	mov	r6, r2
 8014b04:	f7fd fdcc 	bl	80126a0 <rcl_client_is_valid>
 8014b08:	b338      	cbz	r0, 8014b5a <rcl_action_take_cancel_response+0x66>
 8014b0a:	6820      	ldr	r0, [r4, #0]
 8014b0c:	3004      	adds	r0, #4
 8014b0e:	f7fd fdc7 	bl	80126a0 <rcl_client_is_valid>
 8014b12:	b310      	cbz	r0, 8014b5a <rcl_action_take_cancel_response+0x66>
 8014b14:	6820      	ldr	r0, [r4, #0]
 8014b16:	3008      	adds	r0, #8
 8014b18:	f7fd fdc2 	bl	80126a0 <rcl_client_is_valid>
 8014b1c:	b1e8      	cbz	r0, 8014b5a <rcl_action_take_cancel_response+0x66>
 8014b1e:	6820      	ldr	r0, [r4, #0]
 8014b20:	300c      	adds	r0, #12
 8014b22:	f7fe fcff 	bl	8013524 <rcl_subscription_is_valid>
 8014b26:	b1c0      	cbz	r0, 8014b5a <rcl_action_take_cancel_response+0x66>
 8014b28:	6820      	ldr	r0, [r4, #0]
 8014b2a:	3010      	adds	r0, #16
 8014b2c:	f7fe fcfa 	bl	8013524 <rcl_subscription_is_valid>
 8014b30:	b198      	cbz	r0, 8014b5a <rcl_action_take_cancel_response+0x66>
 8014b32:	b1bd      	cbz	r5, 8014b64 <rcl_action_take_cancel_response+0x70>
 8014b34:	b1b6      	cbz	r6, 8014b64 <rcl_action_take_cancel_response+0x70>
 8014b36:	6820      	ldr	r0, [r4, #0]
 8014b38:	4632      	mov	r2, r6
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	3004      	adds	r0, #4
 8014b3e:	f7fd fd43 	bl	80125c8 <rcl_take_response>
 8014b42:	b148      	cbz	r0, 8014b58 <rcl_action_take_cancel_response+0x64>
 8014b44:	280a      	cmp	r0, #10
 8014b46:	d007      	beq.n	8014b58 <rcl_action_take_cancel_response+0x64>
 8014b48:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014b4c:	f241 0307 	movw	r3, #4103	@ 0x1007
 8014b50:	4290      	cmp	r0, r2
 8014b52:	bf0c      	ite	eq
 8014b54:	4618      	moveq	r0, r3
 8014b56:	2001      	movne	r0, #1
 8014b58:	bd70      	pop	{r4, r5, r6, pc}
 8014b5a:	f7f8 fa95 	bl	800d088 <rcutils_reset_error>
 8014b5e:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014b62:	bd70      	pop	{r4, r5, r6, pc}
 8014b64:	200b      	movs	r0, #11
 8014b66:	bd70      	pop	{r4, r5, r6, pc}
 8014b68:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014b6c:	4770      	bx	lr
 8014b6e:	bf00      	nop

08014b70 <rcl_action_take_feedback>:
 8014b70:	2800      	cmp	r0, #0
 8014b72:	d037      	beq.n	8014be4 <rcl_action_take_feedback+0x74>
 8014b74:	b530      	push	{r4, r5, lr}
 8014b76:	4604      	mov	r4, r0
 8014b78:	6800      	ldr	r0, [r0, #0]
 8014b7a:	b08f      	sub	sp, #60	@ 0x3c
 8014b7c:	b358      	cbz	r0, 8014bd6 <rcl_action_take_feedback+0x66>
 8014b7e:	460d      	mov	r5, r1
 8014b80:	f7fd fd8e 	bl	80126a0 <rcl_client_is_valid>
 8014b84:	b328      	cbz	r0, 8014bd2 <rcl_action_take_feedback+0x62>
 8014b86:	6820      	ldr	r0, [r4, #0]
 8014b88:	3004      	adds	r0, #4
 8014b8a:	f7fd fd89 	bl	80126a0 <rcl_client_is_valid>
 8014b8e:	b300      	cbz	r0, 8014bd2 <rcl_action_take_feedback+0x62>
 8014b90:	6820      	ldr	r0, [r4, #0]
 8014b92:	3008      	adds	r0, #8
 8014b94:	f7fd fd84 	bl	80126a0 <rcl_client_is_valid>
 8014b98:	b1d8      	cbz	r0, 8014bd2 <rcl_action_take_feedback+0x62>
 8014b9a:	6820      	ldr	r0, [r4, #0]
 8014b9c:	300c      	adds	r0, #12
 8014b9e:	f7fe fcc1 	bl	8013524 <rcl_subscription_is_valid>
 8014ba2:	b1b0      	cbz	r0, 8014bd2 <rcl_action_take_feedback+0x62>
 8014ba4:	6820      	ldr	r0, [r4, #0]
 8014ba6:	3010      	adds	r0, #16
 8014ba8:	f7fe fcbc 	bl	8013524 <rcl_subscription_is_valid>
 8014bac:	b188      	cbz	r0, 8014bd2 <rcl_action_take_feedback+0x62>
 8014bae:	b1b5      	cbz	r5, 8014bde <rcl_action_take_feedback+0x6e>
 8014bb0:	6820      	ldr	r0, [r4, #0]
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	466a      	mov	r2, sp
 8014bb6:	4629      	mov	r1, r5
 8014bb8:	300c      	adds	r0, #12
 8014bba:	f7fe fc55 	bl	8013468 <rcl_take>
 8014bbe:	b160      	cbz	r0, 8014bda <rcl_action_take_feedback+0x6a>
 8014bc0:	f240 1391 	movw	r3, #401	@ 0x191
 8014bc4:	4298      	cmp	r0, r3
 8014bc6:	d010      	beq.n	8014bea <rcl_action_take_feedback+0x7a>
 8014bc8:	280a      	cmp	r0, #10
 8014bca:	bf18      	it	ne
 8014bcc:	2001      	movne	r0, #1
 8014bce:	b00f      	add	sp, #60	@ 0x3c
 8014bd0:	bd30      	pop	{r4, r5, pc}
 8014bd2:	f7f8 fa59 	bl	800d088 <rcutils_reset_error>
 8014bd6:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014bda:	b00f      	add	sp, #60	@ 0x3c
 8014bdc:	bd30      	pop	{r4, r5, pc}
 8014bde:	200b      	movs	r0, #11
 8014be0:	b00f      	add	sp, #60	@ 0x3c
 8014be2:	bd30      	pop	{r4, r5, pc}
 8014be4:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014be8:	4770      	bx	lr
 8014bea:	f241 0007 	movw	r0, #4103	@ 0x1007
 8014bee:	e7f4      	b.n	8014bda <rcl_action_take_feedback+0x6a>

08014bf0 <rcl_action_wait_set_add_action_client>:
 8014bf0:	2800      	cmp	r0, #0
 8014bf2:	d045      	beq.n	8014c80 <rcl_action_wait_set_add_action_client+0x90>
 8014bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bf6:	460c      	mov	r4, r1
 8014bf8:	2900      	cmp	r1, #0
 8014bfa:	d03e      	beq.n	8014c7a <rcl_action_wait_set_add_action_client+0x8a>
 8014bfc:	4605      	mov	r5, r0
 8014bfe:	6808      	ldr	r0, [r1, #0]
 8014c00:	2800      	cmp	r0, #0
 8014c02:	d03a      	beq.n	8014c7a <rcl_action_wait_set_add_action_client+0x8a>
 8014c04:	4617      	mov	r7, r2
 8014c06:	461e      	mov	r6, r3
 8014c08:	f7fd fd4a 	bl	80126a0 <rcl_client_is_valid>
 8014c0c:	b398      	cbz	r0, 8014c76 <rcl_action_wait_set_add_action_client+0x86>
 8014c0e:	6820      	ldr	r0, [r4, #0]
 8014c10:	3004      	adds	r0, #4
 8014c12:	f7fd fd45 	bl	80126a0 <rcl_client_is_valid>
 8014c16:	b370      	cbz	r0, 8014c76 <rcl_action_wait_set_add_action_client+0x86>
 8014c18:	6820      	ldr	r0, [r4, #0]
 8014c1a:	3008      	adds	r0, #8
 8014c1c:	f7fd fd40 	bl	80126a0 <rcl_client_is_valid>
 8014c20:	b348      	cbz	r0, 8014c76 <rcl_action_wait_set_add_action_client+0x86>
 8014c22:	6820      	ldr	r0, [r4, #0]
 8014c24:	300c      	adds	r0, #12
 8014c26:	f7fe fc7d 	bl	8013524 <rcl_subscription_is_valid>
 8014c2a:	b320      	cbz	r0, 8014c76 <rcl_action_wait_set_add_action_client+0x86>
 8014c2c:	6820      	ldr	r0, [r4, #0]
 8014c2e:	3010      	adds	r0, #16
 8014c30:	f7fe fc78 	bl	8013524 <rcl_subscription_is_valid>
 8014c34:	b1f8      	cbz	r0, 8014c76 <rcl_action_wait_set_add_action_client+0x86>
 8014c36:	6821      	ldr	r1, [r4, #0]
 8014c38:	4628      	mov	r0, r5
 8014c3a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8014c3e:	f7ff fc71 	bl	8014524 <rcl_wait_set_add_client>
 8014c42:	b9b8      	cbnz	r0, 8014c74 <rcl_action_wait_set_add_action_client+0x84>
 8014c44:	6821      	ldr	r1, [r4, #0]
 8014c46:	4628      	mov	r0, r5
 8014c48:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8014c4c:	3104      	adds	r1, #4
 8014c4e:	f7ff fc69 	bl	8014524 <rcl_wait_set_add_client>
 8014c52:	b978      	cbnz	r0, 8014c74 <rcl_action_wait_set_add_action_client+0x84>
 8014c54:	6821      	ldr	r1, [r4, #0]
 8014c56:	4628      	mov	r0, r5
 8014c58:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8014c5c:	3108      	adds	r1, #8
 8014c5e:	f7ff fc61 	bl	8014524 <rcl_wait_set_add_client>
 8014c62:	b938      	cbnz	r0, 8014c74 <rcl_action_wait_set_add_action_client+0x84>
 8014c64:	6821      	ldr	r1, [r4, #0]
 8014c66:	4628      	mov	r0, r5
 8014c68:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8014c6c:	310c      	adds	r1, #12
 8014c6e:	f7ff f903 	bl	8013e78 <rcl_wait_set_add_subscription>
 8014c72:	b140      	cbz	r0, 8014c86 <rcl_action_wait_set_add_action_client+0x96>
 8014c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c76:	f7f8 fa07 	bl	800d088 <rcutils_reset_error>
 8014c7a:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c80:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014c84:	4770      	bx	lr
 8014c86:	6821      	ldr	r1, [r4, #0]
 8014c88:	4628      	mov	r0, r5
 8014c8a:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8014c8e:	3110      	adds	r1, #16
 8014c90:	f7ff f8f2 	bl	8013e78 <rcl_wait_set_add_subscription>
 8014c94:	2800      	cmp	r0, #0
 8014c96:	d1ed      	bne.n	8014c74 <rcl_action_wait_set_add_action_client+0x84>
 8014c98:	b11f      	cbz	r7, 8014ca2 <rcl_action_wait_set_add_action_client+0xb2>
 8014c9a:	6823      	ldr	r3, [r4, #0]
 8014c9c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8014ca0:	603b      	str	r3, [r7, #0]
 8014ca2:	2e00      	cmp	r6, #0
 8014ca4:	d0e6      	beq.n	8014c74 <rcl_action_wait_set_add_action_client+0x84>
 8014ca6:	6823      	ldr	r3, [r4, #0]
 8014ca8:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8014cac:	6033      	str	r3, [r6, #0]
 8014cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014cb0 <rcl_action_client_wait_set_get_entities_ready>:
 8014cb0:	2800      	cmp	r0, #0
 8014cb2:	f000 8089 	beq.w	8014dc8 <rcl_action_client_wait_set_get_entities_ready+0x118>
 8014cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cba:	460c      	mov	r4, r1
 8014cbc:	2900      	cmp	r1, #0
 8014cbe:	d079      	beq.n	8014db4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014cc0:	4605      	mov	r5, r0
 8014cc2:	6808      	ldr	r0, [r1, #0]
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d075      	beq.n	8014db4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014cc8:	4616      	mov	r6, r2
 8014cca:	461f      	mov	r7, r3
 8014ccc:	f7fd fce8 	bl	80126a0 <rcl_client_is_valid>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	d06d      	beq.n	8014db0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014cd4:	6820      	ldr	r0, [r4, #0]
 8014cd6:	3004      	adds	r0, #4
 8014cd8:	f7fd fce2 	bl	80126a0 <rcl_client_is_valid>
 8014cdc:	2800      	cmp	r0, #0
 8014cde:	d067      	beq.n	8014db0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014ce0:	6820      	ldr	r0, [r4, #0]
 8014ce2:	3008      	adds	r0, #8
 8014ce4:	f7fd fcdc 	bl	80126a0 <rcl_client_is_valid>
 8014ce8:	2800      	cmp	r0, #0
 8014cea:	d061      	beq.n	8014db0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014cec:	6820      	ldr	r0, [r4, #0]
 8014cee:	300c      	adds	r0, #12
 8014cf0:	f7fe fc18 	bl	8013524 <rcl_subscription_is_valid>
 8014cf4:	2800      	cmp	r0, #0
 8014cf6:	d05b      	beq.n	8014db0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014cf8:	6820      	ldr	r0, [r4, #0]
 8014cfa:	3010      	adds	r0, #16
 8014cfc:	f7fe fc12 	bl	8013524 <rcl_subscription_is_valid>
 8014d00:	2800      	cmp	r0, #0
 8014d02:	d055      	beq.n	8014db0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014d04:	2e00      	cmp	r6, #0
 8014d06:	d05c      	beq.n	8014dc2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8014d08:	2f00      	cmp	r7, #0
 8014d0a:	d05a      	beq.n	8014dc2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8014d0c:	9b06      	ldr	r3, [sp, #24]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d057      	beq.n	8014dc2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8014d12:	9b07      	ldr	r3, [sp, #28]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d054      	beq.n	8014dc2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8014d18:	9b08      	ldr	r3, [sp, #32]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d051      	beq.n	8014dc2 <rcl_action_client_wait_set_get_entities_ready+0x112>
 8014d1e:	6823      	ldr	r3, [r4, #0]
 8014d20:	686a      	ldr	r2, [r5, #4]
 8014d22:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8014d26:	428a      	cmp	r2, r1
 8014d28:	d948      	bls.n	8014dbc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8014d2a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8014d2e:	4282      	cmp	r2, r0
 8014d30:	d944      	bls.n	8014dbc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8014d32:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8014d36:	69ea      	ldr	r2, [r5, #28]
 8014d38:	42a2      	cmp	r2, r4
 8014d3a:	d93f      	bls.n	8014dbc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8014d3c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014d40:	4562      	cmp	r2, ip
 8014d42:	d93b      	bls.n	8014dbc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8014d44:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8014d48:	4572      	cmp	r2, lr
 8014d4a:	d937      	bls.n	8014dbc <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8014d4c:	69aa      	ldr	r2, [r5, #24]
 8014d4e:	682d      	ldr	r5, [r5, #0]
 8014d50:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014d54:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014d58:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8014d5c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014d60:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014d64:	f103 0c0c 	add.w	ip, r3, #12
 8014d68:	eba5 050c 	sub.w	r5, r5, ip
 8014d6c:	fab5 f585 	clz	r5, r5
 8014d70:	096d      	lsrs	r5, r5, #5
 8014d72:	7035      	strb	r5, [r6, #0]
 8014d74:	f103 0510 	add.w	r5, r3, #16
 8014d78:	1b64      	subs	r4, r4, r5
 8014d7a:	fab4 f484 	clz	r4, r4
 8014d7e:	0964      	lsrs	r4, r4, #5
 8014d80:	703c      	strb	r4, [r7, #0]
 8014d82:	eba3 0008 	sub.w	r0, r3, r8
 8014d86:	1d1c      	adds	r4, r3, #4
 8014d88:	3308      	adds	r3, #8
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	fab0 f080 	clz	r0, r0
 8014d90:	9a06      	ldr	r2, [sp, #24]
 8014d92:	0940      	lsrs	r0, r0, #5
 8014d94:	1b09      	subs	r1, r1, r4
 8014d96:	7010      	strb	r0, [r2, #0]
 8014d98:	fab1 f181 	clz	r1, r1
 8014d9c:	9a07      	ldr	r2, [sp, #28]
 8014d9e:	0949      	lsrs	r1, r1, #5
 8014da0:	7011      	strb	r1, [r2, #0]
 8014da2:	fab3 f383 	clz	r3, r3
 8014da6:	9a08      	ldr	r2, [sp, #32]
 8014da8:	095b      	lsrs	r3, r3, #5
 8014daa:	2000      	movs	r0, #0
 8014dac:	7013      	strb	r3, [r2, #0]
 8014dae:	e003      	b.n	8014db8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014db0:	f7f8 f96a 	bl	800d088 <rcutils_reset_error>
 8014db4:	f241 0006 	movw	r0, #4102	@ 0x1006
 8014db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dbc:	2001      	movs	r0, #1
 8014dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dc2:	200b      	movs	r0, #11
 8014dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dc8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014dcc:	4770      	bx	lr
 8014dce:	bf00      	nop

08014dd0 <rcl_action_take_goal_request>:
 8014dd0:	b3b0      	cbz	r0, 8014e40 <rcl_action_take_goal_request+0x70>
 8014dd2:	b570      	push	{r4, r5, r6, lr}
 8014dd4:	4604      	mov	r4, r0
 8014dd6:	6800      	ldr	r0, [r0, #0]
 8014dd8:	b368      	cbz	r0, 8014e36 <rcl_action_take_goal_request+0x66>
 8014dda:	460d      	mov	r5, r1
 8014ddc:	4616      	mov	r6, r2
 8014dde:	f7fe f9ef 	bl	80131c0 <rcl_service_is_valid>
 8014de2:	b330      	cbz	r0, 8014e32 <rcl_action_take_goal_request+0x62>
 8014de4:	6820      	ldr	r0, [r4, #0]
 8014de6:	3004      	adds	r0, #4
 8014de8:	f7fe f9ea 	bl	80131c0 <rcl_service_is_valid>
 8014dec:	b308      	cbz	r0, 8014e32 <rcl_action_take_goal_request+0x62>
 8014dee:	6820      	ldr	r0, [r4, #0]
 8014df0:	3008      	adds	r0, #8
 8014df2:	f7fe f9e5 	bl	80131c0 <rcl_service_is_valid>
 8014df6:	b1e0      	cbz	r0, 8014e32 <rcl_action_take_goal_request+0x62>
 8014df8:	6820      	ldr	r0, [r4, #0]
 8014dfa:	300c      	adds	r0, #12
 8014dfc:	f7f7 f9b2 	bl	800c164 <rcl_publisher_is_valid>
 8014e00:	b1b8      	cbz	r0, 8014e32 <rcl_action_take_goal_request+0x62>
 8014e02:	6820      	ldr	r0, [r4, #0]
 8014e04:	3010      	adds	r0, #16
 8014e06:	f7f7 f9ad 	bl	800c164 <rcl_publisher_is_valid>
 8014e0a:	b190      	cbz	r0, 8014e32 <rcl_action_take_goal_request+0x62>
 8014e0c:	b1b5      	cbz	r5, 8014e3c <rcl_action_take_goal_request+0x6c>
 8014e0e:	b1ae      	cbz	r6, 8014e3c <rcl_action_take_goal_request+0x6c>
 8014e10:	6820      	ldr	r0, [r4, #0]
 8014e12:	4632      	mov	r2, r6
 8014e14:	4629      	mov	r1, r5
 8014e16:	f7fe f953 	bl	80130c0 <rcl_take_request>
 8014e1a:	b148      	cbz	r0, 8014e30 <rcl_action_take_goal_request+0x60>
 8014e1c:	280a      	cmp	r0, #10
 8014e1e:	d007      	beq.n	8014e30 <rcl_action_take_goal_request+0x60>
 8014e20:	f240 2259 	movw	r2, #601	@ 0x259
 8014e24:	f241 0369 	movw	r3, #4201	@ 0x1069
 8014e28:	4290      	cmp	r0, r2
 8014e2a:	bf0c      	ite	eq
 8014e2c:	4618      	moveq	r0, r3
 8014e2e:	2001      	movne	r0, #1
 8014e30:	bd70      	pop	{r4, r5, r6, pc}
 8014e32:	f7f8 f929 	bl	800d088 <rcutils_reset_error>
 8014e36:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014e3a:	bd70      	pop	{r4, r5, r6, pc}
 8014e3c:	200b      	movs	r0, #11
 8014e3e:	bd70      	pop	{r4, r5, r6, pc}
 8014e40:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014e44:	4770      	bx	lr
 8014e46:	bf00      	nop

08014e48 <rcl_action_send_goal_response>:
 8014e48:	b378      	cbz	r0, 8014eaa <rcl_action_send_goal_response+0x62>
 8014e4a:	b570      	push	{r4, r5, r6, lr}
 8014e4c:	4604      	mov	r4, r0
 8014e4e:	6800      	ldr	r0, [r0, #0]
 8014e50:	b330      	cbz	r0, 8014ea0 <rcl_action_send_goal_response+0x58>
 8014e52:	460d      	mov	r5, r1
 8014e54:	4616      	mov	r6, r2
 8014e56:	f7fe f9b3 	bl	80131c0 <rcl_service_is_valid>
 8014e5a:	b1f8      	cbz	r0, 8014e9c <rcl_action_send_goal_response+0x54>
 8014e5c:	6820      	ldr	r0, [r4, #0]
 8014e5e:	3004      	adds	r0, #4
 8014e60:	f7fe f9ae 	bl	80131c0 <rcl_service_is_valid>
 8014e64:	b1d0      	cbz	r0, 8014e9c <rcl_action_send_goal_response+0x54>
 8014e66:	6820      	ldr	r0, [r4, #0]
 8014e68:	3008      	adds	r0, #8
 8014e6a:	f7fe f9a9 	bl	80131c0 <rcl_service_is_valid>
 8014e6e:	b1a8      	cbz	r0, 8014e9c <rcl_action_send_goal_response+0x54>
 8014e70:	6820      	ldr	r0, [r4, #0]
 8014e72:	300c      	adds	r0, #12
 8014e74:	f7f7 f976 	bl	800c164 <rcl_publisher_is_valid>
 8014e78:	b180      	cbz	r0, 8014e9c <rcl_action_send_goal_response+0x54>
 8014e7a:	6820      	ldr	r0, [r4, #0]
 8014e7c:	3010      	adds	r0, #16
 8014e7e:	f7f7 f971 	bl	800c164 <rcl_publisher_is_valid>
 8014e82:	b158      	cbz	r0, 8014e9c <rcl_action_send_goal_response+0x54>
 8014e84:	b17d      	cbz	r5, 8014ea6 <rcl_action_send_goal_response+0x5e>
 8014e86:	b176      	cbz	r6, 8014ea6 <rcl_action_send_goal_response+0x5e>
 8014e88:	6820      	ldr	r0, [r4, #0]
 8014e8a:	4632      	mov	r2, r6
 8014e8c:	4629      	mov	r1, r5
 8014e8e:	f7fe f967 	bl	8013160 <rcl_send_response>
 8014e92:	b110      	cbz	r0, 8014e9a <rcl_action_send_goal_response+0x52>
 8014e94:	2802      	cmp	r0, #2
 8014e96:	bf18      	it	ne
 8014e98:	2001      	movne	r0, #1
 8014e9a:	bd70      	pop	{r4, r5, r6, pc}
 8014e9c:	f7f8 f8f4 	bl	800d088 <rcutils_reset_error>
 8014ea0:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014ea4:	bd70      	pop	{r4, r5, r6, pc}
 8014ea6:	200b      	movs	r0, #11
 8014ea8:	bd70      	pop	{r4, r5, r6, pc}
 8014eaa:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014eae:	4770      	bx	lr

08014eb0 <rcl_action_take_result_request>:
 8014eb0:	2800      	cmp	r0, #0
 8014eb2:	d037      	beq.n	8014f24 <rcl_action_take_result_request+0x74>
 8014eb4:	b570      	push	{r4, r5, r6, lr}
 8014eb6:	4604      	mov	r4, r0
 8014eb8:	6800      	ldr	r0, [r0, #0]
 8014eba:	b370      	cbz	r0, 8014f1a <rcl_action_take_result_request+0x6a>
 8014ebc:	460d      	mov	r5, r1
 8014ebe:	4616      	mov	r6, r2
 8014ec0:	f7fe f97e 	bl	80131c0 <rcl_service_is_valid>
 8014ec4:	b338      	cbz	r0, 8014f16 <rcl_action_take_result_request+0x66>
 8014ec6:	6820      	ldr	r0, [r4, #0]
 8014ec8:	3004      	adds	r0, #4
 8014eca:	f7fe f979 	bl	80131c0 <rcl_service_is_valid>
 8014ece:	b310      	cbz	r0, 8014f16 <rcl_action_take_result_request+0x66>
 8014ed0:	6820      	ldr	r0, [r4, #0]
 8014ed2:	3008      	adds	r0, #8
 8014ed4:	f7fe f974 	bl	80131c0 <rcl_service_is_valid>
 8014ed8:	b1e8      	cbz	r0, 8014f16 <rcl_action_take_result_request+0x66>
 8014eda:	6820      	ldr	r0, [r4, #0]
 8014edc:	300c      	adds	r0, #12
 8014ede:	f7f7 f941 	bl	800c164 <rcl_publisher_is_valid>
 8014ee2:	b1c0      	cbz	r0, 8014f16 <rcl_action_take_result_request+0x66>
 8014ee4:	6820      	ldr	r0, [r4, #0]
 8014ee6:	3010      	adds	r0, #16
 8014ee8:	f7f7 f93c 	bl	800c164 <rcl_publisher_is_valid>
 8014eec:	b198      	cbz	r0, 8014f16 <rcl_action_take_result_request+0x66>
 8014eee:	b1bd      	cbz	r5, 8014f20 <rcl_action_take_result_request+0x70>
 8014ef0:	b1b6      	cbz	r6, 8014f20 <rcl_action_take_result_request+0x70>
 8014ef2:	6820      	ldr	r0, [r4, #0]
 8014ef4:	4632      	mov	r2, r6
 8014ef6:	4629      	mov	r1, r5
 8014ef8:	3008      	adds	r0, #8
 8014efa:	f7fe f8e1 	bl	80130c0 <rcl_take_request>
 8014efe:	b148      	cbz	r0, 8014f14 <rcl_action_take_result_request+0x64>
 8014f00:	280a      	cmp	r0, #10
 8014f02:	d007      	beq.n	8014f14 <rcl_action_take_result_request+0x64>
 8014f04:	f240 2259 	movw	r2, #601	@ 0x259
 8014f08:	f241 0369 	movw	r3, #4201	@ 0x1069
 8014f0c:	4290      	cmp	r0, r2
 8014f0e:	bf0c      	ite	eq
 8014f10:	4618      	moveq	r0, r3
 8014f12:	2001      	movne	r0, #1
 8014f14:	bd70      	pop	{r4, r5, r6, pc}
 8014f16:	f7f8 f8b7 	bl	800d088 <rcutils_reset_error>
 8014f1a:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014f1e:	bd70      	pop	{r4, r5, r6, pc}
 8014f20:	200b      	movs	r0, #11
 8014f22:	bd70      	pop	{r4, r5, r6, pc}
 8014f24:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014f28:	4770      	bx	lr
 8014f2a:	bf00      	nop

08014f2c <rcl_action_take_cancel_request>:
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	d037      	beq.n	8014fa0 <rcl_action_take_cancel_request+0x74>
 8014f30:	b570      	push	{r4, r5, r6, lr}
 8014f32:	4604      	mov	r4, r0
 8014f34:	6800      	ldr	r0, [r0, #0]
 8014f36:	b370      	cbz	r0, 8014f96 <rcl_action_take_cancel_request+0x6a>
 8014f38:	460d      	mov	r5, r1
 8014f3a:	4616      	mov	r6, r2
 8014f3c:	f7fe f940 	bl	80131c0 <rcl_service_is_valid>
 8014f40:	b338      	cbz	r0, 8014f92 <rcl_action_take_cancel_request+0x66>
 8014f42:	6820      	ldr	r0, [r4, #0]
 8014f44:	3004      	adds	r0, #4
 8014f46:	f7fe f93b 	bl	80131c0 <rcl_service_is_valid>
 8014f4a:	b310      	cbz	r0, 8014f92 <rcl_action_take_cancel_request+0x66>
 8014f4c:	6820      	ldr	r0, [r4, #0]
 8014f4e:	3008      	adds	r0, #8
 8014f50:	f7fe f936 	bl	80131c0 <rcl_service_is_valid>
 8014f54:	b1e8      	cbz	r0, 8014f92 <rcl_action_take_cancel_request+0x66>
 8014f56:	6820      	ldr	r0, [r4, #0]
 8014f58:	300c      	adds	r0, #12
 8014f5a:	f7f7 f903 	bl	800c164 <rcl_publisher_is_valid>
 8014f5e:	b1c0      	cbz	r0, 8014f92 <rcl_action_take_cancel_request+0x66>
 8014f60:	6820      	ldr	r0, [r4, #0]
 8014f62:	3010      	adds	r0, #16
 8014f64:	f7f7 f8fe 	bl	800c164 <rcl_publisher_is_valid>
 8014f68:	b198      	cbz	r0, 8014f92 <rcl_action_take_cancel_request+0x66>
 8014f6a:	b1bd      	cbz	r5, 8014f9c <rcl_action_take_cancel_request+0x70>
 8014f6c:	b1b6      	cbz	r6, 8014f9c <rcl_action_take_cancel_request+0x70>
 8014f6e:	6820      	ldr	r0, [r4, #0]
 8014f70:	4632      	mov	r2, r6
 8014f72:	4629      	mov	r1, r5
 8014f74:	3004      	adds	r0, #4
 8014f76:	f7fe f8a3 	bl	80130c0 <rcl_take_request>
 8014f7a:	b148      	cbz	r0, 8014f90 <rcl_action_take_cancel_request+0x64>
 8014f7c:	280a      	cmp	r0, #10
 8014f7e:	d007      	beq.n	8014f90 <rcl_action_take_cancel_request+0x64>
 8014f80:	f240 2259 	movw	r2, #601	@ 0x259
 8014f84:	f241 0369 	movw	r3, #4201	@ 0x1069
 8014f88:	4290      	cmp	r0, r2
 8014f8a:	bf0c      	ite	eq
 8014f8c:	4618      	moveq	r0, r3
 8014f8e:	2001      	movne	r0, #1
 8014f90:	bd70      	pop	{r4, r5, r6, pc}
 8014f92:	f7f8 f879 	bl	800d088 <rcutils_reset_error>
 8014f96:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014f9a:	bd70      	pop	{r4, r5, r6, pc}
 8014f9c:	200b      	movs	r0, #11
 8014f9e:	bd70      	pop	{r4, r5, r6, pc}
 8014fa0:	f241 0068 	movw	r0, #4200	@ 0x1068
 8014fa4:	4770      	bx	lr
 8014fa6:	bf00      	nop

08014fa8 <rcl_action_send_cancel_response>:
 8014fa8:	b380      	cbz	r0, 801500c <rcl_action_send_cancel_response+0x64>
 8014faa:	b570      	push	{r4, r5, r6, lr}
 8014fac:	4604      	mov	r4, r0
 8014fae:	6800      	ldr	r0, [r0, #0]
 8014fb0:	b338      	cbz	r0, 8015002 <rcl_action_send_cancel_response+0x5a>
 8014fb2:	460d      	mov	r5, r1
 8014fb4:	4616      	mov	r6, r2
 8014fb6:	f7fe f903 	bl	80131c0 <rcl_service_is_valid>
 8014fba:	b300      	cbz	r0, 8014ffe <rcl_action_send_cancel_response+0x56>
 8014fbc:	6820      	ldr	r0, [r4, #0]
 8014fbe:	3004      	adds	r0, #4
 8014fc0:	f7fe f8fe 	bl	80131c0 <rcl_service_is_valid>
 8014fc4:	b1d8      	cbz	r0, 8014ffe <rcl_action_send_cancel_response+0x56>
 8014fc6:	6820      	ldr	r0, [r4, #0]
 8014fc8:	3008      	adds	r0, #8
 8014fca:	f7fe f8f9 	bl	80131c0 <rcl_service_is_valid>
 8014fce:	b1b0      	cbz	r0, 8014ffe <rcl_action_send_cancel_response+0x56>
 8014fd0:	6820      	ldr	r0, [r4, #0]
 8014fd2:	300c      	adds	r0, #12
 8014fd4:	f7f7 f8c6 	bl	800c164 <rcl_publisher_is_valid>
 8014fd8:	b188      	cbz	r0, 8014ffe <rcl_action_send_cancel_response+0x56>
 8014fda:	6820      	ldr	r0, [r4, #0]
 8014fdc:	3010      	adds	r0, #16
 8014fde:	f7f7 f8c1 	bl	800c164 <rcl_publisher_is_valid>
 8014fe2:	b160      	cbz	r0, 8014ffe <rcl_action_send_cancel_response+0x56>
 8014fe4:	b185      	cbz	r5, 8015008 <rcl_action_send_cancel_response+0x60>
 8014fe6:	b17e      	cbz	r6, 8015008 <rcl_action_send_cancel_response+0x60>
 8014fe8:	6820      	ldr	r0, [r4, #0]
 8014fea:	4632      	mov	r2, r6
 8014fec:	4629      	mov	r1, r5
 8014fee:	3004      	adds	r0, #4
 8014ff0:	f7fe f8b6 	bl	8013160 <rcl_send_response>
 8014ff4:	b110      	cbz	r0, 8014ffc <rcl_action_send_cancel_response+0x54>
 8014ff6:	2802      	cmp	r0, #2
 8014ff8:	bf18      	it	ne
 8014ffa:	2001      	movne	r0, #1
 8014ffc:	bd70      	pop	{r4, r5, r6, pc}
 8014ffe:	f7f8 f843 	bl	800d088 <rcutils_reset_error>
 8015002:	f241 0068 	movw	r0, #4200	@ 0x1068
 8015006:	bd70      	pop	{r4, r5, r6, pc}
 8015008:	200b      	movs	r0, #11
 801500a:	bd70      	pop	{r4, r5, r6, pc}
 801500c:	f241 0068 	movw	r0, #4200	@ 0x1068
 8015010:	4770      	bx	lr
 8015012:	bf00      	nop

08015014 <rcl_action_wait_set_add_action_server>:
 8015014:	2800      	cmp	r0, #0
 8015016:	d04a      	beq.n	80150ae <rcl_action_wait_set_add_action_server+0x9a>
 8015018:	b570      	push	{r4, r5, r6, lr}
 801501a:	460c      	mov	r4, r1
 801501c:	2900      	cmp	r1, #0
 801501e:	d043      	beq.n	80150a8 <rcl_action_wait_set_add_action_server+0x94>
 8015020:	4605      	mov	r5, r0
 8015022:	6808      	ldr	r0, [r1, #0]
 8015024:	2800      	cmp	r0, #0
 8015026:	d03f      	beq.n	80150a8 <rcl_action_wait_set_add_action_server+0x94>
 8015028:	4616      	mov	r6, r2
 801502a:	f7fe f8c9 	bl	80131c0 <rcl_service_is_valid>
 801502e:	2800      	cmp	r0, #0
 8015030:	d038      	beq.n	80150a4 <rcl_action_wait_set_add_action_server+0x90>
 8015032:	6820      	ldr	r0, [r4, #0]
 8015034:	3004      	adds	r0, #4
 8015036:	f7fe f8c3 	bl	80131c0 <rcl_service_is_valid>
 801503a:	b398      	cbz	r0, 80150a4 <rcl_action_wait_set_add_action_server+0x90>
 801503c:	6820      	ldr	r0, [r4, #0]
 801503e:	3008      	adds	r0, #8
 8015040:	f7fe f8be 	bl	80131c0 <rcl_service_is_valid>
 8015044:	b370      	cbz	r0, 80150a4 <rcl_action_wait_set_add_action_server+0x90>
 8015046:	6820      	ldr	r0, [r4, #0]
 8015048:	300c      	adds	r0, #12
 801504a:	f7f7 f8a5 	bl	800c198 <rcl_publisher_is_valid_except_context>
 801504e:	b348      	cbz	r0, 80150a4 <rcl_action_wait_set_add_action_server+0x90>
 8015050:	6820      	ldr	r0, [r4, #0]
 8015052:	3010      	adds	r0, #16
 8015054:	f7f7 f8a0 	bl	800c198 <rcl_publisher_is_valid_except_context>
 8015058:	b320      	cbz	r0, 80150a4 <rcl_action_wait_set_add_action_server+0x90>
 801505a:	6821      	ldr	r1, [r4, #0]
 801505c:	4628      	mov	r0, r5
 801505e:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8015062:	f7ff fa8b 	bl	801457c <rcl_wait_set_add_service>
 8015066:	b9e0      	cbnz	r0, 80150a2 <rcl_action_wait_set_add_action_server+0x8e>
 8015068:	6821      	ldr	r1, [r4, #0]
 801506a:	4628      	mov	r0, r5
 801506c:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8015070:	3104      	adds	r1, #4
 8015072:	f7ff fa83 	bl	801457c <rcl_wait_set_add_service>
 8015076:	b9a0      	cbnz	r0, 80150a2 <rcl_action_wait_set_add_action_server+0x8e>
 8015078:	6821      	ldr	r1, [r4, #0]
 801507a:	4628      	mov	r0, r5
 801507c:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8015080:	3108      	adds	r1, #8
 8015082:	f7ff fa7b 	bl	801457c <rcl_wait_set_add_service>
 8015086:	b960      	cbnz	r0, 80150a2 <rcl_action_wait_set_add_action_server+0x8e>
 8015088:	6821      	ldr	r1, [r4, #0]
 801508a:	4628      	mov	r0, r5
 801508c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8015090:	3114      	adds	r1, #20
 8015092:	f7ff fa17 	bl	80144c4 <rcl_wait_set_add_timer>
 8015096:	b920      	cbnz	r0, 80150a2 <rcl_action_wait_set_add_action_server+0x8e>
 8015098:	b11e      	cbz	r6, 80150a2 <rcl_action_wait_set_add_action_server+0x8e>
 801509a:	6823      	ldr	r3, [r4, #0]
 801509c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80150a0:	6033      	str	r3, [r6, #0]
 80150a2:	bd70      	pop	{r4, r5, r6, pc}
 80150a4:	f7f7 fff0 	bl	800d088 <rcutils_reset_error>
 80150a8:	f241 0068 	movw	r0, #4200	@ 0x1068
 80150ac:	bd70      	pop	{r4, r5, r6, pc}
 80150ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80150b2:	4770      	bx	lr

080150b4 <rcl_action_server_wait_set_get_entities_ready>:
 80150b4:	2800      	cmp	r0, #0
 80150b6:	d060      	beq.n	801517a <rcl_action_server_wait_set_get_entities_ready+0xc6>
 80150b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150ba:	460c      	mov	r4, r1
 80150bc:	2900      	cmp	r1, #0
 80150be:	d057      	beq.n	8015170 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 80150c0:	4605      	mov	r5, r0
 80150c2:	6808      	ldr	r0, [r1, #0]
 80150c4:	2800      	cmp	r0, #0
 80150c6:	d053      	beq.n	8015170 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 80150c8:	4616      	mov	r6, r2
 80150ca:	461f      	mov	r7, r3
 80150cc:	f7fe f878 	bl	80131c0 <rcl_service_is_valid>
 80150d0:	2800      	cmp	r0, #0
 80150d2:	d04b      	beq.n	801516c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 80150d4:	6820      	ldr	r0, [r4, #0]
 80150d6:	3004      	adds	r0, #4
 80150d8:	f7fe f872 	bl	80131c0 <rcl_service_is_valid>
 80150dc:	2800      	cmp	r0, #0
 80150de:	d045      	beq.n	801516c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 80150e0:	6820      	ldr	r0, [r4, #0]
 80150e2:	3008      	adds	r0, #8
 80150e4:	f7fe f86c 	bl	80131c0 <rcl_service_is_valid>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	d03f      	beq.n	801516c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 80150ec:	6820      	ldr	r0, [r4, #0]
 80150ee:	300c      	adds	r0, #12
 80150f0:	f7f7 f852 	bl	800c198 <rcl_publisher_is_valid_except_context>
 80150f4:	2800      	cmp	r0, #0
 80150f6:	d039      	beq.n	801516c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 80150f8:	6820      	ldr	r0, [r4, #0]
 80150fa:	3010      	adds	r0, #16
 80150fc:	f7f7 f84c 	bl	800c198 <rcl_publisher_is_valid_except_context>
 8015100:	b3a0      	cbz	r0, 801516c <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8015102:	b3c6      	cbz	r6, 8015176 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8015104:	b3bf      	cbz	r7, 8015176 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8015106:	9b06      	ldr	r3, [sp, #24]
 8015108:	b3ab      	cbz	r3, 8015176 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 801510a:	9b07      	ldr	r3, [sp, #28]
 801510c:	b39b      	cbz	r3, 8015176 <rcl_action_server_wait_set_get_entities_ready+0xc2>
 801510e:	6823      	ldr	r3, [r4, #0]
 8015110:	692a      	ldr	r2, [r5, #16]
 8015112:	6a2c      	ldr	r4, [r5, #32]
 8015114:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 8015118:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 801511c:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8015120:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8015124:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 8015128:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 801512c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8015130:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8015134:	1ae4      	subs	r4, r4, r3
 8015136:	fab4 f484 	clz	r4, r4
 801513a:	0964      	lsrs	r4, r4, #5
 801513c:	7034      	strb	r4, [r6, #0]
 801513e:	1d1c      	adds	r4, r3, #4
 8015140:	1b00      	subs	r0, r0, r4
 8015142:	fab0 f080 	clz	r0, r0
 8015146:	0940      	lsrs	r0, r0, #5
 8015148:	7038      	strb	r0, [r7, #0]
 801514a:	f103 0008 	add.w	r0, r3, #8
 801514e:	1a09      	subs	r1, r1, r0
 8015150:	3314      	adds	r3, #20
 8015152:	1ad3      	subs	r3, r2, r3
 8015154:	fab1 f181 	clz	r1, r1
 8015158:	9a06      	ldr	r2, [sp, #24]
 801515a:	0949      	lsrs	r1, r1, #5
 801515c:	7011      	strb	r1, [r2, #0]
 801515e:	fab3 f383 	clz	r3, r3
 8015162:	9a07      	ldr	r2, [sp, #28]
 8015164:	095b      	lsrs	r3, r3, #5
 8015166:	2000      	movs	r0, #0
 8015168:	7013      	strb	r3, [r2, #0]
 801516a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801516c:	f7f7 ff8c 	bl	800d088 <rcutils_reset_error>
 8015170:	f241 0068 	movw	r0, #4200	@ 0x1068
 8015174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015176:	200b      	movs	r0, #11
 8015178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801517a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801517e:	4770      	bx	lr

08015180 <_execute_event_handler>:
 8015180:	2002      	movs	r0, #2
 8015182:	4770      	bx	lr

08015184 <_cancel_goal_event_handler>:
 8015184:	2003      	movs	r0, #3
 8015186:	4770      	bx	lr

08015188 <_succeed_event_handler>:
 8015188:	2004      	movs	r0, #4
 801518a:	4770      	bx	lr

0801518c <_abort_event_handler>:
 801518c:	2006      	movs	r0, #6
 801518e:	4770      	bx	lr

08015190 <_canceled_event_handler>:
 8015190:	2005      	movs	r0, #5
 8015192:	4770      	bx	lr

08015194 <rcl_action_transition_goal_state>:
 8015194:	fa5f fc80 	uxtb.w	ip, r0
 8015198:	f1bc 0f06 	cmp.w	ip, #6
 801519c:	d80c      	bhi.n	80151b8 <rcl_action_transition_goal_state+0x24>
 801519e:	2904      	cmp	r1, #4
 80151a0:	d80a      	bhi.n	80151b8 <rcl_action_transition_goal_state+0x24>
 80151a2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80151a6:	b410      	push	{r4}
 80151a8:	440b      	add	r3, r1
 80151aa:	4c06      	ldr	r4, [pc, #24]	@ (80151c4 <rcl_action_transition_goal_state+0x30>)
 80151ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80151b0:	b123      	cbz	r3, 80151bc <rcl_action_transition_goal_state+0x28>
 80151b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151b6:	4718      	bx	r3
 80151b8:	2000      	movs	r0, #0
 80151ba:	4770      	bx	lr
 80151bc:	2000      	movs	r0, #0
 80151be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80151c2:	4770      	bx	lr
 80151c4:	0801c8d0 	.word	0x0801c8d0

080151c8 <rcl_action_get_zero_initialized_cancel_response>:
 80151c8:	b510      	push	{r4, lr}
 80151ca:	4c07      	ldr	r4, [pc, #28]	@ (80151e8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80151cc:	4686      	mov	lr, r0
 80151ce:	4684      	mov	ip, r0
 80151d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80151d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80151d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80151dc:	6823      	ldr	r3, [r4, #0]
 80151de:	f8cc 3000 	str.w	r3, [ip]
 80151e2:	4670      	mov	r0, lr
 80151e4:	bd10      	pop	{r4, pc}
 80151e6:	bf00      	nop
 80151e8:	0801c95c 	.word	0x0801c95c

080151ec <rclc_action_send_result_request>:
 80151ec:	b1d0      	cbz	r0, 8015224 <rclc_action_send_result_request+0x38>
 80151ee:	b500      	push	{lr}
 80151f0:	4684      	mov	ip, r0
 80151f2:	b087      	sub	sp, #28
 80151f4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80151f8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80151fc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8015200:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8015204:	f10d 0e08 	add.w	lr, sp, #8
 8015208:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801520c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8015210:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8015214:	a902      	add	r1, sp, #8
 8015216:	3010      	adds	r0, #16
 8015218:	f7ff fbfa 	bl	8014a10 <rcl_action_send_result_request>
 801521c:	b920      	cbnz	r0, 8015228 <rclc_action_send_result_request+0x3c>
 801521e:	b007      	add	sp, #28
 8015220:	f85d fb04 	ldr.w	pc, [sp], #4
 8015224:	200b      	movs	r0, #11
 8015226:	4770      	bx	lr
 8015228:	9001      	str	r0, [sp, #4]
 801522a:	f7f7 ff2d 	bl	800d088 <rcutils_reset_error>
 801522e:	9801      	ldr	r0, [sp, #4]
 8015230:	b007      	add	sp, #28
 8015232:	f85d fb04 	ldr.w	pc, [sp], #4
 8015236:	bf00      	nop

08015238 <rclc_action_take_goal_handle>:
 8015238:	4603      	mov	r3, r0
 801523a:	b158      	cbz	r0, 8015254 <rclc_action_take_goal_handle+0x1c>
 801523c:	6880      	ldr	r0, [r0, #8]
 801523e:	b148      	cbz	r0, 8015254 <rclc_action_take_goal_handle+0x1c>
 8015240:	6801      	ldr	r1, [r0, #0]
 8015242:	6099      	str	r1, [r3, #8]
 8015244:	2200      	movs	r2, #0
 8015246:	7202      	strb	r2, [r0, #8]
 8015248:	68d9      	ldr	r1, [r3, #12]
 801524a:	6001      	str	r1, [r0, #0]
 801524c:	6202      	str	r2, [r0, #32]
 801524e:	8482      	strh	r2, [r0, #36]	@ 0x24
 8015250:	60d8      	str	r0, [r3, #12]
 8015252:	4770      	bx	lr
 8015254:	4770      	bx	lr
 8015256:	bf00      	nop

08015258 <rclc_action_remove_used_goal_handle>:
 8015258:	b180      	cbz	r0, 801527c <rclc_action_remove_used_goal_handle+0x24>
 801525a:	b179      	cbz	r1, 801527c <rclc_action_remove_used_goal_handle+0x24>
 801525c:	68c3      	ldr	r3, [r0, #12]
 801525e:	4299      	cmp	r1, r3
 8015260:	d00d      	beq.n	801527e <rclc_action_remove_used_goal_handle+0x26>
 8015262:	b12b      	cbz	r3, 8015270 <rclc_action_remove_used_goal_handle+0x18>
 8015264:	681a      	ldr	r2, [r3, #0]
 8015266:	4291      	cmp	r1, r2
 8015268:	d003      	beq.n	8015272 <rclc_action_remove_used_goal_handle+0x1a>
 801526a:	4613      	mov	r3, r2
 801526c:	2b00      	cmp	r3, #0
 801526e:	d1f9      	bne.n	8015264 <rclc_action_remove_used_goal_handle+0xc>
 8015270:	4770      	bx	lr
 8015272:	680a      	ldr	r2, [r1, #0]
 8015274:	601a      	str	r2, [r3, #0]
 8015276:	6883      	ldr	r3, [r0, #8]
 8015278:	600b      	str	r3, [r1, #0]
 801527a:	6081      	str	r1, [r0, #8]
 801527c:	4770      	bx	lr
 801527e:	680b      	ldr	r3, [r1, #0]
 8015280:	60c3      	str	r3, [r0, #12]
 8015282:	e7f8      	b.n	8015276 <rclc_action_remove_used_goal_handle+0x1e>

08015284 <rclc_action_find_goal_handle_by_uuid>:
 8015284:	b538      	push	{r3, r4, r5, lr}
 8015286:	b180      	cbz	r0, 80152aa <rclc_action_find_goal_handle_by_uuid+0x26>
 8015288:	460d      	mov	r5, r1
 801528a:	b181      	cbz	r1, 80152ae <rclc_action_find_goal_handle_by_uuid+0x2a>
 801528c:	68c4      	ldr	r4, [r0, #12]
 801528e:	b914      	cbnz	r4, 8015296 <rclc_action_find_goal_handle_by_uuid+0x12>
 8015290:	e009      	b.n	80152a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015292:	6824      	ldr	r4, [r4, #0]
 8015294:	b13c      	cbz	r4, 80152a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 8015296:	2210      	movs	r2, #16
 8015298:	4629      	mov	r1, r5
 801529a:	f104 0009 	add.w	r0, r4, #9
 801529e:	f004 fe21 	bl	8019ee4 <memcmp>
 80152a2:	2800      	cmp	r0, #0
 80152a4:	d1f5      	bne.n	8015292 <rclc_action_find_goal_handle_by_uuid+0xe>
 80152a6:	4620      	mov	r0, r4
 80152a8:	bd38      	pop	{r3, r4, r5, pc}
 80152aa:	4604      	mov	r4, r0
 80152ac:	e7fb      	b.n	80152a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80152ae:	460c      	mov	r4, r1
 80152b0:	e7f9      	b.n	80152a6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80152b2:	bf00      	nop

080152b4 <rclc_action_find_first_handle_by_status>:
 80152b4:	b140      	cbz	r0, 80152c8 <rclc_action_find_first_handle_by_status+0x14>
 80152b6:	68c0      	ldr	r0, [r0, #12]
 80152b8:	b910      	cbnz	r0, 80152c0 <rclc_action_find_first_handle_by_status+0xc>
 80152ba:	e005      	b.n	80152c8 <rclc_action_find_first_handle_by_status+0x14>
 80152bc:	6800      	ldr	r0, [r0, #0]
 80152be:	b118      	cbz	r0, 80152c8 <rclc_action_find_first_handle_by_status+0x14>
 80152c0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80152c4:	428b      	cmp	r3, r1
 80152c6:	d1f9      	bne.n	80152bc <rclc_action_find_first_handle_by_status+0x8>
 80152c8:	4770      	bx	lr
 80152ca:	bf00      	nop

080152cc <rclc_action_find_first_terminated_handle>:
 80152cc:	b140      	cbz	r0, 80152e0 <rclc_action_find_first_terminated_handle+0x14>
 80152ce:	68c0      	ldr	r0, [r0, #12]
 80152d0:	b910      	cbnz	r0, 80152d8 <rclc_action_find_first_terminated_handle+0xc>
 80152d2:	e005      	b.n	80152e0 <rclc_action_find_first_terminated_handle+0x14>
 80152d4:	6800      	ldr	r0, [r0, #0]
 80152d6:	b118      	cbz	r0, 80152e0 <rclc_action_find_first_terminated_handle+0x14>
 80152d8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80152dc:	2b03      	cmp	r3, #3
 80152de:	ddf9      	ble.n	80152d4 <rclc_action_find_first_terminated_handle+0x8>
 80152e0:	4770      	bx	lr
 80152e2:	bf00      	nop

080152e4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80152e4:	b170      	cbz	r0, 8015304 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80152e6:	68c0      	ldr	r0, [r0, #12]
 80152e8:	b160      	cbz	r0, 8015304 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80152ea:	b410      	push	{r4}
 80152ec:	e001      	b.n	80152f2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80152ee:	6800      	ldr	r0, [r0, #0]
 80152f0:	b128      	cbz	r0, 80152fe <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80152f2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80152f6:	4299      	cmp	r1, r3
 80152f8:	bf08      	it	eq
 80152fa:	4294      	cmpeq	r4, r2
 80152fc:	d1f7      	bne.n	80152ee <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80152fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015302:	4770      	bx	lr
 8015304:	4770      	bx	lr
 8015306:	bf00      	nop

08015308 <rclc_action_find_handle_by_result_request_sequence_number>:
 8015308:	b170      	cbz	r0, 8015328 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801530a:	68c0      	ldr	r0, [r0, #12]
 801530c:	b160      	cbz	r0, 8015328 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801530e:	b410      	push	{r4}
 8015310:	e001      	b.n	8015316 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8015312:	6800      	ldr	r0, [r0, #0]
 8015314:	b128      	cbz	r0, 8015322 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8015316:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801531a:	4299      	cmp	r1, r3
 801531c:	bf08      	it	eq
 801531e:	4294      	cmpeq	r4, r2
 8015320:	d1f7      	bne.n	8015312 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8015322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015326:	4770      	bx	lr
 8015328:	4770      	bx	lr
 801532a:	bf00      	nop

0801532c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801532c:	b170      	cbz	r0, 801534c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801532e:	68c0      	ldr	r0, [r0, #12]
 8015330:	b160      	cbz	r0, 801534c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8015332:	b410      	push	{r4}
 8015334:	e001      	b.n	801533a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8015336:	6800      	ldr	r0, [r0, #0]
 8015338:	b128      	cbz	r0, 8015346 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801533a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801533e:	4299      	cmp	r1, r3
 8015340:	bf08      	it	eq
 8015342:	4294      	cmpeq	r4, r2
 8015344:	d1f7      	bne.n	8015336 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8015346:	f85d 4b04 	ldr.w	r4, [sp], #4
 801534a:	4770      	bx	lr
 801534c:	4770      	bx	lr
 801534e:	bf00      	nop

08015350 <rclc_action_find_first_handle_with_goal_response>:
 8015350:	b140      	cbz	r0, 8015364 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015352:	68c0      	ldr	r0, [r0, #12]
 8015354:	b910      	cbnz	r0, 801535c <rclc_action_find_first_handle_with_goal_response+0xc>
 8015356:	e005      	b.n	8015364 <rclc_action_find_first_handle_with_goal_response+0x14>
 8015358:	6800      	ldr	r0, [r0, #0]
 801535a:	b118      	cbz	r0, 8015364 <rclc_action_find_first_handle_with_goal_response+0x14>
 801535c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d0f9      	beq.n	8015358 <rclc_action_find_first_handle_with_goal_response+0x8>
 8015364:	4770      	bx	lr
 8015366:	bf00      	nop

08015368 <rclc_action_find_first_handle_with_result_response>:
 8015368:	b140      	cbz	r0, 801537c <rclc_action_find_first_handle_with_result_response+0x14>
 801536a:	68c0      	ldr	r0, [r0, #12]
 801536c:	b910      	cbnz	r0, 8015374 <rclc_action_find_first_handle_with_result_response+0xc>
 801536e:	e005      	b.n	801537c <rclc_action_find_first_handle_with_result_response+0x14>
 8015370:	6800      	ldr	r0, [r0, #0]
 8015372:	b118      	cbz	r0, 801537c <rclc_action_find_first_handle_with_result_response+0x14>
 8015374:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8015378:	2b00      	cmp	r3, #0
 801537a:	d0f9      	beq.n	8015370 <rclc_action_find_first_handle_with_result_response+0x8>
 801537c:	4770      	bx	lr
 801537e:	bf00      	nop

08015380 <rclc_action_server_response_goal_request>:
 8015380:	b198      	cbz	r0, 80153aa <rclc_action_server_response_goal_request+0x2a>
 8015382:	b510      	push	{r4, lr}
 8015384:	6844      	ldr	r4, [r0, #4]
 8015386:	b086      	sub	sp, #24
 8015388:	2200      	movs	r2, #0
 801538a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801538e:	460b      	mov	r3, r1
 8015390:	9205      	str	r2, [sp, #20]
 8015392:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8015396:	aa03      	add	r2, sp, #12
 8015398:	f104 0010 	add.w	r0, r4, #16
 801539c:	f88d 300c 	strb.w	r3, [sp, #12]
 80153a0:	f7ff fd52 	bl	8014e48 <rcl_action_send_goal_response>
 80153a4:	b918      	cbnz	r0, 80153ae <rclc_action_server_response_goal_request+0x2e>
 80153a6:	b006      	add	sp, #24
 80153a8:	bd10      	pop	{r4, pc}
 80153aa:	200b      	movs	r0, #11
 80153ac:	4770      	bx	lr
 80153ae:	9001      	str	r0, [sp, #4]
 80153b0:	f7f7 fe6a 	bl	800d088 <rcutils_reset_error>
 80153b4:	9801      	ldr	r0, [sp, #4]
 80153b6:	b006      	add	sp, #24
 80153b8:	bd10      	pop	{r4, pc}
 80153ba:	bf00      	nop
 80153bc:	0000      	movs	r0, r0
	...

080153c0 <rclc_action_server_goal_cancel_accept>:
 80153c0:	b310      	cbz	r0, 8015408 <rclc_action_server_goal_cancel_accept+0x48>
 80153c2:	b510      	push	{r4, lr}
 80153c4:	b090      	sub	sp, #64	@ 0x40
 80153c6:	4604      	mov	r4, r0
 80153c8:	a806      	add	r0, sp, #24
 80153ca:	f7ff fefd 	bl	80151c8 <rcl_action_get_zero_initialized_cancel_response>
 80153ce:	2300      	movs	r3, #0
 80153d0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80153d4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80153d8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80153dc:	f88d 3018 	strb.w	r3, [sp, #24]
 80153e0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80153e4:	f8cd d01c 	str.w	sp, [sp, #28]
 80153e8:	46ec      	mov	ip, sp
 80153ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153ee:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8015410 <rclc_action_server_goal_cancel_accept+0x50>
 80153f2:	6860      	ldr	r0, [r4, #4]
 80153f4:	aa06      	add	r2, sp, #24
 80153f6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80153fa:	3010      	adds	r0, #16
 80153fc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015400:	f7ff fdd2 	bl	8014fa8 <rcl_action_send_cancel_response>
 8015404:	b010      	add	sp, #64	@ 0x40
 8015406:	bd10      	pop	{r4, pc}
 8015408:	200b      	movs	r0, #11
 801540a:	4770      	bx	lr
 801540c:	f3af 8000 	nop.w
 8015410:	00000001 	.word	0x00000001
 8015414:	00000001 	.word	0x00000001

08015418 <rclc_action_server_goal_cancel_reject>:
 8015418:	b082      	sub	sp, #8
 801541a:	b530      	push	{r4, r5, lr}
 801541c:	b08b      	sub	sp, #44	@ 0x2c
 801541e:	ac0e      	add	r4, sp, #56	@ 0x38
 8015420:	e884 000c 	stmia.w	r4, {r2, r3}
 8015424:	b188      	cbz	r0, 801544a <rclc_action_server_goal_cancel_reject+0x32>
 8015426:	4604      	mov	r4, r0
 8015428:	a801      	add	r0, sp, #4
 801542a:	460d      	mov	r5, r1
 801542c:	f7ff fecc 	bl	80151c8 <rcl_action_get_zero_initialized_cancel_response>
 8015430:	aa01      	add	r2, sp, #4
 8015432:	a90e      	add	r1, sp, #56	@ 0x38
 8015434:	f104 0010 	add.w	r0, r4, #16
 8015438:	f88d 5004 	strb.w	r5, [sp, #4]
 801543c:	f7ff fdb4 	bl	8014fa8 <rcl_action_send_cancel_response>
 8015440:	b00b      	add	sp, #44	@ 0x2c
 8015442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015446:	b002      	add	sp, #8
 8015448:	4770      	bx	lr
 801544a:	200b      	movs	r0, #11
 801544c:	b00b      	add	sp, #44	@ 0x2c
 801544e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015452:	b002      	add	sp, #8
 8015454:	4770      	bx	lr
 8015456:	bf00      	nop

08015458 <__atomic_load_8>:
 8015458:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801545c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8015460:	4a15      	ldr	r2, [pc, #84]	@ (80154b8 <__atomic_load_8+0x60>)
 8015462:	4b16      	ldr	r3, [pc, #88]	@ (80154bc <__atomic_load_8+0x64>)
 8015464:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015468:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801546c:	fb02 f101 	mul.w	r1, r2, r1
 8015470:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8015474:	fba3 2301 	umull	r2, r3, r3, r1
 8015478:	091b      	lsrs	r3, r3, #4
 801547a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801547e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8015482:	b4f0      	push	{r4, r5, r6, r7}
 8015484:	4d0e      	ldr	r5, [pc, #56]	@ (80154c0 <__atomic_load_8+0x68>)
 8015486:	1ac9      	subs	r1, r1, r3
 8015488:	194a      	adds	r2, r1, r5
 801548a:	f04f 0c01 	mov.w	ip, #1
 801548e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8015492:	e8c2 cf44 	strexb	r4, ip, [r2]
 8015496:	2c00      	cmp	r4, #0
 8015498:	d1f9      	bne.n	801548e <__atomic_load_8+0x36>
 801549a:	f3bf 8f5b 	dmb	ish
 801549e:	b2dc      	uxtb	r4, r3
 80154a0:	2c00      	cmp	r4, #0
 80154a2:	d1f4      	bne.n	801548e <__atomic_load_8+0x36>
 80154a4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80154a8:	f3bf 8f5b 	dmb	ish
 80154ac:	546b      	strb	r3, [r5, r1]
 80154ae:	4630      	mov	r0, r6
 80154b0:	4639      	mov	r1, r7
 80154b2:	bcf0      	pop	{r4, r5, r6, r7}
 80154b4:	4770      	bx	lr
 80154b6:	bf00      	nop
 80154b8:	27d4eb2d 	.word	0x27d4eb2d
 80154bc:	b21642c9 	.word	0xb21642c9
 80154c0:	2001035c 	.word	0x2001035c

080154c4 <__atomic_store_8>:
 80154c4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80154c8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80154cc:	b570      	push	{r4, r5, r6, lr}
 80154ce:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80154d2:	4c14      	ldr	r4, [pc, #80]	@ (8015524 <__atomic_store_8+0x60>)
 80154d4:	4e14      	ldr	r6, [pc, #80]	@ (8015528 <__atomic_store_8+0x64>)
 80154d6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80154da:	fb04 f101 	mul.w	r1, r4, r1
 80154de:	4c13      	ldr	r4, [pc, #76]	@ (801552c <__atomic_store_8+0x68>)
 80154e0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80154e4:	fba4 5401 	umull	r5, r4, r4, r1
 80154e8:	0924      	lsrs	r4, r4, #4
 80154ea:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80154ee:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80154f2:	eba1 0e04 	sub.w	lr, r1, r4
 80154f6:	f04f 0501 	mov.w	r5, #1
 80154fa:	eb0e 0c06 	add.w	ip, lr, r6
 80154fe:	e8dc 1f4f 	ldrexb	r1, [ip]
 8015502:	e8cc 5f44 	strexb	r4, r5, [ip]
 8015506:	2c00      	cmp	r4, #0
 8015508:	d1f9      	bne.n	80154fe <__atomic_store_8+0x3a>
 801550a:	f3bf 8f5b 	dmb	ish
 801550e:	b2cc      	uxtb	r4, r1
 8015510:	2c00      	cmp	r4, #0
 8015512:	d1f4      	bne.n	80154fe <__atomic_store_8+0x3a>
 8015514:	e9c0 2300 	strd	r2, r3, [r0]
 8015518:	f3bf 8f5b 	dmb	ish
 801551c:	f806 100e 	strb.w	r1, [r6, lr]
 8015520:	bd70      	pop	{r4, r5, r6, pc}
 8015522:	bf00      	nop
 8015524:	27d4eb2d 	.word	0x27d4eb2d
 8015528:	2001035c 	.word	0x2001035c
 801552c:	b21642c9 	.word	0xb21642c9

08015530 <__atomic_exchange_8>:
 8015530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015532:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8015536:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 801553a:	4917      	ldr	r1, [pc, #92]	@ (8015598 <__atomic_exchange_8+0x68>)
 801553c:	4f17      	ldr	r7, [pc, #92]	@ (801559c <__atomic_exchange_8+0x6c>)
 801553e:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8015542:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8015546:	fb01 fe0e 	mul.w	lr, r1, lr
 801554a:	4915      	ldr	r1, [pc, #84]	@ (80155a0 <__atomic_exchange_8+0x70>)
 801554c:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8015550:	4606      	mov	r6, r0
 8015552:	fba1 010e 	umull	r0, r1, r1, lr
 8015556:	0909      	lsrs	r1, r1, #4
 8015558:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801555c:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8015560:	ebae 0e01 	sub.w	lr, lr, r1
 8015564:	f04f 0501 	mov.w	r5, #1
 8015568:	eb0e 0107 	add.w	r1, lr, r7
 801556c:	e8d1 cf4f 	ldrexb	ip, [r1]
 8015570:	e8c1 5f40 	strexb	r0, r5, [r1]
 8015574:	2800      	cmp	r0, #0
 8015576:	d1f9      	bne.n	801556c <__atomic_exchange_8+0x3c>
 8015578:	f3bf 8f5b 	dmb	ish
 801557c:	fa5f f48c 	uxtb.w	r4, ip
 8015580:	2c00      	cmp	r4, #0
 8015582:	d1f3      	bne.n	801556c <__atomic_exchange_8+0x3c>
 8015584:	e9d6 0100 	ldrd	r0, r1, [r6]
 8015588:	e9c6 2300 	strd	r2, r3, [r6]
 801558c:	f3bf 8f5b 	dmb	ish
 8015590:	f807 c00e 	strb.w	ip, [r7, lr]
 8015594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015596:	bf00      	nop
 8015598:	27d4eb2d 	.word	0x27d4eb2d
 801559c:	2001035c 	.word	0x2001035c
 80155a0:	b21642c9 	.word	0xb21642c9

080155a4 <rcutils_get_env>:
 80155a4:	b150      	cbz	r0, 80155bc <rcutils_get_env+0x18>
 80155a6:	b510      	push	{r4, lr}
 80155a8:	460c      	mov	r4, r1
 80155aa:	b909      	cbnz	r1, 80155b0 <rcutils_get_env+0xc>
 80155ac:	4806      	ldr	r0, [pc, #24]	@ (80155c8 <rcutils_get_env+0x24>)
 80155ae:	bd10      	pop	{r4, pc}
 80155b0:	f004 f812 	bl	80195d8 <getenv>
 80155b4:	b120      	cbz	r0, 80155c0 <rcutils_get_env+0x1c>
 80155b6:	6020      	str	r0, [r4, #0]
 80155b8:	2000      	movs	r0, #0
 80155ba:	bd10      	pop	{r4, pc}
 80155bc:	4803      	ldr	r0, [pc, #12]	@ (80155cc <rcutils_get_env+0x28>)
 80155be:	4770      	bx	lr
 80155c0:	4b03      	ldr	r3, [pc, #12]	@ (80155d0 <rcutils_get_env+0x2c>)
 80155c2:	6023      	str	r3, [r4, #0]
 80155c4:	e7f8      	b.n	80155b8 <rcutils_get_env+0x14>
 80155c6:	bf00      	nop
 80155c8:	0801bdd0 	.word	0x0801bdd0
 80155cc:	0801bdb4 	.word	0x0801bdb4
 80155d0:	0801bc14 	.word	0x0801bc14

080155d4 <rcutils_format_string_limit>:
 80155d4:	b40f      	push	{r0, r1, r2, r3}
 80155d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80155d8:	b083      	sub	sp, #12
 80155da:	ac08      	add	r4, sp, #32
 80155dc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80155de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80155e2:	b376      	cbz	r6, 8015642 <rcutils_format_string_limit+0x6e>
 80155e4:	4620      	mov	r0, r4
 80155e6:	f7f7 fd23 	bl	800d030 <rcutils_allocator_is_valid>
 80155ea:	b350      	cbz	r0, 8015642 <rcutils_format_string_limit+0x6e>
 80155ec:	2100      	movs	r1, #0
 80155ee:	ab0f      	add	r3, sp, #60	@ 0x3c
 80155f0:	4632      	mov	r2, r6
 80155f2:	4608      	mov	r0, r1
 80155f4:	e9cd 3300 	strd	r3, r3, [sp]
 80155f8:	f000 f8f8 	bl	80157ec <rcutils_vsnprintf>
 80155fc:	1c43      	adds	r3, r0, #1
 80155fe:	4605      	mov	r5, r0
 8015600:	d01f      	beq.n	8015642 <rcutils_format_string_limit+0x6e>
 8015602:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015604:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015606:	1c47      	adds	r7, r0, #1
 8015608:	429f      	cmp	r7, r3
 801560a:	bf84      	itt	hi
 801560c:	461f      	movhi	r7, r3
 801560e:	f103 35ff 	addhi.w	r5, r3, #4294967295
 8015612:	4638      	mov	r0, r7
 8015614:	9b08      	ldr	r3, [sp, #32]
 8015616:	4798      	blx	r3
 8015618:	4604      	mov	r4, r0
 801561a:	b190      	cbz	r0, 8015642 <rcutils_format_string_limit+0x6e>
 801561c:	9b01      	ldr	r3, [sp, #4]
 801561e:	4632      	mov	r2, r6
 8015620:	4639      	mov	r1, r7
 8015622:	f000 f8e3 	bl	80157ec <rcutils_vsnprintf>
 8015626:	2800      	cmp	r0, #0
 8015628:	db07      	blt.n	801563a <rcutils_format_string_limit+0x66>
 801562a:	2300      	movs	r3, #0
 801562c:	5563      	strb	r3, [r4, r5]
 801562e:	4620      	mov	r0, r4
 8015630:	b003      	add	sp, #12
 8015632:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015636:	b004      	add	sp, #16
 8015638:	4770      	bx	lr
 801563a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801563c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801563e:	4620      	mov	r0, r4
 8015640:	4798      	blx	r3
 8015642:	2400      	movs	r4, #0
 8015644:	e7f3      	b.n	801562e <rcutils_format_string_limit+0x5a>
 8015646:	bf00      	nop

08015648 <rcutils_repl_str>:
 8015648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801564c:	4699      	mov	r9, r3
 801564e:	b089      	sub	sp, #36	@ 0x24
 8015650:	4603      	mov	r3, r0
 8015652:	4648      	mov	r0, r9
 8015654:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015658:	4698      	mov	r8, r3
 801565a:	9300      	str	r3, [sp, #0]
 801565c:	460c      	mov	r4, r1
 801565e:	f7f7 fce7 	bl	800d030 <rcutils_allocator_is_valid>
 8015662:	2800      	cmp	r0, #0
 8015664:	f000 80a3 	beq.w	80157ae <rcutils_repl_str+0x166>
 8015668:	4620      	mov	r0, r4
 801566a:	f7ea fe31 	bl	80002d0 <strlen>
 801566e:	f04f 0a00 	mov.w	sl, #0
 8015672:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8015676:	9001      	str	r0, [sp, #4]
 8015678:	4657      	mov	r7, sl
 801567a:	4655      	mov	r5, sl
 801567c:	2610      	movs	r6, #16
 801567e:	e01e      	b.n	80156be <rcutils_repl_str+0x76>
 8015680:	3501      	adds	r5, #1
 8015682:	45aa      	cmp	sl, r5
 8015684:	d212      	bcs.n	80156ac <rcutils_repl_str+0x64>
 8015686:	44b2      	add	sl, r6
 8015688:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801568c:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8015690:	4798      	blx	r3
 8015692:	2800      	cmp	r0, #0
 8015694:	f000 8088 	beq.w	80157a8 <rcutils_repl_str+0x160>
 8015698:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801569c:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 80156a0:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80156a4:	4607      	mov	r7, r0
 80156a6:	bf28      	it	cs
 80156a8:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 80156ac:	9a00      	ldr	r2, [sp, #0]
 80156ae:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80156b2:	1aa2      	subs	r2, r4, r2
 80156b4:	f843 2c04 	str.w	r2, [r3, #-4]
 80156b8:	9b01      	ldr	r3, [sp, #4]
 80156ba:	eb04 0803 	add.w	r8, r4, r3
 80156be:	9902      	ldr	r1, [sp, #8]
 80156c0:	4640      	mov	r0, r8
 80156c2:	f004 fc73 	bl	8019fac <strstr>
 80156c6:	4604      	mov	r4, r0
 80156c8:	465a      	mov	r2, fp
 80156ca:	4638      	mov	r0, r7
 80156cc:	2c00      	cmp	r4, #0
 80156ce:	d1d7      	bne.n	8015680 <rcutils_repl_str+0x38>
 80156d0:	4640      	mov	r0, r8
 80156d2:	f7ea fdfd 	bl	80002d0 <strlen>
 80156d6:	9b00      	ldr	r3, [sp, #0]
 80156d8:	eba8 0803 	sub.w	r8, r8, r3
 80156dc:	eb08 0300 	add.w	r3, r8, r0
 80156e0:	9304      	str	r3, [sp, #16]
 80156e2:	f8d9 8000 	ldr.w	r8, [r9]
 80156e6:	2d00      	cmp	r5, #0
 80156e8:	d03f      	beq.n	801576a <rcutils_repl_str+0x122>
 80156ea:	9803      	ldr	r0, [sp, #12]
 80156ec:	f7ea fdf0 	bl	80002d0 <strlen>
 80156f0:	4606      	mov	r6, r0
 80156f2:	9801      	ldr	r0, [sp, #4]
 80156f4:	9a04      	ldr	r2, [sp, #16]
 80156f6:	1a33      	subs	r3, r6, r0
 80156f8:	fb05 2a03 	mla	sl, r5, r3, r2
 80156fc:	4659      	mov	r1, fp
 80156fe:	f10a 0001 	add.w	r0, sl, #1
 8015702:	47c0      	blx	r8
 8015704:	4683      	mov	fp, r0
 8015706:	2800      	cmp	r0, #0
 8015708:	d04e      	beq.n	80157a8 <rcutils_repl_str+0x160>
 801570a:	683a      	ldr	r2, [r7, #0]
 801570c:	9900      	ldr	r1, [sp, #0]
 801570e:	f004 fcee 	bl	801a0ee <memcpy>
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	9706      	str	r7, [sp, #24]
 8015716:	1e6a      	subs	r2, r5, #1
 8015718:	445b      	add	r3, fp
 801571a:	46a8      	mov	r8, r5
 801571c:	9202      	str	r2, [sp, #8]
 801571e:	4625      	mov	r5, r4
 8015720:	f8cd 901c 	str.w	r9, [sp, #28]
 8015724:	461c      	mov	r4, r3
 8015726:	9903      	ldr	r1, [sp, #12]
 8015728:	4632      	mov	r2, r6
 801572a:	4620      	mov	r0, r4
 801572c:	f004 fcdf 	bl	801a0ee <memcpy>
 8015730:	9b01      	ldr	r3, [sp, #4]
 8015732:	f857 2b04 	ldr.w	r2, [r7], #4
 8015736:	eb02 0c03 	add.w	ip, r2, r3
 801573a:	9b00      	ldr	r3, [sp, #0]
 801573c:	eb03 010c 	add.w	r1, r3, ip
 8015740:	9b02      	ldr	r3, [sp, #8]
 8015742:	4434      	add	r4, r6
 8015744:	429d      	cmp	r5, r3
 8015746:	4620      	mov	r0, r4
 8015748:	d022      	beq.n	8015790 <rcutils_repl_str+0x148>
 801574a:	683a      	ldr	r2, [r7, #0]
 801574c:	eba2 090c 	sub.w	r9, r2, ip
 8015750:	464a      	mov	r2, r9
 8015752:	3501      	adds	r5, #1
 8015754:	f004 fccb 	bl	801a0ee <memcpy>
 8015758:	45a8      	cmp	r8, r5
 801575a:	444c      	add	r4, r9
 801575c:	d1e3      	bne.n	8015726 <rcutils_repl_str+0xde>
 801575e:	2300      	movs	r3, #0
 8015760:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8015764:	f80b 300a 	strb.w	r3, [fp, sl]
 8015768:	e008      	b.n	801577c <rcutils_repl_str+0x134>
 801576a:	4618      	mov	r0, r3
 801576c:	4659      	mov	r1, fp
 801576e:	3001      	adds	r0, #1
 8015770:	47c0      	blx	r8
 8015772:	4683      	mov	fp, r0
 8015774:	b110      	cbz	r0, 801577c <rcutils_repl_str+0x134>
 8015776:	9900      	ldr	r1, [sp, #0]
 8015778:	f004 fcb1 	bl	801a0de <strcpy>
 801577c:	4638      	mov	r0, r7
 801577e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015782:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8015786:	4798      	blx	r3
 8015788:	4658      	mov	r0, fp
 801578a:	b009      	add	sp, #36	@ 0x24
 801578c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015790:	9b04      	ldr	r3, [sp, #16]
 8015792:	eba3 020c 	sub.w	r2, r3, ip
 8015796:	9205      	str	r2, [sp, #20]
 8015798:	3501      	adds	r5, #1
 801579a:	f004 fca8 	bl	801a0ee <memcpy>
 801579e:	9a05      	ldr	r2, [sp, #20]
 80157a0:	45a8      	cmp	r8, r5
 80157a2:	4414      	add	r4, r2
 80157a4:	d1bf      	bne.n	8015726 <rcutils_repl_str+0xde>
 80157a6:	e7da      	b.n	801575e <rcutils_repl_str+0x116>
 80157a8:	f04f 0b00 	mov.w	fp, #0
 80157ac:	e7e6      	b.n	801577c <rcutils_repl_str+0x134>
 80157ae:	4683      	mov	fp, r0
 80157b0:	4658      	mov	r0, fp
 80157b2:	b009      	add	sp, #36	@ 0x24
 80157b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157b8 <rcutils_snprintf>:
 80157b8:	b40c      	push	{r2, r3}
 80157ba:	b530      	push	{r4, r5, lr}
 80157bc:	b083      	sub	sp, #12
 80157be:	ab06      	add	r3, sp, #24
 80157c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80157c4:	9301      	str	r3, [sp, #4]
 80157c6:	b152      	cbz	r2, 80157de <rcutils_snprintf+0x26>
 80157c8:	b138      	cbz	r0, 80157da <rcutils_snprintf+0x22>
 80157ca:	b141      	cbz	r1, 80157de <rcutils_snprintf+0x26>
 80157cc:	f004 fae8 	bl	8019da0 <vsniprintf>
 80157d0:	b003      	add	sp, #12
 80157d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80157d6:	b002      	add	sp, #8
 80157d8:	4770      	bx	lr
 80157da:	2900      	cmp	r1, #0
 80157dc:	d0f6      	beq.n	80157cc <rcutils_snprintf+0x14>
 80157de:	f004 fc51 	bl	801a084 <__errno>
 80157e2:	2316      	movs	r3, #22
 80157e4:	6003      	str	r3, [r0, #0]
 80157e6:	f04f 30ff 	mov.w	r0, #4294967295
 80157ea:	e7f1      	b.n	80157d0 <rcutils_snprintf+0x18>

080157ec <rcutils_vsnprintf>:
 80157ec:	b570      	push	{r4, r5, r6, lr}
 80157ee:	b13a      	cbz	r2, 8015800 <rcutils_vsnprintf+0x14>
 80157f0:	b120      	cbz	r0, 80157fc <rcutils_vsnprintf+0x10>
 80157f2:	b129      	cbz	r1, 8015800 <rcutils_vsnprintf+0x14>
 80157f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80157f8:	f004 bad2 	b.w	8019da0 <vsniprintf>
 80157fc:	2900      	cmp	r1, #0
 80157fe:	d0f9      	beq.n	80157f4 <rcutils_vsnprintf+0x8>
 8015800:	f004 fc40 	bl	801a084 <__errno>
 8015804:	2316      	movs	r3, #22
 8015806:	6003      	str	r3, [r0, #0]
 8015808:	f04f 30ff 	mov.w	r0, #4294967295
 801580c:	bd70      	pop	{r4, r5, r6, pc}
 801580e:	bf00      	nop

08015810 <rcutils_strdup>:
 8015810:	b084      	sub	sp, #16
 8015812:	b570      	push	{r4, r5, r6, lr}
 8015814:	b086      	sub	sp, #24
 8015816:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 801581a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801581e:	4604      	mov	r4, r0
 8015820:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015824:	f10d 0e04 	add.w	lr, sp, #4
 8015828:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801582c:	f8dc 3000 	ldr.w	r3, [ip]
 8015830:	f8ce 3000 	str.w	r3, [lr]
 8015834:	b304      	cbz	r4, 8015878 <rcutils_strdup+0x68>
 8015836:	a801      	add	r0, sp, #4
 8015838:	f7f7 fbfa 	bl	800d030 <rcutils_allocator_is_valid>
 801583c:	b1e0      	cbz	r0, 8015878 <rcutils_strdup+0x68>
 801583e:	f04f 32ff 	mov.w	r2, #4294967295
 8015842:	2100      	movs	r1, #0
 8015844:	4620      	mov	r0, r4
 8015846:	f7ea fcf3 	bl	8000230 <memchr>
 801584a:	b190      	cbz	r0, 8015872 <rcutils_strdup+0x62>
 801584c:	1b06      	subs	r6, r0, r4
 801584e:	1c70      	adds	r0, r6, #1
 8015850:	9b01      	ldr	r3, [sp, #4]
 8015852:	9905      	ldr	r1, [sp, #20]
 8015854:	4798      	blx	r3
 8015856:	4605      	mov	r5, r0
 8015858:	b128      	cbz	r0, 8015866 <rcutils_strdup+0x56>
 801585a:	4632      	mov	r2, r6
 801585c:	4621      	mov	r1, r4
 801585e:	f004 fc46 	bl	801a0ee <memcpy>
 8015862:	2300      	movs	r3, #0
 8015864:	55ab      	strb	r3, [r5, r6]
 8015866:	4628      	mov	r0, r5
 8015868:	b006      	add	sp, #24
 801586a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801586e:	b004      	add	sp, #16
 8015870:	4770      	bx	lr
 8015872:	f04f 36ff 	mov.w	r6, #4294967295
 8015876:	e7eb      	b.n	8015850 <rcutils_strdup+0x40>
 8015878:	2500      	movs	r5, #0
 801587a:	e7f4      	b.n	8015866 <rcutils_strdup+0x56>

0801587c <rcutils_strndup>:
 801587c:	b082      	sub	sp, #8
 801587e:	b570      	push	{r4, r5, r6, lr}
 8015880:	ac04      	add	r4, sp, #16
 8015882:	e884 000c 	stmia.w	r4, {r2, r3}
 8015886:	b1e8      	cbz	r0, 80158c4 <rcutils_strndup+0x48>
 8015888:	4605      	mov	r5, r0
 801588a:	a804      	add	r0, sp, #16
 801588c:	460c      	mov	r4, r1
 801588e:	f7f7 fbcf 	bl	800d030 <rcutils_allocator_is_valid>
 8015892:	b1b8      	cbz	r0, 80158c4 <rcutils_strndup+0x48>
 8015894:	4622      	mov	r2, r4
 8015896:	2100      	movs	r1, #0
 8015898:	4628      	mov	r0, r5
 801589a:	f7ea fcc9 	bl	8000230 <memchr>
 801589e:	b100      	cbz	r0, 80158a2 <rcutils_strndup+0x26>
 80158a0:	1b44      	subs	r4, r0, r5
 80158a2:	9b04      	ldr	r3, [sp, #16]
 80158a4:	9908      	ldr	r1, [sp, #32]
 80158a6:	1c60      	adds	r0, r4, #1
 80158a8:	4798      	blx	r3
 80158aa:	4606      	mov	r6, r0
 80158ac:	b128      	cbz	r0, 80158ba <rcutils_strndup+0x3e>
 80158ae:	4622      	mov	r2, r4
 80158b0:	4629      	mov	r1, r5
 80158b2:	f004 fc1c 	bl	801a0ee <memcpy>
 80158b6:	2300      	movs	r3, #0
 80158b8:	5533      	strb	r3, [r6, r4]
 80158ba:	4630      	mov	r0, r6
 80158bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158c0:	b002      	add	sp, #8
 80158c2:	4770      	bx	lr
 80158c4:	2600      	movs	r6, #0
 80158c6:	4630      	mov	r0, r6
 80158c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158cc:	b002      	add	sp, #8
 80158ce:	4770      	bx	lr

080158d0 <rcutils_get_zero_initialized_string_map>:
 80158d0:	4b01      	ldr	r3, [pc, #4]	@ (80158d8 <rcutils_get_zero_initialized_string_map+0x8>)
 80158d2:	6818      	ldr	r0, [r3, #0]
 80158d4:	4770      	bx	lr
 80158d6:	bf00      	nop
 80158d8:	0801c980 	.word	0x0801c980

080158dc <rcutils_string_map_reserve>:
 80158dc:	2800      	cmp	r0, #0
 80158de:	d04e      	beq.n	801597e <rcutils_string_map_reserve+0xa2>
 80158e0:	b530      	push	{r4, r5, lr}
 80158e2:	6803      	ldr	r3, [r0, #0]
 80158e4:	b087      	sub	sp, #28
 80158e6:	4604      	mov	r4, r0
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d043      	beq.n	8015974 <rcutils_string_map_reserve+0x98>
 80158ec:	f103 0c0c 	add.w	ip, r3, #12
 80158f0:	460d      	mov	r5, r1
 80158f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80158f6:	f10d 0e04 	add.w	lr, sp, #4
 80158fa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80158fe:	f8dc 3000 	ldr.w	r3, [ip]
 8015902:	f8ce 3000 	str.w	r3, [lr]
 8015906:	a801      	add	r0, sp, #4
 8015908:	f7f7 fb92 	bl	800d030 <rcutils_allocator_is_valid>
 801590c:	b308      	cbz	r0, 8015952 <rcutils_string_map_reserve+0x76>
 801590e:	6823      	ldr	r3, [r4, #0]
 8015910:	6899      	ldr	r1, [r3, #8]
 8015912:	42a9      	cmp	r1, r5
 8015914:	d829      	bhi.n	801596a <rcutils_string_map_reserve+0x8e>
 8015916:	685a      	ldr	r2, [r3, #4]
 8015918:	42aa      	cmp	r2, r5
 801591a:	d024      	beq.n	8015966 <rcutils_string_map_reserve+0x8a>
 801591c:	b1e5      	cbz	r5, 8015958 <rcutils_string_map_reserve+0x7c>
 801591e:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 8015922:	d22a      	bcs.n	801597a <rcutils_string_map_reserve+0x9e>
 8015924:	6818      	ldr	r0, [r3, #0]
 8015926:	9a05      	ldr	r2, [sp, #20]
 8015928:	9b03      	ldr	r3, [sp, #12]
 801592a:	00e9      	lsls	r1, r5, #3
 801592c:	4798      	blx	r3
 801592e:	b320      	cbz	r0, 801597a <rcutils_string_map_reserve+0x9e>
 8015930:	6824      	ldr	r4, [r4, #0]
 8015932:	6861      	ldr	r1, [r4, #4]
 8015934:	6020      	str	r0, [r4, #0]
 8015936:	42a9      	cmp	r1, r5
 8015938:	d214      	bcs.n	8015964 <rcutils_string_map_reserve+0x88>
 801593a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 801593e:	1a69      	subs	r1, r5, r1
 8015940:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8015944:	2200      	movs	r2, #0
 8015946:	e9c3 2200 	strd	r2, r2, [r3]
 801594a:	3308      	adds	r3, #8
 801594c:	428b      	cmp	r3, r1
 801594e:	d1fa      	bne.n	8015946 <rcutils_string_map_reserve+0x6a>
 8015950:	e008      	b.n	8015964 <rcutils_string_map_reserve+0x88>
 8015952:	200b      	movs	r0, #11
 8015954:	b007      	add	sp, #28
 8015956:	bd30      	pop	{r4, r5, pc}
 8015958:	9a02      	ldr	r2, [sp, #8]
 801595a:	9905      	ldr	r1, [sp, #20]
 801595c:	6818      	ldr	r0, [r3, #0]
 801595e:	4790      	blx	r2
 8015960:	6824      	ldr	r4, [r4, #0]
 8015962:	6025      	str	r5, [r4, #0]
 8015964:	6065      	str	r5, [r4, #4]
 8015966:	2000      	movs	r0, #0
 8015968:	e7f4      	b.n	8015954 <rcutils_string_map_reserve+0x78>
 801596a:	4620      	mov	r0, r4
 801596c:	f7ff ffb6 	bl	80158dc <rcutils_string_map_reserve>
 8015970:	b007      	add	sp, #28
 8015972:	bd30      	pop	{r4, r5, pc}
 8015974:	201f      	movs	r0, #31
 8015976:	b007      	add	sp, #28
 8015978:	bd30      	pop	{r4, r5, pc}
 801597a:	200a      	movs	r0, #10
 801597c:	e7ea      	b.n	8015954 <rcutils_string_map_reserve+0x78>
 801597e:	200b      	movs	r0, #11
 8015980:	4770      	bx	lr
 8015982:	bf00      	nop

08015984 <rcutils_string_map_init>:
 8015984:	b082      	sub	sp, #8
 8015986:	b570      	push	{r4, r5, r6, lr}
 8015988:	ac04      	add	r4, sp, #16
 801598a:	e884 000c 	stmia.w	r4, {r2, r3}
 801598e:	b378      	cbz	r0, 80159f0 <rcutils_string_map_init+0x6c>
 8015990:	6806      	ldr	r6, [r0, #0]
 8015992:	4604      	mov	r4, r0
 8015994:	b12e      	cbz	r6, 80159a2 <rcutils_string_map_init+0x1e>
 8015996:	251e      	movs	r5, #30
 8015998:	4628      	mov	r0, r5
 801599a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801599e:	b002      	add	sp, #8
 80159a0:	4770      	bx	lr
 80159a2:	a804      	add	r0, sp, #16
 80159a4:	460d      	mov	r5, r1
 80159a6:	f7f7 fb43 	bl	800d030 <rcutils_allocator_is_valid>
 80159aa:	b308      	cbz	r0, 80159f0 <rcutils_string_map_init+0x6c>
 80159ac:	9b04      	ldr	r3, [sp, #16]
 80159ae:	9908      	ldr	r1, [sp, #32]
 80159b0:	2020      	movs	r0, #32
 80159b2:	4798      	blx	r3
 80159b4:	6020      	str	r0, [r4, #0]
 80159b6:	b308      	cbz	r0, 80159fc <rcutils_string_map_init+0x78>
 80159b8:	f10d 0e10 	add.w	lr, sp, #16
 80159bc:	e9c0 6600 	strd	r6, r6, [r0]
 80159c0:	6086      	str	r6, [r0, #8]
 80159c2:	f100 0c0c 	add.w	ip, r0, #12
 80159c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80159ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80159ce:	f8de 3000 	ldr.w	r3, [lr]
 80159d2:	f8cc 3000 	str.w	r3, [ip]
 80159d6:	4629      	mov	r1, r5
 80159d8:	4620      	mov	r0, r4
 80159da:	f7ff ff7f 	bl	80158dc <rcutils_string_map_reserve>
 80159de:	4605      	mov	r5, r0
 80159e0:	2800      	cmp	r0, #0
 80159e2:	d0d9      	beq.n	8015998 <rcutils_string_map_init+0x14>
 80159e4:	9b05      	ldr	r3, [sp, #20]
 80159e6:	9908      	ldr	r1, [sp, #32]
 80159e8:	6820      	ldr	r0, [r4, #0]
 80159ea:	4798      	blx	r3
 80159ec:	6026      	str	r6, [r4, #0]
 80159ee:	e7d3      	b.n	8015998 <rcutils_string_map_init+0x14>
 80159f0:	250b      	movs	r5, #11
 80159f2:	4628      	mov	r0, r5
 80159f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80159f8:	b002      	add	sp, #8
 80159fa:	4770      	bx	lr
 80159fc:	250a      	movs	r5, #10
 80159fe:	e7cb      	b.n	8015998 <rcutils_string_map_init+0x14>

08015a00 <rcutils_string_map_fini>:
 8015a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a04:	b086      	sub	sp, #24
 8015a06:	2800      	cmp	r0, #0
 8015a08:	d04f      	beq.n	8015aaa <rcutils_string_map_fini+0xaa>
 8015a0a:	6805      	ldr	r5, [r0, #0]
 8015a0c:	4606      	mov	r6, r0
 8015a0e:	2d00      	cmp	r5, #0
 8015a10:	d046      	beq.n	8015aa0 <rcutils_string_map_fini+0xa0>
 8015a12:	686b      	ldr	r3, [r5, #4]
 8015a14:	b353      	cbz	r3, 8015a6c <rcutils_string_map_fini+0x6c>
 8015a16:	2400      	movs	r4, #0
 8015a18:	682a      	ldr	r2, [r5, #0]
 8015a1a:	4627      	mov	r7, r4
 8015a1c:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8015a20:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8015a24:	b1f8      	cbz	r0, 8015a66 <rcutils_string_map_fini+0x66>
 8015a26:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8015a2a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015a2e:	4651      	mov	r1, sl
 8015a30:	47c8      	blx	r9
 8015a32:	682b      	ldr	r3, [r5, #0]
 8015a34:	eb03 0208 	add.w	r2, r3, r8
 8015a38:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8015a3c:	6850      	ldr	r0, [r2, #4]
 8015a3e:	4651      	mov	r1, sl
 8015a40:	47c8      	blx	r9
 8015a42:	682a      	ldr	r2, [r5, #0]
 8015a44:	68ab      	ldr	r3, [r5, #8]
 8015a46:	4442      	add	r2, r8
 8015a48:	3b01      	subs	r3, #1
 8015a4a:	6057      	str	r7, [r2, #4]
 8015a4c:	60ab      	str	r3, [r5, #8]
 8015a4e:	6835      	ldr	r5, [r6, #0]
 8015a50:	686b      	ldr	r3, [r5, #4]
 8015a52:	3401      	adds	r4, #1
 8015a54:	429c      	cmp	r4, r3
 8015a56:	d209      	bcs.n	8015a6c <rcutils_string_map_fini+0x6c>
 8015a58:	682a      	ldr	r2, [r5, #0]
 8015a5a:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8015a5e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8015a62:	2800      	cmp	r0, #0
 8015a64:	d1df      	bne.n	8015a26 <rcutils_string_map_fini+0x26>
 8015a66:	3401      	adds	r4, #1
 8015a68:	42a3      	cmp	r3, r4
 8015a6a:	d8d7      	bhi.n	8015a1c <rcutils_string_map_fini+0x1c>
 8015a6c:	2100      	movs	r1, #0
 8015a6e:	4630      	mov	r0, r6
 8015a70:	f7ff ff34 	bl	80158dc <rcutils_string_map_reserve>
 8015a74:	4604      	mov	r4, r0
 8015a76:	b118      	cbz	r0, 8015a80 <rcutils_string_map_fini+0x80>
 8015a78:	4620      	mov	r0, r4
 8015a7a:	b006      	add	sp, #24
 8015a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a80:	6835      	ldr	r5, [r6, #0]
 8015a82:	350c      	adds	r5, #12
 8015a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a86:	af01      	add	r7, sp, #4
 8015a88:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015a8a:	682b      	ldr	r3, [r5, #0]
 8015a8c:	603b      	str	r3, [r7, #0]
 8015a8e:	a801      	add	r0, sp, #4
 8015a90:	f7f7 face 	bl	800d030 <rcutils_allocator_is_valid>
 8015a94:	b148      	cbz	r0, 8015aaa <rcutils_string_map_fini+0xaa>
 8015a96:	9b02      	ldr	r3, [sp, #8]
 8015a98:	9905      	ldr	r1, [sp, #20]
 8015a9a:	6830      	ldr	r0, [r6, #0]
 8015a9c:	4798      	blx	r3
 8015a9e:	6034      	str	r4, [r6, #0]
 8015aa0:	2400      	movs	r4, #0
 8015aa2:	4620      	mov	r0, r4
 8015aa4:	b006      	add	sp, #24
 8015aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015aaa:	240b      	movs	r4, #11
 8015aac:	4620      	mov	r0, r4
 8015aae:	b006      	add	sp, #24
 8015ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015ab4 <rcutils_string_map_getn>:
 8015ab4:	b338      	cbz	r0, 8015b06 <rcutils_string_map_getn+0x52>
 8015ab6:	6800      	ldr	r0, [r0, #0]
 8015ab8:	b328      	cbz	r0, 8015b06 <rcutils_string_map_getn+0x52>
 8015aba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015abe:	460e      	mov	r6, r1
 8015ac0:	b1c1      	cbz	r1, 8015af4 <rcutils_string_map_getn+0x40>
 8015ac2:	e9d0 9800 	ldrd	r9, r8, [r0]
 8015ac6:	f1b8 0f00 	cmp.w	r8, #0
 8015aca:	d013      	beq.n	8015af4 <rcutils_string_map_getn+0x40>
 8015acc:	4617      	mov	r7, r2
 8015ace:	2400      	movs	r4, #0
 8015ad0:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8015ad4:	4628      	mov	r0, r5
 8015ad6:	b155      	cbz	r5, 8015aee <rcutils_string_map_getn+0x3a>
 8015ad8:	f7ea fbfa 	bl	80002d0 <strlen>
 8015adc:	42b8      	cmp	r0, r7
 8015ade:	4602      	mov	r2, r0
 8015ae0:	4629      	mov	r1, r5
 8015ae2:	bf38      	it	cc
 8015ae4:	463a      	movcc	r2, r7
 8015ae6:	4630      	mov	r0, r6
 8015ae8:	f004 fa3b 	bl	8019f62 <strncmp>
 8015aec:	b128      	cbz	r0, 8015afa <rcutils_string_map_getn+0x46>
 8015aee:	3401      	adds	r4, #1
 8015af0:	45a0      	cmp	r8, r4
 8015af2:	d1ed      	bne.n	8015ad0 <rcutils_string_map_getn+0x1c>
 8015af4:	2000      	movs	r0, #0
 8015af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015afa:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8015afe:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8015b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b06:	4770      	bx	lr

08015b08 <rmw_get_zero_initialized_context>:
 8015b08:	b510      	push	{r4, lr}
 8015b0a:	4903      	ldr	r1, [pc, #12]	@ (8015b18 <rmw_get_zero_initialized_context+0x10>)
 8015b0c:	4604      	mov	r4, r0
 8015b0e:	2270      	movs	r2, #112	@ 0x70
 8015b10:	f004 faed 	bl	801a0ee <memcpy>
 8015b14:	4620      	mov	r0, r4
 8015b16:	bd10      	pop	{r4, pc}
 8015b18:	0801c988 	.word	0x0801c988

08015b1c <rmw_get_zero_initialized_init_options>:
 8015b1c:	b510      	push	{r4, lr}
 8015b1e:	4903      	ldr	r1, [pc, #12]	@ (8015b2c <rmw_get_zero_initialized_init_options+0x10>)
 8015b20:	4604      	mov	r4, r0
 8015b22:	2258      	movs	r2, #88	@ 0x58
 8015b24:	f004 fae3 	bl	801a0ee <memcpy>
 8015b28:	4620      	mov	r0, r4
 8015b2a:	bd10      	pop	{r4, pc}
 8015b2c:	0801c9f8 	.word	0x0801c9f8

08015b30 <rmw_subscription_content_filter_options_fini>:
 8015b30:	b1b0      	cbz	r0, 8015b60 <rmw_subscription_content_filter_options_fini+0x30>
 8015b32:	b538      	push	{r3, r4, r5, lr}
 8015b34:	4604      	mov	r4, r0
 8015b36:	4608      	mov	r0, r1
 8015b38:	460d      	mov	r5, r1
 8015b3a:	f7f7 fa79 	bl	800d030 <rcutils_allocator_is_valid>
 8015b3e:	b168      	cbz	r0, 8015b5c <rmw_subscription_content_filter_options_fini+0x2c>
 8015b40:	6820      	ldr	r0, [r4, #0]
 8015b42:	b120      	cbz	r0, 8015b4e <rmw_subscription_content_filter_options_fini+0x1e>
 8015b44:	686b      	ldr	r3, [r5, #4]
 8015b46:	6929      	ldr	r1, [r5, #16]
 8015b48:	4798      	blx	r3
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	6023      	str	r3, [r4, #0]
 8015b4e:	1d20      	adds	r0, r4, #4
 8015b50:	f003 fa7e 	bl	8019050 <rcutils_string_array_fini>
 8015b54:	3800      	subs	r0, #0
 8015b56:	bf18      	it	ne
 8015b58:	2001      	movne	r0, #1
 8015b5a:	bd38      	pop	{r3, r4, r5, pc}
 8015b5c:	200b      	movs	r0, #11
 8015b5e:	bd38      	pop	{r3, r4, r5, pc}
 8015b60:	200b      	movs	r0, #11
 8015b62:	4770      	bx	lr

08015b64 <rmw_get_default_subscription_options>:
 8015b64:	2200      	movs	r2, #0
 8015b66:	e9c0 2200 	strd	r2, r2, [r0]
 8015b6a:	6082      	str	r2, [r0, #8]
 8015b6c:	4770      	bx	lr
 8015b6e:	bf00      	nop

08015b70 <rmw_time_equal>:
 8015b70:	b570      	push	{r4, r5, r6, lr}
 8015b72:	b084      	sub	sp, #16
 8015b74:	ac04      	add	r4, sp, #16
 8015b76:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015b7a:	4925      	ldr	r1, [pc, #148]	@ (8015c10 <rmw_time_equal+0xa0>)
 8015b7c:	9c01      	ldr	r4, [sp, #4]
 8015b7e:	2202      	movs	r2, #2
 8015b80:	4281      	cmp	r1, r0
 8015b82:	41a2      	sbcs	r2, r4
 8015b84:	d333      	bcc.n	8015bee <rmw_time_equal+0x7e>
 8015b86:	4603      	mov	r3, r0
 8015b88:	4822      	ldr	r0, [pc, #136]	@ (8015c14 <rmw_time_equal+0xa4>)
 8015b8a:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 8015b8e:	fba3 3200 	umull	r3, r2, r3, r0
 8015b92:	fb00 2204 	mla	r2, r0, r4, r2
 8015b96:	43de      	mvns	r6, r3
 8015b98:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015b9c:	1a84      	subs	r4, r0, r2
 8015b9e:	428e      	cmp	r6, r1
 8015ba0:	41ac      	sbcs	r4, r5
 8015ba2:	d332      	bcc.n	8015c0a <rmw_time_equal+0x9a>
 8015ba4:	eb11 0e03 	adds.w	lr, r1, r3
 8015ba8:	eb42 0005 	adc.w	r0, r2, r5
 8015bac:	9b08      	ldr	r3, [sp, #32]
 8015bae:	4918      	ldr	r1, [pc, #96]	@ (8015c10 <rmw_time_equal+0xa0>)
 8015bb0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015bb2:	2202      	movs	r2, #2
 8015bb4:	4299      	cmp	r1, r3
 8015bb6:	41aa      	sbcs	r2, r5
 8015bb8:	d31e      	bcc.n	8015bf8 <rmw_time_equal+0x88>
 8015bba:	4c16      	ldr	r4, [pc, #88]	@ (8015c14 <rmw_time_equal+0xa4>)
 8015bbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015bbe:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8015bc0:	fba3 3104 	umull	r3, r1, r3, r4
 8015bc4:	fb04 1105 	mla	r1, r4, r5, r1
 8015bc8:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8015bcc:	43dd      	mvns	r5, r3
 8015bce:	ebac 0401 	sub.w	r4, ip, r1
 8015bd2:	4295      	cmp	r5, r2
 8015bd4:	41b4      	sbcs	r4, r6
 8015bd6:	d314      	bcc.n	8015c02 <rmw_time_equal+0x92>
 8015bd8:	18d2      	adds	r2, r2, r3
 8015bda:	eb41 0306 	adc.w	r3, r1, r6
 8015bde:	4283      	cmp	r3, r0
 8015be0:	bf08      	it	eq
 8015be2:	4572      	cmpeq	r2, lr
 8015be4:	bf0c      	ite	eq
 8015be6:	2001      	moveq	r0, #1
 8015be8:	2000      	movne	r0, #0
 8015bea:	b004      	add	sp, #16
 8015bec:	bd70      	pop	{r4, r5, r6, pc}
 8015bee:	f04f 3eff 	mov.w	lr, #4294967295
 8015bf2:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015bf6:	e7d9      	b.n	8015bac <rmw_time_equal+0x3c>
 8015bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8015bfc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015c00:	e7ed      	b.n	8015bde <rmw_time_equal+0x6e>
 8015c02:	f04f 32ff 	mov.w	r2, #4294967295
 8015c06:	4663      	mov	r3, ip
 8015c08:	e7e9      	b.n	8015bde <rmw_time_equal+0x6e>
 8015c0a:	f04f 3eff 	mov.w	lr, #4294967295
 8015c0e:	e7cd      	b.n	8015bac <rmw_time_equal+0x3c>
 8015c10:	25c17d04 	.word	0x25c17d04
 8015c14:	3b9aca00 	.word	0x3b9aca00

08015c18 <rmw_time_total_nsec>:
 8015c18:	b430      	push	{r4, r5}
 8015c1a:	b084      	sub	sp, #16
 8015c1c:	ac04      	add	r4, sp, #16
 8015c1e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015c22:	4914      	ldr	r1, [pc, #80]	@ (8015c74 <rmw_time_total_nsec+0x5c>)
 8015c24:	9c01      	ldr	r4, [sp, #4]
 8015c26:	2202      	movs	r2, #2
 8015c28:	4281      	cmp	r1, r0
 8015c2a:	41a2      	sbcs	r2, r4
 8015c2c:	d315      	bcc.n	8015c5a <rmw_time_total_nsec+0x42>
 8015c2e:	4912      	ldr	r1, [pc, #72]	@ (8015c78 <rmw_time_total_nsec+0x60>)
 8015c30:	4603      	mov	r3, r0
 8015c32:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 8015c36:	fba3 3201 	umull	r3, r2, r3, r1
 8015c3a:	fb01 2204 	mla	r2, r1, r4, r2
 8015c3e:	ea6f 0c03 	mvn.w	ip, r3
 8015c42:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015c46:	1a8c      	subs	r4, r1, r2
 8015c48:	4584      	cmp	ip, r0
 8015c4a:	41ac      	sbcs	r4, r5
 8015c4c:	d30c      	bcc.n	8015c68 <rmw_time_total_nsec+0x50>
 8015c4e:	1818      	adds	r0, r3, r0
 8015c50:	eb42 0105 	adc.w	r1, r2, r5
 8015c54:	b004      	add	sp, #16
 8015c56:	bc30      	pop	{r4, r5}
 8015c58:	4770      	bx	lr
 8015c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8015c5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015c62:	b004      	add	sp, #16
 8015c64:	bc30      	pop	{r4, r5}
 8015c66:	4770      	bx	lr
 8015c68:	f04f 30ff 	mov.w	r0, #4294967295
 8015c6c:	b004      	add	sp, #16
 8015c6e:	bc30      	pop	{r4, r5}
 8015c70:	4770      	bx	lr
 8015c72:	bf00      	nop
 8015c74:	25c17d04 	.word	0x25c17d04
 8015c78:	3b9aca00 	.word	0x3b9aca00

08015c7c <rmw_get_zero_initialized_message_info>:
 8015c7c:	b510      	push	{r4, lr}
 8015c7e:	4c09      	ldr	r4, [pc, #36]	@ (8015ca4 <rmw_get_zero_initialized_message_info+0x28>)
 8015c80:	4686      	mov	lr, r0
 8015c82:	4684      	mov	ip, r0
 8015c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015c9a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015c9e:	4670      	mov	r0, lr
 8015ca0:	bd10      	pop	{r4, pc}
 8015ca2:	bf00      	nop
 8015ca4:	0801ca50 	.word	0x0801ca50

08015ca8 <rmw_validate_full_topic_name>:
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	d049      	beq.n	8015d40 <rmw_validate_full_topic_name+0x98>
 8015cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb0:	460e      	mov	r6, r1
 8015cb2:	2900      	cmp	r1, #0
 8015cb4:	d056      	beq.n	8015d64 <rmw_validate_full_topic_name+0xbc>
 8015cb6:	4615      	mov	r5, r2
 8015cb8:	4604      	mov	r4, r0
 8015cba:	f7ea fb09 	bl	80002d0 <strlen>
 8015cbe:	b150      	cbz	r0, 8015cd6 <rmw_validate_full_topic_name+0x2e>
 8015cc0:	7823      	ldrb	r3, [r4, #0]
 8015cc2:	2b2f      	cmp	r3, #47	@ 0x2f
 8015cc4:	d00c      	beq.n	8015ce0 <rmw_validate_full_topic_name+0x38>
 8015cc6:	2302      	movs	r3, #2
 8015cc8:	6033      	str	r3, [r6, #0]
 8015cca:	b10d      	cbz	r5, 8015cd0 <rmw_validate_full_topic_name+0x28>
 8015ccc:	2300      	movs	r3, #0
 8015cce:	602b      	str	r3, [r5, #0]
 8015cd0:	2000      	movs	r0, #0
 8015cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	6033      	str	r3, [r6, #0]
 8015cda:	2d00      	cmp	r5, #0
 8015cdc:	d1f6      	bne.n	8015ccc <rmw_validate_full_topic_name+0x24>
 8015cde:	e7f7      	b.n	8015cd0 <rmw_validate_full_topic_name+0x28>
 8015ce0:	1e47      	subs	r7, r0, #1
 8015ce2:	5de3      	ldrb	r3, [r4, r7]
 8015ce4:	2b2f      	cmp	r3, #47	@ 0x2f
 8015ce6:	d03f      	beq.n	8015d68 <rmw_validate_full_topic_name+0xc0>
 8015ce8:	1e63      	subs	r3, r4, #1
 8015cea:	4621      	mov	r1, r4
 8015cec:	eb03 0e00 	add.w	lr, r3, r0
 8015cf0:	469c      	mov	ip, r3
 8015cf2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8015cf6:	2a5f      	cmp	r2, #95	@ 0x5f
 8015cf8:	d006      	beq.n	8015d08 <rmw_validate_full_topic_name+0x60>
 8015cfa:	d823      	bhi.n	8015d44 <rmw_validate_full_topic_name+0x9c>
 8015cfc:	2a39      	cmp	r2, #57	@ 0x39
 8015cfe:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8015d02:	d82b      	bhi.n	8015d5c <rmw_validate_full_topic_name+0xb4>
 8015d04:	2a2e      	cmp	r2, #46	@ 0x2e
 8015d06:	d920      	bls.n	8015d4a <rmw_validate_full_topic_name+0xa2>
 8015d08:	4573      	cmp	r3, lr
 8015d0a:	d1f1      	bne.n	8015cf0 <rmw_validate_full_topic_name+0x48>
 8015d0c:	4c21      	ldr	r4, [pc, #132]	@ (8015d94 <rmw_validate_full_topic_name+0xec>)
 8015d0e:	2300      	movs	r3, #0
 8015d10:	e003      	b.n	8015d1a <rmw_validate_full_topic_name+0x72>
 8015d12:	4298      	cmp	r0, r3
 8015d14:	f101 0101 	add.w	r1, r1, #1
 8015d18:	d02c      	beq.n	8015d74 <rmw_validate_full_topic_name+0xcc>
 8015d1a:	429f      	cmp	r7, r3
 8015d1c:	f103 0301 	add.w	r3, r3, #1
 8015d20:	d0f7      	beq.n	8015d12 <rmw_validate_full_topic_name+0x6a>
 8015d22:	780a      	ldrb	r2, [r1, #0]
 8015d24:	2a2f      	cmp	r2, #47	@ 0x2f
 8015d26:	d1f4      	bne.n	8015d12 <rmw_validate_full_topic_name+0x6a>
 8015d28:	784a      	ldrb	r2, [r1, #1]
 8015d2a:	2a2f      	cmp	r2, #47	@ 0x2f
 8015d2c:	d02d      	beq.n	8015d8a <rmw_validate_full_topic_name+0xe2>
 8015d2e:	5ca2      	ldrb	r2, [r4, r2]
 8015d30:	0752      	lsls	r2, r2, #29
 8015d32:	d5ee      	bpl.n	8015d12 <rmw_validate_full_topic_name+0x6a>
 8015d34:	2206      	movs	r2, #6
 8015d36:	6032      	str	r2, [r6, #0]
 8015d38:	2d00      	cmp	r5, #0
 8015d3a:	d0c9      	beq.n	8015cd0 <rmw_validate_full_topic_name+0x28>
 8015d3c:	602b      	str	r3, [r5, #0]
 8015d3e:	e7c7      	b.n	8015cd0 <rmw_validate_full_topic_name+0x28>
 8015d40:	200b      	movs	r0, #11
 8015d42:	4770      	bx	lr
 8015d44:	3a61      	subs	r2, #97	@ 0x61
 8015d46:	2a19      	cmp	r2, #25
 8015d48:	d9de      	bls.n	8015d08 <rmw_validate_full_topic_name+0x60>
 8015d4a:	2304      	movs	r3, #4
 8015d4c:	6033      	str	r3, [r6, #0]
 8015d4e:	2d00      	cmp	r5, #0
 8015d50:	d0be      	beq.n	8015cd0 <rmw_validate_full_topic_name+0x28>
 8015d52:	f1c4 0401 	rsb	r4, r4, #1
 8015d56:	4464      	add	r4, ip
 8015d58:	602c      	str	r4, [r5, #0]
 8015d5a:	e7b9      	b.n	8015cd0 <rmw_validate_full_topic_name+0x28>
 8015d5c:	f1b8 0f19 	cmp.w	r8, #25
 8015d60:	d9d2      	bls.n	8015d08 <rmw_validate_full_topic_name+0x60>
 8015d62:	e7f2      	b.n	8015d4a <rmw_validate_full_topic_name+0xa2>
 8015d64:	200b      	movs	r0, #11
 8015d66:	e7b4      	b.n	8015cd2 <rmw_validate_full_topic_name+0x2a>
 8015d68:	2303      	movs	r3, #3
 8015d6a:	6033      	str	r3, [r6, #0]
 8015d6c:	2d00      	cmp	r5, #0
 8015d6e:	d0af      	beq.n	8015cd0 <rmw_validate_full_topic_name+0x28>
 8015d70:	602f      	str	r7, [r5, #0]
 8015d72:	e7ad      	b.n	8015cd0 <rmw_validate_full_topic_name+0x28>
 8015d74:	28f7      	cmp	r0, #247	@ 0xf7
 8015d76:	d802      	bhi.n	8015d7e <rmw_validate_full_topic_name+0xd6>
 8015d78:	2300      	movs	r3, #0
 8015d7a:	6033      	str	r3, [r6, #0]
 8015d7c:	e7a8      	b.n	8015cd0 <rmw_validate_full_topic_name+0x28>
 8015d7e:	2307      	movs	r3, #7
 8015d80:	6033      	str	r3, [r6, #0]
 8015d82:	2d00      	cmp	r5, #0
 8015d84:	d0a4      	beq.n	8015cd0 <rmw_validate_full_topic_name+0x28>
 8015d86:	23f6      	movs	r3, #246	@ 0xf6
 8015d88:	e7d8      	b.n	8015d3c <rmw_validate_full_topic_name+0x94>
 8015d8a:	2205      	movs	r2, #5
 8015d8c:	6032      	str	r2, [r6, #0]
 8015d8e:	2d00      	cmp	r5, #0
 8015d90:	d1d4      	bne.n	8015d3c <rmw_validate_full_topic_name+0x94>
 8015d92:	e79d      	b.n	8015cd0 <rmw_validate_full_topic_name+0x28>
 8015d94:	0801ce83 	.word	0x0801ce83

08015d98 <rmw_validate_namespace_with_size>:
 8015d98:	2800      	cmp	r0, #0
 8015d9a:	d031      	beq.n	8015e00 <rmw_validate_namespace_with_size+0x68>
 8015d9c:	b570      	push	{r4, r5, r6, lr}
 8015d9e:	4614      	mov	r4, r2
 8015da0:	b0c2      	sub	sp, #264	@ 0x108
 8015da2:	b1ba      	cbz	r2, 8015dd4 <rmw_validate_namespace_with_size+0x3c>
 8015da4:	2901      	cmp	r1, #1
 8015da6:	460e      	mov	r6, r1
 8015da8:	461d      	mov	r5, r3
 8015daa:	d102      	bne.n	8015db2 <rmw_validate_namespace_with_size+0x1a>
 8015dac:	7803      	ldrb	r3, [r0, #0]
 8015dae:	2b2f      	cmp	r3, #47	@ 0x2f
 8015db0:	d015      	beq.n	8015dde <rmw_validate_namespace_with_size+0x46>
 8015db2:	aa01      	add	r2, sp, #4
 8015db4:	4669      	mov	r1, sp
 8015db6:	f7ff ff77 	bl	8015ca8 <rmw_validate_full_topic_name>
 8015dba:	b960      	cbnz	r0, 8015dd6 <rmw_validate_namespace_with_size+0x3e>
 8015dbc:	9b00      	ldr	r3, [sp, #0]
 8015dbe:	b163      	cbz	r3, 8015dda <rmw_validate_namespace_with_size+0x42>
 8015dc0:	2b07      	cmp	r3, #7
 8015dc2:	d00a      	beq.n	8015dda <rmw_validate_namespace_with_size+0x42>
 8015dc4:	1e5a      	subs	r2, r3, #1
 8015dc6:	2a05      	cmp	r2, #5
 8015dc8:	d81c      	bhi.n	8015e04 <rmw_validate_namespace_with_size+0x6c>
 8015dca:	e8df f002 	tbb	[pc, r2]
 8015dce:	0c0c      	.short	0x0c0c
 8015dd0:	0c0c0c0c 	.word	0x0c0c0c0c
 8015dd4:	200b      	movs	r0, #11
 8015dd6:	b042      	add	sp, #264	@ 0x108
 8015dd8:	bd70      	pop	{r4, r5, r6, pc}
 8015dda:	2ef5      	cmp	r6, #245	@ 0xf5
 8015ddc:	d809      	bhi.n	8015df2 <rmw_validate_namespace_with_size+0x5a>
 8015dde:	2300      	movs	r3, #0
 8015de0:	6023      	str	r3, [r4, #0]
 8015de2:	2000      	movs	r0, #0
 8015de4:	e7f7      	b.n	8015dd6 <rmw_validate_namespace_with_size+0x3e>
 8015de6:	6023      	str	r3, [r4, #0]
 8015de8:	2d00      	cmp	r5, #0
 8015dea:	d0fa      	beq.n	8015de2 <rmw_validate_namespace_with_size+0x4a>
 8015dec:	9b01      	ldr	r3, [sp, #4]
 8015dee:	602b      	str	r3, [r5, #0]
 8015df0:	e7f7      	b.n	8015de2 <rmw_validate_namespace_with_size+0x4a>
 8015df2:	2307      	movs	r3, #7
 8015df4:	6023      	str	r3, [r4, #0]
 8015df6:	2d00      	cmp	r5, #0
 8015df8:	d0f3      	beq.n	8015de2 <rmw_validate_namespace_with_size+0x4a>
 8015dfa:	23f4      	movs	r3, #244	@ 0xf4
 8015dfc:	602b      	str	r3, [r5, #0]
 8015dfe:	e7f0      	b.n	8015de2 <rmw_validate_namespace_with_size+0x4a>
 8015e00:	200b      	movs	r0, #11
 8015e02:	4770      	bx	lr
 8015e04:	4a03      	ldr	r2, [pc, #12]	@ (8015e14 <rmw_validate_namespace_with_size+0x7c>)
 8015e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015e0a:	a802      	add	r0, sp, #8
 8015e0c:	f7ff fcd4 	bl	80157b8 <rcutils_snprintf>
 8015e10:	2001      	movs	r0, #1
 8015e12:	e7e0      	b.n	8015dd6 <rmw_validate_namespace_with_size+0x3e>
 8015e14:	0801bdec 	.word	0x0801bdec

08015e18 <rmw_validate_namespace>:
 8015e18:	b168      	cbz	r0, 8015e36 <rmw_validate_namespace+0x1e>
 8015e1a:	b570      	push	{r4, r5, r6, lr}
 8015e1c:	460d      	mov	r5, r1
 8015e1e:	4616      	mov	r6, r2
 8015e20:	4604      	mov	r4, r0
 8015e22:	f7ea fa55 	bl	80002d0 <strlen>
 8015e26:	4633      	mov	r3, r6
 8015e28:	4601      	mov	r1, r0
 8015e2a:	462a      	mov	r2, r5
 8015e2c:	4620      	mov	r0, r4
 8015e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e32:	f7ff bfb1 	b.w	8015d98 <rmw_validate_namespace_with_size>
 8015e36:	200b      	movs	r0, #11
 8015e38:	4770      	bx	lr
 8015e3a:	bf00      	nop

08015e3c <rmw_namespace_validation_result_string>:
 8015e3c:	2807      	cmp	r0, #7
 8015e3e:	bf9a      	itte	ls
 8015e40:	4b02      	ldrls	r3, [pc, #8]	@ (8015e4c <rmw_namespace_validation_result_string+0x10>)
 8015e42:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015e46:	4802      	ldrhi	r0, [pc, #8]	@ (8015e50 <rmw_namespace_validation_result_string+0x14>)
 8015e48:	4770      	bx	lr
 8015e4a:	bf00      	nop
 8015e4c:	0801ca88 	.word	0x0801ca88
 8015e50:	0801be3c 	.word	0x0801be3c

08015e54 <rmw_validate_node_name>:
 8015e54:	2800      	cmp	r0, #0
 8015e56:	d037      	beq.n	8015ec8 <rmw_validate_node_name+0x74>
 8015e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e5a:	460e      	mov	r6, r1
 8015e5c:	2900      	cmp	r1, #0
 8015e5e:	d035      	beq.n	8015ecc <rmw_validate_node_name+0x78>
 8015e60:	4617      	mov	r7, r2
 8015e62:	4604      	mov	r4, r0
 8015e64:	f7ea fa34 	bl	80002d0 <strlen>
 8015e68:	b1d8      	cbz	r0, 8015ea2 <rmw_validate_node_name+0x4e>
 8015e6a:	1e63      	subs	r3, r4, #1
 8015e6c:	1819      	adds	r1, r3, r0
 8015e6e:	461a      	mov	r2, r3
 8015e70:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015e74:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8015e78:	f02e 0c20 	bic.w	ip, lr, #32
 8015e7c:	2d09      	cmp	r5, #9
 8015e7e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8015e82:	d915      	bls.n	8015eb0 <rmw_validate_node_name+0x5c>
 8015e84:	f1bc 0f19 	cmp.w	ip, #25
 8015e88:	d912      	bls.n	8015eb0 <rmw_validate_node_name+0x5c>
 8015e8a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015e8e:	d00f      	beq.n	8015eb0 <rmw_validate_node_name+0x5c>
 8015e90:	2302      	movs	r3, #2
 8015e92:	6033      	str	r3, [r6, #0]
 8015e94:	b11f      	cbz	r7, 8015e9e <rmw_validate_node_name+0x4a>
 8015e96:	f1c4 0401 	rsb	r4, r4, #1
 8015e9a:	4414      	add	r4, r2
 8015e9c:	603c      	str	r4, [r7, #0]
 8015e9e:	2000      	movs	r0, #0
 8015ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ea2:	2301      	movs	r3, #1
 8015ea4:	6033      	str	r3, [r6, #0]
 8015ea6:	2f00      	cmp	r7, #0
 8015ea8:	d0f9      	beq.n	8015e9e <rmw_validate_node_name+0x4a>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	603b      	str	r3, [r7, #0]
 8015eae:	e7f6      	b.n	8015e9e <rmw_validate_node_name+0x4a>
 8015eb0:	4299      	cmp	r1, r3
 8015eb2:	d1dc      	bne.n	8015e6e <rmw_validate_node_name+0x1a>
 8015eb4:	7823      	ldrb	r3, [r4, #0]
 8015eb6:	4a0c      	ldr	r2, [pc, #48]	@ (8015ee8 <rmw_validate_node_name+0x94>)
 8015eb8:	5cd3      	ldrb	r3, [r2, r3]
 8015eba:	f013 0304 	ands.w	r3, r3, #4
 8015ebe:	d10e      	bne.n	8015ede <rmw_validate_node_name+0x8a>
 8015ec0:	28ff      	cmp	r0, #255	@ 0xff
 8015ec2:	d805      	bhi.n	8015ed0 <rmw_validate_node_name+0x7c>
 8015ec4:	6033      	str	r3, [r6, #0]
 8015ec6:	e7ea      	b.n	8015e9e <rmw_validate_node_name+0x4a>
 8015ec8:	200b      	movs	r0, #11
 8015eca:	4770      	bx	lr
 8015ecc:	200b      	movs	r0, #11
 8015ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ed0:	2304      	movs	r3, #4
 8015ed2:	6033      	str	r3, [r6, #0]
 8015ed4:	2f00      	cmp	r7, #0
 8015ed6:	d0e2      	beq.n	8015e9e <rmw_validate_node_name+0x4a>
 8015ed8:	23fe      	movs	r3, #254	@ 0xfe
 8015eda:	603b      	str	r3, [r7, #0]
 8015edc:	e7df      	b.n	8015e9e <rmw_validate_node_name+0x4a>
 8015ede:	2303      	movs	r3, #3
 8015ee0:	6033      	str	r3, [r6, #0]
 8015ee2:	2f00      	cmp	r7, #0
 8015ee4:	d1e1      	bne.n	8015eaa <rmw_validate_node_name+0x56>
 8015ee6:	e7da      	b.n	8015e9e <rmw_validate_node_name+0x4a>
 8015ee8:	0801ce83 	.word	0x0801ce83

08015eec <rmw_node_name_validation_result_string>:
 8015eec:	2804      	cmp	r0, #4
 8015eee:	bf9a      	itte	ls
 8015ef0:	4b02      	ldrls	r3, [pc, #8]	@ (8015efc <rmw_node_name_validation_result_string+0x10>)
 8015ef2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015ef6:	4802      	ldrhi	r0, [pc, #8]	@ (8015f00 <rmw_node_name_validation_result_string+0x14>)
 8015ef8:	4770      	bx	lr
 8015efa:	bf00      	nop
 8015efc:	0801caa8 	.word	0x0801caa8
 8015f00:	0801bfe4 	.word	0x0801bfe4

08015f04 <get_memory>:
 8015f04:	4603      	mov	r3, r0
 8015f06:	6840      	ldr	r0, [r0, #4]
 8015f08:	b158      	cbz	r0, 8015f22 <get_memory+0x1e>
 8015f0a:	6842      	ldr	r2, [r0, #4]
 8015f0c:	605a      	str	r2, [r3, #4]
 8015f0e:	b10a      	cbz	r2, 8015f14 <get_memory+0x10>
 8015f10:	2100      	movs	r1, #0
 8015f12:	6011      	str	r1, [r2, #0]
 8015f14:	681a      	ldr	r2, [r3, #0]
 8015f16:	6042      	str	r2, [r0, #4]
 8015f18:	b102      	cbz	r2, 8015f1c <get_memory+0x18>
 8015f1a:	6010      	str	r0, [r2, #0]
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	6002      	str	r2, [r0, #0]
 8015f20:	6018      	str	r0, [r3, #0]
 8015f22:	4770      	bx	lr

08015f24 <put_memory>:
 8015f24:	680b      	ldr	r3, [r1, #0]
 8015f26:	b10b      	cbz	r3, 8015f2c <put_memory+0x8>
 8015f28:	684a      	ldr	r2, [r1, #4]
 8015f2a:	605a      	str	r2, [r3, #4]
 8015f2c:	684a      	ldr	r2, [r1, #4]
 8015f2e:	b102      	cbz	r2, 8015f32 <put_memory+0xe>
 8015f30:	6013      	str	r3, [r2, #0]
 8015f32:	6803      	ldr	r3, [r0, #0]
 8015f34:	428b      	cmp	r3, r1
 8015f36:	6843      	ldr	r3, [r0, #4]
 8015f38:	bf08      	it	eq
 8015f3a:	6002      	streq	r2, [r0, #0]
 8015f3c:	604b      	str	r3, [r1, #4]
 8015f3e:	b103      	cbz	r3, 8015f42 <put_memory+0x1e>
 8015f40:	6019      	str	r1, [r3, #0]
 8015f42:	2300      	movs	r3, #0
 8015f44:	600b      	str	r3, [r1, #0]
 8015f46:	6041      	str	r1, [r0, #4]
 8015f48:	4770      	bx	lr
 8015f4a:	bf00      	nop

08015f4c <rmw_destroy_client>:
 8015f4c:	b570      	push	{r4, r5, r6, lr}
 8015f4e:	b128      	cbz	r0, 8015f5c <rmw_destroy_client+0x10>
 8015f50:	4604      	mov	r4, r0
 8015f52:	6800      	ldr	r0, [r0, #0]
 8015f54:	460d      	mov	r5, r1
 8015f56:	f7f7 fea7 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 8015f5a:	b910      	cbnz	r0, 8015f62 <rmw_destroy_client+0x16>
 8015f5c:	2401      	movs	r4, #1
 8015f5e:	4620      	mov	r0, r4
 8015f60:	bd70      	pop	{r4, r5, r6, pc}
 8015f62:	6863      	ldr	r3, [r4, #4]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d0f9      	beq.n	8015f5c <rmw_destroy_client+0x10>
 8015f68:	2d00      	cmp	r5, #0
 8015f6a:	d0f7      	beq.n	8015f5c <rmw_destroy_client+0x10>
 8015f6c:	6828      	ldr	r0, [r5, #0]
 8015f6e:	f7f7 fe9b 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 8015f72:	2800      	cmp	r0, #0
 8015f74:	d0f2      	beq.n	8015f5c <rmw_destroy_client+0x10>
 8015f76:	686e      	ldr	r6, [r5, #4]
 8015f78:	2e00      	cmp	r6, #0
 8015f7a:	d0ef      	beq.n	8015f5c <rmw_destroy_client+0x10>
 8015f7c:	6864      	ldr	r4, [r4, #4]
 8015f7e:	6932      	ldr	r2, [r6, #16]
 8015f80:	6920      	ldr	r0, [r4, #16]
 8015f82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015f86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015f8a:	6819      	ldr	r1, [r3, #0]
 8015f8c:	f002 fa2c 	bl	80183e8 <uxr_buffer_cancel_data>
 8015f90:	4602      	mov	r2, r0
 8015f92:	6920      	ldr	r0, [r4, #16]
 8015f94:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015f98:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015f9c:	f7f7 fdfe 	bl	800db9c <run_xrce_session>
 8015fa0:	6920      	ldr	r0, [r4, #16]
 8015fa2:	6932      	ldr	r2, [r6, #16]
 8015fa4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015fa8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015fac:	6819      	ldr	r1, [r3, #0]
 8015fae:	f7f8 fca1 	bl	800e8f4 <uxr_buffer_delete_entity>
 8015fb2:	4602      	mov	r2, r0
 8015fb4:	6920      	ldr	r0, [r4, #16]
 8015fb6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015fba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015fbe:	f7f7 fded 	bl	800db9c <run_xrce_session>
 8015fc2:	f080 0401 	eor.w	r4, r0, #1
 8015fc6:	b2e4      	uxtb	r4, r4
 8015fc8:	4628      	mov	r0, r5
 8015fca:	0064      	lsls	r4, r4, #1
 8015fcc:	f7f7 fcc8 	bl	800d960 <rmw_uxrce_fini_client_memory>
 8015fd0:	e7c5      	b.n	8015f5e <rmw_destroy_client+0x12>
 8015fd2:	bf00      	nop

08015fd4 <rmw_get_gid_for_client>:
 8015fd4:	b1a8      	cbz	r0, 8016002 <rmw_get_gid_for_client+0x2e>
 8015fd6:	b538      	push	{r3, r4, r5, lr}
 8015fd8:	460c      	mov	r4, r1
 8015fda:	b1a1      	cbz	r1, 8016006 <rmw_get_gid_for_client+0x32>
 8015fdc:	4605      	mov	r5, r0
 8015fde:	6800      	ldr	r0, [r0, #0]
 8015fe0:	b120      	cbz	r0, 8015fec <rmw_get_gid_for_client+0x18>
 8015fe2:	4b0a      	ldr	r3, [pc, #40]	@ (801600c <rmw_get_gid_for_client+0x38>)
 8015fe4:	6819      	ldr	r1, [r3, #0]
 8015fe6:	f7ea f913 	bl	8000210 <strcmp>
 8015fea:	b940      	cbnz	r0, 8015ffe <rmw_get_gid_for_client+0x2a>
 8015fec:	686b      	ldr	r3, [r5, #4]
 8015fee:	2000      	movs	r0, #0
 8015ff0:	6060      	str	r0, [r4, #4]
 8015ff2:	60a0      	str	r0, [r4, #8]
 8015ff4:	60e0      	str	r0, [r4, #12]
 8015ff6:	6120      	str	r0, [r4, #16]
 8015ff8:	691b      	ldr	r3, [r3, #16]
 8015ffa:	6063      	str	r3, [r4, #4]
 8015ffc:	bd38      	pop	{r3, r4, r5, pc}
 8015ffe:	200c      	movs	r0, #12
 8016000:	bd38      	pop	{r3, r4, r5, pc}
 8016002:	200b      	movs	r0, #11
 8016004:	4770      	bx	lr
 8016006:	200b      	movs	r0, #11
 8016008:	bd38      	pop	{r3, r4, r5, pc}
 801600a:	bf00      	nop
 801600c:	0801cabc 	.word	0x0801cabc

08016010 <rmw_get_implementation_identifier>:
 8016010:	4b01      	ldr	r3, [pc, #4]	@ (8016018 <rmw_get_implementation_identifier+0x8>)
 8016012:	6818      	ldr	r0, [r3, #0]
 8016014:	4770      	bx	lr
 8016016:	bf00      	nop
 8016018:	0801cabc 	.word	0x0801cabc

0801601c <rmw_init_options_init>:
 801601c:	b084      	sub	sp, #16
 801601e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016020:	b083      	sub	sp, #12
 8016022:	ad09      	add	r5, sp, #36	@ 0x24
 8016024:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8016028:	b130      	cbz	r0, 8016038 <rmw_init_options_init+0x1c>
 801602a:	4604      	mov	r4, r0
 801602c:	4628      	mov	r0, r5
 801602e:	f7f6 ffff 	bl	800d030 <rcutils_allocator_is_valid>
 8016032:	b108      	cbz	r0, 8016038 <rmw_init_options_init+0x1c>
 8016034:	68a6      	ldr	r6, [r4, #8]
 8016036:	b12e      	cbz	r6, 8016044 <rmw_init_options_init+0x28>
 8016038:	200b      	movs	r0, #11
 801603a:	b003      	add	sp, #12
 801603c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016040:	b004      	add	sp, #16
 8016042:	4770      	bx	lr
 8016044:	2200      	movs	r2, #0
 8016046:	2300      	movs	r3, #0
 8016048:	e9c4 2300 	strd	r2, r3, [r4]
 801604c:	4b20      	ldr	r3, [pc, #128]	@ (80160d0 <rmw_init_options_init+0xb4>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	60a3      	str	r3, [r4, #8]
 8016052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016054:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 8016058:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801605c:	466f      	mov	r7, sp
 801605e:	682b      	ldr	r3, [r5, #0]
 8016060:	f8cc 3000 	str.w	r3, [ip]
 8016064:	4638      	mov	r0, r7
 8016066:	63a6      	str	r6, [r4, #56]	@ 0x38
 8016068:	60e6      	str	r6, [r4, #12]
 801606a:	f003 f877 	bl	801915c <rmw_get_default_security_options>
 801606e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016072:	f104 0310 	add.w	r3, r4, #16
 8016076:	e883 0003 	stmia.w	r3, {r0, r1}
 801607a:	2203      	movs	r2, #3
 801607c:	4815      	ldr	r0, [pc, #84]	@ (80160d4 <rmw_init_options_init+0xb8>)
 801607e:	4916      	ldr	r1, [pc, #88]	@ (80160d8 <rmw_init_options_init+0xbc>)
 8016080:	f7f7 fbae 	bl	800d7e0 <rmw_uxrce_init_init_options_impl_memory>
 8016084:	4813      	ldr	r0, [pc, #76]	@ (80160d4 <rmw_init_options_init+0xb8>)
 8016086:	f7ff ff3d 	bl	8015f04 <get_memory>
 801608a:	b1f0      	cbz	r0, 80160ca <rmw_init_options_init+0xae>
 801608c:	4a13      	ldr	r2, [pc, #76]	@ (80160dc <rmw_init_options_init+0xc0>)
 801608e:	6883      	ldr	r3, [r0, #8]
 8016090:	6851      	ldr	r1, [r2, #4]
 8016092:	7810      	ldrb	r0, [r2, #0]
 8016094:	6523      	str	r3, [r4, #80]	@ 0x50
 8016096:	7418      	strb	r0, [r3, #16]
 8016098:	6159      	str	r1, [r3, #20]
 801609a:	68d1      	ldr	r1, [r2, #12]
 801609c:	61d9      	str	r1, [r3, #28]
 801609e:	6911      	ldr	r1, [r2, #16]
 80160a0:	6219      	str	r1, [r3, #32]
 80160a2:	6951      	ldr	r1, [r2, #20]
 80160a4:	6892      	ldr	r2, [r2, #8]
 80160a6:	619a      	str	r2, [r3, #24]
 80160a8:	6259      	str	r1, [r3, #36]	@ 0x24
 80160aa:	f7fa feab 	bl	8010e04 <uxr_nanos>
 80160ae:	f003 fb99 	bl	80197e4 <srand>
 80160b2:	f003 fbc5 	bl	8019840 <rand>
 80160b6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80160b8:	6298      	str	r0, [r3, #40]	@ 0x28
 80160ba:	2800      	cmp	r0, #0
 80160bc:	d0f9      	beq.n	80160b2 <rmw_init_options_init+0x96>
 80160be:	2000      	movs	r0, #0
 80160c0:	b003      	add	sp, #12
 80160c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80160c6:	b004      	add	sp, #16
 80160c8:	4770      	bx	lr
 80160ca:	2001      	movs	r0, #1
 80160cc:	e7b5      	b.n	801603a <rmw_init_options_init+0x1e>
 80160ce:	bf00      	nop
 80160d0:	0801cabc 	.word	0x0801cabc
 80160d4:	2000b9b8 	.word	0x2000b9b8
 80160d8:	2000b934 	.word	0x2000b934
 80160dc:	2000b808 	.word	0x2000b808

080160e0 <rmw_init_options_copy>:
 80160e0:	2800      	cmp	r0, #0
 80160e2:	d03e      	beq.n	8016162 <rmw_init_options_copy+0x82>
 80160e4:	b570      	push	{r4, r5, r6, lr}
 80160e6:	460d      	mov	r5, r1
 80160e8:	b149      	cbz	r1, 80160fe <rmw_init_options_copy+0x1e>
 80160ea:	4604      	mov	r4, r0
 80160ec:	6880      	ldr	r0, [r0, #8]
 80160ee:	b120      	cbz	r0, 80160fa <rmw_init_options_copy+0x1a>
 80160f0:	4b21      	ldr	r3, [pc, #132]	@ (8016178 <rmw_init_options_copy+0x98>)
 80160f2:	6819      	ldr	r1, [r3, #0]
 80160f4:	f7ea f88c 	bl	8000210 <strcmp>
 80160f8:	bb78      	cbnz	r0, 801615a <rmw_init_options_copy+0x7a>
 80160fa:	68ab      	ldr	r3, [r5, #8]
 80160fc:	b11b      	cbz	r3, 8016106 <rmw_init_options_copy+0x26>
 80160fe:	f04f 0c0b 	mov.w	ip, #11
 8016102:	4660      	mov	r0, ip
 8016104:	bd70      	pop	{r4, r5, r6, pc}
 8016106:	2258      	movs	r2, #88	@ 0x58
 8016108:	4621      	mov	r1, r4
 801610a:	4628      	mov	r0, r5
 801610c:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8016110:	f003 ffed 	bl	801a0ee <memcpy>
 8016114:	4630      	mov	r0, r6
 8016116:	f7f6 ff8b 	bl	800d030 <rcutils_allocator_is_valid>
 801611a:	2800      	cmp	r0, #0
 801611c:	d0ef      	beq.n	80160fe <rmw_init_options_copy+0x1e>
 801611e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8016120:	b138      	cbz	r0, 8016132 <rmw_init_options_copy+0x52>
 8016122:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 8016126:	4631      	mov	r1, r6
 8016128:	f002 ffe4 	bl	80190f4 <rmw_enclave_options_copy>
 801612c:	4684      	mov	ip, r0
 801612e:	2800      	cmp	r0, #0
 8016130:	d1e7      	bne.n	8016102 <rmw_init_options_copy+0x22>
 8016132:	4812      	ldr	r0, [pc, #72]	@ (801617c <rmw_init_options_copy+0x9c>)
 8016134:	f7ff fee6 	bl	8015f04 <get_memory>
 8016138:	b1b8      	cbz	r0, 801616a <rmw_init_options_copy+0x8a>
 801613a:	6883      	ldr	r3, [r0, #8]
 801613c:	652b      	str	r3, [r5, #80]	@ 0x50
 801613e:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8016140:	3510      	adds	r5, #16
 8016142:	f103 0410 	add.w	r4, r3, #16
 8016146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801614a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801614e:	f04f 0c00 	mov.w	ip, #0
 8016152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016156:	4660      	mov	r0, ip
 8016158:	bd70      	pop	{r4, r5, r6, pc}
 801615a:	f04f 0c0c 	mov.w	ip, #12
 801615e:	4660      	mov	r0, ip
 8016160:	bd70      	pop	{r4, r5, r6, pc}
 8016162:	f04f 0c0b 	mov.w	ip, #11
 8016166:	4660      	mov	r0, ip
 8016168:	4770      	bx	lr
 801616a:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801616c:	4631      	mov	r1, r6
 801616e:	f002 ffe3 	bl	8019138 <rmw_enclave_options_fini>
 8016172:	f04f 0c01 	mov.w	ip, #1
 8016176:	e7c4      	b.n	8016102 <rmw_init_options_copy+0x22>
 8016178:	0801cabc 	.word	0x0801cabc
 801617c:	2000b9b8 	.word	0x2000b9b8

08016180 <rmw_init_options_fini>:
 8016180:	2800      	cmp	r0, #0
 8016182:	d035      	beq.n	80161f0 <rmw_init_options_fini+0x70>
 8016184:	b530      	push	{r4, r5, lr}
 8016186:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 801618a:	b097      	sub	sp, #92	@ 0x5c
 801618c:	4604      	mov	r4, r0
 801618e:	4628      	mov	r0, r5
 8016190:	f7f6 ff4e 	bl	800d030 <rcutils_allocator_is_valid>
 8016194:	b320      	cbz	r0, 80161e0 <rmw_init_options_fini+0x60>
 8016196:	68a0      	ldr	r0, [r4, #8]
 8016198:	b120      	cbz	r0, 80161a4 <rmw_init_options_fini+0x24>
 801619a:	4b16      	ldr	r3, [pc, #88]	@ (80161f4 <rmw_init_options_fini+0x74>)
 801619c:	6819      	ldr	r1, [r3, #0]
 801619e:	f7ea f837 	bl	8000210 <strcmp>
 80161a2:	bb18      	cbnz	r0, 80161ec <rmw_init_options_fini+0x6c>
 80161a4:	4b14      	ldr	r3, [pc, #80]	@ (80161f8 <rmw_init_options_fini+0x78>)
 80161a6:	6819      	ldr	r1, [r3, #0]
 80161a8:	b1e9      	cbz	r1, 80161e6 <rmw_init_options_fini+0x66>
 80161aa:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80161ac:	e001      	b.n	80161b2 <rmw_init_options_fini+0x32>
 80161ae:	6849      	ldr	r1, [r1, #4]
 80161b0:	b1c9      	cbz	r1, 80161e6 <rmw_init_options_fini+0x66>
 80161b2:	688b      	ldr	r3, [r1, #8]
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d1fa      	bne.n	80161ae <rmw_init_options_fini+0x2e>
 80161b8:	480f      	ldr	r0, [pc, #60]	@ (80161f8 <rmw_init_options_fini+0x78>)
 80161ba:	f7ff feb3 	bl	8015f24 <put_memory>
 80161be:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80161c0:	b118      	cbz	r0, 80161ca <rmw_init_options_fini+0x4a>
 80161c2:	4629      	mov	r1, r5
 80161c4:	f002 ffb8 	bl	8019138 <rmw_enclave_options_fini>
 80161c8:	b940      	cbnz	r0, 80161dc <rmw_init_options_fini+0x5c>
 80161ca:	4668      	mov	r0, sp
 80161cc:	f7ff fca6 	bl	8015b1c <rmw_get_zero_initialized_init_options>
 80161d0:	2258      	movs	r2, #88	@ 0x58
 80161d2:	4669      	mov	r1, sp
 80161d4:	4620      	mov	r0, r4
 80161d6:	f003 ff8a 	bl	801a0ee <memcpy>
 80161da:	2000      	movs	r0, #0
 80161dc:	b017      	add	sp, #92	@ 0x5c
 80161de:	bd30      	pop	{r4, r5, pc}
 80161e0:	200b      	movs	r0, #11
 80161e2:	b017      	add	sp, #92	@ 0x5c
 80161e4:	bd30      	pop	{r4, r5, pc}
 80161e6:	2001      	movs	r0, #1
 80161e8:	b017      	add	sp, #92	@ 0x5c
 80161ea:	bd30      	pop	{r4, r5, pc}
 80161ec:	200c      	movs	r0, #12
 80161ee:	e7f5      	b.n	80161dc <rmw_init_options_fini+0x5c>
 80161f0:	200b      	movs	r0, #11
 80161f2:	4770      	bx	lr
 80161f4:	0801cabc 	.word	0x0801cabc
 80161f8:	2000b9b8 	.word	0x2000b9b8

080161fc <rmw_init>:
 80161fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016200:	b083      	sub	sp, #12
 8016202:	2800      	cmp	r0, #0
 8016204:	f000 80d4 	beq.w	80163b0 <rmw_init+0x1b4>
 8016208:	460e      	mov	r6, r1
 801620a:	2900      	cmp	r1, #0
 801620c:	f000 80d0 	beq.w	80163b0 <rmw_init+0x1b4>
 8016210:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8016212:	4605      	mov	r5, r0
 8016214:	2b00      	cmp	r3, #0
 8016216:	f000 80cb 	beq.w	80163b0 <rmw_init+0x1b4>
 801621a:	4b77      	ldr	r3, [pc, #476]	@ (80163f8 <rmw_init+0x1fc>)
 801621c:	6880      	ldr	r0, [r0, #8]
 801621e:	681f      	ldr	r7, [r3, #0]
 8016220:	b128      	cbz	r0, 801622e <rmw_init+0x32>
 8016222:	4639      	mov	r1, r7
 8016224:	f7e9 fff4 	bl	8000210 <strcmp>
 8016228:	2800      	cmp	r0, #0
 801622a:	f040 80d3 	bne.w	80163d4 <rmw_init+0x1d8>
 801622e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016232:	4c72      	ldr	r4, [pc, #456]	@ (80163fc <rmw_init+0x200>)
 8016234:	4972      	ldr	r1, [pc, #456]	@ (8016400 <rmw_init+0x204>)
 8016236:	4873      	ldr	r0, [pc, #460]	@ (8016404 <rmw_init+0x208>)
 8016238:	60b7      	str	r7, [r6, #8]
 801623a:	e9c6 2300 	strd	r2, r3, [r6]
 801623e:	68eb      	ldr	r3, [r5, #12]
 8016240:	66b3      	str	r3, [r6, #104]	@ 0x68
 8016242:	2201      	movs	r2, #1
 8016244:	f7f7 fa6c 	bl	800d720 <rmw_uxrce_init_session_memory>
 8016248:	4620      	mov	r0, r4
 801624a:	496f      	ldr	r1, [pc, #444]	@ (8016408 <rmw_init+0x20c>)
 801624c:	2204      	movs	r2, #4
 801624e:	f7f7 faa7 	bl	800d7a0 <rmw_uxrce_init_static_input_buffer_memory>
 8016252:	f04f 0800 	mov.w	r8, #0
 8016256:	486b      	ldr	r0, [pc, #428]	@ (8016404 <rmw_init+0x208>)
 8016258:	f884 800d 	strb.w	r8, [r4, #13]
 801625c:	f7ff fe52 	bl	8015f04 <get_memory>
 8016260:	2800      	cmp	r0, #0
 8016262:	f000 80b2 	beq.w	80163ca <rmw_init+0x1ce>
 8016266:	6884      	ldr	r4, [r0, #8]
 8016268:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 801626a:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801626c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8016270:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8016274:	9101      	str	r1, [sp, #4]
 8016276:	6a00      	ldr	r0, [r0, #32]
 8016278:	9000      	str	r0, [sp, #0]
 801627a:	f104 0910 	add.w	r9, r4, #16
 801627e:	4661      	mov	r1, ip
 8016280:	4648      	mov	r0, r9
 8016282:	f7f8 fd8b 	bl	800ed9c <uxr_set_custom_transport_callbacks>
 8016286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801628a:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 801628e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8016292:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8016296:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801629a:	495c      	ldr	r1, [pc, #368]	@ (801640c <rmw_init+0x210>)
 801629c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80162a0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80162a4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80162a8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80162ac:	4858      	ldr	r0, [pc, #352]	@ (8016410 <rmw_init+0x214>)
 80162ae:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80162b2:	2201      	movs	r2, #1
 80162b4:	66f4      	str	r4, [r6, #108]	@ 0x6c
 80162b6:	f7f7 fa13 	bl	800d6e0 <rmw_uxrce_init_node_memory>
 80162ba:	4956      	ldr	r1, [pc, #344]	@ (8016414 <rmw_init+0x218>)
 80162bc:	4856      	ldr	r0, [pc, #344]	@ (8016418 <rmw_init+0x21c>)
 80162be:	2205      	movs	r2, #5
 80162c0:	f7f7 f9ee 	bl	800d6a0 <rmw_uxrce_init_subscription_memory>
 80162c4:	4955      	ldr	r1, [pc, #340]	@ (801641c <rmw_init+0x220>)
 80162c6:	4856      	ldr	r0, [pc, #344]	@ (8016420 <rmw_init+0x224>)
 80162c8:	220a      	movs	r2, #10
 80162ca:	f7f7 f9c9 	bl	800d660 <rmw_uxrce_init_publisher_memory>
 80162ce:	4955      	ldr	r1, [pc, #340]	@ (8016424 <rmw_init+0x228>)
 80162d0:	4855      	ldr	r0, [pc, #340]	@ (8016428 <rmw_init+0x22c>)
 80162d2:	2201      	movs	r2, #1
 80162d4:	f7f7 f984 	bl	800d5e0 <rmw_uxrce_init_service_memory>
 80162d8:	4954      	ldr	r1, [pc, #336]	@ (801642c <rmw_init+0x230>)
 80162da:	4855      	ldr	r0, [pc, #340]	@ (8016430 <rmw_init+0x234>)
 80162dc:	2201      	movs	r2, #1
 80162de:	f7f7 f99f 	bl	800d620 <rmw_uxrce_init_client_memory>
 80162e2:	4954      	ldr	r1, [pc, #336]	@ (8016434 <rmw_init+0x238>)
 80162e4:	4854      	ldr	r0, [pc, #336]	@ (8016438 <rmw_init+0x23c>)
 80162e6:	220f      	movs	r2, #15
 80162e8:	f7f7 fa3a 	bl	800d760 <rmw_uxrce_init_topic_memory>
 80162ec:	4953      	ldr	r1, [pc, #332]	@ (801643c <rmw_init+0x240>)
 80162ee:	4854      	ldr	r0, [pc, #336]	@ (8016440 <rmw_init+0x244>)
 80162f0:	2203      	movs	r2, #3
 80162f2:	f7f7 fa75 	bl	800d7e0 <rmw_uxrce_init_init_options_impl_memory>
 80162f6:	4953      	ldr	r1, [pc, #332]	@ (8016444 <rmw_init+0x248>)
 80162f8:	4853      	ldr	r0, [pc, #332]	@ (8016448 <rmw_init+0x24c>)
 80162fa:	2204      	movs	r2, #4
 80162fc:	f7f7 fa90 	bl	800d820 <rmw_uxrce_init_wait_set_memory>
 8016300:	4952      	ldr	r1, [pc, #328]	@ (801644c <rmw_init+0x250>)
 8016302:	4853      	ldr	r0, [pc, #332]	@ (8016450 <rmw_init+0x254>)
 8016304:	2204      	movs	r2, #4
 8016306:	f7f7 faab 	bl	800d860 <rmw_uxrce_init_guard_condition_memory>
 801630a:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 801630c:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 801630e:	4642      	mov	r2, r8
 8016310:	f7f7 f92e 	bl	800d570 <rmw_uxrce_transport_init>
 8016314:	4607      	mov	r7, r0
 8016316:	2800      	cmp	r0, #0
 8016318:	d161      	bne.n	80163de <rmw_init+0x1e2>
 801631a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 801631c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8016320:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016322:	4628      	mov	r0, r5
 8016324:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8016328:	f7f8 ff46 	bl	800f1b8 <uxr_init_session>
 801632c:	4628      	mov	r0, r5
 801632e:	4949      	ldr	r1, [pc, #292]	@ (8016454 <rmw_init+0x258>)
 8016330:	4622      	mov	r2, r4
 8016332:	f7f8 ff65 	bl	800f200 <uxr_set_topic_callback>
 8016336:	4628      	mov	r0, r5
 8016338:	4947      	ldr	r1, [pc, #284]	@ (8016458 <rmw_init+0x25c>)
 801633a:	463a      	mov	r2, r7
 801633c:	f7f8 ff5c 	bl	800f1f8 <uxr_set_status_callback>
 8016340:	4628      	mov	r0, r5
 8016342:	4946      	ldr	r1, [pc, #280]	@ (801645c <rmw_init+0x260>)
 8016344:	463a      	mov	r2, r7
 8016346:	f7f8 ff5f 	bl	800f208 <uxr_set_request_callback>
 801634a:	4628      	mov	r0, r5
 801634c:	4944      	ldr	r1, [pc, #272]	@ (8016460 <rmw_init+0x264>)
 801634e:	463a      	mov	r2, r7
 8016350:	f7f8 ff5e 	bl	800f210 <uxr_set_reply_callback>
 8016354:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8016358:	2304      	movs	r3, #4
 801635a:	0092      	lsls	r2, r2, #2
 801635c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8016360:	4628      	mov	r0, r5
 8016362:	f7f8 ff83 	bl	800f26c <uxr_create_input_reliable_stream>
 8016366:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801636a:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801636e:	2304      	movs	r3, #4
 8016370:	0092      	lsls	r2, r2, #2
 8016372:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8016376:	4628      	mov	r0, r5
 8016378:	f7f8 ff60 	bl	800f23c <uxr_create_output_reliable_stream>
 801637c:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8016380:	4628      	mov	r0, r5
 8016382:	f7f8 ff6d 	bl	800f260 <uxr_create_input_best_effort_stream>
 8016386:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801638a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801638e:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8016392:	3114      	adds	r1, #20
 8016394:	4628      	mov	r0, r5
 8016396:	f7f8 ff3f 	bl	800f218 <uxr_create_output_best_effort_stream>
 801639a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801639e:	4628      	mov	r0, r5
 80163a0:	f7f9 fd00 	bl	800fda4 <uxr_create_session>
 80163a4:	4605      	mov	r5, r0
 80163a6:	b140      	cbz	r0, 80163ba <rmw_init+0x1be>
 80163a8:	4638      	mov	r0, r7
 80163aa:	b003      	add	sp, #12
 80163ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163b0:	270b      	movs	r7, #11
 80163b2:	4638      	mov	r0, r7
 80163b4:	b003      	add	sp, #12
 80163b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163ba:	4648      	mov	r0, r9
 80163bc:	f7f8 fd30 	bl	800ee20 <uxr_close_custom_transport>
 80163c0:	4810      	ldr	r0, [pc, #64]	@ (8016404 <rmw_init+0x208>)
 80163c2:	4621      	mov	r1, r4
 80163c4:	f7ff fdae 	bl	8015f24 <put_memory>
 80163c8:	66f5      	str	r5, [r6, #108]	@ 0x6c
 80163ca:	2701      	movs	r7, #1
 80163cc:	4638      	mov	r0, r7
 80163ce:	b003      	add	sp, #12
 80163d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163d4:	270c      	movs	r7, #12
 80163d6:	4638      	mov	r0, r7
 80163d8:	b003      	add	sp, #12
 80163da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163de:	4648      	mov	r0, r9
 80163e0:	f7f8 fd1e 	bl	800ee20 <uxr_close_custom_transport>
 80163e4:	4807      	ldr	r0, [pc, #28]	@ (8016404 <rmw_init+0x208>)
 80163e6:	4621      	mov	r1, r4
 80163e8:	f7ff fd9c 	bl	8015f24 <put_memory>
 80163ec:	4638      	mov	r0, r7
 80163ee:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 80163f2:	b003      	add	sp, #12
 80163f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163f8:	0801cabc 	.word	0x0801cabc
 80163fc:	2000dac8 	.word	0x2000dac8
 8016400:	2000ebc0 	.word	0x2000ebc0
 8016404:	20010168 	.word	0x20010168
 8016408:	2000b9c8 	.word	0x2000b9c8
 801640c:	2000eb08 	.word	0x2000eb08
 8016410:	2000ebac 	.word	0x2000ebac
 8016414:	2000de40 	.word	0x2000de40
 8016418:	2000e278 	.word	0x2000e278
 801641c:	2000e288 	.word	0x2000e288
 8016420:	2000eaf8 	.word	0x2000eaf8
 8016424:	2000dd68 	.word	0x2000dd68
 8016428:	2000de30 	.word	0x2000de30
 801642c:	2000dc90 	.word	0x2000dc90
 8016430:	2000dd58 	.word	0x2000dd58
 8016434:	2000dad8 	.word	0x2000dad8
 8016438:	2000dc7c 	.word	0x2000dc7c
 801643c:	2000b934 	.word	0x2000b934
 8016440:	2000b9b8 	.word	0x2000b9b8
 8016444:	2000b8b4 	.word	0x2000b8b4
 8016448:	2000b924 	.word	0x2000b924
 801644c:	2000b824 	.word	0x2000b824
 8016450:	2000b8a4 	.word	0x2000b8a4
 8016454:	0801916d 	.word	0x0801916d
 8016458:	08019165 	.word	0x08019165
 801645c:	08019205 	.word	0x08019205
 8016460:	080192a1 	.word	0x080192a1

08016464 <rmw_context_fini>:
 8016464:	4b17      	ldr	r3, [pc, #92]	@ (80164c4 <rmw_context_fini+0x60>)
 8016466:	b570      	push	{r4, r5, r6, lr}
 8016468:	681c      	ldr	r4, [r3, #0]
 801646a:	4605      	mov	r5, r0
 801646c:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 801646e:	b33c      	cbz	r4, 80164c0 <rmw_context_fini+0x5c>
 8016470:	2600      	movs	r6, #0
 8016472:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 8016476:	691a      	ldr	r2, [r3, #16]
 8016478:	4282      	cmp	r2, r0
 801647a:	d018      	beq.n	80164ae <rmw_context_fini+0x4a>
 801647c:	2c00      	cmp	r4, #0
 801647e:	d1f8      	bne.n	8016472 <rmw_context_fini+0xe>
 8016480:	b188      	cbz	r0, 80164a6 <rmw_context_fini+0x42>
 8016482:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016486:	789b      	ldrb	r3, [r3, #2]
 8016488:	2b01      	cmp	r3, #1
 801648a:	bf14      	ite	ne
 801648c:	210a      	movne	r1, #10
 801648e:	2100      	moveq	r1, #0
 8016490:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016494:	f7f9 fc5e 	bl	800fd54 <uxr_delete_session_retries>
 8016498:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 801649a:	f7f7 fa01 	bl	800d8a0 <rmw_uxrce_fini_session_memory>
 801649e:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80164a0:	3010      	adds	r0, #16
 80164a2:	f7f8 fcbd 	bl	800ee20 <uxr_close_custom_transport>
 80164a6:	2300      	movs	r3, #0
 80164a8:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80164aa:	4630      	mov	r0, r6
 80164ac:	bd70      	pop	{r4, r5, r6, pc}
 80164ae:	f103 0018 	add.w	r0, r3, #24
 80164b2:	f000 f911 	bl	80166d8 <rmw_destroy_node>
 80164b6:	4606      	mov	r6, r0
 80164b8:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80164ba:	2c00      	cmp	r4, #0
 80164bc:	d1d9      	bne.n	8016472 <rmw_context_fini+0xe>
 80164be:	e7df      	b.n	8016480 <rmw_context_fini+0x1c>
 80164c0:	4626      	mov	r6, r4
 80164c2:	e7dd      	b.n	8016480 <rmw_context_fini+0x1c>
 80164c4:	2000ebac 	.word	0x2000ebac

080164c8 <create_topic>:
 80164c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164cc:	4604      	mov	r4, r0
 80164ce:	b084      	sub	sp, #16
 80164d0:	4824      	ldr	r0, [pc, #144]	@ (8016564 <create_topic+0x9c>)
 80164d2:	460f      	mov	r7, r1
 80164d4:	4616      	mov	r6, r2
 80164d6:	f7ff fd15 	bl	8015f04 <get_memory>
 80164da:	2800      	cmp	r0, #0
 80164dc:	d03c      	beq.n	8016558 <create_topic+0x90>
 80164de:	6923      	ldr	r3, [r4, #16]
 80164e0:	6885      	ldr	r5, [r0, #8]
 80164e2:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 801656c <create_topic+0xa4>
 80164e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80164ea:	e9c5 6405 	strd	r6, r4, [r5, #20]
 80164ee:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80164f2:	1c42      	adds	r2, r0, #1
 80164f4:	2102      	movs	r1, #2
 80164f6:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80164fa:	f7f8 fc95 	bl	800ee28 <uxr_object_id>
 80164fe:	223c      	movs	r2, #60	@ 0x3c
 8016500:	6128      	str	r0, [r5, #16]
 8016502:	4641      	mov	r1, r8
 8016504:	4638      	mov	r0, r7
 8016506:	f7f7 fbb5 	bl	800dc74 <generate_topic_name>
 801650a:	b310      	cbz	r0, 8016552 <create_topic+0x8a>
 801650c:	4f16      	ldr	r7, [pc, #88]	@ (8016568 <create_topic+0xa0>)
 801650e:	4630      	mov	r0, r6
 8016510:	2264      	movs	r2, #100	@ 0x64
 8016512:	4639      	mov	r1, r7
 8016514:	f7f7 fb7e 	bl	800dc14 <generate_type_name>
 8016518:	b1d8      	cbz	r0, 8016552 <create_topic+0x8a>
 801651a:	6920      	ldr	r0, [r4, #16]
 801651c:	2306      	movs	r3, #6
 801651e:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016522:	f8cd 8000 	str.w	r8, [sp]
 8016526:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801652a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801652e:	6811      	ldr	r1, [r2, #0]
 8016530:	6963      	ldr	r3, [r4, #20]
 8016532:	692a      	ldr	r2, [r5, #16]
 8016534:	f7f8 fa5a 	bl	800e9ec <uxr_buffer_create_topic_bin>
 8016538:	4602      	mov	r2, r0
 801653a:	6920      	ldr	r0, [r4, #16]
 801653c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016540:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016544:	f7f7 fb2a 	bl	800db9c <run_xrce_session>
 8016548:	b118      	cbz	r0, 8016552 <create_topic+0x8a>
 801654a:	4628      	mov	r0, r5
 801654c:	b004      	add	sp, #16
 801654e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016552:	4628      	mov	r0, r5
 8016554:	f7f7 fa1a 	bl	800d98c <rmw_uxrce_fini_topic_memory>
 8016558:	2500      	movs	r5, #0
 801655a:	4628      	mov	r0, r5
 801655c:	b004      	add	sp, #16
 801655e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016562:	bf00      	nop
 8016564:	2000dc7c 	.word	0x2000dc7c
 8016568:	20010374 	.word	0x20010374
 801656c:	200103d8 	.word	0x200103d8

08016570 <destroy_topic>:
 8016570:	b538      	push	{r3, r4, r5, lr}
 8016572:	6984      	ldr	r4, [r0, #24]
 8016574:	b1d4      	cbz	r4, 80165ac <destroy_topic+0x3c>
 8016576:	4605      	mov	r5, r0
 8016578:	6920      	ldr	r0, [r4, #16]
 801657a:	692a      	ldr	r2, [r5, #16]
 801657c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016580:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016584:	6819      	ldr	r1, [r3, #0]
 8016586:	f7f8 f9b5 	bl	800e8f4 <uxr_buffer_delete_entity>
 801658a:	4602      	mov	r2, r0
 801658c:	6920      	ldr	r0, [r4, #16]
 801658e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016592:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016596:	f7f7 fb01 	bl	800db9c <run_xrce_session>
 801659a:	f080 0401 	eor.w	r4, r0, #1
 801659e:	b2e4      	uxtb	r4, r4
 80165a0:	4628      	mov	r0, r5
 80165a2:	0064      	lsls	r4, r4, #1
 80165a4:	f7f7 f9f2 	bl	800d98c <rmw_uxrce_fini_topic_memory>
 80165a8:	4620      	mov	r0, r4
 80165aa:	bd38      	pop	{r3, r4, r5, pc}
 80165ac:	2401      	movs	r4, #1
 80165ae:	4620      	mov	r0, r4
 80165b0:	bd38      	pop	{r3, r4, r5, pc}
 80165b2:	bf00      	nop

080165b4 <create_node>:
 80165b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80165b8:	b083      	sub	sp, #12
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d063      	beq.n	8016686 <create_node+0xd2>
 80165be:	4606      	mov	r6, r0
 80165c0:	4836      	ldr	r0, [pc, #216]	@ (801669c <create_node+0xe8>)
 80165c2:	460f      	mov	r7, r1
 80165c4:	4690      	mov	r8, r2
 80165c6:	461d      	mov	r5, r3
 80165c8:	f7ff fc9c 	bl	8015f04 <get_memory>
 80165cc:	2800      	cmp	r0, #0
 80165ce:	d05a      	beq.n	8016686 <create_node+0xd2>
 80165d0:	6884      	ldr	r4, [r0, #8]
 80165d2:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 80165d4:	6123      	str	r3, [r4, #16]
 80165d6:	f7ff fd1b 	bl	8016010 <rmw_get_implementation_identifier>
 80165da:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80165de:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80165e2:	f8c4 9020 	str.w	r9, [r4, #32]
 80165e6:	4630      	mov	r0, r6
 80165e8:	f7e9 fe72 	bl	80002d0 <strlen>
 80165ec:	1c42      	adds	r2, r0, #1
 80165ee:	2a3c      	cmp	r2, #60	@ 0x3c
 80165f0:	f104 0518 	add.w	r5, r4, #24
 80165f4:	d844      	bhi.n	8016680 <create_node+0xcc>
 80165f6:	4648      	mov	r0, r9
 80165f8:	4631      	mov	r1, r6
 80165fa:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 80165fe:	f003 fd76 	bl	801a0ee <memcpy>
 8016602:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8016606:	4638      	mov	r0, r7
 8016608:	f7e9 fe62 	bl	80002d0 <strlen>
 801660c:	1c42      	adds	r2, r0, #1
 801660e:	2a3c      	cmp	r2, #60	@ 0x3c
 8016610:	d836      	bhi.n	8016680 <create_node+0xcc>
 8016612:	4639      	mov	r1, r7
 8016614:	4648      	mov	r0, r9
 8016616:	f003 fd6a 	bl	801a0ee <memcpy>
 801661a:	6923      	ldr	r3, [r4, #16]
 801661c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016620:	2101      	movs	r1, #1
 8016622:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8016626:	1842      	adds	r2, r0, r1
 8016628:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801662c:	f7f8 fbfc 	bl	800ee28 <uxr_object_id>
 8016630:	6160      	str	r0, [r4, #20]
 8016632:	783b      	ldrb	r3, [r7, #0]
 8016634:	2b2f      	cmp	r3, #47	@ 0x2f
 8016636:	d128      	bne.n	801668a <create_node+0xd6>
 8016638:	787b      	ldrb	r3, [r7, #1]
 801663a:	bb33      	cbnz	r3, 801668a <create_node+0xd6>
 801663c:	4a18      	ldr	r2, [pc, #96]	@ (80166a0 <create_node+0xec>)
 801663e:	4819      	ldr	r0, [pc, #100]	@ (80166a4 <create_node+0xf0>)
 8016640:	4633      	mov	r3, r6
 8016642:	213c      	movs	r1, #60	@ 0x3c
 8016644:	f003 fb04 	bl	8019c50 <sniprintf>
 8016648:	6920      	ldr	r0, [r4, #16]
 801664a:	4916      	ldr	r1, [pc, #88]	@ (80166a4 <create_node+0xf0>)
 801664c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016650:	9100      	str	r1, [sp, #0]
 8016652:	2106      	movs	r1, #6
 8016654:	9101      	str	r1, [sp, #4]
 8016656:	6811      	ldr	r1, [r2, #0]
 8016658:	6962      	ldr	r2, [r4, #20]
 801665a:	fa1f f388 	uxth.w	r3, r8
 801665e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016662:	f7f8 f991 	bl	800e988 <uxr_buffer_create_participant_bin>
 8016666:	4602      	mov	r2, r0
 8016668:	6920      	ldr	r0, [r4, #16]
 801666a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801666e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016672:	f7f7 fa93 	bl	800db9c <run_xrce_session>
 8016676:	b118      	cbz	r0, 8016680 <create_node+0xcc>
 8016678:	4628      	mov	r0, r5
 801667a:	b003      	add	sp, #12
 801667c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016680:	4628      	mov	r0, r5
 8016682:	f7f7 f913 	bl	800d8ac <rmw_uxrce_fini_node_memory>
 8016686:	2500      	movs	r5, #0
 8016688:	e7f6      	b.n	8016678 <create_node+0xc4>
 801668a:	4a07      	ldr	r2, [pc, #28]	@ (80166a8 <create_node+0xf4>)
 801668c:	9600      	str	r6, [sp, #0]
 801668e:	463b      	mov	r3, r7
 8016690:	213c      	movs	r1, #60	@ 0x3c
 8016692:	4804      	ldr	r0, [pc, #16]	@ (80166a4 <create_node+0xf0>)
 8016694:	f003 fadc 	bl	8019c50 <sniprintf>
 8016698:	e7d6      	b.n	8016648 <create_node+0x94>
 801669a:	bf00      	nop
 801669c:	2000ebac 	.word	0x2000ebac
 80166a0:	0801bbb4 	.word	0x0801bbb4
 80166a4:	20010414 	.word	0x20010414
 80166a8:	0801bd90 	.word	0x0801bd90

080166ac <rmw_create_node>:
 80166ac:	b191      	cbz	r1, 80166d4 <rmw_create_node+0x28>
 80166ae:	b410      	push	{r4}
 80166b0:	4614      	mov	r4, r2
 80166b2:	780a      	ldrb	r2, [r1, #0]
 80166b4:	4603      	mov	r3, r0
 80166b6:	4608      	mov	r0, r1
 80166b8:	b142      	cbz	r2, 80166cc <rmw_create_node+0x20>
 80166ba:	b13c      	cbz	r4, 80166cc <rmw_create_node+0x20>
 80166bc:	7822      	ldrb	r2, [r4, #0]
 80166be:	b12a      	cbz	r2, 80166cc <rmw_create_node+0x20>
 80166c0:	4621      	mov	r1, r4
 80166c2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80166c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166c8:	f7ff bf74 	b.w	80165b4 <create_node>
 80166cc:	2000      	movs	r0, #0
 80166ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166d2:	4770      	bx	lr
 80166d4:	2000      	movs	r0, #0
 80166d6:	4770      	bx	lr

080166d8 <rmw_destroy_node>:
 80166d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166da:	b328      	cbz	r0, 8016728 <rmw_destroy_node+0x50>
 80166dc:	4607      	mov	r7, r0
 80166de:	6800      	ldr	r0, [r0, #0]
 80166e0:	b120      	cbz	r0, 80166ec <rmw_destroy_node+0x14>
 80166e2:	4b36      	ldr	r3, [pc, #216]	@ (80167bc <rmw_destroy_node+0xe4>)
 80166e4:	6819      	ldr	r1, [r3, #0]
 80166e6:	f7e9 fd93 	bl	8000210 <strcmp>
 80166ea:	b9e8      	cbnz	r0, 8016728 <rmw_destroy_node+0x50>
 80166ec:	687d      	ldr	r5, [r7, #4]
 80166ee:	b1dd      	cbz	r5, 8016728 <rmw_destroy_node+0x50>
 80166f0:	4b33      	ldr	r3, [pc, #204]	@ (80167c0 <rmw_destroy_node+0xe8>)
 80166f2:	681c      	ldr	r4, [r3, #0]
 80166f4:	2c00      	cmp	r4, #0
 80166f6:	d05f      	beq.n	80167b8 <rmw_destroy_node+0xe0>
 80166f8:	2600      	movs	r6, #0
 80166fa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80166fe:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8016702:	429d      	cmp	r5, r3
 8016704:	d013      	beq.n	801672e <rmw_destroy_node+0x56>
 8016706:	2c00      	cmp	r4, #0
 8016708:	d1f7      	bne.n	80166fa <rmw_destroy_node+0x22>
 801670a:	4b2e      	ldr	r3, [pc, #184]	@ (80167c4 <rmw_destroy_node+0xec>)
 801670c:	681c      	ldr	r4, [r3, #0]
 801670e:	b1c4      	cbz	r4, 8016742 <rmw_destroy_node+0x6a>
 8016710:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8016714:	6a0b      	ldr	r3, [r1, #32]
 8016716:	429d      	cmp	r5, r3
 8016718:	d1f9      	bne.n	801670e <rmw_destroy_node+0x36>
 801671a:	317c      	adds	r1, #124	@ 0x7c
 801671c:	4638      	mov	r0, r7
 801671e:	f000 fad9 	bl	8016cd4 <rmw_destroy_subscription>
 8016722:	2801      	cmp	r0, #1
 8016724:	4606      	mov	r6, r0
 8016726:	d1f2      	bne.n	801670e <rmw_destroy_node+0x36>
 8016728:	2601      	movs	r6, #1
 801672a:	4630      	mov	r0, r6
 801672c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801672e:	3184      	adds	r1, #132	@ 0x84
 8016730:	4638      	mov	r0, r7
 8016732:	f7f6 fecb 	bl	800d4cc <rmw_destroy_publisher>
 8016736:	2801      	cmp	r0, #1
 8016738:	4606      	mov	r6, r0
 801673a:	d0f5      	beq.n	8016728 <rmw_destroy_node+0x50>
 801673c:	2c00      	cmp	r4, #0
 801673e:	d1dc      	bne.n	80166fa <rmw_destroy_node+0x22>
 8016740:	e7e3      	b.n	801670a <rmw_destroy_node+0x32>
 8016742:	4b21      	ldr	r3, [pc, #132]	@ (80167c8 <rmw_destroy_node+0xf0>)
 8016744:	681c      	ldr	r4, [r3, #0]
 8016746:	b16c      	cbz	r4, 8016764 <rmw_destroy_node+0x8c>
 8016748:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801674c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801674e:	429d      	cmp	r5, r3
 8016750:	d1f9      	bne.n	8016746 <rmw_destroy_node+0x6e>
 8016752:	317c      	adds	r1, #124	@ 0x7c
 8016754:	4638      	mov	r0, r7
 8016756:	f000 f98b 	bl	8016a70 <rmw_destroy_service>
 801675a:	2801      	cmp	r0, #1
 801675c:	4606      	mov	r6, r0
 801675e:	d0e3      	beq.n	8016728 <rmw_destroy_node+0x50>
 8016760:	2c00      	cmp	r4, #0
 8016762:	d1f1      	bne.n	8016748 <rmw_destroy_node+0x70>
 8016764:	4b19      	ldr	r3, [pc, #100]	@ (80167cc <rmw_destroy_node+0xf4>)
 8016766:	681c      	ldr	r4, [r3, #0]
 8016768:	b16c      	cbz	r4, 8016786 <rmw_destroy_node+0xae>
 801676a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801676e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8016770:	429d      	cmp	r5, r3
 8016772:	d1f9      	bne.n	8016768 <rmw_destroy_node+0x90>
 8016774:	317c      	adds	r1, #124	@ 0x7c
 8016776:	4638      	mov	r0, r7
 8016778:	f7ff fbe8 	bl	8015f4c <rmw_destroy_client>
 801677c:	2801      	cmp	r0, #1
 801677e:	4606      	mov	r6, r0
 8016780:	d0d2      	beq.n	8016728 <rmw_destroy_node+0x50>
 8016782:	2c00      	cmp	r4, #0
 8016784:	d1f1      	bne.n	801676a <rmw_destroy_node+0x92>
 8016786:	6928      	ldr	r0, [r5, #16]
 8016788:	696a      	ldr	r2, [r5, #20]
 801678a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801678e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016792:	6819      	ldr	r1, [r3, #0]
 8016794:	f7f8 f8ae 	bl	800e8f4 <uxr_buffer_delete_entity>
 8016798:	4602      	mov	r2, r0
 801679a:	6928      	ldr	r0, [r5, #16]
 801679c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80167a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80167a4:	f7f7 f9fa 	bl	800db9c <run_xrce_session>
 80167a8:	2800      	cmp	r0, #0
 80167aa:	bf08      	it	eq
 80167ac:	2602      	moveq	r6, #2
 80167ae:	4638      	mov	r0, r7
 80167b0:	f7f7 f87c 	bl	800d8ac <rmw_uxrce_fini_node_memory>
 80167b4:	4630      	mov	r0, r6
 80167b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167b8:	4626      	mov	r6, r4
 80167ba:	e7a6      	b.n	801670a <rmw_destroy_node+0x32>
 80167bc:	0801cabc 	.word	0x0801cabc
 80167c0:	2000eaf8 	.word	0x2000eaf8
 80167c4:	2000e278 	.word	0x2000e278
 80167c8:	2000de30 	.word	0x2000de30
 80167cc:	2000dd58 	.word	0x2000dd58

080167d0 <rmw_node_get_graph_guard_condition>:
 80167d0:	6843      	ldr	r3, [r0, #4]
 80167d2:	6918      	ldr	r0, [r3, #16]
 80167d4:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80167d8:	4770      	bx	lr
 80167da:	bf00      	nop

080167dc <rmw_send_request>:
 80167dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167e0:	4604      	mov	r4, r0
 80167e2:	6800      	ldr	r0, [r0, #0]
 80167e4:	b08a      	sub	sp, #40	@ 0x28
 80167e6:	460e      	mov	r6, r1
 80167e8:	4615      	mov	r5, r2
 80167ea:	b128      	cbz	r0, 80167f8 <rmw_send_request+0x1c>
 80167ec:	4b1e      	ldr	r3, [pc, #120]	@ (8016868 <rmw_send_request+0x8c>)
 80167ee:	6819      	ldr	r1, [r3, #0]
 80167f0:	f7e9 fd0e 	bl	8000210 <strcmp>
 80167f4:	2800      	cmp	r0, #0
 80167f6:	d133      	bne.n	8016860 <rmw_send_request+0x84>
 80167f8:	6864      	ldr	r4, [r4, #4]
 80167fa:	6963      	ldr	r3, [r4, #20]
 80167fc:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 80167fe:	689b      	ldr	r3, [r3, #8]
 8016800:	4798      	blx	r3
 8016802:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016806:	4630      	mov	r0, r6
 8016808:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801680c:	4798      	blx	r3
 801680e:	693b      	ldr	r3, [r7, #16]
 8016810:	9000      	str	r0, [sp, #0]
 8016812:	6922      	ldr	r2, [r4, #16]
 8016814:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8016816:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801681a:	ab02      	add	r3, sp, #8
 801681c:	f7fa fb94 	bl	8010f48 <uxr_prepare_output_stream>
 8016820:	2300      	movs	r3, #0
 8016822:	6028      	str	r0, [r5, #0]
 8016824:	606b      	str	r3, [r5, #4]
 8016826:	b190      	cbz	r0, 801684e <rmw_send_request+0x72>
 8016828:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801682c:	a902      	add	r1, sp, #8
 801682e:	4630      	mov	r0, r6
 8016830:	4798      	blx	r3
 8016832:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8016836:	6938      	ldr	r0, [r7, #16]
 8016838:	2b01      	cmp	r3, #1
 801683a:	d00c      	beq.n	8016856 <rmw_send_request+0x7a>
 801683c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801683e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016842:	f7f9 f8c1 	bl	800f9c8 <uxr_run_session_until_confirm_delivery>
 8016846:	2000      	movs	r0, #0
 8016848:	b00a      	add	sp, #40	@ 0x28
 801684a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801684e:	2001      	movs	r0, #1
 8016850:	b00a      	add	sp, #40	@ 0x28
 8016852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016856:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801685a:	f7f8 fd1d 	bl	800f298 <uxr_flash_output_streams>
 801685e:	e7f2      	b.n	8016846 <rmw_send_request+0x6a>
 8016860:	200c      	movs	r0, #12
 8016862:	b00a      	add	sp, #40	@ 0x28
 8016864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016868:	0801cabc 	.word	0x0801cabc

0801686c <rmw_take_request>:
 801686c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016870:	4605      	mov	r5, r0
 8016872:	6800      	ldr	r0, [r0, #0]
 8016874:	b089      	sub	sp, #36	@ 0x24
 8016876:	460c      	mov	r4, r1
 8016878:	4690      	mov	r8, r2
 801687a:	461e      	mov	r6, r3
 801687c:	b128      	cbz	r0, 801688a <rmw_take_request+0x1e>
 801687e:	4b28      	ldr	r3, [pc, #160]	@ (8016920 <rmw_take_request+0xb4>)
 8016880:	6819      	ldr	r1, [r3, #0]
 8016882:	f7e9 fcc5 	bl	8000210 <strcmp>
 8016886:	2800      	cmp	r0, #0
 8016888:	d146      	bne.n	8016918 <rmw_take_request+0xac>
 801688a:	b10e      	cbz	r6, 8016890 <rmw_take_request+0x24>
 801688c:	2300      	movs	r3, #0
 801688e:	7033      	strb	r3, [r6, #0]
 8016890:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016894:	f7f7 f904 	bl	800daa0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016898:	4648      	mov	r0, r9
 801689a:	f7f7 f8db 	bl	800da54 <rmw_uxrce_find_static_input_buffer_by_owner>
 801689e:	4607      	mov	r7, r0
 80168a0:	b3b0      	cbz	r0, 8016910 <rmw_take_request+0xa4>
 80168a2:	6885      	ldr	r5, [r0, #8]
 80168a4:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80168a8:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80168ac:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80168b0:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80168b4:	7423      	strb	r3, [r4, #16]
 80168b6:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80168ba:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80168be:	74e2      	strb	r2, [r4, #19]
 80168c0:	f8a4 3011 	strh.w	r3, [r4, #17]
 80168c4:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80168c8:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80168cc:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80168d0:	61e1      	str	r1, [r4, #28]
 80168d2:	6162      	str	r2, [r4, #20]
 80168d4:	61a3      	str	r3, [r4, #24]
 80168d6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80168da:	689b      	ldr	r3, [r3, #8]
 80168dc:	4798      	blx	r3
 80168de:	6844      	ldr	r4, [r0, #4]
 80168e0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80168e4:	f105 0110 	add.w	r1, r5, #16
 80168e8:	4668      	mov	r0, sp
 80168ea:	f7f5 f9e1 	bl	800bcb0 <ucdr_init_buffer>
 80168ee:	68e3      	ldr	r3, [r4, #12]
 80168f0:	4641      	mov	r1, r8
 80168f2:	4668      	mov	r0, sp
 80168f4:	4798      	blx	r3
 80168f6:	4639      	mov	r1, r7
 80168f8:	4604      	mov	r4, r0
 80168fa:	480a      	ldr	r0, [pc, #40]	@ (8016924 <rmw_take_request+0xb8>)
 80168fc:	f7ff fb12 	bl	8015f24 <put_memory>
 8016900:	b106      	cbz	r6, 8016904 <rmw_take_request+0x98>
 8016902:	7034      	strb	r4, [r6, #0]
 8016904:	f084 0001 	eor.w	r0, r4, #1
 8016908:	b2c0      	uxtb	r0, r0
 801690a:	b009      	add	sp, #36	@ 0x24
 801690c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016910:	2001      	movs	r0, #1
 8016912:	b009      	add	sp, #36	@ 0x24
 8016914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016918:	200c      	movs	r0, #12
 801691a:	b009      	add	sp, #36	@ 0x24
 801691c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016920:	0801cabc 	.word	0x0801cabc
 8016924:	2000dac8 	.word	0x2000dac8

08016928 <rmw_send_response>:
 8016928:	b5f0      	push	{r4, r5, r6, r7, lr}
 801692a:	4605      	mov	r5, r0
 801692c:	6800      	ldr	r0, [r0, #0]
 801692e:	b091      	sub	sp, #68	@ 0x44
 8016930:	460c      	mov	r4, r1
 8016932:	4616      	mov	r6, r2
 8016934:	b128      	cbz	r0, 8016942 <rmw_send_response+0x1a>
 8016936:	4b28      	ldr	r3, [pc, #160]	@ (80169d8 <rmw_send_response+0xb0>)
 8016938:	6819      	ldr	r1, [r3, #0]
 801693a:	f7e9 fc69 	bl	8000210 <strcmp>
 801693e:	2800      	cmp	r0, #0
 8016940:	d141      	bne.n	80169c6 <rmw_send_response+0x9e>
 8016942:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8016946:	9306      	str	r3, [sp, #24]
 8016948:	4623      	mov	r3, r4
 801694a:	9207      	str	r2, [sp, #28]
 801694c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016950:	686d      	ldr	r5, [r5, #4]
 8016952:	789b      	ldrb	r3, [r3, #2]
 8016954:	68a1      	ldr	r1, [r4, #8]
 8016956:	f88d 2017 	strb.w	r2, [sp, #23]
 801695a:	f88d 3016 	strb.w	r3, [sp, #22]
 801695e:	68e2      	ldr	r2, [r4, #12]
 8016960:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8016964:	6860      	ldr	r0, [r4, #4]
 8016966:	f8ad 3014 	strh.w	r3, [sp, #20]
 801696a:	ab02      	add	r3, sp, #8
 801696c:	c307      	stmia	r3!, {r0, r1, r2}
 801696e:	696b      	ldr	r3, [r5, #20]
 8016970:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8016972:	68db      	ldr	r3, [r3, #12]
 8016974:	4798      	blx	r3
 8016976:	6844      	ldr	r4, [r0, #4]
 8016978:	4630      	mov	r0, r6
 801697a:	6923      	ldr	r3, [r4, #16]
 801697c:	4798      	blx	r3
 801697e:	f100 0318 	add.w	r3, r0, #24
 8016982:	6938      	ldr	r0, [r7, #16]
 8016984:	9300      	str	r3, [sp, #0]
 8016986:	692a      	ldr	r2, [r5, #16]
 8016988:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801698a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801698e:	ab08      	add	r3, sp, #32
 8016990:	f7fa fada 	bl	8010f48 <uxr_prepare_output_stream>
 8016994:	b910      	cbnz	r0, 801699c <rmw_send_response+0x74>
 8016996:	2001      	movs	r0, #1
 8016998:	b011      	add	sp, #68	@ 0x44
 801699a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801699c:	a902      	add	r1, sp, #8
 801699e:	a808      	add	r0, sp, #32
 80169a0:	f7fb fc04 	bl	80121ac <uxr_serialize_SampleIdentity>
 80169a4:	68a3      	ldr	r3, [r4, #8]
 80169a6:	a908      	add	r1, sp, #32
 80169a8:	4630      	mov	r0, r6
 80169aa:	4798      	blx	r3
 80169ac:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80169b0:	6938      	ldr	r0, [r7, #16]
 80169b2:	2b01      	cmp	r3, #1
 80169b4:	d00a      	beq.n	80169cc <rmw_send_response+0xa4>
 80169b6:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80169b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80169bc:	f7f9 f804 	bl	800f9c8 <uxr_run_session_until_confirm_delivery>
 80169c0:	2000      	movs	r0, #0
 80169c2:	b011      	add	sp, #68	@ 0x44
 80169c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169c6:	200c      	movs	r0, #12
 80169c8:	b011      	add	sp, #68	@ 0x44
 80169ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80169d0:	f7f8 fc62 	bl	800f298 <uxr_flash_output_streams>
 80169d4:	e7f4      	b.n	80169c0 <rmw_send_response+0x98>
 80169d6:	bf00      	nop
 80169d8:	0801cabc 	.word	0x0801cabc

080169dc <rmw_take_response>:
 80169dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169e0:	4604      	mov	r4, r0
 80169e2:	6800      	ldr	r0, [r0, #0]
 80169e4:	b088      	sub	sp, #32
 80169e6:	4688      	mov	r8, r1
 80169e8:	4617      	mov	r7, r2
 80169ea:	461d      	mov	r5, r3
 80169ec:	b120      	cbz	r0, 80169f8 <rmw_take_response+0x1c>
 80169ee:	4b1e      	ldr	r3, [pc, #120]	@ (8016a68 <rmw_take_response+0x8c>)
 80169f0:	6819      	ldr	r1, [r3, #0]
 80169f2:	f7e9 fc0d 	bl	8000210 <strcmp>
 80169f6:	bb78      	cbnz	r0, 8016a58 <rmw_take_response+0x7c>
 80169f8:	b10d      	cbz	r5, 80169fe <rmw_take_response+0x22>
 80169fa:	2300      	movs	r3, #0
 80169fc:	702b      	strb	r3, [r5, #0]
 80169fe:	6864      	ldr	r4, [r4, #4]
 8016a00:	f7f7 f84e 	bl	800daa0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016a04:	4620      	mov	r0, r4
 8016a06:	f7f7 f825 	bl	800da54 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016a0a:	4606      	mov	r6, r0
 8016a0c:	b340      	cbz	r0, 8016a60 <rmw_take_response+0x84>
 8016a0e:	6963      	ldr	r3, [r4, #20]
 8016a10:	6884      	ldr	r4, [r0, #8]
 8016a12:	68db      	ldr	r3, [r3, #12]
 8016a14:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8016a18:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8016a1c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8016a20:	4798      	blx	r3
 8016a22:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016a26:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016a2a:	f104 0110 	add.w	r1, r4, #16
 8016a2e:	4668      	mov	r0, sp
 8016a30:	f7f5 f93e 	bl	800bcb0 <ucdr_init_buffer>
 8016a34:	4639      	mov	r1, r7
 8016a36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016a3a:	4668      	mov	r0, sp
 8016a3c:	4798      	blx	r3
 8016a3e:	4631      	mov	r1, r6
 8016a40:	4604      	mov	r4, r0
 8016a42:	480a      	ldr	r0, [pc, #40]	@ (8016a6c <rmw_take_response+0x90>)
 8016a44:	f7ff fa6e 	bl	8015f24 <put_memory>
 8016a48:	b105      	cbz	r5, 8016a4c <rmw_take_response+0x70>
 8016a4a:	702c      	strb	r4, [r5, #0]
 8016a4c:	f084 0001 	eor.w	r0, r4, #1
 8016a50:	b2c0      	uxtb	r0, r0
 8016a52:	b008      	add	sp, #32
 8016a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a58:	200c      	movs	r0, #12
 8016a5a:	b008      	add	sp, #32
 8016a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a60:	2001      	movs	r0, #1
 8016a62:	b008      	add	sp, #32
 8016a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a68:	0801cabc 	.word	0x0801cabc
 8016a6c:	2000dac8 	.word	0x2000dac8

08016a70 <rmw_destroy_service>:
 8016a70:	b570      	push	{r4, r5, r6, lr}
 8016a72:	b128      	cbz	r0, 8016a80 <rmw_destroy_service+0x10>
 8016a74:	4604      	mov	r4, r0
 8016a76:	6800      	ldr	r0, [r0, #0]
 8016a78:	460d      	mov	r5, r1
 8016a7a:	f7f7 f915 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 8016a7e:	b910      	cbnz	r0, 8016a86 <rmw_destroy_service+0x16>
 8016a80:	2401      	movs	r4, #1
 8016a82:	4620      	mov	r0, r4
 8016a84:	bd70      	pop	{r4, r5, r6, pc}
 8016a86:	6863      	ldr	r3, [r4, #4]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d0f9      	beq.n	8016a80 <rmw_destroy_service+0x10>
 8016a8c:	2d00      	cmp	r5, #0
 8016a8e:	d0f7      	beq.n	8016a80 <rmw_destroy_service+0x10>
 8016a90:	6828      	ldr	r0, [r5, #0]
 8016a92:	f7f7 f909 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 8016a96:	2800      	cmp	r0, #0
 8016a98:	d0f2      	beq.n	8016a80 <rmw_destroy_service+0x10>
 8016a9a:	686e      	ldr	r6, [r5, #4]
 8016a9c:	2e00      	cmp	r6, #0
 8016a9e:	d0ef      	beq.n	8016a80 <rmw_destroy_service+0x10>
 8016aa0:	6864      	ldr	r4, [r4, #4]
 8016aa2:	6932      	ldr	r2, [r6, #16]
 8016aa4:	6920      	ldr	r0, [r4, #16]
 8016aa6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016aaa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016aae:	6819      	ldr	r1, [r3, #0]
 8016ab0:	f001 fc9a 	bl	80183e8 <uxr_buffer_cancel_data>
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	6920      	ldr	r0, [r4, #16]
 8016ab8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016abc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016ac0:	f7f7 f86c 	bl	800db9c <run_xrce_session>
 8016ac4:	6920      	ldr	r0, [r4, #16]
 8016ac6:	6932      	ldr	r2, [r6, #16]
 8016ac8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016acc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ad0:	6819      	ldr	r1, [r3, #0]
 8016ad2:	f7f7 ff0f 	bl	800e8f4 <uxr_buffer_delete_entity>
 8016ad6:	4602      	mov	r2, r0
 8016ad8:	6920      	ldr	r0, [r4, #16]
 8016ada:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016ade:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016ae2:	f7f7 f85b 	bl	800db9c <run_xrce_session>
 8016ae6:	f080 0401 	eor.w	r4, r0, #1
 8016aea:	b2e4      	uxtb	r4, r4
 8016aec:	4628      	mov	r0, r5
 8016aee:	0064      	lsls	r4, r4, #1
 8016af0:	f7f6 ff20 	bl	800d934 <rmw_uxrce_fini_service_memory>
 8016af4:	e7c5      	b.n	8016a82 <rmw_destroy_service+0x12>
 8016af6:	bf00      	nop

08016af8 <rmw_create_subscription>:
 8016af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016afc:	b08d      	sub	sp, #52	@ 0x34
 8016afe:	2800      	cmp	r0, #0
 8016b00:	f000 80d1 	beq.w	8016ca6 <rmw_create_subscription+0x1ae>
 8016b04:	460f      	mov	r7, r1
 8016b06:	2900      	cmp	r1, #0
 8016b08:	f000 80cd 	beq.w	8016ca6 <rmw_create_subscription+0x1ae>
 8016b0c:	4604      	mov	r4, r0
 8016b0e:	6800      	ldr	r0, [r0, #0]
 8016b10:	4615      	mov	r5, r2
 8016b12:	461e      	mov	r6, r3
 8016b14:	f7f7 f8c8 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	f000 80c4 	beq.w	8016ca6 <rmw_create_subscription+0x1ae>
 8016b1e:	2d00      	cmp	r5, #0
 8016b20:	f000 80c1 	beq.w	8016ca6 <rmw_create_subscription+0x1ae>
 8016b24:	782b      	ldrb	r3, [r5, #0]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	f000 80bd 	beq.w	8016ca6 <rmw_create_subscription+0x1ae>
 8016b2c:	2e00      	cmp	r6, #0
 8016b2e:	f000 80ba 	beq.w	8016ca6 <rmw_create_subscription+0x1ae>
 8016b32:	485e      	ldr	r0, [pc, #376]	@ (8016cac <rmw_create_subscription+0x1b4>)
 8016b34:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016b38:	f7ff f9e4 	bl	8015f04 <get_memory>
 8016b3c:	2800      	cmp	r0, #0
 8016b3e:	f000 80b2 	beq.w	8016ca6 <rmw_create_subscription+0x1ae>
 8016b42:	6884      	ldr	r4, [r0, #8]
 8016b44:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8016b48:	f7ff fa62 	bl	8016010 <rmw_get_implementation_identifier>
 8016b4c:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8016b50:	67e0      	str	r0, [r4, #124]	@ 0x7c
 8016b52:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 8016b56:	4628      	mov	r0, r5
 8016b58:	f7e9 fbba 	bl	80002d0 <strlen>
 8016b5c:	3001      	adds	r0, #1
 8016b5e:	283c      	cmp	r0, #60	@ 0x3c
 8016b60:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 8016b64:	f200 8098 	bhi.w	8016c98 <rmw_create_subscription+0x1a0>
 8016b68:	4a51      	ldr	r2, [pc, #324]	@ (8016cb0 <rmw_create_subscription+0x1b8>)
 8016b6a:	462b      	mov	r3, r5
 8016b6c:	213c      	movs	r1, #60	@ 0x3c
 8016b6e:	4650      	mov	r0, sl
 8016b70:	f003 f86e 	bl	8019c50 <sniprintf>
 8016b74:	4631      	mov	r1, r6
 8016b76:	f8c4 9020 	str.w	r9, [r4, #32]
 8016b7a:	2250      	movs	r2, #80	@ 0x50
 8016b7c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8016b80:	f003 fab5 	bl	801a0ee <memcpy>
 8016b84:	494b      	ldr	r1, [pc, #300]	@ (8016cb4 <rmw_create_subscription+0x1bc>)
 8016b86:	4638      	mov	r0, r7
 8016b88:	f7f7 f89c 	bl	800dcc4 <get_message_typesupport_handle>
 8016b8c:	2800      	cmp	r0, #0
 8016b8e:	f000 8083 	beq.w	8016c98 <rmw_create_subscription+0x1a0>
 8016b92:	6842      	ldr	r2, [r0, #4]
 8016b94:	61a2      	str	r2, [r4, #24]
 8016b96:	2a00      	cmp	r2, #0
 8016b98:	d07e      	beq.n	8016c98 <rmw_create_subscription+0x1a0>
 8016b9a:	4629      	mov	r1, r5
 8016b9c:	4633      	mov	r3, r6
 8016b9e:	4648      	mov	r0, r9
 8016ba0:	f7ff fc92 	bl	80164c8 <create_topic>
 8016ba4:	61e0      	str	r0, [r4, #28]
 8016ba6:	2800      	cmp	r0, #0
 8016ba8:	d07a      	beq.n	8016ca0 <rmw_create_subscription+0x1a8>
 8016baa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016bb2:	2104      	movs	r1, #4
 8016bb4:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 8016bb8:	1c42      	adds	r2, r0, #1
 8016bba:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 8016bbe:	f7f8 f933 	bl	800ee28 <uxr_object_id>
 8016bc2:	6120      	str	r0, [r4, #16]
 8016bc4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016bc8:	2506      	movs	r5, #6
 8016bca:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 8016bce:	9500      	str	r5, [sp, #0]
 8016bd0:	6819      	ldr	r1, [r3, #0]
 8016bd2:	6922      	ldr	r2, [r4, #16]
 8016bd4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016bd8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016bdc:	f7f7 ff68 	bl	800eab0 <uxr_buffer_create_subscriber_bin>
 8016be0:	4602      	mov	r2, r0
 8016be2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016be6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016bea:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016bee:	f7f6 ffd5 	bl	800db9c <run_xrce_session>
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	d050      	beq.n	8016c98 <rmw_create_subscription+0x1a0>
 8016bf6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016bfe:	4629      	mov	r1, r5
 8016c00:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8016c04:	1c42      	adds	r2, r0, #1
 8016c06:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8016c0a:	f7f8 f90d 	bl	800ee28 <uxr_object_id>
 8016c0e:	af08      	add	r7, sp, #32
 8016c10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016c14:	69e3      	ldr	r3, [r4, #28]
 8016c16:	6160      	str	r0, [r4, #20]
 8016c18:	4631      	mov	r1, r6
 8016c1a:	4638      	mov	r0, r7
 8016c1c:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8016c20:	9305      	str	r3, [sp, #20]
 8016c22:	f7f6 ffdb 	bl	800dbdc <convert_qos_profile>
 8016c26:	9503      	str	r5, [sp, #12]
 8016c28:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016c2c:	9b05      	ldr	r3, [sp, #20]
 8016c2e:	9001      	str	r0, [sp, #4]
 8016c30:	f8ad 1008 	strh.w	r1, [sp, #8]
 8016c34:	691b      	ldr	r3, [r3, #16]
 8016c36:	9300      	str	r3, [sp, #0]
 8016c38:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8016c3c:	f8db 1000 	ldr.w	r1, [fp]
 8016c40:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8016c44:	f7f7 ffc8 	bl	800ebd8 <uxr_buffer_create_datareader_bin>
 8016c48:	4602      	mov	r2, r0
 8016c4a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016c4e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016c52:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016c56:	f7f6 ffa1 	bl	800db9c <run_xrce_session>
 8016c5a:	b1e8      	cbz	r0, 8016c98 <rmw_create_subscription+0x1a0>
 8016c5c:	7a33      	ldrb	r3, [r6, #8]
 8016c5e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8016c62:	2b02      	cmp	r3, #2
 8016c64:	bf0c      	ite	eq
 8016c66:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8016c6a:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8016c6e:	9307      	str	r3, [sp, #28]
 8016c70:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016c74:	2200      	movs	r2, #0
 8016c76:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8016c7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8016c7c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016c80:	9300      	str	r3, [sp, #0]
 8016c82:	6962      	ldr	r2, [r4, #20]
 8016c84:	9b07      	ldr	r3, [sp, #28]
 8016c86:	6809      	ldr	r1, [r1, #0]
 8016c88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c8c:	f001 fb74 	bl	8018378 <uxr_buffer_request_data>
 8016c90:	4640      	mov	r0, r8
 8016c92:	b00d      	add	sp, #52	@ 0x34
 8016c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c98:	69e0      	ldr	r0, [r4, #28]
 8016c9a:	b108      	cbz	r0, 8016ca0 <rmw_create_subscription+0x1a8>
 8016c9c:	f7f6 fe76 	bl	800d98c <rmw_uxrce_fini_topic_memory>
 8016ca0:	4640      	mov	r0, r8
 8016ca2:	f7f6 fe31 	bl	800d908 <rmw_uxrce_fini_subscription_memory>
 8016ca6:	f04f 0800 	mov.w	r8, #0
 8016caa:	e7f1      	b.n	8016c90 <rmw_create_subscription+0x198>
 8016cac:	2000e278 	.word	0x2000e278
 8016cb0:	0801bbb4 	.word	0x0801bbb4
 8016cb4:	0801ba20 	.word	0x0801ba20

08016cb8 <rmw_subscription_get_actual_qos>:
 8016cb8:	b508      	push	{r3, lr}
 8016cba:	4603      	mov	r3, r0
 8016cbc:	b140      	cbz	r0, 8016cd0 <rmw_subscription_get_actual_qos+0x18>
 8016cbe:	4608      	mov	r0, r1
 8016cc0:	b131      	cbz	r1, 8016cd0 <rmw_subscription_get_actual_qos+0x18>
 8016cc2:	6859      	ldr	r1, [r3, #4]
 8016cc4:	2250      	movs	r2, #80	@ 0x50
 8016cc6:	3128      	adds	r1, #40	@ 0x28
 8016cc8:	f003 fa11 	bl	801a0ee <memcpy>
 8016ccc:	2000      	movs	r0, #0
 8016cce:	bd08      	pop	{r3, pc}
 8016cd0:	200b      	movs	r0, #11
 8016cd2:	bd08      	pop	{r3, pc}

08016cd4 <rmw_destroy_subscription>:
 8016cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd8:	b128      	cbz	r0, 8016ce6 <rmw_destroy_subscription+0x12>
 8016cda:	4604      	mov	r4, r0
 8016cdc:	6800      	ldr	r0, [r0, #0]
 8016cde:	460d      	mov	r5, r1
 8016ce0:	f7f6 ffe2 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 8016ce4:	b918      	cbnz	r0, 8016cee <rmw_destroy_subscription+0x1a>
 8016ce6:	2401      	movs	r4, #1
 8016ce8:	4620      	mov	r0, r4
 8016cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cee:	6863      	ldr	r3, [r4, #4]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d0f8      	beq.n	8016ce6 <rmw_destroy_subscription+0x12>
 8016cf4:	2d00      	cmp	r5, #0
 8016cf6:	d0f6      	beq.n	8016ce6 <rmw_destroy_subscription+0x12>
 8016cf8:	6828      	ldr	r0, [r5, #0]
 8016cfa:	f7f6 ffd5 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	d0f1      	beq.n	8016ce6 <rmw_destroy_subscription+0x12>
 8016d02:	686c      	ldr	r4, [r5, #4]
 8016d04:	2c00      	cmp	r4, #0
 8016d06:	d0ee      	beq.n	8016ce6 <rmw_destroy_subscription+0x12>
 8016d08:	6a26      	ldr	r6, [r4, #32]
 8016d0a:	6962      	ldr	r2, [r4, #20]
 8016d0c:	6930      	ldr	r0, [r6, #16]
 8016d0e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016d12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d16:	6819      	ldr	r1, [r3, #0]
 8016d18:	f001 fb66 	bl	80183e8 <uxr_buffer_cancel_data>
 8016d1c:	4602      	mov	r2, r0
 8016d1e:	6930      	ldr	r0, [r6, #16]
 8016d20:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016d24:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016d28:	f7f6 ff38 	bl	800db9c <run_xrce_session>
 8016d2c:	69e0      	ldr	r0, [r4, #28]
 8016d2e:	f7ff fc1f 	bl	8016570 <destroy_topic>
 8016d32:	6a23      	ldr	r3, [r4, #32]
 8016d34:	6962      	ldr	r2, [r4, #20]
 8016d36:	6918      	ldr	r0, [r3, #16]
 8016d38:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016d3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d40:	6819      	ldr	r1, [r3, #0]
 8016d42:	f7f7 fdd7 	bl	800e8f4 <uxr_buffer_delete_entity>
 8016d46:	6a23      	ldr	r3, [r4, #32]
 8016d48:	6922      	ldr	r2, [r4, #16]
 8016d4a:	4680      	mov	r8, r0
 8016d4c:	6918      	ldr	r0, [r3, #16]
 8016d4e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016d52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d56:	6819      	ldr	r1, [r3, #0]
 8016d58:	f7f7 fdcc 	bl	800e8f4 <uxr_buffer_delete_entity>
 8016d5c:	4607      	mov	r7, r0
 8016d5e:	6930      	ldr	r0, [r6, #16]
 8016d60:	4642      	mov	r2, r8
 8016d62:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016d66:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016d6a:	f7f6 ff17 	bl	800db9c <run_xrce_session>
 8016d6e:	4604      	mov	r4, r0
 8016d70:	6930      	ldr	r0, [r6, #16]
 8016d72:	463a      	mov	r2, r7
 8016d74:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016d78:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016d7c:	f7f6 ff0e 	bl	800db9c <run_xrce_session>
 8016d80:	4004      	ands	r4, r0
 8016d82:	f084 0401 	eor.w	r4, r4, #1
 8016d86:	b2e4      	uxtb	r4, r4
 8016d88:	4628      	mov	r0, r5
 8016d8a:	0064      	lsls	r4, r4, #1
 8016d8c:	f7f6 fdbc 	bl	800d908 <rmw_uxrce_fini_subscription_memory>
 8016d90:	e7aa      	b.n	8016ce8 <rmw_destroy_subscription+0x14>
 8016d92:	bf00      	nop

08016d94 <rmw_take_with_info>:
 8016d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d96:	4604      	mov	r4, r0
 8016d98:	6800      	ldr	r0, [r0, #0]
 8016d9a:	b089      	sub	sp, #36	@ 0x24
 8016d9c:	460f      	mov	r7, r1
 8016d9e:	4615      	mov	r5, r2
 8016da0:	b128      	cbz	r0, 8016dae <rmw_take_with_info+0x1a>
 8016da2:	4b23      	ldr	r3, [pc, #140]	@ (8016e30 <rmw_take_with_info+0x9c>)
 8016da4:	6819      	ldr	r1, [r3, #0]
 8016da6:	f7e9 fa33 	bl	8000210 <strcmp>
 8016daa:	2800      	cmp	r0, #0
 8016dac:	d13d      	bne.n	8016e2a <rmw_take_with_info+0x96>
 8016dae:	6864      	ldr	r4, [r4, #4]
 8016db0:	b1fd      	cbz	r5, 8016df2 <rmw_take_with_info+0x5e>
 8016db2:	2300      	movs	r3, #0
 8016db4:	702b      	strb	r3, [r5, #0]
 8016db6:	f7f6 fe73 	bl	800daa0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016dba:	4620      	mov	r0, r4
 8016dbc:	f7f6 fe4a 	bl	800da54 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016dc0:	4606      	mov	r6, r0
 8016dc2:	b1e8      	cbz	r0, 8016e00 <rmw_take_with_info+0x6c>
 8016dc4:	6881      	ldr	r1, [r0, #8]
 8016dc6:	4668      	mov	r0, sp
 8016dc8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016dcc:	3110      	adds	r1, #16
 8016dce:	f7f4 ff6f 	bl	800bcb0 <ucdr_init_buffer>
 8016dd2:	69a3      	ldr	r3, [r4, #24]
 8016dd4:	4639      	mov	r1, r7
 8016dd6:	68db      	ldr	r3, [r3, #12]
 8016dd8:	4668      	mov	r0, sp
 8016dda:	4798      	blx	r3
 8016ddc:	4631      	mov	r1, r6
 8016dde:	4604      	mov	r4, r0
 8016de0:	4814      	ldr	r0, [pc, #80]	@ (8016e34 <rmw_take_with_info+0xa0>)
 8016de2:	f7ff f89f 	bl	8015f24 <put_memory>
 8016de6:	702c      	strb	r4, [r5, #0]
 8016de8:	f084 0001 	eor.w	r0, r4, #1
 8016dec:	b2c0      	uxtb	r0, r0
 8016dee:	b009      	add	sp, #36	@ 0x24
 8016df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016df2:	f7f6 fe55 	bl	800daa0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016df6:	4620      	mov	r0, r4
 8016df8:	f7f6 fe2c 	bl	800da54 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016dfc:	4605      	mov	r5, r0
 8016dfe:	b910      	cbnz	r0, 8016e06 <rmw_take_with_info+0x72>
 8016e00:	2001      	movs	r0, #1
 8016e02:	b009      	add	sp, #36	@ 0x24
 8016e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e06:	68a9      	ldr	r1, [r5, #8]
 8016e08:	4668      	mov	r0, sp
 8016e0a:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016e0e:	3110      	adds	r1, #16
 8016e10:	f7f4 ff4e 	bl	800bcb0 <ucdr_init_buffer>
 8016e14:	69a3      	ldr	r3, [r4, #24]
 8016e16:	4639      	mov	r1, r7
 8016e18:	68db      	ldr	r3, [r3, #12]
 8016e1a:	4668      	mov	r0, sp
 8016e1c:	4798      	blx	r3
 8016e1e:	4629      	mov	r1, r5
 8016e20:	4604      	mov	r4, r0
 8016e22:	4804      	ldr	r0, [pc, #16]	@ (8016e34 <rmw_take_with_info+0xa0>)
 8016e24:	f7ff f87e 	bl	8015f24 <put_memory>
 8016e28:	e7de      	b.n	8016de8 <rmw_take_with_info+0x54>
 8016e2a:	200c      	movs	r0, #12
 8016e2c:	b009      	add	sp, #36	@ 0x24
 8016e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e30:	0801cabc 	.word	0x0801cabc
 8016e34:	2000dac8 	.word	0x2000dac8

08016e38 <rmw_wait>:
 8016e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e3c:	b089      	sub	sp, #36	@ 0x24
 8016e3e:	4607      	mov	r7, r0
 8016e40:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8016e42:	460e      	mov	r6, r1
 8016e44:	4698      	mov	r8, r3
 8016e46:	4691      	mov	r9, r2
 8016e48:	2a00      	cmp	r2, #0
 8016e4a:	f000 811e 	beq.w	801708a <rmw_wait+0x252>
 8016e4e:	2c00      	cmp	r4, #0
 8016e50:	f000 80ef 	beq.w	8017032 <rmw_wait+0x1fa>
 8016e54:	4bb5      	ldr	r3, [pc, #724]	@ (801712c <rmw_wait+0x2f4>)
 8016e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016e58:	ad04      	add	r5, sp, #16
 8016e5a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8016e5e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016e62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016e66:	f7fe fe83 	bl	8015b70 <rmw_time_equal>
 8016e6a:	2800      	cmp	r0, #0
 8016e6c:	f000 811b 	beq.w	80170a6 <rmw_wait+0x26e>
 8016e70:	f04f 35ff 	mov.w	r5, #4294967295
 8016e74:	f7f6 fe14 	bl	800daa0 <rmw_uxrce_clean_expired_static_input_buffer>
 8016e78:	4bad      	ldr	r3, [pc, #692]	@ (8017130 <rmw_wait+0x2f8>)
 8016e7a:	681c      	ldr	r4, [r3, #0]
 8016e7c:	b14c      	cbz	r4, 8016e92 <rmw_wait+0x5a>
 8016e7e:	4623      	mov	r3, r4
 8016e80:	2100      	movs	r1, #0
 8016e82:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8016e86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016e8a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d1f7      	bne.n	8016e82 <rmw_wait+0x4a>
 8016e92:	f1b9 0f00 	cmp.w	r9, #0
 8016e96:	d011      	beq.n	8016ebc <rmw_wait+0x84>
 8016e98:	f8d9 1000 	ldr.w	r1, [r9]
 8016e9c:	b171      	cbz	r1, 8016ebc <rmw_wait+0x84>
 8016e9e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	2001      	movs	r0, #1
 8016ea6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016eaa:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016eac:	6912      	ldr	r2, [r2, #16]
 8016eae:	3301      	adds	r3, #1
 8016eb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016eb4:	4299      	cmp	r1, r3
 8016eb6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016eba:	d1f4      	bne.n	8016ea6 <rmw_wait+0x6e>
 8016ebc:	f1b8 0f00 	cmp.w	r8, #0
 8016ec0:	f000 8109 	beq.w	80170d6 <rmw_wait+0x29e>
 8016ec4:	f8d8 1000 	ldr.w	r1, [r8]
 8016ec8:	2900      	cmp	r1, #0
 8016eca:	f000 8116 	beq.w	80170fa <rmw_wait+0x2c2>
 8016ece:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	2001      	movs	r0, #1
 8016ed6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016eda:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016edc:	6912      	ldr	r2, [r2, #16]
 8016ede:	3301      	adds	r3, #1
 8016ee0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016ee4:	4299      	cmp	r1, r3
 8016ee6:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016eea:	d1f4      	bne.n	8016ed6 <rmw_wait+0x9e>
 8016eec:	2f00      	cmp	r7, #0
 8016eee:	f000 8114 	beq.w	801711a <rmw_wait+0x2e2>
 8016ef2:	6839      	ldr	r1, [r7, #0]
 8016ef4:	b171      	cbz	r1, 8016f14 <rmw_wait+0xdc>
 8016ef6:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8016efa:	2300      	movs	r3, #0
 8016efc:	2001      	movs	r0, #1
 8016efe:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8016f02:	6a12      	ldr	r2, [r2, #32]
 8016f04:	6912      	ldr	r2, [r2, #16]
 8016f06:	3301      	adds	r3, #1
 8016f08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016f0c:	4299      	cmp	r1, r3
 8016f0e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8016f12:	d1f4      	bne.n	8016efe <rmw_wait+0xc6>
 8016f14:	b344      	cbz	r4, 8016f68 <rmw_wait+0x130>
 8016f16:	4622      	mov	r2, r4
 8016f18:	2300      	movs	r3, #0
 8016f1a:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8016f1e:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8016f22:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8016f26:	440b      	add	r3, r1
 8016f28:	b2db      	uxtb	r3, r3
 8016f2a:	2a00      	cmp	r2, #0
 8016f2c:	d1f5      	bne.n	8016f1a <rmw_wait+0xe2>
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d075      	beq.n	801701e <rmw_wait+0x1e6>
 8016f32:	1c6a      	adds	r2, r5, #1
 8016f34:	d00d      	beq.n	8016f52 <rmw_wait+0x11a>
 8016f36:	ee07 5a90 	vmov	s15, r5
 8016f3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016f3e:	ee07 3a90 	vmov	s15, r3
 8016f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016f4a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016f4e:	ee17 5a90 	vmov	r5, s15
 8016f52:	68a0      	ldr	r0, [r4, #8]
 8016f54:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8016f58:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	f040 808a 	bne.w	8017076 <rmw_wait+0x23e>
 8016f62:	6864      	ldr	r4, [r4, #4]
 8016f64:	2c00      	cmp	r4, #0
 8016f66:	d1f4      	bne.n	8016f52 <rmw_wait+0x11a>
 8016f68:	f1b9 0f00 	cmp.w	r9, #0
 8016f6c:	f000 80c3 	beq.w	80170f6 <rmw_wait+0x2be>
 8016f70:	f8d9 5000 	ldr.w	r5, [r9]
 8016f74:	b185      	cbz	r5, 8016f98 <rmw_wait+0x160>
 8016f76:	2400      	movs	r4, #0
 8016f78:	4625      	mov	r5, r4
 8016f7a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016f7e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016f82:	f7f6 fd67 	bl	800da54 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016f86:	2800      	cmp	r0, #0
 8016f88:	d06d      	beq.n	8017066 <rmw_wait+0x22e>
 8016f8a:	f8d9 3000 	ldr.w	r3, [r9]
 8016f8e:	3401      	adds	r4, #1
 8016f90:	42a3      	cmp	r3, r4
 8016f92:	f04f 0501 	mov.w	r5, #1
 8016f96:	d8f0      	bhi.n	8016f7a <rmw_wait+0x142>
 8016f98:	f1b8 0f00 	cmp.w	r8, #0
 8016f9c:	d012      	beq.n	8016fc4 <rmw_wait+0x18c>
 8016f9e:	f8d8 1000 	ldr.w	r1, [r8]
 8016fa2:	2400      	movs	r4, #0
 8016fa4:	b171      	cbz	r1, 8016fc4 <rmw_wait+0x18c>
 8016fa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016faa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016fae:	f7f6 fd51 	bl	800da54 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016fb2:	2800      	cmp	r0, #0
 8016fb4:	d047      	beq.n	8017046 <rmw_wait+0x20e>
 8016fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8016fba:	3401      	adds	r4, #1
 8016fbc:	42a3      	cmp	r3, r4
 8016fbe:	f04f 0501 	mov.w	r5, #1
 8016fc2:	d8f0      	bhi.n	8016fa6 <rmw_wait+0x16e>
 8016fc4:	b17f      	cbz	r7, 8016fe6 <rmw_wait+0x1ae>
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	2400      	movs	r4, #0
 8016fca:	b163      	cbz	r3, 8016fe6 <rmw_wait+0x1ae>
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016fd2:	f7f6 fd3f 	bl	800da54 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016fd6:	2800      	cmp	r0, #0
 8016fd8:	d03d      	beq.n	8017056 <rmw_wait+0x21e>
 8016fda:	683b      	ldr	r3, [r7, #0]
 8016fdc:	3401      	adds	r4, #1
 8016fde:	42a3      	cmp	r3, r4
 8016fe0:	f04f 0501 	mov.w	r5, #1
 8016fe4:	d8f2      	bhi.n	8016fcc <rmw_wait+0x194>
 8016fe6:	b1a6      	cbz	r6, 8017012 <rmw_wait+0x1da>
 8016fe8:	6834      	ldr	r4, [r6, #0]
 8016fea:	b194      	cbz	r4, 8017012 <rmw_wait+0x1da>
 8016fec:	2300      	movs	r3, #0
 8016fee:	461f      	mov	r7, r3
 8016ff0:	e004      	b.n	8016ffc <rmw_wait+0x1c4>
 8016ff2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8016ff6:	3301      	adds	r3, #1
 8016ff8:	429c      	cmp	r4, r3
 8016ffa:	d00a      	beq.n	8017012 <rmw_wait+0x1da>
 8016ffc:	6870      	ldr	r0, [r6, #4]
 8016ffe:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017002:	7c0a      	ldrb	r2, [r1, #16]
 8017004:	2a00      	cmp	r2, #0
 8017006:	d0f4      	beq.n	8016ff2 <rmw_wait+0x1ba>
 8017008:	3301      	adds	r3, #1
 801700a:	429c      	cmp	r4, r3
 801700c:	740f      	strb	r7, [r1, #16]
 801700e:	4615      	mov	r5, r2
 8017010:	d1f4      	bne.n	8016ffc <rmw_wait+0x1c4>
 8017012:	f085 0001 	eor.w	r0, r5, #1
 8017016:	0040      	lsls	r0, r0, #1
 8017018:	b009      	add	sp, #36	@ 0x24
 801701a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801701e:	68a0      	ldr	r0, [r4, #8]
 8017020:	2100      	movs	r1, #0
 8017022:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017026:	f7f8 fc95 	bl	800f954 <uxr_run_session_timeout>
 801702a:	6864      	ldr	r4, [r4, #4]
 801702c:	2c00      	cmp	r4, #0
 801702e:	d1f6      	bne.n	801701e <rmw_wait+0x1e6>
 8017030:	e79a      	b.n	8016f68 <rmw_wait+0x130>
 8017032:	f7f6 fd35 	bl	800daa0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017036:	4b3e      	ldr	r3, [pc, #248]	@ (8017130 <rmw_wait+0x2f8>)
 8017038:	681c      	ldr	r4, [r3, #0]
 801703a:	f04f 35ff 	mov.w	r5, #4294967295
 801703e:	2c00      	cmp	r4, #0
 8017040:	f47f af1d 	bne.w	8016e7e <rmw_wait+0x46>
 8017044:	e728      	b.n	8016e98 <rmw_wait+0x60>
 8017046:	e9d8 3200 	ldrd	r3, r2, [r8]
 801704a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801704e:	3401      	adds	r4, #1
 8017050:	429c      	cmp	r4, r3
 8017052:	d3a8      	bcc.n	8016fa6 <rmw_wait+0x16e>
 8017054:	e7b6      	b.n	8016fc4 <rmw_wait+0x18c>
 8017056:	e9d7 3200 	ldrd	r3, r2, [r7]
 801705a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801705e:	3401      	adds	r4, #1
 8017060:	42a3      	cmp	r3, r4
 8017062:	d8b3      	bhi.n	8016fcc <rmw_wait+0x194>
 8017064:	e7bf      	b.n	8016fe6 <rmw_wait+0x1ae>
 8017066:	e9d9 3200 	ldrd	r3, r2, [r9]
 801706a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801706e:	3401      	adds	r4, #1
 8017070:	42a3      	cmp	r3, r4
 8017072:	d882      	bhi.n	8016f7a <rmw_wait+0x142>
 8017074:	e790      	b.n	8016f98 <rmw_wait+0x160>
 8017076:	4629      	mov	r1, r5
 8017078:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801707c:	f7f8 fc84 	bl	800f988 <uxr_run_session_until_data>
 8017080:	6864      	ldr	r4, [r4, #4]
 8017082:	2c00      	cmp	r4, #0
 8017084:	f47f af65 	bne.w	8016f52 <rmw_wait+0x11a>
 8017088:	e76e      	b.n	8016f68 <rmw_wait+0x130>
 801708a:	b1f3      	cbz	r3, 80170ca <rmw_wait+0x292>
 801708c:	2c00      	cmp	r4, #0
 801708e:	f47f aee1 	bne.w	8016e54 <rmw_wait+0x1c>
 8017092:	f7f6 fd05 	bl	800daa0 <rmw_uxrce_clean_expired_static_input_buffer>
 8017096:	4b26      	ldr	r3, [pc, #152]	@ (8017130 <rmw_wait+0x2f8>)
 8017098:	681c      	ldr	r4, [r3, #0]
 801709a:	f04f 35ff 	mov.w	r5, #4294967295
 801709e:	2c00      	cmp	r4, #0
 80170a0:	f47f aeed 	bne.w	8016e7e <rmw_wait+0x46>
 80170a4:	e70a      	b.n	8016ebc <rmw_wait+0x84>
 80170a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80170aa:	f7fe fdb5 	bl	8015c18 <rmw_time_total_nsec>
 80170ae:	4a21      	ldr	r2, [pc, #132]	@ (8017134 <rmw_wait+0x2fc>)
 80170b0:	2300      	movs	r3, #0
 80170b2:	f7e9 fd4b 	bl	8000b4c <__aeabi_uldivmod>
 80170b6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80170ba:	f171 0100 	sbcs.w	r1, r1, #0
 80170be:	4605      	mov	r5, r0
 80170c0:	f6ff aed8 	blt.w	8016e74 <rmw_wait+0x3c>
 80170c4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80170c8:	e6d4      	b.n	8016e74 <rmw_wait+0x3c>
 80170ca:	2800      	cmp	r0, #0
 80170cc:	d1de      	bne.n	801708c <rmw_wait+0x254>
 80170ce:	2900      	cmp	r1, #0
 80170d0:	d1dc      	bne.n	801708c <rmw_wait+0x254>
 80170d2:	4608      	mov	r0, r1
 80170d4:	e7a0      	b.n	8017018 <rmw_wait+0x1e0>
 80170d6:	2f00      	cmp	r7, #0
 80170d8:	f47f af0b 	bne.w	8016ef2 <rmw_wait+0xba>
 80170dc:	2c00      	cmp	r4, #0
 80170de:	f47f af1a 	bne.w	8016f16 <rmw_wait+0xde>
 80170e2:	f1b9 0f00 	cmp.w	r9, #0
 80170e6:	d027      	beq.n	8017138 <rmw_wait+0x300>
 80170e8:	f8d9 3000 	ldr.w	r3, [r9]
 80170ec:	4625      	mov	r5, r4
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	f47f af41 	bne.w	8016f76 <rmw_wait+0x13e>
 80170f4:	e777      	b.n	8016fe6 <rmw_wait+0x1ae>
 80170f6:	464d      	mov	r5, r9
 80170f8:	e74e      	b.n	8016f98 <rmw_wait+0x160>
 80170fa:	2f00      	cmp	r7, #0
 80170fc:	f47f aef9 	bne.w	8016ef2 <rmw_wait+0xba>
 8017100:	2c00      	cmp	r4, #0
 8017102:	f47f af08 	bne.w	8016f16 <rmw_wait+0xde>
 8017106:	f1b9 0f00 	cmp.w	r9, #0
 801710a:	d015      	beq.n	8017138 <rmw_wait+0x300>
 801710c:	f8d9 3000 	ldr.w	r3, [r9]
 8017110:	2b00      	cmp	r3, #0
 8017112:	f47f af30 	bne.w	8016f76 <rmw_wait+0x13e>
 8017116:	2500      	movs	r5, #0
 8017118:	e743      	b.n	8016fa2 <rmw_wait+0x16a>
 801711a:	2c00      	cmp	r4, #0
 801711c:	f47f aefb 	bne.w	8016f16 <rmw_wait+0xde>
 8017120:	f1b9 0f00 	cmp.w	r9, #0
 8017124:	f47f af24 	bne.w	8016f70 <rmw_wait+0x138>
 8017128:	e7f5      	b.n	8017116 <rmw_wait+0x2de>
 801712a:	bf00      	nop
 801712c:	0801b8d8 	.word	0x0801b8d8
 8017130:	20010168 	.word	0x20010168
 8017134:	000f4240 	.word	0x000f4240
 8017138:	464d      	mov	r5, r9
 801713a:	e754      	b.n	8016fe6 <rmw_wait+0x1ae>

0801713c <rmw_create_wait_set>:
 801713c:	b508      	push	{r3, lr}
 801713e:	4803      	ldr	r0, [pc, #12]	@ (801714c <rmw_create_wait_set+0x10>)
 8017140:	f7fe fee0 	bl	8015f04 <get_memory>
 8017144:	b108      	cbz	r0, 801714a <rmw_create_wait_set+0xe>
 8017146:	6880      	ldr	r0, [r0, #8]
 8017148:	3010      	adds	r0, #16
 801714a:	bd08      	pop	{r3, pc}
 801714c:	2000b924 	.word	0x2000b924

08017150 <rmw_destroy_wait_set>:
 8017150:	b508      	push	{r3, lr}
 8017152:	4b08      	ldr	r3, [pc, #32]	@ (8017174 <rmw_destroy_wait_set+0x24>)
 8017154:	6819      	ldr	r1, [r3, #0]
 8017156:	b911      	cbnz	r1, 801715e <rmw_destroy_wait_set+0xe>
 8017158:	e00a      	b.n	8017170 <rmw_destroy_wait_set+0x20>
 801715a:	6849      	ldr	r1, [r1, #4]
 801715c:	b141      	cbz	r1, 8017170 <rmw_destroy_wait_set+0x20>
 801715e:	688b      	ldr	r3, [r1, #8]
 8017160:	3310      	adds	r3, #16
 8017162:	4298      	cmp	r0, r3
 8017164:	d1f9      	bne.n	801715a <rmw_destroy_wait_set+0xa>
 8017166:	4803      	ldr	r0, [pc, #12]	@ (8017174 <rmw_destroy_wait_set+0x24>)
 8017168:	f7fe fedc 	bl	8015f24 <put_memory>
 801716c:	2000      	movs	r0, #0
 801716e:	bd08      	pop	{r3, pc}
 8017170:	2001      	movs	r0, #1
 8017172:	bd08      	pop	{r3, pc}
 8017174:	2000b924 	.word	0x2000b924

08017178 <std_msgs__msg__Header__get_type_hash>:
 8017178:	4800      	ldr	r0, [pc, #0]	@ (801717c <std_msgs__msg__Header__get_type_hash+0x4>)
 801717a:	4770      	bx	lr
 801717c:	20001024 	.word	0x20001024

08017180 <std_msgs__msg__Header__get_type_description>:
 8017180:	b510      	push	{r4, lr}
 8017182:	4c08      	ldr	r4, [pc, #32]	@ (80171a4 <std_msgs__msg__Header__get_type_description+0x24>)
 8017184:	7820      	ldrb	r0, [r4, #0]
 8017186:	b108      	cbz	r0, 801718c <std_msgs__msg__Header__get_type_description+0xc>
 8017188:	4807      	ldr	r0, [pc, #28]	@ (80171a8 <std_msgs__msg__Header__get_type_description+0x28>)
 801718a:	bd10      	pop	{r4, pc}
 801718c:	f000 f86c 	bl	8017268 <builtin_interfaces__msg__Time__get_type_description>
 8017190:	300c      	adds	r0, #12
 8017192:	c807      	ldmia	r0, {r0, r1, r2}
 8017194:	4b05      	ldr	r3, [pc, #20]	@ (80171ac <std_msgs__msg__Header__get_type_description+0x2c>)
 8017196:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801719a:	2301      	movs	r3, #1
 801719c:	4802      	ldr	r0, [pc, #8]	@ (80171a8 <std_msgs__msg__Header__get_type_description+0x28>)
 801719e:	7023      	strb	r3, [r4, #0]
 80171a0:	bd10      	pop	{r4, pc}
 80171a2:	bf00      	nop
 80171a4:	20010499 	.word	0x20010499
 80171a8:	0801caf0 	.word	0x0801caf0
 80171ac:	2000119c 	.word	0x2000119c

080171b0 <std_msgs__msg__Header__get_individual_type_description_source>:
 80171b0:	4800      	ldr	r0, [pc, #0]	@ (80171b4 <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 80171b2:	4770      	bx	lr
 80171b4:	0801cacc 	.word	0x0801cacc

080171b8 <std_msgs__msg__Header__get_type_description_sources>:
 80171b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171ba:	4e0f      	ldr	r6, [pc, #60]	@ (80171f8 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 80171bc:	7837      	ldrb	r7, [r6, #0]
 80171be:	b10f      	cbz	r7, 80171c4 <std_msgs__msg__Header__get_type_description_sources+0xc>
 80171c0:	480e      	ldr	r0, [pc, #56]	@ (80171fc <std_msgs__msg__Header__get_type_description_sources+0x44>)
 80171c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171c4:	4d0e      	ldr	r5, [pc, #56]	@ (8017200 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 80171c6:	4c0f      	ldr	r4, [pc, #60]	@ (8017204 <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 80171c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80171ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171d0:	682b      	ldr	r3, [r5, #0]
 80171d2:	f844 3b04 	str.w	r3, [r4], #4
 80171d6:	4638      	mov	r0, r7
 80171d8:	f000 f852 	bl	8017280 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80171dc:	2301      	movs	r3, #1
 80171de:	4684      	mov	ip, r0
 80171e0:	7033      	strb	r3, [r6, #0]
 80171e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80171e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80171ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80171ee:	f8dc 3000 	ldr.w	r3, [ip]
 80171f2:	4802      	ldr	r0, [pc, #8]	@ (80171fc <std_msgs__msg__Header__get_type_description_sources+0x44>)
 80171f4:	6023      	str	r3, [r4, #0]
 80171f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171f8:	20010498 	.word	0x20010498
 80171fc:	0801cac0 	.word	0x0801cac0
 8017200:	0801cacc 	.word	0x0801cacc
 8017204:	20010450 	.word	0x20010450

08017208 <std_msgs__msg__Header__init>:
 8017208:	b1d8      	cbz	r0, 8017242 <std_msgs__msg__Header__init+0x3a>
 801720a:	b538      	push	{r3, r4, r5, lr}
 801720c:	4604      	mov	r4, r0
 801720e:	f000 f857 	bl	80172c0 <builtin_interfaces__msg__Time__init>
 8017212:	b130      	cbz	r0, 8017222 <std_msgs__msg__Header__init+0x1a>
 8017214:	f104 0508 	add.w	r5, r4, #8
 8017218:	4628      	mov	r0, r5
 801721a:	f7f6 fd5f 	bl	800dcdc <rosidl_runtime_c__String__init>
 801721e:	b148      	cbz	r0, 8017234 <std_msgs__msg__Header__init+0x2c>
 8017220:	bd38      	pop	{r3, r4, r5, pc}
 8017222:	4620      	mov	r0, r4
 8017224:	f000 f850 	bl	80172c8 <builtin_interfaces__msg__Time__fini>
 8017228:	f104 0008 	add.w	r0, r4, #8
 801722c:	f7f6 fd70 	bl	800dd10 <rosidl_runtime_c__String__fini>
 8017230:	2000      	movs	r0, #0
 8017232:	bd38      	pop	{r3, r4, r5, pc}
 8017234:	4620      	mov	r0, r4
 8017236:	f000 f847 	bl	80172c8 <builtin_interfaces__msg__Time__fini>
 801723a:	4628      	mov	r0, r5
 801723c:	f7f6 fd68 	bl	800dd10 <rosidl_runtime_c__String__fini>
 8017240:	e7f6      	b.n	8017230 <std_msgs__msg__Header__init+0x28>
 8017242:	2000      	movs	r0, #0
 8017244:	4770      	bx	lr
 8017246:	bf00      	nop

08017248 <std_msgs__msg__Header__fini>:
 8017248:	b148      	cbz	r0, 801725e <std_msgs__msg__Header__fini+0x16>
 801724a:	b510      	push	{r4, lr}
 801724c:	4604      	mov	r4, r0
 801724e:	f000 f83b 	bl	80172c8 <builtin_interfaces__msg__Time__fini>
 8017252:	f104 0008 	add.w	r0, r4, #8
 8017256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801725a:	f7f6 bd59 	b.w	800dd10 <rosidl_runtime_c__String__fini>
 801725e:	4770      	bx	lr

08017260 <builtin_interfaces__msg__Time__get_type_hash>:
 8017260:	4800      	ldr	r0, [pc, #0]	@ (8017264 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 8017262:	4770      	bx	lr
 8017264:	2000127c 	.word	0x2000127c

08017268 <builtin_interfaces__msg__Time__get_type_description>:
 8017268:	4b03      	ldr	r3, [pc, #12]	@ (8017278 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 801726a:	781a      	ldrb	r2, [r3, #0]
 801726c:	b90a      	cbnz	r2, 8017272 <builtin_interfaces__msg__Time__get_type_description+0xa>
 801726e:	2201      	movs	r2, #1
 8017270:	701a      	strb	r2, [r3, #0]
 8017272:	4802      	ldr	r0, [pc, #8]	@ (801727c <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8017274:	4770      	bx	lr
 8017276:	bf00      	nop
 8017278:	200104c1 	.word	0x200104c1
 801727c:	0801cb44 	.word	0x0801cb44

08017280 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8017280:	4800      	ldr	r0, [pc, #0]	@ (8017284 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 8017282:	4770      	bx	lr
 8017284:	0801cb20 	.word	0x0801cb20

08017288 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8017288:	4b09      	ldr	r3, [pc, #36]	@ (80172b0 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 801728a:	781a      	ldrb	r2, [r3, #0]
 801728c:	b96a      	cbnz	r2, 80172aa <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 801728e:	b430      	push	{r4, r5}
 8017290:	4d08      	ldr	r5, [pc, #32]	@ (80172b4 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 8017292:	4c09      	ldr	r4, [pc, #36]	@ (80172b8 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8017294:	2201      	movs	r2, #1
 8017296:	701a      	strb	r2, [r3, #0]
 8017298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801729a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801729c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801729e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80172a0:	682b      	ldr	r3, [r5, #0]
 80172a2:	4806      	ldr	r0, [pc, #24]	@ (80172bc <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80172a4:	6023      	str	r3, [r4, #0]
 80172a6:	bc30      	pop	{r4, r5}
 80172a8:	4770      	bx	lr
 80172aa:	4804      	ldr	r0, [pc, #16]	@ (80172bc <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80172ac:	4770      	bx	lr
 80172ae:	bf00      	nop
 80172b0:	200104c0 	.word	0x200104c0
 80172b4:	0801cb20 	.word	0x0801cb20
 80172b8:	2001049c 	.word	0x2001049c
 80172bc:	0801cb14 	.word	0x0801cb14

080172c0 <builtin_interfaces__msg__Time__init>:
 80172c0:	3800      	subs	r0, #0
 80172c2:	bf18      	it	ne
 80172c4:	2001      	movne	r0, #1
 80172c6:	4770      	bx	lr

080172c8 <builtin_interfaces__msg__Time__fini>:
 80172c8:	4770      	bx	lr
 80172ca:	bf00      	nop

080172cc <geometry_msgs__msg__Point__get_type_hash>:
 80172cc:	4800      	ldr	r0, [pc, #0]	@ (80172d0 <geometry_msgs__msg__Point__get_type_hash+0x4>)
 80172ce:	4770      	bx	lr
 80172d0:	20001508 	.word	0x20001508

080172d4 <geometry_msgs__msg__Point__get_type_description>:
 80172d4:	4b03      	ldr	r3, [pc, #12]	@ (80172e4 <geometry_msgs__msg__Point__get_type_description+0x10>)
 80172d6:	781a      	ldrb	r2, [r3, #0]
 80172d8:	b90a      	cbnz	r2, 80172de <geometry_msgs__msg__Point__get_type_description+0xa>
 80172da:	2201      	movs	r2, #1
 80172dc:	701a      	strb	r2, [r3, #0]
 80172de:	4802      	ldr	r0, [pc, #8]	@ (80172e8 <geometry_msgs__msg__Point__get_type_description+0x14>)
 80172e0:	4770      	bx	lr
 80172e2:	bf00      	nop
 80172e4:	200104e9 	.word	0x200104e9
 80172e8:	0801cb98 	.word	0x0801cb98

080172ec <geometry_msgs__msg__Point__get_individual_type_description_source>:
 80172ec:	4800      	ldr	r0, [pc, #0]	@ (80172f0 <geometry_msgs__msg__Point__get_individual_type_description_source+0x4>)
 80172ee:	4770      	bx	lr
 80172f0:	0801cb74 	.word	0x0801cb74

080172f4 <geometry_msgs__msg__Point__get_type_description_sources>:
 80172f4:	4b09      	ldr	r3, [pc, #36]	@ (801731c <geometry_msgs__msg__Point__get_type_description_sources+0x28>)
 80172f6:	781a      	ldrb	r2, [r3, #0]
 80172f8:	b96a      	cbnz	r2, 8017316 <geometry_msgs__msg__Point__get_type_description_sources+0x22>
 80172fa:	b430      	push	{r4, r5}
 80172fc:	4d08      	ldr	r5, [pc, #32]	@ (8017320 <geometry_msgs__msg__Point__get_type_description_sources+0x2c>)
 80172fe:	4c09      	ldr	r4, [pc, #36]	@ (8017324 <geometry_msgs__msg__Point__get_type_description_sources+0x30>)
 8017300:	2201      	movs	r2, #1
 8017302:	701a      	strb	r2, [r3, #0]
 8017304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801730a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801730c:	682b      	ldr	r3, [r5, #0]
 801730e:	4806      	ldr	r0, [pc, #24]	@ (8017328 <geometry_msgs__msg__Point__get_type_description_sources+0x34>)
 8017310:	6023      	str	r3, [r4, #0]
 8017312:	bc30      	pop	{r4, r5}
 8017314:	4770      	bx	lr
 8017316:	4804      	ldr	r0, [pc, #16]	@ (8017328 <geometry_msgs__msg__Point__get_type_description_sources+0x34>)
 8017318:	4770      	bx	lr
 801731a:	bf00      	nop
 801731c:	200104e8 	.word	0x200104e8
 8017320:	0801cb74 	.word	0x0801cb74
 8017324:	200104c4 	.word	0x200104c4
 8017328:	0801cb68 	.word	0x0801cb68

0801732c <geometry_msgs__msg__Pose__get_type_hash>:
 801732c:	4800      	ldr	r0, [pc, #0]	@ (8017330 <geometry_msgs__msg__Pose__get_type_hash+0x4>)
 801732e:	4770      	bx	lr
 8017330:	20001684 	.word	0x20001684

08017334 <geometry_msgs__msg__Pose__get_type_description>:
 8017334:	b570      	push	{r4, r5, r6, lr}
 8017336:	4e0c      	ldr	r6, [pc, #48]	@ (8017368 <geometry_msgs__msg__Pose__get_type_description+0x34>)
 8017338:	7835      	ldrb	r5, [r6, #0]
 801733a:	b10d      	cbz	r5, 8017340 <geometry_msgs__msg__Pose__get_type_description+0xc>
 801733c:	480b      	ldr	r0, [pc, #44]	@ (801736c <geometry_msgs__msg__Pose__get_type_description+0x38>)
 801733e:	bd70      	pop	{r4, r5, r6, pc}
 8017340:	4628      	mov	r0, r5
 8017342:	f7ff ffc7 	bl	80172d4 <geometry_msgs__msg__Point__get_type_description>
 8017346:	300c      	adds	r0, #12
 8017348:	c807      	ldmia	r0, {r0, r1, r2}
 801734a:	4c09      	ldr	r4, [pc, #36]	@ (8017370 <geometry_msgs__msg__Pose__get_type_description+0x3c>)
 801734c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017350:	4628      	mov	r0, r5
 8017352:	f000 f8d9 	bl	8017508 <geometry_msgs__msg__Quaternion__get_type_description>
 8017356:	300c      	adds	r0, #12
 8017358:	c807      	ldmia	r0, {r0, r1, r2}
 801735a:	3418      	adds	r4, #24
 801735c:	2301      	movs	r3, #1
 801735e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017362:	7033      	strb	r3, [r6, #0]
 8017364:	4801      	ldr	r0, [pc, #4]	@ (801736c <geometry_msgs__msg__Pose__get_type_description+0x38>)
 8017366:	bd70      	pop	{r4, r5, r6, pc}
 8017368:	20010559 	.word	0x20010559
 801736c:	0801cbec 	.word	0x0801cbec
 8017370:	20001730 	.word	0x20001730

08017374 <geometry_msgs__msg__Pose__get_individual_type_description_source>:
 8017374:	4800      	ldr	r0, [pc, #0]	@ (8017378 <geometry_msgs__msg__Pose__get_individual_type_description_source+0x4>)
 8017376:	4770      	bx	lr
 8017378:	0801cbc8 	.word	0x0801cbc8

0801737c <geometry_msgs__msg__Pose__get_type_description_sources>:
 801737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801737e:	4e17      	ldr	r6, [pc, #92]	@ (80173dc <geometry_msgs__msg__Pose__get_type_description_sources+0x60>)
 8017380:	7837      	ldrb	r7, [r6, #0]
 8017382:	b10f      	cbz	r7, 8017388 <geometry_msgs__msg__Pose__get_type_description_sources+0xc>
 8017384:	4816      	ldr	r0, [pc, #88]	@ (80173e0 <geometry_msgs__msg__Pose__get_type_description_sources+0x64>)
 8017386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017388:	4d16      	ldr	r5, [pc, #88]	@ (80173e4 <geometry_msgs__msg__Pose__get_type_description_sources+0x68>)
 801738a:	4c17      	ldr	r4, [pc, #92]	@ (80173e8 <geometry_msgs__msg__Pose__get_type_description_sources+0x6c>)
 801738c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801738e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017394:	682b      	ldr	r3, [r5, #0]
 8017396:	4625      	mov	r5, r4
 8017398:	4638      	mov	r0, r7
 801739a:	f845 3b04 	str.w	r3, [r5], #4
 801739e:	f7ff ffa5 	bl	80172ec <geometry_msgs__msg__Point__get_individual_type_description_source>
 80173a2:	4684      	mov	ip, r0
 80173a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80173aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80173b0:	4638      	mov	r0, r7
 80173b2:	f8dc 3000 	ldr.w	r3, [ip]
 80173b6:	602b      	str	r3, [r5, #0]
 80173b8:	f000 f8b2 	bl	8017520 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 80173bc:	2301      	movs	r3, #1
 80173be:	4684      	mov	ip, r0
 80173c0:	7033      	strb	r3, [r6, #0]
 80173c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173c6:	3428      	adds	r4, #40	@ 0x28
 80173c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173d0:	f8dc 3000 	ldr.w	r3, [ip]
 80173d4:	4802      	ldr	r0, [pc, #8]	@ (80173e0 <geometry_msgs__msg__Pose__get_type_description_sources+0x64>)
 80173d6:	6023      	str	r3, [r4, #0]
 80173d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173da:	bf00      	nop
 80173dc:	20010558 	.word	0x20010558
 80173e0:	0801cbbc 	.word	0x0801cbbc
 80173e4:	0801cbc8 	.word	0x0801cbc8
 80173e8:	200104ec 	.word	0x200104ec

080173ec <geometry_msgs__msg__PoseWithCovariance__get_type_hash>:
 80173ec:	4800      	ldr	r0, [pc, #0]	@ (80173f0 <geometry_msgs__msg__PoseWithCovariance__get_type_hash+0x4>)
 80173ee:	4770      	bx	lr
 80173f0:	20001850 	.word	0x20001850

080173f4 <geometry_msgs__msg__PoseWithCovariance__get_type_description>:
 80173f4:	b570      	push	{r4, r5, r6, lr}
 80173f6:	4e11      	ldr	r6, [pc, #68]	@ (801743c <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x48>)
 80173f8:	7835      	ldrb	r5, [r6, #0]
 80173fa:	b10d      	cbz	r5, 8017400 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xc>
 80173fc:	4810      	ldr	r0, [pc, #64]	@ (8017440 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x4c>)
 80173fe:	bd70      	pop	{r4, r5, r6, pc}
 8017400:	4628      	mov	r0, r5
 8017402:	f7ff ff67 	bl	80172d4 <geometry_msgs__msg__Point__get_type_description>
 8017406:	300c      	adds	r0, #12
 8017408:	c807      	ldmia	r0, {r0, r1, r2}
 801740a:	4c0e      	ldr	r4, [pc, #56]	@ (8017444 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x50>)
 801740c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017410:	4628      	mov	r0, r5
 8017412:	f7ff ff8f 	bl	8017334 <geometry_msgs__msg__Pose__get_type_description>
 8017416:	300c      	adds	r0, #12
 8017418:	c807      	ldmia	r0, {r0, r1, r2}
 801741a:	f104 0318 	add.w	r3, r4, #24
 801741e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017422:	4628      	mov	r0, r5
 8017424:	f000 f870 	bl	8017508 <geometry_msgs__msg__Quaternion__get_type_description>
 8017428:	300c      	adds	r0, #12
 801742a:	c807      	ldmia	r0, {r0, r1, r2}
 801742c:	3430      	adds	r4, #48	@ 0x30
 801742e:	2301      	movs	r3, #1
 8017430:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017434:	7033      	strb	r3, [r6, #0]
 8017436:	4802      	ldr	r0, [pc, #8]	@ (8017440 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x4c>)
 8017438:	bd70      	pop	{r4, r5, r6, pc}
 801743a:	bf00      	nop
 801743c:	200105ed 	.word	0x200105ed
 8017440:	0801cc40 	.word	0x0801cc40
 8017444:	200019c8 	.word	0x200019c8

08017448 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>:
 8017448:	4800      	ldr	r0, [pc, #0]	@ (801744c <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source+0x4>)
 801744a:	4770      	bx	lr
 801744c:	0801cc1c 	.word	0x0801cc1c

08017450 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources>:
 8017450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017452:	4e1e      	ldr	r6, [pc, #120]	@ (80174cc <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x7c>)
 8017454:	7837      	ldrb	r7, [r6, #0]
 8017456:	b10f      	cbz	r7, 801745c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0xc>
 8017458:	481d      	ldr	r0, [pc, #116]	@ (80174d0 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x80>)
 801745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801745c:	4d1d      	ldr	r5, [pc, #116]	@ (80174d4 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x84>)
 801745e:	4c1e      	ldr	r4, [pc, #120]	@ (80174d8 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x88>)
 8017460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017468:	682b      	ldr	r3, [r5, #0]
 801746a:	4625      	mov	r5, r4
 801746c:	4638      	mov	r0, r7
 801746e:	f845 3b04 	str.w	r3, [r5], #4
 8017472:	f7ff ff3b 	bl	80172ec <geometry_msgs__msg__Point__get_individual_type_description_source>
 8017476:	4684      	mov	ip, r0
 8017478:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801747c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801747e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017484:	4638      	mov	r0, r7
 8017486:	f8dc 3000 	ldr.w	r3, [ip]
 801748a:	602b      	str	r3, [r5, #0]
 801748c:	f7ff ff72 	bl	8017374 <geometry_msgs__msg__Pose__get_individual_type_description_source>
 8017490:	4684      	mov	ip, r0
 8017492:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017496:	f104 0528 	add.w	r5, r4, #40	@ 0x28
 801749a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801749c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80174a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80174a2:	4638      	mov	r0, r7
 80174a4:	f8dc 3000 	ldr.w	r3, [ip]
 80174a8:	602b      	str	r3, [r5, #0]
 80174aa:	f000 f839 	bl	8017520 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 80174ae:	2301      	movs	r3, #1
 80174b0:	4684      	mov	ip, r0
 80174b2:	7033      	strb	r3, [r6, #0]
 80174b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80174b8:	344c      	adds	r4, #76	@ 0x4c
 80174ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80174bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80174c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80174c2:	f8dc 3000 	ldr.w	r3, [ip]
 80174c6:	4802      	ldr	r0, [pc, #8]	@ (80174d0 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x80>)
 80174c8:	6023      	str	r3, [r4, #0]
 80174ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174cc:	200105ec 	.word	0x200105ec
 80174d0:	0801cc10 	.word	0x0801cc10
 80174d4:	0801cc1c 	.word	0x0801cc1c
 80174d8:	2001055c 	.word	0x2001055c

080174dc <geometry_msgs__msg__PoseWithCovariance__init>:
 80174dc:	b150      	cbz	r0, 80174f4 <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 80174de:	b510      	push	{r4, lr}
 80174e0:	4604      	mov	r4, r0
 80174e2:	f001 ff5f 	bl	80193a4 <geometry_msgs__msg__Pose__init>
 80174e6:	b100      	cbz	r0, 80174ea <geometry_msgs__msg__PoseWithCovariance__init+0xe>
 80174e8:	bd10      	pop	{r4, pc}
 80174ea:	4620      	mov	r0, r4
 80174ec:	f001 ff7a 	bl	80193e4 <geometry_msgs__msg__Pose__fini>
 80174f0:	2000      	movs	r0, #0
 80174f2:	bd10      	pop	{r4, pc}
 80174f4:	2000      	movs	r0, #0
 80174f6:	4770      	bx	lr

080174f8 <geometry_msgs__msg__PoseWithCovariance__fini>:
 80174f8:	b108      	cbz	r0, 80174fe <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 80174fa:	f001 bf73 	b.w	80193e4 <geometry_msgs__msg__Pose__fini>
 80174fe:	4770      	bx	lr

08017500 <geometry_msgs__msg__Quaternion__get_type_hash>:
 8017500:	4800      	ldr	r0, [pc, #0]	@ (8017504 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 8017502:	4770      	bx	lr
 8017504:	20001b24 	.word	0x20001b24

08017508 <geometry_msgs__msg__Quaternion__get_type_description>:
 8017508:	4b03      	ldr	r3, [pc, #12]	@ (8017518 <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 801750a:	781a      	ldrb	r2, [r3, #0]
 801750c:	b90a      	cbnz	r2, 8017512 <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 801750e:	2201      	movs	r2, #1
 8017510:	701a      	strb	r2, [r3, #0]
 8017512:	4802      	ldr	r0, [pc, #8]	@ (801751c <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 8017514:	4770      	bx	lr
 8017516:	bf00      	nop
 8017518:	20010615 	.word	0x20010615
 801751c:	0801cc94 	.word	0x0801cc94

08017520 <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 8017520:	4800      	ldr	r0, [pc, #0]	@ (8017524 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 8017522:	4770      	bx	lr
 8017524:	0801cc70 	.word	0x0801cc70

08017528 <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 8017528:	4b09      	ldr	r3, [pc, #36]	@ (8017550 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 801752a:	781a      	ldrb	r2, [r3, #0]
 801752c:	b96a      	cbnz	r2, 801754a <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 801752e:	b430      	push	{r4, r5}
 8017530:	4d08      	ldr	r5, [pc, #32]	@ (8017554 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 8017532:	4c09      	ldr	r4, [pc, #36]	@ (8017558 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 8017534:	2201      	movs	r2, #1
 8017536:	701a      	strb	r2, [r3, #0]
 8017538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801753a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801753c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801753e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017540:	682b      	ldr	r3, [r5, #0]
 8017542:	4806      	ldr	r0, [pc, #24]	@ (801755c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8017544:	6023      	str	r3, [r4, #0]
 8017546:	bc30      	pop	{r4, r5}
 8017548:	4770      	bx	lr
 801754a:	4804      	ldr	r0, [pc, #16]	@ (801755c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop
 8017550:	20010614 	.word	0x20010614
 8017554:	0801cc70 	.word	0x0801cc70
 8017558:	200105f0 	.word	0x200105f0
 801755c:	0801cc64 	.word	0x0801cc64

08017560 <geometry_msgs__msg__TwistWithCovariance__get_type_hash>:
 8017560:	4800      	ldr	r0, [pc, #0]	@ (8017564 <geometry_msgs__msg__TwistWithCovariance__get_type_hash+0x4>)
 8017562:	4770      	bx	lr
 8017564:	20001d20 	.word	0x20001d20

08017568 <geometry_msgs__msg__TwistWithCovariance__get_type_description>:
 8017568:	b570      	push	{r4, r5, r6, lr}
 801756a:	4e0c      	ldr	r6, [pc, #48]	@ (801759c <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x34>)
 801756c:	7835      	ldrb	r5, [r6, #0]
 801756e:	b10d      	cbz	r5, 8017574 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xc>
 8017570:	480b      	ldr	r0, [pc, #44]	@ (80175a0 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x38>)
 8017572:	bd70      	pop	{r4, r5, r6, pc}
 8017574:	4628      	mov	r0, r5
 8017576:	f7f6 fd9d 	bl	800e0b4 <geometry_msgs__msg__Twist__get_type_description>
 801757a:	300c      	adds	r0, #12
 801757c:	c807      	ldmia	r0, {r0, r1, r2}
 801757e:	4c09      	ldr	r4, [pc, #36]	@ (80175a4 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x3c>)
 8017580:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017584:	4628      	mov	r0, r5
 8017586:	f7f6 fe09 	bl	800e19c <geometry_msgs__msg__Vector3__get_type_description>
 801758a:	300c      	adds	r0, #12
 801758c:	c807      	ldmia	r0, {r0, r1, r2}
 801758e:	3418      	adds	r4, #24
 8017590:	2301      	movs	r3, #1
 8017592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017596:	7033      	strb	r3, [r6, #0]
 8017598:	4801      	ldr	r0, [pc, #4]	@ (80175a0 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x38>)
 801759a:	bd70      	pop	{r4, r5, r6, pc}
 801759c:	20010685 	.word	0x20010685
 80175a0:	0801cce8 	.word	0x0801cce8
 80175a4:	20001e9c 	.word	0x20001e9c

080175a8 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>:
 80175a8:	4800      	ldr	r0, [pc, #0]	@ (80175ac <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source+0x4>)
 80175aa:	4770      	bx	lr
 80175ac:	0801ccc4 	.word	0x0801ccc4

080175b0 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources>:
 80175b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175b2:	4e17      	ldr	r6, [pc, #92]	@ (8017610 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x60>)
 80175b4:	7837      	ldrb	r7, [r6, #0]
 80175b6:	b10f      	cbz	r7, 80175bc <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0xc>
 80175b8:	4816      	ldr	r0, [pc, #88]	@ (8017614 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x64>)
 80175ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175bc:	4d16      	ldr	r5, [pc, #88]	@ (8017618 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x68>)
 80175be:	4c17      	ldr	r4, [pc, #92]	@ (801761c <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x6c>)
 80175c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80175c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80175c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80175c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80175c8:	682b      	ldr	r3, [r5, #0]
 80175ca:	4625      	mov	r5, r4
 80175cc:	4638      	mov	r0, r7
 80175ce:	f845 3b04 	str.w	r3, [r5], #4
 80175d2:	f7f6 fd87 	bl	800e0e4 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 80175d6:	4684      	mov	ip, r0
 80175d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80175dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80175de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80175e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80175e4:	4638      	mov	r0, r7
 80175e6:	f8dc 3000 	ldr.w	r3, [ip]
 80175ea:	602b      	str	r3, [r5, #0]
 80175ec:	f7f6 fde2 	bl	800e1b4 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 80175f0:	2301      	movs	r3, #1
 80175f2:	4684      	mov	ip, r0
 80175f4:	7033      	strb	r3, [r6, #0]
 80175f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80175fa:	3428      	adds	r4, #40	@ 0x28
 80175fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80175fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017604:	f8dc 3000 	ldr.w	r3, [ip]
 8017608:	4802      	ldr	r0, [pc, #8]	@ (8017614 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x64>)
 801760a:	6023      	str	r3, [r4, #0]
 801760c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801760e:	bf00      	nop
 8017610:	20010684 	.word	0x20010684
 8017614:	0801ccb8 	.word	0x0801ccb8
 8017618:	0801ccc4 	.word	0x0801ccc4
 801761c:	20010618 	.word	0x20010618

08017620 <geometry_msgs__msg__TwistWithCovariance__init>:
 8017620:	b150      	cbz	r0, 8017638 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 8017622:	b510      	push	{r4, lr}
 8017624:	4604      	mov	r4, r0
 8017626:	f7f6 fd89 	bl	800e13c <geometry_msgs__msg__Twist__init>
 801762a:	b100      	cbz	r0, 801762e <geometry_msgs__msg__TwistWithCovariance__init+0xe>
 801762c:	bd10      	pop	{r4, pc}
 801762e:	4620      	mov	r0, r4
 8017630:	f7f6 fda4 	bl	800e17c <geometry_msgs__msg__Twist__fini>
 8017634:	2000      	movs	r0, #0
 8017636:	bd10      	pop	{r4, pc}
 8017638:	2000      	movs	r0, #0
 801763a:	4770      	bx	lr

0801763c <geometry_msgs__msg__TwistWithCovariance__fini>:
 801763c:	b108      	cbz	r0, 8017642 <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 801763e:	f7f6 bd9d 	b.w	800e17c <geometry_msgs__msg__Twist__fini>
 8017642:	4770      	bx	lr

08017644 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 8017644:	f001 beae 	b.w	80193a4 <geometry_msgs__msg__Pose__init>

08017648 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 8017648:	f001 becc 	b.w	80193e4 <geometry_msgs__msg__Pose__fini>

0801764c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 801764c:	b510      	push	{r4, lr}
 801764e:	f001 fef1 	bl	8019434 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8017652:	4c07      	ldr	r4, [pc, #28]	@ (8017670 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 8017654:	60e0      	str	r0, [r4, #12]
 8017656:	f000 f815 	bl	8017684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 801765a:	4b06      	ldr	r3, [pc, #24]	@ (8017674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 801765c:	64a0      	str	r0, [r4, #72]	@ 0x48
 801765e:	681a      	ldr	r2, [r3, #0]
 8017660:	b10a      	cbz	r2, 8017666 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 8017662:	4804      	ldr	r0, [pc, #16]	@ (8017674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8017664:	bd10      	pop	{r4, pc}
 8017666:	4a04      	ldr	r2, [pc, #16]	@ (8017678 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 8017668:	4802      	ldr	r0, [pc, #8]	@ (8017674 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 801766a:	6812      	ldr	r2, [r2, #0]
 801766c:	601a      	str	r2, [r3, #0]
 801766e:	bd10      	pop	{r4, pc}
 8017670:	20001fd8 	.word	0x20001fd8
 8017674:	20001fc0 	.word	0x20001fc0
 8017678:	20000374 	.word	0x20000374

0801767c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 801767c:	f001 bec0 	b.w	8019400 <geometry_msgs__msg__Quaternion__init>

08017680 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8017680:	f001 bed2 	b.w	8019428 <geometry_msgs__msg__Quaternion__fini>

08017684 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8017684:	4b04      	ldr	r3, [pc, #16]	@ (8017698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8017686:	681a      	ldr	r2, [r3, #0]
 8017688:	b10a      	cbz	r2, 801768e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 801768a:	4803      	ldr	r0, [pc, #12]	@ (8017698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801768c:	4770      	bx	lr
 801768e:	4a03      	ldr	r2, [pc, #12]	@ (801769c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8017690:	4801      	ldr	r0, [pc, #4]	@ (8017698 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8017692:	6812      	ldr	r2, [r2, #0]
 8017694:	601a      	str	r2, [r3, #0]
 8017696:	4770      	bx	lr
 8017698:	20002050 	.word	0x20002050
 801769c:	20000374 	.word	0x20000374

080176a0 <get_serialized_size_geometry_msgs__msg__Pose>:
 80176a0:	b570      	push	{r4, r5, r6, lr}
 80176a2:	4604      	mov	r4, r0
 80176a4:	b148      	cbz	r0, 80176ba <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 80176a6:	460d      	mov	r5, r1
 80176a8:	f001 fed2 	bl	8019450 <get_serialized_size_geometry_msgs__msg__Point>
 80176ac:	4606      	mov	r6, r0
 80176ae:	1829      	adds	r1, r5, r0
 80176b0:	f104 0018 	add.w	r0, r4, #24
 80176b4:	f000 f864 	bl	8017780 <get_serialized_size_geometry_msgs__msg__Quaternion>
 80176b8:	4430      	add	r0, r6
 80176ba:	bd70      	pop	{r4, r5, r6, pc}

080176bc <_Pose__cdr_deserialize>:
 80176bc:	b570      	push	{r4, r5, r6, lr}
 80176be:	460c      	mov	r4, r1
 80176c0:	b189      	cbz	r1, 80176e6 <_Pose__cdr_deserialize+0x2a>
 80176c2:	4605      	mov	r5, r0
 80176c4:	f001 ff50 	bl	8019568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80176c8:	6843      	ldr	r3, [r0, #4]
 80176ca:	4621      	mov	r1, r4
 80176cc:	68db      	ldr	r3, [r3, #12]
 80176ce:	4628      	mov	r0, r5
 80176d0:	4798      	blx	r3
 80176d2:	f000 f909 	bl	80178e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80176d6:	6843      	ldr	r3, [r0, #4]
 80176d8:	f104 0118 	add.w	r1, r4, #24
 80176dc:	4628      	mov	r0, r5
 80176de:	68db      	ldr	r3, [r3, #12]
 80176e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176e4:	4718      	bx	r3
 80176e6:	4608      	mov	r0, r1
 80176e8:	bd70      	pop	{r4, r5, r6, pc}
 80176ea:	bf00      	nop

080176ec <_Pose__cdr_serialize>:
 80176ec:	b198      	cbz	r0, 8017716 <_Pose__cdr_serialize+0x2a>
 80176ee:	b570      	push	{r4, r5, r6, lr}
 80176f0:	460d      	mov	r5, r1
 80176f2:	4604      	mov	r4, r0
 80176f4:	f001 ff38 	bl	8019568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80176f8:	6843      	ldr	r3, [r0, #4]
 80176fa:	4629      	mov	r1, r5
 80176fc:	689b      	ldr	r3, [r3, #8]
 80176fe:	4620      	mov	r0, r4
 8017700:	4798      	blx	r3
 8017702:	f000 f8f1 	bl	80178e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8017706:	6843      	ldr	r3, [r0, #4]
 8017708:	4629      	mov	r1, r5
 801770a:	f104 0018 	add.w	r0, r4, #24
 801770e:	689b      	ldr	r3, [r3, #8]
 8017710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017714:	4718      	bx	r3
 8017716:	4770      	bx	lr

08017718 <_Pose__get_serialized_size>:
 8017718:	b538      	push	{r3, r4, r5, lr}
 801771a:	4604      	mov	r4, r0
 801771c:	b148      	cbz	r0, 8017732 <_Pose__get_serialized_size+0x1a>
 801771e:	2100      	movs	r1, #0
 8017720:	f001 fe96 	bl	8019450 <get_serialized_size_geometry_msgs__msg__Point>
 8017724:	4605      	mov	r5, r0
 8017726:	4601      	mov	r1, r0
 8017728:	f104 0018 	add.w	r0, r4, #24
 801772c:	f000 f828 	bl	8017780 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8017730:	4428      	add	r0, r5
 8017732:	bd38      	pop	{r3, r4, r5, pc}

08017734 <_Pose__max_serialized_size>:
 8017734:	b510      	push	{r4, lr}
 8017736:	b082      	sub	sp, #8
 8017738:	2301      	movs	r3, #1
 801773a:	2100      	movs	r1, #0
 801773c:	f10d 0007 	add.w	r0, sp, #7
 8017740:	f88d 3007 	strb.w	r3, [sp, #7]
 8017744:	f001 fef6 	bl	8019534 <max_serialized_size_geometry_msgs__msg__Point>
 8017748:	4604      	mov	r4, r0
 801774a:	4601      	mov	r1, r0
 801774c:	f10d 0007 	add.w	r0, sp, #7
 8017750:	f000 f8a8 	bl	80178a4 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8017754:	4420      	add	r0, r4
 8017756:	b002      	add	sp, #8
 8017758:	bd10      	pop	{r4, pc}
 801775a:	bf00      	nop

0801775c <max_serialized_size_geometry_msgs__msg__Pose>:
 801775c:	2301      	movs	r3, #1
 801775e:	b570      	push	{r4, r5, r6, lr}
 8017760:	7003      	strb	r3, [r0, #0]
 8017762:	4605      	mov	r5, r0
 8017764:	460e      	mov	r6, r1
 8017766:	f001 fee5 	bl	8019534 <max_serialized_size_geometry_msgs__msg__Point>
 801776a:	4604      	mov	r4, r0
 801776c:	1831      	adds	r1, r6, r0
 801776e:	4628      	mov	r0, r5
 8017770:	f000 f898 	bl	80178a4 <max_serialized_size_geometry_msgs__msg__Quaternion>
 8017774:	4420      	add	r0, r4
 8017776:	bd70      	pop	{r4, r5, r6, pc}

08017778 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8017778:	4800      	ldr	r0, [pc, #0]	@ (801777c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 801777a:	4770      	bx	lr
 801777c:	20002158 	.word	0x20002158

08017780 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8017780:	b1f0      	cbz	r0, 80177c0 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8017782:	b570      	push	{r4, r5, r6, lr}
 8017784:	460d      	mov	r5, r1
 8017786:	4628      	mov	r0, r5
 8017788:	2108      	movs	r1, #8
 801778a:	f7f4 fa95 	bl	800bcb8 <ucdr_alignment>
 801778e:	2108      	movs	r1, #8
 8017790:	186c      	adds	r4, r5, r1
 8017792:	4404      	add	r4, r0
 8017794:	4620      	mov	r0, r4
 8017796:	f7f4 fa8f 	bl	800bcb8 <ucdr_alignment>
 801779a:	f100 0608 	add.w	r6, r0, #8
 801779e:	4426      	add	r6, r4
 80177a0:	2108      	movs	r1, #8
 80177a2:	4630      	mov	r0, r6
 80177a4:	f7f4 fa88 	bl	800bcb8 <ucdr_alignment>
 80177a8:	f100 0408 	add.w	r4, r0, #8
 80177ac:	4434      	add	r4, r6
 80177ae:	2108      	movs	r1, #8
 80177b0:	4620      	mov	r0, r4
 80177b2:	f7f4 fa81 	bl	800bcb8 <ucdr_alignment>
 80177b6:	f1c5 0508 	rsb	r5, r5, #8
 80177ba:	4405      	add	r5, r0
 80177bc:	1928      	adds	r0, r5, r4
 80177be:	bd70      	pop	{r4, r5, r6, pc}
 80177c0:	4770      	bx	lr
 80177c2:	bf00      	nop

080177c4 <_Quaternion__cdr_deserialize>:
 80177c4:	b538      	push	{r3, r4, r5, lr}
 80177c6:	460c      	mov	r4, r1
 80177c8:	b199      	cbz	r1, 80177f2 <_Quaternion__cdr_deserialize+0x2e>
 80177ca:	4605      	mov	r5, r0
 80177cc:	f7f4 f896 	bl	800b8fc <ucdr_deserialize_double>
 80177d0:	f104 0108 	add.w	r1, r4, #8
 80177d4:	4628      	mov	r0, r5
 80177d6:	f7f4 f891 	bl	800b8fc <ucdr_deserialize_double>
 80177da:	f104 0110 	add.w	r1, r4, #16
 80177de:	4628      	mov	r0, r5
 80177e0:	f7f4 f88c 	bl	800b8fc <ucdr_deserialize_double>
 80177e4:	f104 0118 	add.w	r1, r4, #24
 80177e8:	4628      	mov	r0, r5
 80177ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80177ee:	f7f4 b885 	b.w	800b8fc <ucdr_deserialize_double>
 80177f2:	4608      	mov	r0, r1
 80177f4:	bd38      	pop	{r3, r4, r5, pc}
 80177f6:	bf00      	nop

080177f8 <_Quaternion__cdr_serialize>:
 80177f8:	b1c0      	cbz	r0, 801782c <_Quaternion__cdr_serialize+0x34>
 80177fa:	b538      	push	{r3, r4, r5, lr}
 80177fc:	ed90 0b00 	vldr	d0, [r0]
 8017800:	460d      	mov	r5, r1
 8017802:	4604      	mov	r4, r0
 8017804:	4608      	mov	r0, r1
 8017806:	f7f3 fee9 	bl	800b5dc <ucdr_serialize_double>
 801780a:	ed94 0b02 	vldr	d0, [r4, #8]
 801780e:	4628      	mov	r0, r5
 8017810:	f7f3 fee4 	bl	800b5dc <ucdr_serialize_double>
 8017814:	ed94 0b04 	vldr	d0, [r4, #16]
 8017818:	4628      	mov	r0, r5
 801781a:	f7f3 fedf 	bl	800b5dc <ucdr_serialize_double>
 801781e:	ed94 0b06 	vldr	d0, [r4, #24]
 8017822:	4628      	mov	r0, r5
 8017824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017828:	f7f3 bed8 	b.w	800b5dc <ucdr_serialize_double>
 801782c:	4770      	bx	lr
 801782e:	bf00      	nop

08017830 <_Quaternion__get_serialized_size>:
 8017830:	b1d8      	cbz	r0, 801786a <_Quaternion__get_serialized_size+0x3a>
 8017832:	b538      	push	{r3, r4, r5, lr}
 8017834:	2108      	movs	r1, #8
 8017836:	2000      	movs	r0, #0
 8017838:	f7f4 fa3e 	bl	800bcb8 <ucdr_alignment>
 801783c:	f100 0408 	add.w	r4, r0, #8
 8017840:	2108      	movs	r1, #8
 8017842:	4620      	mov	r0, r4
 8017844:	f7f4 fa38 	bl	800bcb8 <ucdr_alignment>
 8017848:	f100 0508 	add.w	r5, r0, #8
 801784c:	4425      	add	r5, r4
 801784e:	2108      	movs	r1, #8
 8017850:	4628      	mov	r0, r5
 8017852:	f7f4 fa31 	bl	800bcb8 <ucdr_alignment>
 8017856:	f100 0408 	add.w	r4, r0, #8
 801785a:	442c      	add	r4, r5
 801785c:	2108      	movs	r1, #8
 801785e:	4620      	mov	r0, r4
 8017860:	f7f4 fa2a 	bl	800bcb8 <ucdr_alignment>
 8017864:	3008      	adds	r0, #8
 8017866:	4420      	add	r0, r4
 8017868:	bd38      	pop	{r3, r4, r5, pc}
 801786a:	4770      	bx	lr

0801786c <_Quaternion__max_serialized_size>:
 801786c:	b538      	push	{r3, r4, r5, lr}
 801786e:	2108      	movs	r1, #8
 8017870:	2000      	movs	r0, #0
 8017872:	f7f4 fa21 	bl	800bcb8 <ucdr_alignment>
 8017876:	f100 0408 	add.w	r4, r0, #8
 801787a:	2108      	movs	r1, #8
 801787c:	4620      	mov	r0, r4
 801787e:	f7f4 fa1b 	bl	800bcb8 <ucdr_alignment>
 8017882:	f100 0508 	add.w	r5, r0, #8
 8017886:	4425      	add	r5, r4
 8017888:	2108      	movs	r1, #8
 801788a:	4628      	mov	r0, r5
 801788c:	f7f4 fa14 	bl	800bcb8 <ucdr_alignment>
 8017890:	f100 0408 	add.w	r4, r0, #8
 8017894:	442c      	add	r4, r5
 8017896:	2108      	movs	r1, #8
 8017898:	4620      	mov	r0, r4
 801789a:	f7f4 fa0d 	bl	800bcb8 <ucdr_alignment>
 801789e:	3008      	adds	r0, #8
 80178a0:	4420      	add	r0, r4
 80178a2:	bd38      	pop	{r3, r4, r5, pc}

080178a4 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 80178a4:	b570      	push	{r4, r5, r6, lr}
 80178a6:	2301      	movs	r3, #1
 80178a8:	460c      	mov	r4, r1
 80178aa:	7003      	strb	r3, [r0, #0]
 80178ac:	2108      	movs	r1, #8
 80178ae:	4620      	mov	r0, r4
 80178b0:	f7f4 fa02 	bl	800bcb8 <ucdr_alignment>
 80178b4:	2108      	movs	r1, #8
 80178b6:	1863      	adds	r3, r4, r1
 80178b8:	18c5      	adds	r5, r0, r3
 80178ba:	4628      	mov	r0, r5
 80178bc:	f7f4 f9fc 	bl	800bcb8 <ucdr_alignment>
 80178c0:	f100 0608 	add.w	r6, r0, #8
 80178c4:	442e      	add	r6, r5
 80178c6:	2108      	movs	r1, #8
 80178c8:	4630      	mov	r0, r6
 80178ca:	f7f4 f9f5 	bl	800bcb8 <ucdr_alignment>
 80178ce:	f100 0508 	add.w	r5, r0, #8
 80178d2:	4435      	add	r5, r6
 80178d4:	2108      	movs	r1, #8
 80178d6:	4628      	mov	r0, r5
 80178d8:	f7f4 f9ee 	bl	800bcb8 <ucdr_alignment>
 80178dc:	f1c4 0408 	rsb	r4, r4, #8
 80178e0:	4420      	add	r0, r4
 80178e2:	4428      	add	r0, r5
 80178e4:	bd70      	pop	{r4, r5, r6, pc}
 80178e6:	bf00      	nop

080178e8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 80178e8:	4800      	ldr	r0, [pc, #0]	@ (80178ec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 80178ea:	4770      	bx	lr
 80178ec:	2000218c 	.word	0x2000218c

080178f0 <ucdr_serialize_string>:
 80178f0:	b538      	push	{r3, r4, r5, lr}
 80178f2:	4605      	mov	r5, r0
 80178f4:	4608      	mov	r0, r1
 80178f6:	460c      	mov	r4, r1
 80178f8:	f7e8 fcea 	bl	80002d0 <strlen>
 80178fc:	4621      	mov	r1, r4
 80178fe:	1c42      	adds	r2, r0, #1
 8017900:	4628      	mov	r0, r5
 8017902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017906:	f7f6 bf99 	b.w	800e83c <ucdr_serialize_sequence_char>
 801790a:	bf00      	nop

0801790c <ucdr_deserialize_string>:
 801790c:	b500      	push	{lr}
 801790e:	b083      	sub	sp, #12
 8017910:	ab01      	add	r3, sp, #4
 8017912:	f7f6 ffa5 	bl	800e860 <ucdr_deserialize_sequence_char>
 8017916:	b003      	add	sp, #12
 8017918:	f85d fb04 	ldr.w	pc, [sp], #4

0801791c <uxr_init_input_best_effort_stream>:
 801791c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017920:	8003      	strh	r3, [r0, #0]
 8017922:	4770      	bx	lr

08017924 <uxr_reset_input_best_effort_stream>:
 8017924:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017928:	8003      	strh	r3, [r0, #0]
 801792a:	4770      	bx	lr

0801792c <uxr_receive_best_effort_message>:
 801792c:	b538      	push	{r3, r4, r5, lr}
 801792e:	4604      	mov	r4, r0
 8017930:	8800      	ldrh	r0, [r0, #0]
 8017932:	460d      	mov	r5, r1
 8017934:	f000 fe5e 	bl	80185f4 <uxr_seq_num_cmp>
 8017938:	4603      	mov	r3, r0
 801793a:	2b00      	cmp	r3, #0
 801793c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017940:	bfb8      	it	lt
 8017942:	8025      	strhlt	r5, [r4, #0]
 8017944:	bd38      	pop	{r3, r4, r5, pc}
 8017946:	bf00      	nop

08017948 <on_full_input_buffer>:
 8017948:	b570      	push	{r4, r5, r6, lr}
 801794a:	4605      	mov	r5, r0
 801794c:	460c      	mov	r4, r1
 801794e:	682b      	ldr	r3, [r5, #0]
 8017950:	6809      	ldr	r1, [r1, #0]
 8017952:	8920      	ldrh	r0, [r4, #8]
 8017954:	6862      	ldr	r2, [r4, #4]
 8017956:	fbb2 f2f0 	udiv	r2, r2, r0
 801795a:	1a5b      	subs	r3, r3, r1
 801795c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017960:	3301      	adds	r3, #1
 8017962:	b29b      	uxth	r3, r3
 8017964:	fbb3 f6f0 	udiv	r6, r3, r0
 8017968:	fb00 3316 	mls	r3, r0, r6, r3
 801796c:	b29b      	uxth	r3, r3
 801796e:	fb02 f303 	mul.w	r3, r2, r3
 8017972:	1d18      	adds	r0, r3, #4
 8017974:	4408      	add	r0, r1
 8017976:	7d26      	ldrb	r6, [r4, #20]
 8017978:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801797c:	b116      	cbz	r6, 8017984 <on_full_input_buffer+0x3c>
 801797e:	2600      	movs	r6, #0
 8017980:	f840 6c04 	str.w	r6, [r0, #-4]
 8017984:	2a03      	cmp	r2, #3
 8017986:	d801      	bhi.n	801798c <on_full_input_buffer+0x44>
 8017988:	2001      	movs	r0, #1
 801798a:	bd70      	pop	{r4, r5, r6, pc}
 801798c:	3308      	adds	r3, #8
 801798e:	4419      	add	r1, r3
 8017990:	4628      	mov	r0, r5
 8017992:	692b      	ldr	r3, [r5, #16]
 8017994:	3a04      	subs	r2, #4
 8017996:	f7f4 f983 	bl	800bca0 <ucdr_init_buffer_origin>
 801799a:	4628      	mov	r0, r5
 801799c:	4902      	ldr	r1, [pc, #8]	@ (80179a8 <on_full_input_buffer+0x60>)
 801799e:	4622      	mov	r2, r4
 80179a0:	f7f4 f95a 	bl	800bc58 <ucdr_set_on_full_buffer_callback>
 80179a4:	2000      	movs	r0, #0
 80179a6:	bd70      	pop	{r4, r5, r6, pc}
 80179a8:	08017949 	.word	0x08017949

080179ac <uxr_init_input_reliable_stream>:
 80179ac:	b500      	push	{lr}
 80179ae:	e9c0 1200 	strd	r1, r2, [r0]
 80179b2:	f04f 0e00 	mov.w	lr, #0
 80179b6:	9a01      	ldr	r2, [sp, #4]
 80179b8:	8103      	strh	r3, [r0, #8]
 80179ba:	6102      	str	r2, [r0, #16]
 80179bc:	f880 e014 	strb.w	lr, [r0, #20]
 80179c0:	b1d3      	cbz	r3, 80179f8 <uxr_init_input_reliable_stream+0x4c>
 80179c2:	f8c1 e000 	str.w	lr, [r1]
 80179c6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80179ca:	f1bc 0f01 	cmp.w	ip, #1
 80179ce:	d913      	bls.n	80179f8 <uxr_init_input_reliable_stream+0x4c>
 80179d0:	2301      	movs	r3, #1
 80179d2:	fbb3 f1fc 	udiv	r1, r3, ip
 80179d6:	fb0c 3111 	mls	r1, ip, r1, r3
 80179da:	b289      	uxth	r1, r1
 80179dc:	6842      	ldr	r2, [r0, #4]
 80179de:	fbb2 f2fc 	udiv	r2, r2, ip
 80179e2:	fb01 f202 	mul.w	r2, r1, r2
 80179e6:	6801      	ldr	r1, [r0, #0]
 80179e8:	f841 e002 	str.w	lr, [r1, r2]
 80179ec:	3301      	adds	r3, #1
 80179ee:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80179f2:	b29b      	uxth	r3, r3
 80179f4:	459c      	cmp	ip, r3
 80179f6:	d8ec      	bhi.n	80179d2 <uxr_init_input_reliable_stream+0x26>
 80179f8:	f04f 33ff 	mov.w	r3, #4294967295
 80179fc:	60c3      	str	r3, [r0, #12]
 80179fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a02:	bf00      	nop

08017a04 <uxr_reset_input_reliable_stream>:
 8017a04:	8901      	ldrh	r1, [r0, #8]
 8017a06:	b1e9      	cbz	r1, 8017a44 <uxr_reset_input_reliable_stream+0x40>
 8017a08:	f04f 0c00 	mov.w	ip, #0
 8017a0c:	b500      	push	{lr}
 8017a0e:	4663      	mov	r3, ip
 8017a10:	46e6      	mov	lr, ip
 8017a12:	fbb3 f2f1 	udiv	r2, r3, r1
 8017a16:	fb01 3312 	mls	r3, r1, r2, r3
 8017a1a:	b29b      	uxth	r3, r3
 8017a1c:	6842      	ldr	r2, [r0, #4]
 8017a1e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017a22:	fb03 f202 	mul.w	r2, r3, r2
 8017a26:	6803      	ldr	r3, [r0, #0]
 8017a28:	f843 e002 	str.w	lr, [r3, r2]
 8017a2c:	f10c 0c01 	add.w	ip, ip, #1
 8017a30:	8901      	ldrh	r1, [r0, #8]
 8017a32:	fa1f f38c 	uxth.w	r3, ip
 8017a36:	4299      	cmp	r1, r3
 8017a38:	d8eb      	bhi.n	8017a12 <uxr_reset_input_reliable_stream+0xe>
 8017a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8017a3e:	60c3      	str	r3, [r0, #12]
 8017a40:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a44:	f04f 33ff 	mov.w	r3, #4294967295
 8017a48:	60c3      	str	r3, [r0, #12]
 8017a4a:	4770      	bx	lr

08017a4c <uxr_receive_reliable_message>:
 8017a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a50:	4604      	mov	r4, r0
 8017a52:	460d      	mov	r5, r1
 8017a54:	8901      	ldrh	r1, [r0, #8]
 8017a56:	8980      	ldrh	r0, [r0, #12]
 8017a58:	4690      	mov	r8, r2
 8017a5a:	461f      	mov	r7, r3
 8017a5c:	f000 fdc2 	bl	80185e4 <uxr_seq_num_add>
 8017a60:	4629      	mov	r1, r5
 8017a62:	4606      	mov	r6, r0
 8017a64:	89a0      	ldrh	r0, [r4, #12]
 8017a66:	f000 fdc5 	bl	80185f4 <uxr_seq_num_cmp>
 8017a6a:	2800      	cmp	r0, #0
 8017a6c:	db0a      	blt.n	8017a84 <uxr_receive_reliable_message+0x38>
 8017a6e:	2600      	movs	r6, #0
 8017a70:	89e0      	ldrh	r0, [r4, #14]
 8017a72:	4629      	mov	r1, r5
 8017a74:	f000 fdbe 	bl	80185f4 <uxr_seq_num_cmp>
 8017a78:	2800      	cmp	r0, #0
 8017a7a:	bfb8      	it	lt
 8017a7c:	81e5      	strhlt	r5, [r4, #14]
 8017a7e:	4630      	mov	r0, r6
 8017a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a84:	4630      	mov	r0, r6
 8017a86:	4629      	mov	r1, r5
 8017a88:	f000 fdb4 	bl	80185f4 <uxr_seq_num_cmp>
 8017a8c:	2800      	cmp	r0, #0
 8017a8e:	dbee      	blt.n	8017a6e <uxr_receive_reliable_message+0x22>
 8017a90:	6923      	ldr	r3, [r4, #16]
 8017a92:	4640      	mov	r0, r8
 8017a94:	4798      	blx	r3
 8017a96:	2101      	movs	r1, #1
 8017a98:	4606      	mov	r6, r0
 8017a9a:	89a0      	ldrh	r0, [r4, #12]
 8017a9c:	f000 fda2 	bl	80185e4 <uxr_seq_num_add>
 8017aa0:	b90e      	cbnz	r6, 8017aa6 <uxr_receive_reliable_message+0x5a>
 8017aa2:	4285      	cmp	r5, r0
 8017aa4:	d046      	beq.n	8017b34 <uxr_receive_reliable_message+0xe8>
 8017aa6:	8921      	ldrh	r1, [r4, #8]
 8017aa8:	fbb5 f2f1 	udiv	r2, r5, r1
 8017aac:	fb01 5212 	mls	r2, r1, r2, r5
 8017ab0:	b292      	uxth	r2, r2
 8017ab2:	6863      	ldr	r3, [r4, #4]
 8017ab4:	6820      	ldr	r0, [r4, #0]
 8017ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8017aba:	fb02 f303 	mul.w	r3, r2, r3
 8017abe:	3304      	adds	r3, #4
 8017ac0:	4418      	add	r0, r3
 8017ac2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d1d1      	bne.n	8017a6e <uxr_receive_reliable_message+0x22>
 8017aca:	4641      	mov	r1, r8
 8017acc:	463a      	mov	r2, r7
 8017ace:	f002 fb0e 	bl	801a0ee <memcpy>
 8017ad2:	8921      	ldrh	r1, [r4, #8]
 8017ad4:	fbb5 f2f1 	udiv	r2, r5, r1
 8017ad8:	fb01 5212 	mls	r2, r1, r2, r5
 8017adc:	b292      	uxth	r2, r2
 8017ade:	6863      	ldr	r3, [r4, #4]
 8017ae0:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ae4:	fb02 f303 	mul.w	r3, r2, r3
 8017ae8:	6822      	ldr	r2, [r4, #0]
 8017aea:	50d7      	str	r7, [r2, r3]
 8017aec:	9a06      	ldr	r2, [sp, #24]
 8017aee:	2301      	movs	r3, #1
 8017af0:	7013      	strb	r3, [r2, #0]
 8017af2:	2e00      	cmp	r6, #0
 8017af4:	d0bb      	beq.n	8017a6e <uxr_receive_reliable_message+0x22>
 8017af6:	89a6      	ldrh	r6, [r4, #12]
 8017af8:	2101      	movs	r1, #1
 8017afa:	4630      	mov	r0, r6
 8017afc:	f000 fd72 	bl	80185e4 <uxr_seq_num_add>
 8017b00:	8921      	ldrh	r1, [r4, #8]
 8017b02:	fbb0 f2f1 	udiv	r2, r0, r1
 8017b06:	fb01 0212 	mls	r2, r1, r2, r0
 8017b0a:	b292      	uxth	r2, r2
 8017b0c:	6863      	ldr	r3, [r4, #4]
 8017b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017b12:	4606      	mov	r6, r0
 8017b14:	fb02 f303 	mul.w	r3, r2, r3
 8017b18:	6820      	ldr	r0, [r4, #0]
 8017b1a:	3304      	adds	r3, #4
 8017b1c:	4418      	add	r0, r3
 8017b1e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d0a3      	beq.n	8017a6e <uxr_receive_reliable_message+0x22>
 8017b26:	6923      	ldr	r3, [r4, #16]
 8017b28:	4798      	blx	r3
 8017b2a:	2802      	cmp	r0, #2
 8017b2c:	d005      	beq.n	8017b3a <uxr_receive_reliable_message+0xee>
 8017b2e:	2801      	cmp	r0, #1
 8017b30:	d0e2      	beq.n	8017af8 <uxr_receive_reliable_message+0xac>
 8017b32:	e79c      	b.n	8017a6e <uxr_receive_reliable_message+0x22>
 8017b34:	9b06      	ldr	r3, [sp, #24]
 8017b36:	81a5      	strh	r5, [r4, #12]
 8017b38:	701e      	strb	r6, [r3, #0]
 8017b3a:	2601      	movs	r6, #1
 8017b3c:	e798      	b.n	8017a70 <uxr_receive_reliable_message+0x24>
 8017b3e:	bf00      	nop

08017b40 <uxr_next_input_reliable_buffer_available>:
 8017b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b44:	4604      	mov	r4, r0
 8017b46:	460f      	mov	r7, r1
 8017b48:	8980      	ldrh	r0, [r0, #12]
 8017b4a:	2101      	movs	r1, #1
 8017b4c:	4690      	mov	r8, r2
 8017b4e:	f000 fd49 	bl	80185e4 <uxr_seq_num_add>
 8017b52:	8921      	ldrh	r1, [r4, #8]
 8017b54:	fbb0 f2f1 	udiv	r2, r0, r1
 8017b58:	fb01 0212 	mls	r2, r1, r2, r0
 8017b5c:	b292      	uxth	r2, r2
 8017b5e:	6863      	ldr	r3, [r4, #4]
 8017b60:	6826      	ldr	r6, [r4, #0]
 8017b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8017b66:	fb02 f303 	mul.w	r3, r2, r3
 8017b6a:	3304      	adds	r3, #4
 8017b6c:	441e      	add	r6, r3
 8017b6e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017b72:	f1b9 0f00 	cmp.w	r9, #0
 8017b76:	d023      	beq.n	8017bc0 <uxr_next_input_reliable_buffer_available+0x80>
 8017b78:	6923      	ldr	r3, [r4, #16]
 8017b7a:	4605      	mov	r5, r0
 8017b7c:	4630      	mov	r0, r6
 8017b7e:	4798      	blx	r3
 8017b80:	4682      	mov	sl, r0
 8017b82:	b300      	cbz	r0, 8017bc6 <uxr_next_input_reliable_buffer_available+0x86>
 8017b84:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017b88:	2101      	movs	r1, #1
 8017b8a:	4650      	mov	r0, sl
 8017b8c:	f000 fd2a 	bl	80185e4 <uxr_seq_num_add>
 8017b90:	8921      	ldrh	r1, [r4, #8]
 8017b92:	fbb0 f2f1 	udiv	r2, r0, r1
 8017b96:	4682      	mov	sl, r0
 8017b98:	fb01 0212 	mls	r2, r1, r2, r0
 8017b9c:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017ba0:	b292      	uxth	r2, r2
 8017ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ba6:	fb02 f303 	mul.w	r3, r2, r3
 8017baa:	3304      	adds	r3, #4
 8017bac:	4418      	add	r0, r3
 8017bae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017bb2:	b12b      	cbz	r3, 8017bc0 <uxr_next_input_reliable_buffer_available+0x80>
 8017bb4:	6923      	ldr	r3, [r4, #16]
 8017bb6:	4798      	blx	r3
 8017bb8:	2802      	cmp	r0, #2
 8017bba:	d01b      	beq.n	8017bf4 <uxr_next_input_reliable_buffer_available+0xb4>
 8017bbc:	2801      	cmp	r0, #1
 8017bbe:	d0e3      	beq.n	8017b88 <uxr_next_input_reliable_buffer_available+0x48>
 8017bc0:	2000      	movs	r0, #0
 8017bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bc6:	464a      	mov	r2, r9
 8017bc8:	4631      	mov	r1, r6
 8017bca:	4638      	mov	r0, r7
 8017bcc:	f7f4 f870 	bl	800bcb0 <ucdr_init_buffer>
 8017bd0:	8921      	ldrh	r1, [r4, #8]
 8017bd2:	fbb5 f2f1 	udiv	r2, r5, r1
 8017bd6:	fb01 5212 	mls	r2, r1, r2, r5
 8017bda:	b292      	uxth	r2, r2
 8017bdc:	6863      	ldr	r3, [r4, #4]
 8017bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8017be2:	fb02 f303 	mul.w	r3, r2, r3
 8017be6:	6822      	ldr	r2, [r4, #0]
 8017be8:	f842 a003 	str.w	sl, [r2, r3]
 8017bec:	81a5      	strh	r5, [r4, #12]
 8017bee:	2001      	movs	r0, #1
 8017bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bf4:	eb06 0108 	add.w	r1, r6, r8
 8017bf8:	8926      	ldrh	r6, [r4, #8]
 8017bfa:	fbb5 f0f6 	udiv	r0, r5, r6
 8017bfe:	fb06 5010 	mls	r0, r6, r0, r5
 8017c02:	b280      	uxth	r0, r0
 8017c04:	6863      	ldr	r3, [r4, #4]
 8017c06:	fbb3 f3f6 	udiv	r3, r3, r6
 8017c0a:	fb00 f303 	mul.w	r3, r0, r3
 8017c0e:	6820      	ldr	r0, [r4, #0]
 8017c10:	2500      	movs	r5, #0
 8017c12:	50c5      	str	r5, [r0, r3]
 8017c14:	eba9 0208 	sub.w	r2, r9, r8
 8017c18:	4638      	mov	r0, r7
 8017c1a:	f7f4 f849 	bl	800bcb0 <ucdr_init_buffer>
 8017c1e:	4903      	ldr	r1, [pc, #12]	@ (8017c2c <uxr_next_input_reliable_buffer_available+0xec>)
 8017c20:	4622      	mov	r2, r4
 8017c22:	4638      	mov	r0, r7
 8017c24:	f7f4 f818 	bl	800bc58 <ucdr_set_on_full_buffer_callback>
 8017c28:	4655      	mov	r5, sl
 8017c2a:	e7df      	b.n	8017bec <uxr_next_input_reliable_buffer_available+0xac>
 8017c2c:	08017949 	.word	0x08017949

08017c30 <uxr_process_heartbeat>:
 8017c30:	b538      	push	{r3, r4, r5, lr}
 8017c32:	4611      	mov	r1, r2
 8017c34:	4604      	mov	r4, r0
 8017c36:	89c0      	ldrh	r0, [r0, #14]
 8017c38:	4615      	mov	r5, r2
 8017c3a:	f000 fcdb 	bl	80185f4 <uxr_seq_num_cmp>
 8017c3e:	2800      	cmp	r0, #0
 8017c40:	bfb8      	it	lt
 8017c42:	81e5      	strhlt	r5, [r4, #14]
 8017c44:	bd38      	pop	{r3, r4, r5, pc}
 8017c46:	bf00      	nop

08017c48 <uxr_compute_acknack>:
 8017c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c4c:	8903      	ldrh	r3, [r0, #8]
 8017c4e:	8985      	ldrh	r5, [r0, #12]
 8017c50:	4604      	mov	r4, r0
 8017c52:	460e      	mov	r6, r1
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d048      	beq.n	8017cea <uxr_compute_acknack+0xa2>
 8017c58:	4628      	mov	r0, r5
 8017c5a:	2701      	movs	r7, #1
 8017c5c:	e003      	b.n	8017c66 <uxr_compute_acknack+0x1e>
 8017c5e:	4567      	cmp	r7, ip
 8017c60:	d243      	bcs.n	8017cea <uxr_compute_acknack+0xa2>
 8017c62:	89a0      	ldrh	r0, [r4, #12]
 8017c64:	3701      	adds	r7, #1
 8017c66:	b2b9      	uxth	r1, r7
 8017c68:	f000 fcbc 	bl	80185e4 <uxr_seq_num_add>
 8017c6c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017c70:	fbb0 f2fc 	udiv	r2, r0, ip
 8017c74:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017c78:	fb0c 0212 	mls	r2, ip, r2, r0
 8017c7c:	b292      	uxth	r2, r2
 8017c7e:	fbb3 f3fc 	udiv	r3, r3, ip
 8017c82:	fb02 f303 	mul.w	r3, r2, r3
 8017c86:	58cb      	ldr	r3, [r1, r3]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d1e8      	bne.n	8017c5e <uxr_compute_acknack+0x16>
 8017c8c:	8030      	strh	r0, [r6, #0]
 8017c8e:	2101      	movs	r1, #1
 8017c90:	89e5      	ldrh	r5, [r4, #14]
 8017c92:	f000 fcab 	bl	80185ec <uxr_seq_num_sub>
 8017c96:	4601      	mov	r1, r0
 8017c98:	4628      	mov	r0, r5
 8017c9a:	f000 fca7 	bl	80185ec <uxr_seq_num_sub>
 8017c9e:	4605      	mov	r5, r0
 8017ca0:	4607      	mov	r7, r0
 8017ca2:	b1f8      	cbz	r0, 8017ce4 <uxr_compute_acknack+0x9c>
 8017ca4:	f04f 0900 	mov.w	r9, #0
 8017ca8:	464d      	mov	r5, r9
 8017caa:	f04f 0801 	mov.w	r8, #1
 8017cae:	fa1f f189 	uxth.w	r1, r9
 8017cb2:	8830      	ldrh	r0, [r6, #0]
 8017cb4:	f000 fc96 	bl	80185e4 <uxr_seq_num_add>
 8017cb8:	8921      	ldrh	r1, [r4, #8]
 8017cba:	fbb0 f3f1 	udiv	r3, r0, r1
 8017cbe:	fb03 0011 	mls	r0, r3, r1, r0
 8017cc2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017cc6:	b280      	uxth	r0, r0
 8017cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ccc:	fb00 f303 	mul.w	r3, r0, r3
 8017cd0:	fa08 f109 	lsl.w	r1, r8, r9
 8017cd4:	58d3      	ldr	r3, [r2, r3]
 8017cd6:	f109 0901 	add.w	r9, r9, #1
 8017cda:	b90b      	cbnz	r3, 8017ce0 <uxr_compute_acknack+0x98>
 8017cdc:	4329      	orrs	r1, r5
 8017cde:	b28d      	uxth	r5, r1
 8017ce0:	454f      	cmp	r7, r9
 8017ce2:	d1e4      	bne.n	8017cae <uxr_compute_acknack+0x66>
 8017ce4:	4628      	mov	r0, r5
 8017ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cea:	4628      	mov	r0, r5
 8017cec:	e7ce      	b.n	8017c8c <uxr_compute_acknack+0x44>
 8017cee:	bf00      	nop

08017cf0 <uxr_init_output_best_effort_stream>:
 8017cf0:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8017cf4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017cf8:	6001      	str	r1, [r0, #0]
 8017cfa:	7303      	strb	r3, [r0, #12]
 8017cfc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017d00:	4770      	bx	lr
 8017d02:	bf00      	nop

08017d04 <uxr_reset_output_best_effort_stream>:
 8017d04:	7b02      	ldrb	r2, [r0, #12]
 8017d06:	6042      	str	r2, [r0, #4]
 8017d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017d0c:	81c3      	strh	r3, [r0, #14]
 8017d0e:	4770      	bx	lr

08017d10 <uxr_prepare_best_effort_buffer_to_write>:
 8017d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d12:	4604      	mov	r4, r0
 8017d14:	b083      	sub	sp, #12
 8017d16:	6840      	ldr	r0, [r0, #4]
 8017d18:	460d      	mov	r5, r1
 8017d1a:	4616      	mov	r6, r2
 8017d1c:	f7f9 f852 	bl	8010dc4 <uxr_submessage_padding>
 8017d20:	6863      	ldr	r3, [r4, #4]
 8017d22:	4418      	add	r0, r3
 8017d24:	68a3      	ldr	r3, [r4, #8]
 8017d26:	1942      	adds	r2, r0, r5
 8017d28:	4293      	cmp	r3, r2
 8017d2a:	bf2c      	ite	cs
 8017d2c:	2701      	movcs	r7, #1
 8017d2e:	2700      	movcc	r7, #0
 8017d30:	d202      	bcs.n	8017d38 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017d32:	4638      	mov	r0, r7
 8017d34:	b003      	add	sp, #12
 8017d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d38:	9000      	str	r0, [sp, #0]
 8017d3a:	6821      	ldr	r1, [r4, #0]
 8017d3c:	4630      	mov	r0, r6
 8017d3e:	2300      	movs	r3, #0
 8017d40:	f7f3 ffa4 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 8017d44:	6863      	ldr	r3, [r4, #4]
 8017d46:	4638      	mov	r0, r7
 8017d48:	442b      	add	r3, r5
 8017d4a:	6063      	str	r3, [r4, #4]
 8017d4c:	b003      	add	sp, #12
 8017d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d50 <uxr_prepare_best_effort_buffer_to_send>:
 8017d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d54:	4604      	mov	r4, r0
 8017d56:	461d      	mov	r5, r3
 8017d58:	6840      	ldr	r0, [r0, #4]
 8017d5a:	7b23      	ldrb	r3, [r4, #12]
 8017d5c:	4298      	cmp	r0, r3
 8017d5e:	bf8c      	ite	hi
 8017d60:	2601      	movhi	r6, #1
 8017d62:	2600      	movls	r6, #0
 8017d64:	d802      	bhi.n	8017d6c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017d66:	4630      	mov	r0, r6
 8017d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d6c:	4688      	mov	r8, r1
 8017d6e:	89e0      	ldrh	r0, [r4, #14]
 8017d70:	2101      	movs	r1, #1
 8017d72:	4617      	mov	r7, r2
 8017d74:	f000 fc36 	bl	80185e4 <uxr_seq_num_add>
 8017d78:	6823      	ldr	r3, [r4, #0]
 8017d7a:	81e0      	strh	r0, [r4, #14]
 8017d7c:	8028      	strh	r0, [r5, #0]
 8017d7e:	f8c8 3000 	str.w	r3, [r8]
 8017d82:	6863      	ldr	r3, [r4, #4]
 8017d84:	603b      	str	r3, [r7, #0]
 8017d86:	7b23      	ldrb	r3, [r4, #12]
 8017d88:	6063      	str	r3, [r4, #4]
 8017d8a:	4630      	mov	r0, r6
 8017d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017d90 <on_full_output_buffer>:
 8017d90:	b538      	push	{r3, r4, r5, lr}
 8017d92:	460c      	mov	r4, r1
 8017d94:	6803      	ldr	r3, [r0, #0]
 8017d96:	6809      	ldr	r1, [r1, #0]
 8017d98:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017d9c:	6862      	ldr	r2, [r4, #4]
 8017d9e:	fbb2 f2fc 	udiv	r2, r2, ip
 8017da2:	1a5b      	subs	r3, r3, r1
 8017da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8017da8:	3301      	adds	r3, #1
 8017daa:	b29b      	uxth	r3, r3
 8017dac:	fbb3 fefc 	udiv	lr, r3, ip
 8017db0:	fb0c 331e 	mls	r3, ip, lr, r3
 8017db4:	b29b      	uxth	r3, r3
 8017db6:	fb02 f303 	mul.w	r3, r2, r3
 8017dba:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017dbe:	58ca      	ldr	r2, [r1, r3]
 8017dc0:	4463      	add	r3, ip
 8017dc2:	eba2 020c 	sub.w	r2, r2, ip
 8017dc6:	3308      	adds	r3, #8
 8017dc8:	4605      	mov	r5, r0
 8017dca:	4419      	add	r1, r3
 8017dcc:	3a04      	subs	r2, #4
 8017dce:	6903      	ldr	r3, [r0, #16]
 8017dd0:	f7f3 ff66 	bl	800bca0 <ucdr_init_buffer_origin>
 8017dd4:	4628      	mov	r0, r5
 8017dd6:	4903      	ldr	r1, [pc, #12]	@ (8017de4 <on_full_output_buffer+0x54>)
 8017dd8:	4622      	mov	r2, r4
 8017dda:	f7f3 ff3d 	bl	800bc58 <ucdr_set_on_full_buffer_callback>
 8017dde:	2000      	movs	r0, #0
 8017de0:	bd38      	pop	{r3, r4, r5, pc}
 8017de2:	bf00      	nop
 8017de4:	08017d91 	.word	0x08017d91

08017de8 <uxr_init_output_reliable_stream>:
 8017de8:	b410      	push	{r4}
 8017dea:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017dee:	8103      	strh	r3, [r0, #8]
 8017df0:	e9c0 1200 	strd	r1, r2, [r0]
 8017df4:	f880 c00c 	strb.w	ip, [r0, #12]
 8017df8:	b1d3      	cbz	r3, 8017e30 <uxr_init_output_reliable_stream+0x48>
 8017dfa:	f8c1 c000 	str.w	ip, [r1]
 8017dfe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017e02:	f1bc 0f01 	cmp.w	ip, #1
 8017e06:	d913      	bls.n	8017e30 <uxr_init_output_reliable_stream+0x48>
 8017e08:	2301      	movs	r3, #1
 8017e0a:	fbb3 f1fc 	udiv	r1, r3, ip
 8017e0e:	fb0c 3111 	mls	r1, ip, r1, r3
 8017e12:	b289      	uxth	r1, r1
 8017e14:	6842      	ldr	r2, [r0, #4]
 8017e16:	6804      	ldr	r4, [r0, #0]
 8017e18:	fbb2 f2fc 	udiv	r2, r2, ip
 8017e1c:	fb01 f202 	mul.w	r2, r1, r2
 8017e20:	7b01      	ldrb	r1, [r0, #12]
 8017e22:	50a1      	str	r1, [r4, r2]
 8017e24:	3301      	adds	r3, #1
 8017e26:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017e2a:	b29b      	uxth	r3, r3
 8017e2c:	459c      	cmp	ip, r3
 8017e2e:	d8ec      	bhi.n	8017e0a <uxr_init_output_reliable_stream+0x22>
 8017e30:	f04f 32ff 	mov.w	r2, #4294967295
 8017e34:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017e38:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017e3c:	4905      	ldr	r1, [pc, #20]	@ (8017e54 <uxr_init_output_reliable_stream+0x6c>)
 8017e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e42:	f8c0 100e 	str.w	r1, [r0, #14]
 8017e46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	8242      	strh	r2, [r0, #18]
 8017e4e:	8403      	strh	r3, [r0, #32]
 8017e50:	4770      	bx	lr
 8017e52:	bf00      	nop
 8017e54:	ffff0000 	.word	0xffff0000

08017e58 <uxr_reset_output_reliable_stream>:
 8017e58:	8901      	ldrh	r1, [r0, #8]
 8017e5a:	b1b1      	cbz	r1, 8017e8a <uxr_reset_output_reliable_stream+0x32>
 8017e5c:	f04f 0c00 	mov.w	ip, #0
 8017e60:	4663      	mov	r3, ip
 8017e62:	fbb3 f2f1 	udiv	r2, r3, r1
 8017e66:	fb01 3312 	mls	r3, r1, r2, r3
 8017e6a:	b29b      	uxth	r3, r3
 8017e6c:	6842      	ldr	r2, [r0, #4]
 8017e6e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017e72:	6801      	ldr	r1, [r0, #0]
 8017e74:	fb03 f202 	mul.w	r2, r3, r2
 8017e78:	7b03      	ldrb	r3, [r0, #12]
 8017e7a:	508b      	str	r3, [r1, r2]
 8017e7c:	f10c 0c01 	add.w	ip, ip, #1
 8017e80:	8901      	ldrh	r1, [r0, #8]
 8017e82:	fa1f f38c 	uxth.w	r3, ip
 8017e86:	4299      	cmp	r1, r3
 8017e88:	d8eb      	bhi.n	8017e62 <uxr_reset_output_reliable_stream+0xa>
 8017e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8017e8e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017e92:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017e96:	4904      	ldr	r1, [pc, #16]	@ (8017ea8 <uxr_reset_output_reliable_stream+0x50>)
 8017e98:	f8c0 100e 	str.w	r1, [r0, #14]
 8017e9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	8242      	strh	r2, [r0, #18]
 8017ea4:	8403      	strh	r3, [r0, #32]
 8017ea6:	4770      	bx	lr
 8017ea8:	ffff0000 	.word	0xffff0000

08017eac <uxr_prepare_reliable_buffer_to_write>:
 8017eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017eb0:	4604      	mov	r4, r0
 8017eb2:	b091      	sub	sp, #68	@ 0x44
 8017eb4:	8900      	ldrh	r0, [r0, #8]
 8017eb6:	89e7      	ldrh	r7, [r4, #14]
 8017eb8:	6823      	ldr	r3, [r4, #0]
 8017eba:	9204      	str	r2, [sp, #16]
 8017ebc:	fbb7 f2f0 	udiv	r2, r7, r0
 8017ec0:	fb00 7212 	mls	r2, r0, r2, r7
 8017ec4:	b292      	uxth	r2, r2
 8017ec6:	6865      	ldr	r5, [r4, #4]
 8017ec8:	fbb5 f5f0 	udiv	r5, r5, r0
 8017ecc:	fb05 3202 	mla	r2, r5, r2, r3
 8017ed0:	3204      	adds	r2, #4
 8017ed2:	f852 ac04 	ldr.w	sl, [r2, #-4]
 8017ed6:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8017eda:	9203      	str	r2, [sp, #12]
 8017edc:	4688      	mov	r8, r1
 8017ede:	f1a5 0904 	sub.w	r9, r5, #4
 8017ee2:	2800      	cmp	r0, #0
 8017ee4:	f000 8143 	beq.w	801816e <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8017ee8:	2100      	movs	r1, #0
 8017eea:	460e      	mov	r6, r1
 8017eec:	b28a      	uxth	r2, r1
 8017eee:	fbb2 fcf0 	udiv	ip, r2, r0
 8017ef2:	fb00 221c 	mls	r2, r0, ip, r2
 8017ef6:	b292      	uxth	r2, r2
 8017ef8:	fb05 f202 	mul.w	r2, r5, r2
 8017efc:	3101      	adds	r1, #1
 8017efe:	589a      	ldr	r2, [r3, r2]
 8017f00:	455a      	cmp	r2, fp
 8017f02:	bf04      	itt	eq
 8017f04:	3601      	addeq	r6, #1
 8017f06:	b2b6      	uxtheq	r6, r6
 8017f08:	4281      	cmp	r1, r0
 8017f0a:	d1ef      	bne.n	8017eec <uxr_prepare_reliable_buffer_to_write+0x40>
 8017f0c:	4650      	mov	r0, sl
 8017f0e:	2104      	movs	r1, #4
 8017f10:	9605      	str	r6, [sp, #20]
 8017f12:	f7f3 fed1 	bl	800bcb8 <ucdr_alignment>
 8017f16:	4482      	add	sl, r0
 8017f18:	eb0a 0208 	add.w	r2, sl, r8
 8017f1c:	454a      	cmp	r2, r9
 8017f1e:	f240 80ca 	bls.w	80180b6 <uxr_prepare_reliable_buffer_to_write+0x20a>
 8017f22:	7b22      	ldrb	r2, [r4, #12]
 8017f24:	4442      	add	r2, r8
 8017f26:	454a      	cmp	r2, r9
 8017f28:	f240 80b2 	bls.w	8018090 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 8017f2c:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 8017f30:	32fc      	adds	r2, #252	@ 0xfc
 8017f32:	fa1f f389 	uxth.w	r3, r9
 8017f36:	441a      	add	r2, r3
 8017f38:	b292      	uxth	r2, r2
 8017f3a:	fb06 fb02 	mul.w	fp, r6, r2
 8017f3e:	45c3      	cmp	fp, r8
 8017f40:	9205      	str	r2, [sp, #20]
 8017f42:	9206      	str	r2, [sp, #24]
 8017f44:	f0c0 80b3 	bcc.w	80180ae <uxr_prepare_reliable_buffer_to_write+0x202>
 8017f48:	f10a 0204 	add.w	r2, sl, #4
 8017f4c:	454a      	cmp	r2, r9
 8017f4e:	f080 80db 	bcs.w	8018108 <uxr_prepare_reliable_buffer_to_write+0x25c>
 8017f52:	f1a3 0b04 	sub.w	fp, r3, #4
 8017f56:	ebab 0b0a 	sub.w	fp, fp, sl
 8017f5a:	9b05      	ldr	r3, [sp, #20]
 8017f5c:	fa1f fb8b 	uxth.w	fp, fp
 8017f60:	eba8 080b 	sub.w	r8, r8, fp
 8017f64:	fbb8 fcf3 	udiv	ip, r8, r3
 8017f68:	fb03 831c 	mls	r3, r3, ip, r8
 8017f6c:	fa1f fc8c 	uxth.w	ip, ip
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	f040 80c1 	bne.w	80180f8 <uxr_prepare_reliable_buffer_to_write+0x24c>
 8017f76:	45b4      	cmp	ip, r6
 8017f78:	f200 8099 	bhi.w	80180ae <uxr_prepare_reliable_buffer_to_write+0x202>
 8017f7c:	f10d 0820 	add.w	r8, sp, #32
 8017f80:	f1bc 0f00 	cmp.w	ip, #0
 8017f84:	d040      	beq.n	8018008 <uxr_prepare_reliable_buffer_to_write+0x15c>
 8017f86:	f8cd a01c 	str.w	sl, [sp, #28]
 8017f8a:	2600      	movs	r6, #0
 8017f8c:	f8dd a014 	ldr.w	sl, [sp, #20]
 8017f90:	9505      	str	r5, [sp, #20]
 8017f92:	f10d 0820 	add.w	r8, sp, #32
 8017f96:	4665      	mov	r5, ip
 8017f98:	e000      	b.n	8017f9c <uxr_prepare_reliable_buffer_to_write+0xf0>
 8017f9a:	46d3      	mov	fp, sl
 8017f9c:	8921      	ldrh	r1, [r4, #8]
 8017f9e:	fbb7 f2f1 	udiv	r2, r7, r1
 8017fa2:	fb01 7212 	mls	r2, r1, r2, r7
 8017fa6:	b292      	uxth	r2, r2
 8017fa8:	6863      	ldr	r3, [r4, #4]
 8017faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8017fae:	6821      	ldr	r1, [r4, #0]
 8017fb0:	fb02 f303 	mul.w	r3, r2, r3
 8017fb4:	3304      	adds	r3, #4
 8017fb6:	4419      	add	r1, r3
 8017fb8:	4640      	mov	r0, r8
 8017fba:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8017fbe:	9200      	str	r2, [sp, #0]
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	464a      	mov	r2, r9
 8017fc4:	f7f3 fe62 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 8017fc8:	465a      	mov	r2, fp
 8017fca:	2300      	movs	r3, #0
 8017fcc:	210d      	movs	r1, #13
 8017fce:	4640      	mov	r0, r8
 8017fd0:	f7f8 feb8 	bl	8010d44 <uxr_buffer_submessage_header>
 8017fd4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017fd8:	fbb7 f2fc 	udiv	r2, r7, ip
 8017fdc:	fb0c 7212 	mls	r2, ip, r2, r7
 8017fe0:	b292      	uxth	r2, r2
 8017fe2:	6863      	ldr	r3, [r4, #4]
 8017fe4:	fbb3 f3fc 	udiv	r3, r3, ip
 8017fe8:	fb02 f303 	mul.w	r3, r2, r3
 8017fec:	6822      	ldr	r2, [r4, #0]
 8017fee:	4638      	mov	r0, r7
 8017ff0:	f842 9003 	str.w	r9, [r2, r3]
 8017ff4:	2101      	movs	r1, #1
 8017ff6:	f000 faf5 	bl	80185e4 <uxr_seq_num_add>
 8017ffa:	3601      	adds	r6, #1
 8017ffc:	42ae      	cmp	r6, r5
 8017ffe:	4607      	mov	r7, r0
 8018000:	d1cb      	bne.n	8017f9a <uxr_prepare_reliable_buffer_to_write+0xee>
 8018002:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018006:	9d05      	ldr	r5, [sp, #20]
 8018008:	8920      	ldrh	r0, [r4, #8]
 801800a:	fbb7 f1f0 	udiv	r1, r7, r0
 801800e:	fb00 7111 	mls	r1, r0, r1, r7
 8018012:	b289      	uxth	r1, r1
 8018014:	6863      	ldr	r3, [r4, #4]
 8018016:	fbb3 f3f0 	udiv	r3, r3, r0
 801801a:	fb01 f303 	mul.w	r3, r1, r3
 801801e:	6821      	ldr	r1, [r4, #0]
 8018020:	3304      	adds	r3, #4
 8018022:	4419      	add	r1, r3
 8018024:	464a      	mov	r2, r9
 8018026:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801802a:	9000      	str	r0, [sp, #0]
 801802c:	2300      	movs	r3, #0
 801802e:	4640      	mov	r0, r8
 8018030:	f7f3 fe2c 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 8018034:	4640      	mov	r0, r8
 8018036:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801803a:	2302      	movs	r3, #2
 801803c:	fa1f f288 	uxth.w	r2, r8
 8018040:	210d      	movs	r1, #13
 8018042:	f7f8 fe7f 	bl	8010d44 <uxr_buffer_submessage_header>
 8018046:	8926      	ldrh	r6, [r4, #8]
 8018048:	9b03      	ldr	r3, [sp, #12]
 801804a:	7b20      	ldrb	r0, [r4, #12]
 801804c:	f1a5 0208 	sub.w	r2, r5, #8
 8018050:	f10a 0104 	add.w	r1, sl, #4
 8018054:	fbb7 f5f6 	udiv	r5, r7, r6
 8018058:	fb06 7515 	mls	r5, r6, r5, r7
 801805c:	440b      	add	r3, r1
 801805e:	b2ad      	uxth	r5, r5
 8018060:	4619      	mov	r1, r3
 8018062:	3004      	adds	r0, #4
 8018064:	6863      	ldr	r3, [r4, #4]
 8018066:	fbb3 f3f6 	udiv	r3, r3, r6
 801806a:	fb05 f303 	mul.w	r3, r5, r3
 801806e:	6825      	ldr	r5, [r4, #0]
 8018070:	4440      	add	r0, r8
 8018072:	50e8      	str	r0, [r5, r3]
 8018074:	9d04      	ldr	r5, [sp, #16]
 8018076:	eba2 020a 	sub.w	r2, r2, sl
 801807a:	4628      	mov	r0, r5
 801807c:	f7f3 fe18 	bl	800bcb0 <ucdr_init_buffer>
 8018080:	493c      	ldr	r1, [pc, #240]	@ (8018174 <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 8018082:	4622      	mov	r2, r4
 8018084:	4628      	mov	r0, r5
 8018086:	f7f3 fde7 	bl	800bc58 <ucdr_set_on_full_buffer_callback>
 801808a:	81e7      	strh	r7, [r4, #14]
 801808c:	2001      	movs	r0, #1
 801808e:	e00f      	b.n	80180b0 <uxr_prepare_reliable_buffer_to_write+0x204>
 8018090:	2101      	movs	r1, #1
 8018092:	89e0      	ldrh	r0, [r4, #14]
 8018094:	f000 faa6 	bl	80185e4 <uxr_seq_num_add>
 8018098:	8921      	ldrh	r1, [r4, #8]
 801809a:	4605      	mov	r5, r0
 801809c:	8a60      	ldrh	r0, [r4, #18]
 801809e:	f000 faa1 	bl	80185e4 <uxr_seq_num_add>
 80180a2:	4601      	mov	r1, r0
 80180a4:	4628      	mov	r0, r5
 80180a6:	f000 faa5 	bl	80185f4 <uxr_seq_num_cmp>
 80180aa:	2800      	cmp	r0, #0
 80180ac:	dd45      	ble.n	801813a <uxr_prepare_reliable_buffer_to_write+0x28e>
 80180ae:	2000      	movs	r0, #0
 80180b0:	b011      	add	sp, #68	@ 0x44
 80180b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180b6:	8921      	ldrh	r1, [r4, #8]
 80180b8:	8a60      	ldrh	r0, [r4, #18]
 80180ba:	9205      	str	r2, [sp, #20]
 80180bc:	f000 fa92 	bl	80185e4 <uxr_seq_num_add>
 80180c0:	4601      	mov	r1, r0
 80180c2:	4638      	mov	r0, r7
 80180c4:	f000 fa96 	bl	80185f4 <uxr_seq_num_cmp>
 80180c8:	2800      	cmp	r0, #0
 80180ca:	9a05      	ldr	r2, [sp, #20]
 80180cc:	dcef      	bgt.n	80180ae <uxr_prepare_reliable_buffer_to_write+0x202>
 80180ce:	8926      	ldrh	r6, [r4, #8]
 80180d0:	fbb7 f5f6 	udiv	r5, r7, r6
 80180d4:	fb06 7515 	mls	r5, r6, r5, r7
 80180d8:	b2ad      	uxth	r5, r5
 80180da:	6863      	ldr	r3, [r4, #4]
 80180dc:	6824      	ldr	r4, [r4, #0]
 80180de:	fbb3 f3f6 	udiv	r3, r3, r6
 80180e2:	fb05 f303 	mul.w	r3, r5, r3
 80180e6:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80180ea:	50e2      	str	r2, [r4, r3]
 80180ec:	2300      	movs	r3, #0
 80180ee:	f8cd a000 	str.w	sl, [sp]
 80180f2:	f7f3 fdcb 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 80180f6:	e7c9      	b.n	801808c <uxr_prepare_reliable_buffer_to_write+0x1e0>
 80180f8:	f10c 0c01 	add.w	ip, ip, #1
 80180fc:	fa1f fc8c 	uxth.w	ip, ip
 8018100:	45b4      	cmp	ip, r6
 8018102:	9306      	str	r3, [sp, #24]
 8018104:	d8d3      	bhi.n	80180ae <uxr_prepare_reliable_buffer_to_write+0x202>
 8018106:	e739      	b.n	8017f7c <uxr_prepare_reliable_buffer_to_write+0xd0>
 8018108:	4638      	mov	r0, r7
 801810a:	2101      	movs	r1, #1
 801810c:	9307      	str	r3, [sp, #28]
 801810e:	f000 fa69 	bl	80185e4 <uxr_seq_num_add>
 8018112:	8921      	ldrh	r1, [r4, #8]
 8018114:	6862      	ldr	r2, [r4, #4]
 8018116:	4607      	mov	r7, r0
 8018118:	fbb0 f0f1 	udiv	r0, r0, r1
 801811c:	fb01 7010 	mls	r0, r1, r0, r7
 8018120:	b280      	uxth	r0, r0
 8018122:	fbb2 f1f1 	udiv	r1, r2, r1
 8018126:	6822      	ldr	r2, [r4, #0]
 8018128:	fb00 f101 	mul.w	r1, r0, r1
 801812c:	3104      	adds	r1, #4
 801812e:	1853      	adds	r3, r2, r1
 8018130:	9303      	str	r3, [sp, #12]
 8018132:	f853 ac04 	ldr.w	sl, [r3, #-4]
 8018136:	9b07      	ldr	r3, [sp, #28]
 8018138:	e70b      	b.n	8017f52 <uxr_prepare_reliable_buffer_to_write+0xa6>
 801813a:	8921      	ldrh	r1, [r4, #8]
 801813c:	fbb5 f2f1 	udiv	r2, r5, r1
 8018140:	fb01 5212 	mls	r2, r1, r2, r5
 8018144:	b292      	uxth	r2, r2
 8018146:	6863      	ldr	r3, [r4, #4]
 8018148:	fbb3 f3f1 	udiv	r3, r3, r1
 801814c:	6821      	ldr	r1, [r4, #0]
 801814e:	9804      	ldr	r0, [sp, #16]
 8018150:	fb02 f303 	mul.w	r3, r2, r3
 8018154:	3304      	adds	r3, #4
 8018156:	7b22      	ldrb	r2, [r4, #12]
 8018158:	4419      	add	r1, r3
 801815a:	4442      	add	r2, r8
 801815c:	f841 2c04 	str.w	r2, [r1, #-4]
 8018160:	7b23      	ldrb	r3, [r4, #12]
 8018162:	9300      	str	r3, [sp, #0]
 8018164:	2300      	movs	r3, #0
 8018166:	f7f3 fd91 	bl	800bc8c <ucdr_init_buffer_origin_offset>
 801816a:	81e5      	strh	r5, [r4, #14]
 801816c:	e78e      	b.n	801808c <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801816e:	4606      	mov	r6, r0
 8018170:	e6cc      	b.n	8017f0c <uxr_prepare_reliable_buffer_to_write+0x60>
 8018172:	bf00      	nop
 8018174:	08017d91 	.word	0x08017d91

08018178 <uxr_prepare_next_reliable_buffer_to_send>:
 8018178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801817a:	4604      	mov	r4, r0
 801817c:	460f      	mov	r7, r1
 801817e:	8a00      	ldrh	r0, [r0, #16]
 8018180:	2101      	movs	r1, #1
 8018182:	4615      	mov	r5, r2
 8018184:	461e      	mov	r6, r3
 8018186:	f000 fa2d 	bl	80185e4 <uxr_seq_num_add>
 801818a:	8030      	strh	r0, [r6, #0]
 801818c:	8922      	ldrh	r2, [r4, #8]
 801818e:	fbb0 f3f2 	udiv	r3, r0, r2
 8018192:	fb02 0c13 	mls	ip, r2, r3, r0
 8018196:	fa1f fc8c 	uxth.w	ip, ip
 801819a:	6863      	ldr	r3, [r4, #4]
 801819c:	fbb3 f3f2 	udiv	r3, r3, r2
 80181a0:	fb0c fc03 	mul.w	ip, ip, r3
 80181a4:	6823      	ldr	r3, [r4, #0]
 80181a6:	89e1      	ldrh	r1, [r4, #14]
 80181a8:	f10c 0c04 	add.w	ip, ip, #4
 80181ac:	4463      	add	r3, ip
 80181ae:	603b      	str	r3, [r7, #0]
 80181b0:	6823      	ldr	r3, [r4, #0]
 80181b2:	4463      	add	r3, ip
 80181b4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80181b8:	602b      	str	r3, [r5, #0]
 80181ba:	f000 fa1b 	bl	80185f4 <uxr_seq_num_cmp>
 80181be:	2800      	cmp	r0, #0
 80181c0:	dd01      	ble.n	80181c6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80181c2:	2000      	movs	r0, #0
 80181c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181c6:	7b23      	ldrb	r3, [r4, #12]
 80181c8:	682a      	ldr	r2, [r5, #0]
 80181ca:	429a      	cmp	r2, r3
 80181cc:	d9f9      	bls.n	80181c2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80181ce:	8a61      	ldrh	r1, [r4, #18]
 80181d0:	8a20      	ldrh	r0, [r4, #16]
 80181d2:	f000 fa0b 	bl	80185ec <uxr_seq_num_sub>
 80181d6:	8923      	ldrh	r3, [r4, #8]
 80181d8:	4283      	cmp	r3, r0
 80181da:	d0f2      	beq.n	80181c2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80181dc:	8830      	ldrh	r0, [r6, #0]
 80181de:	89e3      	ldrh	r3, [r4, #14]
 80181e0:	8220      	strh	r0, [r4, #16]
 80181e2:	4298      	cmp	r0, r3
 80181e4:	d001      	beq.n	80181ea <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80181e6:	2001      	movs	r0, #1
 80181e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181ea:	2101      	movs	r1, #1
 80181ec:	f000 f9fa 	bl	80185e4 <uxr_seq_num_add>
 80181f0:	81e0      	strh	r0, [r4, #14]
 80181f2:	e7f8      	b.n	80181e6 <uxr_prepare_next_reliable_buffer_to_send+0x6e>

080181f4 <uxr_update_output_stream_heartbeat_timestamp>:
 80181f4:	b570      	push	{r4, r5, r6, lr}
 80181f6:	8a01      	ldrh	r1, [r0, #16]
 80181f8:	4604      	mov	r4, r0
 80181fa:	8a40      	ldrh	r0, [r0, #18]
 80181fc:	4615      	mov	r5, r2
 80181fe:	461e      	mov	r6, r3
 8018200:	f000 f9f8 	bl	80185f4 <uxr_seq_num_cmp>
 8018204:	2800      	cmp	r0, #0
 8018206:	db07      	blt.n	8018218 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018208:	f04f 35ff 	mov.w	r5, #4294967295
 801820c:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8018210:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018214:	2000      	movs	r0, #0
 8018216:	bd70      	pop	{r4, r5, r6, pc}
 8018218:	f894 3020 	ldrb.w	r3, [r4, #32]
 801821c:	b953      	cbnz	r3, 8018234 <uxr_update_output_stream_heartbeat_timestamp+0x40>
 801821e:	2301      	movs	r3, #1
 8018220:	f884 3020 	strb.w	r3, [r4, #32]
 8018224:	3564      	adds	r5, #100	@ 0x64
 8018226:	f04f 0000 	mov.w	r0, #0
 801822a:	f146 0600 	adc.w	r6, r6, #0
 801822e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018232:	bd70      	pop	{r4, r5, r6, pc}
 8018234:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018238:	428d      	cmp	r5, r1
 801823a:	eb76 0202 	sbcs.w	r2, r6, r2
 801823e:	dbf1      	blt.n	8018224 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018240:	3301      	adds	r3, #1
 8018242:	3564      	adds	r5, #100	@ 0x64
 8018244:	f884 3020 	strb.w	r3, [r4, #32]
 8018248:	f04f 0001 	mov.w	r0, #1
 801824c:	f146 0600 	adc.w	r6, r6, #0
 8018250:	e7ed      	b.n	801822e <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 8018252:	bf00      	nop

08018254 <uxr_begin_output_nack_buffer_it>:
 8018254:	8a40      	ldrh	r0, [r0, #18]
 8018256:	4770      	bx	lr

08018258 <uxr_next_reliable_nack_buffer_to_send>:
 8018258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801825c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018260:	f1b8 0f00 	cmp.w	r8, #0
 8018264:	d104      	bne.n	8018270 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8018266:	f04f 0800 	mov.w	r8, #0
 801826a:	4640      	mov	r0, r8
 801826c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018270:	4604      	mov	r4, r0
 8018272:	460e      	mov	r6, r1
 8018274:	8818      	ldrh	r0, [r3, #0]
 8018276:	4617      	mov	r7, r2
 8018278:	461d      	mov	r5, r3
 801827a:	e019      	b.n	80182b0 <uxr_next_reliable_nack_buffer_to_send+0x58>
 801827c:	8921      	ldrh	r1, [r4, #8]
 801827e:	8828      	ldrh	r0, [r5, #0]
 8018280:	fbb0 fcf1 	udiv	ip, r0, r1
 8018284:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018288:	fb01 0c1c 	mls	ip, r1, ip, r0
 801828c:	fa1f fc8c 	uxth.w	ip, ip
 8018290:	fbb2 f2f1 	udiv	r2, r2, r1
 8018294:	fb02 fc0c 	mul.w	ip, r2, ip
 8018298:	f10c 0c04 	add.w	ip, ip, #4
 801829c:	4463      	add	r3, ip
 801829e:	6033      	str	r3, [r6, #0]
 80182a0:	6823      	ldr	r3, [r4, #0]
 80182a2:	4463      	add	r3, ip
 80182a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80182a8:	603b      	str	r3, [r7, #0]
 80182aa:	7b22      	ldrb	r2, [r4, #12]
 80182ac:	429a      	cmp	r2, r3
 80182ae:	d1dc      	bne.n	801826a <uxr_next_reliable_nack_buffer_to_send+0x12>
 80182b0:	2101      	movs	r1, #1
 80182b2:	f000 f997 	bl	80185e4 <uxr_seq_num_add>
 80182b6:	8028      	strh	r0, [r5, #0]
 80182b8:	8a21      	ldrh	r1, [r4, #16]
 80182ba:	f000 f99b 	bl	80185f4 <uxr_seq_num_cmp>
 80182be:	2800      	cmp	r0, #0
 80182c0:	dddc      	ble.n	801827c <uxr_next_reliable_nack_buffer_to_send+0x24>
 80182c2:	2300      	movs	r3, #0
 80182c4:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 80182c8:	e7cd      	b.n	8018266 <uxr_next_reliable_nack_buffer_to_send+0xe>
 80182ca:	bf00      	nop

080182cc <uxr_process_acknack>:
 80182cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182ce:	4604      	mov	r4, r0
 80182d0:	460e      	mov	r6, r1
 80182d2:	4610      	mov	r0, r2
 80182d4:	2101      	movs	r1, #1
 80182d6:	f000 f989 	bl	80185ec <uxr_seq_num_sub>
 80182da:	8a61      	ldrh	r1, [r4, #18]
 80182dc:	f000 f986 	bl	80185ec <uxr_seq_num_sub>
 80182e0:	b1c0      	cbz	r0, 8018314 <uxr_process_acknack+0x48>
 80182e2:	4605      	mov	r5, r0
 80182e4:	2700      	movs	r7, #0
 80182e6:	2101      	movs	r1, #1
 80182e8:	8a60      	ldrh	r0, [r4, #18]
 80182ea:	f000 f97b 	bl	80185e4 <uxr_seq_num_add>
 80182ee:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80182f2:	fbb0 f1fc 	udiv	r1, r0, ip
 80182f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80182fa:	fb0c 0111 	mls	r1, ip, r1, r0
 80182fe:	b289      	uxth	r1, r1
 8018300:	3701      	adds	r7, #1
 8018302:	fbb3 f3fc 	udiv	r3, r3, ip
 8018306:	fb01 f303 	mul.w	r3, r1, r3
 801830a:	42bd      	cmp	r5, r7
 801830c:	7b21      	ldrb	r1, [r4, #12]
 801830e:	8260      	strh	r0, [r4, #18]
 8018310:	50d1      	str	r1, [r2, r3]
 8018312:	d1e8      	bne.n	80182e6 <uxr_process_acknack+0x1a>
 8018314:	3e00      	subs	r6, #0
 8018316:	f04f 0300 	mov.w	r3, #0
 801831a:	bf18      	it	ne
 801831c:	2601      	movne	r6, #1
 801831e:	f884 3020 	strb.w	r3, [r4, #32]
 8018322:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8018326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018328 <uxr_is_output_up_to_date>:
 8018328:	8a01      	ldrh	r1, [r0, #16]
 801832a:	8a40      	ldrh	r0, [r0, #18]
 801832c:	b508      	push	{r3, lr}
 801832e:	f000 f961 	bl	80185f4 <uxr_seq_num_cmp>
 8018332:	fab0 f080 	clz	r0, r0
 8018336:	0940      	lsrs	r0, r0, #5
 8018338:	bd08      	pop	{r3, pc}
 801833a:	bf00      	nop

0801833c <get_available_free_slots>:
 801833c:	8901      	ldrh	r1, [r0, #8]
 801833e:	b1c1      	cbz	r1, 8018372 <get_available_free_slots+0x36>
 8018340:	b530      	push	{r4, r5, lr}
 8018342:	2200      	movs	r2, #0
 8018344:	6843      	ldr	r3, [r0, #4]
 8018346:	6805      	ldr	r5, [r0, #0]
 8018348:	7b04      	ldrb	r4, [r0, #12]
 801834a:	fbb3 fef1 	udiv	lr, r3, r1
 801834e:	4610      	mov	r0, r2
 8018350:	b293      	uxth	r3, r2
 8018352:	fbb3 fcf1 	udiv	ip, r3, r1
 8018356:	fb01 331c 	mls	r3, r1, ip, r3
 801835a:	b29b      	uxth	r3, r3
 801835c:	fb0e f303 	mul.w	r3, lr, r3
 8018360:	3201      	adds	r2, #1
 8018362:	58eb      	ldr	r3, [r5, r3]
 8018364:	429c      	cmp	r4, r3
 8018366:	bf04      	itt	eq
 8018368:	3001      	addeq	r0, #1
 801836a:	b280      	uxtheq	r0, r0
 801836c:	4291      	cmp	r1, r2
 801836e:	d1ef      	bne.n	8018350 <get_available_free_slots+0x14>
 8018370:	bd30      	pop	{r4, r5, pc}
 8018372:	4608      	mov	r0, r1
 8018374:	4770      	bx	lr
 8018376:	bf00      	nop

08018378 <uxr_buffer_request_data>:
 8018378:	b530      	push	{r4, r5, lr}
 801837a:	b095      	sub	sp, #84	@ 0x54
 801837c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8018380:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8018382:	f88d 301c 	strb.w	r3, [sp, #28]
 8018386:	2200      	movs	r2, #0
 8018388:	2d00      	cmp	r5, #0
 801838a:	bf14      	ite	ne
 801838c:	2101      	movne	r1, #1
 801838e:	4611      	moveq	r1, r2
 8018390:	4604      	mov	r4, r0
 8018392:	f88d 201d 	strb.w	r2, [sp, #29]
 8018396:	f88d 201e 	strb.w	r2, [sp, #30]
 801839a:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801839e:	d021      	beq.n	80183e4 <uxr_buffer_request_data+0x6c>
 80183a0:	682a      	ldr	r2, [r5, #0]
 80183a2:	686b      	ldr	r3, [r5, #4]
 80183a4:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 80183a8:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80183ac:	2210      	movs	r2, #16
 80183ae:	2308      	movs	r3, #8
 80183b0:	2100      	movs	r1, #0
 80183b2:	e9cd 3100 	strd	r3, r1, [sp]
 80183b6:	4620      	mov	r0, r4
 80183b8:	9905      	ldr	r1, [sp, #20]
 80183ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80183bc:	f7f7 fdd8 	bl	800ff70 <uxr_prepare_stream_to_write_submessage>
 80183c0:	b918      	cbnz	r0, 80183ca <uxr_buffer_request_data+0x52>
 80183c2:	4604      	mov	r4, r0
 80183c4:	4620      	mov	r0, r4
 80183c6:	b015      	add	sp, #84	@ 0x54
 80183c8:	bd30      	pop	{r4, r5, pc}
 80183ca:	9904      	ldr	r1, [sp, #16]
 80183cc:	aa06      	add	r2, sp, #24
 80183ce:	4620      	mov	r0, r4
 80183d0:	f7f7 ff08 	bl	80101e4 <uxr_init_base_object_request>
 80183d4:	a906      	add	r1, sp, #24
 80183d6:	4604      	mov	r4, r0
 80183d8:	a80c      	add	r0, sp, #48	@ 0x30
 80183da:	f7f9 fe39 	bl	8012050 <uxr_serialize_READ_DATA_Payload>
 80183de:	4620      	mov	r0, r4
 80183e0:	b015      	add	sp, #84	@ 0x54
 80183e2:	bd30      	pop	{r4, r5, pc}
 80183e4:	2208      	movs	r2, #8
 80183e6:	e7e2      	b.n	80183ae <uxr_buffer_request_data+0x36>

080183e8 <uxr_buffer_cancel_data>:
 80183e8:	b510      	push	{r4, lr}
 80183ea:	b094      	sub	sp, #80	@ 0x50
 80183ec:	2300      	movs	r3, #0
 80183ee:	9301      	str	r3, [sp, #4]
 80183f0:	9205      	str	r2, [sp, #20]
 80183f2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80183f6:	2201      	movs	r2, #1
 80183f8:	f88d 301e 	strb.w	r3, [sp, #30]
 80183fc:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8018400:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8018404:	2308      	movs	r3, #8
 8018406:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801840a:	9300      	str	r3, [sp, #0]
 801840c:	2210      	movs	r2, #16
 801840e:	ab0c      	add	r3, sp, #48	@ 0x30
 8018410:	4604      	mov	r4, r0
 8018412:	f7f7 fdad 	bl	800ff70 <uxr_prepare_stream_to_write_submessage>
 8018416:	b918      	cbnz	r0, 8018420 <uxr_buffer_cancel_data+0x38>
 8018418:	4604      	mov	r4, r0
 801841a:	4620      	mov	r0, r4
 801841c:	b014      	add	sp, #80	@ 0x50
 801841e:	bd10      	pop	{r4, pc}
 8018420:	9905      	ldr	r1, [sp, #20]
 8018422:	aa06      	add	r2, sp, #24
 8018424:	4620      	mov	r0, r4
 8018426:	f7f7 fedd 	bl	80101e4 <uxr_init_base_object_request>
 801842a:	a906      	add	r1, sp, #24
 801842c:	4604      	mov	r4, r0
 801842e:	a80c      	add	r0, sp, #48	@ 0x30
 8018430:	f7f9 fe0e 	bl	8012050 <uxr_serialize_READ_DATA_Payload>
 8018434:	4620      	mov	r0, r4
 8018436:	b014      	add	sp, #80	@ 0x50
 8018438:	bd10      	pop	{r4, pc}
 801843a:	bf00      	nop

0801843c <read_submessage_format>:
 801843c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018440:	b095      	sub	sp, #84	@ 0x54
 8018442:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8018446:	b113      	cbz	r3, 801844e <read_submessage_format+0x12>
 8018448:	b015      	add	sp, #84	@ 0x54
 801844a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801844e:	460c      	mov	r4, r1
 8018450:	4616      	mov	r6, r2
 8018452:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8018456:	461d      	mov	r5, r3
 8018458:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801845a:	9304      	str	r3, [sp, #16]
 801845c:	1a52      	subs	r2, r2, r1
 801845e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018460:	9305      	str	r3, [sp, #20]
 8018462:	4680      	mov	r8, r0
 8018464:	a80c      	add	r0, sp, #48	@ 0x30
 8018466:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 801846a:	f7f3 fc21 	bl	800bcb0 <ucdr_init_buffer>
 801846e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018472:	a80c      	add	r0, sp, #48	@ 0x30
 8018474:	f7f3 fbf0 	bl	800bc58 <ucdr_set_on_full_buffer_callback>
 8018478:	69e3      	ldr	r3, [r4, #28]
 801847a:	b35b      	cbz	r3, 80184d4 <read_submessage_format+0x98>
 801847c:	f1b9 0f07 	cmp.w	r9, #7
 8018480:	751d      	strb	r5, [r3, #20]
 8018482:	d043      	beq.n	801850c <read_submessage_format+0xd0>
 8018484:	f1b9 0f08 	cmp.w	r9, #8
 8018488:	d032      	beq.n	80184f0 <read_submessage_format+0xb4>
 801848a:	f1b9 0f06 	cmp.w	r9, #6
 801848e:	d008      	beq.n	80184a2 <read_submessage_format+0x66>
 8018490:	2201      	movs	r2, #1
 8018492:	751a      	strb	r2, [r3, #20]
 8018494:	4631      	mov	r1, r6
 8018496:	4620      	mov	r0, r4
 8018498:	f7f3 fc5a 	bl	800bd50 <ucdr_advance_buffer>
 801849c:	b015      	add	sp, #84	@ 0x54
 801849e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80184a2:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 80184a6:	2d00      	cmp	r5, #0
 80184a8:	d0f2      	beq.n	8018490 <read_submessage_format+0x54>
 80184aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80184ac:	e9cd 3600 	strd	r3, r6, [sp]
 80184b0:	2306      	movs	r3, #6
 80184b2:	f88d 3016 	strb.w	r3, [sp, #22]
 80184b6:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 80184ba:	9302      	str	r3, [sp, #8]
 80184bc:	463a      	mov	r2, r7
 80184be:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80184c2:	4640      	mov	r0, r8
 80184c4:	47a8      	blx	r5
 80184c6:	69e3      	ldr	r3, [r4, #28]
 80184c8:	2201      	movs	r2, #1
 80184ca:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d1de      	bne.n	8018490 <read_submessage_format+0x54>
 80184d2:	e7df      	b.n	8018494 <read_submessage_format+0x58>
 80184d4:	f1b9 0f07 	cmp.w	r9, #7
 80184d8:	d032      	beq.n	8018540 <read_submessage_format+0x104>
 80184da:	f1b9 0f08 	cmp.w	r9, #8
 80184de:	d02a      	beq.n	8018536 <read_submessage_format+0xfa>
 80184e0:	f1b9 0f06 	cmp.w	r9, #6
 80184e4:	d1d6      	bne.n	8018494 <read_submessage_format+0x58>
 80184e6:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 80184ea:	2d00      	cmp	r5, #0
 80184ec:	d1dd      	bne.n	80184aa <read_submessage_format+0x6e>
 80184ee:	e7d1      	b.n	8018494 <read_submessage_format+0x58>
 80184f0:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 80184f4:	2a00      	cmp	r2, #0
 80184f6:	d0cb      	beq.n	8018490 <read_submessage_format+0x54>
 80184f8:	a906      	add	r1, sp, #24
 80184fa:	a80c      	add	r0, sp, #48	@ 0x30
 80184fc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80184fe:	f7f9 fe7b 	bl	80121f8 <uxr_deserialize_SampleIdentity>
 8018502:	bb28      	cbnz	r0, 8018550 <read_submessage_format+0x114>
 8018504:	69e3      	ldr	r3, [r4, #28]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d1c2      	bne.n	8018490 <read_submessage_format+0x54>
 801850a:	e7c3      	b.n	8018494 <read_submessage_format+0x58>
 801850c:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8018510:	b16a      	cbz	r2, 801852e <read_submessage_format+0xf2>
 8018512:	a906      	add	r1, sp, #24
 8018514:	a80c      	add	r0, sp, #48	@ 0x30
 8018516:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018518:	f7f9 fb3a 	bl	8011b90 <uxr_deserialize_BaseObjectRequest>
 801851c:	2800      	cmp	r0, #0
 801851e:	d13a      	bne.n	8018596 <read_submessage_format+0x15a>
 8018520:	68a2      	ldr	r2, [r4, #8]
 8018522:	69e3      	ldr	r3, [r4, #28]
 8018524:	4432      	add	r2, r6
 8018526:	60a2      	str	r2, [r4, #8]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d1b1      	bne.n	8018490 <read_submessage_format+0x54>
 801852c:	e7b2      	b.n	8018494 <read_submessage_format+0x58>
 801852e:	68a2      	ldr	r2, [r4, #8]
 8018530:	4432      	add	r2, r6
 8018532:	60a2      	str	r2, [r4, #8]
 8018534:	e7ac      	b.n	8018490 <read_submessage_format+0x54>
 8018536:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 801853a:	2b00      	cmp	r3, #0
 801853c:	d1dc      	bne.n	80184f8 <read_submessage_format+0xbc>
 801853e:	e7a9      	b.n	8018494 <read_submessage_format+0x58>
 8018540:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 8018544:	2b00      	cmp	r3, #0
 8018546:	d1e4      	bne.n	8018512 <read_submessage_format+0xd6>
 8018548:	68a3      	ldr	r3, [r4, #8]
 801854a:	4433      	add	r3, r6
 801854c:	60a3      	str	r3, [r4, #8]
 801854e:	e7a1      	b.n	8018494 <read_submessage_format+0x58>
 8018550:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8018554:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018556:	1a52      	subs	r2, r2, r1
 8018558:	1aed      	subs	r5, r5, r3
 801855a:	a80c      	add	r0, sp, #48	@ 0x30
 801855c:	f7f3 fba8 	bl	800bcb0 <ucdr_init_buffer>
 8018560:	4435      	add	r5, r6
 8018562:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018566:	a80c      	add	r0, sp, #48	@ 0x30
 8018568:	f7f3 fb76 	bl	800bc58 <ucdr_set_on_full_buffer_callback>
 801856c:	b2ad      	uxth	r5, r5
 801856e:	ab0c      	add	r3, sp, #48	@ 0x30
 8018570:	9300      	str	r3, [sp, #0]
 8018572:	9501      	str	r5, [sp, #4]
 8018574:	2108      	movs	r1, #8
 8018576:	f88d 1016 	strb.w	r1, [sp, #22]
 801857a:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 801857e:	9102      	str	r1, [sp, #8]
 8018580:	ab06      	add	r3, sp, #24
 8018582:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 8018586:	9905      	ldr	r1, [sp, #20]
 8018588:	463a      	mov	r2, r7
 801858a:	4640      	mov	r0, r8
 801858c:	47a8      	blx	r5
 801858e:	2301      	movs	r3, #1
 8018590:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8018594:	e7b6      	b.n	8018504 <read_submessage_format+0xc8>
 8018596:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801859a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801859c:	1a52      	subs	r2, r2, r1
 801859e:	1aed      	subs	r5, r5, r3
 80185a0:	a80c      	add	r0, sp, #48	@ 0x30
 80185a2:	f7f3 fb85 	bl	800bcb0 <ucdr_init_buffer>
 80185a6:	4435      	add	r5, r6
 80185a8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80185ac:	a80c      	add	r0, sp, #48	@ 0x30
 80185ae:	f7f3 fb53 	bl	800bc58 <ucdr_set_on_full_buffer_callback>
 80185b2:	b2ad      	uxth	r5, r5
 80185b4:	ab0c      	add	r3, sp, #48	@ 0x30
 80185b6:	9300      	str	r3, [sp, #0]
 80185b8:	9501      	str	r5, [sp, #4]
 80185ba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80185be:	2107      	movs	r1, #7
 80185c0:	f88d 1016 	strb.w	r1, [sp, #22]
 80185c4:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 80185c8:	9102      	str	r1, [sp, #8]
 80185ca:	ba5b      	rev16	r3, r3
 80185cc:	b29b      	uxth	r3, r3
 80185ce:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 80185d2:	9905      	ldr	r1, [sp, #20]
 80185d4:	463a      	mov	r2, r7
 80185d6:	4640      	mov	r0, r8
 80185d8:	47a8      	blx	r5
 80185da:	2301      	movs	r3, #1
 80185dc:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 80185e0:	e79e      	b.n	8018520 <read_submessage_format+0xe4>
 80185e2:	bf00      	nop

080185e4 <uxr_seq_num_add>:
 80185e4:	4408      	add	r0, r1
 80185e6:	b280      	uxth	r0, r0
 80185e8:	4770      	bx	lr
 80185ea:	bf00      	nop

080185ec <uxr_seq_num_sub>:
 80185ec:	1a40      	subs	r0, r0, r1
 80185ee:	b280      	uxth	r0, r0
 80185f0:	4770      	bx	lr
 80185f2:	bf00      	nop

080185f4 <uxr_seq_num_cmp>:
 80185f4:	4288      	cmp	r0, r1
 80185f6:	d010      	beq.n	801861a <uxr_seq_num_cmp+0x26>
 80185f8:	d207      	bcs.n	801860a <uxr_seq_num_cmp+0x16>
 80185fa:	1a09      	subs	r1, r1, r0
 80185fc:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8018600:	bfb4      	ite	lt
 8018602:	f04f 30ff 	movlt.w	r0, #4294967295
 8018606:	2001      	movge	r0, #1
 8018608:	4770      	bx	lr
 801860a:	1a41      	subs	r1, r0, r1
 801860c:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8018610:	bfcc      	ite	gt
 8018612:	f04f 30ff 	movgt.w	r0, #4294967295
 8018616:	2001      	movle	r0, #1
 8018618:	4770      	bx	lr
 801861a:	2000      	movs	r0, #0
 801861c:	4770      	bx	lr
 801861e:	bf00      	nop

08018620 <rcl_get_automatic_discovery_range>:
 8018620:	b530      	push	{r4, r5, lr}
 8018622:	b083      	sub	sp, #12
 8018624:	2300      	movs	r3, #0
 8018626:	9301      	str	r3, [sp, #4]
 8018628:	b1c0      	cbz	r0, 801865c <rcl_get_automatic_discovery_range+0x3c>
 801862a:	4604      	mov	r4, r0
 801862c:	a901      	add	r1, sp, #4
 801862e:	4818      	ldr	r0, [pc, #96]	@ (8018690 <rcl_get_automatic_discovery_range+0x70>)
 8018630:	f7fc ffb8 	bl	80155a4 <rcutils_get_env>
 8018634:	b110      	cbz	r0, 801863c <rcl_get_automatic_discovery_range+0x1c>
 8018636:	2001      	movs	r0, #1
 8018638:	b003      	add	sp, #12
 801863a:	bd30      	pop	{r4, r5, pc}
 801863c:	9d01      	ldr	r5, [sp, #4]
 801863e:	782b      	ldrb	r3, [r5, #0]
 8018640:	b923      	cbnz	r3, 801864c <rcl_get_automatic_discovery_range+0x2c>
 8018642:	2303      	movs	r3, #3
 8018644:	7023      	strb	r3, [r4, #0]
 8018646:	2000      	movs	r0, #0
 8018648:	b003      	add	sp, #12
 801864a:	bd30      	pop	{r4, r5, pc}
 801864c:	4911      	ldr	r1, [pc, #68]	@ (8018694 <rcl_get_automatic_discovery_range+0x74>)
 801864e:	4628      	mov	r0, r5
 8018650:	f7e7 fdde 	bl	8000210 <strcmp>
 8018654:	b928      	cbnz	r0, 8018662 <rcl_get_automatic_discovery_range+0x42>
 8018656:	2301      	movs	r3, #1
 8018658:	7023      	strb	r3, [r4, #0]
 801865a:	e7f4      	b.n	8018646 <rcl_get_automatic_discovery_range+0x26>
 801865c:	200b      	movs	r0, #11
 801865e:	b003      	add	sp, #12
 8018660:	bd30      	pop	{r4, r5, pc}
 8018662:	490d      	ldr	r1, [pc, #52]	@ (8018698 <rcl_get_automatic_discovery_range+0x78>)
 8018664:	4628      	mov	r0, r5
 8018666:	f7e7 fdd3 	bl	8000210 <strcmp>
 801866a:	b168      	cbz	r0, 8018688 <rcl_get_automatic_discovery_range+0x68>
 801866c:	490b      	ldr	r1, [pc, #44]	@ (801869c <rcl_get_automatic_discovery_range+0x7c>)
 801866e:	4628      	mov	r0, r5
 8018670:	f7e7 fdce 	bl	8000210 <strcmp>
 8018674:	2800      	cmp	r0, #0
 8018676:	d0e4      	beq.n	8018642 <rcl_get_automatic_discovery_range+0x22>
 8018678:	4909      	ldr	r1, [pc, #36]	@ (80186a0 <rcl_get_automatic_discovery_range+0x80>)
 801867a:	4628      	mov	r0, r5
 801867c:	f7e7 fdc8 	bl	8000210 <strcmp>
 8018680:	b910      	cbnz	r0, 8018688 <rcl_get_automatic_discovery_range+0x68>
 8018682:	2304      	movs	r3, #4
 8018684:	7023      	strb	r3, [r4, #0]
 8018686:	e7de      	b.n	8018646 <rcl_get_automatic_discovery_range+0x26>
 8018688:	2302      	movs	r3, #2
 801868a:	7023      	strb	r3, [r4, #0]
 801868c:	e7db      	b.n	8018646 <rcl_get_automatic_discovery_range+0x26>
 801868e:	bf00      	nop
 8018690:	0801c118 	.word	0x0801c118
 8018694:	0801c138 	.word	0x0801c138
 8018698:	0801c13c 	.word	0x0801c13c
 801869c:	0801c148 	.word	0x0801c148
 80186a0:	0801c150 	.word	0x0801c150

080186a4 <rcl_automatic_discovery_range_to_string>:
 80186a4:	2804      	cmp	r0, #4
 80186a6:	bf9a      	itte	ls
 80186a8:	4b02      	ldrls	r3, [pc, #8]	@ (80186b4 <rcl_automatic_discovery_range_to_string+0x10>)
 80186aa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80186ae:	2000      	movhi	r0, #0
 80186b0:	4770      	bx	lr
 80186b2:	bf00      	nop
 80186b4:	0801cd4c 	.word	0x0801cd4c

080186b8 <rcl_get_discovery_static_peers>:
 80186b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186bc:	b08c      	sub	sp, #48	@ 0x30
 80186be:	2300      	movs	r3, #0
 80186c0:	9304      	str	r3, [sp, #16]
 80186c2:	2800      	cmp	r0, #0
 80186c4:	d04e      	beq.n	8018764 <rcl_get_discovery_static_peers+0xac>
 80186c6:	460d      	mov	r5, r1
 80186c8:	2900      	cmp	r1, #0
 80186ca:	d04b      	beq.n	8018764 <rcl_get_discovery_static_peers+0xac>
 80186cc:	4604      	mov	r4, r0
 80186ce:	a904      	add	r1, sp, #16
 80186d0:	482d      	ldr	r0, [pc, #180]	@ (8018788 <rcl_get_discovery_static_peers+0xd0>)
 80186d2:	f7fc ff67 	bl	80155a4 <rcutils_get_env>
 80186d6:	b118      	cbz	r0, 80186e0 <rcl_get_discovery_static_peers+0x28>
 80186d8:	2001      	movs	r0, #1
 80186da:	b00c      	add	sp, #48	@ 0x30
 80186dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186e0:	9b04      	ldr	r3, [sp, #16]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d0f8      	beq.n	80186d8 <rcl_get_discovery_static_peers+0x20>
 80186e6:	af05      	add	r7, sp, #20
 80186e8:	4638      	mov	r0, r7
 80186ea:	f000 fc7f 	bl	8018fec <rcutils_get_zero_initialized_string_array>
 80186ee:	f105 0308 	add.w	r3, r5, #8
 80186f2:	9703      	str	r7, [sp, #12]
 80186f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80186f8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80186fc:	9804      	ldr	r0, [sp, #16]
 80186fe:	e895 000c 	ldmia.w	r5, {r2, r3}
 8018702:	213b      	movs	r1, #59	@ 0x3b
 8018704:	f000 fbc2 	bl	8018e8c <rcutils_split>
 8018708:	2800      	cmp	r0, #0
 801870a:	d1e5      	bne.n	80186d8 <rcl_get_discovery_static_peers+0x20>
 801870c:	9905      	ldr	r1, [sp, #20]
 801870e:	462a      	mov	r2, r5
 8018710:	4620      	mov	r0, r4
 8018712:	f000 fcc3 	bl	801909c <rmw_discovery_options_init>
 8018716:	4606      	mov	r6, r0
 8018718:	bb90      	cbnz	r0, 8018780 <rcl_get_discovery_static_peers+0xc8>
 801871a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801871e:	f1b9 0f00 	cmp.w	r9, #0
 8018722:	d026      	beq.n	8018772 <rcl_get_discovery_static_peers+0xba>
 8018724:	f8dd a018 	ldr.w	sl, [sp, #24]
 8018728:	4680      	mov	r8, r0
 801872a:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 801872e:	4628      	mov	r0, r5
 8018730:	f7e7 fdce 	bl	80002d0 <strlen>
 8018734:	28ff      	cmp	r0, #255	@ 0xff
 8018736:	4629      	mov	r1, r5
 8018738:	ea4f 2506 	mov.w	r5, r6, lsl #8
 801873c:	d816      	bhi.n	801876c <rcl_get_discovery_static_peers+0xb4>
 801873e:	6860      	ldr	r0, [r4, #4]
 8018740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018744:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8018748:	f001 fc1d 	bl	8019f86 <strncpy>
 801874c:	6863      	ldr	r3, [r4, #4]
 801874e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8018752:	3601      	adds	r6, #1
 8018754:	442b      	add	r3, r5
 8018756:	454e      	cmp	r6, r9
 8018758:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 801875c:	d209      	bcs.n	8018772 <rcl_get_discovery_static_peers+0xba>
 801875e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8018762:	e7e2      	b.n	801872a <rcl_get_discovery_static_peers+0x72>
 8018764:	200b      	movs	r0, #11
 8018766:	b00c      	add	sp, #48	@ 0x30
 8018768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801876c:	3601      	adds	r6, #1
 801876e:	454e      	cmp	r6, r9
 8018770:	d3db      	bcc.n	801872a <rcl_get_discovery_static_peers+0x72>
 8018772:	4638      	mov	r0, r7
 8018774:	f000 fc6c 	bl	8019050 <rcutils_string_array_fini>
 8018778:	3800      	subs	r0, #0
 801877a:	bf18      	it	ne
 801877c:	2001      	movne	r0, #1
 801877e:	e7ac      	b.n	80186da <rcl_get_discovery_static_peers+0x22>
 8018780:	f7f9 ff98 	bl	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 8018784:	e7a9      	b.n	80186da <rcl_get_discovery_static_peers+0x22>
 8018786:	bf00      	nop
 8018788:	0801c160 	.word	0x0801c160

0801878c <rcl_get_default_domain_id>:
 801878c:	b530      	push	{r4, r5, lr}
 801878e:	b083      	sub	sp, #12
 8018790:	2300      	movs	r3, #0
 8018792:	9300      	str	r3, [sp, #0]
 8018794:	b1f0      	cbz	r0, 80187d4 <rcl_get_default_domain_id+0x48>
 8018796:	4604      	mov	r4, r0
 8018798:	4669      	mov	r1, sp
 801879a:	4812      	ldr	r0, [pc, #72]	@ (80187e4 <rcl_get_default_domain_id+0x58>)
 801879c:	f7fc ff02 	bl	80155a4 <rcutils_get_env>
 80187a0:	4602      	mov	r2, r0
 80187a2:	b108      	cbz	r0, 80187a8 <rcl_get_default_domain_id+0x1c>
 80187a4:	2001      	movs	r0, #1
 80187a6:	e004      	b.n	80187b2 <rcl_get_default_domain_id+0x26>
 80187a8:	9800      	ldr	r0, [sp, #0]
 80187aa:	b108      	cbz	r0, 80187b0 <rcl_get_default_domain_id+0x24>
 80187ac:	7803      	ldrb	r3, [r0, #0]
 80187ae:	b913      	cbnz	r3, 80187b6 <rcl_get_default_domain_id+0x2a>
 80187b0:	2000      	movs	r0, #0
 80187b2:	b003      	add	sp, #12
 80187b4:	bd30      	pop	{r4, r5, pc}
 80187b6:	a901      	add	r1, sp, #4
 80187b8:	9201      	str	r2, [sp, #4]
 80187ba:	f001 f923 	bl	8019a04 <strtoul>
 80187be:	4605      	mov	r5, r0
 80187c0:	b158      	cbz	r0, 80187da <rcl_get_default_domain_id+0x4e>
 80187c2:	1c43      	adds	r3, r0, #1
 80187c4:	d104      	bne.n	80187d0 <rcl_get_default_domain_id+0x44>
 80187c6:	f001 fc5d 	bl	801a084 <__errno>
 80187ca:	6803      	ldr	r3, [r0, #0]
 80187cc:	2b22      	cmp	r3, #34	@ 0x22
 80187ce:	d0e9      	beq.n	80187a4 <rcl_get_default_domain_id+0x18>
 80187d0:	6025      	str	r5, [r4, #0]
 80187d2:	e7ed      	b.n	80187b0 <rcl_get_default_domain_id+0x24>
 80187d4:	200b      	movs	r0, #11
 80187d6:	b003      	add	sp, #12
 80187d8:	bd30      	pop	{r4, r5, pc}
 80187da:	9b01      	ldr	r3, [sp, #4]
 80187dc:	781b      	ldrb	r3, [r3, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d0f6      	beq.n	80187d0 <rcl_get_default_domain_id+0x44>
 80187e2:	e7df      	b.n	80187a4 <rcl_get_default_domain_id+0x18>
 80187e4:	0801c240 	.word	0x0801c240

080187e8 <rcl_expand_topic_name>:
 80187e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187ec:	b08b      	sub	sp, #44	@ 0x2c
 80187ee:	9306      	str	r3, [sp, #24]
 80187f0:	2800      	cmp	r0, #0
 80187f2:	f000 80ad 	beq.w	8018950 <rcl_expand_topic_name+0x168>
 80187f6:	460e      	mov	r6, r1
 80187f8:	2900      	cmp	r1, #0
 80187fa:	f000 80a9 	beq.w	8018950 <rcl_expand_topic_name+0x168>
 80187fe:	4617      	mov	r7, r2
 8018800:	2a00      	cmp	r2, #0
 8018802:	f000 80a5 	beq.w	8018950 <rcl_expand_topic_name+0x168>
 8018806:	2b00      	cmp	r3, #0
 8018808:	f000 80a2 	beq.w	8018950 <rcl_expand_topic_name+0x168>
 801880c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801880e:	2b00      	cmp	r3, #0
 8018810:	f000 809e 	beq.w	8018950 <rcl_expand_topic_name+0x168>
 8018814:	2200      	movs	r2, #0
 8018816:	a909      	add	r1, sp, #36	@ 0x24
 8018818:	4680      	mov	r8, r0
 801881a:	f000 fa45 	bl	8018ca8 <rcl_validate_topic_name>
 801881e:	4605      	mov	r5, r0
 8018820:	2800      	cmp	r0, #0
 8018822:	f040 8096 	bne.w	8018952 <rcl_expand_topic_name+0x16a>
 8018826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018828:	2b00      	cmp	r3, #0
 801882a:	f040 809a 	bne.w	8018962 <rcl_expand_topic_name+0x17a>
 801882e:	4602      	mov	r2, r0
 8018830:	a909      	add	r1, sp, #36	@ 0x24
 8018832:	4630      	mov	r0, r6
 8018834:	f7fd fb0e 	bl	8015e54 <rmw_validate_node_name>
 8018838:	2800      	cmp	r0, #0
 801883a:	f040 808e 	bne.w	801895a <rcl_expand_topic_name+0x172>
 801883e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018840:	2a00      	cmp	r2, #0
 8018842:	f040 8093 	bne.w	801896c <rcl_expand_topic_name+0x184>
 8018846:	a909      	add	r1, sp, #36	@ 0x24
 8018848:	4638      	mov	r0, r7
 801884a:	f7fd fae5 	bl	8015e18 <rmw_validate_namespace>
 801884e:	2800      	cmp	r0, #0
 8018850:	f040 8083 	bne.w	801895a <rcl_expand_topic_name+0x172>
 8018854:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8018856:	2d00      	cmp	r5, #0
 8018858:	f040 80f5 	bne.w	8018a46 <rcl_expand_topic_name+0x25e>
 801885c:	217b      	movs	r1, #123	@ 0x7b
 801885e:	4640      	mov	r0, r8
 8018860:	f001 fb72 	bl	8019f48 <strchr>
 8018864:	f898 3000 	ldrb.w	r3, [r8]
 8018868:	2b2f      	cmp	r3, #47	@ 0x2f
 801886a:	4604      	mov	r4, r0
 801886c:	f000 809f 	beq.w	80189ae <rcl_expand_topic_name+0x1c6>
 8018870:	2b7e      	cmp	r3, #126	@ 0x7e
 8018872:	f040 80ea 	bne.w	8018a4a <rcl_expand_topic_name+0x262>
 8018876:	4638      	mov	r0, r7
 8018878:	f7e7 fd2a 	bl	80002d0 <strlen>
 801887c:	4a86      	ldr	r2, [pc, #536]	@ (8018a98 <rcl_expand_topic_name+0x2b0>)
 801887e:	4b87      	ldr	r3, [pc, #540]	@ (8018a9c <rcl_expand_topic_name+0x2b4>)
 8018880:	2801      	cmp	r0, #1
 8018882:	bf08      	it	eq
 8018884:	4613      	moveq	r3, r2
 8018886:	9302      	str	r3, [sp, #8]
 8018888:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018890:	f108 0301 	add.w	r3, r8, #1
 8018894:	9305      	str	r3, [sp, #20]
 8018896:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801889a:	9301      	str	r3, [sp, #4]
 801889c:	ab14      	add	r3, sp, #80	@ 0x50
 801889e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80188a0:	f7fc fe98 	bl	80155d4 <rcutils_format_string_limit>
 80188a4:	4682      	mov	sl, r0
 80188a6:	2800      	cmp	r0, #0
 80188a8:	f000 80e1 	beq.w	8018a6e <rcl_expand_topic_name+0x286>
 80188ac:	2c00      	cmp	r4, #0
 80188ae:	f000 8085 	beq.w	80189bc <rcl_expand_topic_name+0x1d4>
 80188b2:	217b      	movs	r1, #123	@ 0x7b
 80188b4:	f001 fb48 	bl	8019f48 <strchr>
 80188b8:	46d1      	mov	r9, sl
 80188ba:	4604      	mov	r4, r0
 80188bc:	9507      	str	r5, [sp, #28]
 80188be:	464d      	mov	r5, r9
 80188c0:	2c00      	cmp	r4, #0
 80188c2:	f000 80a1 	beq.w	8018a08 <rcl_expand_topic_name+0x220>
 80188c6:	217d      	movs	r1, #125	@ 0x7d
 80188c8:	4628      	mov	r0, r5
 80188ca:	f001 fb3d 	bl	8019f48 <strchr>
 80188ce:	eba0 0904 	sub.w	r9, r0, r4
 80188d2:	f109 0b01 	add.w	fp, r9, #1
 80188d6:	4872      	ldr	r0, [pc, #456]	@ (8018aa0 <rcl_expand_topic_name+0x2b8>)
 80188d8:	465a      	mov	r2, fp
 80188da:	4621      	mov	r1, r4
 80188dc:	f001 fb41 	bl	8019f62 <strncmp>
 80188e0:	2800      	cmp	r0, #0
 80188e2:	d069      	beq.n	80189b8 <rcl_expand_topic_name+0x1d0>
 80188e4:	486f      	ldr	r0, [pc, #444]	@ (8018aa4 <rcl_expand_topic_name+0x2bc>)
 80188e6:	465a      	mov	r2, fp
 80188e8:	4621      	mov	r1, r4
 80188ea:	f001 fb3a 	bl	8019f62 <strncmp>
 80188ee:	b130      	cbz	r0, 80188fe <rcl_expand_topic_name+0x116>
 80188f0:	486d      	ldr	r0, [pc, #436]	@ (8018aa8 <rcl_expand_topic_name+0x2c0>)
 80188f2:	465a      	mov	r2, fp
 80188f4:	4621      	mov	r1, r4
 80188f6:	f001 fb34 	bl	8019f62 <strncmp>
 80188fa:	2800      	cmp	r0, #0
 80188fc:	d138      	bne.n	8018970 <rcl_expand_topic_name+0x188>
 80188fe:	46b9      	mov	r9, r7
 8018900:	ab16      	add	r3, sp, #88	@ 0x58
 8018902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018906:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801890a:	ab14      	add	r3, sp, #80	@ 0x50
 801890c:	4620      	mov	r0, r4
 801890e:	cb0c      	ldmia	r3, {r2, r3}
 8018910:	4659      	mov	r1, fp
 8018912:	f7fc ffb3 	bl	801587c <rcutils_strndup>
 8018916:	4604      	mov	r4, r0
 8018918:	2800      	cmp	r0, #0
 801891a:	f000 8099 	beq.w	8018a50 <rcl_expand_topic_name+0x268>
 801891e:	464a      	mov	r2, r9
 8018920:	4628      	mov	r0, r5
 8018922:	ab14      	add	r3, sp, #80	@ 0x50
 8018924:	4621      	mov	r1, r4
 8018926:	f7fc fe8f 	bl	8015648 <rcutils_repl_str>
 801892a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801892c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801892e:	4605      	mov	r5, r0
 8018930:	4620      	mov	r0, r4
 8018932:	4798      	blx	r3
 8018934:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018936:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018938:	4650      	mov	r0, sl
 801893a:	4798      	blx	r3
 801893c:	2d00      	cmp	r5, #0
 801893e:	f000 8091 	beq.w	8018a64 <rcl_expand_topic_name+0x27c>
 8018942:	217b      	movs	r1, #123	@ 0x7b
 8018944:	4628      	mov	r0, r5
 8018946:	f001 faff 	bl	8019f48 <strchr>
 801894a:	46aa      	mov	sl, r5
 801894c:	4604      	mov	r4, r0
 801894e:	e7b7      	b.n	80188c0 <rcl_expand_topic_name+0xd8>
 8018950:	250b      	movs	r5, #11
 8018952:	4628      	mov	r0, r5
 8018954:	b00b      	add	sp, #44	@ 0x2c
 8018956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801895a:	f7f9 feab 	bl	80126b4 <rcl_convert_rmw_ret_to_rcl_ret>
 801895e:	4605      	mov	r5, r0
 8018960:	e7f7      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018962:	2567      	movs	r5, #103	@ 0x67
 8018964:	4628      	mov	r0, r5
 8018966:	b00b      	add	sp, #44	@ 0x2c
 8018968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801896c:	25c9      	movs	r5, #201	@ 0xc9
 801896e:	e7f0      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018970:	f109 32ff 	add.w	r2, r9, #4294967295
 8018974:	9806      	ldr	r0, [sp, #24]
 8018976:	1c61      	adds	r1, r4, #1
 8018978:	f7fd f89c 	bl	8015ab4 <rcutils_string_map_getn>
 801897c:	4681      	mov	r9, r0
 801897e:	2800      	cmp	r0, #0
 8018980:	d1be      	bne.n	8018900 <rcl_expand_topic_name+0x118>
 8018982:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018984:	ab16      	add	r3, sp, #88	@ 0x58
 8018986:	6010      	str	r0, [r2, #0]
 8018988:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801898c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8018990:	ab14      	add	r3, sp, #80	@ 0x50
 8018992:	cb0c      	ldmia	r3, {r2, r3}
 8018994:	4659      	mov	r1, fp
 8018996:	4620      	mov	r0, r4
 8018998:	f7fc ff70 	bl	801587c <rcutils_strndup>
 801899c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801899e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80189a0:	4798      	blx	r3
 80189a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80189a4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80189a6:	4650      	mov	r0, sl
 80189a8:	4798      	blx	r3
 80189aa:	2569      	movs	r5, #105	@ 0x69
 80189ac:	e7d1      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 80189ae:	2800      	cmp	r0, #0
 80189b0:	d061      	beq.n	8018a76 <rcl_expand_topic_name+0x28e>
 80189b2:	46c1      	mov	r9, r8
 80189b4:	46aa      	mov	sl, r5
 80189b6:	e781      	b.n	80188bc <rcl_expand_topic_name+0xd4>
 80189b8:	46b1      	mov	r9, r6
 80189ba:	e7a1      	b.n	8018900 <rcl_expand_topic_name+0x118>
 80189bc:	f89a 3000 	ldrb.w	r3, [sl]
 80189c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80189c2:	d01d      	beq.n	8018a00 <rcl_expand_topic_name+0x218>
 80189c4:	4638      	mov	r0, r7
 80189c6:	f7e7 fc83 	bl	80002d0 <strlen>
 80189ca:	4a38      	ldr	r2, [pc, #224]	@ (8018aac <rcl_expand_topic_name+0x2c4>)
 80189cc:	4b38      	ldr	r3, [pc, #224]	@ (8018ab0 <rcl_expand_topic_name+0x2c8>)
 80189ce:	f8cd a010 	str.w	sl, [sp, #16]
 80189d2:	2801      	cmp	r0, #1
 80189d4:	bf18      	it	ne
 80189d6:	4613      	movne	r3, r2
 80189d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80189dc:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80189e0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80189e2:	9703      	str	r7, [sp, #12]
 80189e4:	9200      	str	r2, [sp, #0]
 80189e6:	ab14      	add	r3, sp, #80	@ 0x50
 80189e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80189ea:	f7fc fdf3 	bl	80155d4 <rcutils_format_string_limit>
 80189ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80189f0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80189f2:	4604      	mov	r4, r0
 80189f4:	4650      	mov	r0, sl
 80189f6:	4798      	blx	r3
 80189f8:	46a2      	mov	sl, r4
 80189fa:	4653      	mov	r3, sl
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d036      	beq.n	8018a6e <rcl_expand_topic_name+0x286>
 8018a00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a02:	f8c3 a000 	str.w	sl, [r3]
 8018a06:	e7a4      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018a08:	4653      	mov	r3, sl
 8018a0a:	9d07      	ldr	r5, [sp, #28]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d1d5      	bne.n	80189bc <rcl_expand_topic_name+0x1d4>
 8018a10:	f898 3000 	ldrb.w	r3, [r8]
 8018a14:	2b2f      	cmp	r3, #47	@ 0x2f
 8018a16:	d0f3      	beq.n	8018a00 <rcl_expand_topic_name+0x218>
 8018a18:	4638      	mov	r0, r7
 8018a1a:	f7e7 fc59 	bl	80002d0 <strlen>
 8018a1e:	4a23      	ldr	r2, [pc, #140]	@ (8018aac <rcl_expand_topic_name+0x2c4>)
 8018a20:	4b23      	ldr	r3, [pc, #140]	@ (8018ab0 <rcl_expand_topic_name+0x2c8>)
 8018a22:	f8cd 8010 	str.w	r8, [sp, #16]
 8018a26:	2801      	cmp	r0, #1
 8018a28:	bf18      	it	ne
 8018a2a:	4613      	movne	r3, r2
 8018a2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8018a30:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8018a34:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018a36:	9703      	str	r7, [sp, #12]
 8018a38:	9200      	str	r2, [sp, #0]
 8018a3a:	ab14      	add	r3, sp, #80	@ 0x50
 8018a3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018a3e:	f7fc fdc9 	bl	80155d4 <rcutils_format_string_limit>
 8018a42:	4682      	mov	sl, r0
 8018a44:	e7d9      	b.n	80189fa <rcl_expand_topic_name+0x212>
 8018a46:	25ca      	movs	r5, #202	@ 0xca
 8018a48:	e783      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018a4a:	2800      	cmp	r0, #0
 8018a4c:	d1b1      	bne.n	80189b2 <rcl_expand_topic_name+0x1ca>
 8018a4e:	e7e3      	b.n	8018a18 <rcl_expand_topic_name+0x230>
 8018a50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a52:	6018      	str	r0, [r3, #0]
 8018a54:	f7f4 fb18 	bl	800d088 <rcutils_reset_error>
 8018a58:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018a5a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018a5c:	4650      	mov	r0, sl
 8018a5e:	4798      	blx	r3
 8018a60:	250a      	movs	r5, #10
 8018a62:	e776      	b.n	8018952 <rcl_expand_topic_name+0x16a>
 8018a64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a66:	601d      	str	r5, [r3, #0]
 8018a68:	f7f4 fb0e 	bl	800d088 <rcutils_reset_error>
 8018a6c:	e7f8      	b.n	8018a60 <rcl_expand_topic_name+0x278>
 8018a6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018a70:	2300      	movs	r3, #0
 8018a72:	6013      	str	r3, [r2, #0]
 8018a74:	e7f4      	b.n	8018a60 <rcl_expand_topic_name+0x278>
 8018a76:	ab17      	add	r3, sp, #92	@ 0x5c
 8018a78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018a7c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018a80:	ab14      	add	r3, sp, #80	@ 0x50
 8018a82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018a84:	4640      	mov	r0, r8
 8018a86:	f7fc fec3 	bl	8015810 <rcutils_strdup>
 8018a8a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018a8c:	6018      	str	r0, [r3, #0]
 8018a8e:	2800      	cmp	r0, #0
 8018a90:	f47f af5f 	bne.w	8018952 <rcl_expand_topic_name+0x16a>
 8018a94:	e7e8      	b.n	8018a68 <rcl_expand_topic_name+0x280>
 8018a96:	bf00      	nop
 8018a98:	0801bbb0 	.word	0x0801bbb0
 8018a9c:	0801c250 	.word	0x0801c250
 8018aa0:	0801c258 	.word	0x0801c258
 8018aa4:	0801c260 	.word	0x0801c260
 8018aa8:	0801c268 	.word	0x0801c268
 8018aac:	0801bd90 	.word	0x0801bd90
 8018ab0:	0801bbc0 	.word	0x0801bbc0

08018ab4 <rcl_get_default_topic_name_substitutions>:
 8018ab4:	2800      	cmp	r0, #0
 8018ab6:	bf0c      	ite	eq
 8018ab8:	200b      	moveq	r0, #11
 8018aba:	2000      	movne	r0, #0
 8018abc:	4770      	bx	lr
 8018abe:	bf00      	nop

08018ac0 <rcl_get_zero_initialized_guard_condition>:
 8018ac0:	4a03      	ldr	r2, [pc, #12]	@ (8018ad0 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ac8:	e883 0003 	stmia.w	r3, {r0, r1}
 8018acc:	4618      	mov	r0, r3
 8018ace:	4770      	bx	lr
 8018ad0:	0801cd60 	.word	0x0801cd60

08018ad4 <rcl_guard_condition_init>:
 8018ad4:	b082      	sub	sp, #8
 8018ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ad8:	b087      	sub	sp, #28
 8018ada:	ac0c      	add	r4, sp, #48	@ 0x30
 8018adc:	e884 000c 	stmia.w	r4, {r2, r3}
 8018ae0:	46a6      	mov	lr, r4
 8018ae2:	460d      	mov	r5, r1
 8018ae4:	4604      	mov	r4, r0
 8018ae6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018aea:	f10d 0c04 	add.w	ip, sp, #4
 8018aee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018af2:	f8de 3000 	ldr.w	r3, [lr]
 8018af6:	f8cc 3000 	str.w	r3, [ip]
 8018afa:	a801      	add	r0, sp, #4
 8018afc:	f7f4 fa98 	bl	800d030 <rcutils_allocator_is_valid>
 8018b00:	b338      	cbz	r0, 8018b52 <rcl_guard_condition_init+0x7e>
 8018b02:	b334      	cbz	r4, 8018b52 <rcl_guard_condition_init+0x7e>
 8018b04:	6866      	ldr	r6, [r4, #4]
 8018b06:	b9ee      	cbnz	r6, 8018b44 <rcl_guard_condition_init+0x70>
 8018b08:	b31d      	cbz	r5, 8018b52 <rcl_guard_condition_init+0x7e>
 8018b0a:	4628      	mov	r0, r5
 8018b0c:	f7f9 fdec 	bl	80126e8 <rcl_context_is_valid>
 8018b10:	b308      	cbz	r0, 8018b56 <rcl_guard_condition_init+0x82>
 8018b12:	9b01      	ldr	r3, [sp, #4]
 8018b14:	9905      	ldr	r1, [sp, #20]
 8018b16:	201c      	movs	r0, #28
 8018b18:	4798      	blx	r3
 8018b1a:	4607      	mov	r7, r0
 8018b1c:	6060      	str	r0, [r4, #4]
 8018b1e:	b310      	cbz	r0, 8018b66 <rcl_guard_condition_init+0x92>
 8018b20:	6828      	ldr	r0, [r5, #0]
 8018b22:	3028      	adds	r0, #40	@ 0x28
 8018b24:	f000 fc06 	bl	8019334 <rmw_create_guard_condition>
 8018b28:	6038      	str	r0, [r7, #0]
 8018b2a:	6860      	ldr	r0, [r4, #4]
 8018b2c:	6807      	ldr	r7, [r0, #0]
 8018b2e:	b1a7      	cbz	r7, 8018b5a <rcl_guard_condition_init+0x86>
 8018b30:	2301      	movs	r3, #1
 8018b32:	ac01      	add	r4, sp, #4
 8018b34:	7103      	strb	r3, [r0, #4]
 8018b36:	f100 0708 	add.w	r7, r0, #8
 8018b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b3c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018b3e:	6823      	ldr	r3, [r4, #0]
 8018b40:	603b      	str	r3, [r7, #0]
 8018b42:	e000      	b.n	8018b46 <rcl_guard_condition_init+0x72>
 8018b44:	2664      	movs	r6, #100	@ 0x64
 8018b46:	4630      	mov	r0, r6
 8018b48:	b007      	add	sp, #28
 8018b4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018b4e:	b002      	add	sp, #8
 8018b50:	4770      	bx	lr
 8018b52:	260b      	movs	r6, #11
 8018b54:	e7f7      	b.n	8018b46 <rcl_guard_condition_init+0x72>
 8018b56:	2665      	movs	r6, #101	@ 0x65
 8018b58:	e7f5      	b.n	8018b46 <rcl_guard_condition_init+0x72>
 8018b5a:	9b02      	ldr	r3, [sp, #8]
 8018b5c:	9905      	ldr	r1, [sp, #20]
 8018b5e:	4798      	blx	r3
 8018b60:	2601      	movs	r6, #1
 8018b62:	6067      	str	r7, [r4, #4]
 8018b64:	e7ef      	b.n	8018b46 <rcl_guard_condition_init+0x72>
 8018b66:	260a      	movs	r6, #10
 8018b68:	e7ed      	b.n	8018b46 <rcl_guard_condition_init+0x72>
 8018b6a:	bf00      	nop

08018b6c <rcl_guard_condition_init_from_rmw>:
 8018b6c:	b082      	sub	sp, #8
 8018b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b72:	b086      	sub	sp, #24
 8018b74:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018b78:	4604      	mov	r4, r0
 8018b7a:	f84c 3f04 	str.w	r3, [ip, #4]!
 8018b7e:	460e      	mov	r6, r1
 8018b80:	4617      	mov	r7, r2
 8018b82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018b86:	f10d 0e04 	add.w	lr, sp, #4
 8018b8a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018b8e:	f8dc 3000 	ldr.w	r3, [ip]
 8018b92:	f8ce 3000 	str.w	r3, [lr]
 8018b96:	a801      	add	r0, sp, #4
 8018b98:	f7f4 fa4a 	bl	800d030 <rcutils_allocator_is_valid>
 8018b9c:	b350      	cbz	r0, 8018bf4 <rcl_guard_condition_init_from_rmw+0x88>
 8018b9e:	b34c      	cbz	r4, 8018bf4 <rcl_guard_condition_init_from_rmw+0x88>
 8018ba0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018ba4:	f1b8 0f00 	cmp.w	r8, #0
 8018ba8:	d11e      	bne.n	8018be8 <rcl_guard_condition_init_from_rmw+0x7c>
 8018baa:	b31f      	cbz	r7, 8018bf4 <rcl_guard_condition_init_from_rmw+0x88>
 8018bac:	4638      	mov	r0, r7
 8018bae:	f7f9 fd9b 	bl	80126e8 <rcl_context_is_valid>
 8018bb2:	b328      	cbz	r0, 8018c00 <rcl_guard_condition_init_from_rmw+0x94>
 8018bb4:	9b01      	ldr	r3, [sp, #4]
 8018bb6:	9905      	ldr	r1, [sp, #20]
 8018bb8:	201c      	movs	r0, #28
 8018bba:	4798      	blx	r3
 8018bbc:	4605      	mov	r5, r0
 8018bbe:	6060      	str	r0, [r4, #4]
 8018bc0:	b358      	cbz	r0, 8018c1a <rcl_guard_condition_init_from_rmw+0xae>
 8018bc2:	b1fe      	cbz	r6, 8018c04 <rcl_guard_condition_init_from_rmw+0x98>
 8018bc4:	6006      	str	r6, [r0, #0]
 8018bc6:	f880 8004 	strb.w	r8, [r0, #4]
 8018bca:	ac01      	add	r4, sp, #4
 8018bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018bce:	f105 0c08 	add.w	ip, r5, #8
 8018bd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018bd6:	6823      	ldr	r3, [r4, #0]
 8018bd8:	f8cc 3000 	str.w	r3, [ip]
 8018bdc:	2000      	movs	r0, #0
 8018bde:	b006      	add	sp, #24
 8018be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018be4:	b002      	add	sp, #8
 8018be6:	4770      	bx	lr
 8018be8:	2064      	movs	r0, #100	@ 0x64
 8018bea:	b006      	add	sp, #24
 8018bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018bf0:	b002      	add	sp, #8
 8018bf2:	4770      	bx	lr
 8018bf4:	200b      	movs	r0, #11
 8018bf6:	b006      	add	sp, #24
 8018bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018bfc:	b002      	add	sp, #8
 8018bfe:	4770      	bx	lr
 8018c00:	2065      	movs	r0, #101	@ 0x65
 8018c02:	e7f2      	b.n	8018bea <rcl_guard_condition_init_from_rmw+0x7e>
 8018c04:	6838      	ldr	r0, [r7, #0]
 8018c06:	3028      	adds	r0, #40	@ 0x28
 8018c08:	f000 fb94 	bl	8019334 <rmw_create_guard_condition>
 8018c0c:	6028      	str	r0, [r5, #0]
 8018c0e:	6865      	ldr	r5, [r4, #4]
 8018c10:	682e      	ldr	r6, [r5, #0]
 8018c12:	b126      	cbz	r6, 8018c1e <rcl_guard_condition_init_from_rmw+0xb2>
 8018c14:	2301      	movs	r3, #1
 8018c16:	712b      	strb	r3, [r5, #4]
 8018c18:	e7d7      	b.n	8018bca <rcl_guard_condition_init_from_rmw+0x5e>
 8018c1a:	200a      	movs	r0, #10
 8018c1c:	e7e5      	b.n	8018bea <rcl_guard_condition_init_from_rmw+0x7e>
 8018c1e:	4628      	mov	r0, r5
 8018c20:	9b02      	ldr	r3, [sp, #8]
 8018c22:	9905      	ldr	r1, [sp, #20]
 8018c24:	4798      	blx	r3
 8018c26:	2001      	movs	r0, #1
 8018c28:	6066      	str	r6, [r4, #4]
 8018c2a:	e7de      	b.n	8018bea <rcl_guard_condition_init_from_rmw+0x7e>

08018c2c <rcl_guard_condition_fini>:
 8018c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c2e:	b1d8      	cbz	r0, 8018c68 <rcl_guard_condition_fini+0x3c>
 8018c30:	4604      	mov	r4, r0
 8018c32:	6840      	ldr	r0, [r0, #4]
 8018c34:	b158      	cbz	r0, 8018c4e <rcl_guard_condition_fini+0x22>
 8018c36:	6803      	ldr	r3, [r0, #0]
 8018c38:	68c6      	ldr	r6, [r0, #12]
 8018c3a:	6987      	ldr	r7, [r0, #24]
 8018c3c:	b153      	cbz	r3, 8018c54 <rcl_guard_condition_fini+0x28>
 8018c3e:	7905      	ldrb	r5, [r0, #4]
 8018c40:	b955      	cbnz	r5, 8018c58 <rcl_guard_condition_fini+0x2c>
 8018c42:	4639      	mov	r1, r7
 8018c44:	47b0      	blx	r6
 8018c46:	2300      	movs	r3, #0
 8018c48:	6063      	str	r3, [r4, #4]
 8018c4a:	4628      	mov	r0, r5
 8018c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c4e:	4605      	mov	r5, r0
 8018c50:	4628      	mov	r0, r5
 8018c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c54:	461d      	mov	r5, r3
 8018c56:	e7f4      	b.n	8018c42 <rcl_guard_condition_fini+0x16>
 8018c58:	4618      	mov	r0, r3
 8018c5a:	f000 fb7f 	bl	801935c <rmw_destroy_guard_condition>
 8018c5e:	1e05      	subs	r5, r0, #0
 8018c60:	bf18      	it	ne
 8018c62:	2501      	movne	r5, #1
 8018c64:	6860      	ldr	r0, [r4, #4]
 8018c66:	e7ec      	b.n	8018c42 <rcl_guard_condition_fini+0x16>
 8018c68:	250b      	movs	r5, #11
 8018c6a:	4628      	mov	r0, r5
 8018c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c6e:	bf00      	nop

08018c70 <rcl_guard_condition_get_default_options>:
 8018c70:	b510      	push	{r4, lr}
 8018c72:	4604      	mov	r4, r0
 8018c74:	f7f4 f9b0 	bl	800cfd8 <rcutils_get_default_allocator>
 8018c78:	4620      	mov	r0, r4
 8018c7a:	bd10      	pop	{r4, pc}

08018c7c <rcl_trigger_guard_condition>:
 8018c7c:	b148      	cbz	r0, 8018c92 <rcl_trigger_guard_condition+0x16>
 8018c7e:	b508      	push	{r3, lr}
 8018c80:	6843      	ldr	r3, [r0, #4]
 8018c82:	b143      	cbz	r3, 8018c96 <rcl_trigger_guard_condition+0x1a>
 8018c84:	6818      	ldr	r0, [r3, #0]
 8018c86:	f000 fb7d 	bl	8019384 <rmw_trigger_guard_condition>
 8018c8a:	3800      	subs	r0, #0
 8018c8c:	bf18      	it	ne
 8018c8e:	2001      	movne	r0, #1
 8018c90:	bd08      	pop	{r3, pc}
 8018c92:	200b      	movs	r0, #11
 8018c94:	4770      	bx	lr
 8018c96:	200b      	movs	r0, #11
 8018c98:	bd08      	pop	{r3, pc}
 8018c9a:	bf00      	nop

08018c9c <rcl_guard_condition_get_rmw_handle>:
 8018c9c:	b110      	cbz	r0, 8018ca4 <rcl_guard_condition_get_rmw_handle+0x8>
 8018c9e:	6840      	ldr	r0, [r0, #4]
 8018ca0:	b100      	cbz	r0, 8018ca4 <rcl_guard_condition_get_rmw_handle+0x8>
 8018ca2:	6800      	ldr	r0, [r0, #0]
 8018ca4:	4770      	bx	lr
 8018ca6:	bf00      	nop

08018ca8 <rcl_validate_topic_name>:
 8018ca8:	2800      	cmp	r0, #0
 8018caa:	d06b      	beq.n	8018d84 <rcl_validate_topic_name+0xdc>
 8018cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cb0:	460d      	mov	r5, r1
 8018cb2:	2900      	cmp	r1, #0
 8018cb4:	d06d      	beq.n	8018d92 <rcl_validate_topic_name+0xea>
 8018cb6:	4616      	mov	r6, r2
 8018cb8:	4604      	mov	r4, r0
 8018cba:	f7e7 fb09 	bl	80002d0 <strlen>
 8018cbe:	b190      	cbz	r0, 8018ce6 <rcl_validate_topic_name+0x3e>
 8018cc0:	7821      	ldrb	r1, [r4, #0]
 8018cc2:	4a71      	ldr	r2, [pc, #452]	@ (8018e88 <rcl_validate_topic_name+0x1e0>)
 8018cc4:	5c53      	ldrb	r3, [r2, r1]
 8018cc6:	f013 0304 	ands.w	r3, r3, #4
 8018cca:	d15d      	bne.n	8018d88 <rcl_validate_topic_name+0xe0>
 8018ccc:	1e47      	subs	r7, r0, #1
 8018cce:	f814 c007 	ldrb.w	ip, [r4, r7]
 8018cd2:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 8018cd6:	d10d      	bne.n	8018cf4 <rcl_validate_topic_name+0x4c>
 8018cd8:	2302      	movs	r3, #2
 8018cda:	602b      	str	r3, [r5, #0]
 8018cdc:	b146      	cbz	r6, 8018cf0 <rcl_validate_topic_name+0x48>
 8018cde:	6037      	str	r7, [r6, #0]
 8018ce0:	2000      	movs	r0, #0
 8018ce2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ce6:	2301      	movs	r3, #1
 8018ce8:	602b      	str	r3, [r5, #0]
 8018cea:	b10e      	cbz	r6, 8018cf0 <rcl_validate_topic_name+0x48>
 8018cec:	2300      	movs	r3, #0
 8018cee:	6033      	str	r3, [r6, #0]
 8018cf0:	2000      	movs	r0, #0
 8018cf2:	e7f6      	b.n	8018ce2 <rcl_validate_topic_name+0x3a>
 8018cf4:	f104 38ff 	add.w	r8, r4, #4294967295
 8018cf8:	469a      	mov	sl, r3
 8018cfa:	469e      	mov	lr, r3
 8018cfc:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8018d00:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 8018d04:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8018d08:	d85b      	bhi.n	8018dc2 <rcl_validate_topic_name+0x11a>
 8018d0a:	e8df f00c 	tbb	[pc, ip]
 8018d0e:	4463      	.short	0x4463
 8018d10:	44444444 	.word	0x44444444
 8018d14:	44444444 	.word	0x44444444
 8018d18:	5a5a5a44 	.word	0x5a5a5a44
 8018d1c:	5a5a5a5a 	.word	0x5a5a5a5a
 8018d20:	44444444 	.word	0x44444444
 8018d24:	44444444 	.word	0x44444444
 8018d28:	44444444 	.word	0x44444444
 8018d2c:	44444444 	.word	0x44444444
 8018d30:	44444444 	.word	0x44444444
 8018d34:	44444444 	.word	0x44444444
 8018d38:	5a5a4444 	.word	0x5a5a4444
 8018d3c:	5a2e5a5a 	.word	0x5a2e5a5a
 8018d40:	44444444 	.word	0x44444444
 8018d44:	44444444 	.word	0x44444444
 8018d48:	44444444 	.word	0x44444444
 8018d4c:	44444444 	.word	0x44444444
 8018d50:	44444444 	.word	0x44444444
 8018d54:	44444444 	.word	0x44444444
 8018d58:	5a284444 	.word	0x5a284444
 8018d5c:	6b73      	.short	0x6b73
 8018d5e:	f1ba 0f00 	cmp.w	sl, #0
 8018d62:	d13a      	bne.n	8018dda <rcl_validate_topic_name+0x132>
 8018d64:	4673      	mov	r3, lr
 8018d66:	f04f 0a01 	mov.w	sl, #1
 8018d6a:	f10e 0e01 	add.w	lr, lr, #1
 8018d6e:	4570      	cmp	r0, lr
 8018d70:	d1c4      	bne.n	8018cfc <rcl_validate_topic_name+0x54>
 8018d72:	f1ba 0f00 	cmp.w	sl, #0
 8018d76:	d048      	beq.n	8018e0a <rcl_validate_topic_name+0x162>
 8018d78:	2205      	movs	r2, #5
 8018d7a:	602a      	str	r2, [r5, #0]
 8018d7c:	2e00      	cmp	r6, #0
 8018d7e:	d0b7      	beq.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018d80:	6033      	str	r3, [r6, #0]
 8018d82:	e7b5      	b.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018d84:	200b      	movs	r0, #11
 8018d86:	4770      	bx	lr
 8018d88:	2304      	movs	r3, #4
 8018d8a:	602b      	str	r3, [r5, #0]
 8018d8c:	2e00      	cmp	r6, #0
 8018d8e:	d1ad      	bne.n	8018cec <rcl_validate_topic_name+0x44>
 8018d90:	e7ae      	b.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018d92:	200b      	movs	r0, #11
 8018d94:	e7a5      	b.n	8018ce2 <rcl_validate_topic_name+0x3a>
 8018d96:	f812 c009 	ldrb.w	ip, [r2, r9]
 8018d9a:	f01c 0f04 	tst.w	ip, #4
 8018d9e:	d0e4      	beq.n	8018d6a <rcl_validate_topic_name+0xc2>
 8018da0:	f1ba 0f00 	cmp.w	sl, #0
 8018da4:	d0e1      	beq.n	8018d6a <rcl_validate_topic_name+0xc2>
 8018da6:	f1be 0f00 	cmp.w	lr, #0
 8018daa:	d0de      	beq.n	8018d6a <rcl_validate_topic_name+0xc2>
 8018dac:	f10e 3cff 	add.w	ip, lr, #4294967295
 8018db0:	4563      	cmp	r3, ip
 8018db2:	d1da      	bne.n	8018d6a <rcl_validate_topic_name+0xc2>
 8018db4:	2309      	movs	r3, #9
 8018db6:	602b      	str	r3, [r5, #0]
 8018db8:	2e00      	cmp	r6, #0
 8018dba:	d099      	beq.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018dbc:	f8c6 e000 	str.w	lr, [r6]
 8018dc0:	e796      	b.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018dc2:	f1ba 0f00 	cmp.w	sl, #0
 8018dc6:	bf0c      	ite	eq
 8018dc8:	2303      	moveq	r3, #3
 8018dca:	2308      	movne	r3, #8
 8018dcc:	602b      	str	r3, [r5, #0]
 8018dce:	2e00      	cmp	r6, #0
 8018dd0:	d1f4      	bne.n	8018dbc <rcl_validate_topic_name+0x114>
 8018dd2:	e78d      	b.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018dd4:	f1ba 0f00 	cmp.w	sl, #0
 8018dd8:	d0c7      	beq.n	8018d6a <rcl_validate_topic_name+0xc2>
 8018dda:	2308      	movs	r3, #8
 8018ddc:	602b      	str	r3, [r5, #0]
 8018dde:	2e00      	cmp	r6, #0
 8018de0:	d1ec      	bne.n	8018dbc <rcl_validate_topic_name+0x114>
 8018de2:	e785      	b.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018de4:	f1be 0f00 	cmp.w	lr, #0
 8018de8:	d0bf      	beq.n	8018d6a <rcl_validate_topic_name+0xc2>
 8018dea:	2306      	movs	r3, #6
 8018dec:	602b      	str	r3, [r5, #0]
 8018dee:	2e00      	cmp	r6, #0
 8018df0:	d1e4      	bne.n	8018dbc <rcl_validate_topic_name+0x114>
 8018df2:	e77d      	b.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018df4:	f1ba 0f00 	cmp.w	sl, #0
 8018df8:	d104      	bne.n	8018e04 <rcl_validate_topic_name+0x15c>
 8018dfa:	2305      	movs	r3, #5
 8018dfc:	602b      	str	r3, [r5, #0]
 8018dfe:	2e00      	cmp	r6, #0
 8018e00:	d1dc      	bne.n	8018dbc <rcl_validate_topic_name+0x114>
 8018e02:	e775      	b.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018e04:	f04f 0a00 	mov.w	sl, #0
 8018e08:	e7af      	b.n	8018d6a <rcl_validate_topic_name+0xc2>
 8018e0a:	297e      	cmp	r1, #126	@ 0x7e
 8018e0c:	d01d      	beq.n	8018e4a <rcl_validate_topic_name+0x1a2>
 8018e0e:	2101      	movs	r1, #1
 8018e10:	e006      	b.n	8018e20 <rcl_validate_topic_name+0x178>
 8018e12:	458e      	cmp	lr, r1
 8018e14:	f104 0401 	add.w	r4, r4, #1
 8018e18:	f101 0301 	add.w	r3, r1, #1
 8018e1c:	d912      	bls.n	8018e44 <rcl_validate_topic_name+0x19c>
 8018e1e:	4619      	mov	r1, r3
 8018e20:	4557      	cmp	r7, sl
 8018e22:	f10a 0a01 	add.w	sl, sl, #1
 8018e26:	d0f4      	beq.n	8018e12 <rcl_validate_topic_name+0x16a>
 8018e28:	7823      	ldrb	r3, [r4, #0]
 8018e2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8018e2c:	d1f1      	bne.n	8018e12 <rcl_validate_topic_name+0x16a>
 8018e2e:	7863      	ldrb	r3, [r4, #1]
 8018e30:	5cd3      	ldrb	r3, [r2, r3]
 8018e32:	075b      	lsls	r3, r3, #29
 8018e34:	d5ed      	bpl.n	8018e12 <rcl_validate_topic_name+0x16a>
 8018e36:	2304      	movs	r3, #4
 8018e38:	602b      	str	r3, [r5, #0]
 8018e3a:	2e00      	cmp	r6, #0
 8018e3c:	f43f af58 	beq.w	8018cf0 <rcl_validate_topic_name+0x48>
 8018e40:	6031      	str	r1, [r6, #0]
 8018e42:	e755      	b.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018e44:	2300      	movs	r3, #0
 8018e46:	602b      	str	r3, [r5, #0]
 8018e48:	e752      	b.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018e4a:	4653      	mov	r3, sl
 8018e4c:	2101      	movs	r1, #1
 8018e4e:	e00a      	b.n	8018e66 <rcl_validate_topic_name+0x1be>
 8018e50:	2b01      	cmp	r3, #1
 8018e52:	d012      	beq.n	8018e7a <rcl_validate_topic_name+0x1d2>
 8018e54:	458e      	cmp	lr, r1
 8018e56:	f103 0301 	add.w	r3, r3, #1
 8018e5a:	f104 0401 	add.w	r4, r4, #1
 8018e5e:	f101 0001 	add.w	r0, r1, #1
 8018e62:	d9ef      	bls.n	8018e44 <rcl_validate_topic_name+0x19c>
 8018e64:	4601      	mov	r1, r0
 8018e66:	429f      	cmp	r7, r3
 8018e68:	d0f4      	beq.n	8018e54 <rcl_validate_topic_name+0x1ac>
 8018e6a:	7820      	ldrb	r0, [r4, #0]
 8018e6c:	282f      	cmp	r0, #47	@ 0x2f
 8018e6e:	d1ef      	bne.n	8018e50 <rcl_validate_topic_name+0x1a8>
 8018e70:	7860      	ldrb	r0, [r4, #1]
 8018e72:	5c10      	ldrb	r0, [r2, r0]
 8018e74:	0740      	lsls	r0, r0, #29
 8018e76:	d5ed      	bpl.n	8018e54 <rcl_validate_topic_name+0x1ac>
 8018e78:	e7dd      	b.n	8018e36 <rcl_validate_topic_name+0x18e>
 8018e7a:	2207      	movs	r2, #7
 8018e7c:	602a      	str	r2, [r5, #0]
 8018e7e:	2e00      	cmp	r6, #0
 8018e80:	f47f af7e 	bne.w	8018d80 <rcl_validate_topic_name+0xd8>
 8018e84:	e734      	b.n	8018cf0 <rcl_validate_topic_name+0x48>
 8018e86:	bf00      	nop
 8018e88:	0801ce83 	.word	0x0801ce83

08018e8c <rcutils_split>:
 8018e8c:	b082      	sub	sp, #8
 8018e8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e92:	b08b      	sub	sp, #44	@ 0x2c
 8018e94:	ac14      	add	r4, sp, #80	@ 0x50
 8018e96:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8018e98:	e884 000c 	stmia.w	r4, {r2, r3}
 8018e9c:	2f00      	cmp	r7, #0
 8018e9e:	f000 8091 	beq.w	8018fc4 <rcutils_split+0x138>
 8018ea2:	4606      	mov	r6, r0
 8018ea4:	2800      	cmp	r0, #0
 8018ea6:	d072      	beq.n	8018f8e <rcutils_split+0x102>
 8018ea8:	7804      	ldrb	r4, [r0, #0]
 8018eaa:	2c00      	cmp	r4, #0
 8018eac:	d06f      	beq.n	8018f8e <rcutils_split+0x102>
 8018eae:	460d      	mov	r5, r1
 8018eb0:	f7e7 fa0e 	bl	80002d0 <strlen>
 8018eb4:	1833      	adds	r3, r6, r0
 8018eb6:	1b64      	subs	r4, r4, r5
 8018eb8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018ebc:	4681      	mov	r9, r0
 8018ebe:	fab4 f484 	clz	r4, r4
 8018ec2:	0964      	lsrs	r4, r4, #5
 8018ec4:	42ab      	cmp	r3, r5
 8018ec6:	bf08      	it	eq
 8018ec8:	f1a9 0901 	subeq.w	r9, r9, #1
 8018ecc:	454c      	cmp	r4, r9
 8018ece:	d26a      	bcs.n	8018fa6 <rcutils_split+0x11a>
 8018ed0:	1933      	adds	r3, r6, r4
 8018ed2:	eb06 0009 	add.w	r0, r6, r9
 8018ed6:	2101      	movs	r1, #1
 8018ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018edc:	42aa      	cmp	r2, r5
 8018ede:	bf08      	it	eq
 8018ee0:	3101      	addeq	r1, #1
 8018ee2:	4283      	cmp	r3, r0
 8018ee4:	d1f8      	bne.n	8018ed8 <rcutils_split+0x4c>
 8018ee6:	aa14      	add	r2, sp, #80	@ 0x50
 8018ee8:	4638      	mov	r0, r7
 8018eea:	f000 f88f 	bl	801900c <rcutils_string_array_init>
 8018eee:	2800      	cmp	r0, #0
 8018ef0:	d141      	bne.n	8018f76 <rcutils_split+0xea>
 8018ef2:	687a      	ldr	r2, [r7, #4]
 8018ef4:	4680      	mov	r8, r0
 8018ef6:	46a2      	mov	sl, r4
 8018ef8:	e002      	b.n	8018f00 <rcutils_split+0x74>
 8018efa:	3401      	adds	r4, #1
 8018efc:	454c      	cmp	r4, r9
 8018efe:	d222      	bcs.n	8018f46 <rcutils_split+0xba>
 8018f00:	5d33      	ldrb	r3, [r6, r4]
 8018f02:	42ab      	cmp	r3, r5
 8018f04:	d1f9      	bne.n	8018efa <rcutils_split+0x6e>
 8018f06:	4554      	cmp	r4, sl
 8018f08:	eba4 0b0a 	sub.w	fp, r4, sl
 8018f0c:	d038      	beq.n	8018f80 <rcutils_split+0xf4>
 8018f0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018f10:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018f12:	9201      	str	r2, [sp, #4]
 8018f14:	f10b 0002 	add.w	r0, fp, #2
 8018f18:	4798      	blx	r3
 8018f1a:	9a01      	ldr	r2, [sp, #4]
 8018f1c:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8018f20:	687a      	ldr	r2, [r7, #4]
 8018f22:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 8018f26:	eb06 030a 	add.w	r3, r6, sl
 8018f2a:	f10b 0101 	add.w	r1, fp, #1
 8018f2e:	2800      	cmp	r0, #0
 8018f30:	d04e      	beq.n	8018fd0 <rcutils_split+0x144>
 8018f32:	4a2d      	ldr	r2, [pc, #180]	@ (8018fe8 <rcutils_split+0x15c>)
 8018f34:	f000 fe8c 	bl	8019c50 <sniprintf>
 8018f38:	687a      	ldr	r2, [r7, #4]
 8018f3a:	f108 0801 	add.w	r8, r8, #1
 8018f3e:	3401      	adds	r4, #1
 8018f40:	454c      	cmp	r4, r9
 8018f42:	46a2      	mov	sl, r4
 8018f44:	d3dc      	bcc.n	8018f00 <rcutils_split+0x74>
 8018f46:	4554      	cmp	r4, sl
 8018f48:	d035      	beq.n	8018fb6 <rcutils_split+0x12a>
 8018f4a:	eba4 040a 	sub.w	r4, r4, sl
 8018f4e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018f50:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8018f52:	9201      	str	r2, [sp, #4]
 8018f54:	1ca0      	adds	r0, r4, #2
 8018f56:	4798      	blx	r3
 8018f58:	9a01      	ldr	r2, [sp, #4]
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8018f60:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018f64:	2800      	cmp	r0, #0
 8018f66:	d035      	beq.n	8018fd4 <rcutils_split+0x148>
 8018f68:	4a1f      	ldr	r2, [pc, #124]	@ (8018fe8 <rcutils_split+0x15c>)
 8018f6a:	eb06 030a 	add.w	r3, r6, sl
 8018f6e:	1c61      	adds	r1, r4, #1
 8018f70:	f000 fe6e 	bl	8019c50 <sniprintf>
 8018f74:	2000      	movs	r0, #0
 8018f76:	b00b      	add	sp, #44	@ 0x2c
 8018f78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f7c:	b002      	add	sp, #8
 8018f7e:	4770      	bx	lr
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	3b01      	subs	r3, #1
 8018f84:	2100      	movs	r1, #0
 8018f86:	603b      	str	r3, [r7, #0]
 8018f88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8018f8c:	e7d7      	b.n	8018f3e <rcutils_split+0xb2>
 8018f8e:	a802      	add	r0, sp, #8
 8018f90:	ac02      	add	r4, sp, #8
 8018f92:	f000 f82b 	bl	8018fec <rcutils_get_zero_initialized_string_array>
 8018f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f98:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018f9a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018f9e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8018fa2:	2000      	movs	r0, #0
 8018fa4:	e7e7      	b.n	8018f76 <rcutils_split+0xea>
 8018fa6:	aa14      	add	r2, sp, #80	@ 0x50
 8018fa8:	2101      	movs	r1, #1
 8018faa:	4638      	mov	r0, r7
 8018fac:	f000 f82e 	bl	801900c <rcutils_string_array_init>
 8018fb0:	2800      	cmp	r0, #0
 8018fb2:	d1e0      	bne.n	8018f76 <rcutils_split+0xea>
 8018fb4:	687a      	ldr	r2, [r7, #4]
 8018fb6:	683b      	ldr	r3, [r7, #0]
 8018fb8:	3b01      	subs	r3, #1
 8018fba:	2100      	movs	r1, #0
 8018fbc:	603b      	str	r3, [r7, #0]
 8018fbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8018fc2:	e7ee      	b.n	8018fa2 <rcutils_split+0x116>
 8018fc4:	200b      	movs	r0, #11
 8018fc6:	b00b      	add	sp, #44	@ 0x2c
 8018fc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fcc:	b002      	add	sp, #8
 8018fce:	4770      	bx	lr
 8018fd0:	f8c7 8000 	str.w	r8, [r7]
 8018fd4:	4638      	mov	r0, r7
 8018fd6:	f000 f83b 	bl	8019050 <rcutils_string_array_fini>
 8018fda:	b908      	cbnz	r0, 8018fe0 <rcutils_split+0x154>
 8018fdc:	200a      	movs	r0, #10
 8018fde:	e7ca      	b.n	8018f76 <rcutils_split+0xea>
 8018fe0:	f7f4 f852 	bl	800d088 <rcutils_reset_error>
 8018fe4:	e7fa      	b.n	8018fdc <rcutils_split+0x150>
 8018fe6:	bf00      	nop
 8018fe8:	0801bbb4 	.word	0x0801bbb4

08018fec <rcutils_get_zero_initialized_string_array>:
 8018fec:	b510      	push	{r4, lr}
 8018fee:	4c06      	ldr	r4, [pc, #24]	@ (8019008 <rcutils_get_zero_initialized_string_array+0x1c>)
 8018ff0:	4686      	mov	lr, r0
 8018ff2:	4684      	mov	ip, r0
 8018ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ff6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018ffa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018ffe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8019002:	4670      	mov	r0, lr
 8019004:	bd10      	pop	{r4, pc}
 8019006:	bf00      	nop
 8019008:	0801cd68 	.word	0x0801cd68

0801900c <rcutils_string_array_init>:
 801900c:	b1da      	cbz	r2, 8019046 <rcutils_string_array_init+0x3a>
 801900e:	b570      	push	{r4, r5, r6, lr}
 8019010:	4605      	mov	r5, r0
 8019012:	b1d0      	cbz	r0, 801904a <rcutils_string_array_init+0x3e>
 8019014:	460e      	mov	r6, r1
 8019016:	4614      	mov	r4, r2
 8019018:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801901c:	6001      	str	r1, [r0, #0]
 801901e:	2104      	movs	r1, #4
 8019020:	4630      	mov	r0, r6
 8019022:	4798      	blx	r3
 8019024:	6068      	str	r0, [r5, #4]
 8019026:	b150      	cbz	r0, 801903e <rcutils_string_array_init+0x32>
 8019028:	46a4      	mov	ip, r4
 801902a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801902e:	f105 0408 	add.w	r4, r5, #8
 8019032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019034:	f8dc 3000 	ldr.w	r3, [ip]
 8019038:	6023      	str	r3, [r4, #0]
 801903a:	2000      	movs	r0, #0
 801903c:	bd70      	pop	{r4, r5, r6, pc}
 801903e:	2e00      	cmp	r6, #0
 8019040:	d0f2      	beq.n	8019028 <rcutils_string_array_init+0x1c>
 8019042:	200a      	movs	r0, #10
 8019044:	bd70      	pop	{r4, r5, r6, pc}
 8019046:	200b      	movs	r0, #11
 8019048:	4770      	bx	lr
 801904a:	200b      	movs	r0, #11
 801904c:	bd70      	pop	{r4, r5, r6, pc}
 801904e:	bf00      	nop

08019050 <rcutils_string_array_fini>:
 8019050:	b310      	cbz	r0, 8019098 <rcutils_string_array_fini+0x48>
 8019052:	6843      	ldr	r3, [r0, #4]
 8019054:	b570      	push	{r4, r5, r6, lr}
 8019056:	4604      	mov	r4, r0
 8019058:	b1d3      	cbz	r3, 8019090 <rcutils_string_array_fini+0x40>
 801905a:	3008      	adds	r0, #8
 801905c:	f7f3 ffe8 	bl	800d030 <rcutils_allocator_is_valid>
 8019060:	b1c0      	cbz	r0, 8019094 <rcutils_string_array_fini+0x44>
 8019062:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019066:	b16b      	cbz	r3, 8019084 <rcutils_string_array_fini+0x34>
 8019068:	2500      	movs	r5, #0
 801906a:	462e      	mov	r6, r5
 801906c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019070:	68e3      	ldr	r3, [r4, #12]
 8019072:	69a1      	ldr	r1, [r4, #24]
 8019074:	4798      	blx	r3
 8019076:	e9d4 3000 	ldrd	r3, r0, [r4]
 801907a:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801907e:	3501      	adds	r5, #1
 8019080:	42ab      	cmp	r3, r5
 8019082:	d8f3      	bhi.n	801906c <rcutils_string_array_fini+0x1c>
 8019084:	68e3      	ldr	r3, [r4, #12]
 8019086:	69a1      	ldr	r1, [r4, #24]
 8019088:	4798      	blx	r3
 801908a:	2300      	movs	r3, #0
 801908c:	e9c4 3300 	strd	r3, r3, [r4]
 8019090:	2000      	movs	r0, #0
 8019092:	bd70      	pop	{r4, r5, r6, pc}
 8019094:	200b      	movs	r0, #11
 8019096:	bd70      	pop	{r4, r5, r6, pc}
 8019098:	200b      	movs	r0, #11
 801909a:	4770      	bx	lr

0801909c <rmw_discovery_options_init>:
 801909c:	b328      	cbz	r0, 80190ea <rmw_discovery_options_init+0x4e>
 801909e:	b570      	push	{r4, r5, r6, lr}
 80190a0:	4604      	mov	r4, r0
 80190a2:	4610      	mov	r0, r2
 80190a4:	460e      	mov	r6, r1
 80190a6:	4615      	mov	r5, r2
 80190a8:	f7f3 ffc2 	bl	800d030 <rcutils_allocator_is_valid>
 80190ac:	b1d8      	cbz	r0, 80190e6 <rmw_discovery_options_init+0x4a>
 80190ae:	68a3      	ldr	r3, [r4, #8]
 80190b0:	b9cb      	cbnz	r3, 80190e6 <rmw_discovery_options_init+0x4a>
 80190b2:	6863      	ldr	r3, [r4, #4]
 80190b4:	b9bb      	cbnz	r3, 80190e6 <rmw_discovery_options_init+0x4a>
 80190b6:	7823      	ldrb	r3, [r4, #0]
 80190b8:	b90b      	cbnz	r3, 80190be <rmw_discovery_options_init+0x22>
 80190ba:	2302      	movs	r3, #2
 80190bc:	7023      	strb	r3, [r4, #0]
 80190be:	b186      	cbz	r6, 80190e2 <rmw_discovery_options_init+0x46>
 80190c0:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80190c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80190c8:	4630      	mov	r0, r6
 80190ca:	4798      	blx	r3
 80190cc:	6060      	str	r0, [r4, #4]
 80190ce:	b170      	cbz	r0, 80190ee <rmw_discovery_options_init+0x52>
 80190d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80190d2:	f104 0c0c 	add.w	ip, r4, #12
 80190d6:	60a6      	str	r6, [r4, #8]
 80190d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80190dc:	682b      	ldr	r3, [r5, #0]
 80190de:	f8cc 3000 	str.w	r3, [ip]
 80190e2:	2000      	movs	r0, #0
 80190e4:	bd70      	pop	{r4, r5, r6, pc}
 80190e6:	200b      	movs	r0, #11
 80190e8:	bd70      	pop	{r4, r5, r6, pc}
 80190ea:	200b      	movs	r0, #11
 80190ec:	4770      	bx	lr
 80190ee:	200a      	movs	r0, #10
 80190f0:	bd70      	pop	{r4, r5, r6, pc}
 80190f2:	bf00      	nop

080190f4 <rmw_enclave_options_copy>:
 80190f4:	b1e0      	cbz	r0, 8019130 <rmw_enclave_options_copy+0x3c>
 80190f6:	b570      	push	{r4, r5, r6, lr}
 80190f8:	4616      	mov	r6, r2
 80190fa:	b082      	sub	sp, #8
 80190fc:	b1aa      	cbz	r2, 801912a <rmw_enclave_options_copy+0x36>
 80190fe:	4605      	mov	r5, r0
 8019100:	4608      	mov	r0, r1
 8019102:	460c      	mov	r4, r1
 8019104:	f7f3 ff94 	bl	800d030 <rcutils_allocator_is_valid>
 8019108:	b178      	cbz	r0, 801912a <rmw_enclave_options_copy+0x36>
 801910a:	f104 030c 	add.w	r3, r4, #12
 801910e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019112:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019116:	4628      	mov	r0, r5
 8019118:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801911c:	f7fc fb78 	bl	8015810 <rcutils_strdup>
 8019120:	b140      	cbz	r0, 8019134 <rmw_enclave_options_copy+0x40>
 8019122:	6030      	str	r0, [r6, #0]
 8019124:	2000      	movs	r0, #0
 8019126:	b002      	add	sp, #8
 8019128:	bd70      	pop	{r4, r5, r6, pc}
 801912a:	200b      	movs	r0, #11
 801912c:	b002      	add	sp, #8
 801912e:	bd70      	pop	{r4, r5, r6, pc}
 8019130:	200b      	movs	r0, #11
 8019132:	4770      	bx	lr
 8019134:	200a      	movs	r0, #10
 8019136:	e7f6      	b.n	8019126 <rmw_enclave_options_copy+0x32>

08019138 <rmw_enclave_options_fini>:
 8019138:	b170      	cbz	r0, 8019158 <rmw_enclave_options_fini+0x20>
 801913a:	b538      	push	{r3, r4, r5, lr}
 801913c:	4605      	mov	r5, r0
 801913e:	4608      	mov	r0, r1
 8019140:	460c      	mov	r4, r1
 8019142:	f7f3 ff75 	bl	800d030 <rcutils_allocator_is_valid>
 8019146:	b128      	cbz	r0, 8019154 <rmw_enclave_options_fini+0x1c>
 8019148:	4628      	mov	r0, r5
 801914a:	6863      	ldr	r3, [r4, #4]
 801914c:	6921      	ldr	r1, [r4, #16]
 801914e:	4798      	blx	r3
 8019150:	2000      	movs	r0, #0
 8019152:	bd38      	pop	{r3, r4, r5, pc}
 8019154:	200b      	movs	r0, #11
 8019156:	bd38      	pop	{r3, r4, r5, pc}
 8019158:	200b      	movs	r0, #11
 801915a:	4770      	bx	lr

0801915c <rmw_get_default_security_options>:
 801915c:	2200      	movs	r2, #0
 801915e:	7002      	strb	r2, [r0, #0]
 8019160:	6042      	str	r2, [r0, #4]
 8019162:	4770      	bx	lr

08019164 <on_status>:
 8019164:	b082      	sub	sp, #8
 8019166:	b002      	add	sp, #8
 8019168:	4770      	bx	lr
 801916a:	bf00      	nop

0801916c <on_topic>:
 801916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019170:	4a22      	ldr	r2, [pc, #136]	@ (80191fc <on_topic+0x90>)
 8019172:	b094      	sub	sp, #80	@ 0x50
 8019174:	6812      	ldr	r2, [r2, #0]
 8019176:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8019178:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801917c:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8019180:	b3c2      	cbz	r2, 80191f4 <on_topic+0x88>
 8019182:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8019186:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801918a:	e001      	b.n	8019190 <on_topic+0x24>
 801918c:	6852      	ldr	r2, [r2, #4]
 801918e:	b38a      	cbz	r2, 80191f4 <on_topic+0x88>
 8019190:	6894      	ldr	r4, [r2, #8]
 8019192:	8aa3      	ldrh	r3, [r4, #20]
 8019194:	428b      	cmp	r3, r1
 8019196:	d1f9      	bne.n	801918c <on_topic+0x20>
 8019198:	7da3      	ldrb	r3, [r4, #22]
 801919a:	4283      	cmp	r3, r0
 801919c:	d1f6      	bne.n	801918c <on_topic+0x20>
 801919e:	2248      	movs	r2, #72	@ 0x48
 80191a0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80191a4:	4668      	mov	r0, sp
 80191a6:	f000 ffa2 	bl	801a0ee <memcpy>
 80191aa:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80191ae:	cb0c      	ldmia	r3, {r2, r3}
 80191b0:	4620      	mov	r0, r4
 80191b2:	f7f4 fbf7 	bl	800d9a4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80191b6:	4607      	mov	r7, r0
 80191b8:	b1e0      	cbz	r0, 80191f4 <on_topic+0x88>
 80191ba:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80191be:	4632      	mov	r2, r6
 80191c0:	4628      	mov	r0, r5
 80191c2:	f108 0110 	add.w	r1, r8, #16
 80191c6:	f7f5 fa2b 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 80191ca:	b930      	cbnz	r0, 80191da <on_topic+0x6e>
 80191cc:	480c      	ldr	r0, [pc, #48]	@ (8019200 <on_topic+0x94>)
 80191ce:	4639      	mov	r1, r7
 80191d0:	b014      	add	sp, #80	@ 0x50
 80191d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191d6:	f7fc bea5 	b.w	8015f24 <put_memory>
 80191da:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80191de:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80191e2:	f7f4 f9dd 	bl	800d5a0 <rmw_uros_epoch_nanos>
 80191e6:	2305      	movs	r3, #5
 80191e8:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80191ec:	e942 0102 	strd	r0, r1, [r2, #-8]
 80191f0:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80191f4:	b014      	add	sp, #80	@ 0x50
 80191f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191fa:	bf00      	nop
 80191fc:	2000e278 	.word	0x2000e278
 8019200:	2000dac8 	.word	0x2000dac8

08019204 <on_request>:
 8019204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019208:	4823      	ldr	r0, [pc, #140]	@ (8019298 <on_request+0x94>)
 801920a:	b094      	sub	sp, #80	@ 0x50
 801920c:	6800      	ldr	r0, [r0, #0]
 801920e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8019210:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8019214:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019216:	2800      	cmp	r0, #0
 8019218:	d03b      	beq.n	8019292 <on_request+0x8e>
 801921a:	461d      	mov	r5, r3
 801921c:	e001      	b.n	8019222 <on_request+0x1e>
 801921e:	6840      	ldr	r0, [r0, #4]
 8019220:	b3b8      	cbz	r0, 8019292 <on_request+0x8e>
 8019222:	6884      	ldr	r4, [r0, #8]
 8019224:	8b21      	ldrh	r1, [r4, #24]
 8019226:	4291      	cmp	r1, r2
 8019228:	d1f9      	bne.n	801921e <on_request+0x1a>
 801922a:	2248      	movs	r2, #72	@ 0x48
 801922c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019230:	4668      	mov	r0, sp
 8019232:	f000 ff5c 	bl	801a0ee <memcpy>
 8019236:	f104 0320 	add.w	r3, r4, #32
 801923a:	cb0c      	ldmia	r3, {r2, r3}
 801923c:	4620      	mov	r0, r4
 801923e:	f7f4 fbb1 	bl	800d9a4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019242:	4680      	mov	r8, r0
 8019244:	b328      	cbz	r0, 8019292 <on_request+0x8e>
 8019246:	4638      	mov	r0, r7
 8019248:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801924c:	4632      	mov	r2, r6
 801924e:	f107 0110 	add.w	r1, r7, #16
 8019252:	f7f5 f9e5 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 8019256:	b930      	cbnz	r0, 8019266 <on_request+0x62>
 8019258:	4810      	ldr	r0, [pc, #64]	@ (801929c <on_request+0x98>)
 801925a:	4641      	mov	r1, r8
 801925c:	b014      	add	sp, #80	@ 0x50
 801925e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019262:	f7fc be5f 	b.w	8015f24 <put_memory>
 8019266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019268:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801926c:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8019270:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8019274:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019278:	e895 0003 	ldmia.w	r5, {r0, r1}
 801927c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019280:	f7f4 f98e 	bl	800d5a0 <rmw_uros_epoch_nanos>
 8019284:	2303      	movs	r3, #3
 8019286:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801928a:	e942 0102 	strd	r0, r1, [r2, #-8]
 801928e:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019292:	b014      	add	sp, #80	@ 0x50
 8019294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019298:	2000de30 	.word	0x2000de30
 801929c:	2000dac8 	.word	0x2000dac8

080192a0 <on_reply>:
 80192a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192a4:	4821      	ldr	r0, [pc, #132]	@ (801932c <on_reply+0x8c>)
 80192a6:	b094      	sub	sp, #80	@ 0x50
 80192a8:	6800      	ldr	r0, [r0, #0]
 80192aa:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80192ac:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80192b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80192b2:	b3b8      	cbz	r0, 8019324 <on_reply+0x84>
 80192b4:	461d      	mov	r5, r3
 80192b6:	e001      	b.n	80192bc <on_reply+0x1c>
 80192b8:	6840      	ldr	r0, [r0, #4]
 80192ba:	b398      	cbz	r0, 8019324 <on_reply+0x84>
 80192bc:	6884      	ldr	r4, [r0, #8]
 80192be:	8b21      	ldrh	r1, [r4, #24]
 80192c0:	4291      	cmp	r1, r2
 80192c2:	d1f9      	bne.n	80192b8 <on_reply+0x18>
 80192c4:	2248      	movs	r2, #72	@ 0x48
 80192c6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80192ca:	4668      	mov	r0, sp
 80192cc:	f000 ff0f 	bl	801a0ee <memcpy>
 80192d0:	f104 0320 	add.w	r3, r4, #32
 80192d4:	cb0c      	ldmia	r3, {r2, r3}
 80192d6:	4620      	mov	r0, r4
 80192d8:	f7f4 fb64 	bl	800d9a4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80192dc:	4680      	mov	r8, r0
 80192de:	b308      	cbz	r0, 8019324 <on_reply+0x84>
 80192e0:	4638      	mov	r0, r7
 80192e2:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80192e6:	4632      	mov	r2, r6
 80192e8:	f107 0110 	add.w	r1, r7, #16
 80192ec:	f7f5 f998 	bl	800e620 <ucdr_deserialize_array_uint8_t>
 80192f0:	b930      	cbnz	r0, 8019300 <on_reply+0x60>
 80192f2:	480f      	ldr	r0, [pc, #60]	@ (8019330 <on_reply+0x90>)
 80192f4:	4641      	mov	r1, r8
 80192f6:	b014      	add	sp, #80	@ 0x50
 80192f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80192fc:	f7fc be12 	b.w	8015f24 <put_memory>
 8019300:	2200      	movs	r2, #0
 8019302:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8019306:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801930a:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801930e:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8019312:	f7f4 f945 	bl	800d5a0 <rmw_uros_epoch_nanos>
 8019316:	2304      	movs	r3, #4
 8019318:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801931c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019320:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8019324:	b014      	add	sp, #80	@ 0x50
 8019326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801932a:	bf00      	nop
 801932c:	2000dd58 	.word	0x2000dd58
 8019330:	2000dac8 	.word	0x2000dac8

08019334 <rmw_create_guard_condition>:
 8019334:	b538      	push	{r3, r4, r5, lr}
 8019336:	4605      	mov	r5, r0
 8019338:	4807      	ldr	r0, [pc, #28]	@ (8019358 <rmw_create_guard_condition+0x24>)
 801933a:	f7fc fde3 	bl	8015f04 <get_memory>
 801933e:	b148      	cbz	r0, 8019354 <rmw_create_guard_condition+0x20>
 8019340:	6884      	ldr	r4, [r0, #8]
 8019342:	2300      	movs	r3, #0
 8019344:	7423      	strb	r3, [r4, #16]
 8019346:	61e5      	str	r5, [r4, #28]
 8019348:	f7fc fe62 	bl	8016010 <rmw_get_implementation_identifier>
 801934c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019350:	f104 0014 	add.w	r0, r4, #20
 8019354:	bd38      	pop	{r3, r4, r5, pc}
 8019356:	bf00      	nop
 8019358:	2000b8a4 	.word	0x2000b8a4

0801935c <rmw_destroy_guard_condition>:
 801935c:	b508      	push	{r3, lr}
 801935e:	4b08      	ldr	r3, [pc, #32]	@ (8019380 <rmw_destroy_guard_condition+0x24>)
 8019360:	6819      	ldr	r1, [r3, #0]
 8019362:	b911      	cbnz	r1, 801936a <rmw_destroy_guard_condition+0xe>
 8019364:	e00a      	b.n	801937c <rmw_destroy_guard_condition+0x20>
 8019366:	6849      	ldr	r1, [r1, #4]
 8019368:	b141      	cbz	r1, 801937c <rmw_destroy_guard_condition+0x20>
 801936a:	688b      	ldr	r3, [r1, #8]
 801936c:	3314      	adds	r3, #20
 801936e:	4298      	cmp	r0, r3
 8019370:	d1f9      	bne.n	8019366 <rmw_destroy_guard_condition+0xa>
 8019372:	4803      	ldr	r0, [pc, #12]	@ (8019380 <rmw_destroy_guard_condition+0x24>)
 8019374:	f7fc fdd6 	bl	8015f24 <put_memory>
 8019378:	2000      	movs	r0, #0
 801937a:	bd08      	pop	{r3, pc}
 801937c:	2001      	movs	r0, #1
 801937e:	bd08      	pop	{r3, pc}
 8019380:	2000b8a4 	.word	0x2000b8a4

08019384 <rmw_trigger_guard_condition>:
 8019384:	b160      	cbz	r0, 80193a0 <rmw_trigger_guard_condition+0x1c>
 8019386:	b510      	push	{r4, lr}
 8019388:	4604      	mov	r4, r0
 801938a:	6800      	ldr	r0, [r0, #0]
 801938c:	f7f4 fc8c 	bl	800dca8 <is_uxrce_rmw_identifier_valid>
 8019390:	b908      	cbnz	r0, 8019396 <rmw_trigger_guard_condition+0x12>
 8019392:	2001      	movs	r0, #1
 8019394:	bd10      	pop	{r4, pc}
 8019396:	6863      	ldr	r3, [r4, #4]
 8019398:	2201      	movs	r2, #1
 801939a:	741a      	strb	r2, [r3, #16]
 801939c:	2000      	movs	r0, #0
 801939e:	bd10      	pop	{r4, pc}
 80193a0:	2001      	movs	r0, #1
 80193a2:	4770      	bx	lr

080193a4 <geometry_msgs__msg__Pose__init>:
 80193a4:	b1d8      	cbz	r0, 80193de <geometry_msgs__msg__Pose__init+0x3a>
 80193a6:	b538      	push	{r3, r4, r5, lr}
 80193a8:	4604      	mov	r4, r0
 80193aa:	f000 f8e1 	bl	8019570 <geometry_msgs__msg__Point__init>
 80193ae:	b130      	cbz	r0, 80193be <geometry_msgs__msg__Pose__init+0x1a>
 80193b0:	f104 0518 	add.w	r5, r4, #24
 80193b4:	4628      	mov	r0, r5
 80193b6:	f000 f823 	bl	8019400 <geometry_msgs__msg__Quaternion__init>
 80193ba:	b148      	cbz	r0, 80193d0 <geometry_msgs__msg__Pose__init+0x2c>
 80193bc:	bd38      	pop	{r3, r4, r5, pc}
 80193be:	4620      	mov	r0, r4
 80193c0:	f000 f8da 	bl	8019578 <geometry_msgs__msg__Point__fini>
 80193c4:	f104 0018 	add.w	r0, r4, #24
 80193c8:	f000 f82e 	bl	8019428 <geometry_msgs__msg__Quaternion__fini>
 80193cc:	2000      	movs	r0, #0
 80193ce:	bd38      	pop	{r3, r4, r5, pc}
 80193d0:	4620      	mov	r0, r4
 80193d2:	f000 f8d1 	bl	8019578 <geometry_msgs__msg__Point__fini>
 80193d6:	4628      	mov	r0, r5
 80193d8:	f000 f826 	bl	8019428 <geometry_msgs__msg__Quaternion__fini>
 80193dc:	e7f6      	b.n	80193cc <geometry_msgs__msg__Pose__init+0x28>
 80193de:	2000      	movs	r0, #0
 80193e0:	4770      	bx	lr
 80193e2:	bf00      	nop

080193e4 <geometry_msgs__msg__Pose__fini>:
 80193e4:	b148      	cbz	r0, 80193fa <geometry_msgs__msg__Pose__fini+0x16>
 80193e6:	b510      	push	{r4, lr}
 80193e8:	4604      	mov	r4, r0
 80193ea:	f000 f8c5 	bl	8019578 <geometry_msgs__msg__Point__fini>
 80193ee:	f104 0018 	add.w	r0, r4, #24
 80193f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193f6:	f000 b817 	b.w	8019428 <geometry_msgs__msg__Quaternion__fini>
 80193fa:	4770      	bx	lr
 80193fc:	0000      	movs	r0, r0
	...

08019400 <geometry_msgs__msg__Quaternion__init>:
 8019400:	b160      	cbz	r0, 801941c <geometry_msgs__msg__Quaternion__init+0x1c>
 8019402:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8019420 <geometry_msgs__msg__Quaternion__init+0x20>
 8019406:	2200      	movs	r2, #0
 8019408:	2300      	movs	r3, #0
 801940a:	e9c0 2300 	strd	r2, r3, [r0]
 801940e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019412:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019416:	ed80 7b06 	vstr	d7, [r0, #24]
 801941a:	2001      	movs	r0, #1
 801941c:	4770      	bx	lr
 801941e:	bf00      	nop
 8019420:	00000000 	.word	0x00000000
 8019424:	3ff00000 	.word	0x3ff00000

08019428 <geometry_msgs__msg__Quaternion__fini>:
 8019428:	4770      	bx	lr
 801942a:	bf00      	nop

0801942c <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 801942c:	f000 b8a0 	b.w	8019570 <geometry_msgs__msg__Point__init>

08019430 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 8019430:	f000 b8a2 	b.w	8019578 <geometry_msgs__msg__Point__fini>

08019434 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8019434:	4b04      	ldr	r3, [pc, #16]	@ (8019448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8019436:	681a      	ldr	r2, [r3, #0]
 8019438:	b10a      	cbz	r2, 801943e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 801943a:	4803      	ldr	r0, [pc, #12]	@ (8019448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801943c:	4770      	bx	lr
 801943e:	4a03      	ldr	r2, [pc, #12]	@ (801944c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 8019440:	4801      	ldr	r0, [pc, #4]	@ (8019448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8019442:	6812      	ldr	r2, [r2, #0]
 8019444:	601a      	str	r2, [r3, #0]
 8019446:	4770      	bx	lr
 8019448:	200021c0 	.word	0x200021c0
 801944c:	20000374 	.word	0x20000374

08019450 <get_serialized_size_geometry_msgs__msg__Point>:
 8019450:	b1b8      	cbz	r0, 8019482 <get_serialized_size_geometry_msgs__msg__Point+0x32>
 8019452:	b570      	push	{r4, r5, r6, lr}
 8019454:	460d      	mov	r5, r1
 8019456:	4628      	mov	r0, r5
 8019458:	2108      	movs	r1, #8
 801945a:	f7f2 fc2d 	bl	800bcb8 <ucdr_alignment>
 801945e:	2108      	movs	r1, #8
 8019460:	186e      	adds	r6, r5, r1
 8019462:	4406      	add	r6, r0
 8019464:	4630      	mov	r0, r6
 8019466:	f7f2 fc27 	bl	800bcb8 <ucdr_alignment>
 801946a:	f100 0408 	add.w	r4, r0, #8
 801946e:	4434      	add	r4, r6
 8019470:	2108      	movs	r1, #8
 8019472:	4620      	mov	r0, r4
 8019474:	f7f2 fc20 	bl	800bcb8 <ucdr_alignment>
 8019478:	f1c5 0508 	rsb	r5, r5, #8
 801947c:	4405      	add	r5, r0
 801947e:	1928      	adds	r0, r5, r4
 8019480:	bd70      	pop	{r4, r5, r6, pc}
 8019482:	4770      	bx	lr

08019484 <_Point__cdr_deserialize>:
 8019484:	b538      	push	{r3, r4, r5, lr}
 8019486:	460c      	mov	r4, r1
 8019488:	b171      	cbz	r1, 80194a8 <_Point__cdr_deserialize+0x24>
 801948a:	4605      	mov	r5, r0
 801948c:	f7f2 fa36 	bl	800b8fc <ucdr_deserialize_double>
 8019490:	f104 0108 	add.w	r1, r4, #8
 8019494:	4628      	mov	r0, r5
 8019496:	f7f2 fa31 	bl	800b8fc <ucdr_deserialize_double>
 801949a:	f104 0110 	add.w	r1, r4, #16
 801949e:	4628      	mov	r0, r5
 80194a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194a4:	f7f2 ba2a 	b.w	800b8fc <ucdr_deserialize_double>
 80194a8:	4608      	mov	r0, r1
 80194aa:	bd38      	pop	{r3, r4, r5, pc}

080194ac <_Point__cdr_serialize>:
 80194ac:	b198      	cbz	r0, 80194d6 <_Point__cdr_serialize+0x2a>
 80194ae:	b538      	push	{r3, r4, r5, lr}
 80194b0:	ed90 0b00 	vldr	d0, [r0]
 80194b4:	460d      	mov	r5, r1
 80194b6:	4604      	mov	r4, r0
 80194b8:	4608      	mov	r0, r1
 80194ba:	f7f2 f88f 	bl	800b5dc <ucdr_serialize_double>
 80194be:	ed94 0b02 	vldr	d0, [r4, #8]
 80194c2:	4628      	mov	r0, r5
 80194c4:	f7f2 f88a 	bl	800b5dc <ucdr_serialize_double>
 80194c8:	ed94 0b04 	vldr	d0, [r4, #16]
 80194cc:	4628      	mov	r0, r5
 80194ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194d2:	f7f2 b883 	b.w	800b5dc <ucdr_serialize_double>
 80194d6:	4770      	bx	lr

080194d8 <_Point__get_serialized_size>:
 80194d8:	b1a0      	cbz	r0, 8019504 <_Point__get_serialized_size+0x2c>
 80194da:	b538      	push	{r3, r4, r5, lr}
 80194dc:	2108      	movs	r1, #8
 80194de:	2000      	movs	r0, #0
 80194e0:	f7f2 fbea 	bl	800bcb8 <ucdr_alignment>
 80194e4:	f100 0508 	add.w	r5, r0, #8
 80194e8:	2108      	movs	r1, #8
 80194ea:	4628      	mov	r0, r5
 80194ec:	f7f2 fbe4 	bl	800bcb8 <ucdr_alignment>
 80194f0:	f100 0408 	add.w	r4, r0, #8
 80194f4:	442c      	add	r4, r5
 80194f6:	2108      	movs	r1, #8
 80194f8:	4620      	mov	r0, r4
 80194fa:	f7f2 fbdd 	bl	800bcb8 <ucdr_alignment>
 80194fe:	3008      	adds	r0, #8
 8019500:	4420      	add	r0, r4
 8019502:	bd38      	pop	{r3, r4, r5, pc}
 8019504:	4770      	bx	lr
 8019506:	bf00      	nop

08019508 <_Point__max_serialized_size>:
 8019508:	b538      	push	{r3, r4, r5, lr}
 801950a:	2108      	movs	r1, #8
 801950c:	2000      	movs	r0, #0
 801950e:	f7f2 fbd3 	bl	800bcb8 <ucdr_alignment>
 8019512:	f100 0508 	add.w	r5, r0, #8
 8019516:	2108      	movs	r1, #8
 8019518:	4628      	mov	r0, r5
 801951a:	f7f2 fbcd 	bl	800bcb8 <ucdr_alignment>
 801951e:	f100 0408 	add.w	r4, r0, #8
 8019522:	442c      	add	r4, r5
 8019524:	2108      	movs	r1, #8
 8019526:	4620      	mov	r0, r4
 8019528:	f7f2 fbc6 	bl	800bcb8 <ucdr_alignment>
 801952c:	3008      	adds	r0, #8
 801952e:	4420      	add	r0, r4
 8019530:	bd38      	pop	{r3, r4, r5, pc}
 8019532:	bf00      	nop

08019534 <max_serialized_size_geometry_msgs__msg__Point>:
 8019534:	b570      	push	{r4, r5, r6, lr}
 8019536:	2301      	movs	r3, #1
 8019538:	460c      	mov	r4, r1
 801953a:	7003      	strb	r3, [r0, #0]
 801953c:	2108      	movs	r1, #8
 801953e:	4620      	mov	r0, r4
 8019540:	f7f2 fbba 	bl	800bcb8 <ucdr_alignment>
 8019544:	2108      	movs	r1, #8
 8019546:	1863      	adds	r3, r4, r1
 8019548:	18c6      	adds	r6, r0, r3
 801954a:	4630      	mov	r0, r6
 801954c:	f7f2 fbb4 	bl	800bcb8 <ucdr_alignment>
 8019550:	f100 0508 	add.w	r5, r0, #8
 8019554:	4435      	add	r5, r6
 8019556:	2108      	movs	r1, #8
 8019558:	4628      	mov	r0, r5
 801955a:	f7f2 fbad 	bl	800bcb8 <ucdr_alignment>
 801955e:	f1c4 0408 	rsb	r4, r4, #8
 8019562:	4420      	add	r0, r4
 8019564:	4428      	add	r0, r5
 8019566:	bd70      	pop	{r4, r5, r6, pc}

08019568 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8019568:	4800      	ldr	r0, [pc, #0]	@ (801956c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 801956a:	4770      	bx	lr
 801956c:	2000228c 	.word	0x2000228c

08019570 <geometry_msgs__msg__Point__init>:
 8019570:	3800      	subs	r0, #0
 8019572:	bf18      	it	ne
 8019574:	2001      	movne	r0, #1
 8019576:	4770      	bx	lr

08019578 <geometry_msgs__msg__Point__fini>:
 8019578:	4770      	bx	lr
 801957a:	bf00      	nop

0801957c <calloc>:
 801957c:	4b02      	ldr	r3, [pc, #8]	@ (8019588 <calloc+0xc>)
 801957e:	460a      	mov	r2, r1
 8019580:	4601      	mov	r1, r0
 8019582:	6818      	ldr	r0, [r3, #0]
 8019584:	f000 b802 	b.w	801958c <_calloc_r>
 8019588:	200022cc 	.word	0x200022cc

0801958c <_calloc_r>:
 801958c:	b570      	push	{r4, r5, r6, lr}
 801958e:	fba1 5402 	umull	r5, r4, r1, r2
 8019592:	b934      	cbnz	r4, 80195a2 <_calloc_r+0x16>
 8019594:	4629      	mov	r1, r5
 8019596:	f000 f899 	bl	80196cc <_malloc_r>
 801959a:	4606      	mov	r6, r0
 801959c:	b928      	cbnz	r0, 80195aa <_calloc_r+0x1e>
 801959e:	4630      	mov	r0, r6
 80195a0:	bd70      	pop	{r4, r5, r6, pc}
 80195a2:	220c      	movs	r2, #12
 80195a4:	6002      	str	r2, [r0, #0]
 80195a6:	2600      	movs	r6, #0
 80195a8:	e7f9      	b.n	801959e <_calloc_r+0x12>
 80195aa:	462a      	mov	r2, r5
 80195ac:	4621      	mov	r1, r4
 80195ae:	f000 fcc3 	bl	8019f38 <memset>
 80195b2:	e7f4      	b.n	801959e <_calloc_r+0x12>

080195b4 <exit>:
 80195b4:	b508      	push	{r3, lr}
 80195b6:	4b06      	ldr	r3, [pc, #24]	@ (80195d0 <exit+0x1c>)
 80195b8:	4604      	mov	r4, r0
 80195ba:	b113      	cbz	r3, 80195c2 <exit+0xe>
 80195bc:	2100      	movs	r1, #0
 80195be:	f3af 8000 	nop.w
 80195c2:	4b04      	ldr	r3, [pc, #16]	@ (80195d4 <exit+0x20>)
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	b103      	cbz	r3, 80195ca <exit+0x16>
 80195c8:	4798      	blx	r3
 80195ca:	4620      	mov	r0, r4
 80195cc:	f7e9 ff87 	bl	80034de <_exit>
 80195d0:	00000000 	.word	0x00000000
 80195d4:	200107c8 	.word	0x200107c8

080195d8 <getenv>:
 80195d8:	b507      	push	{r0, r1, r2, lr}
 80195da:	4b04      	ldr	r3, [pc, #16]	@ (80195ec <getenv+0x14>)
 80195dc:	4601      	mov	r1, r0
 80195de:	aa01      	add	r2, sp, #4
 80195e0:	6818      	ldr	r0, [r3, #0]
 80195e2:	f000 f805 	bl	80195f0 <_findenv_r>
 80195e6:	b003      	add	sp, #12
 80195e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80195ec:	200022cc 	.word	0x200022cc

080195f0 <_findenv_r>:
 80195f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019664 <_findenv_r+0x74>
 80195f8:	4606      	mov	r6, r0
 80195fa:	4689      	mov	r9, r1
 80195fc:	4617      	mov	r7, r2
 80195fe:	f000 fda3 	bl	801a148 <__env_lock>
 8019602:	f8da 4000 	ldr.w	r4, [sl]
 8019606:	b134      	cbz	r4, 8019616 <_findenv_r+0x26>
 8019608:	464b      	mov	r3, r9
 801960a:	4698      	mov	r8, r3
 801960c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019610:	b13a      	cbz	r2, 8019622 <_findenv_r+0x32>
 8019612:	2a3d      	cmp	r2, #61	@ 0x3d
 8019614:	d1f9      	bne.n	801960a <_findenv_r+0x1a>
 8019616:	4630      	mov	r0, r6
 8019618:	f000 fd9c 	bl	801a154 <__env_unlock>
 801961c:	2000      	movs	r0, #0
 801961e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019622:	eba8 0809 	sub.w	r8, r8, r9
 8019626:	46a3      	mov	fp, r4
 8019628:	f854 0b04 	ldr.w	r0, [r4], #4
 801962c:	2800      	cmp	r0, #0
 801962e:	d0f2      	beq.n	8019616 <_findenv_r+0x26>
 8019630:	4642      	mov	r2, r8
 8019632:	4649      	mov	r1, r9
 8019634:	f000 fc95 	bl	8019f62 <strncmp>
 8019638:	2800      	cmp	r0, #0
 801963a:	d1f4      	bne.n	8019626 <_findenv_r+0x36>
 801963c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019640:	eb03 0508 	add.w	r5, r3, r8
 8019644:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019648:	2b3d      	cmp	r3, #61	@ 0x3d
 801964a:	d1ec      	bne.n	8019626 <_findenv_r+0x36>
 801964c:	f8da 3000 	ldr.w	r3, [sl]
 8019650:	ebab 0303 	sub.w	r3, fp, r3
 8019654:	109b      	asrs	r3, r3, #2
 8019656:	4630      	mov	r0, r6
 8019658:	603b      	str	r3, [r7, #0]
 801965a:	f000 fd7b 	bl	801a154 <__env_unlock>
 801965e:	1c68      	adds	r0, r5, #1
 8019660:	e7dd      	b.n	801961e <_findenv_r+0x2e>
 8019662:	bf00      	nop
 8019664:	20000008 	.word	0x20000008

08019668 <malloc>:
 8019668:	4b02      	ldr	r3, [pc, #8]	@ (8019674 <malloc+0xc>)
 801966a:	4601      	mov	r1, r0
 801966c:	6818      	ldr	r0, [r3, #0]
 801966e:	f000 b82d 	b.w	80196cc <_malloc_r>
 8019672:	bf00      	nop
 8019674:	200022cc 	.word	0x200022cc

08019678 <free>:
 8019678:	4b02      	ldr	r3, [pc, #8]	@ (8019684 <free+0xc>)
 801967a:	4601      	mov	r1, r0
 801967c:	6818      	ldr	r0, [r3, #0]
 801967e:	f000 bd6f 	b.w	801a160 <_free_r>
 8019682:	bf00      	nop
 8019684:	200022cc 	.word	0x200022cc

08019688 <sbrk_aligned>:
 8019688:	b570      	push	{r4, r5, r6, lr}
 801968a:	4e0f      	ldr	r6, [pc, #60]	@ (80196c8 <sbrk_aligned+0x40>)
 801968c:	460c      	mov	r4, r1
 801968e:	6831      	ldr	r1, [r6, #0]
 8019690:	4605      	mov	r5, r0
 8019692:	b911      	cbnz	r1, 801969a <sbrk_aligned+0x12>
 8019694:	f000 fcd4 	bl	801a040 <_sbrk_r>
 8019698:	6030      	str	r0, [r6, #0]
 801969a:	4621      	mov	r1, r4
 801969c:	4628      	mov	r0, r5
 801969e:	f000 fccf 	bl	801a040 <_sbrk_r>
 80196a2:	1c43      	adds	r3, r0, #1
 80196a4:	d103      	bne.n	80196ae <sbrk_aligned+0x26>
 80196a6:	f04f 34ff 	mov.w	r4, #4294967295
 80196aa:	4620      	mov	r0, r4
 80196ac:	bd70      	pop	{r4, r5, r6, pc}
 80196ae:	1cc4      	adds	r4, r0, #3
 80196b0:	f024 0403 	bic.w	r4, r4, #3
 80196b4:	42a0      	cmp	r0, r4
 80196b6:	d0f8      	beq.n	80196aa <sbrk_aligned+0x22>
 80196b8:	1a21      	subs	r1, r4, r0
 80196ba:	4628      	mov	r0, r5
 80196bc:	f000 fcc0 	bl	801a040 <_sbrk_r>
 80196c0:	3001      	adds	r0, #1
 80196c2:	d1f2      	bne.n	80196aa <sbrk_aligned+0x22>
 80196c4:	e7ef      	b.n	80196a6 <sbrk_aligned+0x1e>
 80196c6:	bf00      	nop
 80196c8:	20010688 	.word	0x20010688

080196cc <_malloc_r>:
 80196cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196d0:	1ccd      	adds	r5, r1, #3
 80196d2:	f025 0503 	bic.w	r5, r5, #3
 80196d6:	3508      	adds	r5, #8
 80196d8:	2d0c      	cmp	r5, #12
 80196da:	bf38      	it	cc
 80196dc:	250c      	movcc	r5, #12
 80196de:	2d00      	cmp	r5, #0
 80196e0:	4606      	mov	r6, r0
 80196e2:	db01      	blt.n	80196e8 <_malloc_r+0x1c>
 80196e4:	42a9      	cmp	r1, r5
 80196e6:	d904      	bls.n	80196f2 <_malloc_r+0x26>
 80196e8:	230c      	movs	r3, #12
 80196ea:	6033      	str	r3, [r6, #0]
 80196ec:	2000      	movs	r0, #0
 80196ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80197c8 <_malloc_r+0xfc>
 80196f6:	f000 f869 	bl	80197cc <__malloc_lock>
 80196fa:	f8d8 3000 	ldr.w	r3, [r8]
 80196fe:	461c      	mov	r4, r3
 8019700:	bb44      	cbnz	r4, 8019754 <_malloc_r+0x88>
 8019702:	4629      	mov	r1, r5
 8019704:	4630      	mov	r0, r6
 8019706:	f7ff ffbf 	bl	8019688 <sbrk_aligned>
 801970a:	1c43      	adds	r3, r0, #1
 801970c:	4604      	mov	r4, r0
 801970e:	d158      	bne.n	80197c2 <_malloc_r+0xf6>
 8019710:	f8d8 4000 	ldr.w	r4, [r8]
 8019714:	4627      	mov	r7, r4
 8019716:	2f00      	cmp	r7, #0
 8019718:	d143      	bne.n	80197a2 <_malloc_r+0xd6>
 801971a:	2c00      	cmp	r4, #0
 801971c:	d04b      	beq.n	80197b6 <_malloc_r+0xea>
 801971e:	6823      	ldr	r3, [r4, #0]
 8019720:	4639      	mov	r1, r7
 8019722:	4630      	mov	r0, r6
 8019724:	eb04 0903 	add.w	r9, r4, r3
 8019728:	f000 fc8a 	bl	801a040 <_sbrk_r>
 801972c:	4581      	cmp	r9, r0
 801972e:	d142      	bne.n	80197b6 <_malloc_r+0xea>
 8019730:	6821      	ldr	r1, [r4, #0]
 8019732:	1a6d      	subs	r5, r5, r1
 8019734:	4629      	mov	r1, r5
 8019736:	4630      	mov	r0, r6
 8019738:	f7ff ffa6 	bl	8019688 <sbrk_aligned>
 801973c:	3001      	adds	r0, #1
 801973e:	d03a      	beq.n	80197b6 <_malloc_r+0xea>
 8019740:	6823      	ldr	r3, [r4, #0]
 8019742:	442b      	add	r3, r5
 8019744:	6023      	str	r3, [r4, #0]
 8019746:	f8d8 3000 	ldr.w	r3, [r8]
 801974a:	685a      	ldr	r2, [r3, #4]
 801974c:	bb62      	cbnz	r2, 80197a8 <_malloc_r+0xdc>
 801974e:	f8c8 7000 	str.w	r7, [r8]
 8019752:	e00f      	b.n	8019774 <_malloc_r+0xa8>
 8019754:	6822      	ldr	r2, [r4, #0]
 8019756:	1b52      	subs	r2, r2, r5
 8019758:	d420      	bmi.n	801979c <_malloc_r+0xd0>
 801975a:	2a0b      	cmp	r2, #11
 801975c:	d917      	bls.n	801978e <_malloc_r+0xc2>
 801975e:	1961      	adds	r1, r4, r5
 8019760:	42a3      	cmp	r3, r4
 8019762:	6025      	str	r5, [r4, #0]
 8019764:	bf18      	it	ne
 8019766:	6059      	strne	r1, [r3, #4]
 8019768:	6863      	ldr	r3, [r4, #4]
 801976a:	bf08      	it	eq
 801976c:	f8c8 1000 	streq.w	r1, [r8]
 8019770:	5162      	str	r2, [r4, r5]
 8019772:	604b      	str	r3, [r1, #4]
 8019774:	4630      	mov	r0, r6
 8019776:	f000 f82f 	bl	80197d8 <__malloc_unlock>
 801977a:	f104 000b 	add.w	r0, r4, #11
 801977e:	1d23      	adds	r3, r4, #4
 8019780:	f020 0007 	bic.w	r0, r0, #7
 8019784:	1ac2      	subs	r2, r0, r3
 8019786:	bf1c      	itt	ne
 8019788:	1a1b      	subne	r3, r3, r0
 801978a:	50a3      	strne	r3, [r4, r2]
 801978c:	e7af      	b.n	80196ee <_malloc_r+0x22>
 801978e:	6862      	ldr	r2, [r4, #4]
 8019790:	42a3      	cmp	r3, r4
 8019792:	bf0c      	ite	eq
 8019794:	f8c8 2000 	streq.w	r2, [r8]
 8019798:	605a      	strne	r2, [r3, #4]
 801979a:	e7eb      	b.n	8019774 <_malloc_r+0xa8>
 801979c:	4623      	mov	r3, r4
 801979e:	6864      	ldr	r4, [r4, #4]
 80197a0:	e7ae      	b.n	8019700 <_malloc_r+0x34>
 80197a2:	463c      	mov	r4, r7
 80197a4:	687f      	ldr	r7, [r7, #4]
 80197a6:	e7b6      	b.n	8019716 <_malloc_r+0x4a>
 80197a8:	461a      	mov	r2, r3
 80197aa:	685b      	ldr	r3, [r3, #4]
 80197ac:	42a3      	cmp	r3, r4
 80197ae:	d1fb      	bne.n	80197a8 <_malloc_r+0xdc>
 80197b0:	2300      	movs	r3, #0
 80197b2:	6053      	str	r3, [r2, #4]
 80197b4:	e7de      	b.n	8019774 <_malloc_r+0xa8>
 80197b6:	230c      	movs	r3, #12
 80197b8:	6033      	str	r3, [r6, #0]
 80197ba:	4630      	mov	r0, r6
 80197bc:	f000 f80c 	bl	80197d8 <__malloc_unlock>
 80197c0:	e794      	b.n	80196ec <_malloc_r+0x20>
 80197c2:	6005      	str	r5, [r0, #0]
 80197c4:	e7d6      	b.n	8019774 <_malloc_r+0xa8>
 80197c6:	bf00      	nop
 80197c8:	2001068c 	.word	0x2001068c

080197cc <__malloc_lock>:
 80197cc:	4801      	ldr	r0, [pc, #4]	@ (80197d4 <__malloc_lock+0x8>)
 80197ce:	f000 bc84 	b.w	801a0da <__retarget_lock_acquire_recursive>
 80197d2:	bf00      	nop
 80197d4:	200107d1 	.word	0x200107d1

080197d8 <__malloc_unlock>:
 80197d8:	4801      	ldr	r0, [pc, #4]	@ (80197e0 <__malloc_unlock+0x8>)
 80197da:	f000 bc7f 	b.w	801a0dc <__retarget_lock_release_recursive>
 80197de:	bf00      	nop
 80197e0:	200107d1 	.word	0x200107d1

080197e4 <srand>:
 80197e4:	b538      	push	{r3, r4, r5, lr}
 80197e6:	4b10      	ldr	r3, [pc, #64]	@ (8019828 <srand+0x44>)
 80197e8:	681d      	ldr	r5, [r3, #0]
 80197ea:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80197ec:	4604      	mov	r4, r0
 80197ee:	b9b3      	cbnz	r3, 801981e <srand+0x3a>
 80197f0:	2018      	movs	r0, #24
 80197f2:	f7ff ff39 	bl	8019668 <malloc>
 80197f6:	4602      	mov	r2, r0
 80197f8:	6328      	str	r0, [r5, #48]	@ 0x30
 80197fa:	b920      	cbnz	r0, 8019806 <srand+0x22>
 80197fc:	4b0b      	ldr	r3, [pc, #44]	@ (801982c <srand+0x48>)
 80197fe:	480c      	ldr	r0, [pc, #48]	@ (8019830 <srand+0x4c>)
 8019800:	2146      	movs	r1, #70	@ 0x46
 8019802:	f000 fc83 	bl	801a10c <__assert_func>
 8019806:	490b      	ldr	r1, [pc, #44]	@ (8019834 <srand+0x50>)
 8019808:	4b0b      	ldr	r3, [pc, #44]	@ (8019838 <srand+0x54>)
 801980a:	e9c0 1300 	strd	r1, r3, [r0]
 801980e:	4b0b      	ldr	r3, [pc, #44]	@ (801983c <srand+0x58>)
 8019810:	6083      	str	r3, [r0, #8]
 8019812:	230b      	movs	r3, #11
 8019814:	8183      	strh	r3, [r0, #12]
 8019816:	2100      	movs	r1, #0
 8019818:	2001      	movs	r0, #1
 801981a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801981e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019820:	2200      	movs	r2, #0
 8019822:	611c      	str	r4, [r3, #16]
 8019824:	615a      	str	r2, [r3, #20]
 8019826:	bd38      	pop	{r3, r4, r5, pc}
 8019828:	200022cc 	.word	0x200022cc
 801982c:	0801cda4 	.word	0x0801cda4
 8019830:	0801cdbb 	.word	0x0801cdbb
 8019834:	abcd330e 	.word	0xabcd330e
 8019838:	e66d1234 	.word	0xe66d1234
 801983c:	0005deec 	.word	0x0005deec

08019840 <rand>:
 8019840:	4b16      	ldr	r3, [pc, #88]	@ (801989c <rand+0x5c>)
 8019842:	b510      	push	{r4, lr}
 8019844:	681c      	ldr	r4, [r3, #0]
 8019846:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019848:	b9b3      	cbnz	r3, 8019878 <rand+0x38>
 801984a:	2018      	movs	r0, #24
 801984c:	f7ff ff0c 	bl	8019668 <malloc>
 8019850:	4602      	mov	r2, r0
 8019852:	6320      	str	r0, [r4, #48]	@ 0x30
 8019854:	b920      	cbnz	r0, 8019860 <rand+0x20>
 8019856:	4b12      	ldr	r3, [pc, #72]	@ (80198a0 <rand+0x60>)
 8019858:	4812      	ldr	r0, [pc, #72]	@ (80198a4 <rand+0x64>)
 801985a:	2152      	movs	r1, #82	@ 0x52
 801985c:	f000 fc56 	bl	801a10c <__assert_func>
 8019860:	4911      	ldr	r1, [pc, #68]	@ (80198a8 <rand+0x68>)
 8019862:	4b12      	ldr	r3, [pc, #72]	@ (80198ac <rand+0x6c>)
 8019864:	e9c0 1300 	strd	r1, r3, [r0]
 8019868:	4b11      	ldr	r3, [pc, #68]	@ (80198b0 <rand+0x70>)
 801986a:	6083      	str	r3, [r0, #8]
 801986c:	230b      	movs	r3, #11
 801986e:	8183      	strh	r3, [r0, #12]
 8019870:	2100      	movs	r1, #0
 8019872:	2001      	movs	r0, #1
 8019874:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019878:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801987a:	480e      	ldr	r0, [pc, #56]	@ (80198b4 <rand+0x74>)
 801987c:	690b      	ldr	r3, [r1, #16]
 801987e:	694c      	ldr	r4, [r1, #20]
 8019880:	4a0d      	ldr	r2, [pc, #52]	@ (80198b8 <rand+0x78>)
 8019882:	4358      	muls	r0, r3
 8019884:	fb02 0004 	mla	r0, r2, r4, r0
 8019888:	fba3 3202 	umull	r3, r2, r3, r2
 801988c:	3301      	adds	r3, #1
 801988e:	eb40 0002 	adc.w	r0, r0, r2
 8019892:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019896:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801989a:	bd10      	pop	{r4, pc}
 801989c:	200022cc 	.word	0x200022cc
 80198a0:	0801cda4 	.word	0x0801cda4
 80198a4:	0801cdbb 	.word	0x0801cdbb
 80198a8:	abcd330e 	.word	0xabcd330e
 80198ac:	e66d1234 	.word	0xe66d1234
 80198b0:	0005deec 	.word	0x0005deec
 80198b4:	5851f42d 	.word	0x5851f42d
 80198b8:	4c957f2d 	.word	0x4c957f2d

080198bc <realloc>:
 80198bc:	4b02      	ldr	r3, [pc, #8]	@ (80198c8 <realloc+0xc>)
 80198be:	460a      	mov	r2, r1
 80198c0:	4601      	mov	r1, r0
 80198c2:	6818      	ldr	r0, [r3, #0]
 80198c4:	f000 b802 	b.w	80198cc <_realloc_r>
 80198c8:	200022cc 	.word	0x200022cc

080198cc <_realloc_r>:
 80198cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198d0:	4607      	mov	r7, r0
 80198d2:	4614      	mov	r4, r2
 80198d4:	460d      	mov	r5, r1
 80198d6:	b921      	cbnz	r1, 80198e2 <_realloc_r+0x16>
 80198d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80198dc:	4611      	mov	r1, r2
 80198de:	f7ff bef5 	b.w	80196cc <_malloc_r>
 80198e2:	b92a      	cbnz	r2, 80198f0 <_realloc_r+0x24>
 80198e4:	f000 fc3c 	bl	801a160 <_free_r>
 80198e8:	4625      	mov	r5, r4
 80198ea:	4628      	mov	r0, r5
 80198ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198f0:	f000 fc80 	bl	801a1f4 <_malloc_usable_size_r>
 80198f4:	4284      	cmp	r4, r0
 80198f6:	4606      	mov	r6, r0
 80198f8:	d802      	bhi.n	8019900 <_realloc_r+0x34>
 80198fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80198fe:	d8f4      	bhi.n	80198ea <_realloc_r+0x1e>
 8019900:	4621      	mov	r1, r4
 8019902:	4638      	mov	r0, r7
 8019904:	f7ff fee2 	bl	80196cc <_malloc_r>
 8019908:	4680      	mov	r8, r0
 801990a:	b908      	cbnz	r0, 8019910 <_realloc_r+0x44>
 801990c:	4645      	mov	r5, r8
 801990e:	e7ec      	b.n	80198ea <_realloc_r+0x1e>
 8019910:	42b4      	cmp	r4, r6
 8019912:	4622      	mov	r2, r4
 8019914:	4629      	mov	r1, r5
 8019916:	bf28      	it	cs
 8019918:	4632      	movcs	r2, r6
 801991a:	f000 fbe8 	bl	801a0ee <memcpy>
 801991e:	4629      	mov	r1, r5
 8019920:	4638      	mov	r0, r7
 8019922:	f000 fc1d 	bl	801a160 <_free_r>
 8019926:	e7f1      	b.n	801990c <_realloc_r+0x40>

08019928 <_strtoul_l.isra.0>:
 8019928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801992c:	4e34      	ldr	r6, [pc, #208]	@ (8019a00 <_strtoul_l.isra.0+0xd8>)
 801992e:	4686      	mov	lr, r0
 8019930:	460d      	mov	r5, r1
 8019932:	4628      	mov	r0, r5
 8019934:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019938:	5d37      	ldrb	r7, [r6, r4]
 801993a:	f017 0708 	ands.w	r7, r7, #8
 801993e:	d1f8      	bne.n	8019932 <_strtoul_l.isra.0+0xa>
 8019940:	2c2d      	cmp	r4, #45	@ 0x2d
 8019942:	d110      	bne.n	8019966 <_strtoul_l.isra.0+0x3e>
 8019944:	782c      	ldrb	r4, [r5, #0]
 8019946:	2701      	movs	r7, #1
 8019948:	1c85      	adds	r5, r0, #2
 801994a:	f033 0010 	bics.w	r0, r3, #16
 801994e:	d115      	bne.n	801997c <_strtoul_l.isra.0+0x54>
 8019950:	2c30      	cmp	r4, #48	@ 0x30
 8019952:	d10d      	bne.n	8019970 <_strtoul_l.isra.0+0x48>
 8019954:	7828      	ldrb	r0, [r5, #0]
 8019956:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801995a:	2858      	cmp	r0, #88	@ 0x58
 801995c:	d108      	bne.n	8019970 <_strtoul_l.isra.0+0x48>
 801995e:	786c      	ldrb	r4, [r5, #1]
 8019960:	3502      	adds	r5, #2
 8019962:	2310      	movs	r3, #16
 8019964:	e00a      	b.n	801997c <_strtoul_l.isra.0+0x54>
 8019966:	2c2b      	cmp	r4, #43	@ 0x2b
 8019968:	bf04      	itt	eq
 801996a:	782c      	ldrbeq	r4, [r5, #0]
 801996c:	1c85      	addeq	r5, r0, #2
 801996e:	e7ec      	b.n	801994a <_strtoul_l.isra.0+0x22>
 8019970:	2b00      	cmp	r3, #0
 8019972:	d1f6      	bne.n	8019962 <_strtoul_l.isra.0+0x3a>
 8019974:	2c30      	cmp	r4, #48	@ 0x30
 8019976:	bf14      	ite	ne
 8019978:	230a      	movne	r3, #10
 801997a:	2308      	moveq	r3, #8
 801997c:	f04f 38ff 	mov.w	r8, #4294967295
 8019980:	2600      	movs	r6, #0
 8019982:	fbb8 f8f3 	udiv	r8, r8, r3
 8019986:	fb03 f908 	mul.w	r9, r3, r8
 801998a:	ea6f 0909 	mvn.w	r9, r9
 801998e:	4630      	mov	r0, r6
 8019990:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019994:	f1bc 0f09 	cmp.w	ip, #9
 8019998:	d810      	bhi.n	80199bc <_strtoul_l.isra.0+0x94>
 801999a:	4664      	mov	r4, ip
 801999c:	42a3      	cmp	r3, r4
 801999e:	dd1e      	ble.n	80199de <_strtoul_l.isra.0+0xb6>
 80199a0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80199a4:	d007      	beq.n	80199b6 <_strtoul_l.isra.0+0x8e>
 80199a6:	4580      	cmp	r8, r0
 80199a8:	d316      	bcc.n	80199d8 <_strtoul_l.isra.0+0xb0>
 80199aa:	d101      	bne.n	80199b0 <_strtoul_l.isra.0+0x88>
 80199ac:	45a1      	cmp	r9, r4
 80199ae:	db13      	blt.n	80199d8 <_strtoul_l.isra.0+0xb0>
 80199b0:	fb00 4003 	mla	r0, r0, r3, r4
 80199b4:	2601      	movs	r6, #1
 80199b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80199ba:	e7e9      	b.n	8019990 <_strtoul_l.isra.0+0x68>
 80199bc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80199c0:	f1bc 0f19 	cmp.w	ip, #25
 80199c4:	d801      	bhi.n	80199ca <_strtoul_l.isra.0+0xa2>
 80199c6:	3c37      	subs	r4, #55	@ 0x37
 80199c8:	e7e8      	b.n	801999c <_strtoul_l.isra.0+0x74>
 80199ca:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80199ce:	f1bc 0f19 	cmp.w	ip, #25
 80199d2:	d804      	bhi.n	80199de <_strtoul_l.isra.0+0xb6>
 80199d4:	3c57      	subs	r4, #87	@ 0x57
 80199d6:	e7e1      	b.n	801999c <_strtoul_l.isra.0+0x74>
 80199d8:	f04f 36ff 	mov.w	r6, #4294967295
 80199dc:	e7eb      	b.n	80199b6 <_strtoul_l.isra.0+0x8e>
 80199de:	1c73      	adds	r3, r6, #1
 80199e0:	d106      	bne.n	80199f0 <_strtoul_l.isra.0+0xc8>
 80199e2:	2322      	movs	r3, #34	@ 0x22
 80199e4:	f8ce 3000 	str.w	r3, [lr]
 80199e8:	4630      	mov	r0, r6
 80199ea:	b932      	cbnz	r2, 80199fa <_strtoul_l.isra.0+0xd2>
 80199ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199f0:	b107      	cbz	r7, 80199f4 <_strtoul_l.isra.0+0xcc>
 80199f2:	4240      	negs	r0, r0
 80199f4:	2a00      	cmp	r2, #0
 80199f6:	d0f9      	beq.n	80199ec <_strtoul_l.isra.0+0xc4>
 80199f8:	b106      	cbz	r6, 80199fc <_strtoul_l.isra.0+0xd4>
 80199fa:	1e69      	subs	r1, r5, #1
 80199fc:	6011      	str	r1, [r2, #0]
 80199fe:	e7f5      	b.n	80199ec <_strtoul_l.isra.0+0xc4>
 8019a00:	0801ce83 	.word	0x0801ce83

08019a04 <strtoul>:
 8019a04:	4613      	mov	r3, r2
 8019a06:	460a      	mov	r2, r1
 8019a08:	4601      	mov	r1, r0
 8019a0a:	4802      	ldr	r0, [pc, #8]	@ (8019a14 <strtoul+0x10>)
 8019a0c:	6800      	ldr	r0, [r0, #0]
 8019a0e:	f7ff bf8b 	b.w	8019928 <_strtoul_l.isra.0>
 8019a12:	bf00      	nop
 8019a14:	200022cc 	.word	0x200022cc

08019a18 <std>:
 8019a18:	2300      	movs	r3, #0
 8019a1a:	b510      	push	{r4, lr}
 8019a1c:	4604      	mov	r4, r0
 8019a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8019a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019a26:	6083      	str	r3, [r0, #8]
 8019a28:	8181      	strh	r1, [r0, #12]
 8019a2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8019a2c:	81c2      	strh	r2, [r0, #14]
 8019a2e:	6183      	str	r3, [r0, #24]
 8019a30:	4619      	mov	r1, r3
 8019a32:	2208      	movs	r2, #8
 8019a34:	305c      	adds	r0, #92	@ 0x5c
 8019a36:	f000 fa7f 	bl	8019f38 <memset>
 8019a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8019a70 <std+0x58>)
 8019a3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8019a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8019a74 <std+0x5c>)
 8019a40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019a42:	4b0d      	ldr	r3, [pc, #52]	@ (8019a78 <std+0x60>)
 8019a44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019a46:	4b0d      	ldr	r3, [pc, #52]	@ (8019a7c <std+0x64>)
 8019a48:	6323      	str	r3, [r4, #48]	@ 0x30
 8019a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8019a80 <std+0x68>)
 8019a4c:	6224      	str	r4, [r4, #32]
 8019a4e:	429c      	cmp	r4, r3
 8019a50:	d006      	beq.n	8019a60 <std+0x48>
 8019a52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019a56:	4294      	cmp	r4, r2
 8019a58:	d002      	beq.n	8019a60 <std+0x48>
 8019a5a:	33d0      	adds	r3, #208	@ 0xd0
 8019a5c:	429c      	cmp	r4, r3
 8019a5e:	d105      	bne.n	8019a6c <std+0x54>
 8019a60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a68:	f000 bb36 	b.w	801a0d8 <__retarget_lock_init_recursive>
 8019a6c:	bd10      	pop	{r4, pc}
 8019a6e:	bf00      	nop
 8019a70:	08019cbd 	.word	0x08019cbd
 8019a74:	08019cdf 	.word	0x08019cdf
 8019a78:	08019d17 	.word	0x08019d17
 8019a7c:	08019d3b 	.word	0x08019d3b
 8019a80:	20010690 	.word	0x20010690

08019a84 <stdio_exit_handler>:
 8019a84:	4a02      	ldr	r2, [pc, #8]	@ (8019a90 <stdio_exit_handler+0xc>)
 8019a86:	4903      	ldr	r1, [pc, #12]	@ (8019a94 <stdio_exit_handler+0x10>)
 8019a88:	4803      	ldr	r0, [pc, #12]	@ (8019a98 <stdio_exit_handler+0x14>)
 8019a8a:	f000 b869 	b.w	8019b60 <_fwalk_sglue>
 8019a8e:	bf00      	nop
 8019a90:	200022c0 	.word	0x200022c0
 8019a94:	0801a8d5 	.word	0x0801a8d5
 8019a98:	200022d0 	.word	0x200022d0

08019a9c <cleanup_stdio>:
 8019a9c:	6841      	ldr	r1, [r0, #4]
 8019a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8019ad0 <cleanup_stdio+0x34>)
 8019aa0:	4299      	cmp	r1, r3
 8019aa2:	b510      	push	{r4, lr}
 8019aa4:	4604      	mov	r4, r0
 8019aa6:	d001      	beq.n	8019aac <cleanup_stdio+0x10>
 8019aa8:	f000 ff14 	bl	801a8d4 <_fflush_r>
 8019aac:	68a1      	ldr	r1, [r4, #8]
 8019aae:	4b09      	ldr	r3, [pc, #36]	@ (8019ad4 <cleanup_stdio+0x38>)
 8019ab0:	4299      	cmp	r1, r3
 8019ab2:	d002      	beq.n	8019aba <cleanup_stdio+0x1e>
 8019ab4:	4620      	mov	r0, r4
 8019ab6:	f000 ff0d 	bl	801a8d4 <_fflush_r>
 8019aba:	68e1      	ldr	r1, [r4, #12]
 8019abc:	4b06      	ldr	r3, [pc, #24]	@ (8019ad8 <cleanup_stdio+0x3c>)
 8019abe:	4299      	cmp	r1, r3
 8019ac0:	d004      	beq.n	8019acc <cleanup_stdio+0x30>
 8019ac2:	4620      	mov	r0, r4
 8019ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ac8:	f000 bf04 	b.w	801a8d4 <_fflush_r>
 8019acc:	bd10      	pop	{r4, pc}
 8019ace:	bf00      	nop
 8019ad0:	20010690 	.word	0x20010690
 8019ad4:	200106f8 	.word	0x200106f8
 8019ad8:	20010760 	.word	0x20010760

08019adc <global_stdio_init.part.0>:
 8019adc:	b510      	push	{r4, lr}
 8019ade:	4b0b      	ldr	r3, [pc, #44]	@ (8019b0c <global_stdio_init.part.0+0x30>)
 8019ae0:	4c0b      	ldr	r4, [pc, #44]	@ (8019b10 <global_stdio_init.part.0+0x34>)
 8019ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8019b14 <global_stdio_init.part.0+0x38>)
 8019ae4:	601a      	str	r2, [r3, #0]
 8019ae6:	4620      	mov	r0, r4
 8019ae8:	2200      	movs	r2, #0
 8019aea:	2104      	movs	r1, #4
 8019aec:	f7ff ff94 	bl	8019a18 <std>
 8019af0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019af4:	2201      	movs	r2, #1
 8019af6:	2109      	movs	r1, #9
 8019af8:	f7ff ff8e 	bl	8019a18 <std>
 8019afc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019b00:	2202      	movs	r2, #2
 8019b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b06:	2112      	movs	r1, #18
 8019b08:	f7ff bf86 	b.w	8019a18 <std>
 8019b0c:	200107c8 	.word	0x200107c8
 8019b10:	20010690 	.word	0x20010690
 8019b14:	08019a85 	.word	0x08019a85

08019b18 <__sfp_lock_acquire>:
 8019b18:	4801      	ldr	r0, [pc, #4]	@ (8019b20 <__sfp_lock_acquire+0x8>)
 8019b1a:	f000 bade 	b.w	801a0da <__retarget_lock_acquire_recursive>
 8019b1e:	bf00      	nop
 8019b20:	200107d2 	.word	0x200107d2

08019b24 <__sfp_lock_release>:
 8019b24:	4801      	ldr	r0, [pc, #4]	@ (8019b2c <__sfp_lock_release+0x8>)
 8019b26:	f000 bad9 	b.w	801a0dc <__retarget_lock_release_recursive>
 8019b2a:	bf00      	nop
 8019b2c:	200107d2 	.word	0x200107d2

08019b30 <__sinit>:
 8019b30:	b510      	push	{r4, lr}
 8019b32:	4604      	mov	r4, r0
 8019b34:	f7ff fff0 	bl	8019b18 <__sfp_lock_acquire>
 8019b38:	6a23      	ldr	r3, [r4, #32]
 8019b3a:	b11b      	cbz	r3, 8019b44 <__sinit+0x14>
 8019b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b40:	f7ff bff0 	b.w	8019b24 <__sfp_lock_release>
 8019b44:	4b04      	ldr	r3, [pc, #16]	@ (8019b58 <__sinit+0x28>)
 8019b46:	6223      	str	r3, [r4, #32]
 8019b48:	4b04      	ldr	r3, [pc, #16]	@ (8019b5c <__sinit+0x2c>)
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d1f5      	bne.n	8019b3c <__sinit+0xc>
 8019b50:	f7ff ffc4 	bl	8019adc <global_stdio_init.part.0>
 8019b54:	e7f2      	b.n	8019b3c <__sinit+0xc>
 8019b56:	bf00      	nop
 8019b58:	08019a9d 	.word	0x08019a9d
 8019b5c:	200107c8 	.word	0x200107c8

08019b60 <_fwalk_sglue>:
 8019b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b64:	4607      	mov	r7, r0
 8019b66:	4688      	mov	r8, r1
 8019b68:	4614      	mov	r4, r2
 8019b6a:	2600      	movs	r6, #0
 8019b6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019b70:	f1b9 0901 	subs.w	r9, r9, #1
 8019b74:	d505      	bpl.n	8019b82 <_fwalk_sglue+0x22>
 8019b76:	6824      	ldr	r4, [r4, #0]
 8019b78:	2c00      	cmp	r4, #0
 8019b7a:	d1f7      	bne.n	8019b6c <_fwalk_sglue+0xc>
 8019b7c:	4630      	mov	r0, r6
 8019b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b82:	89ab      	ldrh	r3, [r5, #12]
 8019b84:	2b01      	cmp	r3, #1
 8019b86:	d907      	bls.n	8019b98 <_fwalk_sglue+0x38>
 8019b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019b8c:	3301      	adds	r3, #1
 8019b8e:	d003      	beq.n	8019b98 <_fwalk_sglue+0x38>
 8019b90:	4629      	mov	r1, r5
 8019b92:	4638      	mov	r0, r7
 8019b94:	47c0      	blx	r8
 8019b96:	4306      	orrs	r6, r0
 8019b98:	3568      	adds	r5, #104	@ 0x68
 8019b9a:	e7e9      	b.n	8019b70 <_fwalk_sglue+0x10>

08019b9c <_fwrite_r>:
 8019b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ba0:	9c08      	ldr	r4, [sp, #32]
 8019ba2:	468a      	mov	sl, r1
 8019ba4:	4690      	mov	r8, r2
 8019ba6:	fb02 f903 	mul.w	r9, r2, r3
 8019baa:	4606      	mov	r6, r0
 8019bac:	b118      	cbz	r0, 8019bb6 <_fwrite_r+0x1a>
 8019bae:	6a03      	ldr	r3, [r0, #32]
 8019bb0:	b90b      	cbnz	r3, 8019bb6 <_fwrite_r+0x1a>
 8019bb2:	f7ff ffbd 	bl	8019b30 <__sinit>
 8019bb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019bb8:	07dd      	lsls	r5, r3, #31
 8019bba:	d405      	bmi.n	8019bc8 <_fwrite_r+0x2c>
 8019bbc:	89a3      	ldrh	r3, [r4, #12]
 8019bbe:	0598      	lsls	r0, r3, #22
 8019bc0:	d402      	bmi.n	8019bc8 <_fwrite_r+0x2c>
 8019bc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019bc4:	f000 fa89 	bl	801a0da <__retarget_lock_acquire_recursive>
 8019bc8:	89a3      	ldrh	r3, [r4, #12]
 8019bca:	0719      	lsls	r1, r3, #28
 8019bcc:	d516      	bpl.n	8019bfc <_fwrite_r+0x60>
 8019bce:	6923      	ldr	r3, [r4, #16]
 8019bd0:	b1a3      	cbz	r3, 8019bfc <_fwrite_r+0x60>
 8019bd2:	2500      	movs	r5, #0
 8019bd4:	454d      	cmp	r5, r9
 8019bd6:	d01f      	beq.n	8019c18 <_fwrite_r+0x7c>
 8019bd8:	68a7      	ldr	r7, [r4, #8]
 8019bda:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8019bde:	3f01      	subs	r7, #1
 8019be0:	2f00      	cmp	r7, #0
 8019be2:	60a7      	str	r7, [r4, #8]
 8019be4:	da04      	bge.n	8019bf0 <_fwrite_r+0x54>
 8019be6:	69a3      	ldr	r3, [r4, #24]
 8019be8:	429f      	cmp	r7, r3
 8019bea:	db0f      	blt.n	8019c0c <_fwrite_r+0x70>
 8019bec:	290a      	cmp	r1, #10
 8019bee:	d00d      	beq.n	8019c0c <_fwrite_r+0x70>
 8019bf0:	6823      	ldr	r3, [r4, #0]
 8019bf2:	1c5a      	adds	r2, r3, #1
 8019bf4:	6022      	str	r2, [r4, #0]
 8019bf6:	7019      	strb	r1, [r3, #0]
 8019bf8:	3501      	adds	r5, #1
 8019bfa:	e7eb      	b.n	8019bd4 <_fwrite_r+0x38>
 8019bfc:	4621      	mov	r1, r4
 8019bfe:	4630      	mov	r0, r6
 8019c00:	f000 f91a 	bl	8019e38 <__swsetup_r>
 8019c04:	2800      	cmp	r0, #0
 8019c06:	d0e4      	beq.n	8019bd2 <_fwrite_r+0x36>
 8019c08:	2500      	movs	r5, #0
 8019c0a:	e005      	b.n	8019c18 <_fwrite_r+0x7c>
 8019c0c:	4622      	mov	r2, r4
 8019c0e:	4630      	mov	r0, r6
 8019c10:	f000 f8d4 	bl	8019dbc <__swbuf_r>
 8019c14:	3001      	adds	r0, #1
 8019c16:	d1ef      	bne.n	8019bf8 <_fwrite_r+0x5c>
 8019c18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019c1a:	07da      	lsls	r2, r3, #31
 8019c1c:	d405      	bmi.n	8019c2a <_fwrite_r+0x8e>
 8019c1e:	89a3      	ldrh	r3, [r4, #12]
 8019c20:	059b      	lsls	r3, r3, #22
 8019c22:	d402      	bmi.n	8019c2a <_fwrite_r+0x8e>
 8019c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019c26:	f000 fa59 	bl	801a0dc <__retarget_lock_release_recursive>
 8019c2a:	fbb5 f0f8 	udiv	r0, r5, r8
 8019c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019c34 <fwrite>:
 8019c34:	b507      	push	{r0, r1, r2, lr}
 8019c36:	9300      	str	r3, [sp, #0]
 8019c38:	4613      	mov	r3, r2
 8019c3a:	460a      	mov	r2, r1
 8019c3c:	4601      	mov	r1, r0
 8019c3e:	4803      	ldr	r0, [pc, #12]	@ (8019c4c <fwrite+0x18>)
 8019c40:	6800      	ldr	r0, [r0, #0]
 8019c42:	f7ff ffab 	bl	8019b9c <_fwrite_r>
 8019c46:	b003      	add	sp, #12
 8019c48:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c4c:	200022cc 	.word	0x200022cc

08019c50 <sniprintf>:
 8019c50:	b40c      	push	{r2, r3}
 8019c52:	b530      	push	{r4, r5, lr}
 8019c54:	4b18      	ldr	r3, [pc, #96]	@ (8019cb8 <sniprintf+0x68>)
 8019c56:	1e0c      	subs	r4, r1, #0
 8019c58:	681d      	ldr	r5, [r3, #0]
 8019c5a:	b09d      	sub	sp, #116	@ 0x74
 8019c5c:	da08      	bge.n	8019c70 <sniprintf+0x20>
 8019c5e:	238b      	movs	r3, #139	@ 0x8b
 8019c60:	602b      	str	r3, [r5, #0]
 8019c62:	f04f 30ff 	mov.w	r0, #4294967295
 8019c66:	b01d      	add	sp, #116	@ 0x74
 8019c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c6c:	b002      	add	sp, #8
 8019c6e:	4770      	bx	lr
 8019c70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019c74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019c78:	f04f 0300 	mov.w	r3, #0
 8019c7c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019c7e:	bf14      	ite	ne
 8019c80:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019c84:	4623      	moveq	r3, r4
 8019c86:	9304      	str	r3, [sp, #16]
 8019c88:	9307      	str	r3, [sp, #28]
 8019c8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019c8e:	9002      	str	r0, [sp, #8]
 8019c90:	9006      	str	r0, [sp, #24]
 8019c92:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019c96:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019c98:	ab21      	add	r3, sp, #132	@ 0x84
 8019c9a:	a902      	add	r1, sp, #8
 8019c9c:	4628      	mov	r0, r5
 8019c9e:	9301      	str	r3, [sp, #4]
 8019ca0:	f000 fb0c 	bl	801a2bc <_svfiprintf_r>
 8019ca4:	1c43      	adds	r3, r0, #1
 8019ca6:	bfbc      	itt	lt
 8019ca8:	238b      	movlt	r3, #139	@ 0x8b
 8019caa:	602b      	strlt	r3, [r5, #0]
 8019cac:	2c00      	cmp	r4, #0
 8019cae:	d0da      	beq.n	8019c66 <sniprintf+0x16>
 8019cb0:	9b02      	ldr	r3, [sp, #8]
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	701a      	strb	r2, [r3, #0]
 8019cb6:	e7d6      	b.n	8019c66 <sniprintf+0x16>
 8019cb8:	200022cc 	.word	0x200022cc

08019cbc <__sread>:
 8019cbc:	b510      	push	{r4, lr}
 8019cbe:	460c      	mov	r4, r1
 8019cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cc4:	f000 f9aa 	bl	801a01c <_read_r>
 8019cc8:	2800      	cmp	r0, #0
 8019cca:	bfab      	itete	ge
 8019ccc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019cce:	89a3      	ldrhlt	r3, [r4, #12]
 8019cd0:	181b      	addge	r3, r3, r0
 8019cd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019cd6:	bfac      	ite	ge
 8019cd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019cda:	81a3      	strhlt	r3, [r4, #12]
 8019cdc:	bd10      	pop	{r4, pc}

08019cde <__swrite>:
 8019cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ce2:	461f      	mov	r7, r3
 8019ce4:	898b      	ldrh	r3, [r1, #12]
 8019ce6:	05db      	lsls	r3, r3, #23
 8019ce8:	4605      	mov	r5, r0
 8019cea:	460c      	mov	r4, r1
 8019cec:	4616      	mov	r6, r2
 8019cee:	d505      	bpl.n	8019cfc <__swrite+0x1e>
 8019cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019cf4:	2302      	movs	r3, #2
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	f000 f97e 	bl	8019ff8 <_lseek_r>
 8019cfc:	89a3      	ldrh	r3, [r4, #12]
 8019cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019d06:	81a3      	strh	r3, [r4, #12]
 8019d08:	4632      	mov	r2, r6
 8019d0a:	463b      	mov	r3, r7
 8019d0c:	4628      	mov	r0, r5
 8019d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d12:	f000 b9a5 	b.w	801a060 <_write_r>

08019d16 <__sseek>:
 8019d16:	b510      	push	{r4, lr}
 8019d18:	460c      	mov	r4, r1
 8019d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d1e:	f000 f96b 	bl	8019ff8 <_lseek_r>
 8019d22:	1c43      	adds	r3, r0, #1
 8019d24:	89a3      	ldrh	r3, [r4, #12]
 8019d26:	bf15      	itete	ne
 8019d28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019d2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019d2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019d32:	81a3      	strheq	r3, [r4, #12]
 8019d34:	bf18      	it	ne
 8019d36:	81a3      	strhne	r3, [r4, #12]
 8019d38:	bd10      	pop	{r4, pc}

08019d3a <__sclose>:
 8019d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d3e:	f000 b94b 	b.w	8019fd8 <_close_r>

08019d42 <_vsniprintf_r>:
 8019d42:	b530      	push	{r4, r5, lr}
 8019d44:	4614      	mov	r4, r2
 8019d46:	2c00      	cmp	r4, #0
 8019d48:	b09b      	sub	sp, #108	@ 0x6c
 8019d4a:	4605      	mov	r5, r0
 8019d4c:	461a      	mov	r2, r3
 8019d4e:	da05      	bge.n	8019d5c <_vsniprintf_r+0x1a>
 8019d50:	238b      	movs	r3, #139	@ 0x8b
 8019d52:	6003      	str	r3, [r0, #0]
 8019d54:	f04f 30ff 	mov.w	r0, #4294967295
 8019d58:	b01b      	add	sp, #108	@ 0x6c
 8019d5a:	bd30      	pop	{r4, r5, pc}
 8019d5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019d60:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019d64:	f04f 0300 	mov.w	r3, #0
 8019d68:	9319      	str	r3, [sp, #100]	@ 0x64
 8019d6a:	bf14      	ite	ne
 8019d6c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019d70:	4623      	moveq	r3, r4
 8019d72:	9302      	str	r3, [sp, #8]
 8019d74:	9305      	str	r3, [sp, #20]
 8019d76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019d7a:	9100      	str	r1, [sp, #0]
 8019d7c:	9104      	str	r1, [sp, #16]
 8019d7e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019d82:	4669      	mov	r1, sp
 8019d84:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019d86:	f000 fa99 	bl	801a2bc <_svfiprintf_r>
 8019d8a:	1c43      	adds	r3, r0, #1
 8019d8c:	bfbc      	itt	lt
 8019d8e:	238b      	movlt	r3, #139	@ 0x8b
 8019d90:	602b      	strlt	r3, [r5, #0]
 8019d92:	2c00      	cmp	r4, #0
 8019d94:	d0e0      	beq.n	8019d58 <_vsniprintf_r+0x16>
 8019d96:	9b00      	ldr	r3, [sp, #0]
 8019d98:	2200      	movs	r2, #0
 8019d9a:	701a      	strb	r2, [r3, #0]
 8019d9c:	e7dc      	b.n	8019d58 <_vsniprintf_r+0x16>
	...

08019da0 <vsniprintf>:
 8019da0:	b507      	push	{r0, r1, r2, lr}
 8019da2:	9300      	str	r3, [sp, #0]
 8019da4:	4613      	mov	r3, r2
 8019da6:	460a      	mov	r2, r1
 8019da8:	4601      	mov	r1, r0
 8019daa:	4803      	ldr	r0, [pc, #12]	@ (8019db8 <vsniprintf+0x18>)
 8019dac:	6800      	ldr	r0, [r0, #0]
 8019dae:	f7ff ffc8 	bl	8019d42 <_vsniprintf_r>
 8019db2:	b003      	add	sp, #12
 8019db4:	f85d fb04 	ldr.w	pc, [sp], #4
 8019db8:	200022cc 	.word	0x200022cc

08019dbc <__swbuf_r>:
 8019dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dbe:	460e      	mov	r6, r1
 8019dc0:	4614      	mov	r4, r2
 8019dc2:	4605      	mov	r5, r0
 8019dc4:	b118      	cbz	r0, 8019dce <__swbuf_r+0x12>
 8019dc6:	6a03      	ldr	r3, [r0, #32]
 8019dc8:	b90b      	cbnz	r3, 8019dce <__swbuf_r+0x12>
 8019dca:	f7ff feb1 	bl	8019b30 <__sinit>
 8019dce:	69a3      	ldr	r3, [r4, #24]
 8019dd0:	60a3      	str	r3, [r4, #8]
 8019dd2:	89a3      	ldrh	r3, [r4, #12]
 8019dd4:	071a      	lsls	r2, r3, #28
 8019dd6:	d501      	bpl.n	8019ddc <__swbuf_r+0x20>
 8019dd8:	6923      	ldr	r3, [r4, #16]
 8019dda:	b943      	cbnz	r3, 8019dee <__swbuf_r+0x32>
 8019ddc:	4621      	mov	r1, r4
 8019dde:	4628      	mov	r0, r5
 8019de0:	f000 f82a 	bl	8019e38 <__swsetup_r>
 8019de4:	b118      	cbz	r0, 8019dee <__swbuf_r+0x32>
 8019de6:	f04f 37ff 	mov.w	r7, #4294967295
 8019dea:	4638      	mov	r0, r7
 8019dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dee:	6823      	ldr	r3, [r4, #0]
 8019df0:	6922      	ldr	r2, [r4, #16]
 8019df2:	1a98      	subs	r0, r3, r2
 8019df4:	6963      	ldr	r3, [r4, #20]
 8019df6:	b2f6      	uxtb	r6, r6
 8019df8:	4283      	cmp	r3, r0
 8019dfa:	4637      	mov	r7, r6
 8019dfc:	dc05      	bgt.n	8019e0a <__swbuf_r+0x4e>
 8019dfe:	4621      	mov	r1, r4
 8019e00:	4628      	mov	r0, r5
 8019e02:	f000 fd67 	bl	801a8d4 <_fflush_r>
 8019e06:	2800      	cmp	r0, #0
 8019e08:	d1ed      	bne.n	8019de6 <__swbuf_r+0x2a>
 8019e0a:	68a3      	ldr	r3, [r4, #8]
 8019e0c:	3b01      	subs	r3, #1
 8019e0e:	60a3      	str	r3, [r4, #8]
 8019e10:	6823      	ldr	r3, [r4, #0]
 8019e12:	1c5a      	adds	r2, r3, #1
 8019e14:	6022      	str	r2, [r4, #0]
 8019e16:	701e      	strb	r6, [r3, #0]
 8019e18:	6962      	ldr	r2, [r4, #20]
 8019e1a:	1c43      	adds	r3, r0, #1
 8019e1c:	429a      	cmp	r2, r3
 8019e1e:	d004      	beq.n	8019e2a <__swbuf_r+0x6e>
 8019e20:	89a3      	ldrh	r3, [r4, #12]
 8019e22:	07db      	lsls	r3, r3, #31
 8019e24:	d5e1      	bpl.n	8019dea <__swbuf_r+0x2e>
 8019e26:	2e0a      	cmp	r6, #10
 8019e28:	d1df      	bne.n	8019dea <__swbuf_r+0x2e>
 8019e2a:	4621      	mov	r1, r4
 8019e2c:	4628      	mov	r0, r5
 8019e2e:	f000 fd51 	bl	801a8d4 <_fflush_r>
 8019e32:	2800      	cmp	r0, #0
 8019e34:	d0d9      	beq.n	8019dea <__swbuf_r+0x2e>
 8019e36:	e7d6      	b.n	8019de6 <__swbuf_r+0x2a>

08019e38 <__swsetup_r>:
 8019e38:	b538      	push	{r3, r4, r5, lr}
 8019e3a:	4b29      	ldr	r3, [pc, #164]	@ (8019ee0 <__swsetup_r+0xa8>)
 8019e3c:	4605      	mov	r5, r0
 8019e3e:	6818      	ldr	r0, [r3, #0]
 8019e40:	460c      	mov	r4, r1
 8019e42:	b118      	cbz	r0, 8019e4c <__swsetup_r+0x14>
 8019e44:	6a03      	ldr	r3, [r0, #32]
 8019e46:	b90b      	cbnz	r3, 8019e4c <__swsetup_r+0x14>
 8019e48:	f7ff fe72 	bl	8019b30 <__sinit>
 8019e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019e50:	0719      	lsls	r1, r3, #28
 8019e52:	d422      	bmi.n	8019e9a <__swsetup_r+0x62>
 8019e54:	06da      	lsls	r2, r3, #27
 8019e56:	d407      	bmi.n	8019e68 <__swsetup_r+0x30>
 8019e58:	2209      	movs	r2, #9
 8019e5a:	602a      	str	r2, [r5, #0]
 8019e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e60:	81a3      	strh	r3, [r4, #12]
 8019e62:	f04f 30ff 	mov.w	r0, #4294967295
 8019e66:	e033      	b.n	8019ed0 <__swsetup_r+0x98>
 8019e68:	0758      	lsls	r0, r3, #29
 8019e6a:	d512      	bpl.n	8019e92 <__swsetup_r+0x5a>
 8019e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019e6e:	b141      	cbz	r1, 8019e82 <__swsetup_r+0x4a>
 8019e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019e74:	4299      	cmp	r1, r3
 8019e76:	d002      	beq.n	8019e7e <__swsetup_r+0x46>
 8019e78:	4628      	mov	r0, r5
 8019e7a:	f000 f971 	bl	801a160 <_free_r>
 8019e7e:	2300      	movs	r3, #0
 8019e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8019e82:	89a3      	ldrh	r3, [r4, #12]
 8019e84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019e88:	81a3      	strh	r3, [r4, #12]
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	6063      	str	r3, [r4, #4]
 8019e8e:	6923      	ldr	r3, [r4, #16]
 8019e90:	6023      	str	r3, [r4, #0]
 8019e92:	89a3      	ldrh	r3, [r4, #12]
 8019e94:	f043 0308 	orr.w	r3, r3, #8
 8019e98:	81a3      	strh	r3, [r4, #12]
 8019e9a:	6923      	ldr	r3, [r4, #16]
 8019e9c:	b94b      	cbnz	r3, 8019eb2 <__swsetup_r+0x7a>
 8019e9e:	89a3      	ldrh	r3, [r4, #12]
 8019ea0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019ea8:	d003      	beq.n	8019eb2 <__swsetup_r+0x7a>
 8019eaa:	4621      	mov	r1, r4
 8019eac:	4628      	mov	r0, r5
 8019eae:	f000 fd71 	bl	801a994 <__smakebuf_r>
 8019eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019eb6:	f013 0201 	ands.w	r2, r3, #1
 8019eba:	d00a      	beq.n	8019ed2 <__swsetup_r+0x9a>
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	60a2      	str	r2, [r4, #8]
 8019ec0:	6962      	ldr	r2, [r4, #20]
 8019ec2:	4252      	negs	r2, r2
 8019ec4:	61a2      	str	r2, [r4, #24]
 8019ec6:	6922      	ldr	r2, [r4, #16]
 8019ec8:	b942      	cbnz	r2, 8019edc <__swsetup_r+0xa4>
 8019eca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019ece:	d1c5      	bne.n	8019e5c <__swsetup_r+0x24>
 8019ed0:	bd38      	pop	{r3, r4, r5, pc}
 8019ed2:	0799      	lsls	r1, r3, #30
 8019ed4:	bf58      	it	pl
 8019ed6:	6962      	ldrpl	r2, [r4, #20]
 8019ed8:	60a2      	str	r2, [r4, #8]
 8019eda:	e7f4      	b.n	8019ec6 <__swsetup_r+0x8e>
 8019edc:	2000      	movs	r0, #0
 8019ede:	e7f7      	b.n	8019ed0 <__swsetup_r+0x98>
 8019ee0:	200022cc 	.word	0x200022cc

08019ee4 <memcmp>:
 8019ee4:	b510      	push	{r4, lr}
 8019ee6:	3901      	subs	r1, #1
 8019ee8:	4402      	add	r2, r0
 8019eea:	4290      	cmp	r0, r2
 8019eec:	d101      	bne.n	8019ef2 <memcmp+0xe>
 8019eee:	2000      	movs	r0, #0
 8019ef0:	e005      	b.n	8019efe <memcmp+0x1a>
 8019ef2:	7803      	ldrb	r3, [r0, #0]
 8019ef4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019ef8:	42a3      	cmp	r3, r4
 8019efa:	d001      	beq.n	8019f00 <memcmp+0x1c>
 8019efc:	1b18      	subs	r0, r3, r4
 8019efe:	bd10      	pop	{r4, pc}
 8019f00:	3001      	adds	r0, #1
 8019f02:	e7f2      	b.n	8019eea <memcmp+0x6>

08019f04 <memmove>:
 8019f04:	4288      	cmp	r0, r1
 8019f06:	b510      	push	{r4, lr}
 8019f08:	eb01 0402 	add.w	r4, r1, r2
 8019f0c:	d902      	bls.n	8019f14 <memmove+0x10>
 8019f0e:	4284      	cmp	r4, r0
 8019f10:	4623      	mov	r3, r4
 8019f12:	d807      	bhi.n	8019f24 <memmove+0x20>
 8019f14:	1e43      	subs	r3, r0, #1
 8019f16:	42a1      	cmp	r1, r4
 8019f18:	d008      	beq.n	8019f2c <memmove+0x28>
 8019f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019f22:	e7f8      	b.n	8019f16 <memmove+0x12>
 8019f24:	4402      	add	r2, r0
 8019f26:	4601      	mov	r1, r0
 8019f28:	428a      	cmp	r2, r1
 8019f2a:	d100      	bne.n	8019f2e <memmove+0x2a>
 8019f2c:	bd10      	pop	{r4, pc}
 8019f2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019f32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019f36:	e7f7      	b.n	8019f28 <memmove+0x24>

08019f38 <memset>:
 8019f38:	4402      	add	r2, r0
 8019f3a:	4603      	mov	r3, r0
 8019f3c:	4293      	cmp	r3, r2
 8019f3e:	d100      	bne.n	8019f42 <memset+0xa>
 8019f40:	4770      	bx	lr
 8019f42:	f803 1b01 	strb.w	r1, [r3], #1
 8019f46:	e7f9      	b.n	8019f3c <memset+0x4>

08019f48 <strchr>:
 8019f48:	b2c9      	uxtb	r1, r1
 8019f4a:	4603      	mov	r3, r0
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f52:	b112      	cbz	r2, 8019f5a <strchr+0x12>
 8019f54:	428a      	cmp	r2, r1
 8019f56:	d1f9      	bne.n	8019f4c <strchr+0x4>
 8019f58:	4770      	bx	lr
 8019f5a:	2900      	cmp	r1, #0
 8019f5c:	bf18      	it	ne
 8019f5e:	2000      	movne	r0, #0
 8019f60:	4770      	bx	lr

08019f62 <strncmp>:
 8019f62:	b510      	push	{r4, lr}
 8019f64:	b16a      	cbz	r2, 8019f82 <strncmp+0x20>
 8019f66:	3901      	subs	r1, #1
 8019f68:	1884      	adds	r4, r0, r2
 8019f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019f72:	429a      	cmp	r2, r3
 8019f74:	d103      	bne.n	8019f7e <strncmp+0x1c>
 8019f76:	42a0      	cmp	r0, r4
 8019f78:	d001      	beq.n	8019f7e <strncmp+0x1c>
 8019f7a:	2a00      	cmp	r2, #0
 8019f7c:	d1f5      	bne.n	8019f6a <strncmp+0x8>
 8019f7e:	1ad0      	subs	r0, r2, r3
 8019f80:	bd10      	pop	{r4, pc}
 8019f82:	4610      	mov	r0, r2
 8019f84:	e7fc      	b.n	8019f80 <strncmp+0x1e>

08019f86 <strncpy>:
 8019f86:	b510      	push	{r4, lr}
 8019f88:	3901      	subs	r1, #1
 8019f8a:	4603      	mov	r3, r0
 8019f8c:	b132      	cbz	r2, 8019f9c <strncpy+0x16>
 8019f8e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019f92:	f803 4b01 	strb.w	r4, [r3], #1
 8019f96:	3a01      	subs	r2, #1
 8019f98:	2c00      	cmp	r4, #0
 8019f9a:	d1f7      	bne.n	8019f8c <strncpy+0x6>
 8019f9c:	441a      	add	r2, r3
 8019f9e:	2100      	movs	r1, #0
 8019fa0:	4293      	cmp	r3, r2
 8019fa2:	d100      	bne.n	8019fa6 <strncpy+0x20>
 8019fa4:	bd10      	pop	{r4, pc}
 8019fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8019faa:	e7f9      	b.n	8019fa0 <strncpy+0x1a>

08019fac <strstr>:
 8019fac:	780a      	ldrb	r2, [r1, #0]
 8019fae:	b570      	push	{r4, r5, r6, lr}
 8019fb0:	b96a      	cbnz	r2, 8019fce <strstr+0x22>
 8019fb2:	bd70      	pop	{r4, r5, r6, pc}
 8019fb4:	429a      	cmp	r2, r3
 8019fb6:	d109      	bne.n	8019fcc <strstr+0x20>
 8019fb8:	460c      	mov	r4, r1
 8019fba:	4605      	mov	r5, r0
 8019fbc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d0f6      	beq.n	8019fb2 <strstr+0x6>
 8019fc4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019fc8:	429e      	cmp	r6, r3
 8019fca:	d0f7      	beq.n	8019fbc <strstr+0x10>
 8019fcc:	3001      	adds	r0, #1
 8019fce:	7803      	ldrb	r3, [r0, #0]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d1ef      	bne.n	8019fb4 <strstr+0x8>
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	e7ec      	b.n	8019fb2 <strstr+0x6>

08019fd8 <_close_r>:
 8019fd8:	b538      	push	{r3, r4, r5, lr}
 8019fda:	4d06      	ldr	r5, [pc, #24]	@ (8019ff4 <_close_r+0x1c>)
 8019fdc:	2300      	movs	r3, #0
 8019fde:	4604      	mov	r4, r0
 8019fe0:	4608      	mov	r0, r1
 8019fe2:	602b      	str	r3, [r5, #0]
 8019fe4:	f7e9 fabf 	bl	8003566 <_close>
 8019fe8:	1c43      	adds	r3, r0, #1
 8019fea:	d102      	bne.n	8019ff2 <_close_r+0x1a>
 8019fec:	682b      	ldr	r3, [r5, #0]
 8019fee:	b103      	cbz	r3, 8019ff2 <_close_r+0x1a>
 8019ff0:	6023      	str	r3, [r4, #0]
 8019ff2:	bd38      	pop	{r3, r4, r5, pc}
 8019ff4:	200107cc 	.word	0x200107cc

08019ff8 <_lseek_r>:
 8019ff8:	b538      	push	{r3, r4, r5, lr}
 8019ffa:	4d07      	ldr	r5, [pc, #28]	@ (801a018 <_lseek_r+0x20>)
 8019ffc:	4604      	mov	r4, r0
 8019ffe:	4608      	mov	r0, r1
 801a000:	4611      	mov	r1, r2
 801a002:	2200      	movs	r2, #0
 801a004:	602a      	str	r2, [r5, #0]
 801a006:	461a      	mov	r2, r3
 801a008:	f7e9 fad4 	bl	80035b4 <_lseek>
 801a00c:	1c43      	adds	r3, r0, #1
 801a00e:	d102      	bne.n	801a016 <_lseek_r+0x1e>
 801a010:	682b      	ldr	r3, [r5, #0]
 801a012:	b103      	cbz	r3, 801a016 <_lseek_r+0x1e>
 801a014:	6023      	str	r3, [r4, #0]
 801a016:	bd38      	pop	{r3, r4, r5, pc}
 801a018:	200107cc 	.word	0x200107cc

0801a01c <_read_r>:
 801a01c:	b538      	push	{r3, r4, r5, lr}
 801a01e:	4d07      	ldr	r5, [pc, #28]	@ (801a03c <_read_r+0x20>)
 801a020:	4604      	mov	r4, r0
 801a022:	4608      	mov	r0, r1
 801a024:	4611      	mov	r1, r2
 801a026:	2200      	movs	r2, #0
 801a028:	602a      	str	r2, [r5, #0]
 801a02a:	461a      	mov	r2, r3
 801a02c:	f7e9 fa62 	bl	80034f4 <_read>
 801a030:	1c43      	adds	r3, r0, #1
 801a032:	d102      	bne.n	801a03a <_read_r+0x1e>
 801a034:	682b      	ldr	r3, [r5, #0]
 801a036:	b103      	cbz	r3, 801a03a <_read_r+0x1e>
 801a038:	6023      	str	r3, [r4, #0]
 801a03a:	bd38      	pop	{r3, r4, r5, pc}
 801a03c:	200107cc 	.word	0x200107cc

0801a040 <_sbrk_r>:
 801a040:	b538      	push	{r3, r4, r5, lr}
 801a042:	4d06      	ldr	r5, [pc, #24]	@ (801a05c <_sbrk_r+0x1c>)
 801a044:	2300      	movs	r3, #0
 801a046:	4604      	mov	r4, r0
 801a048:	4608      	mov	r0, r1
 801a04a:	602b      	str	r3, [r5, #0]
 801a04c:	f7e9 fac0 	bl	80035d0 <_sbrk>
 801a050:	1c43      	adds	r3, r0, #1
 801a052:	d102      	bne.n	801a05a <_sbrk_r+0x1a>
 801a054:	682b      	ldr	r3, [r5, #0]
 801a056:	b103      	cbz	r3, 801a05a <_sbrk_r+0x1a>
 801a058:	6023      	str	r3, [r4, #0]
 801a05a:	bd38      	pop	{r3, r4, r5, pc}
 801a05c:	200107cc 	.word	0x200107cc

0801a060 <_write_r>:
 801a060:	b538      	push	{r3, r4, r5, lr}
 801a062:	4d07      	ldr	r5, [pc, #28]	@ (801a080 <_write_r+0x20>)
 801a064:	4604      	mov	r4, r0
 801a066:	4608      	mov	r0, r1
 801a068:	4611      	mov	r1, r2
 801a06a:	2200      	movs	r2, #0
 801a06c:	602a      	str	r2, [r5, #0]
 801a06e:	461a      	mov	r2, r3
 801a070:	f7e9 fa5d 	bl	800352e <_write>
 801a074:	1c43      	adds	r3, r0, #1
 801a076:	d102      	bne.n	801a07e <_write_r+0x1e>
 801a078:	682b      	ldr	r3, [r5, #0]
 801a07a:	b103      	cbz	r3, 801a07e <_write_r+0x1e>
 801a07c:	6023      	str	r3, [r4, #0]
 801a07e:	bd38      	pop	{r3, r4, r5, pc}
 801a080:	200107cc 	.word	0x200107cc

0801a084 <__errno>:
 801a084:	4b01      	ldr	r3, [pc, #4]	@ (801a08c <__errno+0x8>)
 801a086:	6818      	ldr	r0, [r3, #0]
 801a088:	4770      	bx	lr
 801a08a:	bf00      	nop
 801a08c:	200022cc 	.word	0x200022cc

0801a090 <__libc_init_array>:
 801a090:	b570      	push	{r4, r5, r6, lr}
 801a092:	4d0d      	ldr	r5, [pc, #52]	@ (801a0c8 <__libc_init_array+0x38>)
 801a094:	4c0d      	ldr	r4, [pc, #52]	@ (801a0cc <__libc_init_array+0x3c>)
 801a096:	1b64      	subs	r4, r4, r5
 801a098:	10a4      	asrs	r4, r4, #2
 801a09a:	2600      	movs	r6, #0
 801a09c:	42a6      	cmp	r6, r4
 801a09e:	d109      	bne.n	801a0b4 <__libc_init_array+0x24>
 801a0a0:	4d0b      	ldr	r5, [pc, #44]	@ (801a0d0 <__libc_init_array+0x40>)
 801a0a2:	4c0c      	ldr	r4, [pc, #48]	@ (801a0d4 <__libc_init_array+0x44>)
 801a0a4:	f001 fbd4 	bl	801b850 <_init>
 801a0a8:	1b64      	subs	r4, r4, r5
 801a0aa:	10a4      	asrs	r4, r4, #2
 801a0ac:	2600      	movs	r6, #0
 801a0ae:	42a6      	cmp	r6, r4
 801a0b0:	d105      	bne.n	801a0be <__libc_init_array+0x2e>
 801a0b2:	bd70      	pop	{r4, r5, r6, pc}
 801a0b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801a0b8:	4798      	blx	r3
 801a0ba:	3601      	adds	r6, #1
 801a0bc:	e7ee      	b.n	801a09c <__libc_init_array+0xc>
 801a0be:	f855 3b04 	ldr.w	r3, [r5], #4
 801a0c2:	4798      	blx	r3
 801a0c4:	3601      	adds	r6, #1
 801a0c6:	e7f2      	b.n	801a0ae <__libc_init_array+0x1e>
 801a0c8:	0801d35c 	.word	0x0801d35c
 801a0cc:	0801d35c 	.word	0x0801d35c
 801a0d0:	0801d35c 	.word	0x0801d35c
 801a0d4:	0801d368 	.word	0x0801d368

0801a0d8 <__retarget_lock_init_recursive>:
 801a0d8:	4770      	bx	lr

0801a0da <__retarget_lock_acquire_recursive>:
 801a0da:	4770      	bx	lr

0801a0dc <__retarget_lock_release_recursive>:
 801a0dc:	4770      	bx	lr

0801a0de <strcpy>:
 801a0de:	4603      	mov	r3, r0
 801a0e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a0e4:	f803 2b01 	strb.w	r2, [r3], #1
 801a0e8:	2a00      	cmp	r2, #0
 801a0ea:	d1f9      	bne.n	801a0e0 <strcpy+0x2>
 801a0ec:	4770      	bx	lr

0801a0ee <memcpy>:
 801a0ee:	440a      	add	r2, r1
 801a0f0:	4291      	cmp	r1, r2
 801a0f2:	f100 33ff 	add.w	r3, r0, #4294967295
 801a0f6:	d100      	bne.n	801a0fa <memcpy+0xc>
 801a0f8:	4770      	bx	lr
 801a0fa:	b510      	push	{r4, lr}
 801a0fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a100:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a104:	4291      	cmp	r1, r2
 801a106:	d1f9      	bne.n	801a0fc <memcpy+0xe>
 801a108:	bd10      	pop	{r4, pc}
	...

0801a10c <__assert_func>:
 801a10c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a10e:	4614      	mov	r4, r2
 801a110:	461a      	mov	r2, r3
 801a112:	4b09      	ldr	r3, [pc, #36]	@ (801a138 <__assert_func+0x2c>)
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	4605      	mov	r5, r0
 801a118:	68d8      	ldr	r0, [r3, #12]
 801a11a:	b14c      	cbz	r4, 801a130 <__assert_func+0x24>
 801a11c:	4b07      	ldr	r3, [pc, #28]	@ (801a13c <__assert_func+0x30>)
 801a11e:	9100      	str	r1, [sp, #0]
 801a120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a124:	4906      	ldr	r1, [pc, #24]	@ (801a140 <__assert_func+0x34>)
 801a126:	462b      	mov	r3, r5
 801a128:	f000 fbfc 	bl	801a924 <fiprintf>
 801a12c:	f000 fc90 	bl	801aa50 <abort>
 801a130:	4b04      	ldr	r3, [pc, #16]	@ (801a144 <__assert_func+0x38>)
 801a132:	461c      	mov	r4, r3
 801a134:	e7f3      	b.n	801a11e <__assert_func+0x12>
 801a136:	bf00      	nop
 801a138:	200022cc 	.word	0x200022cc
 801a13c:	0801ce13 	.word	0x0801ce13
 801a140:	0801ce20 	.word	0x0801ce20
 801a144:	0801ce4e 	.word	0x0801ce4e

0801a148 <__env_lock>:
 801a148:	4801      	ldr	r0, [pc, #4]	@ (801a150 <__env_lock+0x8>)
 801a14a:	f7ff bfc6 	b.w	801a0da <__retarget_lock_acquire_recursive>
 801a14e:	bf00      	nop
 801a150:	200107d0 	.word	0x200107d0

0801a154 <__env_unlock>:
 801a154:	4801      	ldr	r0, [pc, #4]	@ (801a15c <__env_unlock+0x8>)
 801a156:	f7ff bfc1 	b.w	801a0dc <__retarget_lock_release_recursive>
 801a15a:	bf00      	nop
 801a15c:	200107d0 	.word	0x200107d0

0801a160 <_free_r>:
 801a160:	b538      	push	{r3, r4, r5, lr}
 801a162:	4605      	mov	r5, r0
 801a164:	2900      	cmp	r1, #0
 801a166:	d041      	beq.n	801a1ec <_free_r+0x8c>
 801a168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a16c:	1f0c      	subs	r4, r1, #4
 801a16e:	2b00      	cmp	r3, #0
 801a170:	bfb8      	it	lt
 801a172:	18e4      	addlt	r4, r4, r3
 801a174:	f7ff fb2a 	bl	80197cc <__malloc_lock>
 801a178:	4a1d      	ldr	r2, [pc, #116]	@ (801a1f0 <_free_r+0x90>)
 801a17a:	6813      	ldr	r3, [r2, #0]
 801a17c:	b933      	cbnz	r3, 801a18c <_free_r+0x2c>
 801a17e:	6063      	str	r3, [r4, #4]
 801a180:	6014      	str	r4, [r2, #0]
 801a182:	4628      	mov	r0, r5
 801a184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a188:	f7ff bb26 	b.w	80197d8 <__malloc_unlock>
 801a18c:	42a3      	cmp	r3, r4
 801a18e:	d908      	bls.n	801a1a2 <_free_r+0x42>
 801a190:	6820      	ldr	r0, [r4, #0]
 801a192:	1821      	adds	r1, r4, r0
 801a194:	428b      	cmp	r3, r1
 801a196:	bf01      	itttt	eq
 801a198:	6819      	ldreq	r1, [r3, #0]
 801a19a:	685b      	ldreq	r3, [r3, #4]
 801a19c:	1809      	addeq	r1, r1, r0
 801a19e:	6021      	streq	r1, [r4, #0]
 801a1a0:	e7ed      	b.n	801a17e <_free_r+0x1e>
 801a1a2:	461a      	mov	r2, r3
 801a1a4:	685b      	ldr	r3, [r3, #4]
 801a1a6:	b10b      	cbz	r3, 801a1ac <_free_r+0x4c>
 801a1a8:	42a3      	cmp	r3, r4
 801a1aa:	d9fa      	bls.n	801a1a2 <_free_r+0x42>
 801a1ac:	6811      	ldr	r1, [r2, #0]
 801a1ae:	1850      	adds	r0, r2, r1
 801a1b0:	42a0      	cmp	r0, r4
 801a1b2:	d10b      	bne.n	801a1cc <_free_r+0x6c>
 801a1b4:	6820      	ldr	r0, [r4, #0]
 801a1b6:	4401      	add	r1, r0
 801a1b8:	1850      	adds	r0, r2, r1
 801a1ba:	4283      	cmp	r3, r0
 801a1bc:	6011      	str	r1, [r2, #0]
 801a1be:	d1e0      	bne.n	801a182 <_free_r+0x22>
 801a1c0:	6818      	ldr	r0, [r3, #0]
 801a1c2:	685b      	ldr	r3, [r3, #4]
 801a1c4:	6053      	str	r3, [r2, #4]
 801a1c6:	4408      	add	r0, r1
 801a1c8:	6010      	str	r0, [r2, #0]
 801a1ca:	e7da      	b.n	801a182 <_free_r+0x22>
 801a1cc:	d902      	bls.n	801a1d4 <_free_r+0x74>
 801a1ce:	230c      	movs	r3, #12
 801a1d0:	602b      	str	r3, [r5, #0]
 801a1d2:	e7d6      	b.n	801a182 <_free_r+0x22>
 801a1d4:	6820      	ldr	r0, [r4, #0]
 801a1d6:	1821      	adds	r1, r4, r0
 801a1d8:	428b      	cmp	r3, r1
 801a1da:	bf04      	itt	eq
 801a1dc:	6819      	ldreq	r1, [r3, #0]
 801a1de:	685b      	ldreq	r3, [r3, #4]
 801a1e0:	6063      	str	r3, [r4, #4]
 801a1e2:	bf04      	itt	eq
 801a1e4:	1809      	addeq	r1, r1, r0
 801a1e6:	6021      	streq	r1, [r4, #0]
 801a1e8:	6054      	str	r4, [r2, #4]
 801a1ea:	e7ca      	b.n	801a182 <_free_r+0x22>
 801a1ec:	bd38      	pop	{r3, r4, r5, pc}
 801a1ee:	bf00      	nop
 801a1f0:	2001068c 	.word	0x2001068c

0801a1f4 <_malloc_usable_size_r>:
 801a1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a1f8:	1f18      	subs	r0, r3, #4
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	bfbc      	itt	lt
 801a1fe:	580b      	ldrlt	r3, [r1, r0]
 801a200:	18c0      	addlt	r0, r0, r3
 801a202:	4770      	bx	lr

0801a204 <__ssputs_r>:
 801a204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a208:	688e      	ldr	r6, [r1, #8]
 801a20a:	461f      	mov	r7, r3
 801a20c:	42be      	cmp	r6, r7
 801a20e:	680b      	ldr	r3, [r1, #0]
 801a210:	4682      	mov	sl, r0
 801a212:	460c      	mov	r4, r1
 801a214:	4690      	mov	r8, r2
 801a216:	d82d      	bhi.n	801a274 <__ssputs_r+0x70>
 801a218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a21c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a220:	d026      	beq.n	801a270 <__ssputs_r+0x6c>
 801a222:	6965      	ldr	r5, [r4, #20]
 801a224:	6909      	ldr	r1, [r1, #16]
 801a226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a22a:	eba3 0901 	sub.w	r9, r3, r1
 801a22e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a232:	1c7b      	adds	r3, r7, #1
 801a234:	444b      	add	r3, r9
 801a236:	106d      	asrs	r5, r5, #1
 801a238:	429d      	cmp	r5, r3
 801a23a:	bf38      	it	cc
 801a23c:	461d      	movcc	r5, r3
 801a23e:	0553      	lsls	r3, r2, #21
 801a240:	d527      	bpl.n	801a292 <__ssputs_r+0x8e>
 801a242:	4629      	mov	r1, r5
 801a244:	f7ff fa42 	bl	80196cc <_malloc_r>
 801a248:	4606      	mov	r6, r0
 801a24a:	b360      	cbz	r0, 801a2a6 <__ssputs_r+0xa2>
 801a24c:	6921      	ldr	r1, [r4, #16]
 801a24e:	464a      	mov	r2, r9
 801a250:	f7ff ff4d 	bl	801a0ee <memcpy>
 801a254:	89a3      	ldrh	r3, [r4, #12]
 801a256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a25a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a25e:	81a3      	strh	r3, [r4, #12]
 801a260:	6126      	str	r6, [r4, #16]
 801a262:	6165      	str	r5, [r4, #20]
 801a264:	444e      	add	r6, r9
 801a266:	eba5 0509 	sub.w	r5, r5, r9
 801a26a:	6026      	str	r6, [r4, #0]
 801a26c:	60a5      	str	r5, [r4, #8]
 801a26e:	463e      	mov	r6, r7
 801a270:	42be      	cmp	r6, r7
 801a272:	d900      	bls.n	801a276 <__ssputs_r+0x72>
 801a274:	463e      	mov	r6, r7
 801a276:	6820      	ldr	r0, [r4, #0]
 801a278:	4632      	mov	r2, r6
 801a27a:	4641      	mov	r1, r8
 801a27c:	f7ff fe42 	bl	8019f04 <memmove>
 801a280:	68a3      	ldr	r3, [r4, #8]
 801a282:	1b9b      	subs	r3, r3, r6
 801a284:	60a3      	str	r3, [r4, #8]
 801a286:	6823      	ldr	r3, [r4, #0]
 801a288:	4433      	add	r3, r6
 801a28a:	6023      	str	r3, [r4, #0]
 801a28c:	2000      	movs	r0, #0
 801a28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a292:	462a      	mov	r2, r5
 801a294:	f7ff fb1a 	bl	80198cc <_realloc_r>
 801a298:	4606      	mov	r6, r0
 801a29a:	2800      	cmp	r0, #0
 801a29c:	d1e0      	bne.n	801a260 <__ssputs_r+0x5c>
 801a29e:	6921      	ldr	r1, [r4, #16]
 801a2a0:	4650      	mov	r0, sl
 801a2a2:	f7ff ff5d 	bl	801a160 <_free_r>
 801a2a6:	230c      	movs	r3, #12
 801a2a8:	f8ca 3000 	str.w	r3, [sl]
 801a2ac:	89a3      	ldrh	r3, [r4, #12]
 801a2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a2b2:	81a3      	strh	r3, [r4, #12]
 801a2b4:	f04f 30ff 	mov.w	r0, #4294967295
 801a2b8:	e7e9      	b.n	801a28e <__ssputs_r+0x8a>
	...

0801a2bc <_svfiprintf_r>:
 801a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2c0:	4698      	mov	r8, r3
 801a2c2:	898b      	ldrh	r3, [r1, #12]
 801a2c4:	061b      	lsls	r3, r3, #24
 801a2c6:	b09d      	sub	sp, #116	@ 0x74
 801a2c8:	4607      	mov	r7, r0
 801a2ca:	460d      	mov	r5, r1
 801a2cc:	4614      	mov	r4, r2
 801a2ce:	d510      	bpl.n	801a2f2 <_svfiprintf_r+0x36>
 801a2d0:	690b      	ldr	r3, [r1, #16]
 801a2d2:	b973      	cbnz	r3, 801a2f2 <_svfiprintf_r+0x36>
 801a2d4:	2140      	movs	r1, #64	@ 0x40
 801a2d6:	f7ff f9f9 	bl	80196cc <_malloc_r>
 801a2da:	6028      	str	r0, [r5, #0]
 801a2dc:	6128      	str	r0, [r5, #16]
 801a2de:	b930      	cbnz	r0, 801a2ee <_svfiprintf_r+0x32>
 801a2e0:	230c      	movs	r3, #12
 801a2e2:	603b      	str	r3, [r7, #0]
 801a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 801a2e8:	b01d      	add	sp, #116	@ 0x74
 801a2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ee:	2340      	movs	r3, #64	@ 0x40
 801a2f0:	616b      	str	r3, [r5, #20]
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a2f6:	2320      	movs	r3, #32
 801a2f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a2fc:	f8cd 800c 	str.w	r8, [sp, #12]
 801a300:	2330      	movs	r3, #48	@ 0x30
 801a302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a4a0 <_svfiprintf_r+0x1e4>
 801a306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a30a:	f04f 0901 	mov.w	r9, #1
 801a30e:	4623      	mov	r3, r4
 801a310:	469a      	mov	sl, r3
 801a312:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a316:	b10a      	cbz	r2, 801a31c <_svfiprintf_r+0x60>
 801a318:	2a25      	cmp	r2, #37	@ 0x25
 801a31a:	d1f9      	bne.n	801a310 <_svfiprintf_r+0x54>
 801a31c:	ebba 0b04 	subs.w	fp, sl, r4
 801a320:	d00b      	beq.n	801a33a <_svfiprintf_r+0x7e>
 801a322:	465b      	mov	r3, fp
 801a324:	4622      	mov	r2, r4
 801a326:	4629      	mov	r1, r5
 801a328:	4638      	mov	r0, r7
 801a32a:	f7ff ff6b 	bl	801a204 <__ssputs_r>
 801a32e:	3001      	adds	r0, #1
 801a330:	f000 80a7 	beq.w	801a482 <_svfiprintf_r+0x1c6>
 801a334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a336:	445a      	add	r2, fp
 801a338:	9209      	str	r2, [sp, #36]	@ 0x24
 801a33a:	f89a 3000 	ldrb.w	r3, [sl]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	f000 809f 	beq.w	801a482 <_svfiprintf_r+0x1c6>
 801a344:	2300      	movs	r3, #0
 801a346:	f04f 32ff 	mov.w	r2, #4294967295
 801a34a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a34e:	f10a 0a01 	add.w	sl, sl, #1
 801a352:	9304      	str	r3, [sp, #16]
 801a354:	9307      	str	r3, [sp, #28]
 801a356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a35a:	931a      	str	r3, [sp, #104]	@ 0x68
 801a35c:	4654      	mov	r4, sl
 801a35e:	2205      	movs	r2, #5
 801a360:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a364:	484e      	ldr	r0, [pc, #312]	@ (801a4a0 <_svfiprintf_r+0x1e4>)
 801a366:	f7e5 ff63 	bl	8000230 <memchr>
 801a36a:	9a04      	ldr	r2, [sp, #16]
 801a36c:	b9d8      	cbnz	r0, 801a3a6 <_svfiprintf_r+0xea>
 801a36e:	06d0      	lsls	r0, r2, #27
 801a370:	bf44      	itt	mi
 801a372:	2320      	movmi	r3, #32
 801a374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a378:	0711      	lsls	r1, r2, #28
 801a37a:	bf44      	itt	mi
 801a37c:	232b      	movmi	r3, #43	@ 0x2b
 801a37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a382:	f89a 3000 	ldrb.w	r3, [sl]
 801a386:	2b2a      	cmp	r3, #42	@ 0x2a
 801a388:	d015      	beq.n	801a3b6 <_svfiprintf_r+0xfa>
 801a38a:	9a07      	ldr	r2, [sp, #28]
 801a38c:	4654      	mov	r4, sl
 801a38e:	2000      	movs	r0, #0
 801a390:	f04f 0c0a 	mov.w	ip, #10
 801a394:	4621      	mov	r1, r4
 801a396:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a39a:	3b30      	subs	r3, #48	@ 0x30
 801a39c:	2b09      	cmp	r3, #9
 801a39e:	d94b      	bls.n	801a438 <_svfiprintf_r+0x17c>
 801a3a0:	b1b0      	cbz	r0, 801a3d0 <_svfiprintf_r+0x114>
 801a3a2:	9207      	str	r2, [sp, #28]
 801a3a4:	e014      	b.n	801a3d0 <_svfiprintf_r+0x114>
 801a3a6:	eba0 0308 	sub.w	r3, r0, r8
 801a3aa:	fa09 f303 	lsl.w	r3, r9, r3
 801a3ae:	4313      	orrs	r3, r2
 801a3b0:	9304      	str	r3, [sp, #16]
 801a3b2:	46a2      	mov	sl, r4
 801a3b4:	e7d2      	b.n	801a35c <_svfiprintf_r+0xa0>
 801a3b6:	9b03      	ldr	r3, [sp, #12]
 801a3b8:	1d19      	adds	r1, r3, #4
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	9103      	str	r1, [sp, #12]
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	bfbb      	ittet	lt
 801a3c2:	425b      	neglt	r3, r3
 801a3c4:	f042 0202 	orrlt.w	r2, r2, #2
 801a3c8:	9307      	strge	r3, [sp, #28]
 801a3ca:	9307      	strlt	r3, [sp, #28]
 801a3cc:	bfb8      	it	lt
 801a3ce:	9204      	strlt	r2, [sp, #16]
 801a3d0:	7823      	ldrb	r3, [r4, #0]
 801a3d2:	2b2e      	cmp	r3, #46	@ 0x2e
 801a3d4:	d10a      	bne.n	801a3ec <_svfiprintf_r+0x130>
 801a3d6:	7863      	ldrb	r3, [r4, #1]
 801a3d8:	2b2a      	cmp	r3, #42	@ 0x2a
 801a3da:	d132      	bne.n	801a442 <_svfiprintf_r+0x186>
 801a3dc:	9b03      	ldr	r3, [sp, #12]
 801a3de:	1d1a      	adds	r2, r3, #4
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	9203      	str	r2, [sp, #12]
 801a3e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a3e8:	3402      	adds	r4, #2
 801a3ea:	9305      	str	r3, [sp, #20]
 801a3ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a4b0 <_svfiprintf_r+0x1f4>
 801a3f0:	7821      	ldrb	r1, [r4, #0]
 801a3f2:	2203      	movs	r2, #3
 801a3f4:	4650      	mov	r0, sl
 801a3f6:	f7e5 ff1b 	bl	8000230 <memchr>
 801a3fa:	b138      	cbz	r0, 801a40c <_svfiprintf_r+0x150>
 801a3fc:	9b04      	ldr	r3, [sp, #16]
 801a3fe:	eba0 000a 	sub.w	r0, r0, sl
 801a402:	2240      	movs	r2, #64	@ 0x40
 801a404:	4082      	lsls	r2, r0
 801a406:	4313      	orrs	r3, r2
 801a408:	3401      	adds	r4, #1
 801a40a:	9304      	str	r3, [sp, #16]
 801a40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a410:	4824      	ldr	r0, [pc, #144]	@ (801a4a4 <_svfiprintf_r+0x1e8>)
 801a412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a416:	2206      	movs	r2, #6
 801a418:	f7e5 ff0a 	bl	8000230 <memchr>
 801a41c:	2800      	cmp	r0, #0
 801a41e:	d036      	beq.n	801a48e <_svfiprintf_r+0x1d2>
 801a420:	4b21      	ldr	r3, [pc, #132]	@ (801a4a8 <_svfiprintf_r+0x1ec>)
 801a422:	bb1b      	cbnz	r3, 801a46c <_svfiprintf_r+0x1b0>
 801a424:	9b03      	ldr	r3, [sp, #12]
 801a426:	3307      	adds	r3, #7
 801a428:	f023 0307 	bic.w	r3, r3, #7
 801a42c:	3308      	adds	r3, #8
 801a42e:	9303      	str	r3, [sp, #12]
 801a430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a432:	4433      	add	r3, r6
 801a434:	9309      	str	r3, [sp, #36]	@ 0x24
 801a436:	e76a      	b.n	801a30e <_svfiprintf_r+0x52>
 801a438:	fb0c 3202 	mla	r2, ip, r2, r3
 801a43c:	460c      	mov	r4, r1
 801a43e:	2001      	movs	r0, #1
 801a440:	e7a8      	b.n	801a394 <_svfiprintf_r+0xd8>
 801a442:	2300      	movs	r3, #0
 801a444:	3401      	adds	r4, #1
 801a446:	9305      	str	r3, [sp, #20]
 801a448:	4619      	mov	r1, r3
 801a44a:	f04f 0c0a 	mov.w	ip, #10
 801a44e:	4620      	mov	r0, r4
 801a450:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a454:	3a30      	subs	r2, #48	@ 0x30
 801a456:	2a09      	cmp	r2, #9
 801a458:	d903      	bls.n	801a462 <_svfiprintf_r+0x1a6>
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d0c6      	beq.n	801a3ec <_svfiprintf_r+0x130>
 801a45e:	9105      	str	r1, [sp, #20]
 801a460:	e7c4      	b.n	801a3ec <_svfiprintf_r+0x130>
 801a462:	fb0c 2101 	mla	r1, ip, r1, r2
 801a466:	4604      	mov	r4, r0
 801a468:	2301      	movs	r3, #1
 801a46a:	e7f0      	b.n	801a44e <_svfiprintf_r+0x192>
 801a46c:	ab03      	add	r3, sp, #12
 801a46e:	9300      	str	r3, [sp, #0]
 801a470:	462a      	mov	r2, r5
 801a472:	4b0e      	ldr	r3, [pc, #56]	@ (801a4ac <_svfiprintf_r+0x1f0>)
 801a474:	a904      	add	r1, sp, #16
 801a476:	4638      	mov	r0, r7
 801a478:	f3af 8000 	nop.w
 801a47c:	1c42      	adds	r2, r0, #1
 801a47e:	4606      	mov	r6, r0
 801a480:	d1d6      	bne.n	801a430 <_svfiprintf_r+0x174>
 801a482:	89ab      	ldrh	r3, [r5, #12]
 801a484:	065b      	lsls	r3, r3, #25
 801a486:	f53f af2d 	bmi.w	801a2e4 <_svfiprintf_r+0x28>
 801a48a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a48c:	e72c      	b.n	801a2e8 <_svfiprintf_r+0x2c>
 801a48e:	ab03      	add	r3, sp, #12
 801a490:	9300      	str	r3, [sp, #0]
 801a492:	462a      	mov	r2, r5
 801a494:	4b05      	ldr	r3, [pc, #20]	@ (801a4ac <_svfiprintf_r+0x1f0>)
 801a496:	a904      	add	r1, sp, #16
 801a498:	4638      	mov	r0, r7
 801a49a:	f000 f879 	bl	801a590 <_printf_i>
 801a49e:	e7ed      	b.n	801a47c <_svfiprintf_r+0x1c0>
 801a4a0:	0801ce4f 	.word	0x0801ce4f
 801a4a4:	0801ce59 	.word	0x0801ce59
 801a4a8:	00000000 	.word	0x00000000
 801a4ac:	0801a205 	.word	0x0801a205
 801a4b0:	0801ce55 	.word	0x0801ce55

0801a4b4 <_printf_common>:
 801a4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a4b8:	4616      	mov	r6, r2
 801a4ba:	4698      	mov	r8, r3
 801a4bc:	688a      	ldr	r2, [r1, #8]
 801a4be:	690b      	ldr	r3, [r1, #16]
 801a4c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a4c4:	4293      	cmp	r3, r2
 801a4c6:	bfb8      	it	lt
 801a4c8:	4613      	movlt	r3, r2
 801a4ca:	6033      	str	r3, [r6, #0]
 801a4cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a4d0:	4607      	mov	r7, r0
 801a4d2:	460c      	mov	r4, r1
 801a4d4:	b10a      	cbz	r2, 801a4da <_printf_common+0x26>
 801a4d6:	3301      	adds	r3, #1
 801a4d8:	6033      	str	r3, [r6, #0]
 801a4da:	6823      	ldr	r3, [r4, #0]
 801a4dc:	0699      	lsls	r1, r3, #26
 801a4de:	bf42      	ittt	mi
 801a4e0:	6833      	ldrmi	r3, [r6, #0]
 801a4e2:	3302      	addmi	r3, #2
 801a4e4:	6033      	strmi	r3, [r6, #0]
 801a4e6:	6825      	ldr	r5, [r4, #0]
 801a4e8:	f015 0506 	ands.w	r5, r5, #6
 801a4ec:	d106      	bne.n	801a4fc <_printf_common+0x48>
 801a4ee:	f104 0a19 	add.w	sl, r4, #25
 801a4f2:	68e3      	ldr	r3, [r4, #12]
 801a4f4:	6832      	ldr	r2, [r6, #0]
 801a4f6:	1a9b      	subs	r3, r3, r2
 801a4f8:	42ab      	cmp	r3, r5
 801a4fa:	dc26      	bgt.n	801a54a <_printf_common+0x96>
 801a4fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a500:	6822      	ldr	r2, [r4, #0]
 801a502:	3b00      	subs	r3, #0
 801a504:	bf18      	it	ne
 801a506:	2301      	movne	r3, #1
 801a508:	0692      	lsls	r2, r2, #26
 801a50a:	d42b      	bmi.n	801a564 <_printf_common+0xb0>
 801a50c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a510:	4641      	mov	r1, r8
 801a512:	4638      	mov	r0, r7
 801a514:	47c8      	blx	r9
 801a516:	3001      	adds	r0, #1
 801a518:	d01e      	beq.n	801a558 <_printf_common+0xa4>
 801a51a:	6823      	ldr	r3, [r4, #0]
 801a51c:	6922      	ldr	r2, [r4, #16]
 801a51e:	f003 0306 	and.w	r3, r3, #6
 801a522:	2b04      	cmp	r3, #4
 801a524:	bf02      	ittt	eq
 801a526:	68e5      	ldreq	r5, [r4, #12]
 801a528:	6833      	ldreq	r3, [r6, #0]
 801a52a:	1aed      	subeq	r5, r5, r3
 801a52c:	68a3      	ldr	r3, [r4, #8]
 801a52e:	bf0c      	ite	eq
 801a530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a534:	2500      	movne	r5, #0
 801a536:	4293      	cmp	r3, r2
 801a538:	bfc4      	itt	gt
 801a53a:	1a9b      	subgt	r3, r3, r2
 801a53c:	18ed      	addgt	r5, r5, r3
 801a53e:	2600      	movs	r6, #0
 801a540:	341a      	adds	r4, #26
 801a542:	42b5      	cmp	r5, r6
 801a544:	d11a      	bne.n	801a57c <_printf_common+0xc8>
 801a546:	2000      	movs	r0, #0
 801a548:	e008      	b.n	801a55c <_printf_common+0xa8>
 801a54a:	2301      	movs	r3, #1
 801a54c:	4652      	mov	r2, sl
 801a54e:	4641      	mov	r1, r8
 801a550:	4638      	mov	r0, r7
 801a552:	47c8      	blx	r9
 801a554:	3001      	adds	r0, #1
 801a556:	d103      	bne.n	801a560 <_printf_common+0xac>
 801a558:	f04f 30ff 	mov.w	r0, #4294967295
 801a55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a560:	3501      	adds	r5, #1
 801a562:	e7c6      	b.n	801a4f2 <_printf_common+0x3e>
 801a564:	18e1      	adds	r1, r4, r3
 801a566:	1c5a      	adds	r2, r3, #1
 801a568:	2030      	movs	r0, #48	@ 0x30
 801a56a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a56e:	4422      	add	r2, r4
 801a570:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a574:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a578:	3302      	adds	r3, #2
 801a57a:	e7c7      	b.n	801a50c <_printf_common+0x58>
 801a57c:	2301      	movs	r3, #1
 801a57e:	4622      	mov	r2, r4
 801a580:	4641      	mov	r1, r8
 801a582:	4638      	mov	r0, r7
 801a584:	47c8      	blx	r9
 801a586:	3001      	adds	r0, #1
 801a588:	d0e6      	beq.n	801a558 <_printf_common+0xa4>
 801a58a:	3601      	adds	r6, #1
 801a58c:	e7d9      	b.n	801a542 <_printf_common+0x8e>
	...

0801a590 <_printf_i>:
 801a590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a594:	7e0f      	ldrb	r7, [r1, #24]
 801a596:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a598:	2f78      	cmp	r7, #120	@ 0x78
 801a59a:	4691      	mov	r9, r2
 801a59c:	4680      	mov	r8, r0
 801a59e:	460c      	mov	r4, r1
 801a5a0:	469a      	mov	sl, r3
 801a5a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a5a6:	d807      	bhi.n	801a5b8 <_printf_i+0x28>
 801a5a8:	2f62      	cmp	r7, #98	@ 0x62
 801a5aa:	d80a      	bhi.n	801a5c2 <_printf_i+0x32>
 801a5ac:	2f00      	cmp	r7, #0
 801a5ae:	f000 80d1 	beq.w	801a754 <_printf_i+0x1c4>
 801a5b2:	2f58      	cmp	r7, #88	@ 0x58
 801a5b4:	f000 80b8 	beq.w	801a728 <_printf_i+0x198>
 801a5b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a5bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a5c0:	e03a      	b.n	801a638 <_printf_i+0xa8>
 801a5c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a5c6:	2b15      	cmp	r3, #21
 801a5c8:	d8f6      	bhi.n	801a5b8 <_printf_i+0x28>
 801a5ca:	a101      	add	r1, pc, #4	@ (adr r1, 801a5d0 <_printf_i+0x40>)
 801a5cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a5d0:	0801a629 	.word	0x0801a629
 801a5d4:	0801a63d 	.word	0x0801a63d
 801a5d8:	0801a5b9 	.word	0x0801a5b9
 801a5dc:	0801a5b9 	.word	0x0801a5b9
 801a5e0:	0801a5b9 	.word	0x0801a5b9
 801a5e4:	0801a5b9 	.word	0x0801a5b9
 801a5e8:	0801a63d 	.word	0x0801a63d
 801a5ec:	0801a5b9 	.word	0x0801a5b9
 801a5f0:	0801a5b9 	.word	0x0801a5b9
 801a5f4:	0801a5b9 	.word	0x0801a5b9
 801a5f8:	0801a5b9 	.word	0x0801a5b9
 801a5fc:	0801a73b 	.word	0x0801a73b
 801a600:	0801a667 	.word	0x0801a667
 801a604:	0801a6f5 	.word	0x0801a6f5
 801a608:	0801a5b9 	.word	0x0801a5b9
 801a60c:	0801a5b9 	.word	0x0801a5b9
 801a610:	0801a75d 	.word	0x0801a75d
 801a614:	0801a5b9 	.word	0x0801a5b9
 801a618:	0801a667 	.word	0x0801a667
 801a61c:	0801a5b9 	.word	0x0801a5b9
 801a620:	0801a5b9 	.word	0x0801a5b9
 801a624:	0801a6fd 	.word	0x0801a6fd
 801a628:	6833      	ldr	r3, [r6, #0]
 801a62a:	1d1a      	adds	r2, r3, #4
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	6032      	str	r2, [r6, #0]
 801a630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a634:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a638:	2301      	movs	r3, #1
 801a63a:	e09c      	b.n	801a776 <_printf_i+0x1e6>
 801a63c:	6833      	ldr	r3, [r6, #0]
 801a63e:	6820      	ldr	r0, [r4, #0]
 801a640:	1d19      	adds	r1, r3, #4
 801a642:	6031      	str	r1, [r6, #0]
 801a644:	0606      	lsls	r6, r0, #24
 801a646:	d501      	bpl.n	801a64c <_printf_i+0xbc>
 801a648:	681d      	ldr	r5, [r3, #0]
 801a64a:	e003      	b.n	801a654 <_printf_i+0xc4>
 801a64c:	0645      	lsls	r5, r0, #25
 801a64e:	d5fb      	bpl.n	801a648 <_printf_i+0xb8>
 801a650:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a654:	2d00      	cmp	r5, #0
 801a656:	da03      	bge.n	801a660 <_printf_i+0xd0>
 801a658:	232d      	movs	r3, #45	@ 0x2d
 801a65a:	426d      	negs	r5, r5
 801a65c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a660:	4858      	ldr	r0, [pc, #352]	@ (801a7c4 <_printf_i+0x234>)
 801a662:	230a      	movs	r3, #10
 801a664:	e011      	b.n	801a68a <_printf_i+0xfa>
 801a666:	6821      	ldr	r1, [r4, #0]
 801a668:	6833      	ldr	r3, [r6, #0]
 801a66a:	0608      	lsls	r0, r1, #24
 801a66c:	f853 5b04 	ldr.w	r5, [r3], #4
 801a670:	d402      	bmi.n	801a678 <_printf_i+0xe8>
 801a672:	0649      	lsls	r1, r1, #25
 801a674:	bf48      	it	mi
 801a676:	b2ad      	uxthmi	r5, r5
 801a678:	2f6f      	cmp	r7, #111	@ 0x6f
 801a67a:	4852      	ldr	r0, [pc, #328]	@ (801a7c4 <_printf_i+0x234>)
 801a67c:	6033      	str	r3, [r6, #0]
 801a67e:	bf14      	ite	ne
 801a680:	230a      	movne	r3, #10
 801a682:	2308      	moveq	r3, #8
 801a684:	2100      	movs	r1, #0
 801a686:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a68a:	6866      	ldr	r6, [r4, #4]
 801a68c:	60a6      	str	r6, [r4, #8]
 801a68e:	2e00      	cmp	r6, #0
 801a690:	db05      	blt.n	801a69e <_printf_i+0x10e>
 801a692:	6821      	ldr	r1, [r4, #0]
 801a694:	432e      	orrs	r6, r5
 801a696:	f021 0104 	bic.w	r1, r1, #4
 801a69a:	6021      	str	r1, [r4, #0]
 801a69c:	d04b      	beq.n	801a736 <_printf_i+0x1a6>
 801a69e:	4616      	mov	r6, r2
 801a6a0:	fbb5 f1f3 	udiv	r1, r5, r3
 801a6a4:	fb03 5711 	mls	r7, r3, r1, r5
 801a6a8:	5dc7      	ldrb	r7, [r0, r7]
 801a6aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a6ae:	462f      	mov	r7, r5
 801a6b0:	42bb      	cmp	r3, r7
 801a6b2:	460d      	mov	r5, r1
 801a6b4:	d9f4      	bls.n	801a6a0 <_printf_i+0x110>
 801a6b6:	2b08      	cmp	r3, #8
 801a6b8:	d10b      	bne.n	801a6d2 <_printf_i+0x142>
 801a6ba:	6823      	ldr	r3, [r4, #0]
 801a6bc:	07df      	lsls	r7, r3, #31
 801a6be:	d508      	bpl.n	801a6d2 <_printf_i+0x142>
 801a6c0:	6923      	ldr	r3, [r4, #16]
 801a6c2:	6861      	ldr	r1, [r4, #4]
 801a6c4:	4299      	cmp	r1, r3
 801a6c6:	bfde      	ittt	le
 801a6c8:	2330      	movle	r3, #48	@ 0x30
 801a6ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a6ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a6d2:	1b92      	subs	r2, r2, r6
 801a6d4:	6122      	str	r2, [r4, #16]
 801a6d6:	f8cd a000 	str.w	sl, [sp]
 801a6da:	464b      	mov	r3, r9
 801a6dc:	aa03      	add	r2, sp, #12
 801a6de:	4621      	mov	r1, r4
 801a6e0:	4640      	mov	r0, r8
 801a6e2:	f7ff fee7 	bl	801a4b4 <_printf_common>
 801a6e6:	3001      	adds	r0, #1
 801a6e8:	d14a      	bne.n	801a780 <_printf_i+0x1f0>
 801a6ea:	f04f 30ff 	mov.w	r0, #4294967295
 801a6ee:	b004      	add	sp, #16
 801a6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6f4:	6823      	ldr	r3, [r4, #0]
 801a6f6:	f043 0320 	orr.w	r3, r3, #32
 801a6fa:	6023      	str	r3, [r4, #0]
 801a6fc:	4832      	ldr	r0, [pc, #200]	@ (801a7c8 <_printf_i+0x238>)
 801a6fe:	2778      	movs	r7, #120	@ 0x78
 801a700:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a704:	6823      	ldr	r3, [r4, #0]
 801a706:	6831      	ldr	r1, [r6, #0]
 801a708:	061f      	lsls	r7, r3, #24
 801a70a:	f851 5b04 	ldr.w	r5, [r1], #4
 801a70e:	d402      	bmi.n	801a716 <_printf_i+0x186>
 801a710:	065f      	lsls	r7, r3, #25
 801a712:	bf48      	it	mi
 801a714:	b2ad      	uxthmi	r5, r5
 801a716:	6031      	str	r1, [r6, #0]
 801a718:	07d9      	lsls	r1, r3, #31
 801a71a:	bf44      	itt	mi
 801a71c:	f043 0320 	orrmi.w	r3, r3, #32
 801a720:	6023      	strmi	r3, [r4, #0]
 801a722:	b11d      	cbz	r5, 801a72c <_printf_i+0x19c>
 801a724:	2310      	movs	r3, #16
 801a726:	e7ad      	b.n	801a684 <_printf_i+0xf4>
 801a728:	4826      	ldr	r0, [pc, #152]	@ (801a7c4 <_printf_i+0x234>)
 801a72a:	e7e9      	b.n	801a700 <_printf_i+0x170>
 801a72c:	6823      	ldr	r3, [r4, #0]
 801a72e:	f023 0320 	bic.w	r3, r3, #32
 801a732:	6023      	str	r3, [r4, #0]
 801a734:	e7f6      	b.n	801a724 <_printf_i+0x194>
 801a736:	4616      	mov	r6, r2
 801a738:	e7bd      	b.n	801a6b6 <_printf_i+0x126>
 801a73a:	6833      	ldr	r3, [r6, #0]
 801a73c:	6825      	ldr	r5, [r4, #0]
 801a73e:	6961      	ldr	r1, [r4, #20]
 801a740:	1d18      	adds	r0, r3, #4
 801a742:	6030      	str	r0, [r6, #0]
 801a744:	062e      	lsls	r6, r5, #24
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	d501      	bpl.n	801a74e <_printf_i+0x1be>
 801a74a:	6019      	str	r1, [r3, #0]
 801a74c:	e002      	b.n	801a754 <_printf_i+0x1c4>
 801a74e:	0668      	lsls	r0, r5, #25
 801a750:	d5fb      	bpl.n	801a74a <_printf_i+0x1ba>
 801a752:	8019      	strh	r1, [r3, #0]
 801a754:	2300      	movs	r3, #0
 801a756:	6123      	str	r3, [r4, #16]
 801a758:	4616      	mov	r6, r2
 801a75a:	e7bc      	b.n	801a6d6 <_printf_i+0x146>
 801a75c:	6833      	ldr	r3, [r6, #0]
 801a75e:	1d1a      	adds	r2, r3, #4
 801a760:	6032      	str	r2, [r6, #0]
 801a762:	681e      	ldr	r6, [r3, #0]
 801a764:	6862      	ldr	r2, [r4, #4]
 801a766:	2100      	movs	r1, #0
 801a768:	4630      	mov	r0, r6
 801a76a:	f7e5 fd61 	bl	8000230 <memchr>
 801a76e:	b108      	cbz	r0, 801a774 <_printf_i+0x1e4>
 801a770:	1b80      	subs	r0, r0, r6
 801a772:	6060      	str	r0, [r4, #4]
 801a774:	6863      	ldr	r3, [r4, #4]
 801a776:	6123      	str	r3, [r4, #16]
 801a778:	2300      	movs	r3, #0
 801a77a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a77e:	e7aa      	b.n	801a6d6 <_printf_i+0x146>
 801a780:	6923      	ldr	r3, [r4, #16]
 801a782:	4632      	mov	r2, r6
 801a784:	4649      	mov	r1, r9
 801a786:	4640      	mov	r0, r8
 801a788:	47d0      	blx	sl
 801a78a:	3001      	adds	r0, #1
 801a78c:	d0ad      	beq.n	801a6ea <_printf_i+0x15a>
 801a78e:	6823      	ldr	r3, [r4, #0]
 801a790:	079b      	lsls	r3, r3, #30
 801a792:	d413      	bmi.n	801a7bc <_printf_i+0x22c>
 801a794:	68e0      	ldr	r0, [r4, #12]
 801a796:	9b03      	ldr	r3, [sp, #12]
 801a798:	4298      	cmp	r0, r3
 801a79a:	bfb8      	it	lt
 801a79c:	4618      	movlt	r0, r3
 801a79e:	e7a6      	b.n	801a6ee <_printf_i+0x15e>
 801a7a0:	2301      	movs	r3, #1
 801a7a2:	4632      	mov	r2, r6
 801a7a4:	4649      	mov	r1, r9
 801a7a6:	4640      	mov	r0, r8
 801a7a8:	47d0      	blx	sl
 801a7aa:	3001      	adds	r0, #1
 801a7ac:	d09d      	beq.n	801a6ea <_printf_i+0x15a>
 801a7ae:	3501      	adds	r5, #1
 801a7b0:	68e3      	ldr	r3, [r4, #12]
 801a7b2:	9903      	ldr	r1, [sp, #12]
 801a7b4:	1a5b      	subs	r3, r3, r1
 801a7b6:	42ab      	cmp	r3, r5
 801a7b8:	dcf2      	bgt.n	801a7a0 <_printf_i+0x210>
 801a7ba:	e7eb      	b.n	801a794 <_printf_i+0x204>
 801a7bc:	2500      	movs	r5, #0
 801a7be:	f104 0619 	add.w	r6, r4, #25
 801a7c2:	e7f5      	b.n	801a7b0 <_printf_i+0x220>
 801a7c4:	0801ce60 	.word	0x0801ce60
 801a7c8:	0801ce71 	.word	0x0801ce71

0801a7cc <__sflush_r>:
 801a7cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7d4:	0716      	lsls	r6, r2, #28
 801a7d6:	4605      	mov	r5, r0
 801a7d8:	460c      	mov	r4, r1
 801a7da:	d454      	bmi.n	801a886 <__sflush_r+0xba>
 801a7dc:	684b      	ldr	r3, [r1, #4]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	dc02      	bgt.n	801a7e8 <__sflush_r+0x1c>
 801a7e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	dd48      	ble.n	801a87a <__sflush_r+0xae>
 801a7e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a7ea:	2e00      	cmp	r6, #0
 801a7ec:	d045      	beq.n	801a87a <__sflush_r+0xae>
 801a7ee:	2300      	movs	r3, #0
 801a7f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a7f4:	682f      	ldr	r7, [r5, #0]
 801a7f6:	6a21      	ldr	r1, [r4, #32]
 801a7f8:	602b      	str	r3, [r5, #0]
 801a7fa:	d030      	beq.n	801a85e <__sflush_r+0x92>
 801a7fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a7fe:	89a3      	ldrh	r3, [r4, #12]
 801a800:	0759      	lsls	r1, r3, #29
 801a802:	d505      	bpl.n	801a810 <__sflush_r+0x44>
 801a804:	6863      	ldr	r3, [r4, #4]
 801a806:	1ad2      	subs	r2, r2, r3
 801a808:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a80a:	b10b      	cbz	r3, 801a810 <__sflush_r+0x44>
 801a80c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a80e:	1ad2      	subs	r2, r2, r3
 801a810:	2300      	movs	r3, #0
 801a812:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a814:	6a21      	ldr	r1, [r4, #32]
 801a816:	4628      	mov	r0, r5
 801a818:	47b0      	blx	r6
 801a81a:	1c43      	adds	r3, r0, #1
 801a81c:	89a3      	ldrh	r3, [r4, #12]
 801a81e:	d106      	bne.n	801a82e <__sflush_r+0x62>
 801a820:	6829      	ldr	r1, [r5, #0]
 801a822:	291d      	cmp	r1, #29
 801a824:	d82b      	bhi.n	801a87e <__sflush_r+0xb2>
 801a826:	4a2a      	ldr	r2, [pc, #168]	@ (801a8d0 <__sflush_r+0x104>)
 801a828:	40ca      	lsrs	r2, r1
 801a82a:	07d6      	lsls	r6, r2, #31
 801a82c:	d527      	bpl.n	801a87e <__sflush_r+0xb2>
 801a82e:	2200      	movs	r2, #0
 801a830:	6062      	str	r2, [r4, #4]
 801a832:	04d9      	lsls	r1, r3, #19
 801a834:	6922      	ldr	r2, [r4, #16]
 801a836:	6022      	str	r2, [r4, #0]
 801a838:	d504      	bpl.n	801a844 <__sflush_r+0x78>
 801a83a:	1c42      	adds	r2, r0, #1
 801a83c:	d101      	bne.n	801a842 <__sflush_r+0x76>
 801a83e:	682b      	ldr	r3, [r5, #0]
 801a840:	b903      	cbnz	r3, 801a844 <__sflush_r+0x78>
 801a842:	6560      	str	r0, [r4, #84]	@ 0x54
 801a844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a846:	602f      	str	r7, [r5, #0]
 801a848:	b1b9      	cbz	r1, 801a87a <__sflush_r+0xae>
 801a84a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a84e:	4299      	cmp	r1, r3
 801a850:	d002      	beq.n	801a858 <__sflush_r+0x8c>
 801a852:	4628      	mov	r0, r5
 801a854:	f7ff fc84 	bl	801a160 <_free_r>
 801a858:	2300      	movs	r3, #0
 801a85a:	6363      	str	r3, [r4, #52]	@ 0x34
 801a85c:	e00d      	b.n	801a87a <__sflush_r+0xae>
 801a85e:	2301      	movs	r3, #1
 801a860:	4628      	mov	r0, r5
 801a862:	47b0      	blx	r6
 801a864:	4602      	mov	r2, r0
 801a866:	1c50      	adds	r0, r2, #1
 801a868:	d1c9      	bne.n	801a7fe <__sflush_r+0x32>
 801a86a:	682b      	ldr	r3, [r5, #0]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d0c6      	beq.n	801a7fe <__sflush_r+0x32>
 801a870:	2b1d      	cmp	r3, #29
 801a872:	d001      	beq.n	801a878 <__sflush_r+0xac>
 801a874:	2b16      	cmp	r3, #22
 801a876:	d11e      	bne.n	801a8b6 <__sflush_r+0xea>
 801a878:	602f      	str	r7, [r5, #0]
 801a87a:	2000      	movs	r0, #0
 801a87c:	e022      	b.n	801a8c4 <__sflush_r+0xf8>
 801a87e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a882:	b21b      	sxth	r3, r3
 801a884:	e01b      	b.n	801a8be <__sflush_r+0xf2>
 801a886:	690f      	ldr	r7, [r1, #16]
 801a888:	2f00      	cmp	r7, #0
 801a88a:	d0f6      	beq.n	801a87a <__sflush_r+0xae>
 801a88c:	0793      	lsls	r3, r2, #30
 801a88e:	680e      	ldr	r6, [r1, #0]
 801a890:	bf08      	it	eq
 801a892:	694b      	ldreq	r3, [r1, #20]
 801a894:	600f      	str	r7, [r1, #0]
 801a896:	bf18      	it	ne
 801a898:	2300      	movne	r3, #0
 801a89a:	eba6 0807 	sub.w	r8, r6, r7
 801a89e:	608b      	str	r3, [r1, #8]
 801a8a0:	f1b8 0f00 	cmp.w	r8, #0
 801a8a4:	dde9      	ble.n	801a87a <__sflush_r+0xae>
 801a8a6:	6a21      	ldr	r1, [r4, #32]
 801a8a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a8aa:	4643      	mov	r3, r8
 801a8ac:	463a      	mov	r2, r7
 801a8ae:	4628      	mov	r0, r5
 801a8b0:	47b0      	blx	r6
 801a8b2:	2800      	cmp	r0, #0
 801a8b4:	dc08      	bgt.n	801a8c8 <__sflush_r+0xfc>
 801a8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a8be:	81a3      	strh	r3, [r4, #12]
 801a8c0:	f04f 30ff 	mov.w	r0, #4294967295
 801a8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8c8:	4407      	add	r7, r0
 801a8ca:	eba8 0800 	sub.w	r8, r8, r0
 801a8ce:	e7e7      	b.n	801a8a0 <__sflush_r+0xd4>
 801a8d0:	20400001 	.word	0x20400001

0801a8d4 <_fflush_r>:
 801a8d4:	b538      	push	{r3, r4, r5, lr}
 801a8d6:	690b      	ldr	r3, [r1, #16]
 801a8d8:	4605      	mov	r5, r0
 801a8da:	460c      	mov	r4, r1
 801a8dc:	b913      	cbnz	r3, 801a8e4 <_fflush_r+0x10>
 801a8de:	2500      	movs	r5, #0
 801a8e0:	4628      	mov	r0, r5
 801a8e2:	bd38      	pop	{r3, r4, r5, pc}
 801a8e4:	b118      	cbz	r0, 801a8ee <_fflush_r+0x1a>
 801a8e6:	6a03      	ldr	r3, [r0, #32]
 801a8e8:	b90b      	cbnz	r3, 801a8ee <_fflush_r+0x1a>
 801a8ea:	f7ff f921 	bl	8019b30 <__sinit>
 801a8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d0f3      	beq.n	801a8de <_fflush_r+0xa>
 801a8f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a8f8:	07d0      	lsls	r0, r2, #31
 801a8fa:	d404      	bmi.n	801a906 <_fflush_r+0x32>
 801a8fc:	0599      	lsls	r1, r3, #22
 801a8fe:	d402      	bmi.n	801a906 <_fflush_r+0x32>
 801a900:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a902:	f7ff fbea 	bl	801a0da <__retarget_lock_acquire_recursive>
 801a906:	4628      	mov	r0, r5
 801a908:	4621      	mov	r1, r4
 801a90a:	f7ff ff5f 	bl	801a7cc <__sflush_r>
 801a90e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a910:	07da      	lsls	r2, r3, #31
 801a912:	4605      	mov	r5, r0
 801a914:	d4e4      	bmi.n	801a8e0 <_fflush_r+0xc>
 801a916:	89a3      	ldrh	r3, [r4, #12]
 801a918:	059b      	lsls	r3, r3, #22
 801a91a:	d4e1      	bmi.n	801a8e0 <_fflush_r+0xc>
 801a91c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a91e:	f7ff fbdd 	bl	801a0dc <__retarget_lock_release_recursive>
 801a922:	e7dd      	b.n	801a8e0 <_fflush_r+0xc>

0801a924 <fiprintf>:
 801a924:	b40e      	push	{r1, r2, r3}
 801a926:	b503      	push	{r0, r1, lr}
 801a928:	4601      	mov	r1, r0
 801a92a:	ab03      	add	r3, sp, #12
 801a92c:	4805      	ldr	r0, [pc, #20]	@ (801a944 <fiprintf+0x20>)
 801a92e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a932:	6800      	ldr	r0, [r0, #0]
 801a934:	9301      	str	r3, [sp, #4]
 801a936:	f000 f8bb 	bl	801aab0 <_vfiprintf_r>
 801a93a:	b002      	add	sp, #8
 801a93c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a940:	b003      	add	sp, #12
 801a942:	4770      	bx	lr
 801a944:	200022cc 	.word	0x200022cc

0801a948 <__swhatbuf_r>:
 801a948:	b570      	push	{r4, r5, r6, lr}
 801a94a:	460c      	mov	r4, r1
 801a94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a950:	2900      	cmp	r1, #0
 801a952:	b096      	sub	sp, #88	@ 0x58
 801a954:	4615      	mov	r5, r2
 801a956:	461e      	mov	r6, r3
 801a958:	da0d      	bge.n	801a976 <__swhatbuf_r+0x2e>
 801a95a:	89a3      	ldrh	r3, [r4, #12]
 801a95c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a960:	f04f 0100 	mov.w	r1, #0
 801a964:	bf14      	ite	ne
 801a966:	2340      	movne	r3, #64	@ 0x40
 801a968:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a96c:	2000      	movs	r0, #0
 801a96e:	6031      	str	r1, [r6, #0]
 801a970:	602b      	str	r3, [r5, #0]
 801a972:	b016      	add	sp, #88	@ 0x58
 801a974:	bd70      	pop	{r4, r5, r6, pc}
 801a976:	466a      	mov	r2, sp
 801a978:	f000 f848 	bl	801aa0c <_fstat_r>
 801a97c:	2800      	cmp	r0, #0
 801a97e:	dbec      	blt.n	801a95a <__swhatbuf_r+0x12>
 801a980:	9901      	ldr	r1, [sp, #4]
 801a982:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a986:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a98a:	4259      	negs	r1, r3
 801a98c:	4159      	adcs	r1, r3
 801a98e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a992:	e7eb      	b.n	801a96c <__swhatbuf_r+0x24>

0801a994 <__smakebuf_r>:
 801a994:	898b      	ldrh	r3, [r1, #12]
 801a996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a998:	079d      	lsls	r5, r3, #30
 801a99a:	4606      	mov	r6, r0
 801a99c:	460c      	mov	r4, r1
 801a99e:	d507      	bpl.n	801a9b0 <__smakebuf_r+0x1c>
 801a9a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a9a4:	6023      	str	r3, [r4, #0]
 801a9a6:	6123      	str	r3, [r4, #16]
 801a9a8:	2301      	movs	r3, #1
 801a9aa:	6163      	str	r3, [r4, #20]
 801a9ac:	b003      	add	sp, #12
 801a9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9b0:	ab01      	add	r3, sp, #4
 801a9b2:	466a      	mov	r2, sp
 801a9b4:	f7ff ffc8 	bl	801a948 <__swhatbuf_r>
 801a9b8:	9f00      	ldr	r7, [sp, #0]
 801a9ba:	4605      	mov	r5, r0
 801a9bc:	4639      	mov	r1, r7
 801a9be:	4630      	mov	r0, r6
 801a9c0:	f7fe fe84 	bl	80196cc <_malloc_r>
 801a9c4:	b948      	cbnz	r0, 801a9da <__smakebuf_r+0x46>
 801a9c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a9ca:	059a      	lsls	r2, r3, #22
 801a9cc:	d4ee      	bmi.n	801a9ac <__smakebuf_r+0x18>
 801a9ce:	f023 0303 	bic.w	r3, r3, #3
 801a9d2:	f043 0302 	orr.w	r3, r3, #2
 801a9d6:	81a3      	strh	r3, [r4, #12]
 801a9d8:	e7e2      	b.n	801a9a0 <__smakebuf_r+0xc>
 801a9da:	89a3      	ldrh	r3, [r4, #12]
 801a9dc:	6020      	str	r0, [r4, #0]
 801a9de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a9e2:	81a3      	strh	r3, [r4, #12]
 801a9e4:	9b01      	ldr	r3, [sp, #4]
 801a9e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a9ea:	b15b      	cbz	r3, 801aa04 <__smakebuf_r+0x70>
 801a9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a9f0:	4630      	mov	r0, r6
 801a9f2:	f000 f81d 	bl	801aa30 <_isatty_r>
 801a9f6:	b128      	cbz	r0, 801aa04 <__smakebuf_r+0x70>
 801a9f8:	89a3      	ldrh	r3, [r4, #12]
 801a9fa:	f023 0303 	bic.w	r3, r3, #3
 801a9fe:	f043 0301 	orr.w	r3, r3, #1
 801aa02:	81a3      	strh	r3, [r4, #12]
 801aa04:	89a3      	ldrh	r3, [r4, #12]
 801aa06:	431d      	orrs	r5, r3
 801aa08:	81a5      	strh	r5, [r4, #12]
 801aa0a:	e7cf      	b.n	801a9ac <__smakebuf_r+0x18>

0801aa0c <_fstat_r>:
 801aa0c:	b538      	push	{r3, r4, r5, lr}
 801aa0e:	4d07      	ldr	r5, [pc, #28]	@ (801aa2c <_fstat_r+0x20>)
 801aa10:	2300      	movs	r3, #0
 801aa12:	4604      	mov	r4, r0
 801aa14:	4608      	mov	r0, r1
 801aa16:	4611      	mov	r1, r2
 801aa18:	602b      	str	r3, [r5, #0]
 801aa1a:	f7e8 fdb0 	bl	800357e <_fstat>
 801aa1e:	1c43      	adds	r3, r0, #1
 801aa20:	d102      	bne.n	801aa28 <_fstat_r+0x1c>
 801aa22:	682b      	ldr	r3, [r5, #0]
 801aa24:	b103      	cbz	r3, 801aa28 <_fstat_r+0x1c>
 801aa26:	6023      	str	r3, [r4, #0]
 801aa28:	bd38      	pop	{r3, r4, r5, pc}
 801aa2a:	bf00      	nop
 801aa2c:	200107cc 	.word	0x200107cc

0801aa30 <_isatty_r>:
 801aa30:	b538      	push	{r3, r4, r5, lr}
 801aa32:	4d06      	ldr	r5, [pc, #24]	@ (801aa4c <_isatty_r+0x1c>)
 801aa34:	2300      	movs	r3, #0
 801aa36:	4604      	mov	r4, r0
 801aa38:	4608      	mov	r0, r1
 801aa3a:	602b      	str	r3, [r5, #0]
 801aa3c:	f7e8 fdaf 	bl	800359e <_isatty>
 801aa40:	1c43      	adds	r3, r0, #1
 801aa42:	d102      	bne.n	801aa4a <_isatty_r+0x1a>
 801aa44:	682b      	ldr	r3, [r5, #0]
 801aa46:	b103      	cbz	r3, 801aa4a <_isatty_r+0x1a>
 801aa48:	6023      	str	r3, [r4, #0]
 801aa4a:	bd38      	pop	{r3, r4, r5, pc}
 801aa4c:	200107cc 	.word	0x200107cc

0801aa50 <abort>:
 801aa50:	b508      	push	{r3, lr}
 801aa52:	2006      	movs	r0, #6
 801aa54:	f000 f96c 	bl	801ad30 <raise>
 801aa58:	2001      	movs	r0, #1
 801aa5a:	f7e8 fd40 	bl	80034de <_exit>

0801aa5e <__sfputc_r>:
 801aa5e:	6893      	ldr	r3, [r2, #8]
 801aa60:	3b01      	subs	r3, #1
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	b410      	push	{r4}
 801aa66:	6093      	str	r3, [r2, #8]
 801aa68:	da08      	bge.n	801aa7c <__sfputc_r+0x1e>
 801aa6a:	6994      	ldr	r4, [r2, #24]
 801aa6c:	42a3      	cmp	r3, r4
 801aa6e:	db01      	blt.n	801aa74 <__sfputc_r+0x16>
 801aa70:	290a      	cmp	r1, #10
 801aa72:	d103      	bne.n	801aa7c <__sfputc_r+0x1e>
 801aa74:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa78:	f7ff b9a0 	b.w	8019dbc <__swbuf_r>
 801aa7c:	6813      	ldr	r3, [r2, #0]
 801aa7e:	1c58      	adds	r0, r3, #1
 801aa80:	6010      	str	r0, [r2, #0]
 801aa82:	7019      	strb	r1, [r3, #0]
 801aa84:	4608      	mov	r0, r1
 801aa86:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aa8a:	4770      	bx	lr

0801aa8c <__sfputs_r>:
 801aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa8e:	4606      	mov	r6, r0
 801aa90:	460f      	mov	r7, r1
 801aa92:	4614      	mov	r4, r2
 801aa94:	18d5      	adds	r5, r2, r3
 801aa96:	42ac      	cmp	r4, r5
 801aa98:	d101      	bne.n	801aa9e <__sfputs_r+0x12>
 801aa9a:	2000      	movs	r0, #0
 801aa9c:	e007      	b.n	801aaae <__sfputs_r+0x22>
 801aa9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aaa2:	463a      	mov	r2, r7
 801aaa4:	4630      	mov	r0, r6
 801aaa6:	f7ff ffda 	bl	801aa5e <__sfputc_r>
 801aaaa:	1c43      	adds	r3, r0, #1
 801aaac:	d1f3      	bne.n	801aa96 <__sfputs_r+0xa>
 801aaae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aab0 <_vfiprintf_r>:
 801aab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aab4:	460d      	mov	r5, r1
 801aab6:	b09d      	sub	sp, #116	@ 0x74
 801aab8:	4614      	mov	r4, r2
 801aaba:	4698      	mov	r8, r3
 801aabc:	4606      	mov	r6, r0
 801aabe:	b118      	cbz	r0, 801aac8 <_vfiprintf_r+0x18>
 801aac0:	6a03      	ldr	r3, [r0, #32]
 801aac2:	b90b      	cbnz	r3, 801aac8 <_vfiprintf_r+0x18>
 801aac4:	f7ff f834 	bl	8019b30 <__sinit>
 801aac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aaca:	07d9      	lsls	r1, r3, #31
 801aacc:	d405      	bmi.n	801aada <_vfiprintf_r+0x2a>
 801aace:	89ab      	ldrh	r3, [r5, #12]
 801aad0:	059a      	lsls	r2, r3, #22
 801aad2:	d402      	bmi.n	801aada <_vfiprintf_r+0x2a>
 801aad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801aad6:	f7ff fb00 	bl	801a0da <__retarget_lock_acquire_recursive>
 801aada:	89ab      	ldrh	r3, [r5, #12]
 801aadc:	071b      	lsls	r3, r3, #28
 801aade:	d501      	bpl.n	801aae4 <_vfiprintf_r+0x34>
 801aae0:	692b      	ldr	r3, [r5, #16]
 801aae2:	b99b      	cbnz	r3, 801ab0c <_vfiprintf_r+0x5c>
 801aae4:	4629      	mov	r1, r5
 801aae6:	4630      	mov	r0, r6
 801aae8:	f7ff f9a6 	bl	8019e38 <__swsetup_r>
 801aaec:	b170      	cbz	r0, 801ab0c <_vfiprintf_r+0x5c>
 801aaee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801aaf0:	07dc      	lsls	r4, r3, #31
 801aaf2:	d504      	bpl.n	801aafe <_vfiprintf_r+0x4e>
 801aaf4:	f04f 30ff 	mov.w	r0, #4294967295
 801aaf8:	b01d      	add	sp, #116	@ 0x74
 801aafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aafe:	89ab      	ldrh	r3, [r5, #12]
 801ab00:	0598      	lsls	r0, r3, #22
 801ab02:	d4f7      	bmi.n	801aaf4 <_vfiprintf_r+0x44>
 801ab04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ab06:	f7ff fae9 	bl	801a0dc <__retarget_lock_release_recursive>
 801ab0a:	e7f3      	b.n	801aaf4 <_vfiprintf_r+0x44>
 801ab0c:	2300      	movs	r3, #0
 801ab0e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ab10:	2320      	movs	r3, #32
 801ab12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ab16:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab1a:	2330      	movs	r3, #48	@ 0x30
 801ab1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801accc <_vfiprintf_r+0x21c>
 801ab20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ab24:	f04f 0901 	mov.w	r9, #1
 801ab28:	4623      	mov	r3, r4
 801ab2a:	469a      	mov	sl, r3
 801ab2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ab30:	b10a      	cbz	r2, 801ab36 <_vfiprintf_r+0x86>
 801ab32:	2a25      	cmp	r2, #37	@ 0x25
 801ab34:	d1f9      	bne.n	801ab2a <_vfiprintf_r+0x7a>
 801ab36:	ebba 0b04 	subs.w	fp, sl, r4
 801ab3a:	d00b      	beq.n	801ab54 <_vfiprintf_r+0xa4>
 801ab3c:	465b      	mov	r3, fp
 801ab3e:	4622      	mov	r2, r4
 801ab40:	4629      	mov	r1, r5
 801ab42:	4630      	mov	r0, r6
 801ab44:	f7ff ffa2 	bl	801aa8c <__sfputs_r>
 801ab48:	3001      	adds	r0, #1
 801ab4a:	f000 80a7 	beq.w	801ac9c <_vfiprintf_r+0x1ec>
 801ab4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ab50:	445a      	add	r2, fp
 801ab52:	9209      	str	r2, [sp, #36]	@ 0x24
 801ab54:	f89a 3000 	ldrb.w	r3, [sl]
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	f000 809f 	beq.w	801ac9c <_vfiprintf_r+0x1ec>
 801ab5e:	2300      	movs	r3, #0
 801ab60:	f04f 32ff 	mov.w	r2, #4294967295
 801ab64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ab68:	f10a 0a01 	add.w	sl, sl, #1
 801ab6c:	9304      	str	r3, [sp, #16]
 801ab6e:	9307      	str	r3, [sp, #28]
 801ab70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ab74:	931a      	str	r3, [sp, #104]	@ 0x68
 801ab76:	4654      	mov	r4, sl
 801ab78:	2205      	movs	r2, #5
 801ab7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab7e:	4853      	ldr	r0, [pc, #332]	@ (801accc <_vfiprintf_r+0x21c>)
 801ab80:	f7e5 fb56 	bl	8000230 <memchr>
 801ab84:	9a04      	ldr	r2, [sp, #16]
 801ab86:	b9d8      	cbnz	r0, 801abc0 <_vfiprintf_r+0x110>
 801ab88:	06d1      	lsls	r1, r2, #27
 801ab8a:	bf44      	itt	mi
 801ab8c:	2320      	movmi	r3, #32
 801ab8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ab92:	0713      	lsls	r3, r2, #28
 801ab94:	bf44      	itt	mi
 801ab96:	232b      	movmi	r3, #43	@ 0x2b
 801ab98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ab9c:	f89a 3000 	ldrb.w	r3, [sl]
 801aba0:	2b2a      	cmp	r3, #42	@ 0x2a
 801aba2:	d015      	beq.n	801abd0 <_vfiprintf_r+0x120>
 801aba4:	9a07      	ldr	r2, [sp, #28]
 801aba6:	4654      	mov	r4, sl
 801aba8:	2000      	movs	r0, #0
 801abaa:	f04f 0c0a 	mov.w	ip, #10
 801abae:	4621      	mov	r1, r4
 801abb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801abb4:	3b30      	subs	r3, #48	@ 0x30
 801abb6:	2b09      	cmp	r3, #9
 801abb8:	d94b      	bls.n	801ac52 <_vfiprintf_r+0x1a2>
 801abba:	b1b0      	cbz	r0, 801abea <_vfiprintf_r+0x13a>
 801abbc:	9207      	str	r2, [sp, #28]
 801abbe:	e014      	b.n	801abea <_vfiprintf_r+0x13a>
 801abc0:	eba0 0308 	sub.w	r3, r0, r8
 801abc4:	fa09 f303 	lsl.w	r3, r9, r3
 801abc8:	4313      	orrs	r3, r2
 801abca:	9304      	str	r3, [sp, #16]
 801abcc:	46a2      	mov	sl, r4
 801abce:	e7d2      	b.n	801ab76 <_vfiprintf_r+0xc6>
 801abd0:	9b03      	ldr	r3, [sp, #12]
 801abd2:	1d19      	adds	r1, r3, #4
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	9103      	str	r1, [sp, #12]
 801abd8:	2b00      	cmp	r3, #0
 801abda:	bfbb      	ittet	lt
 801abdc:	425b      	neglt	r3, r3
 801abde:	f042 0202 	orrlt.w	r2, r2, #2
 801abe2:	9307      	strge	r3, [sp, #28]
 801abe4:	9307      	strlt	r3, [sp, #28]
 801abe6:	bfb8      	it	lt
 801abe8:	9204      	strlt	r2, [sp, #16]
 801abea:	7823      	ldrb	r3, [r4, #0]
 801abec:	2b2e      	cmp	r3, #46	@ 0x2e
 801abee:	d10a      	bne.n	801ac06 <_vfiprintf_r+0x156>
 801abf0:	7863      	ldrb	r3, [r4, #1]
 801abf2:	2b2a      	cmp	r3, #42	@ 0x2a
 801abf4:	d132      	bne.n	801ac5c <_vfiprintf_r+0x1ac>
 801abf6:	9b03      	ldr	r3, [sp, #12]
 801abf8:	1d1a      	adds	r2, r3, #4
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	9203      	str	r2, [sp, #12]
 801abfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ac02:	3402      	adds	r4, #2
 801ac04:	9305      	str	r3, [sp, #20]
 801ac06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801acdc <_vfiprintf_r+0x22c>
 801ac0a:	7821      	ldrb	r1, [r4, #0]
 801ac0c:	2203      	movs	r2, #3
 801ac0e:	4650      	mov	r0, sl
 801ac10:	f7e5 fb0e 	bl	8000230 <memchr>
 801ac14:	b138      	cbz	r0, 801ac26 <_vfiprintf_r+0x176>
 801ac16:	9b04      	ldr	r3, [sp, #16]
 801ac18:	eba0 000a 	sub.w	r0, r0, sl
 801ac1c:	2240      	movs	r2, #64	@ 0x40
 801ac1e:	4082      	lsls	r2, r0
 801ac20:	4313      	orrs	r3, r2
 801ac22:	3401      	adds	r4, #1
 801ac24:	9304      	str	r3, [sp, #16]
 801ac26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac2a:	4829      	ldr	r0, [pc, #164]	@ (801acd0 <_vfiprintf_r+0x220>)
 801ac2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ac30:	2206      	movs	r2, #6
 801ac32:	f7e5 fafd 	bl	8000230 <memchr>
 801ac36:	2800      	cmp	r0, #0
 801ac38:	d03f      	beq.n	801acba <_vfiprintf_r+0x20a>
 801ac3a:	4b26      	ldr	r3, [pc, #152]	@ (801acd4 <_vfiprintf_r+0x224>)
 801ac3c:	bb1b      	cbnz	r3, 801ac86 <_vfiprintf_r+0x1d6>
 801ac3e:	9b03      	ldr	r3, [sp, #12]
 801ac40:	3307      	adds	r3, #7
 801ac42:	f023 0307 	bic.w	r3, r3, #7
 801ac46:	3308      	adds	r3, #8
 801ac48:	9303      	str	r3, [sp, #12]
 801ac4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac4c:	443b      	add	r3, r7
 801ac4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac50:	e76a      	b.n	801ab28 <_vfiprintf_r+0x78>
 801ac52:	fb0c 3202 	mla	r2, ip, r2, r3
 801ac56:	460c      	mov	r4, r1
 801ac58:	2001      	movs	r0, #1
 801ac5a:	e7a8      	b.n	801abae <_vfiprintf_r+0xfe>
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	3401      	adds	r4, #1
 801ac60:	9305      	str	r3, [sp, #20]
 801ac62:	4619      	mov	r1, r3
 801ac64:	f04f 0c0a 	mov.w	ip, #10
 801ac68:	4620      	mov	r0, r4
 801ac6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ac6e:	3a30      	subs	r2, #48	@ 0x30
 801ac70:	2a09      	cmp	r2, #9
 801ac72:	d903      	bls.n	801ac7c <_vfiprintf_r+0x1cc>
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d0c6      	beq.n	801ac06 <_vfiprintf_r+0x156>
 801ac78:	9105      	str	r1, [sp, #20]
 801ac7a:	e7c4      	b.n	801ac06 <_vfiprintf_r+0x156>
 801ac7c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ac80:	4604      	mov	r4, r0
 801ac82:	2301      	movs	r3, #1
 801ac84:	e7f0      	b.n	801ac68 <_vfiprintf_r+0x1b8>
 801ac86:	ab03      	add	r3, sp, #12
 801ac88:	9300      	str	r3, [sp, #0]
 801ac8a:	462a      	mov	r2, r5
 801ac8c:	4b12      	ldr	r3, [pc, #72]	@ (801acd8 <_vfiprintf_r+0x228>)
 801ac8e:	a904      	add	r1, sp, #16
 801ac90:	4630      	mov	r0, r6
 801ac92:	f3af 8000 	nop.w
 801ac96:	4607      	mov	r7, r0
 801ac98:	1c78      	adds	r0, r7, #1
 801ac9a:	d1d6      	bne.n	801ac4a <_vfiprintf_r+0x19a>
 801ac9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ac9e:	07d9      	lsls	r1, r3, #31
 801aca0:	d405      	bmi.n	801acae <_vfiprintf_r+0x1fe>
 801aca2:	89ab      	ldrh	r3, [r5, #12]
 801aca4:	059a      	lsls	r2, r3, #22
 801aca6:	d402      	bmi.n	801acae <_vfiprintf_r+0x1fe>
 801aca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801acaa:	f7ff fa17 	bl	801a0dc <__retarget_lock_release_recursive>
 801acae:	89ab      	ldrh	r3, [r5, #12]
 801acb0:	065b      	lsls	r3, r3, #25
 801acb2:	f53f af1f 	bmi.w	801aaf4 <_vfiprintf_r+0x44>
 801acb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801acb8:	e71e      	b.n	801aaf8 <_vfiprintf_r+0x48>
 801acba:	ab03      	add	r3, sp, #12
 801acbc:	9300      	str	r3, [sp, #0]
 801acbe:	462a      	mov	r2, r5
 801acc0:	4b05      	ldr	r3, [pc, #20]	@ (801acd8 <_vfiprintf_r+0x228>)
 801acc2:	a904      	add	r1, sp, #16
 801acc4:	4630      	mov	r0, r6
 801acc6:	f7ff fc63 	bl	801a590 <_printf_i>
 801acca:	e7e4      	b.n	801ac96 <_vfiprintf_r+0x1e6>
 801accc:	0801ce4f 	.word	0x0801ce4f
 801acd0:	0801ce59 	.word	0x0801ce59
 801acd4:	00000000 	.word	0x00000000
 801acd8:	0801aa8d 	.word	0x0801aa8d
 801acdc:	0801ce55 	.word	0x0801ce55

0801ace0 <_raise_r>:
 801ace0:	291f      	cmp	r1, #31
 801ace2:	b538      	push	{r3, r4, r5, lr}
 801ace4:	4605      	mov	r5, r0
 801ace6:	460c      	mov	r4, r1
 801ace8:	d904      	bls.n	801acf4 <_raise_r+0x14>
 801acea:	2316      	movs	r3, #22
 801acec:	6003      	str	r3, [r0, #0]
 801acee:	f04f 30ff 	mov.w	r0, #4294967295
 801acf2:	bd38      	pop	{r3, r4, r5, pc}
 801acf4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801acf6:	b112      	cbz	r2, 801acfe <_raise_r+0x1e>
 801acf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801acfc:	b94b      	cbnz	r3, 801ad12 <_raise_r+0x32>
 801acfe:	4628      	mov	r0, r5
 801ad00:	f000 f830 	bl	801ad64 <_getpid_r>
 801ad04:	4622      	mov	r2, r4
 801ad06:	4601      	mov	r1, r0
 801ad08:	4628      	mov	r0, r5
 801ad0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ad0e:	f000 b817 	b.w	801ad40 <_kill_r>
 801ad12:	2b01      	cmp	r3, #1
 801ad14:	d00a      	beq.n	801ad2c <_raise_r+0x4c>
 801ad16:	1c59      	adds	r1, r3, #1
 801ad18:	d103      	bne.n	801ad22 <_raise_r+0x42>
 801ad1a:	2316      	movs	r3, #22
 801ad1c:	6003      	str	r3, [r0, #0]
 801ad1e:	2001      	movs	r0, #1
 801ad20:	e7e7      	b.n	801acf2 <_raise_r+0x12>
 801ad22:	2100      	movs	r1, #0
 801ad24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ad28:	4620      	mov	r0, r4
 801ad2a:	4798      	blx	r3
 801ad2c:	2000      	movs	r0, #0
 801ad2e:	e7e0      	b.n	801acf2 <_raise_r+0x12>

0801ad30 <raise>:
 801ad30:	4b02      	ldr	r3, [pc, #8]	@ (801ad3c <raise+0xc>)
 801ad32:	4601      	mov	r1, r0
 801ad34:	6818      	ldr	r0, [r3, #0]
 801ad36:	f7ff bfd3 	b.w	801ace0 <_raise_r>
 801ad3a:	bf00      	nop
 801ad3c:	200022cc 	.word	0x200022cc

0801ad40 <_kill_r>:
 801ad40:	b538      	push	{r3, r4, r5, lr}
 801ad42:	4d07      	ldr	r5, [pc, #28]	@ (801ad60 <_kill_r+0x20>)
 801ad44:	2300      	movs	r3, #0
 801ad46:	4604      	mov	r4, r0
 801ad48:	4608      	mov	r0, r1
 801ad4a:	4611      	mov	r1, r2
 801ad4c:	602b      	str	r3, [r5, #0]
 801ad4e:	f7e8 fbb6 	bl	80034be <_kill>
 801ad52:	1c43      	adds	r3, r0, #1
 801ad54:	d102      	bne.n	801ad5c <_kill_r+0x1c>
 801ad56:	682b      	ldr	r3, [r5, #0]
 801ad58:	b103      	cbz	r3, 801ad5c <_kill_r+0x1c>
 801ad5a:	6023      	str	r3, [r4, #0]
 801ad5c:	bd38      	pop	{r3, r4, r5, pc}
 801ad5e:	bf00      	nop
 801ad60:	200107cc 	.word	0x200107cc

0801ad64 <_getpid_r>:
 801ad64:	f7e8 bba3 	b.w	80034ae <_getpid>

0801ad68 <cosf>:
 801ad68:	ee10 3a10 	vmov	r3, s0
 801ad6c:	b507      	push	{r0, r1, r2, lr}
 801ad6e:	4a1e      	ldr	r2, [pc, #120]	@ (801ade8 <cosf+0x80>)
 801ad70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ad74:	4293      	cmp	r3, r2
 801ad76:	d806      	bhi.n	801ad86 <cosf+0x1e>
 801ad78:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801adec <cosf+0x84>
 801ad7c:	b003      	add	sp, #12
 801ad7e:	f85d eb04 	ldr.w	lr, [sp], #4
 801ad82:	f000 b87b 	b.w	801ae7c <__kernel_cosf>
 801ad86:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ad8a:	d304      	bcc.n	801ad96 <cosf+0x2e>
 801ad8c:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ad90:	b003      	add	sp, #12
 801ad92:	f85d fb04 	ldr.w	pc, [sp], #4
 801ad96:	4668      	mov	r0, sp
 801ad98:	f000 f910 	bl	801afbc <__ieee754_rem_pio2f>
 801ad9c:	f000 0003 	and.w	r0, r0, #3
 801ada0:	2801      	cmp	r0, #1
 801ada2:	d009      	beq.n	801adb8 <cosf+0x50>
 801ada4:	2802      	cmp	r0, #2
 801ada6:	d010      	beq.n	801adca <cosf+0x62>
 801ada8:	b9b0      	cbnz	r0, 801add8 <cosf+0x70>
 801adaa:	eddd 0a01 	vldr	s1, [sp, #4]
 801adae:	ed9d 0a00 	vldr	s0, [sp]
 801adb2:	f000 f863 	bl	801ae7c <__kernel_cosf>
 801adb6:	e7eb      	b.n	801ad90 <cosf+0x28>
 801adb8:	eddd 0a01 	vldr	s1, [sp, #4]
 801adbc:	ed9d 0a00 	vldr	s0, [sp]
 801adc0:	f000 f8b4 	bl	801af2c <__kernel_sinf>
 801adc4:	eeb1 0a40 	vneg.f32	s0, s0
 801adc8:	e7e2      	b.n	801ad90 <cosf+0x28>
 801adca:	eddd 0a01 	vldr	s1, [sp, #4]
 801adce:	ed9d 0a00 	vldr	s0, [sp]
 801add2:	f000 f853 	bl	801ae7c <__kernel_cosf>
 801add6:	e7f5      	b.n	801adc4 <cosf+0x5c>
 801add8:	eddd 0a01 	vldr	s1, [sp, #4]
 801addc:	ed9d 0a00 	vldr	s0, [sp]
 801ade0:	2001      	movs	r0, #1
 801ade2:	f000 f8a3 	bl	801af2c <__kernel_sinf>
 801ade6:	e7d3      	b.n	801ad90 <cosf+0x28>
 801ade8:	3f490fd8 	.word	0x3f490fd8
 801adec:	00000000 	.word	0x00000000

0801adf0 <sinf>:
 801adf0:	ee10 3a10 	vmov	r3, s0
 801adf4:	b507      	push	{r0, r1, r2, lr}
 801adf6:	4a1f      	ldr	r2, [pc, #124]	@ (801ae74 <sinf+0x84>)
 801adf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801adfc:	4293      	cmp	r3, r2
 801adfe:	d807      	bhi.n	801ae10 <sinf+0x20>
 801ae00:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801ae78 <sinf+0x88>
 801ae04:	2000      	movs	r0, #0
 801ae06:	b003      	add	sp, #12
 801ae08:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae0c:	f000 b88e 	b.w	801af2c <__kernel_sinf>
 801ae10:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ae14:	d304      	bcc.n	801ae20 <sinf+0x30>
 801ae16:	ee30 0a40 	vsub.f32	s0, s0, s0
 801ae1a:	b003      	add	sp, #12
 801ae1c:	f85d fb04 	ldr.w	pc, [sp], #4
 801ae20:	4668      	mov	r0, sp
 801ae22:	f000 f8cb 	bl	801afbc <__ieee754_rem_pio2f>
 801ae26:	f000 0003 	and.w	r0, r0, #3
 801ae2a:	2801      	cmp	r0, #1
 801ae2c:	d00a      	beq.n	801ae44 <sinf+0x54>
 801ae2e:	2802      	cmp	r0, #2
 801ae30:	d00f      	beq.n	801ae52 <sinf+0x62>
 801ae32:	b9c0      	cbnz	r0, 801ae66 <sinf+0x76>
 801ae34:	eddd 0a01 	vldr	s1, [sp, #4]
 801ae38:	ed9d 0a00 	vldr	s0, [sp]
 801ae3c:	2001      	movs	r0, #1
 801ae3e:	f000 f875 	bl	801af2c <__kernel_sinf>
 801ae42:	e7ea      	b.n	801ae1a <sinf+0x2a>
 801ae44:	eddd 0a01 	vldr	s1, [sp, #4]
 801ae48:	ed9d 0a00 	vldr	s0, [sp]
 801ae4c:	f000 f816 	bl	801ae7c <__kernel_cosf>
 801ae50:	e7e3      	b.n	801ae1a <sinf+0x2a>
 801ae52:	eddd 0a01 	vldr	s1, [sp, #4]
 801ae56:	ed9d 0a00 	vldr	s0, [sp]
 801ae5a:	2001      	movs	r0, #1
 801ae5c:	f000 f866 	bl	801af2c <__kernel_sinf>
 801ae60:	eeb1 0a40 	vneg.f32	s0, s0
 801ae64:	e7d9      	b.n	801ae1a <sinf+0x2a>
 801ae66:	eddd 0a01 	vldr	s1, [sp, #4]
 801ae6a:	ed9d 0a00 	vldr	s0, [sp]
 801ae6e:	f000 f805 	bl	801ae7c <__kernel_cosf>
 801ae72:	e7f5      	b.n	801ae60 <sinf+0x70>
 801ae74:	3f490fd8 	.word	0x3f490fd8
 801ae78:	00000000 	.word	0x00000000

0801ae7c <__kernel_cosf>:
 801ae7c:	ee10 3a10 	vmov	r3, s0
 801ae80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ae84:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801ae88:	eef0 6a40 	vmov.f32	s13, s0
 801ae8c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801ae90:	d204      	bcs.n	801ae9c <__kernel_cosf+0x20>
 801ae92:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801ae96:	ee17 2a90 	vmov	r2, s15
 801ae9a:	b342      	cbz	r2, 801aeee <__kernel_cosf+0x72>
 801ae9c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801aea0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801af0c <__kernel_cosf+0x90>
 801aea4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801af10 <__kernel_cosf+0x94>
 801aea8:	4a1a      	ldr	r2, [pc, #104]	@ (801af14 <__kernel_cosf+0x98>)
 801aeaa:	eea7 6a27 	vfma.f32	s12, s14, s15
 801aeae:	4293      	cmp	r3, r2
 801aeb0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801af18 <__kernel_cosf+0x9c>
 801aeb4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801aeb8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801af1c <__kernel_cosf+0xa0>
 801aebc:	eea7 6a87 	vfma.f32	s12, s15, s14
 801aec0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801af20 <__kernel_cosf+0xa4>
 801aec4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801aec8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801af24 <__kernel_cosf+0xa8>
 801aecc:	eea7 6a87 	vfma.f32	s12, s15, s14
 801aed0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801aed4:	ee26 6a07 	vmul.f32	s12, s12, s14
 801aed8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801aedc:	eee7 0a06 	vfma.f32	s1, s14, s12
 801aee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801aee4:	d804      	bhi.n	801aef0 <__kernel_cosf+0x74>
 801aee6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801aeea:	ee30 0a67 	vsub.f32	s0, s0, s15
 801aeee:	4770      	bx	lr
 801aef0:	4a0d      	ldr	r2, [pc, #52]	@ (801af28 <__kernel_cosf+0xac>)
 801aef2:	4293      	cmp	r3, r2
 801aef4:	bf9a      	itte	ls
 801aef6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801aefa:	ee07 3a10 	vmovls	s14, r3
 801aefe:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801af02:	ee30 0a47 	vsub.f32	s0, s0, s14
 801af06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801af0a:	e7ec      	b.n	801aee6 <__kernel_cosf+0x6a>
 801af0c:	ad47d74e 	.word	0xad47d74e
 801af10:	310f74f6 	.word	0x310f74f6
 801af14:	3e999999 	.word	0x3e999999
 801af18:	b493f27c 	.word	0xb493f27c
 801af1c:	37d00d01 	.word	0x37d00d01
 801af20:	bab60b61 	.word	0xbab60b61
 801af24:	3d2aaaab 	.word	0x3d2aaaab
 801af28:	3f480000 	.word	0x3f480000

0801af2c <__kernel_sinf>:
 801af2c:	ee10 3a10 	vmov	r3, s0
 801af30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801af34:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801af38:	d204      	bcs.n	801af44 <__kernel_sinf+0x18>
 801af3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801af3e:	ee17 3a90 	vmov	r3, s15
 801af42:	b35b      	cbz	r3, 801af9c <__kernel_sinf+0x70>
 801af44:	ee20 7a00 	vmul.f32	s14, s0, s0
 801af48:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801afa0 <__kernel_sinf+0x74>
 801af4c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801afa4 <__kernel_sinf+0x78>
 801af50:	eea7 6a27 	vfma.f32	s12, s14, s15
 801af54:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801afa8 <__kernel_sinf+0x7c>
 801af58:	eee6 7a07 	vfma.f32	s15, s12, s14
 801af5c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801afac <__kernel_sinf+0x80>
 801af60:	eea7 6a87 	vfma.f32	s12, s15, s14
 801af64:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801afb0 <__kernel_sinf+0x84>
 801af68:	ee60 6a07 	vmul.f32	s13, s0, s14
 801af6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 801af70:	b930      	cbnz	r0, 801af80 <__kernel_sinf+0x54>
 801af72:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801afb4 <__kernel_sinf+0x88>
 801af76:	eea7 6a27 	vfma.f32	s12, s14, s15
 801af7a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801af7e:	4770      	bx	lr
 801af80:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801af84:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801af88:	eee0 7a86 	vfma.f32	s15, s1, s12
 801af8c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801af90:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801afb8 <__kernel_sinf+0x8c>
 801af94:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801af98:	ee30 0a60 	vsub.f32	s0, s0, s1
 801af9c:	4770      	bx	lr
 801af9e:	bf00      	nop
 801afa0:	2f2ec9d3 	.word	0x2f2ec9d3
 801afa4:	b2d72f34 	.word	0xb2d72f34
 801afa8:	3638ef1b 	.word	0x3638ef1b
 801afac:	b9500d01 	.word	0xb9500d01
 801afb0:	3c088889 	.word	0x3c088889
 801afb4:	be2aaaab 	.word	0xbe2aaaab
 801afb8:	3e2aaaab 	.word	0x3e2aaaab

0801afbc <__ieee754_rem_pio2f>:
 801afbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801afbe:	ee10 6a10 	vmov	r6, s0
 801afc2:	4b88      	ldr	r3, [pc, #544]	@ (801b1e4 <__ieee754_rem_pio2f+0x228>)
 801afc4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801afc8:	429d      	cmp	r5, r3
 801afca:	b087      	sub	sp, #28
 801afcc:	4604      	mov	r4, r0
 801afce:	d805      	bhi.n	801afdc <__ieee754_rem_pio2f+0x20>
 801afd0:	2300      	movs	r3, #0
 801afd2:	ed80 0a00 	vstr	s0, [r0]
 801afd6:	6043      	str	r3, [r0, #4]
 801afd8:	2000      	movs	r0, #0
 801afda:	e022      	b.n	801b022 <__ieee754_rem_pio2f+0x66>
 801afdc:	4b82      	ldr	r3, [pc, #520]	@ (801b1e8 <__ieee754_rem_pio2f+0x22c>)
 801afde:	429d      	cmp	r5, r3
 801afe0:	d83a      	bhi.n	801b058 <__ieee754_rem_pio2f+0x9c>
 801afe2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801afe6:	2e00      	cmp	r6, #0
 801afe8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801b1ec <__ieee754_rem_pio2f+0x230>
 801afec:	4a80      	ldr	r2, [pc, #512]	@ (801b1f0 <__ieee754_rem_pio2f+0x234>)
 801afee:	f023 030f 	bic.w	r3, r3, #15
 801aff2:	dd18      	ble.n	801b026 <__ieee754_rem_pio2f+0x6a>
 801aff4:	4293      	cmp	r3, r2
 801aff6:	ee70 7a47 	vsub.f32	s15, s0, s14
 801affa:	bf09      	itett	eq
 801affc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801b1f4 <__ieee754_rem_pio2f+0x238>
 801b000:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801b1f8 <__ieee754_rem_pio2f+0x23c>
 801b004:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801b1fc <__ieee754_rem_pio2f+0x240>
 801b008:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801b00c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801b010:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b014:	ed80 7a00 	vstr	s14, [r0]
 801b018:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801b01c:	edc0 7a01 	vstr	s15, [r0, #4]
 801b020:	2001      	movs	r0, #1
 801b022:	b007      	add	sp, #28
 801b024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b026:	4293      	cmp	r3, r2
 801b028:	ee70 7a07 	vadd.f32	s15, s0, s14
 801b02c:	bf09      	itett	eq
 801b02e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801b1f4 <__ieee754_rem_pio2f+0x238>
 801b032:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801b1f8 <__ieee754_rem_pio2f+0x23c>
 801b036:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801b1fc <__ieee754_rem_pio2f+0x240>
 801b03a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801b03e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b046:	ed80 7a00 	vstr	s14, [r0]
 801b04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b04e:	edc0 7a01 	vstr	s15, [r0, #4]
 801b052:	f04f 30ff 	mov.w	r0, #4294967295
 801b056:	e7e4      	b.n	801b022 <__ieee754_rem_pio2f+0x66>
 801b058:	4b69      	ldr	r3, [pc, #420]	@ (801b200 <__ieee754_rem_pio2f+0x244>)
 801b05a:	429d      	cmp	r5, r3
 801b05c:	d873      	bhi.n	801b146 <__ieee754_rem_pio2f+0x18a>
 801b05e:	f000 f8dd 	bl	801b21c <fabsf>
 801b062:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801b204 <__ieee754_rem_pio2f+0x248>
 801b066:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b06a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801b06e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801b076:	ee17 0a90 	vmov	r0, s15
 801b07a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b1ec <__ieee754_rem_pio2f+0x230>
 801b07e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801b082:	281f      	cmp	r0, #31
 801b084:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801b1f8 <__ieee754_rem_pio2f+0x23c>
 801b088:	ee67 7a27 	vmul.f32	s15, s14, s15
 801b08c:	eeb1 6a47 	vneg.f32	s12, s14
 801b090:	ee70 6a67 	vsub.f32	s13, s0, s15
 801b094:	ee16 1a90 	vmov	r1, s13
 801b098:	dc09      	bgt.n	801b0ae <__ieee754_rem_pio2f+0xf2>
 801b09a:	4a5b      	ldr	r2, [pc, #364]	@ (801b208 <__ieee754_rem_pio2f+0x24c>)
 801b09c:	1e47      	subs	r7, r0, #1
 801b09e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801b0a2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801b0a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801b0aa:	4293      	cmp	r3, r2
 801b0ac:	d107      	bne.n	801b0be <__ieee754_rem_pio2f+0x102>
 801b0ae:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801b0b2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801b0b6:	2a08      	cmp	r2, #8
 801b0b8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801b0bc:	dc14      	bgt.n	801b0e8 <__ieee754_rem_pio2f+0x12c>
 801b0be:	6021      	str	r1, [r4, #0]
 801b0c0:	ed94 7a00 	vldr	s14, [r4]
 801b0c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b0c8:	2e00      	cmp	r6, #0
 801b0ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 801b0ce:	ed84 0a01 	vstr	s0, [r4, #4]
 801b0d2:	daa6      	bge.n	801b022 <__ieee754_rem_pio2f+0x66>
 801b0d4:	eeb1 7a47 	vneg.f32	s14, s14
 801b0d8:	eeb1 0a40 	vneg.f32	s0, s0
 801b0dc:	ed84 7a00 	vstr	s14, [r4]
 801b0e0:	ed84 0a01 	vstr	s0, [r4, #4]
 801b0e4:	4240      	negs	r0, r0
 801b0e6:	e79c      	b.n	801b022 <__ieee754_rem_pio2f+0x66>
 801b0e8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801b1f4 <__ieee754_rem_pio2f+0x238>
 801b0ec:	eef0 6a40 	vmov.f32	s13, s0
 801b0f0:	eee6 6a25 	vfma.f32	s13, s12, s11
 801b0f4:	ee70 7a66 	vsub.f32	s15, s0, s13
 801b0f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b0fc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801b1fc <__ieee754_rem_pio2f+0x240>
 801b100:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801b104:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801b108:	ee15 2a90 	vmov	r2, s11
 801b10c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801b110:	1a5b      	subs	r3, r3, r1
 801b112:	2b19      	cmp	r3, #25
 801b114:	dc04      	bgt.n	801b120 <__ieee754_rem_pio2f+0x164>
 801b116:	edc4 5a00 	vstr	s11, [r4]
 801b11a:	eeb0 0a66 	vmov.f32	s0, s13
 801b11e:	e7cf      	b.n	801b0c0 <__ieee754_rem_pio2f+0x104>
 801b120:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801b20c <__ieee754_rem_pio2f+0x250>
 801b124:	eeb0 0a66 	vmov.f32	s0, s13
 801b128:	eea6 0a25 	vfma.f32	s0, s12, s11
 801b12c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801b130:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801b210 <__ieee754_rem_pio2f+0x254>
 801b134:	eee6 7a25 	vfma.f32	s15, s12, s11
 801b138:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801b13c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801b140:	ed84 7a00 	vstr	s14, [r4]
 801b144:	e7bc      	b.n	801b0c0 <__ieee754_rem_pio2f+0x104>
 801b146:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801b14a:	d306      	bcc.n	801b15a <__ieee754_rem_pio2f+0x19e>
 801b14c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801b150:	edc0 7a01 	vstr	s15, [r0, #4]
 801b154:	edc0 7a00 	vstr	s15, [r0]
 801b158:	e73e      	b.n	801afd8 <__ieee754_rem_pio2f+0x1c>
 801b15a:	15ea      	asrs	r2, r5, #23
 801b15c:	3a86      	subs	r2, #134	@ 0x86
 801b15e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801b162:	ee07 3a90 	vmov	s15, r3
 801b166:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b16a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801b214 <__ieee754_rem_pio2f+0x258>
 801b16e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b176:	ed8d 7a03 	vstr	s14, [sp, #12]
 801b17a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b17e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801b182:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b186:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b18a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801b18e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b192:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b19a:	edcd 7a05 	vstr	s15, [sp, #20]
 801b19e:	d11e      	bne.n	801b1de <__ieee754_rem_pio2f+0x222>
 801b1a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801b1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1a8:	bf0c      	ite	eq
 801b1aa:	2301      	moveq	r3, #1
 801b1ac:	2302      	movne	r3, #2
 801b1ae:	491a      	ldr	r1, [pc, #104]	@ (801b218 <__ieee754_rem_pio2f+0x25c>)
 801b1b0:	9101      	str	r1, [sp, #4]
 801b1b2:	2102      	movs	r1, #2
 801b1b4:	9100      	str	r1, [sp, #0]
 801b1b6:	a803      	add	r0, sp, #12
 801b1b8:	4621      	mov	r1, r4
 801b1ba:	f000 f837 	bl	801b22c <__kernel_rem_pio2f>
 801b1be:	2e00      	cmp	r6, #0
 801b1c0:	f6bf af2f 	bge.w	801b022 <__ieee754_rem_pio2f+0x66>
 801b1c4:	edd4 7a00 	vldr	s15, [r4]
 801b1c8:	eef1 7a67 	vneg.f32	s15, s15
 801b1cc:	edc4 7a00 	vstr	s15, [r4]
 801b1d0:	edd4 7a01 	vldr	s15, [r4, #4]
 801b1d4:	eef1 7a67 	vneg.f32	s15, s15
 801b1d8:	edc4 7a01 	vstr	s15, [r4, #4]
 801b1dc:	e782      	b.n	801b0e4 <__ieee754_rem_pio2f+0x128>
 801b1de:	2303      	movs	r3, #3
 801b1e0:	e7e5      	b.n	801b1ae <__ieee754_rem_pio2f+0x1f2>
 801b1e2:	bf00      	nop
 801b1e4:	3f490fd8 	.word	0x3f490fd8
 801b1e8:	4016cbe3 	.word	0x4016cbe3
 801b1ec:	3fc90f80 	.word	0x3fc90f80
 801b1f0:	3fc90fd0 	.word	0x3fc90fd0
 801b1f4:	37354400 	.word	0x37354400
 801b1f8:	37354443 	.word	0x37354443
 801b1fc:	2e85a308 	.word	0x2e85a308
 801b200:	43490f80 	.word	0x43490f80
 801b204:	3f22f984 	.word	0x3f22f984
 801b208:	0801cf84 	.word	0x0801cf84
 801b20c:	2e85a300 	.word	0x2e85a300
 801b210:	248d3132 	.word	0x248d3132
 801b214:	43800000 	.word	0x43800000
 801b218:	0801d004 	.word	0x0801d004

0801b21c <fabsf>:
 801b21c:	ee10 3a10 	vmov	r3, s0
 801b220:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b224:	ee00 3a10 	vmov	s0, r3
 801b228:	4770      	bx	lr
	...

0801b22c <__kernel_rem_pio2f>:
 801b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b230:	ed2d 8b04 	vpush	{d8-d9}
 801b234:	b0d9      	sub	sp, #356	@ 0x164
 801b236:	4690      	mov	r8, r2
 801b238:	9001      	str	r0, [sp, #4]
 801b23a:	4ab6      	ldr	r2, [pc, #728]	@ (801b514 <__kernel_rem_pio2f+0x2e8>)
 801b23c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801b23e:	f118 0f04 	cmn.w	r8, #4
 801b242:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801b246:	460f      	mov	r7, r1
 801b248:	f103 3bff 	add.w	fp, r3, #4294967295
 801b24c:	db26      	blt.n	801b29c <__kernel_rem_pio2f+0x70>
 801b24e:	f1b8 0203 	subs.w	r2, r8, #3
 801b252:	bf48      	it	mi
 801b254:	f108 0204 	addmi.w	r2, r8, #4
 801b258:	10d2      	asrs	r2, r2, #3
 801b25a:	1c55      	adds	r5, r2, #1
 801b25c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801b25e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801b524 <__kernel_rem_pio2f+0x2f8>
 801b262:	00e8      	lsls	r0, r5, #3
 801b264:	eba2 060b 	sub.w	r6, r2, fp
 801b268:	9002      	str	r0, [sp, #8]
 801b26a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801b26e:	eb0a 0c0b 	add.w	ip, sl, fp
 801b272:	ac1c      	add	r4, sp, #112	@ 0x70
 801b274:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801b278:	2000      	movs	r0, #0
 801b27a:	4560      	cmp	r0, ip
 801b27c:	dd10      	ble.n	801b2a0 <__kernel_rem_pio2f+0x74>
 801b27e:	a91c      	add	r1, sp, #112	@ 0x70
 801b280:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801b284:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801b288:	2600      	movs	r6, #0
 801b28a:	4556      	cmp	r6, sl
 801b28c:	dc24      	bgt.n	801b2d8 <__kernel_rem_pio2f+0xac>
 801b28e:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b292:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801b524 <__kernel_rem_pio2f+0x2f8>
 801b296:	4684      	mov	ip, r0
 801b298:	2400      	movs	r4, #0
 801b29a:	e016      	b.n	801b2ca <__kernel_rem_pio2f+0x9e>
 801b29c:	2200      	movs	r2, #0
 801b29e:	e7dc      	b.n	801b25a <__kernel_rem_pio2f+0x2e>
 801b2a0:	42c6      	cmn	r6, r0
 801b2a2:	bf5d      	ittte	pl
 801b2a4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801b2a8:	ee07 1a90 	vmovpl	s15, r1
 801b2ac:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b2b0:	eef0 7a47 	vmovmi.f32	s15, s14
 801b2b4:	ece4 7a01 	vstmia	r4!, {s15}
 801b2b8:	3001      	adds	r0, #1
 801b2ba:	e7de      	b.n	801b27a <__kernel_rem_pio2f+0x4e>
 801b2bc:	ecfe 6a01 	vldmia	lr!, {s13}
 801b2c0:	ed3c 7a01 	vldmdb	ip!, {s14}
 801b2c4:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b2c8:	3401      	adds	r4, #1
 801b2ca:	455c      	cmp	r4, fp
 801b2cc:	ddf6      	ble.n	801b2bc <__kernel_rem_pio2f+0x90>
 801b2ce:	ece9 7a01 	vstmia	r9!, {s15}
 801b2d2:	3601      	adds	r6, #1
 801b2d4:	3004      	adds	r0, #4
 801b2d6:	e7d8      	b.n	801b28a <__kernel_rem_pio2f+0x5e>
 801b2d8:	a908      	add	r1, sp, #32
 801b2da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b2de:	9104      	str	r1, [sp, #16]
 801b2e0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801b2e2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801b520 <__kernel_rem_pio2f+0x2f4>
 801b2e6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801b51c <__kernel_rem_pio2f+0x2f0>
 801b2ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801b2ee:	9203      	str	r2, [sp, #12]
 801b2f0:	4654      	mov	r4, sl
 801b2f2:	00a2      	lsls	r2, r4, #2
 801b2f4:	9205      	str	r2, [sp, #20]
 801b2f6:	aa58      	add	r2, sp, #352	@ 0x160
 801b2f8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801b2fc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801b300:	a944      	add	r1, sp, #272	@ 0x110
 801b302:	aa08      	add	r2, sp, #32
 801b304:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801b308:	4694      	mov	ip, r2
 801b30a:	4626      	mov	r6, r4
 801b30c:	2e00      	cmp	r6, #0
 801b30e:	dc4c      	bgt.n	801b3aa <__kernel_rem_pio2f+0x17e>
 801b310:	4628      	mov	r0, r5
 801b312:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b316:	f000 f9f1 	bl	801b6fc <scalbnf>
 801b31a:	eeb0 8a40 	vmov.f32	s16, s0
 801b31e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801b322:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b326:	f000 fa4f 	bl	801b7c8 <floorf>
 801b32a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801b32e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b332:	2d00      	cmp	r5, #0
 801b334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b338:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b33c:	ee17 9a90 	vmov	r9, s15
 801b340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b344:	ee38 8a67 	vsub.f32	s16, s16, s15
 801b348:	dd41      	ble.n	801b3ce <__kernel_rem_pio2f+0x1a2>
 801b34a:	f104 3cff 	add.w	ip, r4, #4294967295
 801b34e:	a908      	add	r1, sp, #32
 801b350:	f1c5 0e08 	rsb	lr, r5, #8
 801b354:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801b358:	fa46 f00e 	asr.w	r0, r6, lr
 801b35c:	4481      	add	r9, r0
 801b35e:	fa00 f00e 	lsl.w	r0, r0, lr
 801b362:	1a36      	subs	r6, r6, r0
 801b364:	f1c5 0007 	rsb	r0, r5, #7
 801b368:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801b36c:	4106      	asrs	r6, r0
 801b36e:	2e00      	cmp	r6, #0
 801b370:	dd3c      	ble.n	801b3ec <__kernel_rem_pio2f+0x1c0>
 801b372:	f04f 0e00 	mov.w	lr, #0
 801b376:	f109 0901 	add.w	r9, r9, #1
 801b37a:	4670      	mov	r0, lr
 801b37c:	4574      	cmp	r4, lr
 801b37e:	dc68      	bgt.n	801b452 <__kernel_rem_pio2f+0x226>
 801b380:	2d00      	cmp	r5, #0
 801b382:	dd03      	ble.n	801b38c <__kernel_rem_pio2f+0x160>
 801b384:	2d01      	cmp	r5, #1
 801b386:	d074      	beq.n	801b472 <__kernel_rem_pio2f+0x246>
 801b388:	2d02      	cmp	r5, #2
 801b38a:	d07d      	beq.n	801b488 <__kernel_rem_pio2f+0x25c>
 801b38c:	2e02      	cmp	r6, #2
 801b38e:	d12d      	bne.n	801b3ec <__kernel_rem_pio2f+0x1c0>
 801b390:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b394:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b398:	b340      	cbz	r0, 801b3ec <__kernel_rem_pio2f+0x1c0>
 801b39a:	4628      	mov	r0, r5
 801b39c:	9306      	str	r3, [sp, #24]
 801b39e:	f000 f9ad 	bl	801b6fc <scalbnf>
 801b3a2:	9b06      	ldr	r3, [sp, #24]
 801b3a4:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b3a8:	e020      	b.n	801b3ec <__kernel_rem_pio2f+0x1c0>
 801b3aa:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b3ae:	3e01      	subs	r6, #1
 801b3b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b3b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b3b8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b3bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b3c0:	ecac 0a01 	vstmia	ip!, {s0}
 801b3c4:	ed30 0a01 	vldmdb	r0!, {s0}
 801b3c8:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b3cc:	e79e      	b.n	801b30c <__kernel_rem_pio2f+0xe0>
 801b3ce:	d105      	bne.n	801b3dc <__kernel_rem_pio2f+0x1b0>
 801b3d0:	1e60      	subs	r0, r4, #1
 801b3d2:	a908      	add	r1, sp, #32
 801b3d4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801b3d8:	11f6      	asrs	r6, r6, #7
 801b3da:	e7c8      	b.n	801b36e <__kernel_rem_pio2f+0x142>
 801b3dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b3e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3e8:	da31      	bge.n	801b44e <__kernel_rem_pio2f+0x222>
 801b3ea:	2600      	movs	r6, #0
 801b3ec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3f4:	f040 8098 	bne.w	801b528 <__kernel_rem_pio2f+0x2fc>
 801b3f8:	1e60      	subs	r0, r4, #1
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	4550      	cmp	r0, sl
 801b3fe:	da4b      	bge.n	801b498 <__kernel_rem_pio2f+0x26c>
 801b400:	2a00      	cmp	r2, #0
 801b402:	d065      	beq.n	801b4d0 <__kernel_rem_pio2f+0x2a4>
 801b404:	3c01      	subs	r4, #1
 801b406:	ab08      	add	r3, sp, #32
 801b408:	3d08      	subs	r5, #8
 801b40a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d0f8      	beq.n	801b404 <__kernel_rem_pio2f+0x1d8>
 801b412:	4628      	mov	r0, r5
 801b414:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801b418:	f000 f970 	bl	801b6fc <scalbnf>
 801b41c:	1c63      	adds	r3, r4, #1
 801b41e:	aa44      	add	r2, sp, #272	@ 0x110
 801b420:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801b520 <__kernel_rem_pio2f+0x2f4>
 801b424:	0099      	lsls	r1, r3, #2
 801b426:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b42a:	4623      	mov	r3, r4
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	f280 80a9 	bge.w	801b584 <__kernel_rem_pio2f+0x358>
 801b432:	4623      	mov	r3, r4
 801b434:	2b00      	cmp	r3, #0
 801b436:	f2c0 80c7 	blt.w	801b5c8 <__kernel_rem_pio2f+0x39c>
 801b43a:	aa44      	add	r2, sp, #272	@ 0x110
 801b43c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b440:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801b518 <__kernel_rem_pio2f+0x2ec>
 801b444:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801b524 <__kernel_rem_pio2f+0x2f8>
 801b448:	2000      	movs	r0, #0
 801b44a:	1ae2      	subs	r2, r4, r3
 801b44c:	e0b1      	b.n	801b5b2 <__kernel_rem_pio2f+0x386>
 801b44e:	2602      	movs	r6, #2
 801b450:	e78f      	b.n	801b372 <__kernel_rem_pio2f+0x146>
 801b452:	f852 1b04 	ldr.w	r1, [r2], #4
 801b456:	b948      	cbnz	r0, 801b46c <__kernel_rem_pio2f+0x240>
 801b458:	b121      	cbz	r1, 801b464 <__kernel_rem_pio2f+0x238>
 801b45a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801b45e:	f842 1c04 	str.w	r1, [r2, #-4]
 801b462:	2101      	movs	r1, #1
 801b464:	f10e 0e01 	add.w	lr, lr, #1
 801b468:	4608      	mov	r0, r1
 801b46a:	e787      	b.n	801b37c <__kernel_rem_pio2f+0x150>
 801b46c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801b470:	e7f5      	b.n	801b45e <__kernel_rem_pio2f+0x232>
 801b472:	f104 3cff 	add.w	ip, r4, #4294967295
 801b476:	aa08      	add	r2, sp, #32
 801b478:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b47c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801b480:	a908      	add	r1, sp, #32
 801b482:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801b486:	e781      	b.n	801b38c <__kernel_rem_pio2f+0x160>
 801b488:	f104 3cff 	add.w	ip, r4, #4294967295
 801b48c:	aa08      	add	r2, sp, #32
 801b48e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b492:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b496:	e7f3      	b.n	801b480 <__kernel_rem_pio2f+0x254>
 801b498:	a908      	add	r1, sp, #32
 801b49a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801b49e:	3801      	subs	r0, #1
 801b4a0:	430a      	orrs	r2, r1
 801b4a2:	e7ab      	b.n	801b3fc <__kernel_rem_pio2f+0x1d0>
 801b4a4:	3201      	adds	r2, #1
 801b4a6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801b4aa:	2e00      	cmp	r6, #0
 801b4ac:	d0fa      	beq.n	801b4a4 <__kernel_rem_pio2f+0x278>
 801b4ae:	9905      	ldr	r1, [sp, #20]
 801b4b0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801b4b4:	eb0d 0001 	add.w	r0, sp, r1
 801b4b8:	18e6      	adds	r6, r4, r3
 801b4ba:	a91c      	add	r1, sp, #112	@ 0x70
 801b4bc:	f104 0c01 	add.w	ip, r4, #1
 801b4c0:	384c      	subs	r0, #76	@ 0x4c
 801b4c2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801b4c6:	4422      	add	r2, r4
 801b4c8:	4562      	cmp	r2, ip
 801b4ca:	da04      	bge.n	801b4d6 <__kernel_rem_pio2f+0x2aa>
 801b4cc:	4614      	mov	r4, r2
 801b4ce:	e710      	b.n	801b2f2 <__kernel_rem_pio2f+0xc6>
 801b4d0:	9804      	ldr	r0, [sp, #16]
 801b4d2:	2201      	movs	r2, #1
 801b4d4:	e7e7      	b.n	801b4a6 <__kernel_rem_pio2f+0x27a>
 801b4d6:	9903      	ldr	r1, [sp, #12]
 801b4d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b4dc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801b4e0:	9105      	str	r1, [sp, #20]
 801b4e2:	ee07 1a90 	vmov	s15, r1
 801b4e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b4ea:	2400      	movs	r4, #0
 801b4ec:	ece6 7a01 	vstmia	r6!, {s15}
 801b4f0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801b524 <__kernel_rem_pio2f+0x2f8>
 801b4f4:	46b1      	mov	r9, r6
 801b4f6:	455c      	cmp	r4, fp
 801b4f8:	dd04      	ble.n	801b504 <__kernel_rem_pio2f+0x2d8>
 801b4fa:	ece0 7a01 	vstmia	r0!, {s15}
 801b4fe:	f10c 0c01 	add.w	ip, ip, #1
 801b502:	e7e1      	b.n	801b4c8 <__kernel_rem_pio2f+0x29c>
 801b504:	ecfe 6a01 	vldmia	lr!, {s13}
 801b508:	ed39 7a01 	vldmdb	r9!, {s14}
 801b50c:	3401      	adds	r4, #1
 801b50e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b512:	e7f0      	b.n	801b4f6 <__kernel_rem_pio2f+0x2ca>
 801b514:	0801d348 	.word	0x0801d348
 801b518:	0801d31c 	.word	0x0801d31c
 801b51c:	43800000 	.word	0x43800000
 801b520:	3b800000 	.word	0x3b800000
 801b524:	00000000 	.word	0x00000000
 801b528:	9b02      	ldr	r3, [sp, #8]
 801b52a:	eeb0 0a48 	vmov.f32	s0, s16
 801b52e:	eba3 0008 	sub.w	r0, r3, r8
 801b532:	f000 f8e3 	bl	801b6fc <scalbnf>
 801b536:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801b51c <__kernel_rem_pio2f+0x2f0>
 801b53a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b542:	db19      	blt.n	801b578 <__kernel_rem_pio2f+0x34c>
 801b544:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801b520 <__kernel_rem_pio2f+0x2f4>
 801b548:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b54c:	aa08      	add	r2, sp, #32
 801b54e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b552:	3508      	adds	r5, #8
 801b554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b558:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b55c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b560:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b564:	ee10 3a10 	vmov	r3, s0
 801b568:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b56c:	ee17 3a90 	vmov	r3, s15
 801b570:	3401      	adds	r4, #1
 801b572:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b576:	e74c      	b.n	801b412 <__kernel_rem_pio2f+0x1e6>
 801b578:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b57c:	aa08      	add	r2, sp, #32
 801b57e:	ee10 3a10 	vmov	r3, s0
 801b582:	e7f6      	b.n	801b572 <__kernel_rem_pio2f+0x346>
 801b584:	a808      	add	r0, sp, #32
 801b586:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b58a:	9001      	str	r0, [sp, #4]
 801b58c:	ee07 0a90 	vmov	s15, r0
 801b590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b594:	3b01      	subs	r3, #1
 801b596:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b59a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b59e:	ed62 7a01 	vstmdb	r2!, {s15}
 801b5a2:	e743      	b.n	801b42c <__kernel_rem_pio2f+0x200>
 801b5a4:	ecfc 6a01 	vldmia	ip!, {s13}
 801b5a8:	ecb5 7a01 	vldmia	r5!, {s14}
 801b5ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b5b0:	3001      	adds	r0, #1
 801b5b2:	4550      	cmp	r0, sl
 801b5b4:	dc01      	bgt.n	801b5ba <__kernel_rem_pio2f+0x38e>
 801b5b6:	4290      	cmp	r0, r2
 801b5b8:	ddf4      	ble.n	801b5a4 <__kernel_rem_pio2f+0x378>
 801b5ba:	a858      	add	r0, sp, #352	@ 0x160
 801b5bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b5c0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801b5c4:	3b01      	subs	r3, #1
 801b5c6:	e735      	b.n	801b434 <__kernel_rem_pio2f+0x208>
 801b5c8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801b5ca:	2b02      	cmp	r3, #2
 801b5cc:	dc09      	bgt.n	801b5e2 <__kernel_rem_pio2f+0x3b6>
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	dc27      	bgt.n	801b622 <__kernel_rem_pio2f+0x3f6>
 801b5d2:	d040      	beq.n	801b656 <__kernel_rem_pio2f+0x42a>
 801b5d4:	f009 0007 	and.w	r0, r9, #7
 801b5d8:	b059      	add	sp, #356	@ 0x164
 801b5da:	ecbd 8b04 	vpop	{d8-d9}
 801b5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5e2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801b5e4:	2b03      	cmp	r3, #3
 801b5e6:	d1f5      	bne.n	801b5d4 <__kernel_rem_pio2f+0x3a8>
 801b5e8:	aa30      	add	r2, sp, #192	@ 0xc0
 801b5ea:	1f0b      	subs	r3, r1, #4
 801b5ec:	4413      	add	r3, r2
 801b5ee:	461a      	mov	r2, r3
 801b5f0:	4620      	mov	r0, r4
 801b5f2:	2800      	cmp	r0, #0
 801b5f4:	dc50      	bgt.n	801b698 <__kernel_rem_pio2f+0x46c>
 801b5f6:	4622      	mov	r2, r4
 801b5f8:	2a01      	cmp	r2, #1
 801b5fa:	dc5d      	bgt.n	801b6b8 <__kernel_rem_pio2f+0x48c>
 801b5fc:	ab30      	add	r3, sp, #192	@ 0xc0
 801b5fe:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801b524 <__kernel_rem_pio2f+0x2f8>
 801b602:	440b      	add	r3, r1
 801b604:	2c01      	cmp	r4, #1
 801b606:	dc67      	bgt.n	801b6d8 <__kernel_rem_pio2f+0x4ac>
 801b608:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801b60c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801b610:	2e00      	cmp	r6, #0
 801b612:	d167      	bne.n	801b6e4 <__kernel_rem_pio2f+0x4b8>
 801b614:	edc7 6a00 	vstr	s13, [r7]
 801b618:	ed87 7a01 	vstr	s14, [r7, #4]
 801b61c:	edc7 7a02 	vstr	s15, [r7, #8]
 801b620:	e7d8      	b.n	801b5d4 <__kernel_rem_pio2f+0x3a8>
 801b622:	ab30      	add	r3, sp, #192	@ 0xc0
 801b624:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801b524 <__kernel_rem_pio2f+0x2f8>
 801b628:	440b      	add	r3, r1
 801b62a:	4622      	mov	r2, r4
 801b62c:	2a00      	cmp	r2, #0
 801b62e:	da24      	bge.n	801b67a <__kernel_rem_pio2f+0x44e>
 801b630:	b34e      	cbz	r6, 801b686 <__kernel_rem_pio2f+0x45a>
 801b632:	eef1 7a47 	vneg.f32	s15, s14
 801b636:	edc7 7a00 	vstr	s15, [r7]
 801b63a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801b63e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b642:	aa31      	add	r2, sp, #196	@ 0xc4
 801b644:	2301      	movs	r3, #1
 801b646:	429c      	cmp	r4, r3
 801b648:	da20      	bge.n	801b68c <__kernel_rem_pio2f+0x460>
 801b64a:	b10e      	cbz	r6, 801b650 <__kernel_rem_pio2f+0x424>
 801b64c:	eef1 7a67 	vneg.f32	s15, s15
 801b650:	edc7 7a01 	vstr	s15, [r7, #4]
 801b654:	e7be      	b.n	801b5d4 <__kernel_rem_pio2f+0x3a8>
 801b656:	ab30      	add	r3, sp, #192	@ 0xc0
 801b658:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801b524 <__kernel_rem_pio2f+0x2f8>
 801b65c:	440b      	add	r3, r1
 801b65e:	2c00      	cmp	r4, #0
 801b660:	da05      	bge.n	801b66e <__kernel_rem_pio2f+0x442>
 801b662:	b10e      	cbz	r6, 801b668 <__kernel_rem_pio2f+0x43c>
 801b664:	eef1 7a67 	vneg.f32	s15, s15
 801b668:	edc7 7a00 	vstr	s15, [r7]
 801b66c:	e7b2      	b.n	801b5d4 <__kernel_rem_pio2f+0x3a8>
 801b66e:	ed33 7a01 	vldmdb	r3!, {s14}
 801b672:	3c01      	subs	r4, #1
 801b674:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b678:	e7f1      	b.n	801b65e <__kernel_rem_pio2f+0x432>
 801b67a:	ed73 7a01 	vldmdb	r3!, {s15}
 801b67e:	3a01      	subs	r2, #1
 801b680:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b684:	e7d2      	b.n	801b62c <__kernel_rem_pio2f+0x400>
 801b686:	eef0 7a47 	vmov.f32	s15, s14
 801b68a:	e7d4      	b.n	801b636 <__kernel_rem_pio2f+0x40a>
 801b68c:	ecb2 7a01 	vldmia	r2!, {s14}
 801b690:	3301      	adds	r3, #1
 801b692:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b696:	e7d6      	b.n	801b646 <__kernel_rem_pio2f+0x41a>
 801b698:	ed72 7a01 	vldmdb	r2!, {s15}
 801b69c:	edd2 6a01 	vldr	s13, [r2, #4]
 801b6a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b6a4:	3801      	subs	r0, #1
 801b6a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b6aa:	ed82 7a00 	vstr	s14, [r2]
 801b6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b6b2:	edc2 7a01 	vstr	s15, [r2, #4]
 801b6b6:	e79c      	b.n	801b5f2 <__kernel_rem_pio2f+0x3c6>
 801b6b8:	ed73 7a01 	vldmdb	r3!, {s15}
 801b6bc:	edd3 6a01 	vldr	s13, [r3, #4]
 801b6c0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b6c4:	3a01      	subs	r2, #1
 801b6c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b6ca:	ed83 7a00 	vstr	s14, [r3]
 801b6ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b6d2:	edc3 7a01 	vstr	s15, [r3, #4]
 801b6d6:	e78f      	b.n	801b5f8 <__kernel_rem_pio2f+0x3cc>
 801b6d8:	ed33 7a01 	vldmdb	r3!, {s14}
 801b6dc:	3c01      	subs	r4, #1
 801b6de:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b6e2:	e78f      	b.n	801b604 <__kernel_rem_pio2f+0x3d8>
 801b6e4:	eef1 6a66 	vneg.f32	s13, s13
 801b6e8:	eeb1 7a47 	vneg.f32	s14, s14
 801b6ec:	edc7 6a00 	vstr	s13, [r7]
 801b6f0:	ed87 7a01 	vstr	s14, [r7, #4]
 801b6f4:	eef1 7a67 	vneg.f32	s15, s15
 801b6f8:	e790      	b.n	801b61c <__kernel_rem_pio2f+0x3f0>
 801b6fa:	bf00      	nop

0801b6fc <scalbnf>:
 801b6fc:	ee10 3a10 	vmov	r3, s0
 801b700:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801b704:	d02b      	beq.n	801b75e <scalbnf+0x62>
 801b706:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801b70a:	d302      	bcc.n	801b712 <scalbnf+0x16>
 801b70c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b710:	4770      	bx	lr
 801b712:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801b716:	d123      	bne.n	801b760 <scalbnf+0x64>
 801b718:	4b24      	ldr	r3, [pc, #144]	@ (801b7ac <scalbnf+0xb0>)
 801b71a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801b7b0 <scalbnf+0xb4>
 801b71e:	4298      	cmp	r0, r3
 801b720:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b724:	db17      	blt.n	801b756 <scalbnf+0x5a>
 801b726:	ee10 3a10 	vmov	r3, s0
 801b72a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b72e:	3a19      	subs	r2, #25
 801b730:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801b734:	4288      	cmp	r0, r1
 801b736:	dd15      	ble.n	801b764 <scalbnf+0x68>
 801b738:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801b7b4 <scalbnf+0xb8>
 801b73c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801b7b8 <scalbnf+0xbc>
 801b740:	ee10 3a10 	vmov	r3, s0
 801b744:	eeb0 7a67 	vmov.f32	s14, s15
 801b748:	2b00      	cmp	r3, #0
 801b74a:	bfb8      	it	lt
 801b74c:	eef0 7a66 	vmovlt.f32	s15, s13
 801b750:	ee27 0a87 	vmul.f32	s0, s15, s14
 801b754:	4770      	bx	lr
 801b756:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801b7bc <scalbnf+0xc0>
 801b75a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b75e:	4770      	bx	lr
 801b760:	0dd2      	lsrs	r2, r2, #23
 801b762:	e7e5      	b.n	801b730 <scalbnf+0x34>
 801b764:	4410      	add	r0, r2
 801b766:	28fe      	cmp	r0, #254	@ 0xfe
 801b768:	dce6      	bgt.n	801b738 <scalbnf+0x3c>
 801b76a:	2800      	cmp	r0, #0
 801b76c:	dd06      	ble.n	801b77c <scalbnf+0x80>
 801b76e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801b772:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b776:	ee00 3a10 	vmov	s0, r3
 801b77a:	4770      	bx	lr
 801b77c:	f110 0f16 	cmn.w	r0, #22
 801b780:	da09      	bge.n	801b796 <scalbnf+0x9a>
 801b782:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801b7bc <scalbnf+0xc0>
 801b786:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801b7c0 <scalbnf+0xc4>
 801b78a:	ee10 3a10 	vmov	r3, s0
 801b78e:	eeb0 7a67 	vmov.f32	s14, s15
 801b792:	2b00      	cmp	r3, #0
 801b794:	e7d9      	b.n	801b74a <scalbnf+0x4e>
 801b796:	3019      	adds	r0, #25
 801b798:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801b79c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b7a0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801b7c4 <scalbnf+0xc8>
 801b7a4:	ee07 3a90 	vmov	s15, r3
 801b7a8:	e7d7      	b.n	801b75a <scalbnf+0x5e>
 801b7aa:	bf00      	nop
 801b7ac:	ffff3cb0 	.word	0xffff3cb0
 801b7b0:	4c000000 	.word	0x4c000000
 801b7b4:	7149f2ca 	.word	0x7149f2ca
 801b7b8:	f149f2ca 	.word	0xf149f2ca
 801b7bc:	0da24260 	.word	0x0da24260
 801b7c0:	8da24260 	.word	0x8da24260
 801b7c4:	33000000 	.word	0x33000000

0801b7c8 <floorf>:
 801b7c8:	ee10 3a10 	vmov	r3, s0
 801b7cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b7d0:	3a7f      	subs	r2, #127	@ 0x7f
 801b7d2:	2a16      	cmp	r2, #22
 801b7d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801b7d8:	dc2b      	bgt.n	801b832 <floorf+0x6a>
 801b7da:	2a00      	cmp	r2, #0
 801b7dc:	da12      	bge.n	801b804 <floorf+0x3c>
 801b7de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801b844 <floorf+0x7c>
 801b7e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b7e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7ee:	dd06      	ble.n	801b7fe <floorf+0x36>
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	da24      	bge.n	801b83e <floorf+0x76>
 801b7f4:	2900      	cmp	r1, #0
 801b7f6:	4b14      	ldr	r3, [pc, #80]	@ (801b848 <floorf+0x80>)
 801b7f8:	bf08      	it	eq
 801b7fa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801b7fe:	ee00 3a10 	vmov	s0, r3
 801b802:	4770      	bx	lr
 801b804:	4911      	ldr	r1, [pc, #68]	@ (801b84c <floorf+0x84>)
 801b806:	4111      	asrs	r1, r2
 801b808:	420b      	tst	r3, r1
 801b80a:	d0fa      	beq.n	801b802 <floorf+0x3a>
 801b80c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801b844 <floorf+0x7c>
 801b810:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b814:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b81c:	ddef      	ble.n	801b7fe <floorf+0x36>
 801b81e:	2b00      	cmp	r3, #0
 801b820:	bfbe      	ittt	lt
 801b822:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801b826:	fa40 f202 	asrlt.w	r2, r0, r2
 801b82a:	189b      	addlt	r3, r3, r2
 801b82c:	ea23 0301 	bic.w	r3, r3, r1
 801b830:	e7e5      	b.n	801b7fe <floorf+0x36>
 801b832:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801b836:	d3e4      	bcc.n	801b802 <floorf+0x3a>
 801b838:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b83c:	4770      	bx	lr
 801b83e:	2300      	movs	r3, #0
 801b840:	e7dd      	b.n	801b7fe <floorf+0x36>
 801b842:	bf00      	nop
 801b844:	7149f2ca 	.word	0x7149f2ca
 801b848:	bf800000 	.word	0xbf800000
 801b84c:	007fffff 	.word	0x007fffff

0801b850 <_init>:
 801b850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b852:	bf00      	nop
 801b854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b856:	bc08      	pop	{r3}
 801b858:	469e      	mov	lr, r3
 801b85a:	4770      	bx	lr

0801b85c <_fini>:
 801b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b85e:	bf00      	nop
 801b860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b862:	bc08      	pop	{r3}
 801b864:	469e      	mov	lr, r3
 801b866:	4770      	bx	lr
