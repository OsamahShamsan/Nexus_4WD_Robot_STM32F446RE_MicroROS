
NexusRobot_ROS2_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d24  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000193c  08019ef8  08019ef8  0001aef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b834  0801b834  0001f300  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b834  0801b834  0001c834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b83c  0801b83c  0001f300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b83c  0801b83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b844  0801b844  0001c844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002300  20000000  0801b848  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e468  20002300  0801db48  0001f300  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010768  0801db48  0001f768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f300  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e25e  00000000  00000000  0001f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004492  00000000  00000000  0003d58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  00041a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000129c  00000000  00000000  00043238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a33c  00000000  00000000  000444d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000227b6  00000000  00000000  0006e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fca10  00000000  00000000  00090fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  0018d9d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007570  00000000  00000000  0018da40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00194fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20002300 	.word	0x20002300
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019edc 	.word	0x08019edc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20002304 	.word	0x20002304
 800020c:	08019edc 	.word	0x08019edc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__gedf2>:
 8000658:	f04f 3cff 	mov.w	ip, #4294967295
 800065c:	e006      	b.n	800066c <__cmpdf2+0x4>
 800065e:	bf00      	nop

08000660 <__ledf2>:
 8000660:	f04f 0c01 	mov.w	ip, #1
 8000664:	e002      	b.n	800066c <__cmpdf2+0x4>
 8000666:	bf00      	nop

08000668 <__cmpdf2>:
 8000668:	f04f 0c01 	mov.w	ip, #1
 800066c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000670:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000674:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000678:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800067c:	bf18      	it	ne
 800067e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000682:	d01b      	beq.n	80006bc <__cmpdf2+0x54>
 8000684:	b001      	add	sp, #4
 8000686:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800068a:	bf0c      	ite	eq
 800068c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000690:	ea91 0f03 	teqne	r1, r3
 8000694:	bf02      	ittt	eq
 8000696:	ea90 0f02 	teqeq	r0, r2
 800069a:	2000      	moveq	r0, #0
 800069c:	4770      	bxeq	lr
 800069e:	f110 0f00 	cmn.w	r0, #0
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf58      	it	pl
 80006a8:	4299      	cmppl	r1, r3
 80006aa:	bf08      	it	eq
 80006ac:	4290      	cmpeq	r0, r2
 80006ae:	bf2c      	ite	cs
 80006b0:	17d8      	asrcs	r0, r3, #31
 80006b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006b6:	f040 0001 	orr.w	r0, r0, #1
 80006ba:	4770      	bx	lr
 80006bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006c4:	d102      	bne.n	80006cc <__cmpdf2+0x64>
 80006c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ca:	d107      	bne.n	80006dc <__cmpdf2+0x74>
 80006cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006d4:	d1d6      	bne.n	8000684 <__cmpdf2+0x1c>
 80006d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006da:	d0d3      	beq.n	8000684 <__cmpdf2+0x1c>
 80006dc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <__aeabi_cdrcmple>:
 80006e4:	4684      	mov	ip, r0
 80006e6:	4610      	mov	r0, r2
 80006e8:	4662      	mov	r2, ip
 80006ea:	468c      	mov	ip, r1
 80006ec:	4619      	mov	r1, r3
 80006ee:	4663      	mov	r3, ip
 80006f0:	e000      	b.n	80006f4 <__aeabi_cdcmpeq>
 80006f2:	bf00      	nop

080006f4 <__aeabi_cdcmpeq>:
 80006f4:	b501      	push	{r0, lr}
 80006f6:	f7ff ffb7 	bl	8000668 <__cmpdf2>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	bf48      	it	mi
 80006fe:	f110 0f00 	cmnmi.w	r0, #0
 8000702:	bd01      	pop	{r0, pc}

08000704 <__aeabi_dcmpeq>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff fff4 	bl	80006f4 <__aeabi_cdcmpeq>
 800070c:	bf0c      	ite	eq
 800070e:	2001      	moveq	r0, #1
 8000710:	2000      	movne	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_dcmplt>:
 8000718:	f84d ed08 	str.w	lr, [sp, #-8]!
 800071c:	f7ff ffea 	bl	80006f4 <__aeabi_cdcmpeq>
 8000720:	bf34      	ite	cc
 8000722:	2001      	movcc	r0, #1
 8000724:	2000      	movcs	r0, #0
 8000726:	f85d fb08 	ldr.w	pc, [sp], #8
 800072a:	bf00      	nop

0800072c <__aeabi_dcmple>:
 800072c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000730:	f7ff ffe0 	bl	80006f4 <__aeabi_cdcmpeq>
 8000734:	bf94      	ite	ls
 8000736:	2001      	movls	r0, #1
 8000738:	2000      	movhi	r0, #0
 800073a:	f85d fb08 	ldr.w	pc, [sp], #8
 800073e:	bf00      	nop

08000740 <__aeabi_dcmpge>:
 8000740:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000744:	f7ff ffce 	bl	80006e4 <__aeabi_cdrcmple>
 8000748:	bf94      	ite	ls
 800074a:	2001      	movls	r0, #1
 800074c:	2000      	movhi	r0, #0
 800074e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000752:	bf00      	nop

08000754 <__aeabi_dcmpgt>:
 8000754:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000758:	f7ff ffc4 	bl	80006e4 <__aeabi_cdrcmple>
 800075c:	bf34      	ite	cc
 800075e:	2001      	movcc	r0, #1
 8000760:	2000      	movcs	r0, #0
 8000762:	f85d fb08 	ldr.w	pc, [sp], #8
 8000766:	bf00      	nop

08000768 <__aeabi_d2f>:
 8000768:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800076c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000770:	bf24      	itt	cs
 8000772:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000776:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800077a:	d90d      	bls.n	8000798 <__aeabi_d2f+0x30>
 800077c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000780:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000784:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000788:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800078c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000790:	bf08      	it	eq
 8000792:	f020 0001 	biceq.w	r0, r0, #1
 8000796:	4770      	bx	lr
 8000798:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800079c:	d121      	bne.n	80007e2 <__aeabi_d2f+0x7a>
 800079e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007a2:	bfbc      	itt	lt
 80007a4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007a8:	4770      	bxlt	lr
 80007aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007b2:	f1c2 0218 	rsb	r2, r2, #24
 80007b6:	f1c2 0c20 	rsb	ip, r2, #32
 80007ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	bf18      	it	ne
 80007c4:	f040 0001 	orrne.w	r0, r0, #1
 80007c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007d4:	ea40 000c 	orr.w	r0, r0, ip
 80007d8:	fa23 f302 	lsr.w	r3, r3, r2
 80007dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007e0:	e7cc      	b.n	800077c <__aeabi_d2f+0x14>
 80007e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007e6:	d107      	bne.n	80007f8 <__aeabi_d2f+0x90>
 80007e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007ec:	bf1e      	ittt	ne
 80007ee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80007f2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80007f6:	4770      	bxne	lr
 80007f8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80007fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000800:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop

08000808 <__aeabi_ldivmod>:
 8000808:	b97b      	cbnz	r3, 800082a <__aeabi_ldivmod+0x22>
 800080a:	b972      	cbnz	r2, 800082a <__aeabi_ldivmod+0x22>
 800080c:	2900      	cmp	r1, #0
 800080e:	bfbe      	ittt	lt
 8000810:	2000      	movlt	r0, #0
 8000812:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000816:	e006      	blt.n	8000826 <__aeabi_ldivmod+0x1e>
 8000818:	bf08      	it	eq
 800081a:	2800      	cmpeq	r0, #0
 800081c:	bf1c      	itt	ne
 800081e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000822:	f04f 30ff 	movne.w	r0, #4294967295
 8000826:	f000 b9d3 	b.w	8000bd0 <__aeabi_idiv0>
 800082a:	f1ad 0c08 	sub.w	ip, sp, #8
 800082e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000832:	2900      	cmp	r1, #0
 8000834:	db09      	blt.n	800084a <__aeabi_ldivmod+0x42>
 8000836:	2b00      	cmp	r3, #0
 8000838:	db1a      	blt.n	8000870 <__aeabi_ldivmod+0x68>
 800083a:	f000 f84d 	bl	80008d8 <__udivmoddi4>
 800083e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000846:	b004      	add	sp, #16
 8000848:	4770      	bx	lr
 800084a:	4240      	negs	r0, r0
 800084c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	db1b      	blt.n	800088c <__aeabi_ldivmod+0x84>
 8000854:	f000 f840 	bl	80008d8 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4240      	negs	r0, r0
 8000864:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000868:	4252      	negs	r2, r2
 800086a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800086e:	4770      	bx	lr
 8000870:	4252      	negs	r2, r2
 8000872:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000876:	f000 f82f 	bl	80008d8 <__udivmoddi4>
 800087a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000882:	b004      	add	sp, #16
 8000884:	4240      	negs	r0, r0
 8000886:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800088a:	4770      	bx	lr
 800088c:	4252      	negs	r2, r2
 800088e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000892:	f000 f821 	bl	80008d8 <__udivmoddi4>
 8000896:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800089e:	b004      	add	sp, #16
 80008a0:	4252      	negs	r2, r2
 80008a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008a6:	4770      	bx	lr

080008a8 <__aeabi_uldivmod>:
 80008a8:	b953      	cbnz	r3, 80008c0 <__aeabi_uldivmod+0x18>
 80008aa:	b94a      	cbnz	r2, 80008c0 <__aeabi_uldivmod+0x18>
 80008ac:	2900      	cmp	r1, #0
 80008ae:	bf08      	it	eq
 80008b0:	2800      	cmpeq	r0, #0
 80008b2:	bf1c      	itt	ne
 80008b4:	f04f 31ff 	movne.w	r1, #4294967295
 80008b8:	f04f 30ff 	movne.w	r0, #4294967295
 80008bc:	f000 b988 	b.w	8000bd0 <__aeabi_idiv0>
 80008c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008c8:	f000 f806 	bl	80008d8 <__udivmoddi4>
 80008cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d4:	b004      	add	sp, #16
 80008d6:	4770      	bx	lr

080008d8 <__udivmoddi4>:
 80008d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008dc:	9d08      	ldr	r5, [sp, #32]
 80008de:	468e      	mov	lr, r1
 80008e0:	4604      	mov	r4, r0
 80008e2:	4688      	mov	r8, r1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d14a      	bne.n	800097e <__udivmoddi4+0xa6>
 80008e8:	428a      	cmp	r2, r1
 80008ea:	4617      	mov	r7, r2
 80008ec:	d962      	bls.n	80009b4 <__udivmoddi4+0xdc>
 80008ee:	fab2 f682 	clz	r6, r2
 80008f2:	b14e      	cbz	r6, 8000908 <__udivmoddi4+0x30>
 80008f4:	f1c6 0320 	rsb	r3, r6, #32
 80008f8:	fa01 f806 	lsl.w	r8, r1, r6
 80008fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000900:	40b7      	lsls	r7, r6
 8000902:	ea43 0808 	orr.w	r8, r3, r8
 8000906:	40b4      	lsls	r4, r6
 8000908:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090c:	fa1f fc87 	uxth.w	ip, r7
 8000910:	fbb8 f1fe 	udiv	r1, r8, lr
 8000914:	0c23      	lsrs	r3, r4, #16
 8000916:	fb0e 8811 	mls	r8, lr, r1, r8
 800091a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800091e:	fb01 f20c 	mul.w	r2, r1, ip
 8000922:	429a      	cmp	r2, r3
 8000924:	d909      	bls.n	800093a <__udivmoddi4+0x62>
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	f101 30ff 	add.w	r0, r1, #4294967295
 800092c:	f080 80ea 	bcs.w	8000b04 <__udivmoddi4+0x22c>
 8000930:	429a      	cmp	r2, r3
 8000932:	f240 80e7 	bls.w	8000b04 <__udivmoddi4+0x22c>
 8000936:	3902      	subs	r1, #2
 8000938:	443b      	add	r3, r7
 800093a:	1a9a      	subs	r2, r3, r2
 800093c:	b2a3      	uxth	r3, r4
 800093e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000942:	fb0e 2210 	mls	r2, lr, r0, r2
 8000946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800094a:	fb00 fc0c 	mul.w	ip, r0, ip
 800094e:	459c      	cmp	ip, r3
 8000950:	d909      	bls.n	8000966 <__udivmoddi4+0x8e>
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295
 8000958:	f080 80d6 	bcs.w	8000b08 <__udivmoddi4+0x230>
 800095c:	459c      	cmp	ip, r3
 800095e:	f240 80d3 	bls.w	8000b08 <__udivmoddi4+0x230>
 8000962:	443b      	add	r3, r7
 8000964:	3802      	subs	r0, #2
 8000966:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800096a:	eba3 030c 	sub.w	r3, r3, ip
 800096e:	2100      	movs	r1, #0
 8000970:	b11d      	cbz	r5, 800097a <__udivmoddi4+0xa2>
 8000972:	40f3      	lsrs	r3, r6
 8000974:	2200      	movs	r2, #0
 8000976:	e9c5 3200 	strd	r3, r2, [r5]
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	428b      	cmp	r3, r1
 8000980:	d905      	bls.n	800098e <__udivmoddi4+0xb6>
 8000982:	b10d      	cbz	r5, 8000988 <__udivmoddi4+0xb0>
 8000984:	e9c5 0100 	strd	r0, r1, [r5]
 8000988:	2100      	movs	r1, #0
 800098a:	4608      	mov	r0, r1
 800098c:	e7f5      	b.n	800097a <__udivmoddi4+0xa2>
 800098e:	fab3 f183 	clz	r1, r3
 8000992:	2900      	cmp	r1, #0
 8000994:	d146      	bne.n	8000a24 <__udivmoddi4+0x14c>
 8000996:	4573      	cmp	r3, lr
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xc8>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 8105 	bhi.w	8000baa <__udivmoddi4+0x2d2>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	4690      	mov	r8, r2
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e5      	beq.n	800097a <__udivmoddi4+0xa2>
 80009ae:	e9c5 4800 	strd	r4, r8, [r5]
 80009b2:	e7e2      	b.n	800097a <__udivmoddi4+0xa2>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f000 8090 	beq.w	8000ada <__udivmoddi4+0x202>
 80009ba:	fab2 f682 	clz	r6, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	f040 80a4 	bne.w	8000b0c <__udivmoddi4+0x234>
 80009c4:	1a8a      	subs	r2, r1, r2
 80009c6:	0c03      	lsrs	r3, r0, #16
 80009c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009cc:	b280      	uxth	r0, r0
 80009ce:	b2bc      	uxth	r4, r7
 80009d0:	2101      	movs	r1, #1
 80009d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80009d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80009da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009de:	fb04 f20c 	mul.w	r2, r4, ip
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d907      	bls.n	80009f6 <__udivmoddi4+0x11e>
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009ec:	d202      	bcs.n	80009f4 <__udivmoddi4+0x11c>
 80009ee:	429a      	cmp	r2, r3
 80009f0:	f200 80e0 	bhi.w	8000bb4 <__udivmoddi4+0x2dc>
 80009f4:	46c4      	mov	ip, r8
 80009f6:	1a9b      	subs	r3, r3, r2
 80009f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80009fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a04:	fb02 f404 	mul.w	r4, r2, r4
 8000a08:	429c      	cmp	r4, r3
 8000a0a:	d907      	bls.n	8000a1c <__udivmoddi4+0x144>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a12:	d202      	bcs.n	8000a1a <__udivmoddi4+0x142>
 8000a14:	429c      	cmp	r4, r3
 8000a16:	f200 80ca 	bhi.w	8000bae <__udivmoddi4+0x2d6>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	1b1b      	subs	r3, r3, r4
 8000a1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a22:	e7a5      	b.n	8000970 <__udivmoddi4+0x98>
 8000a24:	f1c1 0620 	rsb	r6, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a2e:	431f      	orrs	r7, r3
 8000a30:	fa0e f401 	lsl.w	r4, lr, r1
 8000a34:	fa20 f306 	lsr.w	r3, r0, r6
 8000a38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fa00 f801 	lsl.w	r8, r0, r1
 8000a46:	fa1f fc87 	uxth.w	ip, r7
 8000a4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x1a0>
 8000a64:	193c      	adds	r4, r7, r4
 8000a66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a6a:	f080 809c 	bcs.w	8000ba6 <__udivmoddi4+0x2ce>
 8000a6e:	45a6      	cmp	lr, r4
 8000a70:	f240 8099 	bls.w	8000ba6 <__udivmoddi4+0x2ce>
 8000a74:	3802      	subs	r0, #2
 8000a76:	443c      	add	r4, r7
 8000a78:	eba4 040e 	sub.w	r4, r4, lr
 8000a7c:	fa1f fe83 	uxth.w	lr, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a90:	45a4      	cmp	ip, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1ce>
 8000a94:	193c      	adds	r4, r7, r4
 8000a96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a9a:	f080 8082 	bcs.w	8000ba2 <__udivmoddi4+0x2ca>
 8000a9e:	45a4      	cmp	ip, r4
 8000aa0:	d97f      	bls.n	8000ba2 <__udivmoddi4+0x2ca>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	443c      	add	r4, r7
 8000aa6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000aaa:	eba4 040c 	sub.w	r4, r4, ip
 8000aae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ab2:	4564      	cmp	r4, ip
 8000ab4:	4673      	mov	r3, lr
 8000ab6:	46e1      	mov	r9, ip
 8000ab8:	d362      	bcc.n	8000b80 <__udivmoddi4+0x2a8>
 8000aba:	d05f      	beq.n	8000b7c <__udivmoddi4+0x2a4>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x1fe>
 8000abe:	ebb8 0203 	subs.w	r2, r8, r3
 8000ac2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ac6:	fa04 f606 	lsl.w	r6, r4, r6
 8000aca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ace:	431e      	orrs	r6, r3
 8000ad0:	40cc      	lsrs	r4, r1
 8000ad2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e74f      	b.n	800097a <__udivmoddi4+0xa2>
 8000ada:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ade:	0c01      	lsrs	r1, r0, #16
 8000ae0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ae4:	b280      	uxth	r0, r0
 8000ae6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000aea:	463b      	mov	r3, r7
 8000aec:	4638      	mov	r0, r7
 8000aee:	463c      	mov	r4, r7
 8000af0:	46b8      	mov	r8, r7
 8000af2:	46be      	mov	lr, r7
 8000af4:	2620      	movs	r6, #32
 8000af6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000afa:	eba2 0208 	sub.w	r2, r2, r8
 8000afe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b02:	e766      	b.n	80009d2 <__udivmoddi4+0xfa>
 8000b04:	4601      	mov	r1, r0
 8000b06:	e718      	b.n	800093a <__udivmoddi4+0x62>
 8000b08:	4610      	mov	r0, r2
 8000b0a:	e72c      	b.n	8000966 <__udivmoddi4+0x8e>
 8000b0c:	f1c6 0220 	rsb	r2, r6, #32
 8000b10:	fa2e f302 	lsr.w	r3, lr, r2
 8000b14:	40b7      	lsls	r7, r6
 8000b16:	40b1      	lsls	r1, r6
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b20:	430a      	orrs	r2, r1
 8000b22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b26:	b2bc      	uxth	r4, r7
 8000b28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b2c:	0c11      	lsrs	r1, r2, #16
 8000b2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b32:	fb08 f904 	mul.w	r9, r8, r4
 8000b36:	40b0      	lsls	r0, r6
 8000b38:	4589      	cmp	r9, r1
 8000b3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b3e:	b280      	uxth	r0, r0
 8000b40:	d93e      	bls.n	8000bc0 <__udivmoddi4+0x2e8>
 8000b42:	1879      	adds	r1, r7, r1
 8000b44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b48:	d201      	bcs.n	8000b4e <__udivmoddi4+0x276>
 8000b4a:	4589      	cmp	r9, r1
 8000b4c:	d81f      	bhi.n	8000b8e <__udivmoddi4+0x2b6>
 8000b4e:	eba1 0109 	sub.w	r1, r1, r9
 8000b52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b56:	fb09 f804 	mul.w	r8, r9, r4
 8000b5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b64:	4542      	cmp	r2, r8
 8000b66:	d229      	bcs.n	8000bbc <__udivmoddi4+0x2e4>
 8000b68:	18ba      	adds	r2, r7, r2
 8000b6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b6e:	d2c4      	bcs.n	8000afa <__udivmoddi4+0x222>
 8000b70:	4542      	cmp	r2, r8
 8000b72:	d2c2      	bcs.n	8000afa <__udivmoddi4+0x222>
 8000b74:	f1a9 0102 	sub.w	r1, r9, #2
 8000b78:	443a      	add	r2, r7
 8000b7a:	e7be      	b.n	8000afa <__udivmoddi4+0x222>
 8000b7c:	45f0      	cmp	r8, lr
 8000b7e:	d29d      	bcs.n	8000abc <__udivmoddi4+0x1e4>
 8000b80:	ebbe 0302 	subs.w	r3, lr, r2
 8000b84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b88:	3801      	subs	r0, #1
 8000b8a:	46e1      	mov	r9, ip
 8000b8c:	e796      	b.n	8000abc <__udivmoddi4+0x1e4>
 8000b8e:	eba7 0909 	sub.w	r9, r7, r9
 8000b92:	4449      	add	r1, r9
 8000b94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ba0:	e7db      	b.n	8000b5a <__udivmoddi4+0x282>
 8000ba2:	4673      	mov	r3, lr
 8000ba4:	e77f      	b.n	8000aa6 <__udivmoddi4+0x1ce>
 8000ba6:	4650      	mov	r0, sl
 8000ba8:	e766      	b.n	8000a78 <__udivmoddi4+0x1a0>
 8000baa:	4608      	mov	r0, r1
 8000bac:	e6fd      	b.n	80009aa <__udivmoddi4+0xd2>
 8000bae:	443b      	add	r3, r7
 8000bb0:	3a02      	subs	r2, #2
 8000bb2:	e733      	b.n	8000a1c <__udivmoddi4+0x144>
 8000bb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bb8:	443b      	add	r3, r7
 8000bba:	e71c      	b.n	80009f6 <__udivmoddi4+0x11e>
 8000bbc:	4649      	mov	r1, r9
 8000bbe:	e79c      	b.n	8000afa <__udivmoddi4+0x222>
 8000bc0:	eba1 0109 	sub.w	r1, r1, r9
 8000bc4:	46c4      	mov	ip, r8
 8000bc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bca:	fb09 f804 	mul.w	r8, r9, r4
 8000bce:	e7c4      	b.n	8000b5a <__udivmoddi4+0x282>

08000bd0 <__aeabi_idiv0>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <init_motors>:
}

// ----------------------------------------------------------------------------------
// ----------- Motors control functions definitions  ---------------------------------
// ----------------------------------------------------------------------------------
void init_motors(void){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0

	// Set the direction to Forward (INA = 1) & (INB = 0)
	// Rear Left
	HAL_GPIO_WritePin(RL_INB_GPO_GPIO_Port, RL_INB_GPO_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2104      	movs	r1, #4
 8000bde:	483b      	ldr	r0, [pc, #236]	@ (8000ccc <init_motors+0xf8>)
 8000be0:	f002 ffa6 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL_INA_GPO_GPIO_Port, RL_INA_GPO_Pin, GPIO_PIN_SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2108      	movs	r1, #8
 8000be8:	4838      	ldr	r0, [pc, #224]	@ (8000ccc <init_motors+0xf8>)
 8000bea:	f002 ffa1 	bl	8003b30 <HAL_GPIO_WritePin>
	// Front Left
	HAL_GPIO_WritePin(FL_INB_GPO_GPIO_Port, FL_INB_GPO_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	4836      	ldr	r0, [pc, #216]	@ (8000ccc <init_motors+0xf8>)
 8000bf4:	f002 ff9c 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL_INA_GPO_GPIO_Port, FL_INA_GPO_Pin, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4833      	ldr	r0, [pc, #204]	@ (8000ccc <init_motors+0xf8>)
 8000bfe:	f002 ff97 	bl	8003b30 <HAL_GPIO_WritePin>
	// Rear Right
	HAL_GPIO_WritePin(RR_INB_GPO_GPIO_Port, RR_INB_GPO_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2110      	movs	r1, #16
 8000c06:	4831      	ldr	r0, [pc, #196]	@ (8000ccc <init_motors+0xf8>)
 8000c08:	f002 ff92 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_INA_GPO_GPIO_Port, RR_INA_GPO_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c12:	482f      	ldr	r0, [pc, #188]	@ (8000cd0 <init_motors+0xfc>)
 8000c14:	f002 ff8c 	bl	8003b30 <HAL_GPIO_WritePin>
	// Front Right
	HAL_GPIO_WritePin(FR_INB_GPO_GPIO_Port, FR_INB_GPO_Pin, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	482c      	ldr	r0, [pc, #176]	@ (8000cd0 <init_motors+0xfc>)
 8000c1e:	f002 ff87 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c28:	482a      	ldr	r0, [pc, #168]	@ (8000cd4 <init_motors+0x100>)
 8000c2a:	f002 ff81 	bl	8003b30 <HAL_GPIO_WritePin>

	// Enable the full bridges of the motor drivers (VDD)
	HAL_GPIO_WritePin(RL_VDD_GPO_GPIO_Port, RL_VDD_GPO_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c34:	4825      	ldr	r0, [pc, #148]	@ (8000ccc <init_motors+0xf8>)
 8000c36:	f002 ff7b 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FR_VDD_GPO_GPIO_Port, FR_VDD_GPO_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c40:	4822      	ldr	r0, [pc, #136]	@ (8000ccc <init_motors+0xf8>)
 8000c42:	f002 ff75 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_VDD_GPO_GPIO_Port, RR_VDD_GPO_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c4c:	481f      	ldr	r0, [pc, #124]	@ (8000ccc <init_motors+0xf8>)
 8000c4e:	f002 ff6f 	bl	8003b30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL_VDD_GPO_GPIO_Port, FL_VDD_GPO_Pin, GPIO_PIN_SET);
 8000c52:	2201      	movs	r2, #1
 8000c54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c58:	481c      	ldr	r0, [pc, #112]	@ (8000ccc <init_motors+0xf8>)
 8000c5a:	f002 ff69 	bl	8003b30 <HAL_GPIO_WritePin>

	// Start the PWM signals
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// RL Motor
 8000c5e:	2100      	movs	r1, #0
 8000c60:	481d      	ldr	r0, [pc, #116]	@ (8000cd8 <init_motors+0x104>)
 8000c62:	f003 fe59 	bl	8004918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// FL Motor
 8000c66:	2104      	movs	r1, #4
 8000c68:	481b      	ldr	r0, [pc, #108]	@ (8000cd8 <init_motors+0x104>)
 8000c6a:	f003 fe55 	bl	8004918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// FR Motor
 8000c6e:	2108      	movs	r1, #8
 8000c70:	4819      	ldr	r0, [pc, #100]	@ (8000cd8 <init_motors+0x104>)
 8000c72:	f003 fe51 	bl	8004918 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// RR Motor
 8000c76:	210c      	movs	r1, #12
 8000c78:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <init_motors+0x104>)
 8000c7a:	f003 fe4d 	bl	8004918 <HAL_TIM_PWM_Start>

	// Set RL, FL, FR and RR motors to initial speed. For example 0 PWM = 0 CCR = 0% Duty Cycle => t_on = 0 µs
	for(int i = 0; i <= 300; i++){
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	e019      	b.n	8000cb8 <init_motors+0xe4>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i+200);	// RL Motor
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <init_motors+0x104>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, i+100);	// FL Motor
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <init_motors+0x104>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, i);		// FR Motor
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <init_motors+0x104>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);		// RR Motor
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <init_motors+0x104>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	641a      	str	r2, [r3, #64]	@ 0x40
	  	HAL_Delay(15);
 8000cac:	200f      	movs	r0, #15
 8000cae:	f002 f8a3 	bl	8002df8 <HAL_Delay>
	for(int i = 0; i <= 300; i++){
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000cbe:	dde1      	ble.n	8000c84 <init_motors+0xb0>
	  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	40020400 	.word	0x40020400
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	20006a6c 	.word	0x20006a6c
 8000cdc:	00000000 	.word	0x00000000

08000ce0 <compute_and_publish_odometry>:
extern volatile bool encUpdateFlag;

float x = 0.0f, y = 0.0f, theta = 0.0f;

void compute_and_publish_odometry(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	ed2d 8b02 	vpush	{d8}
 8000ce6:	b094      	sub	sp, #80	@ 0x50
 8000ce8:	af00      	add	r7, sp, #0
    if (!encUpdateFlag) return;
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <compute_and_publish_odometry+0x54>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	f083 0301 	eor.w	r3, r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 822f 	bne.w	800115a <compute_and_publish_odometry+0x47a>
    encUpdateFlag = 0;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <compute_and_publish_odometry+0x54>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]

    int16_t localDelta[NUM_WHEELS];
    for (int i = 0; i < NUM_WHEELS; i++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d06:	e00d      	b.n	8000d24 <compute_and_publish_odometry+0x44>
        localDelta[i] = deltaEncoder[i];
 8000d08:	4a0b      	ldr	r2, [pc, #44]	@ (8000d38 <compute_and_publish_odometry+0x58>)
 8000d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	3350      	adds	r3, #80	@ 0x50
 8000d18:	443b      	add	r3, r7
 8000d1a:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (int i = 0; i < NUM_WHEELS; i++)
 8000d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d20:	3301      	adds	r3, #1
 8000d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	ddee      	ble.n	8000d08 <compute_and_publish_odometry+0x28>

    const float DT = 0.001f;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <compute_and_publish_odometry+0x5c>)
 8000d2c:	647b      	str	r3, [r7, #68]	@ 0x44
    float w[NUM_WHEELS];
    for (int i = 0; i < NUM_WHEELS; i++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d32:	e027      	b.n	8000d84 <compute_and_publish_odometry+0xa4>
 8000d34:	20006dd0 	.word	0x20006dd0
 8000d38:	20006db8 	.word	0x20006db8
 8000d3c:	3a83126f 	.word	0x3a83126f
 8000d40:	3b86594b 	.word	0x3b86594b
 8000d44:	3e99999a 	.word	0x3e99999a
 8000d48:	3c4ccccd 	.word	0x3c4ccccd
        w[i] = localDelta[i] * RAD_PER_TICK / DT;
 8000d4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	3350      	adds	r3, #80	@ 0x50
 8000d52:	443b      	add	r3, r7
 8000d54:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d60:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8000d40 <compute_and_publish_odometry+0x60>
 8000d64:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000d68:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8000d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	3350      	adds	r3, #80	@ 0x50
 8000d76:	443b      	add	r3, r7
 8000d78:	3b4c      	subs	r3, #76	@ 0x4c
 8000d7a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < NUM_WHEELS; i++)
 8000d7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d80:	3301      	adds	r3, #1
 8000d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	dde0      	ble.n	8000d4c <compute_and_publish_odometry+0x6c>

    float vx = (WHEEL_R / 4.0f) * (w[1] + w[2] + w[0] + w[3]);
 8000d8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000d9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da6:	ed1f 7a18 	vldr	s14, [pc, #-96]	@ 8000d48 <compute_and_publish_odometry+0x68>
 8000daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dae:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float vy = (WHEEL_R / 4.0f) * (-w[1] + w[2] + w[0] - w[3]);
 8000db2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000db6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dc6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dce:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 8000d48 <compute_and_publish_odometry+0x68>
 8000dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float wz = (WHEEL_R / 4.0f) * ((-w[1] + w[2] - w[0] + w[3]) / A_SUM);
 8000dda:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dde:	edd7 7a02 	vldr	s15, [r7, #8]
 8000de2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dee:	edd7 7a04 	vldr	s15, [r7, #16]
 8000df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000df6:	ed5f 6a2d 	vldr	s13, [pc, #-180]	@ 8000d44 <compute_and_publish_odometry+0x64>
 8000dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dfe:	ed1f 7a2e 	vldr	s14, [pc, #-184]	@ 8000d48 <compute_and_publish_odometry+0x68>
 8000e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e06:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    static float acc_vx = 0, acc_vy = 0, acc_wz = 0;
    static uint8_t count = 0;

    acc_vx += vx;
 8000e0a:	4bc7      	ldr	r3, [pc, #796]	@ (8001128 <compute_and_publish_odometry+0x448>)
 8000e0c:	ed93 7a00 	vldr	s14, [r3]
 8000e10:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e18:	4bc3      	ldr	r3, [pc, #780]	@ (8001128 <compute_and_publish_odometry+0x448>)
 8000e1a:	edc3 7a00 	vstr	s15, [r3]
    acc_vy += vy;
 8000e1e:	4bc3      	ldr	r3, [pc, #780]	@ (800112c <compute_and_publish_odometry+0x44c>)
 8000e20:	ed93 7a00 	vldr	s14, [r3]
 8000e24:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2c:	4bbf      	ldr	r3, [pc, #764]	@ (800112c <compute_and_publish_odometry+0x44c>)
 8000e2e:	edc3 7a00 	vstr	s15, [r3]
    acc_wz += wz;
 8000e32:	4bbf      	ldr	r3, [pc, #764]	@ (8001130 <compute_and_publish_odometry+0x450>)
 8000e34:	ed93 7a00 	vldr	s14, [r3]
 8000e38:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e40:	4bbb      	ldr	r3, [pc, #748]	@ (8001130 <compute_and_publish_odometry+0x450>)
 8000e42:	edc3 7a00 	vstr	s15, [r3]
    count++;
 8000e46:	4bbb      	ldr	r3, [pc, #748]	@ (8001134 <compute_and_publish_odometry+0x454>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4bb9      	ldr	r3, [pc, #740]	@ (8001134 <compute_and_publish_odometry+0x454>)
 8000e50:	701a      	strb	r2, [r3, #0]

    if (count >= 10)  {
 8000e52:	4bb8      	ldr	r3, [pc, #736]	@ (8001134 <compute_and_publish_odometry+0x454>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b09      	cmp	r3, #9
 8000e58:	f240 8180 	bls.w	800115c <compute_and_publish_odometry+0x47c>

        vx = acc_vx / count;
 8000e5c:	4bb2      	ldr	r3, [pc, #712]	@ (8001128 <compute_and_publish_odometry+0x448>)
 8000e5e:	edd3 6a00 	vldr	s13, [r3]
 8000e62:	4bb4      	ldr	r3, [pc, #720]	@ (8001134 <compute_and_publish_odometry+0x454>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e72:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        vy = acc_vy / count;
 8000e76:	4bad      	ldr	r3, [pc, #692]	@ (800112c <compute_and_publish_odometry+0x44c>)
 8000e78:	edd3 6a00 	vldr	s13, [r3]
 8000e7c:	4bad      	ldr	r3, [pc, #692]	@ (8001134 <compute_and_publish_odometry+0x454>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	ee07 3a90 	vmov	s15, r3
 8000e84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e8c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        wz = acc_wz / count;
 8000e90:	4ba7      	ldr	r3, [pc, #668]	@ (8001130 <compute_and_publish_odometry+0x450>)
 8000e92:	edd3 6a00 	vldr	s13, [r3]
 8000e96:	4ba7      	ldr	r3, [pc, #668]	@ (8001134 <compute_and_publish_odometry+0x454>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ea6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        acc_vx = acc_vy = acc_wz = 0;
 8000eaa:	4ba1      	ldr	r3, [pc, #644]	@ (8001130 <compute_and_publish_odometry+0x450>)
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	4b9f      	ldr	r3, [pc, #636]	@ (8001130 <compute_and_publish_odometry+0x450>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a9d      	ldr	r2, [pc, #628]	@ (800112c <compute_and_publish_odometry+0x44c>)
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b9c      	ldr	r3, [pc, #624]	@ (800112c <compute_and_publish_odometry+0x44c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a9a      	ldr	r2, [pc, #616]	@ (8001128 <compute_and_publish_odometry+0x448>)
 8000ec0:	6013      	str	r3, [r2, #0]
        count = 0;
 8000ec2:	4b9c      	ldr	r3, [pc, #624]	@ (8001134 <compute_and_publish_odometry+0x454>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	701a      	strb	r2, [r3, #0]

        float dt_publish = 0.010f;
 8000ec8:	4b9b      	ldr	r3, [pc, #620]	@ (8001138 <compute_and_publish_odometry+0x458>)
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
        float dx = (vx * cosf(theta) - vy * sinf(theta)) * dt_publish;
 8000ecc:	4b9b      	ldr	r3, [pc, #620]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000ece:	edd3 7a00 	vldr	s15, [r3]
 8000ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed6:	f018 fa8d 	bl	80193f4 <cosf>
 8000eda:	eeb0 7a40 	vmov.f32	s14, s0
 8000ede:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000ee2:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000ee6:	4b95      	ldr	r3, [pc, #596]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000ee8:	edd3 7a00 	vldr	s15, [r3]
 8000eec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef0:	f018 fac4 	bl	801947c <sinf>
 8000ef4:	eeb0 7a40 	vmov.f32	s14, s0
 8000ef8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f00:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000f04:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        float dy = (vx * sinf(theta) + vy * cosf(theta)) * dt_publish;
 8000f10:	4b8a      	ldr	r3, [pc, #552]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000f12:	edd3 7a00 	vldr	s15, [r3]
 8000f16:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1a:	f018 faaf 	bl	801947c <sinf>
 8000f1e:	eeb0 7a40 	vmov.f32	s14, s0
 8000f22:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000f26:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000f2a:	4b84      	ldr	r3, [pc, #528]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000f2c:	edd3 7a00 	vldr	s15, [r3]
 8000f30:	eeb0 0a67 	vmov.f32	s0, s15
 8000f34:	f018 fa5e 	bl	80193f4 <cosf>
 8000f38:	eeb0 7a40 	vmov.f32	s14, s0
 8000f3c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f44:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000f48:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f50:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        float dtheta = wz * dt_publish;
 8000f54:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000f58:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f60:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        x += dx;
 8000f64:	4b76      	ldr	r3, [pc, #472]	@ (8001140 <compute_and_publish_odometry+0x460>)
 8000f66:	ed93 7a00 	vldr	s14, [r3]
 8000f6a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f72:	4b73      	ldr	r3, [pc, #460]	@ (8001140 <compute_and_publish_odometry+0x460>)
 8000f74:	edc3 7a00 	vstr	s15, [r3]
        y += dy;
 8000f78:	4b72      	ldr	r3, [pc, #456]	@ (8001144 <compute_and_publish_odometry+0x464>)
 8000f7a:	ed93 7a00 	vldr	s14, [r3]
 8000f7e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	4b6f      	ldr	r3, [pc, #444]	@ (8001144 <compute_and_publish_odometry+0x464>)
 8000f88:	edc3 7a00 	vstr	s15, [r3]
        theta += dtheta;
 8000f8c:	4b6b      	ldr	r3, [pc, #428]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000f8e:	ed93 7a00 	vldr	s14, [r3]
 8000f92:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9a:	4b68      	ldr	r3, [pc, #416]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000f9c:	edc3 7a00 	vstr	s15, [r3]

        if (theta > M_PI)  theta -= 2.0f * M_PI;
 8000fa0:	4b66      	ldr	r3, [pc, #408]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff faff 	bl	80005a8 <__aeabi_f2d>
 8000faa:	a357      	add	r3, pc, #348	@ (adr r3, 8001108 <compute_and_publish_odometry+0x428>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff fbd0 	bl	8000754 <__aeabi_dcmpgt>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d012      	beq.n	8000fe0 <compute_and_publish_odometry+0x300>
 8000fba:	4b60      	ldr	r3, [pc, #384]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff faf2 	bl	80005a8 <__aeabi_f2d>
 8000fc4:	a352      	add	r3, pc, #328	@ (adr r3, 8001110 <compute_and_publish_odometry+0x430>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff f98d 	bl	80002e8 <__aeabi_dsub>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fbc7 	bl	8000768 <__aeabi_d2f>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a57      	ldr	r2, [pc, #348]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000fde:	6013      	str	r3, [r2, #0]
        if (theta < -M_PI) theta += 2.0f * M_PI;
 8000fe0:	4b56      	ldr	r3, [pc, #344]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fadf 	bl	80005a8 <__aeabi_f2d>
 8000fea:	a34b      	add	r3, pc, #300	@ (adr r3, 8001118 <compute_and_publish_odometry+0x438>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fb92 	bl	8000718 <__aeabi_dcmplt>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d012      	beq.n	8001020 <compute_and_publish_odometry+0x340>
 8000ffa:	4b50      	ldr	r3, [pc, #320]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fad2 	bl	80005a8 <__aeabi_f2d>
 8001004:	a342      	add	r3, pc, #264	@ (adr r3, 8001110 <compute_and_publish_odometry+0x430>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff f96f 	bl	80002ec <__adddf3>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fba7 	bl	8000768 <__aeabi_d2f>
 800101a:	4603      	mov	r3, r0
 800101c:	4a47      	ldr	r2, [pc, #284]	@ (800113c <compute_and_publish_odometry+0x45c>)
 800101e:	6013      	str	r3, [r2, #0]

        odom_msg.pose.pose.position.x = x;
 8001020:	4b47      	ldr	r3, [pc, #284]	@ (8001140 <compute_and_publish_odometry+0x460>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fabf 	bl	80005a8 <__aeabi_f2d>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4946      	ldr	r1, [pc, #280]	@ (8001148 <compute_and_publish_odometry+0x468>)
 8001030:	e9c1 2308 	strd	r2, r3, [r1, #32]
        odom_msg.pose.pose.position.y = y;
 8001034:	4b43      	ldr	r3, [pc, #268]	@ (8001144 <compute_and_publish_odometry+0x464>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fab5 	bl	80005a8 <__aeabi_f2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4941      	ldr	r1, [pc, #260]	@ (8001148 <compute_and_publish_odometry+0x468>)
 8001044:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        odom_msg.pose.pose.orientation.z = sinf(theta / 2.0f);
 8001048:	4b3c      	ldr	r3, [pc, #240]	@ (800113c <compute_and_publish_odometry+0x45c>)
 800104a:	edd3 7a00 	vldr	s15, [r3]
 800104e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001052:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001056:	eeb0 0a47 	vmov.f32	s0, s14
 800105a:	f018 fa0f 	bl	801947c <sinf>
 800105e:	ee10 3a10 	vmov	r3, s0
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff faa0 	bl	80005a8 <__aeabi_f2d>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4936      	ldr	r1, [pc, #216]	@ (8001148 <compute_and_publish_odometry+0x468>)
 800106e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
        odom_msg.pose.pose.orientation.w = cosf(theta / 2.0f);
 8001072:	4b32      	ldr	r3, [pc, #200]	@ (800113c <compute_and_publish_odometry+0x45c>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800107c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001080:	eeb0 0a47 	vmov.f32	s0, s14
 8001084:	f018 f9b6 	bl	80193f4 <cosf>
 8001088:	ee10 3a10 	vmov	r3, s0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa8b 	bl	80005a8 <__aeabi_f2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	492c      	ldr	r1, [pc, #176]	@ (8001148 <compute_and_publish_odometry+0x468>)
 8001098:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

        odom_msg.twist.twist.linear.x = vx;
 800109c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800109e:	f7ff fa83 	bl	80005a8 <__aeabi_f2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4928      	ldr	r1, [pc, #160]	@ (8001148 <compute_and_publish_odometry+0x468>)
 80010a8:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178
        odom_msg.twist.twist.linear.y = vy;
 80010ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80010ae:	f7ff fa7b 	bl	80005a8 <__aeabi_f2d>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4924      	ldr	r1, [pc, #144]	@ (8001148 <compute_and_publish_odometry+0x468>)
 80010b8:	e9c1 2360 	strd	r2, r3, [r1, #384]	@ 0x180
        odom_msg.twist.twist.angular.z = wz;
 80010bc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80010be:	f7ff fa73 	bl	80005a8 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4920      	ldr	r1, [pc, #128]	@ (8001148 <compute_and_publish_odometry+0x468>)
 80010c8:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0

        uint64_t now_ns = rmw_uros_epoch_nanos();
 80010cc:	f009 fcac 	bl	800aa28 <rmw_uros_epoch_nanos>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	e9c7 2308 	strd	r2, r3, [r7, #32]
        odom_msg.header.stamp.sec = (int32_t)(now_ns / 1000000000ULL);
 80010d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010dc:	a310      	add	r3, pc, #64	@ (adr r3, 8001120 <compute_and_publish_odometry+0x440>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fbe1 	bl	80008a8 <__aeabi_uldivmod>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <compute_and_publish_odometry+0x468>)
 80010ec:	601a      	str	r2, [r3, #0]
        odom_msg.header.stamp.nanosec = (uint32_t)(now_ns % 1000000000ULL);
 80010ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010f2:	a30b      	add	r3, pc, #44	@ (adr r3, 8001120 <compute_and_publish_odometry+0x440>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff fbd6 	bl	80008a8 <__aeabi_uldivmod>
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <compute_and_publish_odometry+0x468>)
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	e024      	b.n	800114c <compute_and_publish_odometry+0x46c>
 8001102:	bf00      	nop
 8001104:	f3af 8000 	nop.w
 8001108:	54442d18 	.word	0x54442d18
 800110c:	400921fb 	.word	0x400921fb
 8001110:	54442d18 	.word	0x54442d18
 8001114:	401921fb 	.word	0x401921fb
 8001118:	54442d18 	.word	0x54442d18
 800111c:	c00921fb 	.word	0xc00921fb
 8001120:	3b9aca00 	.word	0x3b9aca00
 8001124:	00000000 	.word	0x00000000
 8001128:	200025f4 	.word	0x200025f4
 800112c:	200025f8 	.word	0x200025f8
 8001130:	200025fc 	.word	0x200025fc
 8001134:	20002600 	.word	0x20002600
 8001138:	3c23d70a 	.word	0x3c23d70a
 800113c:	200025f0 	.word	0x200025f0
 8001140:	200025e8 	.word	0x200025e8
 8001144:	200025ec 	.word	0x200025ec
 8001148:	20002320 	.word	0x20002320

        rcl_ret_t rc1 = rcl_publish(&odom_pub, &odom_msg, NULL);
 800114c:	2200      	movs	r2, #0
 800114e:	4906      	ldr	r1, [pc, #24]	@ (8001168 <compute_and_publish_odometry+0x488>)
 8001150:	4806      	ldr	r0, [pc, #24]	@ (800116c <compute_and_publish_odometry+0x48c>)
 8001152:	f008 fa8d 	bl	8009670 <rcl_publish>
 8001156:	61f8      	str	r0, [r7, #28]
 8001158:	e000      	b.n	800115c <compute_and_publish_odometry+0x47c>
    if (!encUpdateFlag) return;
 800115a:	bf00      	nop
        if (rc1 != RCL_RET_OK){	}
    }
}
 800115c:	3750      	adds	r7, #80	@ 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	ecbd 8b02 	vpop	{d8}
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20002320 	.word	0x20002320
 800116c:	2000231c 	.word	0x2000231c

08001170 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	@ 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800117c:	f006 fc2c 	bl	80079d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001180:	4b5a      	ldr	r3, [pc, #360]	@ (80012ec <pvPortMallocMicroROS+0x17c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001188:	f000 f986 	bl	8001498 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800118c:	4b58      	ldr	r3, [pc, #352]	@ (80012f0 <pvPortMallocMicroROS+0x180>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	f040 8090 	bne.w	80012ba <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01e      	beq.n	80011de <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80011a0:	2208      	movs	r2, #8
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d015      	beq.n	80011de <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f023 0307 	bic.w	r3, r3, #7
 80011b8:	3308      	adds	r3, #8
 80011ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80011c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ca:	f383 8811 	msr	BASEPRI, r3
 80011ce:	f3bf 8f6f 	isb	sy
 80011d2:	f3bf 8f4f 	dsb	sy
 80011d6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	e7fd      	b.n	80011da <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d06a      	beq.n	80012ba <pvPortMallocMicroROS+0x14a>
 80011e4:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <pvPortMallocMicroROS+0x184>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d865      	bhi.n	80012ba <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80011ee:	4b42      	ldr	r3, [pc, #264]	@ (80012f8 <pvPortMallocMicroROS+0x188>)
 80011f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80011f2:	4b41      	ldr	r3, [pc, #260]	@ (80012f8 <pvPortMallocMicroROS+0x188>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80011f8:	e004      	b.n	8001204 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80011fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	429a      	cmp	r2, r3
 800120c:	d903      	bls.n	8001216 <pvPortMallocMicroROS+0xa6>
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f1      	bne.n	80011fa <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001216:	4b35      	ldr	r3, [pc, #212]	@ (80012ec <pvPortMallocMicroROS+0x17c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121c:	429a      	cmp	r2, r3
 800121e:	d04c      	beq.n	80012ba <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2208      	movs	r2, #8
 8001226:	4413      	add	r3, r2
 8001228:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	1ad2      	subs	r2, r2, r3
 800123a:	2308      	movs	r3, #8
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	429a      	cmp	r2, r3
 8001240:	d920      	bls.n	8001284 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00b      	beq.n	800126c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001258:	f383 8811 	msr	BASEPRI, r3
 800125c:	f3bf 8f6f 	isb	sy
 8001260:	f3bf 8f4f 	dsb	sy
 8001264:	613b      	str	r3, [r7, #16]
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	1ad2      	subs	r2, r2, r3
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800127e:	69b8      	ldr	r0, [r7, #24]
 8001280:	f000 f96c 	bl	800155c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001284:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <pvPortMallocMicroROS+0x184>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	4a19      	ldr	r2, [pc, #100]	@ (80012f4 <pvPortMallocMicroROS+0x184>)
 8001290:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <pvPortMallocMicroROS+0x184>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <pvPortMallocMicroROS+0x18c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d203      	bcs.n	80012a6 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <pvPortMallocMicroROS+0x184>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a16      	ldr	r2, [pc, #88]	@ (80012fc <pvPortMallocMicroROS+0x18c>)
 80012a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <pvPortMallocMicroROS+0x180>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80012b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80012ba:	f006 fb9b 	bl	80079f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80012c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012cc:	f383 8811 	msr	BASEPRI, r3
 80012d0:	f3bf 8f6f 	isb	sy
 80012d4:	f3bf 8f4f 	dsb	sy
 80012d8:	60fb      	str	r3, [r7, #12]
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80012e0:	69fb      	ldr	r3, [r7, #28]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3728      	adds	r7, #40	@ 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000620c 	.word	0x2000620c
 80012f0:	20006218 	.word	0x20006218
 80012f4:	20006210 	.word	0x20006210
 80012f8:	20006204 	.word	0x20006204
 80012fc:	20006214 	.word	0x20006214

08001300 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d04a      	beq.n	80013a8 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001312:	2308      	movs	r3, #8
 8001314:	425b      	negs	r3, r3
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <vPortFreeMicroROS+0xb0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10b      	bne.n	8001346 <vPortFreeMicroROS+0x46>
	__asm volatile
 800132e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001332:	f383 8811 	msr	BASEPRI, r3
 8001336:	f3bf 8f6f 	isb	sy
 800133a:	f3bf 8f4f 	dsb	sy
 800133e:	60fb      	str	r3, [r7, #12]
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	e7fd      	b.n	8001342 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <vPortFreeMicroROS+0x66>
	__asm volatile
 800134e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001352:	f383 8811 	msr	BASEPRI, r3
 8001356:	f3bf 8f6f 	isb	sy
 800135a:	f3bf 8f4f 	dsb	sy
 800135e:	60bb      	str	r3, [r7, #8]
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	e7fd      	b.n	8001362 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <vPortFreeMicroROS+0xb0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d019      	beq.n	80013a8 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d115      	bne.n	80013a8 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <vPortFreeMicroROS+0xb0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	43db      	mvns	r3, r3
 8001386:	401a      	ands	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800138c:	f006 fb24 	bl	80079d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <vPortFreeMicroROS+0xb4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4413      	add	r3, r2
 800139a:	4a06      	ldr	r2, [pc, #24]	@ (80013b4 <vPortFreeMicroROS+0xb4>)
 800139c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800139e:	6938      	ldr	r0, [r7, #16]
 80013a0:	f000 f8dc 	bl	800155c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80013a4:	f006 fb26 	bl	80079f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80013a8:	bf00      	nop
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20006218 	.word	0x20006218
 80013b4:	20006210 	.word	0x20006210

080013b8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80013c4:	2308      	movs	r3, #8
 80013c6:	425b      	negs	r3, r3
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	4413      	add	r3, r2
 80013cc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <getBlockSize+0x38>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	43db      	mvns	r3, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

	return count;
 80013e0:	68fb      	ldr	r3, [r7, #12]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20006218 	.word	0x20006218

080013f4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80013fe:	f006 faeb 	bl	80079d8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001402:	6838      	ldr	r0, [r7, #0]
 8001404:	f7ff feb4 	bl	8001170 <pvPortMallocMicroROS>
 8001408:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d017      	beq.n	8001440 <pvPortReallocMicroROS+0x4c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d014      	beq.n	8001440 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ffce 	bl	80013b8 <getBlockSize>
 800141c:	4603      	mov	r3, r0
 800141e:	2208      	movs	r2, #8
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d201      	bcs.n	8001430 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	68b8      	ldr	r0, [r7, #8]
 8001436:	f017 f9a0 	bl	801877a <memcpy>

		vPortFreeMicroROS(pv);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff60 	bl	8001300 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001440:	f006 fad8 	bl	80079f4 <xTaskResumeAll>

	return newmem;
 8001444:	68bb      	ldr	r3, [r7, #8]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001458:	f006 fabe 	bl	80079d8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff fe82 	bl	8001170 <pvPortMallocMicroROS>
 800146c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001472:	e004      	b.n	800147e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	613a      	str	r2, [r7, #16]
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	617a      	str	r2, [r7, #20]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f5      	bne.n	8001474 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001488:	f006 fab4 	bl	80079f4 <xTaskResumeAll>
  	return mem;
 800148c:	68fb      	ldr	r3, [r7, #12]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800149e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80014a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80014a4:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <prvHeapInit+0xac>)
 80014a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00c      	beq.n	80014cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3307      	adds	r3, #7
 80014b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f023 0307 	bic.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001544 <prvHeapInit+0xac>)
 80014c8:	4413      	add	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80014d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001548 <prvHeapInit+0xb0>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <prvHeapInit+0xb0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	4413      	add	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80014e4:	2208      	movs	r2, #8
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f023 0307 	bic.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4a15      	ldr	r2, [pc, #84]	@ (800154c <prvHeapInit+0xb4>)
 80014f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <prvHeapInit+0xb4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001502:	4b12      	ldr	r3, [pc, #72]	@ (800154c <prvHeapInit+0xb4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	1ad2      	subs	r2, r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001518:	4b0c      	ldr	r3, [pc, #48]	@ (800154c <prvHeapInit+0xb4>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <prvHeapInit+0xb8>)
 8001526:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <prvHeapInit+0xbc>)
 800152e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001530:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <prvHeapInit+0xc0>)
 8001532:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	20002604 	.word	0x20002604
 8001548:	20006204 	.word	0x20006204
 800154c:	2000620c 	.word	0x2000620c
 8001550:	20006214 	.word	0x20006214
 8001554:	20006210 	.word	0x20006210
 8001558:	20006218 	.word	0x20006218

0800155c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <prvInsertBlockIntoFreeList+0xac>)
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e002      	b.n	8001570 <prvInsertBlockIntoFreeList+0x14>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d8f7      	bhi.n	800156a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	4413      	add	r3, r2
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d108      	bne.n	800159e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	441a      	add	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	441a      	add	r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d118      	bne.n	80015e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <prvInsertBlockIntoFreeList+0xb0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d00d      	beq.n	80015da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	441a      	add	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e008      	b.n	80015ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <prvInsertBlockIntoFreeList+0xb0>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e003      	b.n	80015ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d002      	beq.n	80015fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20006204 	.word	0x20006204
 800160c:	2000620c 	.word	0x2000620c

08001610 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800161e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001624:	4904      	ldr	r1, [pc, #16]	@ (8001638 <cubemx_transport_open+0x28>)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f003 feb2 	bl	8005390 <HAL_UART_Receive_DMA>
    return true;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2000621c 	.word	0x2000621c

0800163c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800164a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f003 fec4 	bl	80053da <HAL_UART_DMAStop>
    return true;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001670:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b20      	cmp	r3, #32
 800167c:	d11c      	bne.n	80016b8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	b29b      	uxth	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f003 fe06 	bl	8005298 <HAL_UART_Transmit_DMA>
 800168c:	4603      	mov	r3, r0
 800168e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001690:	e002      	b.n	8001698 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001692:	2001      	movs	r0, #1
 8001694:	f005 f95e 	bl	8006954 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001698:	7cfb      	ldrb	r3, [r7, #19]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <cubemx_transport_write+0x4e>
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b20      	cmp	r3, #32
 80016a8:	d1f3      	bne.n	8001692 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 80016aa:	7cfb      	ldrb	r3, [r7, #19]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <cubemx_transport_write+0x58>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	e002      	b.n	80016ba <cubemx_transport_write+0x5e>
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <cubemx_transport_write+0x5e>
    }else{
        return 0;
 80016b8:	2300      	movs	r3, #0
    }
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80016d8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016de:	b672      	cpsid	i
}
 80016e0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80016ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001760 <cubemx_transport_read+0x9c>)
 80016f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016f2:	b662      	cpsie	i
}
 80016f4:	bf00      	nop
        __enable_irq();
        ms_used++;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3301      	adds	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f005 f929 	bl	8006954 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <cubemx_transport_read+0xa0>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b16      	ldr	r3, [pc, #88]	@ (8001760 <cubemx_transport_read+0x9c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d103      	bne.n	8001716 <cubemx_transport_read+0x52>
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	dbe3      	blt.n	80016de <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800171a:	e011      	b.n	8001740 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <cubemx_transport_read+0xa0>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	440b      	add	r3, r1
 8001726:	4910      	ldr	r1, [pc, #64]	@ (8001768 <cubemx_transport_read+0xa4>)
 8001728:	5c8a      	ldrb	r2, [r1, r2]
 800172a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800172c:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <cubemx_transport_read+0xa0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001736:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <cubemx_transport_read+0xa0>)
 8001738:	6013      	str	r3, [r2, #0]
        wrote++;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	3301      	adds	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001740:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <cubemx_transport_read+0xa0>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <cubemx_transport_read+0x9c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d003      	beq.n	8001754 <cubemx_transport_read+0x90>
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	d3e3      	bcc.n	800171c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001754:	69bb      	ldr	r3, [r7, #24]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3720      	adds	r7, #32
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20006a20 	.word	0x20006a20
 8001764:	20006a1c 	.word	0x20006a1c
 8001768:	2000621c 	.word	0x2000621c

0800176c <nexus_bringup>:
void nexus_bringup(void);




void nexus_bringup(void){
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim6);
 8001770:	480b      	ldr	r0, [pc, #44]	@ (80017a0 <nexus_bringup+0x34>)
 8001772:	f003 f861 	bl	8004838 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001776:	213c      	movs	r1, #60	@ 0x3c
 8001778:	480a      	ldr	r0, [pc, #40]	@ (80017a4 <nexus_bringup+0x38>)
 800177a:	f003 fa3b 	bl	8004bf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800177e:	213c      	movs	r1, #60	@ 0x3c
 8001780:	4809      	ldr	r0, [pc, #36]	@ (80017a8 <nexus_bringup+0x3c>)
 8001782:	f003 fa37 	bl	8004bf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001786:	213c      	movs	r1, #60	@ 0x3c
 8001788:	4808      	ldr	r0, [pc, #32]	@ (80017ac <nexus_bringup+0x40>)
 800178a:	f003 fa33 	bl	8004bf4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800178e:	213c      	movs	r1, #60	@ 0x3c
 8001790:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <nexus_bringup+0x44>)
 8001792:	f003 fa2f 	bl	8004bf4 <HAL_TIM_Encoder_Start>

	init_motors();
 8001796:	f7ff fa1d 	bl	8000bd4 <init_motors>

}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20006b44 	.word	0x20006b44
 80017a4:	20006a24 	.word	0x20006a24
 80017a8:	20006ab4 	.word	0x20006ab4
 80017ac:	20006afc 	.word	0x20006afc
 80017b0:	20006b8c 	.word	0x20006b8c

080017b4 <main>:


int main(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  HAL_Init();
 80017b8:	f001 fadc 	bl	8002d74 <HAL_Init>
  SystemClock_Config();
 80017bc:	f000 f824 	bl	8001808 <SystemClock_Config>
  MX_GPIO_Init();
 80017c0:	f000 fa86 	bl	8001cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80017c4:	f000 fa46 	bl	8001c54 <MX_DMA_Init>
  MX_TIM1_Init();
 80017c8:	f000 f88c 	bl	80018e4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80017cc:	f000 f8e2 	bl	8001994 <MX_TIM3_Init>
  MX_TIM4_Init();
 80017d0:	f000 f934 	bl	8001a3c <MX_TIM4_Init>
  MX_TIM8_Init();
 80017d4:	f000 f9bc 	bl	8001b50 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80017d8:	f000 fa12 	bl	8001c00 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80017dc:	f000 f982 	bl	8001ae4 <MX_TIM6_Init>

  osKernelInitialize();
 80017e0:	f004 ffdc 	bl	800679c <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017e4:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <main+0x48>)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4805      	ldr	r0, [pc, #20]	@ (8001800 <main+0x4c>)
 80017ea:	f005 f821 	bl	8006830 <osThreadNew>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <main+0x50>)
 80017f2:	6013      	str	r3, [r2, #0]

  osKernelStart();
 80017f4:	f004 fff6 	bl	80067e4 <osKernelStart>

  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <main+0x44>
 80017fc:	08019f58 	.word	0x08019f58
 8001800:	08001e19 	.word	0x08001e19
 8001804:	20006cdc 	.word	0x20006cdc

08001808 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	@ 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	2234      	movs	r2, #52	@ 0x34
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f016 fed4 	bl	80185c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <SystemClock_Config+0xd4>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	4a29      	ldr	r2, [pc, #164]	@ (80018dc <SystemClock_Config+0xd4>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	@ 0x40
 800183c:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <SystemClock_Config+0xd4>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001848:	2300      	movs	r3, #0
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	4b24      	ldr	r3, [pc, #144]	@ (80018e0 <SystemClock_Config+0xd8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001854:	4a22      	ldr	r2, [pc, #136]	@ (80018e0 <SystemClock_Config+0xd8>)
 8001856:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <SystemClock_Config+0xd8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001864:	603b      	str	r3, [r7, #0]
 8001866:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001868:	2302      	movs	r3, #2
 800186a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186c:	2301      	movs	r3, #1
 800186e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001870:	2310      	movs	r3, #16
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001874:	2302      	movs	r3, #2
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001878:	2300      	movs	r3, #0
 800187a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800187c:	2310      	movs	r3, #16
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001880:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001884:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001886:	2304      	movs	r3, #4
 8001888:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800188a:	2302      	movs	r3, #2
 800188c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800188e:	2302      	movs	r3, #2
 8001890:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fce0 	bl	800425c <HAL_RCC_OscConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80018a2:	f000 fbef 	bl	8002084 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a6:	230f      	movs	r3, #15
 80018a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018aa:	2302      	movs	r3, #2
 80018ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	2102      	movs	r1, #2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 f94e 	bl	8003b64 <HAL_RCC_ClockConfig>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80018ce:	f000 fbd9 	bl	8002084 <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3750      	adds	r7, #80	@ 0x50
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40007000 	.word	0x40007000

080018e4 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	@ 0x30
 80018e8:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ea:	f107 030c 	add.w	r3, r7, #12
 80018ee:	2224      	movs	r2, #36	@ 0x24
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f016 fe66 	bl	80185c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <MX_TIM1_Init+0xa8>)
 8001902:	4a23      	ldr	r2, [pc, #140]	@ (8001990 <MX_TIM1_Init+0xac>)
 8001904:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001906:	4b21      	ldr	r3, [pc, #132]	@ (800198c <MX_TIM1_Init+0xa8>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <MX_TIM1_Init+0xa8>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001912:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <MX_TIM1_Init+0xa8>)
 8001914:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001918:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <MX_TIM1_Init+0xa8>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001920:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <MX_TIM1_Init+0xa8>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b19      	ldr	r3, [pc, #100]	@ (800198c <MX_TIM1_Init+0xa8>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800192c:	2303      	movs	r3, #3
 800192e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001934:	2301      	movs	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001944:	2301      	movs	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	4619      	mov	r1, r3
 8001956:	480d      	ldr	r0, [pc, #52]	@ (800198c <MX_TIM1_Init+0xa8>)
 8001958:	f003 f8a6 	bl	8004aa8 <HAL_TIM_Encoder_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001962:	f000 fb8f 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4619      	mov	r1, r3
 8001972:	4806      	ldr	r0, [pc, #24]	@ (800198c <MX_TIM1_Init+0xa8>)
 8001974:	f003 fbb0 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800197e:	f000 fb81 	bl	8002084 <Error_Handler>
  }

}
 8001982:	bf00      	nop
 8001984:	3730      	adds	r7, #48	@ 0x30
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20006a24 	.word	0x20006a24
 8001990:	40010000 	.word	0x40010000

08001994 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	@ 0x30
 8001998:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	2224      	movs	r2, #36	@ 0x24
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f016 fe0e 	bl	80185c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80019b0:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <MX_TIM3_Init+0xa0>)
 80019b2:	4a21      	ldr	r2, [pc, #132]	@ (8001a38 <MX_TIM3_Init+0xa4>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <MX_TIM3_Init+0xa0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <MX_TIM3_Init+0xa0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <MX_TIM3_Init+0xa0>)
 80019c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <MX_TIM3_Init+0xa0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <MX_TIM3_Init+0xa0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019d6:	2303      	movs	r3, #3
 80019d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ee:	2301      	movs	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4619      	mov	r1, r3
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <MX_TIM3_Init+0xa0>)
 8001a02:	f003 f851 	bl	8004aa8 <HAL_TIM_Encoder_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a0c:	f000 fb3a 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_TIM3_Init+0xa0>)
 8001a1e:	f003 fb5b 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a28:	f000 fb2c 	bl	8002084 <Error_Handler>
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3730      	adds	r7, #48	@ 0x30
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20006ab4 	.word	0x20006ab4
 8001a38:	40000400 	.word	0x40000400

08001a3c <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	@ 0x30
 8001a40:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	2224      	movs	r2, #36	@ 0x24
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f016 fdba 	bl	80185c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001a58:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <MX_TIM4_Init+0xa0>)
 8001a5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <MX_TIM4_Init+0xa4>)
 8001a5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <MX_TIM4_Init+0xa0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <MX_TIM4_Init+0xa0>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001adc <MX_TIM4_Init+0xa0>)
 8001a6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <MX_TIM4_Init+0xa0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a78:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <MX_TIM4_Init+0xa0>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a96:	2301      	movs	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	@ (8001adc <MX_TIM4_Init+0xa0>)
 8001aaa:	f002 fffd 	bl	8004aa8 <HAL_TIM_Encoder_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ab4:	f000 fae6 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	@ (8001adc <MX_TIM4_Init+0xa0>)
 8001ac6:	f003 fb07 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ad0:	f000 fad8 	bl	8002084 <Error_Handler>
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	3730      	adds	r7, #48	@ 0x30
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20006afc 	.word	0x20006afc
 8001ae0:	40000800 	.word	0x40000800

08001ae4 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0


  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aea:	463b      	mov	r3, r7
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]


  htim6.Instance = TIM6;
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <MX_TIM6_Init+0x64>)
 8001af4:	4a15      	ldr	r2, [pc, #84]	@ (8001b4c <MX_TIM6_Init+0x68>)
 8001af6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <MX_TIM6_Init+0x64>)
 8001afa:	2253      	movs	r2, #83	@ 0x53
 8001afc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afe:	4b12      	ldr	r3, [pc, #72]	@ (8001b48 <MX_TIM6_Init+0x64>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001b04:	4b10      	ldr	r3, [pc, #64]	@ (8001b48 <MX_TIM6_Init+0x64>)
 8001b06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b0a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <MX_TIM6_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b12:	480d      	ldr	r0, [pc, #52]	@ (8001b48 <MX_TIM6_Init+0x64>)
 8001b14:	f002 fe40 	bl	8004798 <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001b1e:	f000 fab1 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	@ (8001b48 <MX_TIM6_Init+0x64>)
 8001b30:	f003 fad2 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001b3a:	f000 faa3 	bl	8002084 <Error_Handler>
  }

}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20006b44 	.word	0x20006b44
 8001b4c:	40001000 	.word	0x40001000

08001b50 <MX_TIM8_Init>:

static void MX_TIM8_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08c      	sub	sp, #48	@ 0x30
 8001b54:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	2224      	movs	r2, #36	@ 0x24
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f016 fd30 	bl	80185c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 8001b6c:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <MX_TIM8_Init+0xa8>)
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <MX_TIM8_Init+0xac>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b72:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <MX_TIM8_Init+0xa8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <MX_TIM8_Init+0xa8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <MX_TIM8_Init+0xa8>)
 8001b80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_TIM8_Init+0xa8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf8 <MX_TIM8_Init+0xa8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b92:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <MX_TIM8_Init+0xa8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <MX_TIM8_Init+0xa8>)
 8001bc4:	f002 ff70 	bl	8004aa8 <HAL_TIM_Encoder_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001bce:	f000 fa59 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <MX_TIM8_Init+0xa8>)
 8001be0:	f003 fa7a 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001bea:	f000 fa4b 	bl	8002084 <Error_Handler>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3730      	adds	r7, #48	@ 0x30
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20006b8c 	.word	0x20006b8c
 8001bfc:	40010400 	.word	0x40010400

08001c00 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <MX_USART2_UART_Init+0x50>)
 8001c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c0c:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c24:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c26:	220c      	movs	r2, #12
 8001c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <MX_USART2_UART_Init+0x4c>)
 8001c38:	f003 fade 	bl	80051f8 <HAL_UART_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c42:	f000 fa1f 	bl	8002084 <Error_Handler>
  }


}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20006bd4 	.word	0x20006bd4
 8001c50:	40004400 	.word	0x40004400

08001c54 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0

  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <MX_DMA_Init+0x78>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	4a1a      	ldr	r2, [pc, #104]	@ (8001ccc <MX_DMA_Init+0x78>)
 8001c64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6a:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <MX_DMA_Init+0x78>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <MX_DMA_Init+0x78>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a13      	ldr	r2, [pc, #76]	@ (8001ccc <MX_DMA_Init+0x78>)
 8001c80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <MX_DMA_Init+0x78>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]


  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2105      	movs	r1, #5
 8001c96:	2010      	movs	r0, #16
 8001c98:	f001 f98a 	bl	8002fb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c9c:	2010      	movs	r0, #16
 8001c9e:	f001 f9a3 	bl	8002fe8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	2011      	movs	r0, #17
 8001ca8:	f001 f982 	bl	8002fb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001cac:	2011      	movs	r0, #17
 8001cae:	f001 f99b 	bl	8002fe8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2105      	movs	r1, #5
 8001cb6:	2038      	movs	r0, #56	@ 0x38
 8001cb8:	f001 f97a 	bl	8002fb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001cbc:	2038      	movs	r0, #56	@ 0x38
 8001cbe:	f001 f993 	bl	8002fe8 <HAL_NVIC_EnableIRQ>

}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800

08001cd0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	@ 0x28
 8001cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	4b3f      	ldr	r3, [pc, #252]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a3e      	ldr	r2, [pc, #248]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b38      	ldr	r3, [pc, #224]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a37      	ldr	r2, [pc, #220]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b35      	ldr	r3, [pc, #212]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	4b31      	ldr	r3, [pc, #196]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a30      	ldr	r2, [pc, #192]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	4a29      	ldr	r2, [pc, #164]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001d44:	f043 0308 	orr.w	r3, r3, #8
 8001d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4a:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <MX_GPIO_Init+0x118>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]


  HAL_GPIO_WritePin(GPIOC, FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 8001d56:	2200      	movs	r2, #0
 8001d58:	f640 413f 	movw	r1, #3135	@ 0xc3f
 8001d5c:	4823      	ldr	r0, [pc, #140]	@ (8001dec <MX_GPIO_Init+0x11c>)
 8001d5e:	f001 fee7 	bl	8003b30 <HAL_GPIO_WritePin>
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RL_VDD_GPO_Pin|FL_VDD_GPO_Pin, GPIO_PIN_RESET);


  HAL_GPIO_WritePin(GPIOB, RR_INA_GPO_Pin|FR_INB_GPO_Pin, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001d68:	4821      	ldr	r0, [pc, #132]	@ (8001df0 <MX_GPIO_Init+0x120>)
 8001d6a:	f001 fee1 	bl	8003b30 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOC, RR_VDD_GPO_Pin|FR_VDD_GPO_Pin, GPIO_PIN_SET);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001d74:	481d      	ldr	r0, [pc, #116]	@ (8001dec <MX_GPIO_Init+0x11c>)
 8001d76:	f001 fedb 	bl	8003b30 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d80:	481c      	ldr	r0, [pc, #112]	@ (8001df4 <MX_GPIO_Init+0x124>)
 8001d82:	f001 fed5 	bl	8003b30 <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 8001d86:	f640 733f 	movw	r3, #3903	@ 0xf3f
 8001d8a:	617b      	str	r3, [r7, #20]
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RR_VDD_GPO_Pin|FR_VDD_GPO_Pin
                          |RL_VDD_GPO_Pin|FL_VDD_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4813      	ldr	r0, [pc, #76]	@ (8001dec <MX_GPIO_Init+0x11c>)
 8001da0:	f001 fd32 	bl	8003808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RR_INA_GPO_Pin|FR_INB_GPO_Pin;
 8001da4:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <MX_GPIO_Init+0x120>)
 8001dbe:	f001 fd23 	bl	8003808 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FR_INA_GPO_Pin;
 8001dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FR_INA_GPO_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4806      	ldr	r0, [pc, #24]	@ (8001df4 <MX_GPIO_Init+0x124>)
 8001ddc:	f001 fd14 	bl	8003808 <HAL_GPIO_Init>

}
 8001de0:	bf00      	nop
 8001de2:	3728      	adds	r7, #40	@ 0x28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020000 	.word	0x40020000

08001df8 <odom_timer_cb>:

void odom_timer_cb(rcl_timer_t * timer, int64_t last_call_time)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	e9c7 2300 	strd	r2, r3, [r7]
  (void)last_call_time;
  if (timer == NULL) return;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <odom_timer_cb+0x18>
  compute_and_publish_odometry();
 8001e0a:	f7fe ff69 	bl	8000ce0 <compute_and_publish_odometry>
 8001e0e:	e000      	b.n	8001e12 <odom_timer_cb+0x1a>
  if (timer == NULL) return;
 8001e10:	bf00      	nop
}
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <StartDefaultTask>:



void StartDefaultTask(void *argument)
{
 8001e18:	b5b0      	push	{r4, r5, r7, lr}
 8001e1a:	b096      	sub	sp, #88	@ 0x58
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	61f8      	str	r0, [r7, #28]

	  nexus_bringup();
 8001e20:	f7ff fca4 	bl	800176c <nexus_bringup>
	  for (int i = 0; i < 20; ++i) {
 8001e24:	2300      	movs	r3, #0
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e28:	e005      	b.n	8001e36 <StartDefaultTask+0x1e>
	  	    osDelay(100);
 8001e2a:	2064      	movs	r0, #100	@ 0x64
 8001e2c:	f004 fd92 	bl	8006954 <osDelay>
	  for (int i = 0; i < 20; ++i) {
 8001e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e32:	3301      	adds	r3, #1
 8001e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e38:	2b13      	cmp	r3, #19
 8001e3a:	ddf6      	ble.n	8001e2a <StartDefaultTask+0x12>
	  }

	  rmw_uros_set_custom_transport(
 8001e3c:	4b44      	ldr	r3, [pc, #272]	@ (8001f50 <StartDefaultTask+0x138>)
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	4b44      	ldr	r3, [pc, #272]	@ (8001f54 <StartDefaultTask+0x13c>)
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <StartDefaultTask+0x140>)
 8001e46:	4a45      	ldr	r2, [pc, #276]	@ (8001f5c <StartDefaultTask+0x144>)
 8001e48:	4945      	ldr	r1, [pc, #276]	@ (8001f60 <StartDefaultTask+0x148>)
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f008 fbd4 	bl	800a5f8 <rmw_uros_set_custom_transport>
	      true, (void *)&huart2,
	      cubemx_transport_open, cubemx_transport_close,
	      cubemx_transport_write, cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001e50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e54:	4618      	mov	r0, r3
 8001e56:	f008 faf5 	bl	800a444 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate      = microros_allocate;
 8001e5a:	4b42      	ldr	r3, [pc, #264]	@ (8001f64 <StartDefaultTask+0x14c>)
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  freeRTOS_allocator.deallocate    = microros_deallocate;
 8001e5e:	4b42      	ldr	r3, [pc, #264]	@ (8001f68 <StartDefaultTask+0x150>)
 8001e60:	633b      	str	r3, [r7, #48]	@ 0x30
	  freeRTOS_allocator.reallocate    = microros_reallocate;
 8001e62:	4b42      	ldr	r3, [pc, #264]	@ (8001f6c <StartDefaultTask+0x154>)
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001e66:	4b42      	ldr	r3, [pc, #264]	@ (8001f70 <StartDefaultTask+0x158>)
 8001e68:	63bb      	str	r3, [r7, #56]	@ 0x38
	  rcl_ret_t rc1 =  rcutils_set_default_allocator(&freeRTOS_allocator);
 8001e6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f008 fb04 	bl	800a47c <rcutils_set_default_allocator>
 8001e74:	4603      	mov	r3, r0
 8001e76:	647b      	str	r3, [r7, #68]	@ 0x44
	  if (rc1 != RCL_RET_OK) { /* Error handle */ }

	  for (int i = 0; i < 50; ++i) {
 8001e78:	2300      	movs	r3, #0
 8001e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e7c:	e00c      	b.n	8001e98 <StartDefaultTask+0x80>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8001e7e:	2101      	movs	r1, #1
 8001e80:	2064      	movs	r0, #100	@ 0x64
 8001e82:	f008 fbcf 	bl	800a624 <rmw_uros_ping_agent>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <StartDefaultTask+0x88>
	    osDelay(100);
 8001e8c:	2064      	movs	r0, #100	@ 0x64
 8001e8e:	f004 fd61 	bl	8006954 <osDelay>
	  for (int i = 0; i < 50; ++i) {
 8001e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e94:	3301      	adds	r3, #1
 8001e96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e9a:	2b31      	cmp	r3, #49	@ 0x31
 8001e9c:	ddef      	ble.n	8001e7e <StartDefaultTask+0x66>
 8001e9e:	e000      	b.n	8001ea2 <StartDefaultTask+0x8a>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8001ea0:	bf00      	nop
	  }

	  allocator = rcl_get_default_allocator();
 8001ea2:	4c34      	ldr	r4, [pc, #208]	@ (8001f74 <StartDefaultTask+0x15c>)
 8001ea4:	463b      	mov	r3, r7
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f008 fada 	bl	800a460 <rcutils_get_default_allocator>
 8001eac:	4625      	mov	r5, r4
 8001eae:	463c      	mov	r4, r7
 8001eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	602b      	str	r3, [r5, #0]
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f74 <StartDefaultTask+0x15c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	482e      	ldr	r0, [pc, #184]	@ (8001f78 <StartDefaultTask+0x160>)
 8001ec0:	f008 f9cc 	bl	800a25c <rclc_support_init>

	  rcl_node_t node_base_controller;
	  rclc_node_init_default(&node_base_controller, "base_controller", "", &support);
 8001ec4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f78 <StartDefaultTask+0x160>)
 8001eca:	4a2c      	ldr	r2, [pc, #176]	@ (8001f7c <StartDefaultTask+0x164>)
 8001ecc:	492c      	ldr	r1, [pc, #176]	@ (8001f80 <StartDefaultTask+0x168>)
 8001ece:	f008 fa0f 	bl	800a2f0 <rclc_node_init_default>


	  (void) rmw_uros_sync_session(1000);
 8001ed2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ed6:	f008 fdb5 	bl	800aa44 <rmw_uros_sync_session>

	  rcl_ret_t rc7 = rclc_publisher_init_default(
 8001eda:	f007 fa05 	bl	80092e8 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001ee4:	4b27      	ldr	r3, [pc, #156]	@ (8001f84 <StartDefaultTask+0x16c>)
 8001ee6:	4828      	ldr	r0, [pc, #160]	@ (8001f88 <StartDefaultTask+0x170>)
 8001ee8:	f008 fa3e 	bl	800a368 <rclc_publisher_init_default>
 8001eec:	6438      	str	r0, [r7, #64]	@ 0x40
	      &odom_pub,
	      &node_base_controller,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
	      "odom");
	  if (rc7 != RCL_RET_OK) {   }
	  rosidl_runtime_c__String__init(&odom_msg.header.frame_id);
 8001eee:	4827      	ldr	r0, [pc, #156]	@ (8001f8c <StartDefaultTask+0x174>)
 8001ef0:	f009 f938 	bl	800b164 <rosidl_runtime_c__String__init>
	  rosidl_runtime_c__String__assign(&odom_msg.header.frame_id, "odom");
 8001ef4:	4923      	ldr	r1, [pc, #140]	@ (8001f84 <StartDefaultTask+0x16c>)
 8001ef6:	4825      	ldr	r0, [pc, #148]	@ (8001f8c <StartDefaultTask+0x174>)
 8001ef8:	f009 f996 	bl	800b228 <rosidl_runtime_c__String__assign>
	  odom_msg.header.stamp.sec = 0;
 8001efc:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <StartDefaultTask+0x178>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
	  odom_msg.header.stamp.nanosec = 0;
 8001f02:	4b23      	ldr	r3, [pc, #140]	@ (8001f90 <StartDefaultTask+0x178>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]

	  rclc_executor_init(&executor, &support.context, 4, &allocator);
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <StartDefaultTask+0x15c>)
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	491a      	ldr	r1, [pc, #104]	@ (8001f78 <StartDefaultTask+0x160>)
 8001f0e:	4821      	ldr	r0, [pc, #132]	@ (8001f94 <StartDefaultTask+0x17c>)
 8001f10:	f007 ff5e 	bl	8009dd0 <rclc_executor_init>

	  rcl_timer_t timer_odom;
	  rclc_timer_init_default2(&timer_odom, &support, RCL_MS_TO_NS(10), odom_timer_cb, true);
 8001f14:	f107 0020 	add.w	r0, r7, #32
 8001f18:	2301      	movs	r3, #1
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <StartDefaultTask+0x180>)
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4a1e      	ldr	r2, [pc, #120]	@ (8001f9c <StartDefaultTask+0x184>)
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	4914      	ldr	r1, [pc, #80]	@ (8001f78 <StartDefaultTask+0x160>)
 8001f28:	f008 fa52 	bl	800a3d0 <rclc_timer_init_default2>
	  rclc_executor_add_timer(&executor, &timer_odom);
 8001f2c:	f107 0320 	add.w	r3, r7, #32
 8001f30:	4619      	mov	r1, r3
 8001f32:	4818      	ldr	r0, [pc, #96]	@ (8001f94 <StartDefaultTask+0x17c>)
 8001f34:	f007 ffb8 	bl	8009ea8 <rclc_executor_add_timer>

	  for (;;) {
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(5));
 8001f38:	a303      	add	r3, pc, #12	@ (adr r3, 8001f48 <StartDefaultTask+0x130>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	4815      	ldr	r0, [pc, #84]	@ (8001f94 <StartDefaultTask+0x17c>)
 8001f40:	f008 f826 	bl	8009f90 <rclc_executor_spin_some>
 8001f44:	e7f8      	b.n	8001f38 <StartDefaultTask+0x120>
 8001f46:	bf00      	nop
 8001f48:	004c4b40 	.word	0x004c4b40
 8001f4c:	00000000 	.word	0x00000000
 8001f50:	080016c5 	.word	0x080016c5
 8001f54:	0800165d 	.word	0x0800165d
 8001f58:	0800163d 	.word	0x0800163d
 8001f5c:	08001611 	.word	0x08001611
 8001f60:	20006bd4 	.word	0x20006bd4
 8001f64:	08002091 	.word	0x08002091
 8001f68:	080020d5 	.word	0x080020d5
 8001f6c:	0800210d 	.word	0x0800210d
 8001f70:	08002179 	.word	0x08002179
 8001f74:	20006ce0 	.word	0x20006ce0
 8001f78:	20006cf4 	.word	0x20006cf4
 8001f7c:	08019f04 	.word	0x08019f04
 8001f80:	08019f08 	.word	0x08019f08
 8001f84:	08019f18 	.word	0x08019f18
 8001f88:	2000231c 	.word	0x2000231c
 8001f8c:	20002328 	.word	0x20002328
 8001f90:	20002320 	.word	0x20002320
 8001f94:	20006d28 	.word	0x20006d28
 8001f98:	08001df9 	.word	0x08001df9
 8001f9c:	00989680 	.word	0x00989680

08001fa0 <HAL_TIM_PeriodElapsedCallback>:
	  }

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a2b      	ldr	r2, [pc, #172]	@ (800205c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d148      	bne.n	8002044 <HAL_TIM_PeriodElapsedCallback+0xa4>
		currCount[0] = __HAL_TIM_GET_COUNTER(&htim4);
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002060 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	4b2a      	ldr	r3, [pc, #168]	@ (8002064 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fbc:	801a      	strh	r2, [r3, #0]
		currCount[1] = __HAL_TIM_GET_COUNTER(&htim1);
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002068 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	4b27      	ldr	r3, [pc, #156]	@ (8002064 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fc8:	805a      	strh	r2, [r3, #2]
		currCount[2] = __HAL_TIM_GET_COUNTER(&htim3);
 8001fca:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	b21a      	sxth	r2, r3
 8001fd2:	4b24      	ldr	r3, [pc, #144]	@ (8002064 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fd4:	809a      	strh	r2, [r3, #4]
		currCount[3] = __HAL_TIM_GET_COUNTER(&htim8);
 8001fd6:	4b26      	ldr	r3, [pc, #152]	@ (8002070 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fe0:	80da      	strh	r2, [r3, #6]

		for (int i=0; i<4; i++) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	e026      	b.n	8002036 <HAL_TIM_PeriodElapsedCallback+0x96>

		  deltaEncoder[i] = (int16_t)(currCount[i] - pastCount[i]);
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8002064 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	491f      	ldr	r1, [pc, #124]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	b29b      	uxth	r3, r3
 8002004:	b219      	sxth	r1, r3
 8002006:	4a1c      	ldr	r2, [pc, #112]	@ (8002078 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  if (deltaEncoder[i] > 32767)       deltaEncoder[i] -= 65536;
 800200e:	4a1a      	ldr	r2, [pc, #104]	@ (8002078 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		  else if (deltaEncoder[i] < -32768) deltaEncoder[i] += 65536;
 8002016:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]

		  pastCount[i] = currCount[i];
 800201e:	4a11      	ldr	r2, [pc, #68]	@ (8002064 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002026:	b219      	sxth	r1, r3
 8002028:	4a12      	ldr	r2, [pc, #72]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<4; i++) {
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3301      	adds	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b03      	cmp	r3, #3
 800203a:	ddd5      	ble.n	8001fe8 <HAL_TIM_PeriodElapsedCallback+0x48>

	  }
		encUpdateFlag = 1;
 800203c:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
	else if (htim->Instance == TIM7)
  {
    HAL_IncTick();
  }

}
 8002042:	e006      	b.n	8002052 <HAL_TIM_PeriodElapsedCallback+0xb2>
	else if (htim->Instance == TIM7)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0d      	ldr	r2, [pc, #52]	@ (8002080 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_TIM_PeriodElapsedCallback+0xb2>
    HAL_IncTick();
 800204e:	f000 feb3 	bl	8002db8 <HAL_IncTick>
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40001000 	.word	0x40001000
 8002060:	20006afc 	.word	0x20006afc
 8002064:	20006dc0 	.word	0x20006dc0
 8002068:	20006a24 	.word	0x20006a24
 800206c:	20006ab4 	.word	0x20006ab4
 8002070:	20006b8c 	.word	0x20006b8c
 8002074:	20006dc8 	.word	0x20006dc8
 8002078:	20006db8 	.word	0x20006db8
 800207c:	20006dd0 	.word	0x20006dd0
 8002080:	40001400 	.word	0x40001400

08002084 <Error_Handler>:


void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002088:	b672      	cpsid	i
}
 800208a:	bf00      	nop

  __disable_irq();
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <Error_Handler+0x8>

08002090 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800209a:	4b0c      	ldr	r3, [pc, #48]	@ (80020cc <microros_allocate+0x3c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b09      	ldr	r3, [pc, #36]	@ (80020cc <microros_allocate+0x3c>)
 80020a8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80020aa:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <microros_allocate+0x40>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <microros_allocate+0x40>)
 80020b8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff f858 	bl	8001170 <pvPortMallocMicroROS>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20006dd4 	.word	0x20006dd4
 80020d0:	20006dd8 	.word	0x20006dd8

080020d4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00c      	beq.n	80020fe <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff f967 	bl	80013b8 <getBlockSize>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4a06      	ldr	r2, [pc, #24]	@ (8002108 <microros_deallocate+0x34>)
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <microros_deallocate+0x34>)
 80020f6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff f901 	bl	8001300 <vPortFreeMicroROS>
  }
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20006dd8 	.word	0x20006dd8

0800210c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <microros_reallocate+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4413      	add	r3, r2
 8002122:	461a      	mov	r2, r3
 8002124:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <microros_reallocate+0x64>)
 8002126:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <microros_reallocate+0x68>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	4413      	add	r3, r2
 8002132:	461a      	mov	r2, r3
 8002134:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <microros_reallocate+0x68>)
 8002136:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d104      	bne.n	8002148 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800213e:	68b8      	ldr	r0, [r7, #8]
 8002140:	f7ff f816 	bl	8001170 <pvPortMallocMicroROS>
 8002144:	4603      	mov	r3, r0
 8002146:	e00e      	b.n	8002166 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff f935 	bl	80013b8 <getBlockSize>
 800214e:	4603      	mov	r3, r0
 8002150:	4a08      	ldr	r2, [pc, #32]	@ (8002174 <microros_reallocate+0x68>)
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	461a      	mov	r2, r3
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <microros_reallocate+0x68>)
 800215a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f7ff f948 	bl	80013f4 <pvPortReallocMicroROS>
 8002164:	4603      	mov	r3, r0
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20006dd4 	.word	0x20006dd4
 8002174:	20006dd8 	.word	0x20006dd8

08002178 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	fb02 f303 	mul.w	r3, r2, r3
 800218c:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <microros_zero_allocate+0x48>)
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	4413      	add	r3, r2
 8002192:	461a      	mov	r2, r3
 8002194:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <microros_zero_allocate+0x48>)
 8002196:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	4a08      	ldr	r2, [pc, #32]	@ (80021c4 <microros_zero_allocate+0x4c>)
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <microros_zero_allocate+0x4c>)
 80021aa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff f94d 	bl	800144e <pvPortCallocMicroROS>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20006dd4 	.word	0x20006dd4
 80021c4:	20006dd8 	.word	0x20006dd8

080021c8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80021c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80021da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021de:	a320      	add	r3, pc, #128	@ (adr r3, 8002260 <UTILS_NanosecondsToTimespec+0x98>)
 80021e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e4:	f7fe fb10 	bl	8000808 <__aeabi_ldivmod>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80021f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021f6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002260 <UTILS_NanosecondsToTimespec+0x98>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fe fb04 	bl	8000808 <__aeabi_ldivmod>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	da20      	bge.n	800224e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a11      	ldr	r2, [pc, #68]	@ (8002258 <UTILS_NanosecondsToTimespec+0x90>)
 8002212:	fb82 1203 	smull	r1, r2, r2, r3
 8002216:	1712      	asrs	r2, r2, #28
 8002218:	17db      	asrs	r3, r3, #31
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	3301      	adds	r3, #1
 800221e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002226:	6979      	ldr	r1, [r7, #20]
 8002228:	17c8      	asrs	r0, r1, #31
 800222a:	460c      	mov	r4, r1
 800222c:	4605      	mov	r5, r0
 800222e:	ebb2 0804 	subs.w	r8, r2, r4
 8002232:	eb63 0905 	sbc.w	r9, r3, r5
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	4906      	ldr	r1, [pc, #24]	@ (800225c <UTILS_NanosecondsToTimespec+0x94>)
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	441a      	add	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	609a      	str	r2, [r3, #8]
    }
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002258:	44b82fa1 	.word	0x44b82fa1
 800225c:	3b9aca00 	.word	0x3b9aca00
 8002260:	3b9aca00 	.word	0x3b9aca00
 8002264:	00000000 	.word	0x00000000

08002268 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800226c:	b08e      	sub	sp, #56	@ 0x38
 800226e:	af00      	add	r7, sp, #0
 8002270:	6278      	str	r0, [r7, #36]	@ 0x24
 8002272:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002274:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002278:	2300      	movs	r3, #0
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800228a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800228e:	4618      	mov	r0, r3
 8002290:	f005 fe2c 	bl	8007eec <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002296:	17da      	asrs	r2, r3, #31
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	61fa      	str	r2, [r7, #28]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	69b9      	ldr	r1, [r7, #24]
 80022a6:	000b      	movs	r3, r1
 80022a8:	2200      	movs	r2, #0
 80022aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80022ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b0:	2200      	movs	r2, #0
 80022b2:	461c      	mov	r4, r3
 80022b4:	4615      	mov	r5, r2
 80022b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022ba:	1911      	adds	r1, r2, r4
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	416b      	adcs	r3, r5
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80022c6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80022ca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	f04f 0400 	mov.w	r4, #0
 80022d6:	f04f 0500 	mov.w	r5, #0
 80022da:	015d      	lsls	r5, r3, #5
 80022dc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80022e0:	0154      	lsls	r4, r2, #5
 80022e2:	4622      	mov	r2, r4
 80022e4:	462b      	mov	r3, r5
 80022e6:	ebb2 0800 	subs.w	r8, r2, r0
 80022ea:	eb63 0901 	sbc.w	r9, r3, r1
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80022fa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80022fe:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002302:	4690      	mov	r8, r2
 8002304:	4699      	mov	r9, r3
 8002306:	eb18 0a00 	adds.w	sl, r8, r0
 800230a:	eb49 0b01 	adc.w	fp, r9, r1
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800231a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800231e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002322:	ebb2 040a 	subs.w	r4, r2, sl
 8002326:	603c      	str	r4, [r7, #0]
 8002328:	eb63 030b 	sbc.w	r3, r3, fp
 800232c:	607b      	str	r3, [r7, #4]
 800232e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002332:	4623      	mov	r3, r4
 8002334:	181b      	adds	r3, r3, r0
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	462b      	mov	r3, r5
 800233a:	eb41 0303 	adc.w	r3, r1, r3
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	6a3a      	ldr	r2, [r7, #32]
 8002342:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002346:	f7ff ff3f 	bl	80021c8 <UTILS_NanosecondsToTimespec>

    return 0;
 800234a:	2300      	movs	r3, #0
 800234c:	4618      	mov	r0, r3
 800234e:	3738      	adds	r7, #56	@ 0x38
 8002350:	46bd      	mov	sp, r7
 8002352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002358 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_MspInit+0x54>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <HAL_MspInit+0x54>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800236c:	6453      	str	r3, [r2, #68]	@ 0x44
 800236e:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <HAL_MspInit+0x54>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <HAL_MspInit+0x54>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <HAL_MspInit+0x54>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002388:	6413      	str	r3, [r2, #64]	@ 0x40
 800238a:	4b08      	ldr	r3, [pc, #32]	@ (80023ac <HAL_MspInit+0x54>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002392:	603b      	str	r3, [r7, #0]
 8002394:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	210f      	movs	r1, #15
 800239a:	f06f 0001 	mvn.w	r0, #1
 800239e:	f000 fe07 	bl	8002fb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800

080023b0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b090      	sub	sp, #64	@ 0x40
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a8c      	ldr	r2, [pc, #560]	@ (8002600 <HAL_TIM_Encoder_MspInit+0x250>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d14d      	bne.n	800246e <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	4a8a      	ldr	r2, [pc, #552]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023e2:	4b88      	ldr	r3, [pc, #544]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023f2:	4b84      	ldr	r3, [pc, #528]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	4a83      	ldr	r2, [pc, #524]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fe:	4b81      	ldr	r3, [pc, #516]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FL_ENC_B_T1C1_Pin|FL_ENC_A_T1C2_Pin;
 800240a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800240e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800241c:	2301      	movs	r3, #1
 800241e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002424:	4619      	mov	r1, r3
 8002426:	4878      	ldr	r0, [pc, #480]	@ (8002608 <HAL_TIM_Encoder_MspInit+0x258>)
 8002428:	f001 f9ee 	bl	8003808 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2105      	movs	r1, #5
 8002430:	2018      	movs	r0, #24
 8002432:	f000 fdbd 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002436:	2018      	movs	r0, #24
 8002438:	f000 fdd6 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800243c:	2200      	movs	r2, #0
 800243e:	2105      	movs	r1, #5
 8002440:	2019      	movs	r0, #25
 8002442:	f000 fdb5 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002446:	2019      	movs	r0, #25
 8002448:	f000 fdce 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2105      	movs	r1, #5
 8002450:	201a      	movs	r0, #26
 8002452:	f000 fdad 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002456:	201a      	movs	r0, #26
 8002458:	f000 fdc6 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	2105      	movs	r1, #5
 8002460:	201b      	movs	r0, #27
 8002462:	f000 fda5 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002466:	201b      	movs	r0, #27
 8002468:	f000 fdbe 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800246c:	e0c4      	b.n	80025f8 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM3)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a66      	ldr	r2, [pc, #408]	@ (800260c <HAL_TIM_Encoder_MspInit+0x25c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d134      	bne.n	80024e2 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002478:	2300      	movs	r3, #0
 800247a:	623b      	str	r3, [r7, #32]
 800247c:	4b61      	ldr	r3, [pc, #388]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	4a60      	ldr	r2, [pc, #384]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	6413      	str	r3, [r2, #64]	@ 0x40
 8002488:	4b5e      	ldr	r3, [pc, #376]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	623b      	str	r3, [r7, #32]
 8002492:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	4b5a      	ldr	r3, [pc, #360]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	4a59      	ldr	r2, [pc, #356]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a4:	4b57      	ldr	r3, [pc, #348]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FR_ENC_A_T3C1_Pin|FR_ENC_B_T3C2_Pin;
 80024b0:	23c0      	movs	r3, #192	@ 0xc0
 80024b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024c0:	2302      	movs	r3, #2
 80024c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024c8:	4619      	mov	r1, r3
 80024ca:	484f      	ldr	r0, [pc, #316]	@ (8002608 <HAL_TIM_Encoder_MspInit+0x258>)
 80024cc:	f001 f99c 	bl	8003808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2105      	movs	r1, #5
 80024d4:	201d      	movs	r0, #29
 80024d6:	f000 fd6b 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024da:	201d      	movs	r0, #29
 80024dc:	f000 fd84 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
}
 80024e0:	e08a      	b.n	80025f8 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM4)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002610 <HAL_TIM_Encoder_MspInit+0x260>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d134      	bne.n	8002556 <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
 80024f0:	4b44      	ldr	r3, [pc, #272]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	4a43      	ldr	r2, [pc, #268]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80024fc:	4b41      	ldr	r3, [pc, #260]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	4a3c      	ldr	r2, [pc, #240]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 8002512:	f043 0302 	orr.w	r3, r3, #2
 8002516:	6313      	str	r3, [r2, #48]	@ 0x30
 8002518:	4b3a      	ldr	r3, [pc, #232]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RL_ENC_B_T4C1_Pin|RL_ENC_A_T4C2_Pin;
 8002524:	23c0      	movs	r3, #192	@ 0xc0
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002530:	2300      	movs	r3, #0
 8002532:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002534:	2302      	movs	r3, #2
 8002536:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002538:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800253c:	4619      	mov	r1, r3
 800253e:	4835      	ldr	r0, [pc, #212]	@ (8002614 <HAL_TIM_Encoder_MspInit+0x264>)
 8002540:	f001 f962 	bl	8003808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002544:	2200      	movs	r2, #0
 8002546:	2105      	movs	r1, #5
 8002548:	201e      	movs	r0, #30
 800254a:	f000 fd31 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800254e:	201e      	movs	r0, #30
 8002550:	f000 fd4a 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
}
 8002554:	e050      	b.n	80025f8 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2f      	ldr	r2, [pc, #188]	@ (8002618 <HAL_TIM_Encoder_MspInit+0x268>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d14b      	bne.n	80025f8 <HAL_TIM_Encoder_MspInit+0x248>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	4b27      	ldr	r3, [pc, #156]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 8002566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002568:	4a26      	ldr	r2, [pc, #152]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002570:	4b24      	ldr	r3, [pc, #144]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	4a1f      	ldr	r2, [pc, #124]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	6313      	str	r3, [r2, #48]	@ 0x30
 800258c:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HAL_TIM_Encoder_MspInit+0x254>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RR_ENC_A_T8C1_Pin|RR_ENC_B_T8C2_Pin;
 8002598:	23c0      	movs	r3, #192	@ 0xc0
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025a8:	2303      	movs	r3, #3
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025b0:	4619      	mov	r1, r3
 80025b2:	481a      	ldr	r0, [pc, #104]	@ (800261c <HAL_TIM_Encoder_MspInit+0x26c>)
 80025b4:	f001 f928 	bl	8003808 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2105      	movs	r1, #5
 80025bc:	202b      	movs	r0, #43	@ 0x2b
 80025be:	f000 fcf7 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80025c2:	202b      	movs	r0, #43	@ 0x2b
 80025c4:	f000 fd10 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2105      	movs	r1, #5
 80025cc:	202c      	movs	r0, #44	@ 0x2c
 80025ce:	f000 fcef 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80025d2:	202c      	movs	r0, #44	@ 0x2c
 80025d4:	f000 fd08 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80025d8:	2200      	movs	r2, #0
 80025da:	2105      	movs	r1, #5
 80025dc:	202d      	movs	r0, #45	@ 0x2d
 80025de:	f000 fce7 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80025e2:	202d      	movs	r0, #45	@ 0x2d
 80025e4:	f000 fd00 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2105      	movs	r1, #5
 80025ec:	202e      	movs	r0, #46	@ 0x2e
 80025ee:	f000 fcdf 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80025f2:	202e      	movs	r0, #46	@ 0x2e
 80025f4:	f000 fcf8 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
}
 80025f8:	bf00      	nop
 80025fa:	3740      	adds	r7, #64	@ 0x40
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40010000 	.word	0x40010000
 8002604:	40023800 	.word	0x40023800
 8002608:	40020000 	.word	0x40020000
 800260c:	40000400 	.word	0x40000400
 8002610:	40000800 	.word	0x40000800
 8002614:	40020400 	.word	0x40020400
 8002618:	40010400 	.word	0x40010400
 800261c:	40020800 	.word	0x40020800

08002620 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002630:	d116      	bne.n	8002660 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	4a19      	ldr	r2, [pc, #100]	@ (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6413      	str	r3, [r2, #64]	@ 0x40
 8002642:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2105      	movs	r1, #5
 8002652:	201c      	movs	r0, #28
 8002654:	f000 fcac 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002658:	201c      	movs	r0, #28
 800265a:	f000 fcc5 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 800265e:	e01a      	b.n	8002696 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0f      	ldr	r2, [pc, #60]	@ (80026a4 <HAL_TIM_Base_MspInit+0x84>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d115      	bne.n	8002696 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a0b      	ldr	r2, [pc, #44]	@ (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 8002674:	f043 0310 	orr.w	r3, r3, #16
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <HAL_TIM_Base_MspInit+0x80>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2105      	movs	r1, #5
 800268a:	2036      	movs	r0, #54	@ 0x36
 800268c:	f000 fc90 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002690:	2036      	movs	r0, #54	@ 0x36
 8002692:	f000 fca9 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40001000 	.word	0x40001000

080026a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	@ 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a79      	ldr	r2, [pc, #484]	@ (80028ac <HAL_UART_MspInit+0x204>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d153      	bne.n	8002772 <HAL_UART_MspInit+0xca>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	4b78      	ldr	r3, [pc, #480]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	4a77      	ldr	r2, [pc, #476]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 80026d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026da:	4b75      	ldr	r3, [pc, #468]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	4b71      	ldr	r3, [pc, #452]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	4a70      	ldr	r2, [pc, #448]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f6:	4b6e      	ldr	r3, [pc, #440]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b6a      	ldr	r3, [pc, #424]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	4a69      	ldr	r2, [pc, #420]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 800270c:	f043 0308 	orr.w	r3, r3, #8
 8002710:	6313      	str	r3, [r2, #48]	@ 0x30
 8002712:	4b67      	ldr	r3, [pc, #412]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800271e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002730:	2308      	movs	r3, #8
 8002732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002734:	f107 031c 	add.w	r3, r7, #28
 8002738:	4619      	mov	r1, r3
 800273a:	485e      	ldr	r0, [pc, #376]	@ (80028b4 <HAL_UART_MspInit+0x20c>)
 800273c:	f001 f864 	bl	8003808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002740:	2304      	movs	r3, #4
 8002742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002750:	2308      	movs	r3, #8
 8002752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4619      	mov	r1, r3
 800275a:	4857      	ldr	r0, [pc, #348]	@ (80028b8 <HAL_UART_MspInit+0x210>)
 800275c:	f001 f854 	bl	8003808 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2105      	movs	r1, #5
 8002764:	2035      	movs	r0, #53	@ 0x35
 8002766:	f000 fc23 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800276a:	2035      	movs	r0, #53	@ 0x35
 800276c:	f000 fc3c 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002770:	e098      	b.n	80028a4 <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a51      	ldr	r2, [pc, #324]	@ (80028bc <HAL_UART_MspInit+0x214>)
 8002778:	4293      	cmp	r3, r2
 800277a:	f040 8093 	bne.w	80028a4 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b4b      	ldr	r3, [pc, #300]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	4a4a      	ldr	r2, [pc, #296]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 8002788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800278c:	6413      	str	r3, [r2, #64]	@ 0x40
 800278e:	4b48      	ldr	r3, [pc, #288]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	4b44      	ldr	r3, [pc, #272]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a43      	ldr	r2, [pc, #268]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b41      	ldr	r3, [pc, #260]	@ (80028b0 <HAL_UART_MspInit+0x208>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027b6:	230c      	movs	r3, #12
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027c6:	2307      	movs	r3, #7
 80027c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4619      	mov	r1, r3
 80027d0:	483b      	ldr	r0, [pc, #236]	@ (80028c0 <HAL_UART_MspInit+0x218>)
 80027d2:	f001 f819 	bl	8003808 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80027d6:	4b3b      	ldr	r3, [pc, #236]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 80027d8:	4a3b      	ldr	r2, [pc, #236]	@ (80028c8 <HAL_UART_MspInit+0x220>)
 80027da:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80027dc:	4b39      	ldr	r3, [pc, #228]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 80027de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e4:	4b37      	ldr	r3, [pc, #220]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ea:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027f0:	4b34      	ldr	r3, [pc, #208]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 80027f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027f8:	4b32      	ldr	r3, [pc, #200]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027fe:	4b31      	ldr	r3, [pc, #196]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002804:	4b2f      	ldr	r3, [pc, #188]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 8002806:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800280a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800280c:	4b2d      	ldr	r3, [pc, #180]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 800280e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002812:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002814:	4b2b      	ldr	r3, [pc, #172]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 8002816:	2200      	movs	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800281a:	482a      	ldr	r0, [pc, #168]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 800281c:	f000 fbf2 	bl	8003004 <HAL_DMA_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8002826:	f7ff fc2d 	bl	8002084 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a25      	ldr	r2, [pc, #148]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 800282e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002830:	4a24      	ldr	r2, [pc, #144]	@ (80028c4 <HAL_UART_MspInit+0x21c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002836:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <HAL_UART_MspInit+0x224>)
 8002838:	4a25      	ldr	r2, [pc, #148]	@ (80028d0 <HAL_UART_MspInit+0x228>)
 800283a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800283c:	4b23      	ldr	r3, [pc, #140]	@ (80028cc <HAL_UART_MspInit+0x224>)
 800283e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002842:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002844:	4b21      	ldr	r3, [pc, #132]	@ (80028cc <HAL_UART_MspInit+0x224>)
 8002846:	2240      	movs	r2, #64	@ 0x40
 8002848:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284a:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_UART_MspInit+0x224>)
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002850:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <HAL_UART_MspInit+0x224>)
 8002852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002856:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002858:	4b1c      	ldr	r3, [pc, #112]	@ (80028cc <HAL_UART_MspInit+0x224>)
 800285a:	2200      	movs	r2, #0
 800285c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_UART_MspInit+0x224>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002864:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <HAL_UART_MspInit+0x224>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800286a:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <HAL_UART_MspInit+0x224>)
 800286c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002870:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002872:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <HAL_UART_MspInit+0x224>)
 8002874:	2200      	movs	r2, #0
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002878:	4814      	ldr	r0, [pc, #80]	@ (80028cc <HAL_UART_MspInit+0x224>)
 800287a:	f000 fbc3 	bl	8003004 <HAL_DMA_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8002884:	f7ff fbfe 	bl	8002084 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a10      	ldr	r2, [pc, #64]	@ (80028cc <HAL_UART_MspInit+0x224>)
 800288c:	639a      	str	r2, [r3, #56]	@ 0x38
 800288e:	4a0f      	ldr	r2, [pc, #60]	@ (80028cc <HAL_UART_MspInit+0x224>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2105      	movs	r1, #5
 8002898:	2026      	movs	r0, #38	@ 0x26
 800289a:	f000 fb89 	bl	8002fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800289e:	2026      	movs	r0, #38	@ 0x26
 80028a0:	f000 fba2 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
}
 80028a4:	bf00      	nop
 80028a6:	3730      	adds	r7, #48	@ 0x30
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40005000 	.word	0x40005000
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020800 	.word	0x40020800
 80028b8:	40020c00 	.word	0x40020c00
 80028bc:	40004400 	.word	0x40004400
 80028c0:	40020000 	.word	0x40020000
 80028c4:	20006c1c 	.word	0x20006c1c
 80028c8:	40026088 	.word	0x40026088
 80028cc:	20006c7c 	.word	0x20006c7c
 80028d0:	400260a0 	.word	0x400260a0

080028d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08e      	sub	sp, #56	@ 0x38
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	4b33      	ldr	r3, [pc, #204]	@ (80029b8 <HAL_InitTick+0xe4>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ec:	4a32      	ldr	r2, [pc, #200]	@ (80029b8 <HAL_InitTick+0xe4>)
 80028ee:	f043 0320 	orr.w	r3, r3, #32
 80028f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f4:	4b30      	ldr	r3, [pc, #192]	@ (80029b8 <HAL_InitTick+0xe4>)
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002900:	f107 0210 	add.w	r2, r7, #16
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f001 fa44 	bl	8003d98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800291a:	f001 fa15 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 800291e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002920:	e004      	b.n	800292c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002922:	f001 fa11 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 8002926:	4603      	mov	r3, r0
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800292c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800292e:	4a23      	ldr	r2, [pc, #140]	@ (80029bc <HAL_InitTick+0xe8>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	0c9b      	lsrs	r3, r3, #18
 8002936:	3b01      	subs	r3, #1
 8002938:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800293a:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <HAL_InitTick+0xec>)
 800293c:	4a21      	ldr	r2, [pc, #132]	@ (80029c4 <HAL_InitTick+0xf0>)
 800293e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002940:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <HAL_InitTick+0xec>)
 8002942:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002946:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002948:	4a1d      	ldr	r2, [pc, #116]	@ (80029c0 <HAL_InitTick+0xec>)
 800294a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800294e:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <HAL_InitTick+0xec>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002954:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <HAL_InitTick+0xec>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295a:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_InitTick+0xec>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002960:	4817      	ldr	r0, [pc, #92]	@ (80029c0 <HAL_InitTick+0xec>)
 8002962:	f001 ff19 	bl	8004798 <HAL_TIM_Base_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800296c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002970:	2b00      	cmp	r3, #0
 8002972:	d11b      	bne.n	80029ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002974:	4812      	ldr	r0, [pc, #72]	@ (80029c0 <HAL_InitTick+0xec>)
 8002976:	f001 ff5f 	bl	8004838 <HAL_TIM_Base_Start_IT>
 800297a:	4603      	mov	r3, r0
 800297c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002980:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002984:	2b00      	cmp	r3, #0
 8002986:	d111      	bne.n	80029ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002988:	2037      	movs	r0, #55	@ 0x37
 800298a:	f000 fb2d 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b0f      	cmp	r3, #15
 8002992:	d808      	bhi.n	80029a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002994:	2200      	movs	r2, #0
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	2037      	movs	r0, #55	@ 0x37
 800299a:	f000 fb09 	bl	8002fb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <HAL_InitTick+0xf4>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e002      	b.n	80029ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80029ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3738      	adds	r7, #56	@ 0x38
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	431bde83 	.word	0x431bde83
 80029c0:	20006ddc 	.word	0x20006ddc
 80029c4:	40001400 	.word	0x40001400
 80029c8:	20000008 	.word	0x20000008

080029cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <NMI_Handler+0x4>

080029d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <HardFault_Handler+0x4>

080029dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <MemManage_Handler+0x4>

080029e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <BusFault_Handler+0x4>

080029ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <UsageFault_Handler+0x4>

080029f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a08:	4802      	ldr	r0, [pc, #8]	@ (8002a14 <DMA1_Stream5_IRQHandler+0x10>)
 8002a0a:	f000 fc93 	bl	8003334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20006c1c 	.word	0x20006c1c

08002a18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a1c:	4802      	ldr	r0, [pc, #8]	@ (8002a28 <DMA1_Stream6_IRQHandler+0x10>)
 8002a1e:	f000 fc89 	bl	8003334 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20006c7c 	.word	0x20006c7c

08002a2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_IRQn 0 */
  //HAL_ADC_IRQHandler(&hadc1);
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a40:	4802      	ldr	r0, [pc, #8]	@ (8002a4c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002a42:	f002 f965 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20006a24 	.word	0x20006a24

08002a50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a54:	4802      	ldr	r0, [pc, #8]	@ (8002a60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a56:	f002 f95b 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20006a24 	.word	0x20006a24

08002a64 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a68:	4802      	ldr	r0, [pc, #8]	@ (8002a74 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002a6a:	f002 f951 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20006a24 	.word	0x20006a24

08002a78 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a7c:	4802      	ldr	r0, [pc, #8]	@ (8002a88 <TIM1_CC_IRQHandler+0x10>)
 8002a7e:	f002 f947 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20006a24 	.word	0x20006a24

08002a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002aa0:	4802      	ldr	r0, [pc, #8]	@ (8002aac <TIM3_IRQHandler+0x10>)
 8002aa2:	f002 f935 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20006ab4 	.word	0x20006ab4

08002ab0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ab4:	4802      	ldr	r0, [pc, #8]	@ (8002ac0 <TIM4_IRQHandler+0x10>)
 8002ab6:	f002 f92b 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20006afc 	.word	0x20006afc

08002ac4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ac8:	4802      	ldr	r0, [pc, #8]	@ (8002ad4 <USART2_IRQHandler+0x10>)
 8002aca:	f002 fd05 	bl	80054d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20006bd4 	.word	0x20006bd4

08002ad8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002adc:	4802      	ldr	r0, [pc, #8]	@ (8002ae8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002ade:	f002 f917 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20006b8c 	.word	0x20006b8c

08002aec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002af0:	4802      	ldr	r0, [pc, #8]	@ (8002afc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002af2:	f002 f90d 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20006b8c 	.word	0x20006b8c

08002b00 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002b04:	4802      	ldr	r0, [pc, #8]	@ (8002b10 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002b06:	f002 f903 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20006b8c 	.word	0x20006b8c

08002b14 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002b18:	4802      	ldr	r0, [pc, #8]	@ (8002b24 <TIM8_CC_IRQHandler+0x10>)
 8002b1a:	f002 f8f9 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20006b8c 	.word	0x20006b8c

08002b28 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_IRQn 0 */
  //HAL_UART_IRQHandler(&huart5);
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b3c:	4802      	ldr	r0, [pc, #8]	@ (8002b48 <TIM6_DAC_IRQHandler+0x10>)
 8002b3e:	f002 f8e7 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20006b44 	.word	0x20006b44

08002b4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b50:	4802      	ldr	r0, [pc, #8]	@ (8002b5c <TIM7_IRQHandler+0x10>)
 8002b52:	f002 f8dd 	bl	8004d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20006ddc 	.word	0x20006ddc

08002b60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  return 1;
 8002b72:	2301      	movs	r3, #1
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_kill>:

int _kill(int pid, int sig)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b88:	f015 fdc2 	bl	8018710 <__errno>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2216      	movs	r2, #22
 8002b90:	601a      	str	r2, [r3, #0]
  return -1;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <_exit>:

void _exit (int status)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ba6:	f04f 31ff 	mov.w	r1, #4294967295
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7ff ffe7 	bl	8002b7e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <_exit+0x12>

08002bb4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e00a      	b.n	8002bdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bc6:	f3af 8000 	nop.w
 8002bca:	4601      	mov	r1, r0
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	60ba      	str	r2, [r7, #8]
 8002bd2:	b2ca      	uxtb	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbf0      	blt.n	8002bc6 <_read+0x12>
  }

  return len;
 8002be4:	687b      	ldr	r3, [r7, #4]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e009      	b.n	8002c14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	60ba      	str	r2, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3301      	adds	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	dbf1      	blt.n	8002c00 <_write+0x12>
  }
  return len;
 8002c1c:	687b      	ldr	r3, [r7, #4]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_close>:

int _close(int file)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c4e:	605a      	str	r2, [r3, #4]
  return 0;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <_isatty>:

int _isatty(int file)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c66:	2301      	movs	r3, #1
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c98:	4a14      	ldr	r2, [pc, #80]	@ (8002cec <_sbrk+0x5c>)
 8002c9a:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <_sbrk+0x60>)
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca4:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d102      	bne.n	8002cb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cac:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <_sbrk+0x64>)
 8002cae:	4a12      	ldr	r2, [pc, #72]	@ (8002cf8 <_sbrk+0x68>)
 8002cb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb2:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <_sbrk+0x64>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d207      	bcs.n	8002cd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc0:	f015 fd26 	bl	8018710 <__errno>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	e009      	b.n	8002ce4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd0:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <_sbrk+0x64>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	4a05      	ldr	r2, [pc, #20]	@ (8002cf4 <_sbrk+0x64>)
 8002ce0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20020000 	.word	0x20020000
 8002cf0:	00000400 	.word	0x00000400
 8002cf4:	20006e28 	.word	0x20006e28
 8002cf8:	20010768 	.word	0x20010768

08002cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <SystemInit+0x20>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d06:	4a05      	ldr	r2, [pc, #20]	@ (8002d1c <SystemInit+0x20>)
 8002d08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d24:	f7ff ffea 	bl	8002cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d28:	480c      	ldr	r0, [pc, #48]	@ (8002d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d2a:	490d      	ldr	r1, [pc, #52]	@ (8002d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d40:	4c0a      	ldr	r4, [pc, #40]	@ (8002d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f015 fce5 	bl	801871c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d52:	f7fe fd2f 	bl	80017b4 <main>
  bx  lr    
 8002d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d60:	20002300 	.word	0x20002300
  ldr r2, =_sidata
 8002d64:	0801b848 	.word	0x0801b848
  ldr r2, =_sbss
 8002d68:	20002300 	.word	0x20002300
  ldr r4, =_ebss
 8002d6c:	20010768 	.word	0x20010768

08002d70 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d70:	e7fe      	b.n	8002d70 <CAN1_RX0_IRQHandler>
	...

08002d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d78:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <HAL_Init+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002db4 <HAL_Init+0x40>)
 8002d7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	@ (8002db4 <HAL_Init+0x40>)
 8002d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d90:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <HAL_Init+0x40>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a07      	ldr	r2, [pc, #28]	@ (8002db4 <HAL_Init+0x40>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	f000 f8fc 	bl	8002f9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da2:	200f      	movs	r0, #15
 8002da4:	f7ff fd96 	bl	80028d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da8:	f7ff fad6 	bl	8002358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023c00 	.word	0x40023c00

08002db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_IncTick+0x20>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <HAL_IncTick+0x24>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	4a04      	ldr	r2, [pc, #16]	@ (8002ddc <HAL_IncTick+0x24>)
 8002dca:	6013      	str	r3, [r2, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	2000000c 	.word	0x2000000c
 8002ddc:	20006e2c 	.word	0x20006e2c

08002de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return uwTick;
 8002de4:	4b03      	ldr	r3, [pc, #12]	@ (8002df4 <HAL_GetTick+0x14>)
 8002de6:	681b      	ldr	r3, [r3, #0]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20006e2c 	.word	0x20006e2c

08002df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff ffee 	bl	8002de0 <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e10:	d005      	beq.n	8002e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e12:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <HAL_Delay+0x44>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e1e:	bf00      	nop
 8002e20:	f7ff ffde 	bl	8002de0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d8f7      	bhi.n	8002e20 <HAL_Delay+0x28>
  {
  }
}
 8002e30:	bf00      	nop
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	2000000c 	.word	0x2000000c

08002e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e50:	4b0c      	ldr	r3, [pc, #48]	@ (8002e84 <__NVIC_SetPriorityGrouping+0x44>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e72:	4a04      	ldr	r2, [pc, #16]	@ (8002e84 <__NVIC_SetPriorityGrouping+0x44>)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	60d3      	str	r3, [r2, #12]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000ed00 	.word	0xe000ed00

08002e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	0a1b      	lsrs	r3, r3, #8
 8002e92:	f003 0307 	and.w	r3, r3, #7
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000ed00 	.word	0xe000ed00

08002ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	db0b      	blt.n	8002ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	f003 021f 	and.w	r2, r3, #31
 8002ebc:	4907      	ldr	r1, [pc, #28]	@ (8002edc <__NVIC_EnableIRQ+0x38>)
 8002ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	2001      	movs	r0, #1
 8002ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	e000e100 	.word	0xe000e100

08002ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	6039      	str	r1, [r7, #0]
 8002eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	db0a      	blt.n	8002f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	490c      	ldr	r1, [pc, #48]	@ (8002f2c <__NVIC_SetPriority+0x4c>)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	0112      	lsls	r2, r2, #4
 8002f00:	b2d2      	uxtb	r2, r2
 8002f02:	440b      	add	r3, r1
 8002f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f08:	e00a      	b.n	8002f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	4908      	ldr	r1, [pc, #32]	@ (8002f30 <__NVIC_SetPriority+0x50>)
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	3b04      	subs	r3, #4
 8002f18:	0112      	lsls	r2, r2, #4
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	761a      	strb	r2, [r3, #24]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000e100 	.word	0xe000e100
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	@ 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f1c3 0307 	rsb	r3, r3, #7
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	bf28      	it	cs
 8002f52:	2304      	movcs	r3, #4
 8002f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d902      	bls.n	8002f64 <NVIC_EncodePriority+0x30>
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3b03      	subs	r3, #3
 8002f62:	e000      	b.n	8002f66 <NVIC_EncodePriority+0x32>
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f68:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	401a      	ands	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa01 f303 	lsl.w	r3, r1, r3
 8002f86:	43d9      	mvns	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	4313      	orrs	r3, r2
         );
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3724      	adds	r7, #36	@ 0x24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ff4c 	bl	8002e40 <__NVIC_SetPriorityGrouping>
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc2:	f7ff ff61 	bl	8002e88 <__NVIC_GetPriorityGrouping>
 8002fc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	6978      	ldr	r0, [r7, #20]
 8002fce:	f7ff ffb1 	bl	8002f34 <NVIC_EncodePriority>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff80 	bl	8002ee0 <__NVIC_SetPriority>
}
 8002fe0:	bf00      	nop
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff54 	bl	8002ea4 <__NVIC_EnableIRQ>
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003010:	f7ff fee6 	bl	8002de0 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e099      	b.n	8003154 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003040:	e00f      	b.n	8003062 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003042:	f7ff fecd 	bl	8002de0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b05      	cmp	r3, #5
 800304e:	d908      	bls.n	8003062 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2203      	movs	r2, #3
 800305a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e078      	b.n	8003154 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e8      	bne.n	8003042 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4b38      	ldr	r3, [pc, #224]	@ (800315c <HAL_DMA_Init+0x158>)
 800307c:	4013      	ands	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800308e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800309a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d107      	bne.n	80030cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	4313      	orrs	r3, r2
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f023 0307 	bic.w	r3, r3, #7
 80030e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d117      	bne.n	8003126 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fb01 	bl	8003710 <DMA_CheckFifoParam>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2240      	movs	r2, #64	@ 0x40
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003122:	2301      	movs	r3, #1
 8003124:	e016      	b.n	8003154 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fab8 	bl	80036a4 <DMA_CalcBaseAndBitshift>
 8003134:	4603      	mov	r3, r0
 8003136:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313c:	223f      	movs	r2, #63	@ 0x3f
 800313e:	409a      	lsls	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	f010803f 	.word	0xf010803f

08003160 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003176:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_DMA_Start_IT+0x26>
 8003182:	2302      	movs	r3, #2
 8003184:	e040      	b.n	8003208 <HAL_DMA_Start_IT+0xa8>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d12f      	bne.n	80031fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa4a 	bl	8003648 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b8:	223f      	movs	r2, #63	@ 0x3f
 80031ba:	409a      	lsls	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0216 	orr.w	r2, r2, #22
 80031ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0208 	orr.w	r2, r2, #8
 80031e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0201 	orr.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e005      	b.n	8003206 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003202:	2302      	movs	r3, #2
 8003204:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800321e:	f7ff fddf 	bl	8002de0 <HAL_GetTick>
 8003222:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d008      	beq.n	8003242 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2280      	movs	r2, #128	@ 0x80
 8003234:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e052      	b.n	80032e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0216 	bic.w	r2, r2, #22
 8003250:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003260:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_DMA_Abort+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003292:	e013      	b.n	80032bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003294:	f7ff fda4 	bl	8002de0 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b05      	cmp	r3, #5
 80032a0:	d90c      	bls.n	80032bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2203      	movs	r2, #3
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e015      	b.n	80032e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e4      	bne.n	8003294 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ce:	223f      	movs	r2, #63	@ 0x3f
 80032d0:	409a      	lsls	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d004      	beq.n	800330e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2280      	movs	r2, #128	@ 0x80
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00c      	b.n	8003328 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2205      	movs	r2, #5
 8003312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003340:	4b8e      	ldr	r3, [pc, #568]	@ (800357c <HAL_DMA_IRQHandler+0x248>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a8e      	ldr	r2, [pc, #568]	@ (8003580 <HAL_DMA_IRQHandler+0x24c>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0a9b      	lsrs	r3, r3, #10
 800334c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	2208      	movs	r2, #8
 8003360:	409a      	lsls	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d013      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0204 	bic.w	r2, r2, #4
 8003386:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	2208      	movs	r2, #8
 800338e:	409a      	lsls	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a4:	2201      	movs	r2, #1
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033da:	2204      	movs	r2, #4
 80033dc:	409a      	lsls	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d012      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00b      	beq.n	800340c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f8:	2204      	movs	r2, #4
 80033fa:	409a      	lsls	r2, r3
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003404:	f043 0204 	orr.w	r2, r3, #4
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003410:	2210      	movs	r2, #16
 8003412:	409a      	lsls	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d043      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d03c      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342e:	2210      	movs	r2, #16
 8003430:	409a      	lsls	r2, r3
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d018      	beq.n	8003476 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	2b00      	cmp	r3, #0
 8003458:	d024      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	4798      	blx	r3
 8003462:	e01f      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01b      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e016      	b.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d107      	bne.n	8003494 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0208 	bic.w	r2, r2, #8
 8003492:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	2220      	movs	r2, #32
 80034aa:	409a      	lsls	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 808f 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 8087 	beq.w	80035d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ca:	2220      	movs	r2, #32
 80034cc:	409a      	lsls	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d136      	bne.n	800354c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0216 	bic.w	r2, r2, #22
 80034ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d103      	bne.n	800350e <HAL_DMA_IRQHandler+0x1da>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0208 	bic.w	r2, r2, #8
 800351c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	223f      	movs	r2, #63	@ 0x3f
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353e:	2b00      	cmp	r3, #0
 8003540:	d07e      	beq.n	8003640 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
        }
        return;
 800354a:	e079      	b.n	8003640 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d01d      	beq.n	8003596 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10d      	bne.n	8003584 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356c:	2b00      	cmp	r3, #0
 800356e:	d031      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	4798      	blx	r3
 8003578:	e02c      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
 800357a:	bf00      	nop
 800357c:	20000004 	.word	0x20000004
 8003580:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
 8003594:	e01e      	b.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10f      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0210 	bic.w	r2, r2, #16
 80035b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d032      	beq.n	8003642 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2205      	movs	r2, #5
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0201 	bic.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3301      	adds	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	d307      	bcc.n	800361c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f2      	bne.n	8003600 <HAL_DMA_IRQHandler+0x2cc>
 800361a:	e000      	b.n	800361e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800361c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
 800363e:	e000      	b.n	8003642 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003640:	bf00      	nop
    }
  }
}
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003664:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b40      	cmp	r3, #64	@ 0x40
 8003674:	d108      	bne.n	8003688 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003686:	e007      	b.n	8003698 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	60da      	str	r2, [r3, #12]
}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3b10      	subs	r3, #16
 80036b4:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <DMA_CalcBaseAndBitshift+0x64>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036be:	4a13      	ldr	r2, [pc, #76]	@ (800370c <DMA_CalcBaseAndBitshift+0x68>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d909      	bls.n	80036e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80036e4:	e007      	b.n	80036f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ee:	f023 0303 	bic.w	r3, r3, #3
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	aaaaaaab 	.word	0xaaaaaaab
 800370c:	08019f94 	.word	0x08019f94

08003710 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11f      	bne.n	800376a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d856      	bhi.n	80037de <DMA_CheckFifoParam+0xce>
 8003730:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <DMA_CheckFifoParam+0x28>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003749 	.word	0x08003749
 800373c:	0800375b 	.word	0x0800375b
 8003740:	08003749 	.word	0x08003749
 8003744:	080037df 	.word	0x080037df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d046      	beq.n	80037e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003758:	e043      	b.n	80037e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003762:	d140      	bne.n	80037e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003768:	e03d      	b.n	80037e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003772:	d121      	bne.n	80037b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d837      	bhi.n	80037ea <DMA_CheckFifoParam+0xda>
 800377a:	a201      	add	r2, pc, #4	@ (adr r2, 8003780 <DMA_CheckFifoParam+0x70>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	08003791 	.word	0x08003791
 8003784:	08003797 	.word	0x08003797
 8003788:	08003791 	.word	0x08003791
 800378c:	080037a9 	.word	0x080037a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e030      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d025      	beq.n	80037ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a6:	e022      	b.n	80037ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037b0:	d11f      	bne.n	80037f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b6:	e01c      	b.n	80037f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d903      	bls.n	80037c6 <DMA_CheckFifoParam+0xb6>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d003      	beq.n	80037cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c4:	e018      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      break;
 80037ca:	e015      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      break;
 80037dc:	e00b      	b.n	80037f6 <DMA_CheckFifoParam+0xe6>
      break;
 80037de:	bf00      	nop
 80037e0:	e00a      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e008      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e006      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e004      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037ee:	bf00      	nop
 80037f0:	e002      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <DMA_CheckFifoParam+0xe8>
      break;
 80037f6:	bf00      	nop
    }
  } 
  
  return status; 
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003808:	b480      	push	{r7}
 800380a:	b089      	sub	sp, #36	@ 0x24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e165      	b.n	8003af0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003824:	2201      	movs	r2, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	f040 8154 	bne.w	8003aea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d005      	beq.n	800385a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003856:	2b02      	cmp	r3, #2
 8003858:	d130      	bne.n	80038bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0201 	and.w	r2, r3, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d017      	beq.n	80038f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d123      	bne.n	800394c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	08da      	lsrs	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3208      	adds	r2, #8
 800390c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	220f      	movs	r2, #15
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	08da      	lsrs	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3208      	adds	r2, #8
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0203 	and.w	r2, r3, #3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80ae 	beq.w	8003aea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	4b5d      	ldr	r3, [pc, #372]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	4a5c      	ldr	r2, [pc, #368]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 8003998:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800399c:	6453      	str	r3, [r2, #68]	@ 0x44
 800399e:	4b5a      	ldr	r3, [pc, #360]	@ (8003b08 <HAL_GPIO_Init+0x300>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039aa:	4a58      	ldr	r2, [pc, #352]	@ (8003b0c <HAL_GPIO_Init+0x304>)
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	3302      	adds	r3, #2
 80039b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	220f      	movs	r2, #15
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4013      	ands	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003b10 <HAL_GPIO_Init+0x308>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d025      	beq.n	8003a22 <HAL_GPIO_Init+0x21a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a4e      	ldr	r2, [pc, #312]	@ (8003b14 <HAL_GPIO_Init+0x30c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01f      	beq.n	8003a1e <HAL_GPIO_Init+0x216>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a4d      	ldr	r2, [pc, #308]	@ (8003b18 <HAL_GPIO_Init+0x310>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d019      	beq.n	8003a1a <HAL_GPIO_Init+0x212>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a4c      	ldr	r2, [pc, #304]	@ (8003b1c <HAL_GPIO_Init+0x314>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_GPIO_Init+0x20e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b20 <HAL_GPIO_Init+0x318>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00d      	beq.n	8003a12 <HAL_GPIO_Init+0x20a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a4a      	ldr	r2, [pc, #296]	@ (8003b24 <HAL_GPIO_Init+0x31c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <HAL_GPIO_Init+0x206>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a49      	ldr	r2, [pc, #292]	@ (8003b28 <HAL_GPIO_Init+0x320>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_GPIO_Init+0x202>
 8003a06:	2306      	movs	r3, #6
 8003a08:	e00c      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a0a:	2307      	movs	r3, #7
 8003a0c:	e00a      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a0e:	2305      	movs	r3, #5
 8003a10:	e008      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a12:	2304      	movs	r3, #4
 8003a14:	e006      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a16:	2303      	movs	r3, #3
 8003a18:	e004      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e002      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_GPIO_Init+0x21c>
 8003a22:	2300      	movs	r3, #0
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	f002 0203 	and.w	r2, r2, #3
 8003a2a:	0092      	lsls	r2, r2, #2
 8003a2c:	4093      	lsls	r3, r2
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a34:	4935      	ldr	r1, [pc, #212]	@ (8003b0c <HAL_GPIO_Init+0x304>)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a42:	4b3a      	ldr	r3, [pc, #232]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a66:	4a31      	ldr	r2, [pc, #196]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a90:	4a26      	ldr	r2, [pc, #152]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a96:	4b25      	ldr	r3, [pc, #148]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aba:	4a1c      	ldr	r2, [pc, #112]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ae4:	4a11      	ldr	r2, [pc, #68]	@ (8003b2c <HAL_GPIO_Init+0x324>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b0f      	cmp	r3, #15
 8003af4:	f67f ae96 	bls.w	8003824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	3724      	adds	r7, #36	@ 0x24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40013800 	.word	0x40013800
 8003b10:	40020000 	.word	0x40020000
 8003b14:	40020400 	.word	0x40020400
 8003b18:	40020800 	.word	0x40020800
 8003b1c:	40020c00 	.word	0x40020c00
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40021400 	.word	0x40021400
 8003b28:	40021800 	.word	0x40021800
 8003b2c:	40013c00 	.word	0x40013c00

08003b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	807b      	strh	r3, [r7, #2]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b40:	787b      	ldrb	r3, [r7, #1]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b4c:	e003      	b.n	8003b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b4e:	887b      	ldrh	r3, [r7, #2]
 8003b50:	041a      	lsls	r2, r3, #16
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	619a      	str	r2, [r3, #24]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0cc      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b68      	ldr	r3, [pc, #416]	@ (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d90c      	bls.n	8003ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b65      	ldr	r3, [pc, #404]	@ (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b63      	ldr	r3, [pc, #396]	@ (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0b8      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb8:	4b59      	ldr	r3, [pc, #356]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	4a58      	ldr	r2, [pc, #352]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd0:	4b53      	ldr	r3, [pc, #332]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4a52      	ldr	r2, [pc, #328]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bdc:	4b50      	ldr	r3, [pc, #320]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	494d      	ldr	r1, [pc, #308]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d044      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b47      	ldr	r3, [pc, #284]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d119      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e07f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c22:	4b3f      	ldr	r3, [pc, #252]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e06f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c32:	4b3b      	ldr	r3, [pc, #236]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e067      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c42:	4b37      	ldr	r3, [pc, #220]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 0203 	bic.w	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4934      	ldr	r1, [pc, #208]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c54:	f7ff f8c4 	bl	8002de0 <HAL_GetTick>
 8003c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c5c:	f7ff f8c0 	bl	8002de0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e04f      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	4b2b      	ldr	r3, [pc, #172]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 020c 	and.w	r2, r3, #12
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d1eb      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c84:	4b25      	ldr	r3, [pc, #148]	@ (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d20c      	bcs.n	8003cac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b22      	ldr	r3, [pc, #136]	@ (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b20      	ldr	r3, [pc, #128]	@ (8003d1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e032      	b.n	8003d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cb8:	4b19      	ldr	r3, [pc, #100]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4916      	ldr	r1, [pc, #88]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d009      	beq.n	8003cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cd6:	4b12      	ldr	r3, [pc, #72]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	490e      	ldr	r1, [pc, #56]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cea:	f000 f887 	bl	8003dfc <HAL_RCC_GetSysClockFreq>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	490a      	ldr	r1, [pc, #40]	@ (8003d24 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	5ccb      	ldrb	r3, [r1, r3]
 8003cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003d02:	4a09      	ldr	r2, [pc, #36]	@ (8003d28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d06:	4b09      	ldr	r3, [pc, #36]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fde2 	bl	80028d4 <HAL_InitTick>

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023c00 	.word	0x40023c00
 8003d20:	40023800 	.word	0x40023800
 8003d24:	08019f7c 	.word	0x08019f7c
 8003d28:	20000004 	.word	0x20000004
 8003d2c:	20000008 	.word	0x20000008

08003d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d34:	4b03      	ldr	r3, [pc, #12]	@ (8003d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d36:	681b      	ldr	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000004 	.word	0x20000004

08003d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d4c:	f7ff fff0 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	@ (8003d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	08019f8c 	.word	0x08019f8c

08003d70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d74:	f7ff ffdc 	bl	8003d30 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	0b5b      	lsrs	r3, r3, #13
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4903      	ldr	r1, [pc, #12]	@ (8003d94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	08019f8c 	.word	0x08019f8c

08003d98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	220f      	movs	r2, #15
 8003da6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003da8:	4b12      	ldr	r3, [pc, #72]	@ (8003df4 <HAL_RCC_GetClockConfig+0x5c>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0203 	and.w	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003db4:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <HAL_RCC_GetClockConfig+0x5c>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <HAL_RCC_GetClockConfig+0x5c>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dcc:	4b09      	ldr	r3, [pc, #36]	@ (8003df4 <HAL_RCC_GetClockConfig+0x5c>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	08db      	lsrs	r3, r3, #3
 8003dd2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dda:	4b07      	ldr	r3, [pc, #28]	@ (8003df8 <HAL_RCC_GetClockConfig+0x60>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 020f 	and.w	r2, r3, #15
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	601a      	str	r2, [r3, #0]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40023c00 	.word	0x40023c00

08003dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e00:	b0ae      	sub	sp, #184	@ 0xb8
 8003e02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e22:	4bcb      	ldr	r3, [pc, #812]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	f200 8206 	bhi.w	800423c <HAL_RCC_GetSysClockFreq+0x440>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	0800423d 	.word	0x0800423d
 8003e40:	0800423d 	.word	0x0800423d
 8003e44:	0800423d 	.word	0x0800423d
 8003e48:	08003e75 	.word	0x08003e75
 8003e4c:	0800423d 	.word	0x0800423d
 8003e50:	0800423d 	.word	0x0800423d
 8003e54:	0800423d 	.word	0x0800423d
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	0800423d 	.word	0x0800423d
 8003e60:	0800423d 	.word	0x0800423d
 8003e64:	0800423d 	.word	0x0800423d
 8003e68:	0800406d 	.word	0x0800406d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e6c:	4bb9      	ldr	r3, [pc, #740]	@ (8004154 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e72:	e1e7      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e74:	4bb8      	ldr	r3, [pc, #736]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e7a:	e1e3      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e7c:	4bb4      	ldr	r3, [pc, #720]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e88:	4bb1      	ldr	r3, [pc, #708]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d071      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e94:	4bae      	ldr	r3, [pc, #696]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ea0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003eba:	4622      	mov	r2, r4
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	f04f 0000 	mov.w	r0, #0
 8003ec2:	f04f 0100 	mov.w	r1, #0
 8003ec6:	0159      	lsls	r1, r3, #5
 8003ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ecc:	0150      	lsls	r0, r2, #5
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4621      	mov	r1, r4
 8003ed4:	1a51      	subs	r1, r2, r1
 8003ed6:	6439      	str	r1, [r7, #64]	@ 0x40
 8003ed8:	4629      	mov	r1, r5
 8003eda:	eb63 0301 	sbc.w	r3, r3, r1
 8003ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003eec:	4649      	mov	r1, r9
 8003eee:	018b      	lsls	r3, r1, #6
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef6:	4641      	mov	r1, r8
 8003ef8:	018a      	lsls	r2, r1, #6
 8003efa:	4641      	mov	r1, r8
 8003efc:	1a51      	subs	r1, r2, r1
 8003efe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f00:	4649      	mov	r1, r9
 8003f02:	eb63 0301 	sbc.w	r3, r3, r1
 8003f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003f14:	4649      	mov	r1, r9
 8003f16:	00cb      	lsls	r3, r1, #3
 8003f18:	4641      	mov	r1, r8
 8003f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1e:	4641      	mov	r1, r8
 8003f20:	00ca      	lsls	r2, r1, #3
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	4622      	mov	r2, r4
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f2e:	462b      	mov	r3, r5
 8003f30:	460a      	mov	r2, r1
 8003f32:	eb42 0303 	adc.w	r3, r2, r3
 8003f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f44:	4629      	mov	r1, r5
 8003f46:	024b      	lsls	r3, r1, #9
 8003f48:	4621      	mov	r1, r4
 8003f4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f4e:	4621      	mov	r1, r4
 8003f50:	024a      	lsls	r2, r1, #9
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003f68:	f7fc fc9e 	bl	80008a8 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4613      	mov	r3, r2
 8003f72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f76:	e067      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f78:	4b75      	ldr	r3, [pc, #468]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f84:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f92:	2300      	movs	r3, #0
 8003f94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f96:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	f04f 0000 	mov.w	r0, #0
 8003fa2:	f04f 0100 	mov.w	r1, #0
 8003fa6:	0159      	lsls	r1, r3, #5
 8003fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fac:	0150      	lsls	r0, r2, #5
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4621      	mov	r1, r4
 8003fb4:	1a51      	subs	r1, r2, r1
 8003fb6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003fb8:	4629      	mov	r1, r5
 8003fba:	eb63 0301 	sbc.w	r3, r3, r1
 8003fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003fcc:	4649      	mov	r1, r9
 8003fce:	018b      	lsls	r3, r1, #6
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd6:	4641      	mov	r1, r8
 8003fd8:	018a      	lsls	r2, r1, #6
 8003fda:	4641      	mov	r1, r8
 8003fdc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fe0:	4649      	mov	r1, r9
 8003fe2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ff2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ff6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ffa:	4692      	mov	sl, r2
 8003ffc:	469b      	mov	fp, r3
 8003ffe:	4623      	mov	r3, r4
 8004000:	eb1a 0303 	adds.w	r3, sl, r3
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	462b      	mov	r3, r5
 8004008:	eb4b 0303 	adc.w	r3, fp, r3
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800401a:	4629      	mov	r1, r5
 800401c:	028b      	lsls	r3, r1, #10
 800401e:	4621      	mov	r1, r4
 8004020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004024:	4621      	mov	r1, r4
 8004026:	028a      	lsls	r2, r1, #10
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004030:	2200      	movs	r2, #0
 8004032:	673b      	str	r3, [r7, #112]	@ 0x70
 8004034:	677a      	str	r2, [r7, #116]	@ 0x74
 8004036:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800403a:	f7fc fc35 	bl	80008a8 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4613      	mov	r3, r2
 8004044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004048:	4b41      	ldr	r3, [pc, #260]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	0c1b      	lsrs	r3, r3, #16
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	3301      	adds	r3, #1
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800405a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800405e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004062:	fbb2 f3f3 	udiv	r3, r2, r3
 8004066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800406a:	e0eb      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800406c:	4b38      	ldr	r3, [pc, #224]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004078:	4b35      	ldr	r3, [pc, #212]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d06b      	beq.n	800415c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004084:	4b32      	ldr	r3, [pc, #200]	@ (8004150 <HAL_RCC_GetSysClockFreq+0x354>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	2200      	movs	r2, #0
 800408c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800408e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004096:	663b      	str	r3, [r7, #96]	@ 0x60
 8004098:	2300      	movs	r3, #0
 800409a:	667b      	str	r3, [r7, #100]	@ 0x64
 800409c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80040a0:	4622      	mov	r2, r4
 80040a2:	462b      	mov	r3, r5
 80040a4:	f04f 0000 	mov.w	r0, #0
 80040a8:	f04f 0100 	mov.w	r1, #0
 80040ac:	0159      	lsls	r1, r3, #5
 80040ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040b2:	0150      	lsls	r0, r2, #5
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4621      	mov	r1, r4
 80040ba:	1a51      	subs	r1, r2, r1
 80040bc:	61b9      	str	r1, [r7, #24]
 80040be:	4629      	mov	r1, r5
 80040c0:	eb63 0301 	sbc.w	r3, r3, r1
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040d2:	4659      	mov	r1, fp
 80040d4:	018b      	lsls	r3, r1, #6
 80040d6:	4651      	mov	r1, sl
 80040d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040dc:	4651      	mov	r1, sl
 80040de:	018a      	lsls	r2, r1, #6
 80040e0:	4651      	mov	r1, sl
 80040e2:	ebb2 0801 	subs.w	r8, r2, r1
 80040e6:	4659      	mov	r1, fp
 80040e8:	eb63 0901 	sbc.w	r9, r3, r1
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004100:	4690      	mov	r8, r2
 8004102:	4699      	mov	r9, r3
 8004104:	4623      	mov	r3, r4
 8004106:	eb18 0303 	adds.w	r3, r8, r3
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	462b      	mov	r3, r5
 800410e:	eb49 0303 	adc.w	r3, r9, r3
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004120:	4629      	mov	r1, r5
 8004122:	024b      	lsls	r3, r1, #9
 8004124:	4621      	mov	r1, r4
 8004126:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800412a:	4621      	mov	r1, r4
 800412c:	024a      	lsls	r2, r1, #9
 800412e:	4610      	mov	r0, r2
 8004130:	4619      	mov	r1, r3
 8004132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004136:	2200      	movs	r2, #0
 8004138:	65bb      	str	r3, [r7, #88]	@ 0x58
 800413a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800413c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004140:	f7fc fbb2 	bl	80008a8 <__aeabi_uldivmod>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4613      	mov	r3, r2
 800414a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800414e:	e065      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x420>
 8004150:	40023800 	.word	0x40023800
 8004154:	00f42400 	.word	0x00f42400
 8004158:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415c:	4b3d      	ldr	r3, [pc, #244]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x458>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	099b      	lsrs	r3, r3, #6
 8004162:	2200      	movs	r2, #0
 8004164:	4618      	mov	r0, r3
 8004166:	4611      	mov	r1, r2
 8004168:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800416c:	653b      	str	r3, [r7, #80]	@ 0x50
 800416e:	2300      	movs	r3, #0
 8004170:	657b      	str	r3, [r7, #84]	@ 0x54
 8004172:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004176:	4642      	mov	r2, r8
 8004178:	464b      	mov	r3, r9
 800417a:	f04f 0000 	mov.w	r0, #0
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	0159      	lsls	r1, r3, #5
 8004184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004188:	0150      	lsls	r0, r2, #5
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4641      	mov	r1, r8
 8004190:	1a51      	subs	r1, r2, r1
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	4649      	mov	r1, r9
 8004196:	eb63 0301 	sbc.w	r3, r3, r1
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041a8:	4659      	mov	r1, fp
 80041aa:	018b      	lsls	r3, r1, #6
 80041ac:	4651      	mov	r1, sl
 80041ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b2:	4651      	mov	r1, sl
 80041b4:	018a      	lsls	r2, r1, #6
 80041b6:	4651      	mov	r1, sl
 80041b8:	1a54      	subs	r4, r2, r1
 80041ba:	4659      	mov	r1, fp
 80041bc:	eb63 0501 	sbc.w	r5, r3, r1
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	00eb      	lsls	r3, r5, #3
 80041ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041ce:	00e2      	lsls	r2, r4, #3
 80041d0:	4614      	mov	r4, r2
 80041d2:	461d      	mov	r5, r3
 80041d4:	4643      	mov	r3, r8
 80041d6:	18e3      	adds	r3, r4, r3
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	464b      	mov	r3, r9
 80041dc:	eb45 0303 	adc.w	r3, r5, r3
 80041e0:	607b      	str	r3, [r7, #4]
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ee:	4629      	mov	r1, r5
 80041f0:	028b      	lsls	r3, r1, #10
 80041f2:	4621      	mov	r1, r4
 80041f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f8:	4621      	mov	r1, r4
 80041fa:	028a      	lsls	r2, r1, #10
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004204:	2200      	movs	r2, #0
 8004206:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004208:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800420a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800420e:	f7fc fb4b 	bl	80008a8 <__aeabi_uldivmod>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4613      	mov	r3, r2
 8004218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800421c:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x458>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	0f1b      	lsrs	r3, r3, #28
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800422a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800422e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800423a:	e003      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800423c:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x45c>)
 800423e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004242:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004244:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004248:	4618      	mov	r0, r3
 800424a:	37b8      	adds	r7, #184	@ 0xb8
 800424c:	46bd      	mov	sp, r7
 800424e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
 8004258:	00f42400 	.word	0x00f42400

0800425c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e28d      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8083 	beq.w	8004382 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800427c:	4b94      	ldr	r3, [pc, #592]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b04      	cmp	r3, #4
 8004286:	d019      	beq.n	80042bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004288:	4b91      	ldr	r3, [pc, #580]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004290:	2b08      	cmp	r3, #8
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004294:	4b8e      	ldr	r3, [pc, #568]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042a0:	d00c      	beq.n	80042bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a2:	4b8b      	ldr	r3, [pc, #556]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d112      	bne.n	80042d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ae:	4b88      	ldr	r3, [pc, #544]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ba:	d10b      	bne.n	80042d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	4b84      	ldr	r3, [pc, #528]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d05b      	beq.n	8004380 <HAL_RCC_OscConfig+0x124>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d157      	bne.n	8004380 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e25a      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042dc:	d106      	bne.n	80042ec <HAL_RCC_OscConfig+0x90>
 80042de:	4b7c      	ldr	r3, [pc, #496]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a7b      	ldr	r2, [pc, #492]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e01d      	b.n	8004328 <HAL_RCC_OscConfig+0xcc>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042f4:	d10c      	bne.n	8004310 <HAL_RCC_OscConfig+0xb4>
 80042f6:	4b76      	ldr	r3, [pc, #472]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a75      	ldr	r2, [pc, #468]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80042fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	4b73      	ldr	r3, [pc, #460]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a72      	ldr	r2, [pc, #456]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e00b      	b.n	8004328 <HAL_RCC_OscConfig+0xcc>
 8004310:	4b6f      	ldr	r3, [pc, #444]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a6e      	ldr	r2, [pc, #440]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b6c      	ldr	r3, [pc, #432]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6b      	ldr	r2, [pc, #428]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d013      	beq.n	8004358 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe fd56 	bl	8002de0 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004338:	f7fe fd52 	bl	8002de0 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	@ 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e21f      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434a:	4b61      	ldr	r3, [pc, #388]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0xdc>
 8004356:	e014      	b.n	8004382 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fe fd42 	bl	8002de0 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004360:	f7fe fd3e 	bl	8002de0 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b64      	cmp	r3, #100	@ 0x64
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e20b      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004372:	4b57      	ldr	r3, [pc, #348]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x104>
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d06f      	beq.n	800446e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800438e:	4b50      	ldr	r3, [pc, #320]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
 8004396:	2b00      	cmp	r3, #0
 8004398:	d017      	beq.n	80043ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800439a:	4b4d      	ldr	r3, [pc, #308]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
        || \
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d105      	bne.n	80043b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043a6:	4b4a      	ldr	r3, [pc, #296]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b2:	4b47      	ldr	r3, [pc, #284]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80043ba:	2b0c      	cmp	r3, #12
 80043bc:	d11c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043be:	4b44      	ldr	r3, [pc, #272]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ca:	4b41      	ldr	r3, [pc, #260]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_RCC_OscConfig+0x186>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e1d3      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e2:	4b3b      	ldr	r3, [pc, #236]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4937      	ldr	r1, [pc, #220]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043f6:	e03a      	b.n	800446e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d020      	beq.n	8004442 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004400:	4b34      	ldr	r3, [pc, #208]	@ (80044d4 <HAL_RCC_OscConfig+0x278>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fe fceb 	bl	8002de0 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440e:	f7fe fce7 	bl	8002de0 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e1b4      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004420:	4b2b      	ldr	r3, [pc, #172]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b28      	ldr	r3, [pc, #160]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4925      	ldr	r1, [pc, #148]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]
 8004440:	e015      	b.n	800446e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004442:	4b24      	ldr	r3, [pc, #144]	@ (80044d4 <HAL_RCC_OscConfig+0x278>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fe fcca 	bl	8002de0 <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004450:	f7fe fcc6 	bl	8002de0 <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e193      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d036      	beq.n	80044e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004482:	4b15      	ldr	r3, [pc, #84]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fe fcaa 	bl	8002de0 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004490:	f7fe fca6 	bl	8002de0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e173      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a2:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <HAL_RCC_OscConfig+0x274>)
 80044a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x234>
 80044ae:	e01b      	b.n	80044e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b0:	4b09      	ldr	r3, [pc, #36]	@ (80044d8 <HAL_RCC_OscConfig+0x27c>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b6:	f7fe fc93 	bl	8002de0 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044bc:	e00e      	b.n	80044dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044be:	f7fe fc8f 	bl	8002de0 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d907      	bls.n	80044dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e15c      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
 80044d0:	40023800 	.word	0x40023800
 80044d4:	42470000 	.word	0x42470000
 80044d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044dc:	4b8a      	ldr	r3, [pc, #552]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80044de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1ea      	bne.n	80044be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8097 	beq.w	8004624 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fa:	4b83      	ldr	r3, [pc, #524]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10f      	bne.n	8004526 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	4b7f      	ldr	r3, [pc, #508]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	4a7e      	ldr	r2, [pc, #504]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004514:	6413      	str	r3, [r2, #64]	@ 0x40
 8004516:	4b7c      	ldr	r3, [pc, #496]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b79      	ldr	r3, [pc, #484]	@ (800470c <HAL_RCC_OscConfig+0x4b0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d118      	bne.n	8004564 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004532:	4b76      	ldr	r3, [pc, #472]	@ (800470c <HAL_RCC_OscConfig+0x4b0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a75      	ldr	r2, [pc, #468]	@ (800470c <HAL_RCC_OscConfig+0x4b0>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453e:	f7fe fc4f 	bl	8002de0 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fe fc4b 	bl	8002de0 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e118      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004558:	4b6c      	ldr	r3, [pc, #432]	@ (800470c <HAL_RCC_OscConfig+0x4b0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f0      	beq.n	8004546 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x31e>
 800456c:	4b66      	ldr	r3, [pc, #408]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004570:	4a65      	ldr	r2, [pc, #404]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	6713      	str	r3, [r2, #112]	@ 0x70
 8004578:	e01c      	b.n	80045b4 <HAL_RCC_OscConfig+0x358>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b05      	cmp	r3, #5
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x340>
 8004582:	4b61      	ldr	r3, [pc, #388]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004586:	4a60      	ldr	r2, [pc, #384]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	6713      	str	r3, [r2, #112]	@ 0x70
 800458e:	4b5e      	ldr	r3, [pc, #376]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004592:	4a5d      	ldr	r2, [pc, #372]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6713      	str	r3, [r2, #112]	@ 0x70
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0x358>
 800459c:	4b5a      	ldr	r3, [pc, #360]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	4a59      	ldr	r2, [pc, #356]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80045a2:	f023 0301 	bic.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a8:	4b57      	ldr	r3, [pc, #348]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ac:	4a56      	ldr	r2, [pc, #344]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80045ae:	f023 0304 	bic.w	r3, r3, #4
 80045b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d015      	beq.n	80045e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fe fc10 	bl	8002de0 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	e00a      	b.n	80045da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c4:	f7fe fc0c 	bl	8002de0 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e0d7      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	4b4b      	ldr	r3, [pc, #300]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80045dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0ee      	beq.n	80045c4 <HAL_RCC_OscConfig+0x368>
 80045e6:	e014      	b.n	8004612 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fe fbfa 	bl	8002de0 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ee:	e00a      	b.n	8004606 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f7fe fbf6 	bl	8002de0 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e0c1      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004606:	4b40      	ldr	r3, [pc, #256]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ee      	bne.n	80045f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d105      	bne.n	8004624 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004618:	4b3b      	ldr	r3, [pc, #236]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	4a3a      	ldr	r2, [pc, #232]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800461e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004622:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80ad 	beq.w	8004788 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800462e:	4b36      	ldr	r3, [pc, #216]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b08      	cmp	r3, #8
 8004638:	d060      	beq.n	80046fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d145      	bne.n	80046ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	4b33      	ldr	r3, [pc, #204]	@ (8004710 <HAL_RCC_OscConfig+0x4b4>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fe fbca 	bl	8002de0 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004650:	f7fe fbc6 	bl	8002de0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e093      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	4b29      	ldr	r3, [pc, #164]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69da      	ldr	r2, [r3, #28]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	019b      	lsls	r3, r3, #6
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	085b      	lsrs	r3, r3, #1
 8004686:	3b01      	subs	r3, #1
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004698:	071b      	lsls	r3, r3, #28
 800469a:	491b      	ldr	r1, [pc, #108]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004710 <HAL_RCC_OscConfig+0x4b4>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a6:	f7fe fb9b 	bl	8002de0 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ae:	f7fe fb97 	bl	8002de0 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e064      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c0:	4b11      	ldr	r3, [pc, #68]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x452>
 80046cc:	e05c      	b.n	8004788 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ce:	4b10      	ldr	r3, [pc, #64]	@ (8004710 <HAL_RCC_OscConfig+0x4b4>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d4:	f7fe fb84 	bl	8002de0 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fe fb80 	bl	8002de0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e04d      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ee:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <HAL_RCC_OscConfig+0x4ac>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0x480>
 80046fa:	e045      	b.n	8004788 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d107      	bne.n	8004714 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e040      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
 8004708:	40023800 	.word	0x40023800
 800470c:	40007000 	.word	0x40007000
 8004710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004714:	4b1f      	ldr	r3, [pc, #124]	@ (8004794 <HAL_RCC_OscConfig+0x538>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d030      	beq.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d129      	bne.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d122      	bne.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004744:	4013      	ands	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800474a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800474c:	4293      	cmp	r3, r2
 800474e:	d119      	bne.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	3b01      	subs	r3, #1
 800475e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d10f      	bne.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e041      	b.n	800482e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fd ff2e 	bl	8002620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f000 fbb2 	bl	8004f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d001      	beq.n	8004850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e04e      	b.n	80048ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a23      	ldr	r2, [pc, #140]	@ (80048fc <HAL_TIM_Base_Start_IT+0xc4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d022      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800487a:	d01d      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1f      	ldr	r2, [pc, #124]	@ (8004900 <HAL_TIM_Base_Start_IT+0xc8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d018      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <HAL_TIM_Base_Start_IT+0xcc>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1c      	ldr	r2, [pc, #112]	@ (8004908 <HAL_TIM_Base_Start_IT+0xd0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00e      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1b      	ldr	r2, [pc, #108]	@ (800490c <HAL_TIM_Base_Start_IT+0xd4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d009      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a19      	ldr	r2, [pc, #100]	@ (8004910 <HAL_TIM_Base_Start_IT+0xd8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d004      	beq.n	80048b8 <HAL_TIM_Base_Start_IT+0x80>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a18      	ldr	r2, [pc, #96]	@ (8004914 <HAL_TIM_Base_Start_IT+0xdc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d111      	bne.n	80048dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d010      	beq.n	80048ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	e007      	b.n	80048ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40010400 	.word	0x40010400
 8004910:	40014000 	.word	0x40014000
 8004914:	40001800 	.word	0x40001800

08004918 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_TIM_PWM_Start+0x24>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e022      	b.n	8004982 <HAL_TIM_PWM_Start+0x6a>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b04      	cmp	r3, #4
 8004940:	d109      	bne.n	8004956 <HAL_TIM_PWM_Start+0x3e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	e015      	b.n	8004982 <HAL_TIM_PWM_Start+0x6a>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d109      	bne.n	8004970 <HAL_TIM_PWM_Start+0x58>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	e008      	b.n	8004982 <HAL_TIM_PWM_Start+0x6a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	bf14      	ite	ne
 800497c:	2301      	movne	r3, #1
 800497e:	2300      	moveq	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e07c      	b.n	8004a84 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <HAL_TIM_PWM_Start+0x82>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004998:	e013      	b.n	80049c2 <HAL_TIM_PWM_Start+0xaa>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b04      	cmp	r3, #4
 800499e:	d104      	bne.n	80049aa <HAL_TIM_PWM_Start+0x92>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049a8:	e00b      	b.n	80049c2 <HAL_TIM_PWM_Start+0xaa>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d104      	bne.n	80049ba <HAL_TIM_PWM_Start+0xa2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049b8:	e003      	b.n	80049c2 <HAL_TIM_PWM_Start+0xaa>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2201      	movs	r2, #1
 80049c8:	6839      	ldr	r1, [r7, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fb5e 	bl	800508c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a2d      	ldr	r2, [pc, #180]	@ (8004a8c <HAL_TIM_PWM_Start+0x174>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d004      	beq.n	80049e4 <HAL_TIM_PWM_Start+0xcc>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a2c      	ldr	r2, [pc, #176]	@ (8004a90 <HAL_TIM_PWM_Start+0x178>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d101      	bne.n	80049e8 <HAL_TIM_PWM_Start+0xd0>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <HAL_TIM_PWM_Start+0xd2>
 80049e8:	2300      	movs	r3, #0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a22      	ldr	r2, [pc, #136]	@ (8004a8c <HAL_TIM_PWM_Start+0x174>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d022      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x136>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a10:	d01d      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x136>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1f      	ldr	r2, [pc, #124]	@ (8004a94 <HAL_TIM_PWM_Start+0x17c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x136>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1d      	ldr	r2, [pc, #116]	@ (8004a98 <HAL_TIM_PWM_Start+0x180>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x136>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a9c <HAL_TIM_PWM_Start+0x184>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x136>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a16      	ldr	r2, [pc, #88]	@ (8004a90 <HAL_TIM_PWM_Start+0x178>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x136>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	@ (8004aa0 <HAL_TIM_PWM_Start+0x188>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIM_PWM_Start+0x136>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a16      	ldr	r2, [pc, #88]	@ (8004aa4 <HAL_TIM_PWM_Start+0x18c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d111      	bne.n	8004a72 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b06      	cmp	r3, #6
 8004a5e:	d010      	beq.n	8004a82 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a70:	e007      	b.n	8004a82 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40010400 	.word	0x40010400
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800
 8004a9c:	40000c00 	.word	0x40000c00
 8004aa0:	40014000 	.word	0x40014000
 8004aa4:	40001800 	.word	0x40001800

08004aa8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e097      	b.n	8004bec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fd fc6d 	bl	80023b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aec:	f023 0307 	bic.w	r3, r3, #7
 8004af0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	4619      	mov	r1, r3
 8004afc:	4610      	mov	r0, r2
 8004afe:	f000 fa1f 	bl	8004f40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004b48:	f023 030c 	bic.w	r3, r3, #12
 8004b4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	4313      	orrs	r3, r2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	011a      	lsls	r2, r3, #4
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	031b      	lsls	r3, r3, #12
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004b86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c04:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c0c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c14:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c1c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d110      	bne.n	8004c46 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d102      	bne.n	8004c30 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c2a:	7b7b      	ldrb	r3, [r7, #13]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d001      	beq.n	8004c34 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e069      	b.n	8004d08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c44:	e031      	b.n	8004caa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d110      	bne.n	8004c6e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d102      	bne.n	8004c58 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c52:	7b3b      	ldrb	r3, [r7, #12]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d001      	beq.n	8004c5c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e055      	b.n	8004d08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c6c:	e01d      	b.n	8004caa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d108      	bne.n	8004c86 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c74:	7bbb      	ldrb	r3, [r7, #14]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d105      	bne.n	8004c86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c7a:	7b7b      	ldrb	r3, [r7, #13]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d102      	bne.n	8004c86 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c80:	7b3b      	ldrb	r3, [r7, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d001      	beq.n	8004c8a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e03e      	b.n	8004d08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_TIM_Encoder_Start+0xc4>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d008      	beq.n	8004cc8 <HAL_TIM_Encoder_Start+0xd4>
 8004cb6:	e00f      	b.n	8004cd8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 f9e3 	bl	800508c <TIM_CCxChannelCmd>
      break;
 8004cc6:	e016      	b.n	8004cf6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	2104      	movs	r1, #4
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 f9db 	bl	800508c <TIM_CCxChannelCmd>
      break;
 8004cd6:	e00e      	b.n	8004cf6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f9d3 	bl	800508c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	2104      	movs	r1, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f9cc 	bl	800508c <TIM_CCxChannelCmd>
      break;
 8004cf4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d020      	beq.n	8004d74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01b      	beq.n	8004d74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0202 	mvn.w	r2, #2
 8004d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8d2 	bl	8004f04 <HAL_TIM_IC_CaptureCallback>
 8004d60:	e005      	b.n	8004d6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8c4 	bl	8004ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f8d5 	bl	8004f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d020      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d01b      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0204 	mvn.w	r2, #4
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2202      	movs	r2, #2
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8ac 	bl	8004f04 <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f89e 	bl	8004ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8af 	bl	8004f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d020      	beq.n	8004e0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d01b      	beq.n	8004e0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0208 	mvn.w	r2, #8
 8004ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2204      	movs	r2, #4
 8004de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f886 	bl	8004f04 <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f878 	bl	8004ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f889 	bl	8004f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0310 	and.w	r3, r3, #16
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d020      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 0310 	and.w	r3, r3, #16
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01b      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0210 	mvn.w	r2, #16
 8004e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f860 	bl	8004f04 <HAL_TIM_IC_CaptureCallback>
 8004e44:	e005      	b.n	8004e52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f852 	bl	8004ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f863 	bl	8004f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00c      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0201 	mvn.w	r2, #1
 8004e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fd f892 	bl	8001fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d007      	beq.n	8004ea0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9a2 	bl	80051e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00c      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d007      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f834 	bl	8004f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0220 	mvn.w	r2, #32
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f974 	bl	80051d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a43      	ldr	r2, [pc, #268]	@ (8005060 <TIM_Base_SetConfig+0x120>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <TIM_Base_SetConfig+0x40>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f5e:	d00f      	beq.n	8004f80 <TIM_Base_SetConfig+0x40>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a40      	ldr	r2, [pc, #256]	@ (8005064 <TIM_Base_SetConfig+0x124>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00b      	beq.n	8004f80 <TIM_Base_SetConfig+0x40>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a3f      	ldr	r2, [pc, #252]	@ (8005068 <TIM_Base_SetConfig+0x128>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <TIM_Base_SetConfig+0x40>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a3e      	ldr	r2, [pc, #248]	@ (800506c <TIM_Base_SetConfig+0x12c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a3d      	ldr	r2, [pc, #244]	@ (8005070 <TIM_Base_SetConfig+0x130>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d108      	bne.n	8004f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a32      	ldr	r2, [pc, #200]	@ (8005060 <TIM_Base_SetConfig+0x120>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d02b      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa0:	d027      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2f      	ldr	r2, [pc, #188]	@ (8005064 <TIM_Base_SetConfig+0x124>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d023      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a2e      	ldr	r2, [pc, #184]	@ (8005068 <TIM_Base_SetConfig+0x128>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01f      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800506c <TIM_Base_SetConfig+0x12c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01b      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005070 <TIM_Base_SetConfig+0x130>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d017      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8005074 <TIM_Base_SetConfig+0x134>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8005078 <TIM_Base_SetConfig+0x138>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00f      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a29      	ldr	r2, [pc, #164]	@ (800507c <TIM_Base_SetConfig+0x13c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00b      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a28      	ldr	r2, [pc, #160]	@ (8005080 <TIM_Base_SetConfig+0x140>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d007      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a27      	ldr	r2, [pc, #156]	@ (8005084 <TIM_Base_SetConfig+0x144>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d003      	beq.n	8004ff2 <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a26      	ldr	r2, [pc, #152]	@ (8005088 <TIM_Base_SetConfig+0x148>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4313      	orrs	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a0e      	ldr	r2, [pc, #56]	@ (8005060 <TIM_Base_SetConfig+0x120>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_Base_SetConfig+0xf2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a10      	ldr	r2, [pc, #64]	@ (8005070 <TIM_Base_SetConfig+0x130>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d103      	bne.n	800503a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f043 0204 	orr.w	r2, r3, #4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	601a      	str	r2, [r3, #0]
}
 8005052:	bf00      	nop
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40010000 	.word	0x40010000
 8005064:	40000400 	.word	0x40000400
 8005068:	40000800 	.word	0x40000800
 800506c:	40000c00 	.word	0x40000c00
 8005070:	40010400 	.word	0x40010400
 8005074:	40014000 	.word	0x40014000
 8005078:	40014400 	.word	0x40014400
 800507c:	40014800 	.word	0x40014800
 8005080:	40001800 	.word	0x40001800
 8005084:	40001c00 	.word	0x40001c00
 8005088:	40002000 	.word	0x40002000

0800508c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	2201      	movs	r2, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1a      	ldr	r2, [r3, #32]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	401a      	ands	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	fa01 f303 	lsl.w	r3, r1, r3
 80050c4:	431a      	orrs	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e05a      	b.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005116:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a21      	ldr	r2, [pc, #132]	@ (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d022      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513c:	d01d      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1d      	ldr	r2, [pc, #116]	@ (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d018      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1b      	ldr	r2, [pc, #108]	@ (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1a      	ldr	r2, [pc, #104]	@ (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a18      	ldr	r2, [pc, #96]	@ (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d009      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a17      	ldr	r2, [pc, #92]	@ (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a15      	ldr	r2, [pc, #84]	@ (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d10c      	bne.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	4313      	orrs	r3, r2
 800518a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40010400 	.word	0x40010400
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40001800 	.word	0x40001800

080051d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e042      	b.n	8005290 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fd fa42 	bl	80026a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2224      	movs	r2, #36	@ 0x24
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800523a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fff5 	bl	800622c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08c      	sub	sp, #48	@ 0x30
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d162      	bne.n	8005378 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_UART_Transmit_DMA+0x26>
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e05b      	b.n	800537a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	88fa      	ldrh	r2, [r7, #6]
 80052cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2221      	movs	r2, #33	@ 0x21
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e6:	4a27      	ldr	r2, [pc, #156]	@ (8005384 <HAL_UART_Transmit_DMA+0xec>)
 80052e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ee:	4a26      	ldr	r2, [pc, #152]	@ (8005388 <HAL_UART_Transmit_DMA+0xf0>)
 80052f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f6:	4a25      	ldr	r2, [pc, #148]	@ (800538c <HAL_UART_Transmit_DMA+0xf4>)
 80052f8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fe:	2200      	movs	r2, #0
 8005300:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005302:	f107 0308 	add.w	r3, r7, #8
 8005306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800530c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530e:	6819      	ldr	r1, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3304      	adds	r3, #4
 8005316:	461a      	mov	r2, r3
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	f7fd ff21 	bl	8003160 <HAL_DMA_Start_IT>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d008      	beq.n	8005336 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2210      	movs	r2, #16
 8005328:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e021      	b.n	800537a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800533e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	617b      	str	r3, [r7, #20]
   return(result);
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3314      	adds	r3, #20
 800535e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005360:	627a      	str	r2, [r7, #36]	@ 0x24
 8005362:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	6a39      	ldr	r1, [r7, #32]
 8005366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005368:	e841 2300 	strex	r3, r2, [r1]
 800536c:	61fb      	str	r3, [r7, #28]
   return(result);
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1e5      	bne.n	8005340 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	e000      	b.n	800537a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8005378:	2302      	movs	r3, #2
  }
}
 800537a:	4618      	mov	r0, r3
 800537c:	3730      	adds	r7, #48	@ 0x30
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	08005aa9 	.word	0x08005aa9
 8005388:	08005b43 	.word	0x08005b43
 800538c:	08005cc7 	.word	0x08005cc7

08005390 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d112      	bne.n	80053d0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <HAL_UART_Receive_DMA+0x26>
 80053b0:	88fb      	ldrh	r3, [r7, #6]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e00b      	b.n	80053d2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80053c0:	88fb      	ldrh	r3, [r7, #6]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fcc8 	bl	8005d5c <UART_Start_Receive_DMA>
 80053cc:	4603      	mov	r3, r0
 80053ce:	e000      	b.n	80053d2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
  }
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b090      	sub	sp, #64	@ 0x40
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f0:	2b80      	cmp	r3, #128	@ 0x80
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b21      	cmp	r3, #33	@ 0x21
 8005406:	d128      	bne.n	800545a <HAL_UART_DMAStop+0x80>
 8005408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800540a:	2b00      	cmp	r3, #0
 800540c:	d025      	beq.n	800545a <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005418:	e853 3f00 	ldrex	r3, [r3]
 800541c:	623b      	str	r3, [r7, #32]
   return(result);
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005424:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800542e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800543c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005446:	2b00      	cmp	r3, #0
 8005448:	d004      	beq.n	8005454 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544e:	4618      	mov	r0, r3
 8005450:	f7fd fede 	bl	8003210 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 fd27 	bl	8005ea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005464:	2b40      	cmp	r3, #64	@ 0x40
 8005466:	bf0c      	ite	eq
 8005468:	2301      	moveq	r3, #1
 800546a:	2300      	movne	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b22      	cmp	r3, #34	@ 0x22
 800547a:	d128      	bne.n	80054ce <HAL_UART_DMAStop+0xf4>
 800547c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800547e:	2b00      	cmp	r3, #0
 8005480:	d025      	beq.n	80054ce <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3314      	adds	r3, #20
 8005488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	e853 3f00 	ldrex	r3, [r3]
 8005490:	60fb      	str	r3, [r7, #12]
   return(result);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005498:	637b      	str	r3, [r7, #52]	@ 0x34
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3314      	adds	r3, #20
 80054a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054a2:	61fa      	str	r2, [r7, #28]
 80054a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	69b9      	ldr	r1, [r7, #24]
 80054a8:	69fa      	ldr	r2, [r7, #28]
 80054aa:	e841 2300 	strex	r3, r2, [r1]
 80054ae:	617b      	str	r3, [r7, #20]
   return(result);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1e5      	bne.n	8005482 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fd fea4 	bl	8003210 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fd15 	bl	8005ef8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3740      	adds	r7, #64	@ 0x40
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b0ba      	sub	sp, #232	@ 0xe8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054fe:	2300      	movs	r3, #0
 8005500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005504:	2300      	movs	r3, #0
 8005506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <HAL_UART_IRQHandler+0x66>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fdba 	bl	80060b0 <UART_Receive_IT>
      return;
 800553c:	e273      	b.n	8005a26 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800553e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80de 	beq.w	8005704 <HAL_UART_IRQHandler+0x22c>
 8005548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005558:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80d1 	beq.w	8005704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_UART_IRQHandler+0xae>
 800556e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557e:	f043 0201 	orr.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <HAL_UART_IRQHandler+0xd2>
 8005592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a2:	f043 0202 	orr.w	r2, r3, #2
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <HAL_UART_IRQHandler+0xf6>
 80055b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	f043 0204 	orr.w	r2, r3, #4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d011      	beq.n	80055fe <HAL_UART_IRQHandler+0x126>
 80055da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f6:	f043 0208 	orr.w	r2, r3, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 820a 	beq.w	8005a1c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_UART_IRQHandler+0x14e>
 8005614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fd45 	bl	80060b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b40      	cmp	r3, #64	@ 0x40
 8005632:	bf0c      	ite	eq
 8005634:	2301      	moveq	r3, #1
 8005636:	2300      	movne	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <HAL_UART_IRQHandler+0x17a>
 800564a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04f      	beq.n	80056f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fc50 	bl	8005ef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005662:	2b40      	cmp	r3, #64	@ 0x40
 8005664:	d141      	bne.n	80056ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3314      	adds	r3, #20
 800566c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800567c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3314      	adds	r3, #20
 800568e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005692:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800569e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1d9      	bne.n	8005666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d013      	beq.n	80056e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056be:	4a8a      	ldr	r2, [pc, #552]	@ (80058e8 <HAL_UART_IRQHandler+0x410>)
 80056c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fd fe12 	bl	80032f0 <HAL_DMA_Abort_IT>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d016      	beq.n	8005700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056dc:	4610      	mov	r0, r2
 80056de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	e00e      	b.n	8005700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f9ca 	bl	8005a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	e00a      	b.n	8005700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f9c6 	bl	8005a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	e006      	b.n	8005700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f9c2 	bl	8005a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056fe:	e18d      	b.n	8005a1c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	bf00      	nop
    return;
 8005702:	e18b      	b.n	8005a1c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005708:	2b01      	cmp	r3, #1
 800570a:	f040 8167 	bne.w	80059dc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 8160 	beq.w	80059dc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8159 	beq.w	80059dc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800572a:	2300      	movs	r3, #0
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60bb      	str	r3, [r7, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574a:	2b40      	cmp	r3, #64	@ 0x40
 800574c:	f040 80ce 	bne.w	80058ec <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800575c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 80a9 	beq.w	80058b8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800576a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800576e:	429a      	cmp	r2, r3
 8005770:	f080 80a2 	bcs.w	80058b8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800577a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005786:	f000 8088 	beq.w	800589a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	330c      	adds	r3, #12
 8005790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1d9      	bne.n	800578a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005802:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800580c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e1      	bne.n	80057d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3314      	adds	r3, #20
 8005832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005836:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005838:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800583c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e3      	bne.n	8005812 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800586a:	f023 0310 	bic.w	r3, r3, #16
 800586e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800587c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800587e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005882:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800588a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e3      	bne.n	8005858 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005894:	4618      	mov	r0, r3
 8005896:	f7fd fcbb 	bl	8003210 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	4619      	mov	r1, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f8ed 	bl	8005a90 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80058b6:	e0b3      	b.n	8005a20 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058c0:	429a      	cmp	r2, r3
 80058c2:	f040 80ad 	bne.w	8005a20 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d0:	f040 80a6 	bne.w	8005a20 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f8d5 	bl	8005a90 <HAL_UARTEx_RxEventCallback>
      return;
 80058e6:	e09b      	b.n	8005a20 <HAL_UART_IRQHandler+0x548>
 80058e8:	08005fbf 	.word	0x08005fbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 808e 	beq.w	8005a24 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8089 	beq.w	8005a24 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005924:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005928:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005936:	647a      	str	r2, [r7, #68]	@ 0x44
 8005938:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800593c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e3      	bne.n	8005912 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	623b      	str	r3, [r7, #32]
   return(result);
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800596e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005970:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e3      	bne.n	800594a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	330c      	adds	r3, #12
 8005996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	e853 3f00 	ldrex	r3, [r3]
 800599e:	60fb      	str	r3, [r7, #12]
   return(result);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 0310 	bic.w	r3, r3, #16
 80059a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	330c      	adds	r3, #12
 80059b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80059b4:	61fa      	str	r2, [r7, #28]
 80059b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	69b9      	ldr	r1, [r7, #24]
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	617b      	str	r3, [r7, #20]
   return(result);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e3      	bne.n	8005990 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f85b 	bl	8005a90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059da:	e023      	b.n	8005a24 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d009      	beq.n	80059fc <HAL_UART_IRQHandler+0x524>
 80059e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 faf3 	bl	8005fe0 <UART_Transmit_IT>
    return;
 80059fa:	e014      	b.n	8005a26 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00e      	beq.n	8005a26 <HAL_UART_IRQHandler+0x54e>
 8005a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fb33 	bl	8006080 <UART_EndTransmit_IT>
    return;
 8005a1a:	e004      	b.n	8005a26 <HAL_UART_IRQHandler+0x54e>
    return;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <HAL_UART_IRQHandler+0x54e>
      return;
 8005a20:	bf00      	nop
 8005a22:	e000      	b.n	8005a26 <HAL_UART_IRQHandler+0x54e>
      return;
 8005a24:	bf00      	nop
  }
}
 8005a26:	37e8      	adds	r7, #232	@ 0xe8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b090      	sub	sp, #64	@ 0x40
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d137      	bne.n	8005b34 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3314      	adds	r3, #20
 8005ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad4:	e853 3f00 	ldrex	r3, [r3]
 8005ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3314      	adds	r3, #20
 8005ae8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005aea:	633a      	str	r2, [r7, #48]	@ 0x30
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e5      	bne.n	8005aca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	330c      	adds	r3, #12
 8005b1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b1e:	61fa      	str	r2, [r7, #28]
 8005b20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	69b9      	ldr	r1, [r7, #24]
 8005b24:	69fa      	ldr	r2, [r7, #28]
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e5      	bne.n	8005afe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b32:	e002      	b.n	8005b3a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005b34:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005b36:	f7ff ff79 	bl	8005a2c <HAL_UART_TxCpltCallback>
}
 8005b3a:	bf00      	nop
 8005b3c:	3740      	adds	r7, #64	@ 0x40
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff ff75 	bl	8005a40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b56:	bf00      	nop
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b09c      	sub	sp, #112	@ 0x70
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d172      	bne.n	8005c60 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005b7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ba0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ba2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ba6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e5      	bne.n	8005b80 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3314      	adds	r3, #20
 8005bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc6:	f023 0301 	bic.w	r3, r3, #1
 8005bca:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3314      	adds	r3, #20
 8005bd2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005bd4:	647a      	str	r2, [r7, #68]	@ 0x44
 8005bd6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e5      	bne.n	8005bb4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3314      	adds	r3, #20
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bfe:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3314      	adds	r3, #20
 8005c06:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c08:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e5      	bne.n	8005be8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d119      	bne.n	8005c60 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0310 	bic.w	r3, r3, #16
 8005c42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005c4c:	61fa      	str	r2, [r7, #28]
 8005c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	69b9      	ldr	r1, [r7, #24]
 8005c52:	69fa      	ldr	r2, [r7, #28]
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	617b      	str	r3, [r7, #20]
   return(result);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c62:	2200      	movs	r2, #0
 8005c64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d106      	bne.n	8005c7c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c72:	4619      	mov	r1, r3
 8005c74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c76:	f7ff ff0b 	bl	8005a90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c7a:	e002      	b.n	8005c82 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005c7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005c7e:	f7ff fee9 	bl	8005a54 <HAL_UART_RxCpltCallback>
}
 8005c82:	bf00      	nop
 8005c84:	3770      	adds	r7, #112	@ 0x70
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d108      	bne.n	8005cb8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff feed 	bl	8005a90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cb6:	e002      	b.n	8005cbe <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f7ff fed5 	bl	8005a68 <HAL_UART_RxHalfCpltCallback>
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce2:	2b80      	cmp	r3, #128	@ 0x80
 8005ce4:	bf0c      	ite	eq
 8005ce6:	2301      	moveq	r3, #1
 8005ce8:	2300      	movne	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b21      	cmp	r3, #33	@ 0x21
 8005cf8:	d108      	bne.n	8005d0c <UART_DMAError+0x46>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2200      	movs	r2, #0
 8005d04:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005d06:	68b8      	ldr	r0, [r7, #8]
 8005d08:	f000 f8ce 	bl	8005ea8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d16:	2b40      	cmp	r3, #64	@ 0x40
 8005d18:	bf0c      	ite	eq
 8005d1a:	2301      	moveq	r3, #1
 8005d1c:	2300      	movne	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b22      	cmp	r3, #34	@ 0x22
 8005d2c:	d108      	bne.n	8005d40 <UART_DMAError+0x7a>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2200      	movs	r2, #0
 8005d38:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005d3a:	68b8      	ldr	r0, [r7, #8]
 8005d3c:	f000 f8dc 	bl	8005ef8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d44:	f043 0210 	orr.w	r2, r3, #16
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d4c:	68b8      	ldr	r0, [r7, #8]
 8005d4e:	f7ff fe95 	bl	8005a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b098      	sub	sp, #96	@ 0x60
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	88fa      	ldrh	r2, [r7, #6]
 8005d74:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2222      	movs	r2, #34	@ 0x22
 8005d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d88:	4a44      	ldr	r2, [pc, #272]	@ (8005e9c <UART_Start_Receive_DMA+0x140>)
 8005d8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d90:	4a43      	ldr	r2, [pc, #268]	@ (8005ea0 <UART_Start_Receive_DMA+0x144>)
 8005d92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d98:	4a42      	ldr	r2, [pc, #264]	@ (8005ea4 <UART_Start_Receive_DMA+0x148>)
 8005d9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da0:	2200      	movs	r2, #0
 8005da2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005da4:	f107 0308 	add.w	r3, r7, #8
 8005da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	f7fd f9d0 	bl	8003160 <HAL_DMA_Start_IT>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d008      	beq.n	8005dd8 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2210      	movs	r2, #16
 8005dca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e05d      	b.n	8005e94 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005dd8:	2300      	movs	r3, #0
 8005dda:	613b      	str	r3, [r7, #16]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	613b      	str	r3, [r7, #16]
 8005dec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d019      	beq.n	8005e2a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e16:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005e18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005e1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e5      	bne.n	8005df6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3c:	f043 0301 	orr.w	r3, r3, #1
 8005e40:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e4a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e74:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3314      	adds	r3, #20
 8005e7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6a39      	ldr	r1, [r7, #32]
 8005e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e5      	bne.n	8005e5e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3760      	adds	r7, #96	@ 0x60
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	08005b5f 	.word	0x08005b5f
 8005ea0:	08005c8b 	.word	0x08005c8b
 8005ea4:	08005cc7 	.word	0x08005cc7

08005ea8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b089      	sub	sp, #36	@ 0x24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	330c      	adds	r3, #12
 8005eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	e853 3f00 	ldrex	r3, [r3]
 8005ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	61ba      	str	r2, [r7, #24]
 8005ed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6979      	ldr	r1, [r7, #20]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e5      	bne.n	8005eb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005eec:	bf00      	nop
 8005eee:	3724      	adds	r7, #36	@ 0x24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b095      	sub	sp, #84	@ 0x54
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f20:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3314      	adds	r3, #20
 8005f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3314      	adds	r3, #20
 8005f52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e5      	bne.n	8005f34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d119      	bne.n	8005fa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	330c      	adds	r3, #12
 8005f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0310 	bic.w	r3, r3, #16
 8005f86:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f90:	61ba      	str	r2, [r7, #24]
 8005f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6979      	ldr	r1, [r7, #20]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e5      	bne.n	8005f70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fb2:	bf00      	nop
 8005fb4:	3754      	adds	r7, #84	@ 0x54
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff fd52 	bl	8005a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b21      	cmp	r3, #33	@ 0x21
 8005ff2:	d13e      	bne.n	8006072 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ffc:	d114      	bne.n	8006028 <UART_Transmit_IT+0x48>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d110      	bne.n	8006028 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800601a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	1c9a      	adds	r2, r3, #2
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	621a      	str	r2, [r3, #32]
 8006026:	e008      	b.n	800603a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	1c59      	adds	r1, r3, #1
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6211      	str	r1, [r2, #32]
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29b      	uxth	r3, r3
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	4619      	mov	r1, r3
 8006048:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10f      	bne.n	800606e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68da      	ldr	r2, [r3, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800605c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800606c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	e000      	b.n	8006074 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006072:	2302      	movs	r3, #2
  }
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006096:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fcc3 	bl	8005a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08c      	sub	sp, #48	@ 0x30
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80060bc:	2300      	movs	r3, #0
 80060be:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b22      	cmp	r3, #34	@ 0x22
 80060ca:	f040 80aa 	bne.w	8006222 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d6:	d115      	bne.n	8006104 <UART_Receive_IT+0x54>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d111      	bne.n	8006104 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fc:	1c9a      	adds	r2, r3, #2
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	629a      	str	r2, [r3, #40]	@ 0x28
 8006102:	e024      	b.n	800614e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006108:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006112:	d007      	beq.n	8006124 <UART_Receive_IT+0x74>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <UART_Receive_IT+0x82>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	b2da      	uxtb	r2, r3
 800612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e008      	b.n	8006144 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006142:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29b      	uxth	r3, r3
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	4619      	mov	r1, r3
 800615c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800615e:	2b00      	cmp	r3, #0
 8006160:	d15d      	bne.n	800621e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0220 	bic.w	r2, r2, #32
 8006170:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006180:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0201 	bic.w	r2, r2, #1
 8006190:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d135      	bne.n	8006214 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	613b      	str	r3, [r7, #16]
   return(result);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f023 0310 	bic.w	r3, r3, #16
 80061c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	330c      	adds	r3, #12
 80061cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ce:	623a      	str	r2, [r7, #32]
 80061d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d2:	69f9      	ldr	r1, [r7, #28]
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	e841 2300 	strex	r3, r2, [r1]
 80061da:	61bb      	str	r3, [r7, #24]
   return(result);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e5      	bne.n	80061ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d10a      	bne.n	8006206 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fc3f 	bl	8005a90 <HAL_UARTEx_RxEventCallback>
 8006212:	e002      	b.n	800621a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff fc1d 	bl	8005a54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	e002      	b.n	8006224 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	e000      	b.n	8006224 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006222:	2302      	movs	r3, #2
  }
}
 8006224:	4618      	mov	r0, r3
 8006226:	3730      	adds	r7, #48	@ 0x30
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800622c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006230:	b0c0      	sub	sp, #256	@ 0x100
 8006232:	af00      	add	r7, sp, #0
 8006234:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006248:	68d9      	ldr	r1, [r3, #12]
 800624a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	ea40 0301 	orr.w	r3, r0, r1
 8006254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	431a      	orrs	r2, r3
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	431a      	orrs	r2, r3
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006284:	f021 010c 	bic.w	r1, r1, #12
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006292:	430b      	orrs	r3, r1
 8006294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a6:	6999      	ldr	r1, [r3, #24]
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	ea40 0301 	orr.w	r3, r0, r1
 80062b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	4b8f      	ldr	r3, [pc, #572]	@ (80064f8 <UART_SetConfig+0x2cc>)
 80062bc:	429a      	cmp	r2, r3
 80062be:	d005      	beq.n	80062cc <UART_SetConfig+0xa0>
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b8d      	ldr	r3, [pc, #564]	@ (80064fc <UART_SetConfig+0x2d0>)
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d104      	bne.n	80062d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062cc:	f7fd fd50 	bl	8003d70 <HAL_RCC_GetPCLK2Freq>
 80062d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062d4:	e003      	b.n	80062de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062d6:	f7fd fd37 	bl	8003d48 <HAL_RCC_GetPCLK1Freq>
 80062da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e8:	f040 810c 	bne.w	8006504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f0:	2200      	movs	r2, #0
 80062f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80062fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80062fe:	4622      	mov	r2, r4
 8006300:	462b      	mov	r3, r5
 8006302:	1891      	adds	r1, r2, r2
 8006304:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006306:	415b      	adcs	r3, r3
 8006308:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800630a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800630e:	4621      	mov	r1, r4
 8006310:	eb12 0801 	adds.w	r8, r2, r1
 8006314:	4629      	mov	r1, r5
 8006316:	eb43 0901 	adc.w	r9, r3, r1
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800632a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800632e:	4690      	mov	r8, r2
 8006330:	4699      	mov	r9, r3
 8006332:	4623      	mov	r3, r4
 8006334:	eb18 0303 	adds.w	r3, r8, r3
 8006338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800633c:	462b      	mov	r3, r5
 800633e:	eb49 0303 	adc.w	r3, r9, r3
 8006342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006352:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800635a:	460b      	mov	r3, r1
 800635c:	18db      	adds	r3, r3, r3
 800635e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006360:	4613      	mov	r3, r2
 8006362:	eb42 0303 	adc.w	r3, r2, r3
 8006366:	657b      	str	r3, [r7, #84]	@ 0x54
 8006368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800636c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006370:	f7fa fa9a 	bl	80008a8 <__aeabi_uldivmod>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4b61      	ldr	r3, [pc, #388]	@ (8006500 <UART_SetConfig+0x2d4>)
 800637a:	fba3 2302 	umull	r2, r3, r3, r2
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	011c      	lsls	r4, r3, #4
 8006382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006386:	2200      	movs	r2, #0
 8006388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800638c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006394:	4642      	mov	r2, r8
 8006396:	464b      	mov	r3, r9
 8006398:	1891      	adds	r1, r2, r2
 800639a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800639c:	415b      	adcs	r3, r3
 800639e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80063a4:	4641      	mov	r1, r8
 80063a6:	eb12 0a01 	adds.w	sl, r2, r1
 80063aa:	4649      	mov	r1, r9
 80063ac:	eb43 0b01 	adc.w	fp, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063c4:	4692      	mov	sl, r2
 80063c6:	469b      	mov	fp, r3
 80063c8:	4643      	mov	r3, r8
 80063ca:	eb1a 0303 	adds.w	r3, sl, r3
 80063ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063d2:	464b      	mov	r3, r9
 80063d4:	eb4b 0303 	adc.w	r3, fp, r3
 80063d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063f0:	460b      	mov	r3, r1
 80063f2:	18db      	adds	r3, r3, r3
 80063f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80063f6:	4613      	mov	r3, r2
 80063f8:	eb42 0303 	adc.w	r3, r2, r3
 80063fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006406:	f7fa fa4f 	bl	80008a8 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4611      	mov	r1, r2
 8006410:	4b3b      	ldr	r3, [pc, #236]	@ (8006500 <UART_SetConfig+0x2d4>)
 8006412:	fba3 2301 	umull	r2, r3, r3, r1
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2264      	movs	r2, #100	@ 0x64
 800641a:	fb02 f303 	mul.w	r3, r2, r3
 800641e:	1acb      	subs	r3, r1, r3
 8006420:	00db      	lsls	r3, r3, #3
 8006422:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006426:	4b36      	ldr	r3, [pc, #216]	@ (8006500 <UART_SetConfig+0x2d4>)
 8006428:	fba3 2302 	umull	r2, r3, r3, r2
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006434:	441c      	add	r4, r3
 8006436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800643a:	2200      	movs	r2, #0
 800643c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006440:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	1891      	adds	r1, r2, r2
 800644e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006450:	415b      	adcs	r3, r3
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006458:	4641      	mov	r1, r8
 800645a:	1851      	adds	r1, r2, r1
 800645c:	6339      	str	r1, [r7, #48]	@ 0x30
 800645e:	4649      	mov	r1, r9
 8006460:	414b      	adcs	r3, r1
 8006462:	637b      	str	r3, [r7, #52]	@ 0x34
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006470:	4659      	mov	r1, fp
 8006472:	00cb      	lsls	r3, r1, #3
 8006474:	4651      	mov	r1, sl
 8006476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647a:	4651      	mov	r1, sl
 800647c:	00ca      	lsls	r2, r1, #3
 800647e:	4610      	mov	r0, r2
 8006480:	4619      	mov	r1, r3
 8006482:	4603      	mov	r3, r0
 8006484:	4642      	mov	r2, r8
 8006486:	189b      	adds	r3, r3, r2
 8006488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800648c:	464b      	mov	r3, r9
 800648e:	460a      	mov	r2, r1
 8006490:	eb42 0303 	adc.w	r3, r2, r3
 8006494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064ac:	460b      	mov	r3, r1
 80064ae:	18db      	adds	r3, r3, r3
 80064b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064b2:	4613      	mov	r3, r2
 80064b4:	eb42 0303 	adc.w	r3, r2, r3
 80064b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064c2:	f7fa f9f1 	bl	80008a8 <__aeabi_uldivmod>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <UART_SetConfig+0x2d4>)
 80064cc:	fba3 1302 	umull	r1, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	2164      	movs	r1, #100	@ 0x64
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	3332      	adds	r3, #50	@ 0x32
 80064de:	4a08      	ldr	r2, [pc, #32]	@ (8006500 <UART_SetConfig+0x2d4>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	f003 0207 	and.w	r2, r3, #7
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4422      	add	r2, r4
 80064f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064f4:	e106      	b.n	8006704 <UART_SetConfig+0x4d8>
 80064f6:	bf00      	nop
 80064f8:	40011000 	.word	0x40011000
 80064fc:	40011400 	.word	0x40011400
 8006500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006508:	2200      	movs	r2, #0
 800650a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800650e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006516:	4642      	mov	r2, r8
 8006518:	464b      	mov	r3, r9
 800651a:	1891      	adds	r1, r2, r2
 800651c:	6239      	str	r1, [r7, #32]
 800651e:	415b      	adcs	r3, r3
 8006520:	627b      	str	r3, [r7, #36]	@ 0x24
 8006522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006526:	4641      	mov	r1, r8
 8006528:	1854      	adds	r4, r2, r1
 800652a:	4649      	mov	r1, r9
 800652c:	eb43 0501 	adc.w	r5, r3, r1
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	00eb      	lsls	r3, r5, #3
 800653a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800653e:	00e2      	lsls	r2, r4, #3
 8006540:	4614      	mov	r4, r2
 8006542:	461d      	mov	r5, r3
 8006544:	4643      	mov	r3, r8
 8006546:	18e3      	adds	r3, r4, r3
 8006548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800654c:	464b      	mov	r3, r9
 800654e:	eb45 0303 	adc.w	r3, r5, r3
 8006552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006562:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006572:	4629      	mov	r1, r5
 8006574:	008b      	lsls	r3, r1, #2
 8006576:	4621      	mov	r1, r4
 8006578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800657c:	4621      	mov	r1, r4
 800657e:	008a      	lsls	r2, r1, #2
 8006580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006584:	f7fa f990 	bl	80008a8 <__aeabi_uldivmod>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4b60      	ldr	r3, [pc, #384]	@ (8006710 <UART_SetConfig+0x4e4>)
 800658e:	fba3 2302 	umull	r2, r3, r3, r2
 8006592:	095b      	lsrs	r3, r3, #5
 8006594:	011c      	lsls	r4, r3, #4
 8006596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800659a:	2200      	movs	r2, #0
 800659c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80065a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065a8:	4642      	mov	r2, r8
 80065aa:	464b      	mov	r3, r9
 80065ac:	1891      	adds	r1, r2, r2
 80065ae:	61b9      	str	r1, [r7, #24]
 80065b0:	415b      	adcs	r3, r3
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065b8:	4641      	mov	r1, r8
 80065ba:	1851      	adds	r1, r2, r1
 80065bc:	6139      	str	r1, [r7, #16]
 80065be:	4649      	mov	r1, r9
 80065c0:	414b      	adcs	r3, r1
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065d0:	4659      	mov	r1, fp
 80065d2:	00cb      	lsls	r3, r1, #3
 80065d4:	4651      	mov	r1, sl
 80065d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065da:	4651      	mov	r1, sl
 80065dc:	00ca      	lsls	r2, r1, #3
 80065de:	4610      	mov	r0, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	4603      	mov	r3, r0
 80065e4:	4642      	mov	r2, r8
 80065e6:	189b      	adds	r3, r3, r2
 80065e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065ec:	464b      	mov	r3, r9
 80065ee:	460a      	mov	r2, r1
 80065f0:	eb42 0303 	adc.w	r3, r2, r3
 80065f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006602:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006610:	4649      	mov	r1, r9
 8006612:	008b      	lsls	r3, r1, #2
 8006614:	4641      	mov	r1, r8
 8006616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800661a:	4641      	mov	r1, r8
 800661c:	008a      	lsls	r2, r1, #2
 800661e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006622:	f7fa f941 	bl	80008a8 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4611      	mov	r1, r2
 800662c:	4b38      	ldr	r3, [pc, #224]	@ (8006710 <UART_SetConfig+0x4e4>)
 800662e:	fba3 2301 	umull	r2, r3, r3, r1
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	2264      	movs	r2, #100	@ 0x64
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	1acb      	subs	r3, r1, r3
 800663c:	011b      	lsls	r3, r3, #4
 800663e:	3332      	adds	r3, #50	@ 0x32
 8006640:	4a33      	ldr	r2, [pc, #204]	@ (8006710 <UART_SetConfig+0x4e4>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800664c:	441c      	add	r4, r3
 800664e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006652:	2200      	movs	r2, #0
 8006654:	673b      	str	r3, [r7, #112]	@ 0x70
 8006656:	677a      	str	r2, [r7, #116]	@ 0x74
 8006658:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800665c:	4642      	mov	r2, r8
 800665e:	464b      	mov	r3, r9
 8006660:	1891      	adds	r1, r2, r2
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	415b      	adcs	r3, r3
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800666c:	4641      	mov	r1, r8
 800666e:	1851      	adds	r1, r2, r1
 8006670:	6039      	str	r1, [r7, #0]
 8006672:	4649      	mov	r1, r9
 8006674:	414b      	adcs	r3, r1
 8006676:	607b      	str	r3, [r7, #4]
 8006678:	f04f 0200 	mov.w	r2, #0
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006684:	4659      	mov	r1, fp
 8006686:	00cb      	lsls	r3, r1, #3
 8006688:	4651      	mov	r1, sl
 800668a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668e:	4651      	mov	r1, sl
 8006690:	00ca      	lsls	r2, r1, #3
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	4603      	mov	r3, r0
 8006698:	4642      	mov	r2, r8
 800669a:	189b      	adds	r3, r3, r2
 800669c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800669e:	464b      	mov	r3, r9
 80066a0:	460a      	mov	r2, r1
 80066a2:	eb42 0303 	adc.w	r3, r2, r3
 80066a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80066b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066c0:	4649      	mov	r1, r9
 80066c2:	008b      	lsls	r3, r1, #2
 80066c4:	4641      	mov	r1, r8
 80066c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ca:	4641      	mov	r1, r8
 80066cc:	008a      	lsls	r2, r1, #2
 80066ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066d2:	f7fa f8e9 	bl	80008a8 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <UART_SetConfig+0x4e4>)
 80066dc:	fba3 1302 	umull	r1, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	2164      	movs	r1, #100	@ 0x64
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	3332      	adds	r3, #50	@ 0x32
 80066ee:	4a08      	ldr	r2, [pc, #32]	@ (8006710 <UART_SetConfig+0x4e4>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f003 020f 	and.w	r2, r3, #15
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4422      	add	r2, r4
 8006702:	609a      	str	r2, [r3, #8]
}
 8006704:	bf00      	nop
 8006706:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800670a:	46bd      	mov	sp, r7
 800670c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006710:	51eb851f 	.word	0x51eb851f

08006714 <__NVIC_SetPriority>:
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	6039      	str	r1, [r7, #0]
 800671e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006724:	2b00      	cmp	r3, #0
 8006726:	db0a      	blt.n	800673e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	b2da      	uxtb	r2, r3
 800672c:	490c      	ldr	r1, [pc, #48]	@ (8006760 <__NVIC_SetPriority+0x4c>)
 800672e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006732:	0112      	lsls	r2, r2, #4
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	440b      	add	r3, r1
 8006738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800673c:	e00a      	b.n	8006754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	4908      	ldr	r1, [pc, #32]	@ (8006764 <__NVIC_SetPriority+0x50>)
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	3b04      	subs	r3, #4
 800674c:	0112      	lsls	r2, r2, #4
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	440b      	add	r3, r1
 8006752:	761a      	strb	r2, [r3, #24]
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	e000e100 	.word	0xe000e100
 8006764:	e000ed00 	.word	0xe000ed00

08006768 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800676c:	4b05      	ldr	r3, [pc, #20]	@ (8006784 <SysTick_Handler+0x1c>)
 800676e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006770:	f001 fd40 	bl	80081f4 <xTaskGetSchedulerState>
 8006774:	4603      	mov	r3, r0
 8006776:	2b01      	cmp	r3, #1
 8006778:	d001      	beq.n	800677e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800677a:	f002 fb35 	bl	8008de8 <xPortSysTickHandler>
  }
}
 800677e:	bf00      	nop
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	e000e010 	.word	0xe000e010

08006788 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800678c:	2100      	movs	r1, #0
 800678e:	f06f 0004 	mvn.w	r0, #4
 8006792:	f7ff ffbf 	bl	8006714 <__NVIC_SetPriority>
#endif
}
 8006796:	bf00      	nop
 8006798:	bd80      	pop	{r7, pc}
	...

0800679c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067a2:	f3ef 8305 	mrs	r3, IPSR
 80067a6:	603b      	str	r3, [r7, #0]
  return(result);
 80067a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80067ae:	f06f 0305 	mvn.w	r3, #5
 80067b2:	607b      	str	r3, [r7, #4]
 80067b4:	e00c      	b.n	80067d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80067b6:	4b0a      	ldr	r3, [pc, #40]	@ (80067e0 <osKernelInitialize+0x44>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d105      	bne.n	80067ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80067be:	4b08      	ldr	r3, [pc, #32]	@ (80067e0 <osKernelInitialize+0x44>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	e002      	b.n	80067d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80067ca:	f04f 33ff 	mov.w	r3, #4294967295
 80067ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067d0:	687b      	ldr	r3, [r7, #4]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	20006e30 	.word	0x20006e30

080067e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ea:	f3ef 8305 	mrs	r3, IPSR
 80067ee:	603b      	str	r3, [r7, #0]
  return(result);
 80067f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80067f6:	f06f 0305 	mvn.w	r3, #5
 80067fa:	607b      	str	r3, [r7, #4]
 80067fc:	e010      	b.n	8006820 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067fe:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <osKernelStart+0x48>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d109      	bne.n	800681a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006806:	f7ff ffbf 	bl	8006788 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800680a:	4b08      	ldr	r3, [pc, #32]	@ (800682c <osKernelStart+0x48>)
 800680c:	2202      	movs	r2, #2
 800680e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006810:	f001 f87a 	bl	8007908 <vTaskStartScheduler>
      stat = osOK;
 8006814:	2300      	movs	r3, #0
 8006816:	607b      	str	r3, [r7, #4]
 8006818:	e002      	b.n	8006820 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800681a:	f04f 33ff 	mov.w	r3, #4294967295
 800681e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006820:	687b      	ldr	r3, [r7, #4]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20006e30 	.word	0x20006e30

08006830 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b08e      	sub	sp, #56	@ 0x38
 8006834:	af04      	add	r7, sp, #16
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800683c:	2300      	movs	r3, #0
 800683e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006840:	f3ef 8305 	mrs	r3, IPSR
 8006844:	617b      	str	r3, [r7, #20]
  return(result);
 8006846:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006848:	2b00      	cmp	r3, #0
 800684a:	d17e      	bne.n	800694a <osThreadNew+0x11a>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d07b      	beq.n	800694a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006852:	2380      	movs	r3, #128	@ 0x80
 8006854:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006856:	2318      	movs	r3, #24
 8006858:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800685e:	f04f 33ff 	mov.w	r3, #4294967295
 8006862:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d045      	beq.n	80068f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <osThreadNew+0x48>
        name = attr->name;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <osThreadNew+0x6e>
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	2b38      	cmp	r3, #56	@ 0x38
 8006890:	d805      	bhi.n	800689e <osThreadNew+0x6e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <osThreadNew+0x72>
        return (NULL);
 800689e:	2300      	movs	r3, #0
 80068a0:	e054      	b.n	800694c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	089b      	lsrs	r3, r3, #2
 80068b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00e      	beq.n	80068d8 <osThreadNew+0xa8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	2b5b      	cmp	r3, #91	@ 0x5b
 80068c0:	d90a      	bls.n	80068d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d006      	beq.n	80068d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <osThreadNew+0xa8>
        mem = 1;
 80068d2:	2301      	movs	r3, #1
 80068d4:	61bb      	str	r3, [r7, #24]
 80068d6:	e010      	b.n	80068fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10c      	bne.n	80068fa <osThreadNew+0xca>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d108      	bne.n	80068fa <osThreadNew+0xca>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <osThreadNew+0xca>
          mem = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61bb      	str	r3, [r7, #24]
 80068f4:	e001      	b.n	80068fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d110      	bne.n	8006922 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006908:	9202      	str	r2, [sp, #8]
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	6a3a      	ldr	r2, [r7, #32]
 8006914:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 fe1a 	bl	8007550 <xTaskCreateStatic>
 800691c:	4603      	mov	r3, r0
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	e013      	b.n	800694a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d110      	bne.n	800694a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	b29a      	uxth	r2, r3
 800692c:	f107 0310 	add.w	r3, r7, #16
 8006930:	9301      	str	r3, [sp, #4]
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f000 fe68 	bl	8007610 <xTaskCreate>
 8006940:	4603      	mov	r3, r0
 8006942:	2b01      	cmp	r3, #1
 8006944:	d001      	beq.n	800694a <osThreadNew+0x11a>
            hTask = NULL;
 8006946:	2300      	movs	r3, #0
 8006948:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800694a:	693b      	ldr	r3, [r7, #16]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3728      	adds	r7, #40	@ 0x28
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800695c:	f3ef 8305 	mrs	r3, IPSR
 8006960:	60bb      	str	r3, [r7, #8]
  return(result);
 8006962:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <osDelay+0x1c>
    stat = osErrorISR;
 8006968:	f06f 0305 	mvn.w	r3, #5
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	e007      	b.n	8006980 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d002      	beq.n	8006980 <osDelay+0x2c>
      vTaskDelay(ticks);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 ff8e 	bl	800789c <vTaskDelay>
    }
  }

  return (stat);
 8006980:	68fb      	ldr	r3, [r7, #12]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4a07      	ldr	r2, [pc, #28]	@ (80069b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800699c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	4a06      	ldr	r2, [pc, #24]	@ (80069bc <vApplicationGetIdleTaskMemory+0x30>)
 80069a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2280      	movs	r2, #128	@ 0x80
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20006e34 	.word	0x20006e34
 80069bc:	20006e90 	.word	0x20006e90

080069c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4a07      	ldr	r2, [pc, #28]	@ (80069ec <vApplicationGetTimerTaskMemory+0x2c>)
 80069d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	4a06      	ldr	r2, [pc, #24]	@ (80069f0 <vApplicationGetTimerTaskMemory+0x30>)
 80069d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069de:	601a      	str	r2, [r3, #0]
}
 80069e0:	bf00      	nop
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	20007090 	.word	0x20007090
 80069f0:	200070ec 	.word	0x200070ec

080069f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f103 0208 	add.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f103 0208 	add.w	r2, r3, #8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f103 0208 	add.w	r2, r3, #8
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	1c5a      	adds	r2, r3, #1
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	601a      	str	r2, [r3, #0]
}
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d103      	bne.n	8006ab6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e00c      	b.n	8006ad0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	e002      	b.n	8006ac4 <vListInsert+0x2e>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d2f6      	bcs.n	8006abe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	601a      	str	r2, [r3, #0]
}
 8006afc:	bf00      	nop
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6892      	ldr	r2, [r2, #8]
 8006b1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6852      	ldr	r2, [r2, #4]
 8006b28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d103      	bne.n	8006b3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	1e5a      	subs	r2, r3, #1
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10b      	bne.n	8006b88 <xQueueGenericReset+0x2c>
	__asm volatile
 8006b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	60bb      	str	r3, [r7, #8]
}
 8006b82:	bf00      	nop
 8006b84:	bf00      	nop
 8006b86:	e7fd      	b.n	8006b84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b88:	f002 f89e 	bl	8008cc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b94:	68f9      	ldr	r1, [r7, #12]
 8006b96:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b98:	fb01 f303 	mul.w	r3, r1, r3
 8006b9c:	441a      	add	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bbe:	fb01 f303 	mul.w	r3, r1, r3
 8006bc2:	441a      	add	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	22ff      	movs	r2, #255	@ 0xff
 8006bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	22ff      	movs	r2, #255	@ 0xff
 8006bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d114      	bne.n	8006c08 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01a      	beq.n	8006c1c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3310      	adds	r3, #16
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 f91a 	bl	8007e24 <xTaskRemoveFromEventList>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d012      	beq.n	8006c1c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c2c <xQueueGenericReset+0xd0>)
 8006bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	e009      	b.n	8006c1c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3310      	adds	r3, #16
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff fef1 	bl	80069f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3324      	adds	r3, #36	@ 0x24
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff feec 	bl	80069f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c1c:	f002 f886 	bl	8008d2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c20:	2301      	movs	r3, #1
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08e      	sub	sp, #56	@ 0x38
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10b      	bne.n	8006c5c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c56:	bf00      	nop
 8006c58:	bf00      	nop
 8006c5a:	e7fd      	b.n	8006c58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	e7fd      	b.n	8006c76 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <xQueueGenericCreateStatic+0x56>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <xQueueGenericCreateStatic+0x5a>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <xQueueGenericCreateStatic+0x5c>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10b      	bne.n	8006ca8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	623b      	str	r3, [r7, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	bf00      	nop
 8006ca6:	e7fd      	b.n	8006ca4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d102      	bne.n	8006cb4 <xQueueGenericCreateStatic+0x84>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <xQueueGenericCreateStatic+0x88>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e000      	b.n	8006cba <xQueueGenericCreateStatic+0x8a>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10b      	bne.n	8006cd6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	61fb      	str	r3, [r7, #28]
}
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	e7fd      	b.n	8006cd2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cd6:	2350      	movs	r3, #80	@ 0x50
 8006cd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b50      	cmp	r3, #80	@ 0x50
 8006cde:	d00b      	beq.n	8006cf8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	61bb      	str	r3, [r7, #24]
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	e7fd      	b.n	8006cf4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cf8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00d      	beq.n	8006d20 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d0c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	4613      	mov	r3, r2
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f805 	bl	8006d2a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3730      	adds	r7, #48	@ 0x30
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	60f8      	str	r0, [r7, #12]
 8006d32:	60b9      	str	r1, [r7, #8]
 8006d34:	607a      	str	r2, [r7, #4]
 8006d36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d103      	bne.n	8006d46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e002      	b.n	8006d4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d58:	2101      	movs	r1, #1
 8006d5a:	69b8      	ldr	r0, [r7, #24]
 8006d5c:	f7ff fefe 	bl	8006b5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	78fa      	ldrb	r2, [r7, #3]
 8006d64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d68:	bf00      	nop
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08e      	sub	sp, #56	@ 0x38
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
 8006d7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10b      	bne.n	8006da4 <xQueueGenericSend+0x34>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d103      	bne.n	8006db2 <xQueueGenericSend+0x42>
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <xQueueGenericSend+0x46>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <xQueueGenericSend+0x48>
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <xQueueGenericSend+0x64>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d103      	bne.n	8006de2 <xQueueGenericSend+0x72>
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d101      	bne.n	8006de6 <xQueueGenericSend+0x76>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e000      	b.n	8006de8 <xQueueGenericSend+0x78>
 8006de6:	2300      	movs	r3, #0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <xQueueGenericSend+0x94>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	623b      	str	r3, [r7, #32]
}
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	e7fd      	b.n	8006e00 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e04:	f001 f9f6 	bl	80081f4 <xTaskGetSchedulerState>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <xQueueGenericSend+0xa4>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <xQueueGenericSend+0xa8>
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <xQueueGenericSend+0xaa>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <xQueueGenericSend+0xc6>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	61fb      	str	r3, [r7, #28]
}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	e7fd      	b.n	8006e32 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e36:	f001 ff47 	bl	8008cc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <xQueueGenericSend+0xdc>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d129      	bne.n	8006ea0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e52:	f000 fa0f 	bl	8007274 <prvCopyDataToQueue>
 8006e56:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d010      	beq.n	8006e82 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e62:	3324      	adds	r3, #36	@ 0x24
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 ffdd 	bl	8007e24 <xTaskRemoveFromEventList>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d013      	beq.n	8006e98 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e70:	4b3f      	ldr	r3, [pc, #252]	@ (8006f70 <xQueueGenericSend+0x200>)
 8006e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	e00a      	b.n	8006e98 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d007      	beq.n	8006e98 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e88:	4b39      	ldr	r3, [pc, #228]	@ (8006f70 <xQueueGenericSend+0x200>)
 8006e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e98:	f001 ff48 	bl	8008d2c <vPortExitCritical>
				return pdPASS;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e063      	b.n	8006f68 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d103      	bne.n	8006eae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ea6:	f001 ff41 	bl	8008d2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e05c      	b.n	8006f68 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d106      	bne.n	8006ec2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eb4:	f107 0314 	add.w	r3, r7, #20
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f001 f83f 	bl	8007f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec2:	f001 ff33 	bl	8008d2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ec6:	f000 fd87 	bl	80079d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eca:	f001 fefd 	bl	8008cc8 <vPortEnterCritical>
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d103      	bne.n	8006ee4 <xQueueGenericSend+0x174>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006eea:	b25b      	sxtb	r3, r3
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d103      	bne.n	8006efa <xQueueGenericSend+0x18a>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006efa:	f001 ff17 	bl	8008d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006efe:	1d3a      	adds	r2, r7, #4
 8006f00:	f107 0314 	add.w	r3, r7, #20
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 f82e 	bl	8007f68 <xTaskCheckForTimeOut>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d124      	bne.n	8006f5c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f14:	f000 faa6 	bl	8007464 <prvIsQueueFull>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d018      	beq.n	8006f50 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	3310      	adds	r3, #16
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 ff2a 	bl	8007d80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f2e:	f000 fa31 	bl	8007394 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f32:	f000 fd5f 	bl	80079f4 <xTaskResumeAll>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f af7c 	bne.w	8006e36 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f70 <xQueueGenericSend+0x200>)
 8006f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	e772      	b.n	8006e36 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f52:	f000 fa1f 	bl	8007394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f56:	f000 fd4d 	bl	80079f4 <xTaskResumeAll>
 8006f5a:	e76c      	b.n	8006e36 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f5e:	f000 fa19 	bl	8007394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f62:	f000 fd47 	bl	80079f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3738      	adds	r7, #56	@ 0x38
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b090      	sub	sp, #64	@ 0x40
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10b      	bne.n	8006fa4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f9e:	bf00      	nop
 8006fa0:	bf00      	nop
 8006fa2:	e7fd      	b.n	8006fa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <xQueueGenericSendFromISR+0x3e>
 8006faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <xQueueGenericSendFromISR+0x42>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e000      	b.n	8006fb8 <xQueueGenericSendFromISR+0x44>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10b      	bne.n	8006fd4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc0:	f383 8811 	msr	BASEPRI, r3
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	f3bf 8f4f 	dsb	sy
 8006fcc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006fce:	bf00      	nop
 8006fd0:	bf00      	nop
 8006fd2:	e7fd      	b.n	8006fd0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d103      	bne.n	8006fe2 <xQueueGenericSendFromISR+0x6e>
 8006fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <xQueueGenericSendFromISR+0x72>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <xQueueGenericSendFromISR+0x74>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10b      	bne.n	8007004 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	623b      	str	r3, [r7, #32]
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	e7fd      	b.n	8007000 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007004:	f001 ff40 	bl	8008e88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007008:	f3ef 8211 	mrs	r2, BASEPRI
 800700c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007010:	f383 8811 	msr	BASEPRI, r3
 8007014:	f3bf 8f6f 	isb	sy
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	61fa      	str	r2, [r7, #28]
 800701e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007020:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007022:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702c:	429a      	cmp	r2, r3
 800702e:	d302      	bcc.n	8007036 <xQueueGenericSendFromISR+0xc2>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d12f      	bne.n	8007096 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800703c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007044:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	68b9      	ldr	r1, [r7, #8]
 800704a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800704c:	f000 f912 	bl	8007274 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007050:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d112      	bne.n	8007080 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705e:	2b00      	cmp	r3, #0
 8007060:	d016      	beq.n	8007090 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	3324      	adds	r3, #36	@ 0x24
 8007066:	4618      	mov	r0, r3
 8007068:	f000 fedc 	bl	8007e24 <xTaskRemoveFromEventList>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00e      	beq.n	8007090 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	e007      	b.n	8007090 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007080:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007084:	3301      	adds	r3, #1
 8007086:	b2db      	uxtb	r3, r3
 8007088:	b25a      	sxtb	r2, r3
 800708a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007090:	2301      	movs	r3, #1
 8007092:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007094:	e001      	b.n	800709a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007096:	2300      	movs	r3, #0
 8007098:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800709a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80070a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3740      	adds	r7, #64	@ 0x40
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08c      	sub	sp, #48	@ 0x30
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070bc:	2300      	movs	r3, #0
 80070be:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10b      	bne.n	80070e2 <xQueueReceive+0x32>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	623b      	str	r3, [r7, #32]
}
 80070dc:	bf00      	nop
 80070de:	bf00      	nop
 80070e0:	e7fd      	b.n	80070de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <xQueueReceive+0x40>
 80070e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <xQueueReceive+0x44>
 80070f0:	2301      	movs	r3, #1
 80070f2:	e000      	b.n	80070f6 <xQueueReceive+0x46>
 80070f4:	2300      	movs	r3, #0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10b      	bne.n	8007112 <xQueueReceive+0x62>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	61fb      	str	r3, [r7, #28]
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	e7fd      	b.n	800710e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007112:	f001 f86f 	bl	80081f4 <xTaskGetSchedulerState>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <xQueueReceive+0x72>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <xQueueReceive+0x76>
 8007122:	2301      	movs	r3, #1
 8007124:	e000      	b.n	8007128 <xQueueReceive+0x78>
 8007126:	2300      	movs	r3, #0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10b      	bne.n	8007144 <xQueueReceive+0x94>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	61bb      	str	r3, [r7, #24]
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	e7fd      	b.n	8007140 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007144:	f001 fdc0 	bl	8008cc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d01f      	beq.n	8007194 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007158:	f000 f8f6 	bl	8007348 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800715c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715e:	1e5a      	subs	r2, r3, #1
 8007160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007162:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00f      	beq.n	800718c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	3310      	adds	r3, #16
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fe57 	bl	8007e24 <xTaskRemoveFromEventList>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800717c:	4b3c      	ldr	r3, [pc, #240]	@ (8007270 <xQueueReceive+0x1c0>)
 800717e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800718c:	f001 fdce 	bl	8008d2c <vPortExitCritical>
				return pdPASS;
 8007190:	2301      	movs	r3, #1
 8007192:	e069      	b.n	8007268 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d103      	bne.n	80071a2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800719a:	f001 fdc7 	bl	8008d2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800719e:	2300      	movs	r3, #0
 80071a0:	e062      	b.n	8007268 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071a8:	f107 0310 	add.w	r3, r7, #16
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fec5 	bl	8007f3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071b2:	2301      	movs	r3, #1
 80071b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071b6:	f001 fdb9 	bl	8008d2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071ba:	f000 fc0d 	bl	80079d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071be:	f001 fd83 	bl	8008cc8 <vPortEnterCritical>
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80071c8:	b25b      	sxtb	r3, r3
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ce:	d103      	bne.n	80071d8 <xQueueReceive+0x128>
 80071d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071de:	b25b      	sxtb	r3, r3
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e4:	d103      	bne.n	80071ee <xQueueReceive+0x13e>
 80071e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071ee:	f001 fd9d 	bl	8008d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071f2:	1d3a      	adds	r2, r7, #4
 80071f4:	f107 0310 	add.w	r3, r7, #16
 80071f8:	4611      	mov	r1, r2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 feb4 	bl	8007f68 <xTaskCheckForTimeOut>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d123      	bne.n	800724e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007206:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007208:	f000 f916 	bl	8007438 <prvIsQueueEmpty>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d017      	beq.n	8007242 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007214:	3324      	adds	r3, #36	@ 0x24
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f000 fdb0 	bl	8007d80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007222:	f000 f8b7 	bl	8007394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007226:	f000 fbe5 	bl	80079f4 <xTaskResumeAll>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d189      	bne.n	8007144 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007230:	4b0f      	ldr	r3, [pc, #60]	@ (8007270 <xQueueReceive+0x1c0>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	e780      	b.n	8007144 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007244:	f000 f8a6 	bl	8007394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007248:	f000 fbd4 	bl	80079f4 <xTaskResumeAll>
 800724c:	e77a      	b.n	8007144 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800724e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007250:	f000 f8a0 	bl	8007394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007254:	f000 fbce 	bl	80079f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800725a:	f000 f8ed 	bl	8007438 <prvIsQueueEmpty>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	f43f af6f 	beq.w	8007144 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007266:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007268:	4618      	mov	r0, r3
 800726a:	3730      	adds	r7, #48	@ 0x30
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007288:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10d      	bne.n	80072ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d14d      	bne.n	8007336 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 ffc6 	bl	8008230 <xTaskPriorityDisinherit>
 80072a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	609a      	str	r2, [r3, #8]
 80072ac:	e043      	b.n	8007336 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d119      	bne.n	80072e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6858      	ldr	r0, [r3, #4]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072bc:	461a      	mov	r2, r3
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	f011 fa5b 	bl	801877a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072cc:	441a      	add	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d32b      	bcc.n	8007336 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	605a      	str	r2, [r3, #4]
 80072e6:	e026      	b.n	8007336 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	68d8      	ldr	r0, [r3, #12]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f0:	461a      	mov	r2, r3
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	f011 fa41 	bl	801877a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007300:	425b      	negs	r3, r3
 8007302:	441a      	add	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	68da      	ldr	r2, [r3, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d207      	bcs.n	8007324 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731c:	425b      	negs	r3, r3
 800731e:	441a      	add	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d105      	bne.n	8007336 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	3b01      	subs	r3, #1
 8007334:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800733e:	697b      	ldr	r3, [r7, #20]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007356:	2b00      	cmp	r3, #0
 8007358:	d018      	beq.n	800738c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007362:	441a      	add	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	429a      	cmp	r2, r3
 8007372:	d303      	bcc.n	800737c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68d9      	ldr	r1, [r3, #12]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007384:	461a      	mov	r2, r3
 8007386:	6838      	ldr	r0, [r7, #0]
 8007388:	f011 f9f7 	bl	801877a <memcpy>
	}
}
 800738c:	bf00      	nop
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800739c:	f001 fc94 	bl	8008cc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073a8:	e011      	b.n	80073ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d012      	beq.n	80073d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3324      	adds	r3, #36	@ 0x24
 80073b6:	4618      	mov	r0, r3
 80073b8:	f000 fd34 	bl	8007e24 <xTaskRemoveFromEventList>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073c2:	f000 fe35 	bl	8008030 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	dce9      	bgt.n	80073aa <prvUnlockQueue+0x16>
 80073d6:	e000      	b.n	80073da <prvUnlockQueue+0x46>
					break;
 80073d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	22ff      	movs	r2, #255	@ 0xff
 80073de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80073e2:	f001 fca3 	bl	8008d2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073e6:	f001 fc6f 	bl	8008cc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073f2:	e011      	b.n	8007418 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d012      	beq.n	8007422 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	3310      	adds	r3, #16
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fd0f 	bl	8007e24 <xTaskRemoveFromEventList>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800740c:	f000 fe10 	bl	8008030 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	3b01      	subs	r3, #1
 8007414:	b2db      	uxtb	r3, r3
 8007416:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800741c:	2b00      	cmp	r3, #0
 800741e:	dce9      	bgt.n	80073f4 <prvUnlockQueue+0x60>
 8007420:	e000      	b.n	8007424 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007422:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	22ff      	movs	r2, #255	@ 0xff
 8007428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800742c:	f001 fc7e 	bl	8008d2c <vPortExitCritical>
}
 8007430:	bf00      	nop
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007440:	f001 fc42 	bl	8008cc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	e001      	b.n	8007456 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007456:	f001 fc69 	bl	8008d2c <vPortExitCritical>

	return xReturn;
 800745a:	68fb      	ldr	r3, [r7, #12]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800746c:	f001 fc2c 	bl	8008cc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007478:	429a      	cmp	r2, r3
 800747a:	d102      	bne.n	8007482 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	e001      	b.n	8007486 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007486:	f001 fc51 	bl	8008d2c <vPortExitCritical>

	return xReturn;
 800748a:	68fb      	ldr	r3, [r7, #12]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	e014      	b.n	80074ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074a4:	4a0f      	ldr	r2, [pc, #60]	@ (80074e4 <vQueueAddToRegistry+0x50>)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10b      	bne.n	80074c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074b0:	490c      	ldr	r1, [pc, #48]	@ (80074e4 <vQueueAddToRegistry+0x50>)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074ba:	4a0a      	ldr	r2, [pc, #40]	@ (80074e4 <vQueueAddToRegistry+0x50>)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	00db      	lsls	r3, r3, #3
 80074c0:	4413      	add	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074c6:	e006      	b.n	80074d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b07      	cmp	r3, #7
 80074d2:	d9e7      	bls.n	80074a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	200074ec 	.word	0x200074ec

080074e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074f8:	f001 fbe6 	bl	8008cc8 <vPortEnterCritical>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007502:	b25b      	sxtb	r3, r3
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d103      	bne.n	8007512 <vQueueWaitForMessageRestricted+0x2a>
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007518:	b25b      	sxtb	r3, r3
 800751a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751e:	d103      	bne.n	8007528 <vQueueWaitForMessageRestricted+0x40>
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007528:	f001 fc00 	bl	8008d2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	3324      	adds	r3, #36	@ 0x24
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	68b9      	ldr	r1, [r7, #8]
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fc45 	bl	8007dcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007542:	6978      	ldr	r0, [r7, #20]
 8007544:	f7ff ff26 	bl	8007394 <prvUnlockQueue>
	}
 8007548:	bf00      	nop
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08e      	sub	sp, #56	@ 0x38
 8007554:	af04      	add	r7, sp, #16
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800755e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10b      	bne.n	800757c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	623b      	str	r3, [r7, #32]
}
 8007576:	bf00      	nop
 8007578:	bf00      	nop
 800757a:	e7fd      	b.n	8007578 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800757c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10b      	bne.n	800759a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	61fb      	str	r3, [r7, #28]
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	e7fd      	b.n	8007596 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800759a:	235c      	movs	r3, #92	@ 0x5c
 800759c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80075a2:	d00b      	beq.n	80075bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80075a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a8:	f383 8811 	msr	BASEPRI, r3
 80075ac:	f3bf 8f6f 	isb	sy
 80075b0:	f3bf 8f4f 	dsb	sy
 80075b4:	61bb      	str	r3, [r7, #24]
}
 80075b6:	bf00      	nop
 80075b8:	bf00      	nop
 80075ba:	e7fd      	b.n	80075b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01e      	beq.n	8007602 <xTaskCreateStatic+0xb2>
 80075c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01b      	beq.n	8007602 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075dc:	2300      	movs	r3, #0
 80075de:	9303      	str	r3, [sp, #12]
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	9302      	str	r3, [sp, #8]
 80075e4:	f107 0314 	add.w	r3, r7, #20
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 f850 	bl	800769a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80075fc:	f000 f8de 	bl	80077bc <prvAddNewTaskToReadyList>
 8007600:	e001      	b.n	8007606 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007606:	697b      	ldr	r3, [r7, #20]
	}
 8007608:	4618      	mov	r0, r3
 800760a:	3728      	adds	r7, #40	@ 0x28
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007610:	b580      	push	{r7, lr}
 8007612:	b08c      	sub	sp, #48	@ 0x30
 8007614:	af04      	add	r7, sp, #16
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	4613      	mov	r3, r2
 800761e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007620:	88fb      	ldrh	r3, [r7, #6]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4618      	mov	r0, r3
 8007626:	f001 fc71 	bl	8008f0c <pvPortMalloc>
 800762a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00e      	beq.n	8007650 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007632:	205c      	movs	r0, #92	@ 0x5c
 8007634:	f001 fc6a 	bl	8008f0c <pvPortMalloc>
 8007638:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	631a      	str	r2, [r3, #48]	@ 0x30
 8007646:	e005      	b.n	8007654 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007648:	6978      	ldr	r0, [r7, #20]
 800764a:	f001 fd2d 	bl	80090a8 <vPortFree>
 800764e:	e001      	b.n	8007654 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007650:	2300      	movs	r3, #0
 8007652:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d017      	beq.n	800768a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007662:	88fa      	ldrh	r2, [r7, #6]
 8007664:	2300      	movs	r3, #0
 8007666:	9303      	str	r3, [sp, #12]
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	9302      	str	r3, [sp, #8]
 800766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f80e 	bl	800769a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800767e:	69f8      	ldr	r0, [r7, #28]
 8007680:	f000 f89c 	bl	80077bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007684:	2301      	movs	r3, #1
 8007686:	61bb      	str	r3, [r7, #24]
 8007688:	e002      	b.n	8007690 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800768a:	f04f 33ff 	mov.w	r3, #4294967295
 800768e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007690:	69bb      	ldr	r3, [r7, #24]
	}
 8007692:	4618      	mov	r0, r3
 8007694:	3720      	adds	r7, #32
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b088      	sub	sp, #32
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	461a      	mov	r2, r3
 80076b2:	21a5      	movs	r1, #165	@ 0xa5
 80076b4:	f010 ff86 	bl	80185c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076c2:	3b01      	subs	r3, #1
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	f023 0307 	bic.w	r3, r3, #7
 80076d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00b      	beq.n	80076f4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	617b      	str	r3, [r7, #20]
}
 80076ee:	bf00      	nop
 80076f0:	bf00      	nop
 80076f2:	e7fd      	b.n	80076f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01f      	beq.n	800773a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076fa:	2300      	movs	r3, #0
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	e012      	b.n	8007726 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	7819      	ldrb	r1, [r3, #0]
 8007708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	3334      	adds	r3, #52	@ 0x34
 8007710:	460a      	mov	r2, r1
 8007712:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d006      	beq.n	800772e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	3301      	adds	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	2b0f      	cmp	r3, #15
 800772a:	d9e9      	bls.n	8007700 <prvInitialiseNewTask+0x66>
 800772c:	e000      	b.n	8007730 <prvInitialiseNewTask+0x96>
			{
				break;
 800772e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007738:	e003      	b.n	8007742 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007744:	2b37      	cmp	r3, #55	@ 0x37
 8007746:	d901      	bls.n	800774c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007748:	2337      	movs	r3, #55	@ 0x37
 800774a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007750:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007756:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775a:	2200      	movs	r2, #0
 800775c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	3304      	adds	r3, #4
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff f966 	bl	8006a34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	3318      	adds	r3, #24
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff f961 	bl	8006a34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007776:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007786:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	2200      	movs	r2, #0
 800778c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	68f9      	ldr	r1, [r7, #12]
 800779a:	69b8      	ldr	r0, [r7, #24]
 800779c:	f001 f966 	bl	8008a6c <pxPortInitialiseStack>
 80077a0:	4602      	mov	r2, r0
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077b2:	bf00      	nop
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077c4:	f001 fa80 	bl	8008cc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007880 <prvAddNewTaskToReadyList+0xc4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3301      	adds	r3, #1
 80077ce:	4a2c      	ldr	r2, [pc, #176]	@ (8007880 <prvAddNewTaskToReadyList+0xc4>)
 80077d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007884 <prvAddNewTaskToReadyList+0xc8>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d109      	bne.n	80077ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077da:	4a2a      	ldr	r2, [pc, #168]	@ (8007884 <prvAddNewTaskToReadyList+0xc8>)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077e0:	4b27      	ldr	r3, [pc, #156]	@ (8007880 <prvAddNewTaskToReadyList+0xc4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d110      	bne.n	800780a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077e8:	f000 fc46 	bl	8008078 <prvInitialiseTaskLists>
 80077ec:	e00d      	b.n	800780a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077ee:	4b26      	ldr	r3, [pc, #152]	@ (8007888 <prvAddNewTaskToReadyList+0xcc>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d109      	bne.n	800780a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077f6:	4b23      	ldr	r3, [pc, #140]	@ (8007884 <prvAddNewTaskToReadyList+0xc8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007800:	429a      	cmp	r2, r3
 8007802:	d802      	bhi.n	800780a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007804:	4a1f      	ldr	r2, [pc, #124]	@ (8007884 <prvAddNewTaskToReadyList+0xc8>)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800780a:	4b20      	ldr	r3, [pc, #128]	@ (800788c <prvAddNewTaskToReadyList+0xd0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3301      	adds	r3, #1
 8007810:	4a1e      	ldr	r2, [pc, #120]	@ (800788c <prvAddNewTaskToReadyList+0xd0>)
 8007812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007814:	4b1d      	ldr	r3, [pc, #116]	@ (800788c <prvAddNewTaskToReadyList+0xd0>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007820:	4b1b      	ldr	r3, [pc, #108]	@ (8007890 <prvAddNewTaskToReadyList+0xd4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d903      	bls.n	8007830 <prvAddNewTaskToReadyList+0x74>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782c:	4a18      	ldr	r2, [pc, #96]	@ (8007890 <prvAddNewTaskToReadyList+0xd4>)
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4a15      	ldr	r2, [pc, #84]	@ (8007894 <prvAddNewTaskToReadyList+0xd8>)
 800783e:	441a      	add	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7ff f901 	bl	8006a4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800784c:	f001 fa6e 	bl	8008d2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007850:	4b0d      	ldr	r3, [pc, #52]	@ (8007888 <prvAddNewTaskToReadyList+0xcc>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00e      	beq.n	8007876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007858:	4b0a      	ldr	r3, [pc, #40]	@ (8007884 <prvAddNewTaskToReadyList+0xc8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007862:	429a      	cmp	r2, r3
 8007864:	d207      	bcs.n	8007876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007866:	4b0c      	ldr	r3, [pc, #48]	@ (8007898 <prvAddNewTaskToReadyList+0xdc>)
 8007868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	20007a00 	.word	0x20007a00
 8007884:	2000752c 	.word	0x2000752c
 8007888:	20007a0c 	.word	0x20007a0c
 800788c:	20007a1c 	.word	0x20007a1c
 8007890:	20007a08 	.word	0x20007a08
 8007894:	20007530 	.word	0x20007530
 8007898:	e000ed04 	.word	0xe000ed04

0800789c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80078a4:	2300      	movs	r3, #0
 80078a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d018      	beq.n	80078e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80078ae:	4b14      	ldr	r3, [pc, #80]	@ (8007900 <vTaskDelay+0x64>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <vTaskDelay+0x32>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	60bb      	str	r3, [r7, #8]
}
 80078c8:	bf00      	nop
 80078ca:	bf00      	nop
 80078cc:	e7fd      	b.n	80078ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078ce:	f000 f883 	bl	80079d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078d2:	2100      	movs	r1, #0
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fd1b 	bl	8008310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078da:	f000 f88b 	bl	80079f4 <xTaskResumeAll>
 80078de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d107      	bne.n	80078f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80078e6:	4b07      	ldr	r3, [pc, #28]	@ (8007904 <vTaskDelay+0x68>)
 80078e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20007a28 	.word	0x20007a28
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	@ 0x28
 800790c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007916:	463a      	mov	r2, r7
 8007918:	1d39      	adds	r1, r7, #4
 800791a:	f107 0308 	add.w	r3, r7, #8
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff f834 	bl	800698c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	9202      	str	r2, [sp, #8]
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	2300      	movs	r3, #0
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	2300      	movs	r3, #0
 8007934:	460a      	mov	r2, r1
 8007936:	4922      	ldr	r1, [pc, #136]	@ (80079c0 <vTaskStartScheduler+0xb8>)
 8007938:	4822      	ldr	r0, [pc, #136]	@ (80079c4 <vTaskStartScheduler+0xbc>)
 800793a:	f7ff fe09 	bl	8007550 <xTaskCreateStatic>
 800793e:	4603      	mov	r3, r0
 8007940:	4a21      	ldr	r2, [pc, #132]	@ (80079c8 <vTaskStartScheduler+0xc0>)
 8007942:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007944:	4b20      	ldr	r3, [pc, #128]	@ (80079c8 <vTaskStartScheduler+0xc0>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800794c:	2301      	movs	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e001      	b.n	8007956 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007952:	2300      	movs	r3, #0
 8007954:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d102      	bne.n	8007962 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800795c:	f000 fd2c 	bl	80083b8 <xTimerCreateTimerTask>
 8007960:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d116      	bne.n	8007996 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	613b      	str	r3, [r7, #16]
}
 800797a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800797c:	4b13      	ldr	r3, [pc, #76]	@ (80079cc <vTaskStartScheduler+0xc4>)
 800797e:	f04f 32ff 	mov.w	r2, #4294967295
 8007982:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007984:	4b12      	ldr	r3, [pc, #72]	@ (80079d0 <vTaskStartScheduler+0xc8>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800798a:	4b12      	ldr	r3, [pc, #72]	@ (80079d4 <vTaskStartScheduler+0xcc>)
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007990:	f001 f8f6 	bl	8008b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007994:	e00f      	b.n	80079b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d10b      	bne.n	80079b6 <vTaskStartScheduler+0xae>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	60fb      	str	r3, [r7, #12]
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	e7fd      	b.n	80079b2 <vTaskStartScheduler+0xaa>
}
 80079b6:	bf00      	nop
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	08019f20 	.word	0x08019f20
 80079c4:	08008049 	.word	0x08008049
 80079c8:	20007a24 	.word	0x20007a24
 80079cc:	20007a20 	.word	0x20007a20
 80079d0:	20007a0c 	.word	0x20007a0c
 80079d4:	20007a04 	.word	0x20007a04

080079d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079dc:	4b04      	ldr	r3, [pc, #16]	@ (80079f0 <vTaskSuspendAll+0x18>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	4a03      	ldr	r2, [pc, #12]	@ (80079f0 <vTaskSuspendAll+0x18>)
 80079e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079e6:	bf00      	nop
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	20007a28 	.word	0x20007a28

080079f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a02:	4b42      	ldr	r3, [pc, #264]	@ (8007b0c <xTaskResumeAll+0x118>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10b      	bne.n	8007a22 <xTaskResumeAll+0x2e>
	__asm volatile
 8007a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	603b      	str	r3, [r7, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	bf00      	nop
 8007a20:	e7fd      	b.n	8007a1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a22:	f001 f951 	bl	8008cc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a26:	4b39      	ldr	r3, [pc, #228]	@ (8007b0c <xTaskResumeAll+0x118>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	4a37      	ldr	r2, [pc, #220]	@ (8007b0c <xTaskResumeAll+0x118>)
 8007a2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a30:	4b36      	ldr	r3, [pc, #216]	@ (8007b0c <xTaskResumeAll+0x118>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d162      	bne.n	8007afe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a38:	4b35      	ldr	r3, [pc, #212]	@ (8007b10 <xTaskResumeAll+0x11c>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d05e      	beq.n	8007afe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a40:	e02f      	b.n	8007aa2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a42:	4b34      	ldr	r3, [pc, #208]	@ (8007b14 <xTaskResumeAll+0x120>)
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3318      	adds	r3, #24
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff f85a 	bl	8006b08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff f855 	bl	8006b08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a62:	4b2d      	ldr	r3, [pc, #180]	@ (8007b18 <xTaskResumeAll+0x124>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d903      	bls.n	8007a72 <xTaskResumeAll+0x7e>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8007b18 <xTaskResumeAll+0x124>)
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a76:	4613      	mov	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4413      	add	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4a27      	ldr	r2, [pc, #156]	@ (8007b1c <xTaskResumeAll+0x128>)
 8007a80:	441a      	add	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4619      	mov	r1, r3
 8007a88:	4610      	mov	r0, r2
 8007a8a:	f7fe ffe0 	bl	8006a4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a92:	4b23      	ldr	r3, [pc, #140]	@ (8007b20 <xTaskResumeAll+0x12c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d302      	bcc.n	8007aa2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007a9c:	4b21      	ldr	r3, [pc, #132]	@ (8007b24 <xTaskResumeAll+0x130>)
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8007b14 <xTaskResumeAll+0x120>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1cb      	bne.n	8007a42 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ab0:	f000 fb80 	bl	80081b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8007b28 <xTaskResumeAll+0x134>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d010      	beq.n	8007ae2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ac0:	f000 f846 	bl	8007b50 <xTaskIncrementTick>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007aca:	4b16      	ldr	r3, [pc, #88]	@ (8007b24 <xTaskResumeAll+0x130>)
 8007acc:	2201      	movs	r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1f1      	bne.n	8007ac0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007adc:	4b12      	ldr	r3, [pc, #72]	@ (8007b28 <xTaskResumeAll+0x134>)
 8007ade:	2200      	movs	r2, #0
 8007ae0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ae2:	4b10      	ldr	r3, [pc, #64]	@ (8007b24 <xTaskResumeAll+0x130>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d009      	beq.n	8007afe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007aea:	2301      	movs	r3, #1
 8007aec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007aee:	4b0f      	ldr	r3, [pc, #60]	@ (8007b2c <xTaskResumeAll+0x138>)
 8007af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007afe:	f001 f915 	bl	8008d2c <vPortExitCritical>

	return xAlreadyYielded;
 8007b02:	68bb      	ldr	r3, [r7, #8]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20007a28 	.word	0x20007a28
 8007b10:	20007a00 	.word	0x20007a00
 8007b14:	200079c0 	.word	0x200079c0
 8007b18:	20007a08 	.word	0x20007a08
 8007b1c:	20007530 	.word	0x20007530
 8007b20:	2000752c 	.word	0x2000752c
 8007b24:	20007a14 	.word	0x20007a14
 8007b28:	20007a10 	.word	0x20007a10
 8007b2c:	e000ed04 	.word	0xe000ed04

08007b30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b36:	4b05      	ldr	r3, [pc, #20]	@ (8007b4c <xTaskGetTickCount+0x1c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b3c:	687b      	ldr	r3, [r7, #4]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	370c      	adds	r7, #12
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	20007a04 	.word	0x20007a04

08007b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b086      	sub	sp, #24
 8007b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b56:	2300      	movs	r3, #0
 8007b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8007c98 <xTaskIncrementTick+0x148>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f040 8090 	bne.w	8007c84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b64:	4b4d      	ldr	r3, [pc, #308]	@ (8007c9c <xTaskIncrementTick+0x14c>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8007c9c <xTaskIncrementTick+0x14c>)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d121      	bne.n	8007bbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b78:	4b49      	ldr	r3, [pc, #292]	@ (8007ca0 <xTaskIncrementTick+0x150>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00b      	beq.n	8007b9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	603b      	str	r3, [r7, #0]
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop
 8007b98:	e7fd      	b.n	8007b96 <xTaskIncrementTick+0x46>
 8007b9a:	4b41      	ldr	r3, [pc, #260]	@ (8007ca0 <xTaskIncrementTick+0x150>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	4b40      	ldr	r3, [pc, #256]	@ (8007ca4 <xTaskIncrementTick+0x154>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a3e      	ldr	r2, [pc, #248]	@ (8007ca0 <xTaskIncrementTick+0x150>)
 8007ba6:	6013      	str	r3, [r2, #0]
 8007ba8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ca4 <xTaskIncrementTick+0x154>)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	4b3e      	ldr	r3, [pc, #248]	@ (8007ca8 <xTaskIncrementTick+0x158>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8007ca8 <xTaskIncrementTick+0x158>)
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	f000 fafc 	bl	80081b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8007cac <xTaskIncrementTick+0x15c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d349      	bcc.n	8007c5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bc6:	4b36      	ldr	r3, [pc, #216]	@ (8007ca0 <xTaskIncrementTick+0x150>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bd0:	4b36      	ldr	r3, [pc, #216]	@ (8007cac <xTaskIncrementTick+0x15c>)
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd6:	601a      	str	r2, [r3, #0]
					break;
 8007bd8:	e03f      	b.n	8007c5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bda:	4b31      	ldr	r3, [pc, #196]	@ (8007ca0 <xTaskIncrementTick+0x150>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d203      	bcs.n	8007bfa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8007cac <xTaskIncrementTick+0x15c>)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bf8:	e02f      	b.n	8007c5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fe ff82 	bl	8006b08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d004      	beq.n	8007c16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	3318      	adds	r3, #24
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fe ff79 	bl	8006b08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c1a:	4b25      	ldr	r3, [pc, #148]	@ (8007cb0 <xTaskIncrementTick+0x160>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d903      	bls.n	8007c2a <xTaskIncrementTick+0xda>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c26:	4a22      	ldr	r2, [pc, #136]	@ (8007cb0 <xTaskIncrementTick+0x160>)
 8007c28:	6013      	str	r3, [r2, #0]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c2e:	4613      	mov	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4a1f      	ldr	r2, [pc, #124]	@ (8007cb4 <xTaskIncrementTick+0x164>)
 8007c38:	441a      	add	r2, r3
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4610      	mov	r0, r2
 8007c42:	f7fe ff04 	bl	8006a4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb8 <xTaskIncrementTick+0x168>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d3b8      	bcc.n	8007bc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c58:	e7b5      	b.n	8007bc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c5a:	4b17      	ldr	r3, [pc, #92]	@ (8007cb8 <xTaskIncrementTick+0x168>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c60:	4914      	ldr	r1, [pc, #80]	@ (8007cb4 <xTaskIncrementTick+0x164>)
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d901      	bls.n	8007c76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007c72:	2301      	movs	r3, #1
 8007c74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c76:	4b11      	ldr	r3, [pc, #68]	@ (8007cbc <xTaskIncrementTick+0x16c>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d007      	beq.n	8007c8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	617b      	str	r3, [r7, #20]
 8007c82:	e004      	b.n	8007c8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c84:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc0 <xTaskIncrementTick+0x170>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8007cc0 <xTaskIncrementTick+0x170>)
 8007c8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c8e:	697b      	ldr	r3, [r7, #20]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20007a28 	.word	0x20007a28
 8007c9c:	20007a04 	.word	0x20007a04
 8007ca0:	200079b8 	.word	0x200079b8
 8007ca4:	200079bc 	.word	0x200079bc
 8007ca8:	20007a18 	.word	0x20007a18
 8007cac:	20007a20 	.word	0x20007a20
 8007cb0:	20007a08 	.word	0x20007a08
 8007cb4:	20007530 	.word	0x20007530
 8007cb8:	2000752c 	.word	0x2000752c
 8007cbc:	20007a14 	.word	0x20007a14
 8007cc0:	20007a10 	.word	0x20007a10

08007cc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cca:	4b28      	ldr	r3, [pc, #160]	@ (8007d6c <vTaskSwitchContext+0xa8>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cd2:	4b27      	ldr	r3, [pc, #156]	@ (8007d70 <vTaskSwitchContext+0xac>)
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cd8:	e042      	b.n	8007d60 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007cda:	4b25      	ldr	r3, [pc, #148]	@ (8007d70 <vTaskSwitchContext+0xac>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce0:	4b24      	ldr	r3, [pc, #144]	@ (8007d74 <vTaskSwitchContext+0xb0>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	e011      	b.n	8007d0c <vTaskSwitchContext+0x48>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10b      	bne.n	8007d06 <vTaskSwitchContext+0x42>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	607b      	str	r3, [r7, #4]
}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	e7fd      	b.n	8007d02 <vTaskSwitchContext+0x3e>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	491a      	ldr	r1, [pc, #104]	@ (8007d78 <vTaskSwitchContext+0xb4>)
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	440b      	add	r3, r1
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0e3      	beq.n	8007ce8 <vTaskSwitchContext+0x24>
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4613      	mov	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4a13      	ldr	r2, [pc, #76]	@ (8007d78 <vTaskSwitchContext+0xb4>)
 8007d2c:	4413      	add	r3, r2
 8007d2e:	60bb      	str	r3, [r7, #8]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	3308      	adds	r3, #8
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d104      	bne.n	8007d50 <vTaskSwitchContext+0x8c>
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	605a      	str	r2, [r3, #4]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	4a09      	ldr	r2, [pc, #36]	@ (8007d7c <vTaskSwitchContext+0xb8>)
 8007d58:	6013      	str	r3, [r2, #0]
 8007d5a:	4a06      	ldr	r2, [pc, #24]	@ (8007d74 <vTaskSwitchContext+0xb0>)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6013      	str	r3, [r2, #0]
}
 8007d60:	bf00      	nop
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	20007a28 	.word	0x20007a28
 8007d70:	20007a14 	.word	0x20007a14
 8007d74:	20007a08 	.word	0x20007a08
 8007d78:	20007530 	.word	0x20007530
 8007d7c:	2000752c 	.word	0x2000752c

08007d80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10b      	bne.n	8007da8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	60fb      	str	r3, [r7, #12]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007da8:	4b07      	ldr	r3, [pc, #28]	@ (8007dc8 <vTaskPlaceOnEventList+0x48>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3318      	adds	r3, #24
 8007dae:	4619      	mov	r1, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7fe fe70 	bl	8006a96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007db6:	2101      	movs	r1, #1
 8007db8:	6838      	ldr	r0, [r7, #0]
 8007dba:	f000 faa9 	bl	8008310 <prvAddCurrentTaskToDelayedList>
}
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	2000752c 	.word	0x2000752c

08007dcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10b      	bne.n	8007df6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	617b      	str	r3, [r7, #20]
}
 8007df0:	bf00      	nop
 8007df2:	bf00      	nop
 8007df4:	e7fd      	b.n	8007df2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007df6:	4b0a      	ldr	r3, [pc, #40]	@ (8007e20 <vTaskPlaceOnEventListRestricted+0x54>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3318      	adds	r3, #24
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f7fe fe25 	bl	8006a4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d002      	beq.n	8007e10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	68b8      	ldr	r0, [r7, #8]
 8007e14:	f000 fa7c 	bl	8008310 <prvAddCurrentTaskToDelayedList>
	}
 8007e18:	bf00      	nop
 8007e1a:	3718      	adds	r7, #24
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	2000752c 	.word	0x2000752c

08007e24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10b      	bne.n	8007e52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3e:	f383 8811 	msr	BASEPRI, r3
 8007e42:	f3bf 8f6f 	isb	sy
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	60fb      	str	r3, [r7, #12]
}
 8007e4c:	bf00      	nop
 8007e4e:	bf00      	nop
 8007e50:	e7fd      	b.n	8007e4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	3318      	adds	r3, #24
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fe56 	bl	8006b08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed4 <xTaskRemoveFromEventList+0xb0>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d11d      	bne.n	8007ea0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	3304      	adds	r3, #4
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7fe fe4d 	bl	8006b08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e72:	4b19      	ldr	r3, [pc, #100]	@ (8007ed8 <xTaskRemoveFromEventList+0xb4>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d903      	bls.n	8007e82 <xTaskRemoveFromEventList+0x5e>
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7e:	4a16      	ldr	r2, [pc, #88]	@ (8007ed8 <xTaskRemoveFromEventList+0xb4>)
 8007e80:	6013      	str	r3, [r2, #0]
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4a13      	ldr	r2, [pc, #76]	@ (8007edc <xTaskRemoveFromEventList+0xb8>)
 8007e90:	441a      	add	r2, r3
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	3304      	adds	r3, #4
 8007e96:	4619      	mov	r1, r3
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7fe fdd8 	bl	8006a4e <vListInsertEnd>
 8007e9e:	e005      	b.n	8007eac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	3318      	adds	r3, #24
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	480e      	ldr	r0, [pc, #56]	@ (8007ee0 <xTaskRemoveFromEventList+0xbc>)
 8007ea8:	f7fe fdd1 	bl	8006a4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ee4 <xTaskRemoveFromEventList+0xc0>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d905      	bls.n	8007ec6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8007ee8 <xTaskRemoveFromEventList+0xc4>)
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e001      	b.n	8007eca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007eca:	697b      	ldr	r3, [r7, #20]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	20007a28 	.word	0x20007a28
 8007ed8:	20007a08 	.word	0x20007a08
 8007edc:	20007530 	.word	0x20007530
 8007ee0:	200079c0 	.word	0x200079c0
 8007ee4:	2000752c 	.word	0x2000752c
 8007ee8:	20007a14 	.word	0x20007a14

08007eec <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	60fb      	str	r3, [r7, #12]
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	e7fd      	b.n	8007f0e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007f12:	f000 fed9 	bl	8008cc8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f16:	4b07      	ldr	r3, [pc, #28]	@ (8007f34 <vTaskSetTimeOutState+0x48>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007f1e:	4b06      	ldr	r3, [pc, #24]	@ (8007f38 <vTaskSetTimeOutState+0x4c>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007f26:	f000 ff01 	bl	8008d2c <vPortExitCritical>
}
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20007a18 	.word	0x20007a18
 8007f38:	20007a04 	.word	0x20007a04

08007f3c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f44:	4b06      	ldr	r3, [pc, #24]	@ (8007f60 <vTaskInternalSetTimeOutState+0x24>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f4c:	4b05      	ldr	r3, [pc, #20]	@ (8007f64 <vTaskInternalSetTimeOutState+0x28>)
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	605a      	str	r2, [r3, #4]
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	20007a18 	.word	0x20007a18
 8007f64:	20007a04 	.word	0x20007a04

08007f68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10b      	bne.n	8007f90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	613b      	str	r3, [r7, #16]
}
 8007f8a:	bf00      	nop
 8007f8c:	bf00      	nop
 8007f8e:	e7fd      	b.n	8007f8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10b      	bne.n	8007fae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	60fb      	str	r3, [r7, #12]
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	e7fd      	b.n	8007faa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007fae:	f000 fe8b 	bl	8008cc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8008028 <xTaskCheckForTimeOut+0xc0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fca:	d102      	bne.n	8007fd2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61fb      	str	r3, [r7, #28]
 8007fd0:	e023      	b.n	800801a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	4b15      	ldr	r3, [pc, #84]	@ (800802c <xTaskCheckForTimeOut+0xc4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d007      	beq.n	8007fee <xTaskCheckForTimeOut+0x86>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d302      	bcc.n	8007fee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	61fb      	str	r3, [r7, #28]
 8007fec:	e015      	b.n	800801a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d20b      	bcs.n	8008010 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	1ad2      	subs	r2, r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff ff99 	bl	8007f3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800800a:	2300      	movs	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]
 800800e:	e004      	b.n	800801a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008016:	2301      	movs	r3, #1
 8008018:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800801a:	f000 fe87 	bl	8008d2c <vPortExitCritical>

	return xReturn;
 800801e:	69fb      	ldr	r3, [r7, #28]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3720      	adds	r7, #32
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	20007a04 	.word	0x20007a04
 800802c:	20007a18 	.word	0x20007a18

08008030 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008030:	b480      	push	{r7}
 8008032:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008034:	4b03      	ldr	r3, [pc, #12]	@ (8008044 <vTaskMissedYield+0x14>)
 8008036:	2201      	movs	r2, #1
 8008038:	601a      	str	r2, [r3, #0]
}
 800803a:	bf00      	nop
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	20007a14 	.word	0x20007a14

08008048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008050:	f000 f852 	bl	80080f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008054:	4b06      	ldr	r3, [pc, #24]	@ (8008070 <prvIdleTask+0x28>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d9f9      	bls.n	8008050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800805c:	4b05      	ldr	r3, [pc, #20]	@ (8008074 <prvIdleTask+0x2c>)
 800805e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800806c:	e7f0      	b.n	8008050 <prvIdleTask+0x8>
 800806e:	bf00      	nop
 8008070:	20007530 	.word	0x20007530
 8008074:	e000ed04 	.word	0xe000ed04

08008078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800807e:	2300      	movs	r3, #0
 8008080:	607b      	str	r3, [r7, #4]
 8008082:	e00c      	b.n	800809e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4a12      	ldr	r2, [pc, #72]	@ (80080d8 <prvInitialiseTaskLists+0x60>)
 8008090:	4413      	add	r3, r2
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fcae 	bl	80069f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3301      	adds	r3, #1
 800809c:	607b      	str	r3, [r7, #4]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b37      	cmp	r3, #55	@ 0x37
 80080a2:	d9ef      	bls.n	8008084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080a4:	480d      	ldr	r0, [pc, #52]	@ (80080dc <prvInitialiseTaskLists+0x64>)
 80080a6:	f7fe fca5 	bl	80069f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080aa:	480d      	ldr	r0, [pc, #52]	@ (80080e0 <prvInitialiseTaskLists+0x68>)
 80080ac:	f7fe fca2 	bl	80069f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080b0:	480c      	ldr	r0, [pc, #48]	@ (80080e4 <prvInitialiseTaskLists+0x6c>)
 80080b2:	f7fe fc9f 	bl	80069f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080b6:	480c      	ldr	r0, [pc, #48]	@ (80080e8 <prvInitialiseTaskLists+0x70>)
 80080b8:	f7fe fc9c 	bl	80069f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080bc:	480b      	ldr	r0, [pc, #44]	@ (80080ec <prvInitialiseTaskLists+0x74>)
 80080be:	f7fe fc99 	bl	80069f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080c2:	4b0b      	ldr	r3, [pc, #44]	@ (80080f0 <prvInitialiseTaskLists+0x78>)
 80080c4:	4a05      	ldr	r2, [pc, #20]	@ (80080dc <prvInitialiseTaskLists+0x64>)
 80080c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080c8:	4b0a      	ldr	r3, [pc, #40]	@ (80080f4 <prvInitialiseTaskLists+0x7c>)
 80080ca:	4a05      	ldr	r2, [pc, #20]	@ (80080e0 <prvInitialiseTaskLists+0x68>)
 80080cc:	601a      	str	r2, [r3, #0]
}
 80080ce:	bf00      	nop
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20007530 	.word	0x20007530
 80080dc:	20007990 	.word	0x20007990
 80080e0:	200079a4 	.word	0x200079a4
 80080e4:	200079c0 	.word	0x200079c0
 80080e8:	200079d4 	.word	0x200079d4
 80080ec:	200079ec 	.word	0x200079ec
 80080f0:	200079b8 	.word	0x200079b8
 80080f4:	200079bc 	.word	0x200079bc

080080f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080fe:	e019      	b.n	8008134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008100:	f000 fde2 	bl	8008cc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008104:	4b10      	ldr	r3, [pc, #64]	@ (8008148 <prvCheckTasksWaitingTermination+0x50>)
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3304      	adds	r3, #4
 8008110:	4618      	mov	r0, r3
 8008112:	f7fe fcf9 	bl	8006b08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008116:	4b0d      	ldr	r3, [pc, #52]	@ (800814c <prvCheckTasksWaitingTermination+0x54>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3b01      	subs	r3, #1
 800811c:	4a0b      	ldr	r2, [pc, #44]	@ (800814c <prvCheckTasksWaitingTermination+0x54>)
 800811e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008120:	4b0b      	ldr	r3, [pc, #44]	@ (8008150 <prvCheckTasksWaitingTermination+0x58>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3b01      	subs	r3, #1
 8008126:	4a0a      	ldr	r2, [pc, #40]	@ (8008150 <prvCheckTasksWaitingTermination+0x58>)
 8008128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800812a:	f000 fdff 	bl	8008d2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f810 	bl	8008154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008134:	4b06      	ldr	r3, [pc, #24]	@ (8008150 <prvCheckTasksWaitingTermination+0x58>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1e1      	bne.n	8008100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800813c:	bf00      	nop
 800813e:	bf00      	nop
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	200079d4 	.word	0x200079d4
 800814c:	20007a00 	.word	0x20007a00
 8008150:	200079e8 	.word	0x200079e8

08008154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008162:	2b00      	cmp	r3, #0
 8008164:	d108      	bne.n	8008178 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816a:	4618      	mov	r0, r3
 800816c:	f000 ff9c 	bl	80090a8 <vPortFree>
				vPortFree( pxTCB );
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 ff99 	bl	80090a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008176:	e019      	b.n	80081ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800817e:	2b01      	cmp	r3, #1
 8008180:	d103      	bne.n	800818a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 ff90 	bl	80090a8 <vPortFree>
	}
 8008188:	e010      	b.n	80081ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008190:	2b02      	cmp	r3, #2
 8008192:	d00b      	beq.n	80081ac <prvDeleteTCB+0x58>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	60fb      	str	r3, [r7, #12]
}
 80081a6:	bf00      	nop
 80081a8:	bf00      	nop
 80081aa:	e7fd      	b.n	80081a8 <prvDeleteTCB+0x54>
	}
 80081ac:	bf00      	nop
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081ba:	4b0c      	ldr	r3, [pc, #48]	@ (80081ec <prvResetNextTaskUnblockTime+0x38>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d104      	bne.n	80081ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081c4:	4b0a      	ldr	r3, [pc, #40]	@ (80081f0 <prvResetNextTaskUnblockTime+0x3c>)
 80081c6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081cc:	e008      	b.n	80081e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ce:	4b07      	ldr	r3, [pc, #28]	@ (80081ec <prvResetNextTaskUnblockTime+0x38>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4a04      	ldr	r2, [pc, #16]	@ (80081f0 <prvResetNextTaskUnblockTime+0x3c>)
 80081de:	6013      	str	r3, [r2, #0]
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	200079b8 	.word	0x200079b8
 80081f0:	20007a20 	.word	0x20007a20

080081f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008228 <xTaskGetSchedulerState+0x34>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008202:	2301      	movs	r3, #1
 8008204:	607b      	str	r3, [r7, #4]
 8008206:	e008      	b.n	800821a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008208:	4b08      	ldr	r3, [pc, #32]	@ (800822c <xTaskGetSchedulerState+0x38>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d102      	bne.n	8008216 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008210:	2302      	movs	r3, #2
 8008212:	607b      	str	r3, [r7, #4]
 8008214:	e001      	b.n	800821a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008216:	2300      	movs	r3, #0
 8008218:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800821a:	687b      	ldr	r3, [r7, #4]
	}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	20007a0c 	.word	0x20007a0c
 800822c:	20007a28 	.word	0x20007a28

08008230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800823c:	2300      	movs	r3, #0
 800823e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d058      	beq.n	80082f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008246:	4b2f      	ldr	r3, [pc, #188]	@ (8008304 <xTaskPriorityDisinherit+0xd4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	429a      	cmp	r2, r3
 800824e:	d00b      	beq.n	8008268 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	60fb      	str	r3, [r7, #12]
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	e7fd      	b.n	8008264 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10b      	bne.n	8008288 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	60bb      	str	r3, [r7, #8]
}
 8008282:	bf00      	nop
 8008284:	bf00      	nop
 8008286:	e7fd      	b.n	8008284 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800828c:	1e5a      	subs	r2, r3, #1
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800829a:	429a      	cmp	r2, r3
 800829c:	d02c      	beq.n	80082f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d128      	bne.n	80082f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fc2c 	bl	8006b08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c8:	4b0f      	ldr	r3, [pc, #60]	@ (8008308 <xTaskPriorityDisinherit+0xd8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d903      	bls.n	80082d8 <xTaskPriorityDisinherit+0xa8>
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	4a0c      	ldr	r2, [pc, #48]	@ (8008308 <xTaskPriorityDisinherit+0xd8>)
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4a09      	ldr	r2, [pc, #36]	@ (800830c <xTaskPriorityDisinherit+0xdc>)
 80082e6:	441a      	add	r2, r3
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	f7fe fbad 	bl	8006a4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082f4:	2301      	movs	r3, #1
 80082f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082f8:	697b      	ldr	r3, [r7, #20]
	}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	2000752c 	.word	0x2000752c
 8008308:	20007a08 	.word	0x20007a08
 800830c:	20007530 	.word	0x20007530

08008310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800831a:	4b21      	ldr	r3, [pc, #132]	@ (80083a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008320:	4b20      	ldr	r3, [pc, #128]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3304      	adds	r3, #4
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fbee 	bl	8006b08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d10a      	bne.n	800834a <prvAddCurrentTaskToDelayedList+0x3a>
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800833a:	4b1a      	ldr	r3, [pc, #104]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3304      	adds	r3, #4
 8008340:	4619      	mov	r1, r3
 8008342:	4819      	ldr	r0, [pc, #100]	@ (80083a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008344:	f7fe fb83 	bl	8006a4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008348:	e026      	b.n	8008398 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4413      	add	r3, r2
 8008350:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008352:	4b14      	ldr	r3, [pc, #80]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	429a      	cmp	r2, r3
 8008360:	d209      	bcs.n	8008376 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008362:	4b12      	ldr	r3, [pc, #72]	@ (80083ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	4b0f      	ldr	r3, [pc, #60]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3304      	adds	r3, #4
 800836c:	4619      	mov	r1, r3
 800836e:	4610      	mov	r0, r2
 8008370:	f7fe fb91 	bl	8006a96 <vListInsert>
}
 8008374:	e010      	b.n	8008398 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008376:	4b0e      	ldr	r3, [pc, #56]	@ (80083b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	4b0a      	ldr	r3, [pc, #40]	@ (80083a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3304      	adds	r3, #4
 8008380:	4619      	mov	r1, r3
 8008382:	4610      	mov	r0, r2
 8008384:	f7fe fb87 	bl	8006a96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008388:	4b0a      	ldr	r3, [pc, #40]	@ (80083b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	429a      	cmp	r2, r3
 8008390:	d202      	bcs.n	8008398 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008392:	4a08      	ldr	r2, [pc, #32]	@ (80083b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	6013      	str	r3, [r2, #0]
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20007a04 	.word	0x20007a04
 80083a4:	2000752c 	.word	0x2000752c
 80083a8:	200079ec 	.word	0x200079ec
 80083ac:	200079bc 	.word	0x200079bc
 80083b0:	200079b8 	.word	0x200079b8
 80083b4:	20007a20 	.word	0x20007a20

080083b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	@ 0x28
 80083bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80083c2:	f000 fb13 	bl	80089ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80083c6:	4b1d      	ldr	r3, [pc, #116]	@ (800843c <xTimerCreateTimerTask+0x84>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d021      	beq.n	8008412 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80083d6:	1d3a      	adds	r2, r7, #4
 80083d8:	f107 0108 	add.w	r1, r7, #8
 80083dc:	f107 030c 	add.w	r3, r7, #12
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe faed 	bl	80069c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	9202      	str	r2, [sp, #8]
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	2302      	movs	r3, #2
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	2300      	movs	r3, #0
 80083f6:	460a      	mov	r2, r1
 80083f8:	4911      	ldr	r1, [pc, #68]	@ (8008440 <xTimerCreateTimerTask+0x88>)
 80083fa:	4812      	ldr	r0, [pc, #72]	@ (8008444 <xTimerCreateTimerTask+0x8c>)
 80083fc:	f7ff f8a8 	bl	8007550 <xTaskCreateStatic>
 8008400:	4603      	mov	r3, r0
 8008402:	4a11      	ldr	r2, [pc, #68]	@ (8008448 <xTimerCreateTimerTask+0x90>)
 8008404:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008406:	4b10      	ldr	r3, [pc, #64]	@ (8008448 <xTimerCreateTimerTask+0x90>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800840e:	2301      	movs	r3, #1
 8008410:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10b      	bne.n	8008430 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	613b      	str	r3, [r7, #16]
}
 800842a:	bf00      	nop
 800842c:	bf00      	nop
 800842e:	e7fd      	b.n	800842c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008430:	697b      	ldr	r3, [r7, #20]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3718      	adds	r7, #24
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20007a5c 	.word	0x20007a5c
 8008440:	08019f28 	.word	0x08019f28
 8008444:	08008585 	.word	0x08008585
 8008448:	20007a60 	.word	0x20007a60

0800844c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b08a      	sub	sp, #40	@ 0x28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800845a:	2300      	movs	r3, #0
 800845c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10b      	bne.n	800847c <xTimerGenericCommand+0x30>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	623b      	str	r3, [r7, #32]
}
 8008476:	bf00      	nop
 8008478:	bf00      	nop
 800847a:	e7fd      	b.n	8008478 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800847c:	4b19      	ldr	r3, [pc, #100]	@ (80084e4 <xTimerGenericCommand+0x98>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d02a      	beq.n	80084da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b05      	cmp	r3, #5
 8008494:	dc18      	bgt.n	80084c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008496:	f7ff fead 	bl	80081f4 <xTaskGetSchedulerState>
 800849a:	4603      	mov	r3, r0
 800849c:	2b02      	cmp	r3, #2
 800849e:	d109      	bne.n	80084b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084a0:	4b10      	ldr	r3, [pc, #64]	@ (80084e4 <xTimerGenericCommand+0x98>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	f107 0110 	add.w	r1, r7, #16
 80084a8:	2300      	movs	r3, #0
 80084aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084ac:	f7fe fc60 	bl	8006d70 <xQueueGenericSend>
 80084b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80084b2:	e012      	b.n	80084da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084b4:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <xTimerGenericCommand+0x98>)
 80084b6:	6818      	ldr	r0, [r3, #0]
 80084b8:	f107 0110 	add.w	r1, r7, #16
 80084bc:	2300      	movs	r3, #0
 80084be:	2200      	movs	r2, #0
 80084c0:	f7fe fc56 	bl	8006d70 <xQueueGenericSend>
 80084c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80084c6:	e008      	b.n	80084da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084c8:	4b06      	ldr	r3, [pc, #24]	@ (80084e4 <xTimerGenericCommand+0x98>)
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	f107 0110 	add.w	r1, r7, #16
 80084d0:	2300      	movs	r3, #0
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	f7fe fd4e 	bl	8006f74 <xQueueGenericSendFromISR>
 80084d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3728      	adds	r7, #40	@ 0x28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20007a5c 	.word	0x20007a5c

080084e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b088      	sub	sp, #32
 80084ec:	af02      	add	r7, sp, #8
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f2:	4b23      	ldr	r3, [pc, #140]	@ (8008580 <prvProcessExpiredTimer+0x98>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	3304      	adds	r3, #4
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe fb01 	bl	8006b08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d023      	beq.n	800855c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	699a      	ldr	r2, [r3, #24]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	18d1      	adds	r1, r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	6978      	ldr	r0, [r7, #20]
 8008522:	f000 f8d5 	bl	80086d0 <prvInsertTimerInActiveList>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d020      	beq.n	800856e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800852c:	2300      	movs	r3, #0
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	2300      	movs	r3, #0
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	2100      	movs	r1, #0
 8008536:	6978      	ldr	r0, [r7, #20]
 8008538:	f7ff ff88 	bl	800844c <xTimerGenericCommand>
 800853c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d114      	bne.n	800856e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	60fb      	str	r3, [r7, #12]
}
 8008556:	bf00      	nop
 8008558:	bf00      	nop
 800855a:	e7fd      	b.n	8008558 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008562:	f023 0301 	bic.w	r3, r3, #1
 8008566:	b2da      	uxtb	r2, r3
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	6978      	ldr	r0, [r7, #20]
 8008574:	4798      	blx	r3
}
 8008576:	bf00      	nop
 8008578:	3718      	adds	r7, #24
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20007a54 	.word	0x20007a54

08008584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800858c:	f107 0308 	add.w	r3, r7, #8
 8008590:	4618      	mov	r0, r3
 8008592:	f000 f859 	bl	8008648 <prvGetNextExpireTime>
 8008596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4619      	mov	r1, r3
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f805 	bl	80085ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80085a2:	f000 f8d7 	bl	8008754 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085a6:	bf00      	nop
 80085a8:	e7f0      	b.n	800858c <prvTimerTask+0x8>
	...

080085ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085b6:	f7ff fa0f 	bl	80079d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085ba:	f107 0308 	add.w	r3, r7, #8
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 f866 	bl	8008690 <prvSampleTimeNow>
 80085c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d130      	bne.n	800862e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <prvProcessTimerOrBlockTask+0x3c>
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d806      	bhi.n	80085e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80085da:	f7ff fa0b 	bl	80079f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80085de:	68f9      	ldr	r1, [r7, #12]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f7ff ff81 	bl	80084e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80085e6:	e024      	b.n	8008632 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d008      	beq.n	8008600 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085ee:	4b13      	ldr	r3, [pc, #76]	@ (800863c <prvProcessTimerOrBlockTask+0x90>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <prvProcessTimerOrBlockTask+0x50>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <prvProcessTimerOrBlockTask+0x52>
 80085fc:	2300      	movs	r3, #0
 80085fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008600:	4b0f      	ldr	r3, [pc, #60]	@ (8008640 <prvProcessTimerOrBlockTask+0x94>)
 8008602:	6818      	ldr	r0, [r3, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	4619      	mov	r1, r3
 800860e:	f7fe ff6b 	bl	80074e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008612:	f7ff f9ef 	bl	80079f4 <xTaskResumeAll>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800861c:	4b09      	ldr	r3, [pc, #36]	@ (8008644 <prvProcessTimerOrBlockTask+0x98>)
 800861e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	f3bf 8f6f 	isb	sy
}
 800862c:	e001      	b.n	8008632 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800862e:	f7ff f9e1 	bl	80079f4 <xTaskResumeAll>
}
 8008632:	bf00      	nop
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20007a58 	.word	0x20007a58
 8008640:	20007a5c 	.word	0x20007a5c
 8008644:	e000ed04 	.word	0xe000ed04

08008648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008650:	4b0e      	ldr	r3, [pc, #56]	@ (800868c <prvGetNextExpireTime+0x44>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <prvGetNextExpireTime+0x16>
 800865a:	2201      	movs	r2, #1
 800865c:	e000      	b.n	8008660 <prvGetNextExpireTime+0x18>
 800865e:	2200      	movs	r2, #0
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d105      	bne.n	8008678 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800866c:	4b07      	ldr	r3, [pc, #28]	@ (800868c <prvGetNextExpireTime+0x44>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	60fb      	str	r3, [r7, #12]
 8008676:	e001      	b.n	800867c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800867c:	68fb      	ldr	r3, [r7, #12]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20007a54 	.word	0x20007a54

08008690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008698:	f7ff fa4a 	bl	8007b30 <xTaskGetTickCount>
 800869c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800869e:	4b0b      	ldr	r3, [pc, #44]	@ (80086cc <prvSampleTimeNow+0x3c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d205      	bcs.n	80086b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086a8:	f000 f93a 	bl	8008920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	601a      	str	r2, [r3, #0]
 80086b2:	e002      	b.n	80086ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086ba:	4a04      	ldr	r2, [pc, #16]	@ (80086cc <prvSampleTimeNow+0x3c>)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086c0:	68fb      	ldr	r3, [r7, #12]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20007a64 	.word	0x20007a64

080086d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d812      	bhi.n	800871c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	1ad2      	subs	r2, r2, r3
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	429a      	cmp	r2, r3
 8008702:	d302      	bcc.n	800870a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008704:	2301      	movs	r3, #1
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	e01b      	b.n	8008742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800870a:	4b10      	ldr	r3, [pc, #64]	@ (800874c <prvInsertTimerInActiveList+0x7c>)
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3304      	adds	r3, #4
 8008712:	4619      	mov	r1, r3
 8008714:	4610      	mov	r0, r2
 8008716:	f7fe f9be 	bl	8006a96 <vListInsert>
 800871a:	e012      	b.n	8008742 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d206      	bcs.n	8008732 <prvInsertTimerInActiveList+0x62>
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	429a      	cmp	r2, r3
 800872a:	d302      	bcc.n	8008732 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800872c:	2301      	movs	r3, #1
 800872e:	617b      	str	r3, [r7, #20]
 8008730:	e007      	b.n	8008742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008732:	4b07      	ldr	r3, [pc, #28]	@ (8008750 <prvInsertTimerInActiveList+0x80>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3304      	adds	r3, #4
 800873a:	4619      	mov	r1, r3
 800873c:	4610      	mov	r0, r2
 800873e:	f7fe f9aa 	bl	8006a96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008742:	697b      	ldr	r3, [r7, #20]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	20007a58 	.word	0x20007a58
 8008750:	20007a54 	.word	0x20007a54

08008754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08e      	sub	sp, #56	@ 0x38
 8008758:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800875a:	e0ce      	b.n	80088fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	da19      	bge.n	8008796 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008762:	1d3b      	adds	r3, r7, #4
 8008764:	3304      	adds	r3, #4
 8008766:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10b      	bne.n	8008786 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	61fb      	str	r3, [r7, #28]
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	e7fd      	b.n	8008782 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800878c:	6850      	ldr	r0, [r2, #4]
 800878e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008790:	6892      	ldr	r2, [r2, #8]
 8008792:	4611      	mov	r1, r2
 8008794:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	f2c0 80ae 	blt.w	80088fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d004      	beq.n	80087b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe f9aa 	bl	8006b08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087b4:	463b      	mov	r3, r7
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff ff6a 	bl	8008690 <prvSampleTimeNow>
 80087bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b09      	cmp	r3, #9
 80087c2:	f200 8097 	bhi.w	80088f4 <prvProcessReceivedCommands+0x1a0>
 80087c6:	a201      	add	r2, pc, #4	@ (adr r2, 80087cc <prvProcessReceivedCommands+0x78>)
 80087c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087cc:	080087f5 	.word	0x080087f5
 80087d0:	080087f5 	.word	0x080087f5
 80087d4:	080087f5 	.word	0x080087f5
 80087d8:	0800886b 	.word	0x0800886b
 80087dc:	0800887f 	.word	0x0800887f
 80087e0:	080088cb 	.word	0x080088cb
 80087e4:	080087f5 	.word	0x080087f5
 80087e8:	080087f5 	.word	0x080087f5
 80087ec:	0800886b 	.word	0x0800886b
 80087f0:	0800887f 	.word	0x0800887f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087fa:	f043 0301 	orr.w	r3, r3, #1
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008802:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	18d1      	adds	r1, r2, r3
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008814:	f7ff ff5c 	bl	80086d0 <prvInsertTimerInActiveList>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d06c      	beq.n	80088f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800881e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008820:	6a1b      	ldr	r3, [r3, #32]
 8008822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008824:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d061      	beq.n	80088f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	441a      	add	r2, r3
 800883c:	2300      	movs	r3, #0
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	2300      	movs	r3, #0
 8008842:	2100      	movs	r1, #0
 8008844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008846:	f7ff fe01 	bl	800844c <xTimerGenericCommand>
 800884a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d152      	bne.n	80088f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	61bb      	str	r3, [r7, #24]
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	e7fd      	b.n	8008866 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800886a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800886c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008870:	f023 0301 	bic.w	r3, r3, #1
 8008874:	b2da      	uxtb	r2, r3
 8008876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008878:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800887c:	e03d      	b.n	80088fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008884:	f043 0301 	orr.w	r3, r3, #1
 8008888:	b2da      	uxtb	r2, r3
 800888a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008894:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10b      	bne.n	80088b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	617b      	str	r3, [r7, #20]
}
 80088b0:	bf00      	nop
 80088b2:	bf00      	nop
 80088b4:	e7fd      	b.n	80088b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	18d1      	adds	r1, r2, r3
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c4:	f7ff ff04 	bl	80086d0 <prvInsertTimerInActiveList>
					break;
 80088c8:	e017      	b.n	80088fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088d0:	f003 0302 	and.w	r3, r3, #2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d103      	bne.n	80088e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80088d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088da:	f000 fbe5 	bl	80090a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088de:	e00c      	b.n	80088fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088e6:	f023 0301 	bic.w	r3, r3, #1
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80088f2:	e002      	b.n	80088fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80088f4:	bf00      	nop
 80088f6:	e000      	b.n	80088fa <prvProcessReceivedCommands+0x1a6>
					break;
 80088f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088fa:	4b08      	ldr	r3, [pc, #32]	@ (800891c <prvProcessReceivedCommands+0x1c8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	1d39      	adds	r1, r7, #4
 8008900:	2200      	movs	r2, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe fbd4 	bl	80070b0 <xQueueReceive>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	f47f af26 	bne.w	800875c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008910:	bf00      	nop
 8008912:	bf00      	nop
 8008914:	3730      	adds	r7, #48	@ 0x30
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20007a5c 	.word	0x20007a5c

08008920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008926:	e049      	b.n	80089bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008928:	4b2e      	ldr	r3, [pc, #184]	@ (80089e4 <prvSwitchTimerLists+0xc4>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008932:	4b2c      	ldr	r3, [pc, #176]	@ (80089e4 <prvSwitchTimerLists+0xc4>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3304      	adds	r3, #4
 8008940:	4618      	mov	r0, r3
 8008942:	f7fe f8e1 	bl	8006b08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d02f      	beq.n	80089bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	4413      	add	r3, r2
 8008964:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	429a      	cmp	r2, r3
 800896c:	d90e      	bls.n	800898c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800897a:	4b1a      	ldr	r3, [pc, #104]	@ (80089e4 <prvSwitchTimerLists+0xc4>)
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3304      	adds	r3, #4
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f7fe f886 	bl	8006a96 <vListInsert>
 800898a:	e017      	b.n	80089bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800898c:	2300      	movs	r3, #0
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	2300      	movs	r3, #0
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	2100      	movs	r1, #0
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f7ff fd58 	bl	800844c <xTimerGenericCommand>
 800899c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10b      	bne.n	80089bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	603b      	str	r3, [r7, #0]
}
 80089b6:	bf00      	nop
 80089b8:	bf00      	nop
 80089ba:	e7fd      	b.n	80089b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089bc:	4b09      	ldr	r3, [pc, #36]	@ (80089e4 <prvSwitchTimerLists+0xc4>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1b0      	bne.n	8008928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089c6:	4b07      	ldr	r3, [pc, #28]	@ (80089e4 <prvSwitchTimerLists+0xc4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089cc:	4b06      	ldr	r3, [pc, #24]	@ (80089e8 <prvSwitchTimerLists+0xc8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a04      	ldr	r2, [pc, #16]	@ (80089e4 <prvSwitchTimerLists+0xc4>)
 80089d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089d4:	4a04      	ldr	r2, [pc, #16]	@ (80089e8 <prvSwitchTimerLists+0xc8>)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	6013      	str	r3, [r2, #0]
}
 80089da:	bf00      	nop
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20007a54 	.word	0x20007a54
 80089e8:	20007a58 	.word	0x20007a58

080089ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80089f2:	f000 f969 	bl	8008cc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80089f6:	4b15      	ldr	r3, [pc, #84]	@ (8008a4c <prvCheckForValidListAndQueue+0x60>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d120      	bne.n	8008a40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80089fe:	4814      	ldr	r0, [pc, #80]	@ (8008a50 <prvCheckForValidListAndQueue+0x64>)
 8008a00:	f7fd fff8 	bl	80069f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a04:	4813      	ldr	r0, [pc, #76]	@ (8008a54 <prvCheckForValidListAndQueue+0x68>)
 8008a06:	f7fd fff5 	bl	80069f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a0a:	4b13      	ldr	r3, [pc, #76]	@ (8008a58 <prvCheckForValidListAndQueue+0x6c>)
 8008a0c:	4a10      	ldr	r2, [pc, #64]	@ (8008a50 <prvCheckForValidListAndQueue+0x64>)
 8008a0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a10:	4b12      	ldr	r3, [pc, #72]	@ (8008a5c <prvCheckForValidListAndQueue+0x70>)
 8008a12:	4a10      	ldr	r2, [pc, #64]	@ (8008a54 <prvCheckForValidListAndQueue+0x68>)
 8008a14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a16:	2300      	movs	r3, #0
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	4b11      	ldr	r3, [pc, #68]	@ (8008a60 <prvCheckForValidListAndQueue+0x74>)
 8008a1c:	4a11      	ldr	r2, [pc, #68]	@ (8008a64 <prvCheckForValidListAndQueue+0x78>)
 8008a1e:	2110      	movs	r1, #16
 8008a20:	200a      	movs	r0, #10
 8008a22:	f7fe f905 	bl	8006c30 <xQueueGenericCreateStatic>
 8008a26:	4603      	mov	r3, r0
 8008a28:	4a08      	ldr	r2, [pc, #32]	@ (8008a4c <prvCheckForValidListAndQueue+0x60>)
 8008a2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a2c:	4b07      	ldr	r3, [pc, #28]	@ (8008a4c <prvCheckForValidListAndQueue+0x60>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a34:	4b05      	ldr	r3, [pc, #20]	@ (8008a4c <prvCheckForValidListAndQueue+0x60>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	490b      	ldr	r1, [pc, #44]	@ (8008a68 <prvCheckForValidListAndQueue+0x7c>)
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fe fd2a 	bl	8007494 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a40:	f000 f974 	bl	8008d2c <vPortExitCritical>
}
 8008a44:	bf00      	nop
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20007a5c 	.word	0x20007a5c
 8008a50:	20007a2c 	.word	0x20007a2c
 8008a54:	20007a40 	.word	0x20007a40
 8008a58:	20007a54 	.word	0x20007a54
 8008a5c:	20007a58 	.word	0x20007a58
 8008a60:	20007b08 	.word	0x20007b08
 8008a64:	20007a68 	.word	0x20007a68
 8008a68:	08019f30 	.word	0x08019f30

08008a6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3b04      	subs	r3, #4
 8008a7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3b04      	subs	r3, #4
 8008a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f023 0201 	bic.w	r2, r3, #1
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3b04      	subs	r3, #4
 8008a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8008ad0 <pxPortInitialiseStack+0x64>)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	3b14      	subs	r3, #20
 8008aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	3b04      	subs	r3, #4
 8008ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f06f 0202 	mvn.w	r2, #2
 8008aba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3b20      	subs	r3, #32
 8008ac0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	08008ad5 	.word	0x08008ad5

08008ad4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ade:	4b13      	ldr	r3, [pc, #76]	@ (8008b2c <prvTaskExitError+0x58>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae6:	d00b      	beq.n	8008b00 <prvTaskExitError+0x2c>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	60fb      	str	r3, [r7, #12]
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	e7fd      	b.n	8008afc <prvTaskExitError+0x28>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	60bb      	str	r3, [r7, #8]
}
 8008b12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b14:	bf00      	nop
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0fc      	beq.n	8008b16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b1c:	bf00      	nop
 8008b1e:	bf00      	nop
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	20000010 	.word	0x20000010

08008b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b30:	4b07      	ldr	r3, [pc, #28]	@ (8008b50 <pxCurrentTCBConst2>)
 8008b32:	6819      	ldr	r1, [r3, #0]
 8008b34:	6808      	ldr	r0, [r1, #0]
 8008b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3a:	f380 8809 	msr	PSP, r0
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f04f 0000 	mov.w	r0, #0
 8008b46:	f380 8811 	msr	BASEPRI, r0
 8008b4a:	4770      	bx	lr
 8008b4c:	f3af 8000 	nop.w

08008b50 <pxCurrentTCBConst2>:
 8008b50:	2000752c 	.word	0x2000752c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop

08008b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b58:	4808      	ldr	r0, [pc, #32]	@ (8008b7c <prvPortStartFirstTask+0x24>)
 8008b5a:	6800      	ldr	r0, [r0, #0]
 8008b5c:	6800      	ldr	r0, [r0, #0]
 8008b5e:	f380 8808 	msr	MSP, r0
 8008b62:	f04f 0000 	mov.w	r0, #0
 8008b66:	f380 8814 	msr	CONTROL, r0
 8008b6a:	b662      	cpsie	i
 8008b6c:	b661      	cpsie	f
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	df00      	svc	0
 8008b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b7a:	bf00      	nop
 8008b7c:	e000ed08 	.word	0xe000ed08

08008b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b86:	4b47      	ldr	r3, [pc, #284]	@ (8008ca4 <xPortStartScheduler+0x124>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a47      	ldr	r2, [pc, #284]	@ (8008ca8 <xPortStartScheduler+0x128>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d10b      	bne.n	8008ba8 <xPortStartScheduler+0x28>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	60fb      	str	r3, [r7, #12]
}
 8008ba2:	bf00      	nop
 8008ba4:	bf00      	nop
 8008ba6:	e7fd      	b.n	8008ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ca4 <xPortStartScheduler+0x124>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a3f      	ldr	r2, [pc, #252]	@ (8008cac <xPortStartScheduler+0x12c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d10b      	bne.n	8008bca <xPortStartScheduler+0x4a>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	613b      	str	r3, [r7, #16]
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop
 8008bc8:	e7fd      	b.n	8008bc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bca:	4b39      	ldr	r3, [pc, #228]	@ (8008cb0 <xPortStartScheduler+0x130>)
 8008bcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	22ff      	movs	r2, #255	@ 0xff
 8008bda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	4b31      	ldr	r3, [pc, #196]	@ (8008cb4 <xPortStartScheduler+0x134>)
 8008bf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008bf2:	4b31      	ldr	r3, [pc, #196]	@ (8008cb8 <xPortStartScheduler+0x138>)
 8008bf4:	2207      	movs	r2, #7
 8008bf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bf8:	e009      	b.n	8008c0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8008cb8 <xPortStartScheduler+0x138>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	4a2d      	ldr	r2, [pc, #180]	@ (8008cb8 <xPortStartScheduler+0x138>)
 8008c02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c0e:	78fb      	ldrb	r3, [r7, #3]
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c16:	2b80      	cmp	r3, #128	@ 0x80
 8008c18:	d0ef      	beq.n	8008bfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c1a:	4b27      	ldr	r3, [pc, #156]	@ (8008cb8 <xPortStartScheduler+0x138>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f1c3 0307 	rsb	r3, r3, #7
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d00b      	beq.n	8008c3e <xPortStartScheduler+0xbe>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	60bb      	str	r3, [r7, #8]
}
 8008c38:	bf00      	nop
 8008c3a:	bf00      	nop
 8008c3c:	e7fd      	b.n	8008c3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb8 <xPortStartScheduler+0x138>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	021b      	lsls	r3, r3, #8
 8008c44:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb8 <xPortStartScheduler+0x138>)
 8008c46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c48:	4b1b      	ldr	r3, [pc, #108]	@ (8008cb8 <xPortStartScheduler+0x138>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c50:	4a19      	ldr	r2, [pc, #100]	@ (8008cb8 <xPortStartScheduler+0x138>)
 8008c52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c5c:	4b17      	ldr	r3, [pc, #92]	@ (8008cbc <xPortStartScheduler+0x13c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a16      	ldr	r2, [pc, #88]	@ (8008cbc <xPortStartScheduler+0x13c>)
 8008c62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c68:	4b14      	ldr	r3, [pc, #80]	@ (8008cbc <xPortStartScheduler+0x13c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a13      	ldr	r2, [pc, #76]	@ (8008cbc <xPortStartScheduler+0x13c>)
 8008c6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008c72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c74:	f000 f8da 	bl	8008e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c78:	4b11      	ldr	r3, [pc, #68]	@ (8008cc0 <xPortStartScheduler+0x140>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c7e:	f000 f8f9 	bl	8008e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c82:	4b10      	ldr	r3, [pc, #64]	@ (8008cc4 <xPortStartScheduler+0x144>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a0f      	ldr	r2, [pc, #60]	@ (8008cc4 <xPortStartScheduler+0x144>)
 8008c88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c8e:	f7ff ff63 	bl	8008b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c92:	f7ff f817 	bl	8007cc4 <vTaskSwitchContext>
	prvTaskExitError();
 8008c96:	f7ff ff1d 	bl	8008ad4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	e000ed00 	.word	0xe000ed00
 8008ca8:	410fc271 	.word	0x410fc271
 8008cac:	410fc270 	.word	0x410fc270
 8008cb0:	e000e400 	.word	0xe000e400
 8008cb4:	20007b58 	.word	0x20007b58
 8008cb8:	20007b5c 	.word	0x20007b5c
 8008cbc:	e000ed20 	.word	0xe000ed20
 8008cc0:	20000010 	.word	0x20000010
 8008cc4:	e000ef34 	.word	0xe000ef34

08008cc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	607b      	str	r3, [r7, #4]
}
 8008ce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ce2:	4b10      	ldr	r3, [pc, #64]	@ (8008d24 <vPortEnterCritical+0x5c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8008d24 <vPortEnterCritical+0x5c>)
 8008cea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cec:	4b0d      	ldr	r3, [pc, #52]	@ (8008d24 <vPortEnterCritical+0x5c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d110      	bne.n	8008d16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8008d28 <vPortEnterCritical+0x60>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <vPortEnterCritical+0x4e>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	603b      	str	r3, [r7, #0]
}
 8008d10:	bf00      	nop
 8008d12:	bf00      	nop
 8008d14:	e7fd      	b.n	8008d12 <vPortEnterCritical+0x4a>
	}
}
 8008d16:	bf00      	nop
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	20000010 	.word	0x20000010
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d32:	4b12      	ldr	r3, [pc, #72]	@ (8008d7c <vPortExitCritical+0x50>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10b      	bne.n	8008d52 <vPortExitCritical+0x26>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	607b      	str	r3, [r7, #4]
}
 8008d4c:	bf00      	nop
 8008d4e:	bf00      	nop
 8008d50:	e7fd      	b.n	8008d4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d52:	4b0a      	ldr	r3, [pc, #40]	@ (8008d7c <vPortExitCritical+0x50>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	4a08      	ldr	r2, [pc, #32]	@ (8008d7c <vPortExitCritical+0x50>)
 8008d5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d5c:	4b07      	ldr	r3, [pc, #28]	@ (8008d7c <vPortExitCritical+0x50>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d105      	bne.n	8008d70 <vPortExitCritical+0x44>
 8008d64:	2300      	movs	r3, #0
 8008d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	f383 8811 	msr	BASEPRI, r3
}
 8008d6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	20000010 	.word	0x20000010

08008d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d80:	f3ef 8009 	mrs	r0, PSP
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	4b15      	ldr	r3, [pc, #84]	@ (8008de0 <pxCurrentTCBConst>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	f01e 0f10 	tst.w	lr, #16
 8008d90:	bf08      	it	eq
 8008d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9a:	6010      	str	r0, [r2, #0]
 8008d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008da0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008da4:	f380 8811 	msr	BASEPRI, r0
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f7fe ff88 	bl	8007cc4 <vTaskSwitchContext>
 8008db4:	f04f 0000 	mov.w	r0, #0
 8008db8:	f380 8811 	msr	BASEPRI, r0
 8008dbc:	bc09      	pop	{r0, r3}
 8008dbe:	6819      	ldr	r1, [r3, #0]
 8008dc0:	6808      	ldr	r0, [r1, #0]
 8008dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc6:	f01e 0f10 	tst.w	lr, #16
 8008dca:	bf08      	it	eq
 8008dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008dd0:	f380 8809 	msr	PSP, r0
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	f3af 8000 	nop.w

08008de0 <pxCurrentTCBConst>:
 8008de0:	2000752c 	.word	0x2000752c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop

08008de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	607b      	str	r3, [r7, #4]
}
 8008e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e02:	f7fe fea5 	bl	8007b50 <xTaskIncrementTick>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e0c:	4b06      	ldr	r3, [pc, #24]	@ (8008e28 <xPortSysTickHandler+0x40>)
 8008e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	2300      	movs	r3, #0
 8008e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	f383 8811 	msr	BASEPRI, r3
}
 8008e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	e000ed04 	.word	0xe000ed04

08008e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e30:	4b0b      	ldr	r3, [pc, #44]	@ (8008e60 <vPortSetupTimerInterrupt+0x34>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e36:	4b0b      	ldr	r3, [pc, #44]	@ (8008e64 <vPortSetupTimerInterrupt+0x38>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e68 <vPortSetupTimerInterrupt+0x3c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a0a      	ldr	r2, [pc, #40]	@ (8008e6c <vPortSetupTimerInterrupt+0x40>)
 8008e42:	fba2 2303 	umull	r2, r3, r2, r3
 8008e46:	099b      	lsrs	r3, r3, #6
 8008e48:	4a09      	ldr	r2, [pc, #36]	@ (8008e70 <vPortSetupTimerInterrupt+0x44>)
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e4e:	4b04      	ldr	r3, [pc, #16]	@ (8008e60 <vPortSetupTimerInterrupt+0x34>)
 8008e50:	2207      	movs	r2, #7
 8008e52:	601a      	str	r2, [r3, #0]
}
 8008e54:	bf00      	nop
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	e000e010 	.word	0xe000e010
 8008e64:	e000e018 	.word	0xe000e018
 8008e68:	20000004 	.word	0x20000004
 8008e6c:	10624dd3 	.word	0x10624dd3
 8008e70:	e000e014 	.word	0xe000e014

08008e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e84 <vPortEnableVFP+0x10>
 8008e78:	6801      	ldr	r1, [r0, #0]
 8008e7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008e7e:	6001      	str	r1, [r0, #0]
 8008e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e82:	bf00      	nop
 8008e84:	e000ed88 	.word	0xe000ed88

08008e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e8e:	f3ef 8305 	mrs	r3, IPSR
 8008e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b0f      	cmp	r3, #15
 8008e98:	d915      	bls.n	8008ec6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e9a:	4a18      	ldr	r2, [pc, #96]	@ (8008efc <vPortValidateInterruptPriority+0x74>)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ea4:	4b16      	ldr	r3, [pc, #88]	@ (8008f00 <vPortValidateInterruptPriority+0x78>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	7afa      	ldrb	r2, [r7, #11]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d20b      	bcs.n	8008ec6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	607b      	str	r3, [r7, #4]
}
 8008ec0:	bf00      	nop
 8008ec2:	bf00      	nop
 8008ec4:	e7fd      	b.n	8008ec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f04 <vPortValidateInterruptPriority+0x7c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ece:	4b0e      	ldr	r3, [pc, #56]	@ (8008f08 <vPortValidateInterruptPriority+0x80>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d90b      	bls.n	8008eee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eda:	f383 8811 	msr	BASEPRI, r3
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	603b      	str	r3, [r7, #0]
}
 8008ee8:	bf00      	nop
 8008eea:	bf00      	nop
 8008eec:	e7fd      	b.n	8008eea <vPortValidateInterruptPriority+0x62>
	}
 8008eee:	bf00      	nop
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	e000e3f0 	.word	0xe000e3f0
 8008f00:	20007b58 	.word	0x20007b58
 8008f04:	e000ed0c 	.word	0xe000ed0c
 8008f08:	20007b5c 	.word	0x20007b5c

08008f0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08a      	sub	sp, #40	@ 0x28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f18:	f7fe fd5e 	bl	80079d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8009090 <pvPortMalloc+0x184>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f24:	f000 f924 	bl	8009170 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f28:	4b5a      	ldr	r3, [pc, #360]	@ (8009094 <pvPortMalloc+0x188>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f040 8095 	bne.w	8009060 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d01e      	beq.n	8008f7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008f3c:	2208      	movs	r2, #8
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4413      	add	r3, r2
 8008f42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d015      	beq.n	8008f7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f023 0307 	bic.w	r3, r3, #7
 8008f54:	3308      	adds	r3, #8
 8008f56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f003 0307 	and.w	r3, r3, #7
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00b      	beq.n	8008f7a <pvPortMalloc+0x6e>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	617b      	str	r3, [r7, #20]
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop
 8008f78:	e7fd      	b.n	8008f76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d06f      	beq.n	8009060 <pvPortMalloc+0x154>
 8008f80:	4b45      	ldr	r3, [pc, #276]	@ (8009098 <pvPortMalloc+0x18c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d86a      	bhi.n	8009060 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f8a:	4b44      	ldr	r3, [pc, #272]	@ (800909c <pvPortMalloc+0x190>)
 8008f8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f8e:	4b43      	ldr	r3, [pc, #268]	@ (800909c <pvPortMalloc+0x190>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f94:	e004      	b.n	8008fa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d903      	bls.n	8008fb2 <pvPortMalloc+0xa6>
 8008faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1f1      	bne.n	8008f96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fb2:	4b37      	ldr	r3, [pc, #220]	@ (8009090 <pvPortMalloc+0x184>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d051      	beq.n	8009060 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2208      	movs	r2, #8
 8008fc2:	4413      	add	r3, r2
 8008fc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	1ad2      	subs	r2, r2, r3
 8008fd6:	2308      	movs	r3, #8
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d920      	bls.n	8009020 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <pvPortMalloc+0xfc>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	613b      	str	r3, [r7, #16]
}
 8009002:	bf00      	nop
 8009004:	bf00      	nop
 8009006:	e7fd      	b.n	8009004 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	1ad2      	subs	r2, r2, r3
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800901a:	69b8      	ldr	r0, [r7, #24]
 800901c:	f000 f90a 	bl	8009234 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009020:	4b1d      	ldr	r3, [pc, #116]	@ (8009098 <pvPortMalloc+0x18c>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	4a1b      	ldr	r2, [pc, #108]	@ (8009098 <pvPortMalloc+0x18c>)
 800902c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800902e:	4b1a      	ldr	r3, [pc, #104]	@ (8009098 <pvPortMalloc+0x18c>)
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	4b1b      	ldr	r3, [pc, #108]	@ (80090a0 <pvPortMalloc+0x194>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	429a      	cmp	r2, r3
 8009038:	d203      	bcs.n	8009042 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800903a:	4b17      	ldr	r3, [pc, #92]	@ (8009098 <pvPortMalloc+0x18c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a18      	ldr	r2, [pc, #96]	@ (80090a0 <pvPortMalloc+0x194>)
 8009040:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	4b13      	ldr	r3, [pc, #76]	@ (8009094 <pvPortMalloc+0x188>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	431a      	orrs	r2, r3
 800904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009056:	4b13      	ldr	r3, [pc, #76]	@ (80090a4 <pvPortMalloc+0x198>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3301      	adds	r3, #1
 800905c:	4a11      	ldr	r2, [pc, #68]	@ (80090a4 <pvPortMalloc+0x198>)
 800905e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009060:	f7fe fcc8 	bl	80079f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <pvPortMalloc+0x17a>
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	60fb      	str	r3, [r7, #12]
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	e7fd      	b.n	8009082 <pvPortMalloc+0x176>
	return pvReturn;
 8009086:	69fb      	ldr	r3, [r7, #28]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3728      	adds	r7, #40	@ 0x28
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	2000b768 	.word	0x2000b768
 8009094:	2000b77c 	.word	0x2000b77c
 8009098:	2000b76c 	.word	0x2000b76c
 800909c:	2000b760 	.word	0x2000b760
 80090a0:	2000b770 	.word	0x2000b770
 80090a4:	2000b774 	.word	0x2000b774

080090a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d04f      	beq.n	800915a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090ba:	2308      	movs	r3, #8
 80090bc:	425b      	negs	r3, r3
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	4413      	add	r3, r2
 80090c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	4b25      	ldr	r3, [pc, #148]	@ (8009164 <vPortFree+0xbc>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4013      	ands	r3, r2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d10b      	bne.n	80090ee <vPortFree+0x46>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090da:	f383 8811 	msr	BASEPRI, r3
 80090de:	f3bf 8f6f 	isb	sy
 80090e2:	f3bf 8f4f 	dsb	sy
 80090e6:	60fb      	str	r3, [r7, #12]
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	e7fd      	b.n	80090ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00b      	beq.n	800910e <vPortFree+0x66>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	60bb      	str	r3, [r7, #8]
}
 8009108:	bf00      	nop
 800910a:	bf00      	nop
 800910c:	e7fd      	b.n	800910a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	4b14      	ldr	r3, [pc, #80]	@ (8009164 <vPortFree+0xbc>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4013      	ands	r3, r2
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01e      	beq.n	800915a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d11a      	bne.n	800915a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	4b0e      	ldr	r3, [pc, #56]	@ (8009164 <vPortFree+0xbc>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	43db      	mvns	r3, r3
 800912e:	401a      	ands	r2, r3
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009134:	f7fe fc50 	bl	80079d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	4b0a      	ldr	r3, [pc, #40]	@ (8009168 <vPortFree+0xc0>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4413      	add	r3, r2
 8009142:	4a09      	ldr	r2, [pc, #36]	@ (8009168 <vPortFree+0xc0>)
 8009144:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009146:	6938      	ldr	r0, [r7, #16]
 8009148:	f000 f874 	bl	8009234 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800914c:	4b07      	ldr	r3, [pc, #28]	@ (800916c <vPortFree+0xc4>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3301      	adds	r3, #1
 8009152:	4a06      	ldr	r2, [pc, #24]	@ (800916c <vPortFree+0xc4>)
 8009154:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009156:	f7fe fc4d 	bl	80079f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800915a:	bf00      	nop
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	2000b77c 	.word	0x2000b77c
 8009168:	2000b76c 	.word	0x2000b76c
 800916c:	2000b778 	.word	0x2000b778

08009170 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009176:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800917a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800917c:	4b27      	ldr	r3, [pc, #156]	@ (800921c <prvHeapInit+0xac>)
 800917e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f003 0307 	and.w	r3, r3, #7
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00c      	beq.n	80091a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3307      	adds	r3, #7
 800918e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f023 0307 	bic.w	r3, r3, #7
 8009196:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	4a1f      	ldr	r2, [pc, #124]	@ (800921c <prvHeapInit+0xac>)
 80091a0:	4413      	add	r3, r2
 80091a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009220 <prvHeapInit+0xb0>)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091ae:	4b1c      	ldr	r3, [pc, #112]	@ (8009220 <prvHeapInit+0xb0>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	4413      	add	r3, r2
 80091ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091bc:	2208      	movs	r2, #8
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	1a9b      	subs	r3, r3, r2
 80091c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0307 	bic.w	r3, r3, #7
 80091ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4a15      	ldr	r2, [pc, #84]	@ (8009224 <prvHeapInit+0xb4>)
 80091d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091d2:	4b14      	ldr	r3, [pc, #80]	@ (8009224 <prvHeapInit+0xb4>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2200      	movs	r2, #0
 80091d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091da:	4b12      	ldr	r3, [pc, #72]	@ (8009224 <prvHeapInit+0xb4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	1ad2      	subs	r2, r2, r3
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009224 <prvHeapInit+0xb4>)
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	4a0a      	ldr	r2, [pc, #40]	@ (8009228 <prvHeapInit+0xb8>)
 80091fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	4a09      	ldr	r2, [pc, #36]	@ (800922c <prvHeapInit+0xbc>)
 8009206:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009208:	4b09      	ldr	r3, [pc, #36]	@ (8009230 <prvHeapInit+0xc0>)
 800920a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800920e:	601a      	str	r2, [r3, #0]
}
 8009210:	bf00      	nop
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr
 800921c:	20007b60 	.word	0x20007b60
 8009220:	2000b760 	.word	0x2000b760
 8009224:	2000b768 	.word	0x2000b768
 8009228:	2000b770 	.word	0x2000b770
 800922c:	2000b76c 	.word	0x2000b76c
 8009230:	2000b77c 	.word	0x2000b77c

08009234 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800923c:	4b28      	ldr	r3, [pc, #160]	@ (80092e0 <prvInsertBlockIntoFreeList+0xac>)
 800923e:	60fb      	str	r3, [r7, #12]
 8009240:	e002      	b.n	8009248 <prvInsertBlockIntoFreeList+0x14>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	d8f7      	bhi.n	8009242 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	4413      	add	r3, r2
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	429a      	cmp	r2, r3
 8009262:	d108      	bne.n	8009276 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	441a      	add	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	441a      	add	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	429a      	cmp	r2, r3
 8009288:	d118      	bne.n	80092bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	4b15      	ldr	r3, [pc, #84]	@ (80092e4 <prvInsertBlockIntoFreeList+0xb0>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	429a      	cmp	r2, r3
 8009294:	d00d      	beq.n	80092b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	441a      	add	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	e008      	b.n	80092c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092b2:	4b0c      	ldr	r3, [pc, #48]	@ (80092e4 <prvInsertBlockIntoFreeList+0xb0>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	e003      	b.n	80092c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d002      	beq.n	80092d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092d2:	bf00      	nop
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	2000b760 	.word	0x2000b760
 80092e4:	2000b768 	.word	0x2000b768

080092e8 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 80092e8:	4b04      	ldr	r3, [pc, #16]	@ (80092fc <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	b10a      	cbz	r2, 80092f2 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 80092ee:	4803      	ldr	r0, [pc, #12]	@ (80092fc <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 80092f0:	4770      	bx	lr
 80092f2:	4a03      	ldr	r2, [pc, #12]	@ (8009300 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 80092f4:	4801      	ldr	r0, [pc, #4]	@ (80092fc <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 80092f6:	6812      	ldr	r2, [r2, #0]
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	4770      	bx	lr
 80092fc:	20000014 	.word	0x20000014
 8009300:	20000184 	.word	0x20000184

08009304 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 8009304:	4a02      	ldr	r2, [pc, #8]	@ (8009310 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 8009306:	4b03      	ldr	r3, [pc, #12]	@ (8009314 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 8009308:	6812      	ldr	r2, [r2, #0]
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	20000184 	.word	0x20000184
 8009314:	20000014 	.word	0x20000014

08009318 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 8009318:	f007 bc10 	b.w	8010b3c <nav_msgs__msg__Odometry__init>

0800931c <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800931c:	f007 bc5a 	b.w	8010bd4 <nav_msgs__msg__Odometry__fini>

08009320 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 8009320:	b510      	push	{r4, lr}
 8009322:	f001 ffe3 	bl	800b2ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8009326:	4c0a      	ldr	r4, [pc, #40]	@ (8009350 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 8009328:	60e0      	str	r0, [r4, #12]
 800932a:	f002 f921 	bl	800b570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800932e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8009332:	f002 f951 	bl	800b5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 8009336:	4b07      	ldr	r3, [pc, #28]	@ (8009354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 8009338:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	b10a      	cbz	r2, 8009344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 8009340:	4804      	ldr	r0, [pc, #16]	@ (8009354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 8009342:	bd10      	pop	{r4, pc}
 8009344:	4a04      	ldr	r2, [pc, #16]	@ (8009358 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 8009346:	4803      	ldr	r0, [pc, #12]	@ (8009354 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 8009348:	6812      	ldr	r2, [r2, #0]
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	bd10      	pop	{r4, pc}
 800934e:	bf00      	nop
 8009350:	2000004c 	.word	0x2000004c
 8009354:	20000034 	.word	0x20000034
 8009358:	20000188 	.word	0x20000188

0800935c <get_serialized_size_nav_msgs__msg__Odometry>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	4604      	mov	r4, r0
 8009360:	b1c0      	cbz	r0, 8009394 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 8009362:	460e      	mov	r6, r1
 8009364:	f001 ffe6 	bl	800b334 <get_serialized_size_std_msgs__msg__Header>
 8009368:	1837      	adds	r7, r6, r0
 800936a:	2104      	movs	r1, #4
 800936c:	4638      	mov	r0, r7
 800936e:	f003 fef1 	bl	800d154 <ucdr_alignment>
 8009372:	69a5      	ldr	r5, [r4, #24]
 8009374:	3505      	adds	r5, #5
 8009376:	4405      	add	r5, r0
 8009378:	443d      	add	r5, r7
 800937a:	4629      	mov	r1, r5
 800937c:	f104 0020 	add.w	r0, r4, #32
 8009380:	f002 f940 	bl	800b604 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 8009384:	4405      	add	r5, r0
 8009386:	4629      	mov	r1, r5
 8009388:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800938c:	f002 f9aa 	bl	800b6e4 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 8009390:	1b80      	subs	r0, r0, r6
 8009392:	4428      	add	r0, r5
 8009394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009396:	bf00      	nop

08009398 <_Odometry__cdr_deserialize>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	460c      	mov	r4, r1
 800939c:	b082      	sub	sp, #8
 800939e:	b349      	cbz	r1, 80093f4 <_Odometry__cdr_deserialize+0x5c>
 80093a0:	4605      	mov	r5, r0
 80093a2:	f002 f849 	bl	800b438 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80093a6:	6843      	ldr	r3, [r0, #4]
 80093a8:	4621      	mov	r1, r4
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	4628      	mov	r0, r5
 80093ae:	4798      	blx	r3
 80093b0:	69e6      	ldr	r6, [r4, #28]
 80093b2:	6961      	ldr	r1, [r4, #20]
 80093b4:	ab01      	add	r3, sp, #4
 80093b6:	4632      	mov	r2, r6
 80093b8:	4628      	mov	r0, r5
 80093ba:	f003 ff49 	bl	800d250 <ucdr_deserialize_sequence_char>
 80093be:	9b01      	ldr	r3, [sp, #4]
 80093c0:	b9a0      	cbnz	r0, 80093ec <_Odometry__cdr_deserialize+0x54>
 80093c2:	429e      	cmp	r6, r3
 80093c4:	d319      	bcc.n	80093fa <_Odometry__cdr_deserialize+0x62>
 80093c6:	f002 f989 	bl	800b6dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 80093ca:	6843      	ldr	r3, [r0, #4]
 80093cc:	f104 0120 	add.w	r1, r4, #32
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	4628      	mov	r0, r5
 80093d4:	4798      	blx	r3
 80093d6:	f002 f9f1 	bl	800b7bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 80093da:	6843      	ldr	r3, [r0, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 80093e2:	4628      	mov	r0, r5
 80093e4:	b002      	add	sp, #8
 80093e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093ea:	4718      	bx	r3
 80093ec:	b103      	cbz	r3, 80093f0 <_Odometry__cdr_deserialize+0x58>
 80093ee:	3b01      	subs	r3, #1
 80093f0:	61a3      	str	r3, [r4, #24]
 80093f2:	e7e8      	b.n	80093c6 <_Odometry__cdr_deserialize+0x2e>
 80093f4:	4608      	mov	r0, r1
 80093f6:	b002      	add	sp, #8
 80093f8:	bd70      	pop	{r4, r5, r6, pc}
 80093fa:	2101      	movs	r1, #1
 80093fc:	75a8      	strb	r0, [r5, #22]
 80093fe:	7569      	strb	r1, [r5, #21]
 8009400:	61a0      	str	r0, [r4, #24]
 8009402:	4628      	mov	r0, r5
 8009404:	f003 febc 	bl	800d180 <ucdr_align_to>
 8009408:	9901      	ldr	r1, [sp, #4]
 800940a:	4628      	mov	r0, r5
 800940c:	f003 feee 	bl	800d1ec <ucdr_advance_buffer>
 8009410:	e7d9      	b.n	80093c6 <_Odometry__cdr_deserialize+0x2e>
 8009412:	bf00      	nop

08009414 <_Odometry__cdr_serialize>:
 8009414:	b348      	cbz	r0, 800946a <_Odometry__cdr_serialize+0x56>
 8009416:	b570      	push	{r4, r5, r6, lr}
 8009418:	4604      	mov	r4, r0
 800941a:	460e      	mov	r6, r1
 800941c:	f002 f80c 	bl	800b438 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8009420:	6843      	ldr	r3, [r0, #4]
 8009422:	4631      	mov	r1, r6
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	4620      	mov	r0, r4
 8009428:	4798      	blx	r3
 800942a:	6965      	ldr	r5, [r4, #20]
 800942c:	b1d5      	cbz	r5, 8009464 <_Odometry__cdr_serialize+0x50>
 800942e:	4628      	mov	r0, r5
 8009430:	f7f6 ff4e 	bl	80002d0 <strlen>
 8009434:	1c42      	adds	r2, r0, #1
 8009436:	4629      	mov	r1, r5
 8009438:	61a0      	str	r0, [r4, #24]
 800943a:	4630      	mov	r0, r6
 800943c:	f003 fef6 	bl	800d22c <ucdr_serialize_sequence_char>
 8009440:	f002 f94c 	bl	800b6dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 8009444:	6843      	ldr	r3, [r0, #4]
 8009446:	4631      	mov	r1, r6
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f104 0020 	add.w	r0, r4, #32
 800944e:	4798      	blx	r3
 8009450:	f002 f9b4 	bl	800b7bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 8009454:	6843      	ldr	r3, [r0, #4]
 8009456:	4631      	mov	r1, r6
 8009458:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009462:	4718      	bx	r3
 8009464:	462a      	mov	r2, r5
 8009466:	4628      	mov	r0, r5
 8009468:	e7e5      	b.n	8009436 <_Odometry__cdr_serialize+0x22>
 800946a:	4770      	bx	lr

0800946c <_Odometry__max_serialized_size>:
 800946c:	b510      	push	{r4, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	2301      	movs	r3, #1
 8009472:	2100      	movs	r1, #0
 8009474:	f10d 0007 	add.w	r0, sp, #7
 8009478:	f88d 3007 	strb.w	r3, [sp, #7]
 800947c:	f001 ffd2 	bl	800b424 <max_serialized_size_std_msgs__msg__Header>
 8009480:	2300      	movs	r3, #0
 8009482:	4601      	mov	r1, r0
 8009484:	4604      	mov	r4, r0
 8009486:	f10d 0007 	add.w	r0, sp, #7
 800948a:	f88d 3007 	strb.w	r3, [sp, #7]
 800948e:	f002 f915 	bl	800b6bc <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 8009492:	4404      	add	r4, r0
 8009494:	4621      	mov	r1, r4
 8009496:	f10d 0007 	add.w	r0, sp, #7
 800949a:	f002 f97f 	bl	800b79c <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 800949e:	4420      	add	r0, r4
 80094a0:	b002      	add	sp, #8
 80094a2:	bd10      	pop	{r4, pc}

080094a4 <_Odometry__get_serialized_size>:
 80094a4:	b570      	push	{r4, r5, r6, lr}
 80094a6:	4604      	mov	r4, r0
 80094a8:	b1b8      	cbz	r0, 80094da <_Odometry__get_serialized_size+0x36>
 80094aa:	2100      	movs	r1, #0
 80094ac:	f001 ff42 	bl	800b334 <get_serialized_size_std_msgs__msg__Header>
 80094b0:	2104      	movs	r1, #4
 80094b2:	4606      	mov	r6, r0
 80094b4:	f003 fe4e 	bl	800d154 <ucdr_alignment>
 80094b8:	69a5      	ldr	r5, [r4, #24]
 80094ba:	3505      	adds	r5, #5
 80094bc:	4603      	mov	r3, r0
 80094be:	4435      	add	r5, r6
 80094c0:	441d      	add	r5, r3
 80094c2:	4629      	mov	r1, r5
 80094c4:	f104 0020 	add.w	r0, r4, #32
 80094c8:	f002 f89c 	bl	800b604 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 80094cc:	4405      	add	r5, r0
 80094ce:	4629      	mov	r1, r5
 80094d0:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80094d4:	f002 f906 	bl	800b6e4 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 80094d8:	4428      	add	r0, r5
 80094da:	bd70      	pop	{r4, r5, r6, pc}

080094dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 80094dc:	4800      	ldr	r0, [pc, #0]	@ (80094e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 80094de:	4770      	bx	lr
 80094e0:	2000013c 	.word	0x2000013c

080094e4 <rcl_get_zero_initialized_publisher>:
 80094e4:	4b01      	ldr	r3, [pc, #4]	@ (80094ec <rcl_get_zero_initialized_publisher+0x8>)
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	0801a868 	.word	0x0801a868

080094f0 <rcl_publisher_init>:
 80094f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f4:	b088      	sub	sp, #32
 80094f6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	d06a      	beq.n	80095d2 <rcl_publisher_init+0xe2>
 80094fc:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009500:	4604      	mov	r4, r0
 8009502:	4648      	mov	r0, r9
 8009504:	460e      	mov	r6, r1
 8009506:	4690      	mov	r8, r2
 8009508:	461f      	mov	r7, r3
 800950a:	f000 ffd5 	bl	800a4b8 <rcutils_allocator_is_valid>
 800950e:	2800      	cmp	r0, #0
 8009510:	d05f      	beq.n	80095d2 <rcl_publisher_init+0xe2>
 8009512:	2c00      	cmp	r4, #0
 8009514:	d05d      	beq.n	80095d2 <rcl_publisher_init+0xe2>
 8009516:	f8d4 a000 	ldr.w	sl, [r4]
 800951a:	f1ba 0f00 	cmp.w	sl, #0
 800951e:	d004      	beq.n	800952a <rcl_publisher_init+0x3a>
 8009520:	2764      	movs	r7, #100	@ 0x64
 8009522:	4638      	mov	r0, r7
 8009524:	b008      	add	sp, #32
 8009526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952a:	4630      	mov	r0, r6
 800952c:	f007 fffe 	bl	801152c <rcl_node_is_valid>
 8009530:	2800      	cmp	r0, #0
 8009532:	d053      	beq.n	80095dc <rcl_publisher_init+0xec>
 8009534:	f1b8 0f00 	cmp.w	r8, #0
 8009538:	d04b      	beq.n	80095d2 <rcl_publisher_init+0xe2>
 800953a:	2f00      	cmp	r7, #0
 800953c:	d049      	beq.n	80095d2 <rcl_publisher_init+0xe2>
 800953e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8009542:	aa07      	add	r2, sp, #28
 8009544:	9205      	str	r2, [sp, #20]
 8009546:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800954a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800954e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009552:	f8cd a01c 	str.w	sl, [sp, #28]
 8009556:	4639      	mov	r1, r7
 8009558:	e899 000c 	ldmia.w	r9, {r2, r3}
 800955c:	4630      	mov	r0, r6
 800955e:	f008 f875 	bl	801164c <rcl_node_resolve_name>
 8009562:	4607      	mov	r7, r0
 8009564:	2800      	cmp	r0, #0
 8009566:	d150      	bne.n	800960a <rcl_publisher_init+0x11a>
 8009568:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800956c:	21c8      	movs	r1, #200	@ 0xc8
 800956e:	2001      	movs	r0, #1
 8009570:	4798      	blx	r3
 8009572:	6020      	str	r0, [r4, #0]
 8009574:	2800      	cmp	r0, #0
 8009576:	d04e      	beq.n	8009616 <rcl_publisher_init+0x126>
 8009578:	4630      	mov	r0, r6
 800957a:	f007 fff9 	bl	8011570 <rcl_node_get_rmw_handle>
 800957e:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	9a07      	ldr	r2, [sp, #28]
 8009586:	6827      	ldr	r7, [r4, #0]
 8009588:	462b      	mov	r3, r5
 800958a:	4641      	mov	r1, r8
 800958c:	f001 f8f8 	bl	800a780 <rmw_create_publisher>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8009596:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800959a:	b370      	cbz	r0, 80095fa <rcl_publisher_init+0x10a>
 800959c:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80095a0:	f001 f9ca 	bl	800a938 <rmw_publisher_get_actual_qos>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	4607      	mov	r7, r0
 80095a8:	b9d0      	cbnz	r0, 80095e0 <rcl_publisher_init+0xf0>
 80095aa:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80095ae:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 80095b2:	4629      	mov	r1, r5
 80095b4:	2270      	movs	r2, #112	@ 0x70
 80095b6:	4618      	mov	r0, r3
 80095b8:	f00f f8df 	bl	801877a <memcpy>
 80095bc:	6832      	ldr	r2, [r6, #0]
 80095be:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 80095c2:	9807      	ldr	r0, [sp, #28]
 80095c4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80095c6:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80095c8:	4798      	blx	r3
 80095ca:	4638      	mov	r0, r7
 80095cc:	b008      	add	sp, #32
 80095ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d2:	270b      	movs	r7, #11
 80095d4:	4638      	mov	r0, r7
 80095d6:	b008      	add	sp, #32
 80095d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095dc:	27c8      	movs	r7, #200	@ 0xc8
 80095de:	e7a0      	b.n	8009522 <rcl_publisher_init+0x32>
 80095e0:	b18b      	cbz	r3, 8009606 <rcl_publisher_init+0x116>
 80095e2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80095e6:	b142      	cbz	r2, 80095fa <rcl_publisher_init+0x10a>
 80095e8:	4630      	mov	r0, r6
 80095ea:	f007 ffc1 	bl	8011570 <rcl_node_get_rmw_handle>
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80095f4:	f001 f9ae 	bl	800a954 <rmw_destroy_publisher>
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80095fc:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80095fe:	4618      	mov	r0, r3
 8009600:	4790      	blx	r2
 8009602:	2300      	movs	r3, #0
 8009604:	6023      	str	r3, [r4, #0]
 8009606:	2701      	movs	r7, #1
 8009608:	e7db      	b.n	80095c2 <rcl_publisher_init+0xd2>
 800960a:	2867      	cmp	r0, #103	@ 0x67
 800960c:	d0d9      	beq.n	80095c2 <rcl_publisher_init+0xd2>
 800960e:	2869      	cmp	r0, #105	@ 0x69
 8009610:	d003      	beq.n	800961a <rcl_publisher_init+0x12a>
 8009612:	280a      	cmp	r0, #10
 8009614:	d1f7      	bne.n	8009606 <rcl_publisher_init+0x116>
 8009616:	270a      	movs	r7, #10
 8009618:	e7d3      	b.n	80095c2 <rcl_publisher_init+0xd2>
 800961a:	2767      	movs	r7, #103	@ 0x67
 800961c:	e7d1      	b.n	80095c2 <rcl_publisher_init+0xd2>
 800961e:	bf00      	nop

08009620 <rcl_publisher_get_default_options>:
 8009620:	b530      	push	{r4, r5, lr}
 8009622:	4912      	ldr	r1, [pc, #72]	@ (800966c <rcl_publisher_get_default_options+0x4c>)
 8009624:	b083      	sub	sp, #12
 8009626:	2250      	movs	r2, #80	@ 0x50
 8009628:	4604      	mov	r4, r0
 800962a:	f00f f8a6 	bl	801877a <memcpy>
 800962e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009632:	f000 ff15 	bl	800a460 <rcutils_get_default_allocator>
 8009636:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800963a:	f000 ffd9 	bl	800a5f0 <rmw_get_default_publisher_options>
 800963e:	2500      	movs	r5, #0
 8009640:	f10d 0007 	add.w	r0, sp, #7
 8009644:	f88d 5007 	strb.w	r5, [sp, #7]
 8009648:	f007 ff98 	bl	801157c <rcl_get_disable_loaned_message>
 800964c:	b930      	cbnz	r0, 800965c <rcl_publisher_get_default_options+0x3c>
 800964e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8009652:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 8009656:	4620      	mov	r0, r4
 8009658:	b003      	add	sp, #12
 800965a:	bd30      	pop	{r4, r5, pc}
 800965c:	f000 ff58 	bl	800a510 <rcutils_reset_error>
 8009660:	4620      	mov	r0, r4
 8009662:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 8009666:	b003      	add	sp, #12
 8009668:	bd30      	pop	{r4, r5, pc}
 800966a:	bf00      	nop
 800966c:	0801a870 	.word	0x0801a870

08009670 <rcl_publish>:
 8009670:	b308      	cbz	r0, 80096b6 <rcl_publish+0x46>
 8009672:	6803      	ldr	r3, [r0, #0]
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	4604      	mov	r4, r0
 8009678:	b1c3      	cbz	r3, 80096ac <rcl_publish+0x3c>
 800967a:	4616      	mov	r6, r2
 800967c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009680:	b1a2      	cbz	r2, 80096ac <rcl_publish+0x3c>
 8009682:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009686:	460d      	mov	r5, r1
 8009688:	f007 fba2 	bl	8010dd0 <rcl_context_is_valid>
 800968c:	b160      	cbz	r0, 80096a8 <rcl_publish+0x38>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8009694:	b150      	cbz	r0, 80096ac <rcl_publish+0x3c>
 8009696:	b165      	cbz	r5, 80096b2 <rcl_publish+0x42>
 8009698:	4632      	mov	r2, r6
 800969a:	4629      	mov	r1, r5
 800969c:	f001 f810 	bl	800a6c0 <rmw_publish>
 80096a0:	3800      	subs	r0, #0
 80096a2:	bf18      	it	ne
 80096a4:	2001      	movne	r0, #1
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	f000 ff14 	bl	800a4d4 <rcutils_error_is_set>
 80096ac:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80096b0:	bd70      	pop	{r4, r5, r6, pc}
 80096b2:	200b      	movs	r0, #11
 80096b4:	bd70      	pop	{r4, r5, r6, pc}
 80096b6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80096ba:	4770      	bx	lr

080096bc <rcl_publisher_is_valid>:
 80096bc:	b1b0      	cbz	r0, 80096ec <rcl_publisher_is_valid+0x30>
 80096be:	6803      	ldr	r3, [r0, #0]
 80096c0:	b510      	push	{r4, lr}
 80096c2:	4604      	mov	r4, r0
 80096c4:	b183      	cbz	r3, 80096e8 <rcl_publisher_is_valid+0x2c>
 80096c6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80096ca:	b16a      	cbz	r2, 80096e8 <rcl_publisher_is_valid+0x2c>
 80096cc:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80096d0:	f007 fb7e 	bl	8010dd0 <rcl_context_is_valid>
 80096d4:	b130      	cbz	r0, 80096e4 <rcl_publisher_is_valid+0x28>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80096dc:	3800      	subs	r0, #0
 80096de:	bf18      	it	ne
 80096e0:	2001      	movne	r0, #1
 80096e2:	bd10      	pop	{r4, pc}
 80096e4:	f000 fef6 	bl	800a4d4 <rcutils_error_is_set>
 80096e8:	2000      	movs	r0, #0
 80096ea:	bd10      	pop	{r4, pc}
 80096ec:	2000      	movs	r0, #0
 80096ee:	4770      	bx	lr

080096f0 <rcl_publisher_is_valid_except_context>:
 80096f0:	b130      	cbz	r0, 8009700 <rcl_publisher_is_valid_except_context+0x10>
 80096f2:	6800      	ldr	r0, [r0, #0]
 80096f4:	b120      	cbz	r0, 8009700 <rcl_publisher_is_valid_except_context+0x10>
 80096f6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80096fa:	3800      	subs	r0, #0
 80096fc:	bf18      	it	ne
 80096fe:	2001      	movne	r0, #1
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop

08009704 <_rclc_check_for_new_data>:
 8009704:	2800      	cmp	r0, #0
 8009706:	d046      	beq.n	8009796 <_rclc_check_for_new_data+0x92>
 8009708:	b510      	push	{r4, lr}
 800970a:	7802      	ldrb	r2, [r0, #0]
 800970c:	b084      	sub	sp, #16
 800970e:	4603      	mov	r3, r0
 8009710:	2a0a      	cmp	r2, #10
 8009712:	d842      	bhi.n	800979a <_rclc_check_for_new_data+0x96>
 8009714:	e8df f002 	tbb	[pc, r2]
 8009718:	14181212 	.word	0x14181212
 800971c:	06060614 	.word	0x06060614
 8009720:	2e1a      	.short	0x2e1a
 8009722:	16          	.byte	0x16
 8009723:	00          	.byte	0x00
 8009724:	6a0a      	ldr	r2, [r1, #32]
 8009726:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009728:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800972c:	3a00      	subs	r2, #0
 800972e:	bf18      	it	ne
 8009730:	2201      	movne	r2, #1
 8009732:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8009736:	2000      	movs	r0, #0
 8009738:	b004      	add	sp, #16
 800973a:	bd10      	pop	{r4, pc}
 800973c:	680a      	ldr	r2, [r1, #0]
 800973e:	e7f2      	b.n	8009726 <_rclc_check_for_new_data+0x22>
 8009740:	698a      	ldr	r2, [r1, #24]
 8009742:	e7f0      	b.n	8009726 <_rclc_check_for_new_data+0x22>
 8009744:	688a      	ldr	r2, [r1, #8]
 8009746:	e7ee      	b.n	8009726 <_rclc_check_for_new_data+0x22>
 8009748:	690a      	ldr	r2, [r1, #16]
 800974a:	e7ec      	b.n	8009726 <_rclc_check_for_new_data+0x22>
 800974c:	685c      	ldr	r4, [r3, #4]
 800974e:	4608      	mov	r0, r1
 8009750:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 8009754:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 8009758:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800975c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 8009766:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800976a:	f104 0110 	add.w	r1, r4, #16
 800976e:	f009 fd53 	bl	8013218 <rcl_action_client_wait_set_get_entities_ready>
 8009772:	e7e1      	b.n	8009738 <_rclc_check_for_new_data+0x34>
 8009774:	685c      	ldr	r4, [r3, #4]
 8009776:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800977a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800977e:	e9cd 3200 	strd	r3, r2, [sp]
 8009782:	4608      	mov	r0, r1
 8009784:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8009788:	f104 0220 	add.w	r2, r4, #32
 800978c:	f104 0110 	add.w	r1, r4, #16
 8009790:	f009 ff44 	bl	801361c <rcl_action_server_wait_set_get_entities_ready>
 8009794:	e7d0      	b.n	8009738 <_rclc_check_for_new_data+0x34>
 8009796:	200b      	movs	r0, #11
 8009798:	4770      	bx	lr
 800979a:	2001      	movs	r0, #1
 800979c:	e7cc      	b.n	8009738 <_rclc_check_for_new_data+0x34>
 800979e:	bf00      	nop

080097a0 <_rclc_take_new_data>:
 80097a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097a2:	b099      	sub	sp, #100	@ 0x64
 80097a4:	2800      	cmp	r0, #0
 80097a6:	f000 8082 	beq.w	80098ae <_rclc_take_new_data+0x10e>
 80097aa:	7803      	ldrb	r3, [r0, #0]
 80097ac:	4604      	mov	r4, r0
 80097ae:	2b0a      	cmp	r3, #10
 80097b0:	f200 815d 	bhi.w	8009a6e <_rclc_take_new_data+0x2ce>
 80097b4:	e8df f003 	tbb	[pc, r3]
 80097b8:	31531f1f 	.word	0x31531f1f
 80097bc:	06060631 	.word	0x06060631
 80097c0:	4555      	.short	0x4555
 80097c2:	53          	.byte	0x53
 80097c3:	00          	.byte	0x00
 80097c4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80097c6:	6a0b      	ldr	r3, [r1, #32]
 80097c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d046      	beq.n	800985e <_rclc_take_new_data+0xbe>
 80097d0:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80097d4:	f104 0110 	add.w	r1, r4, #16
 80097d8:	f007 ffe6 	bl	80117a8 <rcl_take_request>
 80097dc:	4605      	mov	r5, r0
 80097de:	2800      	cmp	r0, #0
 80097e0:	d03d      	beq.n	800985e <_rclc_take_new_data+0xbe>
 80097e2:	f240 2359 	movw	r3, #601	@ 0x259
 80097e6:	4298      	cmp	r0, r3
 80097e8:	d128      	bne.n	800983c <_rclc_take_new_data+0x9c>
 80097ea:	2300      	movs	r3, #0
 80097ec:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80097f0:	4628      	mov	r0, r5
 80097f2:	b019      	add	sp, #100	@ 0x64
 80097f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097f6:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80097f8:	680b      	ldr	r3, [r1, #0]
 80097fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fe:	b373      	cbz	r3, 800985e <_rclc_take_new_data+0xbe>
 8009800:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009804:	2300      	movs	r3, #0
 8009806:	aa0a      	add	r2, sp, #40	@ 0x28
 8009808:	f008 f8e2 	bl	80119d0 <rcl_take>
 800980c:	4605      	mov	r5, r0
 800980e:	b330      	cbz	r0, 800985e <_rclc_take_new_data+0xbe>
 8009810:	f240 1391 	movw	r3, #401	@ 0x191
 8009814:	4298      	cmp	r0, r3
 8009816:	d0e8      	beq.n	80097ea <_rclc_take_new_data+0x4a>
 8009818:	e010      	b.n	800983c <_rclc_take_new_data+0x9c>
 800981a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800981c:	698b      	ldr	r3, [r1, #24]
 800981e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009822:	b1e3      	cbz	r3, 800985e <_rclc_take_new_data+0xbe>
 8009824:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009828:	f104 0110 	add.w	r1, r4, #16
 800982c:	f007 fa40 	bl	8010cb0 <rcl_take_response>
 8009830:	4605      	mov	r5, r0
 8009832:	b1a0      	cbz	r0, 800985e <_rclc_take_new_data+0xbe>
 8009834:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009838:	4298      	cmp	r0, r3
 800983a:	d0d9      	beq.n	80097f0 <_rclc_take_new_data+0x50>
 800983c:	f000 fe68 	bl	800a510 <rcutils_reset_error>
 8009840:	e7d6      	b.n	80097f0 <_rclc_take_new_data+0x50>
 8009842:	6840      	ldr	r0, [r0, #4]
 8009844:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d15f      	bne.n	800990c <_rclc_take_new_data+0x16c>
 800984c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8009850:	2b00      	cmp	r3, #0
 8009852:	d179      	bne.n	8009948 <_rclc_take_new_data+0x1a8>
 8009854:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009858:	2b00      	cmp	r3, #0
 800985a:	f040 8096 	bne.w	800998a <_rclc_take_new_data+0x1ea>
 800985e:	2500      	movs	r5, #0
 8009860:	e7c6      	b.n	80097f0 <_rclc_take_new_data+0x50>
 8009862:	6840      	ldr	r0, [r0, #4]
 8009864:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009868:	2b00      	cmp	r3, #0
 800986a:	d138      	bne.n	80098de <_rclc_take_new_data+0x13e>
 800986c:	69c3      	ldr	r3, [r0, #28]
 800986e:	b113      	cbz	r3, 8009876 <_rclc_take_new_data+0xd6>
 8009870:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009874:	b9fb      	cbnz	r3, 80098b6 <_rclc_take_new_data+0x116>
 8009876:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800987a:	2b00      	cmp	r3, #0
 800987c:	f040 80a8 	bne.w	80099d0 <_rclc_take_new_data+0x230>
 8009880:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0ea      	beq.n	800985e <_rclc_take_new_data+0xbe>
 8009888:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800988a:	a90a      	add	r1, sp, #40	@ 0x28
 800988c:	3010      	adds	r0, #16
 800988e:	f009 fba7 	bl	8012fe0 <rcl_action_take_result_response>
 8009892:	4605      	mov	r5, r0
 8009894:	2800      	cmp	r0, #0
 8009896:	d1d1      	bne.n	800983c <_rclc_take_new_data+0x9c>
 8009898:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800989c:	6860      	ldr	r0, [r4, #4]
 800989e:	f009 ffe7 	bl	8013870 <rclc_action_find_handle_by_result_request_sequence_number>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d0db      	beq.n	800985e <_rclc_take_new_data+0xbe>
 80098a6:	2301      	movs	r3, #1
 80098a8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80098ac:	e7d7      	b.n	800985e <_rclc_take_new_data+0xbe>
 80098ae:	250b      	movs	r5, #11
 80098b0:	4628      	mov	r0, r5
 80098b2:	b019      	add	sp, #100	@ 0x64
 80098b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098b6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80098b8:	3010      	adds	r0, #16
 80098ba:	f009 fc0d 	bl	80130d8 <rcl_action_take_feedback>
 80098be:	4605      	mov	r5, r0
 80098c0:	2800      	cmp	r0, #0
 80098c2:	d1bb      	bne.n	800983c <_rclc_take_new_data+0x9c>
 80098c4:	6860      	ldr	r0, [r4, #4]
 80098c6:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80098c8:	f009 ff90 	bl	80137ec <rclc_action_find_goal_handle_by_uuid>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f000 80c4 	beq.w	8009a5c <_rclc_take_new_data+0x2bc>
 80098d4:	2201      	movs	r2, #1
 80098d6:	6860      	ldr	r0, [r4, #4]
 80098d8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80098dc:	e7cb      	b.n	8009876 <_rclc_take_new_data+0xd6>
 80098de:	aa04      	add	r2, sp, #16
 80098e0:	a90a      	add	r1, sp, #40	@ 0x28
 80098e2:	3010      	adds	r0, #16
 80098e4:	f009 fb0c 	bl	8012f00 <rcl_action_take_goal_response>
 80098e8:	4605      	mov	r5, r0
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d1a6      	bne.n	800983c <_rclc_take_new_data+0x9c>
 80098ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098f2:	6860      	ldr	r0, [r4, #4]
 80098f4:	f009 ffaa 	bl	801384c <rclc_action_find_handle_by_goal_request_sequence_number>
 80098f8:	b130      	cbz	r0, 8009908 <_rclc_take_new_data+0x168>
 80098fa:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80098fe:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009902:	2201      	movs	r2, #1
 8009904:	f880 2020 	strb.w	r2, [r0, #32]
 8009908:	6860      	ldr	r0, [r4, #4]
 800990a:	e7af      	b.n	800986c <_rclc_take_new_data+0xcc>
 800990c:	f009 ff48 	bl	80137a0 <rclc_action_take_goal_handle>
 8009910:	4606      	mov	r6, r0
 8009912:	6860      	ldr	r0, [r4, #4]
 8009914:	2e00      	cmp	r6, #0
 8009916:	d099      	beq.n	800984c <_rclc_take_new_data+0xac>
 8009918:	6070      	str	r0, [r6, #4]
 800991a:	69f2      	ldr	r2, [r6, #28]
 800991c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8009920:	3010      	adds	r0, #16
 8009922:	f009 fd09 	bl	8013338 <rcl_action_take_goal_request>
 8009926:	4605      	mov	r5, r0
 8009928:	2800      	cmp	r0, #0
 800992a:	f040 8099 	bne.w	8009a60 <_rclc_take_new_data+0x2c0>
 800992e:	69f7      	ldr	r7, [r6, #28]
 8009930:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009932:	7235      	strb	r5, [r6, #8]
 8009934:	f8c6 0009 	str.w	r0, [r6, #9]
 8009938:	f8c6 100d 	str.w	r1, [r6, #13]
 800993c:	6860      	ldr	r0, [r4, #4]
 800993e:	f8c6 2011 	str.w	r2, [r6, #17]
 8009942:	f8c6 3015 	str.w	r3, [r6, #21]
 8009946:	e781      	b.n	800984c <_rclc_take_new_data+0xac>
 8009948:	aa04      	add	r2, sp, #16
 800994a:	3010      	adds	r0, #16
 800994c:	a90a      	add	r1, sp, #40	@ 0x28
 800994e:	f009 fd63 	bl	8013418 <rcl_action_take_result_request>
 8009952:	4605      	mov	r5, r0
 8009954:	2800      	cmp	r0, #0
 8009956:	f47f af71 	bne.w	800983c <_rclc_take_new_data+0x9c>
 800995a:	6860      	ldr	r0, [r4, #4]
 800995c:	a904      	add	r1, sp, #16
 800995e:	f009 ff45 	bl	80137ec <rclc_action_find_goal_handle_by_uuid>
 8009962:	4607      	mov	r7, r0
 8009964:	b160      	cbz	r0, 8009980 <_rclc_take_new_data+0x1e0>
 8009966:	ad0a      	add	r5, sp, #40	@ 0x28
 8009968:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800996c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800996e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009970:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009974:	f04f 0c02 	mov.w	ip, #2
 8009978:	e886 0003 	stmia.w	r6, {r0, r1}
 800997c:	f887 c008 	strb.w	ip, [r7, #8]
 8009980:	6860      	ldr	r0, [r4, #4]
 8009982:	2300      	movs	r3, #0
 8009984:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8009988:	e764      	b.n	8009854 <_rclc_take_new_data+0xb4>
 800998a:	ae04      	add	r6, sp, #16
 800998c:	aa0a      	add	r2, sp, #40	@ 0x28
 800998e:	3010      	adds	r0, #16
 8009990:	4631      	mov	r1, r6
 8009992:	f009 fd7f 	bl	8013494 <rcl_action_take_cancel_request>
 8009996:	4605      	mov	r5, r0
 8009998:	2800      	cmp	r0, #0
 800999a:	f47f af4f 	bne.w	800983c <_rclc_take_new_data+0x9c>
 800999e:	6860      	ldr	r0, [r4, #4]
 80099a0:	a90a      	add	r1, sp, #40	@ 0x28
 80099a2:	f009 ff23 	bl	80137ec <rclc_action_find_goal_handle_by_uuid>
 80099a6:	4605      	mov	r5, r0
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d04c      	beq.n	8009a46 <_rclc_take_new_data+0x2a6>
 80099ac:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80099b0:	2101      	movs	r1, #1
 80099b2:	f009 fea3 	bl	80136fc <rcl_action_transition_goal_state>
 80099b6:	2803      	cmp	r0, #3
 80099b8:	4607      	mov	r7, r0
 80099ba:	d139      	bne.n	8009a30 <_rclc_take_new_data+0x290>
 80099bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80099be:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 80099c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099c4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80099c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80099cc:	722f      	strb	r7, [r5, #8]
 80099ce:	e746      	b.n	800985e <_rclc_take_new_data+0xbe>
 80099d0:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80099d4:	a90a      	add	r1, sp, #40	@ 0x28
 80099d6:	3010      	adds	r0, #16
 80099d8:	f009 fb40 	bl	801305c <rcl_action_take_cancel_response>
 80099dc:	4605      	mov	r5, r0
 80099de:	2800      	cmp	r0, #0
 80099e0:	f47f af2c 	bne.w	800983c <_rclc_take_new_data+0x9c>
 80099e4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80099e8:	6860      	ldr	r0, [r4, #4]
 80099ea:	f009 ff53 	bl	8013894 <rclc_action_find_handle_by_cancel_request_sequence_number>
 80099ee:	4606      	mov	r6, r0
 80099f0:	6860      	ldr	r0, [r4, #4]
 80099f2:	2e00      	cmp	r6, #0
 80099f4:	f43f af44 	beq.w	8009880 <_rclc_take_new_data+0xe0>
 80099f8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80099fa:	2701      	movs	r7, #1
 80099fc:	84b7      	strh	r7, [r6, #36]	@ 0x24
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f43f af3e 	beq.w	8009880 <_rclc_take_new_data+0xe0>
 8009a04:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009a06:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009a0a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009a0e:	f009 feed 	bl	80137ec <rclc_action_find_goal_handle_by_uuid>
 8009a12:	b138      	cbz	r0, 8009a24 <_rclc_take_new_data+0x284>
 8009a14:	6860      	ldr	r0, [r4, #4]
 8009a16:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009a18:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 8009a1c:	3501      	adds	r5, #1
 8009a1e:	42ab      	cmp	r3, r5
 8009a20:	d8f0      	bhi.n	8009a04 <_rclc_take_new_data+0x264>
 8009a22:	e72d      	b.n	8009880 <_rclc_take_new_data+0xe0>
 8009a24:	6860      	ldr	r0, [r4, #4]
 8009a26:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009a28:	3501      	adds	r5, #1
 8009a2a:	42ab      	cmp	r3, r5
 8009a2c:	d8ea      	bhi.n	8009a04 <_rclc_take_new_data+0x264>
 8009a2e:	e727      	b.n	8009880 <_rclc_take_new_data+0xe0>
 8009a30:	ab06      	add	r3, sp, #24
 8009a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009a34:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009a38:	2103      	movs	r1, #3
 8009a3a:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009a3e:	6860      	ldr	r0, [r4, #4]
 8009a40:	f009 ff9e 	bl	8013980 <rclc_action_server_goal_cancel_reject>
 8009a44:	e70b      	b.n	800985e <_rclc_take_new_data+0xbe>
 8009a46:	ab06      	add	r3, sp, #24
 8009a48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009a4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009a4e:	2102      	movs	r1, #2
 8009a50:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009a54:	6860      	ldr	r0, [r4, #4]
 8009a56:	f009 ff93 	bl	8013980 <rclc_action_server_goal_cancel_reject>
 8009a5a:	e700      	b.n	800985e <_rclc_take_new_data+0xbe>
 8009a5c:	6860      	ldr	r0, [r4, #4]
 8009a5e:	e70a      	b.n	8009876 <_rclc_take_new_data+0xd6>
 8009a60:	6860      	ldr	r0, [r4, #4]
 8009a62:	4631      	mov	r1, r6
 8009a64:	f009 feac 	bl	80137c0 <rclc_action_remove_used_goal_handle>
 8009a68:	f000 fd52 	bl	800a510 <rcutils_reset_error>
 8009a6c:	e6c0      	b.n	80097f0 <_rclc_take_new_data+0x50>
 8009a6e:	2501      	movs	r5, #1
 8009a70:	e6be      	b.n	80097f0 <_rclc_take_new_data+0x50>
 8009a72:	bf00      	nop

08009a74 <rclc_executor_trigger_any>:
 8009a74:	4603      	mov	r3, r0
 8009a76:	b370      	cbz	r0, 8009ad6 <rclc_executor_trigger_any+0x62>
 8009a78:	b379      	cbz	r1, 8009ada <rclc_executor_trigger_any+0x66>
 8009a7a:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8009a7e:	2200      	movs	r2, #0
 8009a80:	b350      	cbz	r0, 8009ad8 <rclc_executor_trigger_any+0x64>
 8009a82:	b430      	push	{r4, r5}
 8009a84:	f893 c000 	ldrb.w	ip, [r3]
 8009a88:	f1bc 0f08 	cmp.w	ip, #8
 8009a8c:	d017      	beq.n	8009abe <rclc_executor_trigger_any+0x4a>
 8009a8e:	f1bc 0f09 	cmp.w	ip, #9
 8009a92:	d00d      	beq.n	8009ab0 <rclc_executor_trigger_any+0x3c>
 8009a94:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8009a98:	b940      	cbnz	r0, 8009aac <rclc_executor_trigger_any+0x38>
 8009a9a:	3201      	adds	r2, #1
 8009a9c:	4291      	cmp	r1, r2
 8009a9e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8009aa2:	d003      	beq.n	8009aac <rclc_executor_trigger_any+0x38>
 8009aa4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d1eb      	bne.n	8009a84 <rclc_executor_trigger_any+0x10>
 8009aac:	bc30      	pop	{r4, r5}
 8009aae:	4770      	bx	lr
 8009ab0:	685c      	ldr	r4, [r3, #4]
 8009ab2:	6a25      	ldr	r5, [r4, #32]
 8009ab4:	2d00      	cmp	r5, #0
 8009ab6:	d1f9      	bne.n	8009aac <rclc_executor_trigger_any+0x38>
 8009ab8:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8009abc:	e7ec      	b.n	8009a98 <rclc_executor_trigger_any+0x24>
 8009abe:	685c      	ldr	r4, [r3, #4]
 8009ac0:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009ac2:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009ac6:	d1f1      	bne.n	8009aac <rclc_executor_trigger_any+0x38>
 8009ac8:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d1ed      	bne.n	8009aac <rclc_executor_trigger_any+0x38>
 8009ad0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009ad4:	e7e0      	b.n	8009a98 <rclc_executor_trigger_any+0x24>
 8009ad6:	4770      	bx	lr
 8009ad8:	4770      	bx	lr
 8009ada:	4608      	mov	r0, r1
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop

08009ae0 <_rclc_execute>:
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	f000 80dc 	beq.w	8009c9e <_rclc_execute+0x1be>
 8009ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ae8:	7843      	ldrb	r3, [r0, #1]
 8009aea:	b087      	sub	sp, #28
 8009aec:	4604      	mov	r4, r0
 8009aee:	b123      	cbz	r3, 8009afa <_rclc_execute+0x1a>
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d01c      	beq.n	8009b2e <_rclc_execute+0x4e>
 8009af4:	2000      	movs	r0, #0
 8009af6:	b007      	add	sp, #28
 8009af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afa:	7803      	ldrb	r3, [r0, #0]
 8009afc:	2b08      	cmp	r3, #8
 8009afe:	f000 80a0 	beq.w	8009c42 <_rclc_execute+0x162>
 8009b02:	2b09      	cmp	r3, #9
 8009b04:	d024      	beq.n	8009b50 <_rclc_execute+0x70>
 8009b06:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d0f2      	beq.n	8009af4 <_rclc_execute+0x14>
 8009b0e:	2b0a      	cmp	r3, #10
 8009b10:	f200 815a 	bhi.w	8009dc8 <_rclc_execute+0x2e8>
 8009b14:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009b18:	008e006f 	.word	0x008e006f
 8009b1c:	006f007c 	.word	0x006f007c
 8009b20:	00590073 	.word	0x00590073
 8009b24:	00590059 	.word	0x00590059
 8009b28:	01580158 	.word	0x01580158
 8009b2c:	0079      	.short	0x0079
 8009b2e:	7803      	ldrb	r3, [r0, #0]
 8009b30:	2b0a      	cmp	r3, #10
 8009b32:	f200 8149 	bhi.w	8009dc8 <_rclc_execute+0x2e8>
 8009b36:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009b3a:	00f9      	.short	0x00f9
 8009b3c:	006b007b 	.word	0x006b007b
 8009b40:	0062005e 	.word	0x0062005e
 8009b44:	00480048 	.word	0x00480048
 8009b48:	01000048 	.word	0x01000048
 8009b4c:	00680102 	.word	0x00680102
 8009b50:	6840      	ldr	r0, [r0, #4]
 8009b52:	6a02      	ldr	r2, [r0, #32]
 8009b54:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009b58:	2a00      	cmp	r2, #0
 8009b5a:	f040 80f3 	bne.w	8009d44 <_rclc_execute+0x264>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0c8      	beq.n	8009af4 <_rclc_execute+0x14>
 8009b62:	e003      	b.n	8009b6c <_rclc_execute+0x8c>
 8009b64:	6858      	ldr	r0, [r3, #4]
 8009b66:	f009 fe2b 	bl	80137c0 <rclc_action_remove_used_goal_handle>
 8009b6a:	6860      	ldr	r0, [r4, #4]
 8009b6c:	f009 fe62 	bl	8013834 <rclc_action_find_first_terminated_handle>
 8009b70:	4603      	mov	r3, r0
 8009b72:	4601      	mov	r1, r0
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d1f5      	bne.n	8009b64 <_rclc_execute+0x84>
 8009b78:	6860      	ldr	r0, [r4, #4]
 8009b7a:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8009b7e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 80eb 	beq.w	8009d5e <_rclc_execute+0x27e>
 8009b88:	f241 0604 	movw	r6, #4100	@ 0x1004
 8009b8c:	2701      	movs	r7, #1
 8009b8e:	e007      	b.n	8009ba0 <_rclc_execute+0xc0>
 8009b90:	4628      	mov	r0, r5
 8009b92:	f009 fea9 	bl	80138e8 <rclc_action_server_response_goal_request>
 8009b96:	6860      	ldr	r0, [r4, #4]
 8009b98:	4629      	mov	r1, r5
 8009b9a:	f009 fe11 	bl	80137c0 <rclc_action_remove_used_goal_handle>
 8009b9e:	6860      	ldr	r0, [r4, #4]
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	f009 fe3b 	bl	801381c <rclc_action_find_first_handle_by_status>
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	f000 80d5 	beq.w	8009d58 <_rclc_execute+0x278>
 8009bae:	6863      	ldr	r3, [r4, #4]
 8009bb0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	4798      	blx	r3
 8009bb6:	42b0      	cmp	r0, r6
 8009bb8:	f04f 0100 	mov.w	r1, #0
 8009bbc:	d1e8      	bne.n	8009b90 <_rclc_execute+0xb0>
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	f009 fe91 	bl	80138e8 <rclc_action_server_response_goal_request>
 8009bc6:	722f      	strb	r7, [r5, #8]
 8009bc8:	e7e9      	b.n	8009b9e <_rclc_execute+0xbe>
 8009bca:	2b06      	cmp	r3, #6
 8009bcc:	68a0      	ldr	r0, [r4, #8]
 8009bce:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009bd0:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8009bd2:	f000 80bb 	beq.w	8009d4c <_rclc_execute+0x26c>
 8009bd6:	2b07      	cmp	r3, #7
 8009bd8:	f000 80f1 	beq.w	8009dbe <_rclc_execute+0x2de>
 8009bdc:	47b0      	blx	r6
 8009bde:	f104 0510 	add.w	r5, r4, #16
 8009be2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009be4:	6860      	ldr	r0, [r4, #4]
 8009be6:	4629      	mov	r1, r5
 8009be8:	f007 fe2e 	bl	8011848 <rcl_send_response>
 8009bec:	2802      	cmp	r0, #2
 8009bee:	d117      	bne.n	8009c20 <_rclc_execute+0x140>
 8009bf0:	f000 fc8e 	bl	800a510 <rcutils_reset_error>
 8009bf4:	e77e      	b.n	8009af4 <_rclc_execute+0x14>
 8009bf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009bf8:	68a0      	ldr	r0, [r4, #8]
 8009bfa:	4798      	blx	r3
 8009bfc:	e77a      	b.n	8009af4 <_rclc_execute+0x14>
 8009bfe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009c00:	68a0      	ldr	r0, [r4, #8]
 8009c02:	f104 0110 	add.w	r1, r4, #16
 8009c06:	4798      	blx	r3
 8009c08:	e774      	b.n	8009af4 <_rclc_execute+0x14>
 8009c0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009c0c:	4798      	blx	r3
 8009c0e:	e771      	b.n	8009af4 <_rclc_execute+0x14>
 8009c10:	6860      	ldr	r0, [r4, #4]
 8009c12:	f008 fa21 	bl	8012058 <rcl_timer_call>
 8009c16:	f240 3321 	movw	r3, #801	@ 0x321
 8009c1a:	4298      	cmp	r0, r3
 8009c1c:	f43f af6a 	beq.w	8009af4 <_rclc_execute+0x14>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	f43f af68 	beq.w	8009af6 <_rclc_execute+0x16>
 8009c26:	9005      	str	r0, [sp, #20]
 8009c28:	f000 fc72 	bl	800a510 <rcutils_reset_error>
 8009c2c:	9805      	ldr	r0, [sp, #20]
 8009c2e:	e762      	b.n	8009af6 <_rclc_execute+0x16>
 8009c30:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8009c34:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d0e4      	beq.n	8009c06 <_rclc_execute+0x126>
 8009c3c:	68a0      	ldr	r0, [r4, #8]
 8009c3e:	4798      	blx	r3
 8009c40:	e758      	b.n	8009af4 <_rclc_execute+0x14>
 8009c42:	6840      	ldr	r0, [r0, #4]
 8009c44:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009c46:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 8009c4a:	d107      	bne.n	8009c5c <_rclc_execute+0x17c>
 8009c4c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009c50:	b923      	cbnz	r3, 8009c5c <_rclc_execute+0x17c>
 8009c52:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f43f af4c 	beq.w	8009af4 <_rclc_execute+0x14>
 8009c5c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8009c60:	b303      	cbz	r3, 8009ca4 <_rclc_execute+0x1c4>
 8009c62:	2600      	movs	r6, #0
 8009c64:	2701      	movs	r7, #1
 8009c66:	e004      	b.n	8009c72 <_rclc_execute+0x192>
 8009c68:	f009 fd74 	bl	8013754 <rclc_action_send_result_request>
 8009c6c:	b990      	cbnz	r0, 8009c94 <_rclc_execute+0x1b4>
 8009c6e:	722f      	strb	r7, [r5, #8]
 8009c70:	6860      	ldr	r0, [r4, #4]
 8009c72:	f009 fe21 	bl	80138b8 <rclc_action_find_first_handle_with_goal_response>
 8009c76:	4605      	mov	r5, r0
 8009c78:	b198      	cbz	r0, 8009ca2 <_rclc_execute+0x1c2>
 8009c7a:	6863      	ldr	r3, [r4, #4]
 8009c7c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8009c84:	f885 6020 	strb.w	r6, [r5, #32]
 8009c88:	4798      	blx	r3
 8009c8a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8009c8e:	4628      	mov	r0, r5
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e9      	bne.n	8009c68 <_rclc_execute+0x188>
 8009c94:	6860      	ldr	r0, [r4, #4]
 8009c96:	4629      	mov	r1, r5
 8009c98:	f009 fd92 	bl	80137c0 <rclc_action_remove_used_goal_handle>
 8009c9c:	e7e8      	b.n	8009c70 <_rclc_execute+0x190>
 8009c9e:	200b      	movs	r0, #11
 8009ca0:	4770      	bx	lr
 8009ca2:	6860      	ldr	r0, [r4, #4]
 8009ca4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8009ca8:	b18b      	cbz	r3, 8009cce <_rclc_execute+0x1ee>
 8009caa:	68c5      	ldr	r5, [r0, #12]
 8009cac:	b32d      	cbz	r5, 8009cfa <_rclc_execute+0x21a>
 8009cae:	2600      	movs	r6, #0
 8009cb0:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009cb4:	b143      	cbz	r3, 8009cc8 <_rclc_execute+0x1e8>
 8009cb6:	69c3      	ldr	r3, [r0, #28]
 8009cb8:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009cbc:	b123      	cbz	r3, 8009cc8 <_rclc_execute+0x1e8>
 8009cbe:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009cc0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	4798      	blx	r3
 8009cc6:	6860      	ldr	r0, [r4, #4]
 8009cc8:	682d      	ldr	r5, [r5, #0]
 8009cca:	2d00      	cmp	r5, #0
 8009ccc:	d1f0      	bne.n	8009cb0 <_rclc_execute+0x1d0>
 8009cce:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009cd2:	b193      	cbz	r3, 8009cfa <_rclc_execute+0x21a>
 8009cd4:	68c5      	ldr	r5, [r0, #12]
 8009cd6:	b185      	cbz	r5, 8009cfa <_rclc_execute+0x21a>
 8009cd8:	2600      	movs	r6, #0
 8009cda:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009cde:	b14b      	cbz	r3, 8009cf4 <_rclc_execute+0x214>
 8009ce0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009ce2:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009ce6:	b12b      	cbz	r3, 8009cf4 <_rclc_execute+0x214>
 8009ce8:	4628      	mov	r0, r5
 8009cea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009cec:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009cf0:	4798      	blx	r3
 8009cf2:	6860      	ldr	r0, [r4, #4]
 8009cf4:	682d      	ldr	r5, [r5, #0]
 8009cf6:	2d00      	cmp	r5, #0
 8009cf8:	d1ef      	bne.n	8009cda <_rclc_execute+0x1fa>
 8009cfa:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f43f aef8 	beq.w	8009af4 <_rclc_execute+0x14>
 8009d04:	2700      	movs	r7, #0
 8009d06:	e00b      	b.n	8009d20 <_rclc_execute+0x240>
 8009d08:	6863      	ldr	r3, [r4, #4]
 8009d0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009d0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009d0e:	6a1e      	ldr	r6, [r3, #32]
 8009d10:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009d14:	47b0      	blx	r6
 8009d16:	6860      	ldr	r0, [r4, #4]
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f009 fd51 	bl	80137c0 <rclc_action_remove_used_goal_handle>
 8009d1e:	6860      	ldr	r0, [r4, #4]
 8009d20:	f009 fdd6 	bl	80138d0 <rclc_action_find_first_handle_with_result_response>
 8009d24:	4605      	mov	r5, r0
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d1ee      	bne.n	8009d08 <_rclc_execute+0x228>
 8009d2a:	e6e3      	b.n	8009af4 <_rclc_execute+0x14>
 8009d2c:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8009d30:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009d32:	2800      	cmp	r0, #0
 8009d34:	f43f af61 	beq.w	8009bfa <_rclc_execute+0x11a>
 8009d38:	e75e      	b.n	8009bf8 <_rclc_execute+0x118>
 8009d3a:	6840      	ldr	r0, [r0, #4]
 8009d3c:	e78e      	b.n	8009c5c <_rclc_execute+0x17c>
 8009d3e:	6840      	ldr	r0, [r0, #4]
 8009d40:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f43f af1a 	beq.w	8009b7e <_rclc_execute+0x9e>
 8009d4a:	e70f      	b.n	8009b6c <_rclc_execute+0x8c>
 8009d4c:	f104 0510 	add.w	r5, r4, #16
 8009d50:	460a      	mov	r2, r1
 8009d52:	4629      	mov	r1, r5
 8009d54:	47b0      	blx	r6
 8009d56:	e744      	b.n	8009be2 <_rclc_execute+0x102>
 8009d58:	6860      	ldr	r0, [r4, #4]
 8009d5a:	f880 5020 	strb.w	r5, [r0, #32]
 8009d5e:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f43f aec6 	beq.w	8009af4 <_rclc_execute+0x14>
 8009d68:	68c5      	ldr	r5, [r0, #12]
 8009d6a:	b325      	cbz	r5, 8009db6 <_rclc_execute+0x2d6>
 8009d6c:	2602      	movs	r6, #2
 8009d6e:	e001      	b.n	8009d74 <_rclc_execute+0x294>
 8009d70:	682d      	ldr	r5, [r5, #0]
 8009d72:	b305      	cbz	r5, 8009db6 <_rclc_execute+0x2d6>
 8009d74:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009d78:	2b03      	cmp	r3, #3
 8009d7a:	d1f9      	bne.n	8009d70 <_rclc_execute+0x290>
 8009d7c:	69c3      	ldr	r3, [r0, #28]
 8009d7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d80:	4628      	mov	r0, r5
 8009d82:	4798      	blx	r3
 8009d84:	4603      	mov	r3, r0
 8009d86:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009d90:	b11b      	cbz	r3, 8009d9a <_rclc_execute+0x2ba>
 8009d92:	f009 fdc9 	bl	8013928 <rclc_action_server_goal_cancel_accept>
 8009d96:	6860      	ldr	r0, [r4, #4]
 8009d98:	e7ea      	b.n	8009d70 <_rclc_execute+0x290>
 8009d9a:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009d9c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009da0:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009da8:	6860      	ldr	r0, [r4, #4]
 8009daa:	2101      	movs	r1, #1
 8009dac:	f009 fde8 	bl	8013980 <rclc_action_server_goal_cancel_reject>
 8009db0:	722e      	strb	r6, [r5, #8]
 8009db2:	6860      	ldr	r0, [r4, #4]
 8009db4:	e7dc      	b.n	8009d70 <_rclc_execute+0x290>
 8009db6:	2300      	movs	r3, #0
 8009db8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009dbc:	e69a      	b.n	8009af4 <_rclc_execute+0x14>
 8009dbe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009dc0:	47b0      	blx	r6
 8009dc2:	f104 0510 	add.w	r5, r4, #16
 8009dc6:	e70c      	b.n	8009be2 <_rclc_execute+0x102>
 8009dc8:	2001      	movs	r0, #1
 8009dca:	e694      	b.n	8009af6 <_rclc_execute+0x16>
 8009dcc:	0000      	movs	r0, r0
	...

08009dd0 <rclc_executor_init>:
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d05a      	beq.n	8009e8a <rclc_executor_init+0xba>
 8009dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd8:	460d      	mov	r5, r1
 8009dda:	b0b2      	sub	sp, #200	@ 0xc8
 8009ddc:	2900      	cmp	r1, #0
 8009dde:	d050      	beq.n	8009e82 <rclc_executor_init+0xb2>
 8009de0:	4604      	mov	r4, r0
 8009de2:	4618      	mov	r0, r3
 8009de4:	4616      	mov	r6, r2
 8009de6:	461f      	mov	r7, r3
 8009de8:	f000 fb66 	bl	800a4b8 <rcutils_allocator_is_valid>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d048      	beq.n	8009e82 <rclc_executor_init+0xb2>
 8009df0:	2e00      	cmp	r6, #0
 8009df2:	d046      	beq.n	8009e82 <rclc_executor_init+0xb2>
 8009df4:	492a      	ldr	r1, [pc, #168]	@ (8009ea0 <rclc_executor_init+0xd0>)
 8009df6:	2290      	movs	r2, #144	@ 0x90
 8009df8:	a80e      	add	r0, sp, #56	@ 0x38
 8009dfa:	f00e fcbe 	bl	801877a <memcpy>
 8009dfe:	a90e      	add	r1, sp, #56	@ 0x38
 8009e00:	2290      	movs	r2, #144	@ 0x90
 8009e02:	4620      	mov	r0, r4
 8009e04:	f00e fcb9 	bl	801877a <memcpy>
 8009e08:	6065      	str	r5, [r4, #4]
 8009e0a:	4668      	mov	r0, sp
 8009e0c:	60e6      	str	r6, [r4, #12]
 8009e0e:	466d      	mov	r5, sp
 8009e10:	f008 fa14 	bl	801223c <rcl_get_zero_initialized_wait_set>
 8009e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e16:	f104 0c18 	add.w	ip, r4, #24
 8009e1a:	f8d7 8000 	ldr.w	r8, [r7]
 8009e1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009e2e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8009e98 <rclc_executor_init+0xc8>
 8009e32:	682b      	ldr	r3, [r5, #0]
 8009e34:	f8cc 3000 	str.w	r3, [ip]
 8009e38:	6939      	ldr	r1, [r7, #16]
 8009e3a:	6167      	str	r7, [r4, #20]
 8009e3c:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 8009e40:	01b0      	lsls	r0, r6, #6
 8009e42:	47c0      	blx	r8
 8009e44:	60a0      	str	r0, [r4, #8]
 8009e46:	b310      	cbz	r0, 8009e8e <rclc_executor_init+0xbe>
 8009e48:	2500      	movs	r5, #0
 8009e4a:	e000      	b.n	8009e4e <rclc_executor_init+0x7e>
 8009e4c:	68a0      	ldr	r0, [r4, #8]
 8009e4e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 8009e52:	4631      	mov	r1, r6
 8009e54:	3501      	adds	r5, #1
 8009e56:	f000 f9f1 	bl	800a23c <rclc_executor_handle_init>
 8009e5a:	42ae      	cmp	r6, r5
 8009e5c:	d1f6      	bne.n	8009e4c <rclc_executor_init+0x7c>
 8009e5e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8009e62:	f000 f9e1 	bl	800a228 <rclc_executor_handle_counters_zero_init>
 8009e66:	490f      	ldr	r1, [pc, #60]	@ (8009ea4 <rclc_executor_init+0xd4>)
 8009e68:	68a2      	ldr	r2, [r4, #8]
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 8009e70:	b12a      	cbz	r2, 8009e7e <rclc_executor_init+0xae>
 8009e72:	6962      	ldr	r2, [r4, #20]
 8009e74:	b11a      	cbz	r2, 8009e7e <rclc_executor_init+0xae>
 8009e76:	68e2      	ldr	r2, [r4, #12]
 8009e78:	b10a      	cbz	r2, 8009e7e <rclc_executor_init+0xae>
 8009e7a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 8009e7e:	2000      	movs	r0, #0
 8009e80:	e000      	b.n	8009e84 <rclc_executor_init+0xb4>
 8009e82:	200b      	movs	r0, #11
 8009e84:	b032      	add	sp, #200	@ 0xc8
 8009e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e8a:	200b      	movs	r0, #11
 8009e8c:	4770      	bx	lr
 8009e8e:	200a      	movs	r0, #10
 8009e90:	e7f8      	b.n	8009e84 <rclc_executor_init+0xb4>
 8009e92:	bf00      	nop
 8009e94:	f3af 8000 	nop.w
 8009e98:	3b9aca00 	.word	0x3b9aca00
 8009e9c:	00000000 	.word	0x00000000
 8009ea0:	0801a8c0 	.word	0x0801a8c0
 8009ea4:	08009a75 	.word	0x08009a75

08009ea8 <rclc_executor_add_timer>:
 8009ea8:	b300      	cbz	r0, 8009eec <rclc_executor_add_timer+0x44>
 8009eaa:	b1f9      	cbz	r1, 8009eec <rclc_executor_add_timer+0x44>
 8009eac:	b538      	push	{r3, r4, r5, lr}
 8009eae:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	d301      	bcc.n	8009ebc <rclc_executor_add_timer+0x14>
 8009eb8:	2001      	movs	r0, #1
 8009eba:	bd38      	pop	{r3, r4, r5, pc}
 8009ebc:	6880      	ldr	r0, [r0, #8]
 8009ebe:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8009ec2:	019d      	lsls	r5, r3, #6
 8009ec4:	6051      	str	r1, [r2, #4]
 8009ec6:	2102      	movs	r1, #2
 8009ec8:	5341      	strh	r1, [r0, r5]
 8009eca:	3301      	adds	r3, #1
 8009ecc:	2000      	movs	r0, #0
 8009ece:	2101      	movs	r1, #1
 8009ed0:	f104 0518 	add.w	r5, r4, #24
 8009ed4:	62d0      	str	r0, [r2, #44]	@ 0x2c
 8009ed6:	8711      	strh	r1, [r2, #56]	@ 0x38
 8009ed8:	4628      	mov	r0, r5
 8009eda:	6123      	str	r3, [r4, #16]
 8009edc:	f008 f9c2 	bl	8012264 <rcl_wait_set_is_valid>
 8009ee0:	b930      	cbnz	r0, 8009ef0 <rclc_executor_add_timer+0x48>
 8009ee2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	6523      	str	r3, [r4, #80]	@ 0x50
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	200b      	movs	r0, #11
 8009eee:	4770      	bx	lr
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f008 f9bd 	bl	8012270 <rcl_wait_set_fini>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d0f3      	beq.n	8009ee2 <rclc_executor_add_timer+0x3a>
 8009efa:	bd38      	pop	{r3, r4, r5, pc}

08009efc <rclc_executor_prepare>:
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d044      	beq.n	8009f8a <rclc_executor_prepare+0x8e>
 8009f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f02:	f100 0518 	add.w	r5, r0, #24
 8009f06:	b09b      	sub	sp, #108	@ 0x6c
 8009f08:	4604      	mov	r4, r0
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	f008 f9aa 	bl	8012264 <rcl_wait_set_is_valid>
 8009f10:	b110      	cbz	r0, 8009f18 <rclc_executor_prepare+0x1c>
 8009f12:	2000      	movs	r0, #0
 8009f14:	b01b      	add	sp, #108	@ 0x6c
 8009f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f008 f9a9 	bl	8012270 <rcl_wait_set_fini>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d130      	bne.n	8009f84 <rclc_executor_prepare+0x88>
 8009f22:	a80c      	add	r0, sp, #48	@ 0x30
 8009f24:	f008 f98a 	bl	801223c <rcl_get_zero_initialized_wait_set>
 8009f28:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009f2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009f30:	46ae      	mov	lr, r5
 8009f32:	6967      	ldr	r7, [r4, #20]
 8009f34:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009f38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009f3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009f40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009f44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009f48:	f8dc 3000 	ldr.w	r3, [ip]
 8009f4c:	f8ce 3000 	str.w	r3, [lr]
 8009f50:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009f52:	ae04      	add	r6, sp, #16
 8009f54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	6862      	ldr	r2, [r4, #4]
 8009f5a:	6033      	str	r3, [r6, #0]
 8009f5c:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009f5e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8009f60:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009f64:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 8009f68:	e9cd 2100 	strd	r2, r1, [sp]
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f70:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8009f72:	f008 fcad 	bl	80128d0 <rcl_wait_set_init>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d0cc      	beq.n	8009f14 <rclc_executor_prepare+0x18>
 8009f7a:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009f7c:	f000 fac8 	bl	800a510 <rcutils_reset_error>
 8009f80:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009f82:	e7c7      	b.n	8009f14 <rclc_executor_prepare+0x18>
 8009f84:	f000 fac4 	bl	800a510 <rcutils_reset_error>
 8009f88:	e7cb      	b.n	8009f22 <rclc_executor_prepare+0x26>
 8009f8a:	200b      	movs	r0, #11
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop

08009f90 <rclc_executor_spin_some>:
 8009f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f94:	b083      	sub	sp, #12
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f000 8091 	beq.w	800a0be <rclc_executor_spin_some+0x12e>
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	6840      	ldr	r0, [r0, #4]
 8009fa0:	4690      	mov	r8, r2
 8009fa2:	4699      	mov	r9, r3
 8009fa4:	f006 ff14 	bl	8010dd0 <rcl_context_is_valid>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d037      	beq.n	800a01c <rclc_executor_spin_some+0x8c>
 8009fac:	4620      	mov	r0, r4
 8009fae:	f104 0718 	add.w	r7, r4, #24
 8009fb2:	f7ff ffa3 	bl	8009efc <rclc_executor_prepare>
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f008 fa3e 	bl	8012438 <rcl_wait_set_clear>
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d177      	bne.n	800a0b2 <rclc_executor_spin_some+0x122>
 8009fc2:	68e3      	ldr	r3, [r4, #12]
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	b1eb      	cbz	r3, 800a004 <rclc_executor_spin_some+0x74>
 8009fc8:	68a1      	ldr	r1, [r4, #8]
 8009fca:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 8009fce:	01aa      	lsls	r2, r5, #6
 8009fd0:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009fd4:	b1b3      	cbz	r3, 800a004 <rclc_executor_spin_some+0x74>
 8009fd6:	5c8b      	ldrb	r3, [r1, r2]
 8009fd8:	2b0a      	cmp	r3, #10
 8009fda:	d81f      	bhi.n	800a01c <rclc_executor_spin_some+0x8c>
 8009fdc:	e8df f003 	tbb	[pc, r3]
 8009fe0:	253e3434 	.word	0x253e3434
 8009fe4:	06060625 	.word	0x06060625
 8009fe8:	525d      	.short	0x525d
 8009fea:	48          	.byte	0x48
 8009feb:	00          	.byte	0x00
 8009fec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ff0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f008 fd75 	bl	8012ae4 <rcl_wait_set_add_service>
 8009ffa:	b9f8      	cbnz	r0, 800a03c <rclc_executor_spin_some+0xac>
 8009ffc:	68e3      	ldr	r3, [r4, #12]
 8009ffe:	3501      	adds	r5, #1
 800a000:	42ab      	cmp	r3, r5
 800a002:	d8e1      	bhi.n	8009fc8 <rclc_executor_spin_some+0x38>
 800a004:	4642      	mov	r2, r8
 800a006:	464b      	mov	r3, r9
 800a008:	4638      	mov	r0, r7
 800a00a:	f008 fd99 	bl	8012b40 <rcl_wait>
 800a00e:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800a012:	2d00      	cmp	r5, #0
 800a014:	f000 80ab 	beq.w	800a16e <rclc_executor_spin_some+0x1de>
 800a018:	2d01      	cmp	r5, #1
 800a01a:	d055      	beq.n	800a0c8 <rclc_executor_spin_some+0x138>
 800a01c:	f000 fa78 	bl	800a510 <rcutils_reset_error>
 800a020:	2601      	movs	r6, #1
 800a022:	4630      	mov	r0, r6
 800a024:	b003      	add	sp, #12
 800a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a02e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a032:	4638      	mov	r0, r7
 800a034:	f008 fd2a 	bl	8012a8c <rcl_wait_set_add_client>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d0df      	beq.n	8009ffc <rclc_executor_spin_some+0x6c>
 800a03c:	9001      	str	r0, [sp, #4]
 800a03e:	f000 fa67 	bl	800a510 <rcutils_reset_error>
 800a042:	9801      	ldr	r0, [sp, #4]
 800a044:	4606      	mov	r6, r0
 800a046:	e7ec      	b.n	800a022 <rclc_executor_spin_some+0x92>
 800a048:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a04c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a050:	4638      	mov	r0, r7
 800a052:	f008 f9c5 	bl	80123e0 <rcl_wait_set_add_subscription>
 800a056:	2800      	cmp	r0, #0
 800a058:	d0d0      	beq.n	8009ffc <rclc_executor_spin_some+0x6c>
 800a05a:	e7ef      	b.n	800a03c <rclc_executor_spin_some+0xac>
 800a05c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a060:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a064:	4638      	mov	r0, r7
 800a066:	f008 fce1 	bl	8012a2c <rcl_wait_set_add_timer>
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d0c6      	beq.n	8009ffc <rclc_executor_spin_some+0x6c>
 800a06e:	e7e5      	b.n	800a03c <rclc_executor_spin_some+0xac>
 800a070:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a074:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a078:	4638      	mov	r0, r7
 800a07a:	f008 fcab 	bl	80129d4 <rcl_wait_set_add_guard_condition>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d0bc      	beq.n	8009ffc <rclc_executor_spin_some+0x6c>
 800a082:	e7db      	b.n	800a03c <rclc_executor_spin_some+0xac>
 800a084:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a088:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a08c:	3110      	adds	r1, #16
 800a08e:	4638      	mov	r0, r7
 800a090:	f009 fa74 	bl	801357c <rcl_action_wait_set_add_action_server>
 800a094:	2800      	cmp	r0, #0
 800a096:	d0b1      	beq.n	8009ffc <rclc_executor_spin_some+0x6c>
 800a098:	e7d0      	b.n	800a03c <rclc_executor_spin_some+0xac>
 800a09a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800a0a4:	3110      	adds	r1, #16
 800a0a6:	4638      	mov	r0, r7
 800a0a8:	f009 f856 	bl	8013158 <rcl_action_wait_set_add_action_client>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d0a5      	beq.n	8009ffc <rclc_executor_spin_some+0x6c>
 800a0b0:	e7c4      	b.n	800a03c <rclc_executor_spin_some+0xac>
 800a0b2:	f000 fa2d 	bl	800a510 <rcutils_reset_error>
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	b003      	add	sp, #12
 800a0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0be:	260b      	movs	r6, #11
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	b003      	add	sp, #12
 800a0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c8:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800a0cc:	4663      	mov	r3, ip
 800a0ce:	4615      	mov	r5, r2
 800a0d0:	b1ca      	cbz	r2, 800a106 <rclc_executor_spin_some+0x176>
 800a0d2:	2500      	movs	r5, #0
 800a0d4:	46a8      	mov	r8, r5
 800a0d6:	f240 1991 	movw	r9, #401	@ 0x191
 800a0da:	e00c      	b.n	800a0f6 <rclc_executor_spin_some+0x166>
 800a0dc:	f7ff fb12 	bl	8009704 <_rclc_check_for_new_data>
 800a0e0:	f108 0801 	add.w	r8, r8, #1
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	b108      	cbz	r0, 800a0ec <rclc_executor_spin_some+0x15c>
 800a0e8:	4548      	cmp	r0, r9
 800a0ea:	d13e      	bne.n	800a16a <rclc_executor_spin_some+0x1da>
 800a0ec:	68e2      	ldr	r2, [r4, #12]
 800a0ee:	4590      	cmp	r8, r2
 800a0f0:	f080 808b 	bcs.w	800a20a <rclc_executor_spin_some+0x27a>
 800a0f4:	68a3      	ldr	r3, [r4, #8]
 800a0f6:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800a0fa:	469c      	mov	ip, r3
 800a0fc:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a100:	4639      	mov	r1, r7
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1ea      	bne.n	800a0dc <rclc_executor_spin_some+0x14c>
 800a106:	4611      	mov	r1, r2
 800a108:	4660      	mov	r0, ip
 800a10a:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800a10e:	4798      	blx	r3
 800a110:	b358      	cbz	r0, 800a16a <rclc_executor_spin_some+0x1da>
 800a112:	68e3      	ldr	r3, [r4, #12]
 800a114:	b34b      	cbz	r3, 800a16a <rclc_executor_spin_some+0x1da>
 800a116:	f04f 0800 	mov.w	r8, #0
 800a11a:	f240 1991 	movw	r9, #401	@ 0x191
 800a11e:	e00a      	b.n	800a136 <rclc_executor_spin_some+0x1a6>
 800a120:	f7ff fb3e 	bl	80097a0 <_rclc_take_new_data>
 800a124:	f108 0801 	add.w	r8, r8, #1
 800a128:	4605      	mov	r5, r0
 800a12a:	b108      	cbz	r0, 800a130 <rclc_executor_spin_some+0x1a0>
 800a12c:	4548      	cmp	r0, r9
 800a12e:	d11c      	bne.n	800a16a <rclc_executor_spin_some+0x1da>
 800a130:	68e3      	ldr	r3, [r4, #12]
 800a132:	4598      	cmp	r8, r3
 800a134:	d26f      	bcs.n	800a216 <rclc_executor_spin_some+0x286>
 800a136:	68a3      	ldr	r3, [r4, #8]
 800a138:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800a13c:	4639      	mov	r1, r7
 800a13e:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800a142:	2a00      	cmp	r2, #0
 800a144:	d1ec      	bne.n	800a120 <rclc_executor_spin_some+0x190>
 800a146:	2700      	movs	r7, #0
 800a148:	e009      	b.n	800a15e <rclc_executor_spin_some+0x1ce>
 800a14a:	f7ff fcc9 	bl	8009ae0 <_rclc_execute>
 800a14e:	3701      	adds	r7, #1
 800a150:	4605      	mov	r5, r0
 800a152:	b950      	cbnz	r0, 800a16a <rclc_executor_spin_some+0x1da>
 800a154:	68e3      	ldr	r3, [r4, #12]
 800a156:	429f      	cmp	r7, r3
 800a158:	f4bf af63 	bcs.w	800a022 <rclc_executor_spin_some+0x92>
 800a15c:	68a3      	ldr	r3, [r4, #8]
 800a15e:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800a162:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1ef      	bne.n	800a14a <rclc_executor_spin_some+0x1ba>
 800a16a:	462e      	mov	r6, r5
 800a16c:	e759      	b.n	800a022 <rclc_executor_spin_some+0x92>
 800a16e:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800a172:	4663      	mov	r3, ip
 800a174:	2a00      	cmp	r2, #0
 800a176:	d054      	beq.n	800a222 <rclc_executor_spin_some+0x292>
 800a178:	46a8      	mov	r8, r5
 800a17a:	f240 1991 	movw	r9, #401	@ 0x191
 800a17e:	e00b      	b.n	800a198 <rclc_executor_spin_some+0x208>
 800a180:	f7ff fac0 	bl	8009704 <_rclc_check_for_new_data>
 800a184:	f108 0801 	add.w	r8, r8, #1
 800a188:	4605      	mov	r5, r0
 800a18a:	b108      	cbz	r0, 800a190 <rclc_executor_spin_some+0x200>
 800a18c:	4548      	cmp	r0, r9
 800a18e:	d1ec      	bne.n	800a16a <rclc_executor_spin_some+0x1da>
 800a190:	68e2      	ldr	r2, [r4, #12]
 800a192:	4590      	cmp	r8, r2
 800a194:	d23c      	bcs.n	800a210 <rclc_executor_spin_some+0x280>
 800a196:	68a3      	ldr	r3, [r4, #8]
 800a198:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800a19c:	469c      	mov	ip, r3
 800a19e:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1eb      	bne.n	800a180 <rclc_executor_spin_some+0x1f0>
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	4660      	mov	r0, ip
 800a1ac:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800a1b0:	4798      	blx	r3
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d0d9      	beq.n	800a16a <rclc_executor_spin_some+0x1da>
 800a1b6:	68e3      	ldr	r3, [r4, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d0d6      	beq.n	800a16a <rclc_executor_spin_some+0x1da>
 800a1bc:	f04f 0a00 	mov.w	sl, #0
 800a1c0:	f240 1891 	movw	r8, #401	@ 0x191
 800a1c4:	f240 2959 	movw	r9, #601	@ 0x259
 800a1c8:	e013      	b.n	800a1f2 <rclc_executor_spin_some+0x262>
 800a1ca:	f7ff fae9 	bl	80097a0 <_rclc_take_new_data>
 800a1ce:	b118      	cbz	r0, 800a1d8 <rclc_executor_spin_some+0x248>
 800a1d0:	4540      	cmp	r0, r8
 800a1d2:	d001      	beq.n	800a1d8 <rclc_executor_spin_some+0x248>
 800a1d4:	4548      	cmp	r0, r9
 800a1d6:	d122      	bne.n	800a21e <rclc_executor_spin_some+0x28e>
 800a1d8:	68a0      	ldr	r0, [r4, #8]
 800a1da:	4458      	add	r0, fp
 800a1dc:	f7ff fc80 	bl	8009ae0 <_rclc_execute>
 800a1e0:	f10a 0a01 	add.w	sl, sl, #1
 800a1e4:	4605      	mov	r5, r0
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d1bf      	bne.n	800a16a <rclc_executor_spin_some+0x1da>
 800a1ea:	68e3      	ldr	r3, [r4, #12]
 800a1ec:	459a      	cmp	sl, r3
 800a1ee:	f4bf af18 	bcs.w	800a022 <rclc_executor_spin_some+0x92>
 800a1f2:	68a0      	ldr	r0, [r4, #8]
 800a1f4:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800a1fe:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e1      	bne.n	800a1ca <rclc_executor_spin_some+0x23a>
 800a206:	462e      	mov	r6, r5
 800a208:	e70b      	b.n	800a022 <rclc_executor_spin_some+0x92>
 800a20a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800a20e:	e77a      	b.n	800a106 <rclc_executor_spin_some+0x176>
 800a210:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800a214:	e7c8      	b.n	800a1a8 <rclc_executor_spin_some+0x218>
 800a216:	2b00      	cmp	r3, #0
 800a218:	d0a7      	beq.n	800a16a <rclc_executor_spin_some+0x1da>
 800a21a:	68a3      	ldr	r3, [r4, #8]
 800a21c:	e793      	b.n	800a146 <rclc_executor_spin_some+0x1b6>
 800a21e:	4606      	mov	r6, r0
 800a220:	e6ff      	b.n	800a022 <rclc_executor_spin_some+0x92>
 800a222:	4615      	mov	r5, r2
 800a224:	e7c0      	b.n	800a1a8 <rclc_executor_spin_some+0x218>
 800a226:	bf00      	nop

0800a228 <rclc_executor_handle_counters_zero_init>:
 800a228:	b130      	cbz	r0, 800a238 <rclc_executor_handle_counters_zero_init+0x10>
 800a22a:	b508      	push	{r3, lr}
 800a22c:	2220      	movs	r2, #32
 800a22e:	2100      	movs	r1, #0
 800a230:	f00e f9c8 	bl	80185c4 <memset>
 800a234:	2000      	movs	r0, #0
 800a236:	bd08      	pop	{r3, pc}
 800a238:	200b      	movs	r0, #11
 800a23a:	4770      	bx	lr

0800a23c <rclc_executor_handle_init>:
 800a23c:	b158      	cbz	r0, 800a256 <rclc_executor_handle_init+0x1a>
 800a23e:	2300      	movs	r3, #0
 800a240:	220b      	movs	r2, #11
 800a242:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a246:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800a24a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800a24e:	8002      	strh	r2, [r0, #0]
 800a250:	8703      	strh	r3, [r0, #56]	@ 0x38
 800a252:	4618      	mov	r0, r3
 800a254:	4770      	bx	lr
 800a256:	200b      	movs	r0, #11
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop

0800a25c <rclc_support_init>:
 800a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a260:	b086      	sub	sp, #24
 800a262:	b3b8      	cbz	r0, 800a2d4 <rclc_support_init+0x78>
 800a264:	461c      	mov	r4, r3
 800a266:	b3ab      	cbz	r3, 800a2d4 <rclc_support_init+0x78>
 800a268:	460f      	mov	r7, r1
 800a26a:	4690      	mov	r8, r2
 800a26c:	4606      	mov	r6, r0
 800a26e:	f006 ff19 	bl	80110a4 <rcl_get_zero_initialized_init_options>
 800a272:	f104 030c 	add.w	r3, r4, #12
 800a276:	9005      	str	r0, [sp, #20]
 800a278:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a27c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a280:	a805      	add	r0, sp, #20
 800a282:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a286:	f006 ff0f 	bl	80110a8 <rcl_init_options_init>
 800a28a:	4605      	mov	r5, r0
 800a28c:	b9e0      	cbnz	r0, 800a2c8 <rclc_support_init+0x6c>
 800a28e:	ad02      	add	r5, sp, #8
 800a290:	4628      	mov	r0, r5
 800a292:	f006 fd99 	bl	8010dc8 <rcl_get_zero_initialized_context>
 800a296:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a29a:	4633      	mov	r3, r6
 800a29c:	e886 0003 	stmia.w	r6, {r0, r1}
 800a2a0:	aa05      	add	r2, sp, #20
 800a2a2:	4641      	mov	r1, r8
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f006 fdf9 	bl	8010e9c <rcl_init>
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	b9b8      	cbnz	r0, 800a2de <rclc_support_init+0x82>
 800a2ae:	60b4      	str	r4, [r6, #8]
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	f106 010c 	add.w	r1, r6, #12
 800a2b6:	2003      	movs	r0, #3
 800a2b8:	f007 fc16 	bl	8011ae8 <rcl_clock_init>
 800a2bc:	4605      	mov	r5, r0
 800a2be:	b970      	cbnz	r0, 800a2de <rclc_support_init+0x82>
 800a2c0:	a805      	add	r0, sp, #20
 800a2c2:	f006 ff4d 	bl	8011160 <rcl_init_options_fini>
 800a2c6:	b108      	cbz	r0, 800a2cc <rclc_support_init+0x70>
 800a2c8:	f000 f922 	bl	800a510 <rcutils_reset_error>
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	b006      	add	sp, #24
 800a2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d4:	250b      	movs	r5, #11
 800a2d6:	4628      	mov	r0, r5
 800a2d8:	b006      	add	sp, #24
 800a2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2de:	f000 f917 	bl	800a510 <rcutils_reset_error>
 800a2e2:	a805      	add	r0, sp, #20
 800a2e4:	f006 ff3c 	bl	8011160 <rcl_init_options_fini>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d0ef      	beq.n	800a2cc <rclc_support_init+0x70>
 800a2ec:	e7ec      	b.n	800a2c8 <rclc_support_init+0x6c>
 800a2ee:	bf00      	nop

0800a2f0 <rclc_node_init_default>:
 800a2f0:	b3b8      	cbz	r0, 800a362 <rclc_node_init_default+0x72>
 800a2f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2f6:	460d      	mov	r5, r1
 800a2f8:	b0a1      	sub	sp, #132	@ 0x84
 800a2fa:	b329      	cbz	r1, 800a348 <rclc_node_init_default+0x58>
 800a2fc:	4616      	mov	r6, r2
 800a2fe:	b31a      	cbz	r2, 800a348 <rclc_node_init_default+0x58>
 800a300:	461f      	mov	r7, r3
 800a302:	b30b      	cbz	r3, 800a348 <rclc_node_init_default+0x58>
 800a304:	f10d 0810 	add.w	r8, sp, #16
 800a308:	4604      	mov	r4, r0
 800a30a:	4640      	mov	r0, r8
 800a30c:	f006 ffae 	bl	801126c <rcl_get_zero_initialized_node>
 800a310:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a314:	f10d 0918 	add.w	r9, sp, #24
 800a318:	e884 0003 	stmia.w	r4, {r0, r1}
 800a31c:	4648      	mov	r0, r9
 800a31e:	f007 f94d 	bl	80115bc <rcl_node_get_default_options>
 800a322:	4640      	mov	r0, r8
 800a324:	f006 ffa2 	bl	801126c <rcl_get_zero_initialized_node>
 800a328:	f8cd 9000 	str.w	r9, [sp]
 800a32c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a330:	463b      	mov	r3, r7
 800a332:	e884 0003 	stmia.w	r4, {r0, r1}
 800a336:	4632      	mov	r2, r6
 800a338:	4629      	mov	r1, r5
 800a33a:	4620      	mov	r0, r4
 800a33c:	f006 ffa0 	bl	8011280 <rcl_node_init>
 800a340:	b930      	cbnz	r0, 800a350 <rclc_node_init_default+0x60>
 800a342:	b021      	add	sp, #132	@ 0x84
 800a344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a348:	200b      	movs	r0, #11
 800a34a:	b021      	add	sp, #132	@ 0x84
 800a34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a350:	9003      	str	r0, [sp, #12]
 800a352:	f000 f8dd 	bl	800a510 <rcutils_reset_error>
 800a356:	f000 f8db 	bl	800a510 <rcutils_reset_error>
 800a35a:	9803      	ldr	r0, [sp, #12]
 800a35c:	b021      	add	sp, #132	@ 0x84
 800a35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a362:	200b      	movs	r0, #11
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop

0800a368 <rclc_publisher_init_default>:
 800a368:	b368      	cbz	r0, 800a3c6 <rclc_publisher_init_default+0x5e>
 800a36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36e:	460d      	mov	r5, r1
 800a370:	b0a0      	sub	sp, #128	@ 0x80
 800a372:	b321      	cbz	r1, 800a3be <rclc_publisher_init_default+0x56>
 800a374:	4616      	mov	r6, r2
 800a376:	b312      	cbz	r2, 800a3be <rclc_publisher_init_default+0x56>
 800a378:	461f      	mov	r7, r3
 800a37a:	b303      	cbz	r3, 800a3be <rclc_publisher_init_default+0x56>
 800a37c:	4604      	mov	r4, r0
 800a37e:	f7ff f8b1 	bl	80094e4 <rcl_get_zero_initialized_publisher>
 800a382:	f10d 0810 	add.w	r8, sp, #16
 800a386:	6020      	str	r0, [r4, #0]
 800a388:	4640      	mov	r0, r8
 800a38a:	f7ff f949 	bl	8009620 <rcl_publisher_get_default_options>
 800a38e:	490f      	ldr	r1, [pc, #60]	@ (800a3cc <rclc_publisher_init_default+0x64>)
 800a390:	2250      	movs	r2, #80	@ 0x50
 800a392:	4640      	mov	r0, r8
 800a394:	f00e f9f1 	bl	801877a <memcpy>
 800a398:	f8cd 8000 	str.w	r8, [sp]
 800a39c:	463b      	mov	r3, r7
 800a39e:	4632      	mov	r2, r6
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f7ff f8a4 	bl	80094f0 <rcl_publisher_init>
 800a3a8:	b910      	cbnz	r0, 800a3b0 <rclc_publisher_init_default+0x48>
 800a3aa:	b020      	add	sp, #128	@ 0x80
 800a3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3b0:	9003      	str	r0, [sp, #12]
 800a3b2:	f000 f8ad 	bl	800a510 <rcutils_reset_error>
 800a3b6:	9803      	ldr	r0, [sp, #12]
 800a3b8:	b020      	add	sp, #128	@ 0x80
 800a3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3be:	200b      	movs	r0, #11
 800a3c0:	b020      	add	sp, #128	@ 0x80
 800a3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c6:	200b      	movs	r0, #11
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	0801a950 	.word	0x0801a950

0800a3d0 <rclc_timer_init_default2>:
 800a3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d4:	b08c      	sub	sp, #48	@ 0x30
 800a3d6:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 800a3da:	b330      	cbz	r0, 800a42a <rclc_timer_init_default2+0x5a>
 800a3dc:	460e      	mov	r6, r1
 800a3de:	b321      	cbz	r1, 800a42a <rclc_timer_init_default2+0x5a>
 800a3e0:	4690      	mov	r8, r2
 800a3e2:	461f      	mov	r7, r3
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	f007 fd5f 	bl	8011ea8 <rcl_get_zero_initialized_timer>
 800a3ea:	9408      	str	r4, [sp, #32]
 800a3ec:	68b4      	ldr	r4, [r6, #8]
 800a3ee:	6028      	str	r0, [r5, #0]
 800a3f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3f2:	f10d 0c0c 	add.w	ip, sp, #12
 800a3f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	f8cc 3000 	str.w	r3, [ip]
 800a400:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a402:	9302      	str	r3, [sp, #8]
 800a404:	e9cd 8700 	strd	r8, r7, [sp]
 800a408:	4628      	mov	r0, r5
 800a40a:	4632      	mov	r2, r6
 800a40c:	f106 010c 	add.w	r1, r6, #12
 800a410:	f007 fd52 	bl	8011eb8 <rcl_timer_init2>
 800a414:	b910      	cbnz	r0, 800a41c <rclc_timer_init_default2+0x4c>
 800a416:	b00c      	add	sp, #48	@ 0x30
 800a418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a41c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a41e:	f000 f877 	bl	800a510 <rcutils_reset_error>
 800a422:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a424:	b00c      	add	sp, #48	@ 0x30
 800a426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a42a:	200b      	movs	r0, #11
 800a42c:	b00c      	add	sp, #48	@ 0x30
 800a42e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a432:	bf00      	nop

0800a434 <__default_zero_allocate>:
 800a434:	f00d bbe8 	b.w	8017c08 <calloc>

0800a438 <__default_reallocate>:
 800a438:	f00d bd86 	b.w	8017f48 <realloc>

0800a43c <__default_deallocate>:
 800a43c:	f00d bc62 	b.w	8017d04 <free>

0800a440 <__default_allocate>:
 800a440:	f00d bc58 	b.w	8017cf4 <malloc>

0800a444 <rcutils_get_zero_initialized_allocator>:
 800a444:	b510      	push	{r4, lr}
 800a446:	4c05      	ldr	r4, [pc, #20]	@ (800a45c <rcutils_get_zero_initialized_allocator+0x18>)
 800a448:	4686      	mov	lr, r0
 800a44a:	4684      	mov	ip, r0
 800a44c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a44e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	f8cc 3000 	str.w	r3, [ip]
 800a458:	4670      	mov	r0, lr
 800a45a:	bd10      	pop	{r4, pc}
 800a45c:	0801a9a0 	.word	0x0801a9a0

0800a460 <rcutils_get_default_allocator>:
 800a460:	b510      	push	{r4, lr}
 800a462:	4c05      	ldr	r4, [pc, #20]	@ (800a478 <rcutils_get_default_allocator+0x18>)
 800a464:	4686      	mov	lr, r0
 800a466:	4684      	mov	ip, r0
 800a468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a46a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	f8cc 3000 	str.w	r3, [ip]
 800a474:	4670      	mov	r0, lr
 800a476:	bd10      	pop	{r4, pc}
 800a478:	20000170 	.word	0x20000170

0800a47c <rcutils_set_default_allocator>:
 800a47c:	b1a8      	cbz	r0, 800a4aa <rcutils_set_default_allocator+0x2e>
 800a47e:	6802      	ldr	r2, [r0, #0]
 800a480:	b1a2      	cbz	r2, 800a4ac <rcutils_set_default_allocator+0x30>
 800a482:	6841      	ldr	r1, [r0, #4]
 800a484:	b1a1      	cbz	r1, 800a4b0 <rcutils_set_default_allocator+0x34>
 800a486:	b410      	push	{r4}
 800a488:	68c4      	ldr	r4, [r0, #12]
 800a48a:	b164      	cbz	r4, 800a4a6 <rcutils_set_default_allocator+0x2a>
 800a48c:	6880      	ldr	r0, [r0, #8]
 800a48e:	b138      	cbz	r0, 800a4a0 <rcutils_set_default_allocator+0x24>
 800a490:	4b08      	ldr	r3, [pc, #32]	@ (800a4b4 <rcutils_set_default_allocator+0x38>)
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	2200      	movs	r2, #0
 800a496:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a49a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a49e:	2001      	movs	r0, #1
 800a4a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	e7fa      	b.n	800a4a0 <rcutils_set_default_allocator+0x24>
 800a4aa:	4770      	bx	lr
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	4770      	bx	lr
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	4770      	bx	lr
 800a4b4:	20000170 	.word	0x20000170

0800a4b8 <rcutils_allocator_is_valid>:
 800a4b8:	b158      	cbz	r0, 800a4d2 <rcutils_allocator_is_valid+0x1a>
 800a4ba:	6803      	ldr	r3, [r0, #0]
 800a4bc:	b143      	cbz	r3, 800a4d0 <rcutils_allocator_is_valid+0x18>
 800a4be:	6843      	ldr	r3, [r0, #4]
 800a4c0:	b133      	cbz	r3, 800a4d0 <rcutils_allocator_is_valid+0x18>
 800a4c2:	68c3      	ldr	r3, [r0, #12]
 800a4c4:	b123      	cbz	r3, 800a4d0 <rcutils_allocator_is_valid+0x18>
 800a4c6:	6880      	ldr	r0, [r0, #8]
 800a4c8:	3800      	subs	r0, #0
 800a4ca:	bf18      	it	ne
 800a4cc:	2001      	movne	r0, #1
 800a4ce:	4770      	bx	lr
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	4770      	bx	lr

0800a4d4 <rcutils_error_is_set>:
 800a4d4:	4b01      	ldr	r3, [pc, #4]	@ (800a4dc <rcutils_error_is_set+0x8>)
 800a4d6:	7818      	ldrb	r0, [r3, #0]
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	2000b780 	.word	0x2000b780

0800a4e0 <rcutils_get_error_string>:
 800a4e0:	4b06      	ldr	r3, [pc, #24]	@ (800a4fc <rcutils_get_error_string+0x1c>)
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	b13b      	cbz	r3, 800a4f6 <rcutils_get_error_string+0x16>
 800a4e6:	4b06      	ldr	r3, [pc, #24]	@ (800a500 <rcutils_get_error_string+0x20>)
 800a4e8:	781a      	ldrb	r2, [r3, #0]
 800a4ea:	b90a      	cbnz	r2, 800a4f0 <rcutils_get_error_string+0x10>
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	701a      	strb	r2, [r3, #0]
 800a4f0:	4b04      	ldr	r3, [pc, #16]	@ (800a504 <rcutils_get_error_string+0x24>)
 800a4f2:	7818      	ldrb	r0, [r3, #0]
 800a4f4:	4770      	bx	lr
 800a4f6:	4b04      	ldr	r3, [pc, #16]	@ (800a508 <rcutils_get_error_string+0x28>)
 800a4f8:	7818      	ldrb	r0, [r3, #0]
 800a4fa:	4770      	bx	lr
 800a4fc:	2000b780 	.word	0x2000b780
 800a500:	2000b785 	.word	0x2000b785
 800a504:	2000b784 	.word	0x2000b784
 800a508:	0801a0f4 	.word	0x0801a0f4
 800a50c:	00000000 	.word	0x00000000

0800a510 <rcutils_reset_error>:
 800a510:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a530 <rcutils_reset_error+0x20>
 800a514:	4a08      	ldr	r2, [pc, #32]	@ (800a538 <rcutils_reset_error+0x28>)
 800a516:	4809      	ldr	r0, [pc, #36]	@ (800a53c <rcutils_reset_error+0x2c>)
 800a518:	4909      	ldr	r1, [pc, #36]	@ (800a540 <rcutils_reset_error+0x30>)
 800a51a:	2300      	movs	r3, #0
 800a51c:	8013      	strh	r3, [r2, #0]
 800a51e:	ed82 7b02 	vstr	d7, [r2, #8]
 800a522:	4a08      	ldr	r2, [pc, #32]	@ (800a544 <rcutils_reset_error+0x34>)
 800a524:	7003      	strb	r3, [r0, #0]
 800a526:	700b      	strb	r3, [r1, #0]
 800a528:	7013      	strb	r3, [r2, #0]
 800a52a:	4770      	bx	lr
 800a52c:	f3af 8000 	nop.w
	...
 800a538:	2000b788 	.word	0x2000b788
 800a53c:	2000b785 	.word	0x2000b785
 800a540:	2000b784 	.word	0x2000b784
 800a544:	2000b780 	.word	0x2000b780

0800a548 <rcutils_system_time_now>:
 800a548:	b318      	cbz	r0, 800a592 <rcutils_system_time_now+0x4a>
 800a54a:	b570      	push	{r4, r5, r6, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	4604      	mov	r4, r0
 800a550:	4669      	mov	r1, sp
 800a552:	2001      	movs	r0, #1
 800a554:	f7f7 fe88 	bl	8002268 <clock_gettime>
 800a558:	2800      	cmp	r0, #0
 800a55a:	db17      	blt.n	800a58c <rcutils_system_time_now+0x44>
 800a55c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a560:	2900      	cmp	r1, #0
 800a562:	db13      	blt.n	800a58c <rcutils_system_time_now+0x44>
 800a564:	9d02      	ldr	r5, [sp, #8]
 800a566:	2d00      	cmp	r5, #0
 800a568:	db0d      	blt.n	800a586 <rcutils_system_time_now+0x3e>
 800a56a:	4e0b      	ldr	r6, [pc, #44]	@ (800a598 <rcutils_system_time_now+0x50>)
 800a56c:	fba3 3206 	umull	r3, r2, r3, r6
 800a570:	195b      	adds	r3, r3, r5
 800a572:	fb06 2201 	mla	r2, r6, r1, r2
 800a576:	f04f 0000 	mov.w	r0, #0
 800a57a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800a57e:	e9c4 3200 	strd	r3, r2, [r4]
 800a582:	b004      	add	sp, #16
 800a584:	bd70      	pop	{r4, r5, r6, pc}
 800a586:	ea53 0201 	orrs.w	r2, r3, r1
 800a58a:	d1ee      	bne.n	800a56a <rcutils_system_time_now+0x22>
 800a58c:	2002      	movs	r0, #2
 800a58e:	b004      	add	sp, #16
 800a590:	bd70      	pop	{r4, r5, r6, pc}
 800a592:	200b      	movs	r0, #11
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	3b9aca00 	.word	0x3b9aca00

0800a59c <rcutils_steady_time_now>:
 800a59c:	b318      	cbz	r0, 800a5e6 <rcutils_steady_time_now+0x4a>
 800a59e:	b570      	push	{r4, r5, r6, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	4669      	mov	r1, sp
 800a5a6:	2000      	movs	r0, #0
 800a5a8:	f7f7 fe5e 	bl	8002268 <clock_gettime>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	db17      	blt.n	800a5e0 <rcutils_steady_time_now+0x44>
 800a5b0:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	db13      	blt.n	800a5e0 <rcutils_steady_time_now+0x44>
 800a5b8:	9d02      	ldr	r5, [sp, #8]
 800a5ba:	2d00      	cmp	r5, #0
 800a5bc:	db0d      	blt.n	800a5da <rcutils_steady_time_now+0x3e>
 800a5be:	4e0b      	ldr	r6, [pc, #44]	@ (800a5ec <rcutils_steady_time_now+0x50>)
 800a5c0:	fba3 3206 	umull	r3, r2, r3, r6
 800a5c4:	195b      	adds	r3, r3, r5
 800a5c6:	fb06 2201 	mla	r2, r6, r1, r2
 800a5ca:	f04f 0000 	mov.w	r0, #0
 800a5ce:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800a5d2:	e9c4 3200 	strd	r3, r2, [r4]
 800a5d6:	b004      	add	sp, #16
 800a5d8:	bd70      	pop	{r4, r5, r6, pc}
 800a5da:	ea53 0201 	orrs.w	r2, r3, r1
 800a5de:	d1ee      	bne.n	800a5be <rcutils_steady_time_now+0x22>
 800a5e0:	2002      	movs	r0, #2
 800a5e2:	b004      	add	sp, #16
 800a5e4:	bd70      	pop	{r4, r5, r6, pc}
 800a5e6:	200b      	movs	r0, #11
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	3b9aca00 	.word	0x3b9aca00

0800a5f0 <rmw_get_default_publisher_options>:
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	6002      	str	r2, [r0, #0]
 800a5f4:	7102      	strb	r2, [r0, #4]
 800a5f6:	4770      	bx	lr

0800a5f8 <rmw_uros_set_custom_transport>:
 800a5f8:	b470      	push	{r4, r5, r6}
 800a5fa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a5fe:	b162      	cbz	r2, 800a61a <rmw_uros_set_custom_transport+0x22>
 800a600:	b15b      	cbz	r3, 800a61a <rmw_uros_set_custom_transport+0x22>
 800a602:	b155      	cbz	r5, 800a61a <rmw_uros_set_custom_transport+0x22>
 800a604:	b14e      	cbz	r6, 800a61a <rmw_uros_set_custom_transport+0x22>
 800a606:	4c06      	ldr	r4, [pc, #24]	@ (800a620 <rmw_uros_set_custom_transport+0x28>)
 800a608:	7020      	strb	r0, [r4, #0]
 800a60a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a60e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a612:	6166      	str	r6, [r4, #20]
 800a614:	2000      	movs	r0, #0
 800a616:	bc70      	pop	{r4, r5, r6}
 800a618:	4770      	bx	lr
 800a61a:	200b      	movs	r0, #11
 800a61c:	bc70      	pop	{r4, r5, r6}
 800a61e:	4770      	bx	lr
 800a620:	2000b798 	.word	0x2000b798

0800a624 <rmw_uros_ping_agent>:
 800a624:	b570      	push	{r4, r5, r6, lr}
 800a626:	4b22      	ldr	r3, [pc, #136]	@ (800a6b0 <rmw_uros_ping_agent+0x8c>)
 800a628:	7b1a      	ldrb	r2, [r3, #12]
 800a62a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800a62e:	4605      	mov	r5, r0
 800a630:	460e      	mov	r6, r1
 800a632:	b10a      	cbz	r2, 800a638 <rmw_uros_ping_agent+0x14>
 800a634:	681c      	ldr	r4, [r3, #0]
 800a636:	b9bc      	cbnz	r4, 800a668 <rmw_uros_ping_agent+0x44>
 800a638:	4b1e      	ldr	r3, [pc, #120]	@ (800a6b4 <rmw_uros_ping_agent+0x90>)
 800a63a:	781a      	ldrb	r2, [r3, #0]
 800a63c:	6918      	ldr	r0, [r3, #16]
 800a63e:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800a646:	2100      	movs	r1, #0
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	909c      	str	r0, [sp, #624]	@ 0x270
 800a64c:	6958      	ldr	r0, [r3, #20]
 800a64e:	929b      	str	r2, [sp, #620]	@ 0x26c
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	909d      	str	r0, [sp, #628]	@ 0x274
 800a654:	466a      	mov	r2, sp
 800a656:	4608      	mov	r0, r1
 800a658:	939a      	str	r3, [sp, #616]	@ 0x268
 800a65a:	f000 f9cd 	bl	800a9f8 <rmw_uxrce_transport_init>
 800a65e:	b198      	cbz	r0, 800a688 <rmw_uros_ping_agent+0x64>
 800a660:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a664:	bd70      	pop	{r4, r5, r6, pc}
 800a666:	b9f0      	cbnz	r0, 800a6a6 <rmw_uros_ping_agent+0x82>
 800a668:	68a0      	ldr	r0, [r4, #8]
 800a66a:	4632      	mov	r2, r6
 800a66c:	4629      	mov	r1, r5
 800a66e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a672:	f003 f869 	bl	800d748 <uxr_ping_agent_session>
 800a676:	6864      	ldr	r4, [r4, #4]
 800a678:	2c00      	cmp	r4, #0
 800a67a:	d1f4      	bne.n	800a666 <rmw_uros_ping_agent+0x42>
 800a67c:	f080 0001 	eor.w	r0, r0, #1
 800a680:	b2c0      	uxtb	r0, r0
 800a682:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	4632      	mov	r2, r6
 800a68a:	4629      	mov	r1, r5
 800a68c:	a89e      	add	r0, sp, #632	@ 0x278
 800a68e:	f003 f8ab 	bl	800d7e8 <uxr_ping_agent_attempts>
 800a692:	4604      	mov	r4, r0
 800a694:	4668      	mov	r0, sp
 800a696:	f003 f825 	bl	800d6e4 <uxr_close_custom_transport>
 800a69a:	f084 0001 	eor.w	r0, r4, #1
 800a69e:	b2c0      	uxtb	r0, r0
 800a6a0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a6ac:	bd70      	pop	{r4, r5, r6, pc}
 800a6ae:	bf00      	nop
 800a6b0:	200100f8 	.word	0x200100f8
 800a6b4:	2000b798 	.word	0x2000b798

0800a6b8 <flush_session>:
 800a6b8:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a6ba:	f003 bde5 	b.w	800e288 <uxr_run_session_until_confirm_delivery>
 800a6be:	bf00      	nop

0800a6c0 <rmw_publish>:
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d053      	beq.n	800a76c <rmw_publish+0xac>
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	460d      	mov	r5, r1
 800a6c8:	b08e      	sub	sp, #56	@ 0x38
 800a6ca:	2900      	cmp	r1, #0
 800a6cc:	d04b      	beq.n	800a766 <rmw_publish+0xa6>
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	6800      	ldr	r0, [r0, #0]
 800a6d2:	f000 fd2d 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d045      	beq.n	800a766 <rmw_publish+0xa6>
 800a6da:	6866      	ldr	r6, [r4, #4]
 800a6dc:	2e00      	cmp	r6, #0
 800a6de:	d042      	beq.n	800a766 <rmw_publish+0xa6>
 800a6e0:	69b4      	ldr	r4, [r6, #24]
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	6923      	ldr	r3, [r4, #16]
 800a6e6:	4798      	blx	r3
 800a6e8:	69f3      	ldr	r3, [r6, #28]
 800a6ea:	9005      	str	r0, [sp, #20]
 800a6ec:	b113      	cbz	r3, 800a6f4 <rmw_publish+0x34>
 800a6ee:	a805      	add	r0, sp, #20
 800a6f0:	4798      	blx	r3
 800a6f2:	9805      	ldr	r0, [sp, #20]
 800a6f4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	9000      	str	r0, [sp, #0]
 800a6fc:	6972      	ldr	r2, [r6, #20]
 800a6fe:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a700:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a704:	ab06      	add	r3, sp, #24
 800a706:	f005 f87f 	bl	800f808 <uxr_prepare_output_stream>
 800a70a:	b1d8      	cbz	r0, 800a744 <rmw_publish+0x84>
 800a70c:	68a3      	ldr	r3, [r4, #8]
 800a70e:	a906      	add	r1, sp, #24
 800a710:	4628      	mov	r0, r5
 800a712:	4798      	blx	r3
 800a714:	6a33      	ldr	r3, [r6, #32]
 800a716:	4604      	mov	r4, r0
 800a718:	b10b      	cbz	r3, 800a71e <rmw_publish+0x5e>
 800a71a:	a806      	add	r0, sp, #24
 800a71c:	4798      	blx	r3
 800a71e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a722:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800a726:	2b01      	cmp	r3, #1
 800a728:	6910      	ldr	r0, [r2, #16]
 800a72a:	d021      	beq.n	800a770 <rmw_publish+0xb0>
 800a72c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a72e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a732:	f003 fda9 	bl	800e288 <uxr_run_session_until_confirm_delivery>
 800a736:	4004      	ands	r4, r0
 800a738:	b2e4      	uxtb	r4, r4
 800a73a:	f084 0001 	eor.w	r0, r4, #1
 800a73e:	b2c0      	uxtb	r0, r0
 800a740:	b00e      	add	sp, #56	@ 0x38
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a748:	6918      	ldr	r0, [r3, #16]
 800a74a:	4b0c      	ldr	r3, [pc, #48]	@ (800a77c <rmw_publish+0xbc>)
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	9b05      	ldr	r3, [sp, #20]
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	9602      	str	r6, [sp, #8]
 800a754:	6972      	ldr	r2, [r6, #20]
 800a756:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a758:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a75c:	ab06      	add	r3, sp, #24
 800a75e:	f005 f883 	bl	800f868 <uxr_prepare_output_stream_fragmented>
 800a762:	2800      	cmp	r0, #0
 800a764:	d1d2      	bne.n	800a70c <rmw_publish+0x4c>
 800a766:	2001      	movs	r0, #1
 800a768:	b00e      	add	sp, #56	@ 0x38
 800a76a:	bd70      	pop	{r4, r5, r6, pc}
 800a76c:	2001      	movs	r0, #1
 800a76e:	4770      	bx	lr
 800a770:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a774:	f003 f9f0 	bl	800db58 <uxr_flash_output_streams>
 800a778:	e7df      	b.n	800a73a <rmw_publish+0x7a>
 800a77a:	bf00      	nop
 800a77c:	0800a6b9 	.word	0x0800a6b9

0800a780 <rmw_create_publisher>:
 800a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	b087      	sub	sp, #28
 800a786:	2800      	cmp	r0, #0
 800a788:	f000 80c9 	beq.w	800a91e <rmw_create_publisher+0x19e>
 800a78c:	460f      	mov	r7, r1
 800a78e:	2900      	cmp	r1, #0
 800a790:	f000 80c5 	beq.w	800a91e <rmw_create_publisher+0x19e>
 800a794:	4604      	mov	r4, r0
 800a796:	6800      	ldr	r0, [r0, #0]
 800a798:	4615      	mov	r5, r2
 800a79a:	461e      	mov	r6, r3
 800a79c:	f000 fcc8 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	f000 80bc 	beq.w	800a91e <rmw_create_publisher+0x19e>
 800a7a6:	2d00      	cmp	r5, #0
 800a7a8:	f000 80b9 	beq.w	800a91e <rmw_create_publisher+0x19e>
 800a7ac:	782b      	ldrb	r3, [r5, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f000 80b5 	beq.w	800a91e <rmw_create_publisher+0x19e>
 800a7b4:	2e00      	cmp	r6, #0
 800a7b6:	f000 80b2 	beq.w	800a91e <rmw_create_publisher+0x19e>
 800a7ba:	485c      	ldr	r0, [pc, #368]	@ (800a92c <rmw_create_publisher+0x1ac>)
 800a7bc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a7c0:	f009 fe34 	bl	801442c <get_memory>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	f000 80aa 	beq.w	800a91e <rmw_create_publisher+0x19e>
 800a7ca:	6884      	ldr	r4, [r0, #8]
 800a7cc:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a7d0:	f009 feb2 	bl	8014538 <rmw_get_implementation_identifier>
 800a7d4:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a7d8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a7dc:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f7f5 fd75 	bl	80002d0 <strlen>
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	283c      	cmp	r0, #60	@ 0x3c
 800a7ea:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800a7ee:	f200 808f 	bhi.w	800a910 <rmw_create_publisher+0x190>
 800a7f2:	4a4f      	ldr	r2, [pc, #316]	@ (800a930 <rmw_create_publisher+0x1b0>)
 800a7f4:	462b      	mov	r3, r5
 800a7f6:	213c      	movs	r1, #60	@ 0x3c
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	f00d fd6f 	bl	80182dc <sniprintf>
 800a7fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a802:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a804:	4631      	mov	r1, r6
 800a806:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a80a:	2250      	movs	r2, #80	@ 0x50
 800a80c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a810:	f00d ffb3 	bl	801877a <memcpy>
 800a814:	7a33      	ldrb	r3, [r6, #8]
 800a816:	4947      	ldr	r1, [pc, #284]	@ (800a934 <rmw_create_publisher+0x1b4>)
 800a818:	2b02      	cmp	r3, #2
 800a81a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a81e:	bf0c      	ite	eq
 800a820:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a824:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a828:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a82a:	2300      	movs	r3, #0
 800a82c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a830:	4638      	mov	r0, r7
 800a832:	f000 fc8b 	bl	800b14c <get_message_typesupport_handle>
 800a836:	2800      	cmp	r0, #0
 800a838:	d06a      	beq.n	800a910 <rmw_create_publisher+0x190>
 800a83a:	6842      	ldr	r2, [r0, #4]
 800a83c:	61a2      	str	r2, [r4, #24]
 800a83e:	2a00      	cmp	r2, #0
 800a840:	d066      	beq.n	800a910 <rmw_create_publisher+0x190>
 800a842:	4629      	mov	r1, r5
 800a844:	4633      	mov	r3, r6
 800a846:	4648      	mov	r0, r9
 800a848:	f00a f8d2 	bl	80149f0 <create_topic>
 800a84c:	6260      	str	r0, [r4, #36]	@ 0x24
 800a84e:	2800      	cmp	r0, #0
 800a850:	d062      	beq.n	800a918 <rmw_create_publisher+0x198>
 800a852:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a85a:	2103      	movs	r1, #3
 800a85c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800a860:	1c42      	adds	r2, r0, #1
 800a862:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800a866:	f002 ff41 	bl	800d6ec <uxr_object_id>
 800a86a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800a86e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a872:	6120      	str	r0, [r4, #16]
 800a874:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800a878:	6910      	ldr	r0, [r2, #16]
 800a87a:	2506      	movs	r5, #6
 800a87c:	9500      	str	r5, [sp, #0]
 800a87e:	6819      	ldr	r1, [r3, #0]
 800a880:	6922      	ldr	r2, [r4, #16]
 800a882:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a886:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a88a:	f002 fddb 	bl	800d444 <uxr_buffer_create_publisher_bin>
 800a88e:	4602      	mov	r2, r0
 800a890:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a894:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a898:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a89c:	f000 fbc2 	bl	800b024 <run_xrce_session>
 800a8a0:	b3b0      	cbz	r0, 800a910 <rmw_create_publisher+0x190>
 800a8a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8aa:	2105      	movs	r1, #5
 800a8ac:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800a8b0:	1c42      	adds	r2, r0, #1
 800a8b2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800a8b6:	f002 ff19 	bl	800d6ec <uxr_object_id>
 800a8ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a8be:	6160      	str	r0, [r4, #20]
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	af04      	add	r7, sp, #16
 800a8c4:	691e      	ldr	r6, [r3, #16]
 800a8c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8ca:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800a8ce:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800a8d2:	4638      	mov	r0, r7
 800a8d4:	f000 fbc6 	bl	800b064 <convert_qos_profile>
 800a8d8:	9503      	str	r5, [sp, #12]
 800a8da:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a8de:	9001      	str	r0, [sp, #4]
 800a8e0:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a8e4:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800a8ee:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a8f2:	f8da 1000 	ldr.w	r1, [sl]
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f002 fdd2 	bl	800d4a0 <uxr_buffer_create_datawriter_bin>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a902:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a906:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a90a:	f000 fb8b 	bl	800b024 <run_xrce_session>
 800a90e:	b940      	cbnz	r0, 800a922 <rmw_create_publisher+0x1a2>
 800a910:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a912:	b108      	cbz	r0, 800a918 <rmw_create_publisher+0x198>
 800a914:	f000 fa7e 	bl	800ae14 <rmw_uxrce_fini_topic_memory>
 800a918:	4640      	mov	r0, r8
 800a91a:	f000 fa23 	bl	800ad64 <rmw_uxrce_fini_publisher_memory>
 800a91e:	f04f 0800 	mov.w	r8, #0
 800a922:	4640      	mov	r0, r8
 800a924:	b007      	add	sp, #28
 800a926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a92a:	bf00      	nop
 800a92c:	2000ea88 	.word	0x2000ea88
 800a930:	0801a108 	.word	0x0801a108
 800a934:	0801a088 	.word	0x0801a088

0800a938 <rmw_publisher_get_actual_qos>:
 800a938:	b508      	push	{r3, lr}
 800a93a:	4603      	mov	r3, r0
 800a93c:	b140      	cbz	r0, 800a950 <rmw_publisher_get_actual_qos+0x18>
 800a93e:	4608      	mov	r0, r1
 800a940:	b131      	cbz	r1, 800a950 <rmw_publisher_get_actual_qos+0x18>
 800a942:	6859      	ldr	r1, [r3, #4]
 800a944:	2250      	movs	r2, #80	@ 0x50
 800a946:	3128      	adds	r1, #40	@ 0x28
 800a948:	f00d ff17 	bl	801877a <memcpy>
 800a94c:	2000      	movs	r0, #0
 800a94e:	bd08      	pop	{r3, pc}
 800a950:	200b      	movs	r0, #11
 800a952:	bd08      	pop	{r3, pc}

0800a954 <rmw_destroy_publisher>:
 800a954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a958:	b128      	cbz	r0, 800a966 <rmw_destroy_publisher+0x12>
 800a95a:	4604      	mov	r4, r0
 800a95c:	6800      	ldr	r0, [r0, #0]
 800a95e:	460d      	mov	r5, r1
 800a960:	f000 fbe6 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 800a964:	b918      	cbnz	r0, 800a96e <rmw_destroy_publisher+0x1a>
 800a966:	2401      	movs	r4, #1
 800a968:	4620      	mov	r0, r4
 800a96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a96e:	6863      	ldr	r3, [r4, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d0f8      	beq.n	800a966 <rmw_destroy_publisher+0x12>
 800a974:	2d00      	cmp	r5, #0
 800a976:	d0f6      	beq.n	800a966 <rmw_destroy_publisher+0x12>
 800a978:	6828      	ldr	r0, [r5, #0]
 800a97a:	f000 fbd9 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d0f1      	beq.n	800a966 <rmw_destroy_publisher+0x12>
 800a982:	686c      	ldr	r4, [r5, #4]
 800a984:	2c00      	cmp	r4, #0
 800a986:	d0ee      	beq.n	800a966 <rmw_destroy_publisher+0x12>
 800a988:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a98a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800a98e:	f00a f883 	bl	8014a98 <destroy_topic>
 800a992:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a996:	6962      	ldr	r2, [r4, #20]
 800a998:	6918      	ldr	r0, [r3, #16]
 800a99a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a99e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a9a2:	6819      	ldr	r1, [r3, #0]
 800a9a4:	f002 fc9e 	bl	800d2e4 <uxr_buffer_delete_entity>
 800a9a8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a9ac:	6922      	ldr	r2, [r4, #16]
 800a9ae:	4680      	mov	r8, r0
 800a9b0:	6918      	ldr	r0, [r3, #16]
 800a9b2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a9b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a9ba:	6819      	ldr	r1, [r3, #0]
 800a9bc:	f002 fc92 	bl	800d2e4 <uxr_buffer_delete_entity>
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	6938      	ldr	r0, [r7, #16]
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a9ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a9ce:	f000 fb29 	bl	800b024 <run_xrce_session>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	6938      	ldr	r0, [r7, #16]
 800a9d6:	4632      	mov	r2, r6
 800a9d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a9dc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a9e0:	f000 fb20 	bl	800b024 <run_xrce_session>
 800a9e4:	4004      	ands	r4, r0
 800a9e6:	f084 0401 	eor.w	r4, r4, #1
 800a9ea:	b2e4      	uxtb	r4, r4
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	0064      	lsls	r4, r4, #1
 800a9f0:	f000 f9b8 	bl	800ad64 <rmw_uxrce_fini_publisher_memory>
 800a9f4:	e7b8      	b.n	800a968 <rmw_destroy_publisher+0x14>
 800a9f6:	bf00      	nop

0800a9f8 <rmw_uxrce_transport_init>:
 800a9f8:	b508      	push	{r3, lr}
 800a9fa:	b108      	cbz	r0, 800aa00 <rmw_uxrce_transport_init+0x8>
 800a9fc:	f100 0210 	add.w	r2, r0, #16
 800aa00:	b139      	cbz	r1, 800aa12 <rmw_uxrce_transport_init+0x1a>
 800aa02:	6949      	ldr	r1, [r1, #20]
 800aa04:	4610      	mov	r0, r2
 800aa06:	f002 fe39 	bl	800d67c <uxr_init_custom_transport>
 800aa0a:	f080 0001 	eor.w	r0, r0, #1
 800aa0e:	b2c0      	uxtb	r0, r0
 800aa10:	bd08      	pop	{r3, pc}
 800aa12:	4b04      	ldr	r3, [pc, #16]	@ (800aa24 <rmw_uxrce_transport_init+0x2c>)
 800aa14:	4610      	mov	r0, r2
 800aa16:	6859      	ldr	r1, [r3, #4]
 800aa18:	f002 fe30 	bl	800d67c <uxr_init_custom_transport>
 800aa1c:	f080 0001 	eor.w	r0, r0, #1
 800aa20:	b2c0      	uxtb	r0, r0
 800aa22:	bd08      	pop	{r3, pc}
 800aa24:	2000b798 	.word	0x2000b798

0800aa28 <rmw_uros_epoch_nanos>:
 800aa28:	4b05      	ldr	r3, [pc, #20]	@ (800aa40 <rmw_uros_epoch_nanos+0x18>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	b123      	cbz	r3, 800aa38 <rmw_uros_epoch_nanos+0x10>
 800aa2e:	6898      	ldr	r0, [r3, #8]
 800aa30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aa34:	f003 b886 	b.w	800db44 <uxr_epoch_nanos>
 800aa38:	2000      	movs	r0, #0
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	200100f8 	.word	0x200100f8

0800aa44 <rmw_uros_sync_session>:
 800aa44:	b508      	push	{r3, lr}
 800aa46:	4b07      	ldr	r3, [pc, #28]	@ (800aa64 <rmw_uros_sync_session+0x20>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	b14b      	cbz	r3, 800aa60 <rmw_uros_sync_session+0x1c>
 800aa4c:	4601      	mov	r1, r0
 800aa4e:	6898      	ldr	r0, [r3, #8]
 800aa50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aa54:	f003 fc94 	bl	800e380 <uxr_sync_session>
 800aa58:	f080 0001 	eor.w	r0, r0, #1
 800aa5c:	b2c0      	uxtb	r0, r0
 800aa5e:	bd08      	pop	{r3, pc}
 800aa60:	2001      	movs	r0, #1
 800aa62:	bd08      	pop	{r3, pc}
 800aa64:	200100f8 	.word	0x200100f8

0800aa68 <rmw_uxrce_init_service_memory>:
 800aa68:	b1e2      	cbz	r2, 800aaa4 <rmw_uxrce_init_service_memory+0x3c>
 800aa6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6e:	7b05      	ldrb	r5, [r0, #12]
 800aa70:	4606      	mov	r6, r0
 800aa72:	b9ad      	cbnz	r5, 800aaa0 <rmw_uxrce_init_service_memory+0x38>
 800aa74:	23c8      	movs	r3, #200	@ 0xc8
 800aa76:	e9c0 5500 	strd	r5, r5, [r0]
 800aa7a:	6083      	str	r3, [r0, #8]
 800aa7c:	f240 1301 	movw	r3, #257	@ 0x101
 800aa80:	4617      	mov	r7, r2
 800aa82:	8183      	strh	r3, [r0, #12]
 800aa84:	460c      	mov	r4, r1
 800aa86:	46a8      	mov	r8, r5
 800aa88:	4621      	mov	r1, r4
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	3501      	adds	r5, #1
 800aa8e:	f009 fcdd 	bl	801444c <put_memory>
 800aa92:	42af      	cmp	r7, r5
 800aa94:	60a4      	str	r4, [r4, #8]
 800aa96:	f884 800c 	strb.w	r8, [r4, #12]
 800aa9a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800aa9e:	d1f3      	bne.n	800aa88 <rmw_uxrce_init_service_memory+0x20>
 800aaa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop

0800aaa8 <rmw_uxrce_init_client_memory>:
 800aaa8:	b1e2      	cbz	r2, 800aae4 <rmw_uxrce_init_client_memory+0x3c>
 800aaaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaae:	7b05      	ldrb	r5, [r0, #12]
 800aab0:	4606      	mov	r6, r0
 800aab2:	b9ad      	cbnz	r5, 800aae0 <rmw_uxrce_init_client_memory+0x38>
 800aab4:	23c8      	movs	r3, #200	@ 0xc8
 800aab6:	e9c0 5500 	strd	r5, r5, [r0]
 800aaba:	6083      	str	r3, [r0, #8]
 800aabc:	f240 1301 	movw	r3, #257	@ 0x101
 800aac0:	4617      	mov	r7, r2
 800aac2:	8183      	strh	r3, [r0, #12]
 800aac4:	460c      	mov	r4, r1
 800aac6:	46a8      	mov	r8, r5
 800aac8:	4621      	mov	r1, r4
 800aaca:	4630      	mov	r0, r6
 800aacc:	3501      	adds	r5, #1
 800aace:	f009 fcbd 	bl	801444c <put_memory>
 800aad2:	42af      	cmp	r7, r5
 800aad4:	60a4      	str	r4, [r4, #8]
 800aad6:	f884 800c 	strb.w	r8, [r4, #12]
 800aada:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800aade:	d1f3      	bne.n	800aac8 <rmw_uxrce_init_client_memory+0x20>
 800aae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop

0800aae8 <rmw_uxrce_init_publisher_memory>:
 800aae8:	b1e2      	cbz	r2, 800ab24 <rmw_uxrce_init_publisher_memory+0x3c>
 800aaea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	7b05      	ldrb	r5, [r0, #12]
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	b9ad      	cbnz	r5, 800ab20 <rmw_uxrce_init_publisher_memory+0x38>
 800aaf4:	23d8      	movs	r3, #216	@ 0xd8
 800aaf6:	e9c0 5500 	strd	r5, r5, [r0]
 800aafa:	6083      	str	r3, [r0, #8]
 800aafc:	f240 1301 	movw	r3, #257	@ 0x101
 800ab00:	4617      	mov	r7, r2
 800ab02:	8183      	strh	r3, [r0, #12]
 800ab04:	460c      	mov	r4, r1
 800ab06:	46a8      	mov	r8, r5
 800ab08:	4621      	mov	r1, r4
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	3501      	adds	r5, #1
 800ab0e:	f009 fc9d 	bl	801444c <put_memory>
 800ab12:	42af      	cmp	r7, r5
 800ab14:	60a4      	str	r4, [r4, #8]
 800ab16:	f884 800c 	strb.w	r8, [r4, #12]
 800ab1a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ab1e:	d1f3      	bne.n	800ab08 <rmw_uxrce_init_publisher_memory+0x20>
 800ab20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop

0800ab28 <rmw_uxrce_init_subscription_memory>:
 800ab28:	b1e2      	cbz	r2, 800ab64 <rmw_uxrce_init_subscription_memory+0x3c>
 800ab2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab2e:	7b05      	ldrb	r5, [r0, #12]
 800ab30:	4606      	mov	r6, r0
 800ab32:	b9ad      	cbnz	r5, 800ab60 <rmw_uxrce_init_subscription_memory+0x38>
 800ab34:	23d8      	movs	r3, #216	@ 0xd8
 800ab36:	e9c0 5500 	strd	r5, r5, [r0]
 800ab3a:	6083      	str	r3, [r0, #8]
 800ab3c:	f240 1301 	movw	r3, #257	@ 0x101
 800ab40:	4617      	mov	r7, r2
 800ab42:	8183      	strh	r3, [r0, #12]
 800ab44:	460c      	mov	r4, r1
 800ab46:	46a8      	mov	r8, r5
 800ab48:	4621      	mov	r1, r4
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	3501      	adds	r5, #1
 800ab4e:	f009 fc7d 	bl	801444c <put_memory>
 800ab52:	42af      	cmp	r7, r5
 800ab54:	60a4      	str	r4, [r4, #8]
 800ab56:	f884 800c 	strb.w	r8, [r4, #12]
 800ab5a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ab5e:	d1f3      	bne.n	800ab48 <rmw_uxrce_init_subscription_memory+0x20>
 800ab60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop

0800ab68 <rmw_uxrce_init_node_memory>:
 800ab68:	b1e2      	cbz	r2, 800aba4 <rmw_uxrce_init_node_memory+0x3c>
 800ab6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab6e:	7b05      	ldrb	r5, [r0, #12]
 800ab70:	4606      	mov	r6, r0
 800ab72:	b9ad      	cbnz	r5, 800aba0 <rmw_uxrce_init_node_memory+0x38>
 800ab74:	23a4      	movs	r3, #164	@ 0xa4
 800ab76:	e9c0 5500 	strd	r5, r5, [r0]
 800ab7a:	6083      	str	r3, [r0, #8]
 800ab7c:	f240 1301 	movw	r3, #257	@ 0x101
 800ab80:	4617      	mov	r7, r2
 800ab82:	8183      	strh	r3, [r0, #12]
 800ab84:	460c      	mov	r4, r1
 800ab86:	46a8      	mov	r8, r5
 800ab88:	4621      	mov	r1, r4
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	3501      	adds	r5, #1
 800ab8e:	f009 fc5d 	bl	801444c <put_memory>
 800ab92:	42af      	cmp	r7, r5
 800ab94:	60a4      	str	r4, [r4, #8]
 800ab96:	f884 800c 	strb.w	r8, [r4, #12]
 800ab9a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800ab9e:	d1f3      	bne.n	800ab88 <rmw_uxrce_init_node_memory+0x20>
 800aba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop

0800aba8 <rmw_uxrce_init_session_memory>:
 800aba8:	b1ea      	cbz	r2, 800abe6 <rmw_uxrce_init_session_memory+0x3e>
 800abaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abae:	7b05      	ldrb	r5, [r0, #12]
 800abb0:	4606      	mov	r6, r0
 800abb2:	b9b5      	cbnz	r5, 800abe2 <rmw_uxrce_init_session_memory+0x3a>
 800abb4:	e9c0 5500 	strd	r5, r5, [r0]
 800abb8:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800abbc:	f240 1301 	movw	r3, #257	@ 0x101
 800abc0:	4617      	mov	r7, r2
 800abc2:	f8c0 8008 	str.w	r8, [r0, #8]
 800abc6:	460c      	mov	r4, r1
 800abc8:	8183      	strh	r3, [r0, #12]
 800abca:	46a9      	mov	r9, r5
 800abcc:	4621      	mov	r1, r4
 800abce:	4630      	mov	r0, r6
 800abd0:	3501      	adds	r5, #1
 800abd2:	f009 fc3b 	bl	801444c <put_memory>
 800abd6:	42af      	cmp	r7, r5
 800abd8:	60a4      	str	r4, [r4, #8]
 800abda:	f884 900c 	strb.w	r9, [r4, #12]
 800abde:	4444      	add	r4, r8
 800abe0:	d1f4      	bne.n	800abcc <rmw_uxrce_init_session_memory+0x24>
 800abe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abe6:	4770      	bx	lr

0800abe8 <rmw_uxrce_init_topic_memory>:
 800abe8:	b1e2      	cbz	r2, 800ac24 <rmw_uxrce_init_topic_memory+0x3c>
 800abea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abee:	7b05      	ldrb	r5, [r0, #12]
 800abf0:	4606      	mov	r6, r0
 800abf2:	b9ad      	cbnz	r5, 800ac20 <rmw_uxrce_init_topic_memory+0x38>
 800abf4:	231c      	movs	r3, #28
 800abf6:	e9c0 5500 	strd	r5, r5, [r0]
 800abfa:	6083      	str	r3, [r0, #8]
 800abfc:	f240 1301 	movw	r3, #257	@ 0x101
 800ac00:	4617      	mov	r7, r2
 800ac02:	8183      	strh	r3, [r0, #12]
 800ac04:	460c      	mov	r4, r1
 800ac06:	46a8      	mov	r8, r5
 800ac08:	4621      	mov	r1, r4
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	f009 fc1d 	bl	801444c <put_memory>
 800ac12:	42af      	cmp	r7, r5
 800ac14:	60a4      	str	r4, [r4, #8]
 800ac16:	f884 800c 	strb.w	r8, [r4, #12]
 800ac1a:	f104 041c 	add.w	r4, r4, #28
 800ac1e:	d1f3      	bne.n	800ac08 <rmw_uxrce_init_topic_memory+0x20>
 800ac20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop

0800ac28 <rmw_uxrce_init_static_input_buffer_memory>:
 800ac28:	b1ea      	cbz	r2, 800ac66 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ac2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2e:	7b05      	ldrb	r5, [r0, #12]
 800ac30:	4606      	mov	r6, r0
 800ac32:	b9b5      	cbnz	r5, 800ac62 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ac34:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ac38:	e9c0 5500 	strd	r5, r5, [r0]
 800ac3c:	6083      	str	r3, [r0, #8]
 800ac3e:	f240 1301 	movw	r3, #257	@ 0x101
 800ac42:	4617      	mov	r7, r2
 800ac44:	8183      	strh	r3, [r0, #12]
 800ac46:	460c      	mov	r4, r1
 800ac48:	46a8      	mov	r8, r5
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	3501      	adds	r5, #1
 800ac50:	f009 fbfc 	bl	801444c <put_memory>
 800ac54:	42af      	cmp	r7, r5
 800ac56:	60a4      	str	r4, [r4, #8]
 800ac58:	f884 800c 	strb.w	r8, [r4, #12]
 800ac5c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ac60:	d1f3      	bne.n	800ac4a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ac62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac66:	4770      	bx	lr

0800ac68 <rmw_uxrce_init_init_options_impl_memory>:
 800ac68:	b1e2      	cbz	r2, 800aca4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ac6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6e:	7b05      	ldrb	r5, [r0, #12]
 800ac70:	4606      	mov	r6, r0
 800ac72:	b9ad      	cbnz	r5, 800aca0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ac74:	232c      	movs	r3, #44	@ 0x2c
 800ac76:	e9c0 5500 	strd	r5, r5, [r0]
 800ac7a:	6083      	str	r3, [r0, #8]
 800ac7c:	f240 1301 	movw	r3, #257	@ 0x101
 800ac80:	4617      	mov	r7, r2
 800ac82:	8183      	strh	r3, [r0, #12]
 800ac84:	460c      	mov	r4, r1
 800ac86:	46a8      	mov	r8, r5
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	3501      	adds	r5, #1
 800ac8e:	f009 fbdd 	bl	801444c <put_memory>
 800ac92:	42af      	cmp	r7, r5
 800ac94:	60a4      	str	r4, [r4, #8]
 800ac96:	f884 800c 	strb.w	r8, [r4, #12]
 800ac9a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ac9e:	d1f3      	bne.n	800ac88 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800aca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca4:	4770      	bx	lr
 800aca6:	bf00      	nop

0800aca8 <rmw_uxrce_init_wait_set_memory>:
 800aca8:	b1e2      	cbz	r2, 800ace4 <rmw_uxrce_init_wait_set_memory+0x3c>
 800acaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acae:	7b05      	ldrb	r5, [r0, #12]
 800acb0:	4606      	mov	r6, r0
 800acb2:	b9ad      	cbnz	r5, 800ace0 <rmw_uxrce_init_wait_set_memory+0x38>
 800acb4:	231c      	movs	r3, #28
 800acb6:	e9c0 5500 	strd	r5, r5, [r0]
 800acba:	6083      	str	r3, [r0, #8]
 800acbc:	f240 1301 	movw	r3, #257	@ 0x101
 800acc0:	4617      	mov	r7, r2
 800acc2:	8183      	strh	r3, [r0, #12]
 800acc4:	460c      	mov	r4, r1
 800acc6:	46a8      	mov	r8, r5
 800acc8:	4621      	mov	r1, r4
 800acca:	4630      	mov	r0, r6
 800accc:	3501      	adds	r5, #1
 800acce:	f009 fbbd 	bl	801444c <put_memory>
 800acd2:	42af      	cmp	r7, r5
 800acd4:	60a4      	str	r4, [r4, #8]
 800acd6:	f884 800c 	strb.w	r8, [r4, #12]
 800acda:	f104 041c 	add.w	r4, r4, #28
 800acde:	d1f3      	bne.n	800acc8 <rmw_uxrce_init_wait_set_memory+0x20>
 800ace0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop

0800ace8 <rmw_uxrce_init_guard_condition_memory>:
 800ace8:	b1e2      	cbz	r2, 800ad24 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800acea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acee:	7b05      	ldrb	r5, [r0, #12]
 800acf0:	4606      	mov	r6, r0
 800acf2:	b9ad      	cbnz	r5, 800ad20 <rmw_uxrce_init_guard_condition_memory+0x38>
 800acf4:	2320      	movs	r3, #32
 800acf6:	e9c0 5500 	strd	r5, r5, [r0]
 800acfa:	6083      	str	r3, [r0, #8]
 800acfc:	f240 1301 	movw	r3, #257	@ 0x101
 800ad00:	4617      	mov	r7, r2
 800ad02:	8183      	strh	r3, [r0, #12]
 800ad04:	460c      	mov	r4, r1
 800ad06:	46a8      	mov	r8, r5
 800ad08:	4621      	mov	r1, r4
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	3501      	adds	r5, #1
 800ad0e:	f009 fb9d 	bl	801444c <put_memory>
 800ad12:	42af      	cmp	r7, r5
 800ad14:	60a4      	str	r4, [r4, #8]
 800ad16:	f884 800c 	strb.w	r8, [r4, #12]
 800ad1a:	f104 0420 	add.w	r4, r4, #32
 800ad1e:	d1f3      	bne.n	800ad08 <rmw_uxrce_init_guard_condition_memory+0x20>
 800ad20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop

0800ad28 <rmw_uxrce_fini_session_memory>:
 800ad28:	4601      	mov	r1, r0
 800ad2a:	4801      	ldr	r0, [pc, #4]	@ (800ad30 <rmw_uxrce_fini_session_memory+0x8>)
 800ad2c:	f009 bb8e 	b.w	801444c <put_memory>
 800ad30:	200100f8 	.word	0x200100f8

0800ad34 <rmw_uxrce_fini_node_memory>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4604      	mov	r4, r0
 800ad38:	6800      	ldr	r0, [r0, #0]
 800ad3a:	b128      	cbz	r0, 800ad48 <rmw_uxrce_fini_node_memory+0x14>
 800ad3c:	4b07      	ldr	r3, [pc, #28]	@ (800ad5c <rmw_uxrce_fini_node_memory+0x28>)
 800ad3e:	6819      	ldr	r1, [r3, #0]
 800ad40:	f7f5 fa66 	bl	8000210 <strcmp>
 800ad44:	b940      	cbnz	r0, 800ad58 <rmw_uxrce_fini_node_memory+0x24>
 800ad46:	6020      	str	r0, [r4, #0]
 800ad48:	6861      	ldr	r1, [r4, #4]
 800ad4a:	b129      	cbz	r1, 800ad58 <rmw_uxrce_fini_node_memory+0x24>
 800ad4c:	2500      	movs	r5, #0
 800ad4e:	4804      	ldr	r0, [pc, #16]	@ (800ad60 <rmw_uxrce_fini_node_memory+0x2c>)
 800ad50:	610d      	str	r5, [r1, #16]
 800ad52:	f009 fb7b 	bl	801444c <put_memory>
 800ad56:	6065      	str	r5, [r4, #4]
 800ad58:	bd38      	pop	{r3, r4, r5, pc}
 800ad5a:	bf00      	nop
 800ad5c:	0801aeb4 	.word	0x0801aeb4
 800ad60:	2000eb3c 	.word	0x2000eb3c

0800ad64 <rmw_uxrce_fini_publisher_memory>:
 800ad64:	b510      	push	{r4, lr}
 800ad66:	4604      	mov	r4, r0
 800ad68:	6800      	ldr	r0, [r0, #0]
 800ad6a:	b128      	cbz	r0, 800ad78 <rmw_uxrce_fini_publisher_memory+0x14>
 800ad6c:	4b06      	ldr	r3, [pc, #24]	@ (800ad88 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ad6e:	6819      	ldr	r1, [r3, #0]
 800ad70:	f7f5 fa4e 	bl	8000210 <strcmp>
 800ad74:	b938      	cbnz	r0, 800ad86 <rmw_uxrce_fini_publisher_memory+0x22>
 800ad76:	6020      	str	r0, [r4, #0]
 800ad78:	6861      	ldr	r1, [r4, #4]
 800ad7a:	b121      	cbz	r1, 800ad86 <rmw_uxrce_fini_publisher_memory+0x22>
 800ad7c:	4803      	ldr	r0, [pc, #12]	@ (800ad8c <rmw_uxrce_fini_publisher_memory+0x28>)
 800ad7e:	f009 fb65 	bl	801444c <put_memory>
 800ad82:	2300      	movs	r3, #0
 800ad84:	6063      	str	r3, [r4, #4]
 800ad86:	bd10      	pop	{r4, pc}
 800ad88:	0801aeb4 	.word	0x0801aeb4
 800ad8c:	2000ea88 	.word	0x2000ea88

0800ad90 <rmw_uxrce_fini_subscription_memory>:
 800ad90:	b510      	push	{r4, lr}
 800ad92:	4604      	mov	r4, r0
 800ad94:	6800      	ldr	r0, [r0, #0]
 800ad96:	b128      	cbz	r0, 800ada4 <rmw_uxrce_fini_subscription_memory+0x14>
 800ad98:	4b06      	ldr	r3, [pc, #24]	@ (800adb4 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ad9a:	6819      	ldr	r1, [r3, #0]
 800ad9c:	f7f5 fa38 	bl	8000210 <strcmp>
 800ada0:	b938      	cbnz	r0, 800adb2 <rmw_uxrce_fini_subscription_memory+0x22>
 800ada2:	6020      	str	r0, [r4, #0]
 800ada4:	6861      	ldr	r1, [r4, #4]
 800ada6:	b121      	cbz	r1, 800adb2 <rmw_uxrce_fini_subscription_memory+0x22>
 800ada8:	4803      	ldr	r0, [pc, #12]	@ (800adb8 <rmw_uxrce_fini_subscription_memory+0x28>)
 800adaa:	f009 fb4f 	bl	801444c <put_memory>
 800adae:	2300      	movs	r3, #0
 800adb0:	6063      	str	r3, [r4, #4]
 800adb2:	bd10      	pop	{r4, pc}
 800adb4:	0801aeb4 	.word	0x0801aeb4
 800adb8:	2000e208 	.word	0x2000e208

0800adbc <rmw_uxrce_fini_service_memory>:
 800adbc:	b510      	push	{r4, lr}
 800adbe:	4604      	mov	r4, r0
 800adc0:	6800      	ldr	r0, [r0, #0]
 800adc2:	b128      	cbz	r0, 800add0 <rmw_uxrce_fini_service_memory+0x14>
 800adc4:	4b06      	ldr	r3, [pc, #24]	@ (800ade0 <rmw_uxrce_fini_service_memory+0x24>)
 800adc6:	6819      	ldr	r1, [r3, #0]
 800adc8:	f7f5 fa22 	bl	8000210 <strcmp>
 800adcc:	b938      	cbnz	r0, 800adde <rmw_uxrce_fini_service_memory+0x22>
 800adce:	6020      	str	r0, [r4, #0]
 800add0:	6861      	ldr	r1, [r4, #4]
 800add2:	b121      	cbz	r1, 800adde <rmw_uxrce_fini_service_memory+0x22>
 800add4:	4803      	ldr	r0, [pc, #12]	@ (800ade4 <rmw_uxrce_fini_service_memory+0x28>)
 800add6:	f009 fb39 	bl	801444c <put_memory>
 800adda:	2300      	movs	r3, #0
 800addc:	6063      	str	r3, [r4, #4]
 800adde:	bd10      	pop	{r4, pc}
 800ade0:	0801aeb4 	.word	0x0801aeb4
 800ade4:	2000ddc0 	.word	0x2000ddc0

0800ade8 <rmw_uxrce_fini_client_memory>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	4604      	mov	r4, r0
 800adec:	6800      	ldr	r0, [r0, #0]
 800adee:	b128      	cbz	r0, 800adfc <rmw_uxrce_fini_client_memory+0x14>
 800adf0:	4b06      	ldr	r3, [pc, #24]	@ (800ae0c <rmw_uxrce_fini_client_memory+0x24>)
 800adf2:	6819      	ldr	r1, [r3, #0]
 800adf4:	f7f5 fa0c 	bl	8000210 <strcmp>
 800adf8:	b938      	cbnz	r0, 800ae0a <rmw_uxrce_fini_client_memory+0x22>
 800adfa:	6020      	str	r0, [r4, #0]
 800adfc:	6861      	ldr	r1, [r4, #4]
 800adfe:	b121      	cbz	r1, 800ae0a <rmw_uxrce_fini_client_memory+0x22>
 800ae00:	4803      	ldr	r0, [pc, #12]	@ (800ae10 <rmw_uxrce_fini_client_memory+0x28>)
 800ae02:	f009 fb23 	bl	801444c <put_memory>
 800ae06:	2300      	movs	r3, #0
 800ae08:	6063      	str	r3, [r4, #4]
 800ae0a:	bd10      	pop	{r4, pc}
 800ae0c:	0801aeb4 	.word	0x0801aeb4
 800ae10:	2000dce8 	.word	0x2000dce8

0800ae14 <rmw_uxrce_fini_topic_memory>:
 800ae14:	b510      	push	{r4, lr}
 800ae16:	4604      	mov	r4, r0
 800ae18:	4621      	mov	r1, r4
 800ae1a:	4803      	ldr	r0, [pc, #12]	@ (800ae28 <rmw_uxrce_fini_topic_memory+0x14>)
 800ae1c:	f009 fb16 	bl	801444c <put_memory>
 800ae20:	2300      	movs	r3, #0
 800ae22:	61a3      	str	r3, [r4, #24]
 800ae24:	bd10      	pop	{r4, pc}
 800ae26:	bf00      	nop
 800ae28:	2000dc0c 	.word	0x2000dc0c

0800ae2c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	b530      	push	{r4, r5, lr}
 800ae30:	4929      	ldr	r1, [pc, #164]	@ (800aed8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800ae32:	ac03      	add	r4, sp, #12
 800ae34:	e884 000c 	stmia.w	r4, {r2, r3}
 800ae38:	680c      	ldr	r4, [r1, #0]
 800ae3a:	461d      	mov	r5, r3
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	2c00      	cmp	r4, #0
 800ae40:	d043      	beq.n	800aeca <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800ae42:	4620      	mov	r0, r4
 800ae44:	2100      	movs	r1, #0
 800ae46:	6883      	ldr	r3, [r0, #8]
 800ae48:	6840      	ldr	r0, [r0, #4]
 800ae4a:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	bf08      	it	eq
 800ae52:	3101      	addeq	r1, #1
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d1f6      	bne.n	800ae46 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800ae58:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d027      	beq.n	800aeb0 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800ae60:	d906      	bls.n	800ae70 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d004      	beq.n	800ae70 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ae66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	b002      	add	sp, #8
 800ae6e:	4770      	bx	lr
 800ae70:	b1fd      	cbz	r5, 800aeb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ae72:	428d      	cmp	r5, r1
 800ae74:	d81d      	bhi.n	800aeb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ae76:	2c00      	cmp	r4, #0
 800ae78:	d0f5      	beq.n	800ae66 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	f04f 3cff 	mov.w	ip, #4294967295
 800ae80:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800ae84:	e001      	b.n	800ae8a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800ae86:	6864      	ldr	r4, [r4, #4]
 800ae88:	b1dc      	cbz	r4, 800aec2 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800ae8a:	68a3      	ldr	r3, [r4, #8]
 800ae8c:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800ae90:	428a      	cmp	r2, r1
 800ae92:	d1f8      	bne.n	800ae86 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ae94:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800ae98:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800ae9c:	4561      	cmp	r1, ip
 800ae9e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800aea2:	eb73 0e05 	sbcs.w	lr, r3, r5
 800aea6:	daee      	bge.n	800ae86 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800aea8:	468c      	mov	ip, r1
 800aeaa:	461d      	mov	r5, r3
 800aeac:	4620      	mov	r0, r4
 800aeae:	e7ea      	b.n	800ae86 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800aeb0:	b92d      	cbnz	r5, 800aebe <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800aeb2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeb6:	4808      	ldr	r0, [pc, #32]	@ (800aed8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800aeb8:	b002      	add	sp, #8
 800aeba:	f009 bab7 	b.w	801442c <get_memory>
 800aebe:	428d      	cmp	r5, r1
 800aec0:	d8f7      	bhi.n	800aeb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800aec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aec6:	b002      	add	sp, #8
 800aec8:	4770      	bx	lr
 800aeca:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d0ef      	beq.n	800aeb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800aed2:	d9ee      	bls.n	800aeb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800aed4:	4621      	mov	r1, r4
 800aed6:	e7c4      	b.n	800ae62 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800aed8:	2000da58 	.word	0x2000da58

0800aedc <rmw_uxrce_find_static_input_buffer_by_owner>:
 800aedc:	4b11      	ldr	r3, [pc, #68]	@ (800af24 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	b1eb      	cbz	r3, 800af1e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800aee2:	b530      	push	{r4, r5, lr}
 800aee4:	4684      	mov	ip, r0
 800aee6:	f04f 34ff 	mov.w	r4, #4294967295
 800aeea:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800aeee:	2000      	movs	r0, #0
 800aef0:	e001      	b.n	800aef6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	b193      	cbz	r3, 800af1c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800aef6:	689a      	ldr	r2, [r3, #8]
 800aef8:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800aefc:	458c      	cmp	ip, r1
 800aefe:	d1f8      	bne.n	800aef2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800af00:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800af04:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800af08:	42a1      	cmp	r1, r4
 800af0a:	eb72 050e 	sbcs.w	r5, r2, lr
 800af0e:	daf0      	bge.n	800aef2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800af10:	4618      	mov	r0, r3
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	460c      	mov	r4, r1
 800af16:	4696      	mov	lr, r2
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1ec      	bne.n	800aef6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800af1c:	bd30      	pop	{r4, r5, pc}
 800af1e:	4618      	mov	r0, r3
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	2000da58 	.word	0x2000da58

0800af28 <rmw_uxrce_clean_expired_static_input_buffer>:
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2c:	4b3c      	ldr	r3, [pc, #240]	@ (800b020 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800af2e:	ed2d 8b06 	vpush	{d8-d10}
 800af32:	f8d3 8000 	ldr.w	r8, [r3]
 800af36:	b08d      	sub	sp, #52	@ 0x34
 800af38:	f7ff fd76 	bl	800aa28 <rmw_uros_epoch_nanos>
 800af3c:	f1b8 0f00 	cmp.w	r8, #0
 800af40:	d05c      	beq.n	800affc <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800af42:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800af46:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800af4a:	2b04      	cmp	r3, #4
 800af4c:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800b008 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800af50:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800b010 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800af54:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800b018 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800af58:	4683      	mov	fp, r0
 800af5a:	ac04      	add	r4, sp, #16
 800af5c:	468a      	mov	sl, r1
 800af5e:	d03f      	beq.n	800afe0 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800af60:	2b05      	cmp	r3, #5
 800af62:	d044      	beq.n	800afee <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800af64:	2b03      	cmp	r3, #3
 800af66:	d03b      	beq.n	800afe0 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800af68:	ed8d 8b04 	vstr	d8, [sp, #16]
 800af6c:	ed8d ab06 	vstr	d10, [sp, #24]
 800af70:	ed8d 8b08 	vstr	d8, [sp, #32]
 800af74:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800af78:	ab08      	add	r3, sp, #32
 800af7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800af7c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800af80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800af84:	f009 f888 	bl	8014098 <rmw_time_equal>
 800af88:	b118      	cbz	r0, 800af92 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800af8a:	ed8d 9b04 	vstr	d9, [sp, #16]
 800af8e:	ed8d 8b06 	vstr	d8, [sp, #24]
 800af92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800af96:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800af9a:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800af9e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800afa2:	f009 f8cd 	bl	8014140 <rmw_time_total_nsec>
 800afa6:	183f      	adds	r7, r7, r0
 800afa8:	eb46 0601 	adc.w	r6, r6, r1
 800afac:	455f      	cmp	r7, fp
 800afae:	eb76 060a 	sbcs.w	r6, r6, sl
 800afb2:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800afb6:	db05      	blt.n	800afc4 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800afb8:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800afbc:	4593      	cmp	fp, r2
 800afbe:	eb7a 0303 	sbcs.w	r3, sl, r3
 800afc2:	da03      	bge.n	800afcc <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800afc4:	4816      	ldr	r0, [pc, #88]	@ (800b020 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800afc6:	4641      	mov	r1, r8
 800afc8:	f009 fa40 	bl	801444c <put_memory>
 800afcc:	f1b9 0f00 	cmp.w	r9, #0
 800afd0:	d014      	beq.n	800affc <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800afd2:	46c8      	mov	r8, r9
 800afd4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800afd8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800afdc:	2b04      	cmp	r3, #4
 800afde:	d1bf      	bne.n	800af60 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800afe0:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800afe4:	3340      	adds	r3, #64	@ 0x40
 800afe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800afe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800afec:	e7c0      	b.n	800af70 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800afee:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800aff2:	3348      	adds	r3, #72	@ 0x48
 800aff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800affa:	e7b9      	b.n	800af70 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800affc:	b00d      	add	sp, #52	@ 0x34
 800affe:	ecbd 8b06 	vpop	{d8-d10}
 800b002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b006:	bf00      	nop
	...
 800b010:	00000001 	.word	0x00000001
 800b014:	00000000 	.word	0x00000000
 800b018:	0000001e 	.word	0x0000001e
 800b01c:	00000000 	.word	0x00000000
 800b020:	2000da58 	.word	0x2000da58

0800b024 <run_xrce_session>:
 800b024:	b500      	push	{lr}
 800b026:	f891 c002 	ldrb.w	ip, [r1, #2]
 800b02a:	b087      	sub	sp, #28
 800b02c:	f1bc 0f01 	cmp.w	ip, #1
 800b030:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b034:	d00f      	beq.n	800b056 <run_xrce_session+0x32>
 800b036:	4619      	mov	r1, r3
 800b038:	2301      	movs	r3, #1
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	f10d 020e 	add.w	r2, sp, #14
 800b040:	f10d 0317 	add.w	r3, sp, #23
 800b044:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b048:	f003 f944 	bl	800e2d4 <uxr_run_session_until_all_status>
 800b04c:	b100      	cbz	r0, 800b050 <run_xrce_session+0x2c>
 800b04e:	2001      	movs	r0, #1
 800b050:	b007      	add	sp, #28
 800b052:	f85d fb04 	ldr.w	pc, [sp], #4
 800b056:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b05a:	f002 fd7d 	bl	800db58 <uxr_flash_output_streams>
 800b05e:	2001      	movs	r0, #1
 800b060:	e7f6      	b.n	800b050 <run_xrce_session+0x2c>
 800b062:	bf00      	nop

0800b064 <convert_qos_profile>:
 800b064:	780a      	ldrb	r2, [r1, #0]
 800b066:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b06a:	f1a2 0202 	sub.w	r2, r2, #2
 800b06e:	fab2 f282 	clz	r2, r2
 800b072:	0952      	lsrs	r2, r2, #5
 800b074:	7082      	strb	r2, [r0, #2]
 800b076:	7a4a      	ldrb	r2, [r1, #9]
 800b078:	8889      	ldrh	r1, [r1, #4]
 800b07a:	8081      	strh	r1, [r0, #4]
 800b07c:	f1a2 0202 	sub.w	r2, r2, #2
 800b080:	f1ac 0c02 	sub.w	ip, ip, #2
 800b084:	fab2 f282 	clz	r2, r2
 800b088:	fabc fc8c 	clz	ip, ip
 800b08c:	0952      	lsrs	r2, r2, #5
 800b08e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b092:	0052      	lsls	r2, r2, #1
 800b094:	f880 c001 	strb.w	ip, [r0, #1]
 800b098:	7002      	strb	r2, [r0, #0]
 800b09a:	4770      	bx	lr

0800b09c <generate_type_name>:
 800b09c:	b530      	push	{r4, r5, lr}
 800b09e:	2300      	movs	r3, #0
 800b0a0:	700b      	strb	r3, [r1, #0]
 800b0a2:	6803      	ldr	r3, [r0, #0]
 800b0a4:	b087      	sub	sp, #28
 800b0a6:	4614      	mov	r4, r2
 800b0a8:	b1d3      	cbz	r3, 800b0e0 <generate_type_name+0x44>
 800b0aa:	4a0f      	ldr	r2, [pc, #60]	@ (800b0e8 <generate_type_name+0x4c>)
 800b0ac:	4615      	mov	r5, r2
 800b0ae:	9203      	str	r2, [sp, #12]
 800b0b0:	9500      	str	r5, [sp, #0]
 800b0b2:	6842      	ldr	r2, [r0, #4]
 800b0b4:	480d      	ldr	r0, [pc, #52]	@ (800b0ec <generate_type_name+0x50>)
 800b0b6:	9001      	str	r0, [sp, #4]
 800b0b8:	4608      	mov	r0, r1
 800b0ba:	490d      	ldr	r1, [pc, #52]	@ (800b0f0 <generate_type_name+0x54>)
 800b0bc:	9204      	str	r2, [sp, #16]
 800b0be:	9105      	str	r1, [sp, #20]
 800b0c0:	9102      	str	r1, [sp, #8]
 800b0c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b0f4 <generate_type_name+0x58>)
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	f00d f909 	bl	80182dc <sniprintf>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	db05      	blt.n	800b0da <generate_type_name+0x3e>
 800b0ce:	4284      	cmp	r4, r0
 800b0d0:	bfd4      	ite	le
 800b0d2:	2000      	movle	r0, #0
 800b0d4:	2001      	movgt	r0, #1
 800b0d6:	b007      	add	sp, #28
 800b0d8:	bd30      	pop	{r4, r5, pc}
 800b0da:	2000      	movs	r0, #0
 800b0dc:	b007      	add	sp, #28
 800b0de:	bd30      	pop	{r4, r5, pc}
 800b0e0:	4b05      	ldr	r3, [pc, #20]	@ (800b0f8 <generate_type_name+0x5c>)
 800b0e2:	4a01      	ldr	r2, [pc, #4]	@ (800b0e8 <generate_type_name+0x4c>)
 800b0e4:	461d      	mov	r5, r3
 800b0e6:	e7e2      	b.n	800b0ae <generate_type_name+0x12>
 800b0e8:	0801a0f8 	.word	0x0801a0f8
 800b0ec:	0801a110 	.word	0x0801a110
 800b0f0:	0801a10c 	.word	0x0801a10c
 800b0f4:	0801a0fc 	.word	0x0801a0fc
 800b0f8:	0801a168 	.word	0x0801a168

0800b0fc <generate_topic_name>:
 800b0fc:	b510      	push	{r4, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	4614      	mov	r4, r2
 800b102:	9000      	str	r0, [sp, #0]
 800b104:	4b08      	ldr	r3, [pc, #32]	@ (800b128 <generate_topic_name+0x2c>)
 800b106:	4a09      	ldr	r2, [pc, #36]	@ (800b12c <generate_topic_name+0x30>)
 800b108:	4608      	mov	r0, r1
 800b10a:	4621      	mov	r1, r4
 800b10c:	f00d f8e6 	bl	80182dc <sniprintf>
 800b110:	2800      	cmp	r0, #0
 800b112:	db05      	blt.n	800b120 <generate_topic_name+0x24>
 800b114:	4284      	cmp	r4, r0
 800b116:	bfd4      	ite	le
 800b118:	2000      	movle	r0, #0
 800b11a:	2001      	movgt	r0, #1
 800b11c:	b002      	add	sp, #8
 800b11e:	bd10      	pop	{r4, pc}
 800b120:	2000      	movs	r0, #0
 800b122:	b002      	add	sp, #8
 800b124:	bd10      	pop	{r4, pc}
 800b126:	bf00      	nop
 800b128:	0801a9b4 	.word	0x0801a9b4
 800b12c:	0801a114 	.word	0x0801a114

0800b130 <is_uxrce_rmw_identifier_valid>:
 800b130:	b510      	push	{r4, lr}
 800b132:	4604      	mov	r4, r0
 800b134:	b140      	cbz	r0, 800b148 <is_uxrce_rmw_identifier_valid+0x18>
 800b136:	f009 f9ff 	bl	8014538 <rmw_get_implementation_identifier>
 800b13a:	4601      	mov	r1, r0
 800b13c:	4620      	mov	r0, r4
 800b13e:	f7f5 f867 	bl	8000210 <strcmp>
 800b142:	fab0 f080 	clz	r0, r0
 800b146:	0940      	lsrs	r0, r0, #5
 800b148:	bd10      	pop	{r4, pc}
 800b14a:	bf00      	nop

0800b14c <get_message_typesupport_handle>:
 800b14c:	6883      	ldr	r3, [r0, #8]
 800b14e:	4718      	bx	r3

0800b150 <get_message_typesupport_handle_function>:
 800b150:	b510      	push	{r4, lr}
 800b152:	4604      	mov	r4, r0
 800b154:	6800      	ldr	r0, [r0, #0]
 800b156:	f7f5 f85b 	bl	8000210 <strcmp>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	bf0c      	ite	eq
 800b15e:	4620      	moveq	r0, r4
 800b160:	2000      	movne	r0, #0
 800b162:	bd10      	pop	{r4, pc}

0800b164 <rosidl_runtime_c__String__init>:
 800b164:	b1b0      	cbz	r0, 800b194 <rosidl_runtime_c__String__init+0x30>
 800b166:	b510      	push	{r4, lr}
 800b168:	b086      	sub	sp, #24
 800b16a:	4604      	mov	r4, r0
 800b16c:	a801      	add	r0, sp, #4
 800b16e:	f7ff f977 	bl	800a460 <rcutils_get_default_allocator>
 800b172:	9b01      	ldr	r3, [sp, #4]
 800b174:	9905      	ldr	r1, [sp, #20]
 800b176:	2001      	movs	r0, #1
 800b178:	4798      	blx	r3
 800b17a:	6020      	str	r0, [r4, #0]
 800b17c:	b138      	cbz	r0, 800b18e <rosidl_runtime_c__String__init+0x2a>
 800b17e:	2200      	movs	r2, #0
 800b180:	2301      	movs	r3, #1
 800b182:	7002      	strb	r2, [r0, #0]
 800b184:	4618      	mov	r0, r3
 800b186:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800b18a:	b006      	add	sp, #24
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	2000      	movs	r0, #0
 800b190:	b006      	add	sp, #24
 800b192:	bd10      	pop	{r4, pc}
 800b194:	2000      	movs	r0, #0
 800b196:	4770      	bx	lr

0800b198 <rosidl_runtime_c__String__fini>:
 800b198:	b320      	cbz	r0, 800b1e4 <rosidl_runtime_c__String__fini+0x4c>
 800b19a:	b510      	push	{r4, lr}
 800b19c:	6803      	ldr	r3, [r0, #0]
 800b19e:	b086      	sub	sp, #24
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	b173      	cbz	r3, 800b1c2 <rosidl_runtime_c__String__fini+0x2a>
 800b1a4:	6883      	ldr	r3, [r0, #8]
 800b1a6:	b1f3      	cbz	r3, 800b1e6 <rosidl_runtime_c__String__fini+0x4e>
 800b1a8:	a801      	add	r0, sp, #4
 800b1aa:	f7ff f959 	bl	800a460 <rcutils_get_default_allocator>
 800b1ae:	9b02      	ldr	r3, [sp, #8]
 800b1b0:	9905      	ldr	r1, [sp, #20]
 800b1b2:	6820      	ldr	r0, [r4, #0]
 800b1b4:	4798      	blx	r3
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e9c4 3300 	strd	r3, r3, [r4]
 800b1bc:	60a3      	str	r3, [r4, #8]
 800b1be:	b006      	add	sp, #24
 800b1c0:	bd10      	pop	{r4, pc}
 800b1c2:	6843      	ldr	r3, [r0, #4]
 800b1c4:	b9db      	cbnz	r3, 800b1fe <rosidl_runtime_c__String__fini+0x66>
 800b1c6:	6883      	ldr	r3, [r0, #8]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0f8      	beq.n	800b1be <rosidl_runtime_c__String__fini+0x26>
 800b1cc:	4b12      	ldr	r3, [pc, #72]	@ (800b218 <rosidl_runtime_c__String__fini+0x80>)
 800b1ce:	4813      	ldr	r0, [pc, #76]	@ (800b21c <rosidl_runtime_c__String__fini+0x84>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2251      	movs	r2, #81	@ 0x51
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	f00d f872 	bl	80182c0 <fwrite>
 800b1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e0:	f00c fd2e 	bl	8017c40 <exit>
 800b1e4:	4770      	bx	lr
 800b1e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b218 <rosidl_runtime_c__String__fini+0x80>)
 800b1e8:	480d      	ldr	r0, [pc, #52]	@ (800b220 <rosidl_runtime_c__String__fini+0x88>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	224c      	movs	r2, #76	@ 0x4c
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	f00d f865 	bl	80182c0 <fwrite>
 800b1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fa:	f00c fd21 	bl	8017c40 <exit>
 800b1fe:	4b06      	ldr	r3, [pc, #24]	@ (800b218 <rosidl_runtime_c__String__fini+0x80>)
 800b200:	4808      	ldr	r0, [pc, #32]	@ (800b224 <rosidl_runtime_c__String__fini+0x8c>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	224e      	movs	r2, #78	@ 0x4e
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	2101      	movs	r1, #1
 800b20a:	f00d f859 	bl	80182c0 <fwrite>
 800b20e:	f04f 30ff 	mov.w	r0, #4294967295
 800b212:	f00c fd15 	bl	8017c40 <exit>
 800b216:	bf00      	nop
 800b218:	200022b0 	.word	0x200022b0
 800b21c:	0801a1bc 	.word	0x0801a1bc
 800b220:	0801a11c 	.word	0x0801a11c
 800b224:	0801a16c 	.word	0x0801a16c

0800b228 <rosidl_runtime_c__String__assign>:
 800b228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b22c:	460c      	mov	r4, r1
 800b22e:	b086      	sub	sp, #24
 800b230:	b319      	cbz	r1, 800b27a <rosidl_runtime_c__String__assign+0x52>
 800b232:	4605      	mov	r5, r0
 800b234:	4608      	mov	r0, r1
 800b236:	f7f5 f84b 	bl	80002d0 <strlen>
 800b23a:	4606      	mov	r6, r0
 800b23c:	b1cd      	cbz	r5, 800b272 <rosidl_runtime_c__String__assign+0x4a>
 800b23e:	a801      	add	r0, sp, #4
 800b240:	f106 0801 	add.w	r8, r6, #1
 800b244:	f7ff f90c 	bl	800a460 <rcutils_get_default_allocator>
 800b248:	9b03      	ldr	r3, [sp, #12]
 800b24a:	9a05      	ldr	r2, [sp, #20]
 800b24c:	6828      	ldr	r0, [r5, #0]
 800b24e:	4641      	mov	r1, r8
 800b250:	4798      	blx	r3
 800b252:	4607      	mov	r7, r0
 800b254:	b168      	cbz	r0, 800b272 <rosidl_runtime_c__String__assign+0x4a>
 800b256:	4621      	mov	r1, r4
 800b258:	4632      	mov	r2, r6
 800b25a:	f00d fa8e 	bl	801877a <memcpy>
 800b25e:	2300      	movs	r3, #0
 800b260:	2001      	movs	r0, #1
 800b262:	55bb      	strb	r3, [r7, r6]
 800b264:	e9c5 7600 	strd	r7, r6, [r5]
 800b268:	f8c5 8008 	str.w	r8, [r5, #8]
 800b26c:	b006      	add	sp, #24
 800b26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b272:	2000      	movs	r0, #0
 800b274:	b006      	add	sp, #24
 800b276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b27a:	4608      	mov	r0, r1
 800b27c:	b006      	add	sp, #24
 800b27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b282:	bf00      	nop

0800b284 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800b284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b288:	6805      	ldr	r5, [r0, #0]
 800b28a:	4604      	mov	r4, r0
 800b28c:	4628      	mov	r0, r5
 800b28e:	460e      	mov	r6, r1
 800b290:	f7f4 ffbe 	bl	8000210 <strcmp>
 800b294:	b308      	cbz	r0, 800b2da <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800b296:	4b12      	ldr	r3, [pc, #72]	@ (800b2e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800b298:	4628      	mov	r0, r5
 800b29a:	6819      	ldr	r1, [r3, #0]
 800b29c:	f7f4 ffb8 	bl	8000210 <strcmp>
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	b980      	cbnz	r0, 800b2c6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800b2a4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b2a8:	f8d8 4000 	ldr.w	r4, [r8]
 800b2ac:	b1ac      	cbz	r4, 800b2da <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800b2ae:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800b2b2:	3f04      	subs	r7, #4
 800b2b4:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	f7f4 ffa9 	bl	8000210 <strcmp>
 800b2be:	b128      	cbz	r0, 800b2cc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800b2c0:	3501      	adds	r5, #1
 800b2c2:	42a5      	cmp	r5, r4
 800b2c4:	d1f6      	bne.n	800b2b4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b2d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b2d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d8:	4718      	bx	r3
 800b2da:	4620      	mov	r0, r4
 800b2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e0:	20000184 	.word	0x20000184

0800b2e4 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800b2e4:	f00a b936 	b.w	8015554 <std_msgs__msg__Header__init>

0800b2e8 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800b2e8:	f00a b954 	b.w	8015594 <std_msgs__msg__Header__fini>

0800b2ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800b2ec:	b508      	push	{r3, lr}
 800b2ee:	f000 f8ab 	bl	800b448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800b2f2:	4b06      	ldr	r3, [pc, #24]	@ (800b30c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b2f4:	4906      	ldr	r1, [pc, #24]	@ (800b310 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	60c8      	str	r0, [r1, #12]
 800b2fa:	b10a      	cbz	r2, 800b300 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800b2fc:	4803      	ldr	r0, [pc, #12]	@ (800b30c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b2fe:	bd08      	pop	{r3, pc}
 800b300:	4a04      	ldr	r2, [pc, #16]	@ (800b314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800b302:	4802      	ldr	r0, [pc, #8]	@ (800b30c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b304:	6812      	ldr	r2, [r2, #0]
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	bd08      	pop	{r3, pc}
 800b30a:	bf00      	nop
 800b30c:	2000018c 	.word	0x2000018c
 800b310:	200001a4 	.word	0x200001a4
 800b314:	20000188 	.word	0x20000188

0800b318 <_Header__max_serialized_size>:
 800b318:	b500      	push	{lr}
 800b31a:	b083      	sub	sp, #12
 800b31c:	2301      	movs	r3, #1
 800b31e:	2100      	movs	r1, #0
 800b320:	f10d 0007 	add.w	r0, sp, #7
 800b324:	f88d 3007 	strb.w	r3, [sp, #7]
 800b328:	f000 f8ec 	bl	800b504 <max_serialized_size_builtin_interfaces__msg__Time>
 800b32c:	b003      	add	sp, #12
 800b32e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b332:	bf00      	nop

0800b334 <get_serialized_size_std_msgs__msg__Header>:
 800b334:	b570      	push	{r4, r5, r6, lr}
 800b336:	4605      	mov	r5, r0
 800b338:	b168      	cbz	r0, 800b356 <get_serialized_size_std_msgs__msg__Header+0x22>
 800b33a:	460c      	mov	r4, r1
 800b33c:	f000 f892 	bl	800b464 <get_serialized_size_builtin_interfaces__msg__Time>
 800b340:	1826      	adds	r6, r4, r0
 800b342:	2104      	movs	r1, #4
 800b344:	4630      	mov	r0, r6
 800b346:	f001 ff05 	bl	800d154 <ucdr_alignment>
 800b34a:	68eb      	ldr	r3, [r5, #12]
 800b34c:	f1c4 0405 	rsb	r4, r4, #5
 800b350:	441c      	add	r4, r3
 800b352:	4404      	add	r4, r0
 800b354:	19a0      	adds	r0, r4, r6
 800b356:	bd70      	pop	{r4, r5, r6, pc}

0800b358 <_Header__cdr_deserialize>:
 800b358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b35a:	460c      	mov	r4, r1
 800b35c:	b083      	sub	sp, #12
 800b35e:	b1e1      	cbz	r1, 800b39a <_Header__cdr_deserialize+0x42>
 800b360:	4606      	mov	r6, r0
 800b362:	f000 f8e3 	bl	800b52c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800b366:	6843      	ldr	r3, [r0, #4]
 800b368:	4621      	mov	r1, r4
 800b36a:	68db      	ldr	r3, [r3, #12]
 800b36c:	4630      	mov	r0, r6
 800b36e:	4798      	blx	r3
 800b370:	6927      	ldr	r7, [r4, #16]
 800b372:	68a1      	ldr	r1, [r4, #8]
 800b374:	ab01      	add	r3, sp, #4
 800b376:	463a      	mov	r2, r7
 800b378:	4630      	mov	r0, r6
 800b37a:	f001 ff69 	bl	800d250 <ucdr_deserialize_sequence_char>
 800b37e:	9b01      	ldr	r3, [sp, #4]
 800b380:	4605      	mov	r5, r0
 800b382:	b920      	cbnz	r0, 800b38e <_Header__cdr_deserialize+0x36>
 800b384:	429f      	cmp	r7, r3
 800b386:	d30c      	bcc.n	800b3a2 <_Header__cdr_deserialize+0x4a>
 800b388:	4628      	mov	r0, r5
 800b38a:	b003      	add	sp, #12
 800b38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b38e:	b103      	cbz	r3, 800b392 <_Header__cdr_deserialize+0x3a>
 800b390:	3b01      	subs	r3, #1
 800b392:	4628      	mov	r0, r5
 800b394:	60e3      	str	r3, [r4, #12]
 800b396:	b003      	add	sp, #12
 800b398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39a:	460d      	mov	r5, r1
 800b39c:	4628      	mov	r0, r5
 800b39e:	b003      	add	sp, #12
 800b3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	75b0      	strb	r0, [r6, #22]
 800b3a6:	7571      	strb	r1, [r6, #21]
 800b3a8:	60e0      	str	r0, [r4, #12]
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	f001 fee8 	bl	800d180 <ucdr_align_to>
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	9901      	ldr	r1, [sp, #4]
 800b3b4:	f001 ff1a 	bl	800d1ec <ucdr_advance_buffer>
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	b003      	add	sp, #12
 800b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3be:	bf00      	nop

0800b3c0 <_Header__cdr_serialize>:
 800b3c0:	b1f8      	cbz	r0, 800b402 <_Header__cdr_serialize+0x42>
 800b3c2:	b570      	push	{r4, r5, r6, lr}
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	460d      	mov	r5, r1
 800b3c8:	f000 f8b0 	bl	800b52c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800b3cc:	6843      	ldr	r3, [r0, #4]
 800b3ce:	4629      	mov	r1, r5
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	4798      	blx	r3
 800b3d6:	68a6      	ldr	r6, [r4, #8]
 800b3d8:	b156      	cbz	r6, 800b3f0 <_Header__cdr_serialize+0x30>
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f7f4 ff78 	bl	80002d0 <strlen>
 800b3e0:	4631      	mov	r1, r6
 800b3e2:	60e0      	str	r0, [r4, #12]
 800b3e4:	1c42      	adds	r2, r0, #1
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3ec:	f001 bf1e 	b.w	800d22c <ucdr_serialize_sequence_char>
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	60e0      	str	r0, [r4, #12]
 800b3f4:	4632      	mov	r2, r6
 800b3f6:	4631      	mov	r1, r6
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3fe:	f001 bf15 	b.w	800d22c <ucdr_serialize_sequence_char>
 800b402:	4770      	bx	lr

0800b404 <_Header__get_serialized_size>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4604      	mov	r4, r0
 800b408:	b150      	cbz	r0, 800b420 <_Header__get_serialized_size+0x1c>
 800b40a:	2100      	movs	r1, #0
 800b40c:	f000 f82a 	bl	800b464 <get_serialized_size_builtin_interfaces__msg__Time>
 800b410:	2104      	movs	r1, #4
 800b412:	4605      	mov	r5, r0
 800b414:	f001 fe9e 	bl	800d154 <ucdr_alignment>
 800b418:	68e4      	ldr	r4, [r4, #12]
 800b41a:	3405      	adds	r4, #5
 800b41c:	442c      	add	r4, r5
 800b41e:	4420      	add	r0, r4
 800b420:	bd38      	pop	{r3, r4, r5, pc}
 800b422:	bf00      	nop

0800b424 <max_serialized_size_std_msgs__msg__Header>:
 800b424:	b510      	push	{r4, lr}
 800b426:	2301      	movs	r3, #1
 800b428:	4604      	mov	r4, r0
 800b42a:	7003      	strb	r3, [r0, #0]
 800b42c:	f000 f86a 	bl	800b504 <max_serialized_size_builtin_interfaces__msg__Time>
 800b430:	2300      	movs	r3, #0
 800b432:	7023      	strb	r3, [r4, #0]
 800b434:	bd10      	pop	{r4, pc}
 800b436:	bf00      	nop

0800b438 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800b438:	4800      	ldr	r0, [pc, #0]	@ (800b43c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800b43a:	4770      	bx	lr
 800b43c:	2000021c 	.word	0x2000021c

0800b440 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800b440:	f00a b8e4 	b.w	801560c <builtin_interfaces__msg__Time__init>

0800b444 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800b444:	f00a b8e6 	b.w	8015614 <builtin_interfaces__msg__Time__fini>

0800b448 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800b448:	4b04      	ldr	r3, [pc, #16]	@ (800b45c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	b10a      	cbz	r2, 800b452 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800b44e:	4803      	ldr	r0, [pc, #12]	@ (800b45c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800b450:	4770      	bx	lr
 800b452:	4a03      	ldr	r2, [pc, #12]	@ (800b460 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800b454:	4801      	ldr	r0, [pc, #4]	@ (800b45c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800b456:	6812      	ldr	r2, [r2, #0]
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	4770      	bx	lr
 800b45c:	20000250 	.word	0x20000250
 800b460:	20000188 	.word	0x20000188

0800b464 <get_serialized_size_builtin_interfaces__msg__Time>:
 800b464:	b180      	cbz	r0, 800b488 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800b466:	b538      	push	{r3, r4, r5, lr}
 800b468:	460d      	mov	r5, r1
 800b46a:	4628      	mov	r0, r5
 800b46c:	2104      	movs	r1, #4
 800b46e:	f001 fe71 	bl	800d154 <ucdr_alignment>
 800b472:	2104      	movs	r1, #4
 800b474:	186c      	adds	r4, r5, r1
 800b476:	4404      	add	r4, r0
 800b478:	4620      	mov	r0, r4
 800b47a:	f001 fe6b 	bl	800d154 <ucdr_alignment>
 800b47e:	f1c5 0504 	rsb	r5, r5, #4
 800b482:	4405      	add	r5, r0
 800b484:	1928      	adds	r0, r5, r4
 800b486:	bd38      	pop	{r3, r4, r5, pc}
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop

0800b48c <_Time__cdr_deserialize>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	460c      	mov	r4, r1
 800b490:	b141      	cbz	r1, 800b4a4 <_Time__cdr_deserialize+0x18>
 800b492:	4605      	mov	r5, r0
 800b494:	f001 fa62 	bl	800c95c <ucdr_deserialize_int32_t>
 800b498:	1d21      	adds	r1, r4, #4
 800b49a:	4628      	mov	r0, r5
 800b49c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4a0:	f000 beda 	b.w	800c258 <ucdr_deserialize_uint32_t>
 800b4a4:	4608      	mov	r0, r1
 800b4a6:	bd38      	pop	{r3, r4, r5, pc}

0800b4a8 <_Time__cdr_serialize>:
 800b4a8:	b160      	cbz	r0, 800b4c4 <_Time__cdr_serialize+0x1c>
 800b4aa:	b538      	push	{r3, r4, r5, lr}
 800b4ac:	460d      	mov	r5, r1
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	6801      	ldr	r1, [r0, #0]
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	f001 f9b8 	bl	800c828 <ucdr_serialize_int32_t>
 800b4b8:	6861      	ldr	r1, [r4, #4]
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4c0:	f000 bda0 	b.w	800c004 <ucdr_serialize_uint32_t>
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop

0800b4c8 <_Time__get_serialized_size>:
 800b4c8:	b160      	cbz	r0, 800b4e4 <_Time__get_serialized_size+0x1c>
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	2104      	movs	r1, #4
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	f001 fe40 	bl	800d154 <ucdr_alignment>
 800b4d4:	1d04      	adds	r4, r0, #4
 800b4d6:	2104      	movs	r1, #4
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f001 fe3b 	bl	800d154 <ucdr_alignment>
 800b4de:	3004      	adds	r0, #4
 800b4e0:	4420      	add	r0, r4
 800b4e2:	bd10      	pop	{r4, pc}
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop

0800b4e8 <_Time__max_serialized_size>:
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	2104      	movs	r1, #4
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	f001 fe31 	bl	800d154 <ucdr_alignment>
 800b4f2:	1d04      	adds	r4, r0, #4
 800b4f4:	2104      	movs	r1, #4
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f001 fe2c 	bl	800d154 <ucdr_alignment>
 800b4fc:	3004      	adds	r0, #4
 800b4fe:	4420      	add	r0, r4
 800b500:	bd10      	pop	{r4, pc}
 800b502:	bf00      	nop

0800b504 <max_serialized_size_builtin_interfaces__msg__Time>:
 800b504:	b538      	push	{r3, r4, r5, lr}
 800b506:	460c      	mov	r4, r1
 800b508:	2301      	movs	r3, #1
 800b50a:	7003      	strb	r3, [r0, #0]
 800b50c:	2104      	movs	r1, #4
 800b50e:	4620      	mov	r0, r4
 800b510:	f001 fe20 	bl	800d154 <ucdr_alignment>
 800b514:	2104      	movs	r1, #4
 800b516:	1863      	adds	r3, r4, r1
 800b518:	18c5      	adds	r5, r0, r3
 800b51a:	4628      	mov	r0, r5
 800b51c:	f001 fe1a 	bl	800d154 <ucdr_alignment>
 800b520:	f1c4 0404 	rsb	r4, r4, #4
 800b524:	4420      	add	r0, r4
 800b526:	4428      	add	r0, r5
 800b528:	bd38      	pop	{r3, r4, r5, pc}
 800b52a:	bf00      	nop

0800b52c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800b52c:	4800      	ldr	r0, [pc, #0]	@ (800b530 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800b52e:	4770      	bx	lr
 800b530:	200002e0 	.word	0x200002e0

0800b534 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 800b534:	2024      	movs	r0, #36	@ 0x24
 800b536:	4770      	bx	lr

0800b538 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 800b538:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop

0800b540 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 800b540:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b544:	e9d0 0100 	ldrd	r0, r1, [r0]
 800b548:	e9c2 0100 	strd	r0, r1, [r2]
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop

0800b550 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 800b550:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b554:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b558:	e9c0 2300 	strd	r2, r3, [r0]
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop

0800b560 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 800b560:	f00a b962 	b.w	8015828 <geometry_msgs__msg__PoseWithCovariance__init>

0800b564 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 800b564:	f00a b96e 	b.w	8015844 <geometry_msgs__msg__PoseWithCovariance__fini>

0800b568 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 800b568:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop

0800b570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800b570:	b508      	push	{r3, lr}
 800b572:	f00a fa89 	bl	8015a88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800b576:	4b06      	ldr	r3, [pc, #24]	@ (800b590 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800b578:	4906      	ldr	r1, [pc, #24]	@ (800b594 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	60c8      	str	r0, [r1, #12]
 800b57e:	b10a      	cbz	r2, 800b584 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 800b580:	4803      	ldr	r0, [pc, #12]	@ (800b590 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800b582:	bd08      	pop	{r3, pc}
 800b584:	4a04      	ldr	r2, [pc, #16]	@ (800b598 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 800b586:	4802      	ldr	r0, [pc, #8]	@ (800b590 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800b588:	6812      	ldr	r2, [r2, #0]
 800b58a:	601a      	str	r2, [r3, #0]
 800b58c:	bd08      	pop	{r3, pc}
 800b58e:	bf00      	nop
 800b590:	20000314 	.word	0x20000314
 800b594:	2000032c 	.word	0x2000032c
 800b598:	20000188 	.word	0x20000188

0800b59c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 800b59c:	2024      	movs	r0, #36	@ 0x24
 800b59e:	4770      	bx	lr

0800b5a0 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 800b5a0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop

0800b5a8 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 800b5a8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b5ac:	e9d0 0100 	ldrd	r0, r1, [r0]
 800b5b0:	e9c2 0100 	strd	r0, r1, [r2]
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop

0800b5b8 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 800b5b8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b5bc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b5c0:	e9c0 2300 	strd	r2, r3, [r0]
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop

0800b5c8 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 800b5c8:	f00a ba18 	b.w	80159fc <geometry_msgs__msg__TwistWithCovariance__init>

0800b5cc <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 800b5cc:	f00a ba24 	b.w	8015a18 <geometry_msgs__msg__TwistWithCovariance__fini>

0800b5d0 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 800b5d0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop

0800b5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800b5d8:	b508      	push	{r3, lr}
 800b5da:	f00a fa83 	bl	8015ae4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800b5de:	4b06      	ldr	r3, [pc, #24]	@ (800b5f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800b5e0:	4906      	ldr	r1, [pc, #24]	@ (800b5fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	60c8      	str	r0, [r1, #12]
 800b5e6:	b10a      	cbz	r2, 800b5ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 800b5e8:	4803      	ldr	r0, [pc, #12]	@ (800b5f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800b5ea:	bd08      	pop	{r3, pc}
 800b5ec:	4a04      	ldr	r2, [pc, #16]	@ (800b600 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 800b5ee:	4802      	ldr	r0, [pc, #8]	@ (800b5f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800b5f0:	6812      	ldr	r2, [r2, #0]
 800b5f2:	601a      	str	r2, [r3, #0]
 800b5f4:	bd08      	pop	{r3, pc}
 800b5f6:	bf00      	nop
 800b5f8:	200003a4 	.word	0x200003a4
 800b5fc:	200003bc 	.word	0x200003bc
 800b600:	20000188 	.word	0x20000188

0800b604 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	b158      	cbz	r0, 800b620 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 800b608:	460d      	mov	r5, r1
 800b60a:	f00a fa95 	bl	8015b38 <get_serialized_size_geometry_msgs__msg__Pose>
 800b60e:	182c      	adds	r4, r5, r0
 800b610:	2108      	movs	r1, #8
 800b612:	4620      	mov	r0, r4
 800b614:	f001 fd9e 	bl	800d154 <ucdr_alignment>
 800b618:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800b61c:	4405      	add	r5, r0
 800b61e:	1928      	adds	r0, r5, r4
 800b620:	bd38      	pop	{r3, r4, r5, pc}
 800b622:	bf00      	nop

0800b624 <_PoseWithCovariance__cdr_deserialize>:
 800b624:	b538      	push	{r3, r4, r5, lr}
 800b626:	460c      	mov	r4, r1
 800b628:	b179      	cbz	r1, 800b64a <_PoseWithCovariance__cdr_deserialize+0x26>
 800b62a:	4605      	mov	r5, r0
 800b62c:	f00a faf0 	bl	8015c10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800b630:	6843      	ldr	r3, [r0, #4]
 800b632:	4621      	mov	r1, r4
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	4628      	mov	r0, r5
 800b638:	4798      	blx	r3
 800b63a:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800b63e:	4628      	mov	r0, r5
 800b640:	2224      	movs	r2, #36	@ 0x24
 800b642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b646:	f000 ba3d 	b.w	800bac4 <ucdr_deserialize_array_double>
 800b64a:	4608      	mov	r0, r1
 800b64c:	bd38      	pop	{r3, r4, r5, pc}
 800b64e:	bf00      	nop

0800b650 <_PoseWithCovariance__cdr_serialize>:
 800b650:	b188      	cbz	r0, 800b676 <_PoseWithCovariance__cdr_serialize+0x26>
 800b652:	b538      	push	{r3, r4, r5, lr}
 800b654:	460d      	mov	r5, r1
 800b656:	4604      	mov	r4, r0
 800b658:	f00a fada 	bl	8015c10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800b65c:	6843      	ldr	r3, [r0, #4]
 800b65e:	4629      	mov	r1, r5
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	4620      	mov	r0, r4
 800b664:	4798      	blx	r3
 800b666:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800b66a:	4628      	mov	r0, r5
 800b66c:	2224      	movs	r2, #36	@ 0x24
 800b66e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b672:	f000 b9d3 	b.w	800ba1c <ucdr_serialize_array_double>
 800b676:	4770      	bx	lr

0800b678 <_PoseWithCovariance__get_serialized_size>:
 800b678:	b158      	cbz	r0, 800b692 <_PoseWithCovariance__get_serialized_size+0x1a>
 800b67a:	b510      	push	{r4, lr}
 800b67c:	2100      	movs	r1, #0
 800b67e:	f00a fa5b 	bl	8015b38 <get_serialized_size_geometry_msgs__msg__Pose>
 800b682:	2108      	movs	r1, #8
 800b684:	4604      	mov	r4, r0
 800b686:	f001 fd65 	bl	800d154 <ucdr_alignment>
 800b68a:	4420      	add	r0, r4
 800b68c:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800b690:	bd10      	pop	{r4, pc}
 800b692:	4770      	bx	lr

0800b694 <_PoseWithCovariance__max_serialized_size>:
 800b694:	b510      	push	{r4, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	2301      	movs	r3, #1
 800b69a:	2100      	movs	r1, #0
 800b69c:	f10d 0007 	add.w	r0, sp, #7
 800b6a0:	f88d 3007 	strb.w	r3, [sp, #7]
 800b6a4:	f00a faa6 	bl	8015bf4 <max_serialized_size_geometry_msgs__msg__Pose>
 800b6a8:	2108      	movs	r1, #8
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	f001 fd52 	bl	800d154 <ucdr_alignment>
 800b6b0:	4420      	add	r0, r4
 800b6b2:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800b6b6:	b002      	add	sp, #8
 800b6b8:	bd10      	pop	{r4, pc}
 800b6ba:	bf00      	nop

0800b6bc <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	2301      	movs	r3, #1
 800b6c0:	7003      	strb	r3, [r0, #0]
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	f00a fa96 	bl	8015bf4 <max_serialized_size_geometry_msgs__msg__Pose>
 800b6c8:	1825      	adds	r5, r4, r0
 800b6ca:	2108      	movs	r1, #8
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f001 fd41 	bl	800d154 <ucdr_alignment>
 800b6d2:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800b6d6:	4420      	add	r0, r4
 800b6d8:	4428      	add	r0, r5
 800b6da:	bd38      	pop	{r3, r4, r5, pc}

0800b6dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800b6dc:	4800      	ldr	r0, [pc, #0]	@ (800b6e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 800b6de:	4770      	bx	lr
 800b6e0:	20000434 	.word	0x20000434

0800b6e4 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	b158      	cbz	r0, 800b700 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 800b6e8:	460d      	mov	r5, r1
 800b6ea:	f00a fb4d 	bl	8015d88 <get_serialized_size_geometry_msgs__msg__Twist>
 800b6ee:	182c      	adds	r4, r5, r0
 800b6f0:	2108      	movs	r1, #8
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f001 fd2e 	bl	800d154 <ucdr_alignment>
 800b6f8:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800b6fc:	4405      	add	r5, r0
 800b6fe:	1928      	adds	r0, r5, r4
 800b700:	bd38      	pop	{r3, r4, r5, pc}
 800b702:	bf00      	nop

0800b704 <_TwistWithCovariance__cdr_deserialize>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	460c      	mov	r4, r1
 800b708:	b179      	cbz	r1, 800b72a <_TwistWithCovariance__cdr_deserialize+0x26>
 800b70a:	4605      	mov	r5, r0
 800b70c:	f00a fba8 	bl	8015e60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800b710:	6843      	ldr	r3, [r0, #4]
 800b712:	4621      	mov	r1, r4
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	4628      	mov	r0, r5
 800b718:	4798      	blx	r3
 800b71a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800b71e:	4628      	mov	r0, r5
 800b720:	2224      	movs	r2, #36	@ 0x24
 800b722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b726:	f000 b9cd 	b.w	800bac4 <ucdr_deserialize_array_double>
 800b72a:	4608      	mov	r0, r1
 800b72c:	bd38      	pop	{r3, r4, r5, pc}
 800b72e:	bf00      	nop

0800b730 <_TwistWithCovariance__cdr_serialize>:
 800b730:	b188      	cbz	r0, 800b756 <_TwistWithCovariance__cdr_serialize+0x26>
 800b732:	b538      	push	{r3, r4, r5, lr}
 800b734:	460d      	mov	r5, r1
 800b736:	4604      	mov	r4, r0
 800b738:	f00a fb92 	bl	8015e60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800b73c:	6843      	ldr	r3, [r0, #4]
 800b73e:	4629      	mov	r1, r5
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	4620      	mov	r0, r4
 800b744:	4798      	blx	r3
 800b746:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800b74a:	4628      	mov	r0, r5
 800b74c:	2224      	movs	r2, #36	@ 0x24
 800b74e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b752:	f000 b963 	b.w	800ba1c <ucdr_serialize_array_double>
 800b756:	4770      	bx	lr

0800b758 <_TwistWithCovariance__get_serialized_size>:
 800b758:	b158      	cbz	r0, 800b772 <_TwistWithCovariance__get_serialized_size+0x1a>
 800b75a:	b510      	push	{r4, lr}
 800b75c:	2100      	movs	r1, #0
 800b75e:	f00a fb13 	bl	8015d88 <get_serialized_size_geometry_msgs__msg__Twist>
 800b762:	2108      	movs	r1, #8
 800b764:	4604      	mov	r4, r0
 800b766:	f001 fcf5 	bl	800d154 <ucdr_alignment>
 800b76a:	4420      	add	r0, r4
 800b76c:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800b770:	bd10      	pop	{r4, pc}
 800b772:	4770      	bx	lr

0800b774 <_TwistWithCovariance__max_serialized_size>:
 800b774:	b510      	push	{r4, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	2301      	movs	r3, #1
 800b77a:	2100      	movs	r1, #0
 800b77c:	f10d 0007 	add.w	r0, sp, #7
 800b780:	f88d 3007 	strb.w	r3, [sp, #7]
 800b784:	f00a fb5e 	bl	8015e44 <max_serialized_size_geometry_msgs__msg__Twist>
 800b788:	2108      	movs	r1, #8
 800b78a:	4604      	mov	r4, r0
 800b78c:	f001 fce2 	bl	800d154 <ucdr_alignment>
 800b790:	4420      	add	r0, r4
 800b792:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800b796:	b002      	add	sp, #8
 800b798:	bd10      	pop	{r4, pc}
 800b79a:	bf00      	nop

0800b79c <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	2301      	movs	r3, #1
 800b7a0:	7003      	strb	r3, [r0, #0]
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	f00a fb4e 	bl	8015e44 <max_serialized_size_geometry_msgs__msg__Twist>
 800b7a8:	1825      	adds	r5, r4, r0
 800b7aa:	2108      	movs	r1, #8
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f001 fcd1 	bl	800d154 <ucdr_alignment>
 800b7b2:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800b7b6:	4420      	add	r0, r4
 800b7b8:	4428      	add	r0, r5
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}

0800b7bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800b7bc:	4800      	ldr	r0, [pc, #0]	@ (800b7c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 800b7be:	4770      	bx	lr
 800b7c0:	20000468 	.word	0x20000468

0800b7c4 <ucdr_serialize_endian_array_char>:
 800b7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	461f      	mov	r7, r3
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	4690      	mov	r8, r2
 800b7d0:	f001 fc68 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800b7d4:	b9e0      	cbnz	r0, 800b810 <ucdr_serialize_endian_array_char+0x4c>
 800b7d6:	463e      	mov	r6, r7
 800b7d8:	e009      	b.n	800b7ee <ucdr_serialize_endian_array_char+0x2a>
 800b7da:	68a8      	ldr	r0, [r5, #8]
 800b7dc:	f00c ffcd 	bl	801877a <memcpy>
 800b7e0:	68ab      	ldr	r3, [r5, #8]
 800b7e2:	6928      	ldr	r0, [r5, #16]
 800b7e4:	4423      	add	r3, r4
 800b7e6:	4420      	add	r0, r4
 800b7e8:	1b36      	subs	r6, r6, r4
 800b7ea:	60ab      	str	r3, [r5, #8]
 800b7ec:	6128      	str	r0, [r5, #16]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	4631      	mov	r1, r6
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	f001 fcde 	bl	800d1b4 <ucdr_check_final_buffer_behavior_array>
 800b7f8:	1bb9      	subs	r1, r7, r6
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	4441      	add	r1, r8
 800b800:	2800      	cmp	r0, #0
 800b802:	d1ea      	bne.n	800b7da <ucdr_serialize_endian_array_char+0x16>
 800b804:	2301      	movs	r3, #1
 800b806:	7da8      	ldrb	r0, [r5, #22]
 800b808:	756b      	strb	r3, [r5, #21]
 800b80a:	4058      	eors	r0, r3
 800b80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b810:	463a      	mov	r2, r7
 800b812:	68a8      	ldr	r0, [r5, #8]
 800b814:	4641      	mov	r1, r8
 800b816:	f00c ffb0 	bl	801877a <memcpy>
 800b81a:	68aa      	ldr	r2, [r5, #8]
 800b81c:	692b      	ldr	r3, [r5, #16]
 800b81e:	443a      	add	r2, r7
 800b820:	443b      	add	r3, r7
 800b822:	60aa      	str	r2, [r5, #8]
 800b824:	612b      	str	r3, [r5, #16]
 800b826:	e7ed      	b.n	800b804 <ucdr_serialize_endian_array_char+0x40>

0800b828 <ucdr_deserialize_endian_array_char>:
 800b828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b82c:	4619      	mov	r1, r3
 800b82e:	461f      	mov	r7, r3
 800b830:	4605      	mov	r5, r0
 800b832:	4690      	mov	r8, r2
 800b834:	f001 fc36 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800b838:	b9e0      	cbnz	r0, 800b874 <ucdr_deserialize_endian_array_char+0x4c>
 800b83a:	463e      	mov	r6, r7
 800b83c:	e009      	b.n	800b852 <ucdr_deserialize_endian_array_char+0x2a>
 800b83e:	68a9      	ldr	r1, [r5, #8]
 800b840:	f00c ff9b 	bl	801877a <memcpy>
 800b844:	68aa      	ldr	r2, [r5, #8]
 800b846:	692b      	ldr	r3, [r5, #16]
 800b848:	4422      	add	r2, r4
 800b84a:	4423      	add	r3, r4
 800b84c:	1b36      	subs	r6, r6, r4
 800b84e:	60aa      	str	r2, [r5, #8]
 800b850:	612b      	str	r3, [r5, #16]
 800b852:	2201      	movs	r2, #1
 800b854:	4631      	mov	r1, r6
 800b856:	4628      	mov	r0, r5
 800b858:	f001 fcac 	bl	800d1b4 <ucdr_check_final_buffer_behavior_array>
 800b85c:	4604      	mov	r4, r0
 800b85e:	1bb8      	subs	r0, r7, r6
 800b860:	4622      	mov	r2, r4
 800b862:	4440      	add	r0, r8
 800b864:	2c00      	cmp	r4, #0
 800b866:	d1ea      	bne.n	800b83e <ucdr_deserialize_endian_array_char+0x16>
 800b868:	2301      	movs	r3, #1
 800b86a:	7da8      	ldrb	r0, [r5, #22]
 800b86c:	756b      	strb	r3, [r5, #21]
 800b86e:	4058      	eors	r0, r3
 800b870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b874:	463a      	mov	r2, r7
 800b876:	68a9      	ldr	r1, [r5, #8]
 800b878:	4640      	mov	r0, r8
 800b87a:	f00c ff7e 	bl	801877a <memcpy>
 800b87e:	68aa      	ldr	r2, [r5, #8]
 800b880:	692b      	ldr	r3, [r5, #16]
 800b882:	443a      	add	r2, r7
 800b884:	443b      	add	r3, r7
 800b886:	60aa      	str	r2, [r5, #8]
 800b888:	612b      	str	r3, [r5, #16]
 800b88a:	e7ed      	b.n	800b868 <ucdr_deserialize_endian_array_char+0x40>

0800b88c <ucdr_serialize_array_uint8_t>:
 800b88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b890:	4688      	mov	r8, r1
 800b892:	4611      	mov	r1, r2
 800b894:	4617      	mov	r7, r2
 800b896:	4605      	mov	r5, r0
 800b898:	f001 fc04 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800b89c:	b9e0      	cbnz	r0, 800b8d8 <ucdr_serialize_array_uint8_t+0x4c>
 800b89e:	463e      	mov	r6, r7
 800b8a0:	e009      	b.n	800b8b6 <ucdr_serialize_array_uint8_t+0x2a>
 800b8a2:	68a8      	ldr	r0, [r5, #8]
 800b8a4:	f00c ff69 	bl	801877a <memcpy>
 800b8a8:	68aa      	ldr	r2, [r5, #8]
 800b8aa:	692b      	ldr	r3, [r5, #16]
 800b8ac:	4422      	add	r2, r4
 800b8ae:	4423      	add	r3, r4
 800b8b0:	1b36      	subs	r6, r6, r4
 800b8b2:	60aa      	str	r2, [r5, #8]
 800b8b4:	612b      	str	r3, [r5, #16]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	4631      	mov	r1, r6
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	f001 fc7a 	bl	800d1b4 <ucdr_check_final_buffer_behavior_array>
 800b8c0:	1bb9      	subs	r1, r7, r6
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	4441      	add	r1, r8
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d1ea      	bne.n	800b8a2 <ucdr_serialize_array_uint8_t+0x16>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	7da8      	ldrb	r0, [r5, #22]
 800b8d0:	756b      	strb	r3, [r5, #21]
 800b8d2:	4058      	eors	r0, r3
 800b8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d8:	463a      	mov	r2, r7
 800b8da:	68a8      	ldr	r0, [r5, #8]
 800b8dc:	4641      	mov	r1, r8
 800b8de:	f00c ff4c 	bl	801877a <memcpy>
 800b8e2:	68aa      	ldr	r2, [r5, #8]
 800b8e4:	692b      	ldr	r3, [r5, #16]
 800b8e6:	443a      	add	r2, r7
 800b8e8:	443b      	add	r3, r7
 800b8ea:	60aa      	str	r2, [r5, #8]
 800b8ec:	612b      	str	r3, [r5, #16]
 800b8ee:	e7ed      	b.n	800b8cc <ucdr_serialize_array_uint8_t+0x40>

0800b8f0 <ucdr_serialize_endian_array_uint8_t>:
 800b8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	461f      	mov	r7, r3
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	4690      	mov	r8, r2
 800b8fc:	f001 fbd2 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800b900:	b9e0      	cbnz	r0, 800b93c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800b902:	463e      	mov	r6, r7
 800b904:	e009      	b.n	800b91a <ucdr_serialize_endian_array_uint8_t+0x2a>
 800b906:	68a8      	ldr	r0, [r5, #8]
 800b908:	f00c ff37 	bl	801877a <memcpy>
 800b90c:	68ab      	ldr	r3, [r5, #8]
 800b90e:	6928      	ldr	r0, [r5, #16]
 800b910:	4423      	add	r3, r4
 800b912:	4420      	add	r0, r4
 800b914:	1b36      	subs	r6, r6, r4
 800b916:	60ab      	str	r3, [r5, #8]
 800b918:	6128      	str	r0, [r5, #16]
 800b91a:	2201      	movs	r2, #1
 800b91c:	4631      	mov	r1, r6
 800b91e:	4628      	mov	r0, r5
 800b920:	f001 fc48 	bl	800d1b4 <ucdr_check_final_buffer_behavior_array>
 800b924:	1bb9      	subs	r1, r7, r6
 800b926:	4604      	mov	r4, r0
 800b928:	4602      	mov	r2, r0
 800b92a:	4441      	add	r1, r8
 800b92c:	2800      	cmp	r0, #0
 800b92e:	d1ea      	bne.n	800b906 <ucdr_serialize_endian_array_uint8_t+0x16>
 800b930:	2301      	movs	r3, #1
 800b932:	7da8      	ldrb	r0, [r5, #22]
 800b934:	756b      	strb	r3, [r5, #21]
 800b936:	4058      	eors	r0, r3
 800b938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b93c:	463a      	mov	r2, r7
 800b93e:	68a8      	ldr	r0, [r5, #8]
 800b940:	4641      	mov	r1, r8
 800b942:	f00c ff1a 	bl	801877a <memcpy>
 800b946:	68aa      	ldr	r2, [r5, #8]
 800b948:	692b      	ldr	r3, [r5, #16]
 800b94a:	443a      	add	r2, r7
 800b94c:	443b      	add	r3, r7
 800b94e:	60aa      	str	r2, [r5, #8]
 800b950:	612b      	str	r3, [r5, #16]
 800b952:	e7ed      	b.n	800b930 <ucdr_serialize_endian_array_uint8_t+0x40>

0800b954 <ucdr_deserialize_array_uint8_t>:
 800b954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b958:	4688      	mov	r8, r1
 800b95a:	4611      	mov	r1, r2
 800b95c:	4617      	mov	r7, r2
 800b95e:	4605      	mov	r5, r0
 800b960:	f001 fba0 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800b964:	b9e0      	cbnz	r0, 800b9a0 <ucdr_deserialize_array_uint8_t+0x4c>
 800b966:	463e      	mov	r6, r7
 800b968:	e009      	b.n	800b97e <ucdr_deserialize_array_uint8_t+0x2a>
 800b96a:	68a9      	ldr	r1, [r5, #8]
 800b96c:	f00c ff05 	bl	801877a <memcpy>
 800b970:	68aa      	ldr	r2, [r5, #8]
 800b972:	692b      	ldr	r3, [r5, #16]
 800b974:	4422      	add	r2, r4
 800b976:	4423      	add	r3, r4
 800b978:	1b36      	subs	r6, r6, r4
 800b97a:	60aa      	str	r2, [r5, #8]
 800b97c:	612b      	str	r3, [r5, #16]
 800b97e:	2201      	movs	r2, #1
 800b980:	4631      	mov	r1, r6
 800b982:	4628      	mov	r0, r5
 800b984:	f001 fc16 	bl	800d1b4 <ucdr_check_final_buffer_behavior_array>
 800b988:	4604      	mov	r4, r0
 800b98a:	1bb8      	subs	r0, r7, r6
 800b98c:	4622      	mov	r2, r4
 800b98e:	4440      	add	r0, r8
 800b990:	2c00      	cmp	r4, #0
 800b992:	d1ea      	bne.n	800b96a <ucdr_deserialize_array_uint8_t+0x16>
 800b994:	2301      	movs	r3, #1
 800b996:	7da8      	ldrb	r0, [r5, #22]
 800b998:	756b      	strb	r3, [r5, #21]
 800b99a:	4058      	eors	r0, r3
 800b99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a0:	463a      	mov	r2, r7
 800b9a2:	68a9      	ldr	r1, [r5, #8]
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	f00c fee8 	bl	801877a <memcpy>
 800b9aa:	68aa      	ldr	r2, [r5, #8]
 800b9ac:	692b      	ldr	r3, [r5, #16]
 800b9ae:	443a      	add	r2, r7
 800b9b0:	443b      	add	r3, r7
 800b9b2:	60aa      	str	r2, [r5, #8]
 800b9b4:	612b      	str	r3, [r5, #16]
 800b9b6:	e7ed      	b.n	800b994 <ucdr_deserialize_array_uint8_t+0x40>

0800b9b8 <ucdr_deserialize_endian_array_uint8_t>:
 800b9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9bc:	4619      	mov	r1, r3
 800b9be:	461f      	mov	r7, r3
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	4690      	mov	r8, r2
 800b9c4:	f001 fb6e 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800b9c8:	b9e0      	cbnz	r0, 800ba04 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800b9ca:	463e      	mov	r6, r7
 800b9cc:	e009      	b.n	800b9e2 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800b9ce:	68a9      	ldr	r1, [r5, #8]
 800b9d0:	f00c fed3 	bl	801877a <memcpy>
 800b9d4:	68aa      	ldr	r2, [r5, #8]
 800b9d6:	692b      	ldr	r3, [r5, #16]
 800b9d8:	4422      	add	r2, r4
 800b9da:	4423      	add	r3, r4
 800b9dc:	1b36      	subs	r6, r6, r4
 800b9de:	60aa      	str	r2, [r5, #8]
 800b9e0:	612b      	str	r3, [r5, #16]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	f001 fbe4 	bl	800d1b4 <ucdr_check_final_buffer_behavior_array>
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	1bb8      	subs	r0, r7, r6
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	4440      	add	r0, r8
 800b9f4:	2c00      	cmp	r4, #0
 800b9f6:	d1ea      	bne.n	800b9ce <ucdr_deserialize_endian_array_uint8_t+0x16>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	7da8      	ldrb	r0, [r5, #22]
 800b9fc:	756b      	strb	r3, [r5, #21]
 800b9fe:	4058      	eors	r0, r3
 800ba00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba04:	463a      	mov	r2, r7
 800ba06:	68a9      	ldr	r1, [r5, #8]
 800ba08:	4640      	mov	r0, r8
 800ba0a:	f00c feb6 	bl	801877a <memcpy>
 800ba0e:	68aa      	ldr	r2, [r5, #8]
 800ba10:	692b      	ldr	r3, [r5, #16]
 800ba12:	443a      	add	r2, r7
 800ba14:	443b      	add	r3, r7
 800ba16:	60aa      	str	r2, [r5, #8]
 800ba18:	612b      	str	r3, [r5, #16]
 800ba1a:	e7ed      	b.n	800b9f8 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800ba1c <ucdr_serialize_array_double>:
 800ba1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba20:	460e      	mov	r6, r1
 800ba22:	2108      	movs	r1, #8
 800ba24:	4604      	mov	r4, r0
 800ba26:	4617      	mov	r7, r2
 800ba28:	f001 fb9c 	bl	800d164 <ucdr_buffer_alignment>
 800ba2c:	4601      	mov	r1, r0
 800ba2e:	4620      	mov	r0, r4
 800ba30:	7d65      	ldrb	r5, [r4, #21]
 800ba32:	f001 fbdb 	bl	800d1ec <ucdr_advance_buffer>
 800ba36:	7d21      	ldrb	r1, [r4, #20]
 800ba38:	7565      	strb	r5, [r4, #21]
 800ba3a:	2901      	cmp	r1, #1
 800ba3c:	d010      	beq.n	800ba60 <ucdr_serialize_array_double+0x44>
 800ba3e:	b157      	cbz	r7, 800ba56 <ucdr_serialize_array_double+0x3a>
 800ba40:	2500      	movs	r5, #0
 800ba42:	e000      	b.n	800ba46 <ucdr_serialize_array_double+0x2a>
 800ba44:	7d21      	ldrb	r1, [r4, #20]
 800ba46:	ecb6 0b02 	vldmia	r6!, {d0}
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	3501      	adds	r5, #1
 800ba4e:	f001 f8db 	bl	800cc08 <ucdr_serialize_endian_double>
 800ba52:	42af      	cmp	r7, r5
 800ba54:	d1f6      	bne.n	800ba44 <ucdr_serialize_array_double+0x28>
 800ba56:	7da0      	ldrb	r0, [r4, #22]
 800ba58:	f080 0001 	eor.w	r0, r0, #1
 800ba5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba60:	00ff      	lsls	r7, r7, #3
 800ba62:	4639      	mov	r1, r7
 800ba64:	4620      	mov	r0, r4
 800ba66:	f001 fb1d 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800ba6a:	b9f8      	cbnz	r0, 800baac <ucdr_serialize_array_double+0x90>
 800ba6c:	46b8      	mov	r8, r7
 800ba6e:	e00a      	b.n	800ba86 <ucdr_serialize_array_double+0x6a>
 800ba70:	68a0      	ldr	r0, [r4, #8]
 800ba72:	f00c fe82 	bl	801877a <memcpy>
 800ba76:	68a2      	ldr	r2, [r4, #8]
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	442a      	add	r2, r5
 800ba7c:	442b      	add	r3, r5
 800ba7e:	eba8 0805 	sub.w	r8, r8, r5
 800ba82:	60a2      	str	r2, [r4, #8]
 800ba84:	6123      	str	r3, [r4, #16]
 800ba86:	2208      	movs	r2, #8
 800ba88:	4641      	mov	r1, r8
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f001 fb92 	bl	800d1b4 <ucdr_check_final_buffer_behavior_array>
 800ba90:	eba7 0108 	sub.w	r1, r7, r8
 800ba94:	4605      	mov	r5, r0
 800ba96:	4602      	mov	r2, r0
 800ba98:	4431      	add	r1, r6
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d1e8      	bne.n	800ba70 <ucdr_serialize_array_double+0x54>
 800ba9e:	7da0      	ldrb	r0, [r4, #22]
 800baa0:	2308      	movs	r3, #8
 800baa2:	7563      	strb	r3, [r4, #21]
 800baa4:	f080 0001 	eor.w	r0, r0, #1
 800baa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baac:	463a      	mov	r2, r7
 800baae:	68a0      	ldr	r0, [r4, #8]
 800bab0:	4631      	mov	r1, r6
 800bab2:	f00c fe62 	bl	801877a <memcpy>
 800bab6:	68a2      	ldr	r2, [r4, #8]
 800bab8:	6923      	ldr	r3, [r4, #16]
 800baba:	443a      	add	r2, r7
 800babc:	443b      	add	r3, r7
 800babe:	60a2      	str	r2, [r4, #8]
 800bac0:	6123      	str	r3, [r4, #16]
 800bac2:	e7ec      	b.n	800ba9e <ucdr_serialize_array_double+0x82>

0800bac4 <ucdr_deserialize_array_double>:
 800bac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac8:	460e      	mov	r6, r1
 800baca:	2108      	movs	r1, #8
 800bacc:	4604      	mov	r4, r0
 800bace:	4617      	mov	r7, r2
 800bad0:	f001 fb48 	bl	800d164 <ucdr_buffer_alignment>
 800bad4:	4601      	mov	r1, r0
 800bad6:	4620      	mov	r0, r4
 800bad8:	7d65      	ldrb	r5, [r4, #21]
 800bada:	f001 fb87 	bl	800d1ec <ucdr_advance_buffer>
 800bade:	7d21      	ldrb	r1, [r4, #20]
 800bae0:	7565      	strb	r5, [r4, #21]
 800bae2:	2901      	cmp	r1, #1
 800bae4:	d011      	beq.n	800bb0a <ucdr_deserialize_array_double+0x46>
 800bae6:	b15f      	cbz	r7, 800bb00 <ucdr_deserialize_array_double+0x3c>
 800bae8:	2500      	movs	r5, #0
 800baea:	e000      	b.n	800baee <ucdr_deserialize_array_double+0x2a>
 800baec:	7d21      	ldrb	r1, [r4, #20]
 800baee:	4632      	mov	r2, r6
 800baf0:	4620      	mov	r0, r4
 800baf2:	3501      	adds	r5, #1
 800baf4:	f001 fa0e 	bl	800cf14 <ucdr_deserialize_endian_double>
 800baf8:	42af      	cmp	r7, r5
 800bafa:	f106 0608 	add.w	r6, r6, #8
 800bafe:	d1f5      	bne.n	800baec <ucdr_deserialize_array_double+0x28>
 800bb00:	7da0      	ldrb	r0, [r4, #22]
 800bb02:	f080 0001 	eor.w	r0, r0, #1
 800bb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0a:	00ff      	lsls	r7, r7, #3
 800bb0c:	4639      	mov	r1, r7
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f001 fac8 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800bb14:	b9f8      	cbnz	r0, 800bb56 <ucdr_deserialize_array_double+0x92>
 800bb16:	46b8      	mov	r8, r7
 800bb18:	e00a      	b.n	800bb30 <ucdr_deserialize_array_double+0x6c>
 800bb1a:	68a1      	ldr	r1, [r4, #8]
 800bb1c:	f00c fe2d 	bl	801877a <memcpy>
 800bb20:	68a2      	ldr	r2, [r4, #8]
 800bb22:	6923      	ldr	r3, [r4, #16]
 800bb24:	442a      	add	r2, r5
 800bb26:	442b      	add	r3, r5
 800bb28:	eba8 0805 	sub.w	r8, r8, r5
 800bb2c:	60a2      	str	r2, [r4, #8]
 800bb2e:	6123      	str	r3, [r4, #16]
 800bb30:	2208      	movs	r2, #8
 800bb32:	4641      	mov	r1, r8
 800bb34:	4620      	mov	r0, r4
 800bb36:	f001 fb3d 	bl	800d1b4 <ucdr_check_final_buffer_behavior_array>
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	eba7 0008 	sub.w	r0, r7, r8
 800bb40:	462a      	mov	r2, r5
 800bb42:	4430      	add	r0, r6
 800bb44:	2d00      	cmp	r5, #0
 800bb46:	d1e8      	bne.n	800bb1a <ucdr_deserialize_array_double+0x56>
 800bb48:	7da0      	ldrb	r0, [r4, #22]
 800bb4a:	2308      	movs	r3, #8
 800bb4c:	7563      	strb	r3, [r4, #21]
 800bb4e:	f080 0001 	eor.w	r0, r0, #1
 800bb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb56:	463a      	mov	r2, r7
 800bb58:	68a1      	ldr	r1, [r4, #8]
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	f00c fe0d 	bl	801877a <memcpy>
 800bb60:	68a2      	ldr	r2, [r4, #8]
 800bb62:	6923      	ldr	r3, [r4, #16]
 800bb64:	443a      	add	r2, r7
 800bb66:	443b      	add	r3, r7
 800bb68:	60a2      	str	r2, [r4, #8]
 800bb6a:	6123      	str	r3, [r4, #16]
 800bb6c:	e7ec      	b.n	800bb48 <ucdr_deserialize_array_double+0x84>
 800bb6e:	bf00      	nop

0800bb70 <ucdr_serialize_bool>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	460d      	mov	r5, r1
 800bb74:	2101      	movs	r1, #1
 800bb76:	4604      	mov	r4, r0
 800bb78:	f001 faa0 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bb7c:	b148      	cbz	r0, 800bb92 <ucdr_serialize_bool+0x22>
 800bb7e:	68a3      	ldr	r3, [r4, #8]
 800bb80:	701d      	strb	r5, [r3, #0]
 800bb82:	68a2      	ldr	r2, [r4, #8]
 800bb84:	6923      	ldr	r3, [r4, #16]
 800bb86:	2101      	movs	r1, #1
 800bb88:	440a      	add	r2, r1
 800bb8a:	440b      	add	r3, r1
 800bb8c:	60a2      	str	r2, [r4, #8]
 800bb8e:	6123      	str	r3, [r4, #16]
 800bb90:	7561      	strb	r1, [r4, #21]
 800bb92:	7da0      	ldrb	r0, [r4, #22]
 800bb94:	f080 0001 	eor.w	r0, r0, #1
 800bb98:	bd38      	pop	{r3, r4, r5, pc}
 800bb9a:	bf00      	nop

0800bb9c <ucdr_deserialize_bool>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	460d      	mov	r5, r1
 800bba0:	2101      	movs	r1, #1
 800bba2:	4604      	mov	r4, r0
 800bba4:	f001 fa8a 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bba8:	b160      	cbz	r0, 800bbc4 <ucdr_deserialize_bool+0x28>
 800bbaa:	68a2      	ldr	r2, [r4, #8]
 800bbac:	6923      	ldr	r3, [r4, #16]
 800bbae:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bbb2:	3900      	subs	r1, #0
 800bbb4:	bf18      	it	ne
 800bbb6:	2101      	movne	r1, #1
 800bbb8:	7029      	strb	r1, [r5, #0]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	60a2      	str	r2, [r4, #8]
 800bbc0:	6123      	str	r3, [r4, #16]
 800bbc2:	7561      	strb	r1, [r4, #21]
 800bbc4:	7da0      	ldrb	r0, [r4, #22]
 800bbc6:	f080 0001 	eor.w	r0, r0, #1
 800bbca:	bd38      	pop	{r3, r4, r5, pc}

0800bbcc <ucdr_serialize_uint8_t>:
 800bbcc:	b538      	push	{r3, r4, r5, lr}
 800bbce:	460d      	mov	r5, r1
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	f001 fa72 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bbd8:	b148      	cbz	r0, 800bbee <ucdr_serialize_uint8_t+0x22>
 800bbda:	68a3      	ldr	r3, [r4, #8]
 800bbdc:	701d      	strb	r5, [r3, #0]
 800bbde:	68a2      	ldr	r2, [r4, #8]
 800bbe0:	6923      	ldr	r3, [r4, #16]
 800bbe2:	2101      	movs	r1, #1
 800bbe4:	440a      	add	r2, r1
 800bbe6:	440b      	add	r3, r1
 800bbe8:	60a2      	str	r2, [r4, #8]
 800bbea:	6123      	str	r3, [r4, #16]
 800bbec:	7561      	strb	r1, [r4, #21]
 800bbee:	7da0      	ldrb	r0, [r4, #22]
 800bbf0:	f080 0001 	eor.w	r0, r0, #1
 800bbf4:	bd38      	pop	{r3, r4, r5, pc}
 800bbf6:	bf00      	nop

0800bbf8 <ucdr_deserialize_uint8_t>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	460d      	mov	r5, r1
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	4604      	mov	r4, r0
 800bc00:	f001 fa5c 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bc04:	b150      	cbz	r0, 800bc1c <ucdr_deserialize_uint8_t+0x24>
 800bc06:	68a3      	ldr	r3, [r4, #8]
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	702b      	strb	r3, [r5, #0]
 800bc0c:	68a2      	ldr	r2, [r4, #8]
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	2101      	movs	r1, #1
 800bc12:	440a      	add	r2, r1
 800bc14:	440b      	add	r3, r1
 800bc16:	60a2      	str	r2, [r4, #8]
 800bc18:	6123      	str	r3, [r4, #16]
 800bc1a:	7561      	strb	r1, [r4, #21]
 800bc1c:	7da0      	ldrb	r0, [r4, #22]
 800bc1e:	f080 0001 	eor.w	r0, r0, #1
 800bc22:	bd38      	pop	{r3, r4, r5, pc}

0800bc24 <ucdr_serialize_uint16_t>:
 800bc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc28:	b082      	sub	sp, #8
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	2102      	movs	r1, #2
 800bc2e:	4604      	mov	r4, r0
 800bc30:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bc34:	f001 fa96 	bl	800d164 <ucdr_buffer_alignment>
 800bc38:	4601      	mov	r1, r0
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	7d67      	ldrb	r7, [r4, #21]
 800bc3e:	f001 fad5 	bl	800d1ec <ucdr_advance_buffer>
 800bc42:	2102      	movs	r1, #2
 800bc44:	4620      	mov	r0, r4
 800bc46:	f001 fa2d 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800bc4a:	b1c0      	cbz	r0, 800bc7e <ucdr_serialize_uint16_t+0x5a>
 800bc4c:	7d22      	ldrb	r2, [r4, #20]
 800bc4e:	68a3      	ldr	r3, [r4, #8]
 800bc50:	2a01      	cmp	r2, #1
 800bc52:	d04e      	beq.n	800bcf2 <ucdr_serialize_uint16_t+0xce>
 800bc54:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc58:	701a      	strb	r2, [r3, #0]
 800bc5a:	68a3      	ldr	r3, [r4, #8]
 800bc5c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc60:	705a      	strb	r2, [r3, #1]
 800bc62:	68a2      	ldr	r2, [r4, #8]
 800bc64:	6923      	ldr	r3, [r4, #16]
 800bc66:	3202      	adds	r2, #2
 800bc68:	3302      	adds	r3, #2
 800bc6a:	2102      	movs	r1, #2
 800bc6c:	60a2      	str	r2, [r4, #8]
 800bc6e:	6123      	str	r3, [r4, #16]
 800bc70:	7561      	strb	r1, [r4, #21]
 800bc72:	7da0      	ldrb	r0, [r4, #22]
 800bc74:	f080 0001 	eor.w	r0, r0, #1
 800bc78:	b002      	add	sp, #8
 800bc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc7e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bc82:	42ab      	cmp	r3, r5
 800bc84:	d923      	bls.n	800bcce <ucdr_serialize_uint16_t+0xaa>
 800bc86:	1b5e      	subs	r6, r3, r5
 800bc88:	60a3      	str	r3, [r4, #8]
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	f1c6 0802 	rsb	r8, r6, #2
 800bc90:	4433      	add	r3, r6
 800bc92:	6123      	str	r3, [r4, #16]
 800bc94:	4641      	mov	r1, r8
 800bc96:	4620      	mov	r0, r4
 800bc98:	f001 fa10 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bc9c:	b368      	cbz	r0, 800bcfa <ucdr_serialize_uint16_t+0xd6>
 800bc9e:	7d23      	ldrb	r3, [r4, #20]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d03b      	beq.n	800bd1c <ucdr_serialize_uint16_t+0xf8>
 800bca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bca8:	702b      	strb	r3, [r5, #0]
 800bcaa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bcae:	706b      	strb	r3, [r5, #1]
 800bcb0:	6923      	ldr	r3, [r4, #16]
 800bcb2:	68a2      	ldr	r2, [r4, #8]
 800bcb4:	7da0      	ldrb	r0, [r4, #22]
 800bcb6:	3302      	adds	r3, #2
 800bcb8:	4442      	add	r2, r8
 800bcba:	1b9b      	subs	r3, r3, r6
 800bcbc:	2102      	movs	r1, #2
 800bcbe:	f080 0001 	eor.w	r0, r0, #1
 800bcc2:	60a2      	str	r2, [r4, #8]
 800bcc4:	6123      	str	r3, [r4, #16]
 800bcc6:	7561      	strb	r1, [r4, #21]
 800bcc8:	b002      	add	sp, #8
 800bcca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcce:	2102      	movs	r1, #2
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f001 f9f3 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d0cb      	beq.n	800bc72 <ucdr_serialize_uint16_t+0x4e>
 800bcda:	7d23      	ldrb	r3, [r4, #20]
 800bcdc:	68a2      	ldr	r2, [r4, #8]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d018      	beq.n	800bd14 <ucdr_serialize_uint16_t+0xf0>
 800bce2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bce6:	7013      	strb	r3, [r2, #0]
 800bce8:	68a3      	ldr	r3, [r4, #8]
 800bcea:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bcee:	705a      	strb	r2, [r3, #1]
 800bcf0:	e7b7      	b.n	800bc62 <ucdr_serialize_uint16_t+0x3e>
 800bcf2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bcf6:	801a      	strh	r2, [r3, #0]
 800bcf8:	e7b3      	b.n	800bc62 <ucdr_serialize_uint16_t+0x3e>
 800bcfa:	68a2      	ldr	r2, [r4, #8]
 800bcfc:	6923      	ldr	r3, [r4, #16]
 800bcfe:	7da0      	ldrb	r0, [r4, #22]
 800bd00:	7567      	strb	r7, [r4, #21]
 800bd02:	1b92      	subs	r2, r2, r6
 800bd04:	1b9b      	subs	r3, r3, r6
 800bd06:	f080 0001 	eor.w	r0, r0, #1
 800bd0a:	60a2      	str	r2, [r4, #8]
 800bd0c:	6123      	str	r3, [r4, #16]
 800bd0e:	b002      	add	sp, #8
 800bd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800bd18:	8013      	strh	r3, [r2, #0]
 800bd1a:	e7a2      	b.n	800bc62 <ucdr_serialize_uint16_t+0x3e>
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f10d 0506 	add.w	r5, sp, #6
 800bd22:	4632      	mov	r2, r6
 800bd24:	4629      	mov	r1, r5
 800bd26:	f00c fd28 	bl	801877a <memcpy>
 800bd2a:	68a0      	ldr	r0, [r4, #8]
 800bd2c:	4642      	mov	r2, r8
 800bd2e:	19a9      	adds	r1, r5, r6
 800bd30:	f00c fd23 	bl	801877a <memcpy>
 800bd34:	e7bc      	b.n	800bcb0 <ucdr_serialize_uint16_t+0x8c>
 800bd36:	bf00      	nop

0800bd38 <ucdr_serialize_endian_uint16_t>:
 800bd38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd3c:	b083      	sub	sp, #12
 800bd3e:	460d      	mov	r5, r1
 800bd40:	2102      	movs	r1, #2
 800bd42:	4604      	mov	r4, r0
 800bd44:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bd48:	f001 fa0c 	bl	800d164 <ucdr_buffer_alignment>
 800bd4c:	4601      	mov	r1, r0
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bd54:	f001 fa4a 	bl	800d1ec <ucdr_advance_buffer>
 800bd58:	2102      	movs	r1, #2
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f001 f9a2 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800bd60:	bb60      	cbnz	r0, 800bdbc <ucdr_serialize_endian_uint16_t+0x84>
 800bd62:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bd66:	42be      	cmp	r6, r7
 800bd68:	d923      	bls.n	800bdb2 <ucdr_serialize_endian_uint16_t+0x7a>
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	60a6      	str	r6, [r4, #8]
 800bd6e:	1bf6      	subs	r6, r6, r7
 800bd70:	4433      	add	r3, r6
 800bd72:	f1c6 0902 	rsb	r9, r6, #2
 800bd76:	6123      	str	r3, [r4, #16]
 800bd78:	4649      	mov	r1, r9
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f001 f99e 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d037      	beq.n	800bdf4 <ucdr_serialize_endian_uint16_t+0xbc>
 800bd84:	2d01      	cmp	r5, #1
 800bd86:	d043      	beq.n	800be10 <ucdr_serialize_endian_uint16_t+0xd8>
 800bd88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd8c:	703b      	strb	r3, [r7, #0]
 800bd8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd92:	707b      	strb	r3, [r7, #1]
 800bd94:	6923      	ldr	r3, [r4, #16]
 800bd96:	68a2      	ldr	r2, [r4, #8]
 800bd98:	7da0      	ldrb	r0, [r4, #22]
 800bd9a:	3302      	adds	r3, #2
 800bd9c:	444a      	add	r2, r9
 800bd9e:	1b9b      	subs	r3, r3, r6
 800bda0:	2102      	movs	r1, #2
 800bda2:	f080 0001 	eor.w	r0, r0, #1
 800bda6:	60a2      	str	r2, [r4, #8]
 800bda8:	6123      	str	r3, [r4, #16]
 800bdaa:	7561      	strb	r1, [r4, #21]
 800bdac:	b003      	add	sp, #12
 800bdae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdb2:	2102      	movs	r1, #2
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f001 f981 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bdba:	b188      	cbz	r0, 800bde0 <ucdr_serialize_endian_uint16_t+0xa8>
 800bdbc:	2d01      	cmp	r5, #1
 800bdbe:	68a3      	ldr	r3, [r4, #8]
 800bdc0:	d014      	beq.n	800bdec <ucdr_serialize_endian_uint16_t+0xb4>
 800bdc2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bdc6:	701a      	strb	r2, [r3, #0]
 800bdc8:	68a3      	ldr	r3, [r4, #8]
 800bdca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bdce:	705a      	strb	r2, [r3, #1]
 800bdd0:	68a2      	ldr	r2, [r4, #8]
 800bdd2:	6923      	ldr	r3, [r4, #16]
 800bdd4:	3202      	adds	r2, #2
 800bdd6:	3302      	adds	r3, #2
 800bdd8:	2102      	movs	r1, #2
 800bdda:	60a2      	str	r2, [r4, #8]
 800bddc:	6123      	str	r3, [r4, #16]
 800bdde:	7561      	strb	r1, [r4, #21]
 800bde0:	7da0      	ldrb	r0, [r4, #22]
 800bde2:	f080 0001 	eor.w	r0, r0, #1
 800bde6:	b003      	add	sp, #12
 800bde8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdec:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bdf0:	801a      	strh	r2, [r3, #0]
 800bdf2:	e7ed      	b.n	800bdd0 <ucdr_serialize_endian_uint16_t+0x98>
 800bdf4:	68a2      	ldr	r2, [r4, #8]
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	7da0      	ldrb	r0, [r4, #22]
 800bdfa:	f884 8015 	strb.w	r8, [r4, #21]
 800bdfe:	1b92      	subs	r2, r2, r6
 800be00:	1b9b      	subs	r3, r3, r6
 800be02:	f080 0001 	eor.w	r0, r0, #1
 800be06:	60a2      	str	r2, [r4, #8]
 800be08:	6123      	str	r3, [r4, #16]
 800be0a:	b003      	add	sp, #12
 800be0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be10:	f10d 0506 	add.w	r5, sp, #6
 800be14:	4632      	mov	r2, r6
 800be16:	4629      	mov	r1, r5
 800be18:	4638      	mov	r0, r7
 800be1a:	f00c fcae 	bl	801877a <memcpy>
 800be1e:	68a0      	ldr	r0, [r4, #8]
 800be20:	464a      	mov	r2, r9
 800be22:	19a9      	adds	r1, r5, r6
 800be24:	f00c fca9 	bl	801877a <memcpy>
 800be28:	e7b4      	b.n	800bd94 <ucdr_serialize_endian_uint16_t+0x5c>
 800be2a:	bf00      	nop

0800be2c <ucdr_deserialize_uint16_t>:
 800be2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be30:	460d      	mov	r5, r1
 800be32:	2102      	movs	r1, #2
 800be34:	4604      	mov	r4, r0
 800be36:	f001 f995 	bl	800d164 <ucdr_buffer_alignment>
 800be3a:	4601      	mov	r1, r0
 800be3c:	4620      	mov	r0, r4
 800be3e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800be42:	f001 f9d3 	bl	800d1ec <ucdr_advance_buffer>
 800be46:	2102      	movs	r1, #2
 800be48:	4620      	mov	r0, r4
 800be4a:	f001 f92b 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800be4e:	b1a8      	cbz	r0, 800be7c <ucdr_deserialize_uint16_t+0x50>
 800be50:	7d22      	ldrb	r2, [r4, #20]
 800be52:	68a3      	ldr	r3, [r4, #8]
 800be54:	2a01      	cmp	r2, #1
 800be56:	d046      	beq.n	800bee6 <ucdr_deserialize_uint16_t+0xba>
 800be58:	785b      	ldrb	r3, [r3, #1]
 800be5a:	702b      	strb	r3, [r5, #0]
 800be5c:	68a3      	ldr	r3, [r4, #8]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	706b      	strb	r3, [r5, #1]
 800be62:	68a2      	ldr	r2, [r4, #8]
 800be64:	6923      	ldr	r3, [r4, #16]
 800be66:	3202      	adds	r2, #2
 800be68:	3302      	adds	r3, #2
 800be6a:	2102      	movs	r1, #2
 800be6c:	60a2      	str	r2, [r4, #8]
 800be6e:	6123      	str	r3, [r4, #16]
 800be70:	7561      	strb	r1, [r4, #21]
 800be72:	7da0      	ldrb	r0, [r4, #22]
 800be74:	f080 0001 	eor.w	r0, r0, #1
 800be78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800be80:	42be      	cmp	r6, r7
 800be82:	d920      	bls.n	800bec6 <ucdr_deserialize_uint16_t+0x9a>
 800be84:	6923      	ldr	r3, [r4, #16]
 800be86:	60a6      	str	r6, [r4, #8]
 800be88:	1bf6      	subs	r6, r6, r7
 800be8a:	4433      	add	r3, r6
 800be8c:	f1c6 0902 	rsb	r9, r6, #2
 800be90:	6123      	str	r3, [r4, #16]
 800be92:	4649      	mov	r1, r9
 800be94:	4620      	mov	r0, r4
 800be96:	f001 f911 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800be9a:	b338      	cbz	r0, 800beec <ucdr_deserialize_uint16_t+0xc0>
 800be9c:	7d23      	ldrb	r3, [r4, #20]
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d034      	beq.n	800bf0c <ucdr_deserialize_uint16_t+0xe0>
 800bea2:	787b      	ldrb	r3, [r7, #1]
 800bea4:	702b      	strb	r3, [r5, #0]
 800bea6:	783b      	ldrb	r3, [r7, #0]
 800bea8:	706b      	strb	r3, [r5, #1]
 800beaa:	6923      	ldr	r3, [r4, #16]
 800beac:	68a2      	ldr	r2, [r4, #8]
 800beae:	7da0      	ldrb	r0, [r4, #22]
 800beb0:	2102      	movs	r1, #2
 800beb2:	3302      	adds	r3, #2
 800beb4:	444a      	add	r2, r9
 800beb6:	1b9b      	subs	r3, r3, r6
 800beb8:	7561      	strb	r1, [r4, #21]
 800beba:	60a2      	str	r2, [r4, #8]
 800bebc:	6123      	str	r3, [r4, #16]
 800bebe:	f080 0001 	eor.w	r0, r0, #1
 800bec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bec6:	2102      	movs	r1, #2
 800bec8:	4620      	mov	r0, r4
 800beca:	f001 f8f7 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d0cf      	beq.n	800be72 <ucdr_deserialize_uint16_t+0x46>
 800bed2:	7d23      	ldrb	r3, [r4, #20]
 800bed4:	68a2      	ldr	r2, [r4, #8]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d015      	beq.n	800bf06 <ucdr_deserialize_uint16_t+0xda>
 800beda:	7853      	ldrb	r3, [r2, #1]
 800bedc:	702b      	strb	r3, [r5, #0]
 800bede:	68a3      	ldr	r3, [r4, #8]
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	706b      	strb	r3, [r5, #1]
 800bee4:	e7bd      	b.n	800be62 <ucdr_deserialize_uint16_t+0x36>
 800bee6:	881b      	ldrh	r3, [r3, #0]
 800bee8:	802b      	strh	r3, [r5, #0]
 800beea:	e7ba      	b.n	800be62 <ucdr_deserialize_uint16_t+0x36>
 800beec:	68a2      	ldr	r2, [r4, #8]
 800beee:	6923      	ldr	r3, [r4, #16]
 800bef0:	7da0      	ldrb	r0, [r4, #22]
 800bef2:	f884 8015 	strb.w	r8, [r4, #21]
 800bef6:	1b92      	subs	r2, r2, r6
 800bef8:	1b9b      	subs	r3, r3, r6
 800befa:	60a2      	str	r2, [r4, #8]
 800befc:	6123      	str	r3, [r4, #16]
 800befe:	f080 0001 	eor.w	r0, r0, #1
 800bf02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf06:	8813      	ldrh	r3, [r2, #0]
 800bf08:	802b      	strh	r3, [r5, #0]
 800bf0a:	e7aa      	b.n	800be62 <ucdr_deserialize_uint16_t+0x36>
 800bf0c:	4639      	mov	r1, r7
 800bf0e:	4632      	mov	r2, r6
 800bf10:	4628      	mov	r0, r5
 800bf12:	f00c fc32 	bl	801877a <memcpy>
 800bf16:	68a1      	ldr	r1, [r4, #8]
 800bf18:	464a      	mov	r2, r9
 800bf1a:	19a8      	adds	r0, r5, r6
 800bf1c:	f00c fc2d 	bl	801877a <memcpy>
 800bf20:	e7c3      	b.n	800beaa <ucdr_deserialize_uint16_t+0x7e>
 800bf22:	bf00      	nop

0800bf24 <ucdr_deserialize_endian_uint16_t>:
 800bf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf28:	460e      	mov	r6, r1
 800bf2a:	2102      	movs	r1, #2
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	4615      	mov	r5, r2
 800bf30:	f001 f918 	bl	800d164 <ucdr_buffer_alignment>
 800bf34:	4601      	mov	r1, r0
 800bf36:	4620      	mov	r0, r4
 800bf38:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bf3c:	f001 f956 	bl	800d1ec <ucdr_advance_buffer>
 800bf40:	2102      	movs	r1, #2
 800bf42:	4620      	mov	r0, r4
 800bf44:	f001 f8ae 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800bf48:	bb60      	cbnz	r0, 800bfa4 <ucdr_deserialize_endian_uint16_t+0x80>
 800bf4a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800bf4e:	4547      	cmp	r7, r8
 800bf50:	d923      	bls.n	800bf9a <ucdr_deserialize_endian_uint16_t+0x76>
 800bf52:	6923      	ldr	r3, [r4, #16]
 800bf54:	60a7      	str	r7, [r4, #8]
 800bf56:	eba7 0708 	sub.w	r7, r7, r8
 800bf5a:	443b      	add	r3, r7
 800bf5c:	f1c7 0a02 	rsb	sl, r7, #2
 800bf60:	6123      	str	r3, [r4, #16]
 800bf62:	4651      	mov	r1, sl
 800bf64:	4620      	mov	r0, r4
 800bf66:	f001 f8a9 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d032      	beq.n	800bfd4 <ucdr_deserialize_endian_uint16_t+0xb0>
 800bf6e:	2e01      	cmp	r6, #1
 800bf70:	d03d      	beq.n	800bfee <ucdr_deserialize_endian_uint16_t+0xca>
 800bf72:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bf76:	702b      	strb	r3, [r5, #0]
 800bf78:	f898 3000 	ldrb.w	r3, [r8]
 800bf7c:	706b      	strb	r3, [r5, #1]
 800bf7e:	6923      	ldr	r3, [r4, #16]
 800bf80:	68a2      	ldr	r2, [r4, #8]
 800bf82:	7da0      	ldrb	r0, [r4, #22]
 800bf84:	2102      	movs	r1, #2
 800bf86:	3302      	adds	r3, #2
 800bf88:	4452      	add	r2, sl
 800bf8a:	1bdb      	subs	r3, r3, r7
 800bf8c:	7561      	strb	r1, [r4, #21]
 800bf8e:	60a2      	str	r2, [r4, #8]
 800bf90:	6123      	str	r3, [r4, #16]
 800bf92:	f080 0001 	eor.w	r0, r0, #1
 800bf96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf9a:	2102      	movs	r1, #2
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f001 f88d 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800bfa2:	b178      	cbz	r0, 800bfc4 <ucdr_deserialize_endian_uint16_t+0xa0>
 800bfa4:	2e01      	cmp	r6, #1
 800bfa6:	68a3      	ldr	r3, [r4, #8]
 800bfa8:	d011      	beq.n	800bfce <ucdr_deserialize_endian_uint16_t+0xaa>
 800bfaa:	785b      	ldrb	r3, [r3, #1]
 800bfac:	702b      	strb	r3, [r5, #0]
 800bfae:	68a3      	ldr	r3, [r4, #8]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	706b      	strb	r3, [r5, #1]
 800bfb4:	68a2      	ldr	r2, [r4, #8]
 800bfb6:	6923      	ldr	r3, [r4, #16]
 800bfb8:	3202      	adds	r2, #2
 800bfba:	3302      	adds	r3, #2
 800bfbc:	2102      	movs	r1, #2
 800bfbe:	60a2      	str	r2, [r4, #8]
 800bfc0:	6123      	str	r3, [r4, #16]
 800bfc2:	7561      	strb	r1, [r4, #21]
 800bfc4:	7da0      	ldrb	r0, [r4, #22]
 800bfc6:	f080 0001 	eor.w	r0, r0, #1
 800bfca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	802b      	strh	r3, [r5, #0]
 800bfd2:	e7ef      	b.n	800bfb4 <ucdr_deserialize_endian_uint16_t+0x90>
 800bfd4:	68a2      	ldr	r2, [r4, #8]
 800bfd6:	6923      	ldr	r3, [r4, #16]
 800bfd8:	7da0      	ldrb	r0, [r4, #22]
 800bfda:	f884 9015 	strb.w	r9, [r4, #21]
 800bfde:	1bd2      	subs	r2, r2, r7
 800bfe0:	1bdb      	subs	r3, r3, r7
 800bfe2:	60a2      	str	r2, [r4, #8]
 800bfe4:	6123      	str	r3, [r4, #16]
 800bfe6:	f080 0001 	eor.w	r0, r0, #1
 800bfea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfee:	4641      	mov	r1, r8
 800bff0:	463a      	mov	r2, r7
 800bff2:	4628      	mov	r0, r5
 800bff4:	f00c fbc1 	bl	801877a <memcpy>
 800bff8:	68a1      	ldr	r1, [r4, #8]
 800bffa:	4652      	mov	r2, sl
 800bffc:	19e8      	adds	r0, r5, r7
 800bffe:	f00c fbbc 	bl	801877a <memcpy>
 800c002:	e7bc      	b.n	800bf7e <ucdr_deserialize_endian_uint16_t+0x5a>

0800c004 <ucdr_serialize_uint32_t>:
 800c004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c008:	b082      	sub	sp, #8
 800c00a:	4604      	mov	r4, r0
 800c00c:	9101      	str	r1, [sp, #4]
 800c00e:	2104      	movs	r1, #4
 800c010:	f001 f8a8 	bl	800d164 <ucdr_buffer_alignment>
 800c014:	4601      	mov	r1, r0
 800c016:	4620      	mov	r0, r4
 800c018:	7d67      	ldrb	r7, [r4, #21]
 800c01a:	f001 f8e7 	bl	800d1ec <ucdr_advance_buffer>
 800c01e:	2104      	movs	r1, #4
 800c020:	4620      	mov	r0, r4
 800c022:	f001 f83f 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800c026:	b300      	cbz	r0, 800c06a <ucdr_serialize_uint32_t+0x66>
 800c028:	7d22      	ldrb	r2, [r4, #20]
 800c02a:	68a3      	ldr	r3, [r4, #8]
 800c02c:	2a01      	cmp	r2, #1
 800c02e:	d05d      	beq.n	800c0ec <ucdr_serialize_uint32_t+0xe8>
 800c030:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c034:	701a      	strb	r2, [r3, #0]
 800c036:	68a3      	ldr	r3, [r4, #8]
 800c038:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c03c:	705a      	strb	r2, [r3, #1]
 800c03e:	68a3      	ldr	r3, [r4, #8]
 800c040:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c044:	709a      	strb	r2, [r3, #2]
 800c046:	68a3      	ldr	r3, [r4, #8]
 800c048:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c04c:	70da      	strb	r2, [r3, #3]
 800c04e:	68a2      	ldr	r2, [r4, #8]
 800c050:	6923      	ldr	r3, [r4, #16]
 800c052:	3204      	adds	r2, #4
 800c054:	3304      	adds	r3, #4
 800c056:	2104      	movs	r1, #4
 800c058:	60a2      	str	r2, [r4, #8]
 800c05a:	6123      	str	r3, [r4, #16]
 800c05c:	7561      	strb	r1, [r4, #21]
 800c05e:	7da0      	ldrb	r0, [r4, #22]
 800c060:	f080 0001 	eor.w	r0, r0, #1
 800c064:	b002      	add	sp, #8
 800c066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c06a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c06e:	42ab      	cmp	r3, r5
 800c070:	d92e      	bls.n	800c0d0 <ucdr_serialize_uint32_t+0xcc>
 800c072:	1b5e      	subs	r6, r3, r5
 800c074:	60a3      	str	r3, [r4, #8]
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	f1c6 0804 	rsb	r8, r6, #4
 800c07c:	4433      	add	r3, r6
 800c07e:	6123      	str	r3, [r4, #16]
 800c080:	4641      	mov	r1, r8
 800c082:	4620      	mov	r0, r4
 800c084:	f001 f81a 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c088:	b398      	cbz	r0, 800c0f2 <ucdr_serialize_uint32_t+0xee>
 800c08a:	7d23      	ldrb	r3, [r4, #20]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d046      	beq.n	800c11e <ucdr_serialize_uint32_t+0x11a>
 800c090:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c094:	702b      	strb	r3, [r5, #0]
 800c096:	2e01      	cmp	r6, #1
 800c098:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c09c:	706b      	strb	r3, [r5, #1]
 800c09e:	d035      	beq.n	800c10c <ucdr_serialize_uint32_t+0x108>
 800c0a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c0a4:	70ab      	strb	r3, [r5, #2]
 800c0a6:	2e02      	cmp	r6, #2
 800c0a8:	d034      	beq.n	800c114 <ucdr_serialize_uint32_t+0x110>
 800c0aa:	3503      	adds	r5, #3
 800c0ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c0b0:	702b      	strb	r3, [r5, #0]
 800c0b2:	6923      	ldr	r3, [r4, #16]
 800c0b4:	68a2      	ldr	r2, [r4, #8]
 800c0b6:	7da0      	ldrb	r0, [r4, #22]
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	4442      	add	r2, r8
 800c0bc:	1b9b      	subs	r3, r3, r6
 800c0be:	2104      	movs	r1, #4
 800c0c0:	f080 0001 	eor.w	r0, r0, #1
 800c0c4:	60a2      	str	r2, [r4, #8]
 800c0c6:	6123      	str	r3, [r4, #16]
 800c0c8:	7561      	strb	r1, [r4, #21]
 800c0ca:	b002      	add	sp, #8
 800c0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d0:	2104      	movs	r1, #4
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 fff2 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d0c0      	beq.n	800c05e <ucdr_serialize_uint32_t+0x5a>
 800c0dc:	7d23      	ldrb	r3, [r4, #20]
 800c0de:	68a2      	ldr	r2, [r4, #8]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d019      	beq.n	800c118 <ucdr_serialize_uint32_t+0x114>
 800c0e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c0e8:	7013      	strb	r3, [r2, #0]
 800c0ea:	e7a4      	b.n	800c036 <ucdr_serialize_uint32_t+0x32>
 800c0ec:	9a01      	ldr	r2, [sp, #4]
 800c0ee:	601a      	str	r2, [r3, #0]
 800c0f0:	e7ad      	b.n	800c04e <ucdr_serialize_uint32_t+0x4a>
 800c0f2:	68a2      	ldr	r2, [r4, #8]
 800c0f4:	6923      	ldr	r3, [r4, #16]
 800c0f6:	7da0      	ldrb	r0, [r4, #22]
 800c0f8:	7567      	strb	r7, [r4, #21]
 800c0fa:	1b92      	subs	r2, r2, r6
 800c0fc:	1b9b      	subs	r3, r3, r6
 800c0fe:	f080 0001 	eor.w	r0, r0, #1
 800c102:	60a2      	str	r2, [r4, #8]
 800c104:	6123      	str	r3, [r4, #16]
 800c106:	b002      	add	sp, #8
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c10c:	68a3      	ldr	r3, [r4, #8]
 800c10e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c112:	701a      	strb	r2, [r3, #0]
 800c114:	68a5      	ldr	r5, [r4, #8]
 800c116:	e7c9      	b.n	800c0ac <ucdr_serialize_uint32_t+0xa8>
 800c118:	9b01      	ldr	r3, [sp, #4]
 800c11a:	6013      	str	r3, [r2, #0]
 800c11c:	e797      	b.n	800c04e <ucdr_serialize_uint32_t+0x4a>
 800c11e:	4628      	mov	r0, r5
 800c120:	ad01      	add	r5, sp, #4
 800c122:	4632      	mov	r2, r6
 800c124:	4629      	mov	r1, r5
 800c126:	f00c fb28 	bl	801877a <memcpy>
 800c12a:	68a0      	ldr	r0, [r4, #8]
 800c12c:	4642      	mov	r2, r8
 800c12e:	19a9      	adds	r1, r5, r6
 800c130:	f00c fb23 	bl	801877a <memcpy>
 800c134:	e7bd      	b.n	800c0b2 <ucdr_serialize_uint32_t+0xae>
 800c136:	bf00      	nop

0800c138 <ucdr_serialize_endian_uint32_t>:
 800c138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c13c:	b083      	sub	sp, #12
 800c13e:	460d      	mov	r5, r1
 800c140:	2104      	movs	r1, #4
 800c142:	4604      	mov	r4, r0
 800c144:	9201      	str	r2, [sp, #4]
 800c146:	f001 f80d 	bl	800d164 <ucdr_buffer_alignment>
 800c14a:	4601      	mov	r1, r0
 800c14c:	4620      	mov	r0, r4
 800c14e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c152:	f001 f84b 	bl	800d1ec <ucdr_advance_buffer>
 800c156:	2104      	movs	r1, #4
 800c158:	4620      	mov	r0, r4
 800c15a:	f000 ffa3 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800c15e:	2800      	cmp	r0, #0
 800c160:	d137      	bne.n	800c1d2 <ucdr_serialize_endian_uint32_t+0x9a>
 800c162:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c166:	42b7      	cmp	r7, r6
 800c168:	d92e      	bls.n	800c1c8 <ucdr_serialize_endian_uint32_t+0x90>
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	60a7      	str	r7, [r4, #8]
 800c16e:	1bbf      	subs	r7, r7, r6
 800c170:	443b      	add	r3, r7
 800c172:	f1c7 0904 	rsb	r9, r7, #4
 800c176:	6123      	str	r3, [r4, #16]
 800c178:	4649      	mov	r1, r9
 800c17a:	4620      	mov	r0, r4
 800c17c:	f000 ff9e 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c180:	2800      	cmp	r0, #0
 800c182:	d049      	beq.n	800c218 <ucdr_serialize_endian_uint32_t+0xe0>
 800c184:	2d01      	cmp	r5, #1
 800c186:	d05b      	beq.n	800c240 <ucdr_serialize_endian_uint32_t+0x108>
 800c188:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c18c:	7033      	strb	r3, [r6, #0]
 800c18e:	2f01      	cmp	r7, #1
 800c190:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c194:	7073      	strb	r3, [r6, #1]
 800c196:	d04d      	beq.n	800c234 <ucdr_serialize_endian_uint32_t+0xfc>
 800c198:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c19c:	70b3      	strb	r3, [r6, #2]
 800c19e:	2f02      	cmp	r7, #2
 800c1a0:	d04c      	beq.n	800c23c <ucdr_serialize_endian_uint32_t+0x104>
 800c1a2:	3603      	adds	r6, #3
 800c1a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c1a8:	7033      	strb	r3, [r6, #0]
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	68a2      	ldr	r2, [r4, #8]
 800c1ae:	7da0      	ldrb	r0, [r4, #22]
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	444a      	add	r2, r9
 800c1b4:	1bdb      	subs	r3, r3, r7
 800c1b6:	2104      	movs	r1, #4
 800c1b8:	f080 0001 	eor.w	r0, r0, #1
 800c1bc:	60a2      	str	r2, [r4, #8]
 800c1be:	6123      	str	r3, [r4, #16]
 800c1c0:	7561      	strb	r1, [r4, #21]
 800c1c2:	b003      	add	sp, #12
 800c1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1c8:	2104      	movs	r1, #4
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f000 ff76 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c1d0:	b1c8      	cbz	r0, 800c206 <ucdr_serialize_endian_uint32_t+0xce>
 800c1d2:	2d01      	cmp	r5, #1
 800c1d4:	68a3      	ldr	r3, [r4, #8]
 800c1d6:	d01c      	beq.n	800c212 <ucdr_serialize_endian_uint32_t+0xda>
 800c1d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	68a3      	ldr	r3, [r4, #8]
 800c1e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c1e4:	705a      	strb	r2, [r3, #1]
 800c1e6:	68a3      	ldr	r3, [r4, #8]
 800c1e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c1ec:	709a      	strb	r2, [r3, #2]
 800c1ee:	68a3      	ldr	r3, [r4, #8]
 800c1f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c1f4:	70da      	strb	r2, [r3, #3]
 800c1f6:	68a2      	ldr	r2, [r4, #8]
 800c1f8:	6923      	ldr	r3, [r4, #16]
 800c1fa:	3204      	adds	r2, #4
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	2104      	movs	r1, #4
 800c200:	60a2      	str	r2, [r4, #8]
 800c202:	6123      	str	r3, [r4, #16]
 800c204:	7561      	strb	r1, [r4, #21]
 800c206:	7da0      	ldrb	r0, [r4, #22]
 800c208:	f080 0001 	eor.w	r0, r0, #1
 800c20c:	b003      	add	sp, #12
 800c20e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c212:	9a01      	ldr	r2, [sp, #4]
 800c214:	601a      	str	r2, [r3, #0]
 800c216:	e7ee      	b.n	800c1f6 <ucdr_serialize_endian_uint32_t+0xbe>
 800c218:	68a2      	ldr	r2, [r4, #8]
 800c21a:	6923      	ldr	r3, [r4, #16]
 800c21c:	7da0      	ldrb	r0, [r4, #22]
 800c21e:	f884 8015 	strb.w	r8, [r4, #21]
 800c222:	1bd2      	subs	r2, r2, r7
 800c224:	1bdb      	subs	r3, r3, r7
 800c226:	f080 0001 	eor.w	r0, r0, #1
 800c22a:	60a2      	str	r2, [r4, #8]
 800c22c:	6123      	str	r3, [r4, #16]
 800c22e:	b003      	add	sp, #12
 800c230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c234:	68a3      	ldr	r3, [r4, #8]
 800c236:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c23a:	701a      	strb	r2, [r3, #0]
 800c23c:	68a6      	ldr	r6, [r4, #8]
 800c23e:	e7b1      	b.n	800c1a4 <ucdr_serialize_endian_uint32_t+0x6c>
 800c240:	ad01      	add	r5, sp, #4
 800c242:	463a      	mov	r2, r7
 800c244:	4629      	mov	r1, r5
 800c246:	4630      	mov	r0, r6
 800c248:	f00c fa97 	bl	801877a <memcpy>
 800c24c:	68a0      	ldr	r0, [r4, #8]
 800c24e:	464a      	mov	r2, r9
 800c250:	19e9      	adds	r1, r5, r7
 800c252:	f00c fa92 	bl	801877a <memcpy>
 800c256:	e7a8      	b.n	800c1aa <ucdr_serialize_endian_uint32_t+0x72>

0800c258 <ucdr_deserialize_uint32_t>:
 800c258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c25c:	460d      	mov	r5, r1
 800c25e:	2104      	movs	r1, #4
 800c260:	4604      	mov	r4, r0
 800c262:	f000 ff7f 	bl	800d164 <ucdr_buffer_alignment>
 800c266:	4601      	mov	r1, r0
 800c268:	4620      	mov	r0, r4
 800c26a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c26e:	f000 ffbd 	bl	800d1ec <ucdr_advance_buffer>
 800c272:	2104      	movs	r1, #4
 800c274:	4620      	mov	r0, r4
 800c276:	f000 ff15 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800c27a:	b1d8      	cbz	r0, 800c2b4 <ucdr_deserialize_uint32_t+0x5c>
 800c27c:	7d22      	ldrb	r2, [r4, #20]
 800c27e:	68a3      	ldr	r3, [r4, #8]
 800c280:	2a01      	cmp	r2, #1
 800c282:	d052      	beq.n	800c32a <ucdr_deserialize_uint32_t+0xd2>
 800c284:	78db      	ldrb	r3, [r3, #3]
 800c286:	702b      	strb	r3, [r5, #0]
 800c288:	68a3      	ldr	r3, [r4, #8]
 800c28a:	789b      	ldrb	r3, [r3, #2]
 800c28c:	706b      	strb	r3, [r5, #1]
 800c28e:	68a3      	ldr	r3, [r4, #8]
 800c290:	785b      	ldrb	r3, [r3, #1]
 800c292:	70ab      	strb	r3, [r5, #2]
 800c294:	68a3      	ldr	r3, [r4, #8]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	70eb      	strb	r3, [r5, #3]
 800c29a:	68a2      	ldr	r2, [r4, #8]
 800c29c:	6923      	ldr	r3, [r4, #16]
 800c29e:	3204      	adds	r2, #4
 800c2a0:	3304      	adds	r3, #4
 800c2a2:	2104      	movs	r1, #4
 800c2a4:	60a2      	str	r2, [r4, #8]
 800c2a6:	6123      	str	r3, [r4, #16]
 800c2a8:	7561      	strb	r1, [r4, #21]
 800c2aa:	7da0      	ldrb	r0, [r4, #22]
 800c2ac:	f080 0001 	eor.w	r0, r0, #1
 800c2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2b4:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c2b8:	42b7      	cmp	r7, r6
 800c2ba:	d92a      	bls.n	800c312 <ucdr_deserialize_uint32_t+0xba>
 800c2bc:	6923      	ldr	r3, [r4, #16]
 800c2be:	60a7      	str	r7, [r4, #8]
 800c2c0:	1bbf      	subs	r7, r7, r6
 800c2c2:	443b      	add	r3, r7
 800c2c4:	f1c7 0904 	rsb	r9, r7, #4
 800c2c8:	6123      	str	r3, [r4, #16]
 800c2ca:	4649      	mov	r1, r9
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 fef5 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c2d2:	b368      	cbz	r0, 800c330 <ucdr_deserialize_uint32_t+0xd8>
 800c2d4:	7d23      	ldrb	r3, [r4, #20]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d040      	beq.n	800c35c <ucdr_deserialize_uint32_t+0x104>
 800c2da:	78f3      	ldrb	r3, [r6, #3]
 800c2dc:	702b      	strb	r3, [r5, #0]
 800c2de:	78b3      	ldrb	r3, [r6, #2]
 800c2e0:	706b      	strb	r3, [r5, #1]
 800c2e2:	2f01      	cmp	r7, #1
 800c2e4:	d031      	beq.n	800c34a <ucdr_deserialize_uint32_t+0xf2>
 800c2e6:	7873      	ldrb	r3, [r6, #1]
 800c2e8:	70ab      	strb	r3, [r5, #2]
 800c2ea:	2f02      	cmp	r7, #2
 800c2ec:	f105 0503 	add.w	r5, r5, #3
 800c2f0:	d02f      	beq.n	800c352 <ucdr_deserialize_uint32_t+0xfa>
 800c2f2:	7833      	ldrb	r3, [r6, #0]
 800c2f4:	702b      	strb	r3, [r5, #0]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	68a2      	ldr	r2, [r4, #8]
 800c2fa:	7da0      	ldrb	r0, [r4, #22]
 800c2fc:	2104      	movs	r1, #4
 800c2fe:	3304      	adds	r3, #4
 800c300:	444a      	add	r2, r9
 800c302:	1bdb      	subs	r3, r3, r7
 800c304:	7561      	strb	r1, [r4, #21]
 800c306:	60a2      	str	r2, [r4, #8]
 800c308:	6123      	str	r3, [r4, #16]
 800c30a:	f080 0001 	eor.w	r0, r0, #1
 800c30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c312:	2104      	movs	r1, #4
 800c314:	4620      	mov	r0, r4
 800c316:	f000 fed1 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d0c5      	beq.n	800c2aa <ucdr_deserialize_uint32_t+0x52>
 800c31e:	7d23      	ldrb	r3, [r4, #20]
 800c320:	68a2      	ldr	r2, [r4, #8]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d017      	beq.n	800c356 <ucdr_deserialize_uint32_t+0xfe>
 800c326:	78d3      	ldrb	r3, [r2, #3]
 800c328:	e7ad      	b.n	800c286 <ucdr_deserialize_uint32_t+0x2e>
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	e7b4      	b.n	800c29a <ucdr_deserialize_uint32_t+0x42>
 800c330:	68a2      	ldr	r2, [r4, #8]
 800c332:	6923      	ldr	r3, [r4, #16]
 800c334:	7da0      	ldrb	r0, [r4, #22]
 800c336:	f884 8015 	strb.w	r8, [r4, #21]
 800c33a:	1bd2      	subs	r2, r2, r7
 800c33c:	1bdb      	subs	r3, r3, r7
 800c33e:	60a2      	str	r2, [r4, #8]
 800c340:	6123      	str	r3, [r4, #16]
 800c342:	f080 0001 	eor.w	r0, r0, #1
 800c346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c34a:	68a3      	ldr	r3, [r4, #8]
 800c34c:	785b      	ldrb	r3, [r3, #1]
 800c34e:	70ab      	strb	r3, [r5, #2]
 800c350:	3503      	adds	r5, #3
 800c352:	68a6      	ldr	r6, [r4, #8]
 800c354:	e7cd      	b.n	800c2f2 <ucdr_deserialize_uint32_t+0x9a>
 800c356:	6813      	ldr	r3, [r2, #0]
 800c358:	602b      	str	r3, [r5, #0]
 800c35a:	e79e      	b.n	800c29a <ucdr_deserialize_uint32_t+0x42>
 800c35c:	4631      	mov	r1, r6
 800c35e:	463a      	mov	r2, r7
 800c360:	4628      	mov	r0, r5
 800c362:	f00c fa0a 	bl	801877a <memcpy>
 800c366:	68a1      	ldr	r1, [r4, #8]
 800c368:	464a      	mov	r2, r9
 800c36a:	19e8      	adds	r0, r5, r7
 800c36c:	f00c fa05 	bl	801877a <memcpy>
 800c370:	e7c1      	b.n	800c2f6 <ucdr_deserialize_uint32_t+0x9e>
 800c372:	bf00      	nop

0800c374 <ucdr_deserialize_endian_uint32_t>:
 800c374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c378:	460e      	mov	r6, r1
 800c37a:	2104      	movs	r1, #4
 800c37c:	4604      	mov	r4, r0
 800c37e:	4615      	mov	r5, r2
 800c380:	f000 fef0 	bl	800d164 <ucdr_buffer_alignment>
 800c384:	4601      	mov	r1, r0
 800c386:	4620      	mov	r0, r4
 800c388:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c38c:	f000 ff2e 	bl	800d1ec <ucdr_advance_buffer>
 800c390:	2104      	movs	r1, #4
 800c392:	4620      	mov	r0, r4
 800c394:	f000 fe86 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d137      	bne.n	800c40c <ucdr_deserialize_endian_uint32_t+0x98>
 800c39c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c3a0:	42bb      	cmp	r3, r7
 800c3a2:	d92e      	bls.n	800c402 <ucdr_deserialize_endian_uint32_t+0x8e>
 800c3a4:	eba3 0807 	sub.w	r8, r3, r7
 800c3a8:	60a3      	str	r3, [r4, #8]
 800c3aa:	6923      	ldr	r3, [r4, #16]
 800c3ac:	f1c8 0a04 	rsb	sl, r8, #4
 800c3b0:	4443      	add	r3, r8
 800c3b2:	6123      	str	r3, [r4, #16]
 800c3b4:	4651      	mov	r1, sl
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f000 fe80 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d043      	beq.n	800c448 <ucdr_deserialize_endian_uint32_t+0xd4>
 800c3c0:	2e01      	cmp	r6, #1
 800c3c2:	d056      	beq.n	800c472 <ucdr_deserialize_endian_uint32_t+0xfe>
 800c3c4:	78fb      	ldrb	r3, [r7, #3]
 800c3c6:	702b      	strb	r3, [r5, #0]
 800c3c8:	78bb      	ldrb	r3, [r7, #2]
 800c3ca:	706b      	strb	r3, [r5, #1]
 800c3cc:	f1b8 0f01 	cmp.w	r8, #1
 800c3d0:	d049      	beq.n	800c466 <ucdr_deserialize_endian_uint32_t+0xf2>
 800c3d2:	787b      	ldrb	r3, [r7, #1]
 800c3d4:	70ab      	strb	r3, [r5, #2]
 800c3d6:	f1b8 0f02 	cmp.w	r8, #2
 800c3da:	f105 0503 	add.w	r5, r5, #3
 800c3de:	d046      	beq.n	800c46e <ucdr_deserialize_endian_uint32_t+0xfa>
 800c3e0:	783b      	ldrb	r3, [r7, #0]
 800c3e2:	702b      	strb	r3, [r5, #0]
 800c3e4:	6923      	ldr	r3, [r4, #16]
 800c3e6:	68a2      	ldr	r2, [r4, #8]
 800c3e8:	7da0      	ldrb	r0, [r4, #22]
 800c3ea:	2104      	movs	r1, #4
 800c3ec:	3304      	adds	r3, #4
 800c3ee:	4452      	add	r2, sl
 800c3f0:	eba3 0308 	sub.w	r3, r3, r8
 800c3f4:	7561      	strb	r1, [r4, #21]
 800c3f6:	60a2      	str	r2, [r4, #8]
 800c3f8:	6123      	str	r3, [r4, #16]
 800c3fa:	f080 0001 	eor.w	r0, r0, #1
 800c3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c402:	2104      	movs	r1, #4
 800c404:	4620      	mov	r0, r4
 800c406:	f000 fe59 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c40a:	b1a8      	cbz	r0, 800c438 <ucdr_deserialize_endian_uint32_t+0xc4>
 800c40c:	2e01      	cmp	r6, #1
 800c40e:	68a3      	ldr	r3, [r4, #8]
 800c410:	d017      	beq.n	800c442 <ucdr_deserialize_endian_uint32_t+0xce>
 800c412:	78db      	ldrb	r3, [r3, #3]
 800c414:	702b      	strb	r3, [r5, #0]
 800c416:	68a3      	ldr	r3, [r4, #8]
 800c418:	789b      	ldrb	r3, [r3, #2]
 800c41a:	706b      	strb	r3, [r5, #1]
 800c41c:	68a3      	ldr	r3, [r4, #8]
 800c41e:	785b      	ldrb	r3, [r3, #1]
 800c420:	70ab      	strb	r3, [r5, #2]
 800c422:	68a3      	ldr	r3, [r4, #8]
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	70eb      	strb	r3, [r5, #3]
 800c428:	68a2      	ldr	r2, [r4, #8]
 800c42a:	6923      	ldr	r3, [r4, #16]
 800c42c:	3204      	adds	r2, #4
 800c42e:	3304      	adds	r3, #4
 800c430:	2104      	movs	r1, #4
 800c432:	60a2      	str	r2, [r4, #8]
 800c434:	6123      	str	r3, [r4, #16]
 800c436:	7561      	strb	r1, [r4, #21]
 800c438:	7da0      	ldrb	r0, [r4, #22]
 800c43a:	f080 0001 	eor.w	r0, r0, #1
 800c43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	602b      	str	r3, [r5, #0]
 800c446:	e7ef      	b.n	800c428 <ucdr_deserialize_endian_uint32_t+0xb4>
 800c448:	68a2      	ldr	r2, [r4, #8]
 800c44a:	6923      	ldr	r3, [r4, #16]
 800c44c:	7da0      	ldrb	r0, [r4, #22]
 800c44e:	f884 9015 	strb.w	r9, [r4, #21]
 800c452:	eba2 0208 	sub.w	r2, r2, r8
 800c456:	eba3 0308 	sub.w	r3, r3, r8
 800c45a:	60a2      	str	r2, [r4, #8]
 800c45c:	6123      	str	r3, [r4, #16]
 800c45e:	f080 0001 	eor.w	r0, r0, #1
 800c462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c466:	68a3      	ldr	r3, [r4, #8]
 800c468:	785b      	ldrb	r3, [r3, #1]
 800c46a:	70ab      	strb	r3, [r5, #2]
 800c46c:	3503      	adds	r5, #3
 800c46e:	68a7      	ldr	r7, [r4, #8]
 800c470:	e7b6      	b.n	800c3e0 <ucdr_deserialize_endian_uint32_t+0x6c>
 800c472:	4639      	mov	r1, r7
 800c474:	4642      	mov	r2, r8
 800c476:	4628      	mov	r0, r5
 800c478:	f00c f97f 	bl	801877a <memcpy>
 800c47c:	68a1      	ldr	r1, [r4, #8]
 800c47e:	4652      	mov	r2, sl
 800c480:	eb05 0008 	add.w	r0, r5, r8
 800c484:	f00c f979 	bl	801877a <memcpy>
 800c488:	e7ac      	b.n	800c3e4 <ucdr_deserialize_endian_uint32_t+0x70>
 800c48a:	bf00      	nop

0800c48c <ucdr_serialize_uint64_t>:
 800c48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c490:	2108      	movs	r1, #8
 800c492:	b082      	sub	sp, #8
 800c494:	4604      	mov	r4, r0
 800c496:	e9cd 2300 	strd	r2, r3, [sp]
 800c49a:	f000 fe63 	bl	800d164 <ucdr_buffer_alignment>
 800c49e:	4601      	mov	r1, r0
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	7d67      	ldrb	r7, [r4, #21]
 800c4a4:	f000 fea2 	bl	800d1ec <ucdr_advance_buffer>
 800c4a8:	2108      	movs	r1, #8
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 fdfa 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d14d      	bne.n	800c550 <ucdr_serialize_uint64_t+0xc4>
 800c4b4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c4b8:	42ab      	cmp	r3, r5
 800c4ba:	d944      	bls.n	800c546 <ucdr_serialize_uint64_t+0xba>
 800c4bc:	1b5e      	subs	r6, r3, r5
 800c4be:	60a3      	str	r3, [r4, #8]
 800c4c0:	6923      	ldr	r3, [r4, #16]
 800c4c2:	f1c6 0808 	rsb	r8, r6, #8
 800c4c6:	4433      	add	r3, r6
 800c4c8:	6123      	str	r3, [r4, #16]
 800c4ca:	4641      	mov	r1, r8
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f000 fdf5 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d072      	beq.n	800c5bc <ucdr_serialize_uint64_t+0x130>
 800c4d6:	7d23      	ldrb	r3, [r4, #20]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	f000 8092 	beq.w	800c602 <ucdr_serialize_uint64_t+0x176>
 800c4de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c4e2:	702b      	strb	r3, [r5, #0]
 800c4e4:	2e01      	cmp	r6, #1
 800c4e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c4ea:	706b      	strb	r3, [r5, #1]
 800c4ec:	d073      	beq.n	800c5d6 <ucdr_serialize_uint64_t+0x14a>
 800c4ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c4f2:	70ab      	strb	r3, [r5, #2]
 800c4f4:	2e02      	cmp	r6, #2
 800c4f6:	d072      	beq.n	800c5de <ucdr_serialize_uint64_t+0x152>
 800c4f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c4fc:	70eb      	strb	r3, [r5, #3]
 800c4fe:	2e03      	cmp	r6, #3
 800c500:	d071      	beq.n	800c5e6 <ucdr_serialize_uint64_t+0x15a>
 800c502:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c506:	712b      	strb	r3, [r5, #4]
 800c508:	2e04      	cmp	r6, #4
 800c50a:	d070      	beq.n	800c5ee <ucdr_serialize_uint64_t+0x162>
 800c50c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c510:	716b      	strb	r3, [r5, #5]
 800c512:	2e05      	cmp	r6, #5
 800c514:	d06f      	beq.n	800c5f6 <ucdr_serialize_uint64_t+0x16a>
 800c516:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c51a:	71ab      	strb	r3, [r5, #6]
 800c51c:	2e06      	cmp	r6, #6
 800c51e:	d06e      	beq.n	800c5fe <ucdr_serialize_uint64_t+0x172>
 800c520:	3507      	adds	r5, #7
 800c522:	f89d 3000 	ldrb.w	r3, [sp]
 800c526:	702b      	strb	r3, [r5, #0]
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	68a2      	ldr	r2, [r4, #8]
 800c52c:	7da0      	ldrb	r0, [r4, #22]
 800c52e:	3308      	adds	r3, #8
 800c530:	4442      	add	r2, r8
 800c532:	1b9b      	subs	r3, r3, r6
 800c534:	2108      	movs	r1, #8
 800c536:	f080 0001 	eor.w	r0, r0, #1
 800c53a:	60a2      	str	r2, [r4, #8]
 800c53c:	6123      	str	r3, [r4, #16]
 800c53e:	7561      	strb	r1, [r4, #21]
 800c540:	b002      	add	sp, #8
 800c542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c546:	2108      	movs	r1, #8
 800c548:	4620      	mov	r0, r4
 800c54a:	f000 fdb7 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c54e:	b350      	cbz	r0, 800c5a6 <ucdr_serialize_uint64_t+0x11a>
 800c550:	7d22      	ldrb	r2, [r4, #20]
 800c552:	68a3      	ldr	r3, [r4, #8]
 800c554:	2a01      	cmp	r2, #1
 800c556:	d02c      	beq.n	800c5b2 <ucdr_serialize_uint64_t+0x126>
 800c558:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c55c:	701a      	strb	r2, [r3, #0]
 800c55e:	68a3      	ldr	r3, [r4, #8]
 800c560:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c564:	705a      	strb	r2, [r3, #1]
 800c566:	68a3      	ldr	r3, [r4, #8]
 800c568:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c56c:	709a      	strb	r2, [r3, #2]
 800c56e:	68a3      	ldr	r3, [r4, #8]
 800c570:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c574:	70da      	strb	r2, [r3, #3]
 800c576:	68a3      	ldr	r3, [r4, #8]
 800c578:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c57c:	711a      	strb	r2, [r3, #4]
 800c57e:	68a3      	ldr	r3, [r4, #8]
 800c580:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c584:	715a      	strb	r2, [r3, #5]
 800c586:	68a3      	ldr	r3, [r4, #8]
 800c588:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c58c:	719a      	strb	r2, [r3, #6]
 800c58e:	68a3      	ldr	r3, [r4, #8]
 800c590:	f89d 2000 	ldrb.w	r2, [sp]
 800c594:	71da      	strb	r2, [r3, #7]
 800c596:	68a2      	ldr	r2, [r4, #8]
 800c598:	6923      	ldr	r3, [r4, #16]
 800c59a:	3208      	adds	r2, #8
 800c59c:	3308      	adds	r3, #8
 800c59e:	2108      	movs	r1, #8
 800c5a0:	60a2      	str	r2, [r4, #8]
 800c5a2:	6123      	str	r3, [r4, #16]
 800c5a4:	7561      	strb	r1, [r4, #21]
 800c5a6:	7da0      	ldrb	r0, [r4, #22]
 800c5a8:	f080 0001 	eor.w	r0, r0, #1
 800c5ac:	b002      	add	sp, #8
 800c5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c5b6:	6019      	str	r1, [r3, #0]
 800c5b8:	605a      	str	r2, [r3, #4]
 800c5ba:	e7ec      	b.n	800c596 <ucdr_serialize_uint64_t+0x10a>
 800c5bc:	68a2      	ldr	r2, [r4, #8]
 800c5be:	6923      	ldr	r3, [r4, #16]
 800c5c0:	7da0      	ldrb	r0, [r4, #22]
 800c5c2:	7567      	strb	r7, [r4, #21]
 800c5c4:	1b92      	subs	r2, r2, r6
 800c5c6:	1b9b      	subs	r3, r3, r6
 800c5c8:	f080 0001 	eor.w	r0, r0, #1
 800c5cc:	60a2      	str	r2, [r4, #8]
 800c5ce:	6123      	str	r3, [r4, #16]
 800c5d0:	b002      	add	sp, #8
 800c5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d6:	68a3      	ldr	r3, [r4, #8]
 800c5d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c5dc:	701a      	strb	r2, [r3, #0]
 800c5de:	68a3      	ldr	r3, [r4, #8]
 800c5e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c5e4:	701a      	strb	r2, [r3, #0]
 800c5e6:	68a3      	ldr	r3, [r4, #8]
 800c5e8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c5ec:	701a      	strb	r2, [r3, #0]
 800c5ee:	68a3      	ldr	r3, [r4, #8]
 800c5f0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	68a3      	ldr	r3, [r4, #8]
 800c5f8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c5fc:	701a      	strb	r2, [r3, #0]
 800c5fe:	68a5      	ldr	r5, [r4, #8]
 800c600:	e78f      	b.n	800c522 <ucdr_serialize_uint64_t+0x96>
 800c602:	4628      	mov	r0, r5
 800c604:	466d      	mov	r5, sp
 800c606:	4632      	mov	r2, r6
 800c608:	4629      	mov	r1, r5
 800c60a:	f00c f8b6 	bl	801877a <memcpy>
 800c60e:	68a0      	ldr	r0, [r4, #8]
 800c610:	4642      	mov	r2, r8
 800c612:	19a9      	adds	r1, r5, r6
 800c614:	f00c f8b1 	bl	801877a <memcpy>
 800c618:	e786      	b.n	800c528 <ucdr_serialize_uint64_t+0x9c>
 800c61a:	bf00      	nop

0800c61c <ucdr_serialize_int16_t>:
 800c61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	460b      	mov	r3, r1
 800c624:	2102      	movs	r1, #2
 800c626:	4604      	mov	r4, r0
 800c628:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c62c:	f000 fd9a 	bl	800d164 <ucdr_buffer_alignment>
 800c630:	4601      	mov	r1, r0
 800c632:	4620      	mov	r0, r4
 800c634:	7d67      	ldrb	r7, [r4, #21]
 800c636:	f000 fdd9 	bl	800d1ec <ucdr_advance_buffer>
 800c63a:	2102      	movs	r1, #2
 800c63c:	4620      	mov	r0, r4
 800c63e:	f000 fd31 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800c642:	b1c0      	cbz	r0, 800c676 <ucdr_serialize_int16_t+0x5a>
 800c644:	7d22      	ldrb	r2, [r4, #20]
 800c646:	68a3      	ldr	r3, [r4, #8]
 800c648:	2a01      	cmp	r2, #1
 800c64a:	d04e      	beq.n	800c6ea <ucdr_serialize_int16_t+0xce>
 800c64c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c650:	701a      	strb	r2, [r3, #0]
 800c652:	68a3      	ldr	r3, [r4, #8]
 800c654:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c658:	705a      	strb	r2, [r3, #1]
 800c65a:	68a2      	ldr	r2, [r4, #8]
 800c65c:	6923      	ldr	r3, [r4, #16]
 800c65e:	3202      	adds	r2, #2
 800c660:	3302      	adds	r3, #2
 800c662:	2102      	movs	r1, #2
 800c664:	60a2      	str	r2, [r4, #8]
 800c666:	6123      	str	r3, [r4, #16]
 800c668:	7561      	strb	r1, [r4, #21]
 800c66a:	7da0      	ldrb	r0, [r4, #22]
 800c66c:	f080 0001 	eor.w	r0, r0, #1
 800c670:	b002      	add	sp, #8
 800c672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c676:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c67a:	42ab      	cmp	r3, r5
 800c67c:	d923      	bls.n	800c6c6 <ucdr_serialize_int16_t+0xaa>
 800c67e:	1b5e      	subs	r6, r3, r5
 800c680:	60a3      	str	r3, [r4, #8]
 800c682:	6923      	ldr	r3, [r4, #16]
 800c684:	f1c6 0802 	rsb	r8, r6, #2
 800c688:	4433      	add	r3, r6
 800c68a:	6123      	str	r3, [r4, #16]
 800c68c:	4641      	mov	r1, r8
 800c68e:	4620      	mov	r0, r4
 800c690:	f000 fd14 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c694:	b368      	cbz	r0, 800c6f2 <ucdr_serialize_int16_t+0xd6>
 800c696:	7d23      	ldrb	r3, [r4, #20]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d03b      	beq.n	800c714 <ucdr_serialize_int16_t+0xf8>
 800c69c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c6a0:	702b      	strb	r3, [r5, #0]
 800c6a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c6a6:	706b      	strb	r3, [r5, #1]
 800c6a8:	6923      	ldr	r3, [r4, #16]
 800c6aa:	68a2      	ldr	r2, [r4, #8]
 800c6ac:	7da0      	ldrb	r0, [r4, #22]
 800c6ae:	3302      	adds	r3, #2
 800c6b0:	4442      	add	r2, r8
 800c6b2:	1b9b      	subs	r3, r3, r6
 800c6b4:	2102      	movs	r1, #2
 800c6b6:	f080 0001 	eor.w	r0, r0, #1
 800c6ba:	60a2      	str	r2, [r4, #8]
 800c6bc:	6123      	str	r3, [r4, #16]
 800c6be:	7561      	strb	r1, [r4, #21]
 800c6c0:	b002      	add	sp, #8
 800c6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c6:	2102      	movs	r1, #2
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 fcf7 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d0cb      	beq.n	800c66a <ucdr_serialize_int16_t+0x4e>
 800c6d2:	7d23      	ldrb	r3, [r4, #20]
 800c6d4:	68a2      	ldr	r2, [r4, #8]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d018      	beq.n	800c70c <ucdr_serialize_int16_t+0xf0>
 800c6da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c6de:	7013      	strb	r3, [r2, #0]
 800c6e0:	68a3      	ldr	r3, [r4, #8]
 800c6e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c6e6:	705a      	strb	r2, [r3, #1]
 800c6e8:	e7b7      	b.n	800c65a <ucdr_serialize_int16_t+0x3e>
 800c6ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c6ee:	801a      	strh	r2, [r3, #0]
 800c6f0:	e7b3      	b.n	800c65a <ucdr_serialize_int16_t+0x3e>
 800c6f2:	68a2      	ldr	r2, [r4, #8]
 800c6f4:	6923      	ldr	r3, [r4, #16]
 800c6f6:	7da0      	ldrb	r0, [r4, #22]
 800c6f8:	7567      	strb	r7, [r4, #21]
 800c6fa:	1b92      	subs	r2, r2, r6
 800c6fc:	1b9b      	subs	r3, r3, r6
 800c6fe:	f080 0001 	eor.w	r0, r0, #1
 800c702:	60a2      	str	r2, [r4, #8]
 800c704:	6123      	str	r3, [r4, #16]
 800c706:	b002      	add	sp, #8
 800c708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c70c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c710:	8013      	strh	r3, [r2, #0]
 800c712:	e7a2      	b.n	800c65a <ucdr_serialize_int16_t+0x3e>
 800c714:	4628      	mov	r0, r5
 800c716:	f10d 0506 	add.w	r5, sp, #6
 800c71a:	4632      	mov	r2, r6
 800c71c:	4629      	mov	r1, r5
 800c71e:	f00c f82c 	bl	801877a <memcpy>
 800c722:	68a0      	ldr	r0, [r4, #8]
 800c724:	4642      	mov	r2, r8
 800c726:	19a9      	adds	r1, r5, r6
 800c728:	f00c f827 	bl	801877a <memcpy>
 800c72c:	e7bc      	b.n	800c6a8 <ucdr_serialize_int16_t+0x8c>
 800c72e:	bf00      	nop

0800c730 <ucdr_deserialize_int16_t>:
 800c730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c734:	460d      	mov	r5, r1
 800c736:	2102      	movs	r1, #2
 800c738:	4604      	mov	r4, r0
 800c73a:	f000 fd13 	bl	800d164 <ucdr_buffer_alignment>
 800c73e:	4601      	mov	r1, r0
 800c740:	4620      	mov	r0, r4
 800c742:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c746:	f000 fd51 	bl	800d1ec <ucdr_advance_buffer>
 800c74a:	2102      	movs	r1, #2
 800c74c:	4620      	mov	r0, r4
 800c74e:	f000 fca9 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800c752:	b1a8      	cbz	r0, 800c780 <ucdr_deserialize_int16_t+0x50>
 800c754:	7d22      	ldrb	r2, [r4, #20]
 800c756:	68a3      	ldr	r3, [r4, #8]
 800c758:	2a01      	cmp	r2, #1
 800c75a:	d046      	beq.n	800c7ea <ucdr_deserialize_int16_t+0xba>
 800c75c:	785b      	ldrb	r3, [r3, #1]
 800c75e:	702b      	strb	r3, [r5, #0]
 800c760:	68a3      	ldr	r3, [r4, #8]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	706b      	strb	r3, [r5, #1]
 800c766:	68a2      	ldr	r2, [r4, #8]
 800c768:	6923      	ldr	r3, [r4, #16]
 800c76a:	3202      	adds	r2, #2
 800c76c:	3302      	adds	r3, #2
 800c76e:	2102      	movs	r1, #2
 800c770:	60a2      	str	r2, [r4, #8]
 800c772:	6123      	str	r3, [r4, #16]
 800c774:	7561      	strb	r1, [r4, #21]
 800c776:	7da0      	ldrb	r0, [r4, #22]
 800c778:	f080 0001 	eor.w	r0, r0, #1
 800c77c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c780:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c784:	42be      	cmp	r6, r7
 800c786:	d920      	bls.n	800c7ca <ucdr_deserialize_int16_t+0x9a>
 800c788:	6923      	ldr	r3, [r4, #16]
 800c78a:	60a6      	str	r6, [r4, #8]
 800c78c:	1bf6      	subs	r6, r6, r7
 800c78e:	4433      	add	r3, r6
 800c790:	f1c6 0902 	rsb	r9, r6, #2
 800c794:	6123      	str	r3, [r4, #16]
 800c796:	4649      	mov	r1, r9
 800c798:	4620      	mov	r0, r4
 800c79a:	f000 fc8f 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c79e:	b338      	cbz	r0, 800c7f0 <ucdr_deserialize_int16_t+0xc0>
 800c7a0:	7d23      	ldrb	r3, [r4, #20]
 800c7a2:	2b01      	cmp	r3, #1
 800c7a4:	d034      	beq.n	800c810 <ucdr_deserialize_int16_t+0xe0>
 800c7a6:	787b      	ldrb	r3, [r7, #1]
 800c7a8:	702b      	strb	r3, [r5, #0]
 800c7aa:	783b      	ldrb	r3, [r7, #0]
 800c7ac:	706b      	strb	r3, [r5, #1]
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	68a2      	ldr	r2, [r4, #8]
 800c7b2:	7da0      	ldrb	r0, [r4, #22]
 800c7b4:	2102      	movs	r1, #2
 800c7b6:	3302      	adds	r3, #2
 800c7b8:	444a      	add	r2, r9
 800c7ba:	1b9b      	subs	r3, r3, r6
 800c7bc:	7561      	strb	r1, [r4, #21]
 800c7be:	60a2      	str	r2, [r4, #8]
 800c7c0:	6123      	str	r3, [r4, #16]
 800c7c2:	f080 0001 	eor.w	r0, r0, #1
 800c7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7ca:	2102      	movs	r1, #2
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f000 fc75 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	d0cf      	beq.n	800c776 <ucdr_deserialize_int16_t+0x46>
 800c7d6:	7d23      	ldrb	r3, [r4, #20]
 800c7d8:	68a2      	ldr	r2, [r4, #8]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d015      	beq.n	800c80a <ucdr_deserialize_int16_t+0xda>
 800c7de:	7853      	ldrb	r3, [r2, #1]
 800c7e0:	702b      	strb	r3, [r5, #0]
 800c7e2:	68a3      	ldr	r3, [r4, #8]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	706b      	strb	r3, [r5, #1]
 800c7e8:	e7bd      	b.n	800c766 <ucdr_deserialize_int16_t+0x36>
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	802b      	strh	r3, [r5, #0]
 800c7ee:	e7ba      	b.n	800c766 <ucdr_deserialize_int16_t+0x36>
 800c7f0:	68a2      	ldr	r2, [r4, #8]
 800c7f2:	6923      	ldr	r3, [r4, #16]
 800c7f4:	7da0      	ldrb	r0, [r4, #22]
 800c7f6:	f884 8015 	strb.w	r8, [r4, #21]
 800c7fa:	1b92      	subs	r2, r2, r6
 800c7fc:	1b9b      	subs	r3, r3, r6
 800c7fe:	60a2      	str	r2, [r4, #8]
 800c800:	6123      	str	r3, [r4, #16]
 800c802:	f080 0001 	eor.w	r0, r0, #1
 800c806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c80a:	8813      	ldrh	r3, [r2, #0]
 800c80c:	802b      	strh	r3, [r5, #0]
 800c80e:	e7aa      	b.n	800c766 <ucdr_deserialize_int16_t+0x36>
 800c810:	4639      	mov	r1, r7
 800c812:	4632      	mov	r2, r6
 800c814:	4628      	mov	r0, r5
 800c816:	f00b ffb0 	bl	801877a <memcpy>
 800c81a:	68a1      	ldr	r1, [r4, #8]
 800c81c:	464a      	mov	r2, r9
 800c81e:	19a8      	adds	r0, r5, r6
 800c820:	f00b ffab 	bl	801877a <memcpy>
 800c824:	e7c3      	b.n	800c7ae <ucdr_deserialize_int16_t+0x7e>
 800c826:	bf00      	nop

0800c828 <ucdr_serialize_int32_t>:
 800c828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c82c:	b082      	sub	sp, #8
 800c82e:	4604      	mov	r4, r0
 800c830:	9101      	str	r1, [sp, #4]
 800c832:	2104      	movs	r1, #4
 800c834:	f000 fc96 	bl	800d164 <ucdr_buffer_alignment>
 800c838:	4601      	mov	r1, r0
 800c83a:	4620      	mov	r0, r4
 800c83c:	7d67      	ldrb	r7, [r4, #21]
 800c83e:	f000 fcd5 	bl	800d1ec <ucdr_advance_buffer>
 800c842:	2104      	movs	r1, #4
 800c844:	4620      	mov	r0, r4
 800c846:	f000 fc2d 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800c84a:	b300      	cbz	r0, 800c88e <ucdr_serialize_int32_t+0x66>
 800c84c:	7d22      	ldrb	r2, [r4, #20]
 800c84e:	68a3      	ldr	r3, [r4, #8]
 800c850:	2a01      	cmp	r2, #1
 800c852:	d05d      	beq.n	800c910 <ucdr_serialize_int32_t+0xe8>
 800c854:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c858:	701a      	strb	r2, [r3, #0]
 800c85a:	68a3      	ldr	r3, [r4, #8]
 800c85c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c860:	705a      	strb	r2, [r3, #1]
 800c862:	68a3      	ldr	r3, [r4, #8]
 800c864:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c868:	709a      	strb	r2, [r3, #2]
 800c86a:	68a3      	ldr	r3, [r4, #8]
 800c86c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c870:	70da      	strb	r2, [r3, #3]
 800c872:	68a2      	ldr	r2, [r4, #8]
 800c874:	6923      	ldr	r3, [r4, #16]
 800c876:	3204      	adds	r2, #4
 800c878:	3304      	adds	r3, #4
 800c87a:	2104      	movs	r1, #4
 800c87c:	60a2      	str	r2, [r4, #8]
 800c87e:	6123      	str	r3, [r4, #16]
 800c880:	7561      	strb	r1, [r4, #21]
 800c882:	7da0      	ldrb	r0, [r4, #22]
 800c884:	f080 0001 	eor.w	r0, r0, #1
 800c888:	b002      	add	sp, #8
 800c88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c88e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c892:	42ab      	cmp	r3, r5
 800c894:	d92e      	bls.n	800c8f4 <ucdr_serialize_int32_t+0xcc>
 800c896:	1b5e      	subs	r6, r3, r5
 800c898:	60a3      	str	r3, [r4, #8]
 800c89a:	6923      	ldr	r3, [r4, #16]
 800c89c:	f1c6 0804 	rsb	r8, r6, #4
 800c8a0:	4433      	add	r3, r6
 800c8a2:	6123      	str	r3, [r4, #16]
 800c8a4:	4641      	mov	r1, r8
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f000 fc08 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c8ac:	b398      	cbz	r0, 800c916 <ucdr_serialize_int32_t+0xee>
 800c8ae:	7d23      	ldrb	r3, [r4, #20]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d046      	beq.n	800c942 <ucdr_serialize_int32_t+0x11a>
 800c8b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c8b8:	702b      	strb	r3, [r5, #0]
 800c8ba:	2e01      	cmp	r6, #1
 800c8bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c8c0:	706b      	strb	r3, [r5, #1]
 800c8c2:	d035      	beq.n	800c930 <ucdr_serialize_int32_t+0x108>
 800c8c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c8c8:	70ab      	strb	r3, [r5, #2]
 800c8ca:	2e02      	cmp	r6, #2
 800c8cc:	d034      	beq.n	800c938 <ucdr_serialize_int32_t+0x110>
 800c8ce:	3503      	adds	r5, #3
 800c8d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c8d4:	702b      	strb	r3, [r5, #0]
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	68a2      	ldr	r2, [r4, #8]
 800c8da:	7da0      	ldrb	r0, [r4, #22]
 800c8dc:	3304      	adds	r3, #4
 800c8de:	4442      	add	r2, r8
 800c8e0:	1b9b      	subs	r3, r3, r6
 800c8e2:	2104      	movs	r1, #4
 800c8e4:	f080 0001 	eor.w	r0, r0, #1
 800c8e8:	60a2      	str	r2, [r4, #8]
 800c8ea:	6123      	str	r3, [r4, #16]
 800c8ec:	7561      	strb	r1, [r4, #21]
 800c8ee:	b002      	add	sp, #8
 800c8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f4:	2104      	movs	r1, #4
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f000 fbe0 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d0c0      	beq.n	800c882 <ucdr_serialize_int32_t+0x5a>
 800c900:	7d23      	ldrb	r3, [r4, #20]
 800c902:	68a2      	ldr	r2, [r4, #8]
 800c904:	2b01      	cmp	r3, #1
 800c906:	d019      	beq.n	800c93c <ucdr_serialize_int32_t+0x114>
 800c908:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c90c:	7013      	strb	r3, [r2, #0]
 800c90e:	e7a4      	b.n	800c85a <ucdr_serialize_int32_t+0x32>
 800c910:	9a01      	ldr	r2, [sp, #4]
 800c912:	601a      	str	r2, [r3, #0]
 800c914:	e7ad      	b.n	800c872 <ucdr_serialize_int32_t+0x4a>
 800c916:	68a2      	ldr	r2, [r4, #8]
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	7da0      	ldrb	r0, [r4, #22]
 800c91c:	7567      	strb	r7, [r4, #21]
 800c91e:	1b92      	subs	r2, r2, r6
 800c920:	1b9b      	subs	r3, r3, r6
 800c922:	f080 0001 	eor.w	r0, r0, #1
 800c926:	60a2      	str	r2, [r4, #8]
 800c928:	6123      	str	r3, [r4, #16]
 800c92a:	b002      	add	sp, #8
 800c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c930:	68a3      	ldr	r3, [r4, #8]
 800c932:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c936:	701a      	strb	r2, [r3, #0]
 800c938:	68a5      	ldr	r5, [r4, #8]
 800c93a:	e7c9      	b.n	800c8d0 <ucdr_serialize_int32_t+0xa8>
 800c93c:	9b01      	ldr	r3, [sp, #4]
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	e797      	b.n	800c872 <ucdr_serialize_int32_t+0x4a>
 800c942:	4628      	mov	r0, r5
 800c944:	ad01      	add	r5, sp, #4
 800c946:	4632      	mov	r2, r6
 800c948:	4629      	mov	r1, r5
 800c94a:	f00b ff16 	bl	801877a <memcpy>
 800c94e:	68a0      	ldr	r0, [r4, #8]
 800c950:	4642      	mov	r2, r8
 800c952:	19a9      	adds	r1, r5, r6
 800c954:	f00b ff11 	bl	801877a <memcpy>
 800c958:	e7bd      	b.n	800c8d6 <ucdr_serialize_int32_t+0xae>
 800c95a:	bf00      	nop

0800c95c <ucdr_deserialize_int32_t>:
 800c95c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c960:	460d      	mov	r5, r1
 800c962:	2104      	movs	r1, #4
 800c964:	4604      	mov	r4, r0
 800c966:	f000 fbfd 	bl	800d164 <ucdr_buffer_alignment>
 800c96a:	4601      	mov	r1, r0
 800c96c:	4620      	mov	r0, r4
 800c96e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c972:	f000 fc3b 	bl	800d1ec <ucdr_advance_buffer>
 800c976:	2104      	movs	r1, #4
 800c978:	4620      	mov	r0, r4
 800c97a:	f000 fb93 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800c97e:	b1d8      	cbz	r0, 800c9b8 <ucdr_deserialize_int32_t+0x5c>
 800c980:	7d22      	ldrb	r2, [r4, #20]
 800c982:	68a3      	ldr	r3, [r4, #8]
 800c984:	2a01      	cmp	r2, #1
 800c986:	d052      	beq.n	800ca2e <ucdr_deserialize_int32_t+0xd2>
 800c988:	78db      	ldrb	r3, [r3, #3]
 800c98a:	702b      	strb	r3, [r5, #0]
 800c98c:	68a3      	ldr	r3, [r4, #8]
 800c98e:	789b      	ldrb	r3, [r3, #2]
 800c990:	706b      	strb	r3, [r5, #1]
 800c992:	68a3      	ldr	r3, [r4, #8]
 800c994:	785b      	ldrb	r3, [r3, #1]
 800c996:	70ab      	strb	r3, [r5, #2]
 800c998:	68a3      	ldr	r3, [r4, #8]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	70eb      	strb	r3, [r5, #3]
 800c99e:	68a2      	ldr	r2, [r4, #8]
 800c9a0:	6923      	ldr	r3, [r4, #16]
 800c9a2:	3204      	adds	r2, #4
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	2104      	movs	r1, #4
 800c9a8:	60a2      	str	r2, [r4, #8]
 800c9aa:	6123      	str	r3, [r4, #16]
 800c9ac:	7561      	strb	r1, [r4, #21]
 800c9ae:	7da0      	ldrb	r0, [r4, #22]
 800c9b0:	f080 0001 	eor.w	r0, r0, #1
 800c9b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9b8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c9bc:	42b7      	cmp	r7, r6
 800c9be:	d92a      	bls.n	800ca16 <ucdr_deserialize_int32_t+0xba>
 800c9c0:	6923      	ldr	r3, [r4, #16]
 800c9c2:	60a7      	str	r7, [r4, #8]
 800c9c4:	1bbf      	subs	r7, r7, r6
 800c9c6:	443b      	add	r3, r7
 800c9c8:	f1c7 0904 	rsb	r9, r7, #4
 800c9cc:	6123      	str	r3, [r4, #16]
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f000 fb73 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800c9d6:	b368      	cbz	r0, 800ca34 <ucdr_deserialize_int32_t+0xd8>
 800c9d8:	7d23      	ldrb	r3, [r4, #20]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d040      	beq.n	800ca60 <ucdr_deserialize_int32_t+0x104>
 800c9de:	78f3      	ldrb	r3, [r6, #3]
 800c9e0:	702b      	strb	r3, [r5, #0]
 800c9e2:	78b3      	ldrb	r3, [r6, #2]
 800c9e4:	706b      	strb	r3, [r5, #1]
 800c9e6:	2f01      	cmp	r7, #1
 800c9e8:	d031      	beq.n	800ca4e <ucdr_deserialize_int32_t+0xf2>
 800c9ea:	7873      	ldrb	r3, [r6, #1]
 800c9ec:	70ab      	strb	r3, [r5, #2]
 800c9ee:	2f02      	cmp	r7, #2
 800c9f0:	f105 0503 	add.w	r5, r5, #3
 800c9f4:	d02f      	beq.n	800ca56 <ucdr_deserialize_int32_t+0xfa>
 800c9f6:	7833      	ldrb	r3, [r6, #0]
 800c9f8:	702b      	strb	r3, [r5, #0]
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	68a2      	ldr	r2, [r4, #8]
 800c9fe:	7da0      	ldrb	r0, [r4, #22]
 800ca00:	2104      	movs	r1, #4
 800ca02:	3304      	adds	r3, #4
 800ca04:	444a      	add	r2, r9
 800ca06:	1bdb      	subs	r3, r3, r7
 800ca08:	7561      	strb	r1, [r4, #21]
 800ca0a:	60a2      	str	r2, [r4, #8]
 800ca0c:	6123      	str	r3, [r4, #16]
 800ca0e:	f080 0001 	eor.w	r0, r0, #1
 800ca12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca16:	2104      	movs	r1, #4
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f000 fb4f 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	d0c5      	beq.n	800c9ae <ucdr_deserialize_int32_t+0x52>
 800ca22:	7d23      	ldrb	r3, [r4, #20]
 800ca24:	68a2      	ldr	r2, [r4, #8]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d017      	beq.n	800ca5a <ucdr_deserialize_int32_t+0xfe>
 800ca2a:	78d3      	ldrb	r3, [r2, #3]
 800ca2c:	e7ad      	b.n	800c98a <ucdr_deserialize_int32_t+0x2e>
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	602b      	str	r3, [r5, #0]
 800ca32:	e7b4      	b.n	800c99e <ucdr_deserialize_int32_t+0x42>
 800ca34:	68a2      	ldr	r2, [r4, #8]
 800ca36:	6923      	ldr	r3, [r4, #16]
 800ca38:	7da0      	ldrb	r0, [r4, #22]
 800ca3a:	f884 8015 	strb.w	r8, [r4, #21]
 800ca3e:	1bd2      	subs	r2, r2, r7
 800ca40:	1bdb      	subs	r3, r3, r7
 800ca42:	60a2      	str	r2, [r4, #8]
 800ca44:	6123      	str	r3, [r4, #16]
 800ca46:	f080 0001 	eor.w	r0, r0, #1
 800ca4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca4e:	68a3      	ldr	r3, [r4, #8]
 800ca50:	785b      	ldrb	r3, [r3, #1]
 800ca52:	70ab      	strb	r3, [r5, #2]
 800ca54:	3503      	adds	r5, #3
 800ca56:	68a6      	ldr	r6, [r4, #8]
 800ca58:	e7cd      	b.n	800c9f6 <ucdr_deserialize_int32_t+0x9a>
 800ca5a:	6813      	ldr	r3, [r2, #0]
 800ca5c:	602b      	str	r3, [r5, #0]
 800ca5e:	e79e      	b.n	800c99e <ucdr_deserialize_int32_t+0x42>
 800ca60:	4631      	mov	r1, r6
 800ca62:	463a      	mov	r2, r7
 800ca64:	4628      	mov	r0, r5
 800ca66:	f00b fe88 	bl	801877a <memcpy>
 800ca6a:	68a1      	ldr	r1, [r4, #8]
 800ca6c:	464a      	mov	r2, r9
 800ca6e:	19e8      	adds	r0, r5, r7
 800ca70:	f00b fe83 	bl	801877a <memcpy>
 800ca74:	e7c1      	b.n	800c9fa <ucdr_deserialize_int32_t+0x9e>
 800ca76:	bf00      	nop

0800ca78 <ucdr_serialize_double>:
 800ca78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7c:	2108      	movs	r1, #8
 800ca7e:	b082      	sub	sp, #8
 800ca80:	4604      	mov	r4, r0
 800ca82:	ed8d 0b00 	vstr	d0, [sp]
 800ca86:	f000 fb6d 	bl	800d164 <ucdr_buffer_alignment>
 800ca8a:	4601      	mov	r1, r0
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	7d67      	ldrb	r7, [r4, #21]
 800ca90:	f000 fbac 	bl	800d1ec <ucdr_advance_buffer>
 800ca94:	2108      	movs	r1, #8
 800ca96:	4620      	mov	r0, r4
 800ca98:	f000 fb04 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d14d      	bne.n	800cb3c <ucdr_serialize_double+0xc4>
 800caa0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800caa4:	42ab      	cmp	r3, r5
 800caa6:	d944      	bls.n	800cb32 <ucdr_serialize_double+0xba>
 800caa8:	1b5e      	subs	r6, r3, r5
 800caaa:	60a3      	str	r3, [r4, #8]
 800caac:	6923      	ldr	r3, [r4, #16]
 800caae:	f1c6 0808 	rsb	r8, r6, #8
 800cab2:	4433      	add	r3, r6
 800cab4:	6123      	str	r3, [r4, #16]
 800cab6:	4641      	mov	r1, r8
 800cab8:	4620      	mov	r0, r4
 800caba:	f000 faff 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d072      	beq.n	800cba8 <ucdr_serialize_double+0x130>
 800cac2:	7d23      	ldrb	r3, [r4, #20]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	f000 8092 	beq.w	800cbee <ucdr_serialize_double+0x176>
 800caca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cace:	702b      	strb	r3, [r5, #0]
 800cad0:	2e01      	cmp	r6, #1
 800cad2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cad6:	706b      	strb	r3, [r5, #1]
 800cad8:	d073      	beq.n	800cbc2 <ucdr_serialize_double+0x14a>
 800cada:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cade:	70ab      	strb	r3, [r5, #2]
 800cae0:	2e02      	cmp	r6, #2
 800cae2:	d072      	beq.n	800cbca <ucdr_serialize_double+0x152>
 800cae4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cae8:	70eb      	strb	r3, [r5, #3]
 800caea:	2e03      	cmp	r6, #3
 800caec:	d071      	beq.n	800cbd2 <ucdr_serialize_double+0x15a>
 800caee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800caf2:	712b      	strb	r3, [r5, #4]
 800caf4:	2e04      	cmp	r6, #4
 800caf6:	d070      	beq.n	800cbda <ucdr_serialize_double+0x162>
 800caf8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800cafc:	716b      	strb	r3, [r5, #5]
 800cafe:	2e05      	cmp	r6, #5
 800cb00:	d06f      	beq.n	800cbe2 <ucdr_serialize_double+0x16a>
 800cb02:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800cb06:	71ab      	strb	r3, [r5, #6]
 800cb08:	2e06      	cmp	r6, #6
 800cb0a:	d06e      	beq.n	800cbea <ucdr_serialize_double+0x172>
 800cb0c:	3507      	adds	r5, #7
 800cb0e:	f89d 3000 	ldrb.w	r3, [sp]
 800cb12:	702b      	strb	r3, [r5, #0]
 800cb14:	6923      	ldr	r3, [r4, #16]
 800cb16:	68a2      	ldr	r2, [r4, #8]
 800cb18:	7da0      	ldrb	r0, [r4, #22]
 800cb1a:	3308      	adds	r3, #8
 800cb1c:	4442      	add	r2, r8
 800cb1e:	1b9b      	subs	r3, r3, r6
 800cb20:	2108      	movs	r1, #8
 800cb22:	f080 0001 	eor.w	r0, r0, #1
 800cb26:	60a2      	str	r2, [r4, #8]
 800cb28:	6123      	str	r3, [r4, #16]
 800cb2a:	7561      	strb	r1, [r4, #21]
 800cb2c:	b002      	add	sp, #8
 800cb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb32:	2108      	movs	r1, #8
 800cb34:	4620      	mov	r0, r4
 800cb36:	f000 fac1 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800cb3a:	b350      	cbz	r0, 800cb92 <ucdr_serialize_double+0x11a>
 800cb3c:	7d22      	ldrb	r2, [r4, #20]
 800cb3e:	68a3      	ldr	r3, [r4, #8]
 800cb40:	2a01      	cmp	r2, #1
 800cb42:	d02c      	beq.n	800cb9e <ucdr_serialize_double+0x126>
 800cb44:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cb48:	701a      	strb	r2, [r3, #0]
 800cb4a:	68a3      	ldr	r3, [r4, #8]
 800cb4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb50:	705a      	strb	r2, [r3, #1]
 800cb52:	68a3      	ldr	r3, [r4, #8]
 800cb54:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cb58:	709a      	strb	r2, [r3, #2]
 800cb5a:	68a3      	ldr	r3, [r4, #8]
 800cb5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cb60:	70da      	strb	r2, [r3, #3]
 800cb62:	68a3      	ldr	r3, [r4, #8]
 800cb64:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cb68:	711a      	strb	r2, [r3, #4]
 800cb6a:	68a3      	ldr	r3, [r4, #8]
 800cb6c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cb70:	715a      	strb	r2, [r3, #5]
 800cb72:	68a3      	ldr	r3, [r4, #8]
 800cb74:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cb78:	719a      	strb	r2, [r3, #6]
 800cb7a:	68a3      	ldr	r3, [r4, #8]
 800cb7c:	f89d 2000 	ldrb.w	r2, [sp]
 800cb80:	71da      	strb	r2, [r3, #7]
 800cb82:	68a2      	ldr	r2, [r4, #8]
 800cb84:	6923      	ldr	r3, [r4, #16]
 800cb86:	3208      	adds	r2, #8
 800cb88:	3308      	adds	r3, #8
 800cb8a:	2108      	movs	r1, #8
 800cb8c:	60a2      	str	r2, [r4, #8]
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	7561      	strb	r1, [r4, #21]
 800cb92:	7da0      	ldrb	r0, [r4, #22]
 800cb94:	f080 0001 	eor.w	r0, r0, #1
 800cb98:	b002      	add	sp, #8
 800cb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cba2:	6019      	str	r1, [r3, #0]
 800cba4:	605a      	str	r2, [r3, #4]
 800cba6:	e7ec      	b.n	800cb82 <ucdr_serialize_double+0x10a>
 800cba8:	68a2      	ldr	r2, [r4, #8]
 800cbaa:	6923      	ldr	r3, [r4, #16]
 800cbac:	7da0      	ldrb	r0, [r4, #22]
 800cbae:	7567      	strb	r7, [r4, #21]
 800cbb0:	1b92      	subs	r2, r2, r6
 800cbb2:	1b9b      	subs	r3, r3, r6
 800cbb4:	f080 0001 	eor.w	r0, r0, #1
 800cbb8:	60a2      	str	r2, [r4, #8]
 800cbba:	6123      	str	r3, [r4, #16]
 800cbbc:	b002      	add	sp, #8
 800cbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc2:	68a3      	ldr	r3, [r4, #8]
 800cbc4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cbc8:	701a      	strb	r2, [r3, #0]
 800cbca:	68a3      	ldr	r3, [r4, #8]
 800cbcc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cbd0:	701a      	strb	r2, [r3, #0]
 800cbd2:	68a3      	ldr	r3, [r4, #8]
 800cbd4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cbd8:	701a      	strb	r2, [r3, #0]
 800cbda:	68a3      	ldr	r3, [r4, #8]
 800cbdc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cbe0:	701a      	strb	r2, [r3, #0]
 800cbe2:	68a3      	ldr	r3, [r4, #8]
 800cbe4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cbe8:	701a      	strb	r2, [r3, #0]
 800cbea:	68a5      	ldr	r5, [r4, #8]
 800cbec:	e78f      	b.n	800cb0e <ucdr_serialize_double+0x96>
 800cbee:	4628      	mov	r0, r5
 800cbf0:	466d      	mov	r5, sp
 800cbf2:	4632      	mov	r2, r6
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	f00b fdc0 	bl	801877a <memcpy>
 800cbfa:	68a0      	ldr	r0, [r4, #8]
 800cbfc:	4642      	mov	r2, r8
 800cbfe:	19a9      	adds	r1, r5, r6
 800cc00:	f00b fdbb 	bl	801877a <memcpy>
 800cc04:	e786      	b.n	800cb14 <ucdr_serialize_double+0x9c>
 800cc06:	bf00      	nop

0800cc08 <ucdr_serialize_endian_double>:
 800cc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc0c:	460e      	mov	r6, r1
 800cc0e:	b083      	sub	sp, #12
 800cc10:	2108      	movs	r1, #8
 800cc12:	4604      	mov	r4, r0
 800cc14:	ed8d 0b00 	vstr	d0, [sp]
 800cc18:	f000 faa4 	bl	800d164 <ucdr_buffer_alignment>
 800cc1c:	4601      	mov	r1, r0
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cc24:	f000 fae2 	bl	800d1ec <ucdr_advance_buffer>
 800cc28:	2108      	movs	r1, #8
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 fa3a 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d14c      	bne.n	800ccce <ucdr_serialize_endian_double+0xc6>
 800cc34:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800cc38:	42bd      	cmp	r5, r7
 800cc3a:	d943      	bls.n	800ccc4 <ucdr_serialize_endian_double+0xbc>
 800cc3c:	6923      	ldr	r3, [r4, #16]
 800cc3e:	60a5      	str	r5, [r4, #8]
 800cc40:	1bed      	subs	r5, r5, r7
 800cc42:	442b      	add	r3, r5
 800cc44:	f1c5 0908 	rsb	r9, r5, #8
 800cc48:	6123      	str	r3, [r4, #16]
 800cc4a:	4649      	mov	r1, r9
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f000 fa35 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	d070      	beq.n	800cd38 <ucdr_serialize_endian_double+0x130>
 800cc56:	2e01      	cmp	r6, #1
 800cc58:	f000 8092 	beq.w	800cd80 <ucdr_serialize_endian_double+0x178>
 800cc5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc60:	703b      	strb	r3, [r7, #0]
 800cc62:	2d01      	cmp	r5, #1
 800cc64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cc68:	707b      	strb	r3, [r7, #1]
 800cc6a:	d073      	beq.n	800cd54 <ucdr_serialize_endian_double+0x14c>
 800cc6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cc70:	70bb      	strb	r3, [r7, #2]
 800cc72:	2d02      	cmp	r5, #2
 800cc74:	d072      	beq.n	800cd5c <ucdr_serialize_endian_double+0x154>
 800cc76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800cc7a:	70fb      	strb	r3, [r7, #3]
 800cc7c:	2d03      	cmp	r5, #3
 800cc7e:	d071      	beq.n	800cd64 <ucdr_serialize_endian_double+0x15c>
 800cc80:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800cc84:	713b      	strb	r3, [r7, #4]
 800cc86:	2d04      	cmp	r5, #4
 800cc88:	d070      	beq.n	800cd6c <ucdr_serialize_endian_double+0x164>
 800cc8a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800cc8e:	717b      	strb	r3, [r7, #5]
 800cc90:	2d05      	cmp	r5, #5
 800cc92:	d06f      	beq.n	800cd74 <ucdr_serialize_endian_double+0x16c>
 800cc94:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800cc98:	71bb      	strb	r3, [r7, #6]
 800cc9a:	2d06      	cmp	r5, #6
 800cc9c:	d06e      	beq.n	800cd7c <ucdr_serialize_endian_double+0x174>
 800cc9e:	3707      	adds	r7, #7
 800cca0:	f89d 3000 	ldrb.w	r3, [sp]
 800cca4:	703b      	strb	r3, [r7, #0]
 800cca6:	6923      	ldr	r3, [r4, #16]
 800cca8:	68a2      	ldr	r2, [r4, #8]
 800ccaa:	7da0      	ldrb	r0, [r4, #22]
 800ccac:	3308      	adds	r3, #8
 800ccae:	444a      	add	r2, r9
 800ccb0:	1b5b      	subs	r3, r3, r5
 800ccb2:	2108      	movs	r1, #8
 800ccb4:	f080 0001 	eor.w	r0, r0, #1
 800ccb8:	60a2      	str	r2, [r4, #8]
 800ccba:	6123      	str	r3, [r4, #16]
 800ccbc:	7561      	strb	r1, [r4, #21]
 800ccbe:	b003      	add	sp, #12
 800ccc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccc4:	2108      	movs	r1, #8
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	f000 f9f8 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800cccc:	b348      	cbz	r0, 800cd22 <ucdr_serialize_endian_double+0x11a>
 800ccce:	2e01      	cmp	r6, #1
 800ccd0:	68a3      	ldr	r3, [r4, #8]
 800ccd2:	d02c      	beq.n	800cd2e <ucdr_serialize_endian_double+0x126>
 800ccd4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ccd8:	701a      	strb	r2, [r3, #0]
 800ccda:	68a3      	ldr	r3, [r4, #8]
 800ccdc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cce0:	705a      	strb	r2, [r3, #1]
 800cce2:	68a3      	ldr	r3, [r4, #8]
 800cce4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cce8:	709a      	strb	r2, [r3, #2]
 800ccea:	68a3      	ldr	r3, [r4, #8]
 800ccec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ccf0:	70da      	strb	r2, [r3, #3]
 800ccf2:	68a3      	ldr	r3, [r4, #8]
 800ccf4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ccf8:	711a      	strb	r2, [r3, #4]
 800ccfa:	68a3      	ldr	r3, [r4, #8]
 800ccfc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cd00:	715a      	strb	r2, [r3, #5]
 800cd02:	68a3      	ldr	r3, [r4, #8]
 800cd04:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cd08:	719a      	strb	r2, [r3, #6]
 800cd0a:	68a3      	ldr	r3, [r4, #8]
 800cd0c:	f89d 2000 	ldrb.w	r2, [sp]
 800cd10:	71da      	strb	r2, [r3, #7]
 800cd12:	68a2      	ldr	r2, [r4, #8]
 800cd14:	6923      	ldr	r3, [r4, #16]
 800cd16:	3208      	adds	r2, #8
 800cd18:	3308      	adds	r3, #8
 800cd1a:	2108      	movs	r1, #8
 800cd1c:	60a2      	str	r2, [r4, #8]
 800cd1e:	6123      	str	r3, [r4, #16]
 800cd20:	7561      	strb	r1, [r4, #21]
 800cd22:	7da0      	ldrb	r0, [r4, #22]
 800cd24:	f080 0001 	eor.w	r0, r0, #1
 800cd28:	b003      	add	sp, #12
 800cd2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cd32:	6019      	str	r1, [r3, #0]
 800cd34:	605a      	str	r2, [r3, #4]
 800cd36:	e7ec      	b.n	800cd12 <ucdr_serialize_endian_double+0x10a>
 800cd38:	68a2      	ldr	r2, [r4, #8]
 800cd3a:	6923      	ldr	r3, [r4, #16]
 800cd3c:	7da0      	ldrb	r0, [r4, #22]
 800cd3e:	f884 8015 	strb.w	r8, [r4, #21]
 800cd42:	1b52      	subs	r2, r2, r5
 800cd44:	1b5b      	subs	r3, r3, r5
 800cd46:	f080 0001 	eor.w	r0, r0, #1
 800cd4a:	60a2      	str	r2, [r4, #8]
 800cd4c:	6123      	str	r3, [r4, #16]
 800cd4e:	b003      	add	sp, #12
 800cd50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd54:	68a3      	ldr	r3, [r4, #8]
 800cd56:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cd5a:	701a      	strb	r2, [r3, #0]
 800cd5c:	68a3      	ldr	r3, [r4, #8]
 800cd5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd62:	701a      	strb	r2, [r3, #0]
 800cd64:	68a3      	ldr	r3, [r4, #8]
 800cd66:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800cd6a:	701a      	strb	r2, [r3, #0]
 800cd6c:	68a3      	ldr	r3, [r4, #8]
 800cd6e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cd72:	701a      	strb	r2, [r3, #0]
 800cd74:	68a3      	ldr	r3, [r4, #8]
 800cd76:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800cd7a:	701a      	strb	r2, [r3, #0]
 800cd7c:	68a7      	ldr	r7, [r4, #8]
 800cd7e:	e78f      	b.n	800cca0 <ucdr_serialize_endian_double+0x98>
 800cd80:	466e      	mov	r6, sp
 800cd82:	462a      	mov	r2, r5
 800cd84:	4631      	mov	r1, r6
 800cd86:	4638      	mov	r0, r7
 800cd88:	f00b fcf7 	bl	801877a <memcpy>
 800cd8c:	68a0      	ldr	r0, [r4, #8]
 800cd8e:	464a      	mov	r2, r9
 800cd90:	1971      	adds	r1, r6, r5
 800cd92:	f00b fcf2 	bl	801877a <memcpy>
 800cd96:	e786      	b.n	800cca6 <ucdr_serialize_endian_double+0x9e>

0800cd98 <ucdr_deserialize_double>:
 800cd98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd9c:	460d      	mov	r5, r1
 800cd9e:	2108      	movs	r1, #8
 800cda0:	4604      	mov	r4, r0
 800cda2:	f000 f9df 	bl	800d164 <ucdr_buffer_alignment>
 800cda6:	4601      	mov	r1, r0
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cdae:	f000 fa1d 	bl	800d1ec <ucdr_advance_buffer>
 800cdb2:	2108      	movs	r1, #8
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f000 f975 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800cdba:	2800      	cmp	r0, #0
 800cdbc:	d147      	bne.n	800ce4e <ucdr_deserialize_double+0xb6>
 800cdbe:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cdc2:	42be      	cmp	r6, r7
 800cdc4:	d93e      	bls.n	800ce44 <ucdr_deserialize_double+0xac>
 800cdc6:	6923      	ldr	r3, [r4, #16]
 800cdc8:	60a6      	str	r6, [r4, #8]
 800cdca:	1bf6      	subs	r6, r6, r7
 800cdcc:	4433      	add	r3, r6
 800cdce:	f1c6 0908 	rsb	r9, r6, #8
 800cdd2:	6123      	str	r3, [r4, #16]
 800cdd4:	4649      	mov	r1, r9
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f000 f970 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800cddc:	2800      	cmp	r0, #0
 800cdde:	d063      	beq.n	800cea8 <ucdr_deserialize_double+0x110>
 800cde0:	7d23      	ldrb	r3, [r4, #20]
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	f000 8083 	beq.w	800ceee <ucdr_deserialize_double+0x156>
 800cde8:	79fb      	ldrb	r3, [r7, #7]
 800cdea:	702b      	strb	r3, [r5, #0]
 800cdec:	79bb      	ldrb	r3, [r7, #6]
 800cdee:	706b      	strb	r3, [r5, #1]
 800cdf0:	2e01      	cmp	r6, #1
 800cdf2:	d066      	beq.n	800cec2 <ucdr_deserialize_double+0x12a>
 800cdf4:	797b      	ldrb	r3, [r7, #5]
 800cdf6:	70ab      	strb	r3, [r5, #2]
 800cdf8:	2e02      	cmp	r6, #2
 800cdfa:	f000 8089 	beq.w	800cf10 <ucdr_deserialize_double+0x178>
 800cdfe:	793b      	ldrb	r3, [r7, #4]
 800ce00:	70eb      	strb	r3, [r5, #3]
 800ce02:	2e03      	cmp	r6, #3
 800ce04:	f000 8082 	beq.w	800cf0c <ucdr_deserialize_double+0x174>
 800ce08:	78fb      	ldrb	r3, [r7, #3]
 800ce0a:	712b      	strb	r3, [r5, #4]
 800ce0c:	2e04      	cmp	r6, #4
 800ce0e:	d07b      	beq.n	800cf08 <ucdr_deserialize_double+0x170>
 800ce10:	78bb      	ldrb	r3, [r7, #2]
 800ce12:	716b      	strb	r3, [r5, #5]
 800ce14:	2e05      	cmp	r6, #5
 800ce16:	d075      	beq.n	800cf04 <ucdr_deserialize_double+0x16c>
 800ce18:	787b      	ldrb	r3, [r7, #1]
 800ce1a:	71ab      	strb	r3, [r5, #6]
 800ce1c:	2e06      	cmp	r6, #6
 800ce1e:	f105 0507 	add.w	r5, r5, #7
 800ce22:	d062      	beq.n	800ceea <ucdr_deserialize_double+0x152>
 800ce24:	783b      	ldrb	r3, [r7, #0]
 800ce26:	702b      	strb	r3, [r5, #0]
 800ce28:	6923      	ldr	r3, [r4, #16]
 800ce2a:	68a2      	ldr	r2, [r4, #8]
 800ce2c:	7da0      	ldrb	r0, [r4, #22]
 800ce2e:	2108      	movs	r1, #8
 800ce30:	3308      	adds	r3, #8
 800ce32:	444a      	add	r2, r9
 800ce34:	1b9b      	subs	r3, r3, r6
 800ce36:	7561      	strb	r1, [r4, #21]
 800ce38:	60a2      	str	r2, [r4, #8]
 800ce3a:	6123      	str	r3, [r4, #16]
 800ce3c:	f080 0001 	eor.w	r0, r0, #1
 800ce40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce44:	2108      	movs	r1, #8
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 f938 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800ce4c:	b310      	cbz	r0, 800ce94 <ucdr_deserialize_double+0xfc>
 800ce4e:	7d22      	ldrb	r2, [r4, #20]
 800ce50:	68a3      	ldr	r3, [r4, #8]
 800ce52:	2a01      	cmp	r2, #1
 800ce54:	d023      	beq.n	800ce9e <ucdr_deserialize_double+0x106>
 800ce56:	79db      	ldrb	r3, [r3, #7]
 800ce58:	702b      	strb	r3, [r5, #0]
 800ce5a:	68a3      	ldr	r3, [r4, #8]
 800ce5c:	799b      	ldrb	r3, [r3, #6]
 800ce5e:	706b      	strb	r3, [r5, #1]
 800ce60:	68a3      	ldr	r3, [r4, #8]
 800ce62:	795b      	ldrb	r3, [r3, #5]
 800ce64:	70ab      	strb	r3, [r5, #2]
 800ce66:	68a3      	ldr	r3, [r4, #8]
 800ce68:	791b      	ldrb	r3, [r3, #4]
 800ce6a:	70eb      	strb	r3, [r5, #3]
 800ce6c:	68a3      	ldr	r3, [r4, #8]
 800ce6e:	78db      	ldrb	r3, [r3, #3]
 800ce70:	712b      	strb	r3, [r5, #4]
 800ce72:	68a3      	ldr	r3, [r4, #8]
 800ce74:	789b      	ldrb	r3, [r3, #2]
 800ce76:	716b      	strb	r3, [r5, #5]
 800ce78:	68a3      	ldr	r3, [r4, #8]
 800ce7a:	785b      	ldrb	r3, [r3, #1]
 800ce7c:	71ab      	strb	r3, [r5, #6]
 800ce7e:	68a3      	ldr	r3, [r4, #8]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	71eb      	strb	r3, [r5, #7]
 800ce84:	68a2      	ldr	r2, [r4, #8]
 800ce86:	6923      	ldr	r3, [r4, #16]
 800ce88:	3208      	adds	r2, #8
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	2108      	movs	r1, #8
 800ce8e:	60a2      	str	r2, [r4, #8]
 800ce90:	6123      	str	r3, [r4, #16]
 800ce92:	7561      	strb	r1, [r4, #21]
 800ce94:	7da0      	ldrb	r0, [r4, #22]
 800ce96:	f080 0001 	eor.w	r0, r0, #1
 800ce9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	606b      	str	r3, [r5, #4]
 800cea4:	602a      	str	r2, [r5, #0]
 800cea6:	e7ed      	b.n	800ce84 <ucdr_deserialize_double+0xec>
 800cea8:	68a2      	ldr	r2, [r4, #8]
 800ceaa:	6923      	ldr	r3, [r4, #16]
 800ceac:	7da0      	ldrb	r0, [r4, #22]
 800ceae:	f884 8015 	strb.w	r8, [r4, #21]
 800ceb2:	1b92      	subs	r2, r2, r6
 800ceb4:	1b9b      	subs	r3, r3, r6
 800ceb6:	60a2      	str	r2, [r4, #8]
 800ceb8:	6123      	str	r3, [r4, #16]
 800ceba:	f080 0001 	eor.w	r0, r0, #1
 800cebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cec2:	68a3      	ldr	r3, [r4, #8]
 800cec4:	795b      	ldrb	r3, [r3, #5]
 800cec6:	70ab      	strb	r3, [r5, #2]
 800cec8:	3503      	adds	r5, #3
 800ceca:	68a3      	ldr	r3, [r4, #8]
 800cecc:	791b      	ldrb	r3, [r3, #4]
 800cece:	f805 3b01 	strb.w	r3, [r5], #1
 800ced2:	68a3      	ldr	r3, [r4, #8]
 800ced4:	78db      	ldrb	r3, [r3, #3]
 800ced6:	f805 3b01 	strb.w	r3, [r5], #1
 800ceda:	68a3      	ldr	r3, [r4, #8]
 800cedc:	789b      	ldrb	r3, [r3, #2]
 800cede:	f805 3b01 	strb.w	r3, [r5], #1
 800cee2:	68a3      	ldr	r3, [r4, #8]
 800cee4:	785b      	ldrb	r3, [r3, #1]
 800cee6:	f805 3b01 	strb.w	r3, [r5], #1
 800ceea:	68a7      	ldr	r7, [r4, #8]
 800ceec:	e79a      	b.n	800ce24 <ucdr_deserialize_double+0x8c>
 800ceee:	4639      	mov	r1, r7
 800cef0:	4632      	mov	r2, r6
 800cef2:	4628      	mov	r0, r5
 800cef4:	f00b fc41 	bl	801877a <memcpy>
 800cef8:	68a1      	ldr	r1, [r4, #8]
 800cefa:	464a      	mov	r2, r9
 800cefc:	19a8      	adds	r0, r5, r6
 800cefe:	f00b fc3c 	bl	801877a <memcpy>
 800cf02:	e791      	b.n	800ce28 <ucdr_deserialize_double+0x90>
 800cf04:	3506      	adds	r5, #6
 800cf06:	e7ec      	b.n	800cee2 <ucdr_deserialize_double+0x14a>
 800cf08:	3505      	adds	r5, #5
 800cf0a:	e7e6      	b.n	800ceda <ucdr_deserialize_double+0x142>
 800cf0c:	3504      	adds	r5, #4
 800cf0e:	e7e0      	b.n	800ced2 <ucdr_deserialize_double+0x13a>
 800cf10:	3503      	adds	r5, #3
 800cf12:	e7da      	b.n	800ceca <ucdr_deserialize_double+0x132>

0800cf14 <ucdr_deserialize_endian_double>:
 800cf14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf18:	460f      	mov	r7, r1
 800cf1a:	2108      	movs	r1, #8
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	4615      	mov	r5, r2
 800cf20:	f000 f920 	bl	800d164 <ucdr_buffer_alignment>
 800cf24:	4601      	mov	r1, r0
 800cf26:	4620      	mov	r0, r4
 800cf28:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cf2c:	f000 f95e 	bl	800d1ec <ucdr_advance_buffer>
 800cf30:	2108      	movs	r1, #8
 800cf32:	4620      	mov	r0, r4
 800cf34:	f000 f8b6 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800cf38:	2800      	cmp	r0, #0
 800cf3a:	d14f      	bne.n	800cfdc <ucdr_deserialize_endian_double+0xc8>
 800cf3c:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800cf40:	4546      	cmp	r6, r8
 800cf42:	d946      	bls.n	800cfd2 <ucdr_deserialize_endian_double+0xbe>
 800cf44:	6923      	ldr	r3, [r4, #16]
 800cf46:	60a6      	str	r6, [r4, #8]
 800cf48:	eba6 0608 	sub.w	r6, r6, r8
 800cf4c:	4433      	add	r3, r6
 800cf4e:	f1c6 0a08 	rsb	sl, r6, #8
 800cf52:	6123      	str	r3, [r4, #16]
 800cf54:	4651      	mov	r1, sl
 800cf56:	4620      	mov	r0, r4
 800cf58:	f000 f8b0 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d069      	beq.n	800d034 <ucdr_deserialize_endian_double+0x120>
 800cf60:	2f01      	cmp	r7, #1
 800cf62:	f000 808b 	beq.w	800d07c <ucdr_deserialize_endian_double+0x168>
 800cf66:	f898 3007 	ldrb.w	r3, [r8, #7]
 800cf6a:	702b      	strb	r3, [r5, #0]
 800cf6c:	f898 3006 	ldrb.w	r3, [r8, #6]
 800cf70:	706b      	strb	r3, [r5, #1]
 800cf72:	2e01      	cmp	r6, #1
 800cf74:	d06b      	beq.n	800d04e <ucdr_deserialize_endian_double+0x13a>
 800cf76:	f898 3005 	ldrb.w	r3, [r8, #5]
 800cf7a:	70ab      	strb	r3, [r5, #2]
 800cf7c:	2e02      	cmp	r6, #2
 800cf7e:	f000 808e 	beq.w	800d09e <ucdr_deserialize_endian_double+0x18a>
 800cf82:	f898 3004 	ldrb.w	r3, [r8, #4]
 800cf86:	70eb      	strb	r3, [r5, #3]
 800cf88:	2e03      	cmp	r6, #3
 800cf8a:	f000 8086 	beq.w	800d09a <ucdr_deserialize_endian_double+0x186>
 800cf8e:	f898 3003 	ldrb.w	r3, [r8, #3]
 800cf92:	712b      	strb	r3, [r5, #4]
 800cf94:	2e04      	cmp	r6, #4
 800cf96:	d07e      	beq.n	800d096 <ucdr_deserialize_endian_double+0x182>
 800cf98:	f898 3002 	ldrb.w	r3, [r8, #2]
 800cf9c:	716b      	strb	r3, [r5, #5]
 800cf9e:	2e05      	cmp	r6, #5
 800cfa0:	d077      	beq.n	800d092 <ucdr_deserialize_endian_double+0x17e>
 800cfa2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cfa6:	71ab      	strb	r3, [r5, #6]
 800cfa8:	2e06      	cmp	r6, #6
 800cfaa:	f105 0507 	add.w	r5, r5, #7
 800cfae:	d062      	beq.n	800d076 <ucdr_deserialize_endian_double+0x162>
 800cfb0:	f898 3000 	ldrb.w	r3, [r8]
 800cfb4:	702b      	strb	r3, [r5, #0]
 800cfb6:	6923      	ldr	r3, [r4, #16]
 800cfb8:	68a2      	ldr	r2, [r4, #8]
 800cfba:	7da0      	ldrb	r0, [r4, #22]
 800cfbc:	2108      	movs	r1, #8
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	4452      	add	r2, sl
 800cfc2:	1b9b      	subs	r3, r3, r6
 800cfc4:	7561      	strb	r1, [r4, #21]
 800cfc6:	60a2      	str	r2, [r4, #8]
 800cfc8:	6123      	str	r3, [r4, #16]
 800cfca:	f080 0001 	eor.w	r0, r0, #1
 800cfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd2:	2108      	movs	r1, #8
 800cfd4:	4620      	mov	r0, r4
 800cfd6:	f000 f871 	bl	800d0bc <ucdr_check_final_buffer_behavior>
 800cfda:	b308      	cbz	r0, 800d020 <ucdr_deserialize_endian_double+0x10c>
 800cfdc:	2f01      	cmp	r7, #1
 800cfde:	68a3      	ldr	r3, [r4, #8]
 800cfe0:	d023      	beq.n	800d02a <ucdr_deserialize_endian_double+0x116>
 800cfe2:	79db      	ldrb	r3, [r3, #7]
 800cfe4:	702b      	strb	r3, [r5, #0]
 800cfe6:	68a3      	ldr	r3, [r4, #8]
 800cfe8:	799b      	ldrb	r3, [r3, #6]
 800cfea:	706b      	strb	r3, [r5, #1]
 800cfec:	68a3      	ldr	r3, [r4, #8]
 800cfee:	795b      	ldrb	r3, [r3, #5]
 800cff0:	70ab      	strb	r3, [r5, #2]
 800cff2:	68a3      	ldr	r3, [r4, #8]
 800cff4:	791b      	ldrb	r3, [r3, #4]
 800cff6:	70eb      	strb	r3, [r5, #3]
 800cff8:	68a3      	ldr	r3, [r4, #8]
 800cffa:	78db      	ldrb	r3, [r3, #3]
 800cffc:	712b      	strb	r3, [r5, #4]
 800cffe:	68a3      	ldr	r3, [r4, #8]
 800d000:	789b      	ldrb	r3, [r3, #2]
 800d002:	716b      	strb	r3, [r5, #5]
 800d004:	68a3      	ldr	r3, [r4, #8]
 800d006:	785b      	ldrb	r3, [r3, #1]
 800d008:	71ab      	strb	r3, [r5, #6]
 800d00a:	68a3      	ldr	r3, [r4, #8]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	71eb      	strb	r3, [r5, #7]
 800d010:	68a2      	ldr	r2, [r4, #8]
 800d012:	6923      	ldr	r3, [r4, #16]
 800d014:	3208      	adds	r2, #8
 800d016:	3308      	adds	r3, #8
 800d018:	2108      	movs	r1, #8
 800d01a:	60a2      	str	r2, [r4, #8]
 800d01c:	6123      	str	r3, [r4, #16]
 800d01e:	7561      	strb	r1, [r4, #21]
 800d020:	7da0      	ldrb	r0, [r4, #22]
 800d022:	f080 0001 	eor.w	r0, r0, #1
 800d026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	606b      	str	r3, [r5, #4]
 800d030:	602a      	str	r2, [r5, #0]
 800d032:	e7ed      	b.n	800d010 <ucdr_deserialize_endian_double+0xfc>
 800d034:	68a2      	ldr	r2, [r4, #8]
 800d036:	6923      	ldr	r3, [r4, #16]
 800d038:	7da0      	ldrb	r0, [r4, #22]
 800d03a:	f884 9015 	strb.w	r9, [r4, #21]
 800d03e:	1b92      	subs	r2, r2, r6
 800d040:	1b9b      	subs	r3, r3, r6
 800d042:	60a2      	str	r2, [r4, #8]
 800d044:	6123      	str	r3, [r4, #16]
 800d046:	f080 0001 	eor.w	r0, r0, #1
 800d04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d04e:	68a3      	ldr	r3, [r4, #8]
 800d050:	795b      	ldrb	r3, [r3, #5]
 800d052:	70ab      	strb	r3, [r5, #2]
 800d054:	3503      	adds	r5, #3
 800d056:	68a3      	ldr	r3, [r4, #8]
 800d058:	791b      	ldrb	r3, [r3, #4]
 800d05a:	f805 3b01 	strb.w	r3, [r5], #1
 800d05e:	68a3      	ldr	r3, [r4, #8]
 800d060:	78db      	ldrb	r3, [r3, #3]
 800d062:	f805 3b01 	strb.w	r3, [r5], #1
 800d066:	68a3      	ldr	r3, [r4, #8]
 800d068:	789b      	ldrb	r3, [r3, #2]
 800d06a:	f805 3b01 	strb.w	r3, [r5], #1
 800d06e:	68a3      	ldr	r3, [r4, #8]
 800d070:	785b      	ldrb	r3, [r3, #1]
 800d072:	f805 3b01 	strb.w	r3, [r5], #1
 800d076:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800d07a:	e799      	b.n	800cfb0 <ucdr_deserialize_endian_double+0x9c>
 800d07c:	4641      	mov	r1, r8
 800d07e:	4632      	mov	r2, r6
 800d080:	4628      	mov	r0, r5
 800d082:	f00b fb7a 	bl	801877a <memcpy>
 800d086:	68a1      	ldr	r1, [r4, #8]
 800d088:	4652      	mov	r2, sl
 800d08a:	19a8      	adds	r0, r5, r6
 800d08c:	f00b fb75 	bl	801877a <memcpy>
 800d090:	e791      	b.n	800cfb6 <ucdr_deserialize_endian_double+0xa2>
 800d092:	3506      	adds	r5, #6
 800d094:	e7eb      	b.n	800d06e <ucdr_deserialize_endian_double+0x15a>
 800d096:	3505      	adds	r5, #5
 800d098:	e7e5      	b.n	800d066 <ucdr_deserialize_endian_double+0x152>
 800d09a:	3504      	adds	r5, #4
 800d09c:	e7df      	b.n	800d05e <ucdr_deserialize_endian_double+0x14a>
 800d09e:	3503      	adds	r5, #3
 800d0a0:	e7d9      	b.n	800d056 <ucdr_deserialize_endian_double+0x142>
 800d0a2:	bf00      	nop

0800d0a4 <ucdr_check_buffer_available_for>:
 800d0a4:	7d83      	ldrb	r3, [r0, #22]
 800d0a6:	b93b      	cbnz	r3, 800d0b8 <ucdr_check_buffer_available_for+0x14>
 800d0a8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800d0ac:	440b      	add	r3, r1
 800d0ae:	4298      	cmp	r0, r3
 800d0b0:	bf34      	ite	cc
 800d0b2:	2000      	movcc	r0, #0
 800d0b4:	2001      	movcs	r0, #1
 800d0b6:	4770      	bx	lr
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	4770      	bx	lr

0800d0bc <ucdr_check_final_buffer_behavior>:
 800d0bc:	7d83      	ldrb	r3, [r0, #22]
 800d0be:	b943      	cbnz	r3, 800d0d2 <ucdr_check_final_buffer_behavior+0x16>
 800d0c0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800d0c4:	4291      	cmp	r1, r2
 800d0c6:	b510      	push	{r4, lr}
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	d205      	bcs.n	800d0d8 <ucdr_check_final_buffer_behavior+0x1c>
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	bd10      	pop	{r4, pc}
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	4770      	bx	lr
 800d0d8:	6982      	ldr	r2, [r0, #24]
 800d0da:	b13a      	cbz	r2, 800d0ec <ucdr_check_final_buffer_behavior+0x30>
 800d0dc:	69c1      	ldr	r1, [r0, #28]
 800d0de:	4790      	blx	r2
 800d0e0:	f080 0301 	eor.w	r3, r0, #1
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	75a0      	strb	r0, [r4, #22]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	bd10      	pop	{r4, pc}
 800d0ec:	2001      	movs	r0, #1
 800d0ee:	75a0      	strb	r0, [r4, #22]
 800d0f0:	e7fa      	b.n	800d0e8 <ucdr_check_final_buffer_behavior+0x2c>
 800d0f2:	bf00      	nop

0800d0f4 <ucdr_set_on_full_buffer_callback>:
 800d0f4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop

0800d0fc <ucdr_init_buffer_origin_offset_endian>:
 800d0fc:	b410      	push	{r4}
 800d0fe:	9c01      	ldr	r4, [sp, #4]
 800d100:	6001      	str	r1, [r0, #0]
 800d102:	440a      	add	r2, r1
 800d104:	6042      	str	r2, [r0, #4]
 800d106:	190a      	adds	r2, r1, r4
 800d108:	441c      	add	r4, r3
 800d10a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800d10e:	6082      	str	r2, [r0, #8]
 800d110:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d114:	7503      	strb	r3, [r0, #20]
 800d116:	2200      	movs	r2, #0
 800d118:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800d11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d120:	7542      	strb	r2, [r0, #21]
 800d122:	7582      	strb	r2, [r0, #22]
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop

0800d128 <ucdr_init_buffer_origin_offset>:
 800d128:	b510      	push	{r4, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	9c04      	ldr	r4, [sp, #16]
 800d12e:	9400      	str	r4, [sp, #0]
 800d130:	2401      	movs	r4, #1
 800d132:	9401      	str	r4, [sp, #4]
 800d134:	f7ff ffe2 	bl	800d0fc <ucdr_init_buffer_origin_offset_endian>
 800d138:	b002      	add	sp, #8
 800d13a:	bd10      	pop	{r4, pc}

0800d13c <ucdr_init_buffer_origin>:
 800d13c:	b510      	push	{r4, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	2400      	movs	r4, #0
 800d142:	9400      	str	r4, [sp, #0]
 800d144:	f7ff fff0 	bl	800d128 <ucdr_init_buffer_origin_offset>
 800d148:	b002      	add	sp, #8
 800d14a:	bd10      	pop	{r4, pc}

0800d14c <ucdr_init_buffer>:
 800d14c:	2300      	movs	r3, #0
 800d14e:	f7ff bff5 	b.w	800d13c <ucdr_init_buffer_origin>
 800d152:	bf00      	nop

0800d154 <ucdr_alignment>:
 800d154:	fbb0 f3f1 	udiv	r3, r0, r1
 800d158:	fb03 0011 	mls	r0, r3, r1, r0
 800d15c:	1a08      	subs	r0, r1, r0
 800d15e:	3901      	subs	r1, #1
 800d160:	4008      	ands	r0, r1
 800d162:	4770      	bx	lr

0800d164 <ucdr_buffer_alignment>:
 800d164:	7d43      	ldrb	r3, [r0, #21]
 800d166:	428b      	cmp	r3, r1
 800d168:	d208      	bcs.n	800d17c <ucdr_buffer_alignment+0x18>
 800d16a:	6900      	ldr	r0, [r0, #16]
 800d16c:	fbb0 f3f1 	udiv	r3, r0, r1
 800d170:	fb01 0013 	mls	r0, r1, r3, r0
 800d174:	1a08      	subs	r0, r1, r0
 800d176:	3901      	subs	r1, #1
 800d178:	4008      	ands	r0, r1
 800d17a:	4770      	bx	lr
 800d17c:	2000      	movs	r0, #0
 800d17e:	4770      	bx	lr

0800d180 <ucdr_align_to>:
 800d180:	b538      	push	{r3, r4, r5, lr}
 800d182:	4604      	mov	r4, r0
 800d184:	460d      	mov	r5, r1
 800d186:	f7ff ffed 	bl	800d164 <ucdr_buffer_alignment>
 800d18a:	68a3      	ldr	r3, [r4, #8]
 800d18c:	6861      	ldr	r1, [r4, #4]
 800d18e:	6922      	ldr	r2, [r4, #16]
 800d190:	7565      	strb	r5, [r4, #21]
 800d192:	4403      	add	r3, r0
 800d194:	428b      	cmp	r3, r1
 800d196:	bf28      	it	cs
 800d198:	460b      	movcs	r3, r1
 800d19a:	4402      	add	r2, r0
 800d19c:	60a3      	str	r3, [r4, #8]
 800d19e:	6122      	str	r2, [r4, #16]
 800d1a0:	bd38      	pop	{r3, r4, r5, pc}
 800d1a2:	bf00      	nop

0800d1a4 <ucdr_buffer_length>:
 800d1a4:	6882      	ldr	r2, [r0, #8]
 800d1a6:	6800      	ldr	r0, [r0, #0]
 800d1a8:	1a10      	subs	r0, r2, r0
 800d1aa:	4770      	bx	lr

0800d1ac <ucdr_buffer_remaining>:
 800d1ac:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800d1b0:	1a10      	subs	r0, r2, r0
 800d1b2:	4770      	bx	lr

0800d1b4 <ucdr_check_final_buffer_behavior_array>:
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	7d83      	ldrb	r3, [r0, #22]
 800d1b8:	b963      	cbnz	r3, 800d1d4 <ucdr_check_final_buffer_behavior_array+0x20>
 800d1ba:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	460d      	mov	r5, r1
 800d1c4:	d308      	bcc.n	800d1d8 <ucdr_check_final_buffer_behavior_array+0x24>
 800d1c6:	b139      	cbz	r1, 800d1d8 <ucdr_check_final_buffer_behavior_array+0x24>
 800d1c8:	6983      	ldr	r3, [r0, #24]
 800d1ca:	b163      	cbz	r3, 800d1e6 <ucdr_check_final_buffer_behavior_array+0x32>
 800d1cc:	69c1      	ldr	r1, [r0, #28]
 800d1ce:	4798      	blx	r3
 800d1d0:	75a0      	strb	r0, [r4, #22]
 800d1d2:	b108      	cbz	r0, 800d1d8 <ucdr_check_final_buffer_behavior_array+0x24>
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f7ff ffe7 	bl	800d1ac <ucdr_buffer_remaining>
 800d1de:	42a8      	cmp	r0, r5
 800d1e0:	bf28      	it	cs
 800d1e2:	4628      	movcs	r0, r5
 800d1e4:	bd38      	pop	{r3, r4, r5, pc}
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	7583      	strb	r3, [r0, #22]
 800d1ea:	e7f3      	b.n	800d1d4 <ucdr_check_final_buffer_behavior_array+0x20>

0800d1ec <ucdr_advance_buffer>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4604      	mov	r4, r0
 800d1f0:	460d      	mov	r5, r1
 800d1f2:	f7ff ff57 	bl	800d0a4 <ucdr_check_buffer_available_for>
 800d1f6:	b178      	cbz	r0, 800d218 <ucdr_advance_buffer+0x2c>
 800d1f8:	6923      	ldr	r3, [r4, #16]
 800d1fa:	68a2      	ldr	r2, [r4, #8]
 800d1fc:	442b      	add	r3, r5
 800d1fe:	6123      	str	r3, [r4, #16]
 800d200:	2301      	movs	r3, #1
 800d202:	442a      	add	r2, r5
 800d204:	7563      	strb	r3, [r4, #21]
 800d206:	60a2      	str	r2, [r4, #8]
 800d208:	bd38      	pop	{r3, r4, r5, pc}
 800d20a:	68a2      	ldr	r2, [r4, #8]
 800d20c:	6923      	ldr	r3, [r4, #16]
 800d20e:	4402      	add	r2, r0
 800d210:	4403      	add	r3, r0
 800d212:	1a2d      	subs	r5, r5, r0
 800d214:	60a2      	str	r2, [r4, #8]
 800d216:	6123      	str	r3, [r4, #16]
 800d218:	2201      	movs	r2, #1
 800d21a:	4629      	mov	r1, r5
 800d21c:	4620      	mov	r0, r4
 800d21e:	f7ff ffc9 	bl	800d1b4 <ucdr_check_final_buffer_behavior_array>
 800d222:	2800      	cmp	r0, #0
 800d224:	d1f1      	bne.n	800d20a <ucdr_advance_buffer+0x1e>
 800d226:	2301      	movs	r3, #1
 800d228:	7563      	strb	r3, [r4, #21]
 800d22a:	bd38      	pop	{r3, r4, r5, pc}

0800d22c <ucdr_serialize_sequence_char>:
 800d22c:	b570      	push	{r4, r5, r6, lr}
 800d22e:	460e      	mov	r6, r1
 800d230:	4615      	mov	r5, r2
 800d232:	7d01      	ldrb	r1, [r0, #20]
 800d234:	4604      	mov	r4, r0
 800d236:	f7fe ff7f 	bl	800c138 <ucdr_serialize_endian_uint32_t>
 800d23a:	b90d      	cbnz	r5, 800d240 <ucdr_serialize_sequence_char+0x14>
 800d23c:	2001      	movs	r0, #1
 800d23e:	bd70      	pop	{r4, r5, r6, pc}
 800d240:	7d21      	ldrb	r1, [r4, #20]
 800d242:	462b      	mov	r3, r5
 800d244:	4632      	mov	r2, r6
 800d246:	4620      	mov	r0, r4
 800d248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d24c:	f7fe baba 	b.w	800b7c4 <ucdr_serialize_endian_array_char>

0800d250 <ucdr_deserialize_sequence_char>:
 800d250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d254:	461d      	mov	r5, r3
 800d256:	4616      	mov	r6, r2
 800d258:	460f      	mov	r7, r1
 800d25a:	461a      	mov	r2, r3
 800d25c:	7d01      	ldrb	r1, [r0, #20]
 800d25e:	4604      	mov	r4, r0
 800d260:	f7ff f888 	bl	800c374 <ucdr_deserialize_endian_uint32_t>
 800d264:	682b      	ldr	r3, [r5, #0]
 800d266:	429e      	cmp	r6, r3
 800d268:	d208      	bcs.n	800d27c <ucdr_deserialize_sequence_char+0x2c>
 800d26a:	2201      	movs	r2, #1
 800d26c:	75a2      	strb	r2, [r4, #22]
 800d26e:	7d21      	ldrb	r1, [r4, #20]
 800d270:	463a      	mov	r2, r7
 800d272:	4620      	mov	r0, r4
 800d274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d278:	f7fe bad6 	b.w	800b828 <ucdr_deserialize_endian_array_char>
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1f6      	bne.n	800d26e <ucdr_deserialize_sequence_char+0x1e>
 800d280:	2001      	movs	r0, #1
 800d282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d286:	bf00      	nop

0800d288 <ucdr_serialize_sequence_uint8_t>:
 800d288:	b570      	push	{r4, r5, r6, lr}
 800d28a:	460e      	mov	r6, r1
 800d28c:	4615      	mov	r5, r2
 800d28e:	7d01      	ldrb	r1, [r0, #20]
 800d290:	4604      	mov	r4, r0
 800d292:	f7fe ff51 	bl	800c138 <ucdr_serialize_endian_uint32_t>
 800d296:	b90d      	cbnz	r5, 800d29c <ucdr_serialize_sequence_uint8_t+0x14>
 800d298:	2001      	movs	r0, #1
 800d29a:	bd70      	pop	{r4, r5, r6, pc}
 800d29c:	7d21      	ldrb	r1, [r4, #20]
 800d29e:	462b      	mov	r3, r5
 800d2a0:	4632      	mov	r2, r6
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2a8:	f7fe bb22 	b.w	800b8f0 <ucdr_serialize_endian_array_uint8_t>

0800d2ac <ucdr_deserialize_sequence_uint8_t>:
 800d2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b0:	461d      	mov	r5, r3
 800d2b2:	4616      	mov	r6, r2
 800d2b4:	460f      	mov	r7, r1
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	7d01      	ldrb	r1, [r0, #20]
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	f7ff f85a 	bl	800c374 <ucdr_deserialize_endian_uint32_t>
 800d2c0:	682b      	ldr	r3, [r5, #0]
 800d2c2:	429e      	cmp	r6, r3
 800d2c4:	d208      	bcs.n	800d2d8 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	75a2      	strb	r2, [r4, #22]
 800d2ca:	7d21      	ldrb	r1, [r4, #20]
 800d2cc:	463a      	mov	r2, r7
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d4:	f7fe bb70 	b.w	800b9b8 <ucdr_deserialize_endian_array_uint8_t>
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1f6      	bne.n	800d2ca <ucdr_deserialize_sequence_uint8_t+0x1e>
 800d2dc:	2001      	movs	r0, #1
 800d2de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e2:	bf00      	nop

0800d2e4 <uxr_buffer_delete_entity>:
 800d2e4:	b510      	push	{r4, lr}
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	b08e      	sub	sp, #56	@ 0x38
 800d2ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d2ee:	2303      	movs	r3, #3
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	2204      	movs	r2, #4
 800d2f4:	ab06      	add	r3, sp, #24
 800d2f6:	4604      	mov	r4, r0
 800d2f8:	f001 fa9a 	bl	800e830 <uxr_prepare_stream_to_write_submessage>
 800d2fc:	b918      	cbnz	r0, 800d306 <uxr_buffer_delete_entity+0x22>
 800d2fe:	4604      	mov	r4, r0
 800d300:	4620      	mov	r0, r4
 800d302:	b00e      	add	sp, #56	@ 0x38
 800d304:	bd10      	pop	{r4, pc}
 800d306:	9902      	ldr	r1, [sp, #8]
 800d308:	aa05      	add	r2, sp, #20
 800d30a:	4620      	mov	r0, r4
 800d30c:	f001 fbca 	bl	800eaa4 <uxr_init_base_object_request>
 800d310:	a905      	add	r1, sp, #20
 800d312:	4604      	mov	r4, r0
 800d314:	a806      	add	r0, sp, #24
 800d316:	f003 f963 	bl	80105e0 <uxr_serialize_DELETE_Payload>
 800d31a:	4620      	mov	r0, r4
 800d31c:	b00e      	add	sp, #56	@ 0x38
 800d31e:	bd10      	pop	{r4, pc}

0800d320 <uxr_common_create_entity>:
 800d320:	b510      	push	{r4, lr}
 800d322:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d326:	b08c      	sub	sp, #48	@ 0x30
 800d328:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d32c:	f1bc 0f01 	cmp.w	ip, #1
 800d330:	bf08      	it	eq
 800d332:	f003 0201 	andeq.w	r2, r3, #1
 800d336:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d33a:	bf18      	it	ne
 800d33c:	2200      	movne	r2, #0
 800d33e:	330e      	adds	r3, #14
 800d340:	441a      	add	r2, r3
 800d342:	2301      	movs	r3, #1
 800d344:	e9cd 3100 	strd	r3, r1, [sp]
 800d348:	b292      	uxth	r2, r2
 800d34a:	9903      	ldr	r1, [sp, #12]
 800d34c:	ab04      	add	r3, sp, #16
 800d34e:	4604      	mov	r4, r0
 800d350:	f001 fa6e 	bl	800e830 <uxr_prepare_stream_to_write_submessage>
 800d354:	b918      	cbnz	r0, 800d35e <uxr_common_create_entity+0x3e>
 800d356:	4604      	mov	r4, r0
 800d358:	4620      	mov	r0, r4
 800d35a:	b00c      	add	sp, #48	@ 0x30
 800d35c:	bd10      	pop	{r4, pc}
 800d35e:	9902      	ldr	r1, [sp, #8]
 800d360:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d362:	4620      	mov	r0, r4
 800d364:	f001 fb9e 	bl	800eaa4 <uxr_init_base_object_request>
 800d368:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d36a:	4604      	mov	r4, r0
 800d36c:	a804      	add	r0, sp, #16
 800d36e:	f003 f881 	bl	8010474 <uxr_serialize_CREATE_Payload>
 800d372:	4620      	mov	r0, r4
 800d374:	b00c      	add	sp, #48	@ 0x30
 800d376:	bd10      	pop	{r4, pc}

0800d378 <uxr_buffer_create_participant_bin>:
 800d378:	b570      	push	{r4, r5, r6, lr}
 800d37a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d37e:	ac11      	add	r4, sp, #68	@ 0x44
 800d380:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d384:	2303      	movs	r3, #3
 800d386:	7223      	strb	r3, [r4, #8]
 800d388:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d38a:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d38e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d392:	2201      	movs	r2, #1
 800d394:	2100      	movs	r1, #0
 800d396:	4605      	mov	r5, r0
 800d398:	7122      	strb	r2, [r4, #4]
 800d39a:	f88d 1014 	strb.w	r1, [sp, #20]
 800d39e:	b1cb      	cbz	r3, 800d3d4 <uxr_buffer_create_participant_bin+0x5c>
 800d3a0:	f88d 201c 	strb.w	r2, [sp, #28]
 800d3a4:	9308      	str	r3, [sp, #32]
 800d3a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3aa:	a915      	add	r1, sp, #84	@ 0x54
 800d3ac:	a809      	add	r0, sp, #36	@ 0x24
 800d3ae:	f7ff fecd 	bl	800d14c <ucdr_init_buffer>
 800d3b2:	a905      	add	r1, sp, #20
 800d3b4:	a809      	add	r0, sp, #36	@ 0x24
 800d3b6:	f002 fd53 	bl	800fe60 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d3ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d3bc:	9600      	str	r6, [sp, #0]
 800d3be:	9401      	str	r4, [sp, #4]
 800d3c0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d3c4:	60e3      	str	r3, [r4, #12]
 800d3c6:	4628      	mov	r0, r5
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	f7ff ffa9 	bl	800d320 <uxr_common_create_entity>
 800d3ce:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d3d2:	bd70      	pop	{r4, r5, r6, pc}
 800d3d4:	f88d 301c 	strb.w	r3, [sp, #28]
 800d3d8:	e7e5      	b.n	800d3a6 <uxr_buffer_create_participant_bin+0x2e>
 800d3da:	bf00      	nop

0800d3dc <uxr_buffer_create_topic_bin>:
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	9105      	str	r1, [sp, #20]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	a997      	add	r1, sp, #604	@ 0x25c
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d3f0:	9204      	str	r2, [sp, #16]
 800d3f2:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d3f6:	f000 f99b 	bl	800d730 <uxr_object_id_to_raw>
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d400:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d402:	9306      	str	r3, [sp, #24]
 800d404:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d406:	930a      	str	r3, [sp, #40]	@ 0x28
 800d408:	2301      	movs	r3, #1
 800d40a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d40e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d412:	2300      	movs	r3, #0
 800d414:	a917      	add	r1, sp, #92	@ 0x5c
 800d416:	a80b      	add	r0, sp, #44	@ 0x2c
 800d418:	f88d 301c 	strb.w	r3, [sp, #28]
 800d41c:	f7ff fe96 	bl	800d14c <ucdr_init_buffer>
 800d420:	a906      	add	r1, sp, #24
 800d422:	a80b      	add	r0, sp, #44	@ 0x2c
 800d424:	f002 fd3e 	bl	800fea4 <uxr_serialize_OBJK_Topic_Binary>
 800d428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d42a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d42c:	ac13      	add	r4, sp, #76	@ 0x4c
 800d42e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d432:	9600      	str	r6, [sp, #0]
 800d434:	9401      	str	r4, [sp, #4]
 800d436:	b29b      	uxth	r3, r3
 800d438:	4628      	mov	r0, r5
 800d43a:	f7ff ff71 	bl	800d320 <uxr_common_create_entity>
 800d43e:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d442:	bd70      	pop	{r4, r5, r6, pc}

0800d444 <uxr_buffer_create_publisher_bin>:
 800d444:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d446:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d44a:	4605      	mov	r5, r0
 800d44c:	9105      	str	r1, [sp, #20]
 800d44e:	4618      	mov	r0, r3
 800d450:	2603      	movs	r6, #3
 800d452:	a992      	add	r1, sp, #584	@ 0x248
 800d454:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d458:	9204      	str	r2, [sp, #16]
 800d45a:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d45e:	f000 f967 	bl	800d730 <uxr_object_id_to_raw>
 800d462:	2300      	movs	r3, #0
 800d464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d468:	a912      	add	r1, sp, #72	@ 0x48
 800d46a:	a806      	add	r0, sp, #24
 800d46c:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d470:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d474:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d478:	f7ff fe68 	bl	800d14c <ucdr_init_buffer>
 800d47c:	a993      	add	r1, sp, #588	@ 0x24c
 800d47e:	a806      	add	r0, sp, #24
 800d480:	f002 fdc6 	bl	8010010 <uxr_serialize_OBJK_Publisher_Binary>
 800d484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d486:	9311      	str	r3, [sp, #68]	@ 0x44
 800d488:	ac0e      	add	r4, sp, #56	@ 0x38
 800d48a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d48e:	9700      	str	r7, [sp, #0]
 800d490:	9401      	str	r4, [sp, #4]
 800d492:	b29b      	uxth	r3, r3
 800d494:	4628      	mov	r0, r5
 800d496:	f7ff ff43 	bl	800d320 <uxr_common_create_entity>
 800d49a:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d49e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4a0 <uxr_buffer_create_datawriter_bin>:
 800d4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4a2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d4a6:	ac1d      	add	r4, sp, #116	@ 0x74
 800d4a8:	9105      	str	r1, [sp, #20]
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	a9a1      	add	r1, sp, #644	@ 0x284
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	2305      	movs	r3, #5
 800d4b2:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800d4b6:	9204      	str	r2, [sp, #16]
 800d4b8:	7123      	strb	r3, [r4, #4]
 800d4ba:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800d4be:	f000 f937 	bl	800d730 <uxr_object_id_to_raw>
 800d4c2:	2303      	movs	r3, #3
 800d4c4:	a90e      	add	r1, sp, #56	@ 0x38
 800d4c6:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800d4c8:	7223      	strb	r3, [r4, #8]
 800d4ca:	f000 f931 	bl	800d730 <uxr_object_id_to_raw>
 800d4ce:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800d4d2:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	3f00      	subs	r7, #0
 800d4da:	fab3 f383 	clz	r3, r3
 800d4de:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800d4e2:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800d4e6:	bf18      	it	ne
 800d4e8:	2701      	movne	r7, #1
 800d4ea:	095b      	lsrs	r3, r3, #5
 800d4ec:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800d4f0:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800d4f4:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800d4fe:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d502:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800d506:	b919      	cbnz	r1, 800d510 <uxr_buffer_create_datawriter_bin+0x70>
 800d508:	f043 0302 	orr.w	r3, r3, #2
 800d50c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d510:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800d514:	2a01      	cmp	r2, #1
 800d516:	d022      	beq.n	800d55e <uxr_buffer_create_datawriter_bin+0xbe>
 800d518:	2a03      	cmp	r2, #3
 800d51a:	d01b      	beq.n	800d554 <uxr_buffer_create_datawriter_bin+0xb4>
 800d51c:	b91a      	cbnz	r2, 800d526 <uxr_buffer_create_datawriter_bin+0x86>
 800d51e:	f043 0308 	orr.w	r3, r3, #8
 800d522:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d52a:	a921      	add	r1, sp, #132	@ 0x84
 800d52c:	a806      	add	r0, sp, #24
 800d52e:	f7ff fe0d 	bl	800d14c <ucdr_init_buffer>
 800d532:	a90e      	add	r1, sp, #56	@ 0x38
 800d534:	a806      	add	r0, sp, #24
 800d536:	f002 fdd1 	bl	80100dc <uxr_serialize_OBJK_DataWriter_Binary>
 800d53a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d53c:	9600      	str	r6, [sp, #0]
 800d53e:	9401      	str	r4, [sp, #4]
 800d540:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d544:	60e3      	str	r3, [r4, #12]
 800d546:	4628      	mov	r0, r5
 800d548:	b29b      	uxth	r3, r3
 800d54a:	f7ff fee9 	bl	800d320 <uxr_common_create_entity>
 800d54e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800d552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d554:	f043 0320 	orr.w	r3, r3, #32
 800d558:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d55c:	e7e3      	b.n	800d526 <uxr_buffer_create_datawriter_bin+0x86>
 800d55e:	f043 0310 	orr.w	r3, r3, #16
 800d562:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d566:	e7de      	b.n	800d526 <uxr_buffer_create_datawriter_bin+0x86>

0800d568 <get_custom_error>:
 800d568:	4b01      	ldr	r3, [pc, #4]	@ (800d570 <get_custom_error+0x8>)
 800d56a:	7818      	ldrb	r0, [r3, #0]
 800d56c:	4770      	bx	lr
 800d56e:	bf00      	nop
 800d570:	20010108 	.word	0x20010108

0800d574 <recv_custom_msg>:
 800d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	b089      	sub	sp, #36	@ 0x24
 800d57a:	4693      	mov	fp, r2
 800d57c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800d580:	9104      	str	r1, [sp, #16]
 800d582:	2100      	movs	r1, #0
 800d584:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800d588:	9305      	str	r3, [sp, #20]
 800d58a:	4604      	mov	r4, r0
 800d58c:	f88d 101e 	strb.w	r1, [sp, #30]
 800d590:	b332      	cbz	r2, 800d5e0 <recv_custom_msg+0x6c>
 800d592:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800d596:	f10d 091f 	add.w	r9, sp, #31
 800d59a:	f10d 0814 	add.w	r8, sp, #20
 800d59e:	f10d 071e 	add.w	r7, sp, #30
 800d5a2:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800d5a6:	e004      	b.n	800d5b2 <recv_custom_msg+0x3e>
 800d5a8:	9b05      	ldr	r3, [sp, #20]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	dd10      	ble.n	800d5d0 <recv_custom_msg+0x5c>
 800d5ae:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800d5b2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d5b6:	e9cd 6700 	strd	r6, r7, [sp]
 800d5ba:	4623      	mov	r3, r4
 800d5bc:	4622      	mov	r2, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	4650      	mov	r0, sl
 800d5c2:	f001 fc81 	bl	800eec8 <uxr_read_framed_msg>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d0ee      	beq.n	800d5a8 <recv_custom_msg+0x34>
 800d5ca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d5ce:	b1a3      	cbz	r3, 800d5fa <recv_custom_msg+0x86>
 800d5d0:	4b0e      	ldr	r3, [pc, #56]	@ (800d60c <recv_custom_msg+0x98>)
 800d5d2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d5d6:	701a      	strb	r2, [r3, #0]
 800d5d8:	2000      	movs	r0, #0
 800d5da:	b009      	add	sp, #36	@ 0x24
 800d5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e0:	f10d 021f 	add.w	r2, sp, #31
 800d5e4:	9200      	str	r2, [sp, #0]
 800d5e6:	4601      	mov	r1, r0
 800d5e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5ec:	47a8      	blx	r5
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d0ee      	beq.n	800d5d0 <recv_custom_msg+0x5c>
 800d5f2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1ea      	bne.n	800d5d0 <recv_custom_msg+0x5c>
 800d5fa:	9b04      	ldr	r3, [sp, #16]
 800d5fc:	f8cb 0000 	str.w	r0, [fp]
 800d600:	2001      	movs	r0, #1
 800d602:	601c      	str	r4, [r3, #0]
 800d604:	b009      	add	sp, #36	@ 0x24
 800d606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d60a:	bf00      	nop
 800d60c:	20010108 	.word	0x20010108

0800d610 <send_custom_msg>:
 800d610:	b570      	push	{r4, r5, r6, lr}
 800d612:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800d616:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800d61a:	b086      	sub	sp, #24
 800d61c:	4616      	mov	r6, r2
 800d61e:	b965      	cbnz	r5, 800d63a <send_custom_msg+0x2a>
 800d620:	f10d 0317 	add.w	r3, sp, #23
 800d624:	47a0      	blx	r4
 800d626:	b108      	cbz	r0, 800d62c <send_custom_msg+0x1c>
 800d628:	42b0      	cmp	r0, r6
 800d62a:	d014      	beq.n	800d656 <send_custom_msg+0x46>
 800d62c:	4b0b      	ldr	r3, [pc, #44]	@ (800d65c <send_custom_msg+0x4c>)
 800d62e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d632:	701a      	strb	r2, [r3, #0]
 800d634:	2000      	movs	r0, #0
 800d636:	b006      	add	sp, #24
 800d638:	bd70      	pop	{r4, r5, r6, pc}
 800d63a:	f10d 0217 	add.w	r2, sp, #23
 800d63e:	9202      	str	r2, [sp, #8]
 800d640:	2200      	movs	r2, #0
 800d642:	e9cd 6200 	strd	r6, r2, [sp]
 800d646:	460b      	mov	r3, r1
 800d648:	4602      	mov	r2, r0
 800d64a:	4621      	mov	r1, r4
 800d64c:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800d650:	f001 fa5c 	bl	800eb0c <uxr_write_framed_msg>
 800d654:	e7e7      	b.n	800d626 <send_custom_msg+0x16>
 800d656:	2001      	movs	r0, #1
 800d658:	b006      	add	sp, #24
 800d65a:	bd70      	pop	{r4, r5, r6, pc}
 800d65c:	20010108 	.word	0x20010108

0800d660 <uxr_set_custom_transport_callbacks>:
 800d660:	b410      	push	{r4}
 800d662:	9c01      	ldr	r4, [sp, #4]
 800d664:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800d668:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800d66c:	9b02      	ldr	r3, [sp, #8]
 800d66e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800d672:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d676:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800d67a:	4770      	bx	lr

0800d67c <uxr_init_custom_transport>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800d682:	b303      	cbz	r3, 800d6c6 <uxr_init_custom_transport+0x4a>
 800d684:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800d688:	4604      	mov	r4, r0
 800d68a:	b1e2      	cbz	r2, 800d6c6 <uxr_init_custom_transport+0x4a>
 800d68c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800d690:	b1ca      	cbz	r2, 800d6c6 <uxr_init_custom_transport+0x4a>
 800d692:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800d696:	b1b2      	cbz	r2, 800d6c6 <uxr_init_custom_transport+0x4a>
 800d698:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800d69c:	4798      	blx	r3
 800d69e:	4605      	mov	r5, r0
 800d6a0:	b188      	cbz	r0, 800d6c6 <uxr_init_custom_transport+0x4a>
 800d6a2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800d6a6:	b98b      	cbnz	r3, 800d6cc <uxr_init_custom_transport+0x50>
 800d6a8:	490b      	ldr	r1, [pc, #44]	@ (800d6d8 <uxr_init_custom_transport+0x5c>)
 800d6aa:	4b0c      	ldr	r3, [pc, #48]	@ (800d6dc <uxr_init_custom_transport+0x60>)
 800d6ac:	4a0c      	ldr	r2, [pc, #48]	@ (800d6e0 <uxr_init_custom_transport+0x64>)
 800d6ae:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800d6b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d6b6:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800d6ba:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800d6be:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	bd38      	pop	{r3, r4, r5, pc}
 800d6c6:	2500      	movs	r5, #0
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	bd38      	pop	{r3, r4, r5, pc}
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800d6d2:	f001 fa15 	bl	800eb00 <uxr_init_framing_io>
 800d6d6:	e7e7      	b.n	800d6a8 <uxr_init_custom_transport+0x2c>
 800d6d8:	0800d611 	.word	0x0800d611
 800d6dc:	0800d575 	.word	0x0800d575
 800d6e0:	0800d569 	.word	0x0800d569

0800d6e4 <uxr_close_custom_transport>:
 800d6e4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800d6e8:	4718      	bx	r3
 800d6ea:	bf00      	nop

0800d6ec <uxr_object_id>:
 800d6ec:	b082      	sub	sp, #8
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	f88d 1006 	strb.w	r1, [sp, #6]
 800d6f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d6f8:	f360 030f 	bfi	r3, r0, #0, #16
 800d6fc:	f362 431f 	bfi	r3, r2, #16, #16
 800d700:	4618      	mov	r0, r3
 800d702:	b002      	add	sp, #8
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop

0800d708 <uxr_object_id_from_raw>:
 800d708:	7843      	ldrb	r3, [r0, #1]
 800d70a:	7801      	ldrb	r1, [r0, #0]
 800d70c:	b082      	sub	sp, #8
 800d70e:	f003 020f 	and.w	r2, r3, #15
 800d712:	f88d 2006 	strb.w	r2, [sp, #6]
 800d716:	091b      	lsrs	r3, r3, #4
 800d718:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d71c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d720:	2000      	movs	r0, #0
 800d722:	f363 000f 	bfi	r0, r3, #0, #16
 800d726:	f362 401f 	bfi	r0, r2, #16, #16
 800d72a:	b002      	add	sp, #8
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop

0800d730 <uxr_object_id_to_raw>:
 800d730:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d734:	b082      	sub	sp, #8
 800d736:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800d73a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800d73e:	700a      	strb	r2, [r1, #0]
 800d740:	704b      	strb	r3, [r1, #1]
 800d742:	b002      	add	sp, #8
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop

0800d748 <uxr_ping_agent_session>:
 800d748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d74c:	4616      	mov	r6, r2
 800d74e:	b091      	sub	sp, #68	@ 0x44
 800d750:	2210      	movs	r2, #16
 800d752:	4605      	mov	r5, r0
 800d754:	460f      	mov	r7, r1
 800d756:	a808      	add	r0, sp, #32
 800d758:	eb0d 0102 	add.w	r1, sp, r2
 800d75c:	f7ff fcf6 	bl	800d14c <ucdr_init_buffer>
 800d760:	4b20      	ldr	r3, [pc, #128]	@ (800d7e4 <uxr_ping_agent_session+0x9c>)
 800d762:	2400      	movs	r4, #0
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d76a:	9400      	str	r4, [sp, #0]
 800d76c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800d770:	f04f 0802 	mov.w	r8, #2
 800d774:	7829      	ldrb	r1, [r5, #0]
 800d776:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d77a:	4622      	mov	r2, r4
 800d77c:	4623      	mov	r3, r4
 800d77e:	a808      	add	r0, sp, #32
 800d780:	f8cd 800c 	str.w	r8, [sp, #12]
 800d784:	f002 f93c 	bl	800fa00 <uxr_serialize_message_header>
 800d788:	4641      	mov	r1, r8
 800d78a:	4623      	mov	r3, r4
 800d78c:	2208      	movs	r2, #8
 800d78e:	a808      	add	r0, sp, #32
 800d790:	f001 ff38 	bl	800f604 <uxr_buffer_submessage_header>
 800d794:	a902      	add	r1, sp, #8
 800d796:	4680      	mov	r8, r0
 800d798:	a808      	add	r0, sp, #32
 800d79a:	f002 fef9 	bl	8010590 <uxr_serialize_GET_INFO_Payload>
 800d79e:	f1b8 0f00 	cmp.w	r8, #0
 800d7a2:	d000      	beq.n	800d7a6 <uxr_ping_agent_session+0x5e>
 800d7a4:	b918      	cbnz	r0, 800d7ae <uxr_ping_agent_session+0x66>
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	b011      	add	sp, #68	@ 0x44
 800d7aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7ae:	a808      	add	r0, sp, #32
 800d7b0:	f7ff fcf8 	bl	800d1a4 <ucdr_buffer_length>
 800d7b4:	4680      	mov	r8, r0
 800d7b6:	2e00      	cmp	r6, #0
 800d7b8:	d0f5      	beq.n	800d7a6 <uxr_ping_agent_session+0x5e>
 800d7ba:	46a1      	mov	r9, r4
 800d7bc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d7be:	4642      	mov	r2, r8
 800d7c0:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d7c4:	a904      	add	r1, sp, #16
 800d7c6:	47a0      	blx	r4
 800d7c8:	4639      	mov	r1, r7
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	f000 fe23 	bl	800e418 <uxr_run_session_until_pong>
 800d7d2:	4020      	ands	r0, r4
 800d7d4:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800d7d8:	f109 0901 	add.w	r9, r9, #1
 800d7dc:	d1e4      	bne.n	800d7a8 <uxr_ping_agent_session+0x60>
 800d7de:	454e      	cmp	r6, r9
 800d7e0:	d1ec      	bne.n	800d7bc <uxr_ping_agent_session+0x74>
 800d7e2:	e7e0      	b.n	800d7a6 <uxr_ping_agent_session+0x5e>
 800d7e4:	08019f38 	.word	0x08019f38

0800d7e8 <uxr_ping_agent_attempts>:
 800d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ec:	b0d3      	sub	sp, #332	@ 0x14c
 800d7ee:	4606      	mov	r6, r0
 800d7f0:	4688      	mov	r8, r1
 800d7f2:	a810      	add	r0, sp, #64	@ 0x40
 800d7f4:	a90c      	add	r1, sp, #48	@ 0x30
 800d7f6:	4692      	mov	sl, r2
 800d7f8:	2210      	movs	r2, #16
 800d7fa:	f7ff fca7 	bl	800d14c <ucdr_init_buffer>
 800d7fe:	4b56      	ldr	r3, [pc, #344]	@ (800d958 <uxr_ping_agent_attempts+0x170>)
 800d800:	881b      	ldrh	r3, [r3, #0]
 800d802:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 800d806:	2400      	movs	r4, #0
 800d808:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800d80c:	2502      	movs	r5, #2
 800d80e:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 800d812:	4622      	mov	r2, r4
 800d814:	4623      	mov	r3, r4
 800d816:	2180      	movs	r1, #128	@ 0x80
 800d818:	a810      	add	r0, sp, #64	@ 0x40
 800d81a:	9400      	str	r4, [sp, #0]
 800d81c:	9521      	str	r5, [sp, #132]	@ 0x84
 800d81e:	f002 f8ef 	bl	800fa00 <uxr_serialize_message_header>
 800d822:	4629      	mov	r1, r5
 800d824:	4623      	mov	r3, r4
 800d826:	2208      	movs	r2, #8
 800d828:	a810      	add	r0, sp, #64	@ 0x40
 800d82a:	f001 feeb 	bl	800f604 <uxr_buffer_submessage_header>
 800d82e:	a920      	add	r1, sp, #128	@ 0x80
 800d830:	4605      	mov	r5, r0
 800d832:	a810      	add	r0, sp, #64	@ 0x40
 800d834:	f002 feac 	bl	8010590 <uxr_serialize_GET_INFO_Payload>
 800d838:	4005      	ands	r5, r0
 800d83a:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 800d83e:	d104      	bne.n	800d84a <uxr_ping_agent_attempts+0x62>
 800d840:	2500      	movs	r5, #0
 800d842:	4628      	mov	r0, r5
 800d844:	b053      	add	sp, #332	@ 0x14c
 800d846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84a:	a810      	add	r0, sp, #64	@ 0x40
 800d84c:	f7ff fcaa 	bl	800d1a4 <ucdr_buffer_length>
 800d850:	9004      	str	r0, [sp, #16]
 800d852:	f1ba 0f00 	cmp.w	sl, #0
 800d856:	d0f3      	beq.n	800d840 <uxr_ping_agent_attempts+0x58>
 800d858:	9505      	str	r5, [sp, #20]
 800d85a:	46a1      	mov	r9, r4
 800d85c:	4627      	mov	r7, r4
 800d85e:	4655      	mov	r5, sl
 800d860:	e9d6 0300 	ldrd	r0, r3, [r6]
 800d864:	9a04      	ldr	r2, [sp, #16]
 800d866:	a90c      	add	r1, sp, #48	@ 0x30
 800d868:	4798      	blx	r3
 800d86a:	f001 ff11 	bl	800f690 <uxr_millis>
 800d86e:	46c2      	mov	sl, r8
 800d870:	4604      	mov	r4, r0
 800d872:	9503      	str	r5, [sp, #12]
 800d874:	6830      	ldr	r0, [r6, #0]
 800d876:	68b5      	ldr	r5, [r6, #8]
 800d878:	9708      	str	r7, [sp, #32]
 800d87a:	4643      	mov	r3, r8
 800d87c:	aa09      	add	r2, sp, #36	@ 0x24
 800d87e:	a908      	add	r1, sp, #32
 800d880:	47a8      	blx	r5
 800d882:	4683      	mov	fp, r0
 800d884:	b998      	cbnz	r0, 800d8ae <uxr_ping_agent_attempts+0xc6>
 800d886:	f001 ff03 	bl	800f690 <uxr_millis>
 800d88a:	1b00      	subs	r0, r0, r4
 800d88c:	ebaa 0a00 	sub.w	sl, sl, r0
 800d890:	f001 fefe 	bl	800f690 <uxr_millis>
 800d894:	f1ba 0f00 	cmp.w	sl, #0
 800d898:	4604      	mov	r4, r0
 800d89a:	dceb      	bgt.n	800d874 <uxr_ping_agent_attempts+0x8c>
 800d89c:	9d03      	ldr	r5, [sp, #12]
 800d89e:	f109 0901 	add.w	r9, r9, #1
 800d8a2:	f1bb 0f00 	cmp.w	fp, #0
 800d8a6:	d12a      	bne.n	800d8fe <uxr_ping_agent_attempts+0x116>
 800d8a8:	45a9      	cmp	r9, r5
 800d8aa:	d1d9      	bne.n	800d860 <uxr_ping_agent_attempts+0x78>
 800d8ac:	e7c8      	b.n	800d840 <uxr_ping_agent_attempts+0x58>
 800d8ae:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d8b2:	a818      	add	r0, sp, #96	@ 0x60
 800d8b4:	f7ff fc4a 	bl	800d14c <ucdr_init_buffer>
 800d8b8:	ab07      	add	r3, sp, #28
 800d8ba:	f10d 0219 	add.w	r2, sp, #25
 800d8be:	a918      	add	r1, sp, #96	@ 0x60
 800d8c0:	a80a      	add	r0, sp, #40	@ 0x28
 800d8c2:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 800d8c6:	f001 f8a7 	bl	800ea18 <uxr_read_session_header>
 800d8ca:	22c8      	movs	r2, #200	@ 0xc8
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	a820      	add	r0, sp, #128	@ 0x80
 800d8d0:	f00a fe78 	bl	80185c4 <memset>
 800d8d4:	a818      	add	r0, sp, #96	@ 0x60
 800d8d6:	f7ff fc69 	bl	800d1ac <ucdr_buffer_remaining>
 800d8da:	2804      	cmp	r0, #4
 800d8dc:	d814      	bhi.n	800d908 <uxr_ping_agent_attempts+0x120>
 800d8de:	f89d b135 	ldrb.w	fp, [sp, #309]	@ 0x135
 800d8e2:	f001 fed5 	bl	800f690 <uxr_millis>
 800d8e6:	1b00      	subs	r0, r0, r4
 800d8e8:	ebaa 0a00 	sub.w	sl, sl, r0
 800d8ec:	f001 fed0 	bl	800f690 <uxr_millis>
 800d8f0:	f1ba 0f00 	cmp.w	sl, #0
 800d8f4:	4604      	mov	r4, r0
 800d8f6:	dd28      	ble.n	800d94a <uxr_ping_agent_attempts+0x162>
 800d8f8:	f1bb 0f00 	cmp.w	fp, #0
 800d8fc:	d0ba      	beq.n	800d874 <uxr_ping_agent_attempts+0x8c>
 800d8fe:	9d05      	ldr	r5, [sp, #20]
 800d900:	4628      	mov	r0, r5
 800d902:	b053      	add	sp, #332	@ 0x14c
 800d904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d908:	f10d 031e 	add.w	r3, sp, #30
 800d90c:	f10d 021b 	add.w	r2, sp, #27
 800d910:	f10d 011a 	add.w	r1, sp, #26
 800d914:	a818      	add	r0, sp, #96	@ 0x60
 800d916:	f88d 701a 	strb.w	r7, [sp, #26]
 800d91a:	f88d 701b 	strb.w	r7, [sp, #27]
 800d91e:	f8ad 701e 	strh.w	r7, [sp, #30]
 800d922:	f002 f8bd 	bl	800faa0 <uxr_deserialize_submessage_header>
 800d926:	a818      	add	r0, sp, #96	@ 0x60
 800d928:	f7ff fc40 	bl	800d1ac <ucdr_buffer_remaining>
 800d92c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d930:	4298      	cmp	r0, r3
 800d932:	d3d4      	bcc.n	800d8de <uxr_ping_agent_attempts+0xf6>
 800d934:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800d938:	2b06      	cmp	r3, #6
 800d93a:	d1d0      	bne.n	800d8de <uxr_ping_agent_attempts+0xf6>
 800d93c:	a918      	add	r1, sp, #96	@ 0x60
 800d93e:	a820      	add	r0, sp, #128	@ 0x80
 800d940:	f88d 7135 	strb.w	r7, [sp, #309]	@ 0x135
 800d944:	f000 f974 	bl	800dc30 <read_submessage_info>
 800d948:	e7c9      	b.n	800d8de <uxr_ping_agent_attempts+0xf6>
 800d94a:	f1bb 0b00 	subs.w	fp, fp, #0
 800d94e:	9d03      	ldr	r5, [sp, #12]
 800d950:	bf18      	it	ne
 800d952:	f04f 0b01 	movne.w	fp, #1
 800d956:	e7a2      	b.n	800d89e <uxr_ping_agent_attempts+0xb6>
 800d958:	08019f38 	.word	0x08019f38

0800d95c <on_get_fragmentation_info>:
 800d95c:	b500      	push	{lr}
 800d95e:	b08b      	sub	sp, #44	@ 0x2c
 800d960:	4601      	mov	r1, r0
 800d962:	2204      	movs	r2, #4
 800d964:	a802      	add	r0, sp, #8
 800d966:	f7ff fbf1 	bl	800d14c <ucdr_init_buffer>
 800d96a:	f10d 0305 	add.w	r3, sp, #5
 800d96e:	f10d 0206 	add.w	r2, sp, #6
 800d972:	a901      	add	r1, sp, #4
 800d974:	a802      	add	r0, sp, #8
 800d976:	f001 fe5f 	bl	800f638 <uxr_read_submessage_header>
 800d97a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d97e:	2b0d      	cmp	r3, #13
 800d980:	d003      	beq.n	800d98a <on_get_fragmentation_info+0x2e>
 800d982:	2000      	movs	r0, #0
 800d984:	b00b      	add	sp, #44	@ 0x2c
 800d986:	f85d fb04 	ldr.w	pc, [sp], #4
 800d98a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d98e:	f013 0f02 	tst.w	r3, #2
 800d992:	bf0c      	ite	eq
 800d994:	2001      	moveq	r0, #1
 800d996:	2002      	movne	r0, #2
 800d998:	b00b      	add	sp, #44	@ 0x2c
 800d99a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d99e:	bf00      	nop

0800d9a0 <read_submessage_get_info>:
 800d9a0:	b570      	push	{r4, r5, r6, lr}
 800d9a2:	2500      	movs	r5, #0
 800d9a4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d9ae:	460e      	mov	r6, r1
 800d9b0:	a810      	add	r0, sp, #64	@ 0x40
 800d9b2:	4629      	mov	r1, r5
 800d9b4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d9b8:	f00a fe04 	bl	80185c4 <memset>
 800d9bc:	a903      	add	r1, sp, #12
 800d9be:	4630      	mov	r0, r6
 800d9c0:	f002 fdfa 	bl	80105b8 <uxr_deserialize_GET_INFO_Payload>
 800d9c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d9c8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d9cc:	4620      	mov	r0, r4
 800d9ce:	f001 f861 	bl	800ea94 <uxr_session_header_offset>
 800d9d2:	462b      	mov	r3, r5
 800d9d4:	9000      	str	r0, [sp, #0]
 800d9d6:	220c      	movs	r2, #12
 800d9d8:	a905      	add	r1, sp, #20
 800d9da:	a808      	add	r0, sp, #32
 800d9dc:	f7ff fba4 	bl	800d128 <ucdr_init_buffer_origin_offset>
 800d9e0:	a910      	add	r1, sp, #64	@ 0x40
 800d9e2:	a808      	add	r0, sp, #32
 800d9e4:	f002 fe5a 	bl	801069c <uxr_serialize_INFO_Payload>
 800d9e8:	9b08      	ldr	r3, [sp, #32]
 800d9ea:	462a      	mov	r2, r5
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f000 fffc 	bl	800e9ec <uxr_stamp_session_header>
 800d9f4:	a808      	add	r0, sp, #32
 800d9f6:	f7ff fbd5 	bl	800d1a4 <ucdr_buffer_length>
 800d9fa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	a905      	add	r1, sp, #20
 800da00:	e9d3 0400 	ldrd	r0, r4, [r3]
 800da04:	47a0      	blx	r4
 800da06:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800da0a:	bd70      	pop	{r4, r5, r6, pc}

0800da0c <write_submessage_acknack.isra.0>:
 800da0c:	b570      	push	{r4, r5, r6, lr}
 800da0e:	b092      	sub	sp, #72	@ 0x48
 800da10:	4605      	mov	r5, r0
 800da12:	460e      	mov	r6, r1
 800da14:	4614      	mov	r4, r2
 800da16:	f001 f83d 	bl	800ea94 <uxr_session_header_offset>
 800da1a:	a905      	add	r1, sp, #20
 800da1c:	9000      	str	r0, [sp, #0]
 800da1e:	2300      	movs	r3, #0
 800da20:	a80a      	add	r0, sp, #40	@ 0x28
 800da22:	2211      	movs	r2, #17
 800da24:	f7ff fb80 	bl	800d128 <ucdr_init_buffer_origin_offset>
 800da28:	2318      	movs	r3, #24
 800da2a:	fb03 5404 	mla	r4, r3, r4, r5
 800da2e:	2205      	movs	r2, #5
 800da30:	2300      	movs	r3, #0
 800da32:	3450      	adds	r4, #80	@ 0x50
 800da34:	210a      	movs	r1, #10
 800da36:	a80a      	add	r0, sp, #40	@ 0x28
 800da38:	f001 fde4 	bl	800f604 <uxr_buffer_submessage_header>
 800da3c:	a903      	add	r1, sp, #12
 800da3e:	4620      	mov	r0, r4
 800da40:	f008 fc4e 	bl	80162e0 <uxr_compute_acknack>
 800da44:	ba40      	rev16	r0, r0
 800da46:	f8ad 000e 	strh.w	r0, [sp, #14]
 800da4a:	a903      	add	r1, sp, #12
 800da4c:	a80a      	add	r0, sp, #40	@ 0x28
 800da4e:	f88d 6010 	strb.w	r6, [sp, #16]
 800da52:	f002 fe93 	bl	801077c <uxr_serialize_ACKNACK_Payload>
 800da56:	2200      	movs	r2, #0
 800da58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da5a:	4611      	mov	r1, r2
 800da5c:	4628      	mov	r0, r5
 800da5e:	f000 ffc5 	bl	800e9ec <uxr_stamp_session_header>
 800da62:	a80a      	add	r0, sp, #40	@ 0x28
 800da64:	f7ff fb9e 	bl	800d1a4 <ucdr_buffer_length>
 800da68:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800da6a:	4602      	mov	r2, r0
 800da6c:	a905      	add	r1, sp, #20
 800da6e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800da72:	47a0      	blx	r4
 800da74:	b012      	add	sp, #72	@ 0x48
 800da76:	bd70      	pop	{r4, r5, r6, pc}

0800da78 <uxr_init_session>:
 800da78:	b510      	push	{r4, lr}
 800da7a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800dab0 <uxr_init_session+0x38>
 800da7e:	2300      	movs	r3, #0
 800da80:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800da84:	4604      	mov	r4, r0
 800da86:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800da8a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800da8e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800da92:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800da96:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800da9a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800da9e:	2181      	movs	r1, #129	@ 0x81
 800daa0:	f000 ff08 	bl	800e8b4 <uxr_init_session_info>
 800daa4:	f104 0008 	add.w	r0, r4, #8
 800daa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daac:	f001 bcc6 	b.w	800f43c <uxr_init_stream_storage>
	...

0800dab8 <uxr_set_status_callback>:
 800dab8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop

0800dac0 <uxr_set_topic_callback>:
 800dac0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop

0800dac8 <uxr_set_request_callback>:
 800dac8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop

0800dad0 <uxr_set_reply_callback>:
 800dad0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop

0800dad8 <uxr_create_output_best_effort_stream>:
 800dad8:	b570      	push	{r4, r5, r6, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	4604      	mov	r4, r0
 800dade:	460d      	mov	r5, r1
 800dae0:	4616      	mov	r6, r2
 800dae2:	f000 ffd7 	bl	800ea94 <uxr_session_header_offset>
 800dae6:	4632      	mov	r2, r6
 800dae8:	4603      	mov	r3, r0
 800daea:	4629      	mov	r1, r5
 800daec:	f104 0008 	add.w	r0, r4, #8
 800daf0:	b002      	add	sp, #8
 800daf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800daf6:	f001 bceb 	b.w	800f4d0 <uxr_add_output_best_effort_buffer>
 800dafa:	bf00      	nop

0800dafc <uxr_create_output_reliable_stream>:
 800dafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dafe:	b085      	sub	sp, #20
 800db00:	4604      	mov	r4, r0
 800db02:	460d      	mov	r5, r1
 800db04:	4616      	mov	r6, r2
 800db06:	461f      	mov	r7, r3
 800db08:	f000 ffc4 	bl	800ea94 <uxr_session_header_offset>
 800db0c:	463b      	mov	r3, r7
 800db0e:	9000      	str	r0, [sp, #0]
 800db10:	4632      	mov	r2, r6
 800db12:	4629      	mov	r1, r5
 800db14:	f104 0008 	add.w	r0, r4, #8
 800db18:	f001 fcee 	bl	800f4f8 <uxr_add_output_reliable_buffer>
 800db1c:	b005      	add	sp, #20
 800db1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db20 <uxr_create_input_best_effort_stream>:
 800db20:	b082      	sub	sp, #8
 800db22:	3008      	adds	r0, #8
 800db24:	b002      	add	sp, #8
 800db26:	f001 bd01 	b.w	800f52c <uxr_add_input_best_effort_buffer>
 800db2a:	bf00      	nop

0800db2c <uxr_create_input_reliable_stream>:
 800db2c:	b510      	push	{r4, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	4c03      	ldr	r4, [pc, #12]	@ (800db40 <uxr_create_input_reliable_stream+0x14>)
 800db32:	9400      	str	r4, [sp, #0]
 800db34:	3008      	adds	r0, #8
 800db36:	f001 fd0f 	bl	800f558 <uxr_add_input_reliable_buffer>
 800db3a:	b004      	add	sp, #16
 800db3c:	bd10      	pop	{r4, pc}
 800db3e:	bf00      	nop
 800db40:	0800d95d 	.word	0x0800d95d

0800db44 <uxr_epoch_nanos>:
 800db44:	b510      	push	{r4, lr}
 800db46:	4604      	mov	r4, r0
 800db48:	f001 fdbc 	bl	800f6c4 <uxr_nanos>
 800db4c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800db50:	1ac0      	subs	r0, r0, r3
 800db52:	eb61 0102 	sbc.w	r1, r1, r2
 800db56:	bd10      	pop	{r4, pc}

0800db58 <uxr_flash_output_streams>:
 800db58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db5c:	7e03      	ldrb	r3, [r0, #24]
 800db5e:	b084      	sub	sp, #16
 800db60:	4604      	mov	r4, r0
 800db62:	b373      	cbz	r3, 800dbc2 <uxr_flash_output_streams+0x6a>
 800db64:	2500      	movs	r5, #0
 800db66:	f100 0908 	add.w	r9, r0, #8
 800db6a:	f10d 0802 	add.w	r8, sp, #2
 800db6e:	4628      	mov	r0, r5
 800db70:	af03      	add	r7, sp, #12
 800db72:	ae02      	add	r6, sp, #8
 800db74:	e006      	b.n	800db84 <uxr_flash_output_streams+0x2c>
 800db76:	7e23      	ldrb	r3, [r4, #24]
 800db78:	3501      	adds	r5, #1
 800db7a:	b2e8      	uxtb	r0, r5
 800db7c:	4283      	cmp	r3, r0
 800db7e:	f109 0910 	add.w	r9, r9, #16
 800db82:	d91e      	bls.n	800dbc2 <uxr_flash_output_streams+0x6a>
 800db84:	2201      	movs	r2, #1
 800db86:	4611      	mov	r1, r2
 800db88:	f001 fc20 	bl	800f3cc <uxr_stream_id>
 800db8c:	4643      	mov	r3, r8
 800db8e:	4684      	mov	ip, r0
 800db90:	463a      	mov	r2, r7
 800db92:	4631      	mov	r1, r6
 800db94:	4648      	mov	r0, r9
 800db96:	f8cd c004 	str.w	ip, [sp, #4]
 800db9a:	f008 fc25 	bl	80163e8 <uxr_prepare_best_effort_buffer_to_send>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	d0e9      	beq.n	800db76 <uxr_flash_output_streams+0x1e>
 800dba2:	9b02      	ldr	r3, [sp, #8]
 800dba4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dba8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dbac:	4620      	mov	r0, r4
 800dbae:	f000 ff1d 	bl	800e9ec <uxr_stamp_session_header>
 800dbb2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dbb4:	9a03      	ldr	r2, [sp, #12]
 800dbb6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800dbba:	9902      	ldr	r1, [sp, #8]
 800dbbc:	6818      	ldr	r0, [r3, #0]
 800dbbe:	47d0      	blx	sl
 800dbc0:	e7d9      	b.n	800db76 <uxr_flash_output_streams+0x1e>
 800dbc2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dbc6:	b37b      	cbz	r3, 800dc28 <uxr_flash_output_streams+0xd0>
 800dbc8:	f04f 0900 	mov.w	r9, #0
 800dbcc:	f104 0520 	add.w	r5, r4, #32
 800dbd0:	f10d 0802 	add.w	r8, sp, #2
 800dbd4:	af03      	add	r7, sp, #12
 800dbd6:	ae02      	add	r6, sp, #8
 800dbd8:	4648      	mov	r0, r9
 800dbda:	2201      	movs	r2, #1
 800dbdc:	2102      	movs	r1, #2
 800dbde:	f001 fbf5 	bl	800f3cc <uxr_stream_id>
 800dbe2:	9001      	str	r0, [sp, #4]
 800dbe4:	e00e      	b.n	800dc04 <uxr_flash_output_streams+0xac>
 800dbe6:	9b02      	ldr	r3, [sp, #8]
 800dbe8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dbec:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f000 fefb 	bl	800e9ec <uxr_stamp_session_header>
 800dbf6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dbf8:	9a03      	ldr	r2, [sp, #12]
 800dbfa:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800dbfe:	9902      	ldr	r1, [sp, #8]
 800dc00:	6818      	ldr	r0, [r3, #0]
 800dc02:	47d0      	blx	sl
 800dc04:	4643      	mov	r3, r8
 800dc06:	463a      	mov	r2, r7
 800dc08:	4631      	mov	r1, r6
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	f008 fe00 	bl	8016810 <uxr_prepare_next_reliable_buffer_to_send>
 800dc10:	2800      	cmp	r0, #0
 800dc12:	d1e8      	bne.n	800dbe6 <uxr_flash_output_streams+0x8e>
 800dc14:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800dc18:	f109 0901 	add.w	r9, r9, #1
 800dc1c:	fa5f f089 	uxtb.w	r0, r9
 800dc20:	4283      	cmp	r3, r0
 800dc22:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800dc26:	d8d8      	bhi.n	800dbda <uxr_flash_output_streams+0x82>
 800dc28:	b004      	add	sp, #16
 800dc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2e:	bf00      	nop

0800dc30 <read_submessage_info>:
 800dc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc34:	460d      	mov	r5, r1
 800dc36:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dc3a:	4669      	mov	r1, sp
 800dc3c:	4607      	mov	r7, r0
 800dc3e:	4628      	mov	r0, r5
 800dc40:	f002 fbb6 	bl	80103b0 <uxr_deserialize_BaseObjectReply>
 800dc44:	a902      	add	r1, sp, #8
 800dc46:	4604      	mov	r4, r0
 800dc48:	4628      	mov	r0, r5
 800dc4a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800dc4e:	f7fd ffa5 	bl	800bb9c <ucdr_deserialize_bool>
 800dc52:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800dc56:	4004      	ands	r4, r0
 800dc58:	b2e4      	uxtb	r4, r4
 800dc5a:	b95b      	cbnz	r3, 800dc74 <read_submessage_info+0x44>
 800dc5c:	a987      	add	r1, sp, #540	@ 0x21c
 800dc5e:	4628      	mov	r0, r5
 800dc60:	f7fd ff9c 	bl	800bb9c <ucdr_deserialize_bool>
 800dc64:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800dc68:	4606      	mov	r6, r0
 800dc6a:	b94b      	cbnz	r3, 800dc80 <read_submessage_info+0x50>
 800dc6c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800dc70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc74:	a903      	add	r1, sp, #12
 800dc76:	4628      	mov	r0, r5
 800dc78:	f002 fa5c 	bl	8010134 <uxr_deserialize_ObjectVariant>
 800dc7c:	4004      	ands	r4, r0
 800dc7e:	e7ed      	b.n	800dc5c <read_submessage_info+0x2c>
 800dc80:	a988      	add	r1, sp, #544	@ 0x220
 800dc82:	4628      	mov	r0, r5
 800dc84:	f7fd ffb8 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 800dc88:	4234      	tst	r4, r6
 800dc8a:	d0ef      	beq.n	800dc6c <read_submessage_info+0x3c>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	d0ed      	beq.n	800dc6c <read_submessage_info+0x3c>
 800dc90:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800dc94:	2b0d      	cmp	r3, #13
 800dc96:	d1e9      	bne.n	800dc6c <read_submessage_info+0x3c>
 800dc98:	a98a      	add	r1, sp, #552	@ 0x228
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	f7fe fd48 	bl	800c730 <ucdr_deserialize_int16_t>
 800dca0:	b140      	cbz	r0, 800dcb4 <read_submessage_info+0x84>
 800dca2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	dd07      	ble.n	800dcba <read_submessage_info+0x8a>
 800dcaa:	f1b8 0f00 	cmp.w	r8, #0
 800dcae:	bf0c      	ite	eq
 800dcb0:	2002      	moveq	r0, #2
 800dcb2:	2001      	movne	r0, #1
 800dcb4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800dcb8:	e7d8      	b.n	800dc6c <read_submessage_info+0x3c>
 800dcba:	2000      	movs	r0, #0
 800dcbc:	e7fa      	b.n	800dcb4 <read_submessage_info+0x84>
 800dcbe:	bf00      	nop

0800dcc0 <read_submessage_list>:
 800dcc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcc4:	b097      	sub	sp, #92	@ 0x5c
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	460d      	mov	r5, r1
 800dcca:	9209      	str	r2, [sp, #36]	@ 0x24
 800dccc:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800dcd0:	aa0c      	add	r2, sp, #48	@ 0x30
 800dcd2:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	f001 fcae 	bl	800f638 <uxr_read_submessage_header>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	f000 812c 	beq.w	800df3a <read_submessage_list+0x27a>
 800dce2:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800dce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dce8:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800dcec:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800dcf0:	3902      	subs	r1, #2
 800dcf2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800dcf6:	290d      	cmp	r1, #13
 800dcf8:	d8e8      	bhi.n	800dccc <read_submessage_list+0xc>
 800dcfa:	a201      	add	r2, pc, #4	@ (adr r2, 800dd00 <read_submessage_list+0x40>)
 800dcfc:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800dd00:	0800df31 	.word	0x0800df31
 800dd04:	0800dccd 	.word	0x0800dccd
 800dd08:	0800df21 	.word	0x0800df21
 800dd0c:	0800dec3 	.word	0x0800dec3
 800dd10:	0800deb9 	.word	0x0800deb9
 800dd14:	0800dccd 	.word	0x0800dccd
 800dd18:	0800dccd 	.word	0x0800dccd
 800dd1c:	0800de3d 	.word	0x0800de3d
 800dd20:	0800ddd5 	.word	0x0800ddd5
 800dd24:	0800dd95 	.word	0x0800dd95
 800dd28:	0800dccd 	.word	0x0800dccd
 800dd2c:	0800dccd 	.word	0x0800dccd
 800dd30:	0800dccd 	.word	0x0800dccd
 800dd34:	0800dd39 	.word	0x0800dd39
 800dd38:	a910      	add	r1, sp, #64	@ 0x40
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	f002 fd7c 	bl	8010838 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800dd40:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800dd44:	2e00      	cmp	r6, #0
 800dd46:	f000 8100 	beq.w	800df4a <read_submessage_list+0x28a>
 800dd4a:	f001 fcbb 	bl	800f6c4 <uxr_nanos>
 800dd4e:	f04f 0800 	mov.w	r8, #0
 800dd52:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800dd54:	4602      	mov	r2, r0
 800dd56:	460b      	mov	r3, r1
 800dd58:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800dd5a:	4990      	ldr	r1, [pc, #576]	@ (800df9c <read_submessage_list+0x2dc>)
 800dd5c:	46c4      	mov	ip, r8
 800dd5e:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800dd62:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800dd66:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800dd68:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800dd6a:	46c6      	mov	lr, r8
 800dd6c:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800dd70:	46bc      	mov	ip, r7
 800dd72:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800dd76:	fbc0 7801 	smlal	r7, r8, r0, r1
 800dd7a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800dd7e:	e9cd 7800 	strd	r7, r8, [sp]
 800dd82:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800dd86:	9106      	str	r1, [sp, #24]
 800dd88:	4620      	mov	r0, r4
 800dd8a:	47b0      	blx	r6
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800dd92:	e79b      	b.n	800dccc <read_submessage_list+0xc>
 800dd94:	a910      	add	r1, sp, #64	@ 0x40
 800dd96:	4628      	mov	r0, r5
 800dd98:	f002 fd2e 	bl	80107f8 <uxr_deserialize_HEARTBEAT_Payload>
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800dda2:	f001 fb2f 	bl	800f404 <uxr_stream_id_from_raw>
 800dda6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ddaa:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ddac:	4631      	mov	r1, r6
 800ddae:	f104 0008 	add.w	r0, r4, #8
 800ddb2:	f001 fc07 	bl	800f5c4 <uxr_get_input_reliable_stream>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d088      	beq.n	800dccc <read_submessage_list+0xc>
 800ddba:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800ddbe:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800ddc2:	f008 fa81 	bl	80162c8 <uxr_process_heartbeat>
 800ddc6:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800ddca:	4632      	mov	r2, r6
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f7ff fe1d 	bl	800da0c <write_submessage_acknack.isra.0>
 800ddd2:	e77b      	b.n	800dccc <read_submessage_list+0xc>
 800ddd4:	a910      	add	r1, sp, #64	@ 0x40
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	f002 fce6 	bl	80107a8 <uxr_deserialize_ACKNACK_Payload>
 800dddc:	2100      	movs	r1, #0
 800ddde:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800dde2:	f001 fb0f 	bl	800f404 <uxr_stream_id_from_raw>
 800dde6:	900d      	str	r0, [sp, #52]	@ 0x34
 800dde8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ddec:	f104 0008 	add.w	r0, r4, #8
 800ddf0:	f001 fbd4 	bl	800f59c <uxr_get_output_reliable_stream>
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	f43f af68 	beq.w	800dccc <read_submessage_list+0xc>
 800ddfc:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800de00:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800de04:	ba49      	rev16	r1, r1
 800de06:	b289      	uxth	r1, r1
 800de08:	f008 fdac 	bl	8016964 <uxr_process_acknack>
 800de0c:	4630      	mov	r0, r6
 800de0e:	f008 fd6d 	bl	80168ec <uxr_begin_output_nack_buffer_it>
 800de12:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800de16:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800de1a:	e005      	b.n	800de28 <read_submessage_list+0x168>
 800de1c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800de1e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800de20:	685f      	ldr	r7, [r3, #4]
 800de22:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800de24:	6818      	ldr	r0, [r3, #0]
 800de26:	47b8      	blx	r7
 800de28:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800de2c:	aa0f      	add	r2, sp, #60	@ 0x3c
 800de2e:	4641      	mov	r1, r8
 800de30:	4630      	mov	r0, r6
 800de32:	f008 fd5d 	bl	80168f0 <uxr_next_reliable_nack_buffer_to_send>
 800de36:	2800      	cmp	r0, #0
 800de38:	d1f0      	bne.n	800de1c <read_submessage_list+0x15c>
 800de3a:	e747      	b.n	800dccc <read_submessage_list+0xc>
 800de3c:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800de40:	4641      	mov	r1, r8
 800de42:	900d      	str	r0, [sp, #52]	@ 0x34
 800de44:	4628      	mov	r0, r5
 800de46:	f002 fa15 	bl	8010274 <uxr_deserialize_BaseObjectRequest>
 800de4a:	3e04      	subs	r6, #4
 800de4c:	4640      	mov	r0, r8
 800de4e:	a90f      	add	r1, sp, #60	@ 0x3c
 800de50:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800de54:	f000 fe44 	bl	800eae0 <uxr_parse_base_object_request>
 800de58:	fa1f f886 	uxth.w	r8, r6
 800de5c:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800de60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800de62:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800de66:	9110      	str	r1, [sp, #64]	@ 0x40
 800de68:	f007 070e 	and.w	r7, r7, #14
 800de6c:	b136      	cbz	r6, 800de7c <read_submessage_list+0x1bc>
 800de6e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	464a      	mov	r2, r9
 800de76:	2300      	movs	r3, #0
 800de78:	4620      	mov	r0, r4
 800de7a:	47b0      	blx	r6
 800de7c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800de7e:	b16b      	cbz	r3, 800de9c <read_submessage_list+0x1dc>
 800de80:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800de82:	2100      	movs	r1, #0
 800de84:	3802      	subs	r0, #2
 800de86:	e002      	b.n	800de8e <read_submessage_list+0x1ce>
 800de88:	3101      	adds	r1, #1
 800de8a:	428b      	cmp	r3, r1
 800de8c:	d006      	beq.n	800de9c <read_submessage_list+0x1dc>
 800de8e:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800de92:	454e      	cmp	r6, r9
 800de94:	d1f8      	bne.n	800de88 <read_submessage_list+0x1c8>
 800de96:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800de98:	2200      	movs	r2, #0
 800de9a:	545a      	strb	r2, [r3, r1]
 800de9c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800dea0:	9102      	str	r1, [sp, #8]
 800dea2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dea4:	9101      	str	r1, [sp, #4]
 800dea6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dea8:	9100      	str	r1, [sp, #0]
 800deaa:	463b      	mov	r3, r7
 800deac:	4642      	mov	r2, r8
 800deae:	4629      	mov	r1, r5
 800deb0:	4620      	mov	r0, r4
 800deb2:	f008 fdd7 	bl	8016a64 <read_submessage_format>
 800deb6:	e709      	b.n	800dccc <read_submessage_list+0xc>
 800deb8:	4629      	mov	r1, r5
 800deba:	4620      	mov	r0, r4
 800debc:	f7ff feb8 	bl	800dc30 <read_submessage_info>
 800dec0:	e704      	b.n	800dccc <read_submessage_list+0xc>
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d03c      	beq.n	800df40 <read_submessage_list+0x280>
 800dec6:	a910      	add	r1, sp, #64	@ 0x40
 800dec8:	4628      	mov	r0, r5
 800deca:	f002 fbc9 	bl	8010660 <uxr_deserialize_STATUS_Payload>
 800dece:	a90e      	add	r1, sp, #56	@ 0x38
 800ded0:	a810      	add	r0, sp, #64	@ 0x40
 800ded2:	aa0d      	add	r2, sp, #52	@ 0x34
 800ded4:	f000 fe04 	bl	800eae0 <uxr_parse_base_object_request>
 800ded8:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800dedc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dede:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800dee2:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800dee6:	910f      	str	r1, [sp, #60]	@ 0x3c
 800dee8:	b136      	cbz	r6, 800def8 <read_submessage_list+0x238>
 800deea:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	463a      	mov	r2, r7
 800def2:	4643      	mov	r3, r8
 800def4:	4620      	mov	r0, r4
 800def6:	47b0      	blx	r6
 800def8:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800defa:	2a00      	cmp	r2, #0
 800defc:	f43f aee6 	beq.w	800dccc <read_submessage_list+0xc>
 800df00:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800df02:	2100      	movs	r1, #0
 800df04:	3802      	subs	r0, #2
 800df06:	e003      	b.n	800df10 <read_submessage_list+0x250>
 800df08:	3101      	adds	r1, #1
 800df0a:	4291      	cmp	r1, r2
 800df0c:	f43f aede 	beq.w	800dccc <read_submessage_list+0xc>
 800df10:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800df14:	42be      	cmp	r6, r7
 800df16:	d1f7      	bne.n	800df08 <read_submessage_list+0x248>
 800df18:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800df1a:	f803 8001 	strb.w	r8, [r3, r1]
 800df1e:	e6d5      	b.n	800dccc <read_submessage_list+0xc>
 800df20:	2b00      	cmp	r3, #0
 800df22:	f47f aed3 	bne.w	800dccc <read_submessage_list+0xc>
 800df26:	4629      	mov	r1, r5
 800df28:	4620      	mov	r0, r4
 800df2a:	f000 fd21 	bl	800e970 <uxr_read_create_session_status>
 800df2e:	e6cd      	b.n	800dccc <read_submessage_list+0xc>
 800df30:	4629      	mov	r1, r5
 800df32:	4620      	mov	r0, r4
 800df34:	f7ff fd34 	bl	800d9a0 <read_submessage_get_info>
 800df38:	e6c8      	b.n	800dccc <read_submessage_list+0xc>
 800df3a:	b017      	add	sp, #92	@ 0x5c
 800df3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df40:	4629      	mov	r1, r5
 800df42:	4620      	mov	r0, r4
 800df44:	f000 fd22 	bl	800e98c <uxr_read_delete_session_status>
 800df48:	e6c0      	b.n	800dccc <read_submessage_list+0xc>
 800df4a:	f001 fbbb 	bl	800f6c4 <uxr_nanos>
 800df4e:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800df52:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800df9c <read_submessage_list+0x2dc>
 800df56:	4633      	mov	r3, r6
 800df58:	fbc7 230c 	smlal	r2, r3, r7, ip
 800df5c:	1810      	adds	r0, r2, r0
 800df5e:	eb43 0301 	adc.w	r3, r3, r1
 800df62:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800df66:	46b6      	mov	lr, r6
 800df68:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800df6c:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800df70:	fbc1 760c 	smlal	r7, r6, r1, ip
 800df74:	19d2      	adds	r2, r2, r7
 800df76:	eb4e 0106 	adc.w	r1, lr, r6
 800df7a:	1a80      	subs	r0, r0, r2
 800df7c:	eb63 0301 	sbc.w	r3, r3, r1
 800df80:	0fda      	lsrs	r2, r3, #31
 800df82:	1812      	adds	r2, r2, r0
 800df84:	f143 0300 	adc.w	r3, r3, #0
 800df88:	0852      	lsrs	r2, r2, #1
 800df8a:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800df8e:	105b      	asrs	r3, r3, #1
 800df90:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800df94:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800df98:	e6f8      	b.n	800dd8c <read_submessage_list+0xcc>
 800df9a:	bf00      	nop
 800df9c:	3b9aca00 	.word	0x3b9aca00

0800dfa0 <listen_message_reliably>:
 800dfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa4:	f1b1 0b00 	subs.w	fp, r1, #0
 800dfa8:	b09f      	sub	sp, #124	@ 0x7c
 800dfaa:	4606      	mov	r6, r0
 800dfac:	bfb8      	it	lt
 800dfae:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800dfb2:	f001 fb6d 	bl	800f690 <uxr_millis>
 800dfb6:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800dfba:	9003      	str	r0, [sp, #12]
 800dfbc:	9104      	str	r1, [sp, #16]
 800dfbe:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800dfc2:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	f000 80a4 	beq.w	800e114 <listen_message_reliably+0x174>
 800dfcc:	2500      	movs	r5, #0
 800dfce:	e9cd b806 	strd	fp, r8, [sp, #24]
 800dfd2:	f106 0420 	add.w	r4, r6, #32
 800dfd6:	f04f 37ff 	mov.w	r7, #4294967295
 800dfda:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800dfde:	4628      	mov	r0, r5
 800dfe0:	e011      	b.n	800e006 <listen_message_reliably+0x66>
 800dfe2:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800dfe6:	42ba      	cmp	r2, r7
 800dfe8:	eb73 0109 	sbcs.w	r1, r3, r9
 800dfec:	bfb8      	it	lt
 800dfee:	4699      	movlt	r9, r3
 800dff0:	f105 0501 	add.w	r5, r5, #1
 800dff4:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800dff8:	b2e8      	uxtb	r0, r5
 800dffa:	bfb8      	it	lt
 800dffc:	4617      	movlt	r7, r2
 800dffe:	4283      	cmp	r3, r0
 800e000:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800e004:	d94a      	bls.n	800e09c <listen_message_reliably+0xfc>
 800e006:	2201      	movs	r2, #1
 800e008:	2102      	movs	r1, #2
 800e00a:	f001 f9df 	bl	800f3cc <uxr_stream_id>
 800e00e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800e012:	4601      	mov	r1, r0
 800e014:	4620      	mov	r0, r4
 800e016:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e018:	f008 fc38 	bl	801688c <uxr_update_output_stream_heartbeat_timestamp>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d0e0      	beq.n	800dfe2 <listen_message_reliably+0x42>
 800e020:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800e024:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800e028:	9305      	str	r3, [sp, #20]
 800e02a:	4630      	mov	r0, r6
 800e02c:	f000 fd32 	bl	800ea94 <uxr_session_header_offset>
 800e030:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800e034:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800e038:	9000      	str	r0, [sp, #0]
 800e03a:	a90e      	add	r1, sp, #56	@ 0x38
 800e03c:	4640      	mov	r0, r8
 800e03e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800e042:	2300      	movs	r3, #0
 800e044:	2211      	movs	r2, #17
 800e046:	f7ff f86f 	bl	800d128 <ucdr_init_buffer_origin_offset>
 800e04a:	2300      	movs	r3, #0
 800e04c:	2205      	movs	r2, #5
 800e04e:	210b      	movs	r1, #11
 800e050:	4640      	mov	r0, r8
 800e052:	f001 fad7 	bl	800f604 <uxr_buffer_submessage_header>
 800e056:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800e05a:	2101      	movs	r1, #1
 800e05c:	f008 fdd6 	bl	8016c0c <uxr_seq_num_add>
 800e060:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800e064:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800e068:	4602      	mov	r2, r0
 800e06a:	9b05      	ldr	r3, [sp, #20]
 800e06c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800e070:	a90c      	add	r1, sp, #48	@ 0x30
 800e072:	4640      	mov	r0, r8
 800e074:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800e078:	f002 fbaa 	bl	80107d0 <uxr_serialize_HEARTBEAT_Payload>
 800e07c:	2200      	movs	r2, #0
 800e07e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e080:	4611      	mov	r1, r2
 800e082:	4630      	mov	r0, r6
 800e084:	f000 fcb2 	bl	800e9ec <uxr_stamp_session_header>
 800e088:	4640      	mov	r0, r8
 800e08a:	f7ff f88b 	bl	800d1a4 <ucdr_buffer_length>
 800e08e:	4602      	mov	r2, r0
 800e090:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800e092:	a90e      	add	r1, sp, #56	@ 0x38
 800e094:	e9d0 0300 	ldrd	r0, r3, [r0]
 800e098:	4798      	blx	r3
 800e09a:	e7a2      	b.n	800dfe2 <listen_message_reliably+0x42>
 800e09c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e0a0:	4599      	cmp	r9, r3
 800e0a2:	bf08      	it	eq
 800e0a4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 800e0a8:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800e0ac:	d032      	beq.n	800e114 <listen_message_reliably+0x174>
 800e0ae:	9b03      	ldr	r3, [sp, #12]
 800e0b0:	1aff      	subs	r7, r7, r3
 800e0b2:	2f00      	cmp	r7, #0
 800e0b4:	bf08      	it	eq
 800e0b6:	2701      	moveq	r7, #1
 800e0b8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800e0ba:	455f      	cmp	r7, fp
 800e0bc:	bfa8      	it	ge
 800e0be:	465f      	movge	r7, fp
 800e0c0:	689c      	ldr	r4, [r3, #8]
 800e0c2:	6818      	ldr	r0, [r3, #0]
 800e0c4:	4642      	mov	r2, r8
 800e0c6:	463b      	mov	r3, r7
 800e0c8:	4651      	mov	r1, sl
 800e0ca:	47a0      	blx	r4
 800e0cc:	ebab 0b07 	sub.w	fp, fp, r7
 800e0d0:	b958      	cbnz	r0, 800e0ea <listen_message_reliably+0x14a>
 800e0d2:	f1bb 0f00 	cmp.w	fp, #0
 800e0d6:	dd44      	ble.n	800e162 <listen_message_reliably+0x1c2>
 800e0d8:	f001 fada 	bl	800f690 <uxr_millis>
 800e0dc:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d03c      	beq.n	800e15e <listen_message_reliably+0x1be>
 800e0e4:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800e0e8:	e770      	b.n	800dfcc <listen_message_reliably+0x2c>
 800e0ea:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	a80e      	add	r0, sp, #56	@ 0x38
 800e0f2:	f7ff f82b 	bl	800d14c <ucdr_init_buffer>
 800e0f6:	2500      	movs	r5, #0
 800e0f8:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800e0fc:	aa08      	add	r2, sp, #32
 800e0fe:	a90e      	add	r1, sp, #56	@ 0x38
 800e100:	4630      	mov	r0, r6
 800e102:	f88d 5020 	strb.w	r5, [sp, #32]
 800e106:	f000 fc87 	bl	800ea18 <uxr_read_session_header>
 800e10a:	b928      	cbnz	r0, 800e118 <listen_message_reliably+0x178>
 800e10c:	4620      	mov	r0, r4
 800e10e:	b01f      	add	sp, #124	@ 0x7c
 800e110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e114:	465f      	mov	r7, fp
 800e116:	e7cc      	b.n	800e0b2 <listen_message_reliably+0x112>
 800e118:	4629      	mov	r1, r5
 800e11a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800e11e:	f001 f971 	bl	800f404 <uxr_stream_id_from_raw>
 800e122:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800e126:	2f01      	cmp	r7, #1
 800e128:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800e12c:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800e130:	fa5f f880 	uxtb.w	r8, r0
 800e134:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800e138:	d050      	beq.n	800e1dc <listen_message_reliably+0x23c>
 800e13a:	2f02      	cmp	r7, #2
 800e13c:	d016      	beq.n	800e16c <listen_message_reliably+0x1cc>
 800e13e:	2f00      	cmp	r7, #0
 800e140:	d1e4      	bne.n	800e10c <listen_message_reliably+0x16c>
 800e142:	4639      	mov	r1, r7
 800e144:	4638      	mov	r0, r7
 800e146:	f001 f95d 	bl	800f404 <uxr_stream_id_from_raw>
 800e14a:	a90e      	add	r1, sp, #56	@ 0x38
 800e14c:	4602      	mov	r2, r0
 800e14e:	4630      	mov	r0, r6
 800e150:	920c      	str	r2, [sp, #48]	@ 0x30
 800e152:	f7ff fdb5 	bl	800dcc0 <read_submessage_list>
 800e156:	4620      	mov	r0, r4
 800e158:	b01f      	add	sp, #124	@ 0x7c
 800e15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e15e:	465f      	mov	r7, fp
 800e160:	e7aa      	b.n	800e0b8 <listen_message_reliably+0x118>
 800e162:	4604      	mov	r4, r0
 800e164:	4620      	mov	r0, r4
 800e166:	b01f      	add	sp, #124	@ 0x7c
 800e168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16c:	4629      	mov	r1, r5
 800e16e:	f106 0008 	add.w	r0, r6, #8
 800e172:	f001 fa27 	bl	800f5c4 <uxr_get_input_reliable_stream>
 800e176:	4681      	mov	r9, r0
 800e178:	b338      	cbz	r0, 800e1ca <listen_message_reliably+0x22a>
 800e17a:	a80e      	add	r0, sp, #56	@ 0x38
 800e17c:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800e180:	f7ff f814 	bl	800d1ac <ucdr_buffer_remaining>
 800e184:	4603      	mov	r3, r0
 800e186:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800e18a:	9000      	str	r0, [sp, #0]
 800e18c:	465a      	mov	r2, fp
 800e18e:	4651      	mov	r1, sl
 800e190:	4648      	mov	r0, r9
 800e192:	f007 ffa7 	bl	80160e4 <uxr_receive_reliable_message>
 800e196:	b1c0      	cbz	r0, 800e1ca <listen_message_reliably+0x22a>
 800e198:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800e19c:	b393      	cbz	r3, 800e204 <listen_message_reliably+0x264>
 800e19e:	af16      	add	r7, sp, #88	@ 0x58
 800e1a0:	f04f 0a02 	mov.w	sl, #2
 800e1a4:	e00a      	b.n	800e1bc <listen_message_reliably+0x21c>
 800e1a6:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800e1aa:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800e1ae:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800e1b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e1b4:	4639      	mov	r1, r7
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	f7ff fd82 	bl	800dcc0 <read_submessage_list>
 800e1bc:	2204      	movs	r2, #4
 800e1be:	4639      	mov	r1, r7
 800e1c0:	4648      	mov	r0, r9
 800e1c2:	f008 f809 	bl	80161d8 <uxr_next_input_reliable_buffer_available>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d1ed      	bne.n	800e1a6 <listen_message_reliably+0x206>
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	462a      	mov	r2, r5
 800e1ce:	4641      	mov	r1, r8
 800e1d0:	f7ff fc1c 	bl	800da0c <write_submessage_acknack.isra.0>
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	b01f      	add	sp, #124	@ 0x7c
 800e1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1dc:	4629      	mov	r1, r5
 800e1de:	f106 0008 	add.w	r0, r6, #8
 800e1e2:	f001 f9e5 	bl	800f5b0 <uxr_get_input_best_effort_stream>
 800e1e6:	2800      	cmp	r0, #0
 800e1e8:	d090      	beq.n	800e10c <listen_message_reliably+0x16c>
 800e1ea:	4651      	mov	r1, sl
 800e1ec:	f007 feea 	bl	8015fc4 <uxr_receive_best_effort_message>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	d08b      	beq.n	800e10c <listen_message_reliably+0x16c>
 800e1f4:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800e1f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e1fa:	a90e      	add	r1, sp, #56	@ 0x38
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	f7ff fd5f 	bl	800dcc0 <read_submessage_list>
 800e202:	e783      	b.n	800e10c <listen_message_reliably+0x16c>
 800e204:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800e208:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e20a:	a90e      	add	r1, sp, #56	@ 0x38
 800e20c:	4630      	mov	r0, r6
 800e20e:	f7ff fd57 	bl	800dcc0 <read_submessage_list>
 800e212:	e7c4      	b.n	800e19e <listen_message_reliably+0x1fe>

0800e214 <uxr_run_session_timeout>:
 800e214:	b570      	push	{r4, r5, r6, lr}
 800e216:	4604      	mov	r4, r0
 800e218:	460d      	mov	r5, r1
 800e21a:	f001 fa39 	bl	800f690 <uxr_millis>
 800e21e:	4606      	mov	r6, r0
 800e220:	4620      	mov	r0, r4
 800e222:	f7ff fc99 	bl	800db58 <uxr_flash_output_streams>
 800e226:	4629      	mov	r1, r5
 800e228:	4620      	mov	r0, r4
 800e22a:	f7ff feb9 	bl	800dfa0 <listen_message_reliably>
 800e22e:	f001 fa2f 	bl	800f690 <uxr_millis>
 800e232:	1b81      	subs	r1, r0, r6
 800e234:	1a69      	subs	r1, r5, r1
 800e236:	2900      	cmp	r1, #0
 800e238:	dcf6      	bgt.n	800e228 <uxr_run_session_timeout+0x14>
 800e23a:	f104 0008 	add.w	r0, r4, #8
 800e23e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e242:	f001 b9c9 	b.w	800f5d8 <uxr_output_streams_confirmed>
 800e246:	bf00      	nop

0800e248 <uxr_run_session_until_data>:
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	4604      	mov	r4, r0
 800e24c:	460d      	mov	r5, r1
 800e24e:	f001 fa1f 	bl	800f690 <uxr_millis>
 800e252:	4606      	mov	r6, r0
 800e254:	4620      	mov	r0, r4
 800e256:	f7ff fc7f 	bl	800db58 <uxr_flash_output_streams>
 800e25a:	2300      	movs	r3, #0
 800e25c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800e260:	4629      	mov	r1, r5
 800e262:	e005      	b.n	800e270 <uxr_run_session_until_data+0x28>
 800e264:	f001 fa14 	bl	800f690 <uxr_millis>
 800e268:	1b81      	subs	r1, r0, r6
 800e26a:	1a69      	subs	r1, r5, r1
 800e26c:	2900      	cmp	r1, #0
 800e26e:	dd07      	ble.n	800e280 <uxr_run_session_until_data+0x38>
 800e270:	4620      	mov	r0, r4
 800e272:	f7ff fe95 	bl	800dfa0 <listen_message_reliably>
 800e276:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d0f2      	beq.n	800e264 <uxr_run_session_until_data+0x1c>
 800e27e:	bd70      	pop	{r4, r5, r6, pc}
 800e280:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800e284:	bd70      	pop	{r4, r5, r6, pc}
 800e286:	bf00      	nop

0800e288 <uxr_run_session_until_confirm_delivery>:
 800e288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e28c:	4606      	mov	r6, r0
 800e28e:	460d      	mov	r5, r1
 800e290:	f001 f9fe 	bl	800f690 <uxr_millis>
 800e294:	4607      	mov	r7, r0
 800e296:	4630      	mov	r0, r6
 800e298:	f7ff fc5e 	bl	800db58 <uxr_flash_output_streams>
 800e29c:	2d00      	cmp	r5, #0
 800e29e:	db16      	blt.n	800e2ce <uxr_run_session_until_confirm_delivery+0x46>
 800e2a0:	462c      	mov	r4, r5
 800e2a2:	f106 0808 	add.w	r8, r6, #8
 800e2a6:	e008      	b.n	800e2ba <uxr_run_session_until_confirm_delivery+0x32>
 800e2a8:	4621      	mov	r1, r4
 800e2aa:	4630      	mov	r0, r6
 800e2ac:	f7ff fe78 	bl	800dfa0 <listen_message_reliably>
 800e2b0:	f001 f9ee 	bl	800f690 <uxr_millis>
 800e2b4:	1bc1      	subs	r1, r0, r7
 800e2b6:	1a6c      	subs	r4, r5, r1
 800e2b8:	d404      	bmi.n	800e2c4 <uxr_run_session_until_confirm_delivery+0x3c>
 800e2ba:	4640      	mov	r0, r8
 800e2bc:	f001 f98c 	bl	800f5d8 <uxr_output_streams_confirmed>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	d0f1      	beq.n	800e2a8 <uxr_run_session_until_confirm_delivery+0x20>
 800e2c4:	4640      	mov	r0, r8
 800e2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ca:	f001 b985 	b.w	800f5d8 <uxr_output_streams_confirmed>
 800e2ce:	f106 0808 	add.w	r8, r6, #8
 800e2d2:	e7f7      	b.n	800e2c4 <uxr_run_session_until_confirm_delivery+0x3c>

0800e2d4 <uxr_run_session_until_all_status>:
 800e2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2d8:	9c08      	ldr	r4, [sp, #32]
 800e2da:	4605      	mov	r5, r0
 800e2dc:	460f      	mov	r7, r1
 800e2de:	4690      	mov	r8, r2
 800e2e0:	461e      	mov	r6, r3
 800e2e2:	f7ff fc39 	bl	800db58 <uxr_flash_output_streams>
 800e2e6:	b124      	cbz	r4, 800e2f2 <uxr_run_session_until_all_status+0x1e>
 800e2e8:	4622      	mov	r2, r4
 800e2ea:	21ff      	movs	r1, #255	@ 0xff
 800e2ec:	4630      	mov	r0, r6
 800e2ee:	f00a f969 	bl	80185c4 <memset>
 800e2f2:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800e2f6:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800e2f8:	f001 f9ca 	bl	800f690 <uxr_millis>
 800e2fc:	4639      	mov	r1, r7
 800e2fe:	4681      	mov	r9, r0
 800e300:	4628      	mov	r0, r5
 800e302:	f7ff fe4d 	bl	800dfa0 <listen_message_reliably>
 800e306:	f001 f9c3 	bl	800f690 <uxr_millis>
 800e30a:	eba0 0109 	sub.w	r1, r0, r9
 800e30e:	1a79      	subs	r1, r7, r1
 800e310:	b36c      	cbz	r4, 800e36e <uxr_run_session_until_all_status+0x9a>
 800e312:	1e70      	subs	r0, r6, #1
 800e314:	46c6      	mov	lr, r8
 800e316:	1902      	adds	r2, r0, r4
 800e318:	4684      	mov	ip, r0
 800e31a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e31e:	2bff      	cmp	r3, #255	@ 0xff
 800e320:	d007      	beq.n	800e332 <uxr_run_session_until_all_status+0x5e>
 800e322:	4594      	cmp	ip, r2
 800e324:	d00f      	beq.n	800e346 <uxr_run_session_until_all_status+0x72>
 800e326:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e32a:	2bff      	cmp	r3, #255	@ 0xff
 800e32c:	f10e 0e02 	add.w	lr, lr, #2
 800e330:	d1f7      	bne.n	800e322 <uxr_run_session_until_all_status+0x4e>
 800e332:	4594      	cmp	ip, r2
 800e334:	f8be 3000 	ldrh.w	r3, [lr]
 800e338:	d014      	beq.n	800e364 <uxr_run_session_until_all_status+0x90>
 800e33a:	f10e 0e02 	add.w	lr, lr, #2
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d0eb      	beq.n	800e31a <uxr_run_session_until_all_status+0x46>
 800e342:	2900      	cmp	r1, #0
 800e344:	dcdc      	bgt.n	800e300 <uxr_run_session_until_all_status+0x2c>
 800e346:	2300      	movs	r3, #0
 800e348:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800e34a:	e001      	b.n	800e350 <uxr_run_session_until_all_status+0x7c>
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d812      	bhi.n	800e376 <uxr_run_session_until_all_status+0xa2>
 800e350:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e354:	4290      	cmp	r0, r2
 800e356:	d1f9      	bne.n	800e34c <uxr_run_session_until_all_status+0x78>
 800e358:	2b01      	cmp	r3, #1
 800e35a:	bf8c      	ite	hi
 800e35c:	2000      	movhi	r0, #0
 800e35e:	2001      	movls	r0, #1
 800e360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e364:	2900      	cmp	r1, #0
 800e366:	ddee      	ble.n	800e346 <uxr_run_session_until_all_status+0x72>
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d1c9      	bne.n	800e300 <uxr_run_session_until_all_status+0x2c>
 800e36c:	e7eb      	b.n	800e346 <uxr_run_session_until_all_status+0x72>
 800e36e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800e370:	2001      	movs	r0, #1
 800e372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e376:	2000      	movs	r0, #0
 800e378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e37c:	0000      	movs	r0, r0
	...

0800e380 <uxr_sync_session>:
 800e380:	b570      	push	{r4, r5, r6, lr}
 800e382:	b092      	sub	sp, #72	@ 0x48
 800e384:	4604      	mov	r4, r0
 800e386:	460d      	mov	r5, r1
 800e388:	f000 fb84 	bl	800ea94 <uxr_session_header_offset>
 800e38c:	2214      	movs	r2, #20
 800e38e:	eb0d 0102 	add.w	r1, sp, r2
 800e392:	9000      	str	r0, [sp, #0]
 800e394:	2300      	movs	r3, #0
 800e396:	a80a      	add	r0, sp, #40	@ 0x28
 800e398:	f7fe fec6 	bl	800d128 <ucdr_init_buffer_origin_offset>
 800e39c:	2300      	movs	r3, #0
 800e39e:	2208      	movs	r2, #8
 800e3a0:	210e      	movs	r1, #14
 800e3a2:	a80a      	add	r0, sp, #40	@ 0x28
 800e3a4:	f001 f92e 	bl	800f604 <uxr_buffer_submessage_header>
 800e3a8:	f001 f98c 	bl	800f6c4 <uxr_nanos>
 800e3ac:	a318      	add	r3, pc, #96	@ (adr r3, 800e410 <uxr_sync_session+0x90>)
 800e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b2:	f7f2 fa29 	bl	8000808 <__aeabi_ldivmod>
 800e3b6:	a903      	add	r1, sp, #12
 800e3b8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 800e3bc:	a80a      	add	r0, sp, #40	@ 0x28
 800e3be:	f002 fa2d 	bl	801081c <uxr_serialize_TIMESTAMP_Payload>
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	f000 fb0f 	bl	800e9ec <uxr_stamp_session_header>
 800e3ce:	a80a      	add	r0, sp, #40	@ 0x28
 800e3d0:	f7fe fee8 	bl	800d1a4 <ucdr_buffer_length>
 800e3d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	a905      	add	r1, sp, #20
 800e3da:	e9d3 0600 	ldrd	r0, r6, [r3]
 800e3de:	47b0      	blx	r6
 800e3e0:	f001 f956 	bl	800f690 <uxr_millis>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800e3ec:	4629      	mov	r1, r5
 800e3ee:	e000      	b.n	800e3f2 <uxr_sync_session+0x72>
 800e3f0:	b950      	cbnz	r0, 800e408 <uxr_sync_session+0x88>
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f7ff fdd4 	bl	800dfa0 <listen_message_reliably>
 800e3f8:	f001 f94a 	bl	800f690 <uxr_millis>
 800e3fc:	1b81      	subs	r1, r0, r6
 800e3fe:	1a69      	subs	r1, r5, r1
 800e400:	2900      	cmp	r1, #0
 800e402:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800e406:	dcf3      	bgt.n	800e3f0 <uxr_sync_session+0x70>
 800e408:	b012      	add	sp, #72	@ 0x48
 800e40a:	bd70      	pop	{r4, r5, r6, pc}
 800e40c:	f3af 8000 	nop.w
 800e410:	3b9aca00 	.word	0x3b9aca00
 800e414:	00000000 	.word	0x00000000

0800e418 <uxr_run_session_until_pong>:
 800e418:	b570      	push	{r4, r5, r6, lr}
 800e41a:	4604      	mov	r4, r0
 800e41c:	460d      	mov	r5, r1
 800e41e:	f001 f937 	bl	800f690 <uxr_millis>
 800e422:	4606      	mov	r6, r0
 800e424:	4620      	mov	r0, r4
 800e426:	f7ff fb97 	bl	800db58 <uxr_flash_output_streams>
 800e42a:	2300      	movs	r3, #0
 800e42c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 800e430:	4629      	mov	r1, r5
 800e432:	e005      	b.n	800e440 <uxr_run_session_until_pong+0x28>
 800e434:	f001 f92c 	bl	800f690 <uxr_millis>
 800e438:	1b81      	subs	r1, r0, r6
 800e43a:	1a69      	subs	r1, r5, r1
 800e43c:	2900      	cmp	r1, #0
 800e43e:	dd0c      	ble.n	800e45a <uxr_run_session_until_pong+0x42>
 800e440:	4620      	mov	r0, r4
 800e442:	f7ff fdad 	bl	800dfa0 <listen_message_reliably>
 800e446:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800e44a:	2800      	cmp	r0, #0
 800e44c:	d0f2      	beq.n	800e434 <uxr_run_session_until_pong+0x1c>
 800e44e:	f1a0 0001 	sub.w	r0, r0, #1
 800e452:	fab0 f080 	clz	r0, r0
 800e456:	0940      	lsrs	r0, r0, #5
 800e458:	bd70      	pop	{r4, r5, r6, pc}
 800e45a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800e45e:	f1a0 0001 	sub.w	r0, r0, #1
 800e462:	fab0 f080 	clz	r0, r0
 800e466:	0940      	lsrs	r0, r0, #5
 800e468:	bd70      	pop	{r4, r5, r6, pc}
 800e46a:	bf00      	nop

0800e46c <wait_session_status>:
 800e46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e470:	4604      	mov	r4, r0
 800e472:	20ff      	movs	r0, #255	@ 0xff
 800e474:	b09f      	sub	sp, #124	@ 0x7c
 800e476:	7160      	strb	r0, [r4, #5]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f000 80bb 	beq.w	800e5f4 <wait_session_status+0x188>
 800e47e:	4692      	mov	sl, r2
 800e480:	469b      	mov	fp, r3
 800e482:	f04f 0800 	mov.w	r8, #0
 800e486:	9105      	str	r1, [sp, #20]
 800e488:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e48a:	9905      	ldr	r1, [sp, #20]
 800e48c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e490:	4652      	mov	r2, sl
 800e492:	47a8      	blx	r5
 800e494:	f001 f8fc 	bl	800f690 <uxr_millis>
 800e498:	2700      	movs	r7, #0
 800e49a:	4605      	mov	r5, r0
 800e49c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e4a0:	e009      	b.n	800e4b6 <wait_session_status+0x4a>
 800e4a2:	f001 f8f5 	bl	800f690 <uxr_millis>
 800e4a6:	1b43      	subs	r3, r0, r5
 800e4a8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	7962      	ldrb	r2, [r4, #5]
 800e4b0:	dd3d      	ble.n	800e52e <wait_session_status+0xc2>
 800e4b2:	2aff      	cmp	r2, #255	@ 0xff
 800e4b4:	d13b      	bne.n	800e52e <wait_session_status+0xc2>
 800e4b6:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e4b8:	a90a      	add	r1, sp, #40	@ 0x28
 800e4ba:	6896      	ldr	r6, [r2, #8]
 800e4bc:	6810      	ldr	r0, [r2, #0]
 800e4be:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e4c0:	47b0      	blx	r6
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d0ed      	beq.n	800e4a2 <wait_session_status+0x36>
 800e4c6:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800e4ca:	a80e      	add	r0, sp, #56	@ 0x38
 800e4cc:	f7fe fe3e 	bl	800d14c <ucdr_init_buffer>
 800e4d0:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800e4d4:	aa09      	add	r2, sp, #36	@ 0x24
 800e4d6:	a90e      	add	r1, sp, #56	@ 0x38
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800e4de:	f000 fa9b 	bl	800ea18 <uxr_read_session_header>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d0dd      	beq.n	800e4a2 <wait_session_status+0x36>
 800e4e6:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	f000 ff8a 	bl	800f404 <uxr_stream_id_from_raw>
 800e4f0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800e4f4:	9304      	str	r3, [sp, #16]
 800e4f6:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800e4fa:	b2c3      	uxtb	r3, r0
 800e4fc:	f1b9 0f01 	cmp.w	r9, #1
 800e500:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800e504:	9303      	str	r3, [sp, #12]
 800e506:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e50a:	d05d      	beq.n	800e5c8 <wait_session_status+0x15c>
 800e50c:	f1b9 0f02 	cmp.w	r9, #2
 800e510:	d01a      	beq.n	800e548 <wait_session_status+0xdc>
 800e512:	f1b9 0f00 	cmp.w	r9, #0
 800e516:	d1c4      	bne.n	800e4a2 <wait_session_status+0x36>
 800e518:	4649      	mov	r1, r9
 800e51a:	4648      	mov	r0, r9
 800e51c:	f000 ff72 	bl	800f404 <uxr_stream_id_from_raw>
 800e520:	a90e      	add	r1, sp, #56	@ 0x38
 800e522:	4602      	mov	r2, r0
 800e524:	900d      	str	r0, [sp, #52]	@ 0x34
 800e526:	4620      	mov	r0, r4
 800e528:	f7ff fbca 	bl	800dcc0 <read_submessage_list>
 800e52c:	e7b9      	b.n	800e4a2 <wait_session_status+0x36>
 800e52e:	f108 0801 	add.w	r8, r8, #1
 800e532:	45c3      	cmp	fp, r8
 800e534:	d001      	beq.n	800e53a <wait_session_status+0xce>
 800e536:	2aff      	cmp	r2, #255	@ 0xff
 800e538:	d0a6      	beq.n	800e488 <wait_session_status+0x1c>
 800e53a:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800e53e:	bf18      	it	ne
 800e540:	2001      	movne	r0, #1
 800e542:	b01f      	add	sp, #124	@ 0x7c
 800e544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e548:	4631      	mov	r1, r6
 800e54a:	f104 0008 	add.w	r0, r4, #8
 800e54e:	f001 f839 	bl	800f5c4 <uxr_get_input_reliable_stream>
 800e552:	9006      	str	r0, [sp, #24]
 800e554:	2800      	cmp	r0, #0
 800e556:	d031      	beq.n	800e5bc <wait_session_status+0x150>
 800e558:	aa0e      	add	r2, sp, #56	@ 0x38
 800e55a:	4610      	mov	r0, r2
 800e55c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e55e:	9207      	str	r2, [sp, #28]
 800e560:	f7fe fe24 	bl	800d1ac <ucdr_buffer_remaining>
 800e564:	4603      	mov	r3, r0
 800e566:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800e56a:	9000      	str	r0, [sp, #0]
 800e56c:	9a07      	ldr	r2, [sp, #28]
 800e56e:	9904      	ldr	r1, [sp, #16]
 800e570:	9806      	ldr	r0, [sp, #24]
 800e572:	f007 fdb7 	bl	80160e4 <uxr_receive_reliable_message>
 800e576:	b308      	cbz	r0, 800e5bc <wait_session_status+0x150>
 800e578:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d041      	beq.n	800e604 <wait_session_status+0x198>
 800e580:	f8cd 8010 	str.w	r8, [sp, #16]
 800e584:	9507      	str	r5, [sp, #28]
 800e586:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e58a:	9d06      	ldr	r5, [sp, #24]
 800e58c:	f04f 0902 	mov.w	r9, #2
 800e590:	e00a      	b.n	800e5a8 <wait_session_status+0x13c>
 800e592:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800e596:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800e59a:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800e59e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e5a0:	a916      	add	r1, sp, #88	@ 0x58
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	f7ff fb8c 	bl	800dcc0 <read_submessage_list>
 800e5a8:	2204      	movs	r2, #4
 800e5aa:	a916      	add	r1, sp, #88	@ 0x58
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	f007 fe13 	bl	80161d8 <uxr_next_input_reliable_buffer_available>
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	d1ed      	bne.n	800e592 <wait_session_status+0x126>
 800e5b6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e5ba:	9d07      	ldr	r5, [sp, #28]
 800e5bc:	9903      	ldr	r1, [sp, #12]
 800e5be:	4632      	mov	r2, r6
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f7ff fa23 	bl	800da0c <write_submessage_acknack.isra.0>
 800e5c6:	e76c      	b.n	800e4a2 <wait_session_status+0x36>
 800e5c8:	4631      	mov	r1, r6
 800e5ca:	f104 0008 	add.w	r0, r4, #8
 800e5ce:	f000 ffef 	bl	800f5b0 <uxr_get_input_best_effort_stream>
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	f43f af65 	beq.w	800e4a2 <wait_session_status+0x36>
 800e5d8:	9904      	ldr	r1, [sp, #16]
 800e5da:	f007 fcf3 	bl	8015fc4 <uxr_receive_best_effort_message>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	f43f af5f 	beq.w	800e4a2 <wait_session_status+0x36>
 800e5e4:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800e5e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e5ea:	a90e      	add	r1, sp, #56	@ 0x38
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	f7ff fb67 	bl	800dcc0 <read_submessage_list>
 800e5f2:	e756      	b.n	800e4a2 <wait_session_status+0x36>
 800e5f4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e5f6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e5fa:	47a0      	blx	r4
 800e5fc:	2001      	movs	r0, #1
 800e5fe:	b01f      	add	sp, #124	@ 0x7c
 800e600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e604:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800e608:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e60a:	a90e      	add	r1, sp, #56	@ 0x38
 800e60c:	4620      	mov	r0, r4
 800e60e:	f7ff fb57 	bl	800dcc0 <read_submessage_list>
 800e612:	e7b5      	b.n	800e580 <wait_session_status+0x114>

0800e614 <uxr_delete_session_retries>:
 800e614:	b530      	push	{r4, r5, lr}
 800e616:	b08f      	sub	sp, #60	@ 0x3c
 800e618:	4604      	mov	r4, r0
 800e61a:	460d      	mov	r5, r1
 800e61c:	f000 fa3a 	bl	800ea94 <uxr_session_header_offset>
 800e620:	2300      	movs	r3, #0
 800e622:	2210      	movs	r2, #16
 800e624:	9000      	str	r0, [sp, #0]
 800e626:	a902      	add	r1, sp, #8
 800e628:	a806      	add	r0, sp, #24
 800e62a:	f7fe fd7d 	bl	800d128 <ucdr_init_buffer_origin_offset>
 800e62e:	a906      	add	r1, sp, #24
 800e630:	4620      	mov	r0, r4
 800e632:	f000 f981 	bl	800e938 <uxr_buffer_delete_session>
 800e636:	2200      	movs	r2, #0
 800e638:	4611      	mov	r1, r2
 800e63a:	9b06      	ldr	r3, [sp, #24]
 800e63c:	4620      	mov	r0, r4
 800e63e:	f000 f9d5 	bl	800e9ec <uxr_stamp_session_header>
 800e642:	a806      	add	r0, sp, #24
 800e644:	f7fe fdae 	bl	800d1a4 <ucdr_buffer_length>
 800e648:	462b      	mov	r3, r5
 800e64a:	4602      	mov	r2, r0
 800e64c:	a902      	add	r1, sp, #8
 800e64e:	4620      	mov	r0, r4
 800e650:	f7ff ff0c 	bl	800e46c <wait_session_status>
 800e654:	b118      	cbz	r0, 800e65e <uxr_delete_session_retries+0x4a>
 800e656:	7960      	ldrb	r0, [r4, #5]
 800e658:	fab0 f080 	clz	r0, r0
 800e65c:	0940      	lsrs	r0, r0, #5
 800e65e:	b00f      	add	sp, #60	@ 0x3c
 800e660:	bd30      	pop	{r4, r5, pc}
 800e662:	bf00      	nop

0800e664 <uxr_create_session>:
 800e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e668:	f100 0308 	add.w	r3, r0, #8
 800e66c:	b0ab      	sub	sp, #172	@ 0xac
 800e66e:	4604      	mov	r4, r0
 800e670:	4618      	mov	r0, r3
 800e672:	9303      	str	r3, [sp, #12]
 800e674:	f000 feec 	bl	800f450 <uxr_reset_stream_storage>
 800e678:	4620      	mov	r0, r4
 800e67a:	f000 fa0b 	bl	800ea94 <uxr_session_header_offset>
 800e67e:	2300      	movs	r3, #0
 800e680:	9000      	str	r0, [sp, #0]
 800e682:	221c      	movs	r2, #28
 800e684:	a90b      	add	r1, sp, #44	@ 0x2c
 800e686:	a812      	add	r0, sp, #72	@ 0x48
 800e688:	f7fe fd4e 	bl	800d128 <ucdr_init_buffer_origin_offset>
 800e68c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e68e:	8a1a      	ldrh	r2, [r3, #16]
 800e690:	3a04      	subs	r2, #4
 800e692:	b292      	uxth	r2, r2
 800e694:	a912      	add	r1, sp, #72	@ 0x48
 800e696:	4620      	mov	r0, r4
 800e698:	f000 f924 	bl	800e8e4 <uxr_buffer_create_session>
 800e69c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f000 f990 	bl	800e9c4 <uxr_stamp_create_session_header>
 800e6a4:	a812      	add	r0, sp, #72	@ 0x48
 800e6a6:	f7fe fd7d 	bl	800d1a4 <ucdr_buffer_length>
 800e6aa:	23ff      	movs	r3, #255	@ 0xff
 800e6ac:	4683      	mov	fp, r0
 800e6ae:	7163      	strb	r3, [r4, #5]
 800e6b0:	f04f 080a 	mov.w	r8, #10
 800e6b4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e6b6:	465a      	mov	r2, fp
 800e6b8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e6bc:	a90b      	add	r1, sp, #44	@ 0x2c
 800e6be:	47a8      	blx	r5
 800e6c0:	f000 ffe6 	bl	800f690 <uxr_millis>
 800e6c4:	2700      	movs	r7, #0
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e6cc:	e009      	b.n	800e6e2 <uxr_create_session+0x7e>
 800e6ce:	f000 ffdf 	bl	800f690 <uxr_millis>
 800e6d2:	1b43      	subs	r3, r0, r5
 800e6d4:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	7962      	ldrb	r2, [r4, #5]
 800e6dc:	dd3d      	ble.n	800e75a <uxr_create_session+0xf6>
 800e6de:	2aff      	cmp	r2, #255	@ 0xff
 800e6e0:	d13b      	bne.n	800e75a <uxr_create_session+0xf6>
 800e6e2:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e6e4:	a907      	add	r1, sp, #28
 800e6e6:	6896      	ldr	r6, [r2, #8]
 800e6e8:	6810      	ldr	r0, [r2, #0]
 800e6ea:	aa08      	add	r2, sp, #32
 800e6ec:	47b0      	blx	r6
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	d0ed      	beq.n	800e6ce <uxr_create_session+0x6a>
 800e6f2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e6f6:	a81a      	add	r0, sp, #104	@ 0x68
 800e6f8:	f7fe fd28 	bl	800d14c <ucdr_init_buffer>
 800e6fc:	f10d 031a 	add.w	r3, sp, #26
 800e700:	aa06      	add	r2, sp, #24
 800e702:	a91a      	add	r1, sp, #104	@ 0x68
 800e704:	4620      	mov	r0, r4
 800e706:	f88d 7018 	strb.w	r7, [sp, #24]
 800e70a:	f000 f985 	bl	800ea18 <uxr_read_session_header>
 800e70e:	2800      	cmp	r0, #0
 800e710:	d0dd      	beq.n	800e6ce <uxr_create_session+0x6a>
 800e712:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e716:	2100      	movs	r1, #0
 800e718:	f000 fe74 	bl	800f404 <uxr_stream_id_from_raw>
 800e71c:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800e720:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800e724:	9302      	str	r3, [sp, #8]
 800e726:	f1b9 0f01 	cmp.w	r9, #1
 800e72a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e72e:	fa5f fa80 	uxtb.w	sl, r0
 800e732:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e736:	d056      	beq.n	800e7e6 <uxr_create_session+0x182>
 800e738:	f1b9 0f02 	cmp.w	r9, #2
 800e73c:	d018      	beq.n	800e770 <uxr_create_session+0x10c>
 800e73e:	f1b9 0f00 	cmp.w	r9, #0
 800e742:	d1c4      	bne.n	800e6ce <uxr_create_session+0x6a>
 800e744:	4649      	mov	r1, r9
 800e746:	4648      	mov	r0, r9
 800e748:	f000 fe5c 	bl	800f404 <uxr_stream_id_from_raw>
 800e74c:	a91a      	add	r1, sp, #104	@ 0x68
 800e74e:	4602      	mov	r2, r0
 800e750:	900a      	str	r0, [sp, #40]	@ 0x28
 800e752:	4620      	mov	r0, r4
 800e754:	f7ff fab4 	bl	800dcc0 <read_submessage_list>
 800e758:	e7b9      	b.n	800e6ce <uxr_create_session+0x6a>
 800e75a:	f1b8 0801 	subs.w	r8, r8, #1
 800e75e:	d001      	beq.n	800e764 <uxr_create_session+0x100>
 800e760:	2aff      	cmp	r2, #255	@ 0xff
 800e762:	d0a7      	beq.n	800e6b4 <uxr_create_session+0x50>
 800e764:	2a00      	cmp	r2, #0
 800e766:	d05b      	beq.n	800e820 <uxr_create_session+0x1bc>
 800e768:	2000      	movs	r0, #0
 800e76a:	b02b      	add	sp, #172	@ 0xac
 800e76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e770:	9803      	ldr	r0, [sp, #12]
 800e772:	4631      	mov	r1, r6
 800e774:	f000 ff26 	bl	800f5c4 <uxr_get_input_reliable_stream>
 800e778:	9004      	str	r0, [sp, #16]
 800e77a:	b370      	cbz	r0, 800e7da <uxr_create_session+0x176>
 800e77c:	aa1a      	add	r2, sp, #104	@ 0x68
 800e77e:	4610      	mov	r0, r2
 800e780:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e782:	9205      	str	r2, [sp, #20]
 800e784:	f7fe fd12 	bl	800d1ac <ucdr_buffer_remaining>
 800e788:	4603      	mov	r3, r0
 800e78a:	f10d 0019 	add.w	r0, sp, #25
 800e78e:	9000      	str	r0, [sp, #0]
 800e790:	9a05      	ldr	r2, [sp, #20]
 800e792:	9902      	ldr	r1, [sp, #8]
 800e794:	9804      	ldr	r0, [sp, #16]
 800e796:	f007 fca5 	bl	80160e4 <uxr_receive_reliable_message>
 800e79a:	b1f0      	cbz	r0, 800e7da <uxr_create_session+0x176>
 800e79c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d035      	beq.n	800e810 <uxr_create_session+0x1ac>
 800e7a4:	f8cd b008 	str.w	fp, [sp, #8]
 800e7a8:	f04f 0902 	mov.w	r9, #2
 800e7ac:	f8dd b010 	ldr.w	fp, [sp, #16]
 800e7b0:	e00a      	b.n	800e7c8 <uxr_create_session+0x164>
 800e7b2:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800e7b6:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e7ba:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800e7be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7c0:	a922      	add	r1, sp, #136	@ 0x88
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	f7ff fa7c 	bl	800dcc0 <read_submessage_list>
 800e7c8:	2204      	movs	r2, #4
 800e7ca:	a922      	add	r1, sp, #136	@ 0x88
 800e7cc:	4658      	mov	r0, fp
 800e7ce:	f007 fd03 	bl	80161d8 <uxr_next_input_reliable_buffer_available>
 800e7d2:	2800      	cmp	r0, #0
 800e7d4:	d1ed      	bne.n	800e7b2 <uxr_create_session+0x14e>
 800e7d6:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e7da:	4632      	mov	r2, r6
 800e7dc:	4651      	mov	r1, sl
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f7ff f914 	bl	800da0c <write_submessage_acknack.isra.0>
 800e7e4:	e773      	b.n	800e6ce <uxr_create_session+0x6a>
 800e7e6:	9803      	ldr	r0, [sp, #12]
 800e7e8:	4631      	mov	r1, r6
 800e7ea:	f000 fee1 	bl	800f5b0 <uxr_get_input_best_effort_stream>
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	f43f af6d 	beq.w	800e6ce <uxr_create_session+0x6a>
 800e7f4:	9902      	ldr	r1, [sp, #8]
 800e7f6:	f007 fbe5 	bl	8015fc4 <uxr_receive_best_effort_message>
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	f43f af67 	beq.w	800e6ce <uxr_create_session+0x6a>
 800e800:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800e804:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e806:	a91a      	add	r1, sp, #104	@ 0x68
 800e808:	4620      	mov	r0, r4
 800e80a:	f7ff fa59 	bl	800dcc0 <read_submessage_list>
 800e80e:	e75e      	b.n	800e6ce <uxr_create_session+0x6a>
 800e810:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800e814:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e816:	a91a      	add	r1, sp, #104	@ 0x68
 800e818:	4620      	mov	r0, r4
 800e81a:	f7ff fa51 	bl	800dcc0 <read_submessage_list>
 800e81e:	e7c1      	b.n	800e7a4 <uxr_create_session+0x140>
 800e820:	9803      	ldr	r0, [sp, #12]
 800e822:	f000 fe15 	bl	800f450 <uxr_reset_stream_storage>
 800e826:	2001      	movs	r0, #1
 800e828:	b02b      	add	sp, #172	@ 0xac
 800e82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82e:	bf00      	nop

0800e830 <uxr_prepare_stream_to_write_submessage>:
 800e830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e834:	b082      	sub	sp, #8
 800e836:	4606      	mov	r6, r0
 800e838:	4610      	mov	r0, r2
 800e83a:	4614      	mov	r4, r2
 800e83c:	9101      	str	r1, [sp, #4]
 800e83e:	461f      	mov	r7, r3
 800e840:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800e844:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800e848:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800e84c:	f000 ff1a 	bl	800f684 <uxr_submessage_padding>
 800e850:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e854:	1d21      	adds	r1, r4, #4
 800e856:	2b01      	cmp	r3, #1
 800e858:	eb01 0a00 	add.w	sl, r1, r0
 800e85c:	d012      	beq.n	800e884 <uxr_prepare_stream_to_write_submessage+0x54>
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d003      	beq.n	800e86a <uxr_prepare_stream_to_write_submessage+0x3a>
 800e862:	2000      	movs	r0, #0
 800e864:	b002      	add	sp, #8
 800e866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e86a:	4629      	mov	r1, r5
 800e86c:	f106 0008 	add.w	r0, r6, #8
 800e870:	f000 fe94 	bl	800f59c <uxr_get_output_reliable_stream>
 800e874:	2800      	cmp	r0, #0
 800e876:	d0f4      	beq.n	800e862 <uxr_prepare_stream_to_write_submessage+0x32>
 800e878:	4651      	mov	r1, sl
 800e87a:	463a      	mov	r2, r7
 800e87c:	f007 fe62 	bl	8016544 <uxr_prepare_reliable_buffer_to_write>
 800e880:	b968      	cbnz	r0, 800e89e <uxr_prepare_stream_to_write_submessage+0x6e>
 800e882:	e7ee      	b.n	800e862 <uxr_prepare_stream_to_write_submessage+0x32>
 800e884:	4629      	mov	r1, r5
 800e886:	f106 0008 	add.w	r0, r6, #8
 800e88a:	f000 fe7f 	bl	800f58c <uxr_get_output_best_effort_stream>
 800e88e:	2800      	cmp	r0, #0
 800e890:	d0e7      	beq.n	800e862 <uxr_prepare_stream_to_write_submessage+0x32>
 800e892:	4651      	mov	r1, sl
 800e894:	463a      	mov	r2, r7
 800e896:	f007 fd87 	bl	80163a8 <uxr_prepare_best_effort_buffer_to_write>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d0e1      	beq.n	800e862 <uxr_prepare_stream_to_write_submessage+0x32>
 800e89e:	464b      	mov	r3, r9
 800e8a0:	b2a2      	uxth	r2, r4
 800e8a2:	4641      	mov	r1, r8
 800e8a4:	4638      	mov	r0, r7
 800e8a6:	f000 fead 	bl	800f604 <uxr_buffer_submessage_header>
 800e8aa:	2001      	movs	r0, #1
 800e8ac:	b002      	add	sp, #8
 800e8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b2:	bf00      	nop

0800e8b4 <uxr_init_session_info>:
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	f361 0307 	bfi	r3, r1, #0, #8
 800e8ba:	0e11      	lsrs	r1, r2, #24
 800e8bc:	f361 230f 	bfi	r3, r1, #8, #8
 800e8c0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800e8c4:	f361 4317 	bfi	r3, r1, #16, #8
 800e8c8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e8cc:	f361 631f 	bfi	r3, r1, #24, #8
 800e8d0:	f04f 0c09 	mov.w	ip, #9
 800e8d4:	21ff      	movs	r1, #255	@ 0xff
 800e8d6:	6003      	str	r3, [r0, #0]
 800e8d8:	7102      	strb	r2, [r0, #4]
 800e8da:	f8a0 c006 	strh.w	ip, [r0, #6]
 800e8de:	7141      	strb	r1, [r0, #5]
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop

0800e8e4 <uxr_buffer_create_session>:
 800e8e4:	b530      	push	{r4, r5, lr}
 800e8e6:	4d13      	ldr	r5, [pc, #76]	@ (800e934 <uxr_buffer_create_session+0x50>)
 800e8e8:	b089      	sub	sp, #36	@ 0x24
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	9307      	str	r3, [sp, #28]
 800e8ee:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e8f2:	682a      	ldr	r2, [r5, #0]
 800e8f4:	9200      	str	r2, [sp, #0]
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	2201      	movs	r2, #1
 800e8fa:	88a9      	ldrh	r1, [r5, #4]
 800e8fc:	9301      	str	r3, [sp, #4]
 800e8fe:	80c2      	strh	r2, [r0, #6]
 800e900:	f8ad 1006 	strh.w	r1, [sp, #6]
 800e904:	f8d0 1001 	ldr.w	r1, [r0, #1]
 800e908:	7800      	ldrb	r0, [r0, #0]
 800e90a:	9303      	str	r3, [sp, #12]
 800e90c:	f88d 2004 	strb.w	r2, [sp, #4]
 800e910:	9102      	str	r1, [sp, #8]
 800e912:	2210      	movs	r2, #16
 800e914:	4619      	mov	r1, r3
 800e916:	f88d 000c 	strb.w	r0, [sp, #12]
 800e91a:	4620      	mov	r0, r4
 800e91c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e920:	9306      	str	r3, [sp, #24]
 800e922:	f000 fe6f 	bl	800f604 <uxr_buffer_submessage_header>
 800e926:	4669      	mov	r1, sp
 800e928:	4620      	mov	r0, r4
 800e92a:	f001 fda1 	bl	8010470 <uxr_serialize_CREATE_CLIENT_Payload>
 800e92e:	b009      	add	sp, #36	@ 0x24
 800e930:	bd30      	pop	{r4, r5, pc}
 800e932:	bf00      	nop
 800e934:	08019f3c 	.word	0x08019f3c

0800e938 <uxr_buffer_delete_session>:
 800e938:	b510      	push	{r4, lr}
 800e93a:	4a0c      	ldr	r2, [pc, #48]	@ (800e96c <uxr_buffer_delete_session+0x34>)
 800e93c:	b082      	sub	sp, #8
 800e93e:	460c      	mov	r4, r1
 800e940:	2302      	movs	r3, #2
 800e942:	8911      	ldrh	r1, [r2, #8]
 800e944:	80c3      	strh	r3, [r0, #6]
 800e946:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800e94a:	2300      	movs	r3, #0
 800e94c:	2204      	movs	r2, #4
 800e94e:	f8ad 1006 	strh.w	r1, [sp, #6]
 800e952:	4620      	mov	r0, r4
 800e954:	2103      	movs	r1, #3
 800e956:	f8ad c004 	strh.w	ip, [sp, #4]
 800e95a:	f000 fe53 	bl	800f604 <uxr_buffer_submessage_header>
 800e95e:	a901      	add	r1, sp, #4
 800e960:	4620      	mov	r0, r4
 800e962:	f001 fe3d 	bl	80105e0 <uxr_serialize_DELETE_Payload>
 800e966:	b002      	add	sp, #8
 800e968:	bd10      	pop	{r4, pc}
 800e96a:	bf00      	nop
 800e96c:	08019f3c 	.word	0x08019f3c

0800e970 <uxr_read_create_session_status>:
 800e970:	b510      	push	{r4, lr}
 800e972:	460b      	mov	r3, r1
 800e974:	b088      	sub	sp, #32
 800e976:	4604      	mov	r4, r0
 800e978:	a901      	add	r1, sp, #4
 800e97a:	4618      	mov	r0, r3
 800e97c:	f001 fe40 	bl	8010600 <uxr_deserialize_STATUS_AGENT_Payload>
 800e980:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e984:	7163      	strb	r3, [r4, #5]
 800e986:	b008      	add	sp, #32
 800e988:	bd10      	pop	{r4, pc}
 800e98a:	bf00      	nop

0800e98c <uxr_read_delete_session_status>:
 800e98c:	b510      	push	{r4, lr}
 800e98e:	460b      	mov	r3, r1
 800e990:	b082      	sub	sp, #8
 800e992:	4604      	mov	r4, r0
 800e994:	4669      	mov	r1, sp
 800e996:	4618      	mov	r0, r3
 800e998:	f001 fe62 	bl	8010660 <uxr_deserialize_STATUS_Payload>
 800e99c:	88e3      	ldrh	r3, [r4, #6]
 800e99e:	2b02      	cmp	r3, #2
 800e9a0:	d001      	beq.n	800e9a6 <uxr_read_delete_session_status+0x1a>
 800e9a2:	b002      	add	sp, #8
 800e9a4:	bd10      	pop	{r4, pc}
 800e9a6:	f10d 0002 	add.w	r0, sp, #2
 800e9aa:	f7fe fead 	bl	800d708 <uxr_object_id_from_raw>
 800e9ae:	f8bd 3000 	ldrh.w	r3, [sp]
 800e9b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e9b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9ba:	bf08      	it	eq
 800e9bc:	7162      	strbeq	r2, [r4, #5]
 800e9be:	b002      	add	sp, #8
 800e9c0:	bd10      	pop	{r4, pc}
 800e9c2:	bf00      	nop

0800e9c4 <uxr_stamp_create_session_header>:
 800e9c4:	b510      	push	{r4, lr}
 800e9c6:	2208      	movs	r2, #8
 800e9c8:	b08a      	sub	sp, #40	@ 0x28
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	eb0d 0002 	add.w	r0, sp, r2
 800e9d0:	f7fe fbbc 	bl	800d14c <ucdr_init_buffer>
 800e9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9d8:	9400      	str	r4, [sp, #0]
 800e9da:	2300      	movs	r3, #0
 800e9dc:	461a      	mov	r2, r3
 800e9de:	a802      	add	r0, sp, #8
 800e9e0:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e9e4:	f001 f80c 	bl	800fa00 <uxr_serialize_message_header>
 800e9e8:	b00a      	add	sp, #40	@ 0x28
 800e9ea:	bd10      	pop	{r4, pc}

0800e9ec <uxr_stamp_session_header>:
 800e9ec:	b570      	push	{r4, r5, r6, lr}
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	b08a      	sub	sp, #40	@ 0x28
 800e9f2:	4616      	mov	r6, r2
 800e9f4:	2208      	movs	r2, #8
 800e9f6:	eb0d 0002 	add.w	r0, sp, r2
 800e9fa:	460d      	mov	r5, r1
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	f7fe fba5 	bl	800d14c <ucdr_init_buffer>
 800ea02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea06:	9400      	str	r4, [sp, #0]
 800ea08:	4633      	mov	r3, r6
 800ea0a:	462a      	mov	r2, r5
 800ea0c:	a802      	add	r0, sp, #8
 800ea0e:	f000 fff7 	bl	800fa00 <uxr_serialize_message_header>
 800ea12:	b00a      	add	sp, #40	@ 0x28
 800ea14:	bd70      	pop	{r4, r5, r6, pc}
 800ea16:	bf00      	nop

0800ea18 <uxr_read_session_header>:
 800ea18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea1a:	4607      	mov	r7, r0
 800ea1c:	b085      	sub	sp, #20
 800ea1e:	4608      	mov	r0, r1
 800ea20:	460c      	mov	r4, r1
 800ea22:	4615      	mov	r5, r2
 800ea24:	461e      	mov	r6, r3
 800ea26:	f7fe fbc1 	bl	800d1ac <ucdr_buffer_remaining>
 800ea2a:	2808      	cmp	r0, #8
 800ea2c:	d802      	bhi.n	800ea34 <uxr_read_session_header+0x1c>
 800ea2e:	2000      	movs	r0, #0
 800ea30:	b005      	add	sp, #20
 800ea32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea34:	ab03      	add	r3, sp, #12
 800ea36:	9300      	str	r3, [sp, #0]
 800ea38:	462a      	mov	r2, r5
 800ea3a:	4633      	mov	r3, r6
 800ea3c:	f10d 010b 	add.w	r1, sp, #11
 800ea40:	4620      	mov	r0, r4
 800ea42:	f000 fffb 	bl	800fa3c <uxr_deserialize_message_header>
 800ea46:	783a      	ldrb	r2, [r7, #0]
 800ea48:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	d1ee      	bne.n	800ea2e <uxr_read_session_header+0x16>
 800ea50:	061b      	lsls	r3, r3, #24
 800ea52:	d41c      	bmi.n	800ea8e <uxr_read_session_header+0x76>
 800ea54:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ea58:	787b      	ldrb	r3, [r7, #1]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d003      	beq.n	800ea66 <uxr_read_session_header+0x4e>
 800ea5e:	2001      	movs	r0, #1
 800ea60:	f080 0001 	eor.w	r0, r0, #1
 800ea64:	e7e4      	b.n	800ea30 <uxr_read_session_header+0x18>
 800ea66:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800ea6a:	78bb      	ldrb	r3, [r7, #2]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	f107 0102 	add.w	r1, r7, #2
 800ea72:	d1f4      	bne.n	800ea5e <uxr_read_session_header+0x46>
 800ea74:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800ea78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d1ee      	bne.n	800ea5e <uxr_read_session_header+0x46>
 800ea80:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ea84:	784b      	ldrb	r3, [r1, #1]
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d1e9      	bne.n	800ea5e <uxr_read_session_header+0x46>
 800ea8a:	2000      	movs	r0, #0
 800ea8c:	e7e8      	b.n	800ea60 <uxr_read_session_header+0x48>
 800ea8e:	2001      	movs	r0, #1
 800ea90:	e7ce      	b.n	800ea30 <uxr_read_session_header+0x18>
 800ea92:	bf00      	nop

0800ea94 <uxr_session_header_offset>:
 800ea94:	f990 3000 	ldrsb.w	r3, [r0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	bfb4      	ite	lt
 800ea9c:	2004      	movlt	r0, #4
 800ea9e:	2008      	movge	r0, #8
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop

0800eaa4 <uxr_init_base_object_request>:
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	88c3      	ldrh	r3, [r0, #6]
 800eaa8:	b082      	sub	sp, #8
 800eaaa:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800eaae:	9101      	str	r1, [sp, #4]
 800eab0:	f1a3 010a 	sub.w	r1, r3, #10
 800eab4:	b289      	uxth	r1, r1
 800eab6:	42a1      	cmp	r1, r4
 800eab8:	d80e      	bhi.n	800ead8 <uxr_init_base_object_request+0x34>
 800eaba:	3301      	adds	r3, #1
 800eabc:	b29c      	uxth	r4, r3
 800eabe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	80c4      	strh	r4, [r0, #6]
 800eac6:	9801      	ldr	r0, [sp, #4]
 800eac8:	7011      	strb	r1, [r2, #0]
 800eaca:	7053      	strb	r3, [r2, #1]
 800eacc:	1c91      	adds	r1, r2, #2
 800eace:	f7fe fe2f 	bl	800d730 <uxr_object_id_to_raw>
 800ead2:	4620      	mov	r0, r4
 800ead4:	b002      	add	sp, #8
 800ead6:	bd10      	pop	{r4, pc}
 800ead8:	230a      	movs	r3, #10
 800eada:	2100      	movs	r1, #0
 800eadc:	461c      	mov	r4, r3
 800eade:	e7f1      	b.n	800eac4 <uxr_init_base_object_request+0x20>

0800eae0 <uxr_parse_base_object_request>:
 800eae0:	b570      	push	{r4, r5, r6, lr}
 800eae2:	4604      	mov	r4, r0
 800eae4:	3002      	adds	r0, #2
 800eae6:	460d      	mov	r5, r1
 800eae8:	4616      	mov	r6, r2
 800eaea:	f7fe fe0d 	bl	800d708 <uxr_object_id_from_raw>
 800eaee:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800eaf2:	8028      	strh	r0, [r5, #0]
 800eaf4:	806b      	strh	r3, [r5, #2]
 800eaf6:	8823      	ldrh	r3, [r4, #0]
 800eaf8:	ba5b      	rev16	r3, r3
 800eafa:	8033      	strh	r3, [r6, #0]
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
 800eafe:	bf00      	nop

0800eb00 <uxr_init_framing_io>:
 800eb00:	2300      	movs	r3, #0
 800eb02:	7041      	strb	r1, [r0, #1]
 800eb04:	7003      	strb	r3, [r0, #0]
 800eb06:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800eb08:	4770      	bx	lr
 800eb0a:	bf00      	nop

0800eb0c <uxr_write_framed_msg>:
 800eb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb10:	f890 c001 	ldrb.w	ip, [r0, #1]
 800eb14:	4617      	mov	r7, r2
 800eb16:	227e      	movs	r2, #126	@ 0x7e
 800eb18:	b085      	sub	sp, #20
 800eb1a:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 800eb1e:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 800eb22:	2a01      	cmp	r2, #1
 800eb24:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800eb28:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800eb2c:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800eb30:	4604      	mov	r4, r0
 800eb32:	460e      	mov	r6, r1
 800eb34:	469a      	mov	sl, r3
 800eb36:	f240 812e 	bls.w	800ed96 <uxr_write_framed_msg+0x28a>
 800eb3a:	2003      	movs	r0, #3
 800eb3c:	2102      	movs	r1, #2
 800eb3e:	f04f 0905 	mov.w	r9, #5
 800eb42:	2204      	movs	r2, #4
 800eb44:	4686      	mov	lr, r0
 800eb46:	460b      	mov	r3, r1
 800eb48:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 800eb4c:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 800eb50:	f1bc 0f01 	cmp.w	ip, #1
 800eb54:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800eb58:	4421      	add	r1, r4
 800eb5a:	f240 8110 	bls.w	800ed7e <uxr_write_framed_msg+0x272>
 800eb5e:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800eb62:	fa5f fc8b 	uxtb.w	ip, fp
 800eb66:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800eb6a:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 800eb6e:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 800eb72:	f1be 0f01 	cmp.w	lr, #1
 800eb76:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 800eb7a:	b2ed      	uxtb	r5, r5
 800eb7c:	d94c      	bls.n	800ec18 <uxr_write_framed_msg+0x10c>
 800eb7e:	4420      	add	r0, r4
 800eb80:	2d01      	cmp	r5, #1
 800eb82:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800eb86:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eb8a:	d95d      	bls.n	800ec48 <uxr_write_framed_msg+0x13c>
 800eb8c:	18a0      	adds	r0, r4, r2
 800eb8e:	3201      	adds	r2, #1
 800eb90:	b2d2      	uxtb	r2, r2
 800eb92:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800eb96:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800eb9a:	f1bb 0f00 	cmp.w	fp, #0
 800eb9e:	f000 8108 	beq.w	800edb2 <uxr_write_framed_msg+0x2a6>
 800eba2:	f04f 0c00 	mov.w	ip, #0
 800eba6:	4661      	mov	r1, ip
 800eba8:	46de      	mov	lr, fp
 800ebaa:	46e3      	mov	fp, ip
 800ebac:	46d4      	mov	ip, sl
 800ebae:	468a      	mov	sl, r1
 800ebb0:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 800edbc <uxr_write_framed_msg+0x2b0>
 800ebb4:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800ebb8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800ebbc:	2901      	cmp	r1, #1
 800ebbe:	d91b      	bls.n	800ebf8 <uxr_write_framed_msg+0xec>
 800ebc0:	2a29      	cmp	r2, #41	@ 0x29
 800ebc2:	d84e      	bhi.n	800ec62 <uxr_write_framed_msg+0x156>
 800ebc4:	18a1      	adds	r1, r4, r2
 800ebc6:	3201      	adds	r2, #1
 800ebc8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800ebcc:	b2d2      	uxtb	r2, r2
 800ebce:	ea8b 0303 	eor.w	r3, fp, r3
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ebd8:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 800ebdc:	f10a 0a01 	add.w	sl, sl, #1
 800ebe0:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 800ebe4:	45d6      	cmp	lr, sl
 800ebe6:	d95a      	bls.n	800ec9e <uxr_write_framed_msg+0x192>
 800ebe8:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800ebec:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ebf0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800ebf4:	2901      	cmp	r1, #1
 800ebf6:	d8e3      	bhi.n	800ebc0 <uxr_write_framed_msg+0xb4>
 800ebf8:	1c51      	adds	r1, r2, #1
 800ebfa:	b2c9      	uxtb	r1, r1
 800ebfc:	2929      	cmp	r1, #41	@ 0x29
 800ebfe:	d830      	bhi.n	800ec62 <uxr_write_framed_msg+0x156>
 800ec00:	18a1      	adds	r1, r4, r2
 800ec02:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 800ec06:	3202      	adds	r2, #2
 800ec08:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800ec0c:	f083 0020 	eor.w	r0, r3, #32
 800ec10:	b2d2      	uxtb	r2, r2
 800ec12:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 800ec16:	e7da      	b.n	800ebce <uxr_write_framed_msg+0xc2>
 800ec18:	eb04 0e00 	add.w	lr, r4, r0
 800ec1c:	f08c 0c20 	eor.w	ip, ip, #32
 800ec20:	1c82      	adds	r2, r0, #2
 800ec22:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 800ec26:	b2d2      	uxtb	r2, r2
 800ec28:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ec2c:	2d01      	cmp	r5, #1
 800ec2e:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 800ec32:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ec36:	d907      	bls.n	800ec48 <uxr_write_framed_msg+0x13c>
 800ec38:	4422      	add	r2, r4
 800ec3a:	3003      	adds	r0, #3
 800ec3c:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 800ec40:	b2c2      	uxtb	r2, r0
 800ec42:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ec46:	e7ac      	b.n	800eba2 <uxr_write_framed_msg+0x96>
 800ec48:	18a0      	adds	r0, r4, r2
 800ec4a:	f081 0120 	eor.w	r1, r1, #32
 800ec4e:	3202      	adds	r2, #2
 800ec50:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 800ec54:	b2d2      	uxtb	r2, r2
 800ec56:	217d      	movs	r1, #125	@ 0x7d
 800ec58:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800ec5c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ec60:	e79f      	b.n	800eba2 <uxr_write_framed_msg+0x96>
 800ec62:	e9cd ba00 	strd	fp, sl, [sp]
 800ec66:	2500      	movs	r5, #0
 800ec68:	46e2      	mov	sl, ip
 800ec6a:	46f3      	mov	fp, lr
 800ec6c:	e000      	b.n	800ec70 <uxr_write_framed_msg+0x164>
 800ec6e:	b190      	cbz	r0, 800ec96 <uxr_write_framed_msg+0x18a>
 800ec70:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ec74:	1b52      	subs	r2, r2, r5
 800ec76:	4643      	mov	r3, r8
 800ec78:	4421      	add	r1, r4
 800ec7a:	4638      	mov	r0, r7
 800ec7c:	47b0      	blx	r6
 800ec7e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ec82:	4405      	add	r5, r0
 800ec84:	4295      	cmp	r5, r2
 800ec86:	d3f2      	bcc.n	800ec6e <uxr_write_framed_msg+0x162>
 800ec88:	46d4      	mov	ip, sl
 800ec8a:	46de      	mov	lr, fp
 800ec8c:	f8dd a004 	ldr.w	sl, [sp, #4]
 800ec90:	f8dd b000 	ldr.w	fp, [sp]
 800ec94:	d06f      	beq.n	800ed76 <uxr_write_framed_msg+0x26a>
 800ec96:	2000      	movs	r0, #0
 800ec98:	b005      	add	sp, #20
 800ec9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec9e:	46dc      	mov	ip, fp
 800eca0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800eca4:	f8ad c00c 	strh.w	ip, [sp, #12]
 800eca8:	46f3      	mov	fp, lr
 800ecaa:	fa5f fc8c 	uxtb.w	ip, ip
 800ecae:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	f04f 0900 	mov.w	r9, #0
 800ecb8:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 800ecbc:	d930      	bls.n	800ed20 <uxr_write_framed_msg+0x214>
 800ecbe:	2a29      	cmp	r2, #41	@ 0x29
 800ecc0:	d91c      	bls.n	800ecfc <uxr_write_framed_msg+0x1f0>
 800ecc2:	2500      	movs	r5, #0
 800ecc4:	e001      	b.n	800ecca <uxr_write_framed_msg+0x1be>
 800ecc6:	2800      	cmp	r0, #0
 800ecc8:	d0e5      	beq.n	800ec96 <uxr_write_framed_msg+0x18a>
 800ecca:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ecce:	1b52      	subs	r2, r2, r5
 800ecd0:	4643      	mov	r3, r8
 800ecd2:	4421      	add	r1, r4
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	47b0      	blx	r6
 800ecd8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ecdc:	4405      	add	r5, r0
 800ecde:	4295      	cmp	r5, r2
 800ece0:	d3f1      	bcc.n	800ecc6 <uxr_write_framed_msg+0x1ba>
 800ece2:	d1d8      	bne.n	800ec96 <uxr_write_framed_msg+0x18a>
 800ece4:	f109 0310 	add.w	r3, r9, #16
 800ece8:	446b      	add	r3, sp
 800ecea:	2200      	movs	r2, #0
 800ecec:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 800ecf0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ecf4:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d911      	bls.n	800ed20 <uxr_write_framed_msg+0x214>
 800ecfc:	18a3      	adds	r3, r4, r2
 800ecfe:	3201      	adds	r2, #1
 800ed00:	b2d2      	uxtb	r2, r2
 800ed02:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 800ed06:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ed0a:	f1b9 0f00 	cmp.w	r9, #0
 800ed0e:	d119      	bne.n	800ed44 <uxr_write_framed_msg+0x238>
 800ed10:	f89d c00d 	ldrb.w	ip, [sp, #13]
 800ed14:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	f04f 0901 	mov.w	r9, #1
 800ed1e:	d8ce      	bhi.n	800ecbe <uxr_write_framed_msg+0x1b2>
 800ed20:	1c53      	adds	r3, r2, #1
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	2b29      	cmp	r3, #41	@ 0x29
 800ed26:	d8cc      	bhi.n	800ecc2 <uxr_write_framed_msg+0x1b6>
 800ed28:	18a3      	adds	r3, r4, r2
 800ed2a:	3202      	adds	r2, #2
 800ed2c:	f08c 0c20 	eor.w	ip, ip, #32
 800ed30:	b2d2      	uxtb	r2, r2
 800ed32:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 800ed36:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 800ed3a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ed3e:	f1b9 0f00 	cmp.w	r9, #0
 800ed42:	d0e5      	beq.n	800ed10 <uxr_write_framed_msg+0x204>
 800ed44:	2500      	movs	r5, #0
 800ed46:	e001      	b.n	800ed4c <uxr_write_framed_msg+0x240>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	d0a4      	beq.n	800ec96 <uxr_write_framed_msg+0x18a>
 800ed4c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ed50:	1b52      	subs	r2, r2, r5
 800ed52:	4643      	mov	r3, r8
 800ed54:	4421      	add	r1, r4
 800ed56:	4638      	mov	r0, r7
 800ed58:	47b0      	blx	r6
 800ed5a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ed5e:	4405      	add	r5, r0
 800ed60:	4295      	cmp	r5, r2
 800ed62:	d3f1      	bcc.n	800ed48 <uxr_write_framed_msg+0x23c>
 800ed64:	d197      	bne.n	800ec96 <uxr_write_framed_msg+0x18a>
 800ed66:	2300      	movs	r3, #0
 800ed68:	fa1f f08b 	uxth.w	r0, fp
 800ed6c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ed70:	b005      	add	sp, #20
 800ed72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed76:	2300      	movs	r3, #0
 800ed78:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800ed7c:	e732      	b.n	800ebe4 <uxr_write_framed_msg+0xd8>
 800ed7e:	44a6      	add	lr, r4
 800ed80:	f085 0520 	eor.w	r5, r5, #32
 800ed84:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ed88:	4610      	mov	r0, r2
 800ed8a:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 800ed8e:	464a      	mov	r2, r9
 800ed90:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 800ed94:	e6e5      	b.n	800eb62 <uxr_write_framed_msg+0x56>
 800ed96:	f08c 0c20 	eor.w	ip, ip, #32
 800ed9a:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 800ed9e:	2103      	movs	r1, #3
 800eda0:	2004      	movs	r0, #4
 800eda2:	f04f 0906 	mov.w	r9, #6
 800eda6:	2205      	movs	r2, #5
 800eda8:	4686      	mov	lr, r0
 800edaa:	460b      	mov	r3, r1
 800edac:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800edb0:	e6ca      	b.n	800eb48 <uxr_write_framed_msg+0x3c>
 800edb2:	f8ad b00c 	strh.w	fp, [sp, #12]
 800edb6:	46dc      	mov	ip, fp
 800edb8:	e779      	b.n	800ecae <uxr_write_framed_msg+0x1a2>
 800edba:	bf00      	nop
 800edbc:	0801aa38 	.word	0x0801aa38

0800edc0 <uxr_framing_read_transport>:
 800edc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc4:	4604      	mov	r4, r0
 800edc6:	b083      	sub	sp, #12
 800edc8:	461f      	mov	r7, r3
 800edca:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800edce:	4689      	mov	r9, r1
 800edd0:	4692      	mov	sl, r2
 800edd2:	f000 fc5d 	bl	800f690 <uxr_millis>
 800edd6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800edda:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800edde:	42b3      	cmp	r3, r6
 800ede0:	4680      	mov	r8, r0
 800ede2:	d062      	beq.n	800eeaa <uxr_framing_read_transport+0xea>
 800ede4:	d81c      	bhi.n	800ee20 <uxr_framing_read_transport+0x60>
 800ede6:	1e75      	subs	r5, r6, #1
 800ede8:	1aed      	subs	r5, r5, r3
 800edea:	b2ed      	uxtb	r5, r5
 800edec:	2600      	movs	r6, #0
 800edee:	455d      	cmp	r5, fp
 800edf0:	d81f      	bhi.n	800ee32 <uxr_framing_read_transport+0x72>
 800edf2:	19ab      	adds	r3, r5, r6
 800edf4:	455b      	cmp	r3, fp
 800edf6:	bf84      	itt	hi
 800edf8:	ebab 0b05 	subhi.w	fp, fp, r5
 800edfc:	fa5f f68b 	uxtbhi.w	r6, fp
 800ee00:	b9e5      	cbnz	r5, 800ee3c <uxr_framing_read_transport+0x7c>
 800ee02:	f04f 0b00 	mov.w	fp, #0
 800ee06:	f000 fc43 	bl	800f690 <uxr_millis>
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	eba0 0108 	sub.w	r1, r0, r8
 800ee10:	1a5b      	subs	r3, r3, r1
 800ee12:	4658      	mov	r0, fp
 800ee14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ee18:	603b      	str	r3, [r7, #0]
 800ee1a:	b003      	add	sp, #12
 800ee1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee20:	2e00      	cmp	r6, #0
 800ee22:	d04a      	beq.n	800eeba <uxr_framing_read_transport+0xfa>
 800ee24:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800ee28:	b2dd      	uxtb	r5, r3
 800ee2a:	3e01      	subs	r6, #1
 800ee2c:	455d      	cmp	r5, fp
 800ee2e:	b2f6      	uxtb	r6, r6
 800ee30:	d9df      	bls.n	800edf2 <uxr_framing_read_transport+0x32>
 800ee32:	fa5f f58b 	uxtb.w	r5, fp
 800ee36:	2600      	movs	r6, #0
 800ee38:	2d00      	cmp	r5, #0
 800ee3a:	d0e2      	beq.n	800ee02 <uxr_framing_read_transport+0x42>
 800ee3c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ee40:	3102      	adds	r1, #2
 800ee42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	4421      	add	r1, r4
 800ee4a:	462a      	mov	r2, r5
 800ee4c:	4650      	mov	r0, sl
 800ee4e:	47c8      	blx	r9
 800ee50:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ee54:	4a1b      	ldr	r2, [pc, #108]	@ (800eec4 <uxr_framing_read_transport+0x104>)
 800ee56:	4403      	add	r3, r0
 800ee58:	0859      	lsrs	r1, r3, #1
 800ee5a:	4683      	mov	fp, r0
 800ee5c:	fba2 0101 	umull	r0, r1, r2, r1
 800ee60:	0889      	lsrs	r1, r1, #2
 800ee62:	222a      	movs	r2, #42	@ 0x2a
 800ee64:	fb02 3111 	mls	r1, r2, r1, r3
 800ee68:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800ee6c:	f1bb 0f00 	cmp.w	fp, #0
 800ee70:	d0c7      	beq.n	800ee02 <uxr_framing_read_transport+0x42>
 800ee72:	45ab      	cmp	fp, r5
 800ee74:	d1c7      	bne.n	800ee06 <uxr_framing_read_transport+0x46>
 800ee76:	2e00      	cmp	r6, #0
 800ee78:	d0c5      	beq.n	800ee06 <uxr_framing_read_transport+0x46>
 800ee7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	3102      	adds	r1, #2
 800ee80:	4632      	mov	r2, r6
 800ee82:	4421      	add	r1, r4
 800ee84:	2300      	movs	r3, #0
 800ee86:	4650      	mov	r0, sl
 800ee88:	47c8      	blx	r9
 800ee8a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ee8e:	4a0d      	ldr	r2, [pc, #52]	@ (800eec4 <uxr_framing_read_transport+0x104>)
 800ee90:	4403      	add	r3, r0
 800ee92:	0859      	lsrs	r1, r3, #1
 800ee94:	fba2 2101 	umull	r2, r1, r2, r1
 800ee98:	0889      	lsrs	r1, r1, #2
 800ee9a:	222a      	movs	r2, #42	@ 0x2a
 800ee9c:	fb02 3311 	mls	r3, r2, r1, r3
 800eea0:	eb00 0b05 	add.w	fp, r0, r5
 800eea4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800eea8:	e7ad      	b.n	800ee06 <uxr_framing_read_transport+0x46>
 800eeaa:	2600      	movs	r6, #0
 800eeac:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800eeb0:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800eeb2:	d9be      	bls.n	800ee32 <uxr_framing_read_transport+0x72>
 800eeb4:	2529      	movs	r5, #41	@ 0x29
 800eeb6:	2102      	movs	r1, #2
 800eeb8:	e7c3      	b.n	800ee42 <uxr_framing_read_transport+0x82>
 800eeba:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 800eebe:	b2dd      	uxtb	r5, r3
 800eec0:	e795      	b.n	800edee <uxr_framing_read_transport+0x2e>
 800eec2:	bf00      	nop
 800eec4:	30c30c31 	.word	0x30c30c31

0800eec8 <uxr_read_framed_msg>:
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	461d      	mov	r5, r3
 800eece:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 800eed2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800eed6:	b085      	sub	sp, #20
 800eed8:	459c      	cmp	ip, r3
 800eeda:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800eede:	4604      	mov	r4, r0
 800eee0:	460f      	mov	r7, r1
 800eee2:	4616      	mov	r6, r2
 800eee4:	f000 81ae 	beq.w	800f244 <uxr_read_framed_msg+0x37c>
 800eee8:	2000      	movs	r0, #0
 800eeea:	4639      	mov	r1, r7
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d138      	bne.n	800ef62 <uxr_read_framed_msg+0x9a>
 800eef0:	468a      	mov	sl, r1
 800eef2:	7823      	ldrb	r3, [r4, #0]
 800eef4:	2b07      	cmp	r3, #7
 800eef6:	d8fd      	bhi.n	800eef4 <uxr_read_framed_msg+0x2c>
 800eef8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800eefc:	0116013b 	.word	0x0116013b
 800ef00:	00cd00f0 	.word	0x00cd00f0
 800ef04:	005a00a0 	.word	0x005a00a0
 800ef08:	00080037 	.word	0x00080037
 800ef0c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ef10:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ef14:	4290      	cmp	r0, r2
 800ef16:	f000 8167 	beq.w	800f1e8 <uxr_read_framed_msg+0x320>
 800ef1a:	18a3      	adds	r3, r4, r2
 800ef1c:	1c57      	adds	r7, r2, #1
 800ef1e:	49c7      	ldr	r1, [pc, #796]	@ (800f23c <uxr_read_framed_msg+0x374>)
 800ef20:	f893 c002 	ldrb.w	ip, [r3, #2]
 800ef24:	087b      	lsrs	r3, r7, #1
 800ef26:	fba1 8303 	umull	r8, r3, r1, r3
 800ef2a:	089b      	lsrs	r3, r3, #2
 800ef2c:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800ef30:	fb08 7313 	mls	r3, r8, r3, r7
 800ef34:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800ef38:	b2df      	uxtb	r7, r3
 800ef3a:	f000 81b2 	beq.w	800f2a2 <uxr_read_framed_msg+0x3da>
 800ef3e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800ef42:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 800ef46:	f000 8220 	beq.w	800f38a <uxr_read_framed_msg+0x4c2>
 800ef4a:	4661      	mov	r1, ip
 800ef4c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800ef4e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800ef50:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	2100      	movs	r1, #0
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ef5c:	7021      	strb	r1, [r4, #0]
 800ef5e:	f000 8198 	beq.w	800f292 <uxr_read_framed_msg+0x3ca>
 800ef62:	2000      	movs	r0, #0
 800ef64:	b005      	add	sp, #20
 800ef66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6a:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800ef6e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ef72:	4297      	cmp	r7, r2
 800ef74:	f000 8148 	beq.w	800f208 <uxr_read_framed_msg+0x340>
 800ef78:	18a3      	adds	r3, r4, r2
 800ef7a:	f102 0c01 	add.w	ip, r2, #1
 800ef7e:	49af      	ldr	r1, [pc, #700]	@ (800f23c <uxr_read_framed_msg+0x374>)
 800ef80:	7898      	ldrb	r0, [r3, #2]
 800ef82:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800ef86:	fba1 8303 	umull	r8, r3, r1, r3
 800ef8a:	089b      	lsrs	r3, r3, #2
 800ef8c:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800ef90:	fb08 c313 	mls	r3, r8, r3, ip
 800ef94:	287d      	cmp	r0, #125	@ 0x7d
 800ef96:	fa5f fc83 	uxtb.w	ip, r3
 800ef9a:	f000 8194 	beq.w	800f2c6 <uxr_read_framed_msg+0x3fe>
 800ef9e:	287e      	cmp	r0, #126	@ 0x7e
 800efa0:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800efa4:	f000 8200 	beq.w	800f3a8 <uxr_read_framed_msg+0x4e0>
 800efa8:	2307      	movs	r3, #7
 800efaa:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800efac:	7023      	strb	r3, [r4, #0]
 800efae:	e7a0      	b.n	800eef2 <uxr_read_framed_msg+0x2a>
 800efb0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800efb2:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800efb4:	429f      	cmp	r7, r3
 800efb6:	f240 8164 	bls.w	800f282 <uxr_read_framed_msg+0x3ba>
 800efba:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 800f23c <uxr_read_framed_msg+0x374>
 800efbe:	f8cd a00c 	str.w	sl, [sp, #12]
 800efc2:	212a      	movs	r1, #42	@ 0x2a
 800efc4:	e01f      	b.n	800f006 <uxr_read_framed_msg+0x13e>
 800efc6:	f89a e002 	ldrb.w	lr, [sl, #2]
 800efca:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 800efce:	f000 80ea 	beq.w	800f1a6 <uxr_read_framed_msg+0x2de>
 800efd2:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800efd6:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800efda:	f000 8142 	beq.w	800f262 <uxr_read_framed_msg+0x39a>
 800efde:	f805 e003 	strb.w	lr, [r5, r3]
 800efe2:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800efe4:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800efe6:	4f96      	ldr	r7, [pc, #600]	@ (800f240 <uxr_read_framed_msg+0x378>)
 800efe8:	ea80 020e 	eor.w	r2, r0, lr
 800efec:	b2d2      	uxtb	r2, r2
 800efee:	3301      	adds	r3, #1
 800eff0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800eff4:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800effc:	42bb      	cmp	r3, r7
 800effe:	8663      	strh	r3, [r4, #50]	@ 0x32
 800f000:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f002:	f080 80e7 	bcs.w	800f1d4 <uxr_read_framed_msg+0x30c>
 800f006:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800f00a:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800f00e:	f100 0c01 	add.w	ip, r0, #1
 800f012:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 800f016:	fba9 e20e 	umull	lr, r2, r9, lr
 800f01a:	0892      	lsrs	r2, r2, #2
 800f01c:	fb01 c212 	mls	r2, r1, r2, ip
 800f020:	4580      	cmp	r8, r0
 800f022:	eb04 0a00 	add.w	sl, r4, r0
 800f026:	fa5f fc82 	uxtb.w	ip, r2
 800f02a:	d1cc      	bne.n	800efc6 <uxr_read_framed_msg+0xfe>
 800f02c:	42bb      	cmp	r3, r7
 800f02e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f032:	f040 8128 	bne.w	800f286 <uxr_read_framed_msg+0x3be>
 800f036:	2306      	movs	r3, #6
 800f038:	7023      	strb	r3, [r4, #0]
 800f03a:	e75a      	b.n	800eef2 <uxr_read_framed_msg+0x2a>
 800f03c:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800f040:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f044:	4297      	cmp	r7, r2
 800f046:	f000 80cf 	beq.w	800f1e8 <uxr_read_framed_msg+0x320>
 800f04a:	18a3      	adds	r3, r4, r2
 800f04c:	f102 0c01 	add.w	ip, r2, #1
 800f050:	497a      	ldr	r1, [pc, #488]	@ (800f23c <uxr_read_framed_msg+0x374>)
 800f052:	7898      	ldrb	r0, [r3, #2]
 800f054:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800f058:	fba1 8303 	umull	r8, r3, r1, r3
 800f05c:	089b      	lsrs	r3, r3, #2
 800f05e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f062:	fb08 c313 	mls	r3, r8, r3, ip
 800f066:	287d      	cmp	r0, #125	@ 0x7d
 800f068:	fa5f fc83 	uxtb.w	ip, r3
 800f06c:	f000 813d 	beq.w	800f2ea <uxr_read_framed_msg+0x422>
 800f070:	287e      	cmp	r0, #126	@ 0x7e
 800f072:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f076:	f000 8188 	beq.w	800f38a <uxr_read_framed_msg+0x4c2>
 800f07a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800f07c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f07e:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800f082:	b29b      	uxth	r3, r3
 800f084:	2200      	movs	r2, #0
 800f086:	428b      	cmp	r3, r1
 800f088:	8623      	strh	r3, [r4, #48]	@ 0x30
 800f08a:	8662      	strh	r2, [r4, #50]	@ 0x32
 800f08c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f08e:	f240 80f5 	bls.w	800f27c <uxr_read_framed_msg+0x3b4>
 800f092:	7022      	strb	r2, [r4, #0]
 800f094:	e765      	b.n	800ef62 <uxr_read_framed_msg+0x9a>
 800f096:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800f09a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f09e:	4297      	cmp	r7, r2
 800f0a0:	f000 80b2 	beq.w	800f208 <uxr_read_framed_msg+0x340>
 800f0a4:	18a3      	adds	r3, r4, r2
 800f0a6:	f102 0c01 	add.w	ip, r2, #1
 800f0aa:	4964      	ldr	r1, [pc, #400]	@ (800f23c <uxr_read_framed_msg+0x374>)
 800f0ac:	7898      	ldrb	r0, [r3, #2]
 800f0ae:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800f0b2:	fba1 8303 	umull	r8, r3, r1, r3
 800f0b6:	089b      	lsrs	r3, r3, #2
 800f0b8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f0bc:	fb08 c313 	mls	r3, r8, r3, ip
 800f0c0:	287d      	cmp	r0, #125	@ 0x7d
 800f0c2:	fa5f fc83 	uxtb.w	ip, r3
 800f0c6:	f000 813b 	beq.w	800f340 <uxr_read_framed_msg+0x478>
 800f0ca:	287e      	cmp	r0, #126	@ 0x7e
 800f0cc:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f0d0:	f000 816a 	beq.w	800f3a8 <uxr_read_framed_msg+0x4e0>
 800f0d4:	2304      	movs	r3, #4
 800f0d6:	8620      	strh	r0, [r4, #48]	@ 0x30
 800f0d8:	7023      	strb	r3, [r4, #0]
 800f0da:	e70a      	b.n	800eef2 <uxr_read_framed_msg+0x2a>
 800f0dc:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800f0e0:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f0e4:	4297      	cmp	r7, r2
 800f0e6:	f000 80c4 	beq.w	800f272 <uxr_read_framed_msg+0x3aa>
 800f0ea:	18a3      	adds	r3, r4, r2
 800f0ec:	f102 0c01 	add.w	ip, r2, #1
 800f0f0:	4952      	ldr	r1, [pc, #328]	@ (800f23c <uxr_read_framed_msg+0x374>)
 800f0f2:	7898      	ldrb	r0, [r3, #2]
 800f0f4:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800f0f8:	fba1 8303 	umull	r8, r3, r1, r3
 800f0fc:	089b      	lsrs	r3, r3, #2
 800f0fe:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f102:	fb08 c313 	mls	r3, r8, r3, ip
 800f106:	287d      	cmp	r0, #125	@ 0x7d
 800f108:	fa5f fc83 	uxtb.w	ip, r3
 800f10c:	f000 812b 	beq.w	800f366 <uxr_read_framed_msg+0x49e>
 800f110:	287e      	cmp	r0, #126	@ 0x7e
 800f112:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f116:	f000 8155 	beq.w	800f3c4 <uxr_read_framed_msg+0x4fc>
 800f11a:	7863      	ldrb	r3, [r4, #1]
 800f11c:	4283      	cmp	r3, r0
 800f11e:	bf0c      	ite	eq
 800f120:	2303      	moveq	r3, #3
 800f122:	2300      	movne	r3, #0
 800f124:	7023      	strb	r3, [r4, #0]
 800f126:	e6e4      	b.n	800eef2 <uxr_read_framed_msg+0x2a>
 800f128:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f12c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f130:	2300      	movs	r3, #0
 800f132:	4290      	cmp	r0, r2
 800f134:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 800f138:	d06b      	beq.n	800f212 <uxr_read_framed_msg+0x34a>
 800f13a:	18a3      	adds	r3, r4, r2
 800f13c:	f102 0c01 	add.w	ip, r2, #1
 800f140:	493e      	ldr	r1, [pc, #248]	@ (800f23c <uxr_read_framed_msg+0x374>)
 800f142:	789f      	ldrb	r7, [r3, #2]
 800f144:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800f148:	fba1 8303 	umull	r8, r3, r1, r3
 800f14c:	089b      	lsrs	r3, r3, #2
 800f14e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800f152:	fb08 c313 	mls	r3, r8, r3, ip
 800f156:	2f7d      	cmp	r7, #125	@ 0x7d
 800f158:	fa5f fc83 	uxtb.w	ip, r3
 800f15c:	f000 80d8 	beq.w	800f310 <uxr_read_framed_msg+0x448>
 800f160:	2f7e      	cmp	r7, #126	@ 0x7e
 800f162:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800f166:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 800f16a:	d052      	beq.n	800f212 <uxr_read_framed_msg+0x34a>
 800f16c:	2302      	movs	r3, #2
 800f16e:	7023      	strb	r3, [r4, #0]
 800f170:	e6bf      	b.n	800eef2 <uxr_read_framed_msg+0x2a>
 800f172:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800f176:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f17a:	4930      	ldr	r1, [pc, #192]	@ (800f23c <uxr_read_framed_msg+0x374>)
 800f17c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f180:	e004      	b.n	800f18c <uxr_read_framed_msg+0x2c4>
 800f182:	78bb      	ldrb	r3, [r7, #2]
 800f184:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f188:	2b7e      	cmp	r3, #126	@ 0x7e
 800f18a:	d02a      	beq.n	800f1e2 <uxr_read_framed_msg+0x31a>
 800f18c:	1c50      	adds	r0, r2, #1
 800f18e:	0843      	lsrs	r3, r0, #1
 800f190:	fba1 e303 	umull	lr, r3, r1, r3
 800f194:	089b      	lsrs	r3, r3, #2
 800f196:	fb0c 0013 	mls	r0, ip, r3, r0
 800f19a:	4590      	cmp	r8, r2
 800f19c:	eb04 0702 	add.w	r7, r4, r2
 800f1a0:	b2c2      	uxtb	r2, r0
 800f1a2:	d1ee      	bne.n	800f182 <uxr_read_framed_msg+0x2ba>
 800f1a4:	e6dd      	b.n	800ef62 <uxr_read_framed_msg+0x9a>
 800f1a6:	3002      	adds	r0, #2
 800f1a8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800f1ac:	eb04 0a02 	add.w	sl, r4, r2
 800f1b0:	fba9 e20e 	umull	lr, r2, r9, lr
 800f1b4:	0892      	lsrs	r2, r2, #2
 800f1b6:	45e0      	cmp	r8, ip
 800f1b8:	fb01 0012 	mls	r0, r1, r2, r0
 800f1bc:	f43f af36 	beq.w	800f02c <uxr_read_framed_msg+0x164>
 800f1c0:	f89a e002 	ldrb.w	lr, [sl, #2]
 800f1c4:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800f1c8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800f1cc:	d049      	beq.n	800f262 <uxr_read_framed_msg+0x39a>
 800f1ce:	f08e 0e20 	eor.w	lr, lr, #32
 800f1d2:	e704      	b.n	800efde <uxr_read_framed_msg+0x116>
 800f1d4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f1d8:	f43f af2d 	beq.w	800f036 <uxr_read_framed_msg+0x16e>
 800f1dc:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800f1e0:	d151      	bne.n	800f286 <uxr_read_framed_msg+0x3be>
 800f1e2:	2301      	movs	r3, #1
 800f1e4:	7023      	strb	r3, [r4, #0]
 800f1e6:	e684      	b.n	800eef2 <uxr_read_framed_msg+0x2a>
 800f1e8:	4651      	mov	r1, sl
 800f1ea:	f8cd b000 	str.w	fp, [sp]
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	9301      	str	r3, [sp, #4]
 800f1f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f1f4:	9103      	str	r1, [sp, #12]
 800f1f6:	4632      	mov	r2, r6
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f7ff fde1 	bl	800edc0 <uxr_framing_read_transport>
 800f1fe:	fab0 f080 	clz	r0, r0
 800f202:	9903      	ldr	r1, [sp, #12]
 800f204:	0940      	lsrs	r0, r0, #5
 800f206:	e671      	b.n	800eeec <uxr_read_framed_msg+0x24>
 800f208:	4651      	mov	r1, sl
 800f20a:	f8cd b000 	str.w	fp, [sp]
 800f20e:	2302      	movs	r3, #2
 800f210:	e7ee      	b.n	800f1f0 <uxr_read_framed_msg+0x328>
 800f212:	2304      	movs	r3, #4
 800f214:	9301      	str	r3, [sp, #4]
 800f216:	f8cd b000 	str.w	fp, [sp]
 800f21a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f21c:	4632      	mov	r2, r6
 800f21e:	4651      	mov	r1, sl
 800f220:	4620      	mov	r0, r4
 800f222:	f7ff fdcd 	bl	800edc0 <uxr_framing_read_transport>
 800f226:	2800      	cmp	r0, #0
 800f228:	f47f ae63 	bne.w	800eef2 <uxr_read_framed_msg+0x2a>
 800f22c:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800f230:	387e      	subs	r0, #126	@ 0x7e
 800f232:	4651      	mov	r1, sl
 800f234:	bf18      	it	ne
 800f236:	2001      	movne	r0, #1
 800f238:	e658      	b.n	800eeec <uxr_read_framed_msg+0x24>
 800f23a:	bf00      	nop
 800f23c:	30c30c31 	.word	0x30c30c31
 800f240:	0801aa38 	.word	0x0801aa38
 800f244:	2305      	movs	r3, #5
 800f246:	9301      	str	r3, [sp, #4]
 800f248:	f8cd b000 	str.w	fp, [sp]
 800f24c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f24e:	f7ff fdb7 	bl	800edc0 <uxr_framing_read_transport>
 800f252:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800f256:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f25a:	429a      	cmp	r2, r3
 800f25c:	f43f ae81 	beq.w	800ef62 <uxr_read_framed_msg+0x9a>
 800f260:	e642      	b.n	800eee8 <uxr_read_framed_msg+0x20>
 800f262:	42bb      	cmp	r3, r7
 800f264:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800f268:	f43f aee5 	beq.w	800f036 <uxr_read_framed_msg+0x16e>
 800f26c:	2301      	movs	r3, #1
 800f26e:	7023      	strb	r3, [r4, #0]
 800f270:	e63f      	b.n	800eef2 <uxr_read_framed_msg+0x2a>
 800f272:	4651      	mov	r1, sl
 800f274:	f8cd b000 	str.w	fp, [sp]
 800f278:	2303      	movs	r3, #3
 800f27a:	e7b9      	b.n	800f1f0 <uxr_read_framed_msg+0x328>
 800f27c:	2305      	movs	r3, #5
 800f27e:	7023      	strb	r3, [r4, #0]
 800f280:	e637      	b.n	800eef2 <uxr_read_framed_msg+0x2a>
 800f282:	f43f aed8 	beq.w	800f036 <uxr_read_framed_msg+0x16e>
 800f286:	1afb      	subs	r3, r7, r3
 800f288:	3302      	adds	r3, #2
 800f28a:	e9cd b300 	strd	fp, r3, [sp]
 800f28e:	4651      	mov	r1, sl
 800f290:	e7af      	b.n	800f1f2 <uxr_read_framed_msg+0x32a>
 800f292:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f294:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f298:	7013      	strb	r3, [r2, #0]
 800f29a:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800f29c:	b005      	add	sp, #20
 800f29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2a2:	4287      	cmp	r7, r0
 800f2a4:	d0a0      	beq.n	800f1e8 <uxr_read_framed_msg+0x320>
 800f2a6:	4423      	add	r3, r4
 800f2a8:	3202      	adds	r2, #2
 800f2aa:	7898      	ldrb	r0, [r3, #2]
 800f2ac:	0853      	lsrs	r3, r2, #1
 800f2ae:	fba1 e303 	umull	lr, r3, r1, r3
 800f2b2:	089b      	lsrs	r3, r3, #2
 800f2b4:	fb08 2213 	mls	r2, r8, r3, r2
 800f2b8:	287e      	cmp	r0, #126	@ 0x7e
 800f2ba:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f2be:	d064      	beq.n	800f38a <uxr_read_framed_msg+0x4c2>
 800f2c0:	f080 0120 	eor.w	r1, r0, #32
 800f2c4:	e642      	b.n	800ef4c <uxr_read_framed_msg+0x84>
 800f2c6:	45bc      	cmp	ip, r7
 800f2c8:	d09e      	beq.n	800f208 <uxr_read_framed_msg+0x340>
 800f2ca:	4423      	add	r3, r4
 800f2cc:	3202      	adds	r2, #2
 800f2ce:	7898      	ldrb	r0, [r3, #2]
 800f2d0:	0853      	lsrs	r3, r2, #1
 800f2d2:	fba1 e303 	umull	lr, r3, r1, r3
 800f2d6:	089b      	lsrs	r3, r3, #2
 800f2d8:	fb08 2213 	mls	r2, r8, r3, r2
 800f2dc:	287e      	cmp	r0, #126	@ 0x7e
 800f2de:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f2e2:	d061      	beq.n	800f3a8 <uxr_read_framed_msg+0x4e0>
 800f2e4:	f080 0020 	eor.w	r0, r0, #32
 800f2e8:	e65e      	b.n	800efa8 <uxr_read_framed_msg+0xe0>
 800f2ea:	4567      	cmp	r7, ip
 800f2ec:	f43f af7c 	beq.w	800f1e8 <uxr_read_framed_msg+0x320>
 800f2f0:	4423      	add	r3, r4
 800f2f2:	3202      	adds	r2, #2
 800f2f4:	7898      	ldrb	r0, [r3, #2]
 800f2f6:	0853      	lsrs	r3, r2, #1
 800f2f8:	fba1 e303 	umull	lr, r3, r1, r3
 800f2fc:	089b      	lsrs	r3, r3, #2
 800f2fe:	fb08 2213 	mls	r2, r8, r3, r2
 800f302:	287e      	cmp	r0, #126	@ 0x7e
 800f304:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f308:	d03f      	beq.n	800f38a <uxr_read_framed_msg+0x4c2>
 800f30a:	f080 0020 	eor.w	r0, r0, #32
 800f30e:	e6b4      	b.n	800f07a <uxr_read_framed_msg+0x1b2>
 800f310:	4560      	cmp	r0, ip
 800f312:	f43f af7e 	beq.w	800f212 <uxr_read_framed_msg+0x34a>
 800f316:	4423      	add	r3, r4
 800f318:	3202      	adds	r2, #2
 800f31a:	7898      	ldrb	r0, [r3, #2]
 800f31c:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f320:	0853      	lsrs	r3, r2, #1
 800f322:	fba1 e303 	umull	lr, r3, r1, r3
 800f326:	089b      	lsrs	r3, r3, #2
 800f328:	fb08 2213 	mls	r2, r8, r3, r2
 800f32c:	287e      	cmp	r0, #126	@ 0x7e
 800f32e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f332:	f43f af6e 	beq.w	800f212 <uxr_read_framed_msg+0x34a>
 800f336:	f080 0020 	eor.w	r0, r0, #32
 800f33a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f33e:	e715      	b.n	800f16c <uxr_read_framed_msg+0x2a4>
 800f340:	4567      	cmp	r7, ip
 800f342:	f43f af61 	beq.w	800f208 <uxr_read_framed_msg+0x340>
 800f346:	4423      	add	r3, r4
 800f348:	3202      	adds	r2, #2
 800f34a:	7898      	ldrb	r0, [r3, #2]
 800f34c:	0853      	lsrs	r3, r2, #1
 800f34e:	fba1 e303 	umull	lr, r3, r1, r3
 800f352:	089b      	lsrs	r3, r3, #2
 800f354:	fb08 2213 	mls	r2, r8, r3, r2
 800f358:	287e      	cmp	r0, #126	@ 0x7e
 800f35a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f35e:	d023      	beq.n	800f3a8 <uxr_read_framed_msg+0x4e0>
 800f360:	f080 0020 	eor.w	r0, r0, #32
 800f364:	e6b6      	b.n	800f0d4 <uxr_read_framed_msg+0x20c>
 800f366:	45bc      	cmp	ip, r7
 800f368:	d083      	beq.n	800f272 <uxr_read_framed_msg+0x3aa>
 800f36a:	4423      	add	r3, r4
 800f36c:	3202      	adds	r2, #2
 800f36e:	7898      	ldrb	r0, [r3, #2]
 800f370:	0853      	lsrs	r3, r2, #1
 800f372:	fba1 e303 	umull	lr, r3, r1, r3
 800f376:	089b      	lsrs	r3, r3, #2
 800f378:	fb08 2213 	mls	r2, r8, r3, r2
 800f37c:	287e      	cmp	r0, #126	@ 0x7e
 800f37e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f382:	d01f      	beq.n	800f3c4 <uxr_read_framed_msg+0x4fc>
 800f384:	f080 0020 	eor.w	r0, r0, #32
 800f388:	e6c7      	b.n	800f11a <uxr_read_framed_msg+0x252>
 800f38a:	2701      	movs	r7, #1
 800f38c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f38e:	f8cd b000 	str.w	fp, [sp]
 800f392:	9701      	str	r7, [sp, #4]
 800f394:	4632      	mov	r2, r6
 800f396:	4651      	mov	r1, sl
 800f398:	4620      	mov	r0, r4
 800f39a:	f7ff fd11 	bl	800edc0 <uxr_framing_read_transport>
 800f39e:	2800      	cmp	r0, #0
 800f3a0:	f47f ada7 	bne.w	800eef2 <uxr_read_framed_msg+0x2a>
 800f3a4:	7027      	strb	r7, [r4, #0]
 800f3a6:	e5a4      	b.n	800eef2 <uxr_read_framed_msg+0x2a>
 800f3a8:	f8cd b000 	str.w	fp, [sp]
 800f3ac:	2302      	movs	r3, #2
 800f3ae:	9301      	str	r3, [sp, #4]
 800f3b0:	4632      	mov	r2, r6
 800f3b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f3b4:	4651      	mov	r1, sl
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f7ff fd02 	bl	800edc0 <uxr_framing_read_transport>
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	f47f ad98 	bne.w	800eef2 <uxr_read_framed_msg+0x2a>
 800f3c2:	e70e      	b.n	800f1e2 <uxr_read_framed_msg+0x31a>
 800f3c4:	f8cd b000 	str.w	fp, [sp]
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	e7f0      	b.n	800f3ae <uxr_read_framed_msg+0x4e6>

0800f3cc <uxr_stream_id>:
 800f3cc:	2901      	cmp	r1, #1
 800f3ce:	b082      	sub	sp, #8
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	d011      	beq.n	800f3f8 <uxr_stream_id+0x2c>
 800f3d4:	2902      	cmp	r1, #2
 800f3d6:	f04f 0c00 	mov.w	ip, #0
 800f3da:	d00a      	beq.n	800f3f2 <uxr_stream_id+0x26>
 800f3dc:	2000      	movs	r0, #0
 800f3de:	f36c 0007 	bfi	r0, ip, #0, #8
 800f3e2:	f363 200f 	bfi	r0, r3, #8, #8
 800f3e6:	f361 4017 	bfi	r0, r1, #16, #8
 800f3ea:	f362 601f 	bfi	r0, r2, #24, #8
 800f3ee:	b002      	add	sp, #8
 800f3f0:	4770      	bx	lr
 800f3f2:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800f3f6:	e7f1      	b.n	800f3dc <uxr_stream_id+0x10>
 800f3f8:	f100 0c01 	add.w	ip, r0, #1
 800f3fc:	fa5f fc8c 	uxtb.w	ip, ip
 800f400:	e7ec      	b.n	800f3dc <uxr_stream_id+0x10>
 800f402:	bf00      	nop

0800f404 <uxr_stream_id_from_raw>:
 800f404:	b082      	sub	sp, #8
 800f406:	4603      	mov	r3, r0
 800f408:	b130      	cbz	r0, 800f418 <uxr_stream_id_from_raw+0x14>
 800f40a:	0602      	lsls	r2, r0, #24
 800f40c:	d411      	bmi.n	800f432 <uxr_stream_id_from_raw+0x2e>
 800f40e:	1e42      	subs	r2, r0, #1
 800f410:	b2d2      	uxtb	r2, r2
 800f412:	f04f 0c01 	mov.w	ip, #1
 800f416:	e001      	b.n	800f41c <uxr_stream_id_from_raw+0x18>
 800f418:	4684      	mov	ip, r0
 800f41a:	4602      	mov	r2, r0
 800f41c:	2000      	movs	r0, #0
 800f41e:	f363 0007 	bfi	r0, r3, #0, #8
 800f422:	f362 200f 	bfi	r0, r2, #8, #8
 800f426:	f36c 4017 	bfi	r0, ip, #16, #8
 800f42a:	f361 601f 	bfi	r0, r1, #24, #8
 800f42e:	b002      	add	sp, #8
 800f430:	4770      	bx	lr
 800f432:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800f436:	f04f 0c02 	mov.w	ip, #2
 800f43a:	e7ef      	b.n	800f41c <uxr_stream_id_from_raw+0x18>

0800f43c <uxr_init_stream_storage>:
 800f43c:	2300      	movs	r3, #0
 800f43e:	7403      	strb	r3, [r0, #16]
 800f440:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800f444:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800f448:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop

0800f450 <uxr_reset_stream_storage>:
 800f450:	b570      	push	{r4, r5, r6, lr}
 800f452:	7c03      	ldrb	r3, [r0, #16]
 800f454:	4604      	mov	r4, r0
 800f456:	b153      	cbz	r3, 800f46e <uxr_reset_stream_storage+0x1e>
 800f458:	4606      	mov	r6, r0
 800f45a:	2500      	movs	r5, #0
 800f45c:	4630      	mov	r0, r6
 800f45e:	f006 ff9d 	bl	801639c <uxr_reset_output_best_effort_stream>
 800f462:	7c23      	ldrb	r3, [r4, #16]
 800f464:	3501      	adds	r5, #1
 800f466:	42ab      	cmp	r3, r5
 800f468:	f106 0610 	add.w	r6, r6, #16
 800f46c:	d8f6      	bhi.n	800f45c <uxr_reset_stream_storage+0xc>
 800f46e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f472:	b163      	cbz	r3, 800f48e <uxr_reset_stream_storage+0x3e>
 800f474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f478:	2500      	movs	r5, #0
 800f47a:	4630      	mov	r0, r6
 800f47c:	f006 fd9e 	bl	8015fbc <uxr_reset_input_best_effort_stream>
 800f480:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f484:	3501      	adds	r5, #1
 800f486:	42ab      	cmp	r3, r5
 800f488:	f106 0602 	add.w	r6, r6, #2
 800f48c:	d8f5      	bhi.n	800f47a <uxr_reset_stream_storage+0x2a>
 800f48e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f492:	b163      	cbz	r3, 800f4ae <uxr_reset_stream_storage+0x5e>
 800f494:	f104 0618 	add.w	r6, r4, #24
 800f498:	2500      	movs	r5, #0
 800f49a:	4630      	mov	r0, r6
 800f49c:	f007 f828 	bl	80164f0 <uxr_reset_output_reliable_stream>
 800f4a0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f4a4:	3501      	adds	r5, #1
 800f4a6:	42ab      	cmp	r3, r5
 800f4a8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800f4ac:	d8f5      	bhi.n	800f49a <uxr_reset_stream_storage+0x4a>
 800f4ae:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f4b2:	b163      	cbz	r3, 800f4ce <uxr_reset_stream_storage+0x7e>
 800f4b4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800f4b8:	2500      	movs	r5, #0
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	f006 fdee 	bl	801609c <uxr_reset_input_reliable_stream>
 800f4c0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f4c4:	3501      	adds	r5, #1
 800f4c6:	42ab      	cmp	r3, r5
 800f4c8:	f106 0618 	add.w	r6, r6, #24
 800f4cc:	d8f5      	bhi.n	800f4ba <uxr_reset_stream_storage+0x6a>
 800f4ce:	bd70      	pop	{r4, r5, r6, pc}

0800f4d0 <uxr_add_output_best_effort_buffer>:
 800f4d0:	b510      	push	{r4, lr}
 800f4d2:	7c04      	ldrb	r4, [r0, #16]
 800f4d4:	f104 0c01 	add.w	ip, r4, #1
 800f4d8:	b082      	sub	sp, #8
 800f4da:	f880 c010 	strb.w	ip, [r0, #16]
 800f4de:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f4e2:	f006 ff51 	bl	8016388 <uxr_init_output_best_effort_stream>
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	4611      	mov	r1, r2
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	b002      	add	sp, #8
 800f4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4f2:	f7ff bf6b 	b.w	800f3cc <uxr_stream_id>
 800f4f6:	bf00      	nop

0800f4f8 <uxr_add_output_reliable_buffer>:
 800f4f8:	b510      	push	{r4, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	4684      	mov	ip, r0
 800f4fe:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f502:	9000      	str	r0, [sp, #0]
 800f504:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800f508:	2028      	movs	r0, #40	@ 0x28
 800f50a:	fb00 c004 	mla	r0, r0, r4, ip
 800f50e:	f104 0e01 	add.w	lr, r4, #1
 800f512:	3018      	adds	r0, #24
 800f514:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800f518:	f006 ffb2 	bl	8016480 <uxr_init_output_reliable_stream>
 800f51c:	2201      	movs	r2, #1
 800f51e:	2102      	movs	r1, #2
 800f520:	4620      	mov	r0, r4
 800f522:	b004      	add	sp, #16
 800f524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f528:	f7ff bf50 	b.w	800f3cc <uxr_stream_id>

0800f52c <uxr_add_input_best_effort_buffer>:
 800f52c:	b510      	push	{r4, lr}
 800f52e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800f532:	1c62      	adds	r2, r4, #1
 800f534:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f538:	b082      	sub	sp, #8
 800f53a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800f53e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800f542:	f006 fd37 	bl	8015fb4 <uxr_init_input_best_effort_stream>
 800f546:	2200      	movs	r2, #0
 800f548:	2101      	movs	r1, #1
 800f54a:	4620      	mov	r0, r4
 800f54c:	b002      	add	sp, #8
 800f54e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f552:	f7ff bf3b 	b.w	800f3cc <uxr_stream_id>
 800f556:	bf00      	nop

0800f558 <uxr_add_input_reliable_buffer>:
 800f558:	b510      	push	{r4, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	4684      	mov	ip, r0
 800f55e:	9806      	ldr	r0, [sp, #24]
 800f560:	9000      	str	r0, [sp, #0]
 800f562:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800f566:	2018      	movs	r0, #24
 800f568:	fb00 c004 	mla	r0, r0, r4, ip
 800f56c:	f104 0e01 	add.w	lr, r4, #1
 800f570:	3048      	adds	r0, #72	@ 0x48
 800f572:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800f576:	f006 fd65 	bl	8016044 <uxr_init_input_reliable_stream>
 800f57a:	2200      	movs	r2, #0
 800f57c:	2102      	movs	r1, #2
 800f57e:	4620      	mov	r0, r4
 800f580:	b004      	add	sp, #16
 800f582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f586:	f7ff bf21 	b.w	800f3cc <uxr_stream_id>
 800f58a:	bf00      	nop

0800f58c <uxr_get_output_best_effort_stream>:
 800f58c:	7c03      	ldrb	r3, [r0, #16]
 800f58e:	428b      	cmp	r3, r1
 800f590:	bf8c      	ite	hi
 800f592:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800f596:	2000      	movls	r0, #0
 800f598:	4770      	bx	lr
 800f59a:	bf00      	nop

0800f59c <uxr_get_output_reliable_stream>:
 800f59c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f5a0:	428b      	cmp	r3, r1
 800f5a2:	bf83      	ittte	hi
 800f5a4:	2328      	movhi	r3, #40	@ 0x28
 800f5a6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f5aa:	3018      	addhi	r0, #24
 800f5ac:	2000      	movls	r0, #0
 800f5ae:	4770      	bx	lr

0800f5b0 <uxr_get_input_best_effort_stream>:
 800f5b0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f5b4:	428b      	cmp	r3, r1
 800f5b6:	bf86      	itte	hi
 800f5b8:	3121      	addhi	r1, #33	@ 0x21
 800f5ba:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800f5be:	2000      	movls	r0, #0
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop

0800f5c4 <uxr_get_input_reliable_stream>:
 800f5c4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800f5c8:	428b      	cmp	r3, r1
 800f5ca:	bf83      	ittte	hi
 800f5cc:	2318      	movhi	r3, #24
 800f5ce:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f5d2:	3048      	addhi	r0, #72	@ 0x48
 800f5d4:	2000      	movls	r0, #0
 800f5d6:	4770      	bx	lr

0800f5d8 <uxr_output_streams_confirmed>:
 800f5d8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f5dc:	b183      	cbz	r3, 800f600 <uxr_output_streams_confirmed+0x28>
 800f5de:	b570      	push	{r4, r5, r6, lr}
 800f5e0:	4606      	mov	r6, r0
 800f5e2:	f100 0518 	add.w	r5, r0, #24
 800f5e6:	2400      	movs	r4, #0
 800f5e8:	e001      	b.n	800f5ee <uxr_output_streams_confirmed+0x16>
 800f5ea:	3528      	adds	r5, #40	@ 0x28
 800f5ec:	b138      	cbz	r0, 800f5fe <uxr_output_streams_confirmed+0x26>
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	f007 f9e6 	bl	80169c0 <uxr_is_output_up_to_date>
 800f5f4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800f5f8:	3401      	adds	r4, #1
 800f5fa:	42a3      	cmp	r3, r4
 800f5fc:	d8f5      	bhi.n	800f5ea <uxr_output_streams_confirmed+0x12>
 800f5fe:	bd70      	pop	{r4, r5, r6, pc}
 800f600:	2001      	movs	r0, #1
 800f602:	4770      	bx	lr

0800f604 <uxr_buffer_submessage_header>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	4604      	mov	r4, r0
 800f608:	460e      	mov	r6, r1
 800f60a:	2104      	movs	r1, #4
 800f60c:	4615      	mov	r5, r2
 800f60e:	461f      	mov	r7, r3
 800f610:	f7fd fdb6 	bl	800d180 <ucdr_align_to>
 800f614:	2301      	movs	r3, #1
 800f616:	7523      	strb	r3, [r4, #20]
 800f618:	f047 0201 	orr.w	r2, r7, #1
 800f61c:	462b      	mov	r3, r5
 800f61e:	4631      	mov	r1, r6
 800f620:	4620      	mov	r0, r4
 800f622:	f000 fa2b 	bl	800fa7c <uxr_serialize_submessage_header>
 800f626:	4620      	mov	r0, r4
 800f628:	f7fd fdc0 	bl	800d1ac <ucdr_buffer_remaining>
 800f62c:	42a8      	cmp	r0, r5
 800f62e:	bf34      	ite	cc
 800f630:	2000      	movcc	r0, #0
 800f632:	2001      	movcs	r0, #1
 800f634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f636:	bf00      	nop

0800f638 <uxr_read_submessage_header>:
 800f638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f63c:	4604      	mov	r4, r0
 800f63e:	460d      	mov	r5, r1
 800f640:	2104      	movs	r1, #4
 800f642:	4616      	mov	r6, r2
 800f644:	4698      	mov	r8, r3
 800f646:	f7fd fd9b 	bl	800d180 <ucdr_align_to>
 800f64a:	4620      	mov	r0, r4
 800f64c:	f7fd fdae 	bl	800d1ac <ucdr_buffer_remaining>
 800f650:	2803      	cmp	r0, #3
 800f652:	bf8c      	ite	hi
 800f654:	2701      	movhi	r7, #1
 800f656:	2700      	movls	r7, #0
 800f658:	d802      	bhi.n	800f660 <uxr_read_submessage_header+0x28>
 800f65a:	4638      	mov	r0, r7
 800f65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f660:	4633      	mov	r3, r6
 800f662:	4642      	mov	r2, r8
 800f664:	4620      	mov	r0, r4
 800f666:	4629      	mov	r1, r5
 800f668:	f000 fa1a 	bl	800faa0 <uxr_deserialize_submessage_header>
 800f66c:	f898 3000 	ldrb.w	r3, [r8]
 800f670:	f003 0201 	and.w	r2, r3, #1
 800f674:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f678:	f888 3000 	strb.w	r3, [r8]
 800f67c:	7522      	strb	r2, [r4, #20]
 800f67e:	4638      	mov	r0, r7
 800f680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f684 <uxr_submessage_padding>:
 800f684:	f010 0003 	ands.w	r0, r0, #3
 800f688:	bf18      	it	ne
 800f68a:	f1c0 0004 	rsbne	r0, r0, #4
 800f68e:	4770      	bx	lr

0800f690 <uxr_millis>:
 800f690:	b510      	push	{r4, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	4669      	mov	r1, sp
 800f696:	2001      	movs	r0, #1
 800f698:	f7f2 fde6 	bl	8002268 <clock_gettime>
 800f69c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800f6a0:	4b06      	ldr	r3, [pc, #24]	@ (800f6bc <uxr_millis+0x2c>)
 800f6a2:	fba0 0103 	umull	r0, r1, r0, r3
 800f6a6:	1900      	adds	r0, r0, r4
 800f6a8:	fb03 1102 	mla	r1, r3, r2, r1
 800f6ac:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800f6b0:	4a03      	ldr	r2, [pc, #12]	@ (800f6c0 <uxr_millis+0x30>)
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	f7f1 f8a8 	bl	8000808 <__aeabi_ldivmod>
 800f6b8:	b004      	add	sp, #16
 800f6ba:	bd10      	pop	{r4, pc}
 800f6bc:	3b9aca00 	.word	0x3b9aca00
 800f6c0:	000f4240 	.word	0x000f4240

0800f6c4 <uxr_nanos>:
 800f6c4:	b510      	push	{r4, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	4669      	mov	r1, sp
 800f6ca:	2001      	movs	r0, #1
 800f6cc:	f7f2 fdcc 	bl	8002268 <clock_gettime>
 800f6d0:	4a06      	ldr	r2, [pc, #24]	@ (800f6ec <uxr_nanos+0x28>)
 800f6d2:	9800      	ldr	r0, [sp, #0]
 800f6d4:	9902      	ldr	r1, [sp, #8]
 800f6d6:	9c01      	ldr	r4, [sp, #4]
 800f6d8:	fba0 0302 	umull	r0, r3, r0, r2
 800f6dc:	1840      	adds	r0, r0, r1
 800f6de:	fb02 3304 	mla	r3, r2, r4, r3
 800f6e2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800f6e6:	b004      	add	sp, #16
 800f6e8:	bd10      	pop	{r4, pc}
 800f6ea:	bf00      	nop
 800f6ec:	3b9aca00 	.word	0x3b9aca00

0800f6f0 <on_full_output_buffer_fragmented>:
 800f6f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f4:	460c      	mov	r4, r1
 800f6f6:	b08a      	sub	sp, #40	@ 0x28
 800f6f8:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800f6fc:	4606      	mov	r6, r0
 800f6fe:	f104 0008 	add.w	r0, r4, #8
 800f702:	f7ff ff4b 	bl	800f59c <uxr_get_output_reliable_stream>
 800f706:	4605      	mov	r5, r0
 800f708:	f007 f964 	bl	80169d4 <get_available_free_slots>
 800f70c:	b968      	cbnz	r0, 800f72a <on_full_output_buffer_fragmented+0x3a>
 800f70e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800f712:	4620      	mov	r0, r4
 800f714:	4798      	blx	r3
 800f716:	b918      	cbnz	r0, 800f720 <on_full_output_buffer_fragmented+0x30>
 800f718:	2001      	movs	r0, #1
 800f71a:	b00a      	add	sp, #40	@ 0x28
 800f71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f720:	4628      	mov	r0, r5
 800f722:	f007 f957 	bl	80169d4 <get_available_free_slots>
 800f726:	2800      	cmp	r0, #0
 800f728:	d0f6      	beq.n	800f718 <on_full_output_buffer_fragmented+0x28>
 800f72a:	892a      	ldrh	r2, [r5, #8]
 800f72c:	686b      	ldr	r3, [r5, #4]
 800f72e:	fbb3 f8f2 	udiv	r8, r3, r2
 800f732:	89eb      	ldrh	r3, [r5, #14]
 800f734:	7b29      	ldrb	r1, [r5, #12]
 800f736:	fbb3 f0f2 	udiv	r0, r3, r2
 800f73a:	fb02 3310 	mls	r3, r2, r0, r3
 800f73e:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 800f742:	b29b      	uxth	r3, r3
 800f744:	fb08 f303 	mul.w	r3, r8, r3
 800f748:	31fc      	adds	r1, #252	@ 0xfc
 800f74a:	f1a8 0804 	sub.w	r8, r8, #4
 800f74e:	4441      	add	r1, r8
 800f750:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f754:	b28f      	uxth	r7, r1
 800f756:	6829      	ldr	r1, [r5, #0]
 800f758:	3304      	adds	r3, #4
 800f75a:	1bd2      	subs	r2, r2, r7
 800f75c:	4419      	add	r1, r3
 800f75e:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 800f762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	4642      	mov	r2, r8
 800f76a:	2300      	movs	r3, #0
 800f76c:	a802      	add	r0, sp, #8
 800f76e:	f7fd fcdb 	bl	800d128 <ucdr_init_buffer_origin_offset>
 800f772:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f776:	f102 0308 	add.w	r3, r2, #8
 800f77a:	4543      	cmp	r3, r8
 800f77c:	d928      	bls.n	800f7d0 <on_full_output_buffer_fragmented+0xe0>
 800f77e:	463a      	mov	r2, r7
 800f780:	2300      	movs	r3, #0
 800f782:	210d      	movs	r1, #13
 800f784:	a802      	add	r0, sp, #8
 800f786:	f7ff ff3d 	bl	800f604 <uxr_buffer_submessage_header>
 800f78a:	8929      	ldrh	r1, [r5, #8]
 800f78c:	89eb      	ldrh	r3, [r5, #14]
 800f78e:	fbb3 f2f1 	udiv	r2, r3, r1
 800f792:	fb01 3312 	mls	r3, r1, r2, r3
 800f796:	b29b      	uxth	r3, r3
 800f798:	686a      	ldr	r2, [r5, #4]
 800f79a:	fbb2 f2f1 	udiv	r2, r2, r1
 800f79e:	fb02 f303 	mul.w	r3, r2, r3
 800f7a2:	682a      	ldr	r2, [r5, #0]
 800f7a4:	f842 8003 	str.w	r8, [r2, r3]
 800f7a8:	89e8      	ldrh	r0, [r5, #14]
 800f7aa:	2101      	movs	r1, #1
 800f7ac:	f007 fa2e 	bl	8016c0c <uxr_seq_num_add>
 800f7b0:	9904      	ldr	r1, [sp, #16]
 800f7b2:	9a03      	ldr	r2, [sp, #12]
 800f7b4:	81e8      	strh	r0, [r5, #14]
 800f7b6:	1a52      	subs	r2, r2, r1
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f7fd fcc7 	bl	800d14c <ucdr_init_buffer>
 800f7be:	4630      	mov	r0, r6
 800f7c0:	4910      	ldr	r1, [pc, #64]	@ (800f804 <on_full_output_buffer_fragmented+0x114>)
 800f7c2:	4622      	mov	r2, r4
 800f7c4:	f7fd fc96 	bl	800d0f4 <ucdr_set_on_full_buffer_callback>
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	b00a      	add	sp, #40	@ 0x28
 800f7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7d0:	b292      	uxth	r2, r2
 800f7d2:	2302      	movs	r3, #2
 800f7d4:	210d      	movs	r1, #13
 800f7d6:	a802      	add	r0, sp, #8
 800f7d8:	f7ff ff14 	bl	800f604 <uxr_buffer_submessage_header>
 800f7dc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800f7e0:	8928      	ldrh	r0, [r5, #8]
 800f7e2:	f103 0208 	add.w	r2, r3, #8
 800f7e6:	89eb      	ldrh	r3, [r5, #14]
 800f7e8:	fbb3 f1f0 	udiv	r1, r3, r0
 800f7ec:	fb00 3311 	mls	r3, r0, r1, r3
 800f7f0:	b29b      	uxth	r3, r3
 800f7f2:	6869      	ldr	r1, [r5, #4]
 800f7f4:	fbb1 f1f0 	udiv	r1, r1, r0
 800f7f8:	fb01 f303 	mul.w	r3, r1, r3
 800f7fc:	6829      	ldr	r1, [r5, #0]
 800f7fe:	50ca      	str	r2, [r1, r3]
 800f800:	e7d2      	b.n	800f7a8 <on_full_output_buffer_fragmented+0xb8>
 800f802:	bf00      	nop
 800f804:	0800f6f1 	.word	0x0800f6f1

0800f808 <uxr_prepare_output_stream>:
 800f808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f80a:	b087      	sub	sp, #28
 800f80c:	2707      	movs	r7, #7
 800f80e:	9202      	str	r2, [sp, #8]
 800f810:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f812:	2500      	movs	r5, #0
 800f814:	3204      	adds	r2, #4
 800f816:	e9cd 7500 	strd	r7, r5, [sp]
 800f81a:	461c      	mov	r4, r3
 800f81c:	4606      	mov	r6, r0
 800f81e:	f7ff f807 	bl	800e830 <uxr_prepare_stream_to_write_submessage>
 800f822:	f080 0201 	eor.w	r2, r0, #1
 800f826:	b2d2      	uxtb	r2, r2
 800f828:	75a2      	strb	r2, [r4, #22]
 800f82a:	b112      	cbz	r2, 800f832 <uxr_prepare_output_stream+0x2a>
 800f82c:	4628      	mov	r0, r5
 800f82e:	b007      	add	sp, #28
 800f830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f832:	aa05      	add	r2, sp, #20
 800f834:	9902      	ldr	r1, [sp, #8]
 800f836:	4630      	mov	r0, r6
 800f838:	f7ff f934 	bl	800eaa4 <uxr_init_base_object_request>
 800f83c:	a905      	add	r1, sp, #20
 800f83e:	4605      	mov	r5, r0
 800f840:	4620      	mov	r0, r4
 800f842:	f000 ff8b 	bl	801075c <uxr_serialize_WRITE_DATA_Payload_Data>
 800f846:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f84a:	69a6      	ldr	r6, [r4, #24]
 800f84c:	69e7      	ldr	r7, [r4, #28]
 800f84e:	1a52      	subs	r2, r2, r1
 800f850:	4620      	mov	r0, r4
 800f852:	f7fd fc7b 	bl	800d14c <ucdr_init_buffer>
 800f856:	4620      	mov	r0, r4
 800f858:	463a      	mov	r2, r7
 800f85a:	4631      	mov	r1, r6
 800f85c:	f7fd fc4a 	bl	800d0f4 <ucdr_set_on_full_buffer_callback>
 800f860:	4628      	mov	r0, r5
 800f862:	b007      	add	sp, #28
 800f864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f866:	bf00      	nop

0800f868 <uxr_prepare_output_stream_fragmented>:
 800f868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86c:	b093      	sub	sp, #76	@ 0x4c
 800f86e:	4605      	mov	r5, r0
 800f870:	9107      	str	r1, [sp, #28]
 800f872:	3008      	adds	r0, #8
 800f874:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f878:	9303      	str	r3, [sp, #12]
 800f87a:	9206      	str	r2, [sp, #24]
 800f87c:	f7ff fe8e 	bl	800f59c <uxr_get_output_reliable_stream>
 800f880:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f884:	2b01      	cmp	r3, #1
 800f886:	f000 8095 	beq.w	800f9b4 <uxr_prepare_output_stream_fragmented+0x14c>
 800f88a:	4604      	mov	r4, r0
 800f88c:	2800      	cmp	r0, #0
 800f88e:	f000 8091 	beq.w	800f9b4 <uxr_prepare_output_stream_fragmented+0x14c>
 800f892:	f007 f89f 	bl	80169d4 <get_available_free_slots>
 800f896:	2800      	cmp	r0, #0
 800f898:	f000 8087 	beq.w	800f9aa <uxr_prepare_output_stream_fragmented+0x142>
 800f89c:	8922      	ldrh	r2, [r4, #8]
 800f89e:	89e7      	ldrh	r7, [r4, #14]
 800f8a0:	fbb7 f3f2 	udiv	r3, r7, r2
 800f8a4:	fb02 7313 	mls	r3, r2, r3, r7
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	6861      	ldr	r1, [r4, #4]
 800f8ac:	fbb1 f1f2 	udiv	r1, r1, r2
 800f8b0:	6822      	ldr	r2, [r4, #0]
 800f8b2:	9105      	str	r1, [sp, #20]
 800f8b4:	fb01 f303 	mul.w	r3, r1, r3
 800f8b8:	3304      	adds	r3, #4
 800f8ba:	eb02 0903 	add.w	r9, r2, r3
 800f8be:	7b23      	ldrb	r3, [r4, #12]
 800f8c0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f8c4:	4543      	cmp	r3, r8
 800f8c6:	f1a1 0b04 	sub.w	fp, r1, #4
 800f8ca:	d37f      	bcc.n	800f9cc <uxr_prepare_output_stream_fragmented+0x164>
 800f8cc:	f1ab 0a04 	sub.w	sl, fp, #4
 800f8d0:	ebaa 0a03 	sub.w	sl, sl, r3
 800f8d4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f8d6:	f8cd 8000 	str.w	r8, [sp]
 800f8da:	fa1f f38a 	uxth.w	r3, sl
 800f8de:	9304      	str	r3, [sp, #16]
 800f8e0:	465a      	mov	r2, fp
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	4649      	mov	r1, r9
 800f8e6:	a80a      	add	r0, sp, #40	@ 0x28
 800f8e8:	f7fd fc1e 	bl	800d128 <ucdr_init_buffer_origin_offset>
 800f8ec:	f106 0a08 	add.w	sl, r6, #8
 800f8f0:	45da      	cmp	sl, fp
 800f8f2:	bf2c      	ite	cs
 800f8f4:	2300      	movcs	r3, #0
 800f8f6:	2301      	movcc	r3, #1
 800f8f8:	9a04      	ldr	r2, [sp, #16]
 800f8fa:	005b      	lsls	r3, r3, #1
 800f8fc:	210d      	movs	r1, #13
 800f8fe:	a80a      	add	r0, sp, #40	@ 0x28
 800f900:	f7ff fe80 	bl	800f604 <uxr_buffer_submessage_header>
 800f904:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f908:	fbb7 f2fc 	udiv	r2, r7, ip
 800f90c:	fb0c 7212 	mls	r2, ip, r2, r7
 800f910:	b292      	uxth	r2, r2
 800f912:	6863      	ldr	r3, [r4, #4]
 800f914:	fbb3 f3fc 	udiv	r3, r3, ip
 800f918:	fb02 f303 	mul.w	r3, r2, r3
 800f91c:	6822      	ldr	r2, [r4, #0]
 800f91e:	2101      	movs	r1, #1
 800f920:	f842 b003 	str.w	fp, [r2, r3]
 800f924:	4638      	mov	r0, r7
 800f926:	f007 f971 	bl	8016c0c <uxr_seq_num_add>
 800f92a:	9b05      	ldr	r3, [sp, #20]
 800f92c:	9e03      	ldr	r6, [sp, #12]
 800f92e:	f1a3 0208 	sub.w	r2, r3, #8
 800f932:	f108 0104 	add.w	r1, r8, #4
 800f936:	4607      	mov	r7, r0
 800f938:	eba2 0208 	sub.w	r2, r2, r8
 800f93c:	4449      	add	r1, r9
 800f93e:	4630      	mov	r0, r6
 800f940:	f7fd fc04 	bl	800d14c <ucdr_init_buffer>
 800f944:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800f946:	81e7      	strh	r7, [r4, #14]
 800f948:	1d1a      	adds	r2, r3, #4
 800f94a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f94e:	bf28      	it	cs
 800f950:	2200      	movcs	r2, #0
 800f952:	2300      	movs	r3, #0
 800f954:	b292      	uxth	r2, r2
 800f956:	2107      	movs	r1, #7
 800f958:	4630      	mov	r0, r6
 800f95a:	f7ff fe53 	bl	800f604 <uxr_buffer_submessage_header>
 800f95e:	9906      	ldr	r1, [sp, #24]
 800f960:	aa09      	add	r2, sp, #36	@ 0x24
 800f962:	4628      	mov	r0, r5
 800f964:	f7ff f89e 	bl	800eaa4 <uxr_init_base_object_request>
 800f968:	4604      	mov	r4, r0
 800f96a:	b320      	cbz	r0, 800f9b6 <uxr_prepare_output_stream_fragmented+0x14e>
 800f96c:	9e03      	ldr	r6, [sp, #12]
 800f96e:	a909      	add	r1, sp, #36	@ 0x24
 800f970:	4630      	mov	r0, r6
 800f972:	f000 fef3 	bl	801075c <uxr_serialize_WRITE_DATA_Payload_Data>
 800f976:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f97a:	4630      	mov	r0, r6
 800f97c:	1a52      	subs	r2, r2, r1
 800f97e:	f7fd fbe5 	bl	800d14c <ucdr_init_buffer>
 800f982:	9b07      	ldr	r3, [sp, #28]
 800f984:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800f988:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f98a:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800f98e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f990:	491a      	ldr	r1, [pc, #104]	@ (800f9fc <uxr_prepare_output_stream_fragmented+0x194>)
 800f992:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800f996:	4630      	mov	r0, r6
 800f998:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800f99c:	462a      	mov	r2, r5
 800f99e:	f7fd fba9 	bl	800d0f4 <ucdr_set_on_full_buffer_callback>
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	b013      	add	sp, #76	@ 0x4c
 800f9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9aa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f9ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	4798      	blx	r3
 800f9b2:	b920      	cbnz	r0, 800f9be <uxr_prepare_output_stream_fragmented+0x156>
 800f9b4:	2400      	movs	r4, #0
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	b013      	add	sp, #76	@ 0x4c
 800f9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f007 f808 	bl	80169d4 <get_available_free_slots>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	f47f af69 	bne.w	800f89c <uxr_prepare_output_stream_fragmented+0x34>
 800f9ca:	e7f3      	b.n	800f9b4 <uxr_prepare_output_stream_fragmented+0x14c>
 800f9cc:	4638      	mov	r0, r7
 800f9ce:	2101      	movs	r1, #1
 800f9d0:	f007 f91c 	bl	8016c0c <uxr_seq_num_add>
 800f9d4:	8921      	ldrh	r1, [r4, #8]
 800f9d6:	fbb0 f2f1 	udiv	r2, r0, r1
 800f9da:	fb01 0212 	mls	r2, r1, r2, r0
 800f9de:	b292      	uxth	r2, r2
 800f9e0:	6863      	ldr	r3, [r4, #4]
 800f9e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9e6:	fb02 f303 	mul.w	r3, r2, r3
 800f9ea:	6822      	ldr	r2, [r4, #0]
 800f9ec:	3304      	adds	r3, #4
 800f9ee:	eb02 0903 	add.w	r9, r2, r3
 800f9f2:	4607      	mov	r7, r0
 800f9f4:	7b23      	ldrb	r3, [r4, #12]
 800f9f6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f9fa:	e767      	b.n	800f8cc <uxr_prepare_output_stream_fragmented+0x64>
 800f9fc:	0800f6f1 	.word	0x0800f6f1

0800fa00 <uxr_serialize_message_header>:
 800fa00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa04:	4617      	mov	r7, r2
 800fa06:	4604      	mov	r4, r0
 800fa08:	461e      	mov	r6, r3
 800fa0a:	460d      	mov	r5, r1
 800fa0c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800fa10:	f7fc f8dc 	bl	800bbcc <ucdr_serialize_uint8_t>
 800fa14:	4639      	mov	r1, r7
 800fa16:	4620      	mov	r0, r4
 800fa18:	f7fc f8d8 	bl	800bbcc <ucdr_serialize_uint8_t>
 800fa1c:	4632      	mov	r2, r6
 800fa1e:	2101      	movs	r1, #1
 800fa20:	4620      	mov	r0, r4
 800fa22:	f7fc f989 	bl	800bd38 <ucdr_serialize_endian_uint16_t>
 800fa26:	062b      	lsls	r3, r5, #24
 800fa28:	d501      	bpl.n	800fa2e <uxr_serialize_message_header+0x2e>
 800fa2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa2e:	4641      	mov	r1, r8
 800fa30:	4620      	mov	r0, r4
 800fa32:	2204      	movs	r2, #4
 800fa34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa38:	f7fb bf28 	b.w	800b88c <ucdr_serialize_array_uint8_t>

0800fa3c <uxr_deserialize_message_header>:
 800fa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa40:	4617      	mov	r7, r2
 800fa42:	4604      	mov	r4, r0
 800fa44:	461e      	mov	r6, r3
 800fa46:	460d      	mov	r5, r1
 800fa48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800fa4c:	f7fc f8d4 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 800fa50:	4639      	mov	r1, r7
 800fa52:	4620      	mov	r0, r4
 800fa54:	f7fc f8d0 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 800fa58:	4632      	mov	r2, r6
 800fa5a:	2101      	movs	r1, #1
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	f7fc fa61 	bl	800bf24 <ucdr_deserialize_endian_uint16_t>
 800fa62:	f995 3000 	ldrsb.w	r3, [r5]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	da01      	bge.n	800fa6e <uxr_deserialize_message_header+0x32>
 800fa6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa6e:	4641      	mov	r1, r8
 800fa70:	4620      	mov	r0, r4
 800fa72:	2204      	movs	r2, #4
 800fa74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa78:	f7fb bf6c 	b.w	800b954 <ucdr_deserialize_array_uint8_t>

0800fa7c <uxr_serialize_submessage_header>:
 800fa7c:	b570      	push	{r4, r5, r6, lr}
 800fa7e:	4616      	mov	r6, r2
 800fa80:	4604      	mov	r4, r0
 800fa82:	461d      	mov	r5, r3
 800fa84:	f7fc f8a2 	bl	800bbcc <ucdr_serialize_uint8_t>
 800fa88:	4631      	mov	r1, r6
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	f7fc f89e 	bl	800bbcc <ucdr_serialize_uint8_t>
 800fa90:	462a      	mov	r2, r5
 800fa92:	4620      	mov	r0, r4
 800fa94:	2101      	movs	r1, #1
 800fa96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa9a:	f7fc b94d 	b.w	800bd38 <ucdr_serialize_endian_uint16_t>
 800fa9e:	bf00      	nop

0800faa0 <uxr_deserialize_submessage_header>:
 800faa0:	b570      	push	{r4, r5, r6, lr}
 800faa2:	4616      	mov	r6, r2
 800faa4:	4604      	mov	r4, r0
 800faa6:	461d      	mov	r5, r3
 800faa8:	f7fc f8a6 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 800faac:	4631      	mov	r1, r6
 800faae:	4620      	mov	r0, r4
 800fab0:	f7fc f8a2 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 800fab4:	462a      	mov	r2, r5
 800fab6:	4620      	mov	r0, r4
 800fab8:	2101      	movs	r1, #1
 800faba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fabe:	f7fc ba31 	b.w	800bf24 <ucdr_deserialize_endian_uint16_t>
 800fac2:	bf00      	nop

0800fac4 <uxr_serialize_CLIENT_Representation>:
 800fac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fac8:	2204      	movs	r2, #4
 800faca:	460e      	mov	r6, r1
 800facc:	4605      	mov	r5, r0
 800face:	f7fb fedd 	bl	800b88c <ucdr_serialize_array_uint8_t>
 800fad2:	2202      	movs	r2, #2
 800fad4:	1d31      	adds	r1, r6, #4
 800fad6:	4604      	mov	r4, r0
 800fad8:	4628      	mov	r0, r5
 800fada:	f7fb fed7 	bl	800b88c <ucdr_serialize_array_uint8_t>
 800fade:	2202      	movs	r2, #2
 800fae0:	4004      	ands	r4, r0
 800fae2:	1db1      	adds	r1, r6, #6
 800fae4:	4628      	mov	r0, r5
 800fae6:	f7fb fed1 	bl	800b88c <ucdr_serialize_array_uint8_t>
 800faea:	b2e4      	uxtb	r4, r4
 800faec:	2204      	movs	r2, #4
 800faee:	4004      	ands	r4, r0
 800faf0:	f106 0108 	add.w	r1, r6, #8
 800faf4:	4628      	mov	r0, r5
 800faf6:	f7fb fec9 	bl	800b88c <ucdr_serialize_array_uint8_t>
 800fafa:	7b31      	ldrb	r1, [r6, #12]
 800fafc:	ea00 0804 	and.w	r8, r0, r4
 800fb00:	4628      	mov	r0, r5
 800fb02:	f7fc f863 	bl	800bbcc <ucdr_serialize_uint8_t>
 800fb06:	7b71      	ldrb	r1, [r6, #13]
 800fb08:	ea08 0800 	and.w	r8, r8, r0
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	f7fc f82f 	bl	800bb70 <ucdr_serialize_bool>
 800fb12:	7b73      	ldrb	r3, [r6, #13]
 800fb14:	ea08 0800 	and.w	r8, r8, r0
 800fb18:	b93b      	cbnz	r3, 800fb2a <uxr_serialize_CLIENT_Representation+0x66>
 800fb1a:	8bb1      	ldrh	r1, [r6, #28]
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	f7fc f881 	bl	800bc24 <ucdr_serialize_uint16_t>
 800fb22:	ea08 0000 	and.w	r0, r8, r0
 800fb26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb2a:	6931      	ldr	r1, [r6, #16]
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	f7fc fa69 	bl	800c004 <ucdr_serialize_uint32_t>
 800fb32:	6933      	ldr	r3, [r6, #16]
 800fb34:	b1e3      	cbz	r3, 800fb70 <uxr_serialize_CLIENT_Representation+0xac>
 800fb36:	b1c0      	cbz	r0, 800fb6a <uxr_serialize_CLIENT_Representation+0xa6>
 800fb38:	4637      	mov	r7, r6
 800fb3a:	f04f 0900 	mov.w	r9, #0
 800fb3e:	e001      	b.n	800fb44 <uxr_serialize_CLIENT_Representation+0x80>
 800fb40:	3708      	adds	r7, #8
 800fb42:	b194      	cbz	r4, 800fb6a <uxr_serialize_CLIENT_Representation+0xa6>
 800fb44:	6979      	ldr	r1, [r7, #20]
 800fb46:	4628      	mov	r0, r5
 800fb48:	f006 fa1e 	bl	8015f88 <ucdr_serialize_string>
 800fb4c:	69b9      	ldr	r1, [r7, #24]
 800fb4e:	4604      	mov	r4, r0
 800fb50:	4628      	mov	r0, r5
 800fb52:	f006 fa19 	bl	8015f88 <ucdr_serialize_string>
 800fb56:	6933      	ldr	r3, [r6, #16]
 800fb58:	f109 0901 	add.w	r9, r9, #1
 800fb5c:	4004      	ands	r4, r0
 800fb5e:	4599      	cmp	r9, r3
 800fb60:	b2e4      	uxtb	r4, r4
 800fb62:	d3ed      	bcc.n	800fb40 <uxr_serialize_CLIENT_Representation+0x7c>
 800fb64:	ea08 0804 	and.w	r8, r8, r4
 800fb68:	e7d7      	b.n	800fb1a <uxr_serialize_CLIENT_Representation+0x56>
 800fb6a:	f04f 0800 	mov.w	r8, #0
 800fb6e:	e7d4      	b.n	800fb1a <uxr_serialize_CLIENT_Representation+0x56>
 800fb70:	ea08 0800 	and.w	r8, r8, r0
 800fb74:	e7d1      	b.n	800fb1a <uxr_serialize_CLIENT_Representation+0x56>
 800fb76:	bf00      	nop

0800fb78 <uxr_deserialize_CLIENT_Representation>:
 800fb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb7c:	2204      	movs	r2, #4
 800fb7e:	460c      	mov	r4, r1
 800fb80:	4605      	mov	r5, r0
 800fb82:	f7fb fee7 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 800fb86:	2202      	movs	r2, #2
 800fb88:	1d21      	adds	r1, r4, #4
 800fb8a:	4606      	mov	r6, r0
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	f7fb fee1 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 800fb92:	2202      	movs	r2, #2
 800fb94:	4006      	ands	r6, r0
 800fb96:	1da1      	adds	r1, r4, #6
 800fb98:	4628      	mov	r0, r5
 800fb9a:	f7fb fedb 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 800fb9e:	b2f6      	uxtb	r6, r6
 800fba0:	2204      	movs	r2, #4
 800fba2:	4006      	ands	r6, r0
 800fba4:	f104 0108 	add.w	r1, r4, #8
 800fba8:	4628      	mov	r0, r5
 800fbaa:	f7fb fed3 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 800fbae:	f104 010c 	add.w	r1, r4, #12
 800fbb2:	ea00 0706 	and.w	r7, r0, r6
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f7fc f81e 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 800fbbc:	f104 010d 	add.w	r1, r4, #13
 800fbc0:	4007      	ands	r7, r0
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f7fb ffea 	bl	800bb9c <ucdr_deserialize_bool>
 800fbc8:	7b63      	ldrb	r3, [r4, #13]
 800fbca:	4007      	ands	r7, r0
 800fbcc:	b93b      	cbnz	r3, 800fbde <uxr_deserialize_CLIENT_Representation+0x66>
 800fbce:	f104 011c 	add.w	r1, r4, #28
 800fbd2:	4628      	mov	r0, r5
 800fbd4:	f7fc f92a 	bl	800be2c <ucdr_deserialize_uint16_t>
 800fbd8:	4038      	ands	r0, r7
 800fbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbde:	f104 0110 	add.w	r1, r4, #16
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	f7fc fb38 	bl	800c258 <ucdr_deserialize_uint32_t>
 800fbe8:	6923      	ldr	r3, [r4, #16]
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d903      	bls.n	800fbf6 <uxr_deserialize_CLIENT_Representation+0x7e>
 800fbee:	2301      	movs	r3, #1
 800fbf0:	75ab      	strb	r3, [r5, #22]
 800fbf2:	2700      	movs	r7, #0
 800fbf4:	e7eb      	b.n	800fbce <uxr_deserialize_CLIENT_Representation+0x56>
 800fbf6:	b30b      	cbz	r3, 800fc3c <uxr_deserialize_CLIENT_Representation+0xc4>
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	d0fa      	beq.n	800fbf2 <uxr_deserialize_CLIENT_Representation+0x7a>
 800fbfc:	46a0      	mov	r8, r4
 800fbfe:	f04f 0900 	mov.w	r9, #0
 800fc02:	e003      	b.n	800fc0c <uxr_deserialize_CLIENT_Representation+0x94>
 800fc04:	f108 0808 	add.w	r8, r8, #8
 800fc08:	2e00      	cmp	r6, #0
 800fc0a:	d0f2      	beq.n	800fbf2 <uxr_deserialize_CLIENT_Representation+0x7a>
 800fc0c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800fc10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc14:	4628      	mov	r0, r5
 800fc16:	f006 f9c5 	bl	8015fa4 <ucdr_deserialize_string>
 800fc1a:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800fc1e:	4606      	mov	r6, r0
 800fc20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc24:	4628      	mov	r0, r5
 800fc26:	f006 f9bd 	bl	8015fa4 <ucdr_deserialize_string>
 800fc2a:	6923      	ldr	r3, [r4, #16]
 800fc2c:	f109 0901 	add.w	r9, r9, #1
 800fc30:	4006      	ands	r6, r0
 800fc32:	4599      	cmp	r9, r3
 800fc34:	b2f6      	uxtb	r6, r6
 800fc36:	d3e5      	bcc.n	800fc04 <uxr_deserialize_CLIENT_Representation+0x8c>
 800fc38:	4037      	ands	r7, r6
 800fc3a:	e7c8      	b.n	800fbce <uxr_deserialize_CLIENT_Representation+0x56>
 800fc3c:	4007      	ands	r7, r0
 800fc3e:	e7c6      	b.n	800fbce <uxr_deserialize_CLIENT_Representation+0x56>

0800fc40 <uxr_serialize_AGENT_Representation>:
 800fc40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc44:	2204      	movs	r2, #4
 800fc46:	460f      	mov	r7, r1
 800fc48:	4605      	mov	r5, r0
 800fc4a:	f7fb fe1f 	bl	800b88c <ucdr_serialize_array_uint8_t>
 800fc4e:	2202      	movs	r2, #2
 800fc50:	4604      	mov	r4, r0
 800fc52:	1d39      	adds	r1, r7, #4
 800fc54:	4628      	mov	r0, r5
 800fc56:	f7fb fe19 	bl	800b88c <ucdr_serialize_array_uint8_t>
 800fc5a:	4020      	ands	r0, r4
 800fc5c:	2202      	movs	r2, #2
 800fc5e:	b2c4      	uxtb	r4, r0
 800fc60:	1db9      	adds	r1, r7, #6
 800fc62:	4628      	mov	r0, r5
 800fc64:	f7fb fe12 	bl	800b88c <ucdr_serialize_array_uint8_t>
 800fc68:	7a39      	ldrb	r1, [r7, #8]
 800fc6a:	4004      	ands	r4, r0
 800fc6c:	4628      	mov	r0, r5
 800fc6e:	f7fb ff7f 	bl	800bb70 <ucdr_serialize_bool>
 800fc72:	7a3b      	ldrb	r3, [r7, #8]
 800fc74:	ea00 0804 	and.w	r8, r0, r4
 800fc78:	b913      	cbnz	r3, 800fc80 <uxr_serialize_AGENT_Representation+0x40>
 800fc7a:	4640      	mov	r0, r8
 800fc7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc80:	68f9      	ldr	r1, [r7, #12]
 800fc82:	4628      	mov	r0, r5
 800fc84:	f7fc f9be 	bl	800c004 <ucdr_serialize_uint32_t>
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	b303      	cbz	r3, 800fcce <uxr_serialize_AGENT_Representation+0x8e>
 800fc8c:	b1d0      	cbz	r0, 800fcc4 <uxr_serialize_AGENT_Representation+0x84>
 800fc8e:	463e      	mov	r6, r7
 800fc90:	f04f 0900 	mov.w	r9, #0
 800fc94:	e001      	b.n	800fc9a <uxr_serialize_AGENT_Representation+0x5a>
 800fc96:	3608      	adds	r6, #8
 800fc98:	b1a4      	cbz	r4, 800fcc4 <uxr_serialize_AGENT_Representation+0x84>
 800fc9a:	6931      	ldr	r1, [r6, #16]
 800fc9c:	4628      	mov	r0, r5
 800fc9e:	f006 f973 	bl	8015f88 <ucdr_serialize_string>
 800fca2:	6971      	ldr	r1, [r6, #20]
 800fca4:	4604      	mov	r4, r0
 800fca6:	4628      	mov	r0, r5
 800fca8:	f006 f96e 	bl	8015f88 <ucdr_serialize_string>
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	f109 0901 	add.w	r9, r9, #1
 800fcb2:	4004      	ands	r4, r0
 800fcb4:	4599      	cmp	r9, r3
 800fcb6:	b2e4      	uxtb	r4, r4
 800fcb8:	d3ed      	bcc.n	800fc96 <uxr_serialize_AGENT_Representation+0x56>
 800fcba:	ea08 0804 	and.w	r8, r8, r4
 800fcbe:	4640      	mov	r0, r8
 800fcc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcc4:	f04f 0800 	mov.w	r8, #0
 800fcc8:	4640      	mov	r0, r8
 800fcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcce:	ea08 0800 	and.w	r8, r8, r0
 800fcd2:	e7d2      	b.n	800fc7a <uxr_serialize_AGENT_Representation+0x3a>

0800fcd4 <uxr_serialize_DATAWRITER_Representation>:
 800fcd4:	b570      	push	{r4, r5, r6, lr}
 800fcd6:	460d      	mov	r5, r1
 800fcd8:	7809      	ldrb	r1, [r1, #0]
 800fcda:	4606      	mov	r6, r0
 800fcdc:	f7fb ff76 	bl	800bbcc <ucdr_serialize_uint8_t>
 800fce0:	4604      	mov	r4, r0
 800fce2:	b130      	cbz	r0, 800fcf2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fce4:	782b      	ldrb	r3, [r5, #0]
 800fce6:	2b02      	cmp	r3, #2
 800fce8:	d00c      	beq.n	800fd04 <uxr_serialize_DATAWRITER_Representation+0x30>
 800fcea:	2b03      	cmp	r3, #3
 800fcec:	d010      	beq.n	800fd10 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d008      	beq.n	800fd04 <uxr_serialize_DATAWRITER_Representation+0x30>
 800fcf2:	2202      	movs	r2, #2
 800fcf4:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800fcf8:	4630      	mov	r0, r6
 800fcfa:	f7fb fdc7 	bl	800b88c <ucdr_serialize_array_uint8_t>
 800fcfe:	4020      	ands	r0, r4
 800fd00:	b2c0      	uxtb	r0, r0
 800fd02:	bd70      	pop	{r4, r5, r6, pc}
 800fd04:	6869      	ldr	r1, [r5, #4]
 800fd06:	4630      	mov	r0, r6
 800fd08:	f006 f93e 	bl	8015f88 <ucdr_serialize_string>
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	e7f0      	b.n	800fcf2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fd10:	4629      	mov	r1, r5
 800fd12:	4630      	mov	r0, r6
 800fd14:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800fd18:	3104      	adds	r1, #4
 800fd1a:	f7fd fab5 	bl	800d288 <ucdr_serialize_sequence_uint8_t>
 800fd1e:	4604      	mov	r4, r0
 800fd20:	e7e7      	b.n	800fcf2 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fd22:	bf00      	nop

0800fd24 <uxr_serialize_ObjectVariant.part.0>:
 800fd24:	b570      	push	{r4, r5, r6, lr}
 800fd26:	780b      	ldrb	r3, [r1, #0]
 800fd28:	3b01      	subs	r3, #1
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	4605      	mov	r5, r0
 800fd2e:	2b0d      	cmp	r3, #13
 800fd30:	d816      	bhi.n	800fd60 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800fd32:	e8df f003 	tbb	[pc, r3]
 800fd36:	0733      	.short	0x0733
 800fd38:	07071717 	.word	0x07071717
 800fd3c:	0c150707 	.word	0x0c150707
 800fd40:	4c510c0c 	.word	0x4c510c0c
 800fd44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fd48:	3104      	adds	r1, #4
 800fd4a:	f7ff bfc3 	b.w	800fcd4 <uxr_serialize_DATAWRITER_Representation>
 800fd4e:	7909      	ldrb	r1, [r1, #4]
 800fd50:	f7fb ff3c 	bl	800bbcc <ucdr_serialize_uint8_t>
 800fd54:	b300      	cbz	r0, 800fd98 <uxr_serialize_ObjectVariant.part.0+0x74>
 800fd56:	7923      	ldrb	r3, [r4, #4]
 800fd58:	2b01      	cmp	r3, #1
 800fd5a:	d042      	beq.n	800fde2 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800fd5c:	2b02      	cmp	r3, #2
 800fd5e:	d040      	beq.n	800fde2 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800fd60:	2001      	movs	r0, #1
 800fd62:	bd70      	pop	{r4, r5, r6, pc}
 800fd64:	7909      	ldrb	r1, [r1, #4]
 800fd66:	f7fb ff31 	bl	800bbcc <ucdr_serialize_uint8_t>
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	b158      	cbz	r0, 800fd86 <uxr_serialize_ObjectVariant.part.0+0x62>
 800fd6e:	7923      	ldrb	r3, [r4, #4]
 800fd70:	2b02      	cmp	r3, #2
 800fd72:	d03c      	beq.n	800fdee <uxr_serialize_ObjectVariant.part.0+0xca>
 800fd74:	2b03      	cmp	r3, #3
 800fd76:	d106      	bne.n	800fd86 <uxr_serialize_ObjectVariant.part.0+0x62>
 800fd78:	68a2      	ldr	r2, [r4, #8]
 800fd7a:	f104 010c 	add.w	r1, r4, #12
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f7fd fa82 	bl	800d288 <ucdr_serialize_sequence_uint8_t>
 800fd84:	4606      	mov	r6, r0
 800fd86:	2202      	movs	r2, #2
 800fd88:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	f7fb fd7d 	bl	800b88c <ucdr_serialize_array_uint8_t>
 800fd92:	4030      	ands	r0, r6
 800fd94:	b2c0      	uxtb	r0, r0
 800fd96:	bd70      	pop	{r4, r5, r6, pc}
 800fd98:	2000      	movs	r0, #0
 800fd9a:	bd70      	pop	{r4, r5, r6, pc}
 800fd9c:	7909      	ldrb	r1, [r1, #4]
 800fd9e:	f7fb ff15 	bl	800bbcc <ucdr_serialize_uint8_t>
 800fda2:	4606      	mov	r6, r0
 800fda4:	b158      	cbz	r0, 800fdbe <uxr_serialize_ObjectVariant.part.0+0x9a>
 800fda6:	7923      	ldrb	r3, [r4, #4]
 800fda8:	2b02      	cmp	r3, #2
 800fdaa:	d003      	beq.n	800fdb4 <uxr_serialize_ObjectVariant.part.0+0x90>
 800fdac:	2b03      	cmp	r3, #3
 800fdae:	d024      	beq.n	800fdfa <uxr_serialize_ObjectVariant.part.0+0xd6>
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d104      	bne.n	800fdbe <uxr_serialize_ObjectVariant.part.0+0x9a>
 800fdb4:	68a1      	ldr	r1, [r4, #8]
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	f006 f8e6 	bl	8015f88 <ucdr_serialize_string>
 800fdbc:	4606      	mov	r6, r0
 800fdbe:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800fdc2:	4628      	mov	r0, r5
 800fdc4:	f7fc fc2a 	bl	800c61c <ucdr_serialize_int16_t>
 800fdc8:	4030      	ands	r0, r6
 800fdca:	b2c0      	uxtb	r0, r0
 800fdcc:	bd70      	pop	{r4, r5, r6, pc}
 800fdce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdd2:	3104      	adds	r1, #4
 800fdd4:	f7ff be76 	b.w	800fac4 <uxr_serialize_CLIENT_Representation>
 800fdd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fddc:	3104      	adds	r1, #4
 800fdde:	f7ff bf2f 	b.w	800fc40 <uxr_serialize_AGENT_Representation>
 800fde2:	68a1      	ldr	r1, [r4, #8]
 800fde4:	4628      	mov	r0, r5
 800fde6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdea:	f006 b8cd 	b.w	8015f88 <ucdr_serialize_string>
 800fdee:	68a1      	ldr	r1, [r4, #8]
 800fdf0:	4628      	mov	r0, r5
 800fdf2:	f006 f8c9 	bl	8015f88 <ucdr_serialize_string>
 800fdf6:	4606      	mov	r6, r0
 800fdf8:	e7c5      	b.n	800fd86 <uxr_serialize_ObjectVariant.part.0+0x62>
 800fdfa:	68a2      	ldr	r2, [r4, #8]
 800fdfc:	f104 010c 	add.w	r1, r4, #12
 800fe00:	4628      	mov	r0, r5
 800fe02:	f7fd fa41 	bl	800d288 <ucdr_serialize_sequence_uint8_t>
 800fe06:	4606      	mov	r6, r0
 800fe08:	e7d9      	b.n	800fdbe <uxr_serialize_ObjectVariant.part.0+0x9a>
 800fe0a:	bf00      	nop

0800fe0c <uxr_deserialize_DATAWRITER_Representation>:
 800fe0c:	b570      	push	{r4, r5, r6, lr}
 800fe0e:	4606      	mov	r6, r0
 800fe10:	460d      	mov	r5, r1
 800fe12:	f7fb fef1 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 800fe16:	4604      	mov	r4, r0
 800fe18:	b130      	cbz	r0, 800fe28 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fe1a:	782b      	ldrb	r3, [r5, #0]
 800fe1c:	2b02      	cmp	r3, #2
 800fe1e:	d00c      	beq.n	800fe3a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800fe20:	2b03      	cmp	r3, #3
 800fe22:	d012      	beq.n	800fe4a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d008      	beq.n	800fe3a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800fe28:	2202      	movs	r2, #2
 800fe2a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800fe2e:	4630      	mov	r0, r6
 800fe30:	f7fb fd90 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 800fe34:	4020      	ands	r0, r4
 800fe36:	b2c0      	uxtb	r0, r0
 800fe38:	bd70      	pop	{r4, r5, r6, pc}
 800fe3a:	6869      	ldr	r1, [r5, #4]
 800fe3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe40:	4630      	mov	r0, r6
 800fe42:	f006 f8af 	bl	8015fa4 <ucdr_deserialize_string>
 800fe46:	4604      	mov	r4, r0
 800fe48:	e7ee      	b.n	800fe28 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fe4a:	1d2b      	adds	r3, r5, #4
 800fe4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fe50:	f105 0108 	add.w	r1, r5, #8
 800fe54:	4630      	mov	r0, r6
 800fe56:	f7fd fa29 	bl	800d2ac <ucdr_deserialize_sequence_uint8_t>
 800fe5a:	4604      	mov	r4, r0
 800fe5c:	e7e4      	b.n	800fe28 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fe5e:	bf00      	nop

0800fe60 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800fe60:	b570      	push	{r4, r5, r6, lr}
 800fe62:	460d      	mov	r5, r1
 800fe64:	7809      	ldrb	r1, [r1, #0]
 800fe66:	4606      	mov	r6, r0
 800fe68:	f7fb fe82 	bl	800bb70 <ucdr_serialize_bool>
 800fe6c:	782b      	ldrb	r3, [r5, #0]
 800fe6e:	4604      	mov	r4, r0
 800fe70:	b94b      	cbnz	r3, 800fe86 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800fe72:	7a29      	ldrb	r1, [r5, #8]
 800fe74:	4630      	mov	r0, r6
 800fe76:	f7fb fe7b 	bl	800bb70 <ucdr_serialize_bool>
 800fe7a:	7a2b      	ldrb	r3, [r5, #8]
 800fe7c:	4004      	ands	r4, r0
 800fe7e:	b2e4      	uxtb	r4, r4
 800fe80:	b943      	cbnz	r3, 800fe94 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800fe82:	4620      	mov	r0, r4
 800fe84:	bd70      	pop	{r4, r5, r6, pc}
 800fe86:	6869      	ldr	r1, [r5, #4]
 800fe88:	4630      	mov	r0, r6
 800fe8a:	f006 f87d 	bl	8015f88 <ucdr_serialize_string>
 800fe8e:	4004      	ands	r4, r0
 800fe90:	b2e4      	uxtb	r4, r4
 800fe92:	e7ee      	b.n	800fe72 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800fe94:	68e9      	ldr	r1, [r5, #12]
 800fe96:	4630      	mov	r0, r6
 800fe98:	f006 f876 	bl	8015f88 <ucdr_serialize_string>
 800fe9c:	4004      	ands	r4, r0
 800fe9e:	4620      	mov	r0, r4
 800fea0:	bd70      	pop	{r4, r5, r6, pc}
 800fea2:	bf00      	nop

0800fea4 <uxr_serialize_OBJK_Topic_Binary>:
 800fea4:	b570      	push	{r4, r5, r6, lr}
 800fea6:	460d      	mov	r5, r1
 800fea8:	6809      	ldr	r1, [r1, #0]
 800feaa:	4606      	mov	r6, r0
 800feac:	f006 f86c 	bl	8015f88 <ucdr_serialize_string>
 800feb0:	7929      	ldrb	r1, [r5, #4]
 800feb2:	4604      	mov	r4, r0
 800feb4:	4630      	mov	r0, r6
 800feb6:	f7fb fe5b 	bl	800bb70 <ucdr_serialize_bool>
 800feba:	792b      	ldrb	r3, [r5, #4]
 800febc:	4004      	ands	r4, r0
 800febe:	b2e4      	uxtb	r4, r4
 800fec0:	b943      	cbnz	r3, 800fed4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800fec2:	7b29      	ldrb	r1, [r5, #12]
 800fec4:	4630      	mov	r0, r6
 800fec6:	f7fb fe53 	bl	800bb70 <ucdr_serialize_bool>
 800feca:	7b2b      	ldrb	r3, [r5, #12]
 800fecc:	4004      	ands	r4, r0
 800fece:	b93b      	cbnz	r3, 800fee0 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800fed0:	4620      	mov	r0, r4
 800fed2:	bd70      	pop	{r4, r5, r6, pc}
 800fed4:	68a9      	ldr	r1, [r5, #8]
 800fed6:	4630      	mov	r0, r6
 800fed8:	f006 f856 	bl	8015f88 <ucdr_serialize_string>
 800fedc:	4004      	ands	r4, r0
 800fede:	e7f0      	b.n	800fec2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800fee0:	6929      	ldr	r1, [r5, #16]
 800fee2:	4630      	mov	r0, r6
 800fee4:	f006 f850 	bl	8015f88 <ucdr_serialize_string>
 800fee8:	4004      	ands	r4, r0
 800feea:	b2e4      	uxtb	r4, r4
 800feec:	4620      	mov	r0, r4
 800feee:	bd70      	pop	{r4, r5, r6, pc}

0800fef0 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800fef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef4:	460c      	mov	r4, r1
 800fef6:	7809      	ldrb	r1, [r1, #0]
 800fef8:	4606      	mov	r6, r0
 800fefa:	f7fb fe39 	bl	800bb70 <ucdr_serialize_bool>
 800fefe:	7823      	ldrb	r3, [r4, #0]
 800ff00:	4605      	mov	r5, r0
 800ff02:	b96b      	cbnz	r3, 800ff20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ff04:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ff08:	4630      	mov	r0, r6
 800ff0a:	f7fb fe31 	bl	800bb70 <ucdr_serialize_bool>
 800ff0e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ff12:	4005      	ands	r5, r0
 800ff14:	b2ed      	uxtb	r5, r5
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d16a      	bne.n	800fff0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff20:	6861      	ldr	r1, [r4, #4]
 800ff22:	4630      	mov	r0, r6
 800ff24:	f7fc f86e 	bl	800c004 <ucdr_serialize_uint32_t>
 800ff28:	6863      	ldr	r3, [r4, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d06c      	beq.n	8010008 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 800ff2e:	2800      	cmp	r0, #0
 800ff30:	d068      	beq.n	8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ff32:	68a1      	ldr	r1, [r4, #8]
 800ff34:	4630      	mov	r0, r6
 800ff36:	f006 f827 	bl	8015f88 <ucdr_serialize_string>
 800ff3a:	6862      	ldr	r2, [r4, #4]
 800ff3c:	2a01      	cmp	r2, #1
 800ff3e:	d953      	bls.n	800ffe8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d05f      	beq.n	8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ff44:	68e1      	ldr	r1, [r4, #12]
 800ff46:	4630      	mov	r0, r6
 800ff48:	f006 f81e 	bl	8015f88 <ucdr_serialize_string>
 800ff4c:	6862      	ldr	r2, [r4, #4]
 800ff4e:	2a02      	cmp	r2, #2
 800ff50:	d94a      	bls.n	800ffe8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ff52:	2800      	cmp	r0, #0
 800ff54:	d056      	beq.n	8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ff56:	6921      	ldr	r1, [r4, #16]
 800ff58:	4630      	mov	r0, r6
 800ff5a:	f006 f815 	bl	8015f88 <ucdr_serialize_string>
 800ff5e:	6862      	ldr	r2, [r4, #4]
 800ff60:	2a03      	cmp	r2, #3
 800ff62:	d941      	bls.n	800ffe8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ff64:	2800      	cmp	r0, #0
 800ff66:	d04d      	beq.n	8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ff68:	6961      	ldr	r1, [r4, #20]
 800ff6a:	4630      	mov	r0, r6
 800ff6c:	f006 f80c 	bl	8015f88 <ucdr_serialize_string>
 800ff70:	6862      	ldr	r2, [r4, #4]
 800ff72:	2a04      	cmp	r2, #4
 800ff74:	d938      	bls.n	800ffe8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ff76:	2800      	cmp	r0, #0
 800ff78:	d044      	beq.n	8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ff7a:	69a1      	ldr	r1, [r4, #24]
 800ff7c:	4630      	mov	r0, r6
 800ff7e:	f006 f803 	bl	8015f88 <ucdr_serialize_string>
 800ff82:	6862      	ldr	r2, [r4, #4]
 800ff84:	2a05      	cmp	r2, #5
 800ff86:	d92f      	bls.n	800ffe8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d03b      	beq.n	8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ff8c:	69e1      	ldr	r1, [r4, #28]
 800ff8e:	4630      	mov	r0, r6
 800ff90:	f005 fffa 	bl	8015f88 <ucdr_serialize_string>
 800ff94:	6862      	ldr	r2, [r4, #4]
 800ff96:	2a06      	cmp	r2, #6
 800ff98:	d926      	bls.n	800ffe8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ff9a:	b398      	cbz	r0, 8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ff9c:	6a21      	ldr	r1, [r4, #32]
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	f005 fff2 	bl	8015f88 <ucdr_serialize_string>
 800ffa4:	6862      	ldr	r2, [r4, #4]
 800ffa6:	2a07      	cmp	r2, #7
 800ffa8:	d91e      	bls.n	800ffe8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ffaa:	b358      	cbz	r0, 8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ffac:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800ffae:	4630      	mov	r0, r6
 800ffb0:	f005 ffea 	bl	8015f88 <ucdr_serialize_string>
 800ffb4:	6862      	ldr	r2, [r4, #4]
 800ffb6:	2a08      	cmp	r2, #8
 800ffb8:	d916      	bls.n	800ffe8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ffba:	b318      	cbz	r0, 8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ffbc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	f005 ffe2 	bl	8015f88 <ucdr_serialize_string>
 800ffc4:	6862      	ldr	r2, [r4, #4]
 800ffc6:	2a09      	cmp	r2, #9
 800ffc8:	d90e      	bls.n	800ffe8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ffca:	b1d8      	cbz	r0, 8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ffcc:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800ffd0:	2709      	movs	r7, #9
 800ffd2:	e000      	b.n	800ffd6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800ffd4:	b1b0      	cbz	r0, 8010004 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800ffd6:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f005 ffd4 	bl	8015f88 <ucdr_serialize_string>
 800ffe0:	6862      	ldr	r2, [r4, #4]
 800ffe2:	3701      	adds	r7, #1
 800ffe4:	4297      	cmp	r7, r2
 800ffe6:	d3f5      	bcc.n	800ffd4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800ffe8:	ea05 0300 	and.w	r3, r5, r0
 800ffec:	b2dd      	uxtb	r5, r3
 800ffee:	e789      	b.n	800ff04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fff0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fff2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800fff6:	4630      	mov	r0, r6
 800fff8:	f7fd f946 	bl	800d288 <ucdr_serialize_sequence_uint8_t>
 800fffc:	4005      	ands	r5, r0
 800fffe:	4628      	mov	r0, r5
 8010000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010004:	2500      	movs	r5, #0
 8010006:	e77d      	b.n	800ff04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010008:	4028      	ands	r0, r5
 801000a:	b2c5      	uxtb	r5, r0
 801000c:	e77a      	b.n	800ff04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801000e:	bf00      	nop

08010010 <uxr_serialize_OBJK_Publisher_Binary>:
 8010010:	b570      	push	{r4, r5, r6, lr}
 8010012:	460d      	mov	r5, r1
 8010014:	7809      	ldrb	r1, [r1, #0]
 8010016:	4606      	mov	r6, r0
 8010018:	f7fb fdaa 	bl	800bb70 <ucdr_serialize_bool>
 801001c:	782b      	ldrb	r3, [r5, #0]
 801001e:	4604      	mov	r4, r0
 8010020:	b94b      	cbnz	r3, 8010036 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8010022:	7a29      	ldrb	r1, [r5, #8]
 8010024:	4630      	mov	r0, r6
 8010026:	f7fb fda3 	bl	800bb70 <ucdr_serialize_bool>
 801002a:	7a2b      	ldrb	r3, [r5, #8]
 801002c:	4004      	ands	r4, r0
 801002e:	b2e4      	uxtb	r4, r4
 8010030:	b943      	cbnz	r3, 8010044 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8010032:	4620      	mov	r0, r4
 8010034:	bd70      	pop	{r4, r5, r6, pc}
 8010036:	6869      	ldr	r1, [r5, #4]
 8010038:	4630      	mov	r0, r6
 801003a:	f005 ffa5 	bl	8015f88 <ucdr_serialize_string>
 801003e:	4004      	ands	r4, r0
 8010040:	b2e4      	uxtb	r4, r4
 8010042:	e7ee      	b.n	8010022 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010044:	f105 010c 	add.w	r1, r5, #12
 8010048:	4630      	mov	r0, r6
 801004a:	f7ff ff51 	bl	800fef0 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801004e:	4004      	ands	r4, r0
 8010050:	4620      	mov	r0, r4
 8010052:	bd70      	pop	{r4, r5, r6, pc}

08010054 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8010054:	b570      	push	{r4, r5, r6, lr}
 8010056:	460d      	mov	r5, r1
 8010058:	8809      	ldrh	r1, [r1, #0]
 801005a:	4606      	mov	r6, r0
 801005c:	f7fb fde2 	bl	800bc24 <ucdr_serialize_uint16_t>
 8010060:	78a9      	ldrb	r1, [r5, #2]
 8010062:	4604      	mov	r4, r0
 8010064:	4630      	mov	r0, r6
 8010066:	f7fb fd83 	bl	800bb70 <ucdr_serialize_bool>
 801006a:	78ab      	ldrb	r3, [r5, #2]
 801006c:	4004      	ands	r4, r0
 801006e:	b2e4      	uxtb	r4, r4
 8010070:	b9b3      	cbnz	r3, 80100a0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 8010072:	79a9      	ldrb	r1, [r5, #6]
 8010074:	4630      	mov	r0, r6
 8010076:	f7fb fd7b 	bl	800bb70 <ucdr_serialize_bool>
 801007a:	79ab      	ldrb	r3, [r5, #6]
 801007c:	4004      	ands	r4, r0
 801007e:	bb33      	cbnz	r3, 80100ce <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8010080:	7b29      	ldrb	r1, [r5, #12]
 8010082:	4630      	mov	r0, r6
 8010084:	f7fb fd74 	bl	800bb70 <ucdr_serialize_bool>
 8010088:	7b2b      	ldrb	r3, [r5, #12]
 801008a:	4004      	ands	r4, r0
 801008c:	b9c3      	cbnz	r3, 80100c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 801008e:	7d29      	ldrb	r1, [r5, #20]
 8010090:	4630      	mov	r0, r6
 8010092:	f7fb fd6d 	bl	800bb70 <ucdr_serialize_bool>
 8010096:	7d2b      	ldrb	r3, [r5, #20]
 8010098:	4004      	ands	r4, r0
 801009a:	b93b      	cbnz	r3, 80100ac <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 801009c:	4620      	mov	r0, r4
 801009e:	bd70      	pop	{r4, r5, r6, pc}
 80100a0:	88a9      	ldrh	r1, [r5, #4]
 80100a2:	4630      	mov	r0, r6
 80100a4:	f7fb fdbe 	bl	800bc24 <ucdr_serialize_uint16_t>
 80100a8:	4004      	ands	r4, r0
 80100aa:	e7e2      	b.n	8010072 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 80100ac:	69aa      	ldr	r2, [r5, #24]
 80100ae:	f105 011c 	add.w	r1, r5, #28
 80100b2:	4630      	mov	r0, r6
 80100b4:	f7fd f8e8 	bl	800d288 <ucdr_serialize_sequence_uint8_t>
 80100b8:	4004      	ands	r4, r0
 80100ba:	b2e4      	uxtb	r4, r4
 80100bc:	4620      	mov	r0, r4
 80100be:	bd70      	pop	{r4, r5, r6, pc}
 80100c0:	6929      	ldr	r1, [r5, #16]
 80100c2:	4630      	mov	r0, r6
 80100c4:	f7fb ff9e 	bl	800c004 <ucdr_serialize_uint32_t>
 80100c8:	4004      	ands	r4, r0
 80100ca:	b2e4      	uxtb	r4, r4
 80100cc:	e7df      	b.n	801008e <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 80100ce:	68a9      	ldr	r1, [r5, #8]
 80100d0:	4630      	mov	r0, r6
 80100d2:	f7fb ff97 	bl	800c004 <ucdr_serialize_uint32_t>
 80100d6:	4004      	ands	r4, r0
 80100d8:	b2e4      	uxtb	r4, r4
 80100da:	e7d1      	b.n	8010080 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

080100dc <uxr_serialize_OBJK_DataWriter_Binary>:
 80100dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100de:	2202      	movs	r2, #2
 80100e0:	460d      	mov	r5, r1
 80100e2:	4606      	mov	r6, r0
 80100e4:	f7fb fbd2 	bl	800b88c <ucdr_serialize_array_uint8_t>
 80100e8:	78a9      	ldrb	r1, [r5, #2]
 80100ea:	4604      	mov	r4, r0
 80100ec:	4630      	mov	r0, r6
 80100ee:	f7fb fd3f 	bl	800bb70 <ucdr_serialize_bool>
 80100f2:	78ab      	ldrb	r3, [r5, #2]
 80100f4:	4004      	ands	r4, r0
 80100f6:	b2e4      	uxtb	r4, r4
 80100f8:	b90b      	cbnz	r3, 80100fe <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80100fa:	4620      	mov	r0, r4
 80100fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100fe:	f105 0108 	add.w	r1, r5, #8
 8010102:	4630      	mov	r0, r6
 8010104:	f7ff ffa6 	bl	8010054 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010108:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801010c:	4607      	mov	r7, r0
 801010e:	4630      	mov	r0, r6
 8010110:	f7fb fd2e 	bl	800bb70 <ucdr_serialize_bool>
 8010114:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8010118:	4007      	ands	r7, r0
 801011a:	b2ff      	uxtb	r7, r7
 801011c:	b913      	cbnz	r3, 8010124 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801011e:	403c      	ands	r4, r7
 8010120:	4620      	mov	r0, r4
 8010122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010124:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8010128:	4630      	mov	r0, r6
 801012a:	f7fc f9af 	bl	800c48c <ucdr_serialize_uint64_t>
 801012e:	4007      	ands	r7, r0
 8010130:	e7f5      	b.n	801011e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8010132:	bf00      	nop

08010134 <uxr_deserialize_ObjectVariant>:
 8010134:	b570      	push	{r4, r5, r6, lr}
 8010136:	4605      	mov	r5, r0
 8010138:	460e      	mov	r6, r1
 801013a:	f7fb fd5d 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 801013e:	b168      	cbz	r0, 801015c <uxr_deserialize_ObjectVariant+0x28>
 8010140:	7833      	ldrb	r3, [r6, #0]
 8010142:	3b01      	subs	r3, #1
 8010144:	4604      	mov	r4, r0
 8010146:	2b0d      	cmp	r3, #13
 8010148:	d809      	bhi.n	801015e <uxr_deserialize_ObjectVariant+0x2a>
 801014a:	e8df f003 	tbb	[pc, r3]
 801014e:	0a64      	.short	0x0a64
 8010150:	0a0a2323 	.word	0x0a0a2323
 8010154:	10080a0a 	.word	0x10080a0a
 8010158:	5e411010 	.word	0x5e411010
 801015c:	2400      	movs	r4, #0
 801015e:	4620      	mov	r0, r4
 8010160:	bd70      	pop	{r4, r5, r6, pc}
 8010162:	1d31      	adds	r1, r6, #4
 8010164:	4628      	mov	r0, r5
 8010166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801016a:	f7ff be4f 	b.w	800fe0c <uxr_deserialize_DATAWRITER_Representation>
 801016e:	1d31      	adds	r1, r6, #4
 8010170:	4628      	mov	r0, r5
 8010172:	f7fb fd41 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 8010176:	2800      	cmp	r0, #0
 8010178:	d0f0      	beq.n	801015c <uxr_deserialize_ObjectVariant+0x28>
 801017a:	7933      	ldrb	r3, [r6, #4]
 801017c:	2b01      	cmp	r3, #1
 801017e:	d001      	beq.n	8010184 <uxr_deserialize_ObjectVariant+0x50>
 8010180:	2b02      	cmp	r3, #2
 8010182:	d1ec      	bne.n	801015e <uxr_deserialize_ObjectVariant+0x2a>
 8010184:	68b1      	ldr	r1, [r6, #8]
 8010186:	4628      	mov	r0, r5
 8010188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801018c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010190:	f005 bf08 	b.w	8015fa4 <ucdr_deserialize_string>
 8010194:	1d31      	adds	r1, r6, #4
 8010196:	4628      	mov	r0, r5
 8010198:	f7fb fd2e 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 801019c:	4604      	mov	r4, r0
 801019e:	b170      	cbz	r0, 80101be <uxr_deserialize_ObjectVariant+0x8a>
 80101a0:	7933      	ldrb	r3, [r6, #4]
 80101a2:	2b02      	cmp	r3, #2
 80101a4:	d053      	beq.n	801024e <uxr_deserialize_ObjectVariant+0x11a>
 80101a6:	2b03      	cmp	r3, #3
 80101a8:	d109      	bne.n	80101be <uxr_deserialize_ObjectVariant+0x8a>
 80101aa:	f106 0308 	add.w	r3, r6, #8
 80101ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80101b2:	f106 010c 	add.w	r1, r6, #12
 80101b6:	4628      	mov	r0, r5
 80101b8:	f7fd f878 	bl	800d2ac <ucdr_deserialize_sequence_uint8_t>
 80101bc:	4604      	mov	r4, r0
 80101be:	2202      	movs	r2, #2
 80101c0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80101c4:	4628      	mov	r0, r5
 80101c6:	f7fb fbc5 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80101ca:	4004      	ands	r4, r0
 80101cc:	b2e4      	uxtb	r4, r4
 80101ce:	e7c6      	b.n	801015e <uxr_deserialize_ObjectVariant+0x2a>
 80101d0:	2204      	movs	r2, #4
 80101d2:	18b1      	adds	r1, r6, r2
 80101d4:	4628      	mov	r0, r5
 80101d6:	f7fb fbbd 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80101da:	2202      	movs	r2, #2
 80101dc:	f106 0108 	add.w	r1, r6, #8
 80101e0:	4604      	mov	r4, r0
 80101e2:	4628      	mov	r0, r5
 80101e4:	f7fb fbb6 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80101e8:	2202      	movs	r2, #2
 80101ea:	4004      	ands	r4, r0
 80101ec:	f106 010a 	add.w	r1, r6, #10
 80101f0:	4628      	mov	r0, r5
 80101f2:	f7fb fbaf 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80101f6:	b2e4      	uxtb	r4, r4
 80101f8:	4603      	mov	r3, r0
 80101fa:	f106 010c 	add.w	r1, r6, #12
 80101fe:	4628      	mov	r0, r5
 8010200:	401c      	ands	r4, r3
 8010202:	f7fb fccb 	bl	800bb9c <ucdr_deserialize_bool>
 8010206:	4004      	ands	r4, r0
 8010208:	e7a9      	b.n	801015e <uxr_deserialize_ObjectVariant+0x2a>
 801020a:	1d31      	adds	r1, r6, #4
 801020c:	4628      	mov	r0, r5
 801020e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010212:	f7ff bcb1 	b.w	800fb78 <uxr_deserialize_CLIENT_Representation>
 8010216:	1d31      	adds	r1, r6, #4
 8010218:	4628      	mov	r0, r5
 801021a:	f7fb fced 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 801021e:	4604      	mov	r4, r0
 8010220:	b168      	cbz	r0, 801023e <uxr_deserialize_ObjectVariant+0x10a>
 8010222:	7933      	ldrb	r3, [r6, #4]
 8010224:	2b02      	cmp	r3, #2
 8010226:	d003      	beq.n	8010230 <uxr_deserialize_ObjectVariant+0xfc>
 8010228:	2b03      	cmp	r3, #3
 801022a:	d018      	beq.n	801025e <uxr_deserialize_ObjectVariant+0x12a>
 801022c:	2b01      	cmp	r3, #1
 801022e:	d106      	bne.n	801023e <uxr_deserialize_ObjectVariant+0x10a>
 8010230:	68b1      	ldr	r1, [r6, #8]
 8010232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010236:	4628      	mov	r0, r5
 8010238:	f005 feb4 	bl	8015fa4 <ucdr_deserialize_string>
 801023c:	4604      	mov	r4, r0
 801023e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010242:	4628      	mov	r0, r5
 8010244:	f7fc fa74 	bl	800c730 <ucdr_deserialize_int16_t>
 8010248:	4004      	ands	r4, r0
 801024a:	b2e4      	uxtb	r4, r4
 801024c:	e787      	b.n	801015e <uxr_deserialize_ObjectVariant+0x2a>
 801024e:	68b1      	ldr	r1, [r6, #8]
 8010250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010254:	4628      	mov	r0, r5
 8010256:	f005 fea5 	bl	8015fa4 <ucdr_deserialize_string>
 801025a:	4604      	mov	r4, r0
 801025c:	e7af      	b.n	80101be <uxr_deserialize_ObjectVariant+0x8a>
 801025e:	f106 0308 	add.w	r3, r6, #8
 8010262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010266:	f106 010c 	add.w	r1, r6, #12
 801026a:	4628      	mov	r0, r5
 801026c:	f7fd f81e 	bl	800d2ac <ucdr_deserialize_sequence_uint8_t>
 8010270:	4604      	mov	r4, r0
 8010272:	e7e4      	b.n	801023e <uxr_deserialize_ObjectVariant+0x10a>

08010274 <uxr_deserialize_BaseObjectRequest>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	2202      	movs	r2, #2
 8010278:	4605      	mov	r5, r0
 801027a:	460e      	mov	r6, r1
 801027c:	f7fb fb6a 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 8010280:	2202      	movs	r2, #2
 8010282:	4604      	mov	r4, r0
 8010284:	18b1      	adds	r1, r6, r2
 8010286:	4628      	mov	r0, r5
 8010288:	f7fb fb64 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 801028c:	4020      	ands	r0, r4
 801028e:	b2c0      	uxtb	r0, r0
 8010290:	bd70      	pop	{r4, r5, r6, pc}
 8010292:	bf00      	nop

08010294 <uxr_serialize_ActivityInfoVariant>:
 8010294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010298:	460d      	mov	r5, r1
 801029a:	7809      	ldrb	r1, [r1, #0]
 801029c:	4606      	mov	r6, r0
 801029e:	f7fb fc95 	bl	800bbcc <ucdr_serialize_uint8_t>
 80102a2:	b130      	cbz	r0, 80102b2 <uxr_serialize_ActivityInfoVariant+0x1e>
 80102a4:	782b      	ldrb	r3, [r5, #0]
 80102a6:	2b06      	cmp	r3, #6
 80102a8:	d014      	beq.n	80102d4 <uxr_serialize_ActivityInfoVariant+0x40>
 80102aa:	2b0d      	cmp	r3, #13
 80102ac:	d019      	beq.n	80102e2 <uxr_serialize_ActivityInfoVariant+0x4e>
 80102ae:	2b05      	cmp	r3, #5
 80102b0:	d001      	beq.n	80102b6 <uxr_serialize_ActivityInfoVariant+0x22>
 80102b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80102ba:	4630      	mov	r0, r6
 80102bc:	f7fc f9ae 	bl	800c61c <ucdr_serialize_int16_t>
 80102c0:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80102c4:	4604      	mov	r4, r0
 80102c6:	4630      	mov	r0, r6
 80102c8:	f7fc f8e0 	bl	800c48c <ucdr_serialize_uint64_t>
 80102cc:	4020      	ands	r0, r4
 80102ce:	b2c0      	uxtb	r0, r0
 80102d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102d4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80102d8:	4630      	mov	r0, r6
 80102da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102de:	f7fc b99d 	b.w	800c61c <ucdr_serialize_int16_t>
 80102e2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80102e6:	4630      	mov	r0, r6
 80102e8:	f7fc f998 	bl	800c61c <ucdr_serialize_int16_t>
 80102ec:	68e9      	ldr	r1, [r5, #12]
 80102ee:	4681      	mov	r9, r0
 80102f0:	4630      	mov	r0, r6
 80102f2:	f7fb fe87 	bl	800c004 <ucdr_serialize_uint32_t>
 80102f6:	68eb      	ldr	r3, [r5, #12]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d051      	beq.n	80103a0 <uxr_serialize_ActivityInfoVariant+0x10c>
 80102fc:	b1e8      	cbz	r0, 801033a <uxr_serialize_ActivityInfoVariant+0xa6>
 80102fe:	f105 0714 	add.w	r7, r5, #20
 8010302:	f04f 0800 	mov.w	r8, #0
 8010306:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 801030a:	4630      	mov	r0, r6
 801030c:	f7fb fc5e 	bl	800bbcc <ucdr_serialize_uint8_t>
 8010310:	b198      	cbz	r0, 801033a <uxr_serialize_ActivityInfoVariant+0xa6>
 8010312:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8010316:	2b03      	cmp	r3, #3
 8010318:	d839      	bhi.n	801038e <uxr_serialize_ActivityInfoVariant+0xfa>
 801031a:	e8df f003 	tbb	[pc, r3]
 801031e:	1e2b      	.short	0x1e2b
 8010320:	0211      	.short	0x0211
 8010322:	6839      	ldr	r1, [r7, #0]
 8010324:	4630      	mov	r0, r6
 8010326:	f005 fe2f 	bl	8015f88 <ucdr_serialize_string>
 801032a:	68eb      	ldr	r3, [r5, #12]
 801032c:	f108 0801 	add.w	r8, r8, #1
 8010330:	4598      	cmp	r8, r3
 8010332:	d231      	bcs.n	8010398 <uxr_serialize_ActivityInfoVariant+0x104>
 8010334:	3718      	adds	r7, #24
 8010336:	2800      	cmp	r0, #0
 8010338:	d1e5      	bne.n	8010306 <uxr_serialize_ActivityInfoVariant+0x72>
 801033a:	2000      	movs	r0, #0
 801033c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010340:	2210      	movs	r2, #16
 8010342:	4639      	mov	r1, r7
 8010344:	4630      	mov	r0, r6
 8010346:	f7fb faa1 	bl	800b88c <ucdr_serialize_array_uint8_t>
 801034a:	6939      	ldr	r1, [r7, #16]
 801034c:	4604      	mov	r4, r0
 801034e:	4630      	mov	r0, r6
 8010350:	f7fb fe58 	bl	800c004 <ucdr_serialize_uint32_t>
 8010354:	4020      	ands	r0, r4
 8010356:	b2c0      	uxtb	r0, r0
 8010358:	e7e7      	b.n	801032a <uxr_serialize_ActivityInfoVariant+0x96>
 801035a:	2204      	movs	r2, #4
 801035c:	4639      	mov	r1, r7
 801035e:	4630      	mov	r0, r6
 8010360:	f7fb fa94 	bl	800b88c <ucdr_serialize_array_uint8_t>
 8010364:	88b9      	ldrh	r1, [r7, #4]
 8010366:	4604      	mov	r4, r0
 8010368:	4630      	mov	r0, r6
 801036a:	f7fb fc5b 	bl	800bc24 <ucdr_serialize_uint16_t>
 801036e:	4020      	ands	r0, r4
 8010370:	b2c0      	uxtb	r0, r0
 8010372:	e7da      	b.n	801032a <uxr_serialize_ActivityInfoVariant+0x96>
 8010374:	2202      	movs	r2, #2
 8010376:	4639      	mov	r1, r7
 8010378:	4630      	mov	r0, r6
 801037a:	f7fb fa87 	bl	800b88c <ucdr_serialize_array_uint8_t>
 801037e:	78b9      	ldrb	r1, [r7, #2]
 8010380:	4604      	mov	r4, r0
 8010382:	4630      	mov	r0, r6
 8010384:	f7fb fc22 	bl	800bbcc <ucdr_serialize_uint8_t>
 8010388:	4020      	ands	r0, r4
 801038a:	b2c0      	uxtb	r0, r0
 801038c:	e7cd      	b.n	801032a <uxr_serialize_ActivityInfoVariant+0x96>
 801038e:	68eb      	ldr	r3, [r5, #12]
 8010390:	f108 0801 	add.w	r8, r8, #1
 8010394:	4598      	cmp	r8, r3
 8010396:	d308      	bcc.n	80103aa <uxr_serialize_ActivityInfoVariant+0x116>
 8010398:	ea09 0000 	and.w	r0, r9, r0
 801039c:	b2c0      	uxtb	r0, r0
 801039e:	e788      	b.n	80102b2 <uxr_serialize_ActivityInfoVariant+0x1e>
 80103a0:	ea09 0900 	and.w	r9, r9, r0
 80103a4:	fa5f f089 	uxtb.w	r0, r9
 80103a8:	e783      	b.n	80102b2 <uxr_serialize_ActivityInfoVariant+0x1e>
 80103aa:	3718      	adds	r7, #24
 80103ac:	e7ab      	b.n	8010306 <uxr_serialize_ActivityInfoVariant+0x72>
 80103ae:	bf00      	nop

080103b0 <uxr_deserialize_BaseObjectReply>:
 80103b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b4:	2202      	movs	r2, #2
 80103b6:	4606      	mov	r6, r0
 80103b8:	460f      	mov	r7, r1
 80103ba:	f7fb facb 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80103be:	2202      	movs	r2, #2
 80103c0:	18b9      	adds	r1, r7, r2
 80103c2:	4605      	mov	r5, r0
 80103c4:	4630      	mov	r0, r6
 80103c6:	f7fb fac5 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80103ca:	1d39      	adds	r1, r7, #4
 80103cc:	4680      	mov	r8, r0
 80103ce:	4630      	mov	r0, r6
 80103d0:	f7fb fc12 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 80103d4:	1d79      	adds	r1, r7, #5
 80103d6:	4604      	mov	r4, r0
 80103d8:	4630      	mov	r0, r6
 80103da:	f7fb fc0d 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 80103de:	ea05 0508 	and.w	r5, r5, r8
 80103e2:	402c      	ands	r4, r5
 80103e4:	4020      	ands	r0, r4
 80103e6:	b2c0      	uxtb	r0, r0
 80103e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080103ec <uxr_serialize_ReadSpecification>:
 80103ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f0:	460d      	mov	r5, r1
 80103f2:	7809      	ldrb	r1, [r1, #0]
 80103f4:	4606      	mov	r6, r0
 80103f6:	f7fb fbe9 	bl	800bbcc <ucdr_serialize_uint8_t>
 80103fa:	7869      	ldrb	r1, [r5, #1]
 80103fc:	4604      	mov	r4, r0
 80103fe:	4630      	mov	r0, r6
 8010400:	f7fb fbe4 	bl	800bbcc <ucdr_serialize_uint8_t>
 8010404:	78a9      	ldrb	r1, [r5, #2]
 8010406:	4004      	ands	r4, r0
 8010408:	4630      	mov	r0, r6
 801040a:	f7fb fbb1 	bl	800bb70 <ucdr_serialize_bool>
 801040e:	78ab      	ldrb	r3, [r5, #2]
 8010410:	b2e4      	uxtb	r4, r4
 8010412:	4004      	ands	r4, r0
 8010414:	b94b      	cbnz	r3, 801042a <uxr_serialize_ReadSpecification+0x3e>
 8010416:	7a29      	ldrb	r1, [r5, #8]
 8010418:	4630      	mov	r0, r6
 801041a:	f7fb fba9 	bl	800bb70 <ucdr_serialize_bool>
 801041e:	7a2b      	ldrb	r3, [r5, #8]
 8010420:	4004      	ands	r4, r0
 8010422:	b943      	cbnz	r3, 8010436 <uxr_serialize_ReadSpecification+0x4a>
 8010424:	4620      	mov	r0, r4
 8010426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801042a:	6869      	ldr	r1, [r5, #4]
 801042c:	4630      	mov	r0, r6
 801042e:	f005 fdab 	bl	8015f88 <ucdr_serialize_string>
 8010432:	4004      	ands	r4, r0
 8010434:	e7ef      	b.n	8010416 <uxr_serialize_ReadSpecification+0x2a>
 8010436:	8969      	ldrh	r1, [r5, #10]
 8010438:	4630      	mov	r0, r6
 801043a:	f7fb fbf3 	bl	800bc24 <ucdr_serialize_uint16_t>
 801043e:	89a9      	ldrh	r1, [r5, #12]
 8010440:	4607      	mov	r7, r0
 8010442:	4630      	mov	r0, r6
 8010444:	f7fb fbee 	bl	800bc24 <ucdr_serialize_uint16_t>
 8010448:	89e9      	ldrh	r1, [r5, #14]
 801044a:	4007      	ands	r7, r0
 801044c:	4630      	mov	r0, r6
 801044e:	f7fb fbe9 	bl	800bc24 <ucdr_serialize_uint16_t>
 8010452:	8a29      	ldrh	r1, [r5, #16]
 8010454:	4680      	mov	r8, r0
 8010456:	4630      	mov	r0, r6
 8010458:	f7fb fbe4 	bl	800bc24 <ucdr_serialize_uint16_t>
 801045c:	b2ff      	uxtb	r7, r7
 801045e:	ea04 0507 	and.w	r5, r4, r7
 8010462:	ea05 0508 	and.w	r5, r5, r8
 8010466:	ea00 0405 	and.w	r4, r0, r5
 801046a:	4620      	mov	r0, r4
 801046c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010470 <uxr_serialize_CREATE_CLIENT_Payload>:
 8010470:	f7ff bb28 	b.w	800fac4 <uxr_serialize_CLIENT_Representation>

08010474 <uxr_serialize_CREATE_Payload>:
 8010474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010476:	2202      	movs	r2, #2
 8010478:	4606      	mov	r6, r0
 801047a:	460d      	mov	r5, r1
 801047c:	f7fb fa06 	bl	800b88c <ucdr_serialize_array_uint8_t>
 8010480:	2202      	movs	r2, #2
 8010482:	18a9      	adds	r1, r5, r2
 8010484:	4604      	mov	r4, r0
 8010486:	4630      	mov	r0, r6
 8010488:	f7fb fa00 	bl	800b88c <ucdr_serialize_array_uint8_t>
 801048c:	7929      	ldrb	r1, [r5, #4]
 801048e:	4607      	mov	r7, r0
 8010490:	4630      	mov	r0, r6
 8010492:	f7fb fb9b 	bl	800bbcc <ucdr_serialize_uint8_t>
 8010496:	b170      	cbz	r0, 80104b6 <uxr_serialize_CREATE_Payload+0x42>
 8010498:	792b      	ldrb	r3, [r5, #4]
 801049a:	403c      	ands	r4, r7
 801049c:	3b01      	subs	r3, #1
 801049e:	b2e4      	uxtb	r4, r4
 80104a0:	2b0d      	cmp	r3, #13
 80104a2:	d809      	bhi.n	80104b8 <uxr_serialize_CREATE_Payload+0x44>
 80104a4:	e8df f003 	tbb	[pc, r3]
 80104a8:	23230a3e 	.word	0x23230a3e
 80104ac:	0a0a0a0a 	.word	0x0a0a0a0a
 80104b0:	12121208 	.word	0x12121208
 80104b4:	5f58      	.short	0x5f58
 80104b6:	2400      	movs	r4, #0
 80104b8:	4620      	mov	r0, r4
 80104ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104bc:	f105 0108 	add.w	r1, r5, #8
 80104c0:	4630      	mov	r0, r6
 80104c2:	f7ff fc07 	bl	800fcd4 <uxr_serialize_DATAWRITER_Representation>
 80104c6:	4004      	ands	r4, r0
 80104c8:	4620      	mov	r0, r4
 80104ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104cc:	7a29      	ldrb	r1, [r5, #8]
 80104ce:	4630      	mov	r0, r6
 80104d0:	f7fb fb7c 	bl	800bbcc <ucdr_serialize_uint8_t>
 80104d4:	2800      	cmp	r0, #0
 80104d6:	d0ee      	beq.n	80104b6 <uxr_serialize_CREATE_Payload+0x42>
 80104d8:	7a2b      	ldrb	r3, [r5, #8]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d001      	beq.n	80104e2 <uxr_serialize_CREATE_Payload+0x6e>
 80104de:	2b02      	cmp	r3, #2
 80104e0:	d1ea      	bne.n	80104b8 <uxr_serialize_CREATE_Payload+0x44>
 80104e2:	68e9      	ldr	r1, [r5, #12]
 80104e4:	4630      	mov	r0, r6
 80104e6:	f005 fd4f 	bl	8015f88 <ucdr_serialize_string>
 80104ea:	4004      	ands	r4, r0
 80104ec:	e7e4      	b.n	80104b8 <uxr_serialize_CREATE_Payload+0x44>
 80104ee:	7a29      	ldrb	r1, [r5, #8]
 80104f0:	4630      	mov	r0, r6
 80104f2:	f7fb fb6b 	bl	800bbcc <ucdr_serialize_uint8_t>
 80104f6:	4607      	mov	r7, r0
 80104f8:	b158      	cbz	r0, 8010512 <uxr_serialize_CREATE_Payload+0x9e>
 80104fa:	7a2b      	ldrb	r3, [r5, #8]
 80104fc:	2b02      	cmp	r3, #2
 80104fe:	d039      	beq.n	8010574 <uxr_serialize_CREATE_Payload+0x100>
 8010500:	2b03      	cmp	r3, #3
 8010502:	d106      	bne.n	8010512 <uxr_serialize_CREATE_Payload+0x9e>
 8010504:	68ea      	ldr	r2, [r5, #12]
 8010506:	f105 0110 	add.w	r1, r5, #16
 801050a:	4630      	mov	r0, r6
 801050c:	f7fc febc 	bl	800d288 <ucdr_serialize_sequence_uint8_t>
 8010510:	4607      	mov	r7, r0
 8010512:	2202      	movs	r2, #2
 8010514:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8010518:	4630      	mov	r0, r6
 801051a:	f7fb f9b7 	bl	800b88c <ucdr_serialize_array_uint8_t>
 801051e:	4038      	ands	r0, r7
 8010520:	4004      	ands	r4, r0
 8010522:	e7c9      	b.n	80104b8 <uxr_serialize_CREATE_Payload+0x44>
 8010524:	7a29      	ldrb	r1, [r5, #8]
 8010526:	4630      	mov	r0, r6
 8010528:	f7fb fb50 	bl	800bbcc <ucdr_serialize_uint8_t>
 801052c:	4607      	mov	r7, r0
 801052e:	b158      	cbz	r0, 8010548 <uxr_serialize_CREATE_Payload+0xd4>
 8010530:	7a2b      	ldrb	r3, [r5, #8]
 8010532:	2b02      	cmp	r3, #2
 8010534:	d003      	beq.n	801053e <uxr_serialize_CREATE_Payload+0xca>
 8010536:	2b03      	cmp	r3, #3
 8010538:	d022      	beq.n	8010580 <uxr_serialize_CREATE_Payload+0x10c>
 801053a:	2b01      	cmp	r3, #1
 801053c:	d104      	bne.n	8010548 <uxr_serialize_CREATE_Payload+0xd4>
 801053e:	68e9      	ldr	r1, [r5, #12]
 8010540:	4630      	mov	r0, r6
 8010542:	f005 fd21 	bl	8015f88 <ucdr_serialize_string>
 8010546:	4607      	mov	r7, r0
 8010548:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 801054c:	4630      	mov	r0, r6
 801054e:	f7fc f865 	bl	800c61c <ucdr_serialize_int16_t>
 8010552:	4038      	ands	r0, r7
 8010554:	4004      	ands	r4, r0
 8010556:	e7af      	b.n	80104b8 <uxr_serialize_CREATE_Payload+0x44>
 8010558:	f105 0108 	add.w	r1, r5, #8
 801055c:	4630      	mov	r0, r6
 801055e:	f7ff fb6f 	bl	800fc40 <uxr_serialize_AGENT_Representation>
 8010562:	4004      	ands	r4, r0
 8010564:	e7a8      	b.n	80104b8 <uxr_serialize_CREATE_Payload+0x44>
 8010566:	f105 0108 	add.w	r1, r5, #8
 801056a:	4630      	mov	r0, r6
 801056c:	f7ff faaa 	bl	800fac4 <uxr_serialize_CLIENT_Representation>
 8010570:	4004      	ands	r4, r0
 8010572:	e7a1      	b.n	80104b8 <uxr_serialize_CREATE_Payload+0x44>
 8010574:	68e9      	ldr	r1, [r5, #12]
 8010576:	4630      	mov	r0, r6
 8010578:	f005 fd06 	bl	8015f88 <ucdr_serialize_string>
 801057c:	4607      	mov	r7, r0
 801057e:	e7c8      	b.n	8010512 <uxr_serialize_CREATE_Payload+0x9e>
 8010580:	68ea      	ldr	r2, [r5, #12]
 8010582:	f105 0110 	add.w	r1, r5, #16
 8010586:	4630      	mov	r0, r6
 8010588:	f7fc fe7e 	bl	800d288 <ucdr_serialize_sequence_uint8_t>
 801058c:	4607      	mov	r7, r0
 801058e:	e7db      	b.n	8010548 <uxr_serialize_CREATE_Payload+0xd4>

08010590 <uxr_serialize_GET_INFO_Payload>:
 8010590:	b570      	push	{r4, r5, r6, lr}
 8010592:	2202      	movs	r2, #2
 8010594:	4605      	mov	r5, r0
 8010596:	460e      	mov	r6, r1
 8010598:	f7fb f978 	bl	800b88c <ucdr_serialize_array_uint8_t>
 801059c:	2202      	movs	r2, #2
 801059e:	18b1      	adds	r1, r6, r2
 80105a0:	4604      	mov	r4, r0
 80105a2:	4628      	mov	r0, r5
 80105a4:	f7fb f972 	bl	800b88c <ucdr_serialize_array_uint8_t>
 80105a8:	6871      	ldr	r1, [r6, #4]
 80105aa:	4004      	ands	r4, r0
 80105ac:	4628      	mov	r0, r5
 80105ae:	f7fb fd29 	bl	800c004 <ucdr_serialize_uint32_t>
 80105b2:	b2e4      	uxtb	r4, r4
 80105b4:	4020      	ands	r0, r4
 80105b6:	bd70      	pop	{r4, r5, r6, pc}

080105b8 <uxr_deserialize_GET_INFO_Payload>:
 80105b8:	b570      	push	{r4, r5, r6, lr}
 80105ba:	2202      	movs	r2, #2
 80105bc:	4605      	mov	r5, r0
 80105be:	460e      	mov	r6, r1
 80105c0:	f7fb f9c8 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80105c4:	2202      	movs	r2, #2
 80105c6:	18b1      	adds	r1, r6, r2
 80105c8:	4604      	mov	r4, r0
 80105ca:	4628      	mov	r0, r5
 80105cc:	f7fb f9c2 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80105d0:	1d31      	adds	r1, r6, #4
 80105d2:	4004      	ands	r4, r0
 80105d4:	4628      	mov	r0, r5
 80105d6:	f7fb fe3f 	bl	800c258 <ucdr_deserialize_uint32_t>
 80105da:	b2e4      	uxtb	r4, r4
 80105dc:	4020      	ands	r0, r4
 80105de:	bd70      	pop	{r4, r5, r6, pc}

080105e0 <uxr_serialize_DELETE_Payload>:
 80105e0:	b570      	push	{r4, r5, r6, lr}
 80105e2:	2202      	movs	r2, #2
 80105e4:	4605      	mov	r5, r0
 80105e6:	460e      	mov	r6, r1
 80105e8:	f7fb f950 	bl	800b88c <ucdr_serialize_array_uint8_t>
 80105ec:	2202      	movs	r2, #2
 80105ee:	4604      	mov	r4, r0
 80105f0:	18b1      	adds	r1, r6, r2
 80105f2:	4628      	mov	r0, r5
 80105f4:	f7fb f94a 	bl	800b88c <ucdr_serialize_array_uint8_t>
 80105f8:	4020      	ands	r0, r4
 80105fa:	b2c0      	uxtb	r0, r0
 80105fc:	bd70      	pop	{r4, r5, r6, pc}
 80105fe:	bf00      	nop

08010600 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010604:	4605      	mov	r5, r0
 8010606:	460e      	mov	r6, r1
 8010608:	f7fb faf6 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 801060c:	1c71      	adds	r1, r6, #1
 801060e:	4604      	mov	r4, r0
 8010610:	4628      	mov	r0, r5
 8010612:	f7fb faf1 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 8010616:	2204      	movs	r2, #4
 8010618:	18b1      	adds	r1, r6, r2
 801061a:	4681      	mov	r9, r0
 801061c:	4628      	mov	r0, r5
 801061e:	f7fb f999 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 8010622:	f106 0108 	add.w	r1, r6, #8
 8010626:	4680      	mov	r8, r0
 8010628:	2202      	movs	r2, #2
 801062a:	4628      	mov	r0, r5
 801062c:	f7fb f992 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 8010630:	2202      	movs	r2, #2
 8010632:	f106 010a 	add.w	r1, r6, #10
 8010636:	4607      	mov	r7, r0
 8010638:	4628      	mov	r0, r5
 801063a:	f7fb f98b 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 801063e:	ea04 0409 	and.w	r4, r4, r9
 8010642:	4603      	mov	r3, r0
 8010644:	f106 010c 	add.w	r1, r6, #12
 8010648:	4628      	mov	r0, r5
 801064a:	b2e4      	uxtb	r4, r4
 801064c:	461d      	mov	r5, r3
 801064e:	ea04 0408 	and.w	r4, r4, r8
 8010652:	f7fb faa3 	bl	800bb9c <ucdr_deserialize_bool>
 8010656:	4027      	ands	r7, r4
 8010658:	403d      	ands	r5, r7
 801065a:	4028      	ands	r0, r5
 801065c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08010660 <uxr_deserialize_STATUS_Payload>:
 8010660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010664:	2202      	movs	r2, #2
 8010666:	4606      	mov	r6, r0
 8010668:	460f      	mov	r7, r1
 801066a:	f7fb f973 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 801066e:	2202      	movs	r2, #2
 8010670:	18b9      	adds	r1, r7, r2
 8010672:	4605      	mov	r5, r0
 8010674:	4630      	mov	r0, r6
 8010676:	f7fb f96d 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 801067a:	1d39      	adds	r1, r7, #4
 801067c:	4680      	mov	r8, r0
 801067e:	4630      	mov	r0, r6
 8010680:	f7fb faba 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 8010684:	1d79      	adds	r1, r7, #5
 8010686:	4604      	mov	r4, r0
 8010688:	4630      	mov	r0, r6
 801068a:	f7fb fab5 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 801068e:	ea05 0508 	and.w	r5, r5, r8
 8010692:	402c      	ands	r4, r5
 8010694:	4020      	ands	r0, r4
 8010696:	b2c0      	uxtb	r0, r0
 8010698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801069c <uxr_serialize_INFO_Payload>:
 801069c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a0:	2202      	movs	r2, #2
 80106a2:	460c      	mov	r4, r1
 80106a4:	4605      	mov	r5, r0
 80106a6:	f7fb f8f1 	bl	800b88c <ucdr_serialize_array_uint8_t>
 80106aa:	2202      	movs	r2, #2
 80106ac:	18a1      	adds	r1, r4, r2
 80106ae:	4680      	mov	r8, r0
 80106b0:	4628      	mov	r0, r5
 80106b2:	f7fb f8eb 	bl	800b88c <ucdr_serialize_array_uint8_t>
 80106b6:	7921      	ldrb	r1, [r4, #4]
 80106b8:	4607      	mov	r7, r0
 80106ba:	4628      	mov	r0, r5
 80106bc:	f7fb fa86 	bl	800bbcc <ucdr_serialize_uint8_t>
 80106c0:	7961      	ldrb	r1, [r4, #5]
 80106c2:	4606      	mov	r6, r0
 80106c4:	4628      	mov	r0, r5
 80106c6:	f7fb fa81 	bl	800bbcc <ucdr_serialize_uint8_t>
 80106ca:	ea08 0807 	and.w	r8, r8, r7
 80106ce:	ea06 0608 	and.w	r6, r6, r8
 80106d2:	ea00 0706 	and.w	r7, r0, r6
 80106d6:	7a21      	ldrb	r1, [r4, #8]
 80106d8:	4628      	mov	r0, r5
 80106da:	f7fb fa49 	bl	800bb70 <ucdr_serialize_bool>
 80106de:	7a23      	ldrb	r3, [r4, #8]
 80106e0:	b2ff      	uxtb	r7, r7
 80106e2:	4606      	mov	r6, r0
 80106e4:	b96b      	cbnz	r3, 8010702 <uxr_serialize_INFO_Payload+0x66>
 80106e6:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80106ea:	4628      	mov	r0, r5
 80106ec:	f7fb fa40 	bl	800bb70 <ucdr_serialize_bool>
 80106f0:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80106f4:	4030      	ands	r0, r6
 80106f6:	b2c6      	uxtb	r6, r0
 80106f8:	b983      	cbnz	r3, 801071c <uxr_serialize_INFO_Payload+0x80>
 80106fa:	ea06 0007 	and.w	r0, r6, r7
 80106fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010702:	7b21      	ldrb	r1, [r4, #12]
 8010704:	4628      	mov	r0, r5
 8010706:	f7fb fa61 	bl	800bbcc <ucdr_serialize_uint8_t>
 801070a:	b188      	cbz	r0, 8010730 <uxr_serialize_INFO_Payload+0x94>
 801070c:	f104 010c 	add.w	r1, r4, #12
 8010710:	4628      	mov	r0, r5
 8010712:	f7ff fb07 	bl	800fd24 <uxr_serialize_ObjectVariant.part.0>
 8010716:	4030      	ands	r0, r6
 8010718:	b2c6      	uxtb	r6, r0
 801071a:	e7e4      	b.n	80106e6 <uxr_serialize_INFO_Payload+0x4a>
 801071c:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8010720:	4628      	mov	r0, r5
 8010722:	f7ff fdb7 	bl	8010294 <uxr_serialize_ActivityInfoVariant>
 8010726:	4006      	ands	r6, r0
 8010728:	ea06 0007 	and.w	r0, r6, r7
 801072c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010730:	4606      	mov	r6, r0
 8010732:	e7d8      	b.n	80106e6 <uxr_serialize_INFO_Payload+0x4a>

08010734 <uxr_serialize_READ_DATA_Payload>:
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	2202      	movs	r2, #2
 8010738:	4605      	mov	r5, r0
 801073a:	460e      	mov	r6, r1
 801073c:	f7fb f8a6 	bl	800b88c <ucdr_serialize_array_uint8_t>
 8010740:	2202      	movs	r2, #2
 8010742:	18b1      	adds	r1, r6, r2
 8010744:	4604      	mov	r4, r0
 8010746:	4628      	mov	r0, r5
 8010748:	f7fb f8a0 	bl	800b88c <ucdr_serialize_array_uint8_t>
 801074c:	1d31      	adds	r1, r6, #4
 801074e:	4004      	ands	r4, r0
 8010750:	4628      	mov	r0, r5
 8010752:	f7ff fe4b 	bl	80103ec <uxr_serialize_ReadSpecification>
 8010756:	b2e4      	uxtb	r4, r4
 8010758:	4020      	ands	r0, r4
 801075a:	bd70      	pop	{r4, r5, r6, pc}

0801075c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801075c:	b570      	push	{r4, r5, r6, lr}
 801075e:	2202      	movs	r2, #2
 8010760:	4605      	mov	r5, r0
 8010762:	460e      	mov	r6, r1
 8010764:	f7fb f892 	bl	800b88c <ucdr_serialize_array_uint8_t>
 8010768:	2202      	movs	r2, #2
 801076a:	4604      	mov	r4, r0
 801076c:	18b1      	adds	r1, r6, r2
 801076e:	4628      	mov	r0, r5
 8010770:	f7fb f88c 	bl	800b88c <ucdr_serialize_array_uint8_t>
 8010774:	4020      	ands	r0, r4
 8010776:	b2c0      	uxtb	r0, r0
 8010778:	bd70      	pop	{r4, r5, r6, pc}
 801077a:	bf00      	nop

0801077c <uxr_serialize_ACKNACK_Payload>:
 801077c:	b570      	push	{r4, r5, r6, lr}
 801077e:	460c      	mov	r4, r1
 8010780:	460e      	mov	r6, r1
 8010782:	f834 1b02 	ldrh.w	r1, [r4], #2
 8010786:	4605      	mov	r5, r0
 8010788:	f7fb fa4c 	bl	800bc24 <ucdr_serialize_uint16_t>
 801078c:	2202      	movs	r2, #2
 801078e:	4621      	mov	r1, r4
 8010790:	4604      	mov	r4, r0
 8010792:	4628      	mov	r0, r5
 8010794:	f7fb f87a 	bl	800b88c <ucdr_serialize_array_uint8_t>
 8010798:	7931      	ldrb	r1, [r6, #4]
 801079a:	4004      	ands	r4, r0
 801079c:	4628      	mov	r0, r5
 801079e:	f7fb fa15 	bl	800bbcc <ucdr_serialize_uint8_t>
 80107a2:	b2e4      	uxtb	r4, r4
 80107a4:	4020      	ands	r0, r4
 80107a6:	bd70      	pop	{r4, r5, r6, pc}

080107a8 <uxr_deserialize_ACKNACK_Payload>:
 80107a8:	b570      	push	{r4, r5, r6, lr}
 80107aa:	4605      	mov	r5, r0
 80107ac:	460e      	mov	r6, r1
 80107ae:	f7fb fb3d 	bl	800be2c <ucdr_deserialize_uint16_t>
 80107b2:	2202      	movs	r2, #2
 80107b4:	18b1      	adds	r1, r6, r2
 80107b6:	4604      	mov	r4, r0
 80107b8:	4628      	mov	r0, r5
 80107ba:	f7fb f8cb 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80107be:	1d31      	adds	r1, r6, #4
 80107c0:	4004      	ands	r4, r0
 80107c2:	4628      	mov	r0, r5
 80107c4:	f7fb fa18 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 80107c8:	b2e4      	uxtb	r4, r4
 80107ca:	4020      	ands	r0, r4
 80107cc:	bd70      	pop	{r4, r5, r6, pc}
 80107ce:	bf00      	nop

080107d0 <uxr_serialize_HEARTBEAT_Payload>:
 80107d0:	b570      	push	{r4, r5, r6, lr}
 80107d2:	460d      	mov	r5, r1
 80107d4:	8809      	ldrh	r1, [r1, #0]
 80107d6:	4606      	mov	r6, r0
 80107d8:	f7fb fa24 	bl	800bc24 <ucdr_serialize_uint16_t>
 80107dc:	8869      	ldrh	r1, [r5, #2]
 80107de:	4604      	mov	r4, r0
 80107e0:	4630      	mov	r0, r6
 80107e2:	f7fb fa1f 	bl	800bc24 <ucdr_serialize_uint16_t>
 80107e6:	7929      	ldrb	r1, [r5, #4]
 80107e8:	4004      	ands	r4, r0
 80107ea:	4630      	mov	r0, r6
 80107ec:	f7fb f9ee 	bl	800bbcc <ucdr_serialize_uint8_t>
 80107f0:	b2e4      	uxtb	r4, r4
 80107f2:	4020      	ands	r0, r4
 80107f4:	bd70      	pop	{r4, r5, r6, pc}
 80107f6:	bf00      	nop

080107f8 <uxr_deserialize_HEARTBEAT_Payload>:
 80107f8:	b570      	push	{r4, r5, r6, lr}
 80107fa:	4605      	mov	r5, r0
 80107fc:	460e      	mov	r6, r1
 80107fe:	f7fb fb15 	bl	800be2c <ucdr_deserialize_uint16_t>
 8010802:	1cb1      	adds	r1, r6, #2
 8010804:	4604      	mov	r4, r0
 8010806:	4628      	mov	r0, r5
 8010808:	f7fb fb10 	bl	800be2c <ucdr_deserialize_uint16_t>
 801080c:	1d31      	adds	r1, r6, #4
 801080e:	4004      	ands	r4, r0
 8010810:	4628      	mov	r0, r5
 8010812:	f7fb f9f1 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 8010816:	b2e4      	uxtb	r4, r4
 8010818:	4020      	ands	r0, r4
 801081a:	bd70      	pop	{r4, r5, r6, pc}

0801081c <uxr_serialize_TIMESTAMP_Payload>:
 801081c:	b570      	push	{r4, r5, r6, lr}
 801081e:	460d      	mov	r5, r1
 8010820:	6809      	ldr	r1, [r1, #0]
 8010822:	4606      	mov	r6, r0
 8010824:	f7fc f800 	bl	800c828 <ucdr_serialize_int32_t>
 8010828:	6869      	ldr	r1, [r5, #4]
 801082a:	4604      	mov	r4, r0
 801082c:	4630      	mov	r0, r6
 801082e:	f7fb fbe9 	bl	800c004 <ucdr_serialize_uint32_t>
 8010832:	4020      	ands	r0, r4
 8010834:	b2c0      	uxtb	r0, r0
 8010836:	bd70      	pop	{r4, r5, r6, pc}

08010838 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801083c:	4605      	mov	r5, r0
 801083e:	460e      	mov	r6, r1
 8010840:	f7fc f88c 	bl	800c95c <ucdr_deserialize_int32_t>
 8010844:	1d31      	adds	r1, r6, #4
 8010846:	4607      	mov	r7, r0
 8010848:	4628      	mov	r0, r5
 801084a:	f7fb fd05 	bl	800c258 <ucdr_deserialize_uint32_t>
 801084e:	f106 0108 	add.w	r1, r6, #8
 8010852:	4680      	mov	r8, r0
 8010854:	4628      	mov	r0, r5
 8010856:	f7fc f881 	bl	800c95c <ucdr_deserialize_int32_t>
 801085a:	f106 010c 	add.w	r1, r6, #12
 801085e:	4604      	mov	r4, r0
 8010860:	4628      	mov	r0, r5
 8010862:	f7fb fcf9 	bl	800c258 <ucdr_deserialize_uint32_t>
 8010866:	ea07 0708 	and.w	r7, r7, r8
 801086a:	403c      	ands	r4, r7
 801086c:	f106 0110 	add.w	r1, r6, #16
 8010870:	4004      	ands	r4, r0
 8010872:	4628      	mov	r0, r5
 8010874:	f7fc f872 	bl	800c95c <ucdr_deserialize_int32_t>
 8010878:	f106 0114 	add.w	r1, r6, #20
 801087c:	4607      	mov	r7, r0
 801087e:	4628      	mov	r0, r5
 8010880:	f7fb fcea 	bl	800c258 <ucdr_deserialize_uint32_t>
 8010884:	b2e4      	uxtb	r4, r4
 8010886:	403c      	ands	r4, r7
 8010888:	4020      	ands	r0, r4
 801088a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801088e:	bf00      	nop

08010890 <uxr_serialize_SampleIdentity>:
 8010890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010894:	220c      	movs	r2, #12
 8010896:	4604      	mov	r4, r0
 8010898:	460d      	mov	r5, r1
 801089a:	f7fa fff7 	bl	800b88c <ucdr_serialize_array_uint8_t>
 801089e:	2203      	movs	r2, #3
 80108a0:	f105 010c 	add.w	r1, r5, #12
 80108a4:	4680      	mov	r8, r0
 80108a6:	4620      	mov	r0, r4
 80108a8:	f7fa fff0 	bl	800b88c <ucdr_serialize_array_uint8_t>
 80108ac:	7be9      	ldrb	r1, [r5, #15]
 80108ae:	4681      	mov	r9, r0
 80108b0:	4620      	mov	r0, r4
 80108b2:	f7fb f98b 	bl	800bbcc <ucdr_serialize_uint8_t>
 80108b6:	6929      	ldr	r1, [r5, #16]
 80108b8:	4607      	mov	r7, r0
 80108ba:	4620      	mov	r0, r4
 80108bc:	f7fb ffb4 	bl	800c828 <ucdr_serialize_int32_t>
 80108c0:	6969      	ldr	r1, [r5, #20]
 80108c2:	4606      	mov	r6, r0
 80108c4:	4620      	mov	r0, r4
 80108c6:	f7fb fb9d 	bl	800c004 <ucdr_serialize_uint32_t>
 80108ca:	ea08 0809 	and.w	r8, r8, r9
 80108ce:	ea07 0708 	and.w	r7, r7, r8
 80108d2:	403e      	ands	r6, r7
 80108d4:	4030      	ands	r0, r6
 80108d6:	b2c0      	uxtb	r0, r0
 80108d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080108dc <uxr_deserialize_SampleIdentity>:
 80108dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108e0:	220c      	movs	r2, #12
 80108e2:	4604      	mov	r4, r0
 80108e4:	460d      	mov	r5, r1
 80108e6:	f7fb f835 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80108ea:	2203      	movs	r2, #3
 80108ec:	f105 010c 	add.w	r1, r5, #12
 80108f0:	4680      	mov	r8, r0
 80108f2:	4620      	mov	r0, r4
 80108f4:	f7fb f82e 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80108f8:	f105 010f 	add.w	r1, r5, #15
 80108fc:	4681      	mov	r9, r0
 80108fe:	4620      	mov	r0, r4
 8010900:	f7fb f97a 	bl	800bbf8 <ucdr_deserialize_uint8_t>
 8010904:	f105 0110 	add.w	r1, r5, #16
 8010908:	4607      	mov	r7, r0
 801090a:	4620      	mov	r0, r4
 801090c:	f7fc f826 	bl	800c95c <ucdr_deserialize_int32_t>
 8010910:	f105 0114 	add.w	r1, r5, #20
 8010914:	4606      	mov	r6, r0
 8010916:	4620      	mov	r0, r4
 8010918:	f7fb fc9e 	bl	800c258 <ucdr_deserialize_uint32_t>
 801091c:	ea08 0809 	and.w	r8, r8, r9
 8010920:	ea07 0708 	and.w	r7, r7, r8
 8010924:	403e      	ands	r6, r7
 8010926:	4030      	ands	r0, r6
 8010928:	b2c0      	uxtb	r0, r0
 801092a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801092e:	bf00      	nop

08010930 <nav_msgs__msg__Odometry__get_type_hash>:
 8010930:	4800      	ldr	r0, [pc, #0]	@ (8010934 <nav_msgs__msg__Odometry__get_type_hash+0x4>)
 8010932:	4770      	bx	lr
 8010934:	2000049c 	.word	0x2000049c

08010938 <nav_msgs__msg__Odometry__get_type_description>:
 8010938:	b570      	push	{r4, r5, r6, lr}
 801093a:	4e2c      	ldr	r6, [pc, #176]	@ (80109ec <nav_msgs__msg__Odometry__get_type_description+0xb4>)
 801093c:	7835      	ldrb	r5, [r6, #0]
 801093e:	b10d      	cbz	r5, 8010944 <nav_msgs__msg__Odometry__get_type_description+0xc>
 8010940:	482b      	ldr	r0, [pc, #172]	@ (80109f0 <nav_msgs__msg__Odometry__get_type_description+0xb8>)
 8010942:	bd70      	pop	{r4, r5, r6, pc}
 8010944:	4628      	mov	r0, r5
 8010946:	f004 fe35 	bl	80155b4 <builtin_interfaces__msg__Time__get_type_description>
 801094a:	300c      	adds	r0, #12
 801094c:	c807      	ldmia	r0, {r0, r1, r2}
 801094e:	4c29      	ldr	r4, [pc, #164]	@ (80109f4 <nav_msgs__msg__Odometry__get_type_description+0xbc>)
 8010950:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010954:	4628      	mov	r0, r5
 8010956:	f004 fe63 	bl	8015620 <geometry_msgs__msg__Point__get_type_description>
 801095a:	300c      	adds	r0, #12
 801095c:	c807      	ldmia	r0, {r0, r1, r2}
 801095e:	f104 0318 	add.w	r3, r4, #24
 8010962:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010966:	4628      	mov	r0, r5
 8010968:	f004 fe8a 	bl	8015680 <geometry_msgs__msg__Pose__get_type_description>
 801096c:	300c      	adds	r0, #12
 801096e:	c807      	ldmia	r0, {r0, r1, r2}
 8010970:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8010974:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010978:	4628      	mov	r0, r5
 801097a:	f004 fee1 	bl	8015740 <geometry_msgs__msg__PoseWithCovariance__get_type_description>
 801097e:	300c      	adds	r0, #12
 8010980:	c807      	ldmia	r0, {r0, r1, r2}
 8010982:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8010986:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801098a:	4628      	mov	r0, r5
 801098c:	f004 ff62 	bl	8015854 <geometry_msgs__msg__Quaternion__get_type_description>
 8010990:	300c      	adds	r0, #12
 8010992:	c807      	ldmia	r0, {r0, r1, r2}
 8010994:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 8010998:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801099c:	4628      	mov	r0, r5
 801099e:	f004 ff89 	bl	80158b4 <geometry_msgs__msg__Twist__get_type_description>
 80109a2:	300c      	adds	r0, #12
 80109a4:	c807      	ldmia	r0, {r0, r1, r2}
 80109a6:	f104 0378 	add.w	r3, r4, #120	@ 0x78
 80109aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80109ae:	4628      	mov	r0, r5
 80109b0:	f004 ffc8 	bl	8015944 <geometry_msgs__msg__TwistWithCovariance__get_type_description>
 80109b4:	300c      	adds	r0, #12
 80109b6:	c807      	ldmia	r0, {r0, r1, r2}
 80109b8:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 80109bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80109c0:	4628      	mov	r0, r5
 80109c2:	f005 f831 	bl	8015a28 <geometry_msgs__msg__Vector3__get_type_description>
 80109c6:	300c      	adds	r0, #12
 80109c8:	c807      	ldmia	r0, {r0, r1, r2}
 80109ca:	f104 03a8 	add.w	r3, r4, #168	@ 0xa8
 80109ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80109d2:	4628      	mov	r0, r5
 80109d4:	f004 fd7a 	bl	80154cc <std_msgs__msg__Header__get_type_description>
 80109d8:	300c      	adds	r0, #12
 80109da:	c807      	ldmia	r0, {r0, r1, r2}
 80109dc:	34c0      	adds	r4, #192	@ 0xc0
 80109de:	2301      	movs	r3, #1
 80109e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80109e4:	7033      	strb	r3, [r6, #0]
 80109e6:	4802      	ldr	r0, [pc, #8]	@ (80109f0 <nav_msgs__msg__Odometry__get_type_description+0xb8>)
 80109e8:	bd70      	pop	{r4, r5, r6, pc}
 80109ea:	bf00      	nop
 80109ec:	20010275 	.word	0x20010275
 80109f0:	0801ac68 	.word	0x0801ac68
 80109f4:	20000758 	.word	0x20000758

080109f8 <nav_msgs__msg__Odometry__get_type_description_sources>:
 80109f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109fa:	4d4c      	ldr	r5, [pc, #304]	@ (8010b2c <nav_msgs__msg__Odometry__get_type_description_sources+0x134>)
 80109fc:	782e      	ldrb	r6, [r5, #0]
 80109fe:	b10e      	cbz	r6, 8010a04 <nav_msgs__msg__Odometry__get_type_description_sources+0xc>
 8010a00:	484b      	ldr	r0, [pc, #300]	@ (8010b30 <nav_msgs__msg__Odometry__get_type_description_sources+0x138>)
 8010a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a04:	4f4b      	ldr	r7, [pc, #300]	@ (8010b34 <nav_msgs__msg__Odometry__get_type_description_sources+0x13c>)
 8010a06:	4c4c      	ldr	r4, [pc, #304]	@ (8010b38 <nav_msgs__msg__Odometry__get_type_description_sources+0x140>)
 8010a08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	4627      	mov	r7, r4
 8010a14:	4630      	mov	r0, r6
 8010a16:	f847 3b04 	str.w	r3, [r7], #4
 8010a1a:	f004 fdd7 	bl	80155cc <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8010a1e:	4684      	mov	ip, r0
 8010a20:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a24:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010a26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a2a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	f8dc 3000 	ldr.w	r3, [ip]
 8010a32:	603b      	str	r3, [r7, #0]
 8010a34:	f004 fe00 	bl	8015638 <geometry_msgs__msg__Point__get_individual_type_description_source>
 8010a38:	4684      	mov	ip, r0
 8010a3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a3e:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 8010a42:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010a44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a48:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f8dc 3000 	ldr.w	r3, [ip]
 8010a50:	603b      	str	r3, [r7, #0]
 8010a52:	f004 fe35 	bl	80156c0 <geometry_msgs__msg__Pose__get_individual_type_description_source>
 8010a56:	4684      	mov	ip, r0
 8010a58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a5c:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 8010a60:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010a62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a66:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010a68:	4630      	mov	r0, r6
 8010a6a:	f8dc 3000 	ldr.w	r3, [ip]
 8010a6e:	603b      	str	r3, [r7, #0]
 8010a70:	f004 fe90 	bl	8015794 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>
 8010a74:	4684      	mov	ip, r0
 8010a76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a7a:	f104 0770 	add.w	r7, r4, #112	@ 0x70
 8010a7e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010a80:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a84:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010a86:	4630      	mov	r0, r6
 8010a88:	f8dc 3000 	ldr.w	r3, [ip]
 8010a8c:	603b      	str	r3, [r7, #0]
 8010a8e:	f004 feed 	bl	801586c <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8010a92:	4684      	mov	ip, r0
 8010a94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010a98:	f104 0794 	add.w	r7, r4, #148	@ 0x94
 8010a9c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010a9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010aa2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8010aaa:	603b      	str	r3, [r7, #0]
 8010aac:	f004 ff1a 	bl	80158e4 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 8010ab0:	4684      	mov	ip, r0
 8010ab2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ab6:	f104 07b8 	add.w	r7, r4, #184	@ 0xb8
 8010aba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010abc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ac0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	f8dc 3000 	ldr.w	r3, [ip]
 8010ac8:	603b      	str	r3, [r7, #0]
 8010aca:	f004 ff5b 	bl	8015984 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>
 8010ace:	4684      	mov	ip, r0
 8010ad0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ad4:	f104 07dc 	add.w	r7, r4, #220	@ 0xdc
 8010ad8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010ada:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ade:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010ae0:	4630      	mov	r0, r6
 8010ae2:	f8dc 3000 	ldr.w	r3, [ip]
 8010ae6:	603b      	str	r3, [r7, #0]
 8010ae8:	f004 ffaa 	bl	8015a40 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8010aec:	4684      	mov	ip, r0
 8010aee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010af2:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 8010af6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010af8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010afc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010afe:	4630      	mov	r0, r6
 8010b00:	f8dc 3000 	ldr.w	r3, [ip]
 8010b04:	603b      	str	r3, [r7, #0]
 8010b06:	f004 fcf9 	bl	80154fc <std_msgs__msg__Header__get_individual_type_description_source>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	4684      	mov	ip, r0
 8010b0e:	702b      	strb	r3, [r5, #0]
 8010b10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010b14:	f504 7492 	add.w	r4, r4, #292	@ 0x124
 8010b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010b20:	f8dc 3000 	ldr.w	r3, [ip]
 8010b24:	4802      	ldr	r0, [pc, #8]	@ (8010b30 <nav_msgs__msg__Odometry__get_type_description_sources+0x138>)
 8010b26:	6023      	str	r3, [r4, #0]
 8010b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	20010274 	.word	0x20010274
 8010b30:	0801ac38 	.word	0x0801ac38
 8010b34:	0801ac44 	.word	0x0801ac44
 8010b38:	2001010c 	.word	0x2001010c

08010b3c <nav_msgs__msg__Odometry__init>:
 8010b3c:	b3d8      	cbz	r0, 8010bb6 <nav_msgs__msg__Odometry__init+0x7a>
 8010b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b40:	4604      	mov	r4, r0
 8010b42:	f004 fd07 	bl	8015554 <std_msgs__msg__Header__init>
 8010b46:	b190      	cbz	r0, 8010b6e <nav_msgs__msg__Odometry__init+0x32>
 8010b48:	f104 0514 	add.w	r5, r4, #20
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f7fa fb09 	bl	800b164 <rosidl_runtime_c__String__init>
 8010b52:	b358      	cbz	r0, 8010bac <nav_msgs__msg__Odometry__init+0x70>
 8010b54:	f104 0620 	add.w	r6, r4, #32
 8010b58:	4630      	mov	r0, r6
 8010b5a:	f004 fe65 	bl	8015828 <geometry_msgs__msg__PoseWithCovariance__init>
 8010b5e:	b1b8      	cbz	r0, 8010b90 <nav_msgs__msg__Odometry__init+0x54>
 8010b60:	f504 77bc 	add.w	r7, r4, #376	@ 0x178
 8010b64:	4638      	mov	r0, r7
 8010b66:	f004 ff49 	bl	80159fc <geometry_msgs__msg__TwistWithCovariance__init>
 8010b6a:	b330      	cbz	r0, 8010bba <nav_msgs__msg__Odometry__init+0x7e>
 8010b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b6e:	4620      	mov	r0, r4
 8010b70:	f004 fd10 	bl	8015594 <std_msgs__msg__Header__fini>
 8010b74:	f104 0014 	add.w	r0, r4, #20
 8010b78:	f7fa fb0e 	bl	800b198 <rosidl_runtime_c__String__fini>
 8010b7c:	f104 0020 	add.w	r0, r4, #32
 8010b80:	f004 fe60 	bl	8015844 <geometry_msgs__msg__PoseWithCovariance__fini>
 8010b84:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8010b88:	f004 ff46 	bl	8015a18 <geometry_msgs__msg__TwistWithCovariance__fini>
 8010b8c:	2000      	movs	r0, #0
 8010b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b90:	4620      	mov	r0, r4
 8010b92:	f004 fcff 	bl	8015594 <std_msgs__msg__Header__fini>
 8010b96:	4628      	mov	r0, r5
 8010b98:	f7fa fafe 	bl	800b198 <rosidl_runtime_c__String__fini>
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	f004 fe51 	bl	8015844 <geometry_msgs__msg__PoseWithCovariance__fini>
 8010ba2:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8010ba6:	f004 ff37 	bl	8015a18 <geometry_msgs__msg__TwistWithCovariance__fini>
 8010baa:	e7ef      	b.n	8010b8c <nav_msgs__msg__Odometry__init+0x50>
 8010bac:	4620      	mov	r0, r4
 8010bae:	f004 fcf1 	bl	8015594 <std_msgs__msg__Header__fini>
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	e7e0      	b.n	8010b78 <nav_msgs__msg__Odometry__init+0x3c>
 8010bb6:	2000      	movs	r0, #0
 8010bb8:	4770      	bx	lr
 8010bba:	4620      	mov	r0, r4
 8010bbc:	f004 fcea 	bl	8015594 <std_msgs__msg__Header__fini>
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	f7fa fae9 	bl	800b198 <rosidl_runtime_c__String__fini>
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	f004 fe3c 	bl	8015844 <geometry_msgs__msg__PoseWithCovariance__fini>
 8010bcc:	4638      	mov	r0, r7
 8010bce:	f004 ff23 	bl	8015a18 <geometry_msgs__msg__TwistWithCovariance__fini>
 8010bd2:	e7db      	b.n	8010b8c <nav_msgs__msg__Odometry__init+0x50>

08010bd4 <nav_msgs__msg__Odometry__fini>:
 8010bd4:	b188      	cbz	r0, 8010bfa <nav_msgs__msg__Odometry__fini+0x26>
 8010bd6:	b510      	push	{r4, lr}
 8010bd8:	4604      	mov	r4, r0
 8010bda:	f004 fcdb 	bl	8015594 <std_msgs__msg__Header__fini>
 8010bde:	f104 0014 	add.w	r0, r4, #20
 8010be2:	f7fa fad9 	bl	800b198 <rosidl_runtime_c__String__fini>
 8010be6:	f104 0020 	add.w	r0, r4, #32
 8010bea:	f004 fe2b 	bl	8015844 <geometry_msgs__msg__PoseWithCovariance__fini>
 8010bee:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8010bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010bf6:	f004 bf0f 	b.w	8015a18 <geometry_msgs__msg__TwistWithCovariance__fini>
 8010bfa:	4770      	bx	lr

08010bfc <rcl_client_get_rmw_handle>:
 8010bfc:	b118      	cbz	r0, 8010c06 <rcl_client_get_rmw_handle+0xa>
 8010bfe:	6800      	ldr	r0, [r0, #0]
 8010c00:	b108      	cbz	r0, 8010c06 <rcl_client_get_rmw_handle+0xa>
 8010c02:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010c06:	4770      	bx	lr

08010c08 <rcl_send_request>:
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	d048      	beq.n	8010c9e <rcl_send_request+0x96>
 8010c0c:	b570      	push	{r4, r5, r6, lr}
 8010c0e:	4604      	mov	r4, r0
 8010c10:	6800      	ldr	r0, [r0, #0]
 8010c12:	b08a      	sub	sp, #40	@ 0x28
 8010c14:	b1c0      	cbz	r0, 8010c48 <rcl_send_request+0x40>
 8010c16:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8010c1a:	b1ab      	cbz	r3, 8010c48 <rcl_send_request+0x40>
 8010c1c:	460e      	mov	r6, r1
 8010c1e:	b1b9      	cbz	r1, 8010c50 <rcl_send_request+0x48>
 8010c20:	4615      	mov	r5, r2
 8010c22:	b1aa      	cbz	r2, 8010c50 <rcl_send_request+0x48>
 8010c24:	2105      	movs	r1, #5
 8010c26:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010c2a:	f002 fec9 	bl	80139c0 <__atomic_load_8>
 8010c2e:	6823      	ldr	r3, [r4, #0]
 8010c30:	e9c5 0100 	strd	r0, r1, [r5]
 8010c34:	462a      	mov	r2, r5
 8010c36:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010c3a:	4631      	mov	r1, r6
 8010c3c:	f004 f862 	bl	8014d04 <rmw_send_request>
 8010c40:	b148      	cbz	r0, 8010c56 <rcl_send_request+0x4e>
 8010c42:	2001      	movs	r0, #1
 8010c44:	b00a      	add	sp, #40	@ 0x28
 8010c46:	bd70      	pop	{r4, r5, r6, pc}
 8010c48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8010c4c:	b00a      	add	sp, #40	@ 0x28
 8010c4e:	bd70      	pop	{r4, r5, r6, pc}
 8010c50:	200b      	movs	r0, #11
 8010c52:	b00a      	add	sp, #40	@ 0x28
 8010c54:	bd70      	pop	{r4, r5, r6, pc}
 8010c56:	6820      	ldr	r0, [r4, #0]
 8010c58:	2305      	movs	r3, #5
 8010c5a:	9300      	str	r3, [sp, #0]
 8010c5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010c60:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010c64:	f002 ff18 	bl	8013a98 <__atomic_exchange_8>
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010c6e:	b1a2      	cbz	r2, 8010c9a <rcl_send_request+0x92>
 8010c70:	a905      	add	r1, sp, #20
 8010c72:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010c76:	f003 fc41 	bl	80144fc <rmw_get_gid_for_client>
 8010c7a:	4601      	mov	r1, r0
 8010c7c:	b990      	cbnz	r0, 8010ca4 <rcl_send_request+0x9c>
 8010c7e:	6822      	ldr	r2, [r4, #0]
 8010c80:	ab06      	add	r3, sp, #24
 8010c82:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 8010c86:	9302      	str	r3, [sp, #8]
 8010c88:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010c8c:	4632      	mov	r2, r6
 8010c8e:	e9cd 4500 	strd	r4, r5, [sp]
 8010c92:	f000 fe15 	bl	80118c0 <rcl_send_service_event_message>
 8010c96:	2800      	cmp	r0, #0
 8010c98:	d1d4      	bne.n	8010c44 <rcl_send_request+0x3c>
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	e7d2      	b.n	8010c44 <rcl_send_request+0x3c>
 8010c9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8010ca2:	4770      	bx	lr
 8010ca4:	f000 f87a 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8010ca8:	e7cc      	b.n	8010c44 <rcl_send_request+0x3c>
 8010caa:	bf00      	nop
 8010cac:	0000      	movs	r0, r0
	...

08010cb0 <rcl_take_response>:
 8010cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cb2:	468e      	mov	lr, r1
 8010cb4:	460c      	mov	r4, r1
 8010cb6:	4617      	mov	r7, r2
 8010cb8:	4605      	mov	r5, r0
 8010cba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010cbe:	b095      	sub	sp, #84	@ 0x54
 8010cc0:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8010cc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010cc8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010ccc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010cd0:	2d00      	cmp	r5, #0
 8010cd2:	d044      	beq.n	8010d5e <rcl_take_response+0xae>
 8010cd4:	682b      	ldr	r3, [r5, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d041      	beq.n	8010d5e <rcl_take_response+0xae>
 8010cda:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d03d      	beq.n	8010d5e <rcl_take_response+0xae>
 8010ce2:	2f00      	cmp	r7, #0
 8010ce4:	d03e      	beq.n	8010d64 <rcl_take_response+0xb4>
 8010ce6:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8010d80 <rcl_take_response+0xd0>
 8010cea:	2300      	movs	r3, #0
 8010cec:	f88d 3013 	strb.w	r3, [sp, #19]
 8010cf0:	463a      	mov	r2, r7
 8010cf2:	f10d 0313 	add.w	r3, sp, #19
 8010cf6:	a90a      	add	r1, sp, #40	@ 0x28
 8010cf8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010cfc:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010d00:	f004 f900 	bl	8014f04 <rmw_take_response>
 8010d04:	4606      	mov	r6, r0
 8010d06:	bb78      	cbnz	r0, 8010d68 <rcl_take_response+0xb8>
 8010d08:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8010d0c:	b373      	cbz	r3, 8010d6c <rcl_take_response+0xbc>
 8010d0e:	682b      	ldr	r3, [r5, #0]
 8010d10:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010d14:	b1aa      	cbz	r2, 8010d42 <rcl_take_response+0x92>
 8010d16:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010d1a:	a905      	add	r1, sp, #20
 8010d1c:	f003 fbee 	bl	80144fc <rmw_get_gid_for_client>
 8010d20:	bb38      	cbnz	r0, 8010d72 <rcl_take_response+0xc2>
 8010d22:	682b      	ldr	r3, [r5, #0]
 8010d24:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8010d28:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 8010d2c:	ab06      	add	r3, sp, #24
 8010d2e:	ed8d 7b00 	vstr	d7, [sp]
 8010d32:	463a      	mov	r2, r7
 8010d34:	9302      	str	r3, [sp, #8]
 8010d36:	2103      	movs	r1, #3
 8010d38:	f000 fdc2 	bl	80118c0 <rcl_send_service_event_message>
 8010d3c:	2800      	cmp	r0, #0
 8010d3e:	bf18      	it	ne
 8010d40:	4606      	movne	r6, r0
 8010d42:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 8010d46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d4a:	46a4      	mov	ip, r4
 8010d4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d50:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010d54:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d58:	4630      	mov	r0, r6
 8010d5a:	b015      	add	sp, #84	@ 0x54
 8010d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d5e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8010d62:	e7ee      	b.n	8010d42 <rcl_take_response+0x92>
 8010d64:	260b      	movs	r6, #11
 8010d66:	e7ec      	b.n	8010d42 <rcl_take_response+0x92>
 8010d68:	2601      	movs	r6, #1
 8010d6a:	e7ea      	b.n	8010d42 <rcl_take_response+0x92>
 8010d6c:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8010d70:	e7e7      	b.n	8010d42 <rcl_take_response+0x92>
 8010d72:	f000 f813 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8010d76:	4606      	mov	r6, r0
 8010d78:	e7e3      	b.n	8010d42 <rcl_take_response+0x92>
 8010d7a:	bf00      	nop
 8010d7c:	f3af 8000 	nop.w
	...

08010d88 <rcl_client_is_valid>:
 8010d88:	b130      	cbz	r0, 8010d98 <rcl_client_is_valid+0x10>
 8010d8a:	6800      	ldr	r0, [r0, #0]
 8010d8c:	b120      	cbz	r0, 8010d98 <rcl_client_is_valid+0x10>
 8010d8e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010d92:	3800      	subs	r0, #0
 8010d94:	bf18      	it	ne
 8010d96:	2001      	movne	r0, #1
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop

08010d9c <rcl_convert_rmw_ret_to_rcl_ret>:
 8010d9c:	280b      	cmp	r0, #11
 8010d9e:	dc0d      	bgt.n	8010dbc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010da0:	2800      	cmp	r0, #0
 8010da2:	db09      	blt.n	8010db8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010da4:	280b      	cmp	r0, #11
 8010da6:	d807      	bhi.n	8010db8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010da8:	e8df f000 	tbb	[pc, r0]
 8010dac:	07060607 	.word	0x07060607
 8010db0:	06060606 	.word	0x06060606
 8010db4:	07070606 	.word	0x07070606
 8010db8:	2001      	movs	r0, #1
 8010dba:	4770      	bx	lr
 8010dbc:	28cb      	cmp	r0, #203	@ 0xcb
 8010dbe:	bf14      	ite	ne
 8010dc0:	2001      	movne	r0, #1
 8010dc2:	20cb      	moveq	r0, #203	@ 0xcb
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop

08010dc8 <rcl_get_zero_initialized_context>:
 8010dc8:	2200      	movs	r2, #0
 8010dca:	e9c0 2200 	strd	r2, r2, [r0]
 8010dce:	4770      	bx	lr

08010dd0 <rcl_context_is_valid>:
 8010dd0:	b118      	cbz	r0, 8010dda <rcl_context_is_valid+0xa>
 8010dd2:	6840      	ldr	r0, [r0, #4]
 8010dd4:	3800      	subs	r0, #0
 8010dd6:	bf18      	it	ne
 8010dd8:	2001      	movne	r0, #1
 8010dda:	4770      	bx	lr

08010ddc <__cleanup_context>:
 8010ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010de0:	4606      	mov	r6, r0
 8010de2:	6800      	ldr	r0, [r0, #0]
 8010de4:	2300      	movs	r3, #0
 8010de6:	6073      	str	r3, [r6, #4]
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d042      	beq.n	8010e72 <__cleanup_context+0x96>
 8010dec:	6943      	ldr	r3, [r0, #20]
 8010dee:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010df2:	6907      	ldr	r7, [r0, #16]
 8010df4:	b39b      	cbz	r3, 8010e5e <__cleanup_context+0x82>
 8010df6:	3014      	adds	r0, #20
 8010df8:	f000 f9b2 	bl	8011160 <rcl_init_options_fini>
 8010dfc:	4680      	mov	r8, r0
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d144      	bne.n	8010e8c <__cleanup_context+0xb0>
 8010e02:	6830      	ldr	r0, [r6, #0]
 8010e04:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010e06:	b123      	cbz	r3, 8010e12 <__cleanup_context+0x36>
 8010e08:	3028      	adds	r0, #40	@ 0x28
 8010e0a:	f003 fdbf 	bl	801498c <rmw_context_fini>
 8010e0e:	bbb8      	cbnz	r0, 8010e80 <__cleanup_context+0xa4>
 8010e10:	6830      	ldr	r0, [r6, #0]
 8010e12:	6a03      	ldr	r3, [r0, #32]
 8010e14:	b1db      	cbz	r3, 8010e4e <__cleanup_context+0x72>
 8010e16:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8010e1a:	2a01      	cmp	r2, #1
 8010e1c:	f17c 0100 	sbcs.w	r1, ip, #0
 8010e20:	db11      	blt.n	8010e46 <__cleanup_context+0x6a>
 8010e22:	2400      	movs	r4, #0
 8010e24:	4625      	mov	r5, r4
 8010e26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010e2a:	4639      	mov	r1, r7
 8010e2c:	b1c8      	cbz	r0, 8010e62 <__cleanup_context+0x86>
 8010e2e:	47c8      	blx	r9
 8010e30:	6833      	ldr	r3, [r6, #0]
 8010e32:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010e36:	3401      	adds	r4, #1
 8010e38:	f145 0500 	adc.w	r5, r5, #0
 8010e3c:	4294      	cmp	r4, r2
 8010e3e:	eb75 010c 	sbcs.w	r1, r5, ip
 8010e42:	6a1b      	ldr	r3, [r3, #32]
 8010e44:	dbef      	blt.n	8010e26 <__cleanup_context+0x4a>
 8010e46:	4618      	mov	r0, r3
 8010e48:	4639      	mov	r1, r7
 8010e4a:	47c8      	blx	r9
 8010e4c:	6830      	ldr	r0, [r6, #0]
 8010e4e:	4639      	mov	r1, r7
 8010e50:	47c8      	blx	r9
 8010e52:	2300      	movs	r3, #0
 8010e54:	e9c6 3300 	strd	r3, r3, [r6]
 8010e58:	4640      	mov	r0, r8
 8010e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e5e:	4698      	mov	r8, r3
 8010e60:	e7d0      	b.n	8010e04 <__cleanup_context+0x28>
 8010e62:	3401      	adds	r4, #1
 8010e64:	f145 0500 	adc.w	r5, r5, #0
 8010e68:	4294      	cmp	r4, r2
 8010e6a:	eb75 010c 	sbcs.w	r1, r5, ip
 8010e6e:	dbda      	blt.n	8010e26 <__cleanup_context+0x4a>
 8010e70:	e7e9      	b.n	8010e46 <__cleanup_context+0x6a>
 8010e72:	4680      	mov	r8, r0
 8010e74:	2300      	movs	r3, #0
 8010e76:	e9c6 3300 	strd	r3, r3, [r6]
 8010e7a:	4640      	mov	r0, r8
 8010e7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e80:	f1b8 0f00 	cmp.w	r8, #0
 8010e84:	d005      	beq.n	8010e92 <__cleanup_context+0xb6>
 8010e86:	f7f9 fb43 	bl	800a510 <rcutils_reset_error>
 8010e8a:	e7c1      	b.n	8010e10 <__cleanup_context+0x34>
 8010e8c:	f7f9 fb40 	bl	800a510 <rcutils_reset_error>
 8010e90:	e7b7      	b.n	8010e02 <__cleanup_context+0x26>
 8010e92:	f7ff ff83 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8010e96:	4680      	mov	r8, r0
 8010e98:	e7f5      	b.n	8010e86 <__cleanup_context+0xaa>
 8010e9a:	bf00      	nop

08010e9c <rcl_init>:
 8010e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea0:	1e04      	subs	r4, r0, #0
 8010ea2:	b0a5      	sub	sp, #148	@ 0x94
 8010ea4:	460d      	mov	r5, r1
 8010ea6:	4617      	mov	r7, r2
 8010ea8:	461e      	mov	r6, r3
 8010eaa:	dd13      	ble.n	8010ed4 <rcl_init+0x38>
 8010eac:	b161      	cbz	r1, 8010ec8 <rcl_init+0x2c>
 8010eae:	f1a1 0e04 	sub.w	lr, r1, #4
 8010eb2:	f04f 0c00 	mov.w	ip, #0
 8010eb6:	e001      	b.n	8010ebc <rcl_init+0x20>
 8010eb8:	4564      	cmp	r4, ip
 8010eba:	d00d      	beq.n	8010ed8 <rcl_init+0x3c>
 8010ebc:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8010ec0:	f10c 0c01 	add.w	ip, ip, #1
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	d1f7      	bne.n	8010eb8 <rcl_init+0x1c>
 8010ec8:	f04f 080b 	mov.w	r8, #11
 8010ecc:	4640      	mov	r0, r8
 8010ece:	b025      	add	sp, #148	@ 0x94
 8010ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed4:	2900      	cmp	r1, #0
 8010ed6:	d1f7      	bne.n	8010ec8 <rcl_init+0x2c>
 8010ed8:	2f00      	cmp	r7, #0
 8010eda:	d0f5      	beq.n	8010ec8 <rcl_init+0x2c>
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d0f2      	beq.n	8010ec8 <rcl_init+0x2c>
 8010ee2:	469c      	mov	ip, r3
 8010ee4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ee8:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8010eec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010ef0:	f8dc 3000 	ldr.w	r3, [ip]
 8010ef4:	f8ce 3000 	str.w	r3, [lr]
 8010ef8:	a81f      	add	r0, sp, #124	@ 0x7c
 8010efa:	f7f9 fadd 	bl	800a4b8 <rcutils_allocator_is_valid>
 8010efe:	2800      	cmp	r0, #0
 8010f00:	d0e2      	beq.n	8010ec8 <rcl_init+0x2c>
 8010f02:	2e00      	cmp	r6, #0
 8010f04:	d0e0      	beq.n	8010ec8 <rcl_init+0x2c>
 8010f06:	6833      	ldr	r3, [r6, #0]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d173      	bne.n	8010ff4 <rcl_init+0x158>
 8010f0c:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8010f10:	2198      	movs	r1, #152	@ 0x98
 8010f12:	2001      	movs	r0, #1
 8010f14:	4798      	blx	r3
 8010f16:	4680      	mov	r8, r0
 8010f18:	6030      	str	r0, [r6, #0]
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	f000 80ac 	beq.w	8011078 <rcl_init+0x1dc>
 8010f20:	a802      	add	r0, sp, #8
 8010f22:	f003 f8a5 	bl	8014070 <rmw_get_zero_initialized_context>
 8010f26:	a902      	add	r1, sp, #8
 8010f28:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8010f2c:	2270      	movs	r2, #112	@ 0x70
 8010f2e:	f007 fc24 	bl	801877a <memcpy>
 8010f32:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8010f36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010f3a:	f8d6 8000 	ldr.w	r8, [r6]
 8010f3e:	46c4      	mov	ip, r8
 8010f40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f44:	f8de 3000 	ldr.w	r3, [lr]
 8010f48:	f8cc 3000 	str.w	r3, [ip]
 8010f4c:	f108 0114 	add.w	r1, r8, #20
 8010f50:	4638      	mov	r0, r7
 8010f52:	f000 f92f 	bl	80111b4 <rcl_init_options_copy>
 8010f56:	4680      	mov	r8, r0
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d147      	bne.n	8010fec <rcl_init+0x150>
 8010f5c:	f8d6 9000 	ldr.w	r9, [r6]
 8010f60:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 8010f64:	f8c9 0020 	str.w	r0, [r9, #32]
 8010f68:	f8c9 4018 	str.w	r4, [r9, #24]
 8010f6c:	f8c9 a01c 	str.w	sl, [r9, #28]
 8010f70:	2c00      	cmp	r4, #0
 8010f72:	d047      	beq.n	8011004 <rcl_init+0x168>
 8010f74:	2d00      	cmp	r5, #0
 8010f76:	d045      	beq.n	8011004 <rcl_init+0x168>
 8010f78:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8010f7c:	2104      	movs	r1, #4
 8010f7e:	4620      	mov	r0, r4
 8010f80:	4798      	blx	r3
 8010f82:	f8c9 0020 	str.w	r0, [r9, #32]
 8010f86:	f8d6 9000 	ldr.w	r9, [r6]
 8010f8a:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8010f8e:	f1bb 0f00 	cmp.w	fp, #0
 8010f92:	d029      	beq.n	8010fe8 <rcl_init+0x14c>
 8010f94:	2c01      	cmp	r4, #1
 8010f96:	f17a 0300 	sbcs.w	r3, sl, #0
 8010f9a:	db33      	blt.n	8011004 <rcl_init+0x168>
 8010f9c:	f04f 0800 	mov.w	r8, #0
 8010fa0:	3d04      	subs	r5, #4
 8010fa2:	46c1      	mov	r9, r8
 8010fa4:	e00d      	b.n	8010fc2 <rcl_init+0x126>
 8010fa6:	6829      	ldr	r1, [r5, #0]
 8010fa8:	f007 fbe7 	bl	801877a <memcpy>
 8010fac:	f118 0801 	adds.w	r8, r8, #1
 8010fb0:	f149 0900 	adc.w	r9, r9, #0
 8010fb4:	45ca      	cmp	sl, r9
 8010fb6:	bf08      	it	eq
 8010fb8:	4544      	cmpeq	r4, r8
 8010fba:	d021      	beq.n	8011000 <rcl_init+0x164>
 8010fbc:	6833      	ldr	r3, [r6, #0]
 8010fbe:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8010fc2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010fc6:	f7ef f983 	bl	80002d0 <strlen>
 8010fca:	1c42      	adds	r2, r0, #1
 8010fcc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010fce:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8010fd0:	9201      	str	r2, [sp, #4]
 8010fd2:	4610      	mov	r0, r2
 8010fd4:	4798      	blx	r3
 8010fd6:	6833      	ldr	r3, [r6, #0]
 8010fd8:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 8010fdc:	6a1b      	ldr	r3, [r3, #32]
 8010fde:	9a01      	ldr	r2, [sp, #4]
 8010fe0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	d1de      	bne.n	8010fa6 <rcl_init+0x10a>
 8010fe8:	f04f 080a 	mov.w	r8, #10
 8010fec:	4630      	mov	r0, r6
 8010fee:	f7ff fef5 	bl	8010ddc <__cleanup_context>
 8010ff2:	e76b      	b.n	8010ecc <rcl_init+0x30>
 8010ff4:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8010ff8:	4640      	mov	r0, r8
 8010ffa:	b025      	add	sp, #148	@ 0x94
 8010ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011000:	f8d6 9000 	ldr.w	r9, [r6]
 8011004:	4a26      	ldr	r2, [pc, #152]	@ (80110a0 <rcl_init+0x204>)
 8011006:	6813      	ldr	r3, [r2, #0]
 8011008:	3301      	adds	r3, #1
 801100a:	d030      	beq.n	801106e <rcl_init+0x1d2>
 801100c:	461d      	mov	r5, r3
 801100e:	2000      	movs	r0, #0
 8011010:	4619      	mov	r1, r3
 8011012:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8011016:	6073      	str	r3, [r6, #4]
 8011018:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801101a:	6011      	str	r1, [r2, #0]
 801101c:	3301      	adds	r3, #1
 801101e:	e9c4 5006 	strd	r5, r0, [r4, #24]
 8011022:	d033      	beq.n	801108c <rcl_init+0x1f0>
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801102a:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 801102e:	b333      	cbz	r3, 801107e <rcl_init+0x1e2>
 8011030:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011032:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8011036:	b953      	cbnz	r3, 801104e <rcl_init+0x1b2>
 8011038:	2801      	cmp	r0, #1
 801103a:	d008      	beq.n	801104e <rcl_init+0x1b2>
 801103c:	a91f      	add	r1, sp, #124	@ 0x7c
 801103e:	4628      	mov	r0, r5
 8011040:	f005 fe4e 	bl	8016ce0 <rcl_get_discovery_static_peers>
 8011044:	4680      	mov	r8, r0
 8011046:	2800      	cmp	r0, #0
 8011048:	d1d0      	bne.n	8010fec <rcl_init+0x150>
 801104a:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 801104e:	f005 fe3d 	bl	8016ccc <rcl_automatic_discovery_range_to_string>
 8011052:	6831      	ldr	r1, [r6, #0]
 8011054:	6948      	ldr	r0, [r1, #20]
 8011056:	3128      	adds	r1, #40	@ 0x28
 8011058:	3018      	adds	r0, #24
 801105a:	f003 fb63 	bl	8014724 <rmw_init>
 801105e:	4680      	mov	r8, r0
 8011060:	2800      	cmp	r0, #0
 8011062:	f43f af33 	beq.w	8010ecc <rcl_init+0x30>
 8011066:	f7ff fe99 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 801106a:	4680      	mov	r8, r0
 801106c:	e7be      	b.n	8010fec <rcl_init+0x150>
 801106e:	2101      	movs	r1, #1
 8011070:	4618      	mov	r0, r3
 8011072:	460d      	mov	r5, r1
 8011074:	460b      	mov	r3, r1
 8011076:	e7cc      	b.n	8011012 <rcl_init+0x176>
 8011078:	f04f 080a 	mov.w	r8, #10
 801107c:	e726      	b.n	8010ecc <rcl_init+0x30>
 801107e:	4628      	mov	r0, r5
 8011080:	f005 fde2 	bl	8016c48 <rcl_get_automatic_discovery_range>
 8011084:	4680      	mov	r8, r0
 8011086:	2800      	cmp	r0, #0
 8011088:	d0d2      	beq.n	8011030 <rcl_init+0x194>
 801108a:	e7af      	b.n	8010fec <rcl_init+0x150>
 801108c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011090:	f005 fe90 	bl	8016db4 <rcl_get_default_domain_id>
 8011094:	4680      	mov	r8, r0
 8011096:	2800      	cmp	r0, #0
 8011098:	d1a8      	bne.n	8010fec <rcl_init+0x150>
 801109a:	6833      	ldr	r3, [r6, #0]
 801109c:	695c      	ldr	r4, [r3, #20]
 801109e:	e7c1      	b.n	8011024 <rcl_init+0x188>
 80110a0:	20010278 	.word	0x20010278

080110a4 <rcl_get_zero_initialized_init_options>:
 80110a4:	2000      	movs	r0, #0
 80110a6:	4770      	bx	lr

080110a8 <rcl_init_options_init>:
 80110a8:	b084      	sub	sp, #16
 80110aa:	b570      	push	{r4, r5, r6, lr}
 80110ac:	b09e      	sub	sp, #120	@ 0x78
 80110ae:	ad23      	add	r5, sp, #140	@ 0x8c
 80110b0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80110b4:	2800      	cmp	r0, #0
 80110b6:	d046      	beq.n	8011146 <rcl_init_options_init+0x9e>
 80110b8:	6803      	ldr	r3, [r0, #0]
 80110ba:	4604      	mov	r4, r0
 80110bc:	b133      	cbz	r3, 80110cc <rcl_init_options_init+0x24>
 80110be:	2564      	movs	r5, #100	@ 0x64
 80110c0:	4628      	mov	r0, r5
 80110c2:	b01e      	add	sp, #120	@ 0x78
 80110c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80110c8:	b004      	add	sp, #16
 80110ca:	4770      	bx	lr
 80110cc:	4628      	mov	r0, r5
 80110ce:	f7f9 f9f3 	bl	800a4b8 <rcutils_allocator_is_valid>
 80110d2:	2800      	cmp	r0, #0
 80110d4:	d037      	beq.n	8011146 <rcl_init_options_init+0x9e>
 80110d6:	46ae      	mov	lr, r5
 80110d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110dc:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80110e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110e4:	f8de 3000 	ldr.w	r3, [lr]
 80110e8:	f8cc 3000 	str.w	r3, [ip]
 80110ec:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80110ee:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80110f0:	2070      	movs	r0, #112	@ 0x70
 80110f2:	4798      	blx	r3
 80110f4:	4606      	mov	r6, r0
 80110f6:	6020      	str	r0, [r4, #0]
 80110f8:	b338      	cbz	r0, 801114a <rcl_init_options_init+0xa2>
 80110fa:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80110fe:	4686      	mov	lr, r0
 8011100:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011104:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011108:	f8dc 3000 	ldr.w	r3, [ip]
 801110c:	f8ce 3000 	str.w	r3, [lr]
 8011110:	a802      	add	r0, sp, #8
 8011112:	f002 ffb7 	bl	8014084 <rmw_get_zero_initialized_init_options>
 8011116:	2258      	movs	r2, #88	@ 0x58
 8011118:	a902      	add	r1, sp, #8
 801111a:	f106 0018 	add.w	r0, r6, #24
 801111e:	f007 fb2c 	bl	801877a <memcpy>
 8011122:	ab26      	add	r3, sp, #152	@ 0x98
 8011124:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011128:	6826      	ldr	r6, [r4, #0]
 801112a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801112e:	f106 0018 	add.w	r0, r6, #24
 8011132:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8011136:	f003 fa05 	bl	8014544 <rmw_init_options_init>
 801113a:	4605      	mov	r5, r0
 801113c:	b938      	cbnz	r0, 801114e <rcl_init_options_init+0xa6>
 801113e:	6823      	ldr	r3, [r4, #0]
 8011140:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 8011144:	e7bc      	b.n	80110c0 <rcl_init_options_init+0x18>
 8011146:	250b      	movs	r5, #11
 8011148:	e7ba      	b.n	80110c0 <rcl_init_options_init+0x18>
 801114a:	250a      	movs	r5, #10
 801114c:	e7b8      	b.n	80110c0 <rcl_init_options_init+0x18>
 801114e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8011150:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8011152:	6820      	ldr	r0, [r4, #0]
 8011154:	4798      	blx	r3
 8011156:	4628      	mov	r0, r5
 8011158:	f7ff fe20 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 801115c:	4605      	mov	r5, r0
 801115e:	e7af      	b.n	80110c0 <rcl_init_options_init+0x18>

08011160 <rcl_init_options_fini>:
 8011160:	b530      	push	{r4, r5, lr}
 8011162:	b087      	sub	sp, #28
 8011164:	b1f0      	cbz	r0, 80111a4 <rcl_init_options_fini+0x44>
 8011166:	6803      	ldr	r3, [r0, #0]
 8011168:	4604      	mov	r4, r0
 801116a:	b1db      	cbz	r3, 80111a4 <rcl_init_options_fini+0x44>
 801116c:	469c      	mov	ip, r3
 801116e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011172:	f10d 0e04 	add.w	lr, sp, #4
 8011176:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801117a:	f8dc 3000 	ldr.w	r3, [ip]
 801117e:	f8ce 3000 	str.w	r3, [lr]
 8011182:	a801      	add	r0, sp, #4
 8011184:	f7f9 f998 	bl	800a4b8 <rcutils_allocator_is_valid>
 8011188:	b160      	cbz	r0, 80111a4 <rcl_init_options_fini+0x44>
 801118a:	6820      	ldr	r0, [r4, #0]
 801118c:	3018      	adds	r0, #24
 801118e:	f003 fa8b 	bl	80146a8 <rmw_init_options_fini>
 8011192:	4605      	mov	r5, r0
 8011194:	b950      	cbnz	r0, 80111ac <rcl_init_options_fini+0x4c>
 8011196:	6820      	ldr	r0, [r4, #0]
 8011198:	9b02      	ldr	r3, [sp, #8]
 801119a:	9905      	ldr	r1, [sp, #20]
 801119c:	4798      	blx	r3
 801119e:	4628      	mov	r0, r5
 80111a0:	b007      	add	sp, #28
 80111a2:	bd30      	pop	{r4, r5, pc}
 80111a4:	250b      	movs	r5, #11
 80111a6:	4628      	mov	r0, r5
 80111a8:	b007      	add	sp, #28
 80111aa:	bd30      	pop	{r4, r5, pc}
 80111ac:	f7ff fdf6 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 80111b0:	4605      	mov	r5, r0
 80111b2:	e7f8      	b.n	80111a6 <rcl_init_options_fini+0x46>

080111b4 <rcl_init_options_copy>:
 80111b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111b6:	b09d      	sub	sp, #116	@ 0x74
 80111b8:	2800      	cmp	r0, #0
 80111ba:	d04a      	beq.n	8011252 <rcl_init_options_copy+0x9e>
 80111bc:	4604      	mov	r4, r0
 80111be:	6800      	ldr	r0, [r0, #0]
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d046      	beq.n	8011252 <rcl_init_options_copy+0x9e>
 80111c4:	460d      	mov	r5, r1
 80111c6:	f7f9 f977 	bl	800a4b8 <rcutils_allocator_is_valid>
 80111ca:	2800      	cmp	r0, #0
 80111cc:	d041      	beq.n	8011252 <rcl_init_options_copy+0x9e>
 80111ce:	2d00      	cmp	r5, #0
 80111d0:	d03f      	beq.n	8011252 <rcl_init_options_copy+0x9e>
 80111d2:	682b      	ldr	r3, [r5, #0]
 80111d4:	b11b      	cbz	r3, 80111de <rcl_init_options_copy+0x2a>
 80111d6:	2464      	movs	r4, #100	@ 0x64
 80111d8:	4620      	mov	r0, r4
 80111da:	b01d      	add	sp, #116	@ 0x74
 80111dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111de:	6826      	ldr	r6, [r4, #0]
 80111e0:	46b6      	mov	lr, r6
 80111e2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80111e6:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80111ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80111ee:	f8de 3000 	ldr.w	r3, [lr]
 80111f2:	6837      	ldr	r7, [r6, #0]
 80111f4:	f8cc 3000 	str.w	r3, [ip]
 80111f8:	4619      	mov	r1, r3
 80111fa:	2070      	movs	r0, #112	@ 0x70
 80111fc:	47b8      	blx	r7
 80111fe:	4606      	mov	r6, r0
 8011200:	6028      	str	r0, [r5, #0]
 8011202:	b350      	cbz	r0, 801125a <rcl_init_options_copy+0xa6>
 8011204:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8011208:	4686      	mov	lr, r0
 801120a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801120e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011212:	f8dc 3000 	ldr.w	r3, [ip]
 8011216:	f8ce 3000 	str.w	r3, [lr]
 801121a:	4668      	mov	r0, sp
 801121c:	f002 ff32 	bl	8014084 <rmw_get_zero_initialized_init_options>
 8011220:	2258      	movs	r2, #88	@ 0x58
 8011222:	4669      	mov	r1, sp
 8011224:	f106 0018 	add.w	r0, r6, #24
 8011228:	f007 faa7 	bl	801877a <memcpy>
 801122c:	6820      	ldr	r0, [r4, #0]
 801122e:	6829      	ldr	r1, [r5, #0]
 8011230:	3018      	adds	r0, #24
 8011232:	3118      	adds	r1, #24
 8011234:	f003 f9e8 	bl	8014608 <rmw_init_options_copy>
 8011238:	4604      	mov	r4, r0
 801123a:	2800      	cmp	r0, #0
 801123c:	d0cc      	beq.n	80111d8 <rcl_init_options_copy+0x24>
 801123e:	f7f9 f94f 	bl	800a4e0 <rcutils_get_error_string>
 8011242:	f7f9 f965 	bl	800a510 <rcutils_reset_error>
 8011246:	4628      	mov	r0, r5
 8011248:	f7ff ff8a 	bl	8011160 <rcl_init_options_fini>
 801124c:	b138      	cbz	r0, 801125e <rcl_init_options_copy+0xaa>
 801124e:	4604      	mov	r4, r0
 8011250:	e7c2      	b.n	80111d8 <rcl_init_options_copy+0x24>
 8011252:	240b      	movs	r4, #11
 8011254:	4620      	mov	r0, r4
 8011256:	b01d      	add	sp, #116	@ 0x74
 8011258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801125a:	240a      	movs	r4, #10
 801125c:	e7bc      	b.n	80111d8 <rcl_init_options_copy+0x24>
 801125e:	4620      	mov	r0, r4
 8011260:	b01d      	add	sp, #116	@ 0x74
 8011262:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011266:	f7ff bd99 	b.w	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 801126a:	bf00      	nop

0801126c <rcl_get_zero_initialized_node>:
 801126c:	4a03      	ldr	r2, [pc, #12]	@ (801127c <rcl_get_zero_initialized_node+0x10>)
 801126e:	4603      	mov	r3, r0
 8011270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011274:	e883 0003 	stmia.w	r3, {r0, r1}
 8011278:	4618      	mov	r0, r3
 801127a:	4770      	bx	lr
 801127c:	0801ac8c 	.word	0x0801ac8c

08011280 <rcl_node_init>:
 8011280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011284:	b0ab      	sub	sp, #172	@ 0xac
 8011286:	4604      	mov	r4, r0
 8011288:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 801128a:	a825      	add	r0, sp, #148	@ 0x94
 801128c:	4689      	mov	r9, r1
 801128e:	4690      	mov	r8, r2
 8011290:	461f      	mov	r7, r3
 8011292:	f006 f801 	bl	8017298 <rcl_guard_condition_get_default_options>
 8011296:	2d00      	cmp	r5, #0
 8011298:	f000 80d8 	beq.w	801144c <rcl_node_init+0x1cc>
 801129c:	4628      	mov	r0, r5
 801129e:	f7f9 f90b 	bl	800a4b8 <rcutils_allocator_is_valid>
 80112a2:	2800      	cmp	r0, #0
 80112a4:	f000 80d2 	beq.w	801144c <rcl_node_init+0x1cc>
 80112a8:	f1b9 0f00 	cmp.w	r9, #0
 80112ac:	f000 80ce 	beq.w	801144c <rcl_node_init+0x1cc>
 80112b0:	f1b8 0f00 	cmp.w	r8, #0
 80112b4:	f000 80ca 	beq.w	801144c <rcl_node_init+0x1cc>
 80112b8:	2c00      	cmp	r4, #0
 80112ba:	f000 80c7 	beq.w	801144c <rcl_node_init+0x1cc>
 80112be:	6866      	ldr	r6, [r4, #4]
 80112c0:	2e00      	cmp	r6, #0
 80112c2:	f040 80ca 	bne.w	801145a <rcl_node_init+0x1da>
 80112c6:	2f00      	cmp	r7, #0
 80112c8:	f000 80c0 	beq.w	801144c <rcl_node_init+0x1cc>
 80112cc:	4638      	mov	r0, r7
 80112ce:	f7ff fd7f 	bl	8010dd0 <rcl_context_is_valid>
 80112d2:	2800      	cmp	r0, #0
 80112d4:	f000 80bf 	beq.w	8011456 <rcl_node_init+0x1d6>
 80112d8:	4632      	mov	r2, r6
 80112da:	a924      	add	r1, sp, #144	@ 0x90
 80112dc:	4648      	mov	r0, r9
 80112de:	9624      	str	r6, [sp, #144]	@ 0x90
 80112e0:	f003 f84c 	bl	801437c <rmw_validate_node_name>
 80112e4:	4606      	mov	r6, r0
 80112e6:	2800      	cmp	r0, #0
 80112e8:	f040 80b1 	bne.w	801144e <rcl_node_init+0x1ce>
 80112ec:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80112ee:	2800      	cmp	r0, #0
 80112f0:	f040 8104 	bne.w	80114fc <rcl_node_init+0x27c>
 80112f4:	f898 3000 	ldrb.w	r3, [r8]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f000 80f0 	beq.w	80114de <rcl_node_init+0x25e>
 80112fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8011300:	f000 80b0 	beq.w	8011464 <rcl_node_init+0x1e4>
 8011304:	4b85      	ldr	r3, [pc, #532]	@ (801151c <rcl_node_init+0x29c>)
 8011306:	f8cd 800c 	str.w	r8, [sp, #12]
 801130a:	9302      	str	r3, [sp, #8]
 801130c:	692b      	ldr	r3, [r5, #16]
 801130e:	9300      	str	r3, [sp, #0]
 8011310:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011314:	9301      	str	r3, [sp, #4]
 8011316:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801131a:	f002 fc0f 	bl	8013b3c <rcutils_format_string_limit>
 801131e:	4680      	mov	r8, r0
 8011320:	f1b8 0f00 	cmp.w	r8, #0
 8011324:	f000 80e8 	beq.w	80114f8 <rcl_node_init+0x278>
 8011328:	2200      	movs	r2, #0
 801132a:	a924      	add	r1, sp, #144	@ 0x90
 801132c:	4640      	mov	r0, r8
 801132e:	9224      	str	r2, [sp, #144]	@ 0x90
 8011330:	f003 f806 	bl	8014340 <rmw_validate_namespace>
 8011334:	4606      	mov	r6, r0
 8011336:	2800      	cmp	r0, #0
 8011338:	f040 80a4 	bne.w	8011484 <rcl_node_init+0x204>
 801133c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801133e:	2800      	cmp	r0, #0
 8011340:	f040 809d 	bne.w	801147e <rcl_node_init+0x1fe>
 8011344:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8011348:	2178      	movs	r1, #120	@ 0x78
 801134a:	2001      	movs	r0, #1
 801134c:	4798      	blx	r3
 801134e:	4606      	mov	r6, r0
 8011350:	6060      	str	r0, [r4, #4]
 8011352:	2800      	cmp	r0, #0
 8011354:	f000 80d6 	beq.w	8011504 <rcl_node_init+0x284>
 8011358:	a80a      	add	r0, sp, #40	@ 0x28
 801135a:	f000 f92f 	bl	80115bc <rcl_node_get_default_options>
 801135e:	a90a      	add	r1, sp, #40	@ 0x28
 8011360:	4630      	mov	r0, r6
 8011362:	2268      	movs	r2, #104	@ 0x68
 8011364:	f007 fa09 	bl	801877a <memcpy>
 8011368:	6861      	ldr	r1, [r4, #4]
 801136a:	6027      	str	r7, [r4, #0]
 801136c:	4628      	mov	r0, r5
 801136e:	f000 f933 	bl	80115d8 <rcl_node_options_copy>
 8011372:	4606      	mov	r6, r0
 8011374:	2800      	cmp	r0, #0
 8011376:	f040 8085 	bne.w	8011484 <rcl_node_init+0x204>
 801137a:	4640      	mov	r0, r8
 801137c:	f7ee ffa8 	bl	80002d0 <strlen>
 8011380:	eb08 0300 	add.w	r3, r8, r0
 8011384:	6866      	ldr	r6, [r4, #4]
 8011386:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801138a:	e9cd 8903 	strd	r8, r9, [sp, #12]
 801138e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011390:	bf0c      	ite	eq
 8011392:	4b63      	ldreq	r3, [pc, #396]	@ (8011520 <rcl_node_init+0x2a0>)
 8011394:	4b63      	ldrne	r3, [pc, #396]	@ (8011524 <rcl_node_init+0x2a4>)
 8011396:	9302      	str	r3, [sp, #8]
 8011398:	692b      	ldr	r3, [r5, #16]
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80113a0:	9301      	str	r3, [sp, #4]
 80113a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80113a6:	f002 fbc9 	bl	8013b3c <rcutils_format_string_limit>
 80113aa:	6863      	ldr	r3, [r4, #4]
 80113ac:	6770      	str	r0, [r6, #116]	@ 0x74
 80113ae:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80113b0:	2a00      	cmp	r2, #0
 80113b2:	f000 80a9 	beq.w	8011508 <rcl_node_init+0x288>
 80113b6:	6822      	ldr	r2, [r4, #0]
 80113b8:	9307      	str	r3, [sp, #28]
 80113ba:	6810      	ldr	r0, [r2, #0]
 80113bc:	4649      	mov	r1, r9
 80113be:	3028      	adds	r0, #40	@ 0x28
 80113c0:	4642      	mov	r2, r8
 80113c2:	f003 fc07 	bl	8014bd4 <rmw_create_node>
 80113c6:	9b07      	ldr	r3, [sp, #28]
 80113c8:	6698      	str	r0, [r3, #104]	@ 0x68
 80113ca:	6863      	ldr	r3, [r4, #4]
 80113cc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80113ce:	2800      	cmp	r0, #0
 80113d0:	f000 809d 	beq.w	801150e <rcl_node_init+0x28e>
 80113d4:	f003 fc90 	bl	8014cf8 <rmw_node_get_graph_guard_condition>
 80113d8:	4681      	mov	r9, r0
 80113da:	2800      	cmp	r0, #0
 80113dc:	f000 809c 	beq.w	8011518 <rcl_node_init+0x298>
 80113e0:	682b      	ldr	r3, [r5, #0]
 80113e2:	6929      	ldr	r1, [r5, #16]
 80113e4:	6866      	ldr	r6, [r4, #4]
 80113e6:	2008      	movs	r0, #8
 80113e8:	4798      	blx	r3
 80113ea:	6863      	ldr	r3, [r4, #4]
 80113ec:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80113ee:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 80113f2:	f1ba 0f00 	cmp.w	sl, #0
 80113f6:	f000 808d 	beq.w	8011514 <rcl_node_init+0x294>
 80113fa:	f10d 0b20 	add.w	fp, sp, #32
 80113fe:	4658      	mov	r0, fp
 8011400:	f005 fe72 	bl	80170e8 <rcl_get_zero_initialized_guard_condition>
 8011404:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8011408:	6863      	ldr	r3, [r4, #4]
 801140a:	46ac      	mov	ip, r5
 801140c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8011410:	e88a 0003 	stmia.w	sl, {r0, r1}
 8011414:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011418:	ae25      	add	r6, sp, #148	@ 0x94
 801141a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801141c:	f8dc 3000 	ldr.w	r3, [ip]
 8011420:	6033      	str	r3, [r6, #0]
 8011422:	ab2a      	add	r3, sp, #168	@ 0xa8
 8011424:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8011428:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801142c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801142e:	463a      	mov	r2, r7
 8011430:	4649      	mov	r1, r9
 8011432:	4670      	mov	r0, lr
 8011434:	f005 feae 	bl	8017194 <rcl_guard_condition_init_from_rmw>
 8011438:	4606      	mov	r6, r0
 801143a:	bb18      	cbnz	r0, 8011484 <rcl_node_init+0x204>
 801143c:	686b      	ldr	r3, [r5, #4]
 801143e:	6929      	ldr	r1, [r5, #16]
 8011440:	4798      	blx	r3
 8011442:	686b      	ldr	r3, [r5, #4]
 8011444:	6929      	ldr	r1, [r5, #16]
 8011446:	4640      	mov	r0, r8
 8011448:	4798      	blx	r3
 801144a:	e000      	b.n	801144e <rcl_node_init+0x1ce>
 801144c:	260b      	movs	r6, #11
 801144e:	4630      	mov	r0, r6
 8011450:	b02b      	add	sp, #172	@ 0xac
 8011452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011456:	2665      	movs	r6, #101	@ 0x65
 8011458:	e7f9      	b.n	801144e <rcl_node_init+0x1ce>
 801145a:	2664      	movs	r6, #100	@ 0x64
 801145c:	4630      	mov	r0, r6
 801145e:	b02b      	add	sp, #172	@ 0xac
 8011460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011464:	f105 030c 	add.w	r3, r5, #12
 8011468:	e893 0003 	ldmia.w	r3, {r0, r1}
 801146c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8011470:	4640      	mov	r0, r8
 8011472:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8011476:	f002 fc7f 	bl	8013d78 <rcutils_strdup>
 801147a:	4680      	mov	r8, r0
 801147c:	e750      	b.n	8011320 <rcl_node_init+0xa0>
 801147e:	f002 ff71 	bl	8014364 <rmw_namespace_validation_result_string>
 8011482:	26ca      	movs	r6, #202	@ 0xca
 8011484:	6863      	ldr	r3, [r4, #4]
 8011486:	b1f3      	cbz	r3, 80114c6 <rcl_node_init+0x246>
 8011488:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801148a:	b138      	cbz	r0, 801149c <rcl_node_init+0x21c>
 801148c:	f005 fee2 	bl	8017254 <rcl_guard_condition_fini>
 8011490:	6863      	ldr	r3, [r4, #4]
 8011492:	6929      	ldr	r1, [r5, #16]
 8011494:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011496:	686b      	ldr	r3, [r5, #4]
 8011498:	4798      	blx	r3
 801149a:	6863      	ldr	r3, [r4, #4]
 801149c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801149e:	b110      	cbz	r0, 80114a6 <rcl_node_init+0x226>
 80114a0:	f003 fbae 	bl	8014c00 <rmw_destroy_node>
 80114a4:	6863      	ldr	r3, [r4, #4]
 80114a6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80114a8:	6929      	ldr	r1, [r5, #16]
 80114aa:	686b      	ldr	r3, [r5, #4]
 80114ac:	4798      	blx	r3
 80114ae:	6863      	ldr	r3, [r4, #4]
 80114b0:	6929      	ldr	r1, [r5, #16]
 80114b2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80114b4:	686b      	ldr	r3, [r5, #4]
 80114b6:	4798      	blx	r3
 80114b8:	6860      	ldr	r0, [r4, #4]
 80114ba:	f000 f8ab 	bl	8011614 <rcl_node_options_fini>
 80114be:	686b      	ldr	r3, [r5, #4]
 80114c0:	6929      	ldr	r1, [r5, #16]
 80114c2:	6860      	ldr	r0, [r4, #4]
 80114c4:	4798      	blx	r3
 80114c6:	686b      	ldr	r3, [r5, #4]
 80114c8:	6929      	ldr	r1, [r5, #16]
 80114ca:	2000      	movs	r0, #0
 80114cc:	4798      	blx	r3
 80114ce:	686b      	ldr	r3, [r5, #4]
 80114d0:	6929      	ldr	r1, [r5, #16]
 80114d2:	4640      	mov	r0, r8
 80114d4:	4798      	blx	r3
 80114d6:	2300      	movs	r3, #0
 80114d8:	e9c4 3300 	strd	r3, r3, [r4]
 80114dc:	e7b7      	b.n	801144e <rcl_node_init+0x1ce>
 80114de:	f105 030c 	add.w	r3, r5, #12
 80114e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80114e6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80114ea:	480f      	ldr	r0, [pc, #60]	@ (8011528 <rcl_node_init+0x2a8>)
 80114ec:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80114f0:	f002 fc42 	bl	8013d78 <rcutils_strdup>
 80114f4:	4680      	mov	r8, r0
 80114f6:	e713      	b.n	8011320 <rcl_node_init+0xa0>
 80114f8:	260a      	movs	r6, #10
 80114fa:	e7a8      	b.n	801144e <rcl_node_init+0x1ce>
 80114fc:	f002 ff8a 	bl	8014414 <rmw_node_name_validation_result_string>
 8011500:	26c9      	movs	r6, #201	@ 0xc9
 8011502:	e7a4      	b.n	801144e <rcl_node_init+0x1ce>
 8011504:	260a      	movs	r6, #10
 8011506:	e7de      	b.n	80114c6 <rcl_node_init+0x246>
 8011508:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801150a:	260a      	movs	r6, #10
 801150c:	e7bd      	b.n	801148a <rcl_node_init+0x20a>
 801150e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011510:	2601      	movs	r6, #1
 8011512:	e7ba      	b.n	801148a <rcl_node_init+0x20a>
 8011514:	260a      	movs	r6, #10
 8011516:	e7c1      	b.n	801149c <rcl_node_init+0x21c>
 8011518:	2601      	movs	r6, #1
 801151a:	e7b3      	b.n	8011484 <rcl_node_init+0x204>
 801151c:	0801a308 	.word	0x0801a308
 8011520:	0801a114 	.word	0x0801a114
 8011524:	0801a30c 	.word	0x0801a30c
 8011528:	0801a304 	.word	0x0801a304

0801152c <rcl_node_is_valid>:
 801152c:	b130      	cbz	r0, 801153c <rcl_node_is_valid+0x10>
 801152e:	6843      	ldr	r3, [r0, #4]
 8011530:	b123      	cbz	r3, 801153c <rcl_node_is_valid+0x10>
 8011532:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011534:	b113      	cbz	r3, 801153c <rcl_node_is_valid+0x10>
 8011536:	6800      	ldr	r0, [r0, #0]
 8011538:	f7ff bc4a 	b.w	8010dd0 <rcl_context_is_valid>
 801153c:	2000      	movs	r0, #0
 801153e:	4770      	bx	lr

08011540 <rcl_node_get_name>:
 8011540:	b120      	cbz	r0, 801154c <rcl_node_get_name+0xc>
 8011542:	6840      	ldr	r0, [r0, #4]
 8011544:	b110      	cbz	r0, 801154c <rcl_node_get_name+0xc>
 8011546:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011548:	b100      	cbz	r0, 801154c <rcl_node_get_name+0xc>
 801154a:	6880      	ldr	r0, [r0, #8]
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop

08011550 <rcl_node_get_namespace>:
 8011550:	b120      	cbz	r0, 801155c <rcl_node_get_namespace+0xc>
 8011552:	6840      	ldr	r0, [r0, #4]
 8011554:	b110      	cbz	r0, 801155c <rcl_node_get_namespace+0xc>
 8011556:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011558:	b100      	cbz	r0, 801155c <rcl_node_get_namespace+0xc>
 801155a:	68c0      	ldr	r0, [r0, #12]
 801155c:	4770      	bx	lr
 801155e:	bf00      	nop

08011560 <rcl_node_get_options>:
 8011560:	b128      	cbz	r0, 801156e <rcl_node_get_options+0xe>
 8011562:	6840      	ldr	r0, [r0, #4]
 8011564:	b118      	cbz	r0, 801156e <rcl_node_get_options+0xe>
 8011566:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8011568:	2b00      	cmp	r3, #0
 801156a:	bf08      	it	eq
 801156c:	2000      	moveq	r0, #0
 801156e:	4770      	bx	lr

08011570 <rcl_node_get_rmw_handle>:
 8011570:	b110      	cbz	r0, 8011578 <rcl_node_get_rmw_handle+0x8>
 8011572:	6840      	ldr	r0, [r0, #4]
 8011574:	b100      	cbz	r0, 8011578 <rcl_node_get_rmw_handle+0x8>
 8011576:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop

0801157c <rcl_get_disable_loaned_message>:
 801157c:	b510      	push	{r4, lr}
 801157e:	b082      	sub	sp, #8
 8011580:	2300      	movs	r3, #0
 8011582:	9301      	str	r3, [sp, #4]
 8011584:	b1a0      	cbz	r0, 80115b0 <rcl_get_disable_loaned_message+0x34>
 8011586:	4604      	mov	r4, r0
 8011588:	a901      	add	r1, sp, #4
 801158a:	480b      	ldr	r0, [pc, #44]	@ (80115b8 <rcl_get_disable_loaned_message+0x3c>)
 801158c:	f002 fabe 	bl	8013b0c <rcutils_get_env>
 8011590:	b110      	cbz	r0, 8011598 <rcl_get_disable_loaned_message+0x1c>
 8011592:	2001      	movs	r0, #1
 8011594:	b002      	add	sp, #8
 8011596:	bd10      	pop	{r4, pc}
 8011598:	9a01      	ldr	r2, [sp, #4]
 801159a:	7813      	ldrb	r3, [r2, #0]
 801159c:	3b31      	subs	r3, #49	@ 0x31
 801159e:	bf08      	it	eq
 80115a0:	7853      	ldrbeq	r3, [r2, #1]
 80115a2:	fab3 f383 	clz	r3, r3
 80115a6:	095b      	lsrs	r3, r3, #5
 80115a8:	2000      	movs	r0, #0
 80115aa:	7023      	strb	r3, [r4, #0]
 80115ac:	b002      	add	sp, #8
 80115ae:	bd10      	pop	{r4, pc}
 80115b0:	200b      	movs	r0, #11
 80115b2:	b002      	add	sp, #8
 80115b4:	bd10      	pop	{r4, pc}
 80115b6:	bf00      	nop
 80115b8:	0801a314 	.word	0x0801a314

080115bc <rcl_node_get_default_options>:
 80115bc:	b510      	push	{r4, lr}
 80115be:	2253      	movs	r2, #83	@ 0x53
 80115c0:	4604      	mov	r4, r0
 80115c2:	2100      	movs	r1, #0
 80115c4:	3015      	adds	r0, #21
 80115c6:	f006 fffd 	bl	80185c4 <memset>
 80115ca:	4620      	mov	r0, r4
 80115cc:	f7f8 ff48 	bl	800a460 <rcutils_get_default_allocator>
 80115d0:	2301      	movs	r3, #1
 80115d2:	7523      	strb	r3, [r4, #20]
 80115d4:	4620      	mov	r0, r4
 80115d6:	bd10      	pop	{r4, pc}

080115d8 <rcl_node_options_copy>:
 80115d8:	b1d0      	cbz	r0, 8011610 <rcl_node_options_copy+0x38>
 80115da:	b570      	push	{r4, r5, r6, lr}
 80115dc:	460c      	mov	r4, r1
 80115de:	b1a9      	cbz	r1, 801160c <rcl_node_options_copy+0x34>
 80115e0:	4288      	cmp	r0, r1
 80115e2:	4684      	mov	ip, r0
 80115e4:	d012      	beq.n	801160c <rcl_node_options_copy+0x34>
 80115e6:	4605      	mov	r5, r0
 80115e8:	8a86      	ldrh	r6, [r0, #20]
 80115ea:	468e      	mov	lr, r1
 80115ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80115f2:	682b      	ldr	r3, [r5, #0]
 80115f4:	f8ce 3000 	str.w	r3, [lr]
 80115f8:	f10c 0118 	add.w	r1, ip, #24
 80115fc:	2250      	movs	r2, #80	@ 0x50
 80115fe:	82a6      	strh	r6, [r4, #20]
 8011600:	f104 0018 	add.w	r0, r4, #24
 8011604:	f007 f8b9 	bl	801877a <memcpy>
 8011608:	2000      	movs	r0, #0
 801160a:	bd70      	pop	{r4, r5, r6, pc}
 801160c:	200b      	movs	r0, #11
 801160e:	bd70      	pop	{r4, r5, r6, pc}
 8011610:	200b      	movs	r0, #11
 8011612:	4770      	bx	lr

08011614 <rcl_node_options_fini>:
 8011614:	b1c0      	cbz	r0, 8011648 <rcl_node_options_fini+0x34>
 8011616:	b500      	push	{lr}
 8011618:	4684      	mov	ip, r0
 801161a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801161e:	b087      	sub	sp, #28
 8011620:	f10d 0e04 	add.w	lr, sp, #4
 8011624:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011628:	f8dc 3000 	ldr.w	r3, [ip]
 801162c:	f8ce 3000 	str.w	r3, [lr]
 8011630:	a801      	add	r0, sp, #4
 8011632:	f7f8 ff41 	bl	800a4b8 <rcutils_allocator_is_valid>
 8011636:	b118      	cbz	r0, 8011640 <rcl_node_options_fini+0x2c>
 8011638:	2000      	movs	r0, #0
 801163a:	b007      	add	sp, #28
 801163c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011640:	200b      	movs	r0, #11
 8011642:	b007      	add	sp, #28
 8011644:	f85d fb04 	ldr.w	pc, [sp], #4
 8011648:	200b      	movs	r0, #11
 801164a:	4770      	bx	lr

0801164c <rcl_node_resolve_name>:
 801164c:	b082      	sub	sp, #8
 801164e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011652:	b091      	sub	sp, #68	@ 0x44
 8011654:	ac1a      	add	r4, sp, #104	@ 0x68
 8011656:	e884 000c 	stmia.w	r4, {r2, r3}
 801165a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801165e:	2800      	cmp	r0, #0
 8011660:	d03a      	beq.n	80116d8 <rcl_node_resolve_name+0x8c>
 8011662:	460c      	mov	r4, r1
 8011664:	4605      	mov	r5, r0
 8011666:	f7ff ff7b 	bl	8011560 <rcl_node_get_options>
 801166a:	b370      	cbz	r0, 80116ca <rcl_node_resolve_name+0x7e>
 801166c:	4628      	mov	r0, r5
 801166e:	f7ff ff67 	bl	8011540 <rcl_node_get_name>
 8011672:	4681      	mov	r9, r0
 8011674:	4628      	mov	r0, r5
 8011676:	f7ff ff6b 	bl	8011550 <rcl_node_get_namespace>
 801167a:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 801167e:	4607      	mov	r7, r0
 8011680:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011684:	ad0b      	add	r5, sp, #44	@ 0x2c
 8011686:	46ac      	mov	ip, r5
 8011688:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801168c:	f8de 3000 	ldr.w	r3, [lr]
 8011690:	f8cc 3000 	str.w	r3, [ip]
 8011694:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011696:	b1fb      	cbz	r3, 80116d8 <rcl_node_resolve_name+0x8c>
 8011698:	468a      	mov	sl, r1
 801169a:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 801169e:	f002 fbcb 	bl	8013e38 <rcutils_get_zero_initialized_string_map>
 80116a2:	ab10      	add	r3, sp, #64	@ 0x40
 80116a4:	9008      	str	r0, [sp, #32]
 80116a6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80116aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80116ae:	2100      	movs	r1, #0
 80116b0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80116b4:	a808      	add	r0, sp, #32
 80116b6:	f002 fc19 	bl	8013eec <rcutils_string_map_init>
 80116ba:	4606      	mov	r6, r0
 80116bc:	b170      	cbz	r0, 80116dc <rcl_node_resolve_name+0x90>
 80116be:	f7f8 ff0f 	bl	800a4e0 <rcutils_get_error_string>
 80116c2:	f7f8 ff25 	bl	800a510 <rcutils_reset_error>
 80116c6:	2e0a      	cmp	r6, #10
 80116c8:	d000      	beq.n	80116cc <rcl_node_resolve_name+0x80>
 80116ca:	2601      	movs	r6, #1
 80116cc:	4630      	mov	r0, r6
 80116ce:	b011      	add	sp, #68	@ 0x44
 80116d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116d4:	b002      	add	sp, #8
 80116d6:	4770      	bx	lr
 80116d8:	260b      	movs	r6, #11
 80116da:	e7f7      	b.n	80116cc <rcl_node_resolve_name+0x80>
 80116dc:	9009      	str	r0, [sp, #36]	@ 0x24
 80116de:	9007      	str	r0, [sp, #28]
 80116e0:	a808      	add	r0, sp, #32
 80116e2:	f005 fcfb 	bl	80170dc <rcl_get_default_topic_name_substitutions>
 80116e6:	4606      	mov	r6, r0
 80116e8:	b1b0      	cbz	r0, 8011718 <rcl_node_resolve_name+0xcc>
 80116ea:	280a      	cmp	r0, #10
 80116ec:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80116f0:	d000      	beq.n	80116f4 <rcl_node_resolve_name+0xa8>
 80116f2:	2601      	movs	r6, #1
 80116f4:	a808      	add	r0, sp, #32
 80116f6:	f002 fc37 	bl	8013f68 <rcutils_string_map_fini>
 80116fa:	2800      	cmp	r0, #0
 80116fc:	d132      	bne.n	8011764 <rcl_node_resolve_name+0x118>
 80116fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011700:	4659      	mov	r1, fp
 8011702:	47d0      	blx	sl
 8011704:	4659      	mov	r1, fp
 8011706:	4648      	mov	r0, r9
 8011708:	47d0      	blx	sl
 801170a:	f1b8 0f00 	cmp.w	r8, #0
 801170e:	d0dd      	beq.n	80116cc <rcl_node_resolve_name+0x80>
 8011710:	2e67      	cmp	r6, #103	@ 0x67
 8011712:	bf08      	it	eq
 8011714:	2668      	moveq	r6, #104	@ 0x68
 8011716:	e7d9      	b.n	80116cc <rcl_node_resolve_name+0x80>
 8011718:	ab09      	add	r3, sp, #36	@ 0x24
 801171a:	9305      	str	r3, [sp, #20]
 801171c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801171e:	46ec      	mov	ip, sp
 8011720:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011724:	682b      	ldr	r3, [r5, #0]
 8011726:	f8cc 3000 	str.w	r3, [ip]
 801172a:	463a      	mov	r2, r7
 801172c:	4649      	mov	r1, r9
 801172e:	4620      	mov	r0, r4
 8011730:	ab08      	add	r3, sp, #32
 8011732:	f005 fb6d 	bl	8016e10 <rcl_expand_topic_name>
 8011736:	4606      	mov	r6, r0
 8011738:	b9c8      	cbnz	r0, 801176e <rcl_node_resolve_name+0x122>
 801173a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801173e:	9009      	str	r0, [sp, #36]	@ 0x24
 8011740:	4602      	mov	r2, r0
 8011742:	a90a      	add	r1, sp, #40	@ 0x28
 8011744:	4648      	mov	r0, r9
 8011746:	f002 fd43 	bl	80141d0 <rmw_validate_full_topic_name>
 801174a:	b998      	cbnz	r0, 8011774 <rcl_node_resolve_name+0x128>
 801174c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801174e:	bb14      	cbnz	r4, 8011796 <rcl_node_resolve_name+0x14a>
 8011750:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011752:	a808      	add	r0, sp, #32
 8011754:	f8c3 9000 	str.w	r9, [r3]
 8011758:	f002 fc06 	bl	8013f68 <rcutils_string_map_fini>
 801175c:	4606      	mov	r6, r0
 801175e:	b978      	cbnz	r0, 8011780 <rcl_node_resolve_name+0x134>
 8011760:	4681      	mov	r9, r0
 8011762:	e7cc      	b.n	80116fe <rcl_node_resolve_name+0xb2>
 8011764:	f7f8 febc 	bl	800a4e0 <rcutils_get_error_string>
 8011768:	f7f8 fed2 	bl	800a510 <rcutils_reset_error>
 801176c:	e7c7      	b.n	80116fe <rcl_node_resolve_name+0xb2>
 801176e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011772:	e7bf      	b.n	80116f4 <rcl_node_resolve_name+0xa8>
 8011774:	f7f8 feb4 	bl	800a4e0 <rcutils_get_error_string>
 8011778:	2601      	movs	r6, #1
 801177a:	f7f8 fec9 	bl	800a510 <rcutils_reset_error>
 801177e:	e7b9      	b.n	80116f4 <rcl_node_resolve_name+0xa8>
 8011780:	f7f8 feae 	bl	800a4e0 <rcutils_get_error_string>
 8011784:	f7f8 fec4 	bl	800a510 <rcutils_reset_error>
 8011788:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801178a:	4659      	mov	r1, fp
 801178c:	47d0      	blx	sl
 801178e:	4659      	mov	r1, fp
 8011790:	4620      	mov	r0, r4
 8011792:	47d0      	blx	sl
 8011794:	e799      	b.n	80116ca <rcl_node_resolve_name+0x7e>
 8011796:	2667      	movs	r6, #103	@ 0x67
 8011798:	e7ac      	b.n	80116f4 <rcl_node_resolve_name+0xa8>
 801179a:	bf00      	nop

0801179c <rcl_service_get_rmw_handle>:
 801179c:	b118      	cbz	r0, 80117a6 <rcl_service_get_rmw_handle+0xa>
 801179e:	6800      	ldr	r0, [r0, #0]
 80117a0:	b108      	cbz	r0, 80117a6 <rcl_service_get_rmw_handle+0xa>
 80117a2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80117a6:	4770      	bx	lr

080117a8 <rcl_take_request>:
 80117a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117aa:	468e      	mov	lr, r1
 80117ac:	460c      	mov	r4, r1
 80117ae:	4617      	mov	r7, r2
 80117b0:	4605      	mov	r5, r0
 80117b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80117b6:	b091      	sub	sp, #68	@ 0x44
 80117b8:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 80117bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80117c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80117c8:	b30d      	cbz	r5, 801180e <rcl_take_request+0x66>
 80117ca:	682b      	ldr	r3, [r5, #0]
 80117cc:	b1fb      	cbz	r3, 801180e <rcl_take_request+0x66>
 80117ce:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80117d2:	b1e0      	cbz	r0, 801180e <rcl_take_request+0x66>
 80117d4:	b397      	cbz	r7, 801183c <rcl_take_request+0x94>
 80117d6:	2300      	movs	r3, #0
 80117d8:	f88d 3017 	strb.w	r3, [sp, #23]
 80117dc:	463a      	mov	r2, r7
 80117de:	f10d 0317 	add.w	r3, sp, #23
 80117e2:	a906      	add	r1, sp, #24
 80117e4:	f003 fad6 	bl	8014d94 <rmw_take_request>
 80117e8:	4606      	mov	r6, r0
 80117ea:	b198      	cbz	r0, 8011814 <rcl_take_request+0x6c>
 80117ec:	280a      	cmp	r0, #10
 80117ee:	bf18      	it	ne
 80117f0:	2601      	movne	r6, #1
 80117f2:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 80117f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80117fa:	46a6      	mov	lr, r4
 80117fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011800:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011804:	e88e 0003 	stmia.w	lr, {r0, r1}
 8011808:	4630      	mov	r0, r6
 801180a:	b011      	add	sp, #68	@ 0x44
 801180c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801180e:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8011812:	e7ee      	b.n	80117f2 <rcl_take_request+0x4a>
 8011814:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8011818:	b193      	cbz	r3, 8011840 <rcl_take_request+0x98>
 801181a:	682b      	ldr	r3, [r5, #0]
 801181c:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8011820:	2800      	cmp	r0, #0
 8011822:	d0e6      	beq.n	80117f2 <rcl_take_request+0x4a>
 8011824:	463a      	mov	r2, r7
 8011826:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 801182a:	ab0a      	add	r3, sp, #40	@ 0x28
 801182c:	e9cd 6700 	strd	r6, r7, [sp]
 8011830:	9302      	str	r3, [sp, #8]
 8011832:	2101      	movs	r1, #1
 8011834:	f000 f844 	bl	80118c0 <rcl_send_service_event_message>
 8011838:	4606      	mov	r6, r0
 801183a:	e7da      	b.n	80117f2 <rcl_take_request+0x4a>
 801183c:	260b      	movs	r6, #11
 801183e:	e7d8      	b.n	80117f2 <rcl_take_request+0x4a>
 8011840:	f240 2659 	movw	r6, #601	@ 0x259
 8011844:	e7d5      	b.n	80117f2 <rcl_take_request+0x4a>
 8011846:	bf00      	nop

08011848 <rcl_send_response>:
 8011848:	b350      	cbz	r0, 80118a0 <rcl_send_response+0x58>
 801184a:	b570      	push	{r4, r5, r6, lr}
 801184c:	6803      	ldr	r3, [r0, #0]
 801184e:	b084      	sub	sp, #16
 8011850:	4604      	mov	r4, r0
 8011852:	b1cb      	cbz	r3, 8011888 <rcl_send_response+0x40>
 8011854:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011858:	b1b0      	cbz	r0, 8011888 <rcl_send_response+0x40>
 801185a:	460e      	mov	r6, r1
 801185c:	b1e9      	cbz	r1, 801189a <rcl_send_response+0x52>
 801185e:	4615      	mov	r5, r2
 8011860:	b1da      	cbz	r2, 801189a <rcl_send_response+0x52>
 8011862:	f003 faf5 	bl	8014e50 <rmw_send_response>
 8011866:	b998      	cbnz	r0, 8011890 <rcl_send_response+0x48>
 8011868:	6823      	ldr	r3, [r4, #0]
 801186a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801186e:	b16b      	cbz	r3, 801188c <rcl_send_response+0x44>
 8011870:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8011874:	462a      	mov	r2, r5
 8011876:	e9cd 0100 	strd	r0, r1, [sp]
 801187a:	9602      	str	r6, [sp, #8]
 801187c:	2102      	movs	r1, #2
 801187e:	4618      	mov	r0, r3
 8011880:	f000 f81e 	bl	80118c0 <rcl_send_service_event_message>
 8011884:	b004      	add	sp, #16
 8011886:	bd70      	pop	{r4, r5, r6, pc}
 8011888:	f44f 7016 	mov.w	r0, #600	@ 0x258
 801188c:	b004      	add	sp, #16
 801188e:	bd70      	pop	{r4, r5, r6, pc}
 8011890:	2802      	cmp	r0, #2
 8011892:	bf18      	it	ne
 8011894:	2001      	movne	r0, #1
 8011896:	b004      	add	sp, #16
 8011898:	bd70      	pop	{r4, r5, r6, pc}
 801189a:	200b      	movs	r0, #11
 801189c:	b004      	add	sp, #16
 801189e:	bd70      	pop	{r4, r5, r6, pc}
 80118a0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80118a4:	4770      	bx	lr
 80118a6:	bf00      	nop

080118a8 <rcl_service_is_valid>:
 80118a8:	b130      	cbz	r0, 80118b8 <rcl_service_is_valid+0x10>
 80118aa:	6800      	ldr	r0, [r0, #0]
 80118ac:	b120      	cbz	r0, 80118b8 <rcl_service_is_valid+0x10>
 80118ae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80118b2:	3800      	subs	r0, #0
 80118b4:	bf18      	it	ne
 80118b6:	2001      	movne	r0, #1
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop
 80118bc:	0000      	movs	r0, r0
	...

080118c0 <rcl_send_service_event_message>:
 80118c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118c2:	b093      	sub	sp, #76	@ 0x4c
 80118c4:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80118c6:	b17a      	cbz	r2, 80118e8 <rcl_send_service_event_message+0x28>
 80118c8:	b176      	cbz	r6, 80118e8 <rcl_send_service_event_message+0x28>
 80118ca:	4604      	mov	r4, r0
 80118cc:	b150      	cbz	r0, 80118e4 <rcl_send_service_event_message+0x24>
 80118ce:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80118d2:	b13b      	cbz	r3, 80118e4 <rcl_send_service_event_message+0x24>
 80118d4:	68c0      	ldr	r0, [r0, #12]
 80118d6:	460f      	mov	r7, r1
 80118d8:	4615      	mov	r5, r2
 80118da:	f000 f8fb 	bl	8011ad4 <rcl_clock_valid>
 80118de:	b108      	cbz	r0, 80118e4 <rcl_send_service_event_message+0x24>
 80118e0:	7a23      	ldrb	r3, [r4, #8]
 80118e2:	b92b      	cbnz	r3, 80118f0 <rcl_send_service_event_message+0x30>
 80118e4:	2501      	movs	r5, #1
 80118e6:	e000      	b.n	80118ea <rcl_send_service_event_message+0x2a>
 80118e8:	250b      	movs	r5, #11
 80118ea:	4628      	mov	r0, r5
 80118ec:	b013      	add	sp, #76	@ 0x4c
 80118ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118f0:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 80118f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80118f8:	f10d 0c0c 	add.w	ip, sp, #12
 80118fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011900:	f8de 3000 	ldr.w	r3, [lr]
 8011904:	f8cc 3000 	str.w	r3, [ip]
 8011908:	a803      	add	r0, sp, #12
 801190a:	f7f8 fdd5 	bl	800a4b8 <rcutils_allocator_is_valid>
 801190e:	2800      	cmp	r0, #0
 8011910:	d0ea      	beq.n	80118e8 <rcl_send_service_event_message+0x28>
 8011912:	6820      	ldr	r0, [r4, #0]
 8011914:	f7f7 fed2 	bl	80096bc <rcl_publisher_is_valid>
 8011918:	2800      	cmp	r0, #0
 801191a:	d045      	beq.n	80119a8 <rcl_send_service_event_message+0xe8>
 801191c:	4669      	mov	r1, sp
 801191e:	68e0      	ldr	r0, [r4, #12]
 8011920:	f000 f950 	bl	8011bc4 <rcl_clock_get_now>
 8011924:	4601      	mov	r1, r0
 8011926:	2800      	cmp	r0, #0
 8011928:	d13b      	bne.n	80119a2 <rcl_send_service_event_message+0xe2>
 801192a:	2220      	movs	r2, #32
 801192c:	eb0d 0002 	add.w	r0, sp, r2
 8011930:	f006 fe48 	bl	80185c4 <memset>
 8011934:	a324      	add	r3, pc, #144	@ (adr r3, 80119c8 <rcl_send_service_event_message+0x108>)
 8011936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801193e:	f88d 7020 	strb.w	r7, [sp, #32]
 8011942:	f7ee ff61 	bl	8000808 <__aeabi_ldivmod>
 8011946:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 801194a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 801194e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011952:	7a23      	ldrb	r3, [r4, #8]
 8011954:	6830      	ldr	r0, [r6, #0]
 8011956:	6871      	ldr	r1, [r6, #4]
 8011958:	68b2      	ldr	r2, [r6, #8]
 801195a:	2b01      	cmp	r3, #1
 801195c:	68f3      	ldr	r3, [r6, #12]
 801195e:	bf08      	it	eq
 8011960:	2500      	moveq	r5, #0
 8011962:	ae0b      	add	r6, sp, #44	@ 0x2c
 8011964:	2f01      	cmp	r7, #1
 8011966:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8011968:	d821      	bhi.n	80119ae <rcl_send_service_event_message+0xee>
 801196a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801196e:	462a      	mov	r2, r5
 8011970:	a808      	add	r0, sp, #32
 8011972:	699d      	ldr	r5, [r3, #24]
 8011974:	a903      	add	r1, sp, #12
 8011976:	2300      	movs	r3, #0
 8011978:	47a8      	blx	r5
 801197a:	4606      	mov	r6, r0
 801197c:	2e00      	cmp	r6, #0
 801197e:	d0b1      	beq.n	80118e4 <rcl_send_service_event_message+0x24>
 8011980:	4631      	mov	r1, r6
 8011982:	6820      	ldr	r0, [r4, #0]
 8011984:	2200      	movs	r2, #0
 8011986:	f7f7 fe73 	bl	8009670 <rcl_publish>
 801198a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801198e:	4605      	mov	r5, r0
 8011990:	69db      	ldr	r3, [r3, #28]
 8011992:	a903      	add	r1, sp, #12
 8011994:	4630      	mov	r0, r6
 8011996:	4798      	blx	r3
 8011998:	2d00      	cmp	r5, #0
 801199a:	d0a6      	beq.n	80118ea <rcl_send_service_event_message+0x2a>
 801199c:	f7f8 fdb8 	bl	800a510 <rcutils_reset_error>
 80119a0:	e7a3      	b.n	80118ea <rcl_send_service_event_message+0x2a>
 80119a2:	f7f8 fdb5 	bl	800a510 <rcutils_reset_error>
 80119a6:	e79d      	b.n	80118e4 <rcl_send_service_event_message+0x24>
 80119a8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80119ac:	e79d      	b.n	80118ea <rcl_send_service_event_message+0x2a>
 80119ae:	1eb9      	subs	r1, r7, #2
 80119b0:	2901      	cmp	r1, #1
 80119b2:	d8f6      	bhi.n	80119a2 <rcl_send_service_event_message+0xe2>
 80119b4:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80119b8:	462b      	mov	r3, r5
 80119ba:	a808      	add	r0, sp, #32
 80119bc:	6995      	ldr	r5, [r2, #24]
 80119be:	a903      	add	r1, sp, #12
 80119c0:	2200      	movs	r2, #0
 80119c2:	47a8      	blx	r5
 80119c4:	4606      	mov	r6, r0
 80119c6:	e7d9      	b.n	801197c <rcl_send_service_event_message+0xbc>
 80119c8:	3b9aca00 	.word	0x3b9aca00
 80119cc:	00000000 	.word	0x00000000

080119d0 <rcl_take>:
 80119d0:	2800      	cmp	r0, #0
 80119d2:	d04b      	beq.n	8011a6c <rcl_take+0x9c>
 80119d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d8:	4615      	mov	r5, r2
 80119da:	6802      	ldr	r2, [r0, #0]
 80119dc:	b0a0      	sub	sp, #128	@ 0x80
 80119de:	4604      	mov	r4, r0
 80119e0:	2a00      	cmp	r2, #0
 80119e2:	d03b      	beq.n	8011a5c <rcl_take+0x8c>
 80119e4:	461f      	mov	r7, r3
 80119e6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d036      	beq.n	8011a5c <rcl_take+0x8c>
 80119ee:	460e      	mov	r6, r1
 80119f0:	2900      	cmp	r1, #0
 80119f2:	d039      	beq.n	8011a68 <rcl_take+0x98>
 80119f4:	2d00      	cmp	r5, #0
 80119f6:	d03d      	beq.n	8011a74 <rcl_take+0xa4>
 80119f8:	a802      	add	r0, sp, #8
 80119fa:	f002 fbd3 	bl	80141a4 <rmw_get_zero_initialized_message_info>
 80119fe:	6823      	ldr	r3, [r4, #0]
 8011a00:	f10d 0c08 	add.w	ip, sp, #8
 8011a04:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8011a08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a0c:	46ae      	mov	lr, r5
 8011a0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a12:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a16:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011a1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011a22:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011a26:	462b      	mov	r3, r5
 8011a28:	e88e 0003 	stmia.w	lr, {r0, r1}
 8011a2c:	f04f 0800 	mov.w	r8, #0
 8011a30:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 8011a34:	4631      	mov	r1, r6
 8011a36:	4620      	mov	r0, r4
 8011a38:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 8011a3c:	9700      	str	r7, [sp, #0]
 8011a3e:	f003 fb4f 	bl	80150e0 <rmw_take_with_info>
 8011a42:	4603      	mov	r3, r0
 8011a44:	b9c0      	cbnz	r0, 8011a78 <rcl_take+0xa8>
 8011a46:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 8011a4a:	f240 1291 	movw	r2, #401	@ 0x191
 8011a4e:	2900      	cmp	r1, #0
 8011a50:	bf08      	it	eq
 8011a52:	4613      	moveq	r3, r2
 8011a54:	4618      	mov	r0, r3
 8011a56:	b020      	add	sp, #128	@ 0x80
 8011a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a5c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011a60:	4618      	mov	r0, r3
 8011a62:	b020      	add	sp, #128	@ 0x80
 8011a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a68:	230b      	movs	r3, #11
 8011a6a:	e7f3      	b.n	8011a54 <rcl_take+0x84>
 8011a6c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011a70:	4618      	mov	r0, r3
 8011a72:	4770      	bx	lr
 8011a74:	ad12      	add	r5, sp, #72	@ 0x48
 8011a76:	e7bf      	b.n	80119f8 <rcl_take+0x28>
 8011a78:	f7ff f990 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	e7e9      	b.n	8011a54 <rcl_take+0x84>

08011a80 <rcl_subscription_get_rmw_handle>:
 8011a80:	b118      	cbz	r0, 8011a8a <rcl_subscription_get_rmw_handle+0xa>
 8011a82:	6800      	ldr	r0, [r0, #0]
 8011a84:	b108      	cbz	r0, 8011a8a <rcl_subscription_get_rmw_handle+0xa>
 8011a86:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8011a8a:	4770      	bx	lr

08011a8c <rcl_subscription_is_valid>:
 8011a8c:	b130      	cbz	r0, 8011a9c <rcl_subscription_is_valid+0x10>
 8011a8e:	6800      	ldr	r0, [r0, #0]
 8011a90:	b120      	cbz	r0, 8011a9c <rcl_subscription_is_valid+0x10>
 8011a92:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8011a96:	3800      	subs	r0, #0
 8011a98:	bf18      	it	ne
 8011a9a:	2001      	movne	r0, #1
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop

08011aa0 <rcl_get_system_time>:
 8011aa0:	4608      	mov	r0, r1
 8011aa2:	f7f8 bd51 	b.w	800a548 <rcutils_system_time_now>
 8011aa6:	bf00      	nop

08011aa8 <rcl_get_steady_time>:
 8011aa8:	4608      	mov	r0, r1
 8011aaa:	f7f8 bd77 	b.w	800a59c <rcutils_steady_time_now>
 8011aae:	bf00      	nop

08011ab0 <rcl_get_ros_time>:
 8011ab0:	7a03      	ldrb	r3, [r0, #8]
 8011ab2:	b510      	push	{r4, lr}
 8011ab4:	460c      	mov	r4, r1
 8011ab6:	b143      	cbz	r3, 8011aca <rcl_get_ros_time+0x1a>
 8011ab8:	2105      	movs	r1, #5
 8011aba:	f001 ff81 	bl	80139c0 <__atomic_load_8>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	e9c4 2300 	strd	r2, r3, [r4]
 8011ac6:	2000      	movs	r0, #0
 8011ac8:	bd10      	pop	{r4, pc}
 8011aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ace:	4608      	mov	r0, r1
 8011ad0:	f7f8 bd3a 	b.w	800a548 <rcutils_system_time_now>

08011ad4 <rcl_clock_valid>:
 8011ad4:	b138      	cbz	r0, 8011ae6 <rcl_clock_valid+0x12>
 8011ad6:	7803      	ldrb	r3, [r0, #0]
 8011ad8:	b123      	cbz	r3, 8011ae4 <rcl_clock_valid+0x10>
 8011ada:	68c0      	ldr	r0, [r0, #12]
 8011adc:	3800      	subs	r0, #0
 8011ade:	bf18      	it	ne
 8011ae0:	2001      	movne	r0, #1
 8011ae2:	4770      	bx	lr
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	4770      	bx	lr

08011ae8 <rcl_clock_init>:
 8011ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aea:	4605      	mov	r5, r0
 8011aec:	4610      	mov	r0, r2
 8011aee:	4614      	mov	r4, r2
 8011af0:	460e      	mov	r6, r1
 8011af2:	f7f8 fce1 	bl	800a4b8 <rcutils_allocator_is_valid>
 8011af6:	b128      	cbz	r0, 8011b04 <rcl_clock_init+0x1c>
 8011af8:	2d03      	cmp	r5, #3
 8011afa:	d803      	bhi.n	8011b04 <rcl_clock_init+0x1c>
 8011afc:	e8df f005 	tbb	[pc, r5]
 8011b00:	044c291a 	.word	0x044c291a
 8011b04:	200b      	movs	r0, #11
 8011b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b08:	2e00      	cmp	r6, #0
 8011b0a:	d0fb      	beq.n	8011b04 <rcl_clock_init+0x1c>
 8011b0c:	2c00      	cmp	r4, #0
 8011b0e:	d0f9      	beq.n	8011b04 <rcl_clock_init+0x1c>
 8011b10:	2300      	movs	r3, #0
 8011b12:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011b16:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 8011bbc <rcl_clock_init+0xd4>
 8011b1a:	6133      	str	r3, [r6, #16]
 8011b1c:	f106 0514 	add.w	r5, r6, #20
 8011b20:	2703      	movs	r7, #3
 8011b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b26:	6823      	ldr	r3, [r4, #0]
 8011b28:	602b      	str	r3, [r5, #0]
 8011b2a:	f8c6 c00c 	str.w	ip, [r6, #12]
 8011b2e:	7037      	strb	r7, [r6, #0]
 8011b30:	2000      	movs	r0, #0
 8011b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b34:	2e00      	cmp	r6, #0
 8011b36:	d0e5      	beq.n	8011b04 <rcl_clock_init+0x1c>
 8011b38:	2300      	movs	r3, #0
 8011b3a:	7033      	strb	r3, [r6, #0]
 8011b3c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011b40:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b46:	f106 0514 	add.w	r5, r6, #20
 8011b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b4c:	6823      	ldr	r3, [r4, #0]
 8011b4e:	602b      	str	r3, [r5, #0]
 8011b50:	e7ee      	b.n	8011b30 <rcl_clock_init+0x48>
 8011b52:	2e00      	cmp	r6, #0
 8011b54:	d0d6      	beq.n	8011b04 <rcl_clock_init+0x1c>
 8011b56:	2c00      	cmp	r4, #0
 8011b58:	d0d4      	beq.n	8011b04 <rcl_clock_init+0x1c>
 8011b5a:	2700      	movs	r7, #0
 8011b5c:	7037      	strb	r7, [r6, #0]
 8011b5e:	46a4      	mov	ip, r4
 8011b60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011b64:	f106 0514 	add.w	r5, r6, #20
 8011b68:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8011b6c:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8011b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011b72:	f8dc 3000 	ldr.w	r3, [ip]
 8011b76:	602b      	str	r3, [r5, #0]
 8011b78:	6921      	ldr	r1, [r4, #16]
 8011b7a:	6823      	ldr	r3, [r4, #0]
 8011b7c:	2010      	movs	r0, #16
 8011b7e:	4798      	blx	r3
 8011b80:	6130      	str	r0, [r6, #16]
 8011b82:	b1b8      	cbz	r0, 8011bb4 <rcl_clock_init+0xcc>
 8011b84:	2200      	movs	r2, #0
 8011b86:	2300      	movs	r3, #0
 8011b88:	e9c0 2300 	strd	r2, r3, [r0]
 8011b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8011bb8 <rcl_clock_init+0xd0>)
 8011b8e:	7207      	strb	r7, [r0, #8]
 8011b90:	2301      	movs	r3, #1
 8011b92:	60f2      	str	r2, [r6, #12]
 8011b94:	7033      	strb	r3, [r6, #0]
 8011b96:	e7cb      	b.n	8011b30 <rcl_clock_init+0x48>
 8011b98:	2e00      	cmp	r6, #0
 8011b9a:	d0b3      	beq.n	8011b04 <rcl_clock_init+0x1c>
 8011b9c:	2c00      	cmp	r4, #0
 8011b9e:	d0b1      	beq.n	8011b04 <rcl_clock_init+0x1c>
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011ba6:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8011bc0 <rcl_clock_init+0xd8>
 8011baa:	6133      	str	r3, [r6, #16]
 8011bac:	f106 0514 	add.w	r5, r6, #20
 8011bb0:	2702      	movs	r7, #2
 8011bb2:	e7b6      	b.n	8011b22 <rcl_clock_init+0x3a>
 8011bb4:	200a      	movs	r0, #10
 8011bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bb8:	08011ab1 	.word	0x08011ab1
 8011bbc:	08011aa9 	.word	0x08011aa9
 8011bc0:	08011aa1 	.word	0x08011aa1

08011bc4 <rcl_clock_get_now>:
 8011bc4:	b140      	cbz	r0, 8011bd8 <rcl_clock_get_now+0x14>
 8011bc6:	b139      	cbz	r1, 8011bd8 <rcl_clock_get_now+0x14>
 8011bc8:	7803      	ldrb	r3, [r0, #0]
 8011bca:	b11b      	cbz	r3, 8011bd4 <rcl_clock_get_now+0x10>
 8011bcc:	68c3      	ldr	r3, [r0, #12]
 8011bce:	b10b      	cbz	r3, 8011bd4 <rcl_clock_get_now+0x10>
 8011bd0:	6900      	ldr	r0, [r0, #16]
 8011bd2:	4718      	bx	r3
 8011bd4:	2001      	movs	r0, #1
 8011bd6:	4770      	bx	lr
 8011bd8:	200b      	movs	r0, #11
 8011bda:	4770      	bx	lr

08011bdc <rcl_is_enabled_ros_time_override>:
 8011bdc:	b158      	cbz	r0, 8011bf6 <rcl_is_enabled_ros_time_override+0x1a>
 8011bde:	b151      	cbz	r1, 8011bf6 <rcl_is_enabled_ros_time_override+0x1a>
 8011be0:	7803      	ldrb	r3, [r0, #0]
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	d105      	bne.n	8011bf2 <rcl_is_enabled_ros_time_override+0x16>
 8011be6:	6902      	ldr	r2, [r0, #16]
 8011be8:	b11a      	cbz	r2, 8011bf2 <rcl_is_enabled_ros_time_override+0x16>
 8011bea:	7a13      	ldrb	r3, [r2, #8]
 8011bec:	700b      	strb	r3, [r1, #0]
 8011bee:	2000      	movs	r0, #0
 8011bf0:	4770      	bx	lr
 8011bf2:	2001      	movs	r0, #1
 8011bf4:	4770      	bx	lr
 8011bf6:	200b      	movs	r0, #11
 8011bf8:	4770      	bx	lr
 8011bfa:	bf00      	nop

08011bfc <rcl_clock_add_jump_callback>:
 8011bfc:	b082      	sub	sp, #8
 8011bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c02:	a906      	add	r1, sp, #24
 8011c04:	e881 000c 	stmia.w	r1, {r2, r3}
 8011c08:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 8011c0c:	b320      	cbz	r0, 8011c58 <rcl_clock_add_jump_callback+0x5c>
 8011c0e:	4605      	mov	r5, r0
 8011c10:	3014      	adds	r0, #20
 8011c12:	f7f8 fc51 	bl	800a4b8 <rcutils_allocator_is_valid>
 8011c16:	b1f8      	cbz	r0, 8011c58 <rcl_clock_add_jump_callback+0x5c>
 8011c18:	b1f7      	cbz	r7, 8011c58 <rcl_clock_add_jump_callback+0x5c>
 8011c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	db1b      	blt.n	8011c58 <rcl_clock_add_jump_callback+0x5c>
 8011c20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011c24:	2a01      	cmp	r2, #1
 8011c26:	f173 0300 	sbcs.w	r3, r3, #0
 8011c2a:	da15      	bge.n	8011c58 <rcl_clock_add_jump_callback+0x5c>
 8011c2c:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 8011c30:	2c00      	cmp	r4, #0
 8011c32:	d042      	beq.n	8011cba <rcl_clock_add_jump_callback+0xbe>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2200      	movs	r2, #0
 8011c38:	e003      	b.n	8011c42 <rcl_clock_add_jump_callback+0x46>
 8011c3a:	4294      	cmp	r4, r2
 8011c3c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8011c40:	d011      	beq.n	8011c66 <rcl_clock_add_jump_callback+0x6a>
 8011c42:	6819      	ldr	r1, [r3, #0]
 8011c44:	42b9      	cmp	r1, r7
 8011c46:	f102 0201 	add.w	r2, r2, #1
 8011c4a:	d1f6      	bne.n	8011c3a <rcl_clock_add_jump_callback+0x3e>
 8011c4c:	6a19      	ldr	r1, [r3, #32]
 8011c4e:	42b1      	cmp	r1, r6
 8011c50:	d1f3      	bne.n	8011c3a <rcl_clock_add_jump_callback+0x3e>
 8011c52:	f04f 0e01 	mov.w	lr, #1
 8011c56:	e001      	b.n	8011c5c <rcl_clock_add_jump_callback+0x60>
 8011c58:	f04f 0e0b 	mov.w	lr, #11
 8011c5c:	4670      	mov	r0, lr
 8011c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c62:	b002      	add	sp, #8
 8011c64:	4770      	bx	lr
 8011c66:	3401      	adds	r4, #1
 8011c68:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011c6c:	00e1      	lsls	r1, r4, #3
 8011c6e:	69eb      	ldr	r3, [r5, #28]
 8011c70:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011c72:	4798      	blx	r3
 8011c74:	b1f0      	cbz	r0, 8011cb4 <rcl_clock_add_jump_callback+0xb8>
 8011c76:	68ab      	ldr	r3, [r5, #8]
 8011c78:	6068      	str	r0, [r5, #4]
 8011c7a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8011c7e:	f10d 0c18 	add.w	ip, sp, #24
 8011c82:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 8011c86:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 8011c8a:	f103 0801 	add.w	r8, r3, #1
 8011c8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011c92:	f104 0708 	add.w	r7, r4, #8
 8011c96:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011c98:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011c9c:	f04f 0e00 	mov.w	lr, #0
 8011ca0:	e887 0003 	stmia.w	r7, {r0, r1}
 8011ca4:	6226      	str	r6, [r4, #32]
 8011ca6:	4670      	mov	r0, lr
 8011ca8:	f8c5 8008 	str.w	r8, [r5, #8]
 8011cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb0:	b002      	add	sp, #8
 8011cb2:	4770      	bx	lr
 8011cb4:	f04f 0e0a 	mov.w	lr, #10
 8011cb8:	e7d0      	b.n	8011c5c <rcl_clock_add_jump_callback+0x60>
 8011cba:	2128      	movs	r1, #40	@ 0x28
 8011cbc:	e7d7      	b.n	8011c6e <rcl_clock_add_jump_callback+0x72>
 8011cbe:	bf00      	nop

08011cc0 <rcl_clock_remove_jump_callback>:
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	d05a      	beq.n	8011d7a <rcl_clock_remove_jump_callback+0xba>
 8011cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cc8:	4605      	mov	r5, r0
 8011cca:	3014      	adds	r0, #20
 8011ccc:	460f      	mov	r7, r1
 8011cce:	4692      	mov	sl, r2
 8011cd0:	f7f8 fbf2 	bl	800a4b8 <rcutils_allocator_is_valid>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d03f      	beq.n	8011d58 <rcl_clock_remove_jump_callback+0x98>
 8011cd8:	2f00      	cmp	r7, #0
 8011cda:	d03d      	beq.n	8011d58 <rcl_clock_remove_jump_callback+0x98>
 8011cdc:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8011ce0:	f1b8 0f00 	cmp.w	r8, #0
 8011ce4:	d00c      	beq.n	8011d00 <rcl_clock_remove_jump_callback+0x40>
 8011ce6:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011cea:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8011cee:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8011cf2:	464c      	mov	r4, r9
 8011cf4:	6823      	ldr	r3, [r4, #0]
 8011cf6:	42bb      	cmp	r3, r7
 8011cf8:	d005      	beq.n	8011d06 <rcl_clock_remove_jump_callback+0x46>
 8011cfa:	3428      	adds	r4, #40	@ 0x28
 8011cfc:	42b4      	cmp	r4, r6
 8011cfe:	d1f9      	bne.n	8011cf4 <rcl_clock_remove_jump_callback+0x34>
 8011d00:	2001      	movs	r0, #1
 8011d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d06:	6a23      	ldr	r3, [r4, #32]
 8011d08:	3428      	adds	r4, #40	@ 0x28
 8011d0a:	42b4      	cmp	r4, r6
 8011d0c:	d02c      	beq.n	8011d68 <rcl_clock_remove_jump_callback+0xa8>
 8011d0e:	4553      	cmp	r3, sl
 8011d10:	d1f0      	bne.n	8011cf4 <rcl_clock_remove_jump_callback+0x34>
 8011d12:	46a6      	mov	lr, r4
 8011d14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d18:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8011d1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011d24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d28:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011d2c:	3428      	adds	r4, #40	@ 0x28
 8011d2e:	42a6      	cmp	r6, r4
 8011d30:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011d34:	d1ed      	bne.n	8011d12 <rcl_clock_remove_jump_callback+0x52>
 8011d36:	f108 34ff 	add.w	r4, r8, #4294967295
 8011d3a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011d3c:	60ac      	str	r4, [r5, #8]
 8011d3e:	b174      	cbz	r4, 8011d5e <rcl_clock_remove_jump_callback+0x9e>
 8011d40:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011d44:	00e1      	lsls	r1, r4, #3
 8011d46:	69eb      	ldr	r3, [r5, #28]
 8011d48:	4648      	mov	r0, r9
 8011d4a:	4798      	blx	r3
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	b1b0      	cbz	r0, 8011d7e <rcl_clock_remove_jump_callback+0xbe>
 8011d50:	606c      	str	r4, [r5, #4]
 8011d52:	2000      	movs	r0, #0
 8011d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d58:	200b      	movs	r0, #11
 8011d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d5e:	69ab      	ldr	r3, [r5, #24]
 8011d60:	4611      	mov	r1, r2
 8011d62:	4648      	mov	r0, r9
 8011d64:	4798      	blx	r3
 8011d66:	e7f3      	b.n	8011d50 <rcl_clock_remove_jump_callback+0x90>
 8011d68:	4553      	cmp	r3, sl
 8011d6a:	d1c9      	bne.n	8011d00 <rcl_clock_remove_jump_callback+0x40>
 8011d6c:	f108 34ff 	add.w	r4, r8, #4294967295
 8011d70:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011d72:	60ac      	str	r4, [r5, #8]
 8011d74:	2c00      	cmp	r4, #0
 8011d76:	d1e3      	bne.n	8011d40 <rcl_clock_remove_jump_callback+0x80>
 8011d78:	e7f1      	b.n	8011d5e <rcl_clock_remove_jump_callback+0x9e>
 8011d7a:	200b      	movs	r0, #11
 8011d7c:	4770      	bx	lr
 8011d7e:	200a      	movs	r0, #10
 8011d80:	e7eb      	b.n	8011d5a <rcl_clock_remove_jump_callback+0x9a>
 8011d82:	bf00      	nop

08011d84 <_rcl_timer_time_jump>:
 8011d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d88:	4681      	mov	r9, r0
 8011d8a:	b087      	sub	sp, #28
 8011d8c:	4614      	mov	r4, r2
 8011d8e:	b131      	cbz	r1, 8011d9e <_rcl_timer_time_jump+0x1a>
 8011d90:	7803      	ldrb	r3, [r0, #0]
 8011d92:	3b02      	subs	r3, #2
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d93e      	bls.n	8011e16 <_rcl_timer_time_jump+0x92>
 8011d98:	b007      	add	sp, #28
 8011d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d9e:	6810      	ldr	r0, [r2, #0]
 8011da0:	a904      	add	r1, sp, #16
 8011da2:	f7ff ff0f 	bl	8011bc4 <rcl_clock_get_now>
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d1f6      	bne.n	8011d98 <_rcl_timer_time_jump+0x14>
 8011daa:	f104 0a20 	add.w	sl, r4, #32
 8011dae:	2105      	movs	r1, #5
 8011db0:	4650      	mov	r0, sl
 8011db2:	f001 fe05 	bl	80139c0 <__atomic_load_8>
 8011db6:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 8011dba:	4680      	mov	r8, r0
 8011dbc:	460e      	mov	r6, r1
 8011dbe:	4658      	mov	r0, fp
 8011dc0:	2105      	movs	r1, #5
 8011dc2:	f001 fdfd 	bl	80139c0 <__atomic_load_8>
 8011dc6:	4607      	mov	r7, r0
 8011dc8:	460d      	mov	r5, r1
 8011dca:	f104 0018 	add.w	r0, r4, #24
 8011dce:	2105      	movs	r1, #5
 8011dd0:	f001 fdf6 	bl	80139c0 <__atomic_load_8>
 8011dd4:	f899 3000 	ldrb.w	r3, [r9]
 8011dd8:	9003      	str	r0, [sp, #12]
 8011dda:	3b02      	subs	r3, #2
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	4689      	mov	r9, r1
 8011de0:	d935      	bls.n	8011e4e <_rcl_timer_time_jump+0xca>
 8011de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011de6:	42ba      	cmp	r2, r7
 8011de8:	eb73 0505 	sbcs.w	r5, r3, r5
 8011dec:	da57      	bge.n	8011e9e <_rcl_timer_time_jump+0x11a>
 8011dee:	4542      	cmp	r2, r8
 8011df0:	eb73 0606 	sbcs.w	r6, r3, r6
 8011df4:	dad0      	bge.n	8011d98 <_rcl_timer_time_jump+0x14>
 8011df6:	1882      	adds	r2, r0, r2
 8011df8:	f04f 0405 	mov.w	r4, #5
 8011dfc:	eb43 0309 	adc.w	r3, r3, r9
 8011e00:	4658      	mov	r0, fp
 8011e02:	9400      	str	r4, [sp, #0]
 8011e04:	f001 fe12 	bl	8013a2c <__atomic_store_8>
 8011e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e0c:	9400      	str	r4, [sp, #0]
 8011e0e:	4650      	mov	r0, sl
 8011e10:	f001 fe0c 	bl	8013a2c <__atomic_store_8>
 8011e14:	e7c0      	b.n	8011d98 <_rcl_timer_time_jump+0x14>
 8011e16:	6810      	ldr	r0, [r2, #0]
 8011e18:	a904      	add	r1, sp, #16
 8011e1a:	f7ff fed3 	bl	8011bc4 <rcl_clock_get_now>
 8011e1e:	2800      	cmp	r0, #0
 8011e20:	d1ba      	bne.n	8011d98 <_rcl_timer_time_jump+0x14>
 8011e22:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011e26:	4313      	orrs	r3, r2
 8011e28:	d0b6      	beq.n	8011d98 <_rcl_timer_time_jump+0x14>
 8011e2a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011e2e:	2105      	movs	r1, #5
 8011e30:	f001 fdc6 	bl	80139c0 <__atomic_load_8>
 8011e34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e38:	1a82      	subs	r2, r0, r2
 8011e3a:	f04f 0005 	mov.w	r0, #5
 8011e3e:	9000      	str	r0, [sp, #0]
 8011e40:	eb61 0303 	sbc.w	r3, r1, r3
 8011e44:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8011e48:	f001 fdf0 	bl	8013a2c <__atomic_store_8>
 8011e4c:	e7a4      	b.n	8011d98 <_rcl_timer_time_jump+0x14>
 8011e4e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011e52:	4313      	orrs	r3, r2
 8011e54:	d0a0      	beq.n	8011d98 <_rcl_timer_time_jump+0x14>
 8011e56:	2605      	movs	r6, #5
 8011e58:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	9600      	str	r6, [sp, #0]
 8011e60:	2200      	movs	r2, #0
 8011e62:	f001 fe19 	bl	8013a98 <__atomic_exchange_8>
 8011e66:	ea51 0300 	orrs.w	r3, r1, r0
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	460d      	mov	r5, r1
 8011e6e:	d093      	beq.n	8011d98 <_rcl_timer_time_jump+0x14>
 8011e70:	9a04      	ldr	r2, [sp, #16]
 8011e72:	9b05      	ldr	r3, [sp, #20]
 8011e74:	9600      	str	r6, [sp, #0]
 8011e76:	1b12      	subs	r2, r2, r4
 8011e78:	eb63 0301 	sbc.w	r3, r3, r1
 8011e7c:	9903      	ldr	r1, [sp, #12]
 8011e7e:	1852      	adds	r2, r2, r1
 8011e80:	eb43 0309 	adc.w	r3, r3, r9
 8011e84:	4658      	mov	r0, fp
 8011e86:	f001 fdd1 	bl	8013a2c <__atomic_store_8>
 8011e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011e8e:	1b12      	subs	r2, r2, r4
 8011e90:	9600      	str	r6, [sp, #0]
 8011e92:	eb63 0305 	sbc.w	r3, r3, r5
 8011e96:	4650      	mov	r0, sl
 8011e98:	f001 fdc8 	bl	8013a2c <__atomic_store_8>
 8011e9c:	e77c      	b.n	8011d98 <_rcl_timer_time_jump+0x14>
 8011e9e:	f104 0008 	add.w	r0, r4, #8
 8011ea2:	f005 f9ff 	bl	80172a4 <rcl_trigger_guard_condition>
 8011ea6:	e777      	b.n	8011d98 <_rcl_timer_time_jump+0x14>

08011ea8 <rcl_get_zero_initialized_timer>:
 8011ea8:	4b01      	ldr	r3, [pc, #4]	@ (8011eb0 <rcl_get_zero_initialized_timer+0x8>)
 8011eaa:	6818      	ldr	r0, [r3, #0]
 8011eac:	4770      	bx	lr
 8011eae:	bf00      	nop
 8011eb0:	0801ac94 	.word	0x0801ac94
 8011eb4:	00000000 	.word	0x00000000

08011eb8 <rcl_timer_init2>:
 8011eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ebc:	b0ae      	sub	sp, #184	@ 0xb8
 8011ebe:	4604      	mov	r4, r0
 8011ec0:	a839      	add	r0, sp, #228	@ 0xe4
 8011ec2:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 8011ec6:	460d      	mov	r5, r1
 8011ec8:	4691      	mov	r9, r2
 8011eca:	f7f8 faf5 	bl	800a4b8 <rcutils_allocator_is_valid>
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	f000 8097 	beq.w	8012002 <rcl_timer_init2+0x14a>
 8011ed4:	2c00      	cmp	r4, #0
 8011ed6:	f000 8094 	beq.w	8012002 <rcl_timer_init2+0x14a>
 8011eda:	2d00      	cmp	r5, #0
 8011edc:	f000 8091 	beq.w	8012002 <rcl_timer_init2+0x14a>
 8011ee0:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	f2c0 808d 	blt.w	8012002 <rcl_timer_init2+0x14a>
 8011ee8:	6823      	ldr	r3, [r4, #0]
 8011eea:	b123      	cbz	r3, 8011ef6 <rcl_timer_init2+0x3e>
 8011eec:	2664      	movs	r6, #100	@ 0x64
 8011eee:	4630      	mov	r0, r6
 8011ef0:	b02e      	add	sp, #184	@ 0xb8
 8011ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef6:	a908      	add	r1, sp, #32
 8011ef8:	4628      	mov	r0, r5
 8011efa:	f7ff fe63 	bl	8011bc4 <rcl_clock_get_now>
 8011efe:	4606      	mov	r6, r0
 8011f00:	2800      	cmp	r0, #0
 8011f02:	d1f4      	bne.n	8011eee <rcl_timer_init2+0x36>
 8011f04:	ae06      	add	r6, sp, #24
 8011f06:	4630      	mov	r0, r6
 8011f08:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 8011f0c:	f005 f8ec 	bl	80170e8 <rcl_get_zero_initialized_guard_condition>
 8011f10:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011f14:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 8011f18:	ae0b      	add	r6, sp, #44	@ 0x2c
 8011f1a:	e88a 0003 	stmia.w	sl, {r0, r1}
 8011f1e:	4630      	mov	r0, r6
 8011f20:	f005 f9ba 	bl	8017298 <rcl_guard_condition_get_default_options>
 8011f24:	ab0d      	add	r3, sp, #52	@ 0x34
 8011f26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f2a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011f2e:	4649      	mov	r1, r9
 8011f30:	e896 000c 	ldmia.w	r6, {r2, r3}
 8011f34:	4650      	mov	r0, sl
 8011f36:	f005 f8e1 	bl	80170fc <rcl_guard_condition_init>
 8011f3a:	4606      	mov	r6, r0
 8011f3c:	2800      	cmp	r0, #0
 8011f3e:	d1d6      	bne.n	8011eee <rcl_timer_init2+0x36>
 8011f40:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8011f42:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f44:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8011f48:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8011f4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011f50:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 8011f52:	902a      	str	r0, [sp, #168]	@ 0xa8
 8011f54:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
 8011f58:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 8012030 <rcl_timer_init2+0x178>
 8011f5c:	19d0      	adds	r0, r2, r7
 8011f5e:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 8011f60:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 8011f64:	eb43 0107 	adc.w	r1, r3, r7
 8011f68:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8011f6c:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8011f70:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8011f74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011f78:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 8011f7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011f80:	f8dc 3000 	ldr.w	r3, [ip]
 8011f84:	f8ce 3000 	str.w	r3, [lr]
 8011f88:	f088 0801 	eor.w	r8, r8, #1
 8011f8c:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 8011f90:	4619      	mov	r1, r3
 8011f92:	2060      	movs	r0, #96	@ 0x60
 8011f94:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011f96:	4798      	blx	r3
 8011f98:	4680      	mov	r8, r0
 8011f9a:	6020      	str	r0, [r4, #0]
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	d035      	beq.n	801200c <rcl_timer_init2+0x154>
 8011fa0:	a916      	add	r1, sp, #88	@ 0x58
 8011fa2:	2260      	movs	r2, #96	@ 0x60
 8011fa4:	f006 fbe9 	bl	801877a <memcpy>
 8011fa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d19e      	bne.n	8011eee <rcl_timer_init2+0x36>
 8011fb0:	2001      	movs	r0, #1
 8011fb2:	2100      	movs	r1, #0
 8011fb4:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8011fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8011fc0:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8011fc4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8011fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8012038 <rcl_timer_init2+0x180>)
 8011fca:	9304      	str	r3, [sp, #16]
 8011fcc:	f8cd 8014 	str.w	r8, [sp, #20]
 8011fd0:	ab12      	add	r3, sp, #72	@ 0x48
 8011fd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fd4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011fd8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011fdc:	4628      	mov	r0, r5
 8011fde:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8011fe2:	f7ff fe0b 	bl	8011bfc <rcl_clock_add_jump_callback>
 8011fe6:	4605      	mov	r5, r0
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d080      	beq.n	8011eee <rcl_timer_init2+0x36>
 8011fec:	4650      	mov	r0, sl
 8011fee:	f005 f931 	bl	8017254 <rcl_guard_condition_fini>
 8011ff2:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8011ff4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8011ff6:	6820      	ldr	r0, [r4, #0]
 8011ff8:	4798      	blx	r3
 8011ffa:	2300      	movs	r3, #0
 8011ffc:	6023      	str	r3, [r4, #0]
 8011ffe:	462e      	mov	r6, r5
 8012000:	e775      	b.n	8011eee <rcl_timer_init2+0x36>
 8012002:	260b      	movs	r6, #11
 8012004:	4630      	mov	r0, r6
 8012006:	b02e      	add	sp, #184	@ 0xb8
 8012008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801200c:	4650      	mov	r0, sl
 801200e:	f005 f921 	bl	8017254 <rcl_guard_condition_fini>
 8012012:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	2b01      	cmp	r3, #1
 8012018:	d001      	beq.n	801201e <rcl_timer_init2+0x166>
 801201a:	260a      	movs	r6, #10
 801201c:	e767      	b.n	8011eee <rcl_timer_init2+0x36>
 801201e:	4906      	ldr	r1, [pc, #24]	@ (8012038 <rcl_timer_init2+0x180>)
 8012020:	4622      	mov	r2, r4
 8012022:	4628      	mov	r0, r5
 8012024:	f7ff fe4c 	bl	8011cc0 <rcl_clock_remove_jump_callback>
 8012028:	e7f7      	b.n	801201a <rcl_timer_init2+0x162>
 801202a:	bf00      	nop
 801202c:	f3af 8000 	nop.w
	...
 8012038:	08011d85 	.word	0x08011d85

0801203c <rcl_timer_clock>:
 801203c:	b130      	cbz	r0, 801204c <rcl_timer_clock+0x10>
 801203e:	b129      	cbz	r1, 801204c <rcl_timer_clock+0x10>
 8012040:	6803      	ldr	r3, [r0, #0]
 8012042:	b12b      	cbz	r3, 8012050 <rcl_timer_clock+0x14>
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	600b      	str	r3, [r1, #0]
 8012048:	2000      	movs	r0, #0
 801204a:	4770      	bx	lr
 801204c:	200b      	movs	r0, #11
 801204e:	4770      	bx	lr
 8012050:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop

08012058 <rcl_timer_call>:
 8012058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801205c:	b087      	sub	sp, #28
 801205e:	2800      	cmp	r0, #0
 8012060:	d067      	beq.n	8012132 <rcl_timer_call+0xda>
 8012062:	6803      	ldr	r3, [r0, #0]
 8012064:	4604      	mov	r4, r0
 8012066:	2b00      	cmp	r3, #0
 8012068:	d068      	beq.n	801213c <rcl_timer_call+0xe4>
 801206a:	f3bf 8f5b 	dmb	ish
 801206e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012072:	f3bf 8f5b 	dmb	ish
 8012076:	2b00      	cmp	r3, #0
 8012078:	d150      	bne.n	801211c <rcl_timer_call+0xc4>
 801207a:	6803      	ldr	r3, [r0, #0]
 801207c:	a904      	add	r1, sp, #16
 801207e:	6818      	ldr	r0, [r3, #0]
 8012080:	f7ff fda0 	bl	8011bc4 <rcl_clock_get_now>
 8012084:	4605      	mov	r5, r0
 8012086:	2800      	cmp	r0, #0
 8012088:	d144      	bne.n	8012114 <rcl_timer_call+0xbc>
 801208a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801208e:	2b00      	cmp	r3, #0
 8012090:	db4a      	blt.n	8012128 <rcl_timer_call+0xd0>
 8012092:	6820      	ldr	r0, [r4, #0]
 8012094:	f04f 0a05 	mov.w	sl, #5
 8012098:	f8cd a000 	str.w	sl, [sp]
 801209c:	3020      	adds	r0, #32
 801209e:	f001 fcfb 	bl	8013a98 <__atomic_exchange_8>
 80120a2:	6823      	ldr	r3, [r4, #0]
 80120a4:	f3bf 8f5b 	dmb	ish
 80120a8:	4680      	mov	r8, r0
 80120aa:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80120ae:	f3bf 8f5b 	dmb	ish
 80120b2:	6820      	ldr	r0, [r4, #0]
 80120b4:	4689      	mov	r9, r1
 80120b6:	3028      	adds	r0, #40	@ 0x28
 80120b8:	4651      	mov	r1, sl
 80120ba:	f001 fc81 	bl	80139c0 <__atomic_load_8>
 80120be:	4606      	mov	r6, r0
 80120c0:	6820      	ldr	r0, [r4, #0]
 80120c2:	460f      	mov	r7, r1
 80120c4:	3018      	adds	r0, #24
 80120c6:	4651      	mov	r1, sl
 80120c8:	f001 fc7a 	bl	80139c0 <__atomic_load_8>
 80120cc:	1836      	adds	r6, r6, r0
 80120ce:	eb41 0707 	adc.w	r7, r1, r7
 80120d2:	4602      	mov	r2, r0
 80120d4:	460b      	mov	r3, r1
 80120d6:	4682      	mov	sl, r0
 80120d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120dc:	42b0      	cmp	r0, r6
 80120de:	eb71 0c07 	sbcs.w	ip, r1, r7
 80120e2:	db04      	blt.n	80120ee <rcl_timer_call+0x96>
 80120e4:	ea53 0c02 	orrs.w	ip, r3, r2
 80120e8:	d12b      	bne.n	8012142 <rcl_timer_call+0xea>
 80120ea:	4606      	mov	r6, r0
 80120ec:	460f      	mov	r7, r1
 80120ee:	6820      	ldr	r0, [r4, #0]
 80120f0:	2105      	movs	r1, #5
 80120f2:	4632      	mov	r2, r6
 80120f4:	463b      	mov	r3, r7
 80120f6:	3028      	adds	r0, #40	@ 0x28
 80120f8:	9100      	str	r1, [sp, #0]
 80120fa:	f001 fc97 	bl	8013a2c <__atomic_store_8>
 80120fe:	f1bb 0f00 	cmp.w	fp, #0
 8012102:	d007      	beq.n	8012114 <rcl_timer_call+0xbc>
 8012104:	9a04      	ldr	r2, [sp, #16]
 8012106:	9b05      	ldr	r3, [sp, #20]
 8012108:	ebb2 0208 	subs.w	r2, r2, r8
 801210c:	4620      	mov	r0, r4
 801210e:	eb63 0309 	sbc.w	r3, r3, r9
 8012112:	47d8      	blx	fp
 8012114:	4628      	mov	r0, r5
 8012116:	b007      	add	sp, #28
 8012118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801211c:	f240 3521 	movw	r5, #801	@ 0x321
 8012120:	4628      	mov	r0, r5
 8012122:	b007      	add	sp, #28
 8012124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012128:	2501      	movs	r5, #1
 801212a:	4628      	mov	r0, r5
 801212c:	b007      	add	sp, #28
 801212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012132:	250b      	movs	r5, #11
 8012134:	4628      	mov	r0, r5
 8012136:	b007      	add	sp, #28
 8012138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801213c:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8012140:	e7e8      	b.n	8012114 <rcl_timer_call+0xbc>
 8012142:	1b80      	subs	r0, r0, r6
 8012144:	eb61 0107 	sbc.w	r1, r1, r7
 8012148:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801214c:	f7ee fb5c 	bl	8000808 <__aeabi_ldivmod>
 8012150:	9b02      	ldr	r3, [sp, #8]
 8012152:	3001      	adds	r0, #1
 8012154:	f141 0100 	adc.w	r1, r1, #0
 8012158:	fb00 f303 	mul.w	r3, r0, r3
 801215c:	fb01 330a 	mla	r3, r1, sl, r3
 8012160:	fba0 0a0a 	umull	r0, sl, r0, sl
 8012164:	1830      	adds	r0, r6, r0
 8012166:	4453      	add	r3, sl
 8012168:	eb43 0707 	adc.w	r7, r3, r7
 801216c:	4606      	mov	r6, r0
 801216e:	e7be      	b.n	80120ee <rcl_timer_call+0x96>

08012170 <rcl_timer_is_ready>:
 8012170:	b398      	cbz	r0, 80121da <rcl_timer_is_ready+0x6a>
 8012172:	b530      	push	{r4, r5, lr}
 8012174:	6803      	ldr	r3, [r0, #0]
 8012176:	b083      	sub	sp, #12
 8012178:	4604      	mov	r4, r0
 801217a:	b383      	cbz	r3, 80121de <rcl_timer_is_ready+0x6e>
 801217c:	460d      	mov	r5, r1
 801217e:	b349      	cbz	r1, 80121d4 <rcl_timer_is_ready+0x64>
 8012180:	f3bf 8f5b 	dmb	ish
 8012184:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012188:	f3bf 8f5b 	dmb	ish
 801218c:	b9fb      	cbnz	r3, 80121ce <rcl_timer_is_ready+0x5e>
 801218e:	6803      	ldr	r3, [r0, #0]
 8012190:	4669      	mov	r1, sp
 8012192:	6818      	ldr	r0, [r3, #0]
 8012194:	f7ff fd16 	bl	8011bc4 <rcl_clock_get_now>
 8012198:	b128      	cbz	r0, 80121a6 <rcl_timer_is_ready+0x36>
 801219a:	f240 3321 	movw	r3, #801	@ 0x321
 801219e:	4298      	cmp	r0, r3
 80121a0:	d015      	beq.n	80121ce <rcl_timer_is_ready+0x5e>
 80121a2:	b003      	add	sp, #12
 80121a4:	bd30      	pop	{r4, r5, pc}
 80121a6:	6820      	ldr	r0, [r4, #0]
 80121a8:	2105      	movs	r1, #5
 80121aa:	3028      	adds	r0, #40	@ 0x28
 80121ac:	f001 fc08 	bl	80139c0 <__atomic_load_8>
 80121b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80121b4:	1ac0      	subs	r0, r0, r3
 80121b6:	eb61 0102 	sbc.w	r1, r1, r2
 80121ba:	2801      	cmp	r0, #1
 80121bc:	f171 0100 	sbcs.w	r1, r1, #0
 80121c0:	bfb4      	ite	lt
 80121c2:	2301      	movlt	r3, #1
 80121c4:	2300      	movge	r3, #0
 80121c6:	702b      	strb	r3, [r5, #0]
 80121c8:	2000      	movs	r0, #0
 80121ca:	b003      	add	sp, #12
 80121cc:	bd30      	pop	{r4, r5, pc}
 80121ce:	2300      	movs	r3, #0
 80121d0:	702b      	strb	r3, [r5, #0]
 80121d2:	e7f9      	b.n	80121c8 <rcl_timer_is_ready+0x58>
 80121d4:	200b      	movs	r0, #11
 80121d6:	b003      	add	sp, #12
 80121d8:	bd30      	pop	{r4, r5, pc}
 80121da:	200b      	movs	r0, #11
 80121dc:	4770      	bx	lr
 80121de:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80121e2:	e7de      	b.n	80121a2 <rcl_timer_is_ready+0x32>

080121e4 <rcl_timer_get_next_call_time>:
 80121e4:	b1d8      	cbz	r0, 801221e <rcl_timer_get_next_call_time+0x3a>
 80121e6:	b538      	push	{r3, r4, r5, lr}
 80121e8:	6803      	ldr	r3, [r0, #0]
 80121ea:	b1d3      	cbz	r3, 8012222 <rcl_timer_get_next_call_time+0x3e>
 80121ec:	460c      	mov	r4, r1
 80121ee:	b1a1      	cbz	r1, 801221a <rcl_timer_get_next_call_time+0x36>
 80121f0:	f3bf 8f5b 	dmb	ish
 80121f4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80121f8:	f3bf 8f5b 	dmb	ish
 80121fc:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8012200:	b943      	cbnz	r3, 8012214 <rcl_timer_get_next_call_time+0x30>
 8012202:	6800      	ldr	r0, [r0, #0]
 8012204:	2105      	movs	r1, #5
 8012206:	3028      	adds	r0, #40	@ 0x28
 8012208:	f001 fbda 	bl	80139c0 <__atomic_load_8>
 801220c:	e9c4 0100 	strd	r0, r1, [r4]
 8012210:	4628      	mov	r0, r5
 8012212:	bd38      	pop	{r3, r4, r5, pc}
 8012214:	f240 3021 	movw	r0, #801	@ 0x321
 8012218:	bd38      	pop	{r3, r4, r5, pc}
 801221a:	200b      	movs	r0, #11
 801221c:	bd38      	pop	{r3, r4, r5, pc}
 801221e:	200b      	movs	r0, #11
 8012220:	4770      	bx	lr
 8012222:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8012226:	bd38      	pop	{r3, r4, r5, pc}

08012228 <rcl_timer_get_guard_condition>:
 8012228:	b130      	cbz	r0, 8012238 <rcl_timer_get_guard_condition+0x10>
 801222a:	6800      	ldr	r0, [r0, #0]
 801222c:	b120      	cbz	r0, 8012238 <rcl_timer_get_guard_condition+0x10>
 801222e:	68c3      	ldr	r3, [r0, #12]
 8012230:	b10b      	cbz	r3, 8012236 <rcl_timer_get_guard_condition+0xe>
 8012232:	3008      	adds	r0, #8
 8012234:	4770      	bx	lr
 8012236:	4618      	mov	r0, r3
 8012238:	4770      	bx	lr
 801223a:	bf00      	nop

0801223c <rcl_get_zero_initialized_wait_set>:
 801223c:	b510      	push	{r4, lr}
 801223e:	4c08      	ldr	r4, [pc, #32]	@ (8012260 <rcl_get_zero_initialized_wait_set+0x24>)
 8012240:	4686      	mov	lr, r0
 8012242:	4684      	mov	ip, r0
 8012244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012246:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801224a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801224c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012252:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012256:	6823      	ldr	r3, [r4, #0]
 8012258:	f8cc 3000 	str.w	r3, [ip]
 801225c:	4670      	mov	r0, lr
 801225e:	bd10      	pop	{r4, pc}
 8012260:	0801ac98 	.word	0x0801ac98

08012264 <rcl_wait_set_is_valid>:
 8012264:	b118      	cbz	r0, 801226e <rcl_wait_set_is_valid+0xa>
 8012266:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012268:	3800      	subs	r0, #0
 801226a:	bf18      	it	ne
 801226c:	2001      	movne	r0, #1
 801226e:	4770      	bx	lr

08012270 <rcl_wait_set_fini>:
 8012270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012274:	2800      	cmp	r0, #0
 8012276:	f000 80ab 	beq.w	80123d0 <rcl_wait_set_fini+0x160>
 801227a:	4605      	mov	r5, r0
 801227c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801227e:	2800      	cmp	r0, #0
 8012280:	f000 809c 	beq.w	80123bc <rcl_wait_set_fini+0x14c>
 8012284:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8012286:	f003 f909 	bl	801549c <rmw_destroy_wait_set>
 801228a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801228c:	4680      	mov	r8, r0
 801228e:	2800      	cmp	r0, #0
 8012290:	f040 808e 	bne.w	80123b0 <rcl_wait_set_fini+0x140>
 8012294:	2c00      	cmp	r4, #0
 8012296:	f000 80a0 	beq.w	80123da <rcl_wait_set_fini+0x16a>
 801229a:	6828      	ldr	r0, [r5, #0]
 801229c:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801229e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80122a2:	2600      	movs	r6, #0
 80122a4:	606e      	str	r6, [r5, #4]
 80122a6:	6026      	str	r6, [r4, #0]
 80122a8:	b118      	cbz	r0, 80122b2 <rcl_wait_set_fini+0x42>
 80122aa:	4649      	mov	r1, r9
 80122ac:	47b8      	blx	r7
 80122ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80122b0:	602e      	str	r6, [r5, #0]
 80122b2:	68a0      	ldr	r0, [r4, #8]
 80122b4:	b128      	cbz	r0, 80122c2 <rcl_wait_set_fini+0x52>
 80122b6:	4649      	mov	r1, r9
 80122b8:	47b8      	blx	r7
 80122ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80122bc:	2300      	movs	r3, #0
 80122be:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80122c2:	68a8      	ldr	r0, [r5, #8]
 80122c4:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 80122c6:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80122c8:	f04f 0900 	mov.w	r9, #0
 80122cc:	f8c5 900c 	str.w	r9, [r5, #12]
 80122d0:	f8c4 900c 	str.w	r9, [r4, #12]
 80122d4:	b130      	cbz	r0, 80122e4 <rcl_wait_set_fini+0x74>
 80122d6:	4639      	mov	r1, r7
 80122d8:	47b0      	blx	r6
 80122da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80122dc:	f8c5 9008 	str.w	r9, [r5, #8]
 80122e0:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 80122e2:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80122e4:	6960      	ldr	r0, [r4, #20]
 80122e6:	f04f 0900 	mov.w	r9, #0
 80122ea:	f8c4 9010 	str.w	r9, [r4, #16]
 80122ee:	b130      	cbz	r0, 80122fe <rcl_wait_set_fini+0x8e>
 80122f0:	4639      	mov	r1, r7
 80122f2:	47b0      	blx	r6
 80122f4:	f8c4 9014 	str.w	r9, [r4, #20]
 80122f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80122fa:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 80122fc:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80122fe:	6928      	ldr	r0, [r5, #16]
 8012300:	f04f 0900 	mov.w	r9, #0
 8012304:	f8c5 9014 	str.w	r9, [r5, #20]
 8012308:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 801230c:	b130      	cbz	r0, 801231c <rcl_wait_set_fini+0xac>
 801230e:	4639      	mov	r1, r7
 8012310:	47b0      	blx	r6
 8012312:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012314:	f8c5 9010 	str.w	r9, [r5, #16]
 8012318:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 801231a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801231c:	69a8      	ldr	r0, [r5, #24]
 801231e:	f04f 0900 	mov.w	r9, #0
 8012322:	f8c5 901c 	str.w	r9, [r5, #28]
 8012326:	f8c4 9018 	str.w	r9, [r4, #24]
 801232a:	b120      	cbz	r0, 8012336 <rcl_wait_set_fini+0xc6>
 801232c:	4639      	mov	r1, r7
 801232e:	47b0      	blx	r6
 8012330:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012332:	f8c5 9018 	str.w	r9, [r5, #24]
 8012336:	6a20      	ldr	r0, [r4, #32]
 8012338:	b128      	cbz	r0, 8012346 <rcl_wait_set_fini+0xd6>
 801233a:	4639      	mov	r1, r7
 801233c:	47b0      	blx	r6
 801233e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012340:	2300      	movs	r3, #0
 8012342:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8012346:	6a28      	ldr	r0, [r5, #32]
 8012348:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801234a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801234e:	2600      	movs	r6, #0
 8012350:	626e      	str	r6, [r5, #36]	@ 0x24
 8012352:	6266      	str	r6, [r4, #36]	@ 0x24
 8012354:	b118      	cbz	r0, 801235e <rcl_wait_set_fini+0xee>
 8012356:	4649      	mov	r1, r9
 8012358:	47b8      	blx	r7
 801235a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801235c:	622e      	str	r6, [r5, #32]
 801235e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012360:	b128      	cbz	r0, 801236e <rcl_wait_set_fini+0xfe>
 8012362:	4649      	mov	r1, r9
 8012364:	47b8      	blx	r7
 8012366:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012368:	2300      	movs	r3, #0
 801236a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801236e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012370:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8012372:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012376:	2600      	movs	r6, #0
 8012378:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801237a:	6326      	str	r6, [r4, #48]	@ 0x30
 801237c:	b118      	cbz	r0, 8012386 <rcl_wait_set_fini+0x116>
 801237e:	4649      	mov	r1, r9
 8012380:	47b8      	blx	r7
 8012382:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012384:	62ae      	str	r6, [r5, #40]	@ 0x28
 8012386:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8012388:	b1e0      	cbz	r0, 80123c4 <rcl_wait_set_fini+0x154>
 801238a:	4649      	mov	r1, r9
 801238c:	47b8      	blx	r7
 801238e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012390:	2300      	movs	r3, #0
 8012392:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8012396:	4598      	cmp	r8, r3
 8012398:	bf18      	it	ne
 801239a:	f44f 7861 	movne.w	r8, #900	@ 0x384
 801239e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80123a0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80123a2:	4620      	mov	r0, r4
 80123a4:	4798      	blx	r3
 80123a6:	2300      	movs	r3, #0
 80123a8:	632b      	str	r3, [r5, #48]	@ 0x30
 80123aa:	4640      	mov	r0, r8
 80123ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123b0:	f44f 7861 	mov.w	r8, #900	@ 0x384
 80123b4:	2c00      	cmp	r4, #0
 80123b6:	f47f af70 	bne.w	801229a <rcl_wait_set_fini+0x2a>
 80123ba:	e7f6      	b.n	80123aa <rcl_wait_set_fini+0x13a>
 80123bc:	4680      	mov	r8, r0
 80123be:	4640      	mov	r0, r8
 80123c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123c4:	f1b8 0f00 	cmp.w	r8, #0
 80123c8:	bf18      	it	ne
 80123ca:	f44f 7861 	movne.w	r8, #900	@ 0x384
 80123ce:	e7e6      	b.n	801239e <rcl_wait_set_fini+0x12e>
 80123d0:	f04f 080b 	mov.w	r8, #11
 80123d4:	4640      	mov	r0, r8
 80123d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123da:	f44f 7861 	mov.w	r8, #900	@ 0x384
 80123de:	e7e4      	b.n	80123aa <rcl_wait_set_fini+0x13a>

080123e0 <rcl_wait_set_add_subscription>:
 80123e0:	b318      	cbz	r0, 801242a <rcl_wait_set_add_subscription+0x4a>
 80123e2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80123e4:	b570      	push	{r4, r5, r6, lr}
 80123e6:	4604      	mov	r4, r0
 80123e8:	b30b      	cbz	r3, 801242e <rcl_wait_set_add_subscription+0x4e>
 80123ea:	b319      	cbz	r1, 8012434 <rcl_wait_set_add_subscription+0x54>
 80123ec:	681d      	ldr	r5, [r3, #0]
 80123ee:	6840      	ldr	r0, [r0, #4]
 80123f0:	4285      	cmp	r5, r0
 80123f2:	d217      	bcs.n	8012424 <rcl_wait_set_add_subscription+0x44>
 80123f4:	6820      	ldr	r0, [r4, #0]
 80123f6:	1c6e      	adds	r6, r5, #1
 80123f8:	601e      	str	r6, [r3, #0]
 80123fa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80123fe:	b102      	cbz	r2, 8012402 <rcl_wait_set_add_subscription+0x22>
 8012400:	6015      	str	r5, [r2, #0]
 8012402:	4608      	mov	r0, r1
 8012404:	f7ff fb3c 	bl	8011a80 <rcl_subscription_get_rmw_handle>
 8012408:	b150      	cbz	r0, 8012420 <rcl_wait_set_add_subscription+0x40>
 801240a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801240c:	6842      	ldr	r2, [r0, #4]
 801240e:	689b      	ldr	r3, [r3, #8]
 8012410:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012414:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012416:	6853      	ldr	r3, [r2, #4]
 8012418:	3301      	adds	r3, #1
 801241a:	2000      	movs	r0, #0
 801241c:	6053      	str	r3, [r2, #4]
 801241e:	bd70      	pop	{r4, r5, r6, pc}
 8012420:	2001      	movs	r0, #1
 8012422:	bd70      	pop	{r4, r5, r6, pc}
 8012424:	f240 3086 	movw	r0, #902	@ 0x386
 8012428:	bd70      	pop	{r4, r5, r6, pc}
 801242a:	200b      	movs	r0, #11
 801242c:	4770      	bx	lr
 801242e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012432:	bd70      	pop	{r4, r5, r6, pc}
 8012434:	200b      	movs	r0, #11
 8012436:	bd70      	pop	{r4, r5, r6, pc}

08012438 <rcl_wait_set_clear>:
 8012438:	2800      	cmp	r0, #0
 801243a:	d074      	beq.n	8012526 <rcl_wait_set_clear+0xee>
 801243c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801243e:	b510      	push	{r4, lr}
 8012440:	4604      	mov	r4, r0
 8012442:	2b00      	cmp	r3, #0
 8012444:	d071      	beq.n	801252a <rcl_wait_set_clear+0xf2>
 8012446:	6800      	ldr	r0, [r0, #0]
 8012448:	b138      	cbz	r0, 801245a <rcl_wait_set_clear+0x22>
 801244a:	6862      	ldr	r2, [r4, #4]
 801244c:	2100      	movs	r1, #0
 801244e:	0092      	lsls	r2, r2, #2
 8012450:	f006 f8b8 	bl	80185c4 <memset>
 8012454:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012456:	2200      	movs	r2, #0
 8012458:	601a      	str	r2, [r3, #0]
 801245a:	68a0      	ldr	r0, [r4, #8]
 801245c:	b138      	cbz	r0, 801246e <rcl_wait_set_clear+0x36>
 801245e:	68e2      	ldr	r2, [r4, #12]
 8012460:	2100      	movs	r1, #0
 8012462:	0092      	lsls	r2, r2, #2
 8012464:	f006 f8ae 	bl	80185c4 <memset>
 8012468:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801246a:	2200      	movs	r2, #0
 801246c:	60da      	str	r2, [r3, #12]
 801246e:	69a0      	ldr	r0, [r4, #24]
 8012470:	b138      	cbz	r0, 8012482 <rcl_wait_set_clear+0x4a>
 8012472:	69e2      	ldr	r2, [r4, #28]
 8012474:	2100      	movs	r1, #0
 8012476:	0092      	lsls	r2, r2, #2
 8012478:	f006 f8a4 	bl	80185c4 <memset>
 801247c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801247e:	2200      	movs	r2, #0
 8012480:	619a      	str	r2, [r3, #24]
 8012482:	6a20      	ldr	r0, [r4, #32]
 8012484:	b138      	cbz	r0, 8012496 <rcl_wait_set_clear+0x5e>
 8012486:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012488:	2100      	movs	r1, #0
 801248a:	0092      	lsls	r2, r2, #2
 801248c:	f006 f89a 	bl	80185c4 <memset>
 8012490:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012492:	2200      	movs	r2, #0
 8012494:	625a      	str	r2, [r3, #36]	@ 0x24
 8012496:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012498:	b138      	cbz	r0, 80124aa <rcl_wait_set_clear+0x72>
 801249a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801249c:	2100      	movs	r1, #0
 801249e:	0092      	lsls	r2, r2, #2
 80124a0:	f006 f890 	bl	80185c4 <memset>
 80124a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80124a6:	2200      	movs	r2, #0
 80124a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80124aa:	6920      	ldr	r0, [r4, #16]
 80124ac:	b138      	cbz	r0, 80124be <rcl_wait_set_clear+0x86>
 80124ae:	6962      	ldr	r2, [r4, #20]
 80124b0:	2100      	movs	r1, #0
 80124b2:	0092      	lsls	r2, r2, #2
 80124b4:	f006 f886 	bl	80185c4 <memset>
 80124b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80124ba:	2200      	movs	r2, #0
 80124bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80124be:	6898      	ldr	r0, [r3, #8]
 80124c0:	b138      	cbz	r0, 80124d2 <rcl_wait_set_clear+0x9a>
 80124c2:	685a      	ldr	r2, [r3, #4]
 80124c4:	2100      	movs	r1, #0
 80124c6:	0092      	lsls	r2, r2, #2
 80124c8:	f006 f87c 	bl	80185c4 <memset>
 80124cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80124ce:	2200      	movs	r2, #0
 80124d0:	605a      	str	r2, [r3, #4]
 80124d2:	6958      	ldr	r0, [r3, #20]
 80124d4:	b138      	cbz	r0, 80124e6 <rcl_wait_set_clear+0xae>
 80124d6:	691a      	ldr	r2, [r3, #16]
 80124d8:	2100      	movs	r1, #0
 80124da:	0092      	lsls	r2, r2, #2
 80124dc:	f006 f872 	bl	80185c4 <memset>
 80124e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80124e2:	2200      	movs	r2, #0
 80124e4:	611a      	str	r2, [r3, #16]
 80124e6:	6a18      	ldr	r0, [r3, #32]
 80124e8:	b138      	cbz	r0, 80124fa <rcl_wait_set_clear+0xc2>
 80124ea:	69da      	ldr	r2, [r3, #28]
 80124ec:	2100      	movs	r1, #0
 80124ee:	0092      	lsls	r2, r2, #2
 80124f0:	f006 f868 	bl	80185c4 <memset>
 80124f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80124f6:	2200      	movs	r2, #0
 80124f8:	61da      	str	r2, [r3, #28]
 80124fa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80124fc:	b138      	cbz	r0, 801250e <rcl_wait_set_clear+0xd6>
 80124fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012500:	2100      	movs	r1, #0
 8012502:	0092      	lsls	r2, r2, #2
 8012504:	f006 f85e 	bl	80185c4 <memset>
 8012508:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801250a:	2200      	movs	r2, #0
 801250c:	629a      	str	r2, [r3, #40]	@ 0x28
 801250e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012510:	b138      	cbz	r0, 8012522 <rcl_wait_set_clear+0xea>
 8012512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012514:	2100      	movs	r1, #0
 8012516:	0092      	lsls	r2, r2, #2
 8012518:	f006 f854 	bl	80185c4 <memset>
 801251c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801251e:	2200      	movs	r2, #0
 8012520:	635a      	str	r2, [r3, #52]	@ 0x34
 8012522:	2000      	movs	r0, #0
 8012524:	bd10      	pop	{r4, pc}
 8012526:	200b      	movs	r0, #11
 8012528:	4770      	bx	lr
 801252a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801252e:	bd10      	pop	{r4, pc}

08012530 <rcl_wait_set_resize>:
 8012530:	2800      	cmp	r0, #0
 8012532:	f000 81a1 	beq.w	8012878 <rcl_wait_set_resize+0x348>
 8012536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801253a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 801253e:	b083      	sub	sp, #12
 8012540:	4604      	mov	r4, r0
 8012542:	f1ba 0f00 	cmp.w	sl, #0
 8012546:	f000 8199 	beq.w	801287c <rcl_wait_set_resize+0x34c>
 801254a:	f04f 0800 	mov.w	r8, #0
 801254e:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8012552:	461e      	mov	r6, r3
 8012554:	460f      	mov	r7, r1
 8012556:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 801255a:	4615      	mov	r5, r2
 801255c:	f8c0 8004 	str.w	r8, [r0, #4]
 8012560:	6800      	ldr	r0, [r0, #0]
 8012562:	f8ca 8000 	str.w	r8, [sl]
 8012566:	2900      	cmp	r1, #0
 8012568:	f000 80cf 	beq.w	801270a <rcl_wait_set_resize+0x1da>
 801256c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8012570:	464a      	mov	r2, r9
 8012572:	4651      	mov	r1, sl
 8012574:	9301      	str	r3, [sp, #4]
 8012576:	4798      	blx	r3
 8012578:	9b01      	ldr	r3, [sp, #4]
 801257a:	6020      	str	r0, [r4, #0]
 801257c:	2800      	cmp	r0, #0
 801257e:	f000 8109 	beq.w	8012794 <rcl_wait_set_resize+0x264>
 8012582:	4652      	mov	r2, sl
 8012584:	4641      	mov	r1, r8
 8012586:	9301      	str	r3, [sp, #4]
 8012588:	f006 f81c 	bl	80185c4 <memset>
 801258c:	6067      	str	r7, [r4, #4]
 801258e:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8012590:	9b01      	ldr	r3, [sp, #4]
 8012592:	68b8      	ldr	r0, [r7, #8]
 8012594:	f8c7 8004 	str.w	r8, [r7, #4]
 8012598:	464a      	mov	r2, r9
 801259a:	4651      	mov	r1, sl
 801259c:	4798      	blx	r3
 801259e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80125a0:	60b8      	str	r0, [r7, #8]
 80125a2:	689f      	ldr	r7, [r3, #8]
 80125a4:	2f00      	cmp	r7, #0
 80125a6:	f000 80f0 	beq.w	801278a <rcl_wait_set_resize+0x25a>
 80125aa:	4652      	mov	r2, sl
 80125ac:	4641      	mov	r1, r8
 80125ae:	4638      	mov	r0, r7
 80125b0:	f006 f808 	bl	80185c4 <memset>
 80125b4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80125b8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80125bc:	68a0      	ldr	r0, [r4, #8]
 80125be:	2700      	movs	r7, #0
 80125c0:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 80125c4:	60e7      	str	r7, [r4, #12]
 80125c6:	f8ca 700c 	str.w	r7, [sl, #12]
 80125ca:	2d00      	cmp	r5, #0
 80125cc:	f040 80b0 	bne.w	8012730 <rcl_wait_set_resize+0x200>
 80125d0:	b130      	cbz	r0, 80125e0 <rcl_wait_set_resize+0xb0>
 80125d2:	4641      	mov	r1, r8
 80125d4:	4790      	blx	r2
 80125d6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80125da:	60a5      	str	r5, [r4, #8]
 80125dc:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80125e0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80125e4:	2700      	movs	r7, #0
 80125e6:	19ad      	adds	r5, r5, r6
 80125e8:	f8ca 7010 	str.w	r7, [sl, #16]
 80125ec:	f040 80b8 	bne.w	8012760 <rcl_wait_set_resize+0x230>
 80125f0:	b148      	cbz	r0, 8012606 <rcl_wait_set_resize+0xd6>
 80125f2:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 80125f6:	4641      	mov	r1, r8
 80125f8:	4798      	blx	r3
 80125fa:	f8ca 5014 	str.w	r5, [sl, #20]
 80125fe:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012602:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012606:	6920      	ldr	r0, [r4, #16]
 8012608:	2500      	movs	r5, #0
 801260a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801260e:	6165      	str	r5, [r4, #20]
 8012610:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8012614:	2e00      	cmp	r6, #0
 8012616:	f040 80c1 	bne.w	801279c <rcl_wait_set_resize+0x26c>
 801261a:	b140      	cbz	r0, 801262e <rcl_wait_set_resize+0xfe>
 801261c:	4641      	mov	r1, r8
 801261e:	47c8      	blx	r9
 8012620:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012624:	6126      	str	r6, [r4, #16]
 8012626:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801262a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801262e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012630:	69a0      	ldr	r0, [r4, #24]
 8012632:	2500      	movs	r5, #0
 8012634:	61e5      	str	r5, [r4, #28]
 8012636:	f8ca 5018 	str.w	r5, [sl, #24]
 801263a:	2b00      	cmp	r3, #0
 801263c:	f040 80c2 	bne.w	80127c4 <rcl_wait_set_resize+0x294>
 8012640:	b128      	cbz	r0, 801264e <rcl_wait_set_resize+0x11e>
 8012642:	4641      	mov	r1, r8
 8012644:	47c8      	blx	r9
 8012646:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012648:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801264c:	61a3      	str	r3, [r4, #24]
 801264e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8012652:	b130      	cbz	r0, 8012662 <rcl_wait_set_resize+0x132>
 8012654:	4641      	mov	r1, r8
 8012656:	47c8      	blx	r9
 8012658:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801265c:	2300      	movs	r3, #0
 801265e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8012662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012664:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8012668:	6a20      	ldr	r0, [r4, #32]
 801266a:	2500      	movs	r5, #0
 801266c:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8012670:	6265      	str	r5, [r4, #36]	@ 0x24
 8012672:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8012676:	2b00      	cmp	r3, #0
 8012678:	f000 80c8 	beq.w	801280c <rcl_wait_set_resize+0x2dc>
 801267c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8012680:	4632      	mov	r2, r6
 8012682:	4649      	mov	r1, r9
 8012684:	47c0      	blx	r8
 8012686:	6220      	str	r0, [r4, #32]
 8012688:	2800      	cmp	r0, #0
 801268a:	f000 8083 	beq.w	8012794 <rcl_wait_set_resize+0x264>
 801268e:	464a      	mov	r2, r9
 8012690:	4629      	mov	r1, r5
 8012692:	f005 ff97 	bl	80185c4 <memset>
 8012696:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801269a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801269c:	6263      	str	r3, [r4, #36]	@ 0x24
 801269e:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80126a2:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 80126a6:	4632      	mov	r2, r6
 80126a8:	4649      	mov	r1, r9
 80126aa:	47c0      	blx	r8
 80126ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126ae:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 80126b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f000 80fb 	beq.w	80128b0 <rcl_wait_set_resize+0x380>
 80126ba:	464a      	mov	r2, r9
 80126bc:	4629      	mov	r1, r5
 80126be:	4618      	mov	r0, r3
 80126c0:	f005 ff80 	bl	80185c4 <memset>
 80126c4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80126c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80126ca:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 80126ce:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80126d0:	2500      	movs	r5, #0
 80126d2:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 80126d6:	62e5      	str	r5, [r4, #44]	@ 0x2c
 80126d8:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f040 80a9 	bne.w	8012834 <rcl_wait_set_resize+0x304>
 80126e2:	b128      	cbz	r0, 80126f0 <rcl_wait_set_resize+0x1c0>
 80126e4:	4631      	mov	r1, r6
 80126e6:	47b8      	blx	r7
 80126e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80126ea:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80126ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80126f0:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80126f4:	b128      	cbz	r0, 8012702 <rcl_wait_set_resize+0x1d2>
 80126f6:	4631      	mov	r1, r6
 80126f8:	47b8      	blx	r7
 80126fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80126fc:	2200      	movs	r2, #0
 80126fe:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8012702:	2000      	movs	r0, #0
 8012704:	b003      	add	sp, #12
 8012706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801270a:	b120      	cbz	r0, 8012716 <rcl_wait_set_resize+0x1e6>
 801270c:	4649      	mov	r1, r9
 801270e:	47d8      	blx	fp
 8012710:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012714:	6027      	str	r7, [r4, #0]
 8012716:	f8da 0008 	ldr.w	r0, [sl, #8]
 801271a:	2800      	cmp	r0, #0
 801271c:	f43f af4c 	beq.w	80125b8 <rcl_wait_set_resize+0x88>
 8012720:	4649      	mov	r1, r9
 8012722:	47d8      	blx	fp
 8012724:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012728:	2300      	movs	r3, #0
 801272a:	e9ca 3301 	strd	r3, r3, [sl, #4]
 801272e:	e743      	b.n	80125b8 <rcl_wait_set_resize+0x88>
 8012730:	4642      	mov	r2, r8
 8012732:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8012736:	4641      	mov	r1, r8
 8012738:	4798      	blx	r3
 801273a:	60a0      	str	r0, [r4, #8]
 801273c:	b350      	cbz	r0, 8012794 <rcl_wait_set_resize+0x264>
 801273e:	4642      	mov	r2, r8
 8012740:	4639      	mov	r1, r7
 8012742:	f005 ff3f 	bl	80185c4 <memset>
 8012746:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801274a:	60e5      	str	r5, [r4, #12]
 801274c:	2700      	movs	r7, #0
 801274e:	19ad      	adds	r5, r5, r6
 8012750:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012754:	f8da 0014 	ldr.w	r0, [sl, #20]
 8012758:	f8ca 7010 	str.w	r7, [sl, #16]
 801275c:	f43f af48 	beq.w	80125f0 <rcl_wait_set_resize+0xc0>
 8012760:	00ad      	lsls	r5, r5, #2
 8012762:	4642      	mov	r2, r8
 8012764:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8012768:	4629      	mov	r1, r5
 801276a:	4798      	blx	r3
 801276c:	4680      	mov	r8, r0
 801276e:	f8ca 0014 	str.w	r0, [sl, #20]
 8012772:	2800      	cmp	r0, #0
 8012774:	f000 8085 	beq.w	8012882 <rcl_wait_set_resize+0x352>
 8012778:	462a      	mov	r2, r5
 801277a:	4639      	mov	r1, r7
 801277c:	f005 ff22 	bl	80185c4 <memset>
 8012780:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012784:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012788:	e73d      	b.n	8012606 <rcl_wait_set_resize+0xd6>
 801278a:	6820      	ldr	r0, [r4, #0]
 801278c:	4649      	mov	r1, r9
 801278e:	47d8      	blx	fp
 8012790:	e9c4 7700 	strd	r7, r7, [r4]
 8012794:	200a      	movs	r0, #10
 8012796:	b003      	add	sp, #12
 8012798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801279c:	4642      	mov	r2, r8
 801279e:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80127a2:	4641      	mov	r1, r8
 80127a4:	47b8      	blx	r7
 80127a6:	6120      	str	r0, [r4, #16]
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d0f3      	beq.n	8012794 <rcl_wait_set_resize+0x264>
 80127ac:	4642      	mov	r2, r8
 80127ae:	4629      	mov	r1, r5
 80127b0:	f005 ff08 	bl	80185c4 <memset>
 80127b4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80127b8:	6166      	str	r6, [r4, #20]
 80127ba:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 80127be:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80127c2:	e734      	b.n	801262e <rcl_wait_set_resize+0xfe>
 80127c4:	009e      	lsls	r6, r3, #2
 80127c6:	4642      	mov	r2, r8
 80127c8:	4631      	mov	r1, r6
 80127ca:	47b8      	blx	r7
 80127cc:	61a0      	str	r0, [r4, #24]
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d0e0      	beq.n	8012794 <rcl_wait_set_resize+0x264>
 80127d2:	4632      	mov	r2, r6
 80127d4:	4629      	mov	r1, r5
 80127d6:	f005 fef5 	bl	80185c4 <memset>
 80127da:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80127de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127e0:	61e3      	str	r3, [r4, #28]
 80127e2:	f8da 0020 	ldr.w	r0, [sl, #32]
 80127e6:	f8ca 501c 	str.w	r5, [sl, #28]
 80127ea:	4642      	mov	r2, r8
 80127ec:	4631      	mov	r1, r6
 80127ee:	47b8      	blx	r7
 80127f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127f2:	f8ca 0020 	str.w	r0, [sl, #32]
 80127f6:	6a1f      	ldr	r7, [r3, #32]
 80127f8:	2f00      	cmp	r7, #0
 80127fa:	d053      	beq.n	80128a4 <rcl_wait_set_resize+0x374>
 80127fc:	4632      	mov	r2, r6
 80127fe:	4629      	mov	r1, r5
 8012800:	4638      	mov	r0, r7
 8012802:	f005 fedf 	bl	80185c4 <memset>
 8012806:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801280a:	e72a      	b.n	8012662 <rcl_wait_set_resize+0x132>
 801280c:	b128      	cbz	r0, 801281a <rcl_wait_set_resize+0x2ea>
 801280e:	4631      	mov	r1, r6
 8012810:	47b8      	blx	r7
 8012812:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012814:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012818:	6223      	str	r3, [r4, #32]
 801281a:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 801281e:	2800      	cmp	r0, #0
 8012820:	f43f af52 	beq.w	80126c8 <rcl_wait_set_resize+0x198>
 8012824:	4631      	mov	r1, r6
 8012826:	47b8      	blx	r7
 8012828:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801282c:	2300      	movs	r3, #0
 801282e:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8012832:	e749      	b.n	80126c8 <rcl_wait_set_resize+0x198>
 8012834:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8012838:	4632      	mov	r2, r6
 801283a:	4649      	mov	r1, r9
 801283c:	47c0      	blx	r8
 801283e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8012840:	2800      	cmp	r0, #0
 8012842:	d0a7      	beq.n	8012794 <rcl_wait_set_resize+0x264>
 8012844:	464a      	mov	r2, r9
 8012846:	4629      	mov	r1, r5
 8012848:	f005 febc 	bl	80185c4 <memset>
 801284c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012850:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012852:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012854:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012858:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 801285c:	4632      	mov	r2, r6
 801285e:	4649      	mov	r1, r9
 8012860:	47c0      	blx	r8
 8012862:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012864:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8012868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801286a:	b34b      	cbz	r3, 80128c0 <rcl_wait_set_resize+0x390>
 801286c:	464a      	mov	r2, r9
 801286e:	4629      	mov	r1, r5
 8012870:	4618      	mov	r0, r3
 8012872:	f005 fea7 	bl	80185c4 <memset>
 8012876:	e744      	b.n	8012702 <rcl_wait_set_resize+0x1d2>
 8012878:	200b      	movs	r0, #11
 801287a:	4770      	bx	lr
 801287c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012880:	e789      	b.n	8012796 <rcl_wait_set_resize+0x266>
 8012882:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012884:	68a0      	ldr	r0, [r4, #8]
 8012886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012888:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801288a:	4790      	blx	r2
 801288c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801288e:	6920      	ldr	r0, [r4, #16]
 8012890:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012892:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012894:	f8c4 800c 	str.w	r8, [r4, #12]
 8012898:	f8c4 8008 	str.w	r8, [r4, #8]
 801289c:	4790      	blx	r2
 801289e:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80128a2:	e777      	b.n	8012794 <rcl_wait_set_resize+0x264>
 80128a4:	69a0      	ldr	r0, [r4, #24]
 80128a6:	4641      	mov	r1, r8
 80128a8:	47c8      	blx	r9
 80128aa:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80128ae:	e771      	b.n	8012794 <rcl_wait_set_resize+0x264>
 80128b0:	6a20      	ldr	r0, [r4, #32]
 80128b2:	9301      	str	r3, [sp, #4]
 80128b4:	4631      	mov	r1, r6
 80128b6:	47b8      	blx	r7
 80128b8:	9b01      	ldr	r3, [sp, #4]
 80128ba:	e9c4 3308 	strd	r3, r3, [r4, #32]
 80128be:	e769      	b.n	8012794 <rcl_wait_set_resize+0x264>
 80128c0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80128c2:	9301      	str	r3, [sp, #4]
 80128c4:	4631      	mov	r1, r6
 80128c6:	47b8      	blx	r7
 80128c8:	9b01      	ldr	r3, [sp, #4]
 80128ca:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80128ce:	e761      	b.n	8012794 <rcl_wait_set_resize+0x264>

080128d0 <rcl_wait_set_init>:
 80128d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128d4:	b084      	sub	sp, #16
 80128d6:	4604      	mov	r4, r0
 80128d8:	a810      	add	r0, sp, #64	@ 0x40
 80128da:	460d      	mov	r5, r1
 80128dc:	4690      	mov	r8, r2
 80128de:	461f      	mov	r7, r3
 80128e0:	f7f7 fdea 	bl	800a4b8 <rcutils_allocator_is_valid>
 80128e4:	2800      	cmp	r0, #0
 80128e6:	d068      	beq.n	80129ba <rcl_wait_set_init+0xea>
 80128e8:	2c00      	cmp	r4, #0
 80128ea:	d066      	beq.n	80129ba <rcl_wait_set_init+0xea>
 80128ec:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80128ee:	b126      	cbz	r6, 80128fa <rcl_wait_set_init+0x2a>
 80128f0:	2564      	movs	r5, #100	@ 0x64
 80128f2:	4628      	mov	r0, r5
 80128f4:	b004      	add	sp, #16
 80128f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d05c      	beq.n	80129ba <rcl_wait_set_init+0xea>
 8012900:	4618      	mov	r0, r3
 8012902:	f7fe fa65 	bl	8010dd0 <rcl_context_is_valid>
 8012906:	2800      	cmp	r0, #0
 8012908:	d05c      	beq.n	80129c4 <rcl_wait_set_init+0xf4>
 801290a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801290c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801290e:	205c      	movs	r0, #92	@ 0x5c
 8012910:	4798      	blx	r3
 8012912:	6320      	str	r0, [r4, #48]	@ 0x30
 8012914:	2800      	cmp	r0, #0
 8012916:	d059      	beq.n	80129cc <rcl_wait_set_init+0xfc>
 8012918:	4631      	mov	r1, r6
 801291a:	225c      	movs	r2, #92	@ 0x5c
 801291c:	f005 fe52 	bl	80185c4 <memset>
 8012920:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8012924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012926:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 801292a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801292e:	eb03 0e02 	add.w	lr, r3, r2
 8012932:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012934:	449e      	add	lr, r3
 8012936:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012938:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801293c:	f8d3 a000 	ldr.w	sl, [r3]
 8012940:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012944:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8012948:	e9c9 6604 	strd	r6, r6, [r9, #16]
 801294c:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8012950:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8012954:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8012958:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 801295c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801295e:	44c6      	add	lr, r8
 8012960:	f8dc 3000 	ldr.w	r3, [ip]
 8012964:	6033      	str	r3, [r6, #0]
 8012966:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 801296a:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801296e:	f002 fd8b 	bl	8015488 <rmw_create_wait_set>
 8012972:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8012976:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012978:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801297a:	b32b      	cbz	r3, 80129c8 <rcl_wait_set_init+0xf8>
 801297c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801297e:	9302      	str	r3, [sp, #8]
 8012980:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012982:	9301      	str	r3, [sp, #4]
 8012984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012986:	9300      	str	r3, [sp, #0]
 8012988:	4629      	mov	r1, r5
 801298a:	463b      	mov	r3, r7
 801298c:	4642      	mov	r2, r8
 801298e:	4620      	mov	r0, r4
 8012990:	f7ff fdce 	bl	8012530 <rcl_wait_set_resize>
 8012994:	4605      	mov	r5, r0
 8012996:	2800      	cmp	r0, #0
 8012998:	d0ab      	beq.n	80128f2 <rcl_wait_set_init+0x22>
 801299a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801299c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801299e:	b133      	cbz	r3, 80129ae <rcl_wait_set_init+0xde>
 80129a0:	4618      	mov	r0, r3
 80129a2:	f002 fd7b 	bl	801549c <rmw_destroy_wait_set>
 80129a6:	b198      	cbz	r0, 80129d0 <rcl_wait_set_init+0x100>
 80129a8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80129aa:	f44f 7561 	mov.w	r5, #900	@ 0x384
 80129ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80129b0:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80129b2:	4798      	blx	r3
 80129b4:	2300      	movs	r3, #0
 80129b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80129b8:	e79b      	b.n	80128f2 <rcl_wait_set_init+0x22>
 80129ba:	250b      	movs	r5, #11
 80129bc:	4628      	mov	r0, r5
 80129be:	b004      	add	sp, #16
 80129c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129c4:	2565      	movs	r5, #101	@ 0x65
 80129c6:	e794      	b.n	80128f2 <rcl_wait_set_init+0x22>
 80129c8:	250a      	movs	r5, #10
 80129ca:	e7f0      	b.n	80129ae <rcl_wait_set_init+0xde>
 80129cc:	250a      	movs	r5, #10
 80129ce:	e790      	b.n	80128f2 <rcl_wait_set_init+0x22>
 80129d0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80129d2:	e7ec      	b.n	80129ae <rcl_wait_set_init+0xde>

080129d4 <rcl_wait_set_add_guard_condition>:
 80129d4:	b318      	cbz	r0, 8012a1e <rcl_wait_set_add_guard_condition+0x4a>
 80129d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80129d8:	b570      	push	{r4, r5, r6, lr}
 80129da:	4604      	mov	r4, r0
 80129dc:	b30b      	cbz	r3, 8012a22 <rcl_wait_set_add_guard_condition+0x4e>
 80129de:	b319      	cbz	r1, 8012a28 <rcl_wait_set_add_guard_condition+0x54>
 80129e0:	68dd      	ldr	r5, [r3, #12]
 80129e2:	68c0      	ldr	r0, [r0, #12]
 80129e4:	4285      	cmp	r5, r0
 80129e6:	d217      	bcs.n	8012a18 <rcl_wait_set_add_guard_condition+0x44>
 80129e8:	68a0      	ldr	r0, [r4, #8]
 80129ea:	1c6e      	adds	r6, r5, #1
 80129ec:	60de      	str	r6, [r3, #12]
 80129ee:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80129f2:	b102      	cbz	r2, 80129f6 <rcl_wait_set_add_guard_condition+0x22>
 80129f4:	6015      	str	r5, [r2, #0]
 80129f6:	4608      	mov	r0, r1
 80129f8:	f004 fc64 	bl	80172c4 <rcl_guard_condition_get_rmw_handle>
 80129fc:	b150      	cbz	r0, 8012a14 <rcl_wait_set_add_guard_condition+0x40>
 80129fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012a00:	6842      	ldr	r2, [r0, #4]
 8012a02:	695b      	ldr	r3, [r3, #20]
 8012a04:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a08:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012a0a:	6913      	ldr	r3, [r2, #16]
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	2000      	movs	r0, #0
 8012a10:	6113      	str	r3, [r2, #16]
 8012a12:	bd70      	pop	{r4, r5, r6, pc}
 8012a14:	2001      	movs	r0, #1
 8012a16:	bd70      	pop	{r4, r5, r6, pc}
 8012a18:	f240 3086 	movw	r0, #902	@ 0x386
 8012a1c:	bd70      	pop	{r4, r5, r6, pc}
 8012a1e:	200b      	movs	r0, #11
 8012a20:	4770      	bx	lr
 8012a22:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012a26:	bd70      	pop	{r4, r5, r6, pc}
 8012a28:	200b      	movs	r0, #11
 8012a2a:	bd70      	pop	{r4, r5, r6, pc}

08012a2c <rcl_wait_set_add_timer>:
 8012a2c:	b328      	cbz	r0, 8012a7a <rcl_wait_set_add_timer+0x4e>
 8012a2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012a30:	b570      	push	{r4, r5, r6, lr}
 8012a32:	4604      	mov	r4, r0
 8012a34:	b31b      	cbz	r3, 8012a7e <rcl_wait_set_add_timer+0x52>
 8012a36:	b329      	cbz	r1, 8012a84 <rcl_wait_set_add_timer+0x58>
 8012a38:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8012a3a:	6965      	ldr	r5, [r4, #20]
 8012a3c:	42a8      	cmp	r0, r5
 8012a3e:	d219      	bcs.n	8012a74 <rcl_wait_set_add_timer+0x48>
 8012a40:	6925      	ldr	r5, [r4, #16]
 8012a42:	1c46      	adds	r6, r0, #1
 8012a44:	641e      	str	r6, [r3, #64]	@ 0x40
 8012a46:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8012a4a:	b102      	cbz	r2, 8012a4e <rcl_wait_set_add_timer+0x22>
 8012a4c:	6010      	str	r0, [r2, #0]
 8012a4e:	4608      	mov	r0, r1
 8012a50:	f7ff fbea 	bl	8012228 <rcl_timer_get_guard_condition>
 8012a54:	b160      	cbz	r0, 8012a70 <rcl_wait_set_add_timer+0x44>
 8012a56:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012a58:	68e3      	ldr	r3, [r4, #12]
 8012a5a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8012a5c:	3b01      	subs	r3, #1
 8012a5e:	441d      	add	r5, r3
 8012a60:	f004 fc30 	bl	80172c4 <rcl_guard_condition_get_rmw_handle>
 8012a64:	b180      	cbz	r0, 8012a88 <rcl_wait_set_add_timer+0x5c>
 8012a66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012a68:	6842      	ldr	r2, [r0, #4]
 8012a6a:	695b      	ldr	r3, [r3, #20]
 8012a6c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012a70:	2000      	movs	r0, #0
 8012a72:	bd70      	pop	{r4, r5, r6, pc}
 8012a74:	f240 3086 	movw	r0, #902	@ 0x386
 8012a78:	bd70      	pop	{r4, r5, r6, pc}
 8012a7a:	200b      	movs	r0, #11
 8012a7c:	4770      	bx	lr
 8012a7e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012a82:	bd70      	pop	{r4, r5, r6, pc}
 8012a84:	200b      	movs	r0, #11
 8012a86:	bd70      	pop	{r4, r5, r6, pc}
 8012a88:	2001      	movs	r0, #1
 8012a8a:	bd70      	pop	{r4, r5, r6, pc}

08012a8c <rcl_wait_set_add_client>:
 8012a8c:	b318      	cbz	r0, 8012ad6 <rcl_wait_set_add_client+0x4a>
 8012a8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012a90:	b570      	push	{r4, r5, r6, lr}
 8012a92:	4604      	mov	r4, r0
 8012a94:	b30b      	cbz	r3, 8012ada <rcl_wait_set_add_client+0x4e>
 8012a96:	b319      	cbz	r1, 8012ae0 <rcl_wait_set_add_client+0x54>
 8012a98:	699d      	ldr	r5, [r3, #24]
 8012a9a:	69c0      	ldr	r0, [r0, #28]
 8012a9c:	4285      	cmp	r5, r0
 8012a9e:	d217      	bcs.n	8012ad0 <rcl_wait_set_add_client+0x44>
 8012aa0:	69a0      	ldr	r0, [r4, #24]
 8012aa2:	1c6e      	adds	r6, r5, #1
 8012aa4:	619e      	str	r6, [r3, #24]
 8012aa6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012aaa:	b102      	cbz	r2, 8012aae <rcl_wait_set_add_client+0x22>
 8012aac:	6015      	str	r5, [r2, #0]
 8012aae:	4608      	mov	r0, r1
 8012ab0:	f7fe f8a4 	bl	8010bfc <rcl_client_get_rmw_handle>
 8012ab4:	b150      	cbz	r0, 8012acc <rcl_wait_set_add_client+0x40>
 8012ab6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012ab8:	6842      	ldr	r2, [r0, #4]
 8012aba:	6a1b      	ldr	r3, [r3, #32]
 8012abc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ac0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012ac2:	69d3      	ldr	r3, [r2, #28]
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	2000      	movs	r0, #0
 8012ac8:	61d3      	str	r3, [r2, #28]
 8012aca:	bd70      	pop	{r4, r5, r6, pc}
 8012acc:	2001      	movs	r0, #1
 8012ace:	bd70      	pop	{r4, r5, r6, pc}
 8012ad0:	f240 3086 	movw	r0, #902	@ 0x386
 8012ad4:	bd70      	pop	{r4, r5, r6, pc}
 8012ad6:	200b      	movs	r0, #11
 8012ad8:	4770      	bx	lr
 8012ada:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012ade:	bd70      	pop	{r4, r5, r6, pc}
 8012ae0:	200b      	movs	r0, #11
 8012ae2:	bd70      	pop	{r4, r5, r6, pc}

08012ae4 <rcl_wait_set_add_service>:
 8012ae4:	b318      	cbz	r0, 8012b2e <rcl_wait_set_add_service+0x4a>
 8012ae6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012ae8:	b570      	push	{r4, r5, r6, lr}
 8012aea:	4604      	mov	r4, r0
 8012aec:	b30b      	cbz	r3, 8012b32 <rcl_wait_set_add_service+0x4e>
 8012aee:	b319      	cbz	r1, 8012b38 <rcl_wait_set_add_service+0x54>
 8012af0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8012af2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012af4:	4285      	cmp	r5, r0
 8012af6:	d217      	bcs.n	8012b28 <rcl_wait_set_add_service+0x44>
 8012af8:	6a20      	ldr	r0, [r4, #32]
 8012afa:	1c6e      	adds	r6, r5, #1
 8012afc:	625e      	str	r6, [r3, #36]	@ 0x24
 8012afe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012b02:	b102      	cbz	r2, 8012b06 <rcl_wait_set_add_service+0x22>
 8012b04:	6015      	str	r5, [r2, #0]
 8012b06:	4608      	mov	r0, r1
 8012b08:	f7fe fe48 	bl	801179c <rcl_service_get_rmw_handle>
 8012b0c:	b150      	cbz	r0, 8012b24 <rcl_wait_set_add_service+0x40>
 8012b0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012b10:	6842      	ldr	r2, [r0, #4]
 8012b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b14:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012b18:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012b1a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	2000      	movs	r0, #0
 8012b20:	6293      	str	r3, [r2, #40]	@ 0x28
 8012b22:	bd70      	pop	{r4, r5, r6, pc}
 8012b24:	2001      	movs	r0, #1
 8012b26:	bd70      	pop	{r4, r5, r6, pc}
 8012b28:	f240 3086 	movw	r0, #902	@ 0x386
 8012b2c:	bd70      	pop	{r4, r5, r6, pc}
 8012b2e:	200b      	movs	r0, #11
 8012b30:	4770      	bx	lr
 8012b32:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012b36:	bd70      	pop	{r4, r5, r6, pc}
 8012b38:	200b      	movs	r0, #11
 8012b3a:	bd70      	pop	{r4, r5, r6, pc}
 8012b3c:	0000      	movs	r0, r0
	...

08012b40 <rcl_wait>:
 8012b40:	2800      	cmp	r0, #0
 8012b42:	f000 81d4 	beq.w	8012eee <rcl_wait+0x3ae>
 8012b46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b4a:	ed2d 8b02 	vpush	{d8}
 8012b4e:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8012b50:	b099      	sub	sp, #100	@ 0x64
 8012b52:	4604      	mov	r4, r0
 8012b54:	2d00      	cmp	r5, #0
 8012b56:	f000 8178 	beq.w	8012e4a <rcl_wait+0x30a>
 8012b5a:	461f      	mov	r7, r3
 8012b5c:	6843      	ldr	r3, [r0, #4]
 8012b5e:	4690      	mov	r8, r2
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	f000 809b 	beq.w	8012c9c <rcl_wait+0x15c>
 8012b66:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8012b68:	2e00      	cmp	r6, #0
 8012b6a:	f000 80b2 	beq.w	8012cd2 <rcl_wait+0x192>
 8012b6e:	2100      	movs	r1, #0
 8012b70:	468c      	mov	ip, r1
 8012b72:	460a      	mov	r2, r1
 8012b74:	46a6      	mov	lr, r4
 8012b76:	f8de 3010 	ldr.w	r3, [lr, #16]
 8012b7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012b7e:	b173      	cbz	r3, 8012b9e <rcl_wait+0x5e>
 8012b80:	f8de 300c 	ldr.w	r3, [lr, #12]
 8012b84:	6968      	ldr	r0, [r5, #20]
 8012b86:	440b      	add	r3, r1
 8012b88:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8012b8c:	b13c      	cbz	r4, 8012b9e <rcl_wait+0x5e>
 8012b8e:	692b      	ldr	r3, [r5, #16]
 8012b90:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8012b94:	3301      	adds	r3, #1
 8012b96:	612b      	str	r3, [r5, #16]
 8012b98:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 8012b9c:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8012b9e:	3101      	adds	r1, #1
 8012ba0:	f14c 0c00 	adc.w	ip, ip, #0
 8012ba4:	42b1      	cmp	r1, r6
 8012ba6:	f17c 0300 	sbcs.w	r3, ip, #0
 8012baa:	d3e4      	bcc.n	8012b76 <rcl_wait+0x36>
 8012bac:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8012e58 <rcl_wait+0x318>
 8012bb0:	ea58 0307 	orrs.w	r3, r8, r7
 8012bb4:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8012bb8:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 8012bbc:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8012bc0:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8012bc4:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8012bc8:	4674      	mov	r4, lr
 8012bca:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8012bce:	f000 8094 	beq.w	8012cfa <rcl_wait+0x1ba>
 8012bd2:	2e00      	cmp	r6, #0
 8012bd4:	f000 8145 	beq.w	8012e62 <rcl_wait+0x322>
 8012bd8:	2500      	movs	r5, #0
 8012bda:	46bb      	mov	fp, r7
 8012bdc:	e02c      	b.n	8012c38 <rcl_wait+0xf8>
 8012bde:	6923      	ldr	r3, [r4, #16]
 8012be0:	f853 0009 	ldr.w	r0, [r3, r9]
 8012be4:	a908      	add	r1, sp, #32
 8012be6:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012bea:	f7ff fafb 	bl	80121e4 <rcl_timer_get_next_call_time>
 8012bee:	f240 3321 	movw	r3, #801	@ 0x321
 8012bf2:	4298      	cmp	r0, r3
 8012bf4:	f000 80bb 	beq.w	8012d6e <rcl_wait+0x22e>
 8012bf8:	2800      	cmp	r0, #0
 8012bfa:	d165      	bne.n	8012cc8 <rcl_wait+0x188>
 8012bfc:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8012c00:	7830      	ldrb	r0, [r6, #0]
 8012c02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012c04:	ab18      	add	r3, sp, #96	@ 0x60
 8012c06:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8012c0a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8012c0e:	9205      	str	r2, [sp, #20]
 8012c10:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8012c14:	4297      	cmp	r7, r2
 8012c16:	9a05      	ldr	r2, [sp, #20]
 8012c18:	eb71 0202 	sbcs.w	r2, r1, r2
 8012c1c:	da06      	bge.n	8012c2c <rcl_wait+0xec>
 8012c1e:	e943 7108 	strd	r7, r1, [r3, #-32]
 8012c22:	ab18      	add	r3, sp, #96	@ 0x60
 8012c24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012c28:	f840 6c30 	str.w	r6, [r0, #-48]
 8012c2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012c2e:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8012c30:	3501      	adds	r5, #1
 8012c32:	42b5      	cmp	r5, r6
 8012c34:	f080 8114 	bcs.w	8012e60 <rcl_wait+0x320>
 8012c38:	6923      	ldr	r3, [r4, #16]
 8012c3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012c3e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8012c42:	2800      	cmp	r0, #0
 8012c44:	d0f4      	beq.n	8012c30 <rcl_wait+0xf0>
 8012c46:	a907      	add	r1, sp, #28
 8012c48:	f7ff f9f8 	bl	801203c <rcl_timer_clock>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	2800      	cmp	r0, #0
 8012c50:	f040 8141 	bne.w	8012ed6 <rcl_wait+0x396>
 8012c54:	9807      	ldr	r0, [sp, #28]
 8012c56:	7802      	ldrb	r2, [r0, #0]
 8012c58:	2a01      	cmp	r2, #1
 8012c5a:	d1c0      	bne.n	8012bde <rcl_wait+0x9e>
 8012c5c:	f10d 011b 	add.w	r1, sp, #27
 8012c60:	f88d 301b 	strb.w	r3, [sp, #27]
 8012c64:	f7fe ffba 	bl	8011bdc <rcl_is_enabled_ros_time_override>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	2800      	cmp	r0, #0
 8012c6c:	f040 8133 	bne.w	8012ed6 <rcl_wait+0x396>
 8012c70:	6923      	ldr	r3, [r4, #16]
 8012c72:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8012c76:	f853 0009 	ldr.w	r0, [r3, r9]
 8012c7a:	2900      	cmp	r1, #0
 8012c7c:	d0b0      	beq.n	8012be0 <rcl_wait+0xa0>
 8012c7e:	ae08      	add	r6, sp, #32
 8012c80:	4631      	mov	r1, r6
 8012c82:	f88d 2020 	strb.w	r2, [sp, #32]
 8012c86:	f7ff fa73 	bl	8012170 <rcl_timer_is_ready>
 8012c8a:	2800      	cmp	r0, #0
 8012c8c:	f040 8123 	bne.w	8012ed6 <rcl_wait+0x396>
 8012c90:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d0c9      	beq.n	8012c2c <rcl_wait+0xec>
 8012c98:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012c9a:	e02f      	b.n	8012cfc <rcl_wait+0x1bc>
 8012c9c:	68c3      	ldr	r3, [r0, #12]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	f47f af61 	bne.w	8012b66 <rcl_wait+0x26>
 8012ca4:	6943      	ldr	r3, [r0, #20]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	f47f af5d 	bne.w	8012b66 <rcl_wait+0x26>
 8012cac:	69c3      	ldr	r3, [r0, #28]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	f47f af59 	bne.w	8012b66 <rcl_wait+0x26>
 8012cb4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	f47f af55 	bne.w	8012b66 <rcl_wait+0x26>
 8012cbc:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	f47f af51 	bne.w	8012b66 <rcl_wait+0x26>
 8012cc4:	f240 3085 	movw	r0, #901	@ 0x385
 8012cc8:	b019      	add	sp, #100	@ 0x64
 8012cca:	ecbd 8b02 	vpop	{d8}
 8012cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cd2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8012cda:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8012cde:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8012ce2:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8012ce6:	ea58 0307 	orrs.w	r3, r8, r7
 8012cea:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8012cee:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 8012cf2:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8012cf6:	f040 80b4 	bne.w	8012e62 <rcl_wait+0x322>
 8012cfa:	ae08      	add	r6, sp, #32
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	2300      	movs	r3, #0
 8012d00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012d04:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012d08:	9602      	str	r6, [sp, #8]
 8012d0a:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8012d0c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8012d10:	e9cd 3200 	strd	r3, r2, [sp]
 8012d14:	f105 0110 	add.w	r1, r5, #16
 8012d18:	f105 031c 	add.w	r3, r5, #28
 8012d1c:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8012d20:	1d28      	adds	r0, r5, #4
 8012d22:	f002 fa2f 	bl	8015184 <rmw_wait>
 8012d26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012d2a:	4680      	mov	r8, r0
 8012d2c:	b332      	cbz	r2, 8012d7c <rcl_wait+0x23c>
 8012d2e:	2500      	movs	r5, #0
 8012d30:	462f      	mov	r7, r5
 8012d32:	462e      	mov	r6, r5
 8012d34:	e007      	b.n	8012d46 <rcl_wait+0x206>
 8012d36:	6922      	ldr	r2, [r4, #16]
 8012d38:	f842 3009 	str.w	r3, [r2, r9]
 8012d3c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012d40:	3501      	adds	r5, #1
 8012d42:	4295      	cmp	r5, r2
 8012d44:	d21b      	bcs.n	8012d7e <rcl_wait+0x23e>
 8012d46:	6920      	ldr	r0, [r4, #16]
 8012d48:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8012d4c:	a907      	add	r1, sp, #28
 8012d4e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d0f4      	beq.n	8012d40 <rcl_wait+0x200>
 8012d56:	f88d 601c 	strb.w	r6, [sp, #28]
 8012d5a:	f7ff fa09 	bl	8012170 <rcl_timer_is_ready>
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	d1b2      	bne.n	8012cc8 <rcl_wait+0x188>
 8012d62:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d0e5      	beq.n	8012d36 <rcl_wait+0x1f6>
 8012d6a:	461f      	mov	r7, r3
 8012d6c:	e7e6      	b.n	8012d3c <rcl_wait+0x1fc>
 8012d6e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012d70:	6923      	ldr	r3, [r4, #16]
 8012d72:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8012d74:	2200      	movs	r2, #0
 8012d76:	f843 2009 	str.w	r2, [r3, r9]
 8012d7a:	e759      	b.n	8012c30 <rcl_wait+0xf0>
 8012d7c:	4617      	mov	r7, r2
 8012d7e:	f038 0002 	bics.w	r0, r8, #2
 8012d82:	f040 80a8 	bne.w	8012ed6 <rcl_wait+0x396>
 8012d86:	6866      	ldr	r6, [r4, #4]
 8012d88:	4602      	mov	r2, r0
 8012d8a:	b91e      	cbnz	r6, 8012d94 <rcl_wait+0x254>
 8012d8c:	e00d      	b.n	8012daa <rcl_wait+0x26a>
 8012d8e:	3201      	adds	r2, #1
 8012d90:	4296      	cmp	r6, r2
 8012d92:	d00a      	beq.n	8012daa <rcl_wait+0x26a>
 8012d94:	6899      	ldr	r1, [r3, #8]
 8012d96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012d9a:	2900      	cmp	r1, #0
 8012d9c:	d1f7      	bne.n	8012d8e <rcl_wait+0x24e>
 8012d9e:	6825      	ldr	r5, [r4, #0]
 8012da0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012da4:	3201      	adds	r2, #1
 8012da6:	4296      	cmp	r6, r2
 8012da8:	d1f4      	bne.n	8012d94 <rcl_wait+0x254>
 8012daa:	68e6      	ldr	r6, [r4, #12]
 8012dac:	2200      	movs	r2, #0
 8012dae:	b91e      	cbnz	r6, 8012db8 <rcl_wait+0x278>
 8012db0:	e00d      	b.n	8012dce <rcl_wait+0x28e>
 8012db2:	3201      	adds	r2, #1
 8012db4:	42b2      	cmp	r2, r6
 8012db6:	d00a      	beq.n	8012dce <rcl_wait+0x28e>
 8012db8:	6959      	ldr	r1, [r3, #20]
 8012dba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012dbe:	2900      	cmp	r1, #0
 8012dc0:	d1f7      	bne.n	8012db2 <rcl_wait+0x272>
 8012dc2:	68a5      	ldr	r5, [r4, #8]
 8012dc4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012dc8:	3201      	adds	r2, #1
 8012dca:	42b2      	cmp	r2, r6
 8012dcc:	d1f4      	bne.n	8012db8 <rcl_wait+0x278>
 8012dce:	69e6      	ldr	r6, [r4, #28]
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	b91e      	cbnz	r6, 8012ddc <rcl_wait+0x29c>
 8012dd4:	e00d      	b.n	8012df2 <rcl_wait+0x2b2>
 8012dd6:	3201      	adds	r2, #1
 8012dd8:	4296      	cmp	r6, r2
 8012dda:	d00a      	beq.n	8012df2 <rcl_wait+0x2b2>
 8012ddc:	6a19      	ldr	r1, [r3, #32]
 8012dde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012de2:	2900      	cmp	r1, #0
 8012de4:	d1f7      	bne.n	8012dd6 <rcl_wait+0x296>
 8012de6:	69a5      	ldr	r5, [r4, #24]
 8012de8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012dec:	3201      	adds	r2, #1
 8012dee:	4296      	cmp	r6, r2
 8012df0:	d1f4      	bne.n	8012ddc <rcl_wait+0x29c>
 8012df2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8012df4:	2200      	movs	r2, #0
 8012df6:	b91e      	cbnz	r6, 8012e00 <rcl_wait+0x2c0>
 8012df8:	e00d      	b.n	8012e16 <rcl_wait+0x2d6>
 8012dfa:	3201      	adds	r2, #1
 8012dfc:	42b2      	cmp	r2, r6
 8012dfe:	d00a      	beq.n	8012e16 <rcl_wait+0x2d6>
 8012e00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012e02:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012e06:	2900      	cmp	r1, #0
 8012e08:	d1f7      	bne.n	8012dfa <rcl_wait+0x2ba>
 8012e0a:	6a25      	ldr	r5, [r4, #32]
 8012e0c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012e10:	3201      	adds	r2, #1
 8012e12:	42b2      	cmp	r2, r6
 8012e14:	d1f4      	bne.n	8012e00 <rcl_wait+0x2c0>
 8012e16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e18:	2200      	movs	r2, #0
 8012e1a:	b91e      	cbnz	r6, 8012e24 <rcl_wait+0x2e4>
 8012e1c:	e00d      	b.n	8012e3a <rcl_wait+0x2fa>
 8012e1e:	3201      	adds	r2, #1
 8012e20:	42b2      	cmp	r2, r6
 8012e22:	d00a      	beq.n	8012e3a <rcl_wait+0x2fa>
 8012e24:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012e26:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012e2a:	2900      	cmp	r1, #0
 8012e2c:	d1f7      	bne.n	8012e1e <rcl_wait+0x2de>
 8012e2e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8012e30:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012e34:	3201      	adds	r2, #1
 8012e36:	42b2      	cmp	r2, r6
 8012e38:	d1f4      	bne.n	8012e24 <rcl_wait+0x2e4>
 8012e3a:	f1b8 0f02 	cmp.w	r8, #2
 8012e3e:	f47f af43 	bne.w	8012cc8 <rcl_wait+0x188>
 8012e42:	f087 0701 	eor.w	r7, r7, #1
 8012e46:	0078      	lsls	r0, r7, #1
 8012e48:	e73e      	b.n	8012cc8 <rcl_wait+0x188>
 8012e4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012e4e:	b019      	add	sp, #100	@ 0x64
 8012e50:	ecbd 8b02 	vpop	{d8}
 8012e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e58:	ffffffff 	.word	0xffffffff
 8012e5c:	7fffffff 	.word	0x7fffffff
 8012e60:	465f      	mov	r7, fp
 8012e62:	f1b8 0f01 	cmp.w	r8, #1
 8012e66:	f177 0300 	sbcs.w	r3, r7, #0
 8012e6a:	db3a      	blt.n	8012ee2 <rcl_wait+0x3a2>
 8012e6c:	2601      	movs	r6, #1
 8012e6e:	ad10      	add	r5, sp, #64	@ 0x40
 8012e70:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 8012e74:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8012e78:	a908      	add	r1, sp, #32
 8012e7a:	b1a0      	cbz	r0, 8012ea6 <rcl_wait+0x366>
 8012e7c:	f7fe fea2 	bl	8011bc4 <rcl_clock_get_now>
 8012e80:	2800      	cmp	r0, #0
 8012e82:	f47f af21 	bne.w	8012cc8 <rcl_wait+0x188>
 8012e86:	9a08      	ldr	r2, [sp, #32]
 8012e88:	68ab      	ldr	r3, [r5, #8]
 8012e8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012e8c:	1a9b      	subs	r3, r3, r2
 8012e8e:	68ea      	ldr	r2, [r5, #12]
 8012e90:	eb62 0201 	sbc.w	r2, r2, r1
 8012e94:	4598      	cmp	r8, r3
 8012e96:	eb77 0102 	sbcs.w	r1, r7, r2
 8012e9a:	bfba      	itte	lt
 8012e9c:	4643      	movlt	r3, r8
 8012e9e:	463a      	movlt	r2, r7
 8012ea0:	2601      	movge	r6, #1
 8012ea2:	4698      	mov	r8, r3
 8012ea4:	4617      	mov	r7, r2
 8012ea6:	3508      	adds	r5, #8
 8012ea8:	45a9      	cmp	r9, r5
 8012eaa:	d1e3      	bne.n	8012e74 <rcl_wait+0x334>
 8012eac:	2f00      	cmp	r7, #0
 8012eae:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012eb0:	bfab      	itete	ge
 8012eb2:	4640      	movge	r0, r8
 8012eb4:	2000      	movlt	r0, #0
 8012eb6:	4639      	movge	r1, r7
 8012eb8:	2100      	movlt	r1, #0
 8012eba:	2e00      	cmp	r6, #0
 8012ebc:	f43f af24 	beq.w	8012d08 <rcl_wait+0x1c8>
 8012ec0:	a30d      	add	r3, pc, #52	@ (adr r3, 8012ef8 <rcl_wait+0x3b8>)
 8012ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec6:	f7ed fc9f 	bl	8000808 <__aeabi_ldivmod>
 8012eca:	ae08      	add	r6, sp, #32
 8012ecc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012ed0:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012ed4:	e718      	b.n	8012d08 <rcl_wait+0x1c8>
 8012ed6:	2001      	movs	r0, #1
 8012ed8:	b019      	add	sp, #100	@ 0x64
 8012eda:	ecbd 8b02 	vpop	{d8}
 8012ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee2:	2600      	movs	r6, #0
 8012ee4:	f04f 38ff 	mov.w	r8, #4294967295
 8012ee8:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012eec:	e7bf      	b.n	8012e6e <rcl_wait+0x32e>
 8012eee:	200b      	movs	r0, #11
 8012ef0:	4770      	bx	lr
 8012ef2:	bf00      	nop
 8012ef4:	f3af 8000 	nop.w
 8012ef8:	3b9aca00 	.word	0x3b9aca00
 8012efc:	00000000 	.word	0x00000000

08012f00 <rcl_action_take_goal_response>:
 8012f00:	b3b0      	cbz	r0, 8012f70 <rcl_action_take_goal_response+0x70>
 8012f02:	b570      	push	{r4, r5, r6, lr}
 8012f04:	4604      	mov	r4, r0
 8012f06:	6800      	ldr	r0, [r0, #0]
 8012f08:	b368      	cbz	r0, 8012f66 <rcl_action_take_goal_response+0x66>
 8012f0a:	460d      	mov	r5, r1
 8012f0c:	4616      	mov	r6, r2
 8012f0e:	f7fd ff3b 	bl	8010d88 <rcl_client_is_valid>
 8012f12:	b330      	cbz	r0, 8012f62 <rcl_action_take_goal_response+0x62>
 8012f14:	6820      	ldr	r0, [r4, #0]
 8012f16:	3004      	adds	r0, #4
 8012f18:	f7fd ff36 	bl	8010d88 <rcl_client_is_valid>
 8012f1c:	b308      	cbz	r0, 8012f62 <rcl_action_take_goal_response+0x62>
 8012f1e:	6820      	ldr	r0, [r4, #0]
 8012f20:	3008      	adds	r0, #8
 8012f22:	f7fd ff31 	bl	8010d88 <rcl_client_is_valid>
 8012f26:	b1e0      	cbz	r0, 8012f62 <rcl_action_take_goal_response+0x62>
 8012f28:	6820      	ldr	r0, [r4, #0]
 8012f2a:	300c      	adds	r0, #12
 8012f2c:	f7fe fdae 	bl	8011a8c <rcl_subscription_is_valid>
 8012f30:	b1b8      	cbz	r0, 8012f62 <rcl_action_take_goal_response+0x62>
 8012f32:	6820      	ldr	r0, [r4, #0]
 8012f34:	3010      	adds	r0, #16
 8012f36:	f7fe fda9 	bl	8011a8c <rcl_subscription_is_valid>
 8012f3a:	b190      	cbz	r0, 8012f62 <rcl_action_take_goal_response+0x62>
 8012f3c:	b1b5      	cbz	r5, 8012f6c <rcl_action_take_goal_response+0x6c>
 8012f3e:	b1ae      	cbz	r6, 8012f6c <rcl_action_take_goal_response+0x6c>
 8012f40:	6820      	ldr	r0, [r4, #0]
 8012f42:	4632      	mov	r2, r6
 8012f44:	4629      	mov	r1, r5
 8012f46:	f7fd feb3 	bl	8010cb0 <rcl_take_response>
 8012f4a:	b148      	cbz	r0, 8012f60 <rcl_action_take_goal_response+0x60>
 8012f4c:	280a      	cmp	r0, #10
 8012f4e:	d007      	beq.n	8012f60 <rcl_action_take_goal_response+0x60>
 8012f50:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012f54:	f241 0307 	movw	r3, #4103	@ 0x1007
 8012f58:	4290      	cmp	r0, r2
 8012f5a:	bf0c      	ite	eq
 8012f5c:	4618      	moveq	r0, r3
 8012f5e:	2001      	movne	r0, #1
 8012f60:	bd70      	pop	{r4, r5, r6, pc}
 8012f62:	f7f7 fad5 	bl	800a510 <rcutils_reset_error>
 8012f66:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012f6a:	bd70      	pop	{r4, r5, r6, pc}
 8012f6c:	200b      	movs	r0, #11
 8012f6e:	bd70      	pop	{r4, r5, r6, pc}
 8012f70:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012f74:	4770      	bx	lr
 8012f76:	bf00      	nop

08012f78 <rcl_action_send_result_request>:
 8012f78:	b378      	cbz	r0, 8012fda <rcl_action_send_result_request+0x62>
 8012f7a:	b570      	push	{r4, r5, r6, lr}
 8012f7c:	4604      	mov	r4, r0
 8012f7e:	6800      	ldr	r0, [r0, #0]
 8012f80:	b330      	cbz	r0, 8012fd0 <rcl_action_send_result_request+0x58>
 8012f82:	460d      	mov	r5, r1
 8012f84:	4616      	mov	r6, r2
 8012f86:	f7fd feff 	bl	8010d88 <rcl_client_is_valid>
 8012f8a:	b1f8      	cbz	r0, 8012fcc <rcl_action_send_result_request+0x54>
 8012f8c:	6820      	ldr	r0, [r4, #0]
 8012f8e:	3004      	adds	r0, #4
 8012f90:	f7fd fefa 	bl	8010d88 <rcl_client_is_valid>
 8012f94:	b1d0      	cbz	r0, 8012fcc <rcl_action_send_result_request+0x54>
 8012f96:	6820      	ldr	r0, [r4, #0]
 8012f98:	3008      	adds	r0, #8
 8012f9a:	f7fd fef5 	bl	8010d88 <rcl_client_is_valid>
 8012f9e:	b1a8      	cbz	r0, 8012fcc <rcl_action_send_result_request+0x54>
 8012fa0:	6820      	ldr	r0, [r4, #0]
 8012fa2:	300c      	adds	r0, #12
 8012fa4:	f7fe fd72 	bl	8011a8c <rcl_subscription_is_valid>
 8012fa8:	b180      	cbz	r0, 8012fcc <rcl_action_send_result_request+0x54>
 8012faa:	6820      	ldr	r0, [r4, #0]
 8012fac:	3010      	adds	r0, #16
 8012fae:	f7fe fd6d 	bl	8011a8c <rcl_subscription_is_valid>
 8012fb2:	b158      	cbz	r0, 8012fcc <rcl_action_send_result_request+0x54>
 8012fb4:	b17d      	cbz	r5, 8012fd6 <rcl_action_send_result_request+0x5e>
 8012fb6:	b176      	cbz	r6, 8012fd6 <rcl_action_send_result_request+0x5e>
 8012fb8:	6820      	ldr	r0, [r4, #0]
 8012fba:	4632      	mov	r2, r6
 8012fbc:	4629      	mov	r1, r5
 8012fbe:	3008      	adds	r0, #8
 8012fc0:	f7fd fe22 	bl	8010c08 <rcl_send_request>
 8012fc4:	3800      	subs	r0, #0
 8012fc6:	bf18      	it	ne
 8012fc8:	2001      	movne	r0, #1
 8012fca:	bd70      	pop	{r4, r5, r6, pc}
 8012fcc:	f7f7 faa0 	bl	800a510 <rcutils_reset_error>
 8012fd0:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012fd4:	bd70      	pop	{r4, r5, r6, pc}
 8012fd6:	200b      	movs	r0, #11
 8012fd8:	bd70      	pop	{r4, r5, r6, pc}
 8012fda:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012fde:	4770      	bx	lr

08012fe0 <rcl_action_take_result_response>:
 8012fe0:	2800      	cmp	r0, #0
 8012fe2:	d037      	beq.n	8013054 <rcl_action_take_result_response+0x74>
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	6800      	ldr	r0, [r0, #0]
 8012fea:	b370      	cbz	r0, 801304a <rcl_action_take_result_response+0x6a>
 8012fec:	460d      	mov	r5, r1
 8012fee:	4616      	mov	r6, r2
 8012ff0:	f7fd feca 	bl	8010d88 <rcl_client_is_valid>
 8012ff4:	b338      	cbz	r0, 8013046 <rcl_action_take_result_response+0x66>
 8012ff6:	6820      	ldr	r0, [r4, #0]
 8012ff8:	3004      	adds	r0, #4
 8012ffa:	f7fd fec5 	bl	8010d88 <rcl_client_is_valid>
 8012ffe:	b310      	cbz	r0, 8013046 <rcl_action_take_result_response+0x66>
 8013000:	6820      	ldr	r0, [r4, #0]
 8013002:	3008      	adds	r0, #8
 8013004:	f7fd fec0 	bl	8010d88 <rcl_client_is_valid>
 8013008:	b1e8      	cbz	r0, 8013046 <rcl_action_take_result_response+0x66>
 801300a:	6820      	ldr	r0, [r4, #0]
 801300c:	300c      	adds	r0, #12
 801300e:	f7fe fd3d 	bl	8011a8c <rcl_subscription_is_valid>
 8013012:	b1c0      	cbz	r0, 8013046 <rcl_action_take_result_response+0x66>
 8013014:	6820      	ldr	r0, [r4, #0]
 8013016:	3010      	adds	r0, #16
 8013018:	f7fe fd38 	bl	8011a8c <rcl_subscription_is_valid>
 801301c:	b198      	cbz	r0, 8013046 <rcl_action_take_result_response+0x66>
 801301e:	b1bd      	cbz	r5, 8013050 <rcl_action_take_result_response+0x70>
 8013020:	b1b6      	cbz	r6, 8013050 <rcl_action_take_result_response+0x70>
 8013022:	6820      	ldr	r0, [r4, #0]
 8013024:	4632      	mov	r2, r6
 8013026:	4629      	mov	r1, r5
 8013028:	3008      	adds	r0, #8
 801302a:	f7fd fe41 	bl	8010cb0 <rcl_take_response>
 801302e:	b148      	cbz	r0, 8013044 <rcl_action_take_result_response+0x64>
 8013030:	280a      	cmp	r0, #10
 8013032:	d007      	beq.n	8013044 <rcl_action_take_result_response+0x64>
 8013034:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013038:	f241 0307 	movw	r3, #4103	@ 0x1007
 801303c:	4290      	cmp	r0, r2
 801303e:	bf0c      	ite	eq
 8013040:	4618      	moveq	r0, r3
 8013042:	2001      	movne	r0, #1
 8013044:	bd70      	pop	{r4, r5, r6, pc}
 8013046:	f7f7 fa63 	bl	800a510 <rcutils_reset_error>
 801304a:	f241 0006 	movw	r0, #4102	@ 0x1006
 801304e:	bd70      	pop	{r4, r5, r6, pc}
 8013050:	200b      	movs	r0, #11
 8013052:	bd70      	pop	{r4, r5, r6, pc}
 8013054:	f241 0006 	movw	r0, #4102	@ 0x1006
 8013058:	4770      	bx	lr
 801305a:	bf00      	nop

0801305c <rcl_action_take_cancel_response>:
 801305c:	2800      	cmp	r0, #0
 801305e:	d037      	beq.n	80130d0 <rcl_action_take_cancel_response+0x74>
 8013060:	b570      	push	{r4, r5, r6, lr}
 8013062:	4604      	mov	r4, r0
 8013064:	6800      	ldr	r0, [r0, #0]
 8013066:	b370      	cbz	r0, 80130c6 <rcl_action_take_cancel_response+0x6a>
 8013068:	460d      	mov	r5, r1
 801306a:	4616      	mov	r6, r2
 801306c:	f7fd fe8c 	bl	8010d88 <rcl_client_is_valid>
 8013070:	b338      	cbz	r0, 80130c2 <rcl_action_take_cancel_response+0x66>
 8013072:	6820      	ldr	r0, [r4, #0]
 8013074:	3004      	adds	r0, #4
 8013076:	f7fd fe87 	bl	8010d88 <rcl_client_is_valid>
 801307a:	b310      	cbz	r0, 80130c2 <rcl_action_take_cancel_response+0x66>
 801307c:	6820      	ldr	r0, [r4, #0]
 801307e:	3008      	adds	r0, #8
 8013080:	f7fd fe82 	bl	8010d88 <rcl_client_is_valid>
 8013084:	b1e8      	cbz	r0, 80130c2 <rcl_action_take_cancel_response+0x66>
 8013086:	6820      	ldr	r0, [r4, #0]
 8013088:	300c      	adds	r0, #12
 801308a:	f7fe fcff 	bl	8011a8c <rcl_subscription_is_valid>
 801308e:	b1c0      	cbz	r0, 80130c2 <rcl_action_take_cancel_response+0x66>
 8013090:	6820      	ldr	r0, [r4, #0]
 8013092:	3010      	adds	r0, #16
 8013094:	f7fe fcfa 	bl	8011a8c <rcl_subscription_is_valid>
 8013098:	b198      	cbz	r0, 80130c2 <rcl_action_take_cancel_response+0x66>
 801309a:	b1bd      	cbz	r5, 80130cc <rcl_action_take_cancel_response+0x70>
 801309c:	b1b6      	cbz	r6, 80130cc <rcl_action_take_cancel_response+0x70>
 801309e:	6820      	ldr	r0, [r4, #0]
 80130a0:	4632      	mov	r2, r6
 80130a2:	4629      	mov	r1, r5
 80130a4:	3004      	adds	r0, #4
 80130a6:	f7fd fe03 	bl	8010cb0 <rcl_take_response>
 80130aa:	b148      	cbz	r0, 80130c0 <rcl_action_take_cancel_response+0x64>
 80130ac:	280a      	cmp	r0, #10
 80130ae:	d007      	beq.n	80130c0 <rcl_action_take_cancel_response+0x64>
 80130b0:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80130b4:	f241 0307 	movw	r3, #4103	@ 0x1007
 80130b8:	4290      	cmp	r0, r2
 80130ba:	bf0c      	ite	eq
 80130bc:	4618      	moveq	r0, r3
 80130be:	2001      	movne	r0, #1
 80130c0:	bd70      	pop	{r4, r5, r6, pc}
 80130c2:	f7f7 fa25 	bl	800a510 <rcutils_reset_error>
 80130c6:	f241 0006 	movw	r0, #4102	@ 0x1006
 80130ca:	bd70      	pop	{r4, r5, r6, pc}
 80130cc:	200b      	movs	r0, #11
 80130ce:	bd70      	pop	{r4, r5, r6, pc}
 80130d0:	f241 0006 	movw	r0, #4102	@ 0x1006
 80130d4:	4770      	bx	lr
 80130d6:	bf00      	nop

080130d8 <rcl_action_take_feedback>:
 80130d8:	2800      	cmp	r0, #0
 80130da:	d037      	beq.n	801314c <rcl_action_take_feedback+0x74>
 80130dc:	b530      	push	{r4, r5, lr}
 80130de:	4604      	mov	r4, r0
 80130e0:	6800      	ldr	r0, [r0, #0]
 80130e2:	b08f      	sub	sp, #60	@ 0x3c
 80130e4:	b358      	cbz	r0, 801313e <rcl_action_take_feedback+0x66>
 80130e6:	460d      	mov	r5, r1
 80130e8:	f7fd fe4e 	bl	8010d88 <rcl_client_is_valid>
 80130ec:	b328      	cbz	r0, 801313a <rcl_action_take_feedback+0x62>
 80130ee:	6820      	ldr	r0, [r4, #0]
 80130f0:	3004      	adds	r0, #4
 80130f2:	f7fd fe49 	bl	8010d88 <rcl_client_is_valid>
 80130f6:	b300      	cbz	r0, 801313a <rcl_action_take_feedback+0x62>
 80130f8:	6820      	ldr	r0, [r4, #0]
 80130fa:	3008      	adds	r0, #8
 80130fc:	f7fd fe44 	bl	8010d88 <rcl_client_is_valid>
 8013100:	b1d8      	cbz	r0, 801313a <rcl_action_take_feedback+0x62>
 8013102:	6820      	ldr	r0, [r4, #0]
 8013104:	300c      	adds	r0, #12
 8013106:	f7fe fcc1 	bl	8011a8c <rcl_subscription_is_valid>
 801310a:	b1b0      	cbz	r0, 801313a <rcl_action_take_feedback+0x62>
 801310c:	6820      	ldr	r0, [r4, #0]
 801310e:	3010      	adds	r0, #16
 8013110:	f7fe fcbc 	bl	8011a8c <rcl_subscription_is_valid>
 8013114:	b188      	cbz	r0, 801313a <rcl_action_take_feedback+0x62>
 8013116:	b1b5      	cbz	r5, 8013146 <rcl_action_take_feedback+0x6e>
 8013118:	6820      	ldr	r0, [r4, #0]
 801311a:	2300      	movs	r3, #0
 801311c:	466a      	mov	r2, sp
 801311e:	4629      	mov	r1, r5
 8013120:	300c      	adds	r0, #12
 8013122:	f7fe fc55 	bl	80119d0 <rcl_take>
 8013126:	b160      	cbz	r0, 8013142 <rcl_action_take_feedback+0x6a>
 8013128:	f240 1391 	movw	r3, #401	@ 0x191
 801312c:	4298      	cmp	r0, r3
 801312e:	d010      	beq.n	8013152 <rcl_action_take_feedback+0x7a>
 8013130:	280a      	cmp	r0, #10
 8013132:	bf18      	it	ne
 8013134:	2001      	movne	r0, #1
 8013136:	b00f      	add	sp, #60	@ 0x3c
 8013138:	bd30      	pop	{r4, r5, pc}
 801313a:	f7f7 f9e9 	bl	800a510 <rcutils_reset_error>
 801313e:	f241 0006 	movw	r0, #4102	@ 0x1006
 8013142:	b00f      	add	sp, #60	@ 0x3c
 8013144:	bd30      	pop	{r4, r5, pc}
 8013146:	200b      	movs	r0, #11
 8013148:	b00f      	add	sp, #60	@ 0x3c
 801314a:	bd30      	pop	{r4, r5, pc}
 801314c:	f241 0006 	movw	r0, #4102	@ 0x1006
 8013150:	4770      	bx	lr
 8013152:	f241 0007 	movw	r0, #4103	@ 0x1007
 8013156:	e7f4      	b.n	8013142 <rcl_action_take_feedback+0x6a>

08013158 <rcl_action_wait_set_add_action_client>:
 8013158:	2800      	cmp	r0, #0
 801315a:	d045      	beq.n	80131e8 <rcl_action_wait_set_add_action_client+0x90>
 801315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801315e:	460c      	mov	r4, r1
 8013160:	2900      	cmp	r1, #0
 8013162:	d03e      	beq.n	80131e2 <rcl_action_wait_set_add_action_client+0x8a>
 8013164:	4605      	mov	r5, r0
 8013166:	6808      	ldr	r0, [r1, #0]
 8013168:	2800      	cmp	r0, #0
 801316a:	d03a      	beq.n	80131e2 <rcl_action_wait_set_add_action_client+0x8a>
 801316c:	4617      	mov	r7, r2
 801316e:	461e      	mov	r6, r3
 8013170:	f7fd fe0a 	bl	8010d88 <rcl_client_is_valid>
 8013174:	b398      	cbz	r0, 80131de <rcl_action_wait_set_add_action_client+0x86>
 8013176:	6820      	ldr	r0, [r4, #0]
 8013178:	3004      	adds	r0, #4
 801317a:	f7fd fe05 	bl	8010d88 <rcl_client_is_valid>
 801317e:	b370      	cbz	r0, 80131de <rcl_action_wait_set_add_action_client+0x86>
 8013180:	6820      	ldr	r0, [r4, #0]
 8013182:	3008      	adds	r0, #8
 8013184:	f7fd fe00 	bl	8010d88 <rcl_client_is_valid>
 8013188:	b348      	cbz	r0, 80131de <rcl_action_wait_set_add_action_client+0x86>
 801318a:	6820      	ldr	r0, [r4, #0]
 801318c:	300c      	adds	r0, #12
 801318e:	f7fe fc7d 	bl	8011a8c <rcl_subscription_is_valid>
 8013192:	b320      	cbz	r0, 80131de <rcl_action_wait_set_add_action_client+0x86>
 8013194:	6820      	ldr	r0, [r4, #0]
 8013196:	3010      	adds	r0, #16
 8013198:	f7fe fc78 	bl	8011a8c <rcl_subscription_is_valid>
 801319c:	b1f8      	cbz	r0, 80131de <rcl_action_wait_set_add_action_client+0x86>
 801319e:	6821      	ldr	r1, [r4, #0]
 80131a0:	4628      	mov	r0, r5
 80131a2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80131a6:	f7ff fc71 	bl	8012a8c <rcl_wait_set_add_client>
 80131aa:	b9b8      	cbnz	r0, 80131dc <rcl_action_wait_set_add_action_client+0x84>
 80131ac:	6821      	ldr	r1, [r4, #0]
 80131ae:	4628      	mov	r0, r5
 80131b0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80131b4:	3104      	adds	r1, #4
 80131b6:	f7ff fc69 	bl	8012a8c <rcl_wait_set_add_client>
 80131ba:	b978      	cbnz	r0, 80131dc <rcl_action_wait_set_add_action_client+0x84>
 80131bc:	6821      	ldr	r1, [r4, #0]
 80131be:	4628      	mov	r0, r5
 80131c0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80131c4:	3108      	adds	r1, #8
 80131c6:	f7ff fc61 	bl	8012a8c <rcl_wait_set_add_client>
 80131ca:	b938      	cbnz	r0, 80131dc <rcl_action_wait_set_add_action_client+0x84>
 80131cc:	6821      	ldr	r1, [r4, #0]
 80131ce:	4628      	mov	r0, r5
 80131d0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80131d4:	310c      	adds	r1, #12
 80131d6:	f7ff f903 	bl	80123e0 <rcl_wait_set_add_subscription>
 80131da:	b140      	cbz	r0, 80131ee <rcl_action_wait_set_add_action_client+0x96>
 80131dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131de:	f7f7 f997 	bl	800a510 <rcutils_reset_error>
 80131e2:	f241 0006 	movw	r0, #4102	@ 0x1006
 80131e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80131ec:	4770      	bx	lr
 80131ee:	6821      	ldr	r1, [r4, #0]
 80131f0:	4628      	mov	r0, r5
 80131f2:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80131f6:	3110      	adds	r1, #16
 80131f8:	f7ff f8f2 	bl	80123e0 <rcl_wait_set_add_subscription>
 80131fc:	2800      	cmp	r0, #0
 80131fe:	d1ed      	bne.n	80131dc <rcl_action_wait_set_add_action_client+0x84>
 8013200:	b11f      	cbz	r7, 801320a <rcl_action_wait_set_add_action_client+0xb2>
 8013202:	6823      	ldr	r3, [r4, #0]
 8013204:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8013208:	603b      	str	r3, [r7, #0]
 801320a:	2e00      	cmp	r6, #0
 801320c:	d0e6      	beq.n	80131dc <rcl_action_wait_set_add_action_client+0x84>
 801320e:	6823      	ldr	r3, [r4, #0]
 8013210:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8013214:	6033      	str	r3, [r6, #0]
 8013216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013218 <rcl_action_client_wait_set_get_entities_ready>:
 8013218:	2800      	cmp	r0, #0
 801321a:	f000 8089 	beq.w	8013330 <rcl_action_client_wait_set_get_entities_ready+0x118>
 801321e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013222:	460c      	mov	r4, r1
 8013224:	2900      	cmp	r1, #0
 8013226:	d079      	beq.n	801331c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013228:	4605      	mov	r5, r0
 801322a:	6808      	ldr	r0, [r1, #0]
 801322c:	2800      	cmp	r0, #0
 801322e:	d075      	beq.n	801331c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013230:	4616      	mov	r6, r2
 8013232:	461f      	mov	r7, r3
 8013234:	f7fd fda8 	bl	8010d88 <rcl_client_is_valid>
 8013238:	2800      	cmp	r0, #0
 801323a:	d06d      	beq.n	8013318 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801323c:	6820      	ldr	r0, [r4, #0]
 801323e:	3004      	adds	r0, #4
 8013240:	f7fd fda2 	bl	8010d88 <rcl_client_is_valid>
 8013244:	2800      	cmp	r0, #0
 8013246:	d067      	beq.n	8013318 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013248:	6820      	ldr	r0, [r4, #0]
 801324a:	3008      	adds	r0, #8
 801324c:	f7fd fd9c 	bl	8010d88 <rcl_client_is_valid>
 8013250:	2800      	cmp	r0, #0
 8013252:	d061      	beq.n	8013318 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013254:	6820      	ldr	r0, [r4, #0]
 8013256:	300c      	adds	r0, #12
 8013258:	f7fe fc18 	bl	8011a8c <rcl_subscription_is_valid>
 801325c:	2800      	cmp	r0, #0
 801325e:	d05b      	beq.n	8013318 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013260:	6820      	ldr	r0, [r4, #0]
 8013262:	3010      	adds	r0, #16
 8013264:	f7fe fc12 	bl	8011a8c <rcl_subscription_is_valid>
 8013268:	2800      	cmp	r0, #0
 801326a:	d055      	beq.n	8013318 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801326c:	2e00      	cmp	r6, #0
 801326e:	d05c      	beq.n	801332a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8013270:	2f00      	cmp	r7, #0
 8013272:	d05a      	beq.n	801332a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8013274:	9b06      	ldr	r3, [sp, #24]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d057      	beq.n	801332a <rcl_action_client_wait_set_get_entities_ready+0x112>
 801327a:	9b07      	ldr	r3, [sp, #28]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d054      	beq.n	801332a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8013280:	9b08      	ldr	r3, [sp, #32]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d051      	beq.n	801332a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8013286:	6823      	ldr	r3, [r4, #0]
 8013288:	686a      	ldr	r2, [r5, #4]
 801328a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801328e:	428a      	cmp	r2, r1
 8013290:	d948      	bls.n	8013324 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8013292:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8013296:	4282      	cmp	r2, r0
 8013298:	d944      	bls.n	8013324 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 801329a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801329e:	69ea      	ldr	r2, [r5, #28]
 80132a0:	42a2      	cmp	r2, r4
 80132a2:	d93f      	bls.n	8013324 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80132a4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80132a8:	4562      	cmp	r2, ip
 80132aa:	d93b      	bls.n	8013324 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80132ac:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80132b0:	4572      	cmp	r2, lr
 80132b2:	d937      	bls.n	8013324 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 80132b4:	69aa      	ldr	r2, [r5, #24]
 80132b6:	682d      	ldr	r5, [r5, #0]
 80132b8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80132bc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80132c0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80132c4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80132c8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80132cc:	f103 0c0c 	add.w	ip, r3, #12
 80132d0:	eba5 050c 	sub.w	r5, r5, ip
 80132d4:	fab5 f585 	clz	r5, r5
 80132d8:	096d      	lsrs	r5, r5, #5
 80132da:	7035      	strb	r5, [r6, #0]
 80132dc:	f103 0510 	add.w	r5, r3, #16
 80132e0:	1b64      	subs	r4, r4, r5
 80132e2:	fab4 f484 	clz	r4, r4
 80132e6:	0964      	lsrs	r4, r4, #5
 80132e8:	703c      	strb	r4, [r7, #0]
 80132ea:	eba3 0008 	sub.w	r0, r3, r8
 80132ee:	1d1c      	adds	r4, r3, #4
 80132f0:	3308      	adds	r3, #8
 80132f2:	1ad3      	subs	r3, r2, r3
 80132f4:	fab0 f080 	clz	r0, r0
 80132f8:	9a06      	ldr	r2, [sp, #24]
 80132fa:	0940      	lsrs	r0, r0, #5
 80132fc:	1b09      	subs	r1, r1, r4
 80132fe:	7010      	strb	r0, [r2, #0]
 8013300:	fab1 f181 	clz	r1, r1
 8013304:	9a07      	ldr	r2, [sp, #28]
 8013306:	0949      	lsrs	r1, r1, #5
 8013308:	7011      	strb	r1, [r2, #0]
 801330a:	fab3 f383 	clz	r3, r3
 801330e:	9a08      	ldr	r2, [sp, #32]
 8013310:	095b      	lsrs	r3, r3, #5
 8013312:	2000      	movs	r0, #0
 8013314:	7013      	strb	r3, [r2, #0]
 8013316:	e003      	b.n	8013320 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013318:	f7f7 f8fa 	bl	800a510 <rcutils_reset_error>
 801331c:	f241 0006 	movw	r0, #4102	@ 0x1006
 8013320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013324:	2001      	movs	r0, #1
 8013326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801332a:	200b      	movs	r0, #11
 801332c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013330:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013334:	4770      	bx	lr
 8013336:	bf00      	nop

08013338 <rcl_action_take_goal_request>:
 8013338:	b3b0      	cbz	r0, 80133a8 <rcl_action_take_goal_request+0x70>
 801333a:	b570      	push	{r4, r5, r6, lr}
 801333c:	4604      	mov	r4, r0
 801333e:	6800      	ldr	r0, [r0, #0]
 8013340:	b368      	cbz	r0, 801339e <rcl_action_take_goal_request+0x66>
 8013342:	460d      	mov	r5, r1
 8013344:	4616      	mov	r6, r2
 8013346:	f7fe faaf 	bl	80118a8 <rcl_service_is_valid>
 801334a:	b330      	cbz	r0, 801339a <rcl_action_take_goal_request+0x62>
 801334c:	6820      	ldr	r0, [r4, #0]
 801334e:	3004      	adds	r0, #4
 8013350:	f7fe faaa 	bl	80118a8 <rcl_service_is_valid>
 8013354:	b308      	cbz	r0, 801339a <rcl_action_take_goal_request+0x62>
 8013356:	6820      	ldr	r0, [r4, #0]
 8013358:	3008      	adds	r0, #8
 801335a:	f7fe faa5 	bl	80118a8 <rcl_service_is_valid>
 801335e:	b1e0      	cbz	r0, 801339a <rcl_action_take_goal_request+0x62>
 8013360:	6820      	ldr	r0, [r4, #0]
 8013362:	300c      	adds	r0, #12
 8013364:	f7f6 f9aa 	bl	80096bc <rcl_publisher_is_valid>
 8013368:	b1b8      	cbz	r0, 801339a <rcl_action_take_goal_request+0x62>
 801336a:	6820      	ldr	r0, [r4, #0]
 801336c:	3010      	adds	r0, #16
 801336e:	f7f6 f9a5 	bl	80096bc <rcl_publisher_is_valid>
 8013372:	b190      	cbz	r0, 801339a <rcl_action_take_goal_request+0x62>
 8013374:	b1b5      	cbz	r5, 80133a4 <rcl_action_take_goal_request+0x6c>
 8013376:	b1ae      	cbz	r6, 80133a4 <rcl_action_take_goal_request+0x6c>
 8013378:	6820      	ldr	r0, [r4, #0]
 801337a:	4632      	mov	r2, r6
 801337c:	4629      	mov	r1, r5
 801337e:	f7fe fa13 	bl	80117a8 <rcl_take_request>
 8013382:	b148      	cbz	r0, 8013398 <rcl_action_take_goal_request+0x60>
 8013384:	280a      	cmp	r0, #10
 8013386:	d007      	beq.n	8013398 <rcl_action_take_goal_request+0x60>
 8013388:	f240 2259 	movw	r2, #601	@ 0x259
 801338c:	f241 0369 	movw	r3, #4201	@ 0x1069
 8013390:	4290      	cmp	r0, r2
 8013392:	bf0c      	ite	eq
 8013394:	4618      	moveq	r0, r3
 8013396:	2001      	movne	r0, #1
 8013398:	bd70      	pop	{r4, r5, r6, pc}
 801339a:	f7f7 f8b9 	bl	800a510 <rcutils_reset_error>
 801339e:	f241 0068 	movw	r0, #4200	@ 0x1068
 80133a2:	bd70      	pop	{r4, r5, r6, pc}
 80133a4:	200b      	movs	r0, #11
 80133a6:	bd70      	pop	{r4, r5, r6, pc}
 80133a8:	f241 0068 	movw	r0, #4200	@ 0x1068
 80133ac:	4770      	bx	lr
 80133ae:	bf00      	nop

080133b0 <rcl_action_send_goal_response>:
 80133b0:	b378      	cbz	r0, 8013412 <rcl_action_send_goal_response+0x62>
 80133b2:	b570      	push	{r4, r5, r6, lr}
 80133b4:	4604      	mov	r4, r0
 80133b6:	6800      	ldr	r0, [r0, #0]
 80133b8:	b330      	cbz	r0, 8013408 <rcl_action_send_goal_response+0x58>
 80133ba:	460d      	mov	r5, r1
 80133bc:	4616      	mov	r6, r2
 80133be:	f7fe fa73 	bl	80118a8 <rcl_service_is_valid>
 80133c2:	b1f8      	cbz	r0, 8013404 <rcl_action_send_goal_response+0x54>
 80133c4:	6820      	ldr	r0, [r4, #0]
 80133c6:	3004      	adds	r0, #4
 80133c8:	f7fe fa6e 	bl	80118a8 <rcl_service_is_valid>
 80133cc:	b1d0      	cbz	r0, 8013404 <rcl_action_send_goal_response+0x54>
 80133ce:	6820      	ldr	r0, [r4, #0]
 80133d0:	3008      	adds	r0, #8
 80133d2:	f7fe fa69 	bl	80118a8 <rcl_service_is_valid>
 80133d6:	b1a8      	cbz	r0, 8013404 <rcl_action_send_goal_response+0x54>
 80133d8:	6820      	ldr	r0, [r4, #0]
 80133da:	300c      	adds	r0, #12
 80133dc:	f7f6 f96e 	bl	80096bc <rcl_publisher_is_valid>
 80133e0:	b180      	cbz	r0, 8013404 <rcl_action_send_goal_response+0x54>
 80133e2:	6820      	ldr	r0, [r4, #0]
 80133e4:	3010      	adds	r0, #16
 80133e6:	f7f6 f969 	bl	80096bc <rcl_publisher_is_valid>
 80133ea:	b158      	cbz	r0, 8013404 <rcl_action_send_goal_response+0x54>
 80133ec:	b17d      	cbz	r5, 801340e <rcl_action_send_goal_response+0x5e>
 80133ee:	b176      	cbz	r6, 801340e <rcl_action_send_goal_response+0x5e>
 80133f0:	6820      	ldr	r0, [r4, #0]
 80133f2:	4632      	mov	r2, r6
 80133f4:	4629      	mov	r1, r5
 80133f6:	f7fe fa27 	bl	8011848 <rcl_send_response>
 80133fa:	b110      	cbz	r0, 8013402 <rcl_action_send_goal_response+0x52>
 80133fc:	2802      	cmp	r0, #2
 80133fe:	bf18      	it	ne
 8013400:	2001      	movne	r0, #1
 8013402:	bd70      	pop	{r4, r5, r6, pc}
 8013404:	f7f7 f884 	bl	800a510 <rcutils_reset_error>
 8013408:	f241 0068 	movw	r0, #4200	@ 0x1068
 801340c:	bd70      	pop	{r4, r5, r6, pc}
 801340e:	200b      	movs	r0, #11
 8013410:	bd70      	pop	{r4, r5, r6, pc}
 8013412:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013416:	4770      	bx	lr

08013418 <rcl_action_take_result_request>:
 8013418:	2800      	cmp	r0, #0
 801341a:	d037      	beq.n	801348c <rcl_action_take_result_request+0x74>
 801341c:	b570      	push	{r4, r5, r6, lr}
 801341e:	4604      	mov	r4, r0
 8013420:	6800      	ldr	r0, [r0, #0]
 8013422:	b370      	cbz	r0, 8013482 <rcl_action_take_result_request+0x6a>
 8013424:	460d      	mov	r5, r1
 8013426:	4616      	mov	r6, r2
 8013428:	f7fe fa3e 	bl	80118a8 <rcl_service_is_valid>
 801342c:	b338      	cbz	r0, 801347e <rcl_action_take_result_request+0x66>
 801342e:	6820      	ldr	r0, [r4, #0]
 8013430:	3004      	adds	r0, #4
 8013432:	f7fe fa39 	bl	80118a8 <rcl_service_is_valid>
 8013436:	b310      	cbz	r0, 801347e <rcl_action_take_result_request+0x66>
 8013438:	6820      	ldr	r0, [r4, #0]
 801343a:	3008      	adds	r0, #8
 801343c:	f7fe fa34 	bl	80118a8 <rcl_service_is_valid>
 8013440:	b1e8      	cbz	r0, 801347e <rcl_action_take_result_request+0x66>
 8013442:	6820      	ldr	r0, [r4, #0]
 8013444:	300c      	adds	r0, #12
 8013446:	f7f6 f939 	bl	80096bc <rcl_publisher_is_valid>
 801344a:	b1c0      	cbz	r0, 801347e <rcl_action_take_result_request+0x66>
 801344c:	6820      	ldr	r0, [r4, #0]
 801344e:	3010      	adds	r0, #16
 8013450:	f7f6 f934 	bl	80096bc <rcl_publisher_is_valid>
 8013454:	b198      	cbz	r0, 801347e <rcl_action_take_result_request+0x66>
 8013456:	b1bd      	cbz	r5, 8013488 <rcl_action_take_result_request+0x70>
 8013458:	b1b6      	cbz	r6, 8013488 <rcl_action_take_result_request+0x70>
 801345a:	6820      	ldr	r0, [r4, #0]
 801345c:	4632      	mov	r2, r6
 801345e:	4629      	mov	r1, r5
 8013460:	3008      	adds	r0, #8
 8013462:	f7fe f9a1 	bl	80117a8 <rcl_take_request>
 8013466:	b148      	cbz	r0, 801347c <rcl_action_take_result_request+0x64>
 8013468:	280a      	cmp	r0, #10
 801346a:	d007      	beq.n	801347c <rcl_action_take_result_request+0x64>
 801346c:	f240 2259 	movw	r2, #601	@ 0x259
 8013470:	f241 0369 	movw	r3, #4201	@ 0x1069
 8013474:	4290      	cmp	r0, r2
 8013476:	bf0c      	ite	eq
 8013478:	4618      	moveq	r0, r3
 801347a:	2001      	movne	r0, #1
 801347c:	bd70      	pop	{r4, r5, r6, pc}
 801347e:	f7f7 f847 	bl	800a510 <rcutils_reset_error>
 8013482:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013486:	bd70      	pop	{r4, r5, r6, pc}
 8013488:	200b      	movs	r0, #11
 801348a:	bd70      	pop	{r4, r5, r6, pc}
 801348c:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013490:	4770      	bx	lr
 8013492:	bf00      	nop

08013494 <rcl_action_take_cancel_request>:
 8013494:	2800      	cmp	r0, #0
 8013496:	d037      	beq.n	8013508 <rcl_action_take_cancel_request+0x74>
 8013498:	b570      	push	{r4, r5, r6, lr}
 801349a:	4604      	mov	r4, r0
 801349c:	6800      	ldr	r0, [r0, #0]
 801349e:	b370      	cbz	r0, 80134fe <rcl_action_take_cancel_request+0x6a>
 80134a0:	460d      	mov	r5, r1
 80134a2:	4616      	mov	r6, r2
 80134a4:	f7fe fa00 	bl	80118a8 <rcl_service_is_valid>
 80134a8:	b338      	cbz	r0, 80134fa <rcl_action_take_cancel_request+0x66>
 80134aa:	6820      	ldr	r0, [r4, #0]
 80134ac:	3004      	adds	r0, #4
 80134ae:	f7fe f9fb 	bl	80118a8 <rcl_service_is_valid>
 80134b2:	b310      	cbz	r0, 80134fa <rcl_action_take_cancel_request+0x66>
 80134b4:	6820      	ldr	r0, [r4, #0]
 80134b6:	3008      	adds	r0, #8
 80134b8:	f7fe f9f6 	bl	80118a8 <rcl_service_is_valid>
 80134bc:	b1e8      	cbz	r0, 80134fa <rcl_action_take_cancel_request+0x66>
 80134be:	6820      	ldr	r0, [r4, #0]
 80134c0:	300c      	adds	r0, #12
 80134c2:	f7f6 f8fb 	bl	80096bc <rcl_publisher_is_valid>
 80134c6:	b1c0      	cbz	r0, 80134fa <rcl_action_take_cancel_request+0x66>
 80134c8:	6820      	ldr	r0, [r4, #0]
 80134ca:	3010      	adds	r0, #16
 80134cc:	f7f6 f8f6 	bl	80096bc <rcl_publisher_is_valid>
 80134d0:	b198      	cbz	r0, 80134fa <rcl_action_take_cancel_request+0x66>
 80134d2:	b1bd      	cbz	r5, 8013504 <rcl_action_take_cancel_request+0x70>
 80134d4:	b1b6      	cbz	r6, 8013504 <rcl_action_take_cancel_request+0x70>
 80134d6:	6820      	ldr	r0, [r4, #0]
 80134d8:	4632      	mov	r2, r6
 80134da:	4629      	mov	r1, r5
 80134dc:	3004      	adds	r0, #4
 80134de:	f7fe f963 	bl	80117a8 <rcl_take_request>
 80134e2:	b148      	cbz	r0, 80134f8 <rcl_action_take_cancel_request+0x64>
 80134e4:	280a      	cmp	r0, #10
 80134e6:	d007      	beq.n	80134f8 <rcl_action_take_cancel_request+0x64>
 80134e8:	f240 2259 	movw	r2, #601	@ 0x259
 80134ec:	f241 0369 	movw	r3, #4201	@ 0x1069
 80134f0:	4290      	cmp	r0, r2
 80134f2:	bf0c      	ite	eq
 80134f4:	4618      	moveq	r0, r3
 80134f6:	2001      	movne	r0, #1
 80134f8:	bd70      	pop	{r4, r5, r6, pc}
 80134fa:	f7f7 f809 	bl	800a510 <rcutils_reset_error>
 80134fe:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013502:	bd70      	pop	{r4, r5, r6, pc}
 8013504:	200b      	movs	r0, #11
 8013506:	bd70      	pop	{r4, r5, r6, pc}
 8013508:	f241 0068 	movw	r0, #4200	@ 0x1068
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop

08013510 <rcl_action_send_cancel_response>:
 8013510:	b380      	cbz	r0, 8013574 <rcl_action_send_cancel_response+0x64>
 8013512:	b570      	push	{r4, r5, r6, lr}
 8013514:	4604      	mov	r4, r0
 8013516:	6800      	ldr	r0, [r0, #0]
 8013518:	b338      	cbz	r0, 801356a <rcl_action_send_cancel_response+0x5a>
 801351a:	460d      	mov	r5, r1
 801351c:	4616      	mov	r6, r2
 801351e:	f7fe f9c3 	bl	80118a8 <rcl_service_is_valid>
 8013522:	b300      	cbz	r0, 8013566 <rcl_action_send_cancel_response+0x56>
 8013524:	6820      	ldr	r0, [r4, #0]
 8013526:	3004      	adds	r0, #4
 8013528:	f7fe f9be 	bl	80118a8 <rcl_service_is_valid>
 801352c:	b1d8      	cbz	r0, 8013566 <rcl_action_send_cancel_response+0x56>
 801352e:	6820      	ldr	r0, [r4, #0]
 8013530:	3008      	adds	r0, #8
 8013532:	f7fe f9b9 	bl	80118a8 <rcl_service_is_valid>
 8013536:	b1b0      	cbz	r0, 8013566 <rcl_action_send_cancel_response+0x56>
 8013538:	6820      	ldr	r0, [r4, #0]
 801353a:	300c      	adds	r0, #12
 801353c:	f7f6 f8be 	bl	80096bc <rcl_publisher_is_valid>
 8013540:	b188      	cbz	r0, 8013566 <rcl_action_send_cancel_response+0x56>
 8013542:	6820      	ldr	r0, [r4, #0]
 8013544:	3010      	adds	r0, #16
 8013546:	f7f6 f8b9 	bl	80096bc <rcl_publisher_is_valid>
 801354a:	b160      	cbz	r0, 8013566 <rcl_action_send_cancel_response+0x56>
 801354c:	b185      	cbz	r5, 8013570 <rcl_action_send_cancel_response+0x60>
 801354e:	b17e      	cbz	r6, 8013570 <rcl_action_send_cancel_response+0x60>
 8013550:	6820      	ldr	r0, [r4, #0]
 8013552:	4632      	mov	r2, r6
 8013554:	4629      	mov	r1, r5
 8013556:	3004      	adds	r0, #4
 8013558:	f7fe f976 	bl	8011848 <rcl_send_response>
 801355c:	b110      	cbz	r0, 8013564 <rcl_action_send_cancel_response+0x54>
 801355e:	2802      	cmp	r0, #2
 8013560:	bf18      	it	ne
 8013562:	2001      	movne	r0, #1
 8013564:	bd70      	pop	{r4, r5, r6, pc}
 8013566:	f7f6 ffd3 	bl	800a510 <rcutils_reset_error>
 801356a:	f241 0068 	movw	r0, #4200	@ 0x1068
 801356e:	bd70      	pop	{r4, r5, r6, pc}
 8013570:	200b      	movs	r0, #11
 8013572:	bd70      	pop	{r4, r5, r6, pc}
 8013574:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013578:	4770      	bx	lr
 801357a:	bf00      	nop

0801357c <rcl_action_wait_set_add_action_server>:
 801357c:	2800      	cmp	r0, #0
 801357e:	d04a      	beq.n	8013616 <rcl_action_wait_set_add_action_server+0x9a>
 8013580:	b570      	push	{r4, r5, r6, lr}
 8013582:	460c      	mov	r4, r1
 8013584:	2900      	cmp	r1, #0
 8013586:	d043      	beq.n	8013610 <rcl_action_wait_set_add_action_server+0x94>
 8013588:	4605      	mov	r5, r0
 801358a:	6808      	ldr	r0, [r1, #0]
 801358c:	2800      	cmp	r0, #0
 801358e:	d03f      	beq.n	8013610 <rcl_action_wait_set_add_action_server+0x94>
 8013590:	4616      	mov	r6, r2
 8013592:	f7fe f989 	bl	80118a8 <rcl_service_is_valid>
 8013596:	2800      	cmp	r0, #0
 8013598:	d038      	beq.n	801360c <rcl_action_wait_set_add_action_server+0x90>
 801359a:	6820      	ldr	r0, [r4, #0]
 801359c:	3004      	adds	r0, #4
 801359e:	f7fe f983 	bl	80118a8 <rcl_service_is_valid>
 80135a2:	b398      	cbz	r0, 801360c <rcl_action_wait_set_add_action_server+0x90>
 80135a4:	6820      	ldr	r0, [r4, #0]
 80135a6:	3008      	adds	r0, #8
 80135a8:	f7fe f97e 	bl	80118a8 <rcl_service_is_valid>
 80135ac:	b370      	cbz	r0, 801360c <rcl_action_wait_set_add_action_server+0x90>
 80135ae:	6820      	ldr	r0, [r4, #0]
 80135b0:	300c      	adds	r0, #12
 80135b2:	f7f6 f89d 	bl	80096f0 <rcl_publisher_is_valid_except_context>
 80135b6:	b348      	cbz	r0, 801360c <rcl_action_wait_set_add_action_server+0x90>
 80135b8:	6820      	ldr	r0, [r4, #0]
 80135ba:	3010      	adds	r0, #16
 80135bc:	f7f6 f898 	bl	80096f0 <rcl_publisher_is_valid_except_context>
 80135c0:	b320      	cbz	r0, 801360c <rcl_action_wait_set_add_action_server+0x90>
 80135c2:	6821      	ldr	r1, [r4, #0]
 80135c4:	4628      	mov	r0, r5
 80135c6:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80135ca:	f7ff fa8b 	bl	8012ae4 <rcl_wait_set_add_service>
 80135ce:	b9e0      	cbnz	r0, 801360a <rcl_action_wait_set_add_action_server+0x8e>
 80135d0:	6821      	ldr	r1, [r4, #0]
 80135d2:	4628      	mov	r0, r5
 80135d4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80135d8:	3104      	adds	r1, #4
 80135da:	f7ff fa83 	bl	8012ae4 <rcl_wait_set_add_service>
 80135de:	b9a0      	cbnz	r0, 801360a <rcl_action_wait_set_add_action_server+0x8e>
 80135e0:	6821      	ldr	r1, [r4, #0]
 80135e2:	4628      	mov	r0, r5
 80135e4:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80135e8:	3108      	adds	r1, #8
 80135ea:	f7ff fa7b 	bl	8012ae4 <rcl_wait_set_add_service>
 80135ee:	b960      	cbnz	r0, 801360a <rcl_action_wait_set_add_action_server+0x8e>
 80135f0:	6821      	ldr	r1, [r4, #0]
 80135f2:	4628      	mov	r0, r5
 80135f4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80135f8:	3114      	adds	r1, #20
 80135fa:	f7ff fa17 	bl	8012a2c <rcl_wait_set_add_timer>
 80135fe:	b920      	cbnz	r0, 801360a <rcl_action_wait_set_add_action_server+0x8e>
 8013600:	b11e      	cbz	r6, 801360a <rcl_action_wait_set_add_action_server+0x8e>
 8013602:	6823      	ldr	r3, [r4, #0]
 8013604:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8013608:	6033      	str	r3, [r6, #0]
 801360a:	bd70      	pop	{r4, r5, r6, pc}
 801360c:	f7f6 ff80 	bl	800a510 <rcutils_reset_error>
 8013610:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013614:	bd70      	pop	{r4, r5, r6, pc}
 8013616:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801361a:	4770      	bx	lr

0801361c <rcl_action_server_wait_set_get_entities_ready>:
 801361c:	2800      	cmp	r0, #0
 801361e:	d060      	beq.n	80136e2 <rcl_action_server_wait_set_get_entities_ready+0xc6>
 8013620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013622:	460c      	mov	r4, r1
 8013624:	2900      	cmp	r1, #0
 8013626:	d057      	beq.n	80136d8 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8013628:	4605      	mov	r5, r0
 801362a:	6808      	ldr	r0, [r1, #0]
 801362c:	2800      	cmp	r0, #0
 801362e:	d053      	beq.n	80136d8 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8013630:	4616      	mov	r6, r2
 8013632:	461f      	mov	r7, r3
 8013634:	f7fe f938 	bl	80118a8 <rcl_service_is_valid>
 8013638:	2800      	cmp	r0, #0
 801363a:	d04b      	beq.n	80136d4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 801363c:	6820      	ldr	r0, [r4, #0]
 801363e:	3004      	adds	r0, #4
 8013640:	f7fe f932 	bl	80118a8 <rcl_service_is_valid>
 8013644:	2800      	cmp	r0, #0
 8013646:	d045      	beq.n	80136d4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8013648:	6820      	ldr	r0, [r4, #0]
 801364a:	3008      	adds	r0, #8
 801364c:	f7fe f92c 	bl	80118a8 <rcl_service_is_valid>
 8013650:	2800      	cmp	r0, #0
 8013652:	d03f      	beq.n	80136d4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8013654:	6820      	ldr	r0, [r4, #0]
 8013656:	300c      	adds	r0, #12
 8013658:	f7f6 f84a 	bl	80096f0 <rcl_publisher_is_valid_except_context>
 801365c:	2800      	cmp	r0, #0
 801365e:	d039      	beq.n	80136d4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8013660:	6820      	ldr	r0, [r4, #0]
 8013662:	3010      	adds	r0, #16
 8013664:	f7f6 f844 	bl	80096f0 <rcl_publisher_is_valid_except_context>
 8013668:	b3a0      	cbz	r0, 80136d4 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 801366a:	b3c6      	cbz	r6, 80136de <rcl_action_server_wait_set_get_entities_ready+0xc2>
 801366c:	b3bf      	cbz	r7, 80136de <rcl_action_server_wait_set_get_entities_ready+0xc2>
 801366e:	9b06      	ldr	r3, [sp, #24]
 8013670:	b3ab      	cbz	r3, 80136de <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8013672:	9b07      	ldr	r3, [sp, #28]
 8013674:	b39b      	cbz	r3, 80136de <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8013676:	6823      	ldr	r3, [r4, #0]
 8013678:	692a      	ldr	r2, [r5, #16]
 801367a:	6a2c      	ldr	r4, [r5, #32]
 801367c:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 8013680:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 8013684:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8013688:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801368c:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 8013690:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 8013694:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8013698:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801369c:	1ae4      	subs	r4, r4, r3
 801369e:	fab4 f484 	clz	r4, r4
 80136a2:	0964      	lsrs	r4, r4, #5
 80136a4:	7034      	strb	r4, [r6, #0]
 80136a6:	1d1c      	adds	r4, r3, #4
 80136a8:	1b00      	subs	r0, r0, r4
 80136aa:	fab0 f080 	clz	r0, r0
 80136ae:	0940      	lsrs	r0, r0, #5
 80136b0:	7038      	strb	r0, [r7, #0]
 80136b2:	f103 0008 	add.w	r0, r3, #8
 80136b6:	1a09      	subs	r1, r1, r0
 80136b8:	3314      	adds	r3, #20
 80136ba:	1ad3      	subs	r3, r2, r3
 80136bc:	fab1 f181 	clz	r1, r1
 80136c0:	9a06      	ldr	r2, [sp, #24]
 80136c2:	0949      	lsrs	r1, r1, #5
 80136c4:	7011      	strb	r1, [r2, #0]
 80136c6:	fab3 f383 	clz	r3, r3
 80136ca:	9a07      	ldr	r2, [sp, #28]
 80136cc:	095b      	lsrs	r3, r3, #5
 80136ce:	2000      	movs	r0, #0
 80136d0:	7013      	strb	r3, [r2, #0]
 80136d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136d4:	f7f6 ff1c 	bl	800a510 <rcutils_reset_error>
 80136d8:	f241 0068 	movw	r0, #4200	@ 0x1068
 80136dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136de:	200b      	movs	r0, #11
 80136e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80136e6:	4770      	bx	lr

080136e8 <_execute_event_handler>:
 80136e8:	2002      	movs	r0, #2
 80136ea:	4770      	bx	lr

080136ec <_cancel_goal_event_handler>:
 80136ec:	2003      	movs	r0, #3
 80136ee:	4770      	bx	lr

080136f0 <_succeed_event_handler>:
 80136f0:	2004      	movs	r0, #4
 80136f2:	4770      	bx	lr

080136f4 <_abort_event_handler>:
 80136f4:	2006      	movs	r0, #6
 80136f6:	4770      	bx	lr

080136f8 <_canceled_event_handler>:
 80136f8:	2005      	movs	r0, #5
 80136fa:	4770      	bx	lr

080136fc <rcl_action_transition_goal_state>:
 80136fc:	fa5f fc80 	uxtb.w	ip, r0
 8013700:	f1bc 0f06 	cmp.w	ip, #6
 8013704:	d80c      	bhi.n	8013720 <rcl_action_transition_goal_state+0x24>
 8013706:	2904      	cmp	r1, #4
 8013708:	d80a      	bhi.n	8013720 <rcl_action_transition_goal_state+0x24>
 801370a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801370e:	b410      	push	{r4}
 8013710:	440b      	add	r3, r1
 8013712:	4c06      	ldr	r4, [pc, #24]	@ (801372c <rcl_action_transition_goal_state+0x30>)
 8013714:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013718:	b123      	cbz	r3, 8013724 <rcl_action_transition_goal_state+0x28>
 801371a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801371e:	4718      	bx	r3
 8013720:	2000      	movs	r0, #0
 8013722:	4770      	bx	lr
 8013724:	2000      	movs	r0, #0
 8013726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801372a:	4770      	bx	lr
 801372c:	0801accc 	.word	0x0801accc

08013730 <rcl_action_get_zero_initialized_cancel_response>:
 8013730:	b510      	push	{r4, lr}
 8013732:	4c07      	ldr	r4, [pc, #28]	@ (8013750 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8013734:	4686      	mov	lr, r0
 8013736:	4684      	mov	ip, r0
 8013738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801373a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801373e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013740:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013744:	6823      	ldr	r3, [r4, #0]
 8013746:	f8cc 3000 	str.w	r3, [ip]
 801374a:	4670      	mov	r0, lr
 801374c:	bd10      	pop	{r4, pc}
 801374e:	bf00      	nop
 8013750:	0801ad58 	.word	0x0801ad58

08013754 <rclc_action_send_result_request>:
 8013754:	b1d0      	cbz	r0, 801378c <rclc_action_send_result_request+0x38>
 8013756:	b500      	push	{lr}
 8013758:	4684      	mov	ip, r0
 801375a:	b087      	sub	sp, #28
 801375c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8013760:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8013764:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8013768:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801376c:	f10d 0e08 	add.w	lr, sp, #8
 8013770:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013774:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013778:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801377c:	a902      	add	r1, sp, #8
 801377e:	3010      	adds	r0, #16
 8013780:	f7ff fbfa 	bl	8012f78 <rcl_action_send_result_request>
 8013784:	b920      	cbnz	r0, 8013790 <rclc_action_send_result_request+0x3c>
 8013786:	b007      	add	sp, #28
 8013788:	f85d fb04 	ldr.w	pc, [sp], #4
 801378c:	200b      	movs	r0, #11
 801378e:	4770      	bx	lr
 8013790:	9001      	str	r0, [sp, #4]
 8013792:	f7f6 febd 	bl	800a510 <rcutils_reset_error>
 8013796:	9801      	ldr	r0, [sp, #4]
 8013798:	b007      	add	sp, #28
 801379a:	f85d fb04 	ldr.w	pc, [sp], #4
 801379e:	bf00      	nop

080137a0 <rclc_action_take_goal_handle>:
 80137a0:	4603      	mov	r3, r0
 80137a2:	b158      	cbz	r0, 80137bc <rclc_action_take_goal_handle+0x1c>
 80137a4:	6880      	ldr	r0, [r0, #8]
 80137a6:	b148      	cbz	r0, 80137bc <rclc_action_take_goal_handle+0x1c>
 80137a8:	6801      	ldr	r1, [r0, #0]
 80137aa:	6099      	str	r1, [r3, #8]
 80137ac:	2200      	movs	r2, #0
 80137ae:	7202      	strb	r2, [r0, #8]
 80137b0:	68d9      	ldr	r1, [r3, #12]
 80137b2:	6001      	str	r1, [r0, #0]
 80137b4:	6202      	str	r2, [r0, #32]
 80137b6:	8482      	strh	r2, [r0, #36]	@ 0x24
 80137b8:	60d8      	str	r0, [r3, #12]
 80137ba:	4770      	bx	lr
 80137bc:	4770      	bx	lr
 80137be:	bf00      	nop

080137c0 <rclc_action_remove_used_goal_handle>:
 80137c0:	b180      	cbz	r0, 80137e4 <rclc_action_remove_used_goal_handle+0x24>
 80137c2:	b179      	cbz	r1, 80137e4 <rclc_action_remove_used_goal_handle+0x24>
 80137c4:	68c3      	ldr	r3, [r0, #12]
 80137c6:	4299      	cmp	r1, r3
 80137c8:	d00d      	beq.n	80137e6 <rclc_action_remove_used_goal_handle+0x26>
 80137ca:	b12b      	cbz	r3, 80137d8 <rclc_action_remove_used_goal_handle+0x18>
 80137cc:	681a      	ldr	r2, [r3, #0]
 80137ce:	4291      	cmp	r1, r2
 80137d0:	d003      	beq.n	80137da <rclc_action_remove_used_goal_handle+0x1a>
 80137d2:	4613      	mov	r3, r2
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d1f9      	bne.n	80137cc <rclc_action_remove_used_goal_handle+0xc>
 80137d8:	4770      	bx	lr
 80137da:	680a      	ldr	r2, [r1, #0]
 80137dc:	601a      	str	r2, [r3, #0]
 80137de:	6883      	ldr	r3, [r0, #8]
 80137e0:	600b      	str	r3, [r1, #0]
 80137e2:	6081      	str	r1, [r0, #8]
 80137e4:	4770      	bx	lr
 80137e6:	680b      	ldr	r3, [r1, #0]
 80137e8:	60c3      	str	r3, [r0, #12]
 80137ea:	e7f8      	b.n	80137de <rclc_action_remove_used_goal_handle+0x1e>

080137ec <rclc_action_find_goal_handle_by_uuid>:
 80137ec:	b538      	push	{r3, r4, r5, lr}
 80137ee:	b180      	cbz	r0, 8013812 <rclc_action_find_goal_handle_by_uuid+0x26>
 80137f0:	460d      	mov	r5, r1
 80137f2:	b181      	cbz	r1, 8013816 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80137f4:	68c4      	ldr	r4, [r0, #12]
 80137f6:	b914      	cbnz	r4, 80137fe <rclc_action_find_goal_handle_by_uuid+0x12>
 80137f8:	e009      	b.n	801380e <rclc_action_find_goal_handle_by_uuid+0x22>
 80137fa:	6824      	ldr	r4, [r4, #0]
 80137fc:	b13c      	cbz	r4, 801380e <rclc_action_find_goal_handle_by_uuid+0x22>
 80137fe:	2210      	movs	r2, #16
 8013800:	4629      	mov	r1, r5
 8013802:	f104 0009 	add.w	r0, r4, #9
 8013806:	f004 feb3 	bl	8018570 <memcmp>
 801380a:	2800      	cmp	r0, #0
 801380c:	d1f5      	bne.n	80137fa <rclc_action_find_goal_handle_by_uuid+0xe>
 801380e:	4620      	mov	r0, r4
 8013810:	bd38      	pop	{r3, r4, r5, pc}
 8013812:	4604      	mov	r4, r0
 8013814:	e7fb      	b.n	801380e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013816:	460c      	mov	r4, r1
 8013818:	e7f9      	b.n	801380e <rclc_action_find_goal_handle_by_uuid+0x22>
 801381a:	bf00      	nop

0801381c <rclc_action_find_first_handle_by_status>:
 801381c:	b140      	cbz	r0, 8013830 <rclc_action_find_first_handle_by_status+0x14>
 801381e:	68c0      	ldr	r0, [r0, #12]
 8013820:	b910      	cbnz	r0, 8013828 <rclc_action_find_first_handle_by_status+0xc>
 8013822:	e005      	b.n	8013830 <rclc_action_find_first_handle_by_status+0x14>
 8013824:	6800      	ldr	r0, [r0, #0]
 8013826:	b118      	cbz	r0, 8013830 <rclc_action_find_first_handle_by_status+0x14>
 8013828:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801382c:	428b      	cmp	r3, r1
 801382e:	d1f9      	bne.n	8013824 <rclc_action_find_first_handle_by_status+0x8>
 8013830:	4770      	bx	lr
 8013832:	bf00      	nop

08013834 <rclc_action_find_first_terminated_handle>:
 8013834:	b140      	cbz	r0, 8013848 <rclc_action_find_first_terminated_handle+0x14>
 8013836:	68c0      	ldr	r0, [r0, #12]
 8013838:	b910      	cbnz	r0, 8013840 <rclc_action_find_first_terminated_handle+0xc>
 801383a:	e005      	b.n	8013848 <rclc_action_find_first_terminated_handle+0x14>
 801383c:	6800      	ldr	r0, [r0, #0]
 801383e:	b118      	cbz	r0, 8013848 <rclc_action_find_first_terminated_handle+0x14>
 8013840:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013844:	2b03      	cmp	r3, #3
 8013846:	ddf9      	ble.n	801383c <rclc_action_find_first_terminated_handle+0x8>
 8013848:	4770      	bx	lr
 801384a:	bf00      	nop

0801384c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801384c:	b170      	cbz	r0, 801386c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801384e:	68c0      	ldr	r0, [r0, #12]
 8013850:	b160      	cbz	r0, 801386c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013852:	b410      	push	{r4}
 8013854:	e001      	b.n	801385a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8013856:	6800      	ldr	r0, [r0, #0]
 8013858:	b128      	cbz	r0, 8013866 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801385a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801385e:	4299      	cmp	r1, r3
 8013860:	bf08      	it	eq
 8013862:	4294      	cmpeq	r4, r2
 8013864:	d1f7      	bne.n	8013856 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8013866:	f85d 4b04 	ldr.w	r4, [sp], #4
 801386a:	4770      	bx	lr
 801386c:	4770      	bx	lr
 801386e:	bf00      	nop

08013870 <rclc_action_find_handle_by_result_request_sequence_number>:
 8013870:	b170      	cbz	r0, 8013890 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013872:	68c0      	ldr	r0, [r0, #12]
 8013874:	b160      	cbz	r0, 8013890 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013876:	b410      	push	{r4}
 8013878:	e001      	b.n	801387e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801387a:	6800      	ldr	r0, [r0, #0]
 801387c:	b128      	cbz	r0, 801388a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801387e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8013882:	4299      	cmp	r1, r3
 8013884:	bf08      	it	eq
 8013886:	4294      	cmpeq	r4, r2
 8013888:	d1f7      	bne.n	801387a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801388a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801388e:	4770      	bx	lr
 8013890:	4770      	bx	lr
 8013892:	bf00      	nop

08013894 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8013894:	b170      	cbz	r0, 80138b4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013896:	68c0      	ldr	r0, [r0, #12]
 8013898:	b160      	cbz	r0, 80138b4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801389a:	b410      	push	{r4}
 801389c:	e001      	b.n	80138a2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801389e:	6800      	ldr	r0, [r0, #0]
 80138a0:	b128      	cbz	r0, 80138ae <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80138a2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80138a6:	4299      	cmp	r1, r3
 80138a8:	bf08      	it	eq
 80138aa:	4294      	cmpeq	r4, r2
 80138ac:	d1f7      	bne.n	801389e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80138ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138b2:	4770      	bx	lr
 80138b4:	4770      	bx	lr
 80138b6:	bf00      	nop

080138b8 <rclc_action_find_first_handle_with_goal_response>:
 80138b8:	b140      	cbz	r0, 80138cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80138ba:	68c0      	ldr	r0, [r0, #12]
 80138bc:	b910      	cbnz	r0, 80138c4 <rclc_action_find_first_handle_with_goal_response+0xc>
 80138be:	e005      	b.n	80138cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80138c0:	6800      	ldr	r0, [r0, #0]
 80138c2:	b118      	cbz	r0, 80138cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80138c4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d0f9      	beq.n	80138c0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80138cc:	4770      	bx	lr
 80138ce:	bf00      	nop

080138d0 <rclc_action_find_first_handle_with_result_response>:
 80138d0:	b140      	cbz	r0, 80138e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80138d2:	68c0      	ldr	r0, [r0, #12]
 80138d4:	b910      	cbnz	r0, 80138dc <rclc_action_find_first_handle_with_result_response+0xc>
 80138d6:	e005      	b.n	80138e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80138d8:	6800      	ldr	r0, [r0, #0]
 80138da:	b118      	cbz	r0, 80138e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80138dc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d0f9      	beq.n	80138d8 <rclc_action_find_first_handle_with_result_response+0x8>
 80138e4:	4770      	bx	lr
 80138e6:	bf00      	nop

080138e8 <rclc_action_server_response_goal_request>:
 80138e8:	b198      	cbz	r0, 8013912 <rclc_action_server_response_goal_request+0x2a>
 80138ea:	b510      	push	{r4, lr}
 80138ec:	6844      	ldr	r4, [r0, #4]
 80138ee:	b086      	sub	sp, #24
 80138f0:	2200      	movs	r2, #0
 80138f2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80138f6:	460b      	mov	r3, r1
 80138f8:	9205      	str	r2, [sp, #20]
 80138fa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80138fe:	aa03      	add	r2, sp, #12
 8013900:	f104 0010 	add.w	r0, r4, #16
 8013904:	f88d 300c 	strb.w	r3, [sp, #12]
 8013908:	f7ff fd52 	bl	80133b0 <rcl_action_send_goal_response>
 801390c:	b918      	cbnz	r0, 8013916 <rclc_action_server_response_goal_request+0x2e>
 801390e:	b006      	add	sp, #24
 8013910:	bd10      	pop	{r4, pc}
 8013912:	200b      	movs	r0, #11
 8013914:	4770      	bx	lr
 8013916:	9001      	str	r0, [sp, #4]
 8013918:	f7f6 fdfa 	bl	800a510 <rcutils_reset_error>
 801391c:	9801      	ldr	r0, [sp, #4]
 801391e:	b006      	add	sp, #24
 8013920:	bd10      	pop	{r4, pc}
 8013922:	bf00      	nop
 8013924:	0000      	movs	r0, r0
	...

08013928 <rclc_action_server_goal_cancel_accept>:
 8013928:	b310      	cbz	r0, 8013970 <rclc_action_server_goal_cancel_accept+0x48>
 801392a:	b510      	push	{r4, lr}
 801392c:	b090      	sub	sp, #64	@ 0x40
 801392e:	4604      	mov	r4, r0
 8013930:	a806      	add	r0, sp, #24
 8013932:	f7ff fefd 	bl	8013730 <rcl_action_get_zero_initialized_cancel_response>
 8013936:	2300      	movs	r3, #0
 8013938:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801393c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013940:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8013944:	f88d 3018 	strb.w	r3, [sp, #24]
 8013948:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801394c:	f8cd d01c 	str.w	sp, [sp, #28]
 8013950:	46ec      	mov	ip, sp
 8013952:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013956:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013978 <rclc_action_server_goal_cancel_accept+0x50>
 801395a:	6860      	ldr	r0, [r4, #4]
 801395c:	aa06      	add	r2, sp, #24
 801395e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8013962:	3010      	adds	r0, #16
 8013964:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013968:	f7ff fdd2 	bl	8013510 <rcl_action_send_cancel_response>
 801396c:	b010      	add	sp, #64	@ 0x40
 801396e:	bd10      	pop	{r4, pc}
 8013970:	200b      	movs	r0, #11
 8013972:	4770      	bx	lr
 8013974:	f3af 8000 	nop.w
 8013978:	00000001 	.word	0x00000001
 801397c:	00000001 	.word	0x00000001

08013980 <rclc_action_server_goal_cancel_reject>:
 8013980:	b082      	sub	sp, #8
 8013982:	b530      	push	{r4, r5, lr}
 8013984:	b08b      	sub	sp, #44	@ 0x2c
 8013986:	ac0e      	add	r4, sp, #56	@ 0x38
 8013988:	e884 000c 	stmia.w	r4, {r2, r3}
 801398c:	b188      	cbz	r0, 80139b2 <rclc_action_server_goal_cancel_reject+0x32>
 801398e:	4604      	mov	r4, r0
 8013990:	a801      	add	r0, sp, #4
 8013992:	460d      	mov	r5, r1
 8013994:	f7ff fecc 	bl	8013730 <rcl_action_get_zero_initialized_cancel_response>
 8013998:	aa01      	add	r2, sp, #4
 801399a:	a90e      	add	r1, sp, #56	@ 0x38
 801399c:	f104 0010 	add.w	r0, r4, #16
 80139a0:	f88d 5004 	strb.w	r5, [sp, #4]
 80139a4:	f7ff fdb4 	bl	8013510 <rcl_action_send_cancel_response>
 80139a8:	b00b      	add	sp, #44	@ 0x2c
 80139aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139ae:	b002      	add	sp, #8
 80139b0:	4770      	bx	lr
 80139b2:	200b      	movs	r0, #11
 80139b4:	b00b      	add	sp, #44	@ 0x2c
 80139b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80139ba:	b002      	add	sp, #8
 80139bc:	4770      	bx	lr
 80139be:	bf00      	nop

080139c0 <__atomic_load_8>:
 80139c0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80139c4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80139c8:	4a15      	ldr	r2, [pc, #84]	@ (8013a20 <__atomic_load_8+0x60>)
 80139ca:	4b16      	ldr	r3, [pc, #88]	@ (8013a24 <__atomic_load_8+0x64>)
 80139cc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80139d0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80139d4:	fb02 f101 	mul.w	r1, r2, r1
 80139d8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80139dc:	fba3 2301 	umull	r2, r3, r3, r1
 80139e0:	091b      	lsrs	r3, r3, #4
 80139e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80139e6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80139ea:	b4f0      	push	{r4, r5, r6, r7}
 80139ec:	4d0e      	ldr	r5, [pc, #56]	@ (8013a28 <__atomic_load_8+0x68>)
 80139ee:	1ac9      	subs	r1, r1, r3
 80139f0:	194a      	adds	r2, r1, r5
 80139f2:	f04f 0c01 	mov.w	ip, #1
 80139f6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80139fa:	e8c2 cf44 	strexb	r4, ip, [r2]
 80139fe:	2c00      	cmp	r4, #0
 8013a00:	d1f9      	bne.n	80139f6 <__atomic_load_8+0x36>
 8013a02:	f3bf 8f5b 	dmb	ish
 8013a06:	b2dc      	uxtb	r4, r3
 8013a08:	2c00      	cmp	r4, #0
 8013a0a:	d1f4      	bne.n	80139f6 <__atomic_load_8+0x36>
 8013a0c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013a10:	f3bf 8f5b 	dmb	ish
 8013a14:	546b      	strb	r3, [r5, r1]
 8013a16:	4630      	mov	r0, r6
 8013a18:	4639      	mov	r1, r7
 8013a1a:	bcf0      	pop	{r4, r5, r6, r7}
 8013a1c:	4770      	bx	lr
 8013a1e:	bf00      	nop
 8013a20:	27d4eb2d 	.word	0x27d4eb2d
 8013a24:	b21642c9 	.word	0xb21642c9
 8013a28:	2001027c 	.word	0x2001027c

08013a2c <__atomic_store_8>:
 8013a2c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013a30:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013a34:	b570      	push	{r4, r5, r6, lr}
 8013a36:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013a3a:	4c14      	ldr	r4, [pc, #80]	@ (8013a8c <__atomic_store_8+0x60>)
 8013a3c:	4e14      	ldr	r6, [pc, #80]	@ (8013a90 <__atomic_store_8+0x64>)
 8013a3e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013a42:	fb04 f101 	mul.w	r1, r4, r1
 8013a46:	4c13      	ldr	r4, [pc, #76]	@ (8013a94 <__atomic_store_8+0x68>)
 8013a48:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013a4c:	fba4 5401 	umull	r5, r4, r4, r1
 8013a50:	0924      	lsrs	r4, r4, #4
 8013a52:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8013a56:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 8013a5a:	eba1 0e04 	sub.w	lr, r1, r4
 8013a5e:	f04f 0501 	mov.w	r5, #1
 8013a62:	eb0e 0c06 	add.w	ip, lr, r6
 8013a66:	e8dc 1f4f 	ldrexb	r1, [ip]
 8013a6a:	e8cc 5f44 	strexb	r4, r5, [ip]
 8013a6e:	2c00      	cmp	r4, #0
 8013a70:	d1f9      	bne.n	8013a66 <__atomic_store_8+0x3a>
 8013a72:	f3bf 8f5b 	dmb	ish
 8013a76:	b2cc      	uxtb	r4, r1
 8013a78:	2c00      	cmp	r4, #0
 8013a7a:	d1f4      	bne.n	8013a66 <__atomic_store_8+0x3a>
 8013a7c:	e9c0 2300 	strd	r2, r3, [r0]
 8013a80:	f3bf 8f5b 	dmb	ish
 8013a84:	f806 100e 	strb.w	r1, [r6, lr]
 8013a88:	bd70      	pop	{r4, r5, r6, pc}
 8013a8a:	bf00      	nop
 8013a8c:	27d4eb2d 	.word	0x27d4eb2d
 8013a90:	2001027c 	.word	0x2001027c
 8013a94:	b21642c9 	.word	0xb21642c9

08013a98 <__atomic_exchange_8>:
 8013a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a9a:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8013a9e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8013aa2:	4917      	ldr	r1, [pc, #92]	@ (8013b00 <__atomic_exchange_8+0x68>)
 8013aa4:	4f17      	ldr	r7, [pc, #92]	@ (8013b04 <__atomic_exchange_8+0x6c>)
 8013aa6:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8013aaa:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8013aae:	fb01 fe0e 	mul.w	lr, r1, lr
 8013ab2:	4915      	ldr	r1, [pc, #84]	@ (8013b08 <__atomic_exchange_8+0x70>)
 8013ab4:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8013ab8:	4606      	mov	r6, r0
 8013aba:	fba1 010e 	umull	r0, r1, r1, lr
 8013abe:	0909      	lsrs	r1, r1, #4
 8013ac0:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8013ac4:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8013ac8:	ebae 0e01 	sub.w	lr, lr, r1
 8013acc:	f04f 0501 	mov.w	r5, #1
 8013ad0:	eb0e 0107 	add.w	r1, lr, r7
 8013ad4:	e8d1 cf4f 	ldrexb	ip, [r1]
 8013ad8:	e8c1 5f40 	strexb	r0, r5, [r1]
 8013adc:	2800      	cmp	r0, #0
 8013ade:	d1f9      	bne.n	8013ad4 <__atomic_exchange_8+0x3c>
 8013ae0:	f3bf 8f5b 	dmb	ish
 8013ae4:	fa5f f48c 	uxtb.w	r4, ip
 8013ae8:	2c00      	cmp	r4, #0
 8013aea:	d1f3      	bne.n	8013ad4 <__atomic_exchange_8+0x3c>
 8013aec:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013af0:	e9c6 2300 	strd	r2, r3, [r6]
 8013af4:	f3bf 8f5b 	dmb	ish
 8013af8:	f807 c00e 	strb.w	ip, [r7, lr]
 8013afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013afe:	bf00      	nop
 8013b00:	27d4eb2d 	.word	0x27d4eb2d
 8013b04:	2001027c 	.word	0x2001027c
 8013b08:	b21642c9 	.word	0xb21642c9

08013b0c <rcutils_get_env>:
 8013b0c:	b150      	cbz	r0, 8013b24 <rcutils_get_env+0x18>
 8013b0e:	b510      	push	{r4, lr}
 8013b10:	460c      	mov	r4, r1
 8013b12:	b909      	cbnz	r1, 8013b18 <rcutils_get_env+0xc>
 8013b14:	4806      	ldr	r0, [pc, #24]	@ (8013b30 <rcutils_get_env+0x24>)
 8013b16:	bd10      	pop	{r4, pc}
 8013b18:	f004 f8a4 	bl	8017c64 <getenv>
 8013b1c:	b120      	cbz	r0, 8013b28 <rcutils_get_env+0x1c>
 8013b1e:	6020      	str	r0, [r4, #0]
 8013b20:	2000      	movs	r0, #0
 8013b22:	bd10      	pop	{r4, pc}
 8013b24:	4803      	ldr	r0, [pc, #12]	@ (8013b34 <rcutils_get_env+0x28>)
 8013b26:	4770      	bx	lr
 8013b28:	4b03      	ldr	r3, [pc, #12]	@ (8013b38 <rcutils_get_env+0x2c>)
 8013b2a:	6023      	str	r3, [r4, #0]
 8013b2c:	e7f8      	b.n	8013b20 <rcutils_get_env+0x14>
 8013b2e:	bf00      	nop
 8013b30:	0801a34c 	.word	0x0801a34c
 8013b34:	0801a330 	.word	0x0801a330
 8013b38:	0801a168 	.word	0x0801a168

08013b3c <rcutils_format_string_limit>:
 8013b3c:	b40f      	push	{r0, r1, r2, r3}
 8013b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b40:	b083      	sub	sp, #12
 8013b42:	ac08      	add	r4, sp, #32
 8013b44:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013b46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013b4a:	b376      	cbz	r6, 8013baa <rcutils_format_string_limit+0x6e>
 8013b4c:	4620      	mov	r0, r4
 8013b4e:	f7f6 fcb3 	bl	800a4b8 <rcutils_allocator_is_valid>
 8013b52:	b350      	cbz	r0, 8013baa <rcutils_format_string_limit+0x6e>
 8013b54:	2100      	movs	r1, #0
 8013b56:	ab0f      	add	r3, sp, #60	@ 0x3c
 8013b58:	4632      	mov	r2, r6
 8013b5a:	4608      	mov	r0, r1
 8013b5c:	e9cd 3300 	strd	r3, r3, [sp]
 8013b60:	f000 f8f8 	bl	8013d54 <rcutils_vsnprintf>
 8013b64:	1c43      	adds	r3, r0, #1
 8013b66:	4605      	mov	r5, r0
 8013b68:	d01f      	beq.n	8013baa <rcutils_format_string_limit+0x6e>
 8013b6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013b6c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013b6e:	1c47      	adds	r7, r0, #1
 8013b70:	429f      	cmp	r7, r3
 8013b72:	bf84      	itt	hi
 8013b74:	461f      	movhi	r7, r3
 8013b76:	f103 35ff 	addhi.w	r5, r3, #4294967295
 8013b7a:	4638      	mov	r0, r7
 8013b7c:	9b08      	ldr	r3, [sp, #32]
 8013b7e:	4798      	blx	r3
 8013b80:	4604      	mov	r4, r0
 8013b82:	b190      	cbz	r0, 8013baa <rcutils_format_string_limit+0x6e>
 8013b84:	9b01      	ldr	r3, [sp, #4]
 8013b86:	4632      	mov	r2, r6
 8013b88:	4639      	mov	r1, r7
 8013b8a:	f000 f8e3 	bl	8013d54 <rcutils_vsnprintf>
 8013b8e:	2800      	cmp	r0, #0
 8013b90:	db07      	blt.n	8013ba2 <rcutils_format_string_limit+0x66>
 8013b92:	2300      	movs	r3, #0
 8013b94:	5563      	strb	r3, [r4, r5]
 8013b96:	4620      	mov	r0, r4
 8013b98:	b003      	add	sp, #12
 8013b9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013b9e:	b004      	add	sp, #16
 8013ba0:	4770      	bx	lr
 8013ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ba4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013ba6:	4620      	mov	r0, r4
 8013ba8:	4798      	blx	r3
 8013baa:	2400      	movs	r4, #0
 8013bac:	e7f3      	b.n	8013b96 <rcutils_format_string_limit+0x5a>
 8013bae:	bf00      	nop

08013bb0 <rcutils_repl_str>:
 8013bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb4:	4699      	mov	r9, r3
 8013bb6:	b089      	sub	sp, #36	@ 0x24
 8013bb8:	4603      	mov	r3, r0
 8013bba:	4648      	mov	r0, r9
 8013bbc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013bc0:	4698      	mov	r8, r3
 8013bc2:	9300      	str	r3, [sp, #0]
 8013bc4:	460c      	mov	r4, r1
 8013bc6:	f7f6 fc77 	bl	800a4b8 <rcutils_allocator_is_valid>
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	f000 80a3 	beq.w	8013d16 <rcutils_repl_str+0x166>
 8013bd0:	4620      	mov	r0, r4
 8013bd2:	f7ec fb7d 	bl	80002d0 <strlen>
 8013bd6:	f04f 0a00 	mov.w	sl, #0
 8013bda:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8013bde:	9001      	str	r0, [sp, #4]
 8013be0:	4657      	mov	r7, sl
 8013be2:	4655      	mov	r5, sl
 8013be4:	2610      	movs	r6, #16
 8013be6:	e01e      	b.n	8013c26 <rcutils_repl_str+0x76>
 8013be8:	3501      	adds	r5, #1
 8013bea:	45aa      	cmp	sl, r5
 8013bec:	d212      	bcs.n	8013c14 <rcutils_repl_str+0x64>
 8013bee:	44b2      	add	sl, r6
 8013bf0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013bf4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8013bf8:	4798      	blx	r3
 8013bfa:	2800      	cmp	r0, #0
 8013bfc:	f000 8088 	beq.w	8013d10 <rcutils_repl_str+0x160>
 8013c00:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013c04:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8013c08:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8013c0c:	4607      	mov	r7, r0
 8013c0e:	bf28      	it	cs
 8013c10:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8013c14:	9a00      	ldr	r2, [sp, #0]
 8013c16:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8013c1a:	1aa2      	subs	r2, r4, r2
 8013c1c:	f843 2c04 	str.w	r2, [r3, #-4]
 8013c20:	9b01      	ldr	r3, [sp, #4]
 8013c22:	eb04 0803 	add.w	r8, r4, r3
 8013c26:	9902      	ldr	r1, [sp, #8]
 8013c28:	4640      	mov	r0, r8
 8013c2a:	f004 fd05 	bl	8018638 <strstr>
 8013c2e:	4604      	mov	r4, r0
 8013c30:	465a      	mov	r2, fp
 8013c32:	4638      	mov	r0, r7
 8013c34:	2c00      	cmp	r4, #0
 8013c36:	d1d7      	bne.n	8013be8 <rcutils_repl_str+0x38>
 8013c38:	4640      	mov	r0, r8
 8013c3a:	f7ec fb49 	bl	80002d0 <strlen>
 8013c3e:	9b00      	ldr	r3, [sp, #0]
 8013c40:	eba8 0803 	sub.w	r8, r8, r3
 8013c44:	eb08 0300 	add.w	r3, r8, r0
 8013c48:	9304      	str	r3, [sp, #16]
 8013c4a:	f8d9 8000 	ldr.w	r8, [r9]
 8013c4e:	2d00      	cmp	r5, #0
 8013c50:	d03f      	beq.n	8013cd2 <rcutils_repl_str+0x122>
 8013c52:	9803      	ldr	r0, [sp, #12]
 8013c54:	f7ec fb3c 	bl	80002d0 <strlen>
 8013c58:	4606      	mov	r6, r0
 8013c5a:	9801      	ldr	r0, [sp, #4]
 8013c5c:	9a04      	ldr	r2, [sp, #16]
 8013c5e:	1a33      	subs	r3, r6, r0
 8013c60:	fb05 2a03 	mla	sl, r5, r3, r2
 8013c64:	4659      	mov	r1, fp
 8013c66:	f10a 0001 	add.w	r0, sl, #1
 8013c6a:	47c0      	blx	r8
 8013c6c:	4683      	mov	fp, r0
 8013c6e:	2800      	cmp	r0, #0
 8013c70:	d04e      	beq.n	8013d10 <rcutils_repl_str+0x160>
 8013c72:	683a      	ldr	r2, [r7, #0]
 8013c74:	9900      	ldr	r1, [sp, #0]
 8013c76:	f004 fd80 	bl	801877a <memcpy>
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	9706      	str	r7, [sp, #24]
 8013c7e:	1e6a      	subs	r2, r5, #1
 8013c80:	445b      	add	r3, fp
 8013c82:	46a8      	mov	r8, r5
 8013c84:	9202      	str	r2, [sp, #8]
 8013c86:	4625      	mov	r5, r4
 8013c88:	f8cd 901c 	str.w	r9, [sp, #28]
 8013c8c:	461c      	mov	r4, r3
 8013c8e:	9903      	ldr	r1, [sp, #12]
 8013c90:	4632      	mov	r2, r6
 8013c92:	4620      	mov	r0, r4
 8013c94:	f004 fd71 	bl	801877a <memcpy>
 8013c98:	9b01      	ldr	r3, [sp, #4]
 8013c9a:	f857 2b04 	ldr.w	r2, [r7], #4
 8013c9e:	eb02 0c03 	add.w	ip, r2, r3
 8013ca2:	9b00      	ldr	r3, [sp, #0]
 8013ca4:	eb03 010c 	add.w	r1, r3, ip
 8013ca8:	9b02      	ldr	r3, [sp, #8]
 8013caa:	4434      	add	r4, r6
 8013cac:	429d      	cmp	r5, r3
 8013cae:	4620      	mov	r0, r4
 8013cb0:	d022      	beq.n	8013cf8 <rcutils_repl_str+0x148>
 8013cb2:	683a      	ldr	r2, [r7, #0]
 8013cb4:	eba2 090c 	sub.w	r9, r2, ip
 8013cb8:	464a      	mov	r2, r9
 8013cba:	3501      	adds	r5, #1
 8013cbc:	f004 fd5d 	bl	801877a <memcpy>
 8013cc0:	45a8      	cmp	r8, r5
 8013cc2:	444c      	add	r4, r9
 8013cc4:	d1e3      	bne.n	8013c8e <rcutils_repl_str+0xde>
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8013ccc:	f80b 300a 	strb.w	r3, [fp, sl]
 8013cd0:	e008      	b.n	8013ce4 <rcutils_repl_str+0x134>
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	4659      	mov	r1, fp
 8013cd6:	3001      	adds	r0, #1
 8013cd8:	47c0      	blx	r8
 8013cda:	4683      	mov	fp, r0
 8013cdc:	b110      	cbz	r0, 8013ce4 <rcutils_repl_str+0x134>
 8013cde:	9900      	ldr	r1, [sp, #0]
 8013ce0:	f004 fd43 	bl	801876a <strcpy>
 8013ce4:	4638      	mov	r0, r7
 8013ce6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013cea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013cee:	4798      	blx	r3
 8013cf0:	4658      	mov	r0, fp
 8013cf2:	b009      	add	sp, #36	@ 0x24
 8013cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf8:	9b04      	ldr	r3, [sp, #16]
 8013cfa:	eba3 020c 	sub.w	r2, r3, ip
 8013cfe:	9205      	str	r2, [sp, #20]
 8013d00:	3501      	adds	r5, #1
 8013d02:	f004 fd3a 	bl	801877a <memcpy>
 8013d06:	9a05      	ldr	r2, [sp, #20]
 8013d08:	45a8      	cmp	r8, r5
 8013d0a:	4414      	add	r4, r2
 8013d0c:	d1bf      	bne.n	8013c8e <rcutils_repl_str+0xde>
 8013d0e:	e7da      	b.n	8013cc6 <rcutils_repl_str+0x116>
 8013d10:	f04f 0b00 	mov.w	fp, #0
 8013d14:	e7e6      	b.n	8013ce4 <rcutils_repl_str+0x134>
 8013d16:	4683      	mov	fp, r0
 8013d18:	4658      	mov	r0, fp
 8013d1a:	b009      	add	sp, #36	@ 0x24
 8013d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013d20 <rcutils_snprintf>:
 8013d20:	b40c      	push	{r2, r3}
 8013d22:	b530      	push	{r4, r5, lr}
 8013d24:	b083      	sub	sp, #12
 8013d26:	ab06      	add	r3, sp, #24
 8013d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d2c:	9301      	str	r3, [sp, #4]
 8013d2e:	b152      	cbz	r2, 8013d46 <rcutils_snprintf+0x26>
 8013d30:	b138      	cbz	r0, 8013d42 <rcutils_snprintf+0x22>
 8013d32:	b141      	cbz	r1, 8013d46 <rcutils_snprintf+0x26>
 8013d34:	f004 fb7a 	bl	801842c <vsniprintf>
 8013d38:	b003      	add	sp, #12
 8013d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013d3e:	b002      	add	sp, #8
 8013d40:	4770      	bx	lr
 8013d42:	2900      	cmp	r1, #0
 8013d44:	d0f6      	beq.n	8013d34 <rcutils_snprintf+0x14>
 8013d46:	f004 fce3 	bl	8018710 <__errno>
 8013d4a:	2316      	movs	r3, #22
 8013d4c:	6003      	str	r3, [r0, #0]
 8013d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d52:	e7f1      	b.n	8013d38 <rcutils_snprintf+0x18>

08013d54 <rcutils_vsnprintf>:
 8013d54:	b570      	push	{r4, r5, r6, lr}
 8013d56:	b13a      	cbz	r2, 8013d68 <rcutils_vsnprintf+0x14>
 8013d58:	b120      	cbz	r0, 8013d64 <rcutils_vsnprintf+0x10>
 8013d5a:	b129      	cbz	r1, 8013d68 <rcutils_vsnprintf+0x14>
 8013d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d60:	f004 bb64 	b.w	801842c <vsniprintf>
 8013d64:	2900      	cmp	r1, #0
 8013d66:	d0f9      	beq.n	8013d5c <rcutils_vsnprintf+0x8>
 8013d68:	f004 fcd2 	bl	8018710 <__errno>
 8013d6c:	2316      	movs	r3, #22
 8013d6e:	6003      	str	r3, [r0, #0]
 8013d70:	f04f 30ff 	mov.w	r0, #4294967295
 8013d74:	bd70      	pop	{r4, r5, r6, pc}
 8013d76:	bf00      	nop

08013d78 <rcutils_strdup>:
 8013d78:	b084      	sub	sp, #16
 8013d7a:	b570      	push	{r4, r5, r6, lr}
 8013d7c:	b086      	sub	sp, #24
 8013d7e:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8013d82:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8013d86:	4604      	mov	r4, r0
 8013d88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013d8c:	f10d 0e04 	add.w	lr, sp, #4
 8013d90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013d94:	f8dc 3000 	ldr.w	r3, [ip]
 8013d98:	f8ce 3000 	str.w	r3, [lr]
 8013d9c:	b304      	cbz	r4, 8013de0 <rcutils_strdup+0x68>
 8013d9e:	a801      	add	r0, sp, #4
 8013da0:	f7f6 fb8a 	bl	800a4b8 <rcutils_allocator_is_valid>
 8013da4:	b1e0      	cbz	r0, 8013de0 <rcutils_strdup+0x68>
 8013da6:	f04f 32ff 	mov.w	r2, #4294967295
 8013daa:	2100      	movs	r1, #0
 8013dac:	4620      	mov	r0, r4
 8013dae:	f7ec fa3f 	bl	8000230 <memchr>
 8013db2:	b190      	cbz	r0, 8013dda <rcutils_strdup+0x62>
 8013db4:	1b06      	subs	r6, r0, r4
 8013db6:	1c70      	adds	r0, r6, #1
 8013db8:	9b01      	ldr	r3, [sp, #4]
 8013dba:	9905      	ldr	r1, [sp, #20]
 8013dbc:	4798      	blx	r3
 8013dbe:	4605      	mov	r5, r0
 8013dc0:	b128      	cbz	r0, 8013dce <rcutils_strdup+0x56>
 8013dc2:	4632      	mov	r2, r6
 8013dc4:	4621      	mov	r1, r4
 8013dc6:	f004 fcd8 	bl	801877a <memcpy>
 8013dca:	2300      	movs	r3, #0
 8013dcc:	55ab      	strb	r3, [r5, r6]
 8013dce:	4628      	mov	r0, r5
 8013dd0:	b006      	add	sp, #24
 8013dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dd6:	b004      	add	sp, #16
 8013dd8:	4770      	bx	lr
 8013dda:	f04f 36ff 	mov.w	r6, #4294967295
 8013dde:	e7eb      	b.n	8013db8 <rcutils_strdup+0x40>
 8013de0:	2500      	movs	r5, #0
 8013de2:	e7f4      	b.n	8013dce <rcutils_strdup+0x56>

08013de4 <rcutils_strndup>:
 8013de4:	b082      	sub	sp, #8
 8013de6:	b570      	push	{r4, r5, r6, lr}
 8013de8:	ac04      	add	r4, sp, #16
 8013dea:	e884 000c 	stmia.w	r4, {r2, r3}
 8013dee:	b1e8      	cbz	r0, 8013e2c <rcutils_strndup+0x48>
 8013df0:	4605      	mov	r5, r0
 8013df2:	a804      	add	r0, sp, #16
 8013df4:	460c      	mov	r4, r1
 8013df6:	f7f6 fb5f 	bl	800a4b8 <rcutils_allocator_is_valid>
 8013dfa:	b1b8      	cbz	r0, 8013e2c <rcutils_strndup+0x48>
 8013dfc:	4622      	mov	r2, r4
 8013dfe:	2100      	movs	r1, #0
 8013e00:	4628      	mov	r0, r5
 8013e02:	f7ec fa15 	bl	8000230 <memchr>
 8013e06:	b100      	cbz	r0, 8013e0a <rcutils_strndup+0x26>
 8013e08:	1b44      	subs	r4, r0, r5
 8013e0a:	9b04      	ldr	r3, [sp, #16]
 8013e0c:	9908      	ldr	r1, [sp, #32]
 8013e0e:	1c60      	adds	r0, r4, #1
 8013e10:	4798      	blx	r3
 8013e12:	4606      	mov	r6, r0
 8013e14:	b128      	cbz	r0, 8013e22 <rcutils_strndup+0x3e>
 8013e16:	4622      	mov	r2, r4
 8013e18:	4629      	mov	r1, r5
 8013e1a:	f004 fcae 	bl	801877a <memcpy>
 8013e1e:	2300      	movs	r3, #0
 8013e20:	5533      	strb	r3, [r6, r4]
 8013e22:	4630      	mov	r0, r6
 8013e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e28:	b002      	add	sp, #8
 8013e2a:	4770      	bx	lr
 8013e2c:	2600      	movs	r6, #0
 8013e2e:	4630      	mov	r0, r6
 8013e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013e34:	b002      	add	sp, #8
 8013e36:	4770      	bx	lr

08013e38 <rcutils_get_zero_initialized_string_map>:
 8013e38:	4b01      	ldr	r3, [pc, #4]	@ (8013e40 <rcutils_get_zero_initialized_string_map+0x8>)
 8013e3a:	6818      	ldr	r0, [r3, #0]
 8013e3c:	4770      	bx	lr
 8013e3e:	bf00      	nop
 8013e40:	0801ad7c 	.word	0x0801ad7c

08013e44 <rcutils_string_map_reserve>:
 8013e44:	2800      	cmp	r0, #0
 8013e46:	d04e      	beq.n	8013ee6 <rcutils_string_map_reserve+0xa2>
 8013e48:	b530      	push	{r4, r5, lr}
 8013e4a:	6803      	ldr	r3, [r0, #0]
 8013e4c:	b087      	sub	sp, #28
 8013e4e:	4604      	mov	r4, r0
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d043      	beq.n	8013edc <rcutils_string_map_reserve+0x98>
 8013e54:	f103 0c0c 	add.w	ip, r3, #12
 8013e58:	460d      	mov	r5, r1
 8013e5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013e5e:	f10d 0e04 	add.w	lr, sp, #4
 8013e62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013e66:	f8dc 3000 	ldr.w	r3, [ip]
 8013e6a:	f8ce 3000 	str.w	r3, [lr]
 8013e6e:	a801      	add	r0, sp, #4
 8013e70:	f7f6 fb22 	bl	800a4b8 <rcutils_allocator_is_valid>
 8013e74:	b308      	cbz	r0, 8013eba <rcutils_string_map_reserve+0x76>
 8013e76:	6823      	ldr	r3, [r4, #0]
 8013e78:	6899      	ldr	r1, [r3, #8]
 8013e7a:	42a9      	cmp	r1, r5
 8013e7c:	d829      	bhi.n	8013ed2 <rcutils_string_map_reserve+0x8e>
 8013e7e:	685a      	ldr	r2, [r3, #4]
 8013e80:	42aa      	cmp	r2, r5
 8013e82:	d024      	beq.n	8013ece <rcutils_string_map_reserve+0x8a>
 8013e84:	b1e5      	cbz	r5, 8013ec0 <rcutils_string_map_reserve+0x7c>
 8013e86:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 8013e8a:	d22a      	bcs.n	8013ee2 <rcutils_string_map_reserve+0x9e>
 8013e8c:	6818      	ldr	r0, [r3, #0]
 8013e8e:	9a05      	ldr	r2, [sp, #20]
 8013e90:	9b03      	ldr	r3, [sp, #12]
 8013e92:	00e9      	lsls	r1, r5, #3
 8013e94:	4798      	blx	r3
 8013e96:	b320      	cbz	r0, 8013ee2 <rcutils_string_map_reserve+0x9e>
 8013e98:	6824      	ldr	r4, [r4, #0]
 8013e9a:	6861      	ldr	r1, [r4, #4]
 8013e9c:	6020      	str	r0, [r4, #0]
 8013e9e:	42a9      	cmp	r1, r5
 8013ea0:	d214      	bcs.n	8013ecc <rcutils_string_map_reserve+0x88>
 8013ea2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8013ea6:	1a69      	subs	r1, r5, r1
 8013ea8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8013eac:	2200      	movs	r2, #0
 8013eae:	e9c3 2200 	strd	r2, r2, [r3]
 8013eb2:	3308      	adds	r3, #8
 8013eb4:	428b      	cmp	r3, r1
 8013eb6:	d1fa      	bne.n	8013eae <rcutils_string_map_reserve+0x6a>
 8013eb8:	e008      	b.n	8013ecc <rcutils_string_map_reserve+0x88>
 8013eba:	200b      	movs	r0, #11
 8013ebc:	b007      	add	sp, #28
 8013ebe:	bd30      	pop	{r4, r5, pc}
 8013ec0:	9a02      	ldr	r2, [sp, #8]
 8013ec2:	9905      	ldr	r1, [sp, #20]
 8013ec4:	6818      	ldr	r0, [r3, #0]
 8013ec6:	4790      	blx	r2
 8013ec8:	6824      	ldr	r4, [r4, #0]
 8013eca:	6025      	str	r5, [r4, #0]
 8013ecc:	6065      	str	r5, [r4, #4]
 8013ece:	2000      	movs	r0, #0
 8013ed0:	e7f4      	b.n	8013ebc <rcutils_string_map_reserve+0x78>
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f7ff ffb6 	bl	8013e44 <rcutils_string_map_reserve>
 8013ed8:	b007      	add	sp, #28
 8013eda:	bd30      	pop	{r4, r5, pc}
 8013edc:	201f      	movs	r0, #31
 8013ede:	b007      	add	sp, #28
 8013ee0:	bd30      	pop	{r4, r5, pc}
 8013ee2:	200a      	movs	r0, #10
 8013ee4:	e7ea      	b.n	8013ebc <rcutils_string_map_reserve+0x78>
 8013ee6:	200b      	movs	r0, #11
 8013ee8:	4770      	bx	lr
 8013eea:	bf00      	nop

08013eec <rcutils_string_map_init>:
 8013eec:	b082      	sub	sp, #8
 8013eee:	b570      	push	{r4, r5, r6, lr}
 8013ef0:	ac04      	add	r4, sp, #16
 8013ef2:	e884 000c 	stmia.w	r4, {r2, r3}
 8013ef6:	b378      	cbz	r0, 8013f58 <rcutils_string_map_init+0x6c>
 8013ef8:	6806      	ldr	r6, [r0, #0]
 8013efa:	4604      	mov	r4, r0
 8013efc:	b12e      	cbz	r6, 8013f0a <rcutils_string_map_init+0x1e>
 8013efe:	251e      	movs	r5, #30
 8013f00:	4628      	mov	r0, r5
 8013f02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f06:	b002      	add	sp, #8
 8013f08:	4770      	bx	lr
 8013f0a:	a804      	add	r0, sp, #16
 8013f0c:	460d      	mov	r5, r1
 8013f0e:	f7f6 fad3 	bl	800a4b8 <rcutils_allocator_is_valid>
 8013f12:	b308      	cbz	r0, 8013f58 <rcutils_string_map_init+0x6c>
 8013f14:	9b04      	ldr	r3, [sp, #16]
 8013f16:	9908      	ldr	r1, [sp, #32]
 8013f18:	2020      	movs	r0, #32
 8013f1a:	4798      	blx	r3
 8013f1c:	6020      	str	r0, [r4, #0]
 8013f1e:	b308      	cbz	r0, 8013f64 <rcutils_string_map_init+0x78>
 8013f20:	f10d 0e10 	add.w	lr, sp, #16
 8013f24:	e9c0 6600 	strd	r6, r6, [r0]
 8013f28:	6086      	str	r6, [r0, #8]
 8013f2a:	f100 0c0c 	add.w	ip, r0, #12
 8013f2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f36:	f8de 3000 	ldr.w	r3, [lr]
 8013f3a:	f8cc 3000 	str.w	r3, [ip]
 8013f3e:	4629      	mov	r1, r5
 8013f40:	4620      	mov	r0, r4
 8013f42:	f7ff ff7f 	bl	8013e44 <rcutils_string_map_reserve>
 8013f46:	4605      	mov	r5, r0
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	d0d9      	beq.n	8013f00 <rcutils_string_map_init+0x14>
 8013f4c:	9b05      	ldr	r3, [sp, #20]
 8013f4e:	9908      	ldr	r1, [sp, #32]
 8013f50:	6820      	ldr	r0, [r4, #0]
 8013f52:	4798      	blx	r3
 8013f54:	6026      	str	r6, [r4, #0]
 8013f56:	e7d3      	b.n	8013f00 <rcutils_string_map_init+0x14>
 8013f58:	250b      	movs	r5, #11
 8013f5a:	4628      	mov	r0, r5
 8013f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f60:	b002      	add	sp, #8
 8013f62:	4770      	bx	lr
 8013f64:	250a      	movs	r5, #10
 8013f66:	e7cb      	b.n	8013f00 <rcutils_string_map_init+0x14>

08013f68 <rcutils_string_map_fini>:
 8013f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f6c:	b086      	sub	sp, #24
 8013f6e:	2800      	cmp	r0, #0
 8013f70:	d04f      	beq.n	8014012 <rcutils_string_map_fini+0xaa>
 8013f72:	6805      	ldr	r5, [r0, #0]
 8013f74:	4606      	mov	r6, r0
 8013f76:	2d00      	cmp	r5, #0
 8013f78:	d046      	beq.n	8014008 <rcutils_string_map_fini+0xa0>
 8013f7a:	686b      	ldr	r3, [r5, #4]
 8013f7c:	b353      	cbz	r3, 8013fd4 <rcutils_string_map_fini+0x6c>
 8013f7e:	2400      	movs	r4, #0
 8013f80:	682a      	ldr	r2, [r5, #0]
 8013f82:	4627      	mov	r7, r4
 8013f84:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8013f88:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8013f8c:	b1f8      	cbz	r0, 8013fce <rcutils_string_map_fini+0x66>
 8013f8e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8013f92:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013f96:	4651      	mov	r1, sl
 8013f98:	47c8      	blx	r9
 8013f9a:	682b      	ldr	r3, [r5, #0]
 8013f9c:	eb03 0208 	add.w	r2, r3, r8
 8013fa0:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8013fa4:	6850      	ldr	r0, [r2, #4]
 8013fa6:	4651      	mov	r1, sl
 8013fa8:	47c8      	blx	r9
 8013faa:	682a      	ldr	r2, [r5, #0]
 8013fac:	68ab      	ldr	r3, [r5, #8]
 8013fae:	4442      	add	r2, r8
 8013fb0:	3b01      	subs	r3, #1
 8013fb2:	6057      	str	r7, [r2, #4]
 8013fb4:	60ab      	str	r3, [r5, #8]
 8013fb6:	6835      	ldr	r5, [r6, #0]
 8013fb8:	686b      	ldr	r3, [r5, #4]
 8013fba:	3401      	adds	r4, #1
 8013fbc:	429c      	cmp	r4, r3
 8013fbe:	d209      	bcs.n	8013fd4 <rcutils_string_map_fini+0x6c>
 8013fc0:	682a      	ldr	r2, [r5, #0]
 8013fc2:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8013fc6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8013fca:	2800      	cmp	r0, #0
 8013fcc:	d1df      	bne.n	8013f8e <rcutils_string_map_fini+0x26>
 8013fce:	3401      	adds	r4, #1
 8013fd0:	42a3      	cmp	r3, r4
 8013fd2:	d8d7      	bhi.n	8013f84 <rcutils_string_map_fini+0x1c>
 8013fd4:	2100      	movs	r1, #0
 8013fd6:	4630      	mov	r0, r6
 8013fd8:	f7ff ff34 	bl	8013e44 <rcutils_string_map_reserve>
 8013fdc:	4604      	mov	r4, r0
 8013fde:	b118      	cbz	r0, 8013fe8 <rcutils_string_map_fini+0x80>
 8013fe0:	4620      	mov	r0, r4
 8013fe2:	b006      	add	sp, #24
 8013fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fe8:	6835      	ldr	r5, [r6, #0]
 8013fea:	350c      	adds	r5, #12
 8013fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fee:	af01      	add	r7, sp, #4
 8013ff0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013ff2:	682b      	ldr	r3, [r5, #0]
 8013ff4:	603b      	str	r3, [r7, #0]
 8013ff6:	a801      	add	r0, sp, #4
 8013ff8:	f7f6 fa5e 	bl	800a4b8 <rcutils_allocator_is_valid>
 8013ffc:	b148      	cbz	r0, 8014012 <rcutils_string_map_fini+0xaa>
 8013ffe:	9b02      	ldr	r3, [sp, #8]
 8014000:	9905      	ldr	r1, [sp, #20]
 8014002:	6830      	ldr	r0, [r6, #0]
 8014004:	4798      	blx	r3
 8014006:	6034      	str	r4, [r6, #0]
 8014008:	2400      	movs	r4, #0
 801400a:	4620      	mov	r0, r4
 801400c:	b006      	add	sp, #24
 801400e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014012:	240b      	movs	r4, #11
 8014014:	4620      	mov	r0, r4
 8014016:	b006      	add	sp, #24
 8014018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801401c <rcutils_string_map_getn>:
 801401c:	b338      	cbz	r0, 801406e <rcutils_string_map_getn+0x52>
 801401e:	6800      	ldr	r0, [r0, #0]
 8014020:	b328      	cbz	r0, 801406e <rcutils_string_map_getn+0x52>
 8014022:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014026:	460e      	mov	r6, r1
 8014028:	b1c1      	cbz	r1, 801405c <rcutils_string_map_getn+0x40>
 801402a:	e9d0 9800 	ldrd	r9, r8, [r0]
 801402e:	f1b8 0f00 	cmp.w	r8, #0
 8014032:	d013      	beq.n	801405c <rcutils_string_map_getn+0x40>
 8014034:	4617      	mov	r7, r2
 8014036:	2400      	movs	r4, #0
 8014038:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 801403c:	4628      	mov	r0, r5
 801403e:	b155      	cbz	r5, 8014056 <rcutils_string_map_getn+0x3a>
 8014040:	f7ec f946 	bl	80002d0 <strlen>
 8014044:	42b8      	cmp	r0, r7
 8014046:	4602      	mov	r2, r0
 8014048:	4629      	mov	r1, r5
 801404a:	bf38      	it	cc
 801404c:	463a      	movcc	r2, r7
 801404e:	4630      	mov	r0, r6
 8014050:	f004 facd 	bl	80185ee <strncmp>
 8014054:	b128      	cbz	r0, 8014062 <rcutils_string_map_getn+0x46>
 8014056:	3401      	adds	r4, #1
 8014058:	45a0      	cmp	r8, r4
 801405a:	d1ed      	bne.n	8014038 <rcutils_string_map_getn+0x1c>
 801405c:	2000      	movs	r0, #0
 801405e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014062:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8014066:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801406a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801406e:	4770      	bx	lr

08014070 <rmw_get_zero_initialized_context>:
 8014070:	b510      	push	{r4, lr}
 8014072:	4903      	ldr	r1, [pc, #12]	@ (8014080 <rmw_get_zero_initialized_context+0x10>)
 8014074:	4604      	mov	r4, r0
 8014076:	2270      	movs	r2, #112	@ 0x70
 8014078:	f004 fb7f 	bl	801877a <memcpy>
 801407c:	4620      	mov	r0, r4
 801407e:	bd10      	pop	{r4, pc}
 8014080:	0801ad80 	.word	0x0801ad80

08014084 <rmw_get_zero_initialized_init_options>:
 8014084:	b510      	push	{r4, lr}
 8014086:	4903      	ldr	r1, [pc, #12]	@ (8014094 <rmw_get_zero_initialized_init_options+0x10>)
 8014088:	4604      	mov	r4, r0
 801408a:	2258      	movs	r2, #88	@ 0x58
 801408c:	f004 fb75 	bl	801877a <memcpy>
 8014090:	4620      	mov	r0, r4
 8014092:	bd10      	pop	{r4, pc}
 8014094:	0801adf0 	.word	0x0801adf0

08014098 <rmw_time_equal>:
 8014098:	b570      	push	{r4, r5, r6, lr}
 801409a:	b084      	sub	sp, #16
 801409c:	ac04      	add	r4, sp, #16
 801409e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80140a2:	4925      	ldr	r1, [pc, #148]	@ (8014138 <rmw_time_equal+0xa0>)
 80140a4:	9c01      	ldr	r4, [sp, #4]
 80140a6:	2202      	movs	r2, #2
 80140a8:	4281      	cmp	r1, r0
 80140aa:	41a2      	sbcs	r2, r4
 80140ac:	d333      	bcc.n	8014116 <rmw_time_equal+0x7e>
 80140ae:	4603      	mov	r3, r0
 80140b0:	4822      	ldr	r0, [pc, #136]	@ (801413c <rmw_time_equal+0xa4>)
 80140b2:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 80140b6:	fba3 3200 	umull	r3, r2, r3, r0
 80140ba:	fb00 2204 	mla	r2, r0, r4, r2
 80140be:	43de      	mvns	r6, r3
 80140c0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80140c4:	1a84      	subs	r4, r0, r2
 80140c6:	428e      	cmp	r6, r1
 80140c8:	41ac      	sbcs	r4, r5
 80140ca:	d332      	bcc.n	8014132 <rmw_time_equal+0x9a>
 80140cc:	eb11 0e03 	adds.w	lr, r1, r3
 80140d0:	eb42 0005 	adc.w	r0, r2, r5
 80140d4:	9b08      	ldr	r3, [sp, #32]
 80140d6:	4918      	ldr	r1, [pc, #96]	@ (8014138 <rmw_time_equal+0xa0>)
 80140d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80140da:	2202      	movs	r2, #2
 80140dc:	4299      	cmp	r1, r3
 80140de:	41aa      	sbcs	r2, r5
 80140e0:	d31e      	bcc.n	8014120 <rmw_time_equal+0x88>
 80140e2:	4c16      	ldr	r4, [pc, #88]	@ (801413c <rmw_time_equal+0xa4>)
 80140e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80140e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80140e8:	fba3 3104 	umull	r3, r1, r3, r4
 80140ec:	fb04 1105 	mla	r1, r4, r5, r1
 80140f0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80140f4:	43dd      	mvns	r5, r3
 80140f6:	ebac 0401 	sub.w	r4, ip, r1
 80140fa:	4295      	cmp	r5, r2
 80140fc:	41b4      	sbcs	r4, r6
 80140fe:	d314      	bcc.n	801412a <rmw_time_equal+0x92>
 8014100:	18d2      	adds	r2, r2, r3
 8014102:	eb41 0306 	adc.w	r3, r1, r6
 8014106:	4283      	cmp	r3, r0
 8014108:	bf08      	it	eq
 801410a:	4572      	cmpeq	r2, lr
 801410c:	bf0c      	ite	eq
 801410e:	2001      	moveq	r0, #1
 8014110:	2000      	movne	r0, #0
 8014112:	b004      	add	sp, #16
 8014114:	bd70      	pop	{r4, r5, r6, pc}
 8014116:	f04f 3eff 	mov.w	lr, #4294967295
 801411a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801411e:	e7d9      	b.n	80140d4 <rmw_time_equal+0x3c>
 8014120:	f04f 32ff 	mov.w	r2, #4294967295
 8014124:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8014128:	e7ed      	b.n	8014106 <rmw_time_equal+0x6e>
 801412a:	f04f 32ff 	mov.w	r2, #4294967295
 801412e:	4663      	mov	r3, ip
 8014130:	e7e9      	b.n	8014106 <rmw_time_equal+0x6e>
 8014132:	f04f 3eff 	mov.w	lr, #4294967295
 8014136:	e7cd      	b.n	80140d4 <rmw_time_equal+0x3c>
 8014138:	25c17d04 	.word	0x25c17d04
 801413c:	3b9aca00 	.word	0x3b9aca00

08014140 <rmw_time_total_nsec>:
 8014140:	b430      	push	{r4, r5}
 8014142:	b084      	sub	sp, #16
 8014144:	ac04      	add	r4, sp, #16
 8014146:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801414a:	4914      	ldr	r1, [pc, #80]	@ (801419c <rmw_time_total_nsec+0x5c>)
 801414c:	9c01      	ldr	r4, [sp, #4]
 801414e:	2202      	movs	r2, #2
 8014150:	4281      	cmp	r1, r0
 8014152:	41a2      	sbcs	r2, r4
 8014154:	d315      	bcc.n	8014182 <rmw_time_total_nsec+0x42>
 8014156:	4912      	ldr	r1, [pc, #72]	@ (80141a0 <rmw_time_total_nsec+0x60>)
 8014158:	4603      	mov	r3, r0
 801415a:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 801415e:	fba3 3201 	umull	r3, r2, r3, r1
 8014162:	fb01 2204 	mla	r2, r1, r4, r2
 8014166:	ea6f 0c03 	mvn.w	ip, r3
 801416a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801416e:	1a8c      	subs	r4, r1, r2
 8014170:	4584      	cmp	ip, r0
 8014172:	41ac      	sbcs	r4, r5
 8014174:	d30c      	bcc.n	8014190 <rmw_time_total_nsec+0x50>
 8014176:	1818      	adds	r0, r3, r0
 8014178:	eb42 0105 	adc.w	r1, r2, r5
 801417c:	b004      	add	sp, #16
 801417e:	bc30      	pop	{r4, r5}
 8014180:	4770      	bx	lr
 8014182:	f04f 30ff 	mov.w	r0, #4294967295
 8014186:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801418a:	b004      	add	sp, #16
 801418c:	bc30      	pop	{r4, r5}
 801418e:	4770      	bx	lr
 8014190:	f04f 30ff 	mov.w	r0, #4294967295
 8014194:	b004      	add	sp, #16
 8014196:	bc30      	pop	{r4, r5}
 8014198:	4770      	bx	lr
 801419a:	bf00      	nop
 801419c:	25c17d04 	.word	0x25c17d04
 80141a0:	3b9aca00 	.word	0x3b9aca00

080141a4 <rmw_get_zero_initialized_message_info>:
 80141a4:	b510      	push	{r4, lr}
 80141a6:	4c09      	ldr	r4, [pc, #36]	@ (80141cc <rmw_get_zero_initialized_message_info+0x28>)
 80141a8:	4686      	mov	lr, r0
 80141aa:	4684      	mov	ip, r0
 80141ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80141be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80141c2:	e88c 0003 	stmia.w	ip, {r0, r1}
 80141c6:	4670      	mov	r0, lr
 80141c8:	bd10      	pop	{r4, pc}
 80141ca:	bf00      	nop
 80141cc:	0801ae48 	.word	0x0801ae48

080141d0 <rmw_validate_full_topic_name>:
 80141d0:	2800      	cmp	r0, #0
 80141d2:	d049      	beq.n	8014268 <rmw_validate_full_topic_name+0x98>
 80141d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d8:	460e      	mov	r6, r1
 80141da:	2900      	cmp	r1, #0
 80141dc:	d056      	beq.n	801428c <rmw_validate_full_topic_name+0xbc>
 80141de:	4615      	mov	r5, r2
 80141e0:	4604      	mov	r4, r0
 80141e2:	f7ec f875 	bl	80002d0 <strlen>
 80141e6:	b150      	cbz	r0, 80141fe <rmw_validate_full_topic_name+0x2e>
 80141e8:	7823      	ldrb	r3, [r4, #0]
 80141ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80141ec:	d00c      	beq.n	8014208 <rmw_validate_full_topic_name+0x38>
 80141ee:	2302      	movs	r3, #2
 80141f0:	6033      	str	r3, [r6, #0]
 80141f2:	b10d      	cbz	r5, 80141f8 <rmw_validate_full_topic_name+0x28>
 80141f4:	2300      	movs	r3, #0
 80141f6:	602b      	str	r3, [r5, #0]
 80141f8:	2000      	movs	r0, #0
 80141fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141fe:	2301      	movs	r3, #1
 8014200:	6033      	str	r3, [r6, #0]
 8014202:	2d00      	cmp	r5, #0
 8014204:	d1f6      	bne.n	80141f4 <rmw_validate_full_topic_name+0x24>
 8014206:	e7f7      	b.n	80141f8 <rmw_validate_full_topic_name+0x28>
 8014208:	1e47      	subs	r7, r0, #1
 801420a:	5de3      	ldrb	r3, [r4, r7]
 801420c:	2b2f      	cmp	r3, #47	@ 0x2f
 801420e:	d03f      	beq.n	8014290 <rmw_validate_full_topic_name+0xc0>
 8014210:	1e63      	subs	r3, r4, #1
 8014212:	4621      	mov	r1, r4
 8014214:	eb03 0e00 	add.w	lr, r3, r0
 8014218:	469c      	mov	ip, r3
 801421a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 801421e:	2a5f      	cmp	r2, #95	@ 0x5f
 8014220:	d006      	beq.n	8014230 <rmw_validate_full_topic_name+0x60>
 8014222:	d823      	bhi.n	801426c <rmw_validate_full_topic_name+0x9c>
 8014224:	2a39      	cmp	r2, #57	@ 0x39
 8014226:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 801422a:	d82b      	bhi.n	8014284 <rmw_validate_full_topic_name+0xb4>
 801422c:	2a2e      	cmp	r2, #46	@ 0x2e
 801422e:	d920      	bls.n	8014272 <rmw_validate_full_topic_name+0xa2>
 8014230:	4573      	cmp	r3, lr
 8014232:	d1f1      	bne.n	8014218 <rmw_validate_full_topic_name+0x48>
 8014234:	4c21      	ldr	r4, [pc, #132]	@ (80142bc <rmw_validate_full_topic_name+0xec>)
 8014236:	2300      	movs	r3, #0
 8014238:	e003      	b.n	8014242 <rmw_validate_full_topic_name+0x72>
 801423a:	4298      	cmp	r0, r3
 801423c:	f101 0101 	add.w	r1, r1, #1
 8014240:	d02c      	beq.n	801429c <rmw_validate_full_topic_name+0xcc>
 8014242:	429f      	cmp	r7, r3
 8014244:	f103 0301 	add.w	r3, r3, #1
 8014248:	d0f7      	beq.n	801423a <rmw_validate_full_topic_name+0x6a>
 801424a:	780a      	ldrb	r2, [r1, #0]
 801424c:	2a2f      	cmp	r2, #47	@ 0x2f
 801424e:	d1f4      	bne.n	801423a <rmw_validate_full_topic_name+0x6a>
 8014250:	784a      	ldrb	r2, [r1, #1]
 8014252:	2a2f      	cmp	r2, #47	@ 0x2f
 8014254:	d02d      	beq.n	80142b2 <rmw_validate_full_topic_name+0xe2>
 8014256:	5ca2      	ldrb	r2, [r4, r2]
 8014258:	0752      	lsls	r2, r2, #29
 801425a:	d5ee      	bpl.n	801423a <rmw_validate_full_topic_name+0x6a>
 801425c:	2206      	movs	r2, #6
 801425e:	6032      	str	r2, [r6, #0]
 8014260:	2d00      	cmp	r5, #0
 8014262:	d0c9      	beq.n	80141f8 <rmw_validate_full_topic_name+0x28>
 8014264:	602b      	str	r3, [r5, #0]
 8014266:	e7c7      	b.n	80141f8 <rmw_validate_full_topic_name+0x28>
 8014268:	200b      	movs	r0, #11
 801426a:	4770      	bx	lr
 801426c:	3a61      	subs	r2, #97	@ 0x61
 801426e:	2a19      	cmp	r2, #25
 8014270:	d9de      	bls.n	8014230 <rmw_validate_full_topic_name+0x60>
 8014272:	2304      	movs	r3, #4
 8014274:	6033      	str	r3, [r6, #0]
 8014276:	2d00      	cmp	r5, #0
 8014278:	d0be      	beq.n	80141f8 <rmw_validate_full_topic_name+0x28>
 801427a:	f1c4 0401 	rsb	r4, r4, #1
 801427e:	4464      	add	r4, ip
 8014280:	602c      	str	r4, [r5, #0]
 8014282:	e7b9      	b.n	80141f8 <rmw_validate_full_topic_name+0x28>
 8014284:	f1b8 0f19 	cmp.w	r8, #25
 8014288:	d9d2      	bls.n	8014230 <rmw_validate_full_topic_name+0x60>
 801428a:	e7f2      	b.n	8014272 <rmw_validate_full_topic_name+0xa2>
 801428c:	200b      	movs	r0, #11
 801428e:	e7b4      	b.n	80141fa <rmw_validate_full_topic_name+0x2a>
 8014290:	2303      	movs	r3, #3
 8014292:	6033      	str	r3, [r6, #0]
 8014294:	2d00      	cmp	r5, #0
 8014296:	d0af      	beq.n	80141f8 <rmw_validate_full_topic_name+0x28>
 8014298:	602f      	str	r7, [r5, #0]
 801429a:	e7ad      	b.n	80141f8 <rmw_validate_full_topic_name+0x28>
 801429c:	28f7      	cmp	r0, #247	@ 0xf7
 801429e:	d802      	bhi.n	80142a6 <rmw_validate_full_topic_name+0xd6>
 80142a0:	2300      	movs	r3, #0
 80142a2:	6033      	str	r3, [r6, #0]
 80142a4:	e7a8      	b.n	80141f8 <rmw_validate_full_topic_name+0x28>
 80142a6:	2307      	movs	r3, #7
 80142a8:	6033      	str	r3, [r6, #0]
 80142aa:	2d00      	cmp	r5, #0
 80142ac:	d0a4      	beq.n	80141f8 <rmw_validate_full_topic_name+0x28>
 80142ae:	23f6      	movs	r3, #246	@ 0xf6
 80142b0:	e7d8      	b.n	8014264 <rmw_validate_full_topic_name+0x94>
 80142b2:	2205      	movs	r2, #5
 80142b4:	6032      	str	r2, [r6, #0]
 80142b6:	2d00      	cmp	r5, #0
 80142b8:	d1d4      	bne.n	8014264 <rmw_validate_full_topic_name+0x94>
 80142ba:	e79d      	b.n	80141f8 <rmw_validate_full_topic_name+0x28>
 80142bc:	0801b363 	.word	0x0801b363

080142c0 <rmw_validate_namespace_with_size>:
 80142c0:	2800      	cmp	r0, #0
 80142c2:	d031      	beq.n	8014328 <rmw_validate_namespace_with_size+0x68>
 80142c4:	b570      	push	{r4, r5, r6, lr}
 80142c6:	4614      	mov	r4, r2
 80142c8:	b0c2      	sub	sp, #264	@ 0x108
 80142ca:	b1ba      	cbz	r2, 80142fc <rmw_validate_namespace_with_size+0x3c>
 80142cc:	2901      	cmp	r1, #1
 80142ce:	460e      	mov	r6, r1
 80142d0:	461d      	mov	r5, r3
 80142d2:	d102      	bne.n	80142da <rmw_validate_namespace_with_size+0x1a>
 80142d4:	7803      	ldrb	r3, [r0, #0]
 80142d6:	2b2f      	cmp	r3, #47	@ 0x2f
 80142d8:	d015      	beq.n	8014306 <rmw_validate_namespace_with_size+0x46>
 80142da:	aa01      	add	r2, sp, #4
 80142dc:	4669      	mov	r1, sp
 80142de:	f7ff ff77 	bl	80141d0 <rmw_validate_full_topic_name>
 80142e2:	b960      	cbnz	r0, 80142fe <rmw_validate_namespace_with_size+0x3e>
 80142e4:	9b00      	ldr	r3, [sp, #0]
 80142e6:	b163      	cbz	r3, 8014302 <rmw_validate_namespace_with_size+0x42>
 80142e8:	2b07      	cmp	r3, #7
 80142ea:	d00a      	beq.n	8014302 <rmw_validate_namespace_with_size+0x42>
 80142ec:	1e5a      	subs	r2, r3, #1
 80142ee:	2a05      	cmp	r2, #5
 80142f0:	d81c      	bhi.n	801432c <rmw_validate_namespace_with_size+0x6c>
 80142f2:	e8df f002 	tbb	[pc, r2]
 80142f6:	0c0c      	.short	0x0c0c
 80142f8:	0c0c0c0c 	.word	0x0c0c0c0c
 80142fc:	200b      	movs	r0, #11
 80142fe:	b042      	add	sp, #264	@ 0x108
 8014300:	bd70      	pop	{r4, r5, r6, pc}
 8014302:	2ef5      	cmp	r6, #245	@ 0xf5
 8014304:	d809      	bhi.n	801431a <rmw_validate_namespace_with_size+0x5a>
 8014306:	2300      	movs	r3, #0
 8014308:	6023      	str	r3, [r4, #0]
 801430a:	2000      	movs	r0, #0
 801430c:	e7f7      	b.n	80142fe <rmw_validate_namespace_with_size+0x3e>
 801430e:	6023      	str	r3, [r4, #0]
 8014310:	2d00      	cmp	r5, #0
 8014312:	d0fa      	beq.n	801430a <rmw_validate_namespace_with_size+0x4a>
 8014314:	9b01      	ldr	r3, [sp, #4]
 8014316:	602b      	str	r3, [r5, #0]
 8014318:	e7f7      	b.n	801430a <rmw_validate_namespace_with_size+0x4a>
 801431a:	2307      	movs	r3, #7
 801431c:	6023      	str	r3, [r4, #0]
 801431e:	2d00      	cmp	r5, #0
 8014320:	d0f3      	beq.n	801430a <rmw_validate_namespace_with_size+0x4a>
 8014322:	23f4      	movs	r3, #244	@ 0xf4
 8014324:	602b      	str	r3, [r5, #0]
 8014326:	e7f0      	b.n	801430a <rmw_validate_namespace_with_size+0x4a>
 8014328:	200b      	movs	r0, #11
 801432a:	4770      	bx	lr
 801432c:	4a03      	ldr	r2, [pc, #12]	@ (801433c <rmw_validate_namespace_with_size+0x7c>)
 801432e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014332:	a802      	add	r0, sp, #8
 8014334:	f7ff fcf4 	bl	8013d20 <rcutils_snprintf>
 8014338:	2001      	movs	r0, #1
 801433a:	e7e0      	b.n	80142fe <rmw_validate_namespace_with_size+0x3e>
 801433c:	0801a368 	.word	0x0801a368

08014340 <rmw_validate_namespace>:
 8014340:	b168      	cbz	r0, 801435e <rmw_validate_namespace+0x1e>
 8014342:	b570      	push	{r4, r5, r6, lr}
 8014344:	460d      	mov	r5, r1
 8014346:	4616      	mov	r6, r2
 8014348:	4604      	mov	r4, r0
 801434a:	f7eb ffc1 	bl	80002d0 <strlen>
 801434e:	4633      	mov	r3, r6
 8014350:	4601      	mov	r1, r0
 8014352:	462a      	mov	r2, r5
 8014354:	4620      	mov	r0, r4
 8014356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801435a:	f7ff bfb1 	b.w	80142c0 <rmw_validate_namespace_with_size>
 801435e:	200b      	movs	r0, #11
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop

08014364 <rmw_namespace_validation_result_string>:
 8014364:	2807      	cmp	r0, #7
 8014366:	bf9a      	itte	ls
 8014368:	4b02      	ldrls	r3, [pc, #8]	@ (8014374 <rmw_namespace_validation_result_string+0x10>)
 801436a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801436e:	4802      	ldrhi	r0, [pc, #8]	@ (8014378 <rmw_namespace_validation_result_string+0x14>)
 8014370:	4770      	bx	lr
 8014372:	bf00      	nop
 8014374:	0801ae80 	.word	0x0801ae80
 8014378:	0801a3b8 	.word	0x0801a3b8

0801437c <rmw_validate_node_name>:
 801437c:	2800      	cmp	r0, #0
 801437e:	d037      	beq.n	80143f0 <rmw_validate_node_name+0x74>
 8014380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014382:	460e      	mov	r6, r1
 8014384:	2900      	cmp	r1, #0
 8014386:	d035      	beq.n	80143f4 <rmw_validate_node_name+0x78>
 8014388:	4617      	mov	r7, r2
 801438a:	4604      	mov	r4, r0
 801438c:	f7eb ffa0 	bl	80002d0 <strlen>
 8014390:	b1d8      	cbz	r0, 80143ca <rmw_validate_node_name+0x4e>
 8014392:	1e63      	subs	r3, r4, #1
 8014394:	1819      	adds	r1, r3, r0
 8014396:	461a      	mov	r2, r3
 8014398:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801439c:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 80143a0:	f02e 0c20 	bic.w	ip, lr, #32
 80143a4:	2d09      	cmp	r5, #9
 80143a6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80143aa:	d915      	bls.n	80143d8 <rmw_validate_node_name+0x5c>
 80143ac:	f1bc 0f19 	cmp.w	ip, #25
 80143b0:	d912      	bls.n	80143d8 <rmw_validate_node_name+0x5c>
 80143b2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80143b6:	d00f      	beq.n	80143d8 <rmw_validate_node_name+0x5c>
 80143b8:	2302      	movs	r3, #2
 80143ba:	6033      	str	r3, [r6, #0]
 80143bc:	b11f      	cbz	r7, 80143c6 <rmw_validate_node_name+0x4a>
 80143be:	f1c4 0401 	rsb	r4, r4, #1
 80143c2:	4414      	add	r4, r2
 80143c4:	603c      	str	r4, [r7, #0]
 80143c6:	2000      	movs	r0, #0
 80143c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143ca:	2301      	movs	r3, #1
 80143cc:	6033      	str	r3, [r6, #0]
 80143ce:	2f00      	cmp	r7, #0
 80143d0:	d0f9      	beq.n	80143c6 <rmw_validate_node_name+0x4a>
 80143d2:	2300      	movs	r3, #0
 80143d4:	603b      	str	r3, [r7, #0]
 80143d6:	e7f6      	b.n	80143c6 <rmw_validate_node_name+0x4a>
 80143d8:	4299      	cmp	r1, r3
 80143da:	d1dc      	bne.n	8014396 <rmw_validate_node_name+0x1a>
 80143dc:	7823      	ldrb	r3, [r4, #0]
 80143de:	4a0c      	ldr	r2, [pc, #48]	@ (8014410 <rmw_validate_node_name+0x94>)
 80143e0:	5cd3      	ldrb	r3, [r2, r3]
 80143e2:	f013 0304 	ands.w	r3, r3, #4
 80143e6:	d10e      	bne.n	8014406 <rmw_validate_node_name+0x8a>
 80143e8:	28ff      	cmp	r0, #255	@ 0xff
 80143ea:	d805      	bhi.n	80143f8 <rmw_validate_node_name+0x7c>
 80143ec:	6033      	str	r3, [r6, #0]
 80143ee:	e7ea      	b.n	80143c6 <rmw_validate_node_name+0x4a>
 80143f0:	200b      	movs	r0, #11
 80143f2:	4770      	bx	lr
 80143f4:	200b      	movs	r0, #11
 80143f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143f8:	2304      	movs	r3, #4
 80143fa:	6033      	str	r3, [r6, #0]
 80143fc:	2f00      	cmp	r7, #0
 80143fe:	d0e2      	beq.n	80143c6 <rmw_validate_node_name+0x4a>
 8014400:	23fe      	movs	r3, #254	@ 0xfe
 8014402:	603b      	str	r3, [r7, #0]
 8014404:	e7df      	b.n	80143c6 <rmw_validate_node_name+0x4a>
 8014406:	2303      	movs	r3, #3
 8014408:	6033      	str	r3, [r6, #0]
 801440a:	2f00      	cmp	r7, #0
 801440c:	d1e1      	bne.n	80143d2 <rmw_validate_node_name+0x56>
 801440e:	e7da      	b.n	80143c6 <rmw_validate_node_name+0x4a>
 8014410:	0801b363 	.word	0x0801b363

08014414 <rmw_node_name_validation_result_string>:
 8014414:	2804      	cmp	r0, #4
 8014416:	bf9a      	itte	ls
 8014418:	4b02      	ldrls	r3, [pc, #8]	@ (8014424 <rmw_node_name_validation_result_string+0x10>)
 801441a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801441e:	4802      	ldrhi	r0, [pc, #8]	@ (8014428 <rmw_node_name_validation_result_string+0x14>)
 8014420:	4770      	bx	lr
 8014422:	bf00      	nop
 8014424:	0801aea0 	.word	0x0801aea0
 8014428:	0801a560 	.word	0x0801a560

0801442c <get_memory>:
 801442c:	4603      	mov	r3, r0
 801442e:	6840      	ldr	r0, [r0, #4]
 8014430:	b158      	cbz	r0, 801444a <get_memory+0x1e>
 8014432:	6842      	ldr	r2, [r0, #4]
 8014434:	605a      	str	r2, [r3, #4]
 8014436:	b10a      	cbz	r2, 801443c <get_memory+0x10>
 8014438:	2100      	movs	r1, #0
 801443a:	6011      	str	r1, [r2, #0]
 801443c:	681a      	ldr	r2, [r3, #0]
 801443e:	6042      	str	r2, [r0, #4]
 8014440:	b102      	cbz	r2, 8014444 <get_memory+0x18>
 8014442:	6010      	str	r0, [r2, #0]
 8014444:	2200      	movs	r2, #0
 8014446:	6002      	str	r2, [r0, #0]
 8014448:	6018      	str	r0, [r3, #0]
 801444a:	4770      	bx	lr

0801444c <put_memory>:
 801444c:	680b      	ldr	r3, [r1, #0]
 801444e:	b10b      	cbz	r3, 8014454 <put_memory+0x8>
 8014450:	684a      	ldr	r2, [r1, #4]
 8014452:	605a      	str	r2, [r3, #4]
 8014454:	684a      	ldr	r2, [r1, #4]
 8014456:	b102      	cbz	r2, 801445a <put_memory+0xe>
 8014458:	6013      	str	r3, [r2, #0]
 801445a:	6803      	ldr	r3, [r0, #0]
 801445c:	428b      	cmp	r3, r1
 801445e:	6843      	ldr	r3, [r0, #4]
 8014460:	bf08      	it	eq
 8014462:	6002      	streq	r2, [r0, #0]
 8014464:	604b      	str	r3, [r1, #4]
 8014466:	b103      	cbz	r3, 801446a <put_memory+0x1e>
 8014468:	6019      	str	r1, [r3, #0]
 801446a:	2300      	movs	r3, #0
 801446c:	600b      	str	r3, [r1, #0]
 801446e:	6041      	str	r1, [r0, #4]
 8014470:	4770      	bx	lr
 8014472:	bf00      	nop

08014474 <rmw_destroy_client>:
 8014474:	b570      	push	{r4, r5, r6, lr}
 8014476:	b128      	cbz	r0, 8014484 <rmw_destroy_client+0x10>
 8014478:	4604      	mov	r4, r0
 801447a:	6800      	ldr	r0, [r0, #0]
 801447c:	460d      	mov	r5, r1
 801447e:	f7f6 fe57 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 8014482:	b910      	cbnz	r0, 801448a <rmw_destroy_client+0x16>
 8014484:	2401      	movs	r4, #1
 8014486:	4620      	mov	r0, r4
 8014488:	bd70      	pop	{r4, r5, r6, pc}
 801448a:	6863      	ldr	r3, [r4, #4]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d0f9      	beq.n	8014484 <rmw_destroy_client+0x10>
 8014490:	2d00      	cmp	r5, #0
 8014492:	d0f7      	beq.n	8014484 <rmw_destroy_client+0x10>
 8014494:	6828      	ldr	r0, [r5, #0]
 8014496:	f7f6 fe4b 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 801449a:	2800      	cmp	r0, #0
 801449c:	d0f2      	beq.n	8014484 <rmw_destroy_client+0x10>
 801449e:	686e      	ldr	r6, [r5, #4]
 80144a0:	2e00      	cmp	r6, #0
 80144a2:	d0ef      	beq.n	8014484 <rmw_destroy_client+0x10>
 80144a4:	6864      	ldr	r4, [r4, #4]
 80144a6:	6932      	ldr	r2, [r6, #16]
 80144a8:	6920      	ldr	r0, [r4, #16]
 80144aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80144ae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80144b2:	6819      	ldr	r1, [r3, #0]
 80144b4:	f002 faac 	bl	8016a10 <uxr_buffer_cancel_data>
 80144b8:	4602      	mov	r2, r0
 80144ba:	6920      	ldr	r0, [r4, #16]
 80144bc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80144c0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80144c4:	f7f6 fdae 	bl	800b024 <run_xrce_session>
 80144c8:	6920      	ldr	r0, [r4, #16]
 80144ca:	6932      	ldr	r2, [r6, #16]
 80144cc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80144d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80144d4:	6819      	ldr	r1, [r3, #0]
 80144d6:	f7f8 ff05 	bl	800d2e4 <uxr_buffer_delete_entity>
 80144da:	4602      	mov	r2, r0
 80144dc:	6920      	ldr	r0, [r4, #16]
 80144de:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80144e2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80144e6:	f7f6 fd9d 	bl	800b024 <run_xrce_session>
 80144ea:	f080 0401 	eor.w	r4, r0, #1
 80144ee:	b2e4      	uxtb	r4, r4
 80144f0:	4628      	mov	r0, r5
 80144f2:	0064      	lsls	r4, r4, #1
 80144f4:	f7f6 fc78 	bl	800ade8 <rmw_uxrce_fini_client_memory>
 80144f8:	e7c5      	b.n	8014486 <rmw_destroy_client+0x12>
 80144fa:	bf00      	nop

080144fc <rmw_get_gid_for_client>:
 80144fc:	b1a8      	cbz	r0, 801452a <rmw_get_gid_for_client+0x2e>
 80144fe:	b538      	push	{r3, r4, r5, lr}
 8014500:	460c      	mov	r4, r1
 8014502:	b1a1      	cbz	r1, 801452e <rmw_get_gid_for_client+0x32>
 8014504:	4605      	mov	r5, r0
 8014506:	6800      	ldr	r0, [r0, #0]
 8014508:	b120      	cbz	r0, 8014514 <rmw_get_gid_for_client+0x18>
 801450a:	4b0a      	ldr	r3, [pc, #40]	@ (8014534 <rmw_get_gid_for_client+0x38>)
 801450c:	6819      	ldr	r1, [r3, #0]
 801450e:	f7eb fe7f 	bl	8000210 <strcmp>
 8014512:	b940      	cbnz	r0, 8014526 <rmw_get_gid_for_client+0x2a>
 8014514:	686b      	ldr	r3, [r5, #4]
 8014516:	2000      	movs	r0, #0
 8014518:	6060      	str	r0, [r4, #4]
 801451a:	60a0      	str	r0, [r4, #8]
 801451c:	60e0      	str	r0, [r4, #12]
 801451e:	6120      	str	r0, [r4, #16]
 8014520:	691b      	ldr	r3, [r3, #16]
 8014522:	6063      	str	r3, [r4, #4]
 8014524:	bd38      	pop	{r3, r4, r5, pc}
 8014526:	200c      	movs	r0, #12
 8014528:	bd38      	pop	{r3, r4, r5, pc}
 801452a:	200b      	movs	r0, #11
 801452c:	4770      	bx	lr
 801452e:	200b      	movs	r0, #11
 8014530:	bd38      	pop	{r3, r4, r5, pc}
 8014532:	bf00      	nop
 8014534:	0801aeb4 	.word	0x0801aeb4

08014538 <rmw_get_implementation_identifier>:
 8014538:	4b01      	ldr	r3, [pc, #4]	@ (8014540 <rmw_get_implementation_identifier+0x8>)
 801453a:	6818      	ldr	r0, [r3, #0]
 801453c:	4770      	bx	lr
 801453e:	bf00      	nop
 8014540:	0801aeb4 	.word	0x0801aeb4

08014544 <rmw_init_options_init>:
 8014544:	b084      	sub	sp, #16
 8014546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014548:	b083      	sub	sp, #12
 801454a:	ad09      	add	r5, sp, #36	@ 0x24
 801454c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014550:	b130      	cbz	r0, 8014560 <rmw_init_options_init+0x1c>
 8014552:	4604      	mov	r4, r0
 8014554:	4628      	mov	r0, r5
 8014556:	f7f5 ffaf 	bl	800a4b8 <rcutils_allocator_is_valid>
 801455a:	b108      	cbz	r0, 8014560 <rmw_init_options_init+0x1c>
 801455c:	68a6      	ldr	r6, [r4, #8]
 801455e:	b12e      	cbz	r6, 801456c <rmw_init_options_init+0x28>
 8014560:	200b      	movs	r0, #11
 8014562:	b003      	add	sp, #12
 8014564:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014568:	b004      	add	sp, #16
 801456a:	4770      	bx	lr
 801456c:	2200      	movs	r2, #0
 801456e:	2300      	movs	r3, #0
 8014570:	e9c4 2300 	strd	r2, r3, [r4]
 8014574:	4b20      	ldr	r3, [pc, #128]	@ (80145f8 <rmw_init_options_init+0xb4>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	60a3      	str	r3, [r4, #8]
 801457a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801457c:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 8014580:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014584:	466f      	mov	r7, sp
 8014586:	682b      	ldr	r3, [r5, #0]
 8014588:	f8cc 3000 	str.w	r3, [ip]
 801458c:	4638      	mov	r0, r7
 801458e:	63a6      	str	r6, [r4, #56]	@ 0x38
 8014590:	60e6      	str	r6, [r4, #12]
 8014592:	f003 f8f7 	bl	8017784 <rmw_get_default_security_options>
 8014596:	e897 0003 	ldmia.w	r7, {r0, r1}
 801459a:	f104 0310 	add.w	r3, r4, #16
 801459e:	e883 0003 	stmia.w	r3, {r0, r1}
 80145a2:	2203      	movs	r2, #3
 80145a4:	4815      	ldr	r0, [pc, #84]	@ (80145fc <rmw_init_options_init+0xb8>)
 80145a6:	4916      	ldr	r1, [pc, #88]	@ (8014600 <rmw_init_options_init+0xbc>)
 80145a8:	f7f6 fb5e 	bl	800ac68 <rmw_uxrce_init_init_options_impl_memory>
 80145ac:	4813      	ldr	r0, [pc, #76]	@ (80145fc <rmw_init_options_init+0xb8>)
 80145ae:	f7ff ff3d 	bl	801442c <get_memory>
 80145b2:	b1f0      	cbz	r0, 80145f2 <rmw_init_options_init+0xae>
 80145b4:	4a13      	ldr	r2, [pc, #76]	@ (8014604 <rmw_init_options_init+0xc0>)
 80145b6:	6883      	ldr	r3, [r0, #8]
 80145b8:	6851      	ldr	r1, [r2, #4]
 80145ba:	7810      	ldrb	r0, [r2, #0]
 80145bc:	6523      	str	r3, [r4, #80]	@ 0x50
 80145be:	7418      	strb	r0, [r3, #16]
 80145c0:	6159      	str	r1, [r3, #20]
 80145c2:	68d1      	ldr	r1, [r2, #12]
 80145c4:	61d9      	str	r1, [r3, #28]
 80145c6:	6911      	ldr	r1, [r2, #16]
 80145c8:	6219      	str	r1, [r3, #32]
 80145ca:	6951      	ldr	r1, [r2, #20]
 80145cc:	6892      	ldr	r2, [r2, #8]
 80145ce:	619a      	str	r2, [r3, #24]
 80145d0:	6259      	str	r1, [r3, #36]	@ 0x24
 80145d2:	f7fb f877 	bl	800f6c4 <uxr_nanos>
 80145d6:	f003 fc4b 	bl	8017e70 <srand>
 80145da:	f003 fc77 	bl	8017ecc <rand>
 80145de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80145e0:	6298      	str	r0, [r3, #40]	@ 0x28
 80145e2:	2800      	cmp	r0, #0
 80145e4:	d0f9      	beq.n	80145da <rmw_init_options_init+0x96>
 80145e6:	2000      	movs	r0, #0
 80145e8:	b003      	add	sp, #12
 80145ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80145ee:	b004      	add	sp, #16
 80145f0:	4770      	bx	lr
 80145f2:	2001      	movs	r0, #1
 80145f4:	e7b5      	b.n	8014562 <rmw_init_options_init+0x1e>
 80145f6:	bf00      	nop
 80145f8:	0801aeb4 	.word	0x0801aeb4
 80145fc:	2000b948 	.word	0x2000b948
 8014600:	2000b8c4 	.word	0x2000b8c4
 8014604:	2000b798 	.word	0x2000b798

08014608 <rmw_init_options_copy>:
 8014608:	2800      	cmp	r0, #0
 801460a:	d03e      	beq.n	801468a <rmw_init_options_copy+0x82>
 801460c:	b570      	push	{r4, r5, r6, lr}
 801460e:	460d      	mov	r5, r1
 8014610:	b149      	cbz	r1, 8014626 <rmw_init_options_copy+0x1e>
 8014612:	4604      	mov	r4, r0
 8014614:	6880      	ldr	r0, [r0, #8]
 8014616:	b120      	cbz	r0, 8014622 <rmw_init_options_copy+0x1a>
 8014618:	4b21      	ldr	r3, [pc, #132]	@ (80146a0 <rmw_init_options_copy+0x98>)
 801461a:	6819      	ldr	r1, [r3, #0]
 801461c:	f7eb fdf8 	bl	8000210 <strcmp>
 8014620:	bb78      	cbnz	r0, 8014682 <rmw_init_options_copy+0x7a>
 8014622:	68ab      	ldr	r3, [r5, #8]
 8014624:	b11b      	cbz	r3, 801462e <rmw_init_options_copy+0x26>
 8014626:	f04f 0c0b 	mov.w	ip, #11
 801462a:	4660      	mov	r0, ip
 801462c:	bd70      	pop	{r4, r5, r6, pc}
 801462e:	2258      	movs	r2, #88	@ 0x58
 8014630:	4621      	mov	r1, r4
 8014632:	4628      	mov	r0, r5
 8014634:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8014638:	f004 f89f 	bl	801877a <memcpy>
 801463c:	4630      	mov	r0, r6
 801463e:	f7f5 ff3b 	bl	800a4b8 <rcutils_allocator_is_valid>
 8014642:	2800      	cmp	r0, #0
 8014644:	d0ef      	beq.n	8014626 <rmw_init_options_copy+0x1e>
 8014646:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014648:	b138      	cbz	r0, 801465a <rmw_init_options_copy+0x52>
 801464a:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 801464e:	4631      	mov	r1, r6
 8014650:	f003 f864 	bl	801771c <rmw_enclave_options_copy>
 8014654:	4684      	mov	ip, r0
 8014656:	2800      	cmp	r0, #0
 8014658:	d1e7      	bne.n	801462a <rmw_init_options_copy+0x22>
 801465a:	4812      	ldr	r0, [pc, #72]	@ (80146a4 <rmw_init_options_copy+0x9c>)
 801465c:	f7ff fee6 	bl	801442c <get_memory>
 8014660:	b1b8      	cbz	r0, 8014692 <rmw_init_options_copy+0x8a>
 8014662:	6883      	ldr	r3, [r0, #8]
 8014664:	652b      	str	r3, [r5, #80]	@ 0x50
 8014666:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8014668:	3510      	adds	r5, #16
 801466a:	f103 0410 	add.w	r4, r3, #16
 801466e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8014676:	f04f 0c00 	mov.w	ip, #0
 801467a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801467e:	4660      	mov	r0, ip
 8014680:	bd70      	pop	{r4, r5, r6, pc}
 8014682:	f04f 0c0c 	mov.w	ip, #12
 8014686:	4660      	mov	r0, ip
 8014688:	bd70      	pop	{r4, r5, r6, pc}
 801468a:	f04f 0c0b 	mov.w	ip, #11
 801468e:	4660      	mov	r0, ip
 8014690:	4770      	bx	lr
 8014692:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8014694:	4631      	mov	r1, r6
 8014696:	f003 f863 	bl	8017760 <rmw_enclave_options_fini>
 801469a:	f04f 0c01 	mov.w	ip, #1
 801469e:	e7c4      	b.n	801462a <rmw_init_options_copy+0x22>
 80146a0:	0801aeb4 	.word	0x0801aeb4
 80146a4:	2000b948 	.word	0x2000b948

080146a8 <rmw_init_options_fini>:
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d035      	beq.n	8014718 <rmw_init_options_fini+0x70>
 80146ac:	b530      	push	{r4, r5, lr}
 80146ae:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 80146b2:	b097      	sub	sp, #92	@ 0x5c
 80146b4:	4604      	mov	r4, r0
 80146b6:	4628      	mov	r0, r5
 80146b8:	f7f5 fefe 	bl	800a4b8 <rcutils_allocator_is_valid>
 80146bc:	b320      	cbz	r0, 8014708 <rmw_init_options_fini+0x60>
 80146be:	68a0      	ldr	r0, [r4, #8]
 80146c0:	b120      	cbz	r0, 80146cc <rmw_init_options_fini+0x24>
 80146c2:	4b16      	ldr	r3, [pc, #88]	@ (801471c <rmw_init_options_fini+0x74>)
 80146c4:	6819      	ldr	r1, [r3, #0]
 80146c6:	f7eb fda3 	bl	8000210 <strcmp>
 80146ca:	bb18      	cbnz	r0, 8014714 <rmw_init_options_fini+0x6c>
 80146cc:	4b14      	ldr	r3, [pc, #80]	@ (8014720 <rmw_init_options_fini+0x78>)
 80146ce:	6819      	ldr	r1, [r3, #0]
 80146d0:	b1e9      	cbz	r1, 801470e <rmw_init_options_fini+0x66>
 80146d2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80146d4:	e001      	b.n	80146da <rmw_init_options_fini+0x32>
 80146d6:	6849      	ldr	r1, [r1, #4]
 80146d8:	b1c9      	cbz	r1, 801470e <rmw_init_options_fini+0x66>
 80146da:	688b      	ldr	r3, [r1, #8]
 80146dc:	429a      	cmp	r2, r3
 80146de:	d1fa      	bne.n	80146d6 <rmw_init_options_fini+0x2e>
 80146e0:	480f      	ldr	r0, [pc, #60]	@ (8014720 <rmw_init_options_fini+0x78>)
 80146e2:	f7ff feb3 	bl	801444c <put_memory>
 80146e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80146e8:	b118      	cbz	r0, 80146f2 <rmw_init_options_fini+0x4a>
 80146ea:	4629      	mov	r1, r5
 80146ec:	f003 f838 	bl	8017760 <rmw_enclave_options_fini>
 80146f0:	b940      	cbnz	r0, 8014704 <rmw_init_options_fini+0x5c>
 80146f2:	4668      	mov	r0, sp
 80146f4:	f7ff fcc6 	bl	8014084 <rmw_get_zero_initialized_init_options>
 80146f8:	2258      	movs	r2, #88	@ 0x58
 80146fa:	4669      	mov	r1, sp
 80146fc:	4620      	mov	r0, r4
 80146fe:	f004 f83c 	bl	801877a <memcpy>
 8014702:	2000      	movs	r0, #0
 8014704:	b017      	add	sp, #92	@ 0x5c
 8014706:	bd30      	pop	{r4, r5, pc}
 8014708:	200b      	movs	r0, #11
 801470a:	b017      	add	sp, #92	@ 0x5c
 801470c:	bd30      	pop	{r4, r5, pc}
 801470e:	2001      	movs	r0, #1
 8014710:	b017      	add	sp, #92	@ 0x5c
 8014712:	bd30      	pop	{r4, r5, pc}
 8014714:	200c      	movs	r0, #12
 8014716:	e7f5      	b.n	8014704 <rmw_init_options_fini+0x5c>
 8014718:	200b      	movs	r0, #11
 801471a:	4770      	bx	lr
 801471c:	0801aeb4 	.word	0x0801aeb4
 8014720:	2000b948 	.word	0x2000b948

08014724 <rmw_init>:
 8014724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014728:	b083      	sub	sp, #12
 801472a:	2800      	cmp	r0, #0
 801472c:	f000 80d4 	beq.w	80148d8 <rmw_init+0x1b4>
 8014730:	460e      	mov	r6, r1
 8014732:	2900      	cmp	r1, #0
 8014734:	f000 80d0 	beq.w	80148d8 <rmw_init+0x1b4>
 8014738:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801473a:	4605      	mov	r5, r0
 801473c:	2b00      	cmp	r3, #0
 801473e:	f000 80cb 	beq.w	80148d8 <rmw_init+0x1b4>
 8014742:	4b77      	ldr	r3, [pc, #476]	@ (8014920 <rmw_init+0x1fc>)
 8014744:	6880      	ldr	r0, [r0, #8]
 8014746:	681f      	ldr	r7, [r3, #0]
 8014748:	b128      	cbz	r0, 8014756 <rmw_init+0x32>
 801474a:	4639      	mov	r1, r7
 801474c:	f7eb fd60 	bl	8000210 <strcmp>
 8014750:	2800      	cmp	r0, #0
 8014752:	f040 80d3 	bne.w	80148fc <rmw_init+0x1d8>
 8014756:	e9d5 2300 	ldrd	r2, r3, [r5]
 801475a:	4c72      	ldr	r4, [pc, #456]	@ (8014924 <rmw_init+0x200>)
 801475c:	4972      	ldr	r1, [pc, #456]	@ (8014928 <rmw_init+0x204>)
 801475e:	4873      	ldr	r0, [pc, #460]	@ (801492c <rmw_init+0x208>)
 8014760:	60b7      	str	r7, [r6, #8]
 8014762:	e9c6 2300 	strd	r2, r3, [r6]
 8014766:	68eb      	ldr	r3, [r5, #12]
 8014768:	66b3      	str	r3, [r6, #104]	@ 0x68
 801476a:	2201      	movs	r2, #1
 801476c:	f7f6 fa1c 	bl	800aba8 <rmw_uxrce_init_session_memory>
 8014770:	4620      	mov	r0, r4
 8014772:	496f      	ldr	r1, [pc, #444]	@ (8014930 <rmw_init+0x20c>)
 8014774:	2204      	movs	r2, #4
 8014776:	f7f6 fa57 	bl	800ac28 <rmw_uxrce_init_static_input_buffer_memory>
 801477a:	f04f 0800 	mov.w	r8, #0
 801477e:	486b      	ldr	r0, [pc, #428]	@ (801492c <rmw_init+0x208>)
 8014780:	f884 800d 	strb.w	r8, [r4, #13]
 8014784:	f7ff fe52 	bl	801442c <get_memory>
 8014788:	2800      	cmp	r0, #0
 801478a:	f000 80b2 	beq.w	80148f2 <rmw_init+0x1ce>
 801478e:	6884      	ldr	r4, [r0, #8]
 8014790:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8014792:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8014794:	f890 c010 	ldrb.w	ip, [r0, #16]
 8014798:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801479c:	9101      	str	r1, [sp, #4]
 801479e:	6a00      	ldr	r0, [r0, #32]
 80147a0:	9000      	str	r0, [sp, #0]
 80147a2:	f104 0910 	add.w	r9, r4, #16
 80147a6:	4661      	mov	r1, ip
 80147a8:	4648      	mov	r0, r9
 80147aa:	f7f8 ff59 	bl	800d660 <uxr_set_custom_transport_callbacks>
 80147ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80147b2:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 80147b6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80147ba:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80147be:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80147c2:	495c      	ldr	r1, [pc, #368]	@ (8014934 <rmw_init+0x210>)
 80147c4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80147c8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80147cc:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80147d0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80147d4:	4858      	ldr	r0, [pc, #352]	@ (8014938 <rmw_init+0x214>)
 80147d6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80147da:	2201      	movs	r2, #1
 80147dc:	66f4      	str	r4, [r6, #108]	@ 0x6c
 80147de:	f7f6 f9c3 	bl	800ab68 <rmw_uxrce_init_node_memory>
 80147e2:	4956      	ldr	r1, [pc, #344]	@ (801493c <rmw_init+0x218>)
 80147e4:	4856      	ldr	r0, [pc, #344]	@ (8014940 <rmw_init+0x21c>)
 80147e6:	2205      	movs	r2, #5
 80147e8:	f7f6 f99e 	bl	800ab28 <rmw_uxrce_init_subscription_memory>
 80147ec:	4955      	ldr	r1, [pc, #340]	@ (8014944 <rmw_init+0x220>)
 80147ee:	4856      	ldr	r0, [pc, #344]	@ (8014948 <rmw_init+0x224>)
 80147f0:	220a      	movs	r2, #10
 80147f2:	f7f6 f979 	bl	800aae8 <rmw_uxrce_init_publisher_memory>
 80147f6:	4955      	ldr	r1, [pc, #340]	@ (801494c <rmw_init+0x228>)
 80147f8:	4855      	ldr	r0, [pc, #340]	@ (8014950 <rmw_init+0x22c>)
 80147fa:	2201      	movs	r2, #1
 80147fc:	f7f6 f934 	bl	800aa68 <rmw_uxrce_init_service_memory>
 8014800:	4954      	ldr	r1, [pc, #336]	@ (8014954 <rmw_init+0x230>)
 8014802:	4855      	ldr	r0, [pc, #340]	@ (8014958 <rmw_init+0x234>)
 8014804:	2201      	movs	r2, #1
 8014806:	f7f6 f94f 	bl	800aaa8 <rmw_uxrce_init_client_memory>
 801480a:	4954      	ldr	r1, [pc, #336]	@ (801495c <rmw_init+0x238>)
 801480c:	4854      	ldr	r0, [pc, #336]	@ (8014960 <rmw_init+0x23c>)
 801480e:	220f      	movs	r2, #15
 8014810:	f7f6 f9ea 	bl	800abe8 <rmw_uxrce_init_topic_memory>
 8014814:	4953      	ldr	r1, [pc, #332]	@ (8014964 <rmw_init+0x240>)
 8014816:	4854      	ldr	r0, [pc, #336]	@ (8014968 <rmw_init+0x244>)
 8014818:	2203      	movs	r2, #3
 801481a:	f7f6 fa25 	bl	800ac68 <rmw_uxrce_init_init_options_impl_memory>
 801481e:	4953      	ldr	r1, [pc, #332]	@ (801496c <rmw_init+0x248>)
 8014820:	4853      	ldr	r0, [pc, #332]	@ (8014970 <rmw_init+0x24c>)
 8014822:	2204      	movs	r2, #4
 8014824:	f7f6 fa40 	bl	800aca8 <rmw_uxrce_init_wait_set_memory>
 8014828:	4952      	ldr	r1, [pc, #328]	@ (8014974 <rmw_init+0x250>)
 801482a:	4853      	ldr	r0, [pc, #332]	@ (8014978 <rmw_init+0x254>)
 801482c:	2204      	movs	r2, #4
 801482e:	f7f6 fa5b 	bl	800ace8 <rmw_uxrce_init_guard_condition_memory>
 8014832:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8014834:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8014836:	4642      	mov	r2, r8
 8014838:	f7f6 f8de 	bl	800a9f8 <rmw_uxrce_transport_init>
 801483c:	4607      	mov	r7, r0
 801483e:	2800      	cmp	r0, #0
 8014840:	d161      	bne.n	8014906 <rmw_init+0x1e2>
 8014842:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8014844:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8014848:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801484a:	4628      	mov	r0, r5
 801484c:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8014850:	f7f9 f912 	bl	800da78 <uxr_init_session>
 8014854:	4628      	mov	r0, r5
 8014856:	4949      	ldr	r1, [pc, #292]	@ (801497c <rmw_init+0x258>)
 8014858:	4622      	mov	r2, r4
 801485a:	f7f9 f931 	bl	800dac0 <uxr_set_topic_callback>
 801485e:	4628      	mov	r0, r5
 8014860:	4947      	ldr	r1, [pc, #284]	@ (8014980 <rmw_init+0x25c>)
 8014862:	463a      	mov	r2, r7
 8014864:	f7f9 f928 	bl	800dab8 <uxr_set_status_callback>
 8014868:	4628      	mov	r0, r5
 801486a:	4946      	ldr	r1, [pc, #280]	@ (8014984 <rmw_init+0x260>)
 801486c:	463a      	mov	r2, r7
 801486e:	f7f9 f92b 	bl	800dac8 <uxr_set_request_callback>
 8014872:	4628      	mov	r0, r5
 8014874:	4944      	ldr	r1, [pc, #272]	@ (8014988 <rmw_init+0x264>)
 8014876:	463a      	mov	r2, r7
 8014878:	f7f9 f92a 	bl	800dad0 <uxr_set_reply_callback>
 801487c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014880:	2304      	movs	r3, #4
 8014882:	0092      	lsls	r2, r2, #2
 8014884:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8014888:	4628      	mov	r0, r5
 801488a:	f7f9 f94f 	bl	800db2c <uxr_create_input_reliable_stream>
 801488e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014892:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8014896:	2304      	movs	r3, #4
 8014898:	0092      	lsls	r2, r2, #2
 801489a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801489e:	4628      	mov	r0, r5
 80148a0:	f7f9 f92c 	bl	800dafc <uxr_create_output_reliable_stream>
 80148a4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80148a8:	4628      	mov	r0, r5
 80148aa:	f7f9 f939 	bl	800db20 <uxr_create_input_best_effort_stream>
 80148ae:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80148b2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80148b6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80148ba:	3114      	adds	r1, #20
 80148bc:	4628      	mov	r0, r5
 80148be:	f7f9 f90b 	bl	800dad8 <uxr_create_output_best_effort_stream>
 80148c2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80148c6:	4628      	mov	r0, r5
 80148c8:	f7f9 fecc 	bl	800e664 <uxr_create_session>
 80148cc:	4605      	mov	r5, r0
 80148ce:	b140      	cbz	r0, 80148e2 <rmw_init+0x1be>
 80148d0:	4638      	mov	r0, r7
 80148d2:	b003      	add	sp, #12
 80148d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148d8:	270b      	movs	r7, #11
 80148da:	4638      	mov	r0, r7
 80148dc:	b003      	add	sp, #12
 80148de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148e2:	4648      	mov	r0, r9
 80148e4:	f7f8 fefe 	bl	800d6e4 <uxr_close_custom_transport>
 80148e8:	4810      	ldr	r0, [pc, #64]	@ (801492c <rmw_init+0x208>)
 80148ea:	4621      	mov	r1, r4
 80148ec:	f7ff fdae 	bl	801444c <put_memory>
 80148f0:	66f5      	str	r5, [r6, #108]	@ 0x6c
 80148f2:	2701      	movs	r7, #1
 80148f4:	4638      	mov	r0, r7
 80148f6:	b003      	add	sp, #12
 80148f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148fc:	270c      	movs	r7, #12
 80148fe:	4638      	mov	r0, r7
 8014900:	b003      	add	sp, #12
 8014902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014906:	4648      	mov	r0, r9
 8014908:	f7f8 feec 	bl	800d6e4 <uxr_close_custom_transport>
 801490c:	4807      	ldr	r0, [pc, #28]	@ (801492c <rmw_init+0x208>)
 801490e:	4621      	mov	r1, r4
 8014910:	f7ff fd9c 	bl	801444c <put_memory>
 8014914:	4638      	mov	r0, r7
 8014916:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 801491a:	b003      	add	sp, #12
 801491c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014920:	0801aeb4 	.word	0x0801aeb4
 8014924:	2000da58 	.word	0x2000da58
 8014928:	2000eb50 	.word	0x2000eb50
 801492c:	200100f8 	.word	0x200100f8
 8014930:	2000b958 	.word	0x2000b958
 8014934:	2000ea98 	.word	0x2000ea98
 8014938:	2000eb3c 	.word	0x2000eb3c
 801493c:	2000ddd0 	.word	0x2000ddd0
 8014940:	2000e208 	.word	0x2000e208
 8014944:	2000e218 	.word	0x2000e218
 8014948:	2000ea88 	.word	0x2000ea88
 801494c:	2000dcf8 	.word	0x2000dcf8
 8014950:	2000ddc0 	.word	0x2000ddc0
 8014954:	2000dc20 	.word	0x2000dc20
 8014958:	2000dce8 	.word	0x2000dce8
 801495c:	2000da68 	.word	0x2000da68
 8014960:	2000dc0c 	.word	0x2000dc0c
 8014964:	2000b8c4 	.word	0x2000b8c4
 8014968:	2000b948 	.word	0x2000b948
 801496c:	2000b844 	.word	0x2000b844
 8014970:	2000b8b4 	.word	0x2000b8b4
 8014974:	2000b7b4 	.word	0x2000b7b4
 8014978:	2000b834 	.word	0x2000b834
 801497c:	08017795 	.word	0x08017795
 8014980:	0801778d 	.word	0x0801778d
 8014984:	0801782d 	.word	0x0801782d
 8014988:	080178c9 	.word	0x080178c9

0801498c <rmw_context_fini>:
 801498c:	4b17      	ldr	r3, [pc, #92]	@ (80149ec <rmw_context_fini+0x60>)
 801498e:	b570      	push	{r4, r5, r6, lr}
 8014990:	681c      	ldr	r4, [r3, #0]
 8014992:	4605      	mov	r5, r0
 8014994:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8014996:	b33c      	cbz	r4, 80149e8 <rmw_context_fini+0x5c>
 8014998:	2600      	movs	r6, #0
 801499a:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 801499e:	691a      	ldr	r2, [r3, #16]
 80149a0:	4282      	cmp	r2, r0
 80149a2:	d018      	beq.n	80149d6 <rmw_context_fini+0x4a>
 80149a4:	2c00      	cmp	r4, #0
 80149a6:	d1f8      	bne.n	801499a <rmw_context_fini+0xe>
 80149a8:	b188      	cbz	r0, 80149ce <rmw_context_fini+0x42>
 80149aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80149ae:	789b      	ldrb	r3, [r3, #2]
 80149b0:	2b01      	cmp	r3, #1
 80149b2:	bf14      	ite	ne
 80149b4:	210a      	movne	r1, #10
 80149b6:	2100      	moveq	r1, #0
 80149b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80149bc:	f7f9 fe2a 	bl	800e614 <uxr_delete_session_retries>
 80149c0:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80149c2:	f7f6 f9b1 	bl	800ad28 <rmw_uxrce_fini_session_memory>
 80149c6:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80149c8:	3010      	adds	r0, #16
 80149ca:	f7f8 fe8b 	bl	800d6e4 <uxr_close_custom_transport>
 80149ce:	2300      	movs	r3, #0
 80149d0:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80149d2:	4630      	mov	r0, r6
 80149d4:	bd70      	pop	{r4, r5, r6, pc}
 80149d6:	f103 0018 	add.w	r0, r3, #24
 80149da:	f000 f911 	bl	8014c00 <rmw_destroy_node>
 80149de:	4606      	mov	r6, r0
 80149e0:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80149e2:	2c00      	cmp	r4, #0
 80149e4:	d1d9      	bne.n	801499a <rmw_context_fini+0xe>
 80149e6:	e7df      	b.n	80149a8 <rmw_context_fini+0x1c>
 80149e8:	4626      	mov	r6, r4
 80149ea:	e7dd      	b.n	80149a8 <rmw_context_fini+0x1c>
 80149ec:	2000eb3c 	.word	0x2000eb3c

080149f0 <create_topic>:
 80149f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149f4:	4604      	mov	r4, r0
 80149f6:	b084      	sub	sp, #16
 80149f8:	4824      	ldr	r0, [pc, #144]	@ (8014a8c <create_topic+0x9c>)
 80149fa:	460f      	mov	r7, r1
 80149fc:	4616      	mov	r6, r2
 80149fe:	f7ff fd15 	bl	801442c <get_memory>
 8014a02:	2800      	cmp	r0, #0
 8014a04:	d03c      	beq.n	8014a80 <create_topic+0x90>
 8014a06:	6923      	ldr	r3, [r4, #16]
 8014a08:	6885      	ldr	r5, [r0, #8]
 8014a0a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8014a94 <create_topic+0xa4>
 8014a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014a12:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8014a16:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8014a1a:	1c42      	adds	r2, r0, #1
 8014a1c:	2102      	movs	r1, #2
 8014a1e:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8014a22:	f7f8 fe63 	bl	800d6ec <uxr_object_id>
 8014a26:	223c      	movs	r2, #60	@ 0x3c
 8014a28:	6128      	str	r0, [r5, #16]
 8014a2a:	4641      	mov	r1, r8
 8014a2c:	4638      	mov	r0, r7
 8014a2e:	f7f6 fb65 	bl	800b0fc <generate_topic_name>
 8014a32:	b310      	cbz	r0, 8014a7a <create_topic+0x8a>
 8014a34:	4f16      	ldr	r7, [pc, #88]	@ (8014a90 <create_topic+0xa0>)
 8014a36:	4630      	mov	r0, r6
 8014a38:	2264      	movs	r2, #100	@ 0x64
 8014a3a:	4639      	mov	r1, r7
 8014a3c:	f7f6 fb2e 	bl	800b09c <generate_type_name>
 8014a40:	b1d8      	cbz	r0, 8014a7a <create_topic+0x8a>
 8014a42:	6920      	ldr	r0, [r4, #16]
 8014a44:	2306      	movs	r3, #6
 8014a46:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014a4a:	f8cd 8000 	str.w	r8, [sp]
 8014a4e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014a52:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014a56:	6811      	ldr	r1, [r2, #0]
 8014a58:	6963      	ldr	r3, [r4, #20]
 8014a5a:	692a      	ldr	r2, [r5, #16]
 8014a5c:	f7f8 fcbe 	bl	800d3dc <uxr_buffer_create_topic_bin>
 8014a60:	4602      	mov	r2, r0
 8014a62:	6920      	ldr	r0, [r4, #16]
 8014a64:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014a68:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014a6c:	f7f6 fada 	bl	800b024 <run_xrce_session>
 8014a70:	b118      	cbz	r0, 8014a7a <create_topic+0x8a>
 8014a72:	4628      	mov	r0, r5
 8014a74:	b004      	add	sp, #16
 8014a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a7a:	4628      	mov	r0, r5
 8014a7c:	f7f6 f9ca 	bl	800ae14 <rmw_uxrce_fini_topic_memory>
 8014a80:	2500      	movs	r5, #0
 8014a82:	4628      	mov	r0, r5
 8014a84:	b004      	add	sp, #16
 8014a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a8a:	bf00      	nop
 8014a8c:	2000dc0c 	.word	0x2000dc0c
 8014a90:	20010294 	.word	0x20010294
 8014a94:	200102f8 	.word	0x200102f8

08014a98 <destroy_topic>:
 8014a98:	b538      	push	{r3, r4, r5, lr}
 8014a9a:	6984      	ldr	r4, [r0, #24]
 8014a9c:	b1d4      	cbz	r4, 8014ad4 <destroy_topic+0x3c>
 8014a9e:	4605      	mov	r5, r0
 8014aa0:	6920      	ldr	r0, [r4, #16]
 8014aa2:	692a      	ldr	r2, [r5, #16]
 8014aa4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014aa8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014aac:	6819      	ldr	r1, [r3, #0]
 8014aae:	f7f8 fc19 	bl	800d2e4 <uxr_buffer_delete_entity>
 8014ab2:	4602      	mov	r2, r0
 8014ab4:	6920      	ldr	r0, [r4, #16]
 8014ab6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014aba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014abe:	f7f6 fab1 	bl	800b024 <run_xrce_session>
 8014ac2:	f080 0401 	eor.w	r4, r0, #1
 8014ac6:	b2e4      	uxtb	r4, r4
 8014ac8:	4628      	mov	r0, r5
 8014aca:	0064      	lsls	r4, r4, #1
 8014acc:	f7f6 f9a2 	bl	800ae14 <rmw_uxrce_fini_topic_memory>
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	bd38      	pop	{r3, r4, r5, pc}
 8014ad4:	2401      	movs	r4, #1
 8014ad6:	4620      	mov	r0, r4
 8014ad8:	bd38      	pop	{r3, r4, r5, pc}
 8014ada:	bf00      	nop

08014adc <create_node>:
 8014adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ae0:	b083      	sub	sp, #12
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d063      	beq.n	8014bae <create_node+0xd2>
 8014ae6:	4606      	mov	r6, r0
 8014ae8:	4836      	ldr	r0, [pc, #216]	@ (8014bc4 <create_node+0xe8>)
 8014aea:	460f      	mov	r7, r1
 8014aec:	4690      	mov	r8, r2
 8014aee:	461d      	mov	r5, r3
 8014af0:	f7ff fc9c 	bl	801442c <get_memory>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	d05a      	beq.n	8014bae <create_node+0xd2>
 8014af8:	6884      	ldr	r4, [r0, #8]
 8014afa:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8014afc:	6123      	str	r3, [r4, #16]
 8014afe:	f7ff fd1b 	bl	8014538 <rmw_get_implementation_identifier>
 8014b02:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8014b06:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8014b0a:	f8c4 9020 	str.w	r9, [r4, #32]
 8014b0e:	4630      	mov	r0, r6
 8014b10:	f7eb fbde 	bl	80002d0 <strlen>
 8014b14:	1c42      	adds	r2, r0, #1
 8014b16:	2a3c      	cmp	r2, #60	@ 0x3c
 8014b18:	f104 0518 	add.w	r5, r4, #24
 8014b1c:	d844      	bhi.n	8014ba8 <create_node+0xcc>
 8014b1e:	4648      	mov	r0, r9
 8014b20:	4631      	mov	r1, r6
 8014b22:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8014b26:	f003 fe28 	bl	801877a <memcpy>
 8014b2a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 8014b2e:	4638      	mov	r0, r7
 8014b30:	f7eb fbce 	bl	80002d0 <strlen>
 8014b34:	1c42      	adds	r2, r0, #1
 8014b36:	2a3c      	cmp	r2, #60	@ 0x3c
 8014b38:	d836      	bhi.n	8014ba8 <create_node+0xcc>
 8014b3a:	4639      	mov	r1, r7
 8014b3c:	4648      	mov	r0, r9
 8014b3e:	f003 fe1c 	bl	801877a <memcpy>
 8014b42:	6923      	ldr	r3, [r4, #16]
 8014b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014b48:	2101      	movs	r1, #1
 8014b4a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 8014b4e:	1842      	adds	r2, r0, r1
 8014b50:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8014b54:	f7f8 fdca 	bl	800d6ec <uxr_object_id>
 8014b58:	6160      	str	r0, [r4, #20]
 8014b5a:	783b      	ldrb	r3, [r7, #0]
 8014b5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8014b5e:	d128      	bne.n	8014bb2 <create_node+0xd6>
 8014b60:	787b      	ldrb	r3, [r7, #1]
 8014b62:	bb33      	cbnz	r3, 8014bb2 <create_node+0xd6>
 8014b64:	4a18      	ldr	r2, [pc, #96]	@ (8014bc8 <create_node+0xec>)
 8014b66:	4819      	ldr	r0, [pc, #100]	@ (8014bcc <create_node+0xf0>)
 8014b68:	4633      	mov	r3, r6
 8014b6a:	213c      	movs	r1, #60	@ 0x3c
 8014b6c:	f003 fbb6 	bl	80182dc <sniprintf>
 8014b70:	6920      	ldr	r0, [r4, #16]
 8014b72:	4916      	ldr	r1, [pc, #88]	@ (8014bcc <create_node+0xf0>)
 8014b74:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014b78:	9100      	str	r1, [sp, #0]
 8014b7a:	2106      	movs	r1, #6
 8014b7c:	9101      	str	r1, [sp, #4]
 8014b7e:	6811      	ldr	r1, [r2, #0]
 8014b80:	6962      	ldr	r2, [r4, #20]
 8014b82:	fa1f f388 	uxth.w	r3, r8
 8014b86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b8a:	f7f8 fbf5 	bl	800d378 <uxr_buffer_create_participant_bin>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	6920      	ldr	r0, [r4, #16]
 8014b92:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014b96:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014b9a:	f7f6 fa43 	bl	800b024 <run_xrce_session>
 8014b9e:	b118      	cbz	r0, 8014ba8 <create_node+0xcc>
 8014ba0:	4628      	mov	r0, r5
 8014ba2:	b003      	add	sp, #12
 8014ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ba8:	4628      	mov	r0, r5
 8014baa:	f7f6 f8c3 	bl	800ad34 <rmw_uxrce_fini_node_memory>
 8014bae:	2500      	movs	r5, #0
 8014bb0:	e7f6      	b.n	8014ba0 <create_node+0xc4>
 8014bb2:	4a07      	ldr	r2, [pc, #28]	@ (8014bd0 <create_node+0xf4>)
 8014bb4:	9600      	str	r6, [sp, #0]
 8014bb6:	463b      	mov	r3, r7
 8014bb8:	213c      	movs	r1, #60	@ 0x3c
 8014bba:	4804      	ldr	r0, [pc, #16]	@ (8014bcc <create_node+0xf0>)
 8014bbc:	f003 fb8e 	bl	80182dc <sniprintf>
 8014bc0:	e7d6      	b.n	8014b70 <create_node+0x94>
 8014bc2:	bf00      	nop
 8014bc4:	2000eb3c 	.word	0x2000eb3c
 8014bc8:	0801a108 	.word	0x0801a108
 8014bcc:	20010334 	.word	0x20010334
 8014bd0:	0801a30c 	.word	0x0801a30c

08014bd4 <rmw_create_node>:
 8014bd4:	b191      	cbz	r1, 8014bfc <rmw_create_node+0x28>
 8014bd6:	b410      	push	{r4}
 8014bd8:	4614      	mov	r4, r2
 8014bda:	780a      	ldrb	r2, [r1, #0]
 8014bdc:	4603      	mov	r3, r0
 8014bde:	4608      	mov	r0, r1
 8014be0:	b142      	cbz	r2, 8014bf4 <rmw_create_node+0x20>
 8014be2:	b13c      	cbz	r4, 8014bf4 <rmw_create_node+0x20>
 8014be4:	7822      	ldrb	r2, [r4, #0]
 8014be6:	b12a      	cbz	r2, 8014bf4 <rmw_create_node+0x20>
 8014be8:	4621      	mov	r1, r4
 8014bea:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8014bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bf0:	f7ff bf74 	b.w	8014adc <create_node>
 8014bf4:	2000      	movs	r0, #0
 8014bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bfa:	4770      	bx	lr
 8014bfc:	2000      	movs	r0, #0
 8014bfe:	4770      	bx	lr

08014c00 <rmw_destroy_node>:
 8014c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c02:	b328      	cbz	r0, 8014c50 <rmw_destroy_node+0x50>
 8014c04:	4607      	mov	r7, r0
 8014c06:	6800      	ldr	r0, [r0, #0]
 8014c08:	b120      	cbz	r0, 8014c14 <rmw_destroy_node+0x14>
 8014c0a:	4b36      	ldr	r3, [pc, #216]	@ (8014ce4 <rmw_destroy_node+0xe4>)
 8014c0c:	6819      	ldr	r1, [r3, #0]
 8014c0e:	f7eb faff 	bl	8000210 <strcmp>
 8014c12:	b9e8      	cbnz	r0, 8014c50 <rmw_destroy_node+0x50>
 8014c14:	687d      	ldr	r5, [r7, #4]
 8014c16:	b1dd      	cbz	r5, 8014c50 <rmw_destroy_node+0x50>
 8014c18:	4b33      	ldr	r3, [pc, #204]	@ (8014ce8 <rmw_destroy_node+0xe8>)
 8014c1a:	681c      	ldr	r4, [r3, #0]
 8014c1c:	2c00      	cmp	r4, #0
 8014c1e:	d05f      	beq.n	8014ce0 <rmw_destroy_node+0xe0>
 8014c20:	2600      	movs	r6, #0
 8014c22:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014c26:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 8014c2a:	429d      	cmp	r5, r3
 8014c2c:	d013      	beq.n	8014c56 <rmw_destroy_node+0x56>
 8014c2e:	2c00      	cmp	r4, #0
 8014c30:	d1f7      	bne.n	8014c22 <rmw_destroy_node+0x22>
 8014c32:	4b2e      	ldr	r3, [pc, #184]	@ (8014cec <rmw_destroy_node+0xec>)
 8014c34:	681c      	ldr	r4, [r3, #0]
 8014c36:	b1c4      	cbz	r4, 8014c6a <rmw_destroy_node+0x6a>
 8014c38:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014c3c:	6a0b      	ldr	r3, [r1, #32]
 8014c3e:	429d      	cmp	r5, r3
 8014c40:	d1f9      	bne.n	8014c36 <rmw_destroy_node+0x36>
 8014c42:	317c      	adds	r1, #124	@ 0x7c
 8014c44:	4638      	mov	r0, r7
 8014c46:	f000 f9eb 	bl	8015020 <rmw_destroy_subscription>
 8014c4a:	2801      	cmp	r0, #1
 8014c4c:	4606      	mov	r6, r0
 8014c4e:	d1f2      	bne.n	8014c36 <rmw_destroy_node+0x36>
 8014c50:	2601      	movs	r6, #1
 8014c52:	4630      	mov	r0, r6
 8014c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c56:	3184      	adds	r1, #132	@ 0x84
 8014c58:	4638      	mov	r0, r7
 8014c5a:	f7f5 fe7b 	bl	800a954 <rmw_destroy_publisher>
 8014c5e:	2801      	cmp	r0, #1
 8014c60:	4606      	mov	r6, r0
 8014c62:	d0f5      	beq.n	8014c50 <rmw_destroy_node+0x50>
 8014c64:	2c00      	cmp	r4, #0
 8014c66:	d1dc      	bne.n	8014c22 <rmw_destroy_node+0x22>
 8014c68:	e7e3      	b.n	8014c32 <rmw_destroy_node+0x32>
 8014c6a:	4b21      	ldr	r3, [pc, #132]	@ (8014cf0 <rmw_destroy_node+0xf0>)
 8014c6c:	681c      	ldr	r4, [r3, #0]
 8014c6e:	b16c      	cbz	r4, 8014c8c <rmw_destroy_node+0x8c>
 8014c70:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014c74:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014c76:	429d      	cmp	r5, r3
 8014c78:	d1f9      	bne.n	8014c6e <rmw_destroy_node+0x6e>
 8014c7a:	317c      	adds	r1, #124	@ 0x7c
 8014c7c:	4638      	mov	r0, r7
 8014c7e:	f000 f98b 	bl	8014f98 <rmw_destroy_service>
 8014c82:	2801      	cmp	r0, #1
 8014c84:	4606      	mov	r6, r0
 8014c86:	d0e3      	beq.n	8014c50 <rmw_destroy_node+0x50>
 8014c88:	2c00      	cmp	r4, #0
 8014c8a:	d1f1      	bne.n	8014c70 <rmw_destroy_node+0x70>
 8014c8c:	4b19      	ldr	r3, [pc, #100]	@ (8014cf4 <rmw_destroy_node+0xf4>)
 8014c8e:	681c      	ldr	r4, [r3, #0]
 8014c90:	b16c      	cbz	r4, 8014cae <rmw_destroy_node+0xae>
 8014c92:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014c96:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8014c98:	429d      	cmp	r5, r3
 8014c9a:	d1f9      	bne.n	8014c90 <rmw_destroy_node+0x90>
 8014c9c:	317c      	adds	r1, #124	@ 0x7c
 8014c9e:	4638      	mov	r0, r7
 8014ca0:	f7ff fbe8 	bl	8014474 <rmw_destroy_client>
 8014ca4:	2801      	cmp	r0, #1
 8014ca6:	4606      	mov	r6, r0
 8014ca8:	d0d2      	beq.n	8014c50 <rmw_destroy_node+0x50>
 8014caa:	2c00      	cmp	r4, #0
 8014cac:	d1f1      	bne.n	8014c92 <rmw_destroy_node+0x92>
 8014cae:	6928      	ldr	r0, [r5, #16]
 8014cb0:	696a      	ldr	r2, [r5, #20]
 8014cb2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014cb6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014cba:	6819      	ldr	r1, [r3, #0]
 8014cbc:	f7f8 fb12 	bl	800d2e4 <uxr_buffer_delete_entity>
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	6928      	ldr	r0, [r5, #16]
 8014cc4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014cc8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014ccc:	f7f6 f9aa 	bl	800b024 <run_xrce_session>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	bf08      	it	eq
 8014cd4:	2602      	moveq	r6, #2
 8014cd6:	4638      	mov	r0, r7
 8014cd8:	f7f6 f82c 	bl	800ad34 <rmw_uxrce_fini_node_memory>
 8014cdc:	4630      	mov	r0, r6
 8014cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ce0:	4626      	mov	r6, r4
 8014ce2:	e7a6      	b.n	8014c32 <rmw_destroy_node+0x32>
 8014ce4:	0801aeb4 	.word	0x0801aeb4
 8014ce8:	2000ea88 	.word	0x2000ea88
 8014cec:	2000e208 	.word	0x2000e208
 8014cf0:	2000ddc0 	.word	0x2000ddc0
 8014cf4:	2000dce8 	.word	0x2000dce8

08014cf8 <rmw_node_get_graph_guard_condition>:
 8014cf8:	6843      	ldr	r3, [r0, #4]
 8014cfa:	6918      	ldr	r0, [r3, #16]
 8014cfc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8014d00:	4770      	bx	lr
 8014d02:	bf00      	nop

08014d04 <rmw_send_request>:
 8014d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d08:	4604      	mov	r4, r0
 8014d0a:	6800      	ldr	r0, [r0, #0]
 8014d0c:	b08a      	sub	sp, #40	@ 0x28
 8014d0e:	460e      	mov	r6, r1
 8014d10:	4615      	mov	r5, r2
 8014d12:	b128      	cbz	r0, 8014d20 <rmw_send_request+0x1c>
 8014d14:	4b1e      	ldr	r3, [pc, #120]	@ (8014d90 <rmw_send_request+0x8c>)
 8014d16:	6819      	ldr	r1, [r3, #0]
 8014d18:	f7eb fa7a 	bl	8000210 <strcmp>
 8014d1c:	2800      	cmp	r0, #0
 8014d1e:	d133      	bne.n	8014d88 <rmw_send_request+0x84>
 8014d20:	6864      	ldr	r4, [r4, #4]
 8014d22:	6963      	ldr	r3, [r4, #20]
 8014d24:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 8014d26:	689b      	ldr	r3, [r3, #8]
 8014d28:	4798      	blx	r3
 8014d2a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014d2e:	4630      	mov	r0, r6
 8014d30:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014d34:	4798      	blx	r3
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	9000      	str	r0, [sp, #0]
 8014d3a:	6922      	ldr	r2, [r4, #16]
 8014d3c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8014d3e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8014d42:	ab02      	add	r3, sp, #8
 8014d44:	f7fa fd60 	bl	800f808 <uxr_prepare_output_stream>
 8014d48:	2300      	movs	r3, #0
 8014d4a:	6028      	str	r0, [r5, #0]
 8014d4c:	606b      	str	r3, [r5, #4]
 8014d4e:	b190      	cbz	r0, 8014d76 <rmw_send_request+0x72>
 8014d50:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014d54:	a902      	add	r1, sp, #8
 8014d56:	4630      	mov	r0, r6
 8014d58:	4798      	blx	r3
 8014d5a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014d5e:	6938      	ldr	r0, [r7, #16]
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d00c      	beq.n	8014d7e <rmw_send_request+0x7a>
 8014d64:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8014d66:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014d6a:	f7f9 fa8d 	bl	800e288 <uxr_run_session_until_confirm_delivery>
 8014d6e:	2000      	movs	r0, #0
 8014d70:	b00a      	add	sp, #40	@ 0x28
 8014d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d76:	2001      	movs	r0, #1
 8014d78:	b00a      	add	sp, #40	@ 0x28
 8014d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d7e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014d82:	f7f8 fee9 	bl	800db58 <uxr_flash_output_streams>
 8014d86:	e7f2      	b.n	8014d6e <rmw_send_request+0x6a>
 8014d88:	200c      	movs	r0, #12
 8014d8a:	b00a      	add	sp, #40	@ 0x28
 8014d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d90:	0801aeb4 	.word	0x0801aeb4

08014d94 <rmw_take_request>:
 8014d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d98:	4605      	mov	r5, r0
 8014d9a:	6800      	ldr	r0, [r0, #0]
 8014d9c:	b089      	sub	sp, #36	@ 0x24
 8014d9e:	460c      	mov	r4, r1
 8014da0:	4690      	mov	r8, r2
 8014da2:	461e      	mov	r6, r3
 8014da4:	b128      	cbz	r0, 8014db2 <rmw_take_request+0x1e>
 8014da6:	4b28      	ldr	r3, [pc, #160]	@ (8014e48 <rmw_take_request+0xb4>)
 8014da8:	6819      	ldr	r1, [r3, #0]
 8014daa:	f7eb fa31 	bl	8000210 <strcmp>
 8014dae:	2800      	cmp	r0, #0
 8014db0:	d146      	bne.n	8014e40 <rmw_take_request+0xac>
 8014db2:	b10e      	cbz	r6, 8014db8 <rmw_take_request+0x24>
 8014db4:	2300      	movs	r3, #0
 8014db6:	7033      	strb	r3, [r6, #0]
 8014db8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014dbc:	f7f6 f8b4 	bl	800af28 <rmw_uxrce_clean_expired_static_input_buffer>
 8014dc0:	4648      	mov	r0, r9
 8014dc2:	f7f6 f88b 	bl	800aedc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014dc6:	4607      	mov	r7, r0
 8014dc8:	b3b0      	cbz	r0, 8014e38 <rmw_take_request+0xa4>
 8014dca:	6885      	ldr	r5, [r0, #8]
 8014dcc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8014dd0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8014dd4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014dd8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8014ddc:	7423      	strb	r3, [r4, #16]
 8014dde:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8014de2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8014de6:	74e2      	strb	r2, [r4, #19]
 8014de8:	f8a4 3011 	strh.w	r3, [r4, #17]
 8014dec:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8014df0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8014df4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8014df8:	61e1      	str	r1, [r4, #28]
 8014dfa:	6162      	str	r2, [r4, #20]
 8014dfc:	61a3      	str	r3, [r4, #24]
 8014dfe:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014e02:	689b      	ldr	r3, [r3, #8]
 8014e04:	4798      	blx	r3
 8014e06:	6844      	ldr	r4, [r0, #4]
 8014e08:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8014e0c:	f105 0110 	add.w	r1, r5, #16
 8014e10:	4668      	mov	r0, sp
 8014e12:	f7f8 f99b 	bl	800d14c <ucdr_init_buffer>
 8014e16:	68e3      	ldr	r3, [r4, #12]
 8014e18:	4641      	mov	r1, r8
 8014e1a:	4668      	mov	r0, sp
 8014e1c:	4798      	blx	r3
 8014e1e:	4639      	mov	r1, r7
 8014e20:	4604      	mov	r4, r0
 8014e22:	480a      	ldr	r0, [pc, #40]	@ (8014e4c <rmw_take_request+0xb8>)
 8014e24:	f7ff fb12 	bl	801444c <put_memory>
 8014e28:	b106      	cbz	r6, 8014e2c <rmw_take_request+0x98>
 8014e2a:	7034      	strb	r4, [r6, #0]
 8014e2c:	f084 0001 	eor.w	r0, r4, #1
 8014e30:	b2c0      	uxtb	r0, r0
 8014e32:	b009      	add	sp, #36	@ 0x24
 8014e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e38:	2001      	movs	r0, #1
 8014e3a:	b009      	add	sp, #36	@ 0x24
 8014e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e40:	200c      	movs	r0, #12
 8014e42:	b009      	add	sp, #36	@ 0x24
 8014e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e48:	0801aeb4 	.word	0x0801aeb4
 8014e4c:	2000da58 	.word	0x2000da58

08014e50 <rmw_send_response>:
 8014e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e52:	4605      	mov	r5, r0
 8014e54:	6800      	ldr	r0, [r0, #0]
 8014e56:	b091      	sub	sp, #68	@ 0x44
 8014e58:	460c      	mov	r4, r1
 8014e5a:	4616      	mov	r6, r2
 8014e5c:	b128      	cbz	r0, 8014e6a <rmw_send_response+0x1a>
 8014e5e:	4b28      	ldr	r3, [pc, #160]	@ (8014f00 <rmw_send_response+0xb0>)
 8014e60:	6819      	ldr	r1, [r3, #0]
 8014e62:	f7eb f9d5 	bl	8000210 <strcmp>
 8014e66:	2800      	cmp	r0, #0
 8014e68:	d141      	bne.n	8014eee <rmw_send_response+0x9e>
 8014e6a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8014e6e:	9306      	str	r3, [sp, #24]
 8014e70:	4623      	mov	r3, r4
 8014e72:	9207      	str	r2, [sp, #28]
 8014e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e78:	686d      	ldr	r5, [r5, #4]
 8014e7a:	789b      	ldrb	r3, [r3, #2]
 8014e7c:	68a1      	ldr	r1, [r4, #8]
 8014e7e:	f88d 2017 	strb.w	r2, [sp, #23]
 8014e82:	f88d 3016 	strb.w	r3, [sp, #22]
 8014e86:	68e2      	ldr	r2, [r4, #12]
 8014e88:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014e8c:	6860      	ldr	r0, [r4, #4]
 8014e8e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014e92:	ab02      	add	r3, sp, #8
 8014e94:	c307      	stmia	r3!, {r0, r1, r2}
 8014e96:	696b      	ldr	r3, [r5, #20]
 8014e98:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8014e9a:	68db      	ldr	r3, [r3, #12]
 8014e9c:	4798      	blx	r3
 8014e9e:	6844      	ldr	r4, [r0, #4]
 8014ea0:	4630      	mov	r0, r6
 8014ea2:	6923      	ldr	r3, [r4, #16]
 8014ea4:	4798      	blx	r3
 8014ea6:	f100 0318 	add.w	r3, r0, #24
 8014eaa:	6938      	ldr	r0, [r7, #16]
 8014eac:	9300      	str	r3, [sp, #0]
 8014eae:	692a      	ldr	r2, [r5, #16]
 8014eb0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8014eb2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014eb6:	ab08      	add	r3, sp, #32
 8014eb8:	f7fa fca6 	bl	800f808 <uxr_prepare_output_stream>
 8014ebc:	b910      	cbnz	r0, 8014ec4 <rmw_send_response+0x74>
 8014ebe:	2001      	movs	r0, #1
 8014ec0:	b011      	add	sp, #68	@ 0x44
 8014ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ec4:	a902      	add	r1, sp, #8
 8014ec6:	a808      	add	r0, sp, #32
 8014ec8:	f7fb fce2 	bl	8010890 <uxr_serialize_SampleIdentity>
 8014ecc:	68a3      	ldr	r3, [r4, #8]
 8014ece:	a908      	add	r1, sp, #32
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	4798      	blx	r3
 8014ed4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8014ed8:	6938      	ldr	r0, [r7, #16]
 8014eda:	2b01      	cmp	r3, #1
 8014edc:	d00a      	beq.n	8014ef4 <rmw_send_response+0xa4>
 8014ede:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8014ee0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ee4:	f7f9 f9d0 	bl	800e288 <uxr_run_session_until_confirm_delivery>
 8014ee8:	2000      	movs	r0, #0
 8014eea:	b011      	add	sp, #68	@ 0x44
 8014eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014eee:	200c      	movs	r0, #12
 8014ef0:	b011      	add	sp, #68	@ 0x44
 8014ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ef4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ef8:	f7f8 fe2e 	bl	800db58 <uxr_flash_output_streams>
 8014efc:	e7f4      	b.n	8014ee8 <rmw_send_response+0x98>
 8014efe:	bf00      	nop
 8014f00:	0801aeb4 	.word	0x0801aeb4

08014f04 <rmw_take_response>:
 8014f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f08:	4604      	mov	r4, r0
 8014f0a:	6800      	ldr	r0, [r0, #0]
 8014f0c:	b088      	sub	sp, #32
 8014f0e:	4688      	mov	r8, r1
 8014f10:	4617      	mov	r7, r2
 8014f12:	461d      	mov	r5, r3
 8014f14:	b120      	cbz	r0, 8014f20 <rmw_take_response+0x1c>
 8014f16:	4b1e      	ldr	r3, [pc, #120]	@ (8014f90 <rmw_take_response+0x8c>)
 8014f18:	6819      	ldr	r1, [r3, #0]
 8014f1a:	f7eb f979 	bl	8000210 <strcmp>
 8014f1e:	bb78      	cbnz	r0, 8014f80 <rmw_take_response+0x7c>
 8014f20:	b10d      	cbz	r5, 8014f26 <rmw_take_response+0x22>
 8014f22:	2300      	movs	r3, #0
 8014f24:	702b      	strb	r3, [r5, #0]
 8014f26:	6864      	ldr	r4, [r4, #4]
 8014f28:	f7f5 fffe 	bl	800af28 <rmw_uxrce_clean_expired_static_input_buffer>
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	f7f5 ffd5 	bl	800aedc <rmw_uxrce_find_static_input_buffer_by_owner>
 8014f32:	4606      	mov	r6, r0
 8014f34:	b340      	cbz	r0, 8014f88 <rmw_take_response+0x84>
 8014f36:	6963      	ldr	r3, [r4, #20]
 8014f38:	6884      	ldr	r4, [r0, #8]
 8014f3a:	68db      	ldr	r3, [r3, #12]
 8014f3c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8014f40:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014f44:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014f48:	4798      	blx	r3
 8014f4a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014f4e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8014f52:	f104 0110 	add.w	r1, r4, #16
 8014f56:	4668      	mov	r0, sp
 8014f58:	f7f8 f8f8 	bl	800d14c <ucdr_init_buffer>
 8014f5c:	4639      	mov	r1, r7
 8014f5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014f62:	4668      	mov	r0, sp
 8014f64:	4798      	blx	r3
 8014f66:	4631      	mov	r1, r6
 8014f68:	4604      	mov	r4, r0
 8014f6a:	480a      	ldr	r0, [pc, #40]	@ (8014f94 <rmw_take_response+0x90>)
 8014f6c:	f7ff fa6e 	bl	801444c <put_memory>
 8014f70:	b105      	cbz	r5, 8014f74 <rmw_take_response+0x70>
 8014f72:	702c      	strb	r4, [r5, #0]
 8014f74:	f084 0001 	eor.w	r0, r4, #1
 8014f78:	b2c0      	uxtb	r0, r0
 8014f7a:	b008      	add	sp, #32
 8014f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f80:	200c      	movs	r0, #12
 8014f82:	b008      	add	sp, #32
 8014f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f88:	2001      	movs	r0, #1
 8014f8a:	b008      	add	sp, #32
 8014f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f90:	0801aeb4 	.word	0x0801aeb4
 8014f94:	2000da58 	.word	0x2000da58

08014f98 <rmw_destroy_service>:
 8014f98:	b570      	push	{r4, r5, r6, lr}
 8014f9a:	b128      	cbz	r0, 8014fa8 <rmw_destroy_service+0x10>
 8014f9c:	4604      	mov	r4, r0
 8014f9e:	6800      	ldr	r0, [r0, #0]
 8014fa0:	460d      	mov	r5, r1
 8014fa2:	f7f6 f8c5 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 8014fa6:	b910      	cbnz	r0, 8014fae <rmw_destroy_service+0x16>
 8014fa8:	2401      	movs	r4, #1
 8014faa:	4620      	mov	r0, r4
 8014fac:	bd70      	pop	{r4, r5, r6, pc}
 8014fae:	6863      	ldr	r3, [r4, #4]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d0f9      	beq.n	8014fa8 <rmw_destroy_service+0x10>
 8014fb4:	2d00      	cmp	r5, #0
 8014fb6:	d0f7      	beq.n	8014fa8 <rmw_destroy_service+0x10>
 8014fb8:	6828      	ldr	r0, [r5, #0]
 8014fba:	f7f6 f8b9 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	d0f2      	beq.n	8014fa8 <rmw_destroy_service+0x10>
 8014fc2:	686e      	ldr	r6, [r5, #4]
 8014fc4:	2e00      	cmp	r6, #0
 8014fc6:	d0ef      	beq.n	8014fa8 <rmw_destroy_service+0x10>
 8014fc8:	6864      	ldr	r4, [r4, #4]
 8014fca:	6932      	ldr	r2, [r6, #16]
 8014fcc:	6920      	ldr	r0, [r4, #16]
 8014fce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014fd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014fd6:	6819      	ldr	r1, [r3, #0]
 8014fd8:	f001 fd1a 	bl	8016a10 <uxr_buffer_cancel_data>
 8014fdc:	4602      	mov	r2, r0
 8014fde:	6920      	ldr	r0, [r4, #16]
 8014fe0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014fe4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014fe8:	f7f6 f81c 	bl	800b024 <run_xrce_session>
 8014fec:	6920      	ldr	r0, [r4, #16]
 8014fee:	6932      	ldr	r2, [r6, #16]
 8014ff0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014ff4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ff8:	6819      	ldr	r1, [r3, #0]
 8014ffa:	f7f8 f973 	bl	800d2e4 <uxr_buffer_delete_entity>
 8014ffe:	4602      	mov	r2, r0
 8015000:	6920      	ldr	r0, [r4, #16]
 8015002:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015006:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801500a:	f7f6 f80b 	bl	800b024 <run_xrce_session>
 801500e:	f080 0401 	eor.w	r4, r0, #1
 8015012:	b2e4      	uxtb	r4, r4
 8015014:	4628      	mov	r0, r5
 8015016:	0064      	lsls	r4, r4, #1
 8015018:	f7f5 fed0 	bl	800adbc <rmw_uxrce_fini_service_memory>
 801501c:	e7c5      	b.n	8014faa <rmw_destroy_service+0x12>
 801501e:	bf00      	nop

08015020 <rmw_destroy_subscription>:
 8015020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015024:	b128      	cbz	r0, 8015032 <rmw_destroy_subscription+0x12>
 8015026:	4604      	mov	r4, r0
 8015028:	6800      	ldr	r0, [r0, #0]
 801502a:	460d      	mov	r5, r1
 801502c:	f7f6 f880 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 8015030:	b918      	cbnz	r0, 801503a <rmw_destroy_subscription+0x1a>
 8015032:	2401      	movs	r4, #1
 8015034:	4620      	mov	r0, r4
 8015036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801503a:	6863      	ldr	r3, [r4, #4]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d0f8      	beq.n	8015032 <rmw_destroy_subscription+0x12>
 8015040:	2d00      	cmp	r5, #0
 8015042:	d0f6      	beq.n	8015032 <rmw_destroy_subscription+0x12>
 8015044:	6828      	ldr	r0, [r5, #0]
 8015046:	f7f6 f873 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 801504a:	2800      	cmp	r0, #0
 801504c:	d0f1      	beq.n	8015032 <rmw_destroy_subscription+0x12>
 801504e:	686c      	ldr	r4, [r5, #4]
 8015050:	2c00      	cmp	r4, #0
 8015052:	d0ee      	beq.n	8015032 <rmw_destroy_subscription+0x12>
 8015054:	6a26      	ldr	r6, [r4, #32]
 8015056:	6962      	ldr	r2, [r4, #20]
 8015058:	6930      	ldr	r0, [r6, #16]
 801505a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801505e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015062:	6819      	ldr	r1, [r3, #0]
 8015064:	f001 fcd4 	bl	8016a10 <uxr_buffer_cancel_data>
 8015068:	4602      	mov	r2, r0
 801506a:	6930      	ldr	r0, [r6, #16]
 801506c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015070:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015074:	f7f5 ffd6 	bl	800b024 <run_xrce_session>
 8015078:	69e0      	ldr	r0, [r4, #28]
 801507a:	f7ff fd0d 	bl	8014a98 <destroy_topic>
 801507e:	6a23      	ldr	r3, [r4, #32]
 8015080:	6962      	ldr	r2, [r4, #20]
 8015082:	6918      	ldr	r0, [r3, #16]
 8015084:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015088:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801508c:	6819      	ldr	r1, [r3, #0]
 801508e:	f7f8 f929 	bl	800d2e4 <uxr_buffer_delete_entity>
 8015092:	6a23      	ldr	r3, [r4, #32]
 8015094:	6922      	ldr	r2, [r4, #16]
 8015096:	4680      	mov	r8, r0
 8015098:	6918      	ldr	r0, [r3, #16]
 801509a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801509e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80150a2:	6819      	ldr	r1, [r3, #0]
 80150a4:	f7f8 f91e 	bl	800d2e4 <uxr_buffer_delete_entity>
 80150a8:	4607      	mov	r7, r0
 80150aa:	6930      	ldr	r0, [r6, #16]
 80150ac:	4642      	mov	r2, r8
 80150ae:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80150b2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80150b6:	f7f5 ffb5 	bl	800b024 <run_xrce_session>
 80150ba:	4604      	mov	r4, r0
 80150bc:	6930      	ldr	r0, [r6, #16]
 80150be:	463a      	mov	r2, r7
 80150c0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80150c4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80150c8:	f7f5 ffac 	bl	800b024 <run_xrce_session>
 80150cc:	4004      	ands	r4, r0
 80150ce:	f084 0401 	eor.w	r4, r4, #1
 80150d2:	b2e4      	uxtb	r4, r4
 80150d4:	4628      	mov	r0, r5
 80150d6:	0064      	lsls	r4, r4, #1
 80150d8:	f7f5 fe5a 	bl	800ad90 <rmw_uxrce_fini_subscription_memory>
 80150dc:	e7aa      	b.n	8015034 <rmw_destroy_subscription+0x14>
 80150de:	bf00      	nop

080150e0 <rmw_take_with_info>:
 80150e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150e2:	4604      	mov	r4, r0
 80150e4:	6800      	ldr	r0, [r0, #0]
 80150e6:	b089      	sub	sp, #36	@ 0x24
 80150e8:	460f      	mov	r7, r1
 80150ea:	4615      	mov	r5, r2
 80150ec:	b128      	cbz	r0, 80150fa <rmw_take_with_info+0x1a>
 80150ee:	4b23      	ldr	r3, [pc, #140]	@ (801517c <rmw_take_with_info+0x9c>)
 80150f0:	6819      	ldr	r1, [r3, #0]
 80150f2:	f7eb f88d 	bl	8000210 <strcmp>
 80150f6:	2800      	cmp	r0, #0
 80150f8:	d13d      	bne.n	8015176 <rmw_take_with_info+0x96>
 80150fa:	6864      	ldr	r4, [r4, #4]
 80150fc:	b1fd      	cbz	r5, 801513e <rmw_take_with_info+0x5e>
 80150fe:	2300      	movs	r3, #0
 8015100:	702b      	strb	r3, [r5, #0]
 8015102:	f7f5 ff11 	bl	800af28 <rmw_uxrce_clean_expired_static_input_buffer>
 8015106:	4620      	mov	r0, r4
 8015108:	f7f5 fee8 	bl	800aedc <rmw_uxrce_find_static_input_buffer_by_owner>
 801510c:	4606      	mov	r6, r0
 801510e:	b1e8      	cbz	r0, 801514c <rmw_take_with_info+0x6c>
 8015110:	6881      	ldr	r1, [r0, #8]
 8015112:	4668      	mov	r0, sp
 8015114:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015118:	3110      	adds	r1, #16
 801511a:	f7f8 f817 	bl	800d14c <ucdr_init_buffer>
 801511e:	69a3      	ldr	r3, [r4, #24]
 8015120:	4639      	mov	r1, r7
 8015122:	68db      	ldr	r3, [r3, #12]
 8015124:	4668      	mov	r0, sp
 8015126:	4798      	blx	r3
 8015128:	4631      	mov	r1, r6
 801512a:	4604      	mov	r4, r0
 801512c:	4814      	ldr	r0, [pc, #80]	@ (8015180 <rmw_take_with_info+0xa0>)
 801512e:	f7ff f98d 	bl	801444c <put_memory>
 8015132:	702c      	strb	r4, [r5, #0]
 8015134:	f084 0001 	eor.w	r0, r4, #1
 8015138:	b2c0      	uxtb	r0, r0
 801513a:	b009      	add	sp, #36	@ 0x24
 801513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801513e:	f7f5 fef3 	bl	800af28 <rmw_uxrce_clean_expired_static_input_buffer>
 8015142:	4620      	mov	r0, r4
 8015144:	f7f5 feca 	bl	800aedc <rmw_uxrce_find_static_input_buffer_by_owner>
 8015148:	4605      	mov	r5, r0
 801514a:	b910      	cbnz	r0, 8015152 <rmw_take_with_info+0x72>
 801514c:	2001      	movs	r0, #1
 801514e:	b009      	add	sp, #36	@ 0x24
 8015150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015152:	68a9      	ldr	r1, [r5, #8]
 8015154:	4668      	mov	r0, sp
 8015156:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801515a:	3110      	adds	r1, #16
 801515c:	f7f7 fff6 	bl	800d14c <ucdr_init_buffer>
 8015160:	69a3      	ldr	r3, [r4, #24]
 8015162:	4639      	mov	r1, r7
 8015164:	68db      	ldr	r3, [r3, #12]
 8015166:	4668      	mov	r0, sp
 8015168:	4798      	blx	r3
 801516a:	4629      	mov	r1, r5
 801516c:	4604      	mov	r4, r0
 801516e:	4804      	ldr	r0, [pc, #16]	@ (8015180 <rmw_take_with_info+0xa0>)
 8015170:	f7ff f96c 	bl	801444c <put_memory>
 8015174:	e7de      	b.n	8015134 <rmw_take_with_info+0x54>
 8015176:	200c      	movs	r0, #12
 8015178:	b009      	add	sp, #36	@ 0x24
 801517a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801517c:	0801aeb4 	.word	0x0801aeb4
 8015180:	2000da58 	.word	0x2000da58

08015184 <rmw_wait>:
 8015184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015188:	b089      	sub	sp, #36	@ 0x24
 801518a:	4607      	mov	r7, r0
 801518c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801518e:	460e      	mov	r6, r1
 8015190:	4698      	mov	r8, r3
 8015192:	4691      	mov	r9, r2
 8015194:	2a00      	cmp	r2, #0
 8015196:	f000 811e 	beq.w	80153d6 <rmw_wait+0x252>
 801519a:	2c00      	cmp	r4, #0
 801519c:	f000 80ef 	beq.w	801537e <rmw_wait+0x1fa>
 80151a0:	4bb5      	ldr	r3, [pc, #724]	@ (8015478 <rmw_wait+0x2f4>)
 80151a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80151a4:	ad04      	add	r5, sp, #16
 80151a6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80151aa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80151ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80151b2:	f7fe ff71 	bl	8014098 <rmw_time_equal>
 80151b6:	2800      	cmp	r0, #0
 80151b8:	f000 811b 	beq.w	80153f2 <rmw_wait+0x26e>
 80151bc:	f04f 35ff 	mov.w	r5, #4294967295
 80151c0:	f7f5 feb2 	bl	800af28 <rmw_uxrce_clean_expired_static_input_buffer>
 80151c4:	4bad      	ldr	r3, [pc, #692]	@ (801547c <rmw_wait+0x2f8>)
 80151c6:	681c      	ldr	r4, [r3, #0]
 80151c8:	b14c      	cbz	r4, 80151de <rmw_wait+0x5a>
 80151ca:	4623      	mov	r3, r4
 80151cc:	2100      	movs	r1, #0
 80151ce:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80151d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80151d6:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d1f7      	bne.n	80151ce <rmw_wait+0x4a>
 80151de:	f1b9 0f00 	cmp.w	r9, #0
 80151e2:	d011      	beq.n	8015208 <rmw_wait+0x84>
 80151e4:	f8d9 1000 	ldr.w	r1, [r9]
 80151e8:	b171      	cbz	r1, 8015208 <rmw_wait+0x84>
 80151ea:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80151ee:	2300      	movs	r3, #0
 80151f0:	2001      	movs	r0, #1
 80151f2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80151f6:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80151f8:	6912      	ldr	r2, [r2, #16]
 80151fa:	3301      	adds	r3, #1
 80151fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015200:	4299      	cmp	r1, r3
 8015202:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015206:	d1f4      	bne.n	80151f2 <rmw_wait+0x6e>
 8015208:	f1b8 0f00 	cmp.w	r8, #0
 801520c:	f000 8109 	beq.w	8015422 <rmw_wait+0x29e>
 8015210:	f8d8 1000 	ldr.w	r1, [r8]
 8015214:	2900      	cmp	r1, #0
 8015216:	f000 8116 	beq.w	8015446 <rmw_wait+0x2c2>
 801521a:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801521e:	2300      	movs	r3, #0
 8015220:	2001      	movs	r0, #1
 8015222:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015226:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015228:	6912      	ldr	r2, [r2, #16]
 801522a:	3301      	adds	r3, #1
 801522c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015230:	4299      	cmp	r1, r3
 8015232:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015236:	d1f4      	bne.n	8015222 <rmw_wait+0x9e>
 8015238:	2f00      	cmp	r7, #0
 801523a:	f000 8114 	beq.w	8015466 <rmw_wait+0x2e2>
 801523e:	6839      	ldr	r1, [r7, #0]
 8015240:	b171      	cbz	r1, 8015260 <rmw_wait+0xdc>
 8015242:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8015246:	2300      	movs	r3, #0
 8015248:	2001      	movs	r0, #1
 801524a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801524e:	6a12      	ldr	r2, [r2, #32]
 8015250:	6912      	ldr	r2, [r2, #16]
 8015252:	3301      	adds	r3, #1
 8015254:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015258:	4299      	cmp	r1, r3
 801525a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801525e:	d1f4      	bne.n	801524a <rmw_wait+0xc6>
 8015260:	b344      	cbz	r4, 80152b4 <rmw_wait+0x130>
 8015262:	4622      	mov	r2, r4
 8015264:	2300      	movs	r3, #0
 8015266:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801526a:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801526e:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015272:	440b      	add	r3, r1
 8015274:	b2db      	uxtb	r3, r3
 8015276:	2a00      	cmp	r2, #0
 8015278:	d1f5      	bne.n	8015266 <rmw_wait+0xe2>
 801527a:	2b00      	cmp	r3, #0
 801527c:	d075      	beq.n	801536a <rmw_wait+0x1e6>
 801527e:	1c6a      	adds	r2, r5, #1
 8015280:	d00d      	beq.n	801529e <rmw_wait+0x11a>
 8015282:	ee07 5a90 	vmov	s15, r5
 8015286:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801528a:	ee07 3a90 	vmov	s15, r3
 801528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015296:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801529a:	ee17 5a90 	vmov	r5, s15
 801529e:	68a0      	ldr	r0, [r4, #8]
 80152a0:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 80152a4:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	f040 808a 	bne.w	80153c2 <rmw_wait+0x23e>
 80152ae:	6864      	ldr	r4, [r4, #4]
 80152b0:	2c00      	cmp	r4, #0
 80152b2:	d1f4      	bne.n	801529e <rmw_wait+0x11a>
 80152b4:	f1b9 0f00 	cmp.w	r9, #0
 80152b8:	f000 80c3 	beq.w	8015442 <rmw_wait+0x2be>
 80152bc:	f8d9 5000 	ldr.w	r5, [r9]
 80152c0:	b185      	cbz	r5, 80152e4 <rmw_wait+0x160>
 80152c2:	2400      	movs	r4, #0
 80152c4:	4625      	mov	r5, r4
 80152c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80152ca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80152ce:	f7f5 fe05 	bl	800aedc <rmw_uxrce_find_static_input_buffer_by_owner>
 80152d2:	2800      	cmp	r0, #0
 80152d4:	d06d      	beq.n	80153b2 <rmw_wait+0x22e>
 80152d6:	f8d9 3000 	ldr.w	r3, [r9]
 80152da:	3401      	adds	r4, #1
 80152dc:	42a3      	cmp	r3, r4
 80152de:	f04f 0501 	mov.w	r5, #1
 80152e2:	d8f0      	bhi.n	80152c6 <rmw_wait+0x142>
 80152e4:	f1b8 0f00 	cmp.w	r8, #0
 80152e8:	d012      	beq.n	8015310 <rmw_wait+0x18c>
 80152ea:	f8d8 1000 	ldr.w	r1, [r8]
 80152ee:	2400      	movs	r4, #0
 80152f0:	b171      	cbz	r1, 8015310 <rmw_wait+0x18c>
 80152f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80152f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80152fa:	f7f5 fdef 	bl	800aedc <rmw_uxrce_find_static_input_buffer_by_owner>
 80152fe:	2800      	cmp	r0, #0
 8015300:	d047      	beq.n	8015392 <rmw_wait+0x20e>
 8015302:	f8d8 3000 	ldr.w	r3, [r8]
 8015306:	3401      	adds	r4, #1
 8015308:	42a3      	cmp	r3, r4
 801530a:	f04f 0501 	mov.w	r5, #1
 801530e:	d8f0      	bhi.n	80152f2 <rmw_wait+0x16e>
 8015310:	b17f      	cbz	r7, 8015332 <rmw_wait+0x1ae>
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	2400      	movs	r4, #0
 8015316:	b163      	cbz	r3, 8015332 <rmw_wait+0x1ae>
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801531e:	f7f5 fddd 	bl	800aedc <rmw_uxrce_find_static_input_buffer_by_owner>
 8015322:	2800      	cmp	r0, #0
 8015324:	d03d      	beq.n	80153a2 <rmw_wait+0x21e>
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	3401      	adds	r4, #1
 801532a:	42a3      	cmp	r3, r4
 801532c:	f04f 0501 	mov.w	r5, #1
 8015330:	d8f2      	bhi.n	8015318 <rmw_wait+0x194>
 8015332:	b1a6      	cbz	r6, 801535e <rmw_wait+0x1da>
 8015334:	6834      	ldr	r4, [r6, #0]
 8015336:	b194      	cbz	r4, 801535e <rmw_wait+0x1da>
 8015338:	2300      	movs	r3, #0
 801533a:	461f      	mov	r7, r3
 801533c:	e004      	b.n	8015348 <rmw_wait+0x1c4>
 801533e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015342:	3301      	adds	r3, #1
 8015344:	429c      	cmp	r4, r3
 8015346:	d00a      	beq.n	801535e <rmw_wait+0x1da>
 8015348:	6870      	ldr	r0, [r6, #4]
 801534a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801534e:	7c0a      	ldrb	r2, [r1, #16]
 8015350:	2a00      	cmp	r2, #0
 8015352:	d0f4      	beq.n	801533e <rmw_wait+0x1ba>
 8015354:	3301      	adds	r3, #1
 8015356:	429c      	cmp	r4, r3
 8015358:	740f      	strb	r7, [r1, #16]
 801535a:	4615      	mov	r5, r2
 801535c:	d1f4      	bne.n	8015348 <rmw_wait+0x1c4>
 801535e:	f085 0001 	eor.w	r0, r5, #1
 8015362:	0040      	lsls	r0, r0, #1
 8015364:	b009      	add	sp, #36	@ 0x24
 8015366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801536a:	68a0      	ldr	r0, [r4, #8]
 801536c:	2100      	movs	r1, #0
 801536e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015372:	f7f8 ff4f 	bl	800e214 <uxr_run_session_timeout>
 8015376:	6864      	ldr	r4, [r4, #4]
 8015378:	2c00      	cmp	r4, #0
 801537a:	d1f6      	bne.n	801536a <rmw_wait+0x1e6>
 801537c:	e79a      	b.n	80152b4 <rmw_wait+0x130>
 801537e:	f7f5 fdd3 	bl	800af28 <rmw_uxrce_clean_expired_static_input_buffer>
 8015382:	4b3e      	ldr	r3, [pc, #248]	@ (801547c <rmw_wait+0x2f8>)
 8015384:	681c      	ldr	r4, [r3, #0]
 8015386:	f04f 35ff 	mov.w	r5, #4294967295
 801538a:	2c00      	cmp	r4, #0
 801538c:	f47f af1d 	bne.w	80151ca <rmw_wait+0x46>
 8015390:	e728      	b.n	80151e4 <rmw_wait+0x60>
 8015392:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015396:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801539a:	3401      	adds	r4, #1
 801539c:	429c      	cmp	r4, r3
 801539e:	d3a8      	bcc.n	80152f2 <rmw_wait+0x16e>
 80153a0:	e7b6      	b.n	8015310 <rmw_wait+0x18c>
 80153a2:	e9d7 3200 	ldrd	r3, r2, [r7]
 80153a6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80153aa:	3401      	adds	r4, #1
 80153ac:	42a3      	cmp	r3, r4
 80153ae:	d8b3      	bhi.n	8015318 <rmw_wait+0x194>
 80153b0:	e7bf      	b.n	8015332 <rmw_wait+0x1ae>
 80153b2:	e9d9 3200 	ldrd	r3, r2, [r9]
 80153b6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80153ba:	3401      	adds	r4, #1
 80153bc:	42a3      	cmp	r3, r4
 80153be:	d882      	bhi.n	80152c6 <rmw_wait+0x142>
 80153c0:	e790      	b.n	80152e4 <rmw_wait+0x160>
 80153c2:	4629      	mov	r1, r5
 80153c4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80153c8:	f7f8 ff3e 	bl	800e248 <uxr_run_session_until_data>
 80153cc:	6864      	ldr	r4, [r4, #4]
 80153ce:	2c00      	cmp	r4, #0
 80153d0:	f47f af65 	bne.w	801529e <rmw_wait+0x11a>
 80153d4:	e76e      	b.n	80152b4 <rmw_wait+0x130>
 80153d6:	b1f3      	cbz	r3, 8015416 <rmw_wait+0x292>
 80153d8:	2c00      	cmp	r4, #0
 80153da:	f47f aee1 	bne.w	80151a0 <rmw_wait+0x1c>
 80153de:	f7f5 fda3 	bl	800af28 <rmw_uxrce_clean_expired_static_input_buffer>
 80153e2:	4b26      	ldr	r3, [pc, #152]	@ (801547c <rmw_wait+0x2f8>)
 80153e4:	681c      	ldr	r4, [r3, #0]
 80153e6:	f04f 35ff 	mov.w	r5, #4294967295
 80153ea:	2c00      	cmp	r4, #0
 80153ec:	f47f aeed 	bne.w	80151ca <rmw_wait+0x46>
 80153f0:	e70a      	b.n	8015208 <rmw_wait+0x84>
 80153f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80153f6:	f7fe fea3 	bl	8014140 <rmw_time_total_nsec>
 80153fa:	4a21      	ldr	r2, [pc, #132]	@ (8015480 <rmw_wait+0x2fc>)
 80153fc:	2300      	movs	r3, #0
 80153fe:	f7eb fa53 	bl	80008a8 <__aeabi_uldivmod>
 8015402:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015406:	f171 0100 	sbcs.w	r1, r1, #0
 801540a:	4605      	mov	r5, r0
 801540c:	f6ff aed8 	blt.w	80151c0 <rmw_wait+0x3c>
 8015410:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8015414:	e6d4      	b.n	80151c0 <rmw_wait+0x3c>
 8015416:	2800      	cmp	r0, #0
 8015418:	d1de      	bne.n	80153d8 <rmw_wait+0x254>
 801541a:	2900      	cmp	r1, #0
 801541c:	d1dc      	bne.n	80153d8 <rmw_wait+0x254>
 801541e:	4608      	mov	r0, r1
 8015420:	e7a0      	b.n	8015364 <rmw_wait+0x1e0>
 8015422:	2f00      	cmp	r7, #0
 8015424:	f47f af0b 	bne.w	801523e <rmw_wait+0xba>
 8015428:	2c00      	cmp	r4, #0
 801542a:	f47f af1a 	bne.w	8015262 <rmw_wait+0xde>
 801542e:	f1b9 0f00 	cmp.w	r9, #0
 8015432:	d027      	beq.n	8015484 <rmw_wait+0x300>
 8015434:	f8d9 3000 	ldr.w	r3, [r9]
 8015438:	4625      	mov	r5, r4
 801543a:	2b00      	cmp	r3, #0
 801543c:	f47f af41 	bne.w	80152c2 <rmw_wait+0x13e>
 8015440:	e777      	b.n	8015332 <rmw_wait+0x1ae>
 8015442:	464d      	mov	r5, r9
 8015444:	e74e      	b.n	80152e4 <rmw_wait+0x160>
 8015446:	2f00      	cmp	r7, #0
 8015448:	f47f aef9 	bne.w	801523e <rmw_wait+0xba>
 801544c:	2c00      	cmp	r4, #0
 801544e:	f47f af08 	bne.w	8015262 <rmw_wait+0xde>
 8015452:	f1b9 0f00 	cmp.w	r9, #0
 8015456:	d015      	beq.n	8015484 <rmw_wait+0x300>
 8015458:	f8d9 3000 	ldr.w	r3, [r9]
 801545c:	2b00      	cmp	r3, #0
 801545e:	f47f af30 	bne.w	80152c2 <rmw_wait+0x13e>
 8015462:	2500      	movs	r5, #0
 8015464:	e743      	b.n	80152ee <rmw_wait+0x16a>
 8015466:	2c00      	cmp	r4, #0
 8015468:	f47f aefb 	bne.w	8015262 <rmw_wait+0xde>
 801546c:	f1b9 0f00 	cmp.w	r9, #0
 8015470:	f47f af24 	bne.w	80152bc <rmw_wait+0x138>
 8015474:	e7f5      	b.n	8015462 <rmw_wait+0x2de>
 8015476:	bf00      	nop
 8015478:	08019f48 	.word	0x08019f48
 801547c:	200100f8 	.word	0x200100f8
 8015480:	000f4240 	.word	0x000f4240
 8015484:	464d      	mov	r5, r9
 8015486:	e754      	b.n	8015332 <rmw_wait+0x1ae>

08015488 <rmw_create_wait_set>:
 8015488:	b508      	push	{r3, lr}
 801548a:	4803      	ldr	r0, [pc, #12]	@ (8015498 <rmw_create_wait_set+0x10>)
 801548c:	f7fe ffce 	bl	801442c <get_memory>
 8015490:	b108      	cbz	r0, 8015496 <rmw_create_wait_set+0xe>
 8015492:	6880      	ldr	r0, [r0, #8]
 8015494:	3010      	adds	r0, #16
 8015496:	bd08      	pop	{r3, pc}
 8015498:	2000b8b4 	.word	0x2000b8b4

0801549c <rmw_destroy_wait_set>:
 801549c:	b508      	push	{r3, lr}
 801549e:	4b08      	ldr	r3, [pc, #32]	@ (80154c0 <rmw_destroy_wait_set+0x24>)
 80154a0:	6819      	ldr	r1, [r3, #0]
 80154a2:	b911      	cbnz	r1, 80154aa <rmw_destroy_wait_set+0xe>
 80154a4:	e00a      	b.n	80154bc <rmw_destroy_wait_set+0x20>
 80154a6:	6849      	ldr	r1, [r1, #4]
 80154a8:	b141      	cbz	r1, 80154bc <rmw_destroy_wait_set+0x20>
 80154aa:	688b      	ldr	r3, [r1, #8]
 80154ac:	3310      	adds	r3, #16
 80154ae:	4298      	cmp	r0, r3
 80154b0:	d1f9      	bne.n	80154a6 <rmw_destroy_wait_set+0xa>
 80154b2:	4803      	ldr	r0, [pc, #12]	@ (80154c0 <rmw_destroy_wait_set+0x24>)
 80154b4:	f7fe ffca 	bl	801444c <put_memory>
 80154b8:	2000      	movs	r0, #0
 80154ba:	bd08      	pop	{r3, pc}
 80154bc:	2001      	movs	r0, #1
 80154be:	bd08      	pop	{r3, pc}
 80154c0:	2000b8b4 	.word	0x2000b8b4

080154c4 <std_msgs__msg__Header__get_type_hash>:
 80154c4:	4800      	ldr	r0, [pc, #0]	@ (80154c8 <std_msgs__msg__Header__get_type_hash+0x4>)
 80154c6:	4770      	bx	lr
 80154c8:	20000a8c 	.word	0x20000a8c

080154cc <std_msgs__msg__Header__get_type_description>:
 80154cc:	b510      	push	{r4, lr}
 80154ce:	4c08      	ldr	r4, [pc, #32]	@ (80154f0 <std_msgs__msg__Header__get_type_description+0x24>)
 80154d0:	7820      	ldrb	r0, [r4, #0]
 80154d2:	b108      	cbz	r0, 80154d8 <std_msgs__msg__Header__get_type_description+0xc>
 80154d4:	4807      	ldr	r0, [pc, #28]	@ (80154f4 <std_msgs__msg__Header__get_type_description+0x28>)
 80154d6:	bd10      	pop	{r4, pc}
 80154d8:	f000 f86c 	bl	80155b4 <builtin_interfaces__msg__Time__get_type_description>
 80154dc:	300c      	adds	r0, #12
 80154de:	c807      	ldmia	r0, {r0, r1, r2}
 80154e0:	4b05      	ldr	r3, [pc, #20]	@ (80154f8 <std_msgs__msg__Header__get_type_description+0x2c>)
 80154e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80154e6:	2301      	movs	r3, #1
 80154e8:	4802      	ldr	r0, [pc, #8]	@ (80154f4 <std_msgs__msg__Header__get_type_description+0x28>)
 80154ea:	7023      	strb	r3, [r4, #0]
 80154ec:	bd10      	pop	{r4, pc}
 80154ee:	bf00      	nop
 80154f0:	200103b9 	.word	0x200103b9
 80154f4:	0801aee8 	.word	0x0801aee8
 80154f8:	20000c04 	.word	0x20000c04

080154fc <std_msgs__msg__Header__get_individual_type_description_source>:
 80154fc:	4800      	ldr	r0, [pc, #0]	@ (8015500 <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 80154fe:	4770      	bx	lr
 8015500:	0801aec4 	.word	0x0801aec4

08015504 <std_msgs__msg__Header__get_type_description_sources>:
 8015504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015506:	4e0f      	ldr	r6, [pc, #60]	@ (8015544 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 8015508:	7837      	ldrb	r7, [r6, #0]
 801550a:	b10f      	cbz	r7, 8015510 <std_msgs__msg__Header__get_type_description_sources+0xc>
 801550c:	480e      	ldr	r0, [pc, #56]	@ (8015548 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801550e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015510:	4d0e      	ldr	r5, [pc, #56]	@ (801554c <std_msgs__msg__Header__get_type_description_sources+0x48>)
 8015512:	4c0f      	ldr	r4, [pc, #60]	@ (8015550 <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 8015514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801551a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801551c:	682b      	ldr	r3, [r5, #0]
 801551e:	f844 3b04 	str.w	r3, [r4], #4
 8015522:	4638      	mov	r0, r7
 8015524:	f000 f852 	bl	80155cc <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8015528:	2301      	movs	r3, #1
 801552a:	4684      	mov	ip, r0
 801552c:	7033      	strb	r3, [r6, #0]
 801552e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015534:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801553a:	f8dc 3000 	ldr.w	r3, [ip]
 801553e:	4802      	ldr	r0, [pc, #8]	@ (8015548 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8015540:	6023      	str	r3, [r4, #0]
 8015542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015544:	200103b8 	.word	0x200103b8
 8015548:	0801aeb8 	.word	0x0801aeb8
 801554c:	0801aec4 	.word	0x0801aec4
 8015550:	20010370 	.word	0x20010370

08015554 <std_msgs__msg__Header__init>:
 8015554:	b1d8      	cbz	r0, 801558e <std_msgs__msg__Header__init+0x3a>
 8015556:	b538      	push	{r3, r4, r5, lr}
 8015558:	4604      	mov	r4, r0
 801555a:	f000 f857 	bl	801560c <builtin_interfaces__msg__Time__init>
 801555e:	b130      	cbz	r0, 801556e <std_msgs__msg__Header__init+0x1a>
 8015560:	f104 0508 	add.w	r5, r4, #8
 8015564:	4628      	mov	r0, r5
 8015566:	f7f5 fdfd 	bl	800b164 <rosidl_runtime_c__String__init>
 801556a:	b148      	cbz	r0, 8015580 <std_msgs__msg__Header__init+0x2c>
 801556c:	bd38      	pop	{r3, r4, r5, pc}
 801556e:	4620      	mov	r0, r4
 8015570:	f000 f850 	bl	8015614 <builtin_interfaces__msg__Time__fini>
 8015574:	f104 0008 	add.w	r0, r4, #8
 8015578:	f7f5 fe0e 	bl	800b198 <rosidl_runtime_c__String__fini>
 801557c:	2000      	movs	r0, #0
 801557e:	bd38      	pop	{r3, r4, r5, pc}
 8015580:	4620      	mov	r0, r4
 8015582:	f000 f847 	bl	8015614 <builtin_interfaces__msg__Time__fini>
 8015586:	4628      	mov	r0, r5
 8015588:	f7f5 fe06 	bl	800b198 <rosidl_runtime_c__String__fini>
 801558c:	e7f6      	b.n	801557c <std_msgs__msg__Header__init+0x28>
 801558e:	2000      	movs	r0, #0
 8015590:	4770      	bx	lr
 8015592:	bf00      	nop

08015594 <std_msgs__msg__Header__fini>:
 8015594:	b148      	cbz	r0, 80155aa <std_msgs__msg__Header__fini+0x16>
 8015596:	b510      	push	{r4, lr}
 8015598:	4604      	mov	r4, r0
 801559a:	f000 f83b 	bl	8015614 <builtin_interfaces__msg__Time__fini>
 801559e:	f104 0008 	add.w	r0, r4, #8
 80155a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80155a6:	f7f5 bdf7 	b.w	800b198 <rosidl_runtime_c__String__fini>
 80155aa:	4770      	bx	lr

080155ac <builtin_interfaces__msg__Time__get_type_hash>:
 80155ac:	4800      	ldr	r0, [pc, #0]	@ (80155b0 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 80155ae:	4770      	bx	lr
 80155b0:	20000ce4 	.word	0x20000ce4

080155b4 <builtin_interfaces__msg__Time__get_type_description>:
 80155b4:	4b03      	ldr	r3, [pc, #12]	@ (80155c4 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 80155b6:	781a      	ldrb	r2, [r3, #0]
 80155b8:	b90a      	cbnz	r2, 80155be <builtin_interfaces__msg__Time__get_type_description+0xa>
 80155ba:	2201      	movs	r2, #1
 80155bc:	701a      	strb	r2, [r3, #0]
 80155be:	4802      	ldr	r0, [pc, #8]	@ (80155c8 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 80155c0:	4770      	bx	lr
 80155c2:	bf00      	nop
 80155c4:	200103e1 	.word	0x200103e1
 80155c8:	0801af3c 	.word	0x0801af3c

080155cc <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 80155cc:	4800      	ldr	r0, [pc, #0]	@ (80155d0 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 80155ce:	4770      	bx	lr
 80155d0:	0801af18 	.word	0x0801af18

080155d4 <builtin_interfaces__msg__Time__get_type_description_sources>:
 80155d4:	4b09      	ldr	r3, [pc, #36]	@ (80155fc <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 80155d6:	781a      	ldrb	r2, [r3, #0]
 80155d8:	b96a      	cbnz	r2, 80155f6 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 80155da:	b430      	push	{r4, r5}
 80155dc:	4d08      	ldr	r5, [pc, #32]	@ (8015600 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 80155de:	4c09      	ldr	r4, [pc, #36]	@ (8015604 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 80155e0:	2201      	movs	r2, #1
 80155e2:	701a      	strb	r2, [r3, #0]
 80155e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155ec:	682b      	ldr	r3, [r5, #0]
 80155ee:	4806      	ldr	r0, [pc, #24]	@ (8015608 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80155f0:	6023      	str	r3, [r4, #0]
 80155f2:	bc30      	pop	{r4, r5}
 80155f4:	4770      	bx	lr
 80155f6:	4804      	ldr	r0, [pc, #16]	@ (8015608 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80155f8:	4770      	bx	lr
 80155fa:	bf00      	nop
 80155fc:	200103e0 	.word	0x200103e0
 8015600:	0801af18 	.word	0x0801af18
 8015604:	200103bc 	.word	0x200103bc
 8015608:	0801af0c 	.word	0x0801af0c

0801560c <builtin_interfaces__msg__Time__init>:
 801560c:	3800      	subs	r0, #0
 801560e:	bf18      	it	ne
 8015610:	2001      	movne	r0, #1
 8015612:	4770      	bx	lr

08015614 <builtin_interfaces__msg__Time__fini>:
 8015614:	4770      	bx	lr
 8015616:	bf00      	nop

08015618 <geometry_msgs__msg__Point__get_type_hash>:
 8015618:	4800      	ldr	r0, [pc, #0]	@ (801561c <geometry_msgs__msg__Point__get_type_hash+0x4>)
 801561a:	4770      	bx	lr
 801561c:	20000f70 	.word	0x20000f70

08015620 <geometry_msgs__msg__Point__get_type_description>:
 8015620:	4b03      	ldr	r3, [pc, #12]	@ (8015630 <geometry_msgs__msg__Point__get_type_description+0x10>)
 8015622:	781a      	ldrb	r2, [r3, #0]
 8015624:	b90a      	cbnz	r2, 801562a <geometry_msgs__msg__Point__get_type_description+0xa>
 8015626:	2201      	movs	r2, #1
 8015628:	701a      	strb	r2, [r3, #0]
 801562a:	4802      	ldr	r0, [pc, #8]	@ (8015634 <geometry_msgs__msg__Point__get_type_description+0x14>)
 801562c:	4770      	bx	lr
 801562e:	bf00      	nop
 8015630:	20010409 	.word	0x20010409
 8015634:	0801af90 	.word	0x0801af90

08015638 <geometry_msgs__msg__Point__get_individual_type_description_source>:
 8015638:	4800      	ldr	r0, [pc, #0]	@ (801563c <geometry_msgs__msg__Point__get_individual_type_description_source+0x4>)
 801563a:	4770      	bx	lr
 801563c:	0801af6c 	.word	0x0801af6c

08015640 <geometry_msgs__msg__Point__get_type_description_sources>:
 8015640:	4b09      	ldr	r3, [pc, #36]	@ (8015668 <geometry_msgs__msg__Point__get_type_description_sources+0x28>)
 8015642:	781a      	ldrb	r2, [r3, #0]
 8015644:	b96a      	cbnz	r2, 8015662 <geometry_msgs__msg__Point__get_type_description_sources+0x22>
 8015646:	b430      	push	{r4, r5}
 8015648:	4d08      	ldr	r5, [pc, #32]	@ (801566c <geometry_msgs__msg__Point__get_type_description_sources+0x2c>)
 801564a:	4c09      	ldr	r4, [pc, #36]	@ (8015670 <geometry_msgs__msg__Point__get_type_description_sources+0x30>)
 801564c:	2201      	movs	r2, #1
 801564e:	701a      	strb	r2, [r3, #0]
 8015650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015658:	682b      	ldr	r3, [r5, #0]
 801565a:	4806      	ldr	r0, [pc, #24]	@ (8015674 <geometry_msgs__msg__Point__get_type_description_sources+0x34>)
 801565c:	6023      	str	r3, [r4, #0]
 801565e:	bc30      	pop	{r4, r5}
 8015660:	4770      	bx	lr
 8015662:	4804      	ldr	r0, [pc, #16]	@ (8015674 <geometry_msgs__msg__Point__get_type_description_sources+0x34>)
 8015664:	4770      	bx	lr
 8015666:	bf00      	nop
 8015668:	20010408 	.word	0x20010408
 801566c:	0801af6c 	.word	0x0801af6c
 8015670:	200103e4 	.word	0x200103e4
 8015674:	0801af60 	.word	0x0801af60

08015678 <geometry_msgs__msg__Pose__get_type_hash>:
 8015678:	4800      	ldr	r0, [pc, #0]	@ (801567c <geometry_msgs__msg__Pose__get_type_hash+0x4>)
 801567a:	4770      	bx	lr
 801567c:	200010ec 	.word	0x200010ec

08015680 <geometry_msgs__msg__Pose__get_type_description>:
 8015680:	b570      	push	{r4, r5, r6, lr}
 8015682:	4e0c      	ldr	r6, [pc, #48]	@ (80156b4 <geometry_msgs__msg__Pose__get_type_description+0x34>)
 8015684:	7835      	ldrb	r5, [r6, #0]
 8015686:	b10d      	cbz	r5, 801568c <geometry_msgs__msg__Pose__get_type_description+0xc>
 8015688:	480b      	ldr	r0, [pc, #44]	@ (80156b8 <geometry_msgs__msg__Pose__get_type_description+0x38>)
 801568a:	bd70      	pop	{r4, r5, r6, pc}
 801568c:	4628      	mov	r0, r5
 801568e:	f7ff ffc7 	bl	8015620 <geometry_msgs__msg__Point__get_type_description>
 8015692:	300c      	adds	r0, #12
 8015694:	c807      	ldmia	r0, {r0, r1, r2}
 8015696:	4c09      	ldr	r4, [pc, #36]	@ (80156bc <geometry_msgs__msg__Pose__get_type_description+0x3c>)
 8015698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801569c:	4628      	mov	r0, r5
 801569e:	f000 f8d9 	bl	8015854 <geometry_msgs__msg__Quaternion__get_type_description>
 80156a2:	300c      	adds	r0, #12
 80156a4:	c807      	ldmia	r0, {r0, r1, r2}
 80156a6:	3418      	adds	r4, #24
 80156a8:	2301      	movs	r3, #1
 80156aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80156ae:	7033      	strb	r3, [r6, #0]
 80156b0:	4801      	ldr	r0, [pc, #4]	@ (80156b8 <geometry_msgs__msg__Pose__get_type_description+0x38>)
 80156b2:	bd70      	pop	{r4, r5, r6, pc}
 80156b4:	20010479 	.word	0x20010479
 80156b8:	0801afe4 	.word	0x0801afe4
 80156bc:	20001198 	.word	0x20001198

080156c0 <geometry_msgs__msg__Pose__get_individual_type_description_source>:
 80156c0:	4800      	ldr	r0, [pc, #0]	@ (80156c4 <geometry_msgs__msg__Pose__get_individual_type_description_source+0x4>)
 80156c2:	4770      	bx	lr
 80156c4:	0801afc0 	.word	0x0801afc0

080156c8 <geometry_msgs__msg__Pose__get_type_description_sources>:
 80156c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156ca:	4e17      	ldr	r6, [pc, #92]	@ (8015728 <geometry_msgs__msg__Pose__get_type_description_sources+0x60>)
 80156cc:	7837      	ldrb	r7, [r6, #0]
 80156ce:	b10f      	cbz	r7, 80156d4 <geometry_msgs__msg__Pose__get_type_description_sources+0xc>
 80156d0:	4816      	ldr	r0, [pc, #88]	@ (801572c <geometry_msgs__msg__Pose__get_type_description_sources+0x64>)
 80156d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156d4:	4d16      	ldr	r5, [pc, #88]	@ (8015730 <geometry_msgs__msg__Pose__get_type_description_sources+0x68>)
 80156d6:	4c17      	ldr	r4, [pc, #92]	@ (8015734 <geometry_msgs__msg__Pose__get_type_description_sources+0x6c>)
 80156d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156e0:	682b      	ldr	r3, [r5, #0]
 80156e2:	4625      	mov	r5, r4
 80156e4:	4638      	mov	r0, r7
 80156e6:	f845 3b04 	str.w	r3, [r5], #4
 80156ea:	f7ff ffa5 	bl	8015638 <geometry_msgs__msg__Point__get_individual_type_description_source>
 80156ee:	4684      	mov	ip, r0
 80156f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80156f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80156f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80156fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80156fc:	4638      	mov	r0, r7
 80156fe:	f8dc 3000 	ldr.w	r3, [ip]
 8015702:	602b      	str	r3, [r5, #0]
 8015704:	f000 f8b2 	bl	801586c <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8015708:	2301      	movs	r3, #1
 801570a:	4684      	mov	ip, r0
 801570c:	7033      	strb	r3, [r6, #0]
 801570e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015712:	3428      	adds	r4, #40	@ 0x28
 8015714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015716:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801571a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801571c:	f8dc 3000 	ldr.w	r3, [ip]
 8015720:	4802      	ldr	r0, [pc, #8]	@ (801572c <geometry_msgs__msg__Pose__get_type_description_sources+0x64>)
 8015722:	6023      	str	r3, [r4, #0]
 8015724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015726:	bf00      	nop
 8015728:	20010478 	.word	0x20010478
 801572c:	0801afb4 	.word	0x0801afb4
 8015730:	0801afc0 	.word	0x0801afc0
 8015734:	2001040c 	.word	0x2001040c

08015738 <geometry_msgs__msg__PoseWithCovariance__get_type_hash>:
 8015738:	4800      	ldr	r0, [pc, #0]	@ (801573c <geometry_msgs__msg__PoseWithCovariance__get_type_hash+0x4>)
 801573a:	4770      	bx	lr
 801573c:	200012b8 	.word	0x200012b8

08015740 <geometry_msgs__msg__PoseWithCovariance__get_type_description>:
 8015740:	b570      	push	{r4, r5, r6, lr}
 8015742:	4e11      	ldr	r6, [pc, #68]	@ (8015788 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x48>)
 8015744:	7835      	ldrb	r5, [r6, #0]
 8015746:	b10d      	cbz	r5, 801574c <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xc>
 8015748:	4810      	ldr	r0, [pc, #64]	@ (801578c <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x4c>)
 801574a:	bd70      	pop	{r4, r5, r6, pc}
 801574c:	4628      	mov	r0, r5
 801574e:	f7ff ff67 	bl	8015620 <geometry_msgs__msg__Point__get_type_description>
 8015752:	300c      	adds	r0, #12
 8015754:	c807      	ldmia	r0, {r0, r1, r2}
 8015756:	4c0e      	ldr	r4, [pc, #56]	@ (8015790 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x50>)
 8015758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801575c:	4628      	mov	r0, r5
 801575e:	f7ff ff8f 	bl	8015680 <geometry_msgs__msg__Pose__get_type_description>
 8015762:	300c      	adds	r0, #12
 8015764:	c807      	ldmia	r0, {r0, r1, r2}
 8015766:	f104 0318 	add.w	r3, r4, #24
 801576a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801576e:	4628      	mov	r0, r5
 8015770:	f000 f870 	bl	8015854 <geometry_msgs__msg__Quaternion__get_type_description>
 8015774:	300c      	adds	r0, #12
 8015776:	c807      	ldmia	r0, {r0, r1, r2}
 8015778:	3430      	adds	r4, #48	@ 0x30
 801577a:	2301      	movs	r3, #1
 801577c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015780:	7033      	strb	r3, [r6, #0]
 8015782:	4802      	ldr	r0, [pc, #8]	@ (801578c <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x4c>)
 8015784:	bd70      	pop	{r4, r5, r6, pc}
 8015786:	bf00      	nop
 8015788:	2001050d 	.word	0x2001050d
 801578c:	0801b038 	.word	0x0801b038
 8015790:	20001430 	.word	0x20001430

08015794 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>:
 8015794:	4800      	ldr	r0, [pc, #0]	@ (8015798 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source+0x4>)
 8015796:	4770      	bx	lr
 8015798:	0801b014 	.word	0x0801b014

0801579c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources>:
 801579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801579e:	4e1e      	ldr	r6, [pc, #120]	@ (8015818 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x7c>)
 80157a0:	7837      	ldrb	r7, [r6, #0]
 80157a2:	b10f      	cbz	r7, 80157a8 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0xc>
 80157a4:	481d      	ldr	r0, [pc, #116]	@ (801581c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x80>)
 80157a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157a8:	4d1d      	ldr	r5, [pc, #116]	@ (8015820 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x84>)
 80157aa:	4c1e      	ldr	r4, [pc, #120]	@ (8015824 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x88>)
 80157ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157b4:	682b      	ldr	r3, [r5, #0]
 80157b6:	4625      	mov	r5, r4
 80157b8:	4638      	mov	r0, r7
 80157ba:	f845 3b04 	str.w	r3, [r5], #4
 80157be:	f7ff ff3b 	bl	8015638 <geometry_msgs__msg__Point__get_individual_type_description_source>
 80157c2:	4684      	mov	ip, r0
 80157c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80157ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80157d0:	4638      	mov	r0, r7
 80157d2:	f8dc 3000 	ldr.w	r3, [ip]
 80157d6:	602b      	str	r3, [r5, #0]
 80157d8:	f7ff ff72 	bl	80156c0 <geometry_msgs__msg__Pose__get_individual_type_description_source>
 80157dc:	4684      	mov	ip, r0
 80157de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157e2:	f104 0528 	add.w	r5, r4, #40	@ 0x28
 80157e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80157e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80157ee:	4638      	mov	r0, r7
 80157f0:	f8dc 3000 	ldr.w	r3, [ip]
 80157f4:	602b      	str	r3, [r5, #0]
 80157f6:	f000 f839 	bl	801586c <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 80157fa:	2301      	movs	r3, #1
 80157fc:	4684      	mov	ip, r0
 80157fe:	7033      	strb	r3, [r6, #0]
 8015800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015804:	344c      	adds	r4, #76	@ 0x4c
 8015806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015808:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801580c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801580e:	f8dc 3000 	ldr.w	r3, [ip]
 8015812:	4802      	ldr	r0, [pc, #8]	@ (801581c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x80>)
 8015814:	6023      	str	r3, [r4, #0]
 8015816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015818:	2001050c 	.word	0x2001050c
 801581c:	0801b008 	.word	0x0801b008
 8015820:	0801b014 	.word	0x0801b014
 8015824:	2001047c 	.word	0x2001047c

08015828 <geometry_msgs__msg__PoseWithCovariance__init>:
 8015828:	b150      	cbz	r0, 8015840 <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 801582a:	b510      	push	{r4, lr}
 801582c:	4604      	mov	r4, r0
 801582e:	f002 f8cd 	bl	80179cc <geometry_msgs__msg__Pose__init>
 8015832:	b100      	cbz	r0, 8015836 <geometry_msgs__msg__PoseWithCovariance__init+0xe>
 8015834:	bd10      	pop	{r4, pc}
 8015836:	4620      	mov	r0, r4
 8015838:	f002 f8e8 	bl	8017a0c <geometry_msgs__msg__Pose__fini>
 801583c:	2000      	movs	r0, #0
 801583e:	bd10      	pop	{r4, pc}
 8015840:	2000      	movs	r0, #0
 8015842:	4770      	bx	lr

08015844 <geometry_msgs__msg__PoseWithCovariance__fini>:
 8015844:	b108      	cbz	r0, 801584a <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 8015846:	f002 b8e1 	b.w	8017a0c <geometry_msgs__msg__Pose__fini>
 801584a:	4770      	bx	lr

0801584c <geometry_msgs__msg__Quaternion__get_type_hash>:
 801584c:	4800      	ldr	r0, [pc, #0]	@ (8015850 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 801584e:	4770      	bx	lr
 8015850:	2000158c 	.word	0x2000158c

08015854 <geometry_msgs__msg__Quaternion__get_type_description>:
 8015854:	4b03      	ldr	r3, [pc, #12]	@ (8015864 <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 8015856:	781a      	ldrb	r2, [r3, #0]
 8015858:	b90a      	cbnz	r2, 801585e <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 801585a:	2201      	movs	r2, #1
 801585c:	701a      	strb	r2, [r3, #0]
 801585e:	4802      	ldr	r0, [pc, #8]	@ (8015868 <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 8015860:	4770      	bx	lr
 8015862:	bf00      	nop
 8015864:	20010535 	.word	0x20010535
 8015868:	0801b08c 	.word	0x0801b08c

0801586c <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 801586c:	4800      	ldr	r0, [pc, #0]	@ (8015870 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 801586e:	4770      	bx	lr
 8015870:	0801b068 	.word	0x0801b068

08015874 <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 8015874:	4b09      	ldr	r3, [pc, #36]	@ (801589c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 8015876:	781a      	ldrb	r2, [r3, #0]
 8015878:	b96a      	cbnz	r2, 8015896 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 801587a:	b430      	push	{r4, r5}
 801587c:	4d08      	ldr	r5, [pc, #32]	@ (80158a0 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 801587e:	4c09      	ldr	r4, [pc, #36]	@ (80158a4 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 8015880:	2201      	movs	r2, #1
 8015882:	701a      	strb	r2, [r3, #0]
 8015884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801588a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801588c:	682b      	ldr	r3, [r5, #0]
 801588e:	4806      	ldr	r0, [pc, #24]	@ (80158a8 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8015890:	6023      	str	r3, [r4, #0]
 8015892:	bc30      	pop	{r4, r5}
 8015894:	4770      	bx	lr
 8015896:	4804      	ldr	r0, [pc, #16]	@ (80158a8 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8015898:	4770      	bx	lr
 801589a:	bf00      	nop
 801589c:	20010534 	.word	0x20010534
 80158a0:	0801b068 	.word	0x0801b068
 80158a4:	20010510 	.word	0x20010510
 80158a8:	0801b05c 	.word	0x0801b05c

080158ac <geometry_msgs__msg__Twist__get_type_hash>:
 80158ac:	4800      	ldr	r0, [pc, #0]	@ (80158b0 <geometry_msgs__msg__Twist__get_type_hash+0x4>)
 80158ae:	4770      	bx	lr
 80158b0:	20001788 	.word	0x20001788

080158b4 <geometry_msgs__msg__Twist__get_type_description>:
 80158b4:	b510      	push	{r4, lr}
 80158b6:	4c08      	ldr	r4, [pc, #32]	@ (80158d8 <geometry_msgs__msg__Twist__get_type_description+0x24>)
 80158b8:	7820      	ldrb	r0, [r4, #0]
 80158ba:	b108      	cbz	r0, 80158c0 <geometry_msgs__msg__Twist__get_type_description+0xc>
 80158bc:	4807      	ldr	r0, [pc, #28]	@ (80158dc <geometry_msgs__msg__Twist__get_type_description+0x28>)
 80158be:	bd10      	pop	{r4, pc}
 80158c0:	f000 f8b2 	bl	8015a28 <geometry_msgs__msg__Vector3__get_type_description>
 80158c4:	300c      	adds	r0, #12
 80158c6:	c807      	ldmia	r0, {r0, r1, r2}
 80158c8:	4b05      	ldr	r3, [pc, #20]	@ (80158e0 <geometry_msgs__msg__Twist__get_type_description+0x2c>)
 80158ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80158ce:	2301      	movs	r3, #1
 80158d0:	4802      	ldr	r0, [pc, #8]	@ (80158dc <geometry_msgs__msg__Twist__get_type_description+0x28>)
 80158d2:	7023      	strb	r3, [r4, #0]
 80158d4:	bd10      	pop	{r4, pc}
 80158d6:	bf00      	nop
 80158d8:	20010581 	.word	0x20010581
 80158dc:	0801b0e0 	.word	0x0801b0e0
 80158e0:	20001830 	.word	0x20001830

080158e4 <geometry_msgs__msg__Twist__get_individual_type_description_source>:
 80158e4:	4800      	ldr	r0, [pc, #0]	@ (80158e8 <geometry_msgs__msg__Twist__get_individual_type_description_source+0x4>)
 80158e6:	4770      	bx	lr
 80158e8:	0801b0bc 	.word	0x0801b0bc

080158ec <geometry_msgs__msg__Twist__get_type_description_sources>:
 80158ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ee:	4e0f      	ldr	r6, [pc, #60]	@ (801592c <geometry_msgs__msg__Twist__get_type_description_sources+0x40>)
 80158f0:	7837      	ldrb	r7, [r6, #0]
 80158f2:	b10f      	cbz	r7, 80158f8 <geometry_msgs__msg__Twist__get_type_description_sources+0xc>
 80158f4:	480e      	ldr	r0, [pc, #56]	@ (8015930 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 80158f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158f8:	4d0e      	ldr	r5, [pc, #56]	@ (8015934 <geometry_msgs__msg__Twist__get_type_description_sources+0x48>)
 80158fa:	4c0f      	ldr	r4, [pc, #60]	@ (8015938 <geometry_msgs__msg__Twist__get_type_description_sources+0x4c>)
 80158fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80158fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015904:	682b      	ldr	r3, [r5, #0]
 8015906:	f844 3b04 	str.w	r3, [r4], #4
 801590a:	4638      	mov	r0, r7
 801590c:	f000 f898 	bl	8015a40 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8015910:	2301      	movs	r3, #1
 8015912:	4684      	mov	ip, r0
 8015914:	7033      	strb	r3, [r6, #0]
 8015916:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801591a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801591c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015922:	f8dc 3000 	ldr.w	r3, [ip]
 8015926:	4802      	ldr	r0, [pc, #8]	@ (8015930 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 8015928:	6023      	str	r3, [r4, #0]
 801592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801592c:	20010580 	.word	0x20010580
 8015930:	0801b0b0 	.word	0x0801b0b0
 8015934:	0801b0bc 	.word	0x0801b0bc
 8015938:	20010538 	.word	0x20010538

0801593c <geometry_msgs__msg__TwistWithCovariance__get_type_hash>:
 801593c:	4800      	ldr	r0, [pc, #0]	@ (8015940 <geometry_msgs__msg__TwistWithCovariance__get_type_hash+0x4>)
 801593e:	4770      	bx	lr
 8015940:	20001914 	.word	0x20001914

08015944 <geometry_msgs__msg__TwistWithCovariance__get_type_description>:
 8015944:	b570      	push	{r4, r5, r6, lr}
 8015946:	4e0c      	ldr	r6, [pc, #48]	@ (8015978 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x34>)
 8015948:	7835      	ldrb	r5, [r6, #0]
 801594a:	b10d      	cbz	r5, 8015950 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xc>
 801594c:	480b      	ldr	r0, [pc, #44]	@ (801597c <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x38>)
 801594e:	bd70      	pop	{r4, r5, r6, pc}
 8015950:	4628      	mov	r0, r5
 8015952:	f7ff ffaf 	bl	80158b4 <geometry_msgs__msg__Twist__get_type_description>
 8015956:	300c      	adds	r0, #12
 8015958:	c807      	ldmia	r0, {r0, r1, r2}
 801595a:	4c09      	ldr	r4, [pc, #36]	@ (8015980 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x3c>)
 801595c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015960:	4628      	mov	r0, r5
 8015962:	f000 f861 	bl	8015a28 <geometry_msgs__msg__Vector3__get_type_description>
 8015966:	300c      	adds	r0, #12
 8015968:	c807      	ldmia	r0, {r0, r1, r2}
 801596a:	3418      	adds	r4, #24
 801596c:	2301      	movs	r3, #1
 801596e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015972:	7033      	strb	r3, [r6, #0]
 8015974:	4801      	ldr	r0, [pc, #4]	@ (801597c <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x38>)
 8015976:	bd70      	pop	{r4, r5, r6, pc}
 8015978:	200105f1 	.word	0x200105f1
 801597c:	0801b134 	.word	0x0801b134
 8015980:	20001a90 	.word	0x20001a90

08015984 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>:
 8015984:	4800      	ldr	r0, [pc, #0]	@ (8015988 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source+0x4>)
 8015986:	4770      	bx	lr
 8015988:	0801b110 	.word	0x0801b110

0801598c <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources>:
 801598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598e:	4e17      	ldr	r6, [pc, #92]	@ (80159ec <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x60>)
 8015990:	7837      	ldrb	r7, [r6, #0]
 8015992:	b10f      	cbz	r7, 8015998 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0xc>
 8015994:	4816      	ldr	r0, [pc, #88]	@ (80159f0 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x64>)
 8015996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015998:	4d16      	ldr	r5, [pc, #88]	@ (80159f4 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x68>)
 801599a:	4c17      	ldr	r4, [pc, #92]	@ (80159f8 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x6c>)
 801599c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801599e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159a4:	682b      	ldr	r3, [r5, #0]
 80159a6:	4625      	mov	r5, r4
 80159a8:	4638      	mov	r0, r7
 80159aa:	f845 3b04 	str.w	r3, [r5], #4
 80159ae:	f7ff ff99 	bl	80158e4 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 80159b2:	4684      	mov	ip, r0
 80159b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80159b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80159ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80159be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80159c0:	4638      	mov	r0, r7
 80159c2:	f8dc 3000 	ldr.w	r3, [ip]
 80159c6:	602b      	str	r3, [r5, #0]
 80159c8:	f000 f83a 	bl	8015a40 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 80159cc:	2301      	movs	r3, #1
 80159ce:	4684      	mov	ip, r0
 80159d0:	7033      	strb	r3, [r6, #0]
 80159d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80159d6:	3428      	adds	r4, #40	@ 0x28
 80159d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80159de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159e0:	f8dc 3000 	ldr.w	r3, [ip]
 80159e4:	4802      	ldr	r0, [pc, #8]	@ (80159f0 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x64>)
 80159e6:	6023      	str	r3, [r4, #0]
 80159e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159ea:	bf00      	nop
 80159ec:	200105f0 	.word	0x200105f0
 80159f0:	0801b104 	.word	0x0801b104
 80159f4:	0801b110 	.word	0x0801b110
 80159f8:	20010584 	.word	0x20010584

080159fc <geometry_msgs__msg__TwistWithCovariance__init>:
 80159fc:	b150      	cbz	r0, 8015a14 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 80159fe:	b510      	push	{r4, lr}
 8015a00:	4604      	mov	r4, r0
 8015a02:	f002 f827 	bl	8017a54 <geometry_msgs__msg__Twist__init>
 8015a06:	b100      	cbz	r0, 8015a0a <geometry_msgs__msg__TwistWithCovariance__init+0xe>
 8015a08:	bd10      	pop	{r4, pc}
 8015a0a:	4620      	mov	r0, r4
 8015a0c:	f002 f842 	bl	8017a94 <geometry_msgs__msg__Twist__fini>
 8015a10:	2000      	movs	r0, #0
 8015a12:	bd10      	pop	{r4, pc}
 8015a14:	2000      	movs	r0, #0
 8015a16:	4770      	bx	lr

08015a18 <geometry_msgs__msg__TwistWithCovariance__fini>:
 8015a18:	b108      	cbz	r0, 8015a1e <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 8015a1a:	f002 b83b 	b.w	8017a94 <geometry_msgs__msg__Twist__fini>
 8015a1e:	4770      	bx	lr

08015a20 <geometry_msgs__msg__Vector3__get_type_hash>:
 8015a20:	4800      	ldr	r0, [pc, #0]	@ (8015a24 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 8015a22:	4770      	bx	lr
 8015a24:	20001bb8 	.word	0x20001bb8

08015a28 <geometry_msgs__msg__Vector3__get_type_description>:
 8015a28:	4b03      	ldr	r3, [pc, #12]	@ (8015a38 <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 8015a2a:	781a      	ldrb	r2, [r3, #0]
 8015a2c:	b90a      	cbnz	r2, 8015a32 <geometry_msgs__msg__Vector3__get_type_description+0xa>
 8015a2e:	2201      	movs	r2, #1
 8015a30:	701a      	strb	r2, [r3, #0]
 8015a32:	4802      	ldr	r0, [pc, #8]	@ (8015a3c <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 8015a34:	4770      	bx	lr
 8015a36:	bf00      	nop
 8015a38:	20010619 	.word	0x20010619
 8015a3c:	0801b188 	.word	0x0801b188

08015a40 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 8015a40:	4800      	ldr	r0, [pc, #0]	@ (8015a44 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 8015a42:	4770      	bx	lr
 8015a44:	0801b164 	.word	0x0801b164

08015a48 <geometry_msgs__msg__Vector3__get_type_description_sources>:
 8015a48:	4b09      	ldr	r3, [pc, #36]	@ (8015a70 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 8015a4a:	781a      	ldrb	r2, [r3, #0]
 8015a4c:	b96a      	cbnz	r2, 8015a6a <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 8015a4e:	b430      	push	{r4, r5}
 8015a50:	4d08      	ldr	r5, [pc, #32]	@ (8015a74 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 8015a52:	4c09      	ldr	r4, [pc, #36]	@ (8015a78 <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 8015a54:	2201      	movs	r2, #1
 8015a56:	701a      	strb	r2, [r3, #0]
 8015a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a60:	682b      	ldr	r3, [r5, #0]
 8015a62:	4806      	ldr	r0, [pc, #24]	@ (8015a7c <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 8015a64:	6023      	str	r3, [r4, #0]
 8015a66:	bc30      	pop	{r4, r5}
 8015a68:	4770      	bx	lr
 8015a6a:	4804      	ldr	r0, [pc, #16]	@ (8015a7c <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 8015a6c:	4770      	bx	lr
 8015a6e:	bf00      	nop
 8015a70:	20010618 	.word	0x20010618
 8015a74:	0801b164 	.word	0x0801b164
 8015a78:	200105f4 	.word	0x200105f4
 8015a7c:	0801b158 	.word	0x0801b158

08015a80 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 8015a80:	f001 bfa4 	b.w	80179cc <geometry_msgs__msg__Pose__init>

08015a84 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 8015a84:	f001 bfc2 	b.w	8017a0c <geometry_msgs__msg__Pose__fini>

08015a88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8015a88:	b510      	push	{r4, lr}
 8015a8a:	f002 f819 	bl	8017ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8015a8e:	4c07      	ldr	r4, [pc, #28]	@ (8015aac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 8015a90:	60e0      	str	r0, [r4, #12]
 8015a92:	f000 f815 	bl	8015ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8015a96:	4b06      	ldr	r3, [pc, #24]	@ (8015ab0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8015a98:	64a0      	str	r0, [r4, #72]	@ 0x48
 8015a9a:	681a      	ldr	r2, [r3, #0]
 8015a9c:	b10a      	cbz	r2, 8015aa2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 8015a9e:	4804      	ldr	r0, [pc, #16]	@ (8015ab0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8015aa0:	bd10      	pop	{r4, pc}
 8015aa2:	4a04      	ldr	r2, [pc, #16]	@ (8015ab4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 8015aa4:	4802      	ldr	r0, [pc, #8]	@ (8015ab0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 8015aa6:	6812      	ldr	r2, [r2, #0]
 8015aa8:	601a      	str	r2, [r3, #0]
 8015aaa:	bd10      	pop	{r4, pc}
 8015aac:	20001df8 	.word	0x20001df8
 8015ab0:	20001de0 	.word	0x20001de0
 8015ab4:	20000188 	.word	0x20000188

08015ab8 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8015ab8:	f001 bfb6 	b.w	8017a28 <geometry_msgs__msg__Quaternion__init>

08015abc <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 8015abc:	f001 bfc8 	b.w	8017a50 <geometry_msgs__msg__Quaternion__fini>

08015ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8015ac0:	4b04      	ldr	r3, [pc, #16]	@ (8015ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8015ac2:	681a      	ldr	r2, [r3, #0]
 8015ac4:	b10a      	cbz	r2, 8015aca <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8015ac6:	4803      	ldr	r0, [pc, #12]	@ (8015ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8015ac8:	4770      	bx	lr
 8015aca:	4a03      	ldr	r2, [pc, #12]	@ (8015ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 8015acc:	4801      	ldr	r0, [pc, #4]	@ (8015ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8015ace:	6812      	ldr	r2, [r2, #0]
 8015ad0:	601a      	str	r2, [r3, #0]
 8015ad2:	4770      	bx	lr
 8015ad4:	20001e70 	.word	0x20001e70
 8015ad8:	20000188 	.word	0x20000188

08015adc <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 8015adc:	f001 bfba 	b.w	8017a54 <geometry_msgs__msg__Twist__init>

08015ae0 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 8015ae0:	f001 bfd8 	b.w	8017a94 <geometry_msgs__msg__Twist__fini>

08015ae4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8015ae4:	b510      	push	{r4, lr}
 8015ae6:	f000 f819 	bl	8015b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015aea:	4c07      	ldr	r4, [pc, #28]	@ (8015b08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8015aec:	60e0      	str	r0, [r4, #12]
 8015aee:	f000 f815 	bl	8015b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015af2:	4b06      	ldr	r3, [pc, #24]	@ (8015b0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8015af4:	64a0      	str	r0, [r4, #72]	@ 0x48
 8015af6:	681a      	ldr	r2, [r3, #0]
 8015af8:	b10a      	cbz	r2, 8015afe <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 8015afa:	4804      	ldr	r0, [pc, #16]	@ (8015b0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8015afc:	bd10      	pop	{r4, pc}
 8015afe:	4a04      	ldr	r2, [pc, #16]	@ (8015b10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 8015b00:	4802      	ldr	r0, [pc, #8]	@ (8015b0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8015b02:	6812      	ldr	r2, [r2, #0]
 8015b04:	601a      	str	r2, [r3, #0]
 8015b06:	bd10      	pop	{r4, pc}
 8015b08:	20001f90 	.word	0x20001f90
 8015b0c:	20001f78 	.word	0x20001f78
 8015b10:	20000188 	.word	0x20000188

08015b14 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8015b14:	f001 bfca 	b.w	8017aac <geometry_msgs__msg__Vector3__init>

08015b18 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8015b18:	f001 bfcc 	b.w	8017ab4 <geometry_msgs__msg__Vector3__fini>

08015b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8015b1c:	4b04      	ldr	r3, [pc, #16]	@ (8015b30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8015b1e:	681a      	ldr	r2, [r3, #0]
 8015b20:	b10a      	cbz	r2, 8015b26 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8015b22:	4803      	ldr	r0, [pc, #12]	@ (8015b30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8015b24:	4770      	bx	lr
 8015b26:	4a03      	ldr	r2, [pc, #12]	@ (8015b34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8015b28:	4801      	ldr	r0, [pc, #4]	@ (8015b30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8015b2a:	6812      	ldr	r2, [r2, #0]
 8015b2c:	601a      	str	r2, [r3, #0]
 8015b2e:	4770      	bx	lr
 8015b30:	20002008 	.word	0x20002008
 8015b34:	20000188 	.word	0x20000188

08015b38 <get_serialized_size_geometry_msgs__msg__Pose>:
 8015b38:	b570      	push	{r4, r5, r6, lr}
 8015b3a:	4604      	mov	r4, r0
 8015b3c:	b148      	cbz	r0, 8015b52 <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 8015b3e:	460d      	mov	r5, r1
 8015b40:	f001 ffcc 	bl	8017adc <get_serialized_size_geometry_msgs__msg__Point>
 8015b44:	4606      	mov	r6, r0
 8015b46:	1829      	adds	r1, r5, r0
 8015b48:	f104 0018 	add.w	r0, r4, #24
 8015b4c:	f000 f864 	bl	8015c18 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8015b50:	4430      	add	r0, r6
 8015b52:	bd70      	pop	{r4, r5, r6, pc}

08015b54 <_Pose__cdr_deserialize>:
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	460c      	mov	r4, r1
 8015b58:	b189      	cbz	r1, 8015b7e <_Pose__cdr_deserialize+0x2a>
 8015b5a:	4605      	mov	r5, r0
 8015b5c:	f002 f84a 	bl	8017bf4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8015b60:	6843      	ldr	r3, [r0, #4]
 8015b62:	4621      	mov	r1, r4
 8015b64:	68db      	ldr	r3, [r3, #12]
 8015b66:	4628      	mov	r0, r5
 8015b68:	4798      	blx	r3
 8015b6a:	f000 f909 	bl	8015d80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8015b6e:	6843      	ldr	r3, [r0, #4]
 8015b70:	f104 0118 	add.w	r1, r4, #24
 8015b74:	4628      	mov	r0, r5
 8015b76:	68db      	ldr	r3, [r3, #12]
 8015b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b7c:	4718      	bx	r3
 8015b7e:	4608      	mov	r0, r1
 8015b80:	bd70      	pop	{r4, r5, r6, pc}
 8015b82:	bf00      	nop

08015b84 <_Pose__cdr_serialize>:
 8015b84:	b198      	cbz	r0, 8015bae <_Pose__cdr_serialize+0x2a>
 8015b86:	b570      	push	{r4, r5, r6, lr}
 8015b88:	460d      	mov	r5, r1
 8015b8a:	4604      	mov	r4, r0
 8015b8c:	f002 f832 	bl	8017bf4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 8015b90:	6843      	ldr	r3, [r0, #4]
 8015b92:	4629      	mov	r1, r5
 8015b94:	689b      	ldr	r3, [r3, #8]
 8015b96:	4620      	mov	r0, r4
 8015b98:	4798      	blx	r3
 8015b9a:	f000 f8f1 	bl	8015d80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 8015b9e:	6843      	ldr	r3, [r0, #4]
 8015ba0:	4629      	mov	r1, r5
 8015ba2:	f104 0018 	add.w	r0, r4, #24
 8015ba6:	689b      	ldr	r3, [r3, #8]
 8015ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015bac:	4718      	bx	r3
 8015bae:	4770      	bx	lr

08015bb0 <_Pose__get_serialized_size>:
 8015bb0:	b538      	push	{r3, r4, r5, lr}
 8015bb2:	4604      	mov	r4, r0
 8015bb4:	b148      	cbz	r0, 8015bca <_Pose__get_serialized_size+0x1a>
 8015bb6:	2100      	movs	r1, #0
 8015bb8:	f001 ff90 	bl	8017adc <get_serialized_size_geometry_msgs__msg__Point>
 8015bbc:	4605      	mov	r5, r0
 8015bbe:	4601      	mov	r1, r0
 8015bc0:	f104 0018 	add.w	r0, r4, #24
 8015bc4:	f000 f828 	bl	8015c18 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8015bc8:	4428      	add	r0, r5
 8015bca:	bd38      	pop	{r3, r4, r5, pc}

08015bcc <_Pose__max_serialized_size>:
 8015bcc:	b510      	push	{r4, lr}
 8015bce:	b082      	sub	sp, #8
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	2100      	movs	r1, #0
 8015bd4:	f10d 0007 	add.w	r0, sp, #7
 8015bd8:	f88d 3007 	strb.w	r3, [sp, #7]
 8015bdc:	f001 fff0 	bl	8017bc0 <max_serialized_size_geometry_msgs__msg__Point>
 8015be0:	4604      	mov	r4, r0
 8015be2:	4601      	mov	r1, r0
 8015be4:	f10d 0007 	add.w	r0, sp, #7
 8015be8:	f000 f8a8 	bl	8015d3c <max_serialized_size_geometry_msgs__msg__Quaternion>
 8015bec:	4420      	add	r0, r4
 8015bee:	b002      	add	sp, #8
 8015bf0:	bd10      	pop	{r4, pc}
 8015bf2:	bf00      	nop

08015bf4 <max_serialized_size_geometry_msgs__msg__Pose>:
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	b570      	push	{r4, r5, r6, lr}
 8015bf8:	7003      	strb	r3, [r0, #0]
 8015bfa:	4605      	mov	r5, r0
 8015bfc:	460e      	mov	r6, r1
 8015bfe:	f001 ffdf 	bl	8017bc0 <max_serialized_size_geometry_msgs__msg__Point>
 8015c02:	4604      	mov	r4, r0
 8015c04:	1831      	adds	r1, r6, r0
 8015c06:	4628      	mov	r0, r5
 8015c08:	f000 f898 	bl	8015d3c <max_serialized_size_geometry_msgs__msg__Quaternion>
 8015c0c:	4420      	add	r0, r4
 8015c0e:	bd70      	pop	{r4, r5, r6, pc}

08015c10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8015c10:	4800      	ldr	r0, [pc, #0]	@ (8015c14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8015c12:	4770      	bx	lr
 8015c14:	200020d4 	.word	0x200020d4

08015c18 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8015c18:	b1f0      	cbz	r0, 8015c58 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 8015c1a:	b570      	push	{r4, r5, r6, lr}
 8015c1c:	460d      	mov	r5, r1
 8015c1e:	4628      	mov	r0, r5
 8015c20:	2108      	movs	r1, #8
 8015c22:	f7f7 fa97 	bl	800d154 <ucdr_alignment>
 8015c26:	2108      	movs	r1, #8
 8015c28:	186c      	adds	r4, r5, r1
 8015c2a:	4404      	add	r4, r0
 8015c2c:	4620      	mov	r0, r4
 8015c2e:	f7f7 fa91 	bl	800d154 <ucdr_alignment>
 8015c32:	f100 0608 	add.w	r6, r0, #8
 8015c36:	4426      	add	r6, r4
 8015c38:	2108      	movs	r1, #8
 8015c3a:	4630      	mov	r0, r6
 8015c3c:	f7f7 fa8a 	bl	800d154 <ucdr_alignment>
 8015c40:	f100 0408 	add.w	r4, r0, #8
 8015c44:	4434      	add	r4, r6
 8015c46:	2108      	movs	r1, #8
 8015c48:	4620      	mov	r0, r4
 8015c4a:	f7f7 fa83 	bl	800d154 <ucdr_alignment>
 8015c4e:	f1c5 0508 	rsb	r5, r5, #8
 8015c52:	4405      	add	r5, r0
 8015c54:	1928      	adds	r0, r5, r4
 8015c56:	bd70      	pop	{r4, r5, r6, pc}
 8015c58:	4770      	bx	lr
 8015c5a:	bf00      	nop

08015c5c <_Quaternion__cdr_deserialize>:
 8015c5c:	b538      	push	{r3, r4, r5, lr}
 8015c5e:	460c      	mov	r4, r1
 8015c60:	b199      	cbz	r1, 8015c8a <_Quaternion__cdr_deserialize+0x2e>
 8015c62:	4605      	mov	r5, r0
 8015c64:	f7f7 f898 	bl	800cd98 <ucdr_deserialize_double>
 8015c68:	f104 0108 	add.w	r1, r4, #8
 8015c6c:	4628      	mov	r0, r5
 8015c6e:	f7f7 f893 	bl	800cd98 <ucdr_deserialize_double>
 8015c72:	f104 0110 	add.w	r1, r4, #16
 8015c76:	4628      	mov	r0, r5
 8015c78:	f7f7 f88e 	bl	800cd98 <ucdr_deserialize_double>
 8015c7c:	f104 0118 	add.w	r1, r4, #24
 8015c80:	4628      	mov	r0, r5
 8015c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c86:	f7f7 b887 	b.w	800cd98 <ucdr_deserialize_double>
 8015c8a:	4608      	mov	r0, r1
 8015c8c:	bd38      	pop	{r3, r4, r5, pc}
 8015c8e:	bf00      	nop

08015c90 <_Quaternion__cdr_serialize>:
 8015c90:	b1c0      	cbz	r0, 8015cc4 <_Quaternion__cdr_serialize+0x34>
 8015c92:	b538      	push	{r3, r4, r5, lr}
 8015c94:	ed90 0b00 	vldr	d0, [r0]
 8015c98:	460d      	mov	r5, r1
 8015c9a:	4604      	mov	r4, r0
 8015c9c:	4608      	mov	r0, r1
 8015c9e:	f7f6 feeb 	bl	800ca78 <ucdr_serialize_double>
 8015ca2:	ed94 0b02 	vldr	d0, [r4, #8]
 8015ca6:	4628      	mov	r0, r5
 8015ca8:	f7f6 fee6 	bl	800ca78 <ucdr_serialize_double>
 8015cac:	ed94 0b04 	vldr	d0, [r4, #16]
 8015cb0:	4628      	mov	r0, r5
 8015cb2:	f7f6 fee1 	bl	800ca78 <ucdr_serialize_double>
 8015cb6:	ed94 0b06 	vldr	d0, [r4, #24]
 8015cba:	4628      	mov	r0, r5
 8015cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cc0:	f7f6 beda 	b.w	800ca78 <ucdr_serialize_double>
 8015cc4:	4770      	bx	lr
 8015cc6:	bf00      	nop

08015cc8 <_Quaternion__get_serialized_size>:
 8015cc8:	b1d8      	cbz	r0, 8015d02 <_Quaternion__get_serialized_size+0x3a>
 8015cca:	b538      	push	{r3, r4, r5, lr}
 8015ccc:	2108      	movs	r1, #8
 8015cce:	2000      	movs	r0, #0
 8015cd0:	f7f7 fa40 	bl	800d154 <ucdr_alignment>
 8015cd4:	f100 0408 	add.w	r4, r0, #8
 8015cd8:	2108      	movs	r1, #8
 8015cda:	4620      	mov	r0, r4
 8015cdc:	f7f7 fa3a 	bl	800d154 <ucdr_alignment>
 8015ce0:	f100 0508 	add.w	r5, r0, #8
 8015ce4:	4425      	add	r5, r4
 8015ce6:	2108      	movs	r1, #8
 8015ce8:	4628      	mov	r0, r5
 8015cea:	f7f7 fa33 	bl	800d154 <ucdr_alignment>
 8015cee:	f100 0408 	add.w	r4, r0, #8
 8015cf2:	442c      	add	r4, r5
 8015cf4:	2108      	movs	r1, #8
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f7f7 fa2c 	bl	800d154 <ucdr_alignment>
 8015cfc:	3008      	adds	r0, #8
 8015cfe:	4420      	add	r0, r4
 8015d00:	bd38      	pop	{r3, r4, r5, pc}
 8015d02:	4770      	bx	lr

08015d04 <_Quaternion__max_serialized_size>:
 8015d04:	b538      	push	{r3, r4, r5, lr}
 8015d06:	2108      	movs	r1, #8
 8015d08:	2000      	movs	r0, #0
 8015d0a:	f7f7 fa23 	bl	800d154 <ucdr_alignment>
 8015d0e:	f100 0408 	add.w	r4, r0, #8
 8015d12:	2108      	movs	r1, #8
 8015d14:	4620      	mov	r0, r4
 8015d16:	f7f7 fa1d 	bl	800d154 <ucdr_alignment>
 8015d1a:	f100 0508 	add.w	r5, r0, #8
 8015d1e:	4425      	add	r5, r4
 8015d20:	2108      	movs	r1, #8
 8015d22:	4628      	mov	r0, r5
 8015d24:	f7f7 fa16 	bl	800d154 <ucdr_alignment>
 8015d28:	f100 0408 	add.w	r4, r0, #8
 8015d2c:	442c      	add	r4, r5
 8015d2e:	2108      	movs	r1, #8
 8015d30:	4620      	mov	r0, r4
 8015d32:	f7f7 fa0f 	bl	800d154 <ucdr_alignment>
 8015d36:	3008      	adds	r0, #8
 8015d38:	4420      	add	r0, r4
 8015d3a:	bd38      	pop	{r3, r4, r5, pc}

08015d3c <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8015d3c:	b570      	push	{r4, r5, r6, lr}
 8015d3e:	2301      	movs	r3, #1
 8015d40:	460c      	mov	r4, r1
 8015d42:	7003      	strb	r3, [r0, #0]
 8015d44:	2108      	movs	r1, #8
 8015d46:	4620      	mov	r0, r4
 8015d48:	f7f7 fa04 	bl	800d154 <ucdr_alignment>
 8015d4c:	2108      	movs	r1, #8
 8015d4e:	1863      	adds	r3, r4, r1
 8015d50:	18c5      	adds	r5, r0, r3
 8015d52:	4628      	mov	r0, r5
 8015d54:	f7f7 f9fe 	bl	800d154 <ucdr_alignment>
 8015d58:	f100 0608 	add.w	r6, r0, #8
 8015d5c:	442e      	add	r6, r5
 8015d5e:	2108      	movs	r1, #8
 8015d60:	4630      	mov	r0, r6
 8015d62:	f7f7 f9f7 	bl	800d154 <ucdr_alignment>
 8015d66:	f100 0508 	add.w	r5, r0, #8
 8015d6a:	4435      	add	r5, r6
 8015d6c:	2108      	movs	r1, #8
 8015d6e:	4628      	mov	r0, r5
 8015d70:	f7f7 f9f0 	bl	800d154 <ucdr_alignment>
 8015d74:	f1c4 0408 	rsb	r4, r4, #8
 8015d78:	4420      	add	r0, r4
 8015d7a:	4428      	add	r0, r5
 8015d7c:	bd70      	pop	{r4, r5, r6, pc}
 8015d7e:	bf00      	nop

08015d80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8015d80:	4800      	ldr	r0, [pc, #0]	@ (8015d84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8015d82:	4770      	bx	lr
 8015d84:	20002108 	.word	0x20002108

08015d88 <get_serialized_size_geometry_msgs__msg__Twist>:
 8015d88:	b570      	push	{r4, r5, r6, lr}
 8015d8a:	4604      	mov	r4, r0
 8015d8c:	b148      	cbz	r0, 8015da2 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 8015d8e:	460d      	mov	r5, r1
 8015d90:	f000 f86a 	bl	8015e68 <get_serialized_size_geometry_msgs__msg__Vector3>
 8015d94:	4606      	mov	r6, r0
 8015d96:	1829      	adds	r1, r5, r0
 8015d98:	f104 0018 	add.w	r0, r4, #24
 8015d9c:	f000 f864 	bl	8015e68 <get_serialized_size_geometry_msgs__msg__Vector3>
 8015da0:	4430      	add	r0, r6
 8015da2:	bd70      	pop	{r4, r5, r6, pc}

08015da4 <_Twist__cdr_deserialize>:
 8015da4:	b570      	push	{r4, r5, r6, lr}
 8015da6:	460c      	mov	r4, r1
 8015da8:	b189      	cbz	r1, 8015dce <_Twist__cdr_deserialize+0x2a>
 8015daa:	4605      	mov	r5, r0
 8015dac:	f000 f8e8 	bl	8015f80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015db0:	6843      	ldr	r3, [r0, #4]
 8015db2:	4621      	mov	r1, r4
 8015db4:	68db      	ldr	r3, [r3, #12]
 8015db6:	4628      	mov	r0, r5
 8015db8:	4798      	blx	r3
 8015dba:	f000 f8e1 	bl	8015f80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015dbe:	6843      	ldr	r3, [r0, #4]
 8015dc0:	f104 0118 	add.w	r1, r4, #24
 8015dc4:	4628      	mov	r0, r5
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dcc:	4718      	bx	r3
 8015dce:	4608      	mov	r0, r1
 8015dd0:	bd70      	pop	{r4, r5, r6, pc}
 8015dd2:	bf00      	nop

08015dd4 <_Twist__cdr_serialize>:
 8015dd4:	b198      	cbz	r0, 8015dfe <_Twist__cdr_serialize+0x2a>
 8015dd6:	b570      	push	{r4, r5, r6, lr}
 8015dd8:	460d      	mov	r5, r1
 8015dda:	4604      	mov	r4, r0
 8015ddc:	f000 f8d0 	bl	8015f80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015de0:	6843      	ldr	r3, [r0, #4]
 8015de2:	4629      	mov	r1, r5
 8015de4:	689b      	ldr	r3, [r3, #8]
 8015de6:	4620      	mov	r0, r4
 8015de8:	4798      	blx	r3
 8015dea:	f000 f8c9 	bl	8015f80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015dee:	6843      	ldr	r3, [r0, #4]
 8015df0:	4629      	mov	r1, r5
 8015df2:	f104 0018 	add.w	r0, r4, #24
 8015df6:	689b      	ldr	r3, [r3, #8]
 8015df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015dfc:	4718      	bx	r3
 8015dfe:	4770      	bx	lr

08015e00 <_Twist__get_serialized_size>:
 8015e00:	b538      	push	{r3, r4, r5, lr}
 8015e02:	4604      	mov	r4, r0
 8015e04:	b148      	cbz	r0, 8015e1a <_Twist__get_serialized_size+0x1a>
 8015e06:	2100      	movs	r1, #0
 8015e08:	f000 f82e 	bl	8015e68 <get_serialized_size_geometry_msgs__msg__Vector3>
 8015e0c:	4605      	mov	r5, r0
 8015e0e:	4601      	mov	r1, r0
 8015e10:	f104 0018 	add.w	r0, r4, #24
 8015e14:	f000 f828 	bl	8015e68 <get_serialized_size_geometry_msgs__msg__Vector3>
 8015e18:	4428      	add	r0, r5
 8015e1a:	bd38      	pop	{r3, r4, r5, pc}

08015e1c <_Twist__max_serialized_size>:
 8015e1c:	b510      	push	{r4, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	2301      	movs	r3, #1
 8015e22:	2100      	movs	r1, #0
 8015e24:	f10d 0007 	add.w	r0, sp, #7
 8015e28:	f88d 3007 	strb.w	r3, [sp, #7]
 8015e2c:	f000 f88e 	bl	8015f4c <max_serialized_size_geometry_msgs__msg__Vector3>
 8015e30:	4604      	mov	r4, r0
 8015e32:	4601      	mov	r1, r0
 8015e34:	f10d 0007 	add.w	r0, sp, #7
 8015e38:	f000 f888 	bl	8015f4c <max_serialized_size_geometry_msgs__msg__Vector3>
 8015e3c:	4420      	add	r0, r4
 8015e3e:	b002      	add	sp, #8
 8015e40:	bd10      	pop	{r4, pc}
 8015e42:	bf00      	nop

08015e44 <max_serialized_size_geometry_msgs__msg__Twist>:
 8015e44:	2301      	movs	r3, #1
 8015e46:	b570      	push	{r4, r5, r6, lr}
 8015e48:	7003      	strb	r3, [r0, #0]
 8015e4a:	4605      	mov	r5, r0
 8015e4c:	460e      	mov	r6, r1
 8015e4e:	f000 f87d 	bl	8015f4c <max_serialized_size_geometry_msgs__msg__Vector3>
 8015e52:	4604      	mov	r4, r0
 8015e54:	1831      	adds	r1, r6, r0
 8015e56:	4628      	mov	r0, r5
 8015e58:	f000 f878 	bl	8015f4c <max_serialized_size_geometry_msgs__msg__Vector3>
 8015e5c:	4420      	add	r0, r4
 8015e5e:	bd70      	pop	{r4, r5, r6, pc}

08015e60 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8015e60:	4800      	ldr	r0, [pc, #0]	@ (8015e64 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 8015e62:	4770      	bx	lr
 8015e64:	2000213c 	.word	0x2000213c

08015e68 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8015e68:	b1b8      	cbz	r0, 8015e9a <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8015e6a:	b570      	push	{r4, r5, r6, lr}
 8015e6c:	460d      	mov	r5, r1
 8015e6e:	4628      	mov	r0, r5
 8015e70:	2108      	movs	r1, #8
 8015e72:	f7f7 f96f 	bl	800d154 <ucdr_alignment>
 8015e76:	2108      	movs	r1, #8
 8015e78:	186e      	adds	r6, r5, r1
 8015e7a:	4406      	add	r6, r0
 8015e7c:	4630      	mov	r0, r6
 8015e7e:	f7f7 f969 	bl	800d154 <ucdr_alignment>
 8015e82:	f100 0408 	add.w	r4, r0, #8
 8015e86:	4434      	add	r4, r6
 8015e88:	2108      	movs	r1, #8
 8015e8a:	4620      	mov	r0, r4
 8015e8c:	f7f7 f962 	bl	800d154 <ucdr_alignment>
 8015e90:	f1c5 0508 	rsb	r5, r5, #8
 8015e94:	4405      	add	r5, r0
 8015e96:	1928      	adds	r0, r5, r4
 8015e98:	bd70      	pop	{r4, r5, r6, pc}
 8015e9a:	4770      	bx	lr

08015e9c <_Vector3__cdr_deserialize>:
 8015e9c:	b538      	push	{r3, r4, r5, lr}
 8015e9e:	460c      	mov	r4, r1
 8015ea0:	b171      	cbz	r1, 8015ec0 <_Vector3__cdr_deserialize+0x24>
 8015ea2:	4605      	mov	r5, r0
 8015ea4:	f7f6 ff78 	bl	800cd98 <ucdr_deserialize_double>
 8015ea8:	f104 0108 	add.w	r1, r4, #8
 8015eac:	4628      	mov	r0, r5
 8015eae:	f7f6 ff73 	bl	800cd98 <ucdr_deserialize_double>
 8015eb2:	f104 0110 	add.w	r1, r4, #16
 8015eb6:	4628      	mov	r0, r5
 8015eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015ebc:	f7f6 bf6c 	b.w	800cd98 <ucdr_deserialize_double>
 8015ec0:	4608      	mov	r0, r1
 8015ec2:	bd38      	pop	{r3, r4, r5, pc}

08015ec4 <_Vector3__cdr_serialize>:
 8015ec4:	b198      	cbz	r0, 8015eee <_Vector3__cdr_serialize+0x2a>
 8015ec6:	b538      	push	{r3, r4, r5, lr}
 8015ec8:	ed90 0b00 	vldr	d0, [r0]
 8015ecc:	460d      	mov	r5, r1
 8015ece:	4604      	mov	r4, r0
 8015ed0:	4608      	mov	r0, r1
 8015ed2:	f7f6 fdd1 	bl	800ca78 <ucdr_serialize_double>
 8015ed6:	ed94 0b02 	vldr	d0, [r4, #8]
 8015eda:	4628      	mov	r0, r5
 8015edc:	f7f6 fdcc 	bl	800ca78 <ucdr_serialize_double>
 8015ee0:	ed94 0b04 	vldr	d0, [r4, #16]
 8015ee4:	4628      	mov	r0, r5
 8015ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015eea:	f7f6 bdc5 	b.w	800ca78 <ucdr_serialize_double>
 8015eee:	4770      	bx	lr

08015ef0 <_Vector3__get_serialized_size>:
 8015ef0:	b1a0      	cbz	r0, 8015f1c <_Vector3__get_serialized_size+0x2c>
 8015ef2:	b538      	push	{r3, r4, r5, lr}
 8015ef4:	2108      	movs	r1, #8
 8015ef6:	2000      	movs	r0, #0
 8015ef8:	f7f7 f92c 	bl	800d154 <ucdr_alignment>
 8015efc:	f100 0508 	add.w	r5, r0, #8
 8015f00:	2108      	movs	r1, #8
 8015f02:	4628      	mov	r0, r5
 8015f04:	f7f7 f926 	bl	800d154 <ucdr_alignment>
 8015f08:	f100 0408 	add.w	r4, r0, #8
 8015f0c:	442c      	add	r4, r5
 8015f0e:	2108      	movs	r1, #8
 8015f10:	4620      	mov	r0, r4
 8015f12:	f7f7 f91f 	bl	800d154 <ucdr_alignment>
 8015f16:	3008      	adds	r0, #8
 8015f18:	4420      	add	r0, r4
 8015f1a:	bd38      	pop	{r3, r4, r5, pc}
 8015f1c:	4770      	bx	lr
 8015f1e:	bf00      	nop

08015f20 <_Vector3__max_serialized_size>:
 8015f20:	b538      	push	{r3, r4, r5, lr}
 8015f22:	2108      	movs	r1, #8
 8015f24:	2000      	movs	r0, #0
 8015f26:	f7f7 f915 	bl	800d154 <ucdr_alignment>
 8015f2a:	f100 0508 	add.w	r5, r0, #8
 8015f2e:	2108      	movs	r1, #8
 8015f30:	4628      	mov	r0, r5
 8015f32:	f7f7 f90f 	bl	800d154 <ucdr_alignment>
 8015f36:	f100 0408 	add.w	r4, r0, #8
 8015f3a:	442c      	add	r4, r5
 8015f3c:	2108      	movs	r1, #8
 8015f3e:	4620      	mov	r0, r4
 8015f40:	f7f7 f908 	bl	800d154 <ucdr_alignment>
 8015f44:	3008      	adds	r0, #8
 8015f46:	4420      	add	r0, r4
 8015f48:	bd38      	pop	{r3, r4, r5, pc}
 8015f4a:	bf00      	nop

08015f4c <max_serialized_size_geometry_msgs__msg__Vector3>:
 8015f4c:	b570      	push	{r4, r5, r6, lr}
 8015f4e:	2301      	movs	r3, #1
 8015f50:	460c      	mov	r4, r1
 8015f52:	7003      	strb	r3, [r0, #0]
 8015f54:	2108      	movs	r1, #8
 8015f56:	4620      	mov	r0, r4
 8015f58:	f7f7 f8fc 	bl	800d154 <ucdr_alignment>
 8015f5c:	2108      	movs	r1, #8
 8015f5e:	1863      	adds	r3, r4, r1
 8015f60:	18c6      	adds	r6, r0, r3
 8015f62:	4630      	mov	r0, r6
 8015f64:	f7f7 f8f6 	bl	800d154 <ucdr_alignment>
 8015f68:	f100 0508 	add.w	r5, r0, #8
 8015f6c:	4435      	add	r5, r6
 8015f6e:	2108      	movs	r1, #8
 8015f70:	4628      	mov	r0, r5
 8015f72:	f7f7 f8ef 	bl	800d154 <ucdr_alignment>
 8015f76:	f1c4 0408 	rsb	r4, r4, #8
 8015f7a:	4420      	add	r0, r4
 8015f7c:	4428      	add	r0, r5
 8015f7e:	bd70      	pop	{r4, r5, r6, pc}

08015f80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8015f80:	4800      	ldr	r0, [pc, #0]	@ (8015f84 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8015f82:	4770      	bx	lr
 8015f84:	20002170 	.word	0x20002170

08015f88 <ucdr_serialize_string>:
 8015f88:	b538      	push	{r3, r4, r5, lr}
 8015f8a:	4605      	mov	r5, r0
 8015f8c:	4608      	mov	r0, r1
 8015f8e:	460c      	mov	r4, r1
 8015f90:	f7ea f99e 	bl	80002d0 <strlen>
 8015f94:	4621      	mov	r1, r4
 8015f96:	1c42      	adds	r2, r0, #1
 8015f98:	4628      	mov	r0, r5
 8015f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f9e:	f7f7 b945 	b.w	800d22c <ucdr_serialize_sequence_char>
 8015fa2:	bf00      	nop

08015fa4 <ucdr_deserialize_string>:
 8015fa4:	b500      	push	{lr}
 8015fa6:	b083      	sub	sp, #12
 8015fa8:	ab01      	add	r3, sp, #4
 8015faa:	f7f7 f951 	bl	800d250 <ucdr_deserialize_sequence_char>
 8015fae:	b003      	add	sp, #12
 8015fb0:	f85d fb04 	ldr.w	pc, [sp], #4

08015fb4 <uxr_init_input_best_effort_stream>:
 8015fb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015fb8:	8003      	strh	r3, [r0, #0]
 8015fba:	4770      	bx	lr

08015fbc <uxr_reset_input_best_effort_stream>:
 8015fbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015fc0:	8003      	strh	r3, [r0, #0]
 8015fc2:	4770      	bx	lr

08015fc4 <uxr_receive_best_effort_message>:
 8015fc4:	b538      	push	{r3, r4, r5, lr}
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	8800      	ldrh	r0, [r0, #0]
 8015fca:	460d      	mov	r5, r1
 8015fcc:	f000 fe26 	bl	8016c1c <uxr_seq_num_cmp>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015fd8:	bfb8      	it	lt
 8015fda:	8025      	strhlt	r5, [r4, #0]
 8015fdc:	bd38      	pop	{r3, r4, r5, pc}
 8015fde:	bf00      	nop

08015fe0 <on_full_input_buffer>:
 8015fe0:	b570      	push	{r4, r5, r6, lr}
 8015fe2:	4605      	mov	r5, r0
 8015fe4:	460c      	mov	r4, r1
 8015fe6:	682b      	ldr	r3, [r5, #0]
 8015fe8:	6809      	ldr	r1, [r1, #0]
 8015fea:	8920      	ldrh	r0, [r4, #8]
 8015fec:	6862      	ldr	r2, [r4, #4]
 8015fee:	fbb2 f2f0 	udiv	r2, r2, r0
 8015ff2:	1a5b      	subs	r3, r3, r1
 8015ff4:	fbb3 f3f2 	udiv	r3, r3, r2
 8015ff8:	3301      	adds	r3, #1
 8015ffa:	b29b      	uxth	r3, r3
 8015ffc:	fbb3 f6f0 	udiv	r6, r3, r0
 8016000:	fb00 3316 	mls	r3, r0, r6, r3
 8016004:	b29b      	uxth	r3, r3
 8016006:	fb02 f303 	mul.w	r3, r2, r3
 801600a:	1d18      	adds	r0, r3, #4
 801600c:	4408      	add	r0, r1
 801600e:	7d26      	ldrb	r6, [r4, #20]
 8016010:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8016014:	b116      	cbz	r6, 801601c <on_full_input_buffer+0x3c>
 8016016:	2600      	movs	r6, #0
 8016018:	f840 6c04 	str.w	r6, [r0, #-4]
 801601c:	2a03      	cmp	r2, #3
 801601e:	d801      	bhi.n	8016024 <on_full_input_buffer+0x44>
 8016020:	2001      	movs	r0, #1
 8016022:	bd70      	pop	{r4, r5, r6, pc}
 8016024:	3308      	adds	r3, #8
 8016026:	4419      	add	r1, r3
 8016028:	4628      	mov	r0, r5
 801602a:	692b      	ldr	r3, [r5, #16]
 801602c:	3a04      	subs	r2, #4
 801602e:	f7f7 f885 	bl	800d13c <ucdr_init_buffer_origin>
 8016032:	4628      	mov	r0, r5
 8016034:	4902      	ldr	r1, [pc, #8]	@ (8016040 <on_full_input_buffer+0x60>)
 8016036:	4622      	mov	r2, r4
 8016038:	f7f7 f85c 	bl	800d0f4 <ucdr_set_on_full_buffer_callback>
 801603c:	2000      	movs	r0, #0
 801603e:	bd70      	pop	{r4, r5, r6, pc}
 8016040:	08015fe1 	.word	0x08015fe1

08016044 <uxr_init_input_reliable_stream>:
 8016044:	b500      	push	{lr}
 8016046:	e9c0 1200 	strd	r1, r2, [r0]
 801604a:	f04f 0e00 	mov.w	lr, #0
 801604e:	9a01      	ldr	r2, [sp, #4]
 8016050:	8103      	strh	r3, [r0, #8]
 8016052:	6102      	str	r2, [r0, #16]
 8016054:	f880 e014 	strb.w	lr, [r0, #20]
 8016058:	b1d3      	cbz	r3, 8016090 <uxr_init_input_reliable_stream+0x4c>
 801605a:	f8c1 e000 	str.w	lr, [r1]
 801605e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016062:	f1bc 0f01 	cmp.w	ip, #1
 8016066:	d913      	bls.n	8016090 <uxr_init_input_reliable_stream+0x4c>
 8016068:	2301      	movs	r3, #1
 801606a:	fbb3 f1fc 	udiv	r1, r3, ip
 801606e:	fb0c 3111 	mls	r1, ip, r1, r3
 8016072:	b289      	uxth	r1, r1
 8016074:	6842      	ldr	r2, [r0, #4]
 8016076:	fbb2 f2fc 	udiv	r2, r2, ip
 801607a:	fb01 f202 	mul.w	r2, r1, r2
 801607e:	6801      	ldr	r1, [r0, #0]
 8016080:	f841 e002 	str.w	lr, [r1, r2]
 8016084:	3301      	adds	r3, #1
 8016086:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801608a:	b29b      	uxth	r3, r3
 801608c:	459c      	cmp	ip, r3
 801608e:	d8ec      	bhi.n	801606a <uxr_init_input_reliable_stream+0x26>
 8016090:	f04f 33ff 	mov.w	r3, #4294967295
 8016094:	60c3      	str	r3, [r0, #12]
 8016096:	f85d fb04 	ldr.w	pc, [sp], #4
 801609a:	bf00      	nop

0801609c <uxr_reset_input_reliable_stream>:
 801609c:	8901      	ldrh	r1, [r0, #8]
 801609e:	b1e9      	cbz	r1, 80160dc <uxr_reset_input_reliable_stream+0x40>
 80160a0:	f04f 0c00 	mov.w	ip, #0
 80160a4:	b500      	push	{lr}
 80160a6:	4663      	mov	r3, ip
 80160a8:	46e6      	mov	lr, ip
 80160aa:	fbb3 f2f1 	udiv	r2, r3, r1
 80160ae:	fb01 3312 	mls	r3, r1, r2, r3
 80160b2:	b29b      	uxth	r3, r3
 80160b4:	6842      	ldr	r2, [r0, #4]
 80160b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80160ba:	fb03 f202 	mul.w	r2, r3, r2
 80160be:	6803      	ldr	r3, [r0, #0]
 80160c0:	f843 e002 	str.w	lr, [r3, r2]
 80160c4:	f10c 0c01 	add.w	ip, ip, #1
 80160c8:	8901      	ldrh	r1, [r0, #8]
 80160ca:	fa1f f38c 	uxth.w	r3, ip
 80160ce:	4299      	cmp	r1, r3
 80160d0:	d8eb      	bhi.n	80160aa <uxr_reset_input_reliable_stream+0xe>
 80160d2:	f04f 33ff 	mov.w	r3, #4294967295
 80160d6:	60c3      	str	r3, [r0, #12]
 80160d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80160dc:	f04f 33ff 	mov.w	r3, #4294967295
 80160e0:	60c3      	str	r3, [r0, #12]
 80160e2:	4770      	bx	lr

080160e4 <uxr_receive_reliable_message>:
 80160e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160e8:	4604      	mov	r4, r0
 80160ea:	460d      	mov	r5, r1
 80160ec:	8901      	ldrh	r1, [r0, #8]
 80160ee:	8980      	ldrh	r0, [r0, #12]
 80160f0:	4690      	mov	r8, r2
 80160f2:	461f      	mov	r7, r3
 80160f4:	f000 fd8a 	bl	8016c0c <uxr_seq_num_add>
 80160f8:	4629      	mov	r1, r5
 80160fa:	4606      	mov	r6, r0
 80160fc:	89a0      	ldrh	r0, [r4, #12]
 80160fe:	f000 fd8d 	bl	8016c1c <uxr_seq_num_cmp>
 8016102:	2800      	cmp	r0, #0
 8016104:	db0a      	blt.n	801611c <uxr_receive_reliable_message+0x38>
 8016106:	2600      	movs	r6, #0
 8016108:	89e0      	ldrh	r0, [r4, #14]
 801610a:	4629      	mov	r1, r5
 801610c:	f000 fd86 	bl	8016c1c <uxr_seq_num_cmp>
 8016110:	2800      	cmp	r0, #0
 8016112:	bfb8      	it	lt
 8016114:	81e5      	strhlt	r5, [r4, #14]
 8016116:	4630      	mov	r0, r6
 8016118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801611c:	4630      	mov	r0, r6
 801611e:	4629      	mov	r1, r5
 8016120:	f000 fd7c 	bl	8016c1c <uxr_seq_num_cmp>
 8016124:	2800      	cmp	r0, #0
 8016126:	dbee      	blt.n	8016106 <uxr_receive_reliable_message+0x22>
 8016128:	6923      	ldr	r3, [r4, #16]
 801612a:	4640      	mov	r0, r8
 801612c:	4798      	blx	r3
 801612e:	2101      	movs	r1, #1
 8016130:	4606      	mov	r6, r0
 8016132:	89a0      	ldrh	r0, [r4, #12]
 8016134:	f000 fd6a 	bl	8016c0c <uxr_seq_num_add>
 8016138:	b90e      	cbnz	r6, 801613e <uxr_receive_reliable_message+0x5a>
 801613a:	4285      	cmp	r5, r0
 801613c:	d046      	beq.n	80161cc <uxr_receive_reliable_message+0xe8>
 801613e:	8921      	ldrh	r1, [r4, #8]
 8016140:	fbb5 f2f1 	udiv	r2, r5, r1
 8016144:	fb01 5212 	mls	r2, r1, r2, r5
 8016148:	b292      	uxth	r2, r2
 801614a:	6863      	ldr	r3, [r4, #4]
 801614c:	6820      	ldr	r0, [r4, #0]
 801614e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016152:	fb02 f303 	mul.w	r3, r2, r3
 8016156:	3304      	adds	r3, #4
 8016158:	4418      	add	r0, r3
 801615a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d1d1      	bne.n	8016106 <uxr_receive_reliable_message+0x22>
 8016162:	4641      	mov	r1, r8
 8016164:	463a      	mov	r2, r7
 8016166:	f002 fb08 	bl	801877a <memcpy>
 801616a:	8921      	ldrh	r1, [r4, #8]
 801616c:	fbb5 f2f1 	udiv	r2, r5, r1
 8016170:	fb01 5212 	mls	r2, r1, r2, r5
 8016174:	b292      	uxth	r2, r2
 8016176:	6863      	ldr	r3, [r4, #4]
 8016178:	fbb3 f3f1 	udiv	r3, r3, r1
 801617c:	fb02 f303 	mul.w	r3, r2, r3
 8016180:	6822      	ldr	r2, [r4, #0]
 8016182:	50d7      	str	r7, [r2, r3]
 8016184:	9a06      	ldr	r2, [sp, #24]
 8016186:	2301      	movs	r3, #1
 8016188:	7013      	strb	r3, [r2, #0]
 801618a:	2e00      	cmp	r6, #0
 801618c:	d0bb      	beq.n	8016106 <uxr_receive_reliable_message+0x22>
 801618e:	89a6      	ldrh	r6, [r4, #12]
 8016190:	2101      	movs	r1, #1
 8016192:	4630      	mov	r0, r6
 8016194:	f000 fd3a 	bl	8016c0c <uxr_seq_num_add>
 8016198:	8921      	ldrh	r1, [r4, #8]
 801619a:	fbb0 f2f1 	udiv	r2, r0, r1
 801619e:	fb01 0212 	mls	r2, r1, r2, r0
 80161a2:	b292      	uxth	r2, r2
 80161a4:	6863      	ldr	r3, [r4, #4]
 80161a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80161aa:	4606      	mov	r6, r0
 80161ac:	fb02 f303 	mul.w	r3, r2, r3
 80161b0:	6820      	ldr	r0, [r4, #0]
 80161b2:	3304      	adds	r3, #4
 80161b4:	4418      	add	r0, r3
 80161b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d0a3      	beq.n	8016106 <uxr_receive_reliable_message+0x22>
 80161be:	6923      	ldr	r3, [r4, #16]
 80161c0:	4798      	blx	r3
 80161c2:	2802      	cmp	r0, #2
 80161c4:	d005      	beq.n	80161d2 <uxr_receive_reliable_message+0xee>
 80161c6:	2801      	cmp	r0, #1
 80161c8:	d0e2      	beq.n	8016190 <uxr_receive_reliable_message+0xac>
 80161ca:	e79c      	b.n	8016106 <uxr_receive_reliable_message+0x22>
 80161cc:	9b06      	ldr	r3, [sp, #24]
 80161ce:	81a5      	strh	r5, [r4, #12]
 80161d0:	701e      	strb	r6, [r3, #0]
 80161d2:	2601      	movs	r6, #1
 80161d4:	e798      	b.n	8016108 <uxr_receive_reliable_message+0x24>
 80161d6:	bf00      	nop

080161d8 <uxr_next_input_reliable_buffer_available>:
 80161d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161dc:	4604      	mov	r4, r0
 80161de:	460f      	mov	r7, r1
 80161e0:	8980      	ldrh	r0, [r0, #12]
 80161e2:	2101      	movs	r1, #1
 80161e4:	4690      	mov	r8, r2
 80161e6:	f000 fd11 	bl	8016c0c <uxr_seq_num_add>
 80161ea:	8921      	ldrh	r1, [r4, #8]
 80161ec:	fbb0 f2f1 	udiv	r2, r0, r1
 80161f0:	fb01 0212 	mls	r2, r1, r2, r0
 80161f4:	b292      	uxth	r2, r2
 80161f6:	6863      	ldr	r3, [r4, #4]
 80161f8:	6826      	ldr	r6, [r4, #0]
 80161fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80161fe:	fb02 f303 	mul.w	r3, r2, r3
 8016202:	3304      	adds	r3, #4
 8016204:	441e      	add	r6, r3
 8016206:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801620a:	f1b9 0f00 	cmp.w	r9, #0
 801620e:	d023      	beq.n	8016258 <uxr_next_input_reliable_buffer_available+0x80>
 8016210:	6923      	ldr	r3, [r4, #16]
 8016212:	4605      	mov	r5, r0
 8016214:	4630      	mov	r0, r6
 8016216:	4798      	blx	r3
 8016218:	4682      	mov	sl, r0
 801621a:	b300      	cbz	r0, 801625e <uxr_next_input_reliable_buffer_available+0x86>
 801621c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016220:	2101      	movs	r1, #1
 8016222:	4650      	mov	r0, sl
 8016224:	f000 fcf2 	bl	8016c0c <uxr_seq_num_add>
 8016228:	8921      	ldrh	r1, [r4, #8]
 801622a:	fbb0 f2f1 	udiv	r2, r0, r1
 801622e:	4682      	mov	sl, r0
 8016230:	fb01 0212 	mls	r2, r1, r2, r0
 8016234:	e9d4 0300 	ldrd	r0, r3, [r4]
 8016238:	b292      	uxth	r2, r2
 801623a:	fbb3 f3f1 	udiv	r3, r3, r1
 801623e:	fb02 f303 	mul.w	r3, r2, r3
 8016242:	3304      	adds	r3, #4
 8016244:	4418      	add	r0, r3
 8016246:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801624a:	b12b      	cbz	r3, 8016258 <uxr_next_input_reliable_buffer_available+0x80>
 801624c:	6923      	ldr	r3, [r4, #16]
 801624e:	4798      	blx	r3
 8016250:	2802      	cmp	r0, #2
 8016252:	d01b      	beq.n	801628c <uxr_next_input_reliable_buffer_available+0xb4>
 8016254:	2801      	cmp	r0, #1
 8016256:	d0e3      	beq.n	8016220 <uxr_next_input_reliable_buffer_available+0x48>
 8016258:	2000      	movs	r0, #0
 801625a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801625e:	464a      	mov	r2, r9
 8016260:	4631      	mov	r1, r6
 8016262:	4638      	mov	r0, r7
 8016264:	f7f6 ff72 	bl	800d14c <ucdr_init_buffer>
 8016268:	8921      	ldrh	r1, [r4, #8]
 801626a:	fbb5 f2f1 	udiv	r2, r5, r1
 801626e:	fb01 5212 	mls	r2, r1, r2, r5
 8016272:	b292      	uxth	r2, r2
 8016274:	6863      	ldr	r3, [r4, #4]
 8016276:	fbb3 f3f1 	udiv	r3, r3, r1
 801627a:	fb02 f303 	mul.w	r3, r2, r3
 801627e:	6822      	ldr	r2, [r4, #0]
 8016280:	f842 a003 	str.w	sl, [r2, r3]
 8016284:	81a5      	strh	r5, [r4, #12]
 8016286:	2001      	movs	r0, #1
 8016288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801628c:	eb06 0108 	add.w	r1, r6, r8
 8016290:	8926      	ldrh	r6, [r4, #8]
 8016292:	fbb5 f0f6 	udiv	r0, r5, r6
 8016296:	fb06 5010 	mls	r0, r6, r0, r5
 801629a:	b280      	uxth	r0, r0
 801629c:	6863      	ldr	r3, [r4, #4]
 801629e:	fbb3 f3f6 	udiv	r3, r3, r6
 80162a2:	fb00 f303 	mul.w	r3, r0, r3
 80162a6:	6820      	ldr	r0, [r4, #0]
 80162a8:	2500      	movs	r5, #0
 80162aa:	50c5      	str	r5, [r0, r3]
 80162ac:	eba9 0208 	sub.w	r2, r9, r8
 80162b0:	4638      	mov	r0, r7
 80162b2:	f7f6 ff4b 	bl	800d14c <ucdr_init_buffer>
 80162b6:	4903      	ldr	r1, [pc, #12]	@ (80162c4 <uxr_next_input_reliable_buffer_available+0xec>)
 80162b8:	4622      	mov	r2, r4
 80162ba:	4638      	mov	r0, r7
 80162bc:	f7f6 ff1a 	bl	800d0f4 <ucdr_set_on_full_buffer_callback>
 80162c0:	4655      	mov	r5, sl
 80162c2:	e7df      	b.n	8016284 <uxr_next_input_reliable_buffer_available+0xac>
 80162c4:	08015fe1 	.word	0x08015fe1

080162c8 <uxr_process_heartbeat>:
 80162c8:	b538      	push	{r3, r4, r5, lr}
 80162ca:	4611      	mov	r1, r2
 80162cc:	4604      	mov	r4, r0
 80162ce:	89c0      	ldrh	r0, [r0, #14]
 80162d0:	4615      	mov	r5, r2
 80162d2:	f000 fca3 	bl	8016c1c <uxr_seq_num_cmp>
 80162d6:	2800      	cmp	r0, #0
 80162d8:	bfb8      	it	lt
 80162da:	81e5      	strhlt	r5, [r4, #14]
 80162dc:	bd38      	pop	{r3, r4, r5, pc}
 80162de:	bf00      	nop

080162e0 <uxr_compute_acknack>:
 80162e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162e4:	8903      	ldrh	r3, [r0, #8]
 80162e6:	8985      	ldrh	r5, [r0, #12]
 80162e8:	4604      	mov	r4, r0
 80162ea:	460e      	mov	r6, r1
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d048      	beq.n	8016382 <uxr_compute_acknack+0xa2>
 80162f0:	4628      	mov	r0, r5
 80162f2:	2701      	movs	r7, #1
 80162f4:	e003      	b.n	80162fe <uxr_compute_acknack+0x1e>
 80162f6:	4567      	cmp	r7, ip
 80162f8:	d243      	bcs.n	8016382 <uxr_compute_acknack+0xa2>
 80162fa:	89a0      	ldrh	r0, [r4, #12]
 80162fc:	3701      	adds	r7, #1
 80162fe:	b2b9      	uxth	r1, r7
 8016300:	f000 fc84 	bl	8016c0c <uxr_seq_num_add>
 8016304:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016308:	fbb0 f2fc 	udiv	r2, r0, ip
 801630c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016310:	fb0c 0212 	mls	r2, ip, r2, r0
 8016314:	b292      	uxth	r2, r2
 8016316:	fbb3 f3fc 	udiv	r3, r3, ip
 801631a:	fb02 f303 	mul.w	r3, r2, r3
 801631e:	58cb      	ldr	r3, [r1, r3]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d1e8      	bne.n	80162f6 <uxr_compute_acknack+0x16>
 8016324:	8030      	strh	r0, [r6, #0]
 8016326:	2101      	movs	r1, #1
 8016328:	89e5      	ldrh	r5, [r4, #14]
 801632a:	f000 fc73 	bl	8016c14 <uxr_seq_num_sub>
 801632e:	4601      	mov	r1, r0
 8016330:	4628      	mov	r0, r5
 8016332:	f000 fc6f 	bl	8016c14 <uxr_seq_num_sub>
 8016336:	4605      	mov	r5, r0
 8016338:	4607      	mov	r7, r0
 801633a:	b1f8      	cbz	r0, 801637c <uxr_compute_acknack+0x9c>
 801633c:	f04f 0900 	mov.w	r9, #0
 8016340:	464d      	mov	r5, r9
 8016342:	f04f 0801 	mov.w	r8, #1
 8016346:	fa1f f189 	uxth.w	r1, r9
 801634a:	8830      	ldrh	r0, [r6, #0]
 801634c:	f000 fc5e 	bl	8016c0c <uxr_seq_num_add>
 8016350:	8921      	ldrh	r1, [r4, #8]
 8016352:	fbb0 f3f1 	udiv	r3, r0, r1
 8016356:	fb03 0011 	mls	r0, r3, r1, r0
 801635a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801635e:	b280      	uxth	r0, r0
 8016360:	fbb3 f3f1 	udiv	r3, r3, r1
 8016364:	fb00 f303 	mul.w	r3, r0, r3
 8016368:	fa08 f109 	lsl.w	r1, r8, r9
 801636c:	58d3      	ldr	r3, [r2, r3]
 801636e:	f109 0901 	add.w	r9, r9, #1
 8016372:	b90b      	cbnz	r3, 8016378 <uxr_compute_acknack+0x98>
 8016374:	4329      	orrs	r1, r5
 8016376:	b28d      	uxth	r5, r1
 8016378:	454f      	cmp	r7, r9
 801637a:	d1e4      	bne.n	8016346 <uxr_compute_acknack+0x66>
 801637c:	4628      	mov	r0, r5
 801637e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016382:	4628      	mov	r0, r5
 8016384:	e7ce      	b.n	8016324 <uxr_compute_acknack+0x44>
 8016386:	bf00      	nop

08016388 <uxr_init_output_best_effort_stream>:
 8016388:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801638c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8016390:	6001      	str	r1, [r0, #0]
 8016392:	7303      	strb	r3, [r0, #12]
 8016394:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016398:	4770      	bx	lr
 801639a:	bf00      	nop

0801639c <uxr_reset_output_best_effort_stream>:
 801639c:	7b02      	ldrb	r2, [r0, #12]
 801639e:	6042      	str	r2, [r0, #4]
 80163a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80163a4:	81c3      	strh	r3, [r0, #14]
 80163a6:	4770      	bx	lr

080163a8 <uxr_prepare_best_effort_buffer_to_write>:
 80163a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163aa:	4604      	mov	r4, r0
 80163ac:	b083      	sub	sp, #12
 80163ae:	6840      	ldr	r0, [r0, #4]
 80163b0:	460d      	mov	r5, r1
 80163b2:	4616      	mov	r6, r2
 80163b4:	f7f9 f966 	bl	800f684 <uxr_submessage_padding>
 80163b8:	6863      	ldr	r3, [r4, #4]
 80163ba:	4418      	add	r0, r3
 80163bc:	68a3      	ldr	r3, [r4, #8]
 80163be:	1942      	adds	r2, r0, r5
 80163c0:	4293      	cmp	r3, r2
 80163c2:	bf2c      	ite	cs
 80163c4:	2701      	movcs	r7, #1
 80163c6:	2700      	movcc	r7, #0
 80163c8:	d202      	bcs.n	80163d0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80163ca:	4638      	mov	r0, r7
 80163cc:	b003      	add	sp, #12
 80163ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163d0:	9000      	str	r0, [sp, #0]
 80163d2:	6821      	ldr	r1, [r4, #0]
 80163d4:	4630      	mov	r0, r6
 80163d6:	2300      	movs	r3, #0
 80163d8:	f7f6 fea6 	bl	800d128 <ucdr_init_buffer_origin_offset>
 80163dc:	6863      	ldr	r3, [r4, #4]
 80163de:	4638      	mov	r0, r7
 80163e0:	442b      	add	r3, r5
 80163e2:	6063      	str	r3, [r4, #4]
 80163e4:	b003      	add	sp, #12
 80163e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080163e8 <uxr_prepare_best_effort_buffer_to_send>:
 80163e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ec:	4604      	mov	r4, r0
 80163ee:	461d      	mov	r5, r3
 80163f0:	6840      	ldr	r0, [r0, #4]
 80163f2:	7b23      	ldrb	r3, [r4, #12]
 80163f4:	4298      	cmp	r0, r3
 80163f6:	bf8c      	ite	hi
 80163f8:	2601      	movhi	r6, #1
 80163fa:	2600      	movls	r6, #0
 80163fc:	d802      	bhi.n	8016404 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80163fe:	4630      	mov	r0, r6
 8016400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016404:	4688      	mov	r8, r1
 8016406:	89e0      	ldrh	r0, [r4, #14]
 8016408:	2101      	movs	r1, #1
 801640a:	4617      	mov	r7, r2
 801640c:	f000 fbfe 	bl	8016c0c <uxr_seq_num_add>
 8016410:	6823      	ldr	r3, [r4, #0]
 8016412:	81e0      	strh	r0, [r4, #14]
 8016414:	8028      	strh	r0, [r5, #0]
 8016416:	f8c8 3000 	str.w	r3, [r8]
 801641a:	6863      	ldr	r3, [r4, #4]
 801641c:	603b      	str	r3, [r7, #0]
 801641e:	7b23      	ldrb	r3, [r4, #12]
 8016420:	6063      	str	r3, [r4, #4]
 8016422:	4630      	mov	r0, r6
 8016424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016428 <on_full_output_buffer>:
 8016428:	b538      	push	{r3, r4, r5, lr}
 801642a:	460c      	mov	r4, r1
 801642c:	6803      	ldr	r3, [r0, #0]
 801642e:	6809      	ldr	r1, [r1, #0]
 8016430:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016434:	6862      	ldr	r2, [r4, #4]
 8016436:	fbb2 f2fc 	udiv	r2, r2, ip
 801643a:	1a5b      	subs	r3, r3, r1
 801643c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016440:	3301      	adds	r3, #1
 8016442:	b29b      	uxth	r3, r3
 8016444:	fbb3 fefc 	udiv	lr, r3, ip
 8016448:	fb0c 331e 	mls	r3, ip, lr, r3
 801644c:	b29b      	uxth	r3, r3
 801644e:	fb02 f303 	mul.w	r3, r2, r3
 8016452:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016456:	58ca      	ldr	r2, [r1, r3]
 8016458:	4463      	add	r3, ip
 801645a:	eba2 020c 	sub.w	r2, r2, ip
 801645e:	3308      	adds	r3, #8
 8016460:	4605      	mov	r5, r0
 8016462:	4419      	add	r1, r3
 8016464:	3a04      	subs	r2, #4
 8016466:	6903      	ldr	r3, [r0, #16]
 8016468:	f7f6 fe68 	bl	800d13c <ucdr_init_buffer_origin>
 801646c:	4628      	mov	r0, r5
 801646e:	4903      	ldr	r1, [pc, #12]	@ (801647c <on_full_output_buffer+0x54>)
 8016470:	4622      	mov	r2, r4
 8016472:	f7f6 fe3f 	bl	800d0f4 <ucdr_set_on_full_buffer_callback>
 8016476:	2000      	movs	r0, #0
 8016478:	bd38      	pop	{r3, r4, r5, pc}
 801647a:	bf00      	nop
 801647c:	08016429 	.word	0x08016429

08016480 <uxr_init_output_reliable_stream>:
 8016480:	b410      	push	{r4}
 8016482:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016486:	8103      	strh	r3, [r0, #8]
 8016488:	e9c0 1200 	strd	r1, r2, [r0]
 801648c:	f880 c00c 	strb.w	ip, [r0, #12]
 8016490:	b1d3      	cbz	r3, 80164c8 <uxr_init_output_reliable_stream+0x48>
 8016492:	f8c1 c000 	str.w	ip, [r1]
 8016496:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801649a:	f1bc 0f01 	cmp.w	ip, #1
 801649e:	d913      	bls.n	80164c8 <uxr_init_output_reliable_stream+0x48>
 80164a0:	2301      	movs	r3, #1
 80164a2:	fbb3 f1fc 	udiv	r1, r3, ip
 80164a6:	fb0c 3111 	mls	r1, ip, r1, r3
 80164aa:	b289      	uxth	r1, r1
 80164ac:	6842      	ldr	r2, [r0, #4]
 80164ae:	6804      	ldr	r4, [r0, #0]
 80164b0:	fbb2 f2fc 	udiv	r2, r2, ip
 80164b4:	fb01 f202 	mul.w	r2, r1, r2
 80164b8:	7b01      	ldrb	r1, [r0, #12]
 80164ba:	50a1      	str	r1, [r4, r2]
 80164bc:	3301      	adds	r3, #1
 80164be:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80164c2:	b29b      	uxth	r3, r3
 80164c4:	459c      	cmp	ip, r3
 80164c6:	d8ec      	bhi.n	80164a2 <uxr_init_output_reliable_stream+0x22>
 80164c8:	f04f 32ff 	mov.w	r2, #4294967295
 80164cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80164d0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80164d4:	4905      	ldr	r1, [pc, #20]	@ (80164ec <uxr_init_output_reliable_stream+0x6c>)
 80164d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164da:	f8c0 100e 	str.w	r1, [r0, #14]
 80164de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80164e2:	2300      	movs	r3, #0
 80164e4:	8242      	strh	r2, [r0, #18]
 80164e6:	8403      	strh	r3, [r0, #32]
 80164e8:	4770      	bx	lr
 80164ea:	bf00      	nop
 80164ec:	ffff0000 	.word	0xffff0000

080164f0 <uxr_reset_output_reliable_stream>:
 80164f0:	8901      	ldrh	r1, [r0, #8]
 80164f2:	b1b1      	cbz	r1, 8016522 <uxr_reset_output_reliable_stream+0x32>
 80164f4:	f04f 0c00 	mov.w	ip, #0
 80164f8:	4663      	mov	r3, ip
 80164fa:	fbb3 f2f1 	udiv	r2, r3, r1
 80164fe:	fb01 3312 	mls	r3, r1, r2, r3
 8016502:	b29b      	uxth	r3, r3
 8016504:	6842      	ldr	r2, [r0, #4]
 8016506:	fbb2 f2f1 	udiv	r2, r2, r1
 801650a:	6801      	ldr	r1, [r0, #0]
 801650c:	fb03 f202 	mul.w	r2, r3, r2
 8016510:	7b03      	ldrb	r3, [r0, #12]
 8016512:	508b      	str	r3, [r1, r2]
 8016514:	f10c 0c01 	add.w	ip, ip, #1
 8016518:	8901      	ldrh	r1, [r0, #8]
 801651a:	fa1f f38c 	uxth.w	r3, ip
 801651e:	4299      	cmp	r1, r3
 8016520:	d8eb      	bhi.n	80164fa <uxr_reset_output_reliable_stream+0xa>
 8016522:	f04f 32ff 	mov.w	r2, #4294967295
 8016526:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801652a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801652e:	4904      	ldr	r1, [pc, #16]	@ (8016540 <uxr_reset_output_reliable_stream+0x50>)
 8016530:	f8c0 100e 	str.w	r1, [r0, #14]
 8016534:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016538:	2300      	movs	r3, #0
 801653a:	8242      	strh	r2, [r0, #18]
 801653c:	8403      	strh	r3, [r0, #32]
 801653e:	4770      	bx	lr
 8016540:	ffff0000 	.word	0xffff0000

08016544 <uxr_prepare_reliable_buffer_to_write>:
 8016544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016548:	4604      	mov	r4, r0
 801654a:	b091      	sub	sp, #68	@ 0x44
 801654c:	8900      	ldrh	r0, [r0, #8]
 801654e:	89e7      	ldrh	r7, [r4, #14]
 8016550:	6823      	ldr	r3, [r4, #0]
 8016552:	9204      	str	r2, [sp, #16]
 8016554:	fbb7 f2f0 	udiv	r2, r7, r0
 8016558:	fb00 7212 	mls	r2, r0, r2, r7
 801655c:	b292      	uxth	r2, r2
 801655e:	6865      	ldr	r5, [r4, #4]
 8016560:	fbb5 f5f0 	udiv	r5, r5, r0
 8016564:	fb05 3202 	mla	r2, r5, r2, r3
 8016568:	3204      	adds	r2, #4
 801656a:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801656e:	f894 b00c 	ldrb.w	fp, [r4, #12]
 8016572:	9203      	str	r2, [sp, #12]
 8016574:	4688      	mov	r8, r1
 8016576:	f1a5 0904 	sub.w	r9, r5, #4
 801657a:	2800      	cmp	r0, #0
 801657c:	f000 8143 	beq.w	8016806 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 8016580:	2100      	movs	r1, #0
 8016582:	460e      	mov	r6, r1
 8016584:	b28a      	uxth	r2, r1
 8016586:	fbb2 fcf0 	udiv	ip, r2, r0
 801658a:	fb00 221c 	mls	r2, r0, ip, r2
 801658e:	b292      	uxth	r2, r2
 8016590:	fb05 f202 	mul.w	r2, r5, r2
 8016594:	3101      	adds	r1, #1
 8016596:	589a      	ldr	r2, [r3, r2]
 8016598:	455a      	cmp	r2, fp
 801659a:	bf04      	itt	eq
 801659c:	3601      	addeq	r6, #1
 801659e:	b2b6      	uxtheq	r6, r6
 80165a0:	4281      	cmp	r1, r0
 80165a2:	d1ef      	bne.n	8016584 <uxr_prepare_reliable_buffer_to_write+0x40>
 80165a4:	4650      	mov	r0, sl
 80165a6:	2104      	movs	r1, #4
 80165a8:	9605      	str	r6, [sp, #20]
 80165aa:	f7f6 fdd3 	bl	800d154 <ucdr_alignment>
 80165ae:	4482      	add	sl, r0
 80165b0:	eb0a 0208 	add.w	r2, sl, r8
 80165b4:	454a      	cmp	r2, r9
 80165b6:	f240 80ca 	bls.w	801674e <uxr_prepare_reliable_buffer_to_write+0x20a>
 80165ba:	7b22      	ldrb	r2, [r4, #12]
 80165bc:	4442      	add	r2, r8
 80165be:	454a      	cmp	r2, r9
 80165c0:	f240 80b2 	bls.w	8016728 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 80165c4:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 80165c8:	32fc      	adds	r2, #252	@ 0xfc
 80165ca:	fa1f f389 	uxth.w	r3, r9
 80165ce:	441a      	add	r2, r3
 80165d0:	b292      	uxth	r2, r2
 80165d2:	fb06 fb02 	mul.w	fp, r6, r2
 80165d6:	45c3      	cmp	fp, r8
 80165d8:	9205      	str	r2, [sp, #20]
 80165da:	9206      	str	r2, [sp, #24]
 80165dc:	f0c0 80b3 	bcc.w	8016746 <uxr_prepare_reliable_buffer_to_write+0x202>
 80165e0:	f10a 0204 	add.w	r2, sl, #4
 80165e4:	454a      	cmp	r2, r9
 80165e6:	f080 80db 	bcs.w	80167a0 <uxr_prepare_reliable_buffer_to_write+0x25c>
 80165ea:	f1a3 0b04 	sub.w	fp, r3, #4
 80165ee:	ebab 0b0a 	sub.w	fp, fp, sl
 80165f2:	9b05      	ldr	r3, [sp, #20]
 80165f4:	fa1f fb8b 	uxth.w	fp, fp
 80165f8:	eba8 080b 	sub.w	r8, r8, fp
 80165fc:	fbb8 fcf3 	udiv	ip, r8, r3
 8016600:	fb03 831c 	mls	r3, r3, ip, r8
 8016604:	fa1f fc8c 	uxth.w	ip, ip
 8016608:	2b00      	cmp	r3, #0
 801660a:	f040 80c1 	bne.w	8016790 <uxr_prepare_reliable_buffer_to_write+0x24c>
 801660e:	45b4      	cmp	ip, r6
 8016610:	f200 8099 	bhi.w	8016746 <uxr_prepare_reliable_buffer_to_write+0x202>
 8016614:	f10d 0820 	add.w	r8, sp, #32
 8016618:	f1bc 0f00 	cmp.w	ip, #0
 801661c:	d040      	beq.n	80166a0 <uxr_prepare_reliable_buffer_to_write+0x15c>
 801661e:	f8cd a01c 	str.w	sl, [sp, #28]
 8016622:	2600      	movs	r6, #0
 8016624:	f8dd a014 	ldr.w	sl, [sp, #20]
 8016628:	9505      	str	r5, [sp, #20]
 801662a:	f10d 0820 	add.w	r8, sp, #32
 801662e:	4665      	mov	r5, ip
 8016630:	e000      	b.n	8016634 <uxr_prepare_reliable_buffer_to_write+0xf0>
 8016632:	46d3      	mov	fp, sl
 8016634:	8921      	ldrh	r1, [r4, #8]
 8016636:	fbb7 f2f1 	udiv	r2, r7, r1
 801663a:	fb01 7212 	mls	r2, r1, r2, r7
 801663e:	b292      	uxth	r2, r2
 8016640:	6863      	ldr	r3, [r4, #4]
 8016642:	fbb3 f3f1 	udiv	r3, r3, r1
 8016646:	6821      	ldr	r1, [r4, #0]
 8016648:	fb02 f303 	mul.w	r3, r2, r3
 801664c:	3304      	adds	r3, #4
 801664e:	4419      	add	r1, r3
 8016650:	4640      	mov	r0, r8
 8016652:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016656:	9200      	str	r2, [sp, #0]
 8016658:	2300      	movs	r3, #0
 801665a:	464a      	mov	r2, r9
 801665c:	f7f6 fd64 	bl	800d128 <ucdr_init_buffer_origin_offset>
 8016660:	465a      	mov	r2, fp
 8016662:	2300      	movs	r3, #0
 8016664:	210d      	movs	r1, #13
 8016666:	4640      	mov	r0, r8
 8016668:	f7f8 ffcc 	bl	800f604 <uxr_buffer_submessage_header>
 801666c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016670:	fbb7 f2fc 	udiv	r2, r7, ip
 8016674:	fb0c 7212 	mls	r2, ip, r2, r7
 8016678:	b292      	uxth	r2, r2
 801667a:	6863      	ldr	r3, [r4, #4]
 801667c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016680:	fb02 f303 	mul.w	r3, r2, r3
 8016684:	6822      	ldr	r2, [r4, #0]
 8016686:	4638      	mov	r0, r7
 8016688:	f842 9003 	str.w	r9, [r2, r3]
 801668c:	2101      	movs	r1, #1
 801668e:	f000 fabd 	bl	8016c0c <uxr_seq_num_add>
 8016692:	3601      	adds	r6, #1
 8016694:	42ae      	cmp	r6, r5
 8016696:	4607      	mov	r7, r0
 8016698:	d1cb      	bne.n	8016632 <uxr_prepare_reliable_buffer_to_write+0xee>
 801669a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801669e:	9d05      	ldr	r5, [sp, #20]
 80166a0:	8920      	ldrh	r0, [r4, #8]
 80166a2:	fbb7 f1f0 	udiv	r1, r7, r0
 80166a6:	fb00 7111 	mls	r1, r0, r1, r7
 80166aa:	b289      	uxth	r1, r1
 80166ac:	6863      	ldr	r3, [r4, #4]
 80166ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80166b2:	fb01 f303 	mul.w	r3, r1, r3
 80166b6:	6821      	ldr	r1, [r4, #0]
 80166b8:	3304      	adds	r3, #4
 80166ba:	4419      	add	r1, r3
 80166bc:	464a      	mov	r2, r9
 80166be:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80166c2:	9000      	str	r0, [sp, #0]
 80166c4:	2300      	movs	r3, #0
 80166c6:	4640      	mov	r0, r8
 80166c8:	f7f6 fd2e 	bl	800d128 <ucdr_init_buffer_origin_offset>
 80166cc:	4640      	mov	r0, r8
 80166ce:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80166d2:	2302      	movs	r3, #2
 80166d4:	fa1f f288 	uxth.w	r2, r8
 80166d8:	210d      	movs	r1, #13
 80166da:	f7f8 ff93 	bl	800f604 <uxr_buffer_submessage_header>
 80166de:	8926      	ldrh	r6, [r4, #8]
 80166e0:	9b03      	ldr	r3, [sp, #12]
 80166e2:	7b20      	ldrb	r0, [r4, #12]
 80166e4:	f1a5 0208 	sub.w	r2, r5, #8
 80166e8:	f10a 0104 	add.w	r1, sl, #4
 80166ec:	fbb7 f5f6 	udiv	r5, r7, r6
 80166f0:	fb06 7515 	mls	r5, r6, r5, r7
 80166f4:	440b      	add	r3, r1
 80166f6:	b2ad      	uxth	r5, r5
 80166f8:	4619      	mov	r1, r3
 80166fa:	3004      	adds	r0, #4
 80166fc:	6863      	ldr	r3, [r4, #4]
 80166fe:	fbb3 f3f6 	udiv	r3, r3, r6
 8016702:	fb05 f303 	mul.w	r3, r5, r3
 8016706:	6825      	ldr	r5, [r4, #0]
 8016708:	4440      	add	r0, r8
 801670a:	50e8      	str	r0, [r5, r3]
 801670c:	9d04      	ldr	r5, [sp, #16]
 801670e:	eba2 020a 	sub.w	r2, r2, sl
 8016712:	4628      	mov	r0, r5
 8016714:	f7f6 fd1a 	bl	800d14c <ucdr_init_buffer>
 8016718:	493c      	ldr	r1, [pc, #240]	@ (801680c <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801671a:	4622      	mov	r2, r4
 801671c:	4628      	mov	r0, r5
 801671e:	f7f6 fce9 	bl	800d0f4 <ucdr_set_on_full_buffer_callback>
 8016722:	81e7      	strh	r7, [r4, #14]
 8016724:	2001      	movs	r0, #1
 8016726:	e00f      	b.n	8016748 <uxr_prepare_reliable_buffer_to_write+0x204>
 8016728:	2101      	movs	r1, #1
 801672a:	89e0      	ldrh	r0, [r4, #14]
 801672c:	f000 fa6e 	bl	8016c0c <uxr_seq_num_add>
 8016730:	8921      	ldrh	r1, [r4, #8]
 8016732:	4605      	mov	r5, r0
 8016734:	8a60      	ldrh	r0, [r4, #18]
 8016736:	f000 fa69 	bl	8016c0c <uxr_seq_num_add>
 801673a:	4601      	mov	r1, r0
 801673c:	4628      	mov	r0, r5
 801673e:	f000 fa6d 	bl	8016c1c <uxr_seq_num_cmp>
 8016742:	2800      	cmp	r0, #0
 8016744:	dd45      	ble.n	80167d2 <uxr_prepare_reliable_buffer_to_write+0x28e>
 8016746:	2000      	movs	r0, #0
 8016748:	b011      	add	sp, #68	@ 0x44
 801674a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801674e:	8921      	ldrh	r1, [r4, #8]
 8016750:	8a60      	ldrh	r0, [r4, #18]
 8016752:	9205      	str	r2, [sp, #20]
 8016754:	f000 fa5a 	bl	8016c0c <uxr_seq_num_add>
 8016758:	4601      	mov	r1, r0
 801675a:	4638      	mov	r0, r7
 801675c:	f000 fa5e 	bl	8016c1c <uxr_seq_num_cmp>
 8016760:	2800      	cmp	r0, #0
 8016762:	9a05      	ldr	r2, [sp, #20]
 8016764:	dcef      	bgt.n	8016746 <uxr_prepare_reliable_buffer_to_write+0x202>
 8016766:	8926      	ldrh	r6, [r4, #8]
 8016768:	fbb7 f5f6 	udiv	r5, r7, r6
 801676c:	fb06 7515 	mls	r5, r6, r5, r7
 8016770:	b2ad      	uxth	r5, r5
 8016772:	6863      	ldr	r3, [r4, #4]
 8016774:	6824      	ldr	r4, [r4, #0]
 8016776:	fbb3 f3f6 	udiv	r3, r3, r6
 801677a:	fb05 f303 	mul.w	r3, r5, r3
 801677e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016782:	50e2      	str	r2, [r4, r3]
 8016784:	2300      	movs	r3, #0
 8016786:	f8cd a000 	str.w	sl, [sp]
 801678a:	f7f6 fccd 	bl	800d128 <ucdr_init_buffer_origin_offset>
 801678e:	e7c9      	b.n	8016724 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8016790:	f10c 0c01 	add.w	ip, ip, #1
 8016794:	fa1f fc8c 	uxth.w	ip, ip
 8016798:	45b4      	cmp	ip, r6
 801679a:	9306      	str	r3, [sp, #24]
 801679c:	d8d3      	bhi.n	8016746 <uxr_prepare_reliable_buffer_to_write+0x202>
 801679e:	e739      	b.n	8016614 <uxr_prepare_reliable_buffer_to_write+0xd0>
 80167a0:	4638      	mov	r0, r7
 80167a2:	2101      	movs	r1, #1
 80167a4:	9307      	str	r3, [sp, #28]
 80167a6:	f000 fa31 	bl	8016c0c <uxr_seq_num_add>
 80167aa:	8921      	ldrh	r1, [r4, #8]
 80167ac:	6862      	ldr	r2, [r4, #4]
 80167ae:	4607      	mov	r7, r0
 80167b0:	fbb0 f0f1 	udiv	r0, r0, r1
 80167b4:	fb01 7010 	mls	r0, r1, r0, r7
 80167b8:	b280      	uxth	r0, r0
 80167ba:	fbb2 f1f1 	udiv	r1, r2, r1
 80167be:	6822      	ldr	r2, [r4, #0]
 80167c0:	fb00 f101 	mul.w	r1, r0, r1
 80167c4:	3104      	adds	r1, #4
 80167c6:	1853      	adds	r3, r2, r1
 80167c8:	9303      	str	r3, [sp, #12]
 80167ca:	f853 ac04 	ldr.w	sl, [r3, #-4]
 80167ce:	9b07      	ldr	r3, [sp, #28]
 80167d0:	e70b      	b.n	80165ea <uxr_prepare_reliable_buffer_to_write+0xa6>
 80167d2:	8921      	ldrh	r1, [r4, #8]
 80167d4:	fbb5 f2f1 	udiv	r2, r5, r1
 80167d8:	fb01 5212 	mls	r2, r1, r2, r5
 80167dc:	b292      	uxth	r2, r2
 80167de:	6863      	ldr	r3, [r4, #4]
 80167e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80167e4:	6821      	ldr	r1, [r4, #0]
 80167e6:	9804      	ldr	r0, [sp, #16]
 80167e8:	fb02 f303 	mul.w	r3, r2, r3
 80167ec:	3304      	adds	r3, #4
 80167ee:	7b22      	ldrb	r2, [r4, #12]
 80167f0:	4419      	add	r1, r3
 80167f2:	4442      	add	r2, r8
 80167f4:	f841 2c04 	str.w	r2, [r1, #-4]
 80167f8:	7b23      	ldrb	r3, [r4, #12]
 80167fa:	9300      	str	r3, [sp, #0]
 80167fc:	2300      	movs	r3, #0
 80167fe:	f7f6 fc93 	bl	800d128 <ucdr_init_buffer_origin_offset>
 8016802:	81e5      	strh	r5, [r4, #14]
 8016804:	e78e      	b.n	8016724 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8016806:	4606      	mov	r6, r0
 8016808:	e6cc      	b.n	80165a4 <uxr_prepare_reliable_buffer_to_write+0x60>
 801680a:	bf00      	nop
 801680c:	08016429 	.word	0x08016429

08016810 <uxr_prepare_next_reliable_buffer_to_send>:
 8016810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016812:	4604      	mov	r4, r0
 8016814:	460f      	mov	r7, r1
 8016816:	8a00      	ldrh	r0, [r0, #16]
 8016818:	2101      	movs	r1, #1
 801681a:	4615      	mov	r5, r2
 801681c:	461e      	mov	r6, r3
 801681e:	f000 f9f5 	bl	8016c0c <uxr_seq_num_add>
 8016822:	8030      	strh	r0, [r6, #0]
 8016824:	8922      	ldrh	r2, [r4, #8]
 8016826:	fbb0 f3f2 	udiv	r3, r0, r2
 801682a:	fb02 0c13 	mls	ip, r2, r3, r0
 801682e:	fa1f fc8c 	uxth.w	ip, ip
 8016832:	6863      	ldr	r3, [r4, #4]
 8016834:	fbb3 f3f2 	udiv	r3, r3, r2
 8016838:	fb0c fc03 	mul.w	ip, ip, r3
 801683c:	6823      	ldr	r3, [r4, #0]
 801683e:	89e1      	ldrh	r1, [r4, #14]
 8016840:	f10c 0c04 	add.w	ip, ip, #4
 8016844:	4463      	add	r3, ip
 8016846:	603b      	str	r3, [r7, #0]
 8016848:	6823      	ldr	r3, [r4, #0]
 801684a:	4463      	add	r3, ip
 801684c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016850:	602b      	str	r3, [r5, #0]
 8016852:	f000 f9e3 	bl	8016c1c <uxr_seq_num_cmp>
 8016856:	2800      	cmp	r0, #0
 8016858:	dd01      	ble.n	801685e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801685a:	2000      	movs	r0, #0
 801685c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801685e:	7b23      	ldrb	r3, [r4, #12]
 8016860:	682a      	ldr	r2, [r5, #0]
 8016862:	429a      	cmp	r2, r3
 8016864:	d9f9      	bls.n	801685a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016866:	8a61      	ldrh	r1, [r4, #18]
 8016868:	8a20      	ldrh	r0, [r4, #16]
 801686a:	f000 f9d3 	bl	8016c14 <uxr_seq_num_sub>
 801686e:	8923      	ldrh	r3, [r4, #8]
 8016870:	4283      	cmp	r3, r0
 8016872:	d0f2      	beq.n	801685a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016874:	8830      	ldrh	r0, [r6, #0]
 8016876:	89e3      	ldrh	r3, [r4, #14]
 8016878:	8220      	strh	r0, [r4, #16]
 801687a:	4298      	cmp	r0, r3
 801687c:	d001      	beq.n	8016882 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801687e:	2001      	movs	r0, #1
 8016880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016882:	2101      	movs	r1, #1
 8016884:	f000 f9c2 	bl	8016c0c <uxr_seq_num_add>
 8016888:	81e0      	strh	r0, [r4, #14]
 801688a:	e7f8      	b.n	801687e <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801688c <uxr_update_output_stream_heartbeat_timestamp>:
 801688c:	b570      	push	{r4, r5, r6, lr}
 801688e:	8a01      	ldrh	r1, [r0, #16]
 8016890:	4604      	mov	r4, r0
 8016892:	8a40      	ldrh	r0, [r0, #18]
 8016894:	4615      	mov	r5, r2
 8016896:	461e      	mov	r6, r3
 8016898:	f000 f9c0 	bl	8016c1c <uxr_seq_num_cmp>
 801689c:	2800      	cmp	r0, #0
 801689e:	db07      	blt.n	80168b0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80168a0:	f04f 35ff 	mov.w	r5, #4294967295
 80168a4:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80168a8:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80168ac:	2000      	movs	r0, #0
 80168ae:	bd70      	pop	{r4, r5, r6, pc}
 80168b0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80168b4:	b953      	cbnz	r3, 80168cc <uxr_update_output_stream_heartbeat_timestamp+0x40>
 80168b6:	2301      	movs	r3, #1
 80168b8:	f884 3020 	strb.w	r3, [r4, #32]
 80168bc:	3564      	adds	r5, #100	@ 0x64
 80168be:	f04f 0000 	mov.w	r0, #0
 80168c2:	f146 0600 	adc.w	r6, r6, #0
 80168c6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80168ca:	bd70      	pop	{r4, r5, r6, pc}
 80168cc:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80168d0:	428d      	cmp	r5, r1
 80168d2:	eb76 0202 	sbcs.w	r2, r6, r2
 80168d6:	dbf1      	blt.n	80168bc <uxr_update_output_stream_heartbeat_timestamp+0x30>
 80168d8:	3301      	adds	r3, #1
 80168da:	3564      	adds	r5, #100	@ 0x64
 80168dc:	f884 3020 	strb.w	r3, [r4, #32]
 80168e0:	f04f 0001 	mov.w	r0, #1
 80168e4:	f146 0600 	adc.w	r6, r6, #0
 80168e8:	e7ed      	b.n	80168c6 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 80168ea:	bf00      	nop

080168ec <uxr_begin_output_nack_buffer_it>:
 80168ec:	8a40      	ldrh	r0, [r0, #18]
 80168ee:	4770      	bx	lr

080168f0 <uxr_next_reliable_nack_buffer_to_send>:
 80168f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168f4:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 80168f8:	f1b8 0f00 	cmp.w	r8, #0
 80168fc:	d104      	bne.n	8016908 <uxr_next_reliable_nack_buffer_to_send+0x18>
 80168fe:	f04f 0800 	mov.w	r8, #0
 8016902:	4640      	mov	r0, r8
 8016904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016908:	4604      	mov	r4, r0
 801690a:	460e      	mov	r6, r1
 801690c:	8818      	ldrh	r0, [r3, #0]
 801690e:	4617      	mov	r7, r2
 8016910:	461d      	mov	r5, r3
 8016912:	e019      	b.n	8016948 <uxr_next_reliable_nack_buffer_to_send+0x58>
 8016914:	8921      	ldrh	r1, [r4, #8]
 8016916:	8828      	ldrh	r0, [r5, #0]
 8016918:	fbb0 fcf1 	udiv	ip, r0, r1
 801691c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016920:	fb01 0c1c 	mls	ip, r1, ip, r0
 8016924:	fa1f fc8c 	uxth.w	ip, ip
 8016928:	fbb2 f2f1 	udiv	r2, r2, r1
 801692c:	fb02 fc0c 	mul.w	ip, r2, ip
 8016930:	f10c 0c04 	add.w	ip, ip, #4
 8016934:	4463      	add	r3, ip
 8016936:	6033      	str	r3, [r6, #0]
 8016938:	6823      	ldr	r3, [r4, #0]
 801693a:	4463      	add	r3, ip
 801693c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016940:	603b      	str	r3, [r7, #0]
 8016942:	7b22      	ldrb	r2, [r4, #12]
 8016944:	429a      	cmp	r2, r3
 8016946:	d1dc      	bne.n	8016902 <uxr_next_reliable_nack_buffer_to_send+0x12>
 8016948:	2101      	movs	r1, #1
 801694a:	f000 f95f 	bl	8016c0c <uxr_seq_num_add>
 801694e:	8028      	strh	r0, [r5, #0]
 8016950:	8a21      	ldrh	r1, [r4, #16]
 8016952:	f000 f963 	bl	8016c1c <uxr_seq_num_cmp>
 8016956:	2800      	cmp	r0, #0
 8016958:	dddc      	ble.n	8016914 <uxr_next_reliable_nack_buffer_to_send+0x24>
 801695a:	2300      	movs	r3, #0
 801695c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 8016960:	e7cd      	b.n	80168fe <uxr_next_reliable_nack_buffer_to_send+0xe>
 8016962:	bf00      	nop

08016964 <uxr_process_acknack>:
 8016964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016966:	4604      	mov	r4, r0
 8016968:	460e      	mov	r6, r1
 801696a:	4610      	mov	r0, r2
 801696c:	2101      	movs	r1, #1
 801696e:	f000 f951 	bl	8016c14 <uxr_seq_num_sub>
 8016972:	8a61      	ldrh	r1, [r4, #18]
 8016974:	f000 f94e 	bl	8016c14 <uxr_seq_num_sub>
 8016978:	b1c0      	cbz	r0, 80169ac <uxr_process_acknack+0x48>
 801697a:	4605      	mov	r5, r0
 801697c:	2700      	movs	r7, #0
 801697e:	2101      	movs	r1, #1
 8016980:	8a60      	ldrh	r0, [r4, #18]
 8016982:	f000 f943 	bl	8016c0c <uxr_seq_num_add>
 8016986:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801698a:	fbb0 f1fc 	udiv	r1, r0, ip
 801698e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016992:	fb0c 0111 	mls	r1, ip, r1, r0
 8016996:	b289      	uxth	r1, r1
 8016998:	3701      	adds	r7, #1
 801699a:	fbb3 f3fc 	udiv	r3, r3, ip
 801699e:	fb01 f303 	mul.w	r3, r1, r3
 80169a2:	42bd      	cmp	r5, r7
 80169a4:	7b21      	ldrb	r1, [r4, #12]
 80169a6:	8260      	strh	r0, [r4, #18]
 80169a8:	50d1      	str	r1, [r2, r3]
 80169aa:	d1e8      	bne.n	801697e <uxr_process_acknack+0x1a>
 80169ac:	3e00      	subs	r6, #0
 80169ae:	f04f 0300 	mov.w	r3, #0
 80169b2:	bf18      	it	ne
 80169b4:	2601      	movne	r6, #1
 80169b6:	f884 3020 	strb.w	r3, [r4, #32]
 80169ba:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80169be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080169c0 <uxr_is_output_up_to_date>:
 80169c0:	8a01      	ldrh	r1, [r0, #16]
 80169c2:	8a40      	ldrh	r0, [r0, #18]
 80169c4:	b508      	push	{r3, lr}
 80169c6:	f000 f929 	bl	8016c1c <uxr_seq_num_cmp>
 80169ca:	fab0 f080 	clz	r0, r0
 80169ce:	0940      	lsrs	r0, r0, #5
 80169d0:	bd08      	pop	{r3, pc}
 80169d2:	bf00      	nop

080169d4 <get_available_free_slots>:
 80169d4:	8901      	ldrh	r1, [r0, #8]
 80169d6:	b1c1      	cbz	r1, 8016a0a <get_available_free_slots+0x36>
 80169d8:	b530      	push	{r4, r5, lr}
 80169da:	2200      	movs	r2, #0
 80169dc:	6843      	ldr	r3, [r0, #4]
 80169de:	6805      	ldr	r5, [r0, #0]
 80169e0:	7b04      	ldrb	r4, [r0, #12]
 80169e2:	fbb3 fef1 	udiv	lr, r3, r1
 80169e6:	4610      	mov	r0, r2
 80169e8:	b293      	uxth	r3, r2
 80169ea:	fbb3 fcf1 	udiv	ip, r3, r1
 80169ee:	fb01 331c 	mls	r3, r1, ip, r3
 80169f2:	b29b      	uxth	r3, r3
 80169f4:	fb0e f303 	mul.w	r3, lr, r3
 80169f8:	3201      	adds	r2, #1
 80169fa:	58eb      	ldr	r3, [r5, r3]
 80169fc:	429c      	cmp	r4, r3
 80169fe:	bf04      	itt	eq
 8016a00:	3001      	addeq	r0, #1
 8016a02:	b280      	uxtheq	r0, r0
 8016a04:	4291      	cmp	r1, r2
 8016a06:	d1ef      	bne.n	80169e8 <get_available_free_slots+0x14>
 8016a08:	bd30      	pop	{r4, r5, pc}
 8016a0a:	4608      	mov	r0, r1
 8016a0c:	4770      	bx	lr
 8016a0e:	bf00      	nop

08016a10 <uxr_buffer_cancel_data>:
 8016a10:	b510      	push	{r4, lr}
 8016a12:	b094      	sub	sp, #80	@ 0x50
 8016a14:	2300      	movs	r3, #0
 8016a16:	9301      	str	r3, [sp, #4]
 8016a18:	9205      	str	r2, [sp, #20]
 8016a1a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016a1e:	2201      	movs	r2, #1
 8016a20:	f88d 301e 	strb.w	r3, [sp, #30]
 8016a24:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8016a28:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8016a2c:	2308      	movs	r3, #8
 8016a2e:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8016a32:	9300      	str	r3, [sp, #0]
 8016a34:	2210      	movs	r2, #16
 8016a36:	ab0c      	add	r3, sp, #48	@ 0x30
 8016a38:	4604      	mov	r4, r0
 8016a3a:	f7f7 fef9 	bl	800e830 <uxr_prepare_stream_to_write_submessage>
 8016a3e:	b918      	cbnz	r0, 8016a48 <uxr_buffer_cancel_data+0x38>
 8016a40:	4604      	mov	r4, r0
 8016a42:	4620      	mov	r0, r4
 8016a44:	b014      	add	sp, #80	@ 0x50
 8016a46:	bd10      	pop	{r4, pc}
 8016a48:	9905      	ldr	r1, [sp, #20]
 8016a4a:	aa06      	add	r2, sp, #24
 8016a4c:	4620      	mov	r0, r4
 8016a4e:	f7f8 f829 	bl	800eaa4 <uxr_init_base_object_request>
 8016a52:	a906      	add	r1, sp, #24
 8016a54:	4604      	mov	r4, r0
 8016a56:	a80c      	add	r0, sp, #48	@ 0x30
 8016a58:	f7f9 fe6c 	bl	8010734 <uxr_serialize_READ_DATA_Payload>
 8016a5c:	4620      	mov	r0, r4
 8016a5e:	b014      	add	sp, #80	@ 0x50
 8016a60:	bd10      	pop	{r4, pc}
 8016a62:	bf00      	nop

08016a64 <read_submessage_format>:
 8016a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a68:	b095      	sub	sp, #84	@ 0x54
 8016a6a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8016a6e:	b113      	cbz	r3, 8016a76 <read_submessage_format+0x12>
 8016a70:	b015      	add	sp, #84	@ 0x54
 8016a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a76:	460c      	mov	r4, r1
 8016a78:	4616      	mov	r6, r2
 8016a7a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8016a7e:	461d      	mov	r5, r3
 8016a80:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8016a82:	9304      	str	r3, [sp, #16]
 8016a84:	1a52      	subs	r2, r2, r1
 8016a86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016a88:	9305      	str	r3, [sp, #20]
 8016a8a:	4680      	mov	r8, r0
 8016a8c:	a80c      	add	r0, sp, #48	@ 0x30
 8016a8e:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 8016a92:	f7f6 fb5b 	bl	800d14c <ucdr_init_buffer>
 8016a96:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016a9a:	a80c      	add	r0, sp, #48	@ 0x30
 8016a9c:	f7f6 fb2a 	bl	800d0f4 <ucdr_set_on_full_buffer_callback>
 8016aa0:	69e3      	ldr	r3, [r4, #28]
 8016aa2:	b35b      	cbz	r3, 8016afc <read_submessage_format+0x98>
 8016aa4:	f1b9 0f07 	cmp.w	r9, #7
 8016aa8:	751d      	strb	r5, [r3, #20]
 8016aaa:	d043      	beq.n	8016b34 <read_submessage_format+0xd0>
 8016aac:	f1b9 0f08 	cmp.w	r9, #8
 8016ab0:	d032      	beq.n	8016b18 <read_submessage_format+0xb4>
 8016ab2:	f1b9 0f06 	cmp.w	r9, #6
 8016ab6:	d008      	beq.n	8016aca <read_submessage_format+0x66>
 8016ab8:	2201      	movs	r2, #1
 8016aba:	751a      	strb	r2, [r3, #20]
 8016abc:	4631      	mov	r1, r6
 8016abe:	4620      	mov	r0, r4
 8016ac0:	f7f6 fb94 	bl	800d1ec <ucdr_advance_buffer>
 8016ac4:	b015      	add	sp, #84	@ 0x54
 8016ac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016aca:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8016ace:	2d00      	cmp	r5, #0
 8016ad0:	d0f2      	beq.n	8016ab8 <read_submessage_format+0x54>
 8016ad2:	ab0c      	add	r3, sp, #48	@ 0x30
 8016ad4:	e9cd 3600 	strd	r3, r6, [sp]
 8016ad8:	2306      	movs	r3, #6
 8016ada:	f88d 3016 	strb.w	r3, [sp, #22]
 8016ade:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 8016ae2:	9302      	str	r3, [sp, #8]
 8016ae4:	463a      	mov	r2, r7
 8016ae6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8016aea:	4640      	mov	r0, r8
 8016aec:	47a8      	blx	r5
 8016aee:	69e3      	ldr	r3, [r4, #28]
 8016af0:	2201      	movs	r2, #1
 8016af2:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d1de      	bne.n	8016ab8 <read_submessage_format+0x54>
 8016afa:	e7df      	b.n	8016abc <read_submessage_format+0x58>
 8016afc:	f1b9 0f07 	cmp.w	r9, #7
 8016b00:	d032      	beq.n	8016b68 <read_submessage_format+0x104>
 8016b02:	f1b9 0f08 	cmp.w	r9, #8
 8016b06:	d02a      	beq.n	8016b5e <read_submessage_format+0xfa>
 8016b08:	f1b9 0f06 	cmp.w	r9, #6
 8016b0c:	d1d6      	bne.n	8016abc <read_submessage_format+0x58>
 8016b0e:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8016b12:	2d00      	cmp	r5, #0
 8016b14:	d1dd      	bne.n	8016ad2 <read_submessage_format+0x6e>
 8016b16:	e7d1      	b.n	8016abc <read_submessage_format+0x58>
 8016b18:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 8016b1c:	2a00      	cmp	r2, #0
 8016b1e:	d0cb      	beq.n	8016ab8 <read_submessage_format+0x54>
 8016b20:	a906      	add	r1, sp, #24
 8016b22:	a80c      	add	r0, sp, #48	@ 0x30
 8016b24:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8016b26:	f7f9 fed9 	bl	80108dc <uxr_deserialize_SampleIdentity>
 8016b2a:	bb28      	cbnz	r0, 8016b78 <read_submessage_format+0x114>
 8016b2c:	69e3      	ldr	r3, [r4, #28]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d1c2      	bne.n	8016ab8 <read_submessage_format+0x54>
 8016b32:	e7c3      	b.n	8016abc <read_submessage_format+0x58>
 8016b34:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8016b38:	b16a      	cbz	r2, 8016b56 <read_submessage_format+0xf2>
 8016b3a:	a906      	add	r1, sp, #24
 8016b3c:	a80c      	add	r0, sp, #48	@ 0x30
 8016b3e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8016b40:	f7f9 fb98 	bl	8010274 <uxr_deserialize_BaseObjectRequest>
 8016b44:	2800      	cmp	r0, #0
 8016b46:	d13a      	bne.n	8016bbe <read_submessage_format+0x15a>
 8016b48:	68a2      	ldr	r2, [r4, #8]
 8016b4a:	69e3      	ldr	r3, [r4, #28]
 8016b4c:	4432      	add	r2, r6
 8016b4e:	60a2      	str	r2, [r4, #8]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d1b1      	bne.n	8016ab8 <read_submessage_format+0x54>
 8016b54:	e7b2      	b.n	8016abc <read_submessage_format+0x58>
 8016b56:	68a2      	ldr	r2, [r4, #8]
 8016b58:	4432      	add	r2, r6
 8016b5a:	60a2      	str	r2, [r4, #8]
 8016b5c:	e7ac      	b.n	8016ab8 <read_submessage_format+0x54>
 8016b5e:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d1dc      	bne.n	8016b20 <read_submessage_format+0xbc>
 8016b66:	e7a9      	b.n	8016abc <read_submessage_format+0x58>
 8016b68:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d1e4      	bne.n	8016b3a <read_submessage_format+0xd6>
 8016b70:	68a3      	ldr	r3, [r4, #8]
 8016b72:	4433      	add	r3, r6
 8016b74:	60a3      	str	r3, [r4, #8]
 8016b76:	e7a1      	b.n	8016abc <read_submessage_format+0x58>
 8016b78:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016b7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016b7e:	1a52      	subs	r2, r2, r1
 8016b80:	1aed      	subs	r5, r5, r3
 8016b82:	a80c      	add	r0, sp, #48	@ 0x30
 8016b84:	f7f6 fae2 	bl	800d14c <ucdr_init_buffer>
 8016b88:	4435      	add	r5, r6
 8016b8a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016b8e:	a80c      	add	r0, sp, #48	@ 0x30
 8016b90:	f7f6 fab0 	bl	800d0f4 <ucdr_set_on_full_buffer_callback>
 8016b94:	b2ad      	uxth	r5, r5
 8016b96:	ab0c      	add	r3, sp, #48	@ 0x30
 8016b98:	9300      	str	r3, [sp, #0]
 8016b9a:	9501      	str	r5, [sp, #4]
 8016b9c:	2108      	movs	r1, #8
 8016b9e:	f88d 1016 	strb.w	r1, [sp, #22]
 8016ba2:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 8016ba6:	9102      	str	r1, [sp, #8]
 8016ba8:	ab06      	add	r3, sp, #24
 8016baa:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 8016bae:	9905      	ldr	r1, [sp, #20]
 8016bb0:	463a      	mov	r2, r7
 8016bb2:	4640      	mov	r0, r8
 8016bb4:	47a8      	blx	r5
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8016bbc:	e7b6      	b.n	8016b2c <read_submessage_format+0xc8>
 8016bbe:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016bc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016bc4:	1a52      	subs	r2, r2, r1
 8016bc6:	1aed      	subs	r5, r5, r3
 8016bc8:	a80c      	add	r0, sp, #48	@ 0x30
 8016bca:	f7f6 fabf 	bl	800d14c <ucdr_init_buffer>
 8016bce:	4435      	add	r5, r6
 8016bd0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016bd4:	a80c      	add	r0, sp, #48	@ 0x30
 8016bd6:	f7f6 fa8d 	bl	800d0f4 <ucdr_set_on_full_buffer_callback>
 8016bda:	b2ad      	uxth	r5, r5
 8016bdc:	ab0c      	add	r3, sp, #48	@ 0x30
 8016bde:	9300      	str	r3, [sp, #0]
 8016be0:	9501      	str	r5, [sp, #4]
 8016be2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8016be6:	2107      	movs	r1, #7
 8016be8:	f88d 1016 	strb.w	r1, [sp, #22]
 8016bec:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 8016bf0:	9102      	str	r1, [sp, #8]
 8016bf2:	ba5b      	rev16	r3, r3
 8016bf4:	b29b      	uxth	r3, r3
 8016bf6:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 8016bfa:	9905      	ldr	r1, [sp, #20]
 8016bfc:	463a      	mov	r2, r7
 8016bfe:	4640      	mov	r0, r8
 8016c00:	47a8      	blx	r5
 8016c02:	2301      	movs	r3, #1
 8016c04:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8016c08:	e79e      	b.n	8016b48 <read_submessage_format+0xe4>
 8016c0a:	bf00      	nop

08016c0c <uxr_seq_num_add>:
 8016c0c:	4408      	add	r0, r1
 8016c0e:	b280      	uxth	r0, r0
 8016c10:	4770      	bx	lr
 8016c12:	bf00      	nop

08016c14 <uxr_seq_num_sub>:
 8016c14:	1a40      	subs	r0, r0, r1
 8016c16:	b280      	uxth	r0, r0
 8016c18:	4770      	bx	lr
 8016c1a:	bf00      	nop

08016c1c <uxr_seq_num_cmp>:
 8016c1c:	4288      	cmp	r0, r1
 8016c1e:	d010      	beq.n	8016c42 <uxr_seq_num_cmp+0x26>
 8016c20:	d207      	bcs.n	8016c32 <uxr_seq_num_cmp+0x16>
 8016c22:	1a09      	subs	r1, r1, r0
 8016c24:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8016c28:	bfb4      	ite	lt
 8016c2a:	f04f 30ff 	movlt.w	r0, #4294967295
 8016c2e:	2001      	movge	r0, #1
 8016c30:	4770      	bx	lr
 8016c32:	1a41      	subs	r1, r0, r1
 8016c34:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8016c38:	bfcc      	ite	gt
 8016c3a:	f04f 30ff 	movgt.w	r0, #4294967295
 8016c3e:	2001      	movle	r0, #1
 8016c40:	4770      	bx	lr
 8016c42:	2000      	movs	r0, #0
 8016c44:	4770      	bx	lr
 8016c46:	bf00      	nop

08016c48 <rcl_get_automatic_discovery_range>:
 8016c48:	b530      	push	{r4, r5, lr}
 8016c4a:	b083      	sub	sp, #12
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	9301      	str	r3, [sp, #4]
 8016c50:	b1c0      	cbz	r0, 8016c84 <rcl_get_automatic_discovery_range+0x3c>
 8016c52:	4604      	mov	r4, r0
 8016c54:	a901      	add	r1, sp, #4
 8016c56:	4818      	ldr	r0, [pc, #96]	@ (8016cb8 <rcl_get_automatic_discovery_range+0x70>)
 8016c58:	f7fc ff58 	bl	8013b0c <rcutils_get_env>
 8016c5c:	b110      	cbz	r0, 8016c64 <rcl_get_automatic_discovery_range+0x1c>
 8016c5e:	2001      	movs	r0, #1
 8016c60:	b003      	add	sp, #12
 8016c62:	bd30      	pop	{r4, r5, pc}
 8016c64:	9d01      	ldr	r5, [sp, #4]
 8016c66:	782b      	ldrb	r3, [r5, #0]
 8016c68:	b923      	cbnz	r3, 8016c74 <rcl_get_automatic_discovery_range+0x2c>
 8016c6a:	2303      	movs	r3, #3
 8016c6c:	7023      	strb	r3, [r4, #0]
 8016c6e:	2000      	movs	r0, #0
 8016c70:	b003      	add	sp, #12
 8016c72:	bd30      	pop	{r4, r5, pc}
 8016c74:	4911      	ldr	r1, [pc, #68]	@ (8016cbc <rcl_get_automatic_discovery_range+0x74>)
 8016c76:	4628      	mov	r0, r5
 8016c78:	f7e9 faca 	bl	8000210 <strcmp>
 8016c7c:	b928      	cbnz	r0, 8016c8a <rcl_get_automatic_discovery_range+0x42>
 8016c7e:	2301      	movs	r3, #1
 8016c80:	7023      	strb	r3, [r4, #0]
 8016c82:	e7f4      	b.n	8016c6e <rcl_get_automatic_discovery_range+0x26>
 8016c84:	200b      	movs	r0, #11
 8016c86:	b003      	add	sp, #12
 8016c88:	bd30      	pop	{r4, r5, pc}
 8016c8a:	490d      	ldr	r1, [pc, #52]	@ (8016cc0 <rcl_get_automatic_discovery_range+0x78>)
 8016c8c:	4628      	mov	r0, r5
 8016c8e:	f7e9 fabf 	bl	8000210 <strcmp>
 8016c92:	b168      	cbz	r0, 8016cb0 <rcl_get_automatic_discovery_range+0x68>
 8016c94:	490b      	ldr	r1, [pc, #44]	@ (8016cc4 <rcl_get_automatic_discovery_range+0x7c>)
 8016c96:	4628      	mov	r0, r5
 8016c98:	f7e9 faba 	bl	8000210 <strcmp>
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	d0e4      	beq.n	8016c6a <rcl_get_automatic_discovery_range+0x22>
 8016ca0:	4909      	ldr	r1, [pc, #36]	@ (8016cc8 <rcl_get_automatic_discovery_range+0x80>)
 8016ca2:	4628      	mov	r0, r5
 8016ca4:	f7e9 fab4 	bl	8000210 <strcmp>
 8016ca8:	b910      	cbnz	r0, 8016cb0 <rcl_get_automatic_discovery_range+0x68>
 8016caa:	2304      	movs	r3, #4
 8016cac:	7023      	strb	r3, [r4, #0]
 8016cae:	e7de      	b.n	8016c6e <rcl_get_automatic_discovery_range+0x26>
 8016cb0:	2302      	movs	r3, #2
 8016cb2:	7023      	strb	r3, [r4, #0]
 8016cb4:	e7db      	b.n	8016c6e <rcl_get_automatic_discovery_range+0x26>
 8016cb6:	bf00      	nop
 8016cb8:	0801a6c0 	.word	0x0801a6c0
 8016cbc:	0801a6e0 	.word	0x0801a6e0
 8016cc0:	0801a6e4 	.word	0x0801a6e4
 8016cc4:	0801a6f0 	.word	0x0801a6f0
 8016cc8:	0801a6f8 	.word	0x0801a6f8

08016ccc <rcl_automatic_discovery_range_to_string>:
 8016ccc:	2804      	cmp	r0, #4
 8016cce:	bf9a      	itte	ls
 8016cd0:	4b02      	ldrls	r3, [pc, #8]	@ (8016cdc <rcl_automatic_discovery_range_to_string+0x10>)
 8016cd2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016cd6:	2000      	movhi	r0, #0
 8016cd8:	4770      	bx	lr
 8016cda:	bf00      	nop
 8016cdc:	0801b22c 	.word	0x0801b22c

08016ce0 <rcl_get_discovery_static_peers>:
 8016ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ce4:	b08c      	sub	sp, #48	@ 0x30
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	9304      	str	r3, [sp, #16]
 8016cea:	2800      	cmp	r0, #0
 8016cec:	d04e      	beq.n	8016d8c <rcl_get_discovery_static_peers+0xac>
 8016cee:	460d      	mov	r5, r1
 8016cf0:	2900      	cmp	r1, #0
 8016cf2:	d04b      	beq.n	8016d8c <rcl_get_discovery_static_peers+0xac>
 8016cf4:	4604      	mov	r4, r0
 8016cf6:	a904      	add	r1, sp, #16
 8016cf8:	482d      	ldr	r0, [pc, #180]	@ (8016db0 <rcl_get_discovery_static_peers+0xd0>)
 8016cfa:	f7fc ff07 	bl	8013b0c <rcutils_get_env>
 8016cfe:	b118      	cbz	r0, 8016d08 <rcl_get_discovery_static_peers+0x28>
 8016d00:	2001      	movs	r0, #1
 8016d02:	b00c      	add	sp, #48	@ 0x30
 8016d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d08:	9b04      	ldr	r3, [sp, #16]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d0f8      	beq.n	8016d00 <rcl_get_discovery_static_peers+0x20>
 8016d0e:	af05      	add	r7, sp, #20
 8016d10:	4638      	mov	r0, r7
 8016d12:	f000 fc7f 	bl	8017614 <rcutils_get_zero_initialized_string_array>
 8016d16:	f105 0308 	add.w	r3, r5, #8
 8016d1a:	9703      	str	r7, [sp, #12]
 8016d1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016d20:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016d24:	9804      	ldr	r0, [sp, #16]
 8016d26:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016d2a:	213b      	movs	r1, #59	@ 0x3b
 8016d2c:	f000 fbc2 	bl	80174b4 <rcutils_split>
 8016d30:	2800      	cmp	r0, #0
 8016d32:	d1e5      	bne.n	8016d00 <rcl_get_discovery_static_peers+0x20>
 8016d34:	9905      	ldr	r1, [sp, #20]
 8016d36:	462a      	mov	r2, r5
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f000 fcc3 	bl	80176c4 <rmw_discovery_options_init>
 8016d3e:	4606      	mov	r6, r0
 8016d40:	bb90      	cbnz	r0, 8016da8 <rcl_get_discovery_static_peers+0xc8>
 8016d42:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016d46:	f1b9 0f00 	cmp.w	r9, #0
 8016d4a:	d026      	beq.n	8016d9a <rcl_get_discovery_static_peers+0xba>
 8016d4c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016d50:	4680      	mov	r8, r0
 8016d52:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 8016d56:	4628      	mov	r0, r5
 8016d58:	f7e9 faba 	bl	80002d0 <strlen>
 8016d5c:	28ff      	cmp	r0, #255	@ 0xff
 8016d5e:	4629      	mov	r1, r5
 8016d60:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8016d64:	d816      	bhi.n	8016d94 <rcl_get_discovery_static_peers+0xb4>
 8016d66:	6860      	ldr	r0, [r4, #4]
 8016d68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016d6c:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8016d70:	f001 fc4f 	bl	8018612 <strncpy>
 8016d74:	6863      	ldr	r3, [r4, #4]
 8016d76:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016d7a:	3601      	adds	r6, #1
 8016d7c:	442b      	add	r3, r5
 8016d7e:	454e      	cmp	r6, r9
 8016d80:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8016d84:	d209      	bcs.n	8016d9a <rcl_get_discovery_static_peers+0xba>
 8016d86:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016d8a:	e7e2      	b.n	8016d52 <rcl_get_discovery_static_peers+0x72>
 8016d8c:	200b      	movs	r0, #11
 8016d8e:	b00c      	add	sp, #48	@ 0x30
 8016d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d94:	3601      	adds	r6, #1
 8016d96:	454e      	cmp	r6, r9
 8016d98:	d3db      	bcc.n	8016d52 <rcl_get_discovery_static_peers+0x72>
 8016d9a:	4638      	mov	r0, r7
 8016d9c:	f000 fc6c 	bl	8017678 <rcutils_string_array_fini>
 8016da0:	3800      	subs	r0, #0
 8016da2:	bf18      	it	ne
 8016da4:	2001      	movne	r0, #1
 8016da6:	e7ac      	b.n	8016d02 <rcl_get_discovery_static_peers+0x22>
 8016da8:	f7f9 fff8 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8016dac:	e7a9      	b.n	8016d02 <rcl_get_discovery_static_peers+0x22>
 8016dae:	bf00      	nop
 8016db0:	0801a708 	.word	0x0801a708

08016db4 <rcl_get_default_domain_id>:
 8016db4:	b530      	push	{r4, r5, lr}
 8016db6:	b083      	sub	sp, #12
 8016db8:	2300      	movs	r3, #0
 8016dba:	9300      	str	r3, [sp, #0]
 8016dbc:	b1f0      	cbz	r0, 8016dfc <rcl_get_default_domain_id+0x48>
 8016dbe:	4604      	mov	r4, r0
 8016dc0:	4669      	mov	r1, sp
 8016dc2:	4812      	ldr	r0, [pc, #72]	@ (8016e0c <rcl_get_default_domain_id+0x58>)
 8016dc4:	f7fc fea2 	bl	8013b0c <rcutils_get_env>
 8016dc8:	4602      	mov	r2, r0
 8016dca:	b108      	cbz	r0, 8016dd0 <rcl_get_default_domain_id+0x1c>
 8016dcc:	2001      	movs	r0, #1
 8016dce:	e004      	b.n	8016dda <rcl_get_default_domain_id+0x26>
 8016dd0:	9800      	ldr	r0, [sp, #0]
 8016dd2:	b108      	cbz	r0, 8016dd8 <rcl_get_default_domain_id+0x24>
 8016dd4:	7803      	ldrb	r3, [r0, #0]
 8016dd6:	b913      	cbnz	r3, 8016dde <rcl_get_default_domain_id+0x2a>
 8016dd8:	2000      	movs	r0, #0
 8016dda:	b003      	add	sp, #12
 8016ddc:	bd30      	pop	{r4, r5, pc}
 8016dde:	a901      	add	r1, sp, #4
 8016de0:	9201      	str	r2, [sp, #4]
 8016de2:	f001 f955 	bl	8018090 <strtoul>
 8016de6:	4605      	mov	r5, r0
 8016de8:	b158      	cbz	r0, 8016e02 <rcl_get_default_domain_id+0x4e>
 8016dea:	1c43      	adds	r3, r0, #1
 8016dec:	d104      	bne.n	8016df8 <rcl_get_default_domain_id+0x44>
 8016dee:	f001 fc8f 	bl	8018710 <__errno>
 8016df2:	6803      	ldr	r3, [r0, #0]
 8016df4:	2b22      	cmp	r3, #34	@ 0x22
 8016df6:	d0e9      	beq.n	8016dcc <rcl_get_default_domain_id+0x18>
 8016df8:	6025      	str	r5, [r4, #0]
 8016dfa:	e7ed      	b.n	8016dd8 <rcl_get_default_domain_id+0x24>
 8016dfc:	200b      	movs	r0, #11
 8016dfe:	b003      	add	sp, #12
 8016e00:	bd30      	pop	{r4, r5, pc}
 8016e02:	9b01      	ldr	r3, [sp, #4]
 8016e04:	781b      	ldrb	r3, [r3, #0]
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d0f6      	beq.n	8016df8 <rcl_get_default_domain_id+0x44>
 8016e0a:	e7df      	b.n	8016dcc <rcl_get_default_domain_id+0x18>
 8016e0c:	0801a7e8 	.word	0x0801a7e8

08016e10 <rcl_expand_topic_name>:
 8016e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e14:	b08b      	sub	sp, #44	@ 0x2c
 8016e16:	9306      	str	r3, [sp, #24]
 8016e18:	2800      	cmp	r0, #0
 8016e1a:	f000 80ad 	beq.w	8016f78 <rcl_expand_topic_name+0x168>
 8016e1e:	460e      	mov	r6, r1
 8016e20:	2900      	cmp	r1, #0
 8016e22:	f000 80a9 	beq.w	8016f78 <rcl_expand_topic_name+0x168>
 8016e26:	4617      	mov	r7, r2
 8016e28:	2a00      	cmp	r2, #0
 8016e2a:	f000 80a5 	beq.w	8016f78 <rcl_expand_topic_name+0x168>
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	f000 80a2 	beq.w	8016f78 <rcl_expand_topic_name+0x168>
 8016e34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	f000 809e 	beq.w	8016f78 <rcl_expand_topic_name+0x168>
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	a909      	add	r1, sp, #36	@ 0x24
 8016e40:	4680      	mov	r8, r0
 8016e42:	f000 fa45 	bl	80172d0 <rcl_validate_topic_name>
 8016e46:	4605      	mov	r5, r0
 8016e48:	2800      	cmp	r0, #0
 8016e4a:	f040 8096 	bne.w	8016f7a <rcl_expand_topic_name+0x16a>
 8016e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	f040 809a 	bne.w	8016f8a <rcl_expand_topic_name+0x17a>
 8016e56:	4602      	mov	r2, r0
 8016e58:	a909      	add	r1, sp, #36	@ 0x24
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	f7fd fa8e 	bl	801437c <rmw_validate_node_name>
 8016e60:	2800      	cmp	r0, #0
 8016e62:	f040 808e 	bne.w	8016f82 <rcl_expand_topic_name+0x172>
 8016e66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e68:	2a00      	cmp	r2, #0
 8016e6a:	f040 8093 	bne.w	8016f94 <rcl_expand_topic_name+0x184>
 8016e6e:	a909      	add	r1, sp, #36	@ 0x24
 8016e70:	4638      	mov	r0, r7
 8016e72:	f7fd fa65 	bl	8014340 <rmw_validate_namespace>
 8016e76:	2800      	cmp	r0, #0
 8016e78:	f040 8083 	bne.w	8016f82 <rcl_expand_topic_name+0x172>
 8016e7c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8016e7e:	2d00      	cmp	r5, #0
 8016e80:	f040 80f5 	bne.w	801706e <rcl_expand_topic_name+0x25e>
 8016e84:	217b      	movs	r1, #123	@ 0x7b
 8016e86:	4640      	mov	r0, r8
 8016e88:	f001 fba4 	bl	80185d4 <strchr>
 8016e8c:	f898 3000 	ldrb.w	r3, [r8]
 8016e90:	2b2f      	cmp	r3, #47	@ 0x2f
 8016e92:	4604      	mov	r4, r0
 8016e94:	f000 809f 	beq.w	8016fd6 <rcl_expand_topic_name+0x1c6>
 8016e98:	2b7e      	cmp	r3, #126	@ 0x7e
 8016e9a:	f040 80ea 	bne.w	8017072 <rcl_expand_topic_name+0x262>
 8016e9e:	4638      	mov	r0, r7
 8016ea0:	f7e9 fa16 	bl	80002d0 <strlen>
 8016ea4:	4a86      	ldr	r2, [pc, #536]	@ (80170c0 <rcl_expand_topic_name+0x2b0>)
 8016ea6:	4b87      	ldr	r3, [pc, #540]	@ (80170c4 <rcl_expand_topic_name+0x2b4>)
 8016ea8:	2801      	cmp	r0, #1
 8016eaa:	bf08      	it	eq
 8016eac:	4613      	moveq	r3, r2
 8016eae:	9302      	str	r3, [sp, #8]
 8016eb0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016eb2:	9300      	str	r3, [sp, #0]
 8016eb4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016eb8:	f108 0301 	add.w	r3, r8, #1
 8016ebc:	9305      	str	r3, [sp, #20]
 8016ebe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016ec2:	9301      	str	r3, [sp, #4]
 8016ec4:	ab14      	add	r3, sp, #80	@ 0x50
 8016ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016ec8:	f7fc fe38 	bl	8013b3c <rcutils_format_string_limit>
 8016ecc:	4682      	mov	sl, r0
 8016ece:	2800      	cmp	r0, #0
 8016ed0:	f000 80e1 	beq.w	8017096 <rcl_expand_topic_name+0x286>
 8016ed4:	2c00      	cmp	r4, #0
 8016ed6:	f000 8085 	beq.w	8016fe4 <rcl_expand_topic_name+0x1d4>
 8016eda:	217b      	movs	r1, #123	@ 0x7b
 8016edc:	f001 fb7a 	bl	80185d4 <strchr>
 8016ee0:	46d1      	mov	r9, sl
 8016ee2:	4604      	mov	r4, r0
 8016ee4:	9507      	str	r5, [sp, #28]
 8016ee6:	464d      	mov	r5, r9
 8016ee8:	2c00      	cmp	r4, #0
 8016eea:	f000 80a1 	beq.w	8017030 <rcl_expand_topic_name+0x220>
 8016eee:	217d      	movs	r1, #125	@ 0x7d
 8016ef0:	4628      	mov	r0, r5
 8016ef2:	f001 fb6f 	bl	80185d4 <strchr>
 8016ef6:	eba0 0904 	sub.w	r9, r0, r4
 8016efa:	f109 0b01 	add.w	fp, r9, #1
 8016efe:	4872      	ldr	r0, [pc, #456]	@ (80170c8 <rcl_expand_topic_name+0x2b8>)
 8016f00:	465a      	mov	r2, fp
 8016f02:	4621      	mov	r1, r4
 8016f04:	f001 fb73 	bl	80185ee <strncmp>
 8016f08:	2800      	cmp	r0, #0
 8016f0a:	d069      	beq.n	8016fe0 <rcl_expand_topic_name+0x1d0>
 8016f0c:	486f      	ldr	r0, [pc, #444]	@ (80170cc <rcl_expand_topic_name+0x2bc>)
 8016f0e:	465a      	mov	r2, fp
 8016f10:	4621      	mov	r1, r4
 8016f12:	f001 fb6c 	bl	80185ee <strncmp>
 8016f16:	b130      	cbz	r0, 8016f26 <rcl_expand_topic_name+0x116>
 8016f18:	486d      	ldr	r0, [pc, #436]	@ (80170d0 <rcl_expand_topic_name+0x2c0>)
 8016f1a:	465a      	mov	r2, fp
 8016f1c:	4621      	mov	r1, r4
 8016f1e:	f001 fb66 	bl	80185ee <strncmp>
 8016f22:	2800      	cmp	r0, #0
 8016f24:	d138      	bne.n	8016f98 <rcl_expand_topic_name+0x188>
 8016f26:	46b9      	mov	r9, r7
 8016f28:	ab16      	add	r3, sp, #88	@ 0x58
 8016f2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016f2e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016f32:	ab14      	add	r3, sp, #80	@ 0x50
 8016f34:	4620      	mov	r0, r4
 8016f36:	cb0c      	ldmia	r3, {r2, r3}
 8016f38:	4659      	mov	r1, fp
 8016f3a:	f7fc ff53 	bl	8013de4 <rcutils_strndup>
 8016f3e:	4604      	mov	r4, r0
 8016f40:	2800      	cmp	r0, #0
 8016f42:	f000 8099 	beq.w	8017078 <rcl_expand_topic_name+0x268>
 8016f46:	464a      	mov	r2, r9
 8016f48:	4628      	mov	r0, r5
 8016f4a:	ab14      	add	r3, sp, #80	@ 0x50
 8016f4c:	4621      	mov	r1, r4
 8016f4e:	f7fc fe2f 	bl	8013bb0 <rcutils_repl_str>
 8016f52:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016f54:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016f56:	4605      	mov	r5, r0
 8016f58:	4620      	mov	r0, r4
 8016f5a:	4798      	blx	r3
 8016f5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016f5e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016f60:	4650      	mov	r0, sl
 8016f62:	4798      	blx	r3
 8016f64:	2d00      	cmp	r5, #0
 8016f66:	f000 8091 	beq.w	801708c <rcl_expand_topic_name+0x27c>
 8016f6a:	217b      	movs	r1, #123	@ 0x7b
 8016f6c:	4628      	mov	r0, r5
 8016f6e:	f001 fb31 	bl	80185d4 <strchr>
 8016f72:	46aa      	mov	sl, r5
 8016f74:	4604      	mov	r4, r0
 8016f76:	e7b7      	b.n	8016ee8 <rcl_expand_topic_name+0xd8>
 8016f78:	250b      	movs	r5, #11
 8016f7a:	4628      	mov	r0, r5
 8016f7c:	b00b      	add	sp, #44	@ 0x2c
 8016f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f82:	f7f9 ff0b 	bl	8010d9c <rcl_convert_rmw_ret_to_rcl_ret>
 8016f86:	4605      	mov	r5, r0
 8016f88:	e7f7      	b.n	8016f7a <rcl_expand_topic_name+0x16a>
 8016f8a:	2567      	movs	r5, #103	@ 0x67
 8016f8c:	4628      	mov	r0, r5
 8016f8e:	b00b      	add	sp, #44	@ 0x2c
 8016f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f94:	25c9      	movs	r5, #201	@ 0xc9
 8016f96:	e7f0      	b.n	8016f7a <rcl_expand_topic_name+0x16a>
 8016f98:	f109 32ff 	add.w	r2, r9, #4294967295
 8016f9c:	9806      	ldr	r0, [sp, #24]
 8016f9e:	1c61      	adds	r1, r4, #1
 8016fa0:	f7fd f83c 	bl	801401c <rcutils_string_map_getn>
 8016fa4:	4681      	mov	r9, r0
 8016fa6:	2800      	cmp	r0, #0
 8016fa8:	d1be      	bne.n	8016f28 <rcl_expand_topic_name+0x118>
 8016faa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016fac:	ab16      	add	r3, sp, #88	@ 0x58
 8016fae:	6010      	str	r0, [r2, #0]
 8016fb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016fb4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016fb8:	ab14      	add	r3, sp, #80	@ 0x50
 8016fba:	cb0c      	ldmia	r3, {r2, r3}
 8016fbc:	4659      	mov	r1, fp
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f7fc ff10 	bl	8013de4 <rcutils_strndup>
 8016fc4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016fc6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016fc8:	4798      	blx	r3
 8016fca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016fcc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016fce:	4650      	mov	r0, sl
 8016fd0:	4798      	blx	r3
 8016fd2:	2569      	movs	r5, #105	@ 0x69
 8016fd4:	e7d1      	b.n	8016f7a <rcl_expand_topic_name+0x16a>
 8016fd6:	2800      	cmp	r0, #0
 8016fd8:	d061      	beq.n	801709e <rcl_expand_topic_name+0x28e>
 8016fda:	46c1      	mov	r9, r8
 8016fdc:	46aa      	mov	sl, r5
 8016fde:	e781      	b.n	8016ee4 <rcl_expand_topic_name+0xd4>
 8016fe0:	46b1      	mov	r9, r6
 8016fe2:	e7a1      	b.n	8016f28 <rcl_expand_topic_name+0x118>
 8016fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8016fe8:	2b2f      	cmp	r3, #47	@ 0x2f
 8016fea:	d01d      	beq.n	8017028 <rcl_expand_topic_name+0x218>
 8016fec:	4638      	mov	r0, r7
 8016fee:	f7e9 f96f 	bl	80002d0 <strlen>
 8016ff2:	4a38      	ldr	r2, [pc, #224]	@ (80170d4 <rcl_expand_topic_name+0x2c4>)
 8016ff4:	4b38      	ldr	r3, [pc, #224]	@ (80170d8 <rcl_expand_topic_name+0x2c8>)
 8016ff6:	f8cd a010 	str.w	sl, [sp, #16]
 8016ffa:	2801      	cmp	r0, #1
 8016ffc:	bf18      	it	ne
 8016ffe:	4613      	movne	r3, r2
 8017000:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017004:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8017008:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801700a:	9703      	str	r7, [sp, #12]
 801700c:	9200      	str	r2, [sp, #0]
 801700e:	ab14      	add	r3, sp, #80	@ 0x50
 8017010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017012:	f7fc fd93 	bl	8013b3c <rcutils_format_string_limit>
 8017016:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017018:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801701a:	4604      	mov	r4, r0
 801701c:	4650      	mov	r0, sl
 801701e:	4798      	blx	r3
 8017020:	46a2      	mov	sl, r4
 8017022:	4653      	mov	r3, sl
 8017024:	2b00      	cmp	r3, #0
 8017026:	d036      	beq.n	8017096 <rcl_expand_topic_name+0x286>
 8017028:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801702a:	f8c3 a000 	str.w	sl, [r3]
 801702e:	e7a4      	b.n	8016f7a <rcl_expand_topic_name+0x16a>
 8017030:	4653      	mov	r3, sl
 8017032:	9d07      	ldr	r5, [sp, #28]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d1d5      	bne.n	8016fe4 <rcl_expand_topic_name+0x1d4>
 8017038:	f898 3000 	ldrb.w	r3, [r8]
 801703c:	2b2f      	cmp	r3, #47	@ 0x2f
 801703e:	d0f3      	beq.n	8017028 <rcl_expand_topic_name+0x218>
 8017040:	4638      	mov	r0, r7
 8017042:	f7e9 f945 	bl	80002d0 <strlen>
 8017046:	4a23      	ldr	r2, [pc, #140]	@ (80170d4 <rcl_expand_topic_name+0x2c4>)
 8017048:	4b23      	ldr	r3, [pc, #140]	@ (80170d8 <rcl_expand_topic_name+0x2c8>)
 801704a:	f8cd 8010 	str.w	r8, [sp, #16]
 801704e:	2801      	cmp	r0, #1
 8017050:	bf18      	it	ne
 8017052:	4613      	movne	r3, r2
 8017054:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8017058:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801705c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801705e:	9703      	str	r7, [sp, #12]
 8017060:	9200      	str	r2, [sp, #0]
 8017062:	ab14      	add	r3, sp, #80	@ 0x50
 8017064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017066:	f7fc fd69 	bl	8013b3c <rcutils_format_string_limit>
 801706a:	4682      	mov	sl, r0
 801706c:	e7d9      	b.n	8017022 <rcl_expand_topic_name+0x212>
 801706e:	25ca      	movs	r5, #202	@ 0xca
 8017070:	e783      	b.n	8016f7a <rcl_expand_topic_name+0x16a>
 8017072:	2800      	cmp	r0, #0
 8017074:	d1b1      	bne.n	8016fda <rcl_expand_topic_name+0x1ca>
 8017076:	e7e3      	b.n	8017040 <rcl_expand_topic_name+0x230>
 8017078:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801707a:	6018      	str	r0, [r3, #0]
 801707c:	f7f3 fa48 	bl	800a510 <rcutils_reset_error>
 8017080:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017082:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8017084:	4650      	mov	r0, sl
 8017086:	4798      	blx	r3
 8017088:	250a      	movs	r5, #10
 801708a:	e776      	b.n	8016f7a <rcl_expand_topic_name+0x16a>
 801708c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801708e:	601d      	str	r5, [r3, #0]
 8017090:	f7f3 fa3e 	bl	800a510 <rcutils_reset_error>
 8017094:	e7f8      	b.n	8017088 <rcl_expand_topic_name+0x278>
 8017096:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017098:	2300      	movs	r3, #0
 801709a:	6013      	str	r3, [r2, #0]
 801709c:	e7f4      	b.n	8017088 <rcl_expand_topic_name+0x278>
 801709e:	ab17      	add	r3, sp, #92	@ 0x5c
 80170a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80170a4:	e88d 0003 	stmia.w	sp, {r0, r1}
 80170a8:	ab14      	add	r3, sp, #80	@ 0x50
 80170aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80170ac:	4640      	mov	r0, r8
 80170ae:	f7fc fe63 	bl	8013d78 <rcutils_strdup>
 80170b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80170b4:	6018      	str	r0, [r3, #0]
 80170b6:	2800      	cmp	r0, #0
 80170b8:	f47f af5f 	bne.w	8016f7a <rcl_expand_topic_name+0x16a>
 80170bc:	e7e8      	b.n	8017090 <rcl_expand_topic_name+0x280>
 80170be:	bf00      	nop
 80170c0:	0801a104 	.word	0x0801a104
 80170c4:	0801a7f8 	.word	0x0801a7f8
 80170c8:	0801a800 	.word	0x0801a800
 80170cc:	0801a808 	.word	0x0801a808
 80170d0:	0801a810 	.word	0x0801a810
 80170d4:	0801a30c 	.word	0x0801a30c
 80170d8:	0801a114 	.word	0x0801a114

080170dc <rcl_get_default_topic_name_substitutions>:
 80170dc:	2800      	cmp	r0, #0
 80170de:	bf0c      	ite	eq
 80170e0:	200b      	moveq	r0, #11
 80170e2:	2000      	movne	r0, #0
 80170e4:	4770      	bx	lr
 80170e6:	bf00      	nop

080170e8 <rcl_get_zero_initialized_guard_condition>:
 80170e8:	4a03      	ldr	r2, [pc, #12]	@ (80170f8 <rcl_get_zero_initialized_guard_condition+0x10>)
 80170ea:	4603      	mov	r3, r0
 80170ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80170f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80170f4:	4618      	mov	r0, r3
 80170f6:	4770      	bx	lr
 80170f8:	0801b240 	.word	0x0801b240

080170fc <rcl_guard_condition_init>:
 80170fc:	b082      	sub	sp, #8
 80170fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017100:	b087      	sub	sp, #28
 8017102:	ac0c      	add	r4, sp, #48	@ 0x30
 8017104:	e884 000c 	stmia.w	r4, {r2, r3}
 8017108:	46a6      	mov	lr, r4
 801710a:	460d      	mov	r5, r1
 801710c:	4604      	mov	r4, r0
 801710e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017112:	f10d 0c04 	add.w	ip, sp, #4
 8017116:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801711a:	f8de 3000 	ldr.w	r3, [lr]
 801711e:	f8cc 3000 	str.w	r3, [ip]
 8017122:	a801      	add	r0, sp, #4
 8017124:	f7f3 f9c8 	bl	800a4b8 <rcutils_allocator_is_valid>
 8017128:	b338      	cbz	r0, 801717a <rcl_guard_condition_init+0x7e>
 801712a:	b334      	cbz	r4, 801717a <rcl_guard_condition_init+0x7e>
 801712c:	6866      	ldr	r6, [r4, #4]
 801712e:	b9ee      	cbnz	r6, 801716c <rcl_guard_condition_init+0x70>
 8017130:	b31d      	cbz	r5, 801717a <rcl_guard_condition_init+0x7e>
 8017132:	4628      	mov	r0, r5
 8017134:	f7f9 fe4c 	bl	8010dd0 <rcl_context_is_valid>
 8017138:	b308      	cbz	r0, 801717e <rcl_guard_condition_init+0x82>
 801713a:	9b01      	ldr	r3, [sp, #4]
 801713c:	9905      	ldr	r1, [sp, #20]
 801713e:	201c      	movs	r0, #28
 8017140:	4798      	blx	r3
 8017142:	4607      	mov	r7, r0
 8017144:	6060      	str	r0, [r4, #4]
 8017146:	b310      	cbz	r0, 801718e <rcl_guard_condition_init+0x92>
 8017148:	6828      	ldr	r0, [r5, #0]
 801714a:	3028      	adds	r0, #40	@ 0x28
 801714c:	f000 fc06 	bl	801795c <rmw_create_guard_condition>
 8017150:	6038      	str	r0, [r7, #0]
 8017152:	6860      	ldr	r0, [r4, #4]
 8017154:	6807      	ldr	r7, [r0, #0]
 8017156:	b1a7      	cbz	r7, 8017182 <rcl_guard_condition_init+0x86>
 8017158:	2301      	movs	r3, #1
 801715a:	ac01      	add	r4, sp, #4
 801715c:	7103      	strb	r3, [r0, #4]
 801715e:	f100 0708 	add.w	r7, r0, #8
 8017162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017164:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017166:	6823      	ldr	r3, [r4, #0]
 8017168:	603b      	str	r3, [r7, #0]
 801716a:	e000      	b.n	801716e <rcl_guard_condition_init+0x72>
 801716c:	2664      	movs	r6, #100	@ 0x64
 801716e:	4630      	mov	r0, r6
 8017170:	b007      	add	sp, #28
 8017172:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017176:	b002      	add	sp, #8
 8017178:	4770      	bx	lr
 801717a:	260b      	movs	r6, #11
 801717c:	e7f7      	b.n	801716e <rcl_guard_condition_init+0x72>
 801717e:	2665      	movs	r6, #101	@ 0x65
 8017180:	e7f5      	b.n	801716e <rcl_guard_condition_init+0x72>
 8017182:	9b02      	ldr	r3, [sp, #8]
 8017184:	9905      	ldr	r1, [sp, #20]
 8017186:	4798      	blx	r3
 8017188:	2601      	movs	r6, #1
 801718a:	6067      	str	r7, [r4, #4]
 801718c:	e7ef      	b.n	801716e <rcl_guard_condition_init+0x72>
 801718e:	260a      	movs	r6, #10
 8017190:	e7ed      	b.n	801716e <rcl_guard_condition_init+0x72>
 8017192:	bf00      	nop

08017194 <rcl_guard_condition_init_from_rmw>:
 8017194:	b082      	sub	sp, #8
 8017196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801719a:	b086      	sub	sp, #24
 801719c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80171a0:	4604      	mov	r4, r0
 80171a2:	f84c 3f04 	str.w	r3, [ip, #4]!
 80171a6:	460e      	mov	r6, r1
 80171a8:	4617      	mov	r7, r2
 80171aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80171ae:	f10d 0e04 	add.w	lr, sp, #4
 80171b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80171b6:	f8dc 3000 	ldr.w	r3, [ip]
 80171ba:	f8ce 3000 	str.w	r3, [lr]
 80171be:	a801      	add	r0, sp, #4
 80171c0:	f7f3 f97a 	bl	800a4b8 <rcutils_allocator_is_valid>
 80171c4:	b350      	cbz	r0, 801721c <rcl_guard_condition_init_from_rmw+0x88>
 80171c6:	b34c      	cbz	r4, 801721c <rcl_guard_condition_init_from_rmw+0x88>
 80171c8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80171cc:	f1b8 0f00 	cmp.w	r8, #0
 80171d0:	d11e      	bne.n	8017210 <rcl_guard_condition_init_from_rmw+0x7c>
 80171d2:	b31f      	cbz	r7, 801721c <rcl_guard_condition_init_from_rmw+0x88>
 80171d4:	4638      	mov	r0, r7
 80171d6:	f7f9 fdfb 	bl	8010dd0 <rcl_context_is_valid>
 80171da:	b328      	cbz	r0, 8017228 <rcl_guard_condition_init_from_rmw+0x94>
 80171dc:	9b01      	ldr	r3, [sp, #4]
 80171de:	9905      	ldr	r1, [sp, #20]
 80171e0:	201c      	movs	r0, #28
 80171e2:	4798      	blx	r3
 80171e4:	4605      	mov	r5, r0
 80171e6:	6060      	str	r0, [r4, #4]
 80171e8:	b358      	cbz	r0, 8017242 <rcl_guard_condition_init_from_rmw+0xae>
 80171ea:	b1fe      	cbz	r6, 801722c <rcl_guard_condition_init_from_rmw+0x98>
 80171ec:	6006      	str	r6, [r0, #0]
 80171ee:	f880 8004 	strb.w	r8, [r0, #4]
 80171f2:	ac01      	add	r4, sp, #4
 80171f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80171f6:	f105 0c08 	add.w	ip, r5, #8
 80171fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80171fe:	6823      	ldr	r3, [r4, #0]
 8017200:	f8cc 3000 	str.w	r3, [ip]
 8017204:	2000      	movs	r0, #0
 8017206:	b006      	add	sp, #24
 8017208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801720c:	b002      	add	sp, #8
 801720e:	4770      	bx	lr
 8017210:	2064      	movs	r0, #100	@ 0x64
 8017212:	b006      	add	sp, #24
 8017214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017218:	b002      	add	sp, #8
 801721a:	4770      	bx	lr
 801721c:	200b      	movs	r0, #11
 801721e:	b006      	add	sp, #24
 8017220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017224:	b002      	add	sp, #8
 8017226:	4770      	bx	lr
 8017228:	2065      	movs	r0, #101	@ 0x65
 801722a:	e7f2      	b.n	8017212 <rcl_guard_condition_init_from_rmw+0x7e>
 801722c:	6838      	ldr	r0, [r7, #0]
 801722e:	3028      	adds	r0, #40	@ 0x28
 8017230:	f000 fb94 	bl	801795c <rmw_create_guard_condition>
 8017234:	6028      	str	r0, [r5, #0]
 8017236:	6865      	ldr	r5, [r4, #4]
 8017238:	682e      	ldr	r6, [r5, #0]
 801723a:	b126      	cbz	r6, 8017246 <rcl_guard_condition_init_from_rmw+0xb2>
 801723c:	2301      	movs	r3, #1
 801723e:	712b      	strb	r3, [r5, #4]
 8017240:	e7d7      	b.n	80171f2 <rcl_guard_condition_init_from_rmw+0x5e>
 8017242:	200a      	movs	r0, #10
 8017244:	e7e5      	b.n	8017212 <rcl_guard_condition_init_from_rmw+0x7e>
 8017246:	4628      	mov	r0, r5
 8017248:	9b02      	ldr	r3, [sp, #8]
 801724a:	9905      	ldr	r1, [sp, #20]
 801724c:	4798      	blx	r3
 801724e:	2001      	movs	r0, #1
 8017250:	6066      	str	r6, [r4, #4]
 8017252:	e7de      	b.n	8017212 <rcl_guard_condition_init_from_rmw+0x7e>

08017254 <rcl_guard_condition_fini>:
 8017254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017256:	b1d8      	cbz	r0, 8017290 <rcl_guard_condition_fini+0x3c>
 8017258:	4604      	mov	r4, r0
 801725a:	6840      	ldr	r0, [r0, #4]
 801725c:	b158      	cbz	r0, 8017276 <rcl_guard_condition_fini+0x22>
 801725e:	6803      	ldr	r3, [r0, #0]
 8017260:	68c6      	ldr	r6, [r0, #12]
 8017262:	6987      	ldr	r7, [r0, #24]
 8017264:	b153      	cbz	r3, 801727c <rcl_guard_condition_fini+0x28>
 8017266:	7905      	ldrb	r5, [r0, #4]
 8017268:	b955      	cbnz	r5, 8017280 <rcl_guard_condition_fini+0x2c>
 801726a:	4639      	mov	r1, r7
 801726c:	47b0      	blx	r6
 801726e:	2300      	movs	r3, #0
 8017270:	6063      	str	r3, [r4, #4]
 8017272:	4628      	mov	r0, r5
 8017274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017276:	4605      	mov	r5, r0
 8017278:	4628      	mov	r0, r5
 801727a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801727c:	461d      	mov	r5, r3
 801727e:	e7f4      	b.n	801726a <rcl_guard_condition_fini+0x16>
 8017280:	4618      	mov	r0, r3
 8017282:	f000 fb7f 	bl	8017984 <rmw_destroy_guard_condition>
 8017286:	1e05      	subs	r5, r0, #0
 8017288:	bf18      	it	ne
 801728a:	2501      	movne	r5, #1
 801728c:	6860      	ldr	r0, [r4, #4]
 801728e:	e7ec      	b.n	801726a <rcl_guard_condition_fini+0x16>
 8017290:	250b      	movs	r5, #11
 8017292:	4628      	mov	r0, r5
 8017294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017296:	bf00      	nop

08017298 <rcl_guard_condition_get_default_options>:
 8017298:	b510      	push	{r4, lr}
 801729a:	4604      	mov	r4, r0
 801729c:	f7f3 f8e0 	bl	800a460 <rcutils_get_default_allocator>
 80172a0:	4620      	mov	r0, r4
 80172a2:	bd10      	pop	{r4, pc}

080172a4 <rcl_trigger_guard_condition>:
 80172a4:	b148      	cbz	r0, 80172ba <rcl_trigger_guard_condition+0x16>
 80172a6:	b508      	push	{r3, lr}
 80172a8:	6843      	ldr	r3, [r0, #4]
 80172aa:	b143      	cbz	r3, 80172be <rcl_trigger_guard_condition+0x1a>
 80172ac:	6818      	ldr	r0, [r3, #0]
 80172ae:	f000 fb7d 	bl	80179ac <rmw_trigger_guard_condition>
 80172b2:	3800      	subs	r0, #0
 80172b4:	bf18      	it	ne
 80172b6:	2001      	movne	r0, #1
 80172b8:	bd08      	pop	{r3, pc}
 80172ba:	200b      	movs	r0, #11
 80172bc:	4770      	bx	lr
 80172be:	200b      	movs	r0, #11
 80172c0:	bd08      	pop	{r3, pc}
 80172c2:	bf00      	nop

080172c4 <rcl_guard_condition_get_rmw_handle>:
 80172c4:	b110      	cbz	r0, 80172cc <rcl_guard_condition_get_rmw_handle+0x8>
 80172c6:	6840      	ldr	r0, [r0, #4]
 80172c8:	b100      	cbz	r0, 80172cc <rcl_guard_condition_get_rmw_handle+0x8>
 80172ca:	6800      	ldr	r0, [r0, #0]
 80172cc:	4770      	bx	lr
 80172ce:	bf00      	nop

080172d0 <rcl_validate_topic_name>:
 80172d0:	2800      	cmp	r0, #0
 80172d2:	d06b      	beq.n	80173ac <rcl_validate_topic_name+0xdc>
 80172d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172d8:	460d      	mov	r5, r1
 80172da:	2900      	cmp	r1, #0
 80172dc:	d06d      	beq.n	80173ba <rcl_validate_topic_name+0xea>
 80172de:	4616      	mov	r6, r2
 80172e0:	4604      	mov	r4, r0
 80172e2:	f7e8 fff5 	bl	80002d0 <strlen>
 80172e6:	b190      	cbz	r0, 801730e <rcl_validate_topic_name+0x3e>
 80172e8:	7821      	ldrb	r1, [r4, #0]
 80172ea:	4a71      	ldr	r2, [pc, #452]	@ (80174b0 <rcl_validate_topic_name+0x1e0>)
 80172ec:	5c53      	ldrb	r3, [r2, r1]
 80172ee:	f013 0304 	ands.w	r3, r3, #4
 80172f2:	d15d      	bne.n	80173b0 <rcl_validate_topic_name+0xe0>
 80172f4:	1e47      	subs	r7, r0, #1
 80172f6:	f814 c007 	ldrb.w	ip, [r4, r7]
 80172fa:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 80172fe:	d10d      	bne.n	801731c <rcl_validate_topic_name+0x4c>
 8017300:	2302      	movs	r3, #2
 8017302:	602b      	str	r3, [r5, #0]
 8017304:	b146      	cbz	r6, 8017318 <rcl_validate_topic_name+0x48>
 8017306:	6037      	str	r7, [r6, #0]
 8017308:	2000      	movs	r0, #0
 801730a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801730e:	2301      	movs	r3, #1
 8017310:	602b      	str	r3, [r5, #0]
 8017312:	b10e      	cbz	r6, 8017318 <rcl_validate_topic_name+0x48>
 8017314:	2300      	movs	r3, #0
 8017316:	6033      	str	r3, [r6, #0]
 8017318:	2000      	movs	r0, #0
 801731a:	e7f6      	b.n	801730a <rcl_validate_topic_name+0x3a>
 801731c:	f104 38ff 	add.w	r8, r4, #4294967295
 8017320:	469a      	mov	sl, r3
 8017322:	469e      	mov	lr, r3
 8017324:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8017328:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801732c:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8017330:	d85b      	bhi.n	80173ea <rcl_validate_topic_name+0x11a>
 8017332:	e8df f00c 	tbb	[pc, ip]
 8017336:	4463      	.short	0x4463
 8017338:	44444444 	.word	0x44444444
 801733c:	44444444 	.word	0x44444444
 8017340:	5a5a5a44 	.word	0x5a5a5a44
 8017344:	5a5a5a5a 	.word	0x5a5a5a5a
 8017348:	44444444 	.word	0x44444444
 801734c:	44444444 	.word	0x44444444
 8017350:	44444444 	.word	0x44444444
 8017354:	44444444 	.word	0x44444444
 8017358:	44444444 	.word	0x44444444
 801735c:	44444444 	.word	0x44444444
 8017360:	5a5a4444 	.word	0x5a5a4444
 8017364:	5a2e5a5a 	.word	0x5a2e5a5a
 8017368:	44444444 	.word	0x44444444
 801736c:	44444444 	.word	0x44444444
 8017370:	44444444 	.word	0x44444444
 8017374:	44444444 	.word	0x44444444
 8017378:	44444444 	.word	0x44444444
 801737c:	44444444 	.word	0x44444444
 8017380:	5a284444 	.word	0x5a284444
 8017384:	6b73      	.short	0x6b73
 8017386:	f1ba 0f00 	cmp.w	sl, #0
 801738a:	d13a      	bne.n	8017402 <rcl_validate_topic_name+0x132>
 801738c:	4673      	mov	r3, lr
 801738e:	f04f 0a01 	mov.w	sl, #1
 8017392:	f10e 0e01 	add.w	lr, lr, #1
 8017396:	4570      	cmp	r0, lr
 8017398:	d1c4      	bne.n	8017324 <rcl_validate_topic_name+0x54>
 801739a:	f1ba 0f00 	cmp.w	sl, #0
 801739e:	d048      	beq.n	8017432 <rcl_validate_topic_name+0x162>
 80173a0:	2205      	movs	r2, #5
 80173a2:	602a      	str	r2, [r5, #0]
 80173a4:	2e00      	cmp	r6, #0
 80173a6:	d0b7      	beq.n	8017318 <rcl_validate_topic_name+0x48>
 80173a8:	6033      	str	r3, [r6, #0]
 80173aa:	e7b5      	b.n	8017318 <rcl_validate_topic_name+0x48>
 80173ac:	200b      	movs	r0, #11
 80173ae:	4770      	bx	lr
 80173b0:	2304      	movs	r3, #4
 80173b2:	602b      	str	r3, [r5, #0]
 80173b4:	2e00      	cmp	r6, #0
 80173b6:	d1ad      	bne.n	8017314 <rcl_validate_topic_name+0x44>
 80173b8:	e7ae      	b.n	8017318 <rcl_validate_topic_name+0x48>
 80173ba:	200b      	movs	r0, #11
 80173bc:	e7a5      	b.n	801730a <rcl_validate_topic_name+0x3a>
 80173be:	f812 c009 	ldrb.w	ip, [r2, r9]
 80173c2:	f01c 0f04 	tst.w	ip, #4
 80173c6:	d0e4      	beq.n	8017392 <rcl_validate_topic_name+0xc2>
 80173c8:	f1ba 0f00 	cmp.w	sl, #0
 80173cc:	d0e1      	beq.n	8017392 <rcl_validate_topic_name+0xc2>
 80173ce:	f1be 0f00 	cmp.w	lr, #0
 80173d2:	d0de      	beq.n	8017392 <rcl_validate_topic_name+0xc2>
 80173d4:	f10e 3cff 	add.w	ip, lr, #4294967295
 80173d8:	4563      	cmp	r3, ip
 80173da:	d1da      	bne.n	8017392 <rcl_validate_topic_name+0xc2>
 80173dc:	2309      	movs	r3, #9
 80173de:	602b      	str	r3, [r5, #0]
 80173e0:	2e00      	cmp	r6, #0
 80173e2:	d099      	beq.n	8017318 <rcl_validate_topic_name+0x48>
 80173e4:	f8c6 e000 	str.w	lr, [r6]
 80173e8:	e796      	b.n	8017318 <rcl_validate_topic_name+0x48>
 80173ea:	f1ba 0f00 	cmp.w	sl, #0
 80173ee:	bf0c      	ite	eq
 80173f0:	2303      	moveq	r3, #3
 80173f2:	2308      	movne	r3, #8
 80173f4:	602b      	str	r3, [r5, #0]
 80173f6:	2e00      	cmp	r6, #0
 80173f8:	d1f4      	bne.n	80173e4 <rcl_validate_topic_name+0x114>
 80173fa:	e78d      	b.n	8017318 <rcl_validate_topic_name+0x48>
 80173fc:	f1ba 0f00 	cmp.w	sl, #0
 8017400:	d0c7      	beq.n	8017392 <rcl_validate_topic_name+0xc2>
 8017402:	2308      	movs	r3, #8
 8017404:	602b      	str	r3, [r5, #0]
 8017406:	2e00      	cmp	r6, #0
 8017408:	d1ec      	bne.n	80173e4 <rcl_validate_topic_name+0x114>
 801740a:	e785      	b.n	8017318 <rcl_validate_topic_name+0x48>
 801740c:	f1be 0f00 	cmp.w	lr, #0
 8017410:	d0bf      	beq.n	8017392 <rcl_validate_topic_name+0xc2>
 8017412:	2306      	movs	r3, #6
 8017414:	602b      	str	r3, [r5, #0]
 8017416:	2e00      	cmp	r6, #0
 8017418:	d1e4      	bne.n	80173e4 <rcl_validate_topic_name+0x114>
 801741a:	e77d      	b.n	8017318 <rcl_validate_topic_name+0x48>
 801741c:	f1ba 0f00 	cmp.w	sl, #0
 8017420:	d104      	bne.n	801742c <rcl_validate_topic_name+0x15c>
 8017422:	2305      	movs	r3, #5
 8017424:	602b      	str	r3, [r5, #0]
 8017426:	2e00      	cmp	r6, #0
 8017428:	d1dc      	bne.n	80173e4 <rcl_validate_topic_name+0x114>
 801742a:	e775      	b.n	8017318 <rcl_validate_topic_name+0x48>
 801742c:	f04f 0a00 	mov.w	sl, #0
 8017430:	e7af      	b.n	8017392 <rcl_validate_topic_name+0xc2>
 8017432:	297e      	cmp	r1, #126	@ 0x7e
 8017434:	d01d      	beq.n	8017472 <rcl_validate_topic_name+0x1a2>
 8017436:	2101      	movs	r1, #1
 8017438:	e006      	b.n	8017448 <rcl_validate_topic_name+0x178>
 801743a:	458e      	cmp	lr, r1
 801743c:	f104 0401 	add.w	r4, r4, #1
 8017440:	f101 0301 	add.w	r3, r1, #1
 8017444:	d912      	bls.n	801746c <rcl_validate_topic_name+0x19c>
 8017446:	4619      	mov	r1, r3
 8017448:	4557      	cmp	r7, sl
 801744a:	f10a 0a01 	add.w	sl, sl, #1
 801744e:	d0f4      	beq.n	801743a <rcl_validate_topic_name+0x16a>
 8017450:	7823      	ldrb	r3, [r4, #0]
 8017452:	2b2f      	cmp	r3, #47	@ 0x2f
 8017454:	d1f1      	bne.n	801743a <rcl_validate_topic_name+0x16a>
 8017456:	7863      	ldrb	r3, [r4, #1]
 8017458:	5cd3      	ldrb	r3, [r2, r3]
 801745a:	075b      	lsls	r3, r3, #29
 801745c:	d5ed      	bpl.n	801743a <rcl_validate_topic_name+0x16a>
 801745e:	2304      	movs	r3, #4
 8017460:	602b      	str	r3, [r5, #0]
 8017462:	2e00      	cmp	r6, #0
 8017464:	f43f af58 	beq.w	8017318 <rcl_validate_topic_name+0x48>
 8017468:	6031      	str	r1, [r6, #0]
 801746a:	e755      	b.n	8017318 <rcl_validate_topic_name+0x48>
 801746c:	2300      	movs	r3, #0
 801746e:	602b      	str	r3, [r5, #0]
 8017470:	e752      	b.n	8017318 <rcl_validate_topic_name+0x48>
 8017472:	4653      	mov	r3, sl
 8017474:	2101      	movs	r1, #1
 8017476:	e00a      	b.n	801748e <rcl_validate_topic_name+0x1be>
 8017478:	2b01      	cmp	r3, #1
 801747a:	d012      	beq.n	80174a2 <rcl_validate_topic_name+0x1d2>
 801747c:	458e      	cmp	lr, r1
 801747e:	f103 0301 	add.w	r3, r3, #1
 8017482:	f104 0401 	add.w	r4, r4, #1
 8017486:	f101 0001 	add.w	r0, r1, #1
 801748a:	d9ef      	bls.n	801746c <rcl_validate_topic_name+0x19c>
 801748c:	4601      	mov	r1, r0
 801748e:	429f      	cmp	r7, r3
 8017490:	d0f4      	beq.n	801747c <rcl_validate_topic_name+0x1ac>
 8017492:	7820      	ldrb	r0, [r4, #0]
 8017494:	282f      	cmp	r0, #47	@ 0x2f
 8017496:	d1ef      	bne.n	8017478 <rcl_validate_topic_name+0x1a8>
 8017498:	7860      	ldrb	r0, [r4, #1]
 801749a:	5c10      	ldrb	r0, [r2, r0]
 801749c:	0740      	lsls	r0, r0, #29
 801749e:	d5ed      	bpl.n	801747c <rcl_validate_topic_name+0x1ac>
 80174a0:	e7dd      	b.n	801745e <rcl_validate_topic_name+0x18e>
 80174a2:	2207      	movs	r2, #7
 80174a4:	602a      	str	r2, [r5, #0]
 80174a6:	2e00      	cmp	r6, #0
 80174a8:	f47f af7e 	bne.w	80173a8 <rcl_validate_topic_name+0xd8>
 80174ac:	e734      	b.n	8017318 <rcl_validate_topic_name+0x48>
 80174ae:	bf00      	nop
 80174b0:	0801b363 	.word	0x0801b363

080174b4 <rcutils_split>:
 80174b4:	b082      	sub	sp, #8
 80174b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ba:	b08b      	sub	sp, #44	@ 0x2c
 80174bc:	ac14      	add	r4, sp, #80	@ 0x50
 80174be:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80174c0:	e884 000c 	stmia.w	r4, {r2, r3}
 80174c4:	2f00      	cmp	r7, #0
 80174c6:	f000 8091 	beq.w	80175ec <rcutils_split+0x138>
 80174ca:	4606      	mov	r6, r0
 80174cc:	2800      	cmp	r0, #0
 80174ce:	d072      	beq.n	80175b6 <rcutils_split+0x102>
 80174d0:	7804      	ldrb	r4, [r0, #0]
 80174d2:	2c00      	cmp	r4, #0
 80174d4:	d06f      	beq.n	80175b6 <rcutils_split+0x102>
 80174d6:	460d      	mov	r5, r1
 80174d8:	f7e8 fefa 	bl	80002d0 <strlen>
 80174dc:	1833      	adds	r3, r6, r0
 80174de:	1b64      	subs	r4, r4, r5
 80174e0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80174e4:	4681      	mov	r9, r0
 80174e6:	fab4 f484 	clz	r4, r4
 80174ea:	0964      	lsrs	r4, r4, #5
 80174ec:	42ab      	cmp	r3, r5
 80174ee:	bf08      	it	eq
 80174f0:	f1a9 0901 	subeq.w	r9, r9, #1
 80174f4:	454c      	cmp	r4, r9
 80174f6:	d26a      	bcs.n	80175ce <rcutils_split+0x11a>
 80174f8:	1933      	adds	r3, r6, r4
 80174fa:	eb06 0009 	add.w	r0, r6, r9
 80174fe:	2101      	movs	r1, #1
 8017500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017504:	42aa      	cmp	r2, r5
 8017506:	bf08      	it	eq
 8017508:	3101      	addeq	r1, #1
 801750a:	4283      	cmp	r3, r0
 801750c:	d1f8      	bne.n	8017500 <rcutils_split+0x4c>
 801750e:	aa14      	add	r2, sp, #80	@ 0x50
 8017510:	4638      	mov	r0, r7
 8017512:	f000 f88f 	bl	8017634 <rcutils_string_array_init>
 8017516:	2800      	cmp	r0, #0
 8017518:	d141      	bne.n	801759e <rcutils_split+0xea>
 801751a:	687a      	ldr	r2, [r7, #4]
 801751c:	4680      	mov	r8, r0
 801751e:	46a2      	mov	sl, r4
 8017520:	e002      	b.n	8017528 <rcutils_split+0x74>
 8017522:	3401      	adds	r4, #1
 8017524:	454c      	cmp	r4, r9
 8017526:	d222      	bcs.n	801756e <rcutils_split+0xba>
 8017528:	5d33      	ldrb	r3, [r6, r4]
 801752a:	42ab      	cmp	r3, r5
 801752c:	d1f9      	bne.n	8017522 <rcutils_split+0x6e>
 801752e:	4554      	cmp	r4, sl
 8017530:	eba4 0b0a 	sub.w	fp, r4, sl
 8017534:	d038      	beq.n	80175a8 <rcutils_split+0xf4>
 8017536:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017538:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801753a:	9201      	str	r2, [sp, #4]
 801753c:	f10b 0002 	add.w	r0, fp, #2
 8017540:	4798      	blx	r3
 8017542:	9a01      	ldr	r2, [sp, #4]
 8017544:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8017548:	687a      	ldr	r2, [r7, #4]
 801754a:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 801754e:	eb06 030a 	add.w	r3, r6, sl
 8017552:	f10b 0101 	add.w	r1, fp, #1
 8017556:	2800      	cmp	r0, #0
 8017558:	d04e      	beq.n	80175f8 <rcutils_split+0x144>
 801755a:	4a2d      	ldr	r2, [pc, #180]	@ (8017610 <rcutils_split+0x15c>)
 801755c:	f000 febe 	bl	80182dc <sniprintf>
 8017560:	687a      	ldr	r2, [r7, #4]
 8017562:	f108 0801 	add.w	r8, r8, #1
 8017566:	3401      	adds	r4, #1
 8017568:	454c      	cmp	r4, r9
 801756a:	46a2      	mov	sl, r4
 801756c:	d3dc      	bcc.n	8017528 <rcutils_split+0x74>
 801756e:	4554      	cmp	r4, sl
 8017570:	d035      	beq.n	80175de <rcutils_split+0x12a>
 8017572:	eba4 040a 	sub.w	r4, r4, sl
 8017576:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017578:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801757a:	9201      	str	r2, [sp, #4]
 801757c:	1ca0      	adds	r0, r4, #2
 801757e:	4798      	blx	r3
 8017580:	9a01      	ldr	r2, [sp, #4]
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8017588:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801758c:	2800      	cmp	r0, #0
 801758e:	d035      	beq.n	80175fc <rcutils_split+0x148>
 8017590:	4a1f      	ldr	r2, [pc, #124]	@ (8017610 <rcutils_split+0x15c>)
 8017592:	eb06 030a 	add.w	r3, r6, sl
 8017596:	1c61      	adds	r1, r4, #1
 8017598:	f000 fea0 	bl	80182dc <sniprintf>
 801759c:	2000      	movs	r0, #0
 801759e:	b00b      	add	sp, #44	@ 0x2c
 80175a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175a4:	b002      	add	sp, #8
 80175a6:	4770      	bx	lr
 80175a8:	683b      	ldr	r3, [r7, #0]
 80175aa:	3b01      	subs	r3, #1
 80175ac:	2100      	movs	r1, #0
 80175ae:	603b      	str	r3, [r7, #0]
 80175b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80175b4:	e7d7      	b.n	8017566 <rcutils_split+0xb2>
 80175b6:	a802      	add	r0, sp, #8
 80175b8:	ac02      	add	r4, sp, #8
 80175ba:	f000 f82b 	bl	8017614 <rcutils_get_zero_initialized_string_array>
 80175be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80175c0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80175c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80175c6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 80175ca:	2000      	movs	r0, #0
 80175cc:	e7e7      	b.n	801759e <rcutils_split+0xea>
 80175ce:	aa14      	add	r2, sp, #80	@ 0x50
 80175d0:	2101      	movs	r1, #1
 80175d2:	4638      	mov	r0, r7
 80175d4:	f000 f82e 	bl	8017634 <rcutils_string_array_init>
 80175d8:	2800      	cmp	r0, #0
 80175da:	d1e0      	bne.n	801759e <rcutils_split+0xea>
 80175dc:	687a      	ldr	r2, [r7, #4]
 80175de:	683b      	ldr	r3, [r7, #0]
 80175e0:	3b01      	subs	r3, #1
 80175e2:	2100      	movs	r1, #0
 80175e4:	603b      	str	r3, [r7, #0]
 80175e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80175ea:	e7ee      	b.n	80175ca <rcutils_split+0x116>
 80175ec:	200b      	movs	r0, #11
 80175ee:	b00b      	add	sp, #44	@ 0x2c
 80175f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175f4:	b002      	add	sp, #8
 80175f6:	4770      	bx	lr
 80175f8:	f8c7 8000 	str.w	r8, [r7]
 80175fc:	4638      	mov	r0, r7
 80175fe:	f000 f83b 	bl	8017678 <rcutils_string_array_fini>
 8017602:	b908      	cbnz	r0, 8017608 <rcutils_split+0x154>
 8017604:	200a      	movs	r0, #10
 8017606:	e7ca      	b.n	801759e <rcutils_split+0xea>
 8017608:	f7f2 ff82 	bl	800a510 <rcutils_reset_error>
 801760c:	e7fa      	b.n	8017604 <rcutils_split+0x150>
 801760e:	bf00      	nop
 8017610:	0801a108 	.word	0x0801a108

08017614 <rcutils_get_zero_initialized_string_array>:
 8017614:	b510      	push	{r4, lr}
 8017616:	4c06      	ldr	r4, [pc, #24]	@ (8017630 <rcutils_get_zero_initialized_string_array+0x1c>)
 8017618:	4686      	mov	lr, r0
 801761a:	4684      	mov	ip, r0
 801761c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801761e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017622:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017626:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801762a:	4670      	mov	r0, lr
 801762c:	bd10      	pop	{r4, pc}
 801762e:	bf00      	nop
 8017630:	0801b248 	.word	0x0801b248

08017634 <rcutils_string_array_init>:
 8017634:	b1da      	cbz	r2, 801766e <rcutils_string_array_init+0x3a>
 8017636:	b570      	push	{r4, r5, r6, lr}
 8017638:	4605      	mov	r5, r0
 801763a:	b1d0      	cbz	r0, 8017672 <rcutils_string_array_init+0x3e>
 801763c:	460e      	mov	r6, r1
 801763e:	4614      	mov	r4, r2
 8017640:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8017644:	6001      	str	r1, [r0, #0]
 8017646:	2104      	movs	r1, #4
 8017648:	4630      	mov	r0, r6
 801764a:	4798      	blx	r3
 801764c:	6068      	str	r0, [r5, #4]
 801764e:	b150      	cbz	r0, 8017666 <rcutils_string_array_init+0x32>
 8017650:	46a4      	mov	ip, r4
 8017652:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017656:	f105 0408 	add.w	r4, r5, #8
 801765a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801765c:	f8dc 3000 	ldr.w	r3, [ip]
 8017660:	6023      	str	r3, [r4, #0]
 8017662:	2000      	movs	r0, #0
 8017664:	bd70      	pop	{r4, r5, r6, pc}
 8017666:	2e00      	cmp	r6, #0
 8017668:	d0f2      	beq.n	8017650 <rcutils_string_array_init+0x1c>
 801766a:	200a      	movs	r0, #10
 801766c:	bd70      	pop	{r4, r5, r6, pc}
 801766e:	200b      	movs	r0, #11
 8017670:	4770      	bx	lr
 8017672:	200b      	movs	r0, #11
 8017674:	bd70      	pop	{r4, r5, r6, pc}
 8017676:	bf00      	nop

08017678 <rcutils_string_array_fini>:
 8017678:	b310      	cbz	r0, 80176c0 <rcutils_string_array_fini+0x48>
 801767a:	6843      	ldr	r3, [r0, #4]
 801767c:	b570      	push	{r4, r5, r6, lr}
 801767e:	4604      	mov	r4, r0
 8017680:	b1d3      	cbz	r3, 80176b8 <rcutils_string_array_fini+0x40>
 8017682:	3008      	adds	r0, #8
 8017684:	f7f2 ff18 	bl	800a4b8 <rcutils_allocator_is_valid>
 8017688:	b1c0      	cbz	r0, 80176bc <rcutils_string_array_fini+0x44>
 801768a:	e9d4 3000 	ldrd	r3, r0, [r4]
 801768e:	b16b      	cbz	r3, 80176ac <rcutils_string_array_fini+0x34>
 8017690:	2500      	movs	r5, #0
 8017692:	462e      	mov	r6, r5
 8017694:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8017698:	68e3      	ldr	r3, [r4, #12]
 801769a:	69a1      	ldr	r1, [r4, #24]
 801769c:	4798      	blx	r3
 801769e:	e9d4 3000 	ldrd	r3, r0, [r4]
 80176a2:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80176a6:	3501      	adds	r5, #1
 80176a8:	42ab      	cmp	r3, r5
 80176aa:	d8f3      	bhi.n	8017694 <rcutils_string_array_fini+0x1c>
 80176ac:	68e3      	ldr	r3, [r4, #12]
 80176ae:	69a1      	ldr	r1, [r4, #24]
 80176b0:	4798      	blx	r3
 80176b2:	2300      	movs	r3, #0
 80176b4:	e9c4 3300 	strd	r3, r3, [r4]
 80176b8:	2000      	movs	r0, #0
 80176ba:	bd70      	pop	{r4, r5, r6, pc}
 80176bc:	200b      	movs	r0, #11
 80176be:	bd70      	pop	{r4, r5, r6, pc}
 80176c0:	200b      	movs	r0, #11
 80176c2:	4770      	bx	lr

080176c4 <rmw_discovery_options_init>:
 80176c4:	b328      	cbz	r0, 8017712 <rmw_discovery_options_init+0x4e>
 80176c6:	b570      	push	{r4, r5, r6, lr}
 80176c8:	4604      	mov	r4, r0
 80176ca:	4610      	mov	r0, r2
 80176cc:	460e      	mov	r6, r1
 80176ce:	4615      	mov	r5, r2
 80176d0:	f7f2 fef2 	bl	800a4b8 <rcutils_allocator_is_valid>
 80176d4:	b1d8      	cbz	r0, 801770e <rmw_discovery_options_init+0x4a>
 80176d6:	68a3      	ldr	r3, [r4, #8]
 80176d8:	b9cb      	cbnz	r3, 801770e <rmw_discovery_options_init+0x4a>
 80176da:	6863      	ldr	r3, [r4, #4]
 80176dc:	b9bb      	cbnz	r3, 801770e <rmw_discovery_options_init+0x4a>
 80176de:	7823      	ldrb	r3, [r4, #0]
 80176e0:	b90b      	cbnz	r3, 80176e6 <rmw_discovery_options_init+0x22>
 80176e2:	2302      	movs	r3, #2
 80176e4:	7023      	strb	r3, [r4, #0]
 80176e6:	b186      	cbz	r6, 801770a <rmw_discovery_options_init+0x46>
 80176e8:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 80176ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80176f0:	4630      	mov	r0, r6
 80176f2:	4798      	blx	r3
 80176f4:	6060      	str	r0, [r4, #4]
 80176f6:	b170      	cbz	r0, 8017716 <rmw_discovery_options_init+0x52>
 80176f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80176fa:	f104 0c0c 	add.w	ip, r4, #12
 80176fe:	60a6      	str	r6, [r4, #8]
 8017700:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017704:	682b      	ldr	r3, [r5, #0]
 8017706:	f8cc 3000 	str.w	r3, [ip]
 801770a:	2000      	movs	r0, #0
 801770c:	bd70      	pop	{r4, r5, r6, pc}
 801770e:	200b      	movs	r0, #11
 8017710:	bd70      	pop	{r4, r5, r6, pc}
 8017712:	200b      	movs	r0, #11
 8017714:	4770      	bx	lr
 8017716:	200a      	movs	r0, #10
 8017718:	bd70      	pop	{r4, r5, r6, pc}
 801771a:	bf00      	nop

0801771c <rmw_enclave_options_copy>:
 801771c:	b1e0      	cbz	r0, 8017758 <rmw_enclave_options_copy+0x3c>
 801771e:	b570      	push	{r4, r5, r6, lr}
 8017720:	4616      	mov	r6, r2
 8017722:	b082      	sub	sp, #8
 8017724:	b1aa      	cbz	r2, 8017752 <rmw_enclave_options_copy+0x36>
 8017726:	4605      	mov	r5, r0
 8017728:	4608      	mov	r0, r1
 801772a:	460c      	mov	r4, r1
 801772c:	f7f2 fec4 	bl	800a4b8 <rcutils_allocator_is_valid>
 8017730:	b178      	cbz	r0, 8017752 <rmw_enclave_options_copy+0x36>
 8017732:	f104 030c 	add.w	r3, r4, #12
 8017736:	e893 0003 	ldmia.w	r3, {r0, r1}
 801773a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801773e:	4628      	mov	r0, r5
 8017740:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017744:	f7fc fb18 	bl	8013d78 <rcutils_strdup>
 8017748:	b140      	cbz	r0, 801775c <rmw_enclave_options_copy+0x40>
 801774a:	6030      	str	r0, [r6, #0]
 801774c:	2000      	movs	r0, #0
 801774e:	b002      	add	sp, #8
 8017750:	bd70      	pop	{r4, r5, r6, pc}
 8017752:	200b      	movs	r0, #11
 8017754:	b002      	add	sp, #8
 8017756:	bd70      	pop	{r4, r5, r6, pc}
 8017758:	200b      	movs	r0, #11
 801775a:	4770      	bx	lr
 801775c:	200a      	movs	r0, #10
 801775e:	e7f6      	b.n	801774e <rmw_enclave_options_copy+0x32>

08017760 <rmw_enclave_options_fini>:
 8017760:	b170      	cbz	r0, 8017780 <rmw_enclave_options_fini+0x20>
 8017762:	b538      	push	{r3, r4, r5, lr}
 8017764:	4605      	mov	r5, r0
 8017766:	4608      	mov	r0, r1
 8017768:	460c      	mov	r4, r1
 801776a:	f7f2 fea5 	bl	800a4b8 <rcutils_allocator_is_valid>
 801776e:	b128      	cbz	r0, 801777c <rmw_enclave_options_fini+0x1c>
 8017770:	4628      	mov	r0, r5
 8017772:	6863      	ldr	r3, [r4, #4]
 8017774:	6921      	ldr	r1, [r4, #16]
 8017776:	4798      	blx	r3
 8017778:	2000      	movs	r0, #0
 801777a:	bd38      	pop	{r3, r4, r5, pc}
 801777c:	200b      	movs	r0, #11
 801777e:	bd38      	pop	{r3, r4, r5, pc}
 8017780:	200b      	movs	r0, #11
 8017782:	4770      	bx	lr

08017784 <rmw_get_default_security_options>:
 8017784:	2200      	movs	r2, #0
 8017786:	7002      	strb	r2, [r0, #0]
 8017788:	6042      	str	r2, [r0, #4]
 801778a:	4770      	bx	lr

0801778c <on_status>:
 801778c:	b082      	sub	sp, #8
 801778e:	b002      	add	sp, #8
 8017790:	4770      	bx	lr
 8017792:	bf00      	nop

08017794 <on_topic>:
 8017794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017798:	4a22      	ldr	r2, [pc, #136]	@ (8017824 <on_topic+0x90>)
 801779a:	b094      	sub	sp, #80	@ 0x50
 801779c:	6812      	ldr	r2, [r2, #0]
 801779e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80177a0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80177a4:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80177a8:	b3c2      	cbz	r2, 801781c <on_topic+0x88>
 80177aa:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80177ae:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80177b2:	e001      	b.n	80177b8 <on_topic+0x24>
 80177b4:	6852      	ldr	r2, [r2, #4]
 80177b6:	b38a      	cbz	r2, 801781c <on_topic+0x88>
 80177b8:	6894      	ldr	r4, [r2, #8]
 80177ba:	8aa3      	ldrh	r3, [r4, #20]
 80177bc:	428b      	cmp	r3, r1
 80177be:	d1f9      	bne.n	80177b4 <on_topic+0x20>
 80177c0:	7da3      	ldrb	r3, [r4, #22]
 80177c2:	4283      	cmp	r3, r0
 80177c4:	d1f6      	bne.n	80177b4 <on_topic+0x20>
 80177c6:	2248      	movs	r2, #72	@ 0x48
 80177c8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80177cc:	4668      	mov	r0, sp
 80177ce:	f000 ffd4 	bl	801877a <memcpy>
 80177d2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80177d6:	cb0c      	ldmia	r3, {r2, r3}
 80177d8:	4620      	mov	r0, r4
 80177da:	f7f3 fb27 	bl	800ae2c <rmw_uxrce_get_static_input_buffer_for_entity>
 80177de:	4607      	mov	r7, r0
 80177e0:	b1e0      	cbz	r0, 801781c <on_topic+0x88>
 80177e2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80177e6:	4632      	mov	r2, r6
 80177e8:	4628      	mov	r0, r5
 80177ea:	f108 0110 	add.w	r1, r8, #16
 80177ee:	f7f4 f8b1 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 80177f2:	b930      	cbnz	r0, 8017802 <on_topic+0x6e>
 80177f4:	480c      	ldr	r0, [pc, #48]	@ (8017828 <on_topic+0x94>)
 80177f6:	4639      	mov	r1, r7
 80177f8:	b014      	add	sp, #80	@ 0x50
 80177fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177fe:	f7fc be25 	b.w	801444c <put_memory>
 8017802:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8017806:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801780a:	f7f3 f90d 	bl	800aa28 <rmw_uros_epoch_nanos>
 801780e:	2305      	movs	r3, #5
 8017810:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017814:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017818:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801781c:	b014      	add	sp, #80	@ 0x50
 801781e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017822:	bf00      	nop
 8017824:	2000e208 	.word	0x2000e208
 8017828:	2000da58 	.word	0x2000da58

0801782c <on_request>:
 801782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017830:	4823      	ldr	r0, [pc, #140]	@ (80178c0 <on_request+0x94>)
 8017832:	b094      	sub	sp, #80	@ 0x50
 8017834:	6800      	ldr	r0, [r0, #0]
 8017836:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017838:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801783c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801783e:	2800      	cmp	r0, #0
 8017840:	d03b      	beq.n	80178ba <on_request+0x8e>
 8017842:	461d      	mov	r5, r3
 8017844:	e001      	b.n	801784a <on_request+0x1e>
 8017846:	6840      	ldr	r0, [r0, #4]
 8017848:	b3b8      	cbz	r0, 80178ba <on_request+0x8e>
 801784a:	6884      	ldr	r4, [r0, #8]
 801784c:	8b21      	ldrh	r1, [r4, #24]
 801784e:	4291      	cmp	r1, r2
 8017850:	d1f9      	bne.n	8017846 <on_request+0x1a>
 8017852:	2248      	movs	r2, #72	@ 0x48
 8017854:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017858:	4668      	mov	r0, sp
 801785a:	f000 ff8e 	bl	801877a <memcpy>
 801785e:	f104 0320 	add.w	r3, r4, #32
 8017862:	cb0c      	ldmia	r3, {r2, r3}
 8017864:	4620      	mov	r0, r4
 8017866:	f7f3 fae1 	bl	800ae2c <rmw_uxrce_get_static_input_buffer_for_entity>
 801786a:	4680      	mov	r8, r0
 801786c:	b328      	cbz	r0, 80178ba <on_request+0x8e>
 801786e:	4638      	mov	r0, r7
 8017870:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017874:	4632      	mov	r2, r6
 8017876:	f107 0110 	add.w	r1, r7, #16
 801787a:	f7f4 f86b 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 801787e:	b930      	cbnz	r0, 801788e <on_request+0x62>
 8017880:	4810      	ldr	r0, [pc, #64]	@ (80178c4 <on_request+0x98>)
 8017882:	4641      	mov	r1, r8
 8017884:	b014      	add	sp, #80	@ 0x50
 8017886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801788a:	f7fc bddf 	b.w	801444c <put_memory>
 801788e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017890:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017894:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017898:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801789c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80178a4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80178a8:	f7f3 f8be 	bl	800aa28 <rmw_uros_epoch_nanos>
 80178ac:	2303      	movs	r3, #3
 80178ae:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80178b2:	e942 0102 	strd	r0, r1, [r2, #-8]
 80178b6:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80178ba:	b014      	add	sp, #80	@ 0x50
 80178bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178c0:	2000ddc0 	.word	0x2000ddc0
 80178c4:	2000da58 	.word	0x2000da58

080178c8 <on_reply>:
 80178c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178cc:	4821      	ldr	r0, [pc, #132]	@ (8017954 <on_reply+0x8c>)
 80178ce:	b094      	sub	sp, #80	@ 0x50
 80178d0:	6800      	ldr	r0, [r0, #0]
 80178d2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80178d4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80178d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80178da:	b3b8      	cbz	r0, 801794c <on_reply+0x84>
 80178dc:	461d      	mov	r5, r3
 80178de:	e001      	b.n	80178e4 <on_reply+0x1c>
 80178e0:	6840      	ldr	r0, [r0, #4]
 80178e2:	b398      	cbz	r0, 801794c <on_reply+0x84>
 80178e4:	6884      	ldr	r4, [r0, #8]
 80178e6:	8b21      	ldrh	r1, [r4, #24]
 80178e8:	4291      	cmp	r1, r2
 80178ea:	d1f9      	bne.n	80178e0 <on_reply+0x18>
 80178ec:	2248      	movs	r2, #72	@ 0x48
 80178ee:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80178f2:	4668      	mov	r0, sp
 80178f4:	f000 ff41 	bl	801877a <memcpy>
 80178f8:	f104 0320 	add.w	r3, r4, #32
 80178fc:	cb0c      	ldmia	r3, {r2, r3}
 80178fe:	4620      	mov	r0, r4
 8017900:	f7f3 fa94 	bl	800ae2c <rmw_uxrce_get_static_input_buffer_for_entity>
 8017904:	4680      	mov	r8, r0
 8017906:	b308      	cbz	r0, 801794c <on_reply+0x84>
 8017908:	4638      	mov	r0, r7
 801790a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801790e:	4632      	mov	r2, r6
 8017910:	f107 0110 	add.w	r1, r7, #16
 8017914:	f7f4 f81e 	bl	800b954 <ucdr_deserialize_array_uint8_t>
 8017918:	b930      	cbnz	r0, 8017928 <on_reply+0x60>
 801791a:	480f      	ldr	r0, [pc, #60]	@ (8017958 <on_reply+0x90>)
 801791c:	4641      	mov	r1, r8
 801791e:	b014      	add	sp, #80	@ 0x50
 8017920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017924:	f7fc bd92 	b.w	801444c <put_memory>
 8017928:	2200      	movs	r2, #0
 801792a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801792e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017932:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017936:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801793a:	f7f3 f875 	bl	800aa28 <rmw_uros_epoch_nanos>
 801793e:	2304      	movs	r3, #4
 8017940:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017944:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017948:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801794c:	b014      	add	sp, #80	@ 0x50
 801794e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017952:	bf00      	nop
 8017954:	2000dce8 	.word	0x2000dce8
 8017958:	2000da58 	.word	0x2000da58

0801795c <rmw_create_guard_condition>:
 801795c:	b538      	push	{r3, r4, r5, lr}
 801795e:	4605      	mov	r5, r0
 8017960:	4807      	ldr	r0, [pc, #28]	@ (8017980 <rmw_create_guard_condition+0x24>)
 8017962:	f7fc fd63 	bl	801442c <get_memory>
 8017966:	b148      	cbz	r0, 801797c <rmw_create_guard_condition+0x20>
 8017968:	6884      	ldr	r4, [r0, #8]
 801796a:	2300      	movs	r3, #0
 801796c:	7423      	strb	r3, [r4, #16]
 801796e:	61e5      	str	r5, [r4, #28]
 8017970:	f7fc fde2 	bl	8014538 <rmw_get_implementation_identifier>
 8017974:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017978:	f104 0014 	add.w	r0, r4, #20
 801797c:	bd38      	pop	{r3, r4, r5, pc}
 801797e:	bf00      	nop
 8017980:	2000b834 	.word	0x2000b834

08017984 <rmw_destroy_guard_condition>:
 8017984:	b508      	push	{r3, lr}
 8017986:	4b08      	ldr	r3, [pc, #32]	@ (80179a8 <rmw_destroy_guard_condition+0x24>)
 8017988:	6819      	ldr	r1, [r3, #0]
 801798a:	b911      	cbnz	r1, 8017992 <rmw_destroy_guard_condition+0xe>
 801798c:	e00a      	b.n	80179a4 <rmw_destroy_guard_condition+0x20>
 801798e:	6849      	ldr	r1, [r1, #4]
 8017990:	b141      	cbz	r1, 80179a4 <rmw_destroy_guard_condition+0x20>
 8017992:	688b      	ldr	r3, [r1, #8]
 8017994:	3314      	adds	r3, #20
 8017996:	4298      	cmp	r0, r3
 8017998:	d1f9      	bne.n	801798e <rmw_destroy_guard_condition+0xa>
 801799a:	4803      	ldr	r0, [pc, #12]	@ (80179a8 <rmw_destroy_guard_condition+0x24>)
 801799c:	f7fc fd56 	bl	801444c <put_memory>
 80179a0:	2000      	movs	r0, #0
 80179a2:	bd08      	pop	{r3, pc}
 80179a4:	2001      	movs	r0, #1
 80179a6:	bd08      	pop	{r3, pc}
 80179a8:	2000b834 	.word	0x2000b834

080179ac <rmw_trigger_guard_condition>:
 80179ac:	b160      	cbz	r0, 80179c8 <rmw_trigger_guard_condition+0x1c>
 80179ae:	b510      	push	{r4, lr}
 80179b0:	4604      	mov	r4, r0
 80179b2:	6800      	ldr	r0, [r0, #0]
 80179b4:	f7f3 fbbc 	bl	800b130 <is_uxrce_rmw_identifier_valid>
 80179b8:	b908      	cbnz	r0, 80179be <rmw_trigger_guard_condition+0x12>
 80179ba:	2001      	movs	r0, #1
 80179bc:	bd10      	pop	{r4, pc}
 80179be:	6863      	ldr	r3, [r4, #4]
 80179c0:	2201      	movs	r2, #1
 80179c2:	741a      	strb	r2, [r3, #16]
 80179c4:	2000      	movs	r0, #0
 80179c6:	bd10      	pop	{r4, pc}
 80179c8:	2001      	movs	r0, #1
 80179ca:	4770      	bx	lr

080179cc <geometry_msgs__msg__Pose__init>:
 80179cc:	b1d8      	cbz	r0, 8017a06 <geometry_msgs__msg__Pose__init+0x3a>
 80179ce:	b538      	push	{r3, r4, r5, lr}
 80179d0:	4604      	mov	r4, r0
 80179d2:	f000 f913 	bl	8017bfc <geometry_msgs__msg__Point__init>
 80179d6:	b130      	cbz	r0, 80179e6 <geometry_msgs__msg__Pose__init+0x1a>
 80179d8:	f104 0518 	add.w	r5, r4, #24
 80179dc:	4628      	mov	r0, r5
 80179de:	f000 f823 	bl	8017a28 <geometry_msgs__msg__Quaternion__init>
 80179e2:	b148      	cbz	r0, 80179f8 <geometry_msgs__msg__Pose__init+0x2c>
 80179e4:	bd38      	pop	{r3, r4, r5, pc}
 80179e6:	4620      	mov	r0, r4
 80179e8:	f000 f90c 	bl	8017c04 <geometry_msgs__msg__Point__fini>
 80179ec:	f104 0018 	add.w	r0, r4, #24
 80179f0:	f000 f82e 	bl	8017a50 <geometry_msgs__msg__Quaternion__fini>
 80179f4:	2000      	movs	r0, #0
 80179f6:	bd38      	pop	{r3, r4, r5, pc}
 80179f8:	4620      	mov	r0, r4
 80179fa:	f000 f903 	bl	8017c04 <geometry_msgs__msg__Point__fini>
 80179fe:	4628      	mov	r0, r5
 8017a00:	f000 f826 	bl	8017a50 <geometry_msgs__msg__Quaternion__fini>
 8017a04:	e7f6      	b.n	80179f4 <geometry_msgs__msg__Pose__init+0x28>
 8017a06:	2000      	movs	r0, #0
 8017a08:	4770      	bx	lr
 8017a0a:	bf00      	nop

08017a0c <geometry_msgs__msg__Pose__fini>:
 8017a0c:	b148      	cbz	r0, 8017a22 <geometry_msgs__msg__Pose__fini+0x16>
 8017a0e:	b510      	push	{r4, lr}
 8017a10:	4604      	mov	r4, r0
 8017a12:	f000 f8f7 	bl	8017c04 <geometry_msgs__msg__Point__fini>
 8017a16:	f104 0018 	add.w	r0, r4, #24
 8017a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a1e:	f000 b817 	b.w	8017a50 <geometry_msgs__msg__Quaternion__fini>
 8017a22:	4770      	bx	lr
 8017a24:	0000      	movs	r0, r0
	...

08017a28 <geometry_msgs__msg__Quaternion__init>:
 8017a28:	b160      	cbz	r0, 8017a44 <geometry_msgs__msg__Quaternion__init+0x1c>
 8017a2a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8017a48 <geometry_msgs__msg__Quaternion__init+0x20>
 8017a2e:	2200      	movs	r2, #0
 8017a30:	2300      	movs	r3, #0
 8017a32:	e9c0 2300 	strd	r2, r3, [r0]
 8017a36:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017a3a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017a3e:	ed80 7b06 	vstr	d7, [r0, #24]
 8017a42:	2001      	movs	r0, #1
 8017a44:	4770      	bx	lr
 8017a46:	bf00      	nop
 8017a48:	00000000 	.word	0x00000000
 8017a4c:	3ff00000 	.word	0x3ff00000

08017a50 <geometry_msgs__msg__Quaternion__fini>:
 8017a50:	4770      	bx	lr
 8017a52:	bf00      	nop

08017a54 <geometry_msgs__msg__Twist__init>:
 8017a54:	b1d8      	cbz	r0, 8017a8e <geometry_msgs__msg__Twist__init+0x3a>
 8017a56:	b538      	push	{r3, r4, r5, lr}
 8017a58:	4604      	mov	r4, r0
 8017a5a:	f000 f827 	bl	8017aac <geometry_msgs__msg__Vector3__init>
 8017a5e:	b130      	cbz	r0, 8017a6e <geometry_msgs__msg__Twist__init+0x1a>
 8017a60:	f104 0518 	add.w	r5, r4, #24
 8017a64:	4628      	mov	r0, r5
 8017a66:	f000 f821 	bl	8017aac <geometry_msgs__msg__Vector3__init>
 8017a6a:	b148      	cbz	r0, 8017a80 <geometry_msgs__msg__Twist__init+0x2c>
 8017a6c:	bd38      	pop	{r3, r4, r5, pc}
 8017a6e:	4620      	mov	r0, r4
 8017a70:	f000 f820 	bl	8017ab4 <geometry_msgs__msg__Vector3__fini>
 8017a74:	f104 0018 	add.w	r0, r4, #24
 8017a78:	f000 f81c 	bl	8017ab4 <geometry_msgs__msg__Vector3__fini>
 8017a7c:	2000      	movs	r0, #0
 8017a7e:	bd38      	pop	{r3, r4, r5, pc}
 8017a80:	4620      	mov	r0, r4
 8017a82:	f000 f817 	bl	8017ab4 <geometry_msgs__msg__Vector3__fini>
 8017a86:	4628      	mov	r0, r5
 8017a88:	f000 f814 	bl	8017ab4 <geometry_msgs__msg__Vector3__fini>
 8017a8c:	e7f6      	b.n	8017a7c <geometry_msgs__msg__Twist__init+0x28>
 8017a8e:	2000      	movs	r0, #0
 8017a90:	4770      	bx	lr
 8017a92:	bf00      	nop

08017a94 <geometry_msgs__msg__Twist__fini>:
 8017a94:	b148      	cbz	r0, 8017aaa <geometry_msgs__msg__Twist__fini+0x16>
 8017a96:	b510      	push	{r4, lr}
 8017a98:	4604      	mov	r4, r0
 8017a9a:	f000 f80b 	bl	8017ab4 <geometry_msgs__msg__Vector3__fini>
 8017a9e:	f104 0018 	add.w	r0, r4, #24
 8017aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017aa6:	f000 b805 	b.w	8017ab4 <geometry_msgs__msg__Vector3__fini>
 8017aaa:	4770      	bx	lr

08017aac <geometry_msgs__msg__Vector3__init>:
 8017aac:	3800      	subs	r0, #0
 8017aae:	bf18      	it	ne
 8017ab0:	2001      	movne	r0, #1
 8017ab2:	4770      	bx	lr

08017ab4 <geometry_msgs__msg__Vector3__fini>:
 8017ab4:	4770      	bx	lr
 8017ab6:	bf00      	nop

08017ab8 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 8017ab8:	f000 b8a0 	b.w	8017bfc <geometry_msgs__msg__Point__init>

08017abc <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 8017abc:	f000 b8a2 	b.w	8017c04 <geometry_msgs__msg__Point__fini>

08017ac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8017ac0:	4b04      	ldr	r3, [pc, #16]	@ (8017ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8017ac2:	681a      	ldr	r2, [r3, #0]
 8017ac4:	b10a      	cbz	r2, 8017aca <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 8017ac6:	4803      	ldr	r0, [pc, #12]	@ (8017ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8017ac8:	4770      	bx	lr
 8017aca:	4a03      	ldr	r2, [pc, #12]	@ (8017ad8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 8017acc:	4801      	ldr	r0, [pc, #4]	@ (8017ad4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8017ace:	6812      	ldr	r2, [r2, #0]
 8017ad0:	601a      	str	r2, [r3, #0]
 8017ad2:	4770      	bx	lr
 8017ad4:	200021a4 	.word	0x200021a4
 8017ad8:	20000188 	.word	0x20000188

08017adc <get_serialized_size_geometry_msgs__msg__Point>:
 8017adc:	b1b8      	cbz	r0, 8017b0e <get_serialized_size_geometry_msgs__msg__Point+0x32>
 8017ade:	b570      	push	{r4, r5, r6, lr}
 8017ae0:	460d      	mov	r5, r1
 8017ae2:	4628      	mov	r0, r5
 8017ae4:	2108      	movs	r1, #8
 8017ae6:	f7f5 fb35 	bl	800d154 <ucdr_alignment>
 8017aea:	2108      	movs	r1, #8
 8017aec:	186e      	adds	r6, r5, r1
 8017aee:	4406      	add	r6, r0
 8017af0:	4630      	mov	r0, r6
 8017af2:	f7f5 fb2f 	bl	800d154 <ucdr_alignment>
 8017af6:	f100 0408 	add.w	r4, r0, #8
 8017afa:	4434      	add	r4, r6
 8017afc:	2108      	movs	r1, #8
 8017afe:	4620      	mov	r0, r4
 8017b00:	f7f5 fb28 	bl	800d154 <ucdr_alignment>
 8017b04:	f1c5 0508 	rsb	r5, r5, #8
 8017b08:	4405      	add	r5, r0
 8017b0a:	1928      	adds	r0, r5, r4
 8017b0c:	bd70      	pop	{r4, r5, r6, pc}
 8017b0e:	4770      	bx	lr

08017b10 <_Point__cdr_deserialize>:
 8017b10:	b538      	push	{r3, r4, r5, lr}
 8017b12:	460c      	mov	r4, r1
 8017b14:	b171      	cbz	r1, 8017b34 <_Point__cdr_deserialize+0x24>
 8017b16:	4605      	mov	r5, r0
 8017b18:	f7f5 f93e 	bl	800cd98 <ucdr_deserialize_double>
 8017b1c:	f104 0108 	add.w	r1, r4, #8
 8017b20:	4628      	mov	r0, r5
 8017b22:	f7f5 f939 	bl	800cd98 <ucdr_deserialize_double>
 8017b26:	f104 0110 	add.w	r1, r4, #16
 8017b2a:	4628      	mov	r0, r5
 8017b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b30:	f7f5 b932 	b.w	800cd98 <ucdr_deserialize_double>
 8017b34:	4608      	mov	r0, r1
 8017b36:	bd38      	pop	{r3, r4, r5, pc}

08017b38 <_Point__cdr_serialize>:
 8017b38:	b198      	cbz	r0, 8017b62 <_Point__cdr_serialize+0x2a>
 8017b3a:	b538      	push	{r3, r4, r5, lr}
 8017b3c:	ed90 0b00 	vldr	d0, [r0]
 8017b40:	460d      	mov	r5, r1
 8017b42:	4604      	mov	r4, r0
 8017b44:	4608      	mov	r0, r1
 8017b46:	f7f4 ff97 	bl	800ca78 <ucdr_serialize_double>
 8017b4a:	ed94 0b02 	vldr	d0, [r4, #8]
 8017b4e:	4628      	mov	r0, r5
 8017b50:	f7f4 ff92 	bl	800ca78 <ucdr_serialize_double>
 8017b54:	ed94 0b04 	vldr	d0, [r4, #16]
 8017b58:	4628      	mov	r0, r5
 8017b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b5e:	f7f4 bf8b 	b.w	800ca78 <ucdr_serialize_double>
 8017b62:	4770      	bx	lr

08017b64 <_Point__get_serialized_size>:
 8017b64:	b1a0      	cbz	r0, 8017b90 <_Point__get_serialized_size+0x2c>
 8017b66:	b538      	push	{r3, r4, r5, lr}
 8017b68:	2108      	movs	r1, #8
 8017b6a:	2000      	movs	r0, #0
 8017b6c:	f7f5 faf2 	bl	800d154 <ucdr_alignment>
 8017b70:	f100 0508 	add.w	r5, r0, #8
 8017b74:	2108      	movs	r1, #8
 8017b76:	4628      	mov	r0, r5
 8017b78:	f7f5 faec 	bl	800d154 <ucdr_alignment>
 8017b7c:	f100 0408 	add.w	r4, r0, #8
 8017b80:	442c      	add	r4, r5
 8017b82:	2108      	movs	r1, #8
 8017b84:	4620      	mov	r0, r4
 8017b86:	f7f5 fae5 	bl	800d154 <ucdr_alignment>
 8017b8a:	3008      	adds	r0, #8
 8017b8c:	4420      	add	r0, r4
 8017b8e:	bd38      	pop	{r3, r4, r5, pc}
 8017b90:	4770      	bx	lr
 8017b92:	bf00      	nop

08017b94 <_Point__max_serialized_size>:
 8017b94:	b538      	push	{r3, r4, r5, lr}
 8017b96:	2108      	movs	r1, #8
 8017b98:	2000      	movs	r0, #0
 8017b9a:	f7f5 fadb 	bl	800d154 <ucdr_alignment>
 8017b9e:	f100 0508 	add.w	r5, r0, #8
 8017ba2:	2108      	movs	r1, #8
 8017ba4:	4628      	mov	r0, r5
 8017ba6:	f7f5 fad5 	bl	800d154 <ucdr_alignment>
 8017baa:	f100 0408 	add.w	r4, r0, #8
 8017bae:	442c      	add	r4, r5
 8017bb0:	2108      	movs	r1, #8
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	f7f5 face 	bl	800d154 <ucdr_alignment>
 8017bb8:	3008      	adds	r0, #8
 8017bba:	4420      	add	r0, r4
 8017bbc:	bd38      	pop	{r3, r4, r5, pc}
 8017bbe:	bf00      	nop

08017bc0 <max_serialized_size_geometry_msgs__msg__Point>:
 8017bc0:	b570      	push	{r4, r5, r6, lr}
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	460c      	mov	r4, r1
 8017bc6:	7003      	strb	r3, [r0, #0]
 8017bc8:	2108      	movs	r1, #8
 8017bca:	4620      	mov	r0, r4
 8017bcc:	f7f5 fac2 	bl	800d154 <ucdr_alignment>
 8017bd0:	2108      	movs	r1, #8
 8017bd2:	1863      	adds	r3, r4, r1
 8017bd4:	18c6      	adds	r6, r0, r3
 8017bd6:	4630      	mov	r0, r6
 8017bd8:	f7f5 fabc 	bl	800d154 <ucdr_alignment>
 8017bdc:	f100 0508 	add.w	r5, r0, #8
 8017be0:	4435      	add	r5, r6
 8017be2:	2108      	movs	r1, #8
 8017be4:	4628      	mov	r0, r5
 8017be6:	f7f5 fab5 	bl	800d154 <ucdr_alignment>
 8017bea:	f1c4 0408 	rsb	r4, r4, #8
 8017bee:	4420      	add	r0, r4
 8017bf0:	4428      	add	r0, r5
 8017bf2:	bd70      	pop	{r4, r5, r6, pc}

08017bf4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8017bf4:	4800      	ldr	r0, [pc, #0]	@ (8017bf8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 8017bf6:	4770      	bx	lr
 8017bf8:	20002270 	.word	0x20002270

08017bfc <geometry_msgs__msg__Point__init>:
 8017bfc:	3800      	subs	r0, #0
 8017bfe:	bf18      	it	ne
 8017c00:	2001      	movne	r0, #1
 8017c02:	4770      	bx	lr

08017c04 <geometry_msgs__msg__Point__fini>:
 8017c04:	4770      	bx	lr
 8017c06:	bf00      	nop

08017c08 <calloc>:
 8017c08:	4b02      	ldr	r3, [pc, #8]	@ (8017c14 <calloc+0xc>)
 8017c0a:	460a      	mov	r2, r1
 8017c0c:	4601      	mov	r1, r0
 8017c0e:	6818      	ldr	r0, [r3, #0]
 8017c10:	f000 b802 	b.w	8017c18 <_calloc_r>
 8017c14:	200022b0 	.word	0x200022b0

08017c18 <_calloc_r>:
 8017c18:	b570      	push	{r4, r5, r6, lr}
 8017c1a:	fba1 5402 	umull	r5, r4, r1, r2
 8017c1e:	b934      	cbnz	r4, 8017c2e <_calloc_r+0x16>
 8017c20:	4629      	mov	r1, r5
 8017c22:	f000 f899 	bl	8017d58 <_malloc_r>
 8017c26:	4606      	mov	r6, r0
 8017c28:	b928      	cbnz	r0, 8017c36 <_calloc_r+0x1e>
 8017c2a:	4630      	mov	r0, r6
 8017c2c:	bd70      	pop	{r4, r5, r6, pc}
 8017c2e:	220c      	movs	r2, #12
 8017c30:	6002      	str	r2, [r0, #0]
 8017c32:	2600      	movs	r6, #0
 8017c34:	e7f9      	b.n	8017c2a <_calloc_r+0x12>
 8017c36:	462a      	mov	r2, r5
 8017c38:	4621      	mov	r1, r4
 8017c3a:	f000 fcc3 	bl	80185c4 <memset>
 8017c3e:	e7f4      	b.n	8017c2a <_calloc_r+0x12>

08017c40 <exit>:
 8017c40:	b508      	push	{r3, lr}
 8017c42:	4b06      	ldr	r3, [pc, #24]	@ (8017c5c <exit+0x1c>)
 8017c44:	4604      	mov	r4, r0
 8017c46:	b113      	cbz	r3, 8017c4e <exit+0xe>
 8017c48:	2100      	movs	r1, #0
 8017c4a:	f3af 8000 	nop.w
 8017c4e:	4b04      	ldr	r3, [pc, #16]	@ (8017c60 <exit+0x20>)
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	b103      	cbz	r3, 8017c56 <exit+0x16>
 8017c54:	4798      	blx	r3
 8017c56:	4620      	mov	r0, r4
 8017c58:	f7ea ffa1 	bl	8002b9e <_exit>
 8017c5c:	00000000 	.word	0x00000000
 8017c60:	2001075c 	.word	0x2001075c

08017c64 <getenv>:
 8017c64:	b507      	push	{r0, r1, r2, lr}
 8017c66:	4b04      	ldr	r3, [pc, #16]	@ (8017c78 <getenv+0x14>)
 8017c68:	4601      	mov	r1, r0
 8017c6a:	aa01      	add	r2, sp, #4
 8017c6c:	6818      	ldr	r0, [r3, #0]
 8017c6e:	f000 f805 	bl	8017c7c <_findenv_r>
 8017c72:	b003      	add	sp, #12
 8017c74:	f85d fb04 	ldr.w	pc, [sp], #4
 8017c78:	200022b0 	.word	0x200022b0

08017c7c <_findenv_r>:
 8017c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c80:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017cf0 <_findenv_r+0x74>
 8017c84:	4606      	mov	r6, r0
 8017c86:	4689      	mov	r9, r1
 8017c88:	4617      	mov	r7, r2
 8017c8a:	f000 fda3 	bl	80187d4 <__env_lock>
 8017c8e:	f8da 4000 	ldr.w	r4, [sl]
 8017c92:	b134      	cbz	r4, 8017ca2 <_findenv_r+0x26>
 8017c94:	464b      	mov	r3, r9
 8017c96:	4698      	mov	r8, r3
 8017c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c9c:	b13a      	cbz	r2, 8017cae <_findenv_r+0x32>
 8017c9e:	2a3d      	cmp	r2, #61	@ 0x3d
 8017ca0:	d1f9      	bne.n	8017c96 <_findenv_r+0x1a>
 8017ca2:	4630      	mov	r0, r6
 8017ca4:	f000 fd9c 	bl	80187e0 <__env_unlock>
 8017ca8:	2000      	movs	r0, #0
 8017caa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cae:	eba8 0809 	sub.w	r8, r8, r9
 8017cb2:	46a3      	mov	fp, r4
 8017cb4:	f854 0b04 	ldr.w	r0, [r4], #4
 8017cb8:	2800      	cmp	r0, #0
 8017cba:	d0f2      	beq.n	8017ca2 <_findenv_r+0x26>
 8017cbc:	4642      	mov	r2, r8
 8017cbe:	4649      	mov	r1, r9
 8017cc0:	f000 fc95 	bl	80185ee <strncmp>
 8017cc4:	2800      	cmp	r0, #0
 8017cc6:	d1f4      	bne.n	8017cb2 <_findenv_r+0x36>
 8017cc8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017ccc:	eb03 0508 	add.w	r5, r3, r8
 8017cd0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017cd4:	2b3d      	cmp	r3, #61	@ 0x3d
 8017cd6:	d1ec      	bne.n	8017cb2 <_findenv_r+0x36>
 8017cd8:	f8da 3000 	ldr.w	r3, [sl]
 8017cdc:	ebab 0303 	sub.w	r3, fp, r3
 8017ce0:	109b      	asrs	r3, r3, #2
 8017ce2:	4630      	mov	r0, r6
 8017ce4:	603b      	str	r3, [r7, #0]
 8017ce6:	f000 fd7b 	bl	80187e0 <__env_unlock>
 8017cea:	1c68      	adds	r0, r5, #1
 8017cec:	e7dd      	b.n	8017caa <_findenv_r+0x2e>
 8017cee:	bf00      	nop
 8017cf0:	20000000 	.word	0x20000000

08017cf4 <malloc>:
 8017cf4:	4b02      	ldr	r3, [pc, #8]	@ (8017d00 <malloc+0xc>)
 8017cf6:	4601      	mov	r1, r0
 8017cf8:	6818      	ldr	r0, [r3, #0]
 8017cfa:	f000 b82d 	b.w	8017d58 <_malloc_r>
 8017cfe:	bf00      	nop
 8017d00:	200022b0 	.word	0x200022b0

08017d04 <free>:
 8017d04:	4b02      	ldr	r3, [pc, #8]	@ (8017d10 <free+0xc>)
 8017d06:	4601      	mov	r1, r0
 8017d08:	6818      	ldr	r0, [r3, #0]
 8017d0a:	f000 bd6f 	b.w	80187ec <_free_r>
 8017d0e:	bf00      	nop
 8017d10:	200022b0 	.word	0x200022b0

08017d14 <sbrk_aligned>:
 8017d14:	b570      	push	{r4, r5, r6, lr}
 8017d16:	4e0f      	ldr	r6, [pc, #60]	@ (8017d54 <sbrk_aligned+0x40>)
 8017d18:	460c      	mov	r4, r1
 8017d1a:	6831      	ldr	r1, [r6, #0]
 8017d1c:	4605      	mov	r5, r0
 8017d1e:	b911      	cbnz	r1, 8017d26 <sbrk_aligned+0x12>
 8017d20:	f000 fcd4 	bl	80186cc <_sbrk_r>
 8017d24:	6030      	str	r0, [r6, #0]
 8017d26:	4621      	mov	r1, r4
 8017d28:	4628      	mov	r0, r5
 8017d2a:	f000 fccf 	bl	80186cc <_sbrk_r>
 8017d2e:	1c43      	adds	r3, r0, #1
 8017d30:	d103      	bne.n	8017d3a <sbrk_aligned+0x26>
 8017d32:	f04f 34ff 	mov.w	r4, #4294967295
 8017d36:	4620      	mov	r0, r4
 8017d38:	bd70      	pop	{r4, r5, r6, pc}
 8017d3a:	1cc4      	adds	r4, r0, #3
 8017d3c:	f024 0403 	bic.w	r4, r4, #3
 8017d40:	42a0      	cmp	r0, r4
 8017d42:	d0f8      	beq.n	8017d36 <sbrk_aligned+0x22>
 8017d44:	1a21      	subs	r1, r4, r0
 8017d46:	4628      	mov	r0, r5
 8017d48:	f000 fcc0 	bl	80186cc <_sbrk_r>
 8017d4c:	3001      	adds	r0, #1
 8017d4e:	d1f2      	bne.n	8017d36 <sbrk_aligned+0x22>
 8017d50:	e7ef      	b.n	8017d32 <sbrk_aligned+0x1e>
 8017d52:	bf00      	nop
 8017d54:	2001061c 	.word	0x2001061c

08017d58 <_malloc_r>:
 8017d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d5c:	1ccd      	adds	r5, r1, #3
 8017d5e:	f025 0503 	bic.w	r5, r5, #3
 8017d62:	3508      	adds	r5, #8
 8017d64:	2d0c      	cmp	r5, #12
 8017d66:	bf38      	it	cc
 8017d68:	250c      	movcc	r5, #12
 8017d6a:	2d00      	cmp	r5, #0
 8017d6c:	4606      	mov	r6, r0
 8017d6e:	db01      	blt.n	8017d74 <_malloc_r+0x1c>
 8017d70:	42a9      	cmp	r1, r5
 8017d72:	d904      	bls.n	8017d7e <_malloc_r+0x26>
 8017d74:	230c      	movs	r3, #12
 8017d76:	6033      	str	r3, [r6, #0]
 8017d78:	2000      	movs	r0, #0
 8017d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017e54 <_malloc_r+0xfc>
 8017d82:	f000 f869 	bl	8017e58 <__malloc_lock>
 8017d86:	f8d8 3000 	ldr.w	r3, [r8]
 8017d8a:	461c      	mov	r4, r3
 8017d8c:	bb44      	cbnz	r4, 8017de0 <_malloc_r+0x88>
 8017d8e:	4629      	mov	r1, r5
 8017d90:	4630      	mov	r0, r6
 8017d92:	f7ff ffbf 	bl	8017d14 <sbrk_aligned>
 8017d96:	1c43      	adds	r3, r0, #1
 8017d98:	4604      	mov	r4, r0
 8017d9a:	d158      	bne.n	8017e4e <_malloc_r+0xf6>
 8017d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8017da0:	4627      	mov	r7, r4
 8017da2:	2f00      	cmp	r7, #0
 8017da4:	d143      	bne.n	8017e2e <_malloc_r+0xd6>
 8017da6:	2c00      	cmp	r4, #0
 8017da8:	d04b      	beq.n	8017e42 <_malloc_r+0xea>
 8017daa:	6823      	ldr	r3, [r4, #0]
 8017dac:	4639      	mov	r1, r7
 8017dae:	4630      	mov	r0, r6
 8017db0:	eb04 0903 	add.w	r9, r4, r3
 8017db4:	f000 fc8a 	bl	80186cc <_sbrk_r>
 8017db8:	4581      	cmp	r9, r0
 8017dba:	d142      	bne.n	8017e42 <_malloc_r+0xea>
 8017dbc:	6821      	ldr	r1, [r4, #0]
 8017dbe:	1a6d      	subs	r5, r5, r1
 8017dc0:	4629      	mov	r1, r5
 8017dc2:	4630      	mov	r0, r6
 8017dc4:	f7ff ffa6 	bl	8017d14 <sbrk_aligned>
 8017dc8:	3001      	adds	r0, #1
 8017dca:	d03a      	beq.n	8017e42 <_malloc_r+0xea>
 8017dcc:	6823      	ldr	r3, [r4, #0]
 8017dce:	442b      	add	r3, r5
 8017dd0:	6023      	str	r3, [r4, #0]
 8017dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8017dd6:	685a      	ldr	r2, [r3, #4]
 8017dd8:	bb62      	cbnz	r2, 8017e34 <_malloc_r+0xdc>
 8017dda:	f8c8 7000 	str.w	r7, [r8]
 8017dde:	e00f      	b.n	8017e00 <_malloc_r+0xa8>
 8017de0:	6822      	ldr	r2, [r4, #0]
 8017de2:	1b52      	subs	r2, r2, r5
 8017de4:	d420      	bmi.n	8017e28 <_malloc_r+0xd0>
 8017de6:	2a0b      	cmp	r2, #11
 8017de8:	d917      	bls.n	8017e1a <_malloc_r+0xc2>
 8017dea:	1961      	adds	r1, r4, r5
 8017dec:	42a3      	cmp	r3, r4
 8017dee:	6025      	str	r5, [r4, #0]
 8017df0:	bf18      	it	ne
 8017df2:	6059      	strne	r1, [r3, #4]
 8017df4:	6863      	ldr	r3, [r4, #4]
 8017df6:	bf08      	it	eq
 8017df8:	f8c8 1000 	streq.w	r1, [r8]
 8017dfc:	5162      	str	r2, [r4, r5]
 8017dfe:	604b      	str	r3, [r1, #4]
 8017e00:	4630      	mov	r0, r6
 8017e02:	f000 f82f 	bl	8017e64 <__malloc_unlock>
 8017e06:	f104 000b 	add.w	r0, r4, #11
 8017e0a:	1d23      	adds	r3, r4, #4
 8017e0c:	f020 0007 	bic.w	r0, r0, #7
 8017e10:	1ac2      	subs	r2, r0, r3
 8017e12:	bf1c      	itt	ne
 8017e14:	1a1b      	subne	r3, r3, r0
 8017e16:	50a3      	strne	r3, [r4, r2]
 8017e18:	e7af      	b.n	8017d7a <_malloc_r+0x22>
 8017e1a:	6862      	ldr	r2, [r4, #4]
 8017e1c:	42a3      	cmp	r3, r4
 8017e1e:	bf0c      	ite	eq
 8017e20:	f8c8 2000 	streq.w	r2, [r8]
 8017e24:	605a      	strne	r2, [r3, #4]
 8017e26:	e7eb      	b.n	8017e00 <_malloc_r+0xa8>
 8017e28:	4623      	mov	r3, r4
 8017e2a:	6864      	ldr	r4, [r4, #4]
 8017e2c:	e7ae      	b.n	8017d8c <_malloc_r+0x34>
 8017e2e:	463c      	mov	r4, r7
 8017e30:	687f      	ldr	r7, [r7, #4]
 8017e32:	e7b6      	b.n	8017da2 <_malloc_r+0x4a>
 8017e34:	461a      	mov	r2, r3
 8017e36:	685b      	ldr	r3, [r3, #4]
 8017e38:	42a3      	cmp	r3, r4
 8017e3a:	d1fb      	bne.n	8017e34 <_malloc_r+0xdc>
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	6053      	str	r3, [r2, #4]
 8017e40:	e7de      	b.n	8017e00 <_malloc_r+0xa8>
 8017e42:	230c      	movs	r3, #12
 8017e44:	6033      	str	r3, [r6, #0]
 8017e46:	4630      	mov	r0, r6
 8017e48:	f000 f80c 	bl	8017e64 <__malloc_unlock>
 8017e4c:	e794      	b.n	8017d78 <_malloc_r+0x20>
 8017e4e:	6005      	str	r5, [r0, #0]
 8017e50:	e7d6      	b.n	8017e00 <_malloc_r+0xa8>
 8017e52:	bf00      	nop
 8017e54:	20010620 	.word	0x20010620

08017e58 <__malloc_lock>:
 8017e58:	4801      	ldr	r0, [pc, #4]	@ (8017e60 <__malloc_lock+0x8>)
 8017e5a:	f000 bc84 	b.w	8018766 <__retarget_lock_acquire_recursive>
 8017e5e:	bf00      	nop
 8017e60:	20010765 	.word	0x20010765

08017e64 <__malloc_unlock>:
 8017e64:	4801      	ldr	r0, [pc, #4]	@ (8017e6c <__malloc_unlock+0x8>)
 8017e66:	f000 bc7f 	b.w	8018768 <__retarget_lock_release_recursive>
 8017e6a:	bf00      	nop
 8017e6c:	20010765 	.word	0x20010765

08017e70 <srand>:
 8017e70:	b538      	push	{r3, r4, r5, lr}
 8017e72:	4b10      	ldr	r3, [pc, #64]	@ (8017eb4 <srand+0x44>)
 8017e74:	681d      	ldr	r5, [r3, #0]
 8017e76:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017e78:	4604      	mov	r4, r0
 8017e7a:	b9b3      	cbnz	r3, 8017eaa <srand+0x3a>
 8017e7c:	2018      	movs	r0, #24
 8017e7e:	f7ff ff39 	bl	8017cf4 <malloc>
 8017e82:	4602      	mov	r2, r0
 8017e84:	6328      	str	r0, [r5, #48]	@ 0x30
 8017e86:	b920      	cbnz	r0, 8017e92 <srand+0x22>
 8017e88:	4b0b      	ldr	r3, [pc, #44]	@ (8017eb8 <srand+0x48>)
 8017e8a:	480c      	ldr	r0, [pc, #48]	@ (8017ebc <srand+0x4c>)
 8017e8c:	2146      	movs	r1, #70	@ 0x46
 8017e8e:	f000 fc83 	bl	8018798 <__assert_func>
 8017e92:	490b      	ldr	r1, [pc, #44]	@ (8017ec0 <srand+0x50>)
 8017e94:	4b0b      	ldr	r3, [pc, #44]	@ (8017ec4 <srand+0x54>)
 8017e96:	e9c0 1300 	strd	r1, r3, [r0]
 8017e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8017ec8 <srand+0x58>)
 8017e9c:	6083      	str	r3, [r0, #8]
 8017e9e:	230b      	movs	r3, #11
 8017ea0:	8183      	strh	r3, [r0, #12]
 8017ea2:	2100      	movs	r1, #0
 8017ea4:	2001      	movs	r0, #1
 8017ea6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017eaa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017eac:	2200      	movs	r2, #0
 8017eae:	611c      	str	r4, [r3, #16]
 8017eb0:	615a      	str	r2, [r3, #20]
 8017eb2:	bd38      	pop	{r3, r4, r5, pc}
 8017eb4:	200022b0 	.word	0x200022b0
 8017eb8:	0801b284 	.word	0x0801b284
 8017ebc:	0801b29b 	.word	0x0801b29b
 8017ec0:	abcd330e 	.word	0xabcd330e
 8017ec4:	e66d1234 	.word	0xe66d1234
 8017ec8:	0005deec 	.word	0x0005deec

08017ecc <rand>:
 8017ecc:	4b16      	ldr	r3, [pc, #88]	@ (8017f28 <rand+0x5c>)
 8017ece:	b510      	push	{r4, lr}
 8017ed0:	681c      	ldr	r4, [r3, #0]
 8017ed2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017ed4:	b9b3      	cbnz	r3, 8017f04 <rand+0x38>
 8017ed6:	2018      	movs	r0, #24
 8017ed8:	f7ff ff0c 	bl	8017cf4 <malloc>
 8017edc:	4602      	mov	r2, r0
 8017ede:	6320      	str	r0, [r4, #48]	@ 0x30
 8017ee0:	b920      	cbnz	r0, 8017eec <rand+0x20>
 8017ee2:	4b12      	ldr	r3, [pc, #72]	@ (8017f2c <rand+0x60>)
 8017ee4:	4812      	ldr	r0, [pc, #72]	@ (8017f30 <rand+0x64>)
 8017ee6:	2152      	movs	r1, #82	@ 0x52
 8017ee8:	f000 fc56 	bl	8018798 <__assert_func>
 8017eec:	4911      	ldr	r1, [pc, #68]	@ (8017f34 <rand+0x68>)
 8017eee:	4b12      	ldr	r3, [pc, #72]	@ (8017f38 <rand+0x6c>)
 8017ef0:	e9c0 1300 	strd	r1, r3, [r0]
 8017ef4:	4b11      	ldr	r3, [pc, #68]	@ (8017f3c <rand+0x70>)
 8017ef6:	6083      	str	r3, [r0, #8]
 8017ef8:	230b      	movs	r3, #11
 8017efa:	8183      	strh	r3, [r0, #12]
 8017efc:	2100      	movs	r1, #0
 8017efe:	2001      	movs	r0, #1
 8017f00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017f04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017f06:	480e      	ldr	r0, [pc, #56]	@ (8017f40 <rand+0x74>)
 8017f08:	690b      	ldr	r3, [r1, #16]
 8017f0a:	694c      	ldr	r4, [r1, #20]
 8017f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8017f44 <rand+0x78>)
 8017f0e:	4358      	muls	r0, r3
 8017f10:	fb02 0004 	mla	r0, r2, r4, r0
 8017f14:	fba3 3202 	umull	r3, r2, r3, r2
 8017f18:	3301      	adds	r3, #1
 8017f1a:	eb40 0002 	adc.w	r0, r0, r2
 8017f1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017f22:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017f26:	bd10      	pop	{r4, pc}
 8017f28:	200022b0 	.word	0x200022b0
 8017f2c:	0801b284 	.word	0x0801b284
 8017f30:	0801b29b 	.word	0x0801b29b
 8017f34:	abcd330e 	.word	0xabcd330e
 8017f38:	e66d1234 	.word	0xe66d1234
 8017f3c:	0005deec 	.word	0x0005deec
 8017f40:	5851f42d 	.word	0x5851f42d
 8017f44:	4c957f2d 	.word	0x4c957f2d

08017f48 <realloc>:
 8017f48:	4b02      	ldr	r3, [pc, #8]	@ (8017f54 <realloc+0xc>)
 8017f4a:	460a      	mov	r2, r1
 8017f4c:	4601      	mov	r1, r0
 8017f4e:	6818      	ldr	r0, [r3, #0]
 8017f50:	f000 b802 	b.w	8017f58 <_realloc_r>
 8017f54:	200022b0 	.word	0x200022b0

08017f58 <_realloc_r>:
 8017f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f5c:	4607      	mov	r7, r0
 8017f5e:	4614      	mov	r4, r2
 8017f60:	460d      	mov	r5, r1
 8017f62:	b921      	cbnz	r1, 8017f6e <_realloc_r+0x16>
 8017f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f68:	4611      	mov	r1, r2
 8017f6a:	f7ff bef5 	b.w	8017d58 <_malloc_r>
 8017f6e:	b92a      	cbnz	r2, 8017f7c <_realloc_r+0x24>
 8017f70:	f000 fc3c 	bl	80187ec <_free_r>
 8017f74:	4625      	mov	r5, r4
 8017f76:	4628      	mov	r0, r5
 8017f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f7c:	f000 fc80 	bl	8018880 <_malloc_usable_size_r>
 8017f80:	4284      	cmp	r4, r0
 8017f82:	4606      	mov	r6, r0
 8017f84:	d802      	bhi.n	8017f8c <_realloc_r+0x34>
 8017f86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017f8a:	d8f4      	bhi.n	8017f76 <_realloc_r+0x1e>
 8017f8c:	4621      	mov	r1, r4
 8017f8e:	4638      	mov	r0, r7
 8017f90:	f7ff fee2 	bl	8017d58 <_malloc_r>
 8017f94:	4680      	mov	r8, r0
 8017f96:	b908      	cbnz	r0, 8017f9c <_realloc_r+0x44>
 8017f98:	4645      	mov	r5, r8
 8017f9a:	e7ec      	b.n	8017f76 <_realloc_r+0x1e>
 8017f9c:	42b4      	cmp	r4, r6
 8017f9e:	4622      	mov	r2, r4
 8017fa0:	4629      	mov	r1, r5
 8017fa2:	bf28      	it	cs
 8017fa4:	4632      	movcs	r2, r6
 8017fa6:	f000 fbe8 	bl	801877a <memcpy>
 8017faa:	4629      	mov	r1, r5
 8017fac:	4638      	mov	r0, r7
 8017fae:	f000 fc1d 	bl	80187ec <_free_r>
 8017fb2:	e7f1      	b.n	8017f98 <_realloc_r+0x40>

08017fb4 <_strtoul_l.isra.0>:
 8017fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fb8:	4e34      	ldr	r6, [pc, #208]	@ (801808c <_strtoul_l.isra.0+0xd8>)
 8017fba:	4686      	mov	lr, r0
 8017fbc:	460d      	mov	r5, r1
 8017fbe:	4628      	mov	r0, r5
 8017fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017fc4:	5d37      	ldrb	r7, [r6, r4]
 8017fc6:	f017 0708 	ands.w	r7, r7, #8
 8017fca:	d1f8      	bne.n	8017fbe <_strtoul_l.isra.0+0xa>
 8017fcc:	2c2d      	cmp	r4, #45	@ 0x2d
 8017fce:	d110      	bne.n	8017ff2 <_strtoul_l.isra.0+0x3e>
 8017fd0:	782c      	ldrb	r4, [r5, #0]
 8017fd2:	2701      	movs	r7, #1
 8017fd4:	1c85      	adds	r5, r0, #2
 8017fd6:	f033 0010 	bics.w	r0, r3, #16
 8017fda:	d115      	bne.n	8018008 <_strtoul_l.isra.0+0x54>
 8017fdc:	2c30      	cmp	r4, #48	@ 0x30
 8017fde:	d10d      	bne.n	8017ffc <_strtoul_l.isra.0+0x48>
 8017fe0:	7828      	ldrb	r0, [r5, #0]
 8017fe2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017fe6:	2858      	cmp	r0, #88	@ 0x58
 8017fe8:	d108      	bne.n	8017ffc <_strtoul_l.isra.0+0x48>
 8017fea:	786c      	ldrb	r4, [r5, #1]
 8017fec:	3502      	adds	r5, #2
 8017fee:	2310      	movs	r3, #16
 8017ff0:	e00a      	b.n	8018008 <_strtoul_l.isra.0+0x54>
 8017ff2:	2c2b      	cmp	r4, #43	@ 0x2b
 8017ff4:	bf04      	itt	eq
 8017ff6:	782c      	ldrbeq	r4, [r5, #0]
 8017ff8:	1c85      	addeq	r5, r0, #2
 8017ffa:	e7ec      	b.n	8017fd6 <_strtoul_l.isra.0+0x22>
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d1f6      	bne.n	8017fee <_strtoul_l.isra.0+0x3a>
 8018000:	2c30      	cmp	r4, #48	@ 0x30
 8018002:	bf14      	ite	ne
 8018004:	230a      	movne	r3, #10
 8018006:	2308      	moveq	r3, #8
 8018008:	f04f 38ff 	mov.w	r8, #4294967295
 801800c:	2600      	movs	r6, #0
 801800e:	fbb8 f8f3 	udiv	r8, r8, r3
 8018012:	fb03 f908 	mul.w	r9, r3, r8
 8018016:	ea6f 0909 	mvn.w	r9, r9
 801801a:	4630      	mov	r0, r6
 801801c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8018020:	f1bc 0f09 	cmp.w	ip, #9
 8018024:	d810      	bhi.n	8018048 <_strtoul_l.isra.0+0x94>
 8018026:	4664      	mov	r4, ip
 8018028:	42a3      	cmp	r3, r4
 801802a:	dd1e      	ble.n	801806a <_strtoul_l.isra.0+0xb6>
 801802c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8018030:	d007      	beq.n	8018042 <_strtoul_l.isra.0+0x8e>
 8018032:	4580      	cmp	r8, r0
 8018034:	d316      	bcc.n	8018064 <_strtoul_l.isra.0+0xb0>
 8018036:	d101      	bne.n	801803c <_strtoul_l.isra.0+0x88>
 8018038:	45a1      	cmp	r9, r4
 801803a:	db13      	blt.n	8018064 <_strtoul_l.isra.0+0xb0>
 801803c:	fb00 4003 	mla	r0, r0, r3, r4
 8018040:	2601      	movs	r6, #1
 8018042:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018046:	e7e9      	b.n	801801c <_strtoul_l.isra.0+0x68>
 8018048:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801804c:	f1bc 0f19 	cmp.w	ip, #25
 8018050:	d801      	bhi.n	8018056 <_strtoul_l.isra.0+0xa2>
 8018052:	3c37      	subs	r4, #55	@ 0x37
 8018054:	e7e8      	b.n	8018028 <_strtoul_l.isra.0+0x74>
 8018056:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801805a:	f1bc 0f19 	cmp.w	ip, #25
 801805e:	d804      	bhi.n	801806a <_strtoul_l.isra.0+0xb6>
 8018060:	3c57      	subs	r4, #87	@ 0x57
 8018062:	e7e1      	b.n	8018028 <_strtoul_l.isra.0+0x74>
 8018064:	f04f 36ff 	mov.w	r6, #4294967295
 8018068:	e7eb      	b.n	8018042 <_strtoul_l.isra.0+0x8e>
 801806a:	1c73      	adds	r3, r6, #1
 801806c:	d106      	bne.n	801807c <_strtoul_l.isra.0+0xc8>
 801806e:	2322      	movs	r3, #34	@ 0x22
 8018070:	f8ce 3000 	str.w	r3, [lr]
 8018074:	4630      	mov	r0, r6
 8018076:	b932      	cbnz	r2, 8018086 <_strtoul_l.isra.0+0xd2>
 8018078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801807c:	b107      	cbz	r7, 8018080 <_strtoul_l.isra.0+0xcc>
 801807e:	4240      	negs	r0, r0
 8018080:	2a00      	cmp	r2, #0
 8018082:	d0f9      	beq.n	8018078 <_strtoul_l.isra.0+0xc4>
 8018084:	b106      	cbz	r6, 8018088 <_strtoul_l.isra.0+0xd4>
 8018086:	1e69      	subs	r1, r5, #1
 8018088:	6011      	str	r1, [r2, #0]
 801808a:	e7f5      	b.n	8018078 <_strtoul_l.isra.0+0xc4>
 801808c:	0801b363 	.word	0x0801b363

08018090 <strtoul>:
 8018090:	4613      	mov	r3, r2
 8018092:	460a      	mov	r2, r1
 8018094:	4601      	mov	r1, r0
 8018096:	4802      	ldr	r0, [pc, #8]	@ (80180a0 <strtoul+0x10>)
 8018098:	6800      	ldr	r0, [r0, #0]
 801809a:	f7ff bf8b 	b.w	8017fb4 <_strtoul_l.isra.0>
 801809e:	bf00      	nop
 80180a0:	200022b0 	.word	0x200022b0

080180a4 <std>:
 80180a4:	2300      	movs	r3, #0
 80180a6:	b510      	push	{r4, lr}
 80180a8:	4604      	mov	r4, r0
 80180aa:	e9c0 3300 	strd	r3, r3, [r0]
 80180ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80180b2:	6083      	str	r3, [r0, #8]
 80180b4:	8181      	strh	r1, [r0, #12]
 80180b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80180b8:	81c2      	strh	r2, [r0, #14]
 80180ba:	6183      	str	r3, [r0, #24]
 80180bc:	4619      	mov	r1, r3
 80180be:	2208      	movs	r2, #8
 80180c0:	305c      	adds	r0, #92	@ 0x5c
 80180c2:	f000 fa7f 	bl	80185c4 <memset>
 80180c6:	4b0d      	ldr	r3, [pc, #52]	@ (80180fc <std+0x58>)
 80180c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80180ca:	4b0d      	ldr	r3, [pc, #52]	@ (8018100 <std+0x5c>)
 80180cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80180ce:	4b0d      	ldr	r3, [pc, #52]	@ (8018104 <std+0x60>)
 80180d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80180d2:	4b0d      	ldr	r3, [pc, #52]	@ (8018108 <std+0x64>)
 80180d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80180d6:	4b0d      	ldr	r3, [pc, #52]	@ (801810c <std+0x68>)
 80180d8:	6224      	str	r4, [r4, #32]
 80180da:	429c      	cmp	r4, r3
 80180dc:	d006      	beq.n	80180ec <std+0x48>
 80180de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80180e2:	4294      	cmp	r4, r2
 80180e4:	d002      	beq.n	80180ec <std+0x48>
 80180e6:	33d0      	adds	r3, #208	@ 0xd0
 80180e8:	429c      	cmp	r4, r3
 80180ea:	d105      	bne.n	80180f8 <std+0x54>
 80180ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80180f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180f4:	f000 bb36 	b.w	8018764 <__retarget_lock_init_recursive>
 80180f8:	bd10      	pop	{r4, pc}
 80180fa:	bf00      	nop
 80180fc:	08018349 	.word	0x08018349
 8018100:	0801836b 	.word	0x0801836b
 8018104:	080183a3 	.word	0x080183a3
 8018108:	080183c7 	.word	0x080183c7
 801810c:	20010624 	.word	0x20010624

08018110 <stdio_exit_handler>:
 8018110:	4a02      	ldr	r2, [pc, #8]	@ (801811c <stdio_exit_handler+0xc>)
 8018112:	4903      	ldr	r1, [pc, #12]	@ (8018120 <stdio_exit_handler+0x10>)
 8018114:	4803      	ldr	r0, [pc, #12]	@ (8018124 <stdio_exit_handler+0x14>)
 8018116:	f000 b869 	b.w	80181ec <_fwalk_sglue>
 801811a:	bf00      	nop
 801811c:	200022a4 	.word	0x200022a4
 8018120:	08018f61 	.word	0x08018f61
 8018124:	200022b4 	.word	0x200022b4

08018128 <cleanup_stdio>:
 8018128:	6841      	ldr	r1, [r0, #4]
 801812a:	4b0c      	ldr	r3, [pc, #48]	@ (801815c <cleanup_stdio+0x34>)
 801812c:	4299      	cmp	r1, r3
 801812e:	b510      	push	{r4, lr}
 8018130:	4604      	mov	r4, r0
 8018132:	d001      	beq.n	8018138 <cleanup_stdio+0x10>
 8018134:	f000 ff14 	bl	8018f60 <_fflush_r>
 8018138:	68a1      	ldr	r1, [r4, #8]
 801813a:	4b09      	ldr	r3, [pc, #36]	@ (8018160 <cleanup_stdio+0x38>)
 801813c:	4299      	cmp	r1, r3
 801813e:	d002      	beq.n	8018146 <cleanup_stdio+0x1e>
 8018140:	4620      	mov	r0, r4
 8018142:	f000 ff0d 	bl	8018f60 <_fflush_r>
 8018146:	68e1      	ldr	r1, [r4, #12]
 8018148:	4b06      	ldr	r3, [pc, #24]	@ (8018164 <cleanup_stdio+0x3c>)
 801814a:	4299      	cmp	r1, r3
 801814c:	d004      	beq.n	8018158 <cleanup_stdio+0x30>
 801814e:	4620      	mov	r0, r4
 8018150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018154:	f000 bf04 	b.w	8018f60 <_fflush_r>
 8018158:	bd10      	pop	{r4, pc}
 801815a:	bf00      	nop
 801815c:	20010624 	.word	0x20010624
 8018160:	2001068c 	.word	0x2001068c
 8018164:	200106f4 	.word	0x200106f4

08018168 <global_stdio_init.part.0>:
 8018168:	b510      	push	{r4, lr}
 801816a:	4b0b      	ldr	r3, [pc, #44]	@ (8018198 <global_stdio_init.part.0+0x30>)
 801816c:	4c0b      	ldr	r4, [pc, #44]	@ (801819c <global_stdio_init.part.0+0x34>)
 801816e:	4a0c      	ldr	r2, [pc, #48]	@ (80181a0 <global_stdio_init.part.0+0x38>)
 8018170:	601a      	str	r2, [r3, #0]
 8018172:	4620      	mov	r0, r4
 8018174:	2200      	movs	r2, #0
 8018176:	2104      	movs	r1, #4
 8018178:	f7ff ff94 	bl	80180a4 <std>
 801817c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018180:	2201      	movs	r2, #1
 8018182:	2109      	movs	r1, #9
 8018184:	f7ff ff8e 	bl	80180a4 <std>
 8018188:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801818c:	2202      	movs	r2, #2
 801818e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018192:	2112      	movs	r1, #18
 8018194:	f7ff bf86 	b.w	80180a4 <std>
 8018198:	2001075c 	.word	0x2001075c
 801819c:	20010624 	.word	0x20010624
 80181a0:	08018111 	.word	0x08018111

080181a4 <__sfp_lock_acquire>:
 80181a4:	4801      	ldr	r0, [pc, #4]	@ (80181ac <__sfp_lock_acquire+0x8>)
 80181a6:	f000 bade 	b.w	8018766 <__retarget_lock_acquire_recursive>
 80181aa:	bf00      	nop
 80181ac:	20010766 	.word	0x20010766

080181b0 <__sfp_lock_release>:
 80181b0:	4801      	ldr	r0, [pc, #4]	@ (80181b8 <__sfp_lock_release+0x8>)
 80181b2:	f000 bad9 	b.w	8018768 <__retarget_lock_release_recursive>
 80181b6:	bf00      	nop
 80181b8:	20010766 	.word	0x20010766

080181bc <__sinit>:
 80181bc:	b510      	push	{r4, lr}
 80181be:	4604      	mov	r4, r0
 80181c0:	f7ff fff0 	bl	80181a4 <__sfp_lock_acquire>
 80181c4:	6a23      	ldr	r3, [r4, #32]
 80181c6:	b11b      	cbz	r3, 80181d0 <__sinit+0x14>
 80181c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181cc:	f7ff bff0 	b.w	80181b0 <__sfp_lock_release>
 80181d0:	4b04      	ldr	r3, [pc, #16]	@ (80181e4 <__sinit+0x28>)
 80181d2:	6223      	str	r3, [r4, #32]
 80181d4:	4b04      	ldr	r3, [pc, #16]	@ (80181e8 <__sinit+0x2c>)
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d1f5      	bne.n	80181c8 <__sinit+0xc>
 80181dc:	f7ff ffc4 	bl	8018168 <global_stdio_init.part.0>
 80181e0:	e7f2      	b.n	80181c8 <__sinit+0xc>
 80181e2:	bf00      	nop
 80181e4:	08018129 	.word	0x08018129
 80181e8:	2001075c 	.word	0x2001075c

080181ec <_fwalk_sglue>:
 80181ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181f0:	4607      	mov	r7, r0
 80181f2:	4688      	mov	r8, r1
 80181f4:	4614      	mov	r4, r2
 80181f6:	2600      	movs	r6, #0
 80181f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80181fc:	f1b9 0901 	subs.w	r9, r9, #1
 8018200:	d505      	bpl.n	801820e <_fwalk_sglue+0x22>
 8018202:	6824      	ldr	r4, [r4, #0]
 8018204:	2c00      	cmp	r4, #0
 8018206:	d1f7      	bne.n	80181f8 <_fwalk_sglue+0xc>
 8018208:	4630      	mov	r0, r6
 801820a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801820e:	89ab      	ldrh	r3, [r5, #12]
 8018210:	2b01      	cmp	r3, #1
 8018212:	d907      	bls.n	8018224 <_fwalk_sglue+0x38>
 8018214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018218:	3301      	adds	r3, #1
 801821a:	d003      	beq.n	8018224 <_fwalk_sglue+0x38>
 801821c:	4629      	mov	r1, r5
 801821e:	4638      	mov	r0, r7
 8018220:	47c0      	blx	r8
 8018222:	4306      	orrs	r6, r0
 8018224:	3568      	adds	r5, #104	@ 0x68
 8018226:	e7e9      	b.n	80181fc <_fwalk_sglue+0x10>

08018228 <_fwrite_r>:
 8018228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801822c:	9c08      	ldr	r4, [sp, #32]
 801822e:	468a      	mov	sl, r1
 8018230:	4690      	mov	r8, r2
 8018232:	fb02 f903 	mul.w	r9, r2, r3
 8018236:	4606      	mov	r6, r0
 8018238:	b118      	cbz	r0, 8018242 <_fwrite_r+0x1a>
 801823a:	6a03      	ldr	r3, [r0, #32]
 801823c:	b90b      	cbnz	r3, 8018242 <_fwrite_r+0x1a>
 801823e:	f7ff ffbd 	bl	80181bc <__sinit>
 8018242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018244:	07dd      	lsls	r5, r3, #31
 8018246:	d405      	bmi.n	8018254 <_fwrite_r+0x2c>
 8018248:	89a3      	ldrh	r3, [r4, #12]
 801824a:	0598      	lsls	r0, r3, #22
 801824c:	d402      	bmi.n	8018254 <_fwrite_r+0x2c>
 801824e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018250:	f000 fa89 	bl	8018766 <__retarget_lock_acquire_recursive>
 8018254:	89a3      	ldrh	r3, [r4, #12]
 8018256:	0719      	lsls	r1, r3, #28
 8018258:	d516      	bpl.n	8018288 <_fwrite_r+0x60>
 801825a:	6923      	ldr	r3, [r4, #16]
 801825c:	b1a3      	cbz	r3, 8018288 <_fwrite_r+0x60>
 801825e:	2500      	movs	r5, #0
 8018260:	454d      	cmp	r5, r9
 8018262:	d01f      	beq.n	80182a4 <_fwrite_r+0x7c>
 8018264:	68a7      	ldr	r7, [r4, #8]
 8018266:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801826a:	3f01      	subs	r7, #1
 801826c:	2f00      	cmp	r7, #0
 801826e:	60a7      	str	r7, [r4, #8]
 8018270:	da04      	bge.n	801827c <_fwrite_r+0x54>
 8018272:	69a3      	ldr	r3, [r4, #24]
 8018274:	429f      	cmp	r7, r3
 8018276:	db0f      	blt.n	8018298 <_fwrite_r+0x70>
 8018278:	290a      	cmp	r1, #10
 801827a:	d00d      	beq.n	8018298 <_fwrite_r+0x70>
 801827c:	6823      	ldr	r3, [r4, #0]
 801827e:	1c5a      	adds	r2, r3, #1
 8018280:	6022      	str	r2, [r4, #0]
 8018282:	7019      	strb	r1, [r3, #0]
 8018284:	3501      	adds	r5, #1
 8018286:	e7eb      	b.n	8018260 <_fwrite_r+0x38>
 8018288:	4621      	mov	r1, r4
 801828a:	4630      	mov	r0, r6
 801828c:	f000 f91a 	bl	80184c4 <__swsetup_r>
 8018290:	2800      	cmp	r0, #0
 8018292:	d0e4      	beq.n	801825e <_fwrite_r+0x36>
 8018294:	2500      	movs	r5, #0
 8018296:	e005      	b.n	80182a4 <_fwrite_r+0x7c>
 8018298:	4622      	mov	r2, r4
 801829a:	4630      	mov	r0, r6
 801829c:	f000 f8d4 	bl	8018448 <__swbuf_r>
 80182a0:	3001      	adds	r0, #1
 80182a2:	d1ef      	bne.n	8018284 <_fwrite_r+0x5c>
 80182a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80182a6:	07da      	lsls	r2, r3, #31
 80182a8:	d405      	bmi.n	80182b6 <_fwrite_r+0x8e>
 80182aa:	89a3      	ldrh	r3, [r4, #12]
 80182ac:	059b      	lsls	r3, r3, #22
 80182ae:	d402      	bmi.n	80182b6 <_fwrite_r+0x8e>
 80182b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80182b2:	f000 fa59 	bl	8018768 <__retarget_lock_release_recursive>
 80182b6:	fbb5 f0f8 	udiv	r0, r5, r8
 80182ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080182c0 <fwrite>:
 80182c0:	b507      	push	{r0, r1, r2, lr}
 80182c2:	9300      	str	r3, [sp, #0]
 80182c4:	4613      	mov	r3, r2
 80182c6:	460a      	mov	r2, r1
 80182c8:	4601      	mov	r1, r0
 80182ca:	4803      	ldr	r0, [pc, #12]	@ (80182d8 <fwrite+0x18>)
 80182cc:	6800      	ldr	r0, [r0, #0]
 80182ce:	f7ff ffab 	bl	8018228 <_fwrite_r>
 80182d2:	b003      	add	sp, #12
 80182d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80182d8:	200022b0 	.word	0x200022b0

080182dc <sniprintf>:
 80182dc:	b40c      	push	{r2, r3}
 80182de:	b530      	push	{r4, r5, lr}
 80182e0:	4b18      	ldr	r3, [pc, #96]	@ (8018344 <sniprintf+0x68>)
 80182e2:	1e0c      	subs	r4, r1, #0
 80182e4:	681d      	ldr	r5, [r3, #0]
 80182e6:	b09d      	sub	sp, #116	@ 0x74
 80182e8:	da08      	bge.n	80182fc <sniprintf+0x20>
 80182ea:	238b      	movs	r3, #139	@ 0x8b
 80182ec:	602b      	str	r3, [r5, #0]
 80182ee:	f04f 30ff 	mov.w	r0, #4294967295
 80182f2:	b01d      	add	sp, #116	@ 0x74
 80182f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80182f8:	b002      	add	sp, #8
 80182fa:	4770      	bx	lr
 80182fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018300:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018304:	f04f 0300 	mov.w	r3, #0
 8018308:	931b      	str	r3, [sp, #108]	@ 0x6c
 801830a:	bf14      	ite	ne
 801830c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018310:	4623      	moveq	r3, r4
 8018312:	9304      	str	r3, [sp, #16]
 8018314:	9307      	str	r3, [sp, #28]
 8018316:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801831a:	9002      	str	r0, [sp, #8]
 801831c:	9006      	str	r0, [sp, #24]
 801831e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018322:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018324:	ab21      	add	r3, sp, #132	@ 0x84
 8018326:	a902      	add	r1, sp, #8
 8018328:	4628      	mov	r0, r5
 801832a:	9301      	str	r3, [sp, #4]
 801832c:	f000 fb0c 	bl	8018948 <_svfiprintf_r>
 8018330:	1c43      	adds	r3, r0, #1
 8018332:	bfbc      	itt	lt
 8018334:	238b      	movlt	r3, #139	@ 0x8b
 8018336:	602b      	strlt	r3, [r5, #0]
 8018338:	2c00      	cmp	r4, #0
 801833a:	d0da      	beq.n	80182f2 <sniprintf+0x16>
 801833c:	9b02      	ldr	r3, [sp, #8]
 801833e:	2200      	movs	r2, #0
 8018340:	701a      	strb	r2, [r3, #0]
 8018342:	e7d6      	b.n	80182f2 <sniprintf+0x16>
 8018344:	200022b0 	.word	0x200022b0

08018348 <__sread>:
 8018348:	b510      	push	{r4, lr}
 801834a:	460c      	mov	r4, r1
 801834c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018350:	f000 f9aa 	bl	80186a8 <_read_r>
 8018354:	2800      	cmp	r0, #0
 8018356:	bfab      	itete	ge
 8018358:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801835a:	89a3      	ldrhlt	r3, [r4, #12]
 801835c:	181b      	addge	r3, r3, r0
 801835e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8018362:	bfac      	ite	ge
 8018364:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018366:	81a3      	strhlt	r3, [r4, #12]
 8018368:	bd10      	pop	{r4, pc}

0801836a <__swrite>:
 801836a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801836e:	461f      	mov	r7, r3
 8018370:	898b      	ldrh	r3, [r1, #12]
 8018372:	05db      	lsls	r3, r3, #23
 8018374:	4605      	mov	r5, r0
 8018376:	460c      	mov	r4, r1
 8018378:	4616      	mov	r6, r2
 801837a:	d505      	bpl.n	8018388 <__swrite+0x1e>
 801837c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018380:	2302      	movs	r3, #2
 8018382:	2200      	movs	r2, #0
 8018384:	f000 f97e 	bl	8018684 <_lseek_r>
 8018388:	89a3      	ldrh	r3, [r4, #12]
 801838a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801838e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8018392:	81a3      	strh	r3, [r4, #12]
 8018394:	4632      	mov	r2, r6
 8018396:	463b      	mov	r3, r7
 8018398:	4628      	mov	r0, r5
 801839a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801839e:	f000 b9a5 	b.w	80186ec <_write_r>

080183a2 <__sseek>:
 80183a2:	b510      	push	{r4, lr}
 80183a4:	460c      	mov	r4, r1
 80183a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183aa:	f000 f96b 	bl	8018684 <_lseek_r>
 80183ae:	1c43      	adds	r3, r0, #1
 80183b0:	89a3      	ldrh	r3, [r4, #12]
 80183b2:	bf15      	itete	ne
 80183b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80183b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80183ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80183be:	81a3      	strheq	r3, [r4, #12]
 80183c0:	bf18      	it	ne
 80183c2:	81a3      	strhne	r3, [r4, #12]
 80183c4:	bd10      	pop	{r4, pc}

080183c6 <__sclose>:
 80183c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183ca:	f000 b94b 	b.w	8018664 <_close_r>

080183ce <_vsniprintf_r>:
 80183ce:	b530      	push	{r4, r5, lr}
 80183d0:	4614      	mov	r4, r2
 80183d2:	2c00      	cmp	r4, #0
 80183d4:	b09b      	sub	sp, #108	@ 0x6c
 80183d6:	4605      	mov	r5, r0
 80183d8:	461a      	mov	r2, r3
 80183da:	da05      	bge.n	80183e8 <_vsniprintf_r+0x1a>
 80183dc:	238b      	movs	r3, #139	@ 0x8b
 80183de:	6003      	str	r3, [r0, #0]
 80183e0:	f04f 30ff 	mov.w	r0, #4294967295
 80183e4:	b01b      	add	sp, #108	@ 0x6c
 80183e6:	bd30      	pop	{r4, r5, pc}
 80183e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80183ec:	f8ad 300c 	strh.w	r3, [sp, #12]
 80183f0:	f04f 0300 	mov.w	r3, #0
 80183f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80183f6:	bf14      	ite	ne
 80183f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80183fc:	4623      	moveq	r3, r4
 80183fe:	9302      	str	r3, [sp, #8]
 8018400:	9305      	str	r3, [sp, #20]
 8018402:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018406:	9100      	str	r1, [sp, #0]
 8018408:	9104      	str	r1, [sp, #16]
 801840a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801840e:	4669      	mov	r1, sp
 8018410:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018412:	f000 fa99 	bl	8018948 <_svfiprintf_r>
 8018416:	1c43      	adds	r3, r0, #1
 8018418:	bfbc      	itt	lt
 801841a:	238b      	movlt	r3, #139	@ 0x8b
 801841c:	602b      	strlt	r3, [r5, #0]
 801841e:	2c00      	cmp	r4, #0
 8018420:	d0e0      	beq.n	80183e4 <_vsniprintf_r+0x16>
 8018422:	9b00      	ldr	r3, [sp, #0]
 8018424:	2200      	movs	r2, #0
 8018426:	701a      	strb	r2, [r3, #0]
 8018428:	e7dc      	b.n	80183e4 <_vsniprintf_r+0x16>
	...

0801842c <vsniprintf>:
 801842c:	b507      	push	{r0, r1, r2, lr}
 801842e:	9300      	str	r3, [sp, #0]
 8018430:	4613      	mov	r3, r2
 8018432:	460a      	mov	r2, r1
 8018434:	4601      	mov	r1, r0
 8018436:	4803      	ldr	r0, [pc, #12]	@ (8018444 <vsniprintf+0x18>)
 8018438:	6800      	ldr	r0, [r0, #0]
 801843a:	f7ff ffc8 	bl	80183ce <_vsniprintf_r>
 801843e:	b003      	add	sp, #12
 8018440:	f85d fb04 	ldr.w	pc, [sp], #4
 8018444:	200022b0 	.word	0x200022b0

08018448 <__swbuf_r>:
 8018448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801844a:	460e      	mov	r6, r1
 801844c:	4614      	mov	r4, r2
 801844e:	4605      	mov	r5, r0
 8018450:	b118      	cbz	r0, 801845a <__swbuf_r+0x12>
 8018452:	6a03      	ldr	r3, [r0, #32]
 8018454:	b90b      	cbnz	r3, 801845a <__swbuf_r+0x12>
 8018456:	f7ff feb1 	bl	80181bc <__sinit>
 801845a:	69a3      	ldr	r3, [r4, #24]
 801845c:	60a3      	str	r3, [r4, #8]
 801845e:	89a3      	ldrh	r3, [r4, #12]
 8018460:	071a      	lsls	r2, r3, #28
 8018462:	d501      	bpl.n	8018468 <__swbuf_r+0x20>
 8018464:	6923      	ldr	r3, [r4, #16]
 8018466:	b943      	cbnz	r3, 801847a <__swbuf_r+0x32>
 8018468:	4621      	mov	r1, r4
 801846a:	4628      	mov	r0, r5
 801846c:	f000 f82a 	bl	80184c4 <__swsetup_r>
 8018470:	b118      	cbz	r0, 801847a <__swbuf_r+0x32>
 8018472:	f04f 37ff 	mov.w	r7, #4294967295
 8018476:	4638      	mov	r0, r7
 8018478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801847a:	6823      	ldr	r3, [r4, #0]
 801847c:	6922      	ldr	r2, [r4, #16]
 801847e:	1a98      	subs	r0, r3, r2
 8018480:	6963      	ldr	r3, [r4, #20]
 8018482:	b2f6      	uxtb	r6, r6
 8018484:	4283      	cmp	r3, r0
 8018486:	4637      	mov	r7, r6
 8018488:	dc05      	bgt.n	8018496 <__swbuf_r+0x4e>
 801848a:	4621      	mov	r1, r4
 801848c:	4628      	mov	r0, r5
 801848e:	f000 fd67 	bl	8018f60 <_fflush_r>
 8018492:	2800      	cmp	r0, #0
 8018494:	d1ed      	bne.n	8018472 <__swbuf_r+0x2a>
 8018496:	68a3      	ldr	r3, [r4, #8]
 8018498:	3b01      	subs	r3, #1
 801849a:	60a3      	str	r3, [r4, #8]
 801849c:	6823      	ldr	r3, [r4, #0]
 801849e:	1c5a      	adds	r2, r3, #1
 80184a0:	6022      	str	r2, [r4, #0]
 80184a2:	701e      	strb	r6, [r3, #0]
 80184a4:	6962      	ldr	r2, [r4, #20]
 80184a6:	1c43      	adds	r3, r0, #1
 80184a8:	429a      	cmp	r2, r3
 80184aa:	d004      	beq.n	80184b6 <__swbuf_r+0x6e>
 80184ac:	89a3      	ldrh	r3, [r4, #12]
 80184ae:	07db      	lsls	r3, r3, #31
 80184b0:	d5e1      	bpl.n	8018476 <__swbuf_r+0x2e>
 80184b2:	2e0a      	cmp	r6, #10
 80184b4:	d1df      	bne.n	8018476 <__swbuf_r+0x2e>
 80184b6:	4621      	mov	r1, r4
 80184b8:	4628      	mov	r0, r5
 80184ba:	f000 fd51 	bl	8018f60 <_fflush_r>
 80184be:	2800      	cmp	r0, #0
 80184c0:	d0d9      	beq.n	8018476 <__swbuf_r+0x2e>
 80184c2:	e7d6      	b.n	8018472 <__swbuf_r+0x2a>

080184c4 <__swsetup_r>:
 80184c4:	b538      	push	{r3, r4, r5, lr}
 80184c6:	4b29      	ldr	r3, [pc, #164]	@ (801856c <__swsetup_r+0xa8>)
 80184c8:	4605      	mov	r5, r0
 80184ca:	6818      	ldr	r0, [r3, #0]
 80184cc:	460c      	mov	r4, r1
 80184ce:	b118      	cbz	r0, 80184d8 <__swsetup_r+0x14>
 80184d0:	6a03      	ldr	r3, [r0, #32]
 80184d2:	b90b      	cbnz	r3, 80184d8 <__swsetup_r+0x14>
 80184d4:	f7ff fe72 	bl	80181bc <__sinit>
 80184d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184dc:	0719      	lsls	r1, r3, #28
 80184de:	d422      	bmi.n	8018526 <__swsetup_r+0x62>
 80184e0:	06da      	lsls	r2, r3, #27
 80184e2:	d407      	bmi.n	80184f4 <__swsetup_r+0x30>
 80184e4:	2209      	movs	r2, #9
 80184e6:	602a      	str	r2, [r5, #0]
 80184e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184ec:	81a3      	strh	r3, [r4, #12]
 80184ee:	f04f 30ff 	mov.w	r0, #4294967295
 80184f2:	e033      	b.n	801855c <__swsetup_r+0x98>
 80184f4:	0758      	lsls	r0, r3, #29
 80184f6:	d512      	bpl.n	801851e <__swsetup_r+0x5a>
 80184f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80184fa:	b141      	cbz	r1, 801850e <__swsetup_r+0x4a>
 80184fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018500:	4299      	cmp	r1, r3
 8018502:	d002      	beq.n	801850a <__swsetup_r+0x46>
 8018504:	4628      	mov	r0, r5
 8018506:	f000 f971 	bl	80187ec <_free_r>
 801850a:	2300      	movs	r3, #0
 801850c:	6363      	str	r3, [r4, #52]	@ 0x34
 801850e:	89a3      	ldrh	r3, [r4, #12]
 8018510:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018514:	81a3      	strh	r3, [r4, #12]
 8018516:	2300      	movs	r3, #0
 8018518:	6063      	str	r3, [r4, #4]
 801851a:	6923      	ldr	r3, [r4, #16]
 801851c:	6023      	str	r3, [r4, #0]
 801851e:	89a3      	ldrh	r3, [r4, #12]
 8018520:	f043 0308 	orr.w	r3, r3, #8
 8018524:	81a3      	strh	r3, [r4, #12]
 8018526:	6923      	ldr	r3, [r4, #16]
 8018528:	b94b      	cbnz	r3, 801853e <__swsetup_r+0x7a>
 801852a:	89a3      	ldrh	r3, [r4, #12]
 801852c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018534:	d003      	beq.n	801853e <__swsetup_r+0x7a>
 8018536:	4621      	mov	r1, r4
 8018538:	4628      	mov	r0, r5
 801853a:	f000 fd71 	bl	8019020 <__smakebuf_r>
 801853e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018542:	f013 0201 	ands.w	r2, r3, #1
 8018546:	d00a      	beq.n	801855e <__swsetup_r+0x9a>
 8018548:	2200      	movs	r2, #0
 801854a:	60a2      	str	r2, [r4, #8]
 801854c:	6962      	ldr	r2, [r4, #20]
 801854e:	4252      	negs	r2, r2
 8018550:	61a2      	str	r2, [r4, #24]
 8018552:	6922      	ldr	r2, [r4, #16]
 8018554:	b942      	cbnz	r2, 8018568 <__swsetup_r+0xa4>
 8018556:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801855a:	d1c5      	bne.n	80184e8 <__swsetup_r+0x24>
 801855c:	bd38      	pop	{r3, r4, r5, pc}
 801855e:	0799      	lsls	r1, r3, #30
 8018560:	bf58      	it	pl
 8018562:	6962      	ldrpl	r2, [r4, #20]
 8018564:	60a2      	str	r2, [r4, #8]
 8018566:	e7f4      	b.n	8018552 <__swsetup_r+0x8e>
 8018568:	2000      	movs	r0, #0
 801856a:	e7f7      	b.n	801855c <__swsetup_r+0x98>
 801856c:	200022b0 	.word	0x200022b0

08018570 <memcmp>:
 8018570:	b510      	push	{r4, lr}
 8018572:	3901      	subs	r1, #1
 8018574:	4402      	add	r2, r0
 8018576:	4290      	cmp	r0, r2
 8018578:	d101      	bne.n	801857e <memcmp+0xe>
 801857a:	2000      	movs	r0, #0
 801857c:	e005      	b.n	801858a <memcmp+0x1a>
 801857e:	7803      	ldrb	r3, [r0, #0]
 8018580:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018584:	42a3      	cmp	r3, r4
 8018586:	d001      	beq.n	801858c <memcmp+0x1c>
 8018588:	1b18      	subs	r0, r3, r4
 801858a:	bd10      	pop	{r4, pc}
 801858c:	3001      	adds	r0, #1
 801858e:	e7f2      	b.n	8018576 <memcmp+0x6>

08018590 <memmove>:
 8018590:	4288      	cmp	r0, r1
 8018592:	b510      	push	{r4, lr}
 8018594:	eb01 0402 	add.w	r4, r1, r2
 8018598:	d902      	bls.n	80185a0 <memmove+0x10>
 801859a:	4284      	cmp	r4, r0
 801859c:	4623      	mov	r3, r4
 801859e:	d807      	bhi.n	80185b0 <memmove+0x20>
 80185a0:	1e43      	subs	r3, r0, #1
 80185a2:	42a1      	cmp	r1, r4
 80185a4:	d008      	beq.n	80185b8 <memmove+0x28>
 80185a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80185ae:	e7f8      	b.n	80185a2 <memmove+0x12>
 80185b0:	4402      	add	r2, r0
 80185b2:	4601      	mov	r1, r0
 80185b4:	428a      	cmp	r2, r1
 80185b6:	d100      	bne.n	80185ba <memmove+0x2a>
 80185b8:	bd10      	pop	{r4, pc}
 80185ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80185c2:	e7f7      	b.n	80185b4 <memmove+0x24>

080185c4 <memset>:
 80185c4:	4402      	add	r2, r0
 80185c6:	4603      	mov	r3, r0
 80185c8:	4293      	cmp	r3, r2
 80185ca:	d100      	bne.n	80185ce <memset+0xa>
 80185cc:	4770      	bx	lr
 80185ce:	f803 1b01 	strb.w	r1, [r3], #1
 80185d2:	e7f9      	b.n	80185c8 <memset+0x4>

080185d4 <strchr>:
 80185d4:	b2c9      	uxtb	r1, r1
 80185d6:	4603      	mov	r3, r0
 80185d8:	4618      	mov	r0, r3
 80185da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185de:	b112      	cbz	r2, 80185e6 <strchr+0x12>
 80185e0:	428a      	cmp	r2, r1
 80185e2:	d1f9      	bne.n	80185d8 <strchr+0x4>
 80185e4:	4770      	bx	lr
 80185e6:	2900      	cmp	r1, #0
 80185e8:	bf18      	it	ne
 80185ea:	2000      	movne	r0, #0
 80185ec:	4770      	bx	lr

080185ee <strncmp>:
 80185ee:	b510      	push	{r4, lr}
 80185f0:	b16a      	cbz	r2, 801860e <strncmp+0x20>
 80185f2:	3901      	subs	r1, #1
 80185f4:	1884      	adds	r4, r0, r2
 80185f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80185fe:	429a      	cmp	r2, r3
 8018600:	d103      	bne.n	801860a <strncmp+0x1c>
 8018602:	42a0      	cmp	r0, r4
 8018604:	d001      	beq.n	801860a <strncmp+0x1c>
 8018606:	2a00      	cmp	r2, #0
 8018608:	d1f5      	bne.n	80185f6 <strncmp+0x8>
 801860a:	1ad0      	subs	r0, r2, r3
 801860c:	bd10      	pop	{r4, pc}
 801860e:	4610      	mov	r0, r2
 8018610:	e7fc      	b.n	801860c <strncmp+0x1e>

08018612 <strncpy>:
 8018612:	b510      	push	{r4, lr}
 8018614:	3901      	subs	r1, #1
 8018616:	4603      	mov	r3, r0
 8018618:	b132      	cbz	r2, 8018628 <strncpy+0x16>
 801861a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801861e:	f803 4b01 	strb.w	r4, [r3], #1
 8018622:	3a01      	subs	r2, #1
 8018624:	2c00      	cmp	r4, #0
 8018626:	d1f7      	bne.n	8018618 <strncpy+0x6>
 8018628:	441a      	add	r2, r3
 801862a:	2100      	movs	r1, #0
 801862c:	4293      	cmp	r3, r2
 801862e:	d100      	bne.n	8018632 <strncpy+0x20>
 8018630:	bd10      	pop	{r4, pc}
 8018632:	f803 1b01 	strb.w	r1, [r3], #1
 8018636:	e7f9      	b.n	801862c <strncpy+0x1a>

08018638 <strstr>:
 8018638:	780a      	ldrb	r2, [r1, #0]
 801863a:	b570      	push	{r4, r5, r6, lr}
 801863c:	b96a      	cbnz	r2, 801865a <strstr+0x22>
 801863e:	bd70      	pop	{r4, r5, r6, pc}
 8018640:	429a      	cmp	r2, r3
 8018642:	d109      	bne.n	8018658 <strstr+0x20>
 8018644:	460c      	mov	r4, r1
 8018646:	4605      	mov	r5, r0
 8018648:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801864c:	2b00      	cmp	r3, #0
 801864e:	d0f6      	beq.n	801863e <strstr+0x6>
 8018650:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8018654:	429e      	cmp	r6, r3
 8018656:	d0f7      	beq.n	8018648 <strstr+0x10>
 8018658:	3001      	adds	r0, #1
 801865a:	7803      	ldrb	r3, [r0, #0]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d1ef      	bne.n	8018640 <strstr+0x8>
 8018660:	4618      	mov	r0, r3
 8018662:	e7ec      	b.n	801863e <strstr+0x6>

08018664 <_close_r>:
 8018664:	b538      	push	{r3, r4, r5, lr}
 8018666:	4d06      	ldr	r5, [pc, #24]	@ (8018680 <_close_r+0x1c>)
 8018668:	2300      	movs	r3, #0
 801866a:	4604      	mov	r4, r0
 801866c:	4608      	mov	r0, r1
 801866e:	602b      	str	r3, [r5, #0]
 8018670:	f7ea fad9 	bl	8002c26 <_close>
 8018674:	1c43      	adds	r3, r0, #1
 8018676:	d102      	bne.n	801867e <_close_r+0x1a>
 8018678:	682b      	ldr	r3, [r5, #0]
 801867a:	b103      	cbz	r3, 801867e <_close_r+0x1a>
 801867c:	6023      	str	r3, [r4, #0]
 801867e:	bd38      	pop	{r3, r4, r5, pc}
 8018680:	20010760 	.word	0x20010760

08018684 <_lseek_r>:
 8018684:	b538      	push	{r3, r4, r5, lr}
 8018686:	4d07      	ldr	r5, [pc, #28]	@ (80186a4 <_lseek_r+0x20>)
 8018688:	4604      	mov	r4, r0
 801868a:	4608      	mov	r0, r1
 801868c:	4611      	mov	r1, r2
 801868e:	2200      	movs	r2, #0
 8018690:	602a      	str	r2, [r5, #0]
 8018692:	461a      	mov	r2, r3
 8018694:	f7ea faee 	bl	8002c74 <_lseek>
 8018698:	1c43      	adds	r3, r0, #1
 801869a:	d102      	bne.n	80186a2 <_lseek_r+0x1e>
 801869c:	682b      	ldr	r3, [r5, #0]
 801869e:	b103      	cbz	r3, 80186a2 <_lseek_r+0x1e>
 80186a0:	6023      	str	r3, [r4, #0]
 80186a2:	bd38      	pop	{r3, r4, r5, pc}
 80186a4:	20010760 	.word	0x20010760

080186a8 <_read_r>:
 80186a8:	b538      	push	{r3, r4, r5, lr}
 80186aa:	4d07      	ldr	r5, [pc, #28]	@ (80186c8 <_read_r+0x20>)
 80186ac:	4604      	mov	r4, r0
 80186ae:	4608      	mov	r0, r1
 80186b0:	4611      	mov	r1, r2
 80186b2:	2200      	movs	r2, #0
 80186b4:	602a      	str	r2, [r5, #0]
 80186b6:	461a      	mov	r2, r3
 80186b8:	f7ea fa7c 	bl	8002bb4 <_read>
 80186bc:	1c43      	adds	r3, r0, #1
 80186be:	d102      	bne.n	80186c6 <_read_r+0x1e>
 80186c0:	682b      	ldr	r3, [r5, #0]
 80186c2:	b103      	cbz	r3, 80186c6 <_read_r+0x1e>
 80186c4:	6023      	str	r3, [r4, #0]
 80186c6:	bd38      	pop	{r3, r4, r5, pc}
 80186c8:	20010760 	.word	0x20010760

080186cc <_sbrk_r>:
 80186cc:	b538      	push	{r3, r4, r5, lr}
 80186ce:	4d06      	ldr	r5, [pc, #24]	@ (80186e8 <_sbrk_r+0x1c>)
 80186d0:	2300      	movs	r3, #0
 80186d2:	4604      	mov	r4, r0
 80186d4:	4608      	mov	r0, r1
 80186d6:	602b      	str	r3, [r5, #0]
 80186d8:	f7ea fada 	bl	8002c90 <_sbrk>
 80186dc:	1c43      	adds	r3, r0, #1
 80186de:	d102      	bne.n	80186e6 <_sbrk_r+0x1a>
 80186e0:	682b      	ldr	r3, [r5, #0]
 80186e2:	b103      	cbz	r3, 80186e6 <_sbrk_r+0x1a>
 80186e4:	6023      	str	r3, [r4, #0]
 80186e6:	bd38      	pop	{r3, r4, r5, pc}
 80186e8:	20010760 	.word	0x20010760

080186ec <_write_r>:
 80186ec:	b538      	push	{r3, r4, r5, lr}
 80186ee:	4d07      	ldr	r5, [pc, #28]	@ (801870c <_write_r+0x20>)
 80186f0:	4604      	mov	r4, r0
 80186f2:	4608      	mov	r0, r1
 80186f4:	4611      	mov	r1, r2
 80186f6:	2200      	movs	r2, #0
 80186f8:	602a      	str	r2, [r5, #0]
 80186fa:	461a      	mov	r2, r3
 80186fc:	f7ea fa77 	bl	8002bee <_write>
 8018700:	1c43      	adds	r3, r0, #1
 8018702:	d102      	bne.n	801870a <_write_r+0x1e>
 8018704:	682b      	ldr	r3, [r5, #0]
 8018706:	b103      	cbz	r3, 801870a <_write_r+0x1e>
 8018708:	6023      	str	r3, [r4, #0]
 801870a:	bd38      	pop	{r3, r4, r5, pc}
 801870c:	20010760 	.word	0x20010760

08018710 <__errno>:
 8018710:	4b01      	ldr	r3, [pc, #4]	@ (8018718 <__errno+0x8>)
 8018712:	6818      	ldr	r0, [r3, #0]
 8018714:	4770      	bx	lr
 8018716:	bf00      	nop
 8018718:	200022b0 	.word	0x200022b0

0801871c <__libc_init_array>:
 801871c:	b570      	push	{r4, r5, r6, lr}
 801871e:	4d0d      	ldr	r5, [pc, #52]	@ (8018754 <__libc_init_array+0x38>)
 8018720:	4c0d      	ldr	r4, [pc, #52]	@ (8018758 <__libc_init_array+0x3c>)
 8018722:	1b64      	subs	r4, r4, r5
 8018724:	10a4      	asrs	r4, r4, #2
 8018726:	2600      	movs	r6, #0
 8018728:	42a6      	cmp	r6, r4
 801872a:	d109      	bne.n	8018740 <__libc_init_array+0x24>
 801872c:	4d0b      	ldr	r5, [pc, #44]	@ (801875c <__libc_init_array+0x40>)
 801872e:	4c0c      	ldr	r4, [pc, #48]	@ (8018760 <__libc_init_array+0x44>)
 8018730:	f001 fbd4 	bl	8019edc <_init>
 8018734:	1b64      	subs	r4, r4, r5
 8018736:	10a4      	asrs	r4, r4, #2
 8018738:	2600      	movs	r6, #0
 801873a:	42a6      	cmp	r6, r4
 801873c:	d105      	bne.n	801874a <__libc_init_array+0x2e>
 801873e:	bd70      	pop	{r4, r5, r6, pc}
 8018740:	f855 3b04 	ldr.w	r3, [r5], #4
 8018744:	4798      	blx	r3
 8018746:	3601      	adds	r6, #1
 8018748:	e7ee      	b.n	8018728 <__libc_init_array+0xc>
 801874a:	f855 3b04 	ldr.w	r3, [r5], #4
 801874e:	4798      	blx	r3
 8018750:	3601      	adds	r6, #1
 8018752:	e7f2      	b.n	801873a <__libc_init_array+0x1e>
 8018754:	0801b83c 	.word	0x0801b83c
 8018758:	0801b83c 	.word	0x0801b83c
 801875c:	0801b83c 	.word	0x0801b83c
 8018760:	0801b844 	.word	0x0801b844

08018764 <__retarget_lock_init_recursive>:
 8018764:	4770      	bx	lr

08018766 <__retarget_lock_acquire_recursive>:
 8018766:	4770      	bx	lr

08018768 <__retarget_lock_release_recursive>:
 8018768:	4770      	bx	lr

0801876a <strcpy>:
 801876a:	4603      	mov	r3, r0
 801876c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018770:	f803 2b01 	strb.w	r2, [r3], #1
 8018774:	2a00      	cmp	r2, #0
 8018776:	d1f9      	bne.n	801876c <strcpy+0x2>
 8018778:	4770      	bx	lr

0801877a <memcpy>:
 801877a:	440a      	add	r2, r1
 801877c:	4291      	cmp	r1, r2
 801877e:	f100 33ff 	add.w	r3, r0, #4294967295
 8018782:	d100      	bne.n	8018786 <memcpy+0xc>
 8018784:	4770      	bx	lr
 8018786:	b510      	push	{r4, lr}
 8018788:	f811 4b01 	ldrb.w	r4, [r1], #1
 801878c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018790:	4291      	cmp	r1, r2
 8018792:	d1f9      	bne.n	8018788 <memcpy+0xe>
 8018794:	bd10      	pop	{r4, pc}
	...

08018798 <__assert_func>:
 8018798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801879a:	4614      	mov	r4, r2
 801879c:	461a      	mov	r2, r3
 801879e:	4b09      	ldr	r3, [pc, #36]	@ (80187c4 <__assert_func+0x2c>)
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	4605      	mov	r5, r0
 80187a4:	68d8      	ldr	r0, [r3, #12]
 80187a6:	b14c      	cbz	r4, 80187bc <__assert_func+0x24>
 80187a8:	4b07      	ldr	r3, [pc, #28]	@ (80187c8 <__assert_func+0x30>)
 80187aa:	9100      	str	r1, [sp, #0]
 80187ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80187b0:	4906      	ldr	r1, [pc, #24]	@ (80187cc <__assert_func+0x34>)
 80187b2:	462b      	mov	r3, r5
 80187b4:	f000 fbfc 	bl	8018fb0 <fiprintf>
 80187b8:	f000 fc90 	bl	80190dc <abort>
 80187bc:	4b04      	ldr	r3, [pc, #16]	@ (80187d0 <__assert_func+0x38>)
 80187be:	461c      	mov	r4, r3
 80187c0:	e7f3      	b.n	80187aa <__assert_func+0x12>
 80187c2:	bf00      	nop
 80187c4:	200022b0 	.word	0x200022b0
 80187c8:	0801b2f3 	.word	0x0801b2f3
 80187cc:	0801b300 	.word	0x0801b300
 80187d0:	0801b32e 	.word	0x0801b32e

080187d4 <__env_lock>:
 80187d4:	4801      	ldr	r0, [pc, #4]	@ (80187dc <__env_lock+0x8>)
 80187d6:	f7ff bfc6 	b.w	8018766 <__retarget_lock_acquire_recursive>
 80187da:	bf00      	nop
 80187dc:	20010764 	.word	0x20010764

080187e0 <__env_unlock>:
 80187e0:	4801      	ldr	r0, [pc, #4]	@ (80187e8 <__env_unlock+0x8>)
 80187e2:	f7ff bfc1 	b.w	8018768 <__retarget_lock_release_recursive>
 80187e6:	bf00      	nop
 80187e8:	20010764 	.word	0x20010764

080187ec <_free_r>:
 80187ec:	b538      	push	{r3, r4, r5, lr}
 80187ee:	4605      	mov	r5, r0
 80187f0:	2900      	cmp	r1, #0
 80187f2:	d041      	beq.n	8018878 <_free_r+0x8c>
 80187f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187f8:	1f0c      	subs	r4, r1, #4
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	bfb8      	it	lt
 80187fe:	18e4      	addlt	r4, r4, r3
 8018800:	f7ff fb2a 	bl	8017e58 <__malloc_lock>
 8018804:	4a1d      	ldr	r2, [pc, #116]	@ (801887c <_free_r+0x90>)
 8018806:	6813      	ldr	r3, [r2, #0]
 8018808:	b933      	cbnz	r3, 8018818 <_free_r+0x2c>
 801880a:	6063      	str	r3, [r4, #4]
 801880c:	6014      	str	r4, [r2, #0]
 801880e:	4628      	mov	r0, r5
 8018810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018814:	f7ff bb26 	b.w	8017e64 <__malloc_unlock>
 8018818:	42a3      	cmp	r3, r4
 801881a:	d908      	bls.n	801882e <_free_r+0x42>
 801881c:	6820      	ldr	r0, [r4, #0]
 801881e:	1821      	adds	r1, r4, r0
 8018820:	428b      	cmp	r3, r1
 8018822:	bf01      	itttt	eq
 8018824:	6819      	ldreq	r1, [r3, #0]
 8018826:	685b      	ldreq	r3, [r3, #4]
 8018828:	1809      	addeq	r1, r1, r0
 801882a:	6021      	streq	r1, [r4, #0]
 801882c:	e7ed      	b.n	801880a <_free_r+0x1e>
 801882e:	461a      	mov	r2, r3
 8018830:	685b      	ldr	r3, [r3, #4]
 8018832:	b10b      	cbz	r3, 8018838 <_free_r+0x4c>
 8018834:	42a3      	cmp	r3, r4
 8018836:	d9fa      	bls.n	801882e <_free_r+0x42>
 8018838:	6811      	ldr	r1, [r2, #0]
 801883a:	1850      	adds	r0, r2, r1
 801883c:	42a0      	cmp	r0, r4
 801883e:	d10b      	bne.n	8018858 <_free_r+0x6c>
 8018840:	6820      	ldr	r0, [r4, #0]
 8018842:	4401      	add	r1, r0
 8018844:	1850      	adds	r0, r2, r1
 8018846:	4283      	cmp	r3, r0
 8018848:	6011      	str	r1, [r2, #0]
 801884a:	d1e0      	bne.n	801880e <_free_r+0x22>
 801884c:	6818      	ldr	r0, [r3, #0]
 801884e:	685b      	ldr	r3, [r3, #4]
 8018850:	6053      	str	r3, [r2, #4]
 8018852:	4408      	add	r0, r1
 8018854:	6010      	str	r0, [r2, #0]
 8018856:	e7da      	b.n	801880e <_free_r+0x22>
 8018858:	d902      	bls.n	8018860 <_free_r+0x74>
 801885a:	230c      	movs	r3, #12
 801885c:	602b      	str	r3, [r5, #0]
 801885e:	e7d6      	b.n	801880e <_free_r+0x22>
 8018860:	6820      	ldr	r0, [r4, #0]
 8018862:	1821      	adds	r1, r4, r0
 8018864:	428b      	cmp	r3, r1
 8018866:	bf04      	itt	eq
 8018868:	6819      	ldreq	r1, [r3, #0]
 801886a:	685b      	ldreq	r3, [r3, #4]
 801886c:	6063      	str	r3, [r4, #4]
 801886e:	bf04      	itt	eq
 8018870:	1809      	addeq	r1, r1, r0
 8018872:	6021      	streq	r1, [r4, #0]
 8018874:	6054      	str	r4, [r2, #4]
 8018876:	e7ca      	b.n	801880e <_free_r+0x22>
 8018878:	bd38      	pop	{r3, r4, r5, pc}
 801887a:	bf00      	nop
 801887c:	20010620 	.word	0x20010620

08018880 <_malloc_usable_size_r>:
 8018880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018884:	1f18      	subs	r0, r3, #4
 8018886:	2b00      	cmp	r3, #0
 8018888:	bfbc      	itt	lt
 801888a:	580b      	ldrlt	r3, [r1, r0]
 801888c:	18c0      	addlt	r0, r0, r3
 801888e:	4770      	bx	lr

08018890 <__ssputs_r>:
 8018890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018894:	688e      	ldr	r6, [r1, #8]
 8018896:	461f      	mov	r7, r3
 8018898:	42be      	cmp	r6, r7
 801889a:	680b      	ldr	r3, [r1, #0]
 801889c:	4682      	mov	sl, r0
 801889e:	460c      	mov	r4, r1
 80188a0:	4690      	mov	r8, r2
 80188a2:	d82d      	bhi.n	8018900 <__ssputs_r+0x70>
 80188a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80188a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80188ac:	d026      	beq.n	80188fc <__ssputs_r+0x6c>
 80188ae:	6965      	ldr	r5, [r4, #20]
 80188b0:	6909      	ldr	r1, [r1, #16]
 80188b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80188b6:	eba3 0901 	sub.w	r9, r3, r1
 80188ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80188be:	1c7b      	adds	r3, r7, #1
 80188c0:	444b      	add	r3, r9
 80188c2:	106d      	asrs	r5, r5, #1
 80188c4:	429d      	cmp	r5, r3
 80188c6:	bf38      	it	cc
 80188c8:	461d      	movcc	r5, r3
 80188ca:	0553      	lsls	r3, r2, #21
 80188cc:	d527      	bpl.n	801891e <__ssputs_r+0x8e>
 80188ce:	4629      	mov	r1, r5
 80188d0:	f7ff fa42 	bl	8017d58 <_malloc_r>
 80188d4:	4606      	mov	r6, r0
 80188d6:	b360      	cbz	r0, 8018932 <__ssputs_r+0xa2>
 80188d8:	6921      	ldr	r1, [r4, #16]
 80188da:	464a      	mov	r2, r9
 80188dc:	f7ff ff4d 	bl	801877a <memcpy>
 80188e0:	89a3      	ldrh	r3, [r4, #12]
 80188e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80188e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80188ea:	81a3      	strh	r3, [r4, #12]
 80188ec:	6126      	str	r6, [r4, #16]
 80188ee:	6165      	str	r5, [r4, #20]
 80188f0:	444e      	add	r6, r9
 80188f2:	eba5 0509 	sub.w	r5, r5, r9
 80188f6:	6026      	str	r6, [r4, #0]
 80188f8:	60a5      	str	r5, [r4, #8]
 80188fa:	463e      	mov	r6, r7
 80188fc:	42be      	cmp	r6, r7
 80188fe:	d900      	bls.n	8018902 <__ssputs_r+0x72>
 8018900:	463e      	mov	r6, r7
 8018902:	6820      	ldr	r0, [r4, #0]
 8018904:	4632      	mov	r2, r6
 8018906:	4641      	mov	r1, r8
 8018908:	f7ff fe42 	bl	8018590 <memmove>
 801890c:	68a3      	ldr	r3, [r4, #8]
 801890e:	1b9b      	subs	r3, r3, r6
 8018910:	60a3      	str	r3, [r4, #8]
 8018912:	6823      	ldr	r3, [r4, #0]
 8018914:	4433      	add	r3, r6
 8018916:	6023      	str	r3, [r4, #0]
 8018918:	2000      	movs	r0, #0
 801891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801891e:	462a      	mov	r2, r5
 8018920:	f7ff fb1a 	bl	8017f58 <_realloc_r>
 8018924:	4606      	mov	r6, r0
 8018926:	2800      	cmp	r0, #0
 8018928:	d1e0      	bne.n	80188ec <__ssputs_r+0x5c>
 801892a:	6921      	ldr	r1, [r4, #16]
 801892c:	4650      	mov	r0, sl
 801892e:	f7ff ff5d 	bl	80187ec <_free_r>
 8018932:	230c      	movs	r3, #12
 8018934:	f8ca 3000 	str.w	r3, [sl]
 8018938:	89a3      	ldrh	r3, [r4, #12]
 801893a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801893e:	81a3      	strh	r3, [r4, #12]
 8018940:	f04f 30ff 	mov.w	r0, #4294967295
 8018944:	e7e9      	b.n	801891a <__ssputs_r+0x8a>
	...

08018948 <_svfiprintf_r>:
 8018948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801894c:	4698      	mov	r8, r3
 801894e:	898b      	ldrh	r3, [r1, #12]
 8018950:	061b      	lsls	r3, r3, #24
 8018952:	b09d      	sub	sp, #116	@ 0x74
 8018954:	4607      	mov	r7, r0
 8018956:	460d      	mov	r5, r1
 8018958:	4614      	mov	r4, r2
 801895a:	d510      	bpl.n	801897e <_svfiprintf_r+0x36>
 801895c:	690b      	ldr	r3, [r1, #16]
 801895e:	b973      	cbnz	r3, 801897e <_svfiprintf_r+0x36>
 8018960:	2140      	movs	r1, #64	@ 0x40
 8018962:	f7ff f9f9 	bl	8017d58 <_malloc_r>
 8018966:	6028      	str	r0, [r5, #0]
 8018968:	6128      	str	r0, [r5, #16]
 801896a:	b930      	cbnz	r0, 801897a <_svfiprintf_r+0x32>
 801896c:	230c      	movs	r3, #12
 801896e:	603b      	str	r3, [r7, #0]
 8018970:	f04f 30ff 	mov.w	r0, #4294967295
 8018974:	b01d      	add	sp, #116	@ 0x74
 8018976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801897a:	2340      	movs	r3, #64	@ 0x40
 801897c:	616b      	str	r3, [r5, #20]
 801897e:	2300      	movs	r3, #0
 8018980:	9309      	str	r3, [sp, #36]	@ 0x24
 8018982:	2320      	movs	r3, #32
 8018984:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018988:	f8cd 800c 	str.w	r8, [sp, #12]
 801898c:	2330      	movs	r3, #48	@ 0x30
 801898e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018b2c <_svfiprintf_r+0x1e4>
 8018992:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018996:	f04f 0901 	mov.w	r9, #1
 801899a:	4623      	mov	r3, r4
 801899c:	469a      	mov	sl, r3
 801899e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80189a2:	b10a      	cbz	r2, 80189a8 <_svfiprintf_r+0x60>
 80189a4:	2a25      	cmp	r2, #37	@ 0x25
 80189a6:	d1f9      	bne.n	801899c <_svfiprintf_r+0x54>
 80189a8:	ebba 0b04 	subs.w	fp, sl, r4
 80189ac:	d00b      	beq.n	80189c6 <_svfiprintf_r+0x7e>
 80189ae:	465b      	mov	r3, fp
 80189b0:	4622      	mov	r2, r4
 80189b2:	4629      	mov	r1, r5
 80189b4:	4638      	mov	r0, r7
 80189b6:	f7ff ff6b 	bl	8018890 <__ssputs_r>
 80189ba:	3001      	adds	r0, #1
 80189bc:	f000 80a7 	beq.w	8018b0e <_svfiprintf_r+0x1c6>
 80189c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80189c2:	445a      	add	r2, fp
 80189c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80189c6:	f89a 3000 	ldrb.w	r3, [sl]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	f000 809f 	beq.w	8018b0e <_svfiprintf_r+0x1c6>
 80189d0:	2300      	movs	r3, #0
 80189d2:	f04f 32ff 	mov.w	r2, #4294967295
 80189d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189da:	f10a 0a01 	add.w	sl, sl, #1
 80189de:	9304      	str	r3, [sp, #16]
 80189e0:	9307      	str	r3, [sp, #28]
 80189e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80189e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80189e8:	4654      	mov	r4, sl
 80189ea:	2205      	movs	r2, #5
 80189ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189f0:	484e      	ldr	r0, [pc, #312]	@ (8018b2c <_svfiprintf_r+0x1e4>)
 80189f2:	f7e7 fc1d 	bl	8000230 <memchr>
 80189f6:	9a04      	ldr	r2, [sp, #16]
 80189f8:	b9d8      	cbnz	r0, 8018a32 <_svfiprintf_r+0xea>
 80189fa:	06d0      	lsls	r0, r2, #27
 80189fc:	bf44      	itt	mi
 80189fe:	2320      	movmi	r3, #32
 8018a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018a04:	0711      	lsls	r1, r2, #28
 8018a06:	bf44      	itt	mi
 8018a08:	232b      	movmi	r3, #43	@ 0x2b
 8018a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8018a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a14:	d015      	beq.n	8018a42 <_svfiprintf_r+0xfa>
 8018a16:	9a07      	ldr	r2, [sp, #28]
 8018a18:	4654      	mov	r4, sl
 8018a1a:	2000      	movs	r0, #0
 8018a1c:	f04f 0c0a 	mov.w	ip, #10
 8018a20:	4621      	mov	r1, r4
 8018a22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a26:	3b30      	subs	r3, #48	@ 0x30
 8018a28:	2b09      	cmp	r3, #9
 8018a2a:	d94b      	bls.n	8018ac4 <_svfiprintf_r+0x17c>
 8018a2c:	b1b0      	cbz	r0, 8018a5c <_svfiprintf_r+0x114>
 8018a2e:	9207      	str	r2, [sp, #28]
 8018a30:	e014      	b.n	8018a5c <_svfiprintf_r+0x114>
 8018a32:	eba0 0308 	sub.w	r3, r0, r8
 8018a36:	fa09 f303 	lsl.w	r3, r9, r3
 8018a3a:	4313      	orrs	r3, r2
 8018a3c:	9304      	str	r3, [sp, #16]
 8018a3e:	46a2      	mov	sl, r4
 8018a40:	e7d2      	b.n	80189e8 <_svfiprintf_r+0xa0>
 8018a42:	9b03      	ldr	r3, [sp, #12]
 8018a44:	1d19      	adds	r1, r3, #4
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	9103      	str	r1, [sp, #12]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	bfbb      	ittet	lt
 8018a4e:	425b      	neglt	r3, r3
 8018a50:	f042 0202 	orrlt.w	r2, r2, #2
 8018a54:	9307      	strge	r3, [sp, #28]
 8018a56:	9307      	strlt	r3, [sp, #28]
 8018a58:	bfb8      	it	lt
 8018a5a:	9204      	strlt	r2, [sp, #16]
 8018a5c:	7823      	ldrb	r3, [r4, #0]
 8018a5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018a60:	d10a      	bne.n	8018a78 <_svfiprintf_r+0x130>
 8018a62:	7863      	ldrb	r3, [r4, #1]
 8018a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8018a66:	d132      	bne.n	8018ace <_svfiprintf_r+0x186>
 8018a68:	9b03      	ldr	r3, [sp, #12]
 8018a6a:	1d1a      	adds	r2, r3, #4
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	9203      	str	r2, [sp, #12]
 8018a70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018a74:	3402      	adds	r4, #2
 8018a76:	9305      	str	r3, [sp, #20]
 8018a78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018b3c <_svfiprintf_r+0x1f4>
 8018a7c:	7821      	ldrb	r1, [r4, #0]
 8018a7e:	2203      	movs	r2, #3
 8018a80:	4650      	mov	r0, sl
 8018a82:	f7e7 fbd5 	bl	8000230 <memchr>
 8018a86:	b138      	cbz	r0, 8018a98 <_svfiprintf_r+0x150>
 8018a88:	9b04      	ldr	r3, [sp, #16]
 8018a8a:	eba0 000a 	sub.w	r0, r0, sl
 8018a8e:	2240      	movs	r2, #64	@ 0x40
 8018a90:	4082      	lsls	r2, r0
 8018a92:	4313      	orrs	r3, r2
 8018a94:	3401      	adds	r4, #1
 8018a96:	9304      	str	r3, [sp, #16]
 8018a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a9c:	4824      	ldr	r0, [pc, #144]	@ (8018b30 <_svfiprintf_r+0x1e8>)
 8018a9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018aa2:	2206      	movs	r2, #6
 8018aa4:	f7e7 fbc4 	bl	8000230 <memchr>
 8018aa8:	2800      	cmp	r0, #0
 8018aaa:	d036      	beq.n	8018b1a <_svfiprintf_r+0x1d2>
 8018aac:	4b21      	ldr	r3, [pc, #132]	@ (8018b34 <_svfiprintf_r+0x1ec>)
 8018aae:	bb1b      	cbnz	r3, 8018af8 <_svfiprintf_r+0x1b0>
 8018ab0:	9b03      	ldr	r3, [sp, #12]
 8018ab2:	3307      	adds	r3, #7
 8018ab4:	f023 0307 	bic.w	r3, r3, #7
 8018ab8:	3308      	adds	r3, #8
 8018aba:	9303      	str	r3, [sp, #12]
 8018abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018abe:	4433      	add	r3, r6
 8018ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8018ac2:	e76a      	b.n	801899a <_svfiprintf_r+0x52>
 8018ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8018ac8:	460c      	mov	r4, r1
 8018aca:	2001      	movs	r0, #1
 8018acc:	e7a8      	b.n	8018a20 <_svfiprintf_r+0xd8>
 8018ace:	2300      	movs	r3, #0
 8018ad0:	3401      	adds	r4, #1
 8018ad2:	9305      	str	r3, [sp, #20]
 8018ad4:	4619      	mov	r1, r3
 8018ad6:	f04f 0c0a 	mov.w	ip, #10
 8018ada:	4620      	mov	r0, r4
 8018adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ae0:	3a30      	subs	r2, #48	@ 0x30
 8018ae2:	2a09      	cmp	r2, #9
 8018ae4:	d903      	bls.n	8018aee <_svfiprintf_r+0x1a6>
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d0c6      	beq.n	8018a78 <_svfiprintf_r+0x130>
 8018aea:	9105      	str	r1, [sp, #20]
 8018aec:	e7c4      	b.n	8018a78 <_svfiprintf_r+0x130>
 8018aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8018af2:	4604      	mov	r4, r0
 8018af4:	2301      	movs	r3, #1
 8018af6:	e7f0      	b.n	8018ada <_svfiprintf_r+0x192>
 8018af8:	ab03      	add	r3, sp, #12
 8018afa:	9300      	str	r3, [sp, #0]
 8018afc:	462a      	mov	r2, r5
 8018afe:	4b0e      	ldr	r3, [pc, #56]	@ (8018b38 <_svfiprintf_r+0x1f0>)
 8018b00:	a904      	add	r1, sp, #16
 8018b02:	4638      	mov	r0, r7
 8018b04:	f3af 8000 	nop.w
 8018b08:	1c42      	adds	r2, r0, #1
 8018b0a:	4606      	mov	r6, r0
 8018b0c:	d1d6      	bne.n	8018abc <_svfiprintf_r+0x174>
 8018b0e:	89ab      	ldrh	r3, [r5, #12]
 8018b10:	065b      	lsls	r3, r3, #25
 8018b12:	f53f af2d 	bmi.w	8018970 <_svfiprintf_r+0x28>
 8018b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018b18:	e72c      	b.n	8018974 <_svfiprintf_r+0x2c>
 8018b1a:	ab03      	add	r3, sp, #12
 8018b1c:	9300      	str	r3, [sp, #0]
 8018b1e:	462a      	mov	r2, r5
 8018b20:	4b05      	ldr	r3, [pc, #20]	@ (8018b38 <_svfiprintf_r+0x1f0>)
 8018b22:	a904      	add	r1, sp, #16
 8018b24:	4638      	mov	r0, r7
 8018b26:	f000 f879 	bl	8018c1c <_printf_i>
 8018b2a:	e7ed      	b.n	8018b08 <_svfiprintf_r+0x1c0>
 8018b2c:	0801b32f 	.word	0x0801b32f
 8018b30:	0801b339 	.word	0x0801b339
 8018b34:	00000000 	.word	0x00000000
 8018b38:	08018891 	.word	0x08018891
 8018b3c:	0801b335 	.word	0x0801b335

08018b40 <_printf_common>:
 8018b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b44:	4616      	mov	r6, r2
 8018b46:	4698      	mov	r8, r3
 8018b48:	688a      	ldr	r2, [r1, #8]
 8018b4a:	690b      	ldr	r3, [r1, #16]
 8018b4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018b50:	4293      	cmp	r3, r2
 8018b52:	bfb8      	it	lt
 8018b54:	4613      	movlt	r3, r2
 8018b56:	6033      	str	r3, [r6, #0]
 8018b58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018b5c:	4607      	mov	r7, r0
 8018b5e:	460c      	mov	r4, r1
 8018b60:	b10a      	cbz	r2, 8018b66 <_printf_common+0x26>
 8018b62:	3301      	adds	r3, #1
 8018b64:	6033      	str	r3, [r6, #0]
 8018b66:	6823      	ldr	r3, [r4, #0]
 8018b68:	0699      	lsls	r1, r3, #26
 8018b6a:	bf42      	ittt	mi
 8018b6c:	6833      	ldrmi	r3, [r6, #0]
 8018b6e:	3302      	addmi	r3, #2
 8018b70:	6033      	strmi	r3, [r6, #0]
 8018b72:	6825      	ldr	r5, [r4, #0]
 8018b74:	f015 0506 	ands.w	r5, r5, #6
 8018b78:	d106      	bne.n	8018b88 <_printf_common+0x48>
 8018b7a:	f104 0a19 	add.w	sl, r4, #25
 8018b7e:	68e3      	ldr	r3, [r4, #12]
 8018b80:	6832      	ldr	r2, [r6, #0]
 8018b82:	1a9b      	subs	r3, r3, r2
 8018b84:	42ab      	cmp	r3, r5
 8018b86:	dc26      	bgt.n	8018bd6 <_printf_common+0x96>
 8018b88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018b8c:	6822      	ldr	r2, [r4, #0]
 8018b8e:	3b00      	subs	r3, #0
 8018b90:	bf18      	it	ne
 8018b92:	2301      	movne	r3, #1
 8018b94:	0692      	lsls	r2, r2, #26
 8018b96:	d42b      	bmi.n	8018bf0 <_printf_common+0xb0>
 8018b98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018b9c:	4641      	mov	r1, r8
 8018b9e:	4638      	mov	r0, r7
 8018ba0:	47c8      	blx	r9
 8018ba2:	3001      	adds	r0, #1
 8018ba4:	d01e      	beq.n	8018be4 <_printf_common+0xa4>
 8018ba6:	6823      	ldr	r3, [r4, #0]
 8018ba8:	6922      	ldr	r2, [r4, #16]
 8018baa:	f003 0306 	and.w	r3, r3, #6
 8018bae:	2b04      	cmp	r3, #4
 8018bb0:	bf02      	ittt	eq
 8018bb2:	68e5      	ldreq	r5, [r4, #12]
 8018bb4:	6833      	ldreq	r3, [r6, #0]
 8018bb6:	1aed      	subeq	r5, r5, r3
 8018bb8:	68a3      	ldr	r3, [r4, #8]
 8018bba:	bf0c      	ite	eq
 8018bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018bc0:	2500      	movne	r5, #0
 8018bc2:	4293      	cmp	r3, r2
 8018bc4:	bfc4      	itt	gt
 8018bc6:	1a9b      	subgt	r3, r3, r2
 8018bc8:	18ed      	addgt	r5, r5, r3
 8018bca:	2600      	movs	r6, #0
 8018bcc:	341a      	adds	r4, #26
 8018bce:	42b5      	cmp	r5, r6
 8018bd0:	d11a      	bne.n	8018c08 <_printf_common+0xc8>
 8018bd2:	2000      	movs	r0, #0
 8018bd4:	e008      	b.n	8018be8 <_printf_common+0xa8>
 8018bd6:	2301      	movs	r3, #1
 8018bd8:	4652      	mov	r2, sl
 8018bda:	4641      	mov	r1, r8
 8018bdc:	4638      	mov	r0, r7
 8018bde:	47c8      	blx	r9
 8018be0:	3001      	adds	r0, #1
 8018be2:	d103      	bne.n	8018bec <_printf_common+0xac>
 8018be4:	f04f 30ff 	mov.w	r0, #4294967295
 8018be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bec:	3501      	adds	r5, #1
 8018bee:	e7c6      	b.n	8018b7e <_printf_common+0x3e>
 8018bf0:	18e1      	adds	r1, r4, r3
 8018bf2:	1c5a      	adds	r2, r3, #1
 8018bf4:	2030      	movs	r0, #48	@ 0x30
 8018bf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018bfa:	4422      	add	r2, r4
 8018bfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018c00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018c04:	3302      	adds	r3, #2
 8018c06:	e7c7      	b.n	8018b98 <_printf_common+0x58>
 8018c08:	2301      	movs	r3, #1
 8018c0a:	4622      	mov	r2, r4
 8018c0c:	4641      	mov	r1, r8
 8018c0e:	4638      	mov	r0, r7
 8018c10:	47c8      	blx	r9
 8018c12:	3001      	adds	r0, #1
 8018c14:	d0e6      	beq.n	8018be4 <_printf_common+0xa4>
 8018c16:	3601      	adds	r6, #1
 8018c18:	e7d9      	b.n	8018bce <_printf_common+0x8e>
	...

08018c1c <_printf_i>:
 8018c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018c20:	7e0f      	ldrb	r7, [r1, #24]
 8018c22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018c24:	2f78      	cmp	r7, #120	@ 0x78
 8018c26:	4691      	mov	r9, r2
 8018c28:	4680      	mov	r8, r0
 8018c2a:	460c      	mov	r4, r1
 8018c2c:	469a      	mov	sl, r3
 8018c2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018c32:	d807      	bhi.n	8018c44 <_printf_i+0x28>
 8018c34:	2f62      	cmp	r7, #98	@ 0x62
 8018c36:	d80a      	bhi.n	8018c4e <_printf_i+0x32>
 8018c38:	2f00      	cmp	r7, #0
 8018c3a:	f000 80d1 	beq.w	8018de0 <_printf_i+0x1c4>
 8018c3e:	2f58      	cmp	r7, #88	@ 0x58
 8018c40:	f000 80b8 	beq.w	8018db4 <_printf_i+0x198>
 8018c44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018c48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018c4c:	e03a      	b.n	8018cc4 <_printf_i+0xa8>
 8018c4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018c52:	2b15      	cmp	r3, #21
 8018c54:	d8f6      	bhi.n	8018c44 <_printf_i+0x28>
 8018c56:	a101      	add	r1, pc, #4	@ (adr r1, 8018c5c <_printf_i+0x40>)
 8018c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018c5c:	08018cb5 	.word	0x08018cb5
 8018c60:	08018cc9 	.word	0x08018cc9
 8018c64:	08018c45 	.word	0x08018c45
 8018c68:	08018c45 	.word	0x08018c45
 8018c6c:	08018c45 	.word	0x08018c45
 8018c70:	08018c45 	.word	0x08018c45
 8018c74:	08018cc9 	.word	0x08018cc9
 8018c78:	08018c45 	.word	0x08018c45
 8018c7c:	08018c45 	.word	0x08018c45
 8018c80:	08018c45 	.word	0x08018c45
 8018c84:	08018c45 	.word	0x08018c45
 8018c88:	08018dc7 	.word	0x08018dc7
 8018c8c:	08018cf3 	.word	0x08018cf3
 8018c90:	08018d81 	.word	0x08018d81
 8018c94:	08018c45 	.word	0x08018c45
 8018c98:	08018c45 	.word	0x08018c45
 8018c9c:	08018de9 	.word	0x08018de9
 8018ca0:	08018c45 	.word	0x08018c45
 8018ca4:	08018cf3 	.word	0x08018cf3
 8018ca8:	08018c45 	.word	0x08018c45
 8018cac:	08018c45 	.word	0x08018c45
 8018cb0:	08018d89 	.word	0x08018d89
 8018cb4:	6833      	ldr	r3, [r6, #0]
 8018cb6:	1d1a      	adds	r2, r3, #4
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	6032      	str	r2, [r6, #0]
 8018cbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018cc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018cc4:	2301      	movs	r3, #1
 8018cc6:	e09c      	b.n	8018e02 <_printf_i+0x1e6>
 8018cc8:	6833      	ldr	r3, [r6, #0]
 8018cca:	6820      	ldr	r0, [r4, #0]
 8018ccc:	1d19      	adds	r1, r3, #4
 8018cce:	6031      	str	r1, [r6, #0]
 8018cd0:	0606      	lsls	r6, r0, #24
 8018cd2:	d501      	bpl.n	8018cd8 <_printf_i+0xbc>
 8018cd4:	681d      	ldr	r5, [r3, #0]
 8018cd6:	e003      	b.n	8018ce0 <_printf_i+0xc4>
 8018cd8:	0645      	lsls	r5, r0, #25
 8018cda:	d5fb      	bpl.n	8018cd4 <_printf_i+0xb8>
 8018cdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018ce0:	2d00      	cmp	r5, #0
 8018ce2:	da03      	bge.n	8018cec <_printf_i+0xd0>
 8018ce4:	232d      	movs	r3, #45	@ 0x2d
 8018ce6:	426d      	negs	r5, r5
 8018ce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018cec:	4858      	ldr	r0, [pc, #352]	@ (8018e50 <_printf_i+0x234>)
 8018cee:	230a      	movs	r3, #10
 8018cf0:	e011      	b.n	8018d16 <_printf_i+0xfa>
 8018cf2:	6821      	ldr	r1, [r4, #0]
 8018cf4:	6833      	ldr	r3, [r6, #0]
 8018cf6:	0608      	lsls	r0, r1, #24
 8018cf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8018cfc:	d402      	bmi.n	8018d04 <_printf_i+0xe8>
 8018cfe:	0649      	lsls	r1, r1, #25
 8018d00:	bf48      	it	mi
 8018d02:	b2ad      	uxthmi	r5, r5
 8018d04:	2f6f      	cmp	r7, #111	@ 0x6f
 8018d06:	4852      	ldr	r0, [pc, #328]	@ (8018e50 <_printf_i+0x234>)
 8018d08:	6033      	str	r3, [r6, #0]
 8018d0a:	bf14      	ite	ne
 8018d0c:	230a      	movne	r3, #10
 8018d0e:	2308      	moveq	r3, #8
 8018d10:	2100      	movs	r1, #0
 8018d12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018d16:	6866      	ldr	r6, [r4, #4]
 8018d18:	60a6      	str	r6, [r4, #8]
 8018d1a:	2e00      	cmp	r6, #0
 8018d1c:	db05      	blt.n	8018d2a <_printf_i+0x10e>
 8018d1e:	6821      	ldr	r1, [r4, #0]
 8018d20:	432e      	orrs	r6, r5
 8018d22:	f021 0104 	bic.w	r1, r1, #4
 8018d26:	6021      	str	r1, [r4, #0]
 8018d28:	d04b      	beq.n	8018dc2 <_printf_i+0x1a6>
 8018d2a:	4616      	mov	r6, r2
 8018d2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8018d30:	fb03 5711 	mls	r7, r3, r1, r5
 8018d34:	5dc7      	ldrb	r7, [r0, r7]
 8018d36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018d3a:	462f      	mov	r7, r5
 8018d3c:	42bb      	cmp	r3, r7
 8018d3e:	460d      	mov	r5, r1
 8018d40:	d9f4      	bls.n	8018d2c <_printf_i+0x110>
 8018d42:	2b08      	cmp	r3, #8
 8018d44:	d10b      	bne.n	8018d5e <_printf_i+0x142>
 8018d46:	6823      	ldr	r3, [r4, #0]
 8018d48:	07df      	lsls	r7, r3, #31
 8018d4a:	d508      	bpl.n	8018d5e <_printf_i+0x142>
 8018d4c:	6923      	ldr	r3, [r4, #16]
 8018d4e:	6861      	ldr	r1, [r4, #4]
 8018d50:	4299      	cmp	r1, r3
 8018d52:	bfde      	ittt	le
 8018d54:	2330      	movle	r3, #48	@ 0x30
 8018d56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018d5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018d5e:	1b92      	subs	r2, r2, r6
 8018d60:	6122      	str	r2, [r4, #16]
 8018d62:	f8cd a000 	str.w	sl, [sp]
 8018d66:	464b      	mov	r3, r9
 8018d68:	aa03      	add	r2, sp, #12
 8018d6a:	4621      	mov	r1, r4
 8018d6c:	4640      	mov	r0, r8
 8018d6e:	f7ff fee7 	bl	8018b40 <_printf_common>
 8018d72:	3001      	adds	r0, #1
 8018d74:	d14a      	bne.n	8018e0c <_printf_i+0x1f0>
 8018d76:	f04f 30ff 	mov.w	r0, #4294967295
 8018d7a:	b004      	add	sp, #16
 8018d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d80:	6823      	ldr	r3, [r4, #0]
 8018d82:	f043 0320 	orr.w	r3, r3, #32
 8018d86:	6023      	str	r3, [r4, #0]
 8018d88:	4832      	ldr	r0, [pc, #200]	@ (8018e54 <_printf_i+0x238>)
 8018d8a:	2778      	movs	r7, #120	@ 0x78
 8018d8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018d90:	6823      	ldr	r3, [r4, #0]
 8018d92:	6831      	ldr	r1, [r6, #0]
 8018d94:	061f      	lsls	r7, r3, #24
 8018d96:	f851 5b04 	ldr.w	r5, [r1], #4
 8018d9a:	d402      	bmi.n	8018da2 <_printf_i+0x186>
 8018d9c:	065f      	lsls	r7, r3, #25
 8018d9e:	bf48      	it	mi
 8018da0:	b2ad      	uxthmi	r5, r5
 8018da2:	6031      	str	r1, [r6, #0]
 8018da4:	07d9      	lsls	r1, r3, #31
 8018da6:	bf44      	itt	mi
 8018da8:	f043 0320 	orrmi.w	r3, r3, #32
 8018dac:	6023      	strmi	r3, [r4, #0]
 8018dae:	b11d      	cbz	r5, 8018db8 <_printf_i+0x19c>
 8018db0:	2310      	movs	r3, #16
 8018db2:	e7ad      	b.n	8018d10 <_printf_i+0xf4>
 8018db4:	4826      	ldr	r0, [pc, #152]	@ (8018e50 <_printf_i+0x234>)
 8018db6:	e7e9      	b.n	8018d8c <_printf_i+0x170>
 8018db8:	6823      	ldr	r3, [r4, #0]
 8018dba:	f023 0320 	bic.w	r3, r3, #32
 8018dbe:	6023      	str	r3, [r4, #0]
 8018dc0:	e7f6      	b.n	8018db0 <_printf_i+0x194>
 8018dc2:	4616      	mov	r6, r2
 8018dc4:	e7bd      	b.n	8018d42 <_printf_i+0x126>
 8018dc6:	6833      	ldr	r3, [r6, #0]
 8018dc8:	6825      	ldr	r5, [r4, #0]
 8018dca:	6961      	ldr	r1, [r4, #20]
 8018dcc:	1d18      	adds	r0, r3, #4
 8018dce:	6030      	str	r0, [r6, #0]
 8018dd0:	062e      	lsls	r6, r5, #24
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	d501      	bpl.n	8018dda <_printf_i+0x1be>
 8018dd6:	6019      	str	r1, [r3, #0]
 8018dd8:	e002      	b.n	8018de0 <_printf_i+0x1c4>
 8018dda:	0668      	lsls	r0, r5, #25
 8018ddc:	d5fb      	bpl.n	8018dd6 <_printf_i+0x1ba>
 8018dde:	8019      	strh	r1, [r3, #0]
 8018de0:	2300      	movs	r3, #0
 8018de2:	6123      	str	r3, [r4, #16]
 8018de4:	4616      	mov	r6, r2
 8018de6:	e7bc      	b.n	8018d62 <_printf_i+0x146>
 8018de8:	6833      	ldr	r3, [r6, #0]
 8018dea:	1d1a      	adds	r2, r3, #4
 8018dec:	6032      	str	r2, [r6, #0]
 8018dee:	681e      	ldr	r6, [r3, #0]
 8018df0:	6862      	ldr	r2, [r4, #4]
 8018df2:	2100      	movs	r1, #0
 8018df4:	4630      	mov	r0, r6
 8018df6:	f7e7 fa1b 	bl	8000230 <memchr>
 8018dfa:	b108      	cbz	r0, 8018e00 <_printf_i+0x1e4>
 8018dfc:	1b80      	subs	r0, r0, r6
 8018dfe:	6060      	str	r0, [r4, #4]
 8018e00:	6863      	ldr	r3, [r4, #4]
 8018e02:	6123      	str	r3, [r4, #16]
 8018e04:	2300      	movs	r3, #0
 8018e06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018e0a:	e7aa      	b.n	8018d62 <_printf_i+0x146>
 8018e0c:	6923      	ldr	r3, [r4, #16]
 8018e0e:	4632      	mov	r2, r6
 8018e10:	4649      	mov	r1, r9
 8018e12:	4640      	mov	r0, r8
 8018e14:	47d0      	blx	sl
 8018e16:	3001      	adds	r0, #1
 8018e18:	d0ad      	beq.n	8018d76 <_printf_i+0x15a>
 8018e1a:	6823      	ldr	r3, [r4, #0]
 8018e1c:	079b      	lsls	r3, r3, #30
 8018e1e:	d413      	bmi.n	8018e48 <_printf_i+0x22c>
 8018e20:	68e0      	ldr	r0, [r4, #12]
 8018e22:	9b03      	ldr	r3, [sp, #12]
 8018e24:	4298      	cmp	r0, r3
 8018e26:	bfb8      	it	lt
 8018e28:	4618      	movlt	r0, r3
 8018e2a:	e7a6      	b.n	8018d7a <_printf_i+0x15e>
 8018e2c:	2301      	movs	r3, #1
 8018e2e:	4632      	mov	r2, r6
 8018e30:	4649      	mov	r1, r9
 8018e32:	4640      	mov	r0, r8
 8018e34:	47d0      	blx	sl
 8018e36:	3001      	adds	r0, #1
 8018e38:	d09d      	beq.n	8018d76 <_printf_i+0x15a>
 8018e3a:	3501      	adds	r5, #1
 8018e3c:	68e3      	ldr	r3, [r4, #12]
 8018e3e:	9903      	ldr	r1, [sp, #12]
 8018e40:	1a5b      	subs	r3, r3, r1
 8018e42:	42ab      	cmp	r3, r5
 8018e44:	dcf2      	bgt.n	8018e2c <_printf_i+0x210>
 8018e46:	e7eb      	b.n	8018e20 <_printf_i+0x204>
 8018e48:	2500      	movs	r5, #0
 8018e4a:	f104 0619 	add.w	r6, r4, #25
 8018e4e:	e7f5      	b.n	8018e3c <_printf_i+0x220>
 8018e50:	0801b340 	.word	0x0801b340
 8018e54:	0801b351 	.word	0x0801b351

08018e58 <__sflush_r>:
 8018e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e60:	0716      	lsls	r6, r2, #28
 8018e62:	4605      	mov	r5, r0
 8018e64:	460c      	mov	r4, r1
 8018e66:	d454      	bmi.n	8018f12 <__sflush_r+0xba>
 8018e68:	684b      	ldr	r3, [r1, #4]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	dc02      	bgt.n	8018e74 <__sflush_r+0x1c>
 8018e6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	dd48      	ble.n	8018f06 <__sflush_r+0xae>
 8018e74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018e76:	2e00      	cmp	r6, #0
 8018e78:	d045      	beq.n	8018f06 <__sflush_r+0xae>
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018e80:	682f      	ldr	r7, [r5, #0]
 8018e82:	6a21      	ldr	r1, [r4, #32]
 8018e84:	602b      	str	r3, [r5, #0]
 8018e86:	d030      	beq.n	8018eea <__sflush_r+0x92>
 8018e88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018e8a:	89a3      	ldrh	r3, [r4, #12]
 8018e8c:	0759      	lsls	r1, r3, #29
 8018e8e:	d505      	bpl.n	8018e9c <__sflush_r+0x44>
 8018e90:	6863      	ldr	r3, [r4, #4]
 8018e92:	1ad2      	subs	r2, r2, r3
 8018e94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018e96:	b10b      	cbz	r3, 8018e9c <__sflush_r+0x44>
 8018e98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018e9a:	1ad2      	subs	r2, r2, r3
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018ea0:	6a21      	ldr	r1, [r4, #32]
 8018ea2:	4628      	mov	r0, r5
 8018ea4:	47b0      	blx	r6
 8018ea6:	1c43      	adds	r3, r0, #1
 8018ea8:	89a3      	ldrh	r3, [r4, #12]
 8018eaa:	d106      	bne.n	8018eba <__sflush_r+0x62>
 8018eac:	6829      	ldr	r1, [r5, #0]
 8018eae:	291d      	cmp	r1, #29
 8018eb0:	d82b      	bhi.n	8018f0a <__sflush_r+0xb2>
 8018eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8018f5c <__sflush_r+0x104>)
 8018eb4:	40ca      	lsrs	r2, r1
 8018eb6:	07d6      	lsls	r6, r2, #31
 8018eb8:	d527      	bpl.n	8018f0a <__sflush_r+0xb2>
 8018eba:	2200      	movs	r2, #0
 8018ebc:	6062      	str	r2, [r4, #4]
 8018ebe:	04d9      	lsls	r1, r3, #19
 8018ec0:	6922      	ldr	r2, [r4, #16]
 8018ec2:	6022      	str	r2, [r4, #0]
 8018ec4:	d504      	bpl.n	8018ed0 <__sflush_r+0x78>
 8018ec6:	1c42      	adds	r2, r0, #1
 8018ec8:	d101      	bne.n	8018ece <__sflush_r+0x76>
 8018eca:	682b      	ldr	r3, [r5, #0]
 8018ecc:	b903      	cbnz	r3, 8018ed0 <__sflush_r+0x78>
 8018ece:	6560      	str	r0, [r4, #84]	@ 0x54
 8018ed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018ed2:	602f      	str	r7, [r5, #0]
 8018ed4:	b1b9      	cbz	r1, 8018f06 <__sflush_r+0xae>
 8018ed6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018eda:	4299      	cmp	r1, r3
 8018edc:	d002      	beq.n	8018ee4 <__sflush_r+0x8c>
 8018ede:	4628      	mov	r0, r5
 8018ee0:	f7ff fc84 	bl	80187ec <_free_r>
 8018ee4:	2300      	movs	r3, #0
 8018ee6:	6363      	str	r3, [r4, #52]	@ 0x34
 8018ee8:	e00d      	b.n	8018f06 <__sflush_r+0xae>
 8018eea:	2301      	movs	r3, #1
 8018eec:	4628      	mov	r0, r5
 8018eee:	47b0      	blx	r6
 8018ef0:	4602      	mov	r2, r0
 8018ef2:	1c50      	adds	r0, r2, #1
 8018ef4:	d1c9      	bne.n	8018e8a <__sflush_r+0x32>
 8018ef6:	682b      	ldr	r3, [r5, #0]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d0c6      	beq.n	8018e8a <__sflush_r+0x32>
 8018efc:	2b1d      	cmp	r3, #29
 8018efe:	d001      	beq.n	8018f04 <__sflush_r+0xac>
 8018f00:	2b16      	cmp	r3, #22
 8018f02:	d11e      	bne.n	8018f42 <__sflush_r+0xea>
 8018f04:	602f      	str	r7, [r5, #0]
 8018f06:	2000      	movs	r0, #0
 8018f08:	e022      	b.n	8018f50 <__sflush_r+0xf8>
 8018f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018f0e:	b21b      	sxth	r3, r3
 8018f10:	e01b      	b.n	8018f4a <__sflush_r+0xf2>
 8018f12:	690f      	ldr	r7, [r1, #16]
 8018f14:	2f00      	cmp	r7, #0
 8018f16:	d0f6      	beq.n	8018f06 <__sflush_r+0xae>
 8018f18:	0793      	lsls	r3, r2, #30
 8018f1a:	680e      	ldr	r6, [r1, #0]
 8018f1c:	bf08      	it	eq
 8018f1e:	694b      	ldreq	r3, [r1, #20]
 8018f20:	600f      	str	r7, [r1, #0]
 8018f22:	bf18      	it	ne
 8018f24:	2300      	movne	r3, #0
 8018f26:	eba6 0807 	sub.w	r8, r6, r7
 8018f2a:	608b      	str	r3, [r1, #8]
 8018f2c:	f1b8 0f00 	cmp.w	r8, #0
 8018f30:	dde9      	ble.n	8018f06 <__sflush_r+0xae>
 8018f32:	6a21      	ldr	r1, [r4, #32]
 8018f34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018f36:	4643      	mov	r3, r8
 8018f38:	463a      	mov	r2, r7
 8018f3a:	4628      	mov	r0, r5
 8018f3c:	47b0      	blx	r6
 8018f3e:	2800      	cmp	r0, #0
 8018f40:	dc08      	bgt.n	8018f54 <__sflush_r+0xfc>
 8018f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018f4a:	81a3      	strh	r3, [r4, #12]
 8018f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8018f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f54:	4407      	add	r7, r0
 8018f56:	eba8 0800 	sub.w	r8, r8, r0
 8018f5a:	e7e7      	b.n	8018f2c <__sflush_r+0xd4>
 8018f5c:	20400001 	.word	0x20400001

08018f60 <_fflush_r>:
 8018f60:	b538      	push	{r3, r4, r5, lr}
 8018f62:	690b      	ldr	r3, [r1, #16]
 8018f64:	4605      	mov	r5, r0
 8018f66:	460c      	mov	r4, r1
 8018f68:	b913      	cbnz	r3, 8018f70 <_fflush_r+0x10>
 8018f6a:	2500      	movs	r5, #0
 8018f6c:	4628      	mov	r0, r5
 8018f6e:	bd38      	pop	{r3, r4, r5, pc}
 8018f70:	b118      	cbz	r0, 8018f7a <_fflush_r+0x1a>
 8018f72:	6a03      	ldr	r3, [r0, #32]
 8018f74:	b90b      	cbnz	r3, 8018f7a <_fflush_r+0x1a>
 8018f76:	f7ff f921 	bl	80181bc <__sinit>
 8018f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d0f3      	beq.n	8018f6a <_fflush_r+0xa>
 8018f82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018f84:	07d0      	lsls	r0, r2, #31
 8018f86:	d404      	bmi.n	8018f92 <_fflush_r+0x32>
 8018f88:	0599      	lsls	r1, r3, #22
 8018f8a:	d402      	bmi.n	8018f92 <_fflush_r+0x32>
 8018f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018f8e:	f7ff fbea 	bl	8018766 <__retarget_lock_acquire_recursive>
 8018f92:	4628      	mov	r0, r5
 8018f94:	4621      	mov	r1, r4
 8018f96:	f7ff ff5f 	bl	8018e58 <__sflush_r>
 8018f9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018f9c:	07da      	lsls	r2, r3, #31
 8018f9e:	4605      	mov	r5, r0
 8018fa0:	d4e4      	bmi.n	8018f6c <_fflush_r+0xc>
 8018fa2:	89a3      	ldrh	r3, [r4, #12]
 8018fa4:	059b      	lsls	r3, r3, #22
 8018fa6:	d4e1      	bmi.n	8018f6c <_fflush_r+0xc>
 8018fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018faa:	f7ff fbdd 	bl	8018768 <__retarget_lock_release_recursive>
 8018fae:	e7dd      	b.n	8018f6c <_fflush_r+0xc>

08018fb0 <fiprintf>:
 8018fb0:	b40e      	push	{r1, r2, r3}
 8018fb2:	b503      	push	{r0, r1, lr}
 8018fb4:	4601      	mov	r1, r0
 8018fb6:	ab03      	add	r3, sp, #12
 8018fb8:	4805      	ldr	r0, [pc, #20]	@ (8018fd0 <fiprintf+0x20>)
 8018fba:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fbe:	6800      	ldr	r0, [r0, #0]
 8018fc0:	9301      	str	r3, [sp, #4]
 8018fc2:	f000 f8bb 	bl	801913c <_vfiprintf_r>
 8018fc6:	b002      	add	sp, #8
 8018fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fcc:	b003      	add	sp, #12
 8018fce:	4770      	bx	lr
 8018fd0:	200022b0 	.word	0x200022b0

08018fd4 <__swhatbuf_r>:
 8018fd4:	b570      	push	{r4, r5, r6, lr}
 8018fd6:	460c      	mov	r4, r1
 8018fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fdc:	2900      	cmp	r1, #0
 8018fde:	b096      	sub	sp, #88	@ 0x58
 8018fe0:	4615      	mov	r5, r2
 8018fe2:	461e      	mov	r6, r3
 8018fe4:	da0d      	bge.n	8019002 <__swhatbuf_r+0x2e>
 8018fe6:	89a3      	ldrh	r3, [r4, #12]
 8018fe8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018fec:	f04f 0100 	mov.w	r1, #0
 8018ff0:	bf14      	ite	ne
 8018ff2:	2340      	movne	r3, #64	@ 0x40
 8018ff4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018ff8:	2000      	movs	r0, #0
 8018ffa:	6031      	str	r1, [r6, #0]
 8018ffc:	602b      	str	r3, [r5, #0]
 8018ffe:	b016      	add	sp, #88	@ 0x58
 8019000:	bd70      	pop	{r4, r5, r6, pc}
 8019002:	466a      	mov	r2, sp
 8019004:	f000 f848 	bl	8019098 <_fstat_r>
 8019008:	2800      	cmp	r0, #0
 801900a:	dbec      	blt.n	8018fe6 <__swhatbuf_r+0x12>
 801900c:	9901      	ldr	r1, [sp, #4]
 801900e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019012:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019016:	4259      	negs	r1, r3
 8019018:	4159      	adcs	r1, r3
 801901a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801901e:	e7eb      	b.n	8018ff8 <__swhatbuf_r+0x24>

08019020 <__smakebuf_r>:
 8019020:	898b      	ldrh	r3, [r1, #12]
 8019022:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019024:	079d      	lsls	r5, r3, #30
 8019026:	4606      	mov	r6, r0
 8019028:	460c      	mov	r4, r1
 801902a:	d507      	bpl.n	801903c <__smakebuf_r+0x1c>
 801902c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019030:	6023      	str	r3, [r4, #0]
 8019032:	6123      	str	r3, [r4, #16]
 8019034:	2301      	movs	r3, #1
 8019036:	6163      	str	r3, [r4, #20]
 8019038:	b003      	add	sp, #12
 801903a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801903c:	ab01      	add	r3, sp, #4
 801903e:	466a      	mov	r2, sp
 8019040:	f7ff ffc8 	bl	8018fd4 <__swhatbuf_r>
 8019044:	9f00      	ldr	r7, [sp, #0]
 8019046:	4605      	mov	r5, r0
 8019048:	4639      	mov	r1, r7
 801904a:	4630      	mov	r0, r6
 801904c:	f7fe fe84 	bl	8017d58 <_malloc_r>
 8019050:	b948      	cbnz	r0, 8019066 <__smakebuf_r+0x46>
 8019052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019056:	059a      	lsls	r2, r3, #22
 8019058:	d4ee      	bmi.n	8019038 <__smakebuf_r+0x18>
 801905a:	f023 0303 	bic.w	r3, r3, #3
 801905e:	f043 0302 	orr.w	r3, r3, #2
 8019062:	81a3      	strh	r3, [r4, #12]
 8019064:	e7e2      	b.n	801902c <__smakebuf_r+0xc>
 8019066:	89a3      	ldrh	r3, [r4, #12]
 8019068:	6020      	str	r0, [r4, #0]
 801906a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801906e:	81a3      	strh	r3, [r4, #12]
 8019070:	9b01      	ldr	r3, [sp, #4]
 8019072:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019076:	b15b      	cbz	r3, 8019090 <__smakebuf_r+0x70>
 8019078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801907c:	4630      	mov	r0, r6
 801907e:	f000 f81d 	bl	80190bc <_isatty_r>
 8019082:	b128      	cbz	r0, 8019090 <__smakebuf_r+0x70>
 8019084:	89a3      	ldrh	r3, [r4, #12]
 8019086:	f023 0303 	bic.w	r3, r3, #3
 801908a:	f043 0301 	orr.w	r3, r3, #1
 801908e:	81a3      	strh	r3, [r4, #12]
 8019090:	89a3      	ldrh	r3, [r4, #12]
 8019092:	431d      	orrs	r5, r3
 8019094:	81a5      	strh	r5, [r4, #12]
 8019096:	e7cf      	b.n	8019038 <__smakebuf_r+0x18>

08019098 <_fstat_r>:
 8019098:	b538      	push	{r3, r4, r5, lr}
 801909a:	4d07      	ldr	r5, [pc, #28]	@ (80190b8 <_fstat_r+0x20>)
 801909c:	2300      	movs	r3, #0
 801909e:	4604      	mov	r4, r0
 80190a0:	4608      	mov	r0, r1
 80190a2:	4611      	mov	r1, r2
 80190a4:	602b      	str	r3, [r5, #0]
 80190a6:	f7e9 fdca 	bl	8002c3e <_fstat>
 80190aa:	1c43      	adds	r3, r0, #1
 80190ac:	d102      	bne.n	80190b4 <_fstat_r+0x1c>
 80190ae:	682b      	ldr	r3, [r5, #0]
 80190b0:	b103      	cbz	r3, 80190b4 <_fstat_r+0x1c>
 80190b2:	6023      	str	r3, [r4, #0]
 80190b4:	bd38      	pop	{r3, r4, r5, pc}
 80190b6:	bf00      	nop
 80190b8:	20010760 	.word	0x20010760

080190bc <_isatty_r>:
 80190bc:	b538      	push	{r3, r4, r5, lr}
 80190be:	4d06      	ldr	r5, [pc, #24]	@ (80190d8 <_isatty_r+0x1c>)
 80190c0:	2300      	movs	r3, #0
 80190c2:	4604      	mov	r4, r0
 80190c4:	4608      	mov	r0, r1
 80190c6:	602b      	str	r3, [r5, #0]
 80190c8:	f7e9 fdc9 	bl	8002c5e <_isatty>
 80190cc:	1c43      	adds	r3, r0, #1
 80190ce:	d102      	bne.n	80190d6 <_isatty_r+0x1a>
 80190d0:	682b      	ldr	r3, [r5, #0]
 80190d2:	b103      	cbz	r3, 80190d6 <_isatty_r+0x1a>
 80190d4:	6023      	str	r3, [r4, #0]
 80190d6:	bd38      	pop	{r3, r4, r5, pc}
 80190d8:	20010760 	.word	0x20010760

080190dc <abort>:
 80190dc:	b508      	push	{r3, lr}
 80190de:	2006      	movs	r0, #6
 80190e0:	f000 f96c 	bl	80193bc <raise>
 80190e4:	2001      	movs	r0, #1
 80190e6:	f7e9 fd5a 	bl	8002b9e <_exit>

080190ea <__sfputc_r>:
 80190ea:	6893      	ldr	r3, [r2, #8]
 80190ec:	3b01      	subs	r3, #1
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	b410      	push	{r4}
 80190f2:	6093      	str	r3, [r2, #8]
 80190f4:	da08      	bge.n	8019108 <__sfputc_r+0x1e>
 80190f6:	6994      	ldr	r4, [r2, #24]
 80190f8:	42a3      	cmp	r3, r4
 80190fa:	db01      	blt.n	8019100 <__sfputc_r+0x16>
 80190fc:	290a      	cmp	r1, #10
 80190fe:	d103      	bne.n	8019108 <__sfputc_r+0x1e>
 8019100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019104:	f7ff b9a0 	b.w	8018448 <__swbuf_r>
 8019108:	6813      	ldr	r3, [r2, #0]
 801910a:	1c58      	adds	r0, r3, #1
 801910c:	6010      	str	r0, [r2, #0]
 801910e:	7019      	strb	r1, [r3, #0]
 8019110:	4608      	mov	r0, r1
 8019112:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019116:	4770      	bx	lr

08019118 <__sfputs_r>:
 8019118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801911a:	4606      	mov	r6, r0
 801911c:	460f      	mov	r7, r1
 801911e:	4614      	mov	r4, r2
 8019120:	18d5      	adds	r5, r2, r3
 8019122:	42ac      	cmp	r4, r5
 8019124:	d101      	bne.n	801912a <__sfputs_r+0x12>
 8019126:	2000      	movs	r0, #0
 8019128:	e007      	b.n	801913a <__sfputs_r+0x22>
 801912a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801912e:	463a      	mov	r2, r7
 8019130:	4630      	mov	r0, r6
 8019132:	f7ff ffda 	bl	80190ea <__sfputc_r>
 8019136:	1c43      	adds	r3, r0, #1
 8019138:	d1f3      	bne.n	8019122 <__sfputs_r+0xa>
 801913a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801913c <_vfiprintf_r>:
 801913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019140:	460d      	mov	r5, r1
 8019142:	b09d      	sub	sp, #116	@ 0x74
 8019144:	4614      	mov	r4, r2
 8019146:	4698      	mov	r8, r3
 8019148:	4606      	mov	r6, r0
 801914a:	b118      	cbz	r0, 8019154 <_vfiprintf_r+0x18>
 801914c:	6a03      	ldr	r3, [r0, #32]
 801914e:	b90b      	cbnz	r3, 8019154 <_vfiprintf_r+0x18>
 8019150:	f7ff f834 	bl	80181bc <__sinit>
 8019154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019156:	07d9      	lsls	r1, r3, #31
 8019158:	d405      	bmi.n	8019166 <_vfiprintf_r+0x2a>
 801915a:	89ab      	ldrh	r3, [r5, #12]
 801915c:	059a      	lsls	r2, r3, #22
 801915e:	d402      	bmi.n	8019166 <_vfiprintf_r+0x2a>
 8019160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019162:	f7ff fb00 	bl	8018766 <__retarget_lock_acquire_recursive>
 8019166:	89ab      	ldrh	r3, [r5, #12]
 8019168:	071b      	lsls	r3, r3, #28
 801916a:	d501      	bpl.n	8019170 <_vfiprintf_r+0x34>
 801916c:	692b      	ldr	r3, [r5, #16]
 801916e:	b99b      	cbnz	r3, 8019198 <_vfiprintf_r+0x5c>
 8019170:	4629      	mov	r1, r5
 8019172:	4630      	mov	r0, r6
 8019174:	f7ff f9a6 	bl	80184c4 <__swsetup_r>
 8019178:	b170      	cbz	r0, 8019198 <_vfiprintf_r+0x5c>
 801917a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801917c:	07dc      	lsls	r4, r3, #31
 801917e:	d504      	bpl.n	801918a <_vfiprintf_r+0x4e>
 8019180:	f04f 30ff 	mov.w	r0, #4294967295
 8019184:	b01d      	add	sp, #116	@ 0x74
 8019186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801918a:	89ab      	ldrh	r3, [r5, #12]
 801918c:	0598      	lsls	r0, r3, #22
 801918e:	d4f7      	bmi.n	8019180 <_vfiprintf_r+0x44>
 8019190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019192:	f7ff fae9 	bl	8018768 <__retarget_lock_release_recursive>
 8019196:	e7f3      	b.n	8019180 <_vfiprintf_r+0x44>
 8019198:	2300      	movs	r3, #0
 801919a:	9309      	str	r3, [sp, #36]	@ 0x24
 801919c:	2320      	movs	r3, #32
 801919e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80191a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80191a6:	2330      	movs	r3, #48	@ 0x30
 80191a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019358 <_vfiprintf_r+0x21c>
 80191ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80191b0:	f04f 0901 	mov.w	r9, #1
 80191b4:	4623      	mov	r3, r4
 80191b6:	469a      	mov	sl, r3
 80191b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191bc:	b10a      	cbz	r2, 80191c2 <_vfiprintf_r+0x86>
 80191be:	2a25      	cmp	r2, #37	@ 0x25
 80191c0:	d1f9      	bne.n	80191b6 <_vfiprintf_r+0x7a>
 80191c2:	ebba 0b04 	subs.w	fp, sl, r4
 80191c6:	d00b      	beq.n	80191e0 <_vfiprintf_r+0xa4>
 80191c8:	465b      	mov	r3, fp
 80191ca:	4622      	mov	r2, r4
 80191cc:	4629      	mov	r1, r5
 80191ce:	4630      	mov	r0, r6
 80191d0:	f7ff ffa2 	bl	8019118 <__sfputs_r>
 80191d4:	3001      	adds	r0, #1
 80191d6:	f000 80a7 	beq.w	8019328 <_vfiprintf_r+0x1ec>
 80191da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80191dc:	445a      	add	r2, fp
 80191de:	9209      	str	r2, [sp, #36]	@ 0x24
 80191e0:	f89a 3000 	ldrb.w	r3, [sl]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	f000 809f 	beq.w	8019328 <_vfiprintf_r+0x1ec>
 80191ea:	2300      	movs	r3, #0
 80191ec:	f04f 32ff 	mov.w	r2, #4294967295
 80191f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80191f4:	f10a 0a01 	add.w	sl, sl, #1
 80191f8:	9304      	str	r3, [sp, #16]
 80191fa:	9307      	str	r3, [sp, #28]
 80191fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019200:	931a      	str	r3, [sp, #104]	@ 0x68
 8019202:	4654      	mov	r4, sl
 8019204:	2205      	movs	r2, #5
 8019206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801920a:	4853      	ldr	r0, [pc, #332]	@ (8019358 <_vfiprintf_r+0x21c>)
 801920c:	f7e7 f810 	bl	8000230 <memchr>
 8019210:	9a04      	ldr	r2, [sp, #16]
 8019212:	b9d8      	cbnz	r0, 801924c <_vfiprintf_r+0x110>
 8019214:	06d1      	lsls	r1, r2, #27
 8019216:	bf44      	itt	mi
 8019218:	2320      	movmi	r3, #32
 801921a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801921e:	0713      	lsls	r3, r2, #28
 8019220:	bf44      	itt	mi
 8019222:	232b      	movmi	r3, #43	@ 0x2b
 8019224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019228:	f89a 3000 	ldrb.w	r3, [sl]
 801922c:	2b2a      	cmp	r3, #42	@ 0x2a
 801922e:	d015      	beq.n	801925c <_vfiprintf_r+0x120>
 8019230:	9a07      	ldr	r2, [sp, #28]
 8019232:	4654      	mov	r4, sl
 8019234:	2000      	movs	r0, #0
 8019236:	f04f 0c0a 	mov.w	ip, #10
 801923a:	4621      	mov	r1, r4
 801923c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019240:	3b30      	subs	r3, #48	@ 0x30
 8019242:	2b09      	cmp	r3, #9
 8019244:	d94b      	bls.n	80192de <_vfiprintf_r+0x1a2>
 8019246:	b1b0      	cbz	r0, 8019276 <_vfiprintf_r+0x13a>
 8019248:	9207      	str	r2, [sp, #28]
 801924a:	e014      	b.n	8019276 <_vfiprintf_r+0x13a>
 801924c:	eba0 0308 	sub.w	r3, r0, r8
 8019250:	fa09 f303 	lsl.w	r3, r9, r3
 8019254:	4313      	orrs	r3, r2
 8019256:	9304      	str	r3, [sp, #16]
 8019258:	46a2      	mov	sl, r4
 801925a:	e7d2      	b.n	8019202 <_vfiprintf_r+0xc6>
 801925c:	9b03      	ldr	r3, [sp, #12]
 801925e:	1d19      	adds	r1, r3, #4
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	9103      	str	r1, [sp, #12]
 8019264:	2b00      	cmp	r3, #0
 8019266:	bfbb      	ittet	lt
 8019268:	425b      	neglt	r3, r3
 801926a:	f042 0202 	orrlt.w	r2, r2, #2
 801926e:	9307      	strge	r3, [sp, #28]
 8019270:	9307      	strlt	r3, [sp, #28]
 8019272:	bfb8      	it	lt
 8019274:	9204      	strlt	r2, [sp, #16]
 8019276:	7823      	ldrb	r3, [r4, #0]
 8019278:	2b2e      	cmp	r3, #46	@ 0x2e
 801927a:	d10a      	bne.n	8019292 <_vfiprintf_r+0x156>
 801927c:	7863      	ldrb	r3, [r4, #1]
 801927e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019280:	d132      	bne.n	80192e8 <_vfiprintf_r+0x1ac>
 8019282:	9b03      	ldr	r3, [sp, #12]
 8019284:	1d1a      	adds	r2, r3, #4
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	9203      	str	r2, [sp, #12]
 801928a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801928e:	3402      	adds	r4, #2
 8019290:	9305      	str	r3, [sp, #20]
 8019292:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019368 <_vfiprintf_r+0x22c>
 8019296:	7821      	ldrb	r1, [r4, #0]
 8019298:	2203      	movs	r2, #3
 801929a:	4650      	mov	r0, sl
 801929c:	f7e6 ffc8 	bl	8000230 <memchr>
 80192a0:	b138      	cbz	r0, 80192b2 <_vfiprintf_r+0x176>
 80192a2:	9b04      	ldr	r3, [sp, #16]
 80192a4:	eba0 000a 	sub.w	r0, r0, sl
 80192a8:	2240      	movs	r2, #64	@ 0x40
 80192aa:	4082      	lsls	r2, r0
 80192ac:	4313      	orrs	r3, r2
 80192ae:	3401      	adds	r4, #1
 80192b0:	9304      	str	r3, [sp, #16]
 80192b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192b6:	4829      	ldr	r0, [pc, #164]	@ (801935c <_vfiprintf_r+0x220>)
 80192b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80192bc:	2206      	movs	r2, #6
 80192be:	f7e6 ffb7 	bl	8000230 <memchr>
 80192c2:	2800      	cmp	r0, #0
 80192c4:	d03f      	beq.n	8019346 <_vfiprintf_r+0x20a>
 80192c6:	4b26      	ldr	r3, [pc, #152]	@ (8019360 <_vfiprintf_r+0x224>)
 80192c8:	bb1b      	cbnz	r3, 8019312 <_vfiprintf_r+0x1d6>
 80192ca:	9b03      	ldr	r3, [sp, #12]
 80192cc:	3307      	adds	r3, #7
 80192ce:	f023 0307 	bic.w	r3, r3, #7
 80192d2:	3308      	adds	r3, #8
 80192d4:	9303      	str	r3, [sp, #12]
 80192d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192d8:	443b      	add	r3, r7
 80192da:	9309      	str	r3, [sp, #36]	@ 0x24
 80192dc:	e76a      	b.n	80191b4 <_vfiprintf_r+0x78>
 80192de:	fb0c 3202 	mla	r2, ip, r2, r3
 80192e2:	460c      	mov	r4, r1
 80192e4:	2001      	movs	r0, #1
 80192e6:	e7a8      	b.n	801923a <_vfiprintf_r+0xfe>
 80192e8:	2300      	movs	r3, #0
 80192ea:	3401      	adds	r4, #1
 80192ec:	9305      	str	r3, [sp, #20]
 80192ee:	4619      	mov	r1, r3
 80192f0:	f04f 0c0a 	mov.w	ip, #10
 80192f4:	4620      	mov	r0, r4
 80192f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192fa:	3a30      	subs	r2, #48	@ 0x30
 80192fc:	2a09      	cmp	r2, #9
 80192fe:	d903      	bls.n	8019308 <_vfiprintf_r+0x1cc>
 8019300:	2b00      	cmp	r3, #0
 8019302:	d0c6      	beq.n	8019292 <_vfiprintf_r+0x156>
 8019304:	9105      	str	r1, [sp, #20]
 8019306:	e7c4      	b.n	8019292 <_vfiprintf_r+0x156>
 8019308:	fb0c 2101 	mla	r1, ip, r1, r2
 801930c:	4604      	mov	r4, r0
 801930e:	2301      	movs	r3, #1
 8019310:	e7f0      	b.n	80192f4 <_vfiprintf_r+0x1b8>
 8019312:	ab03      	add	r3, sp, #12
 8019314:	9300      	str	r3, [sp, #0]
 8019316:	462a      	mov	r2, r5
 8019318:	4b12      	ldr	r3, [pc, #72]	@ (8019364 <_vfiprintf_r+0x228>)
 801931a:	a904      	add	r1, sp, #16
 801931c:	4630      	mov	r0, r6
 801931e:	f3af 8000 	nop.w
 8019322:	4607      	mov	r7, r0
 8019324:	1c78      	adds	r0, r7, #1
 8019326:	d1d6      	bne.n	80192d6 <_vfiprintf_r+0x19a>
 8019328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801932a:	07d9      	lsls	r1, r3, #31
 801932c:	d405      	bmi.n	801933a <_vfiprintf_r+0x1fe>
 801932e:	89ab      	ldrh	r3, [r5, #12]
 8019330:	059a      	lsls	r2, r3, #22
 8019332:	d402      	bmi.n	801933a <_vfiprintf_r+0x1fe>
 8019334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019336:	f7ff fa17 	bl	8018768 <__retarget_lock_release_recursive>
 801933a:	89ab      	ldrh	r3, [r5, #12]
 801933c:	065b      	lsls	r3, r3, #25
 801933e:	f53f af1f 	bmi.w	8019180 <_vfiprintf_r+0x44>
 8019342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019344:	e71e      	b.n	8019184 <_vfiprintf_r+0x48>
 8019346:	ab03      	add	r3, sp, #12
 8019348:	9300      	str	r3, [sp, #0]
 801934a:	462a      	mov	r2, r5
 801934c:	4b05      	ldr	r3, [pc, #20]	@ (8019364 <_vfiprintf_r+0x228>)
 801934e:	a904      	add	r1, sp, #16
 8019350:	4630      	mov	r0, r6
 8019352:	f7ff fc63 	bl	8018c1c <_printf_i>
 8019356:	e7e4      	b.n	8019322 <_vfiprintf_r+0x1e6>
 8019358:	0801b32f 	.word	0x0801b32f
 801935c:	0801b339 	.word	0x0801b339
 8019360:	00000000 	.word	0x00000000
 8019364:	08019119 	.word	0x08019119
 8019368:	0801b335 	.word	0x0801b335

0801936c <_raise_r>:
 801936c:	291f      	cmp	r1, #31
 801936e:	b538      	push	{r3, r4, r5, lr}
 8019370:	4605      	mov	r5, r0
 8019372:	460c      	mov	r4, r1
 8019374:	d904      	bls.n	8019380 <_raise_r+0x14>
 8019376:	2316      	movs	r3, #22
 8019378:	6003      	str	r3, [r0, #0]
 801937a:	f04f 30ff 	mov.w	r0, #4294967295
 801937e:	bd38      	pop	{r3, r4, r5, pc}
 8019380:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019382:	b112      	cbz	r2, 801938a <_raise_r+0x1e>
 8019384:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019388:	b94b      	cbnz	r3, 801939e <_raise_r+0x32>
 801938a:	4628      	mov	r0, r5
 801938c:	f000 f830 	bl	80193f0 <_getpid_r>
 8019390:	4622      	mov	r2, r4
 8019392:	4601      	mov	r1, r0
 8019394:	4628      	mov	r0, r5
 8019396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801939a:	f000 b817 	b.w	80193cc <_kill_r>
 801939e:	2b01      	cmp	r3, #1
 80193a0:	d00a      	beq.n	80193b8 <_raise_r+0x4c>
 80193a2:	1c59      	adds	r1, r3, #1
 80193a4:	d103      	bne.n	80193ae <_raise_r+0x42>
 80193a6:	2316      	movs	r3, #22
 80193a8:	6003      	str	r3, [r0, #0]
 80193aa:	2001      	movs	r0, #1
 80193ac:	e7e7      	b.n	801937e <_raise_r+0x12>
 80193ae:	2100      	movs	r1, #0
 80193b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80193b4:	4620      	mov	r0, r4
 80193b6:	4798      	blx	r3
 80193b8:	2000      	movs	r0, #0
 80193ba:	e7e0      	b.n	801937e <_raise_r+0x12>

080193bc <raise>:
 80193bc:	4b02      	ldr	r3, [pc, #8]	@ (80193c8 <raise+0xc>)
 80193be:	4601      	mov	r1, r0
 80193c0:	6818      	ldr	r0, [r3, #0]
 80193c2:	f7ff bfd3 	b.w	801936c <_raise_r>
 80193c6:	bf00      	nop
 80193c8:	200022b0 	.word	0x200022b0

080193cc <_kill_r>:
 80193cc:	b538      	push	{r3, r4, r5, lr}
 80193ce:	4d07      	ldr	r5, [pc, #28]	@ (80193ec <_kill_r+0x20>)
 80193d0:	2300      	movs	r3, #0
 80193d2:	4604      	mov	r4, r0
 80193d4:	4608      	mov	r0, r1
 80193d6:	4611      	mov	r1, r2
 80193d8:	602b      	str	r3, [r5, #0]
 80193da:	f7e9 fbd0 	bl	8002b7e <_kill>
 80193de:	1c43      	adds	r3, r0, #1
 80193e0:	d102      	bne.n	80193e8 <_kill_r+0x1c>
 80193e2:	682b      	ldr	r3, [r5, #0]
 80193e4:	b103      	cbz	r3, 80193e8 <_kill_r+0x1c>
 80193e6:	6023      	str	r3, [r4, #0]
 80193e8:	bd38      	pop	{r3, r4, r5, pc}
 80193ea:	bf00      	nop
 80193ec:	20010760 	.word	0x20010760

080193f0 <_getpid_r>:
 80193f0:	f7e9 bbbd 	b.w	8002b6e <_getpid>

080193f4 <cosf>:
 80193f4:	ee10 3a10 	vmov	r3, s0
 80193f8:	b507      	push	{r0, r1, r2, lr}
 80193fa:	4a1e      	ldr	r2, [pc, #120]	@ (8019474 <cosf+0x80>)
 80193fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019400:	4293      	cmp	r3, r2
 8019402:	d806      	bhi.n	8019412 <cosf+0x1e>
 8019404:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8019478 <cosf+0x84>
 8019408:	b003      	add	sp, #12
 801940a:	f85d eb04 	ldr.w	lr, [sp], #4
 801940e:	f000 b87b 	b.w	8019508 <__kernel_cosf>
 8019412:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019416:	d304      	bcc.n	8019422 <cosf+0x2e>
 8019418:	ee30 0a40 	vsub.f32	s0, s0, s0
 801941c:	b003      	add	sp, #12
 801941e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019422:	4668      	mov	r0, sp
 8019424:	f000 f910 	bl	8019648 <__ieee754_rem_pio2f>
 8019428:	f000 0003 	and.w	r0, r0, #3
 801942c:	2801      	cmp	r0, #1
 801942e:	d009      	beq.n	8019444 <cosf+0x50>
 8019430:	2802      	cmp	r0, #2
 8019432:	d010      	beq.n	8019456 <cosf+0x62>
 8019434:	b9b0      	cbnz	r0, 8019464 <cosf+0x70>
 8019436:	eddd 0a01 	vldr	s1, [sp, #4]
 801943a:	ed9d 0a00 	vldr	s0, [sp]
 801943e:	f000 f863 	bl	8019508 <__kernel_cosf>
 8019442:	e7eb      	b.n	801941c <cosf+0x28>
 8019444:	eddd 0a01 	vldr	s1, [sp, #4]
 8019448:	ed9d 0a00 	vldr	s0, [sp]
 801944c:	f000 f8b4 	bl	80195b8 <__kernel_sinf>
 8019450:	eeb1 0a40 	vneg.f32	s0, s0
 8019454:	e7e2      	b.n	801941c <cosf+0x28>
 8019456:	eddd 0a01 	vldr	s1, [sp, #4]
 801945a:	ed9d 0a00 	vldr	s0, [sp]
 801945e:	f000 f853 	bl	8019508 <__kernel_cosf>
 8019462:	e7f5      	b.n	8019450 <cosf+0x5c>
 8019464:	eddd 0a01 	vldr	s1, [sp, #4]
 8019468:	ed9d 0a00 	vldr	s0, [sp]
 801946c:	2001      	movs	r0, #1
 801946e:	f000 f8a3 	bl	80195b8 <__kernel_sinf>
 8019472:	e7d3      	b.n	801941c <cosf+0x28>
 8019474:	3f490fd8 	.word	0x3f490fd8
 8019478:	00000000 	.word	0x00000000

0801947c <sinf>:
 801947c:	ee10 3a10 	vmov	r3, s0
 8019480:	b507      	push	{r0, r1, r2, lr}
 8019482:	4a1f      	ldr	r2, [pc, #124]	@ (8019500 <sinf+0x84>)
 8019484:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019488:	4293      	cmp	r3, r2
 801948a:	d807      	bhi.n	801949c <sinf+0x20>
 801948c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8019504 <sinf+0x88>
 8019490:	2000      	movs	r0, #0
 8019492:	b003      	add	sp, #12
 8019494:	f85d eb04 	ldr.w	lr, [sp], #4
 8019498:	f000 b88e 	b.w	80195b8 <__kernel_sinf>
 801949c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80194a0:	d304      	bcc.n	80194ac <sinf+0x30>
 80194a2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80194a6:	b003      	add	sp, #12
 80194a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80194ac:	4668      	mov	r0, sp
 80194ae:	f000 f8cb 	bl	8019648 <__ieee754_rem_pio2f>
 80194b2:	f000 0003 	and.w	r0, r0, #3
 80194b6:	2801      	cmp	r0, #1
 80194b8:	d00a      	beq.n	80194d0 <sinf+0x54>
 80194ba:	2802      	cmp	r0, #2
 80194bc:	d00f      	beq.n	80194de <sinf+0x62>
 80194be:	b9c0      	cbnz	r0, 80194f2 <sinf+0x76>
 80194c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80194c4:	ed9d 0a00 	vldr	s0, [sp]
 80194c8:	2001      	movs	r0, #1
 80194ca:	f000 f875 	bl	80195b8 <__kernel_sinf>
 80194ce:	e7ea      	b.n	80194a6 <sinf+0x2a>
 80194d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80194d4:	ed9d 0a00 	vldr	s0, [sp]
 80194d8:	f000 f816 	bl	8019508 <__kernel_cosf>
 80194dc:	e7e3      	b.n	80194a6 <sinf+0x2a>
 80194de:	eddd 0a01 	vldr	s1, [sp, #4]
 80194e2:	ed9d 0a00 	vldr	s0, [sp]
 80194e6:	2001      	movs	r0, #1
 80194e8:	f000 f866 	bl	80195b8 <__kernel_sinf>
 80194ec:	eeb1 0a40 	vneg.f32	s0, s0
 80194f0:	e7d9      	b.n	80194a6 <sinf+0x2a>
 80194f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80194f6:	ed9d 0a00 	vldr	s0, [sp]
 80194fa:	f000 f805 	bl	8019508 <__kernel_cosf>
 80194fe:	e7f5      	b.n	80194ec <sinf+0x70>
 8019500:	3f490fd8 	.word	0x3f490fd8
 8019504:	00000000 	.word	0x00000000

08019508 <__kernel_cosf>:
 8019508:	ee10 3a10 	vmov	r3, s0
 801950c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019510:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019514:	eef0 6a40 	vmov.f32	s13, s0
 8019518:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801951c:	d204      	bcs.n	8019528 <__kernel_cosf+0x20>
 801951e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8019522:	ee17 2a90 	vmov	r2, s15
 8019526:	b342      	cbz	r2, 801957a <__kernel_cosf+0x72>
 8019528:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801952c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8019598 <__kernel_cosf+0x90>
 8019530:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801959c <__kernel_cosf+0x94>
 8019534:	4a1a      	ldr	r2, [pc, #104]	@ (80195a0 <__kernel_cosf+0x98>)
 8019536:	eea7 6a27 	vfma.f32	s12, s14, s15
 801953a:	4293      	cmp	r3, r2
 801953c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80195a4 <__kernel_cosf+0x9c>
 8019540:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019544:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80195a8 <__kernel_cosf+0xa0>
 8019548:	eea7 6a87 	vfma.f32	s12, s15, s14
 801954c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80195ac <__kernel_cosf+0xa4>
 8019550:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019554:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80195b0 <__kernel_cosf+0xa8>
 8019558:	eea7 6a87 	vfma.f32	s12, s15, s14
 801955c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8019560:	ee26 6a07 	vmul.f32	s12, s12, s14
 8019564:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019568:	eee7 0a06 	vfma.f32	s1, s14, s12
 801956c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019570:	d804      	bhi.n	801957c <__kernel_cosf+0x74>
 8019572:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019576:	ee30 0a67 	vsub.f32	s0, s0, s15
 801957a:	4770      	bx	lr
 801957c:	4a0d      	ldr	r2, [pc, #52]	@ (80195b4 <__kernel_cosf+0xac>)
 801957e:	4293      	cmp	r3, r2
 8019580:	bf9a      	itte	ls
 8019582:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8019586:	ee07 3a10 	vmovls	s14, r3
 801958a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801958e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019592:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019596:	e7ec      	b.n	8019572 <__kernel_cosf+0x6a>
 8019598:	ad47d74e 	.word	0xad47d74e
 801959c:	310f74f6 	.word	0x310f74f6
 80195a0:	3e999999 	.word	0x3e999999
 80195a4:	b493f27c 	.word	0xb493f27c
 80195a8:	37d00d01 	.word	0x37d00d01
 80195ac:	bab60b61 	.word	0xbab60b61
 80195b0:	3d2aaaab 	.word	0x3d2aaaab
 80195b4:	3f480000 	.word	0x3f480000

080195b8 <__kernel_sinf>:
 80195b8:	ee10 3a10 	vmov	r3, s0
 80195bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80195c0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80195c4:	d204      	bcs.n	80195d0 <__kernel_sinf+0x18>
 80195c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80195ca:	ee17 3a90 	vmov	r3, s15
 80195ce:	b35b      	cbz	r3, 8019628 <__kernel_sinf+0x70>
 80195d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80195d4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801962c <__kernel_sinf+0x74>
 80195d8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8019630 <__kernel_sinf+0x78>
 80195dc:	eea7 6a27 	vfma.f32	s12, s14, s15
 80195e0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8019634 <__kernel_sinf+0x7c>
 80195e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80195e8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8019638 <__kernel_sinf+0x80>
 80195ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 80195f0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801963c <__kernel_sinf+0x84>
 80195f4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80195f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80195fc:	b930      	cbnz	r0, 801960c <__kernel_sinf+0x54>
 80195fe:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8019640 <__kernel_sinf+0x88>
 8019602:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019606:	eea6 0a26 	vfma.f32	s0, s12, s13
 801960a:	4770      	bx	lr
 801960c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019610:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019614:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019618:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801961c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8019644 <__kernel_sinf+0x8c>
 8019620:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019624:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019628:	4770      	bx	lr
 801962a:	bf00      	nop
 801962c:	2f2ec9d3 	.word	0x2f2ec9d3
 8019630:	b2d72f34 	.word	0xb2d72f34
 8019634:	3638ef1b 	.word	0x3638ef1b
 8019638:	b9500d01 	.word	0xb9500d01
 801963c:	3c088889 	.word	0x3c088889
 8019640:	be2aaaab 	.word	0xbe2aaaab
 8019644:	3e2aaaab 	.word	0x3e2aaaab

08019648 <__ieee754_rem_pio2f>:
 8019648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801964a:	ee10 6a10 	vmov	r6, s0
 801964e:	4b88      	ldr	r3, [pc, #544]	@ (8019870 <__ieee754_rem_pio2f+0x228>)
 8019650:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8019654:	429d      	cmp	r5, r3
 8019656:	b087      	sub	sp, #28
 8019658:	4604      	mov	r4, r0
 801965a:	d805      	bhi.n	8019668 <__ieee754_rem_pio2f+0x20>
 801965c:	2300      	movs	r3, #0
 801965e:	ed80 0a00 	vstr	s0, [r0]
 8019662:	6043      	str	r3, [r0, #4]
 8019664:	2000      	movs	r0, #0
 8019666:	e022      	b.n	80196ae <__ieee754_rem_pio2f+0x66>
 8019668:	4b82      	ldr	r3, [pc, #520]	@ (8019874 <__ieee754_rem_pio2f+0x22c>)
 801966a:	429d      	cmp	r5, r3
 801966c:	d83a      	bhi.n	80196e4 <__ieee754_rem_pio2f+0x9c>
 801966e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019672:	2e00      	cmp	r6, #0
 8019674:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8019878 <__ieee754_rem_pio2f+0x230>
 8019678:	4a80      	ldr	r2, [pc, #512]	@ (801987c <__ieee754_rem_pio2f+0x234>)
 801967a:	f023 030f 	bic.w	r3, r3, #15
 801967e:	dd18      	ble.n	80196b2 <__ieee754_rem_pio2f+0x6a>
 8019680:	4293      	cmp	r3, r2
 8019682:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019686:	bf09      	itett	eq
 8019688:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8019880 <__ieee754_rem_pio2f+0x238>
 801968c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8019884 <__ieee754_rem_pio2f+0x23c>
 8019690:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8019888 <__ieee754_rem_pio2f+0x240>
 8019694:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019698:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801969c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80196a0:	ed80 7a00 	vstr	s14, [r0]
 80196a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80196a8:	edc0 7a01 	vstr	s15, [r0, #4]
 80196ac:	2001      	movs	r0, #1
 80196ae:	b007      	add	sp, #28
 80196b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196b2:	4293      	cmp	r3, r2
 80196b4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80196b8:	bf09      	itett	eq
 80196ba:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8019880 <__ieee754_rem_pio2f+0x238>
 80196be:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8019884 <__ieee754_rem_pio2f+0x23c>
 80196c2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8019888 <__ieee754_rem_pio2f+0x240>
 80196c6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80196ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80196ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80196d2:	ed80 7a00 	vstr	s14, [r0]
 80196d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80196da:	edc0 7a01 	vstr	s15, [r0, #4]
 80196de:	f04f 30ff 	mov.w	r0, #4294967295
 80196e2:	e7e4      	b.n	80196ae <__ieee754_rem_pio2f+0x66>
 80196e4:	4b69      	ldr	r3, [pc, #420]	@ (801988c <__ieee754_rem_pio2f+0x244>)
 80196e6:	429d      	cmp	r5, r3
 80196e8:	d873      	bhi.n	80197d2 <__ieee754_rem_pio2f+0x18a>
 80196ea:	f000 f8dd 	bl	80198a8 <fabsf>
 80196ee:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8019890 <__ieee754_rem_pio2f+0x248>
 80196f2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80196f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80196fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80196fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019702:	ee17 0a90 	vmov	r0, s15
 8019706:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019878 <__ieee754_rem_pio2f+0x230>
 801970a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801970e:	281f      	cmp	r0, #31
 8019710:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019884 <__ieee754_rem_pio2f+0x23c>
 8019714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019718:	eeb1 6a47 	vneg.f32	s12, s14
 801971c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019720:	ee16 1a90 	vmov	r1, s13
 8019724:	dc09      	bgt.n	801973a <__ieee754_rem_pio2f+0xf2>
 8019726:	4a5b      	ldr	r2, [pc, #364]	@ (8019894 <__ieee754_rem_pio2f+0x24c>)
 8019728:	1e47      	subs	r7, r0, #1
 801972a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801972e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8019732:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8019736:	4293      	cmp	r3, r2
 8019738:	d107      	bne.n	801974a <__ieee754_rem_pio2f+0x102>
 801973a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801973e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8019742:	2a08      	cmp	r2, #8
 8019744:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019748:	dc14      	bgt.n	8019774 <__ieee754_rem_pio2f+0x12c>
 801974a:	6021      	str	r1, [r4, #0]
 801974c:	ed94 7a00 	vldr	s14, [r4]
 8019750:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019754:	2e00      	cmp	r6, #0
 8019756:	ee30 0a67 	vsub.f32	s0, s0, s15
 801975a:	ed84 0a01 	vstr	s0, [r4, #4]
 801975e:	daa6      	bge.n	80196ae <__ieee754_rem_pio2f+0x66>
 8019760:	eeb1 7a47 	vneg.f32	s14, s14
 8019764:	eeb1 0a40 	vneg.f32	s0, s0
 8019768:	ed84 7a00 	vstr	s14, [r4]
 801976c:	ed84 0a01 	vstr	s0, [r4, #4]
 8019770:	4240      	negs	r0, r0
 8019772:	e79c      	b.n	80196ae <__ieee754_rem_pio2f+0x66>
 8019774:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8019880 <__ieee754_rem_pio2f+0x238>
 8019778:	eef0 6a40 	vmov.f32	s13, s0
 801977c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019780:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019784:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019788:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8019888 <__ieee754_rem_pio2f+0x240>
 801978c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019790:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019794:	ee15 2a90 	vmov	r2, s11
 8019798:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801979c:	1a5b      	subs	r3, r3, r1
 801979e:	2b19      	cmp	r3, #25
 80197a0:	dc04      	bgt.n	80197ac <__ieee754_rem_pio2f+0x164>
 80197a2:	edc4 5a00 	vstr	s11, [r4]
 80197a6:	eeb0 0a66 	vmov.f32	s0, s13
 80197aa:	e7cf      	b.n	801974c <__ieee754_rem_pio2f+0x104>
 80197ac:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8019898 <__ieee754_rem_pio2f+0x250>
 80197b0:	eeb0 0a66 	vmov.f32	s0, s13
 80197b4:	eea6 0a25 	vfma.f32	s0, s12, s11
 80197b8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80197bc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801989c <__ieee754_rem_pio2f+0x254>
 80197c0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80197c4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80197c8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80197cc:	ed84 7a00 	vstr	s14, [r4]
 80197d0:	e7bc      	b.n	801974c <__ieee754_rem_pio2f+0x104>
 80197d2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80197d6:	d306      	bcc.n	80197e6 <__ieee754_rem_pio2f+0x19e>
 80197d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80197dc:	edc0 7a01 	vstr	s15, [r0, #4]
 80197e0:	edc0 7a00 	vstr	s15, [r0]
 80197e4:	e73e      	b.n	8019664 <__ieee754_rem_pio2f+0x1c>
 80197e6:	15ea      	asrs	r2, r5, #23
 80197e8:	3a86      	subs	r2, #134	@ 0x86
 80197ea:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80197ee:	ee07 3a90 	vmov	s15, r3
 80197f2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80197f6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80198a0 <__ieee754_rem_pio2f+0x258>
 80197fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019802:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019806:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801980a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801980e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019816:	ed8d 7a04 	vstr	s14, [sp, #16]
 801981a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801981e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019826:	edcd 7a05 	vstr	s15, [sp, #20]
 801982a:	d11e      	bne.n	801986a <__ieee754_rem_pio2f+0x222>
 801982c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019834:	bf0c      	ite	eq
 8019836:	2301      	moveq	r3, #1
 8019838:	2302      	movne	r3, #2
 801983a:	491a      	ldr	r1, [pc, #104]	@ (80198a4 <__ieee754_rem_pio2f+0x25c>)
 801983c:	9101      	str	r1, [sp, #4]
 801983e:	2102      	movs	r1, #2
 8019840:	9100      	str	r1, [sp, #0]
 8019842:	a803      	add	r0, sp, #12
 8019844:	4621      	mov	r1, r4
 8019846:	f000 f837 	bl	80198b8 <__kernel_rem_pio2f>
 801984a:	2e00      	cmp	r6, #0
 801984c:	f6bf af2f 	bge.w	80196ae <__ieee754_rem_pio2f+0x66>
 8019850:	edd4 7a00 	vldr	s15, [r4]
 8019854:	eef1 7a67 	vneg.f32	s15, s15
 8019858:	edc4 7a00 	vstr	s15, [r4]
 801985c:	edd4 7a01 	vldr	s15, [r4, #4]
 8019860:	eef1 7a67 	vneg.f32	s15, s15
 8019864:	edc4 7a01 	vstr	s15, [r4, #4]
 8019868:	e782      	b.n	8019770 <__ieee754_rem_pio2f+0x128>
 801986a:	2303      	movs	r3, #3
 801986c:	e7e5      	b.n	801983a <__ieee754_rem_pio2f+0x1f2>
 801986e:	bf00      	nop
 8019870:	3f490fd8 	.word	0x3f490fd8
 8019874:	4016cbe3 	.word	0x4016cbe3
 8019878:	3fc90f80 	.word	0x3fc90f80
 801987c:	3fc90fd0 	.word	0x3fc90fd0
 8019880:	37354400 	.word	0x37354400
 8019884:	37354443 	.word	0x37354443
 8019888:	2e85a308 	.word	0x2e85a308
 801988c:	43490f80 	.word	0x43490f80
 8019890:	3f22f984 	.word	0x3f22f984
 8019894:	0801b464 	.word	0x0801b464
 8019898:	2e85a300 	.word	0x2e85a300
 801989c:	248d3132 	.word	0x248d3132
 80198a0:	43800000 	.word	0x43800000
 80198a4:	0801b4e4 	.word	0x0801b4e4

080198a8 <fabsf>:
 80198a8:	ee10 3a10 	vmov	r3, s0
 80198ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80198b0:	ee00 3a10 	vmov	s0, r3
 80198b4:	4770      	bx	lr
	...

080198b8 <__kernel_rem_pio2f>:
 80198b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198bc:	ed2d 8b04 	vpush	{d8-d9}
 80198c0:	b0d9      	sub	sp, #356	@ 0x164
 80198c2:	4690      	mov	r8, r2
 80198c4:	9001      	str	r0, [sp, #4]
 80198c6:	4ab6      	ldr	r2, [pc, #728]	@ (8019ba0 <__kernel_rem_pio2f+0x2e8>)
 80198c8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80198ca:	f118 0f04 	cmn.w	r8, #4
 80198ce:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80198d2:	460f      	mov	r7, r1
 80198d4:	f103 3bff 	add.w	fp, r3, #4294967295
 80198d8:	db26      	blt.n	8019928 <__kernel_rem_pio2f+0x70>
 80198da:	f1b8 0203 	subs.w	r2, r8, #3
 80198de:	bf48      	it	mi
 80198e0:	f108 0204 	addmi.w	r2, r8, #4
 80198e4:	10d2      	asrs	r2, r2, #3
 80198e6:	1c55      	adds	r5, r2, #1
 80198e8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80198ea:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8019bb0 <__kernel_rem_pio2f+0x2f8>
 80198ee:	00e8      	lsls	r0, r5, #3
 80198f0:	eba2 060b 	sub.w	r6, r2, fp
 80198f4:	9002      	str	r0, [sp, #8]
 80198f6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80198fa:	eb0a 0c0b 	add.w	ip, sl, fp
 80198fe:	ac1c      	add	r4, sp, #112	@ 0x70
 8019900:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019904:	2000      	movs	r0, #0
 8019906:	4560      	cmp	r0, ip
 8019908:	dd10      	ble.n	801992c <__kernel_rem_pio2f+0x74>
 801990a:	a91c      	add	r1, sp, #112	@ 0x70
 801990c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019910:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019914:	2600      	movs	r6, #0
 8019916:	4556      	cmp	r6, sl
 8019918:	dc24      	bgt.n	8019964 <__kernel_rem_pio2f+0xac>
 801991a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801991e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8019bb0 <__kernel_rem_pio2f+0x2f8>
 8019922:	4684      	mov	ip, r0
 8019924:	2400      	movs	r4, #0
 8019926:	e016      	b.n	8019956 <__kernel_rem_pio2f+0x9e>
 8019928:	2200      	movs	r2, #0
 801992a:	e7dc      	b.n	80198e6 <__kernel_rem_pio2f+0x2e>
 801992c:	42c6      	cmn	r6, r0
 801992e:	bf5d      	ittte	pl
 8019930:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8019934:	ee07 1a90 	vmovpl	s15, r1
 8019938:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801993c:	eef0 7a47 	vmovmi.f32	s15, s14
 8019940:	ece4 7a01 	vstmia	r4!, {s15}
 8019944:	3001      	adds	r0, #1
 8019946:	e7de      	b.n	8019906 <__kernel_rem_pio2f+0x4e>
 8019948:	ecfe 6a01 	vldmia	lr!, {s13}
 801994c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8019950:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019954:	3401      	adds	r4, #1
 8019956:	455c      	cmp	r4, fp
 8019958:	ddf6      	ble.n	8019948 <__kernel_rem_pio2f+0x90>
 801995a:	ece9 7a01 	vstmia	r9!, {s15}
 801995e:	3601      	adds	r6, #1
 8019960:	3004      	adds	r0, #4
 8019962:	e7d8      	b.n	8019916 <__kernel_rem_pio2f+0x5e>
 8019964:	a908      	add	r1, sp, #32
 8019966:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801996a:	9104      	str	r1, [sp, #16]
 801996c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801996e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8019bac <__kernel_rem_pio2f+0x2f4>
 8019972:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8019ba8 <__kernel_rem_pio2f+0x2f0>
 8019976:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801997a:	9203      	str	r2, [sp, #12]
 801997c:	4654      	mov	r4, sl
 801997e:	00a2      	lsls	r2, r4, #2
 8019980:	9205      	str	r2, [sp, #20]
 8019982:	aa58      	add	r2, sp, #352	@ 0x160
 8019984:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8019988:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801998c:	a944      	add	r1, sp, #272	@ 0x110
 801998e:	aa08      	add	r2, sp, #32
 8019990:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8019994:	4694      	mov	ip, r2
 8019996:	4626      	mov	r6, r4
 8019998:	2e00      	cmp	r6, #0
 801999a:	dc4c      	bgt.n	8019a36 <__kernel_rem_pio2f+0x17e>
 801999c:	4628      	mov	r0, r5
 801999e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80199a2:	f000 f9f1 	bl	8019d88 <scalbnf>
 80199a6:	eeb0 8a40 	vmov.f32	s16, s0
 80199aa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80199ae:	ee28 0a00 	vmul.f32	s0, s16, s0
 80199b2:	f000 fa4f 	bl	8019e54 <floorf>
 80199b6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80199ba:	eea0 8a67 	vfms.f32	s16, s0, s15
 80199be:	2d00      	cmp	r5, #0
 80199c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80199c4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80199c8:	ee17 9a90 	vmov	r9, s15
 80199cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199d0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80199d4:	dd41      	ble.n	8019a5a <__kernel_rem_pio2f+0x1a2>
 80199d6:	f104 3cff 	add.w	ip, r4, #4294967295
 80199da:	a908      	add	r1, sp, #32
 80199dc:	f1c5 0e08 	rsb	lr, r5, #8
 80199e0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80199e4:	fa46 f00e 	asr.w	r0, r6, lr
 80199e8:	4481      	add	r9, r0
 80199ea:	fa00 f00e 	lsl.w	r0, r0, lr
 80199ee:	1a36      	subs	r6, r6, r0
 80199f0:	f1c5 0007 	rsb	r0, r5, #7
 80199f4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80199f8:	4106      	asrs	r6, r0
 80199fa:	2e00      	cmp	r6, #0
 80199fc:	dd3c      	ble.n	8019a78 <__kernel_rem_pio2f+0x1c0>
 80199fe:	f04f 0e00 	mov.w	lr, #0
 8019a02:	f109 0901 	add.w	r9, r9, #1
 8019a06:	4670      	mov	r0, lr
 8019a08:	4574      	cmp	r4, lr
 8019a0a:	dc68      	bgt.n	8019ade <__kernel_rem_pio2f+0x226>
 8019a0c:	2d00      	cmp	r5, #0
 8019a0e:	dd03      	ble.n	8019a18 <__kernel_rem_pio2f+0x160>
 8019a10:	2d01      	cmp	r5, #1
 8019a12:	d074      	beq.n	8019afe <__kernel_rem_pio2f+0x246>
 8019a14:	2d02      	cmp	r5, #2
 8019a16:	d07d      	beq.n	8019b14 <__kernel_rem_pio2f+0x25c>
 8019a18:	2e02      	cmp	r6, #2
 8019a1a:	d12d      	bne.n	8019a78 <__kernel_rem_pio2f+0x1c0>
 8019a1c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019a20:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019a24:	b340      	cbz	r0, 8019a78 <__kernel_rem_pio2f+0x1c0>
 8019a26:	4628      	mov	r0, r5
 8019a28:	9306      	str	r3, [sp, #24]
 8019a2a:	f000 f9ad 	bl	8019d88 <scalbnf>
 8019a2e:	9b06      	ldr	r3, [sp, #24]
 8019a30:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019a34:	e020      	b.n	8019a78 <__kernel_rem_pio2f+0x1c0>
 8019a36:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019a3a:	3e01      	subs	r6, #1
 8019a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a44:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019a48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019a4c:	ecac 0a01 	vstmia	ip!, {s0}
 8019a50:	ed30 0a01 	vldmdb	r0!, {s0}
 8019a54:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019a58:	e79e      	b.n	8019998 <__kernel_rem_pio2f+0xe0>
 8019a5a:	d105      	bne.n	8019a68 <__kernel_rem_pio2f+0x1b0>
 8019a5c:	1e60      	subs	r0, r4, #1
 8019a5e:	a908      	add	r1, sp, #32
 8019a60:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8019a64:	11f6      	asrs	r6, r6, #7
 8019a66:	e7c8      	b.n	80199fa <__kernel_rem_pio2f+0x142>
 8019a68:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019a6c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a74:	da31      	bge.n	8019ada <__kernel_rem_pio2f+0x222>
 8019a76:	2600      	movs	r6, #0
 8019a78:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a80:	f040 8098 	bne.w	8019bb4 <__kernel_rem_pio2f+0x2fc>
 8019a84:	1e60      	subs	r0, r4, #1
 8019a86:	2200      	movs	r2, #0
 8019a88:	4550      	cmp	r0, sl
 8019a8a:	da4b      	bge.n	8019b24 <__kernel_rem_pio2f+0x26c>
 8019a8c:	2a00      	cmp	r2, #0
 8019a8e:	d065      	beq.n	8019b5c <__kernel_rem_pio2f+0x2a4>
 8019a90:	3c01      	subs	r4, #1
 8019a92:	ab08      	add	r3, sp, #32
 8019a94:	3d08      	subs	r5, #8
 8019a96:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d0f8      	beq.n	8019a90 <__kernel_rem_pio2f+0x1d8>
 8019a9e:	4628      	mov	r0, r5
 8019aa0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019aa4:	f000 f970 	bl	8019d88 <scalbnf>
 8019aa8:	1c63      	adds	r3, r4, #1
 8019aaa:	aa44      	add	r2, sp, #272	@ 0x110
 8019aac:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8019bac <__kernel_rem_pio2f+0x2f4>
 8019ab0:	0099      	lsls	r1, r3, #2
 8019ab2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019ab6:	4623      	mov	r3, r4
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	f280 80a9 	bge.w	8019c10 <__kernel_rem_pio2f+0x358>
 8019abe:	4623      	mov	r3, r4
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	f2c0 80c7 	blt.w	8019c54 <__kernel_rem_pio2f+0x39c>
 8019ac6:	aa44      	add	r2, sp, #272	@ 0x110
 8019ac8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019acc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8019ba4 <__kernel_rem_pio2f+0x2ec>
 8019ad0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8019bb0 <__kernel_rem_pio2f+0x2f8>
 8019ad4:	2000      	movs	r0, #0
 8019ad6:	1ae2      	subs	r2, r4, r3
 8019ad8:	e0b1      	b.n	8019c3e <__kernel_rem_pio2f+0x386>
 8019ada:	2602      	movs	r6, #2
 8019adc:	e78f      	b.n	80199fe <__kernel_rem_pio2f+0x146>
 8019ade:	f852 1b04 	ldr.w	r1, [r2], #4
 8019ae2:	b948      	cbnz	r0, 8019af8 <__kernel_rem_pio2f+0x240>
 8019ae4:	b121      	cbz	r1, 8019af0 <__kernel_rem_pio2f+0x238>
 8019ae6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8019aea:	f842 1c04 	str.w	r1, [r2, #-4]
 8019aee:	2101      	movs	r1, #1
 8019af0:	f10e 0e01 	add.w	lr, lr, #1
 8019af4:	4608      	mov	r0, r1
 8019af6:	e787      	b.n	8019a08 <__kernel_rem_pio2f+0x150>
 8019af8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8019afc:	e7f5      	b.n	8019aea <__kernel_rem_pio2f+0x232>
 8019afe:	f104 3cff 	add.w	ip, r4, #4294967295
 8019b02:	aa08      	add	r2, sp, #32
 8019b04:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019b08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019b0c:	a908      	add	r1, sp, #32
 8019b0e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019b12:	e781      	b.n	8019a18 <__kernel_rem_pio2f+0x160>
 8019b14:	f104 3cff 	add.w	ip, r4, #4294967295
 8019b18:	aa08      	add	r2, sp, #32
 8019b1a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019b1e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019b22:	e7f3      	b.n	8019b0c <__kernel_rem_pio2f+0x254>
 8019b24:	a908      	add	r1, sp, #32
 8019b26:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019b2a:	3801      	subs	r0, #1
 8019b2c:	430a      	orrs	r2, r1
 8019b2e:	e7ab      	b.n	8019a88 <__kernel_rem_pio2f+0x1d0>
 8019b30:	3201      	adds	r2, #1
 8019b32:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8019b36:	2e00      	cmp	r6, #0
 8019b38:	d0fa      	beq.n	8019b30 <__kernel_rem_pio2f+0x278>
 8019b3a:	9905      	ldr	r1, [sp, #20]
 8019b3c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8019b40:	eb0d 0001 	add.w	r0, sp, r1
 8019b44:	18e6      	adds	r6, r4, r3
 8019b46:	a91c      	add	r1, sp, #112	@ 0x70
 8019b48:	f104 0c01 	add.w	ip, r4, #1
 8019b4c:	384c      	subs	r0, #76	@ 0x4c
 8019b4e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8019b52:	4422      	add	r2, r4
 8019b54:	4562      	cmp	r2, ip
 8019b56:	da04      	bge.n	8019b62 <__kernel_rem_pio2f+0x2aa>
 8019b58:	4614      	mov	r4, r2
 8019b5a:	e710      	b.n	801997e <__kernel_rem_pio2f+0xc6>
 8019b5c:	9804      	ldr	r0, [sp, #16]
 8019b5e:	2201      	movs	r2, #1
 8019b60:	e7e7      	b.n	8019b32 <__kernel_rem_pio2f+0x27a>
 8019b62:	9903      	ldr	r1, [sp, #12]
 8019b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019b68:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019b6c:	9105      	str	r1, [sp, #20]
 8019b6e:	ee07 1a90 	vmov	s15, r1
 8019b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b76:	2400      	movs	r4, #0
 8019b78:	ece6 7a01 	vstmia	r6!, {s15}
 8019b7c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019bb0 <__kernel_rem_pio2f+0x2f8>
 8019b80:	46b1      	mov	r9, r6
 8019b82:	455c      	cmp	r4, fp
 8019b84:	dd04      	ble.n	8019b90 <__kernel_rem_pio2f+0x2d8>
 8019b86:	ece0 7a01 	vstmia	r0!, {s15}
 8019b8a:	f10c 0c01 	add.w	ip, ip, #1
 8019b8e:	e7e1      	b.n	8019b54 <__kernel_rem_pio2f+0x29c>
 8019b90:	ecfe 6a01 	vldmia	lr!, {s13}
 8019b94:	ed39 7a01 	vldmdb	r9!, {s14}
 8019b98:	3401      	adds	r4, #1
 8019b9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019b9e:	e7f0      	b.n	8019b82 <__kernel_rem_pio2f+0x2ca>
 8019ba0:	0801b828 	.word	0x0801b828
 8019ba4:	0801b7fc 	.word	0x0801b7fc
 8019ba8:	43800000 	.word	0x43800000
 8019bac:	3b800000 	.word	0x3b800000
 8019bb0:	00000000 	.word	0x00000000
 8019bb4:	9b02      	ldr	r3, [sp, #8]
 8019bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8019bba:	eba3 0008 	sub.w	r0, r3, r8
 8019bbe:	f000 f8e3 	bl	8019d88 <scalbnf>
 8019bc2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8019ba8 <__kernel_rem_pio2f+0x2f0>
 8019bc6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bce:	db19      	blt.n	8019c04 <__kernel_rem_pio2f+0x34c>
 8019bd0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8019bac <__kernel_rem_pio2f+0x2f4>
 8019bd4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019bd8:	aa08      	add	r2, sp, #32
 8019bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019bde:	3508      	adds	r5, #8
 8019be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019be4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019bec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019bf0:	ee10 3a10 	vmov	r3, s0
 8019bf4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019bf8:	ee17 3a90 	vmov	r3, s15
 8019bfc:	3401      	adds	r4, #1
 8019bfe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019c02:	e74c      	b.n	8019a9e <__kernel_rem_pio2f+0x1e6>
 8019c04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019c08:	aa08      	add	r2, sp, #32
 8019c0a:	ee10 3a10 	vmov	r3, s0
 8019c0e:	e7f6      	b.n	8019bfe <__kernel_rem_pio2f+0x346>
 8019c10:	a808      	add	r0, sp, #32
 8019c12:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019c16:	9001      	str	r0, [sp, #4]
 8019c18:	ee07 0a90 	vmov	s15, r0
 8019c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c20:	3b01      	subs	r3, #1
 8019c22:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019c26:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019c2a:	ed62 7a01 	vstmdb	r2!, {s15}
 8019c2e:	e743      	b.n	8019ab8 <__kernel_rem_pio2f+0x200>
 8019c30:	ecfc 6a01 	vldmia	ip!, {s13}
 8019c34:	ecb5 7a01 	vldmia	r5!, {s14}
 8019c38:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019c3c:	3001      	adds	r0, #1
 8019c3e:	4550      	cmp	r0, sl
 8019c40:	dc01      	bgt.n	8019c46 <__kernel_rem_pio2f+0x38e>
 8019c42:	4290      	cmp	r0, r2
 8019c44:	ddf4      	ble.n	8019c30 <__kernel_rem_pio2f+0x378>
 8019c46:	a858      	add	r0, sp, #352	@ 0x160
 8019c48:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019c4c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8019c50:	3b01      	subs	r3, #1
 8019c52:	e735      	b.n	8019ac0 <__kernel_rem_pio2f+0x208>
 8019c54:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019c56:	2b02      	cmp	r3, #2
 8019c58:	dc09      	bgt.n	8019c6e <__kernel_rem_pio2f+0x3b6>
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	dc27      	bgt.n	8019cae <__kernel_rem_pio2f+0x3f6>
 8019c5e:	d040      	beq.n	8019ce2 <__kernel_rem_pio2f+0x42a>
 8019c60:	f009 0007 	and.w	r0, r9, #7
 8019c64:	b059      	add	sp, #356	@ 0x164
 8019c66:	ecbd 8b04 	vpop	{d8-d9}
 8019c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c6e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019c70:	2b03      	cmp	r3, #3
 8019c72:	d1f5      	bne.n	8019c60 <__kernel_rem_pio2f+0x3a8>
 8019c74:	aa30      	add	r2, sp, #192	@ 0xc0
 8019c76:	1f0b      	subs	r3, r1, #4
 8019c78:	4413      	add	r3, r2
 8019c7a:	461a      	mov	r2, r3
 8019c7c:	4620      	mov	r0, r4
 8019c7e:	2800      	cmp	r0, #0
 8019c80:	dc50      	bgt.n	8019d24 <__kernel_rem_pio2f+0x46c>
 8019c82:	4622      	mov	r2, r4
 8019c84:	2a01      	cmp	r2, #1
 8019c86:	dc5d      	bgt.n	8019d44 <__kernel_rem_pio2f+0x48c>
 8019c88:	ab30      	add	r3, sp, #192	@ 0xc0
 8019c8a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8019bb0 <__kernel_rem_pio2f+0x2f8>
 8019c8e:	440b      	add	r3, r1
 8019c90:	2c01      	cmp	r4, #1
 8019c92:	dc67      	bgt.n	8019d64 <__kernel_rem_pio2f+0x4ac>
 8019c94:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019c98:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8019c9c:	2e00      	cmp	r6, #0
 8019c9e:	d167      	bne.n	8019d70 <__kernel_rem_pio2f+0x4b8>
 8019ca0:	edc7 6a00 	vstr	s13, [r7]
 8019ca4:	ed87 7a01 	vstr	s14, [r7, #4]
 8019ca8:	edc7 7a02 	vstr	s15, [r7, #8]
 8019cac:	e7d8      	b.n	8019c60 <__kernel_rem_pio2f+0x3a8>
 8019cae:	ab30      	add	r3, sp, #192	@ 0xc0
 8019cb0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8019bb0 <__kernel_rem_pio2f+0x2f8>
 8019cb4:	440b      	add	r3, r1
 8019cb6:	4622      	mov	r2, r4
 8019cb8:	2a00      	cmp	r2, #0
 8019cba:	da24      	bge.n	8019d06 <__kernel_rem_pio2f+0x44e>
 8019cbc:	b34e      	cbz	r6, 8019d12 <__kernel_rem_pio2f+0x45a>
 8019cbe:	eef1 7a47 	vneg.f32	s15, s14
 8019cc2:	edc7 7a00 	vstr	s15, [r7]
 8019cc6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8019cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019cce:	aa31      	add	r2, sp, #196	@ 0xc4
 8019cd0:	2301      	movs	r3, #1
 8019cd2:	429c      	cmp	r4, r3
 8019cd4:	da20      	bge.n	8019d18 <__kernel_rem_pio2f+0x460>
 8019cd6:	b10e      	cbz	r6, 8019cdc <__kernel_rem_pio2f+0x424>
 8019cd8:	eef1 7a67 	vneg.f32	s15, s15
 8019cdc:	edc7 7a01 	vstr	s15, [r7, #4]
 8019ce0:	e7be      	b.n	8019c60 <__kernel_rem_pio2f+0x3a8>
 8019ce2:	ab30      	add	r3, sp, #192	@ 0xc0
 8019ce4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8019bb0 <__kernel_rem_pio2f+0x2f8>
 8019ce8:	440b      	add	r3, r1
 8019cea:	2c00      	cmp	r4, #0
 8019cec:	da05      	bge.n	8019cfa <__kernel_rem_pio2f+0x442>
 8019cee:	b10e      	cbz	r6, 8019cf4 <__kernel_rem_pio2f+0x43c>
 8019cf0:	eef1 7a67 	vneg.f32	s15, s15
 8019cf4:	edc7 7a00 	vstr	s15, [r7]
 8019cf8:	e7b2      	b.n	8019c60 <__kernel_rem_pio2f+0x3a8>
 8019cfa:	ed33 7a01 	vldmdb	r3!, {s14}
 8019cfe:	3c01      	subs	r4, #1
 8019d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019d04:	e7f1      	b.n	8019cea <__kernel_rem_pio2f+0x432>
 8019d06:	ed73 7a01 	vldmdb	r3!, {s15}
 8019d0a:	3a01      	subs	r2, #1
 8019d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019d10:	e7d2      	b.n	8019cb8 <__kernel_rem_pio2f+0x400>
 8019d12:	eef0 7a47 	vmov.f32	s15, s14
 8019d16:	e7d4      	b.n	8019cc2 <__kernel_rem_pio2f+0x40a>
 8019d18:	ecb2 7a01 	vldmia	r2!, {s14}
 8019d1c:	3301      	adds	r3, #1
 8019d1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019d22:	e7d6      	b.n	8019cd2 <__kernel_rem_pio2f+0x41a>
 8019d24:	ed72 7a01 	vldmdb	r2!, {s15}
 8019d28:	edd2 6a01 	vldr	s13, [r2, #4]
 8019d2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019d30:	3801      	subs	r0, #1
 8019d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d36:	ed82 7a00 	vstr	s14, [r2]
 8019d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d3e:	edc2 7a01 	vstr	s15, [r2, #4]
 8019d42:	e79c      	b.n	8019c7e <__kernel_rem_pio2f+0x3c6>
 8019d44:	ed73 7a01 	vldmdb	r3!, {s15}
 8019d48:	edd3 6a01 	vldr	s13, [r3, #4]
 8019d4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019d50:	3a01      	subs	r2, #1
 8019d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d56:	ed83 7a00 	vstr	s14, [r3]
 8019d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d5e:	edc3 7a01 	vstr	s15, [r3, #4]
 8019d62:	e78f      	b.n	8019c84 <__kernel_rem_pio2f+0x3cc>
 8019d64:	ed33 7a01 	vldmdb	r3!, {s14}
 8019d68:	3c01      	subs	r4, #1
 8019d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019d6e:	e78f      	b.n	8019c90 <__kernel_rem_pio2f+0x3d8>
 8019d70:	eef1 6a66 	vneg.f32	s13, s13
 8019d74:	eeb1 7a47 	vneg.f32	s14, s14
 8019d78:	edc7 6a00 	vstr	s13, [r7]
 8019d7c:	ed87 7a01 	vstr	s14, [r7, #4]
 8019d80:	eef1 7a67 	vneg.f32	s15, s15
 8019d84:	e790      	b.n	8019ca8 <__kernel_rem_pio2f+0x3f0>
 8019d86:	bf00      	nop

08019d88 <scalbnf>:
 8019d88:	ee10 3a10 	vmov	r3, s0
 8019d8c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8019d90:	d02b      	beq.n	8019dea <scalbnf+0x62>
 8019d92:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8019d96:	d302      	bcc.n	8019d9e <scalbnf+0x16>
 8019d98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019d9c:	4770      	bx	lr
 8019d9e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8019da2:	d123      	bne.n	8019dec <scalbnf+0x64>
 8019da4:	4b24      	ldr	r3, [pc, #144]	@ (8019e38 <scalbnf+0xb0>)
 8019da6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8019e3c <scalbnf+0xb4>
 8019daa:	4298      	cmp	r0, r3
 8019dac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019db0:	db17      	blt.n	8019de2 <scalbnf+0x5a>
 8019db2:	ee10 3a10 	vmov	r3, s0
 8019db6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019dba:	3a19      	subs	r2, #25
 8019dbc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8019dc0:	4288      	cmp	r0, r1
 8019dc2:	dd15      	ble.n	8019df0 <scalbnf+0x68>
 8019dc4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8019e40 <scalbnf+0xb8>
 8019dc8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8019e44 <scalbnf+0xbc>
 8019dcc:	ee10 3a10 	vmov	r3, s0
 8019dd0:	eeb0 7a67 	vmov.f32	s14, s15
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	bfb8      	it	lt
 8019dd8:	eef0 7a66 	vmovlt.f32	s15, s13
 8019ddc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019de0:	4770      	bx	lr
 8019de2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019e48 <scalbnf+0xc0>
 8019de6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019dea:	4770      	bx	lr
 8019dec:	0dd2      	lsrs	r2, r2, #23
 8019dee:	e7e5      	b.n	8019dbc <scalbnf+0x34>
 8019df0:	4410      	add	r0, r2
 8019df2:	28fe      	cmp	r0, #254	@ 0xfe
 8019df4:	dce6      	bgt.n	8019dc4 <scalbnf+0x3c>
 8019df6:	2800      	cmp	r0, #0
 8019df8:	dd06      	ble.n	8019e08 <scalbnf+0x80>
 8019dfa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019dfe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019e02:	ee00 3a10 	vmov	s0, r3
 8019e06:	4770      	bx	lr
 8019e08:	f110 0f16 	cmn.w	r0, #22
 8019e0c:	da09      	bge.n	8019e22 <scalbnf+0x9a>
 8019e0e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8019e48 <scalbnf+0xc0>
 8019e12:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8019e4c <scalbnf+0xc4>
 8019e16:	ee10 3a10 	vmov	r3, s0
 8019e1a:	eeb0 7a67 	vmov.f32	s14, s15
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	e7d9      	b.n	8019dd6 <scalbnf+0x4e>
 8019e22:	3019      	adds	r0, #25
 8019e24:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019e28:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019e2c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8019e50 <scalbnf+0xc8>
 8019e30:	ee07 3a90 	vmov	s15, r3
 8019e34:	e7d7      	b.n	8019de6 <scalbnf+0x5e>
 8019e36:	bf00      	nop
 8019e38:	ffff3cb0 	.word	0xffff3cb0
 8019e3c:	4c000000 	.word	0x4c000000
 8019e40:	7149f2ca 	.word	0x7149f2ca
 8019e44:	f149f2ca 	.word	0xf149f2ca
 8019e48:	0da24260 	.word	0x0da24260
 8019e4c:	8da24260 	.word	0x8da24260
 8019e50:	33000000 	.word	0x33000000

08019e54 <floorf>:
 8019e54:	ee10 3a10 	vmov	r3, s0
 8019e58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019e5c:	3a7f      	subs	r2, #127	@ 0x7f
 8019e5e:	2a16      	cmp	r2, #22
 8019e60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019e64:	dc2b      	bgt.n	8019ebe <floorf+0x6a>
 8019e66:	2a00      	cmp	r2, #0
 8019e68:	da12      	bge.n	8019e90 <floorf+0x3c>
 8019e6a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019ed0 <floorf+0x7c>
 8019e6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019e72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e7a:	dd06      	ble.n	8019e8a <floorf+0x36>
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	da24      	bge.n	8019eca <floorf+0x76>
 8019e80:	2900      	cmp	r1, #0
 8019e82:	4b14      	ldr	r3, [pc, #80]	@ (8019ed4 <floorf+0x80>)
 8019e84:	bf08      	it	eq
 8019e86:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8019e8a:	ee00 3a10 	vmov	s0, r3
 8019e8e:	4770      	bx	lr
 8019e90:	4911      	ldr	r1, [pc, #68]	@ (8019ed8 <floorf+0x84>)
 8019e92:	4111      	asrs	r1, r2
 8019e94:	420b      	tst	r3, r1
 8019e96:	d0fa      	beq.n	8019e8e <floorf+0x3a>
 8019e98:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8019ed0 <floorf+0x7c>
 8019e9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019ea0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ea8:	ddef      	ble.n	8019e8a <floorf+0x36>
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	bfbe      	ittt	lt
 8019eae:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019eb2:	fa40 f202 	asrlt.w	r2, r0, r2
 8019eb6:	189b      	addlt	r3, r3, r2
 8019eb8:	ea23 0301 	bic.w	r3, r3, r1
 8019ebc:	e7e5      	b.n	8019e8a <floorf+0x36>
 8019ebe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019ec2:	d3e4      	bcc.n	8019e8e <floorf+0x3a>
 8019ec4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019ec8:	4770      	bx	lr
 8019eca:	2300      	movs	r3, #0
 8019ecc:	e7dd      	b.n	8019e8a <floorf+0x36>
 8019ece:	bf00      	nop
 8019ed0:	7149f2ca 	.word	0x7149f2ca
 8019ed4:	bf800000 	.word	0xbf800000
 8019ed8:	007fffff 	.word	0x007fffff

08019edc <_init>:
 8019edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ede:	bf00      	nop
 8019ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ee2:	bc08      	pop	{r3}
 8019ee4:	469e      	mov	lr, r3
 8019ee6:	4770      	bx	lr

08019ee8 <_fini>:
 8019ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eea:	bf00      	nop
 8019eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019eee:	bc08      	pop	{r3}
 8019ef0:	469e      	mov	lr, r3
 8019ef2:	4770      	bx	lr
