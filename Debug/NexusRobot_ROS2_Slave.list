
NexusRobot_ROS2_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a74  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000193c  08019c48  08019c48  0001ac48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b584  0801b584  0001f300  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801b584  0801b584  0001c584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b58c  0801b58c  0001f300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801b58c  0801b58c  0001c58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b594  0801b594  0001c594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002300  20000000  0801b598  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e3e0  20002300  0801d898  0001f300  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200106e0  0801d898  0001f6e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f300  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce75  00000000  00000000  0001f330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff0  00000000  00000000  0003c1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00040198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001242  00000000  00000000  00041930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007cae  00000000  00000000  00042b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb09  00000000  00000000  0004a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc688  00000000  00000000  00069329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  001659b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073d8  00000000  00000000  00165a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0016cdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20002300 	.word	0x20002300
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019c2c 	.word	0x08019c2c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20002304 	.word	0x20002304
 800020c:	08019c2c 	.word	0x08019c2c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__gedf2>:
 8000658:	f04f 3cff 	mov.w	ip, #4294967295
 800065c:	e006      	b.n	800066c <__cmpdf2+0x4>
 800065e:	bf00      	nop

08000660 <__ledf2>:
 8000660:	f04f 0c01 	mov.w	ip, #1
 8000664:	e002      	b.n	800066c <__cmpdf2+0x4>
 8000666:	bf00      	nop

08000668 <__cmpdf2>:
 8000668:	f04f 0c01 	mov.w	ip, #1
 800066c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000670:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000674:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000678:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800067c:	bf18      	it	ne
 800067e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000682:	d01b      	beq.n	80006bc <__cmpdf2+0x54>
 8000684:	b001      	add	sp, #4
 8000686:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800068a:	bf0c      	ite	eq
 800068c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000690:	ea91 0f03 	teqne	r1, r3
 8000694:	bf02      	ittt	eq
 8000696:	ea90 0f02 	teqeq	r0, r2
 800069a:	2000      	moveq	r0, #0
 800069c:	4770      	bxeq	lr
 800069e:	f110 0f00 	cmn.w	r0, #0
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf58      	it	pl
 80006a8:	4299      	cmppl	r1, r3
 80006aa:	bf08      	it	eq
 80006ac:	4290      	cmpeq	r0, r2
 80006ae:	bf2c      	ite	cs
 80006b0:	17d8      	asrcs	r0, r3, #31
 80006b2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006b6:	f040 0001 	orr.w	r0, r0, #1
 80006ba:	4770      	bx	lr
 80006bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006c4:	d102      	bne.n	80006cc <__cmpdf2+0x64>
 80006c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ca:	d107      	bne.n	80006dc <__cmpdf2+0x74>
 80006cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006d4:	d1d6      	bne.n	8000684 <__cmpdf2+0x1c>
 80006d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006da:	d0d3      	beq.n	8000684 <__cmpdf2+0x1c>
 80006dc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <__aeabi_cdrcmple>:
 80006e4:	4684      	mov	ip, r0
 80006e6:	4610      	mov	r0, r2
 80006e8:	4662      	mov	r2, ip
 80006ea:	468c      	mov	ip, r1
 80006ec:	4619      	mov	r1, r3
 80006ee:	4663      	mov	r3, ip
 80006f0:	e000      	b.n	80006f4 <__aeabi_cdcmpeq>
 80006f2:	bf00      	nop

080006f4 <__aeabi_cdcmpeq>:
 80006f4:	b501      	push	{r0, lr}
 80006f6:	f7ff ffb7 	bl	8000668 <__cmpdf2>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	bf48      	it	mi
 80006fe:	f110 0f00 	cmnmi.w	r0, #0
 8000702:	bd01      	pop	{r0, pc}

08000704 <__aeabi_dcmpeq>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff fff4 	bl	80006f4 <__aeabi_cdcmpeq>
 800070c:	bf0c      	ite	eq
 800070e:	2001      	moveq	r0, #1
 8000710:	2000      	movne	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_dcmplt>:
 8000718:	f84d ed08 	str.w	lr, [sp, #-8]!
 800071c:	f7ff ffea 	bl	80006f4 <__aeabi_cdcmpeq>
 8000720:	bf34      	ite	cc
 8000722:	2001      	movcc	r0, #1
 8000724:	2000      	movcs	r0, #0
 8000726:	f85d fb08 	ldr.w	pc, [sp], #8
 800072a:	bf00      	nop

0800072c <__aeabi_dcmple>:
 800072c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000730:	f7ff ffe0 	bl	80006f4 <__aeabi_cdcmpeq>
 8000734:	bf94      	ite	ls
 8000736:	2001      	movls	r0, #1
 8000738:	2000      	movhi	r0, #0
 800073a:	f85d fb08 	ldr.w	pc, [sp], #8
 800073e:	bf00      	nop

08000740 <__aeabi_dcmpge>:
 8000740:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000744:	f7ff ffce 	bl	80006e4 <__aeabi_cdrcmple>
 8000748:	bf94      	ite	ls
 800074a:	2001      	movls	r0, #1
 800074c:	2000      	movhi	r0, #0
 800074e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000752:	bf00      	nop

08000754 <__aeabi_dcmpgt>:
 8000754:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000758:	f7ff ffc4 	bl	80006e4 <__aeabi_cdrcmple>
 800075c:	bf34      	ite	cc
 800075e:	2001      	movcc	r0, #1
 8000760:	2000      	movcs	r0, #0
 8000762:	f85d fb08 	ldr.w	pc, [sp], #8
 8000766:	bf00      	nop

08000768 <__aeabi_d2f>:
 8000768:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800076c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000770:	bf24      	itt	cs
 8000772:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000776:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800077a:	d90d      	bls.n	8000798 <__aeabi_d2f+0x30>
 800077c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000780:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000784:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000788:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800078c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000790:	bf08      	it	eq
 8000792:	f020 0001 	biceq.w	r0, r0, #1
 8000796:	4770      	bx	lr
 8000798:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800079c:	d121      	bne.n	80007e2 <__aeabi_d2f+0x7a>
 800079e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80007a2:	bfbc      	itt	lt
 80007a4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80007a8:	4770      	bxlt	lr
 80007aa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007b2:	f1c2 0218 	rsb	r2, r2, #24
 80007b6:	f1c2 0c20 	rsb	ip, r2, #32
 80007ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80007be:	fa20 f002 	lsr.w	r0, r0, r2
 80007c2:	bf18      	it	ne
 80007c4:	f040 0001 	orrne.w	r0, r0, #1
 80007c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007d4:	ea40 000c 	orr.w	r0, r0, ip
 80007d8:	fa23 f302 	lsr.w	r3, r3, r2
 80007dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007e0:	e7cc      	b.n	800077c <__aeabi_d2f+0x14>
 80007e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007e6:	d107      	bne.n	80007f8 <__aeabi_d2f+0x90>
 80007e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007ec:	bf1e      	ittt	ne
 80007ee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80007f2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80007f6:	4770      	bxne	lr
 80007f8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80007fc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000800:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop

08000808 <__aeabi_ldivmod>:
 8000808:	b97b      	cbnz	r3, 800082a <__aeabi_ldivmod+0x22>
 800080a:	b972      	cbnz	r2, 800082a <__aeabi_ldivmod+0x22>
 800080c:	2900      	cmp	r1, #0
 800080e:	bfbe      	ittt	lt
 8000810:	2000      	movlt	r0, #0
 8000812:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000816:	e006      	blt.n	8000826 <__aeabi_ldivmod+0x1e>
 8000818:	bf08      	it	eq
 800081a:	2800      	cmpeq	r0, #0
 800081c:	bf1c      	itt	ne
 800081e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000822:	f04f 30ff 	movne.w	r0, #4294967295
 8000826:	f000 b9d3 	b.w	8000bd0 <__aeabi_idiv0>
 800082a:	f1ad 0c08 	sub.w	ip, sp, #8
 800082e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000832:	2900      	cmp	r1, #0
 8000834:	db09      	blt.n	800084a <__aeabi_ldivmod+0x42>
 8000836:	2b00      	cmp	r3, #0
 8000838:	db1a      	blt.n	8000870 <__aeabi_ldivmod+0x68>
 800083a:	f000 f84d 	bl	80008d8 <__udivmoddi4>
 800083e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000846:	b004      	add	sp, #16
 8000848:	4770      	bx	lr
 800084a:	4240      	negs	r0, r0
 800084c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	db1b      	blt.n	800088c <__aeabi_ldivmod+0x84>
 8000854:	f000 f840 	bl	80008d8 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4240      	negs	r0, r0
 8000864:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000868:	4252      	negs	r2, r2
 800086a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800086e:	4770      	bx	lr
 8000870:	4252      	negs	r2, r2
 8000872:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000876:	f000 f82f 	bl	80008d8 <__udivmoddi4>
 800087a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000882:	b004      	add	sp, #16
 8000884:	4240      	negs	r0, r0
 8000886:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800088a:	4770      	bx	lr
 800088c:	4252      	negs	r2, r2
 800088e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000892:	f000 f821 	bl	80008d8 <__udivmoddi4>
 8000896:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800089e:	b004      	add	sp, #16
 80008a0:	4252      	negs	r2, r2
 80008a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008a6:	4770      	bx	lr

080008a8 <__aeabi_uldivmod>:
 80008a8:	b953      	cbnz	r3, 80008c0 <__aeabi_uldivmod+0x18>
 80008aa:	b94a      	cbnz	r2, 80008c0 <__aeabi_uldivmod+0x18>
 80008ac:	2900      	cmp	r1, #0
 80008ae:	bf08      	it	eq
 80008b0:	2800      	cmpeq	r0, #0
 80008b2:	bf1c      	itt	ne
 80008b4:	f04f 31ff 	movne.w	r1, #4294967295
 80008b8:	f04f 30ff 	movne.w	r0, #4294967295
 80008bc:	f000 b988 	b.w	8000bd0 <__aeabi_idiv0>
 80008c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008c8:	f000 f806 	bl	80008d8 <__udivmoddi4>
 80008cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d4:	b004      	add	sp, #16
 80008d6:	4770      	bx	lr

080008d8 <__udivmoddi4>:
 80008d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008dc:	9d08      	ldr	r5, [sp, #32]
 80008de:	468e      	mov	lr, r1
 80008e0:	4604      	mov	r4, r0
 80008e2:	4688      	mov	r8, r1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d14a      	bne.n	800097e <__udivmoddi4+0xa6>
 80008e8:	428a      	cmp	r2, r1
 80008ea:	4617      	mov	r7, r2
 80008ec:	d962      	bls.n	80009b4 <__udivmoddi4+0xdc>
 80008ee:	fab2 f682 	clz	r6, r2
 80008f2:	b14e      	cbz	r6, 8000908 <__udivmoddi4+0x30>
 80008f4:	f1c6 0320 	rsb	r3, r6, #32
 80008f8:	fa01 f806 	lsl.w	r8, r1, r6
 80008fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000900:	40b7      	lsls	r7, r6
 8000902:	ea43 0808 	orr.w	r8, r3, r8
 8000906:	40b4      	lsls	r4, r6
 8000908:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800090c:	fa1f fc87 	uxth.w	ip, r7
 8000910:	fbb8 f1fe 	udiv	r1, r8, lr
 8000914:	0c23      	lsrs	r3, r4, #16
 8000916:	fb0e 8811 	mls	r8, lr, r1, r8
 800091a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800091e:	fb01 f20c 	mul.w	r2, r1, ip
 8000922:	429a      	cmp	r2, r3
 8000924:	d909      	bls.n	800093a <__udivmoddi4+0x62>
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	f101 30ff 	add.w	r0, r1, #4294967295
 800092c:	f080 80ea 	bcs.w	8000b04 <__udivmoddi4+0x22c>
 8000930:	429a      	cmp	r2, r3
 8000932:	f240 80e7 	bls.w	8000b04 <__udivmoddi4+0x22c>
 8000936:	3902      	subs	r1, #2
 8000938:	443b      	add	r3, r7
 800093a:	1a9a      	subs	r2, r3, r2
 800093c:	b2a3      	uxth	r3, r4
 800093e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000942:	fb0e 2210 	mls	r2, lr, r0, r2
 8000946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800094a:	fb00 fc0c 	mul.w	ip, r0, ip
 800094e:	459c      	cmp	ip, r3
 8000950:	d909      	bls.n	8000966 <__udivmoddi4+0x8e>
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	f100 32ff 	add.w	r2, r0, #4294967295
 8000958:	f080 80d6 	bcs.w	8000b08 <__udivmoddi4+0x230>
 800095c:	459c      	cmp	ip, r3
 800095e:	f240 80d3 	bls.w	8000b08 <__udivmoddi4+0x230>
 8000962:	443b      	add	r3, r7
 8000964:	3802      	subs	r0, #2
 8000966:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800096a:	eba3 030c 	sub.w	r3, r3, ip
 800096e:	2100      	movs	r1, #0
 8000970:	b11d      	cbz	r5, 800097a <__udivmoddi4+0xa2>
 8000972:	40f3      	lsrs	r3, r6
 8000974:	2200      	movs	r2, #0
 8000976:	e9c5 3200 	strd	r3, r2, [r5]
 800097a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097e:	428b      	cmp	r3, r1
 8000980:	d905      	bls.n	800098e <__udivmoddi4+0xb6>
 8000982:	b10d      	cbz	r5, 8000988 <__udivmoddi4+0xb0>
 8000984:	e9c5 0100 	strd	r0, r1, [r5]
 8000988:	2100      	movs	r1, #0
 800098a:	4608      	mov	r0, r1
 800098c:	e7f5      	b.n	800097a <__udivmoddi4+0xa2>
 800098e:	fab3 f183 	clz	r1, r3
 8000992:	2900      	cmp	r1, #0
 8000994:	d146      	bne.n	8000a24 <__udivmoddi4+0x14c>
 8000996:	4573      	cmp	r3, lr
 8000998:	d302      	bcc.n	80009a0 <__udivmoddi4+0xc8>
 800099a:	4282      	cmp	r2, r0
 800099c:	f200 8105 	bhi.w	8000baa <__udivmoddi4+0x2d2>
 80009a0:	1a84      	subs	r4, r0, r2
 80009a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80009a6:	2001      	movs	r0, #1
 80009a8:	4690      	mov	r8, r2
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d0e5      	beq.n	800097a <__udivmoddi4+0xa2>
 80009ae:	e9c5 4800 	strd	r4, r8, [r5]
 80009b2:	e7e2      	b.n	800097a <__udivmoddi4+0xa2>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f000 8090 	beq.w	8000ada <__udivmoddi4+0x202>
 80009ba:	fab2 f682 	clz	r6, r2
 80009be:	2e00      	cmp	r6, #0
 80009c0:	f040 80a4 	bne.w	8000b0c <__udivmoddi4+0x234>
 80009c4:	1a8a      	subs	r2, r1, r2
 80009c6:	0c03      	lsrs	r3, r0, #16
 80009c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009cc:	b280      	uxth	r0, r0
 80009ce:	b2bc      	uxth	r4, r7
 80009d0:	2101      	movs	r1, #1
 80009d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80009d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80009da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009de:	fb04 f20c 	mul.w	r2, r4, ip
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d907      	bls.n	80009f6 <__udivmoddi4+0x11e>
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009ec:	d202      	bcs.n	80009f4 <__udivmoddi4+0x11c>
 80009ee:	429a      	cmp	r2, r3
 80009f0:	f200 80e0 	bhi.w	8000bb4 <__udivmoddi4+0x2dc>
 80009f4:	46c4      	mov	ip, r8
 80009f6:	1a9b      	subs	r3, r3, r2
 80009f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80009fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a04:	fb02 f404 	mul.w	r4, r2, r4
 8000a08:	429c      	cmp	r4, r3
 8000a0a:	d907      	bls.n	8000a1c <__udivmoddi4+0x144>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a12:	d202      	bcs.n	8000a1a <__udivmoddi4+0x142>
 8000a14:	429c      	cmp	r4, r3
 8000a16:	f200 80ca 	bhi.w	8000bae <__udivmoddi4+0x2d6>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	1b1b      	subs	r3, r3, r4
 8000a1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a22:	e7a5      	b.n	8000970 <__udivmoddi4+0x98>
 8000a24:	f1c1 0620 	rsb	r6, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a2e:	431f      	orrs	r7, r3
 8000a30:	fa0e f401 	lsl.w	r4, lr, r1
 8000a34:	fa20 f306 	lsr.w	r3, r0, r6
 8000a38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fa00 f801 	lsl.w	r8, r0, r1
 8000a46:	fa1f fc87 	uxth.w	ip, r7
 8000a4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a62:	d909      	bls.n	8000a78 <__udivmoddi4+0x1a0>
 8000a64:	193c      	adds	r4, r7, r4
 8000a66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a6a:	f080 809c 	bcs.w	8000ba6 <__udivmoddi4+0x2ce>
 8000a6e:	45a6      	cmp	lr, r4
 8000a70:	f240 8099 	bls.w	8000ba6 <__udivmoddi4+0x2ce>
 8000a74:	3802      	subs	r0, #2
 8000a76:	443c      	add	r4, r7
 8000a78:	eba4 040e 	sub.w	r4, r4, lr
 8000a7c:	fa1f fe83 	uxth.w	lr, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a90:	45a4      	cmp	ip, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1ce>
 8000a94:	193c      	adds	r4, r7, r4
 8000a96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a9a:	f080 8082 	bcs.w	8000ba2 <__udivmoddi4+0x2ca>
 8000a9e:	45a4      	cmp	ip, r4
 8000aa0:	d97f      	bls.n	8000ba2 <__udivmoddi4+0x2ca>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	443c      	add	r4, r7
 8000aa6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000aaa:	eba4 040c 	sub.w	r4, r4, ip
 8000aae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ab2:	4564      	cmp	r4, ip
 8000ab4:	4673      	mov	r3, lr
 8000ab6:	46e1      	mov	r9, ip
 8000ab8:	d362      	bcc.n	8000b80 <__udivmoddi4+0x2a8>
 8000aba:	d05f      	beq.n	8000b7c <__udivmoddi4+0x2a4>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x1fe>
 8000abe:	ebb8 0203 	subs.w	r2, r8, r3
 8000ac2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ac6:	fa04 f606 	lsl.w	r6, r4, r6
 8000aca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ace:	431e      	orrs	r6, r3
 8000ad0:	40cc      	lsrs	r4, r1
 8000ad2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e74f      	b.n	800097a <__udivmoddi4+0xa2>
 8000ada:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ade:	0c01      	lsrs	r1, r0, #16
 8000ae0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ae4:	b280      	uxth	r0, r0
 8000ae6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000aea:	463b      	mov	r3, r7
 8000aec:	4638      	mov	r0, r7
 8000aee:	463c      	mov	r4, r7
 8000af0:	46b8      	mov	r8, r7
 8000af2:	46be      	mov	lr, r7
 8000af4:	2620      	movs	r6, #32
 8000af6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000afa:	eba2 0208 	sub.w	r2, r2, r8
 8000afe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b02:	e766      	b.n	80009d2 <__udivmoddi4+0xfa>
 8000b04:	4601      	mov	r1, r0
 8000b06:	e718      	b.n	800093a <__udivmoddi4+0x62>
 8000b08:	4610      	mov	r0, r2
 8000b0a:	e72c      	b.n	8000966 <__udivmoddi4+0x8e>
 8000b0c:	f1c6 0220 	rsb	r2, r6, #32
 8000b10:	fa2e f302 	lsr.w	r3, lr, r2
 8000b14:	40b7      	lsls	r7, r6
 8000b16:	40b1      	lsls	r1, r6
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b20:	430a      	orrs	r2, r1
 8000b22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b26:	b2bc      	uxth	r4, r7
 8000b28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b2c:	0c11      	lsrs	r1, r2, #16
 8000b2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b32:	fb08 f904 	mul.w	r9, r8, r4
 8000b36:	40b0      	lsls	r0, r6
 8000b38:	4589      	cmp	r9, r1
 8000b3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b3e:	b280      	uxth	r0, r0
 8000b40:	d93e      	bls.n	8000bc0 <__udivmoddi4+0x2e8>
 8000b42:	1879      	adds	r1, r7, r1
 8000b44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b48:	d201      	bcs.n	8000b4e <__udivmoddi4+0x276>
 8000b4a:	4589      	cmp	r9, r1
 8000b4c:	d81f      	bhi.n	8000b8e <__udivmoddi4+0x2b6>
 8000b4e:	eba1 0109 	sub.w	r1, r1, r9
 8000b52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b56:	fb09 f804 	mul.w	r8, r9, r4
 8000b5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b5e:	b292      	uxth	r2, r2
 8000b60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b64:	4542      	cmp	r2, r8
 8000b66:	d229      	bcs.n	8000bbc <__udivmoddi4+0x2e4>
 8000b68:	18ba      	adds	r2, r7, r2
 8000b6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b6e:	d2c4      	bcs.n	8000afa <__udivmoddi4+0x222>
 8000b70:	4542      	cmp	r2, r8
 8000b72:	d2c2      	bcs.n	8000afa <__udivmoddi4+0x222>
 8000b74:	f1a9 0102 	sub.w	r1, r9, #2
 8000b78:	443a      	add	r2, r7
 8000b7a:	e7be      	b.n	8000afa <__udivmoddi4+0x222>
 8000b7c:	45f0      	cmp	r8, lr
 8000b7e:	d29d      	bcs.n	8000abc <__udivmoddi4+0x1e4>
 8000b80:	ebbe 0302 	subs.w	r3, lr, r2
 8000b84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b88:	3801      	subs	r0, #1
 8000b8a:	46e1      	mov	r9, ip
 8000b8c:	e796      	b.n	8000abc <__udivmoddi4+0x1e4>
 8000b8e:	eba7 0909 	sub.w	r9, r7, r9
 8000b92:	4449      	add	r1, r9
 8000b94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ba0:	e7db      	b.n	8000b5a <__udivmoddi4+0x282>
 8000ba2:	4673      	mov	r3, lr
 8000ba4:	e77f      	b.n	8000aa6 <__udivmoddi4+0x1ce>
 8000ba6:	4650      	mov	r0, sl
 8000ba8:	e766      	b.n	8000a78 <__udivmoddi4+0x1a0>
 8000baa:	4608      	mov	r0, r1
 8000bac:	e6fd      	b.n	80009aa <__udivmoddi4+0xd2>
 8000bae:	443b      	add	r3, r7
 8000bb0:	3a02      	subs	r2, #2
 8000bb2:	e733      	b.n	8000a1c <__udivmoddi4+0x144>
 8000bb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bb8:	443b      	add	r3, r7
 8000bba:	e71c      	b.n	80009f6 <__udivmoddi4+0x11e>
 8000bbc:	4649      	mov	r1, r9
 8000bbe:	e79c      	b.n	8000afa <__udivmoddi4+0x222>
 8000bc0:	eba1 0109 	sub.w	r1, r1, r9
 8000bc4:	46c4      	mov	ip, r8
 8000bc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bca:	fb09 f804 	mul.w	r8, r9, r4
 8000bce:	e7c4      	b.n	8000b5a <__udivmoddi4+0x282>

08000bd0 <__aeabi_idiv0>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000be0:	f006 fd9e 	bl	8007720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000be4:	4b5a      	ldr	r3, [pc, #360]	@ (8000d50 <pvPortMallocMicroROS+0x17c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000bec:	f000 f986 	bl	8000efc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000bf0:	4b58      	ldr	r3, [pc, #352]	@ (8000d54 <pvPortMallocMicroROS+0x180>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f040 8090 	bne.w	8000d1e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01e      	beq.n	8000c42 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000c04:	2208      	movs	r2, #8
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d015      	beq.n	8000c42 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f023 0307 	bic.w	r3, r3, #7
 8000c1c:	3308      	adds	r3, #8
 8000c1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d00b      	beq.n	8000c42 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c2e:	f383 8811 	msr	BASEPRI, r3
 8000c32:	f3bf 8f6f 	isb	sy
 8000c36:	f3bf 8f4f 	dsb	sy
 8000c3a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	e7fd      	b.n	8000c3e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d06a      	beq.n	8000d1e <pvPortMallocMicroROS+0x14a>
 8000c48:	4b43      	ldr	r3, [pc, #268]	@ (8000d58 <pvPortMallocMicroROS+0x184>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d865      	bhi.n	8000d1e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000c52:	4b42      	ldr	r3, [pc, #264]	@ (8000d5c <pvPortMallocMicroROS+0x188>)
 8000c54:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000c56:	4b41      	ldr	r3, [pc, #260]	@ (8000d5c <pvPortMallocMicroROS+0x188>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c5c:	e004      	b.n	8000c68 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c60:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d903      	bls.n	8000c7a <pvPortMallocMicroROS+0xa6>
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f1      	bne.n	8000c5e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000c7a:	4b35      	ldr	r3, [pc, #212]	@ (8000d50 <pvPortMallocMicroROS+0x17c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d04c      	beq.n	8000d1e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2208      	movs	r2, #8
 8000c8a:	4413      	add	r3, r2
 8000c8c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	1ad2      	subs	r2, r2, r3
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d920      	bls.n	8000ce8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00b      	beq.n	8000cd0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cbc:	f383 8811 	msr	BASEPRI, r3
 8000cc0:	f3bf 8f6f 	isb	sy
 8000cc4:	f3bf 8f4f 	dsb	sy
 8000cc8:	613b      	str	r3, [r7, #16]
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	1ad2      	subs	r2, r2, r3
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000ce2:	69b8      	ldr	r0, [r7, #24]
 8000ce4:	f000 f96c 	bl	8000fc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <pvPortMallocMicroROS+0x184>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	4a19      	ldr	r2, [pc, #100]	@ (8000d58 <pvPortMallocMicroROS+0x184>)
 8000cf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <pvPortMallocMicroROS+0x184>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <pvPortMallocMicroROS+0x18c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d203      	bcs.n	8000d0a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <pvPortMallocMicroROS+0x184>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a16      	ldr	r2, [pc, #88]	@ (8000d60 <pvPortMallocMicroROS+0x18c>)
 8000d08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <pvPortMallocMicroROS+0x180>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000d1e:	f006 fd0d 	bl	800773c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	f003 0307 	and.w	r3, r3, #7
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d30:	f383 8811 	msr	BASEPRI, r3
 8000d34:	f3bf 8f6f 	isb	sy
 8000d38:	f3bf 8f4f 	dsb	sy
 8000d3c:	60fb      	str	r3, [r7, #12]
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000d44:	69fb      	ldr	r3, [r7, #28]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3728      	adds	r7, #40	@ 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20005f24 	.word	0x20005f24
 8000d54:	20005f30 	.word	0x20005f30
 8000d58:	20005f28 	.word	0x20005f28
 8000d5c:	20005f1c 	.word	0x20005f1c
 8000d60:	20005f2c 	.word	0x20005f2c

08000d64 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d04a      	beq.n	8000e0c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000d76:	2308      	movs	r3, #8
 8000d78:	425b      	negs	r3, r3
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <vPortFreeMicroROS+0xb0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10b      	bne.n	8000daa <vPortFreeMicroROS+0x46>
	__asm volatile
 8000d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d96:	f383 8811 	msr	BASEPRI, r3
 8000d9a:	f3bf 8f6f 	isb	sy
 8000d9e:	f3bf 8f4f 	dsb	sy
 8000da2:	60fb      	str	r3, [r7, #12]
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	e7fd      	b.n	8000da6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00b      	beq.n	8000dca <vPortFreeMicroROS+0x66>
	__asm volatile
 8000db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000db6:	f383 8811 	msr	BASEPRI, r3
 8000dba:	f3bf 8f6f 	isb	sy
 8000dbe:	f3bf 8f4f 	dsb	sy
 8000dc2:	60bb      	str	r3, [r7, #8]
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	e7fd      	b.n	8000dc6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <vPortFreeMicroROS+0xb0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d019      	beq.n	8000e0c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d115      	bne.n	8000e0c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e14 <vPortFreeMicroROS+0xb0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000df0:	f006 fc96 	bl	8007720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <vPortFreeMicroROS+0xb4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a06      	ldr	r2, [pc, #24]	@ (8000e18 <vPortFreeMicroROS+0xb4>)
 8000e00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e02:	6938      	ldr	r0, [r7, #16]
 8000e04:	f000 f8dc 	bl	8000fc0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000e08:	f006 fc98 	bl	800773c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20005f30 	.word	0x20005f30
 8000e18:	20005f28 	.word	0x20005f28

08000e1c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	425b      	negs	r3, r3
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	4413      	add	r3, r2
 8000e30:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <getBlockSize+0x38>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]

	return count;
 8000e44:	68fb      	ldr	r3, [r7, #12]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20005f30 	.word	0x20005f30

08000e58 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000e62:	f006 fc5d 	bl	8007720 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000e66:	6838      	ldr	r0, [r7, #0]
 8000e68:	f7ff feb4 	bl	8000bd4 <pvPortMallocMicroROS>
 8000e6c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d017      	beq.n	8000ea4 <pvPortReallocMicroROS+0x4c>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d014      	beq.n	8000ea4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffce 	bl	8000e1c <getBlockSize>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2208      	movs	r2, #8
 8000e84:	1a9b      	subs	r3, r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d201      	bcs.n	8000e94 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	68b8      	ldr	r0, [r7, #8]
 8000e9a:	f017 fb16 	bl	80184ca <memcpy>

		vPortFreeMicroROS(pv);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff60 	bl	8000d64 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000ea4:	f006 fc4a 	bl	800773c <xTaskResumeAll>

	return newmem;
 8000ea8:	68bb      	ldr	r3, [r7, #8]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ebc:	f006 fc30 	bl	8007720 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff fe82 	bl	8000bd4 <pvPortMallocMicroROS>
 8000ed0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000ed6:	e004      	b.n	8000ee2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	613a      	str	r2, [r7, #16]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	1e5a      	subs	r2, r3, #1
 8000ee6:	617a      	str	r2, [r7, #20]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f5      	bne.n	8000ed8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000eec:	f006 fc26 	bl	800773c <xTaskResumeAll>
  	return mem;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000f02:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000f06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000f08:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <prvHeapInit+0xac>)
 8000f0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00c      	beq.n	8000f30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	3307      	adds	r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f023 0307 	bic.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa8 <prvHeapInit+0xac>)
 8000f2c:	4413      	add	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000f34:	4a1d      	ldr	r2, [pc, #116]	@ (8000fac <prvHeapInit+0xb0>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <prvHeapInit+0xb0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	68ba      	ldr	r2, [r7, #8]
 8000f44:	4413      	add	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000f48:	2208      	movs	r2, #8
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	1a9b      	subs	r3, r3, r2
 8000f4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f023 0307 	bic.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4a15      	ldr	r2, [pc, #84]	@ (8000fb0 <prvHeapInit+0xb4>)
 8000f5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	@ (8000fb0 <prvHeapInit+0xb4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000f66:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <prvHeapInit+0xb4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	1ad2      	subs	r2, r2, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb0 <prvHeapInit+0xb4>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <prvHeapInit+0xb8>)
 8000f8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <prvHeapInit+0xbc>)
 8000f92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000f94:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <prvHeapInit+0xc0>)
 8000f96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	2000231c 	.word	0x2000231c
 8000fac:	20005f1c 	.word	0x20005f1c
 8000fb0:	20005f24 	.word	0x20005f24
 8000fb4:	20005f2c 	.word	0x20005f2c
 8000fb8:	20005f28 	.word	0x20005f28
 8000fbc:	20005f30 	.word	0x20005f30

08000fc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000fc8:	4b28      	ldr	r3, [pc, #160]	@ (800106c <prvInsertBlockIntoFreeList+0xac>)
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e002      	b.n	8000fd4 <prvInsertBlockIntoFreeList+0x14>
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d8f7      	bhi.n	8000fce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	4413      	add	r3, r2
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d108      	bne.n	8001002 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	441a      	add	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	441a      	add	r2, r3
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	429a      	cmp	r2, r3
 8001014:	d118      	bne.n	8001048 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <prvInsertBlockIntoFreeList+0xb0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d00d      	beq.n	800103e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	441a      	add	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	e008      	b.n	8001050 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <prvInsertBlockIntoFreeList+0xb0>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	e003      	b.n	8001050 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d002      	beq.n	800105e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20005f1c 	.word	0x20005f1c
 8001070:	20005f24 	.word	0x20005f24

08001074 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001082:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001084:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001088:	4904      	ldr	r1, [pc, #16]	@ (800109c <cubemx_transport_open+0x28>)
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f004 f824 	bl	80050d8 <HAL_UART_Receive_DMA>
    return true;
 8001090:	2301      	movs	r3, #1
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20005f34 	.word	0x20005f34

080010a0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80010ae:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f004 f836 	bl	8005122 <HAL_UART_DMAStop>
    return true;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80010d4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b20      	cmp	r3, #32
 80010e0:	d11c      	bne.n	800111c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f003 ff78 	bl	8004fe0 <HAL_UART_Transmit_DMA>
 80010f0:	4603      	mov	r3, r0
 80010f2:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80010f4:	e002      	b.n	80010fc <cubemx_transport_write+0x3c>
            osDelay(1);
 80010f6:	2001      	movs	r0, #1
 80010f8:	f005 fad0 	bl	800669c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80010fc:	7cfb      	ldrb	r3, [r7, #19]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d105      	bne.n	800110e <cubemx_transport_write+0x4e>
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b20      	cmp	r3, #32
 800110c:	d1f3      	bne.n	80010f6 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800110e:	7cfb      	ldrb	r3, [r7, #19]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <cubemx_transport_write+0x58>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	e002      	b.n	800111e <cubemx_transport_write+0x5e>
 8001118:	2300      	movs	r3, #0
 800111a:	e000      	b.n	800111e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800111c:	2300      	movs	r3, #0
    }
}
 800111e:	4618      	mov	r0, r3
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800113c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001142:	b672      	cpsid	i
}
 8001144:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001152:	4a1c      	ldr	r2, [pc, #112]	@ (80011c4 <cubemx_transport_read+0x9c>)
 8001154:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001156:	b662      	cpsie	i
}
 8001158:	bf00      	nop
        __enable_irq();
        ms_used++;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001160:	2001      	movs	r0, #1
 8001162:	f005 fa9b 	bl	800669c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001166:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <cubemx_transport_read+0xa0>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <cubemx_transport_read+0x9c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d103      	bne.n	800117a <cubemx_transport_read+0x52>
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	dbe3      	blt.n	8001142 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800117e:	e011      	b.n	80011a4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001180:	4b11      	ldr	r3, [pc, #68]	@ (80011c8 <cubemx_transport_read+0xa0>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	440b      	add	r3, r1
 800118a:	4910      	ldr	r1, [pc, #64]	@ (80011cc <cubemx_transport_read+0xa4>)
 800118c:	5c8a      	ldrb	r2, [r1, r2]
 800118e:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001190:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <cubemx_transport_read+0xa0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3301      	adds	r3, #1
 8001196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800119a:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <cubemx_transport_read+0xa0>)
 800119c:	6013      	str	r3, [r2, #0]
        wrote++;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	3301      	adds	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <cubemx_transport_read+0xa0>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <cubemx_transport_read+0x9c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d003      	beq.n	80011b8 <cubemx_transport_read+0x90>
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d3e3      	bcc.n	8001180 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80011b8:	69bb      	ldr	r3, [r7, #24]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20006738 	.word	0x20006738
 80011c8:	20006734 	.word	0x20006734
 80011cc:	20005f34 	.word	0x20005f34

080011d0 <nexus_bringup>:

void compute_and_publish_odometry(void);

void nexus_bringup(void);

void nexus_bringup(void){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim6);
 80011d4:	480a      	ldr	r0, [pc, #40]	@ (8001200 <nexus_bringup+0x30>)
 80011d6:	f003 fa9b 	bl	8004710 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80011da:	213c      	movs	r1, #60	@ 0x3c
 80011dc:	4809      	ldr	r0, [pc, #36]	@ (8001204 <nexus_bringup+0x34>)
 80011de:	f003 fbad 	bl	800493c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80011e2:	213c      	movs	r1, #60	@ 0x3c
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <nexus_bringup+0x38>)
 80011e6:	f003 fba9 	bl	800493c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80011ea:	213c      	movs	r1, #60	@ 0x3c
 80011ec:	4807      	ldr	r0, [pc, #28]	@ (800120c <nexus_bringup+0x3c>)
 80011ee:	f003 fba5 	bl	800493c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80011f2:	213c      	movs	r1, #60	@ 0x3c
 80011f4:	4806      	ldr	r0, [pc, #24]	@ (8001210 <nexus_bringup+0x40>)
 80011f6:	f003 fba1 	bl	800493c <HAL_TIM_Encoder_Start>

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20006814 	.word	0x20006814
 8001204:	2000673c 	.word	0x2000673c
 8001208:	20006784 	.word	0x20006784
 800120c:	200067cc 	.word	0x200067cc
 8001210:	2000685c 	.word	0x2000685c

08001214 <main>:

int main(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  HAL_Init();
 8001218:	f001 fd18 	bl	8002c4c <HAL_Init>
  SystemClock_Config();
 800121c:	f000 f82a 	bl	8001274 <SystemClock_Config>
  MX_GPIO_Init();
 8001220:	f000 fa8c 	bl	800173c <MX_GPIO_Init>
  MX_DMA_Init();
 8001224:	f000 fa4c 	bl	80016c0 <MX_DMA_Init>
  MX_TIM1_Init();
 8001228:	f000 f892 	bl	8001350 <MX_TIM1_Init>
  MX_TIM3_Init();
 800122c:	f000 f8e8 	bl	8001400 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001230:	f000 f93a 	bl	80014a8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001234:	f000 f9c2 	bl	80015bc <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8001238:	f000 fa18 	bl	800166c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800123c:	f000 f988 	bl	8001550 <MX_TIM6_Init>

  nexus_bringup();
 8001240:	f7ff ffc6 	bl	80011d0 <nexus_bringup>
  HAL_Delay(2000);
 8001244:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001248:	f001 fd42 	bl	8002cd0 <HAL_Delay>

  osKernelInitialize();
 800124c:	f005 f94a 	bl	80064e4 <osKernelInitialize>

  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001250:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <main+0x54>)
 8001252:	2100      	movs	r1, #0
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <main+0x58>)
 8001256:	f005 f98f 	bl	8006578 <osThreadNew>
 800125a:	4603      	mov	r3, r0
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <main+0x5c>)
 800125e:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8001260:	f005 f964 	bl	800652c <osKernelStart>

  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <main+0x50>
 8001268:	08019ca8 	.word	0x08019ca8
 800126c:	08001d11 	.word	0x08001d11
 8001270:	200069ac 	.word	0x200069ac

08001274 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b094      	sub	sp, #80	@ 0x50
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	2234      	movs	r2, #52	@ 0x34
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f017 f846 	bl	8018314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <SystemClock_Config+0xd4>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	4a29      	ldr	r2, [pc, #164]	@ (8001348 <SystemClock_Config+0xd4>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a8:	4b27      	ldr	r3, [pc, #156]	@ (8001348 <SystemClock_Config+0xd4>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012b4:	2300      	movs	r3, #0
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	4b24      	ldr	r3, [pc, #144]	@ (800134c <SystemClock_Config+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012c0:	4a22      	ldr	r2, [pc, #136]	@ (800134c <SystemClock_Config+0xd8>)
 80012c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	4b20      	ldr	r3, [pc, #128]	@ (800134c <SystemClock_Config+0xd8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012dc:	2310      	movs	r3, #16
 80012de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e0:	2302      	movs	r3, #2
 80012e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80012e8:	2310      	movs	r3, #16
 80012ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012f2:	2304      	movs	r3, #4
 80012f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012fa:	2302      	movs	r3, #2
 80012fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fe:	f107 031c 	add.w	r3, r7, #28
 8001302:	4618      	mov	r0, r3
 8001304:	f002 ff16 	bl	8004134 <HAL_RCC_OscConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800130e:	f000 fe25 	bl	8001f5c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001312:	230f      	movs	r3, #15
 8001314:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001316:	2302      	movs	r3, #2
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	2102      	movs	r1, #2
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fb84 	bl	8003a3c <HAL_RCC_ClockConfig>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800133a:	f000 fe0f 	bl	8001f5c <Error_Handler>
  }
}
 800133e:	bf00      	nop
 8001340:	3750      	adds	r7, #80	@ 0x50
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40007000 	.word	0x40007000

08001350 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	@ 0x30
 8001354:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	2224      	movs	r2, #36	@ 0x24
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f016 ffd8 	bl	8018314 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800136c:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <MX_TIM1_Init+0xa8>)
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <MX_TIM1_Init+0xac>)
 8001370:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_TIM1_Init+0xa8>)
 8001374:	2200      	movs	r2, #0
 8001376:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_TIM1_Init+0xa8>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <MX_TIM1_Init+0xa8>)
 8001380:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001384:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_TIM1_Init+0xa8>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_TIM1_Init+0xa8>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_TIM1_Init+0xa8>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001398:	2303      	movs	r3, #3
 800139a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a0:	2301      	movs	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_TIM1_Init+0xa8>)
 80013c4:	f003 fa14 	bl	80047f0 <HAL_TIM_Encoder_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013ce:	f000 fdc5 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <MX_TIM1_Init+0xa8>)
 80013e0:	f003 fd1e 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80013ea:	f000 fdb7 	bl	8001f5c <Error_Handler>
  }

}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	@ 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000673c 	.word	0x2000673c
 80013fc:	40010000 	.word	0x40010000

08001400 <MX_TIM3_Init>:

static void MX_TIM3_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2224      	movs	r2, #36	@ 0x24
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f016 ff80 	bl	8018314 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800141c:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <MX_TIM3_Init+0xa0>)
 800141e:	4a21      	ldr	r2, [pc, #132]	@ (80014a4 <MX_TIM3_Init+0xa4>)
 8001420:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_TIM3_Init+0xa0>)
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <MX_TIM3_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <MX_TIM3_Init+0xa0>)
 8001430:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001434:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_TIM3_Init+0xa0>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <MX_TIM3_Init+0xa0>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001442:	2303      	movs	r3, #3
 8001444:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800144a:	2301      	movs	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800145a:	2301      	movs	r3, #1
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	@ (80014a0 <MX_TIM3_Init+0xa0>)
 800146e:	f003 f9bf 	bl	80047f0 <HAL_TIM_Encoder_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001478:	f000 fd70 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001484:	1d3b      	adds	r3, r7, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_TIM3_Init+0xa0>)
 800148a:	f003 fcc9 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001494:	f000 fd62 	bl	8001f5c <Error_Handler>
  }
}
 8001498:	bf00      	nop
 800149a:	3730      	adds	r7, #48	@ 0x30
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20006784 	.word	0x20006784
 80014a4:	40000400 	.word	0x40000400

080014a8 <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	@ 0x30
 80014ac:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	2224      	movs	r2, #36	@ 0x24
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f016 ff2c 	bl	8018314 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80014c4:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <MX_TIM4_Init+0xa0>)
 80014c6:	4a21      	ldr	r2, [pc, #132]	@ (800154c <MX_TIM4_Init+0xa4>)
 80014c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <MX_TIM4_Init+0xa0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001548 <MX_TIM4_Init+0xa0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <MX_TIM4_Init+0xa0>)
 80014d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <MX_TIM4_Init+0xa0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e4:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <MX_TIM4_Init+0xa0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ea:	2303      	movs	r3, #3
 80014ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f2:	2301      	movs	r3, #1
 80014f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001502:	2301      	movs	r3, #1
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	4619      	mov	r1, r3
 8001514:	480c      	ldr	r0, [pc, #48]	@ (8001548 <MX_TIM4_Init+0xa0>)
 8001516:	f003 f96b 	bl	80047f0 <HAL_TIM_Encoder_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001520:	f000 fd1c 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	@ (8001548 <MX_TIM4_Init+0xa0>)
 8001532:	f003 fc75 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800153c:	f000 fd0e 	bl	8001f5c <Error_Handler>
  }
}
 8001540:	bf00      	nop
 8001542:	3730      	adds	r7, #48	@ 0x30
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200067cc 	.word	0x200067cc
 800154c:	40000800 	.word	0x40000800

08001550 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0


  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001556:	463b      	mov	r3, r7
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]


  htim6.Instance = TIM6;
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <MX_TIM6_Init+0x64>)
 8001560:	4a15      	ldr	r2, [pc, #84]	@ (80015b8 <MX_TIM6_Init+0x68>)
 8001562:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <MX_TIM6_Init+0x64>)
 8001566:	2253      	movs	r2, #83	@ 0x53
 8001568:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <MX_TIM6_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <MX_TIM6_Init+0x64>)
 8001572:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001576:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_TIM6_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <MX_TIM6_Init+0x64>)
 8001580:	f003 f876 	bl	8004670 <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800158a:	f000 fce7 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001596:	463b      	mov	r3, r7
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	@ (80015b4 <MX_TIM6_Init+0x64>)
 800159c:	f003 fc40 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80015a6:	f000 fcd9 	bl	8001f5c <Error_Handler>
  }

}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20006814 	.word	0x20006814
 80015b8:	40001000 	.word	0x40001000

080015bc <MX_TIM8_Init>:

static void MX_TIM8_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	@ 0x30
 80015c0:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	2224      	movs	r2, #36	@ 0x24
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f016 fea2 	bl	8018314 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]

  htim8.Instance = TIM8;
 80015d8:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <MX_TIM8_Init+0xa8>)
 80015da:	4a23      	ldr	r2, [pc, #140]	@ (8001668 <MX_TIM8_Init+0xac>)
 80015dc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015de:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <MX_TIM8_Init+0xa8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <MX_TIM8_Init+0xa8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <MX_TIM8_Init+0xa8>)
 80015ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015f0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <MX_TIM8_Init+0xa8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <MX_TIM8_Init+0xa8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <MX_TIM8_Init+0xa8>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001604:	2303      	movs	r3, #3
 8001606:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800160c:	2301      	movs	r3, #1
 800160e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800161c:	2301      	movs	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	@ (8001664 <MX_TIM8_Init+0xa8>)
 8001630:	f003 f8de 	bl	80047f0 <HAL_TIM_Encoder_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800163a:	f000 fc8f 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	@ (8001664 <MX_TIM8_Init+0xa8>)
 800164c:	f003 fbe8 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001656:	f000 fc81 	bl	8001f5c <Error_Handler>
  }
}
 800165a:	bf00      	nop
 800165c:	3730      	adds	r7, #48	@ 0x30
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000685c 	.word	0x2000685c
 8001668:	40010400 	.word	0x40010400

0800166c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_USART2_UART_Init+0x4c>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <MX_USART2_UART_Init+0x50>)
 8001674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_USART2_UART_Init+0x4c>)
 8001678:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800167c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_USART2_UART_Init+0x4c>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_USART2_UART_Init+0x4c>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168a:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <MX_USART2_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_USART2_UART_Init+0x4c>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_USART2_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_USART2_UART_Init+0x4c>)
 80016a4:	f003 fc4c 	bl	8004f40 <HAL_UART_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ae:	f000 fc55 	bl	8001f5c <Error_Handler>
  }


}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200068a4 	.word	0x200068a4
 80016bc:	40004400 	.word	0x40004400

080016c0 <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0

  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <MX_DMA_Init+0x78>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001738 <MX_DMA_Init+0x78>)
 80016d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <MX_DMA_Init+0x78>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <MX_DMA_Init+0x78>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a13      	ldr	r2, [pc, #76]	@ (8001738 <MX_DMA_Init+0x78>)
 80016ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_DMA_Init+0x78>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]


  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2105      	movs	r1, #5
 8001702:	2010      	movs	r0, #16
 8001704:	f001 fbc0 	bl	8002e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001708:	2010      	movs	r0, #16
 800170a:	f001 fbd9 	bl	8002ec0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2105      	movs	r1, #5
 8001712:	2011      	movs	r0, #17
 8001714:	f001 fbb8 	bl	8002e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001718:	2011      	movs	r0, #17
 800171a:	f001 fbd1 	bl	8002ec0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2105      	movs	r1, #5
 8001722:	2038      	movs	r0, #56	@ 0x38
 8001724:	f001 fbb0 	bl	8002e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001728:	2038      	movs	r0, #56	@ 0x38
 800172a:	f001 fbc9 	bl	8002ec0 <HAL_NVIC_EnableIRQ>

}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <MX_GPIO_Init+0x118>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a3e      	ldr	r2, [pc, #248]	@ (8001854 <MX_GPIO_Init+0x118>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b3c      	ldr	r3, [pc, #240]	@ (8001854 <MX_GPIO_Init+0x118>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <MX_GPIO_Init+0x118>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a37      	ldr	r2, [pc, #220]	@ (8001854 <MX_GPIO_Init+0x118>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <MX_GPIO_Init+0x118>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <MX_GPIO_Init+0x118>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a30      	ldr	r2, [pc, #192]	@ (8001854 <MX_GPIO_Init+0x118>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <MX_GPIO_Init+0x118>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <MX_GPIO_Init+0x118>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a29      	ldr	r2, [pc, #164]	@ (8001854 <MX_GPIO_Init+0x118>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <MX_GPIO_Init+0x118>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]


  HAL_GPIO_WritePin(GPIOC, FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 80017c2:	2200      	movs	r2, #0
 80017c4:	f640 413f 	movw	r1, #3135	@ 0xc3f
 80017c8:	4823      	ldr	r0, [pc, #140]	@ (8001858 <MX_GPIO_Init+0x11c>)
 80017ca:	f002 f91d 	bl	8003a08 <HAL_GPIO_WritePin>
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RL_VDD_GPO_Pin|FL_VDD_GPO_Pin, GPIO_PIN_RESET);


  HAL_GPIO_WritePin(GPIOB, RR_INA_GPO_Pin|FR_INB_GPO_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f242 0120 	movw	r1, #8224	@ 0x2020
 80017d4:	4821      	ldr	r0, [pc, #132]	@ (800185c <MX_GPIO_Init+0x120>)
 80017d6:	f002 f917 	bl	8003a08 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(GPIOC, RR_VDD_GPO_Pin|FR_VDD_GPO_Pin, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80017e0:	481d      	ldr	r0, [pc, #116]	@ (8001858 <MX_GPIO_Init+0x11c>)
 80017e2:	f002 f911 	bl	8003a08 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017ec:	481c      	ldr	r0, [pc, #112]	@ (8001860 <MX_GPIO_Init+0x124>)
 80017ee:	f002 f90b 	bl	8003a08 <HAL_GPIO_WritePin>


  GPIO_InitStruct.Pin = FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 80017f2:	f640 733f 	movw	r3, #3903	@ 0xf3f
 80017f6:	617b      	str	r3, [r7, #20]
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RR_VDD_GPO_Pin|FR_VDD_GPO_Pin
                          |RL_VDD_GPO_Pin|FL_VDD_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4813      	ldr	r0, [pc, #76]	@ (8001858 <MX_GPIO_Init+0x11c>)
 800180c:	f001 ff68 	bl	80036e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = RR_INA_GPO_Pin|FR_INB_GPO_Pin;
 8001810:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <MX_GPIO_Init+0x120>)
 800182a:	f001 ff59 	bl	80036e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FR_INA_GPO_Pin;
 800182e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FR_INA_GPO_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	@ (8001860 <MX_GPIO_Init+0x124>)
 8001848:	f001 ff4a 	bl	80036e0 <HAL_GPIO_Init>

}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	@ 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40020800 	.word	0x40020800
 800185c:	40020400 	.word	0x40020400
 8001860:	40020000 	.word	0x40020000

08001864 <odom_timer_cb>:


void odom_timer_cb(rcl_timer_t * timer, int64_t last_call_time)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	e9c7 2300 	strd	r2, r3, [r7]
  (void)last_call_time;
  if (timer == NULL) return;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <odom_timer_cb+0x18>
  compute_and_publish_odometry();
 8001876:	f000 f807 	bl	8001888 <compute_and_publish_odometry>
 800187a:	e000      	b.n	800187e <odom_timer_cb+0x1a>
  if (timer == NULL) return;
 800187c:	bf00      	nop
}
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	0000      	movs	r0, r0
	...

08001888 <compute_and_publish_odometry>:

void compute_and_publish_odometry(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	ed2d 8b02 	vpush	{d8}
 800188e:	b094      	sub	sp, #80	@ 0x50
 8001890:	af00      	add	r7, sp, #0
    if (!encUpdateFlag) return;
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <compute_and_publish_odometry+0x50>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 822e 	beq.w	8001cfa <compute_and_publish_odometry+0x472>
    encUpdateFlag = 0;
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <compute_and_publish_odometry+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]

    int16_t localDelta[NUM_WHEELS];
    for (int i = 0; i < NUM_WHEELS; i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018a8:	e00d      	b.n	80018c6 <compute_and_publish_odometry+0x3e>
        localDelta[i] = deltaEncoder[i];
 80018aa:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <compute_and_publish_odometry+0x54>)
 80018ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	3350      	adds	r3, #80	@ 0x50
 80018ba:	443b      	add	r3, r7
 80018bc:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (int i = 0; i < NUM_WHEELS; i++)
 80018c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018c2:	3301      	adds	r3, #1
 80018c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	ddee      	ble.n	80018aa <compute_and_publish_odometry+0x22>

    const float DT = 0.001f;
 80018cc:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <compute_and_publish_odometry+0x58>)
 80018ce:	647b      	str	r3, [r7, #68]	@ 0x44
    float w[NUM_WHEELS];
    for (int i = 0; i < NUM_WHEELS; i++)
 80018d0:	2300      	movs	r3, #0
 80018d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018d4:	e028      	b.n	8001928 <compute_and_publish_odometry+0xa0>
 80018d6:	bf00      	nop
 80018d8:	20006d34 	.word	0x20006d34
 80018dc:	20006d1c 	.word	0x20006d1c
 80018e0:	3a83126f 	.word	0x3a83126f
 80018e4:	3b86594b 	.word	0x3b86594b
 80018e8:	3e99999a 	.word	0x3e99999a
 80018ec:	3c4ccccd 	.word	0x3c4ccccd
        w[i] = localDelta[i] * RAD_PER_TICK / DT;
 80018f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	3350      	adds	r3, #80	@ 0x50
 80018f6:	443b      	add	r3, r7
 80018f8:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001904:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 80018e4 <compute_and_publish_odometry+0x5c>
 8001908:	ee67 6a87 	vmul.f32	s13, s15, s14
 800190c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	3350      	adds	r3, #80	@ 0x50
 800191a:	443b      	add	r3, r7
 800191c:	3b4c      	subs	r3, #76	@ 0x4c
 800191e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < NUM_WHEELS; i++)
 8001922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001924:	3301      	adds	r3, #1
 8001926:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800192a:	2b03      	cmp	r3, #3
 800192c:	dde0      	ble.n	80018f0 <compute_and_publish_odometry+0x68>

    float vx = (WHEEL_R / 4.0f) * (w[1] + w[2] + w[0] + w[3]);
 800192e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001932:	edd7 7a03 	vldr	s15, [r7, #12]
 8001936:	ee37 7a27 	vadd.f32	s14, s14, s15
 800193a:	edd7 7a01 	vldr	s15, [r7, #4]
 800193e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001942:	edd7 7a04 	vldr	s15, [r7, #16]
 8001946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194a:	ed1f 7a18 	vldr	s14, [pc, #-96]	@ 80018ec <compute_and_publish_odometry+0x64>
 800194e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001952:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float vy = (WHEEL_R / 4.0f) * (-w[1] + w[2] + w[0] - w[3]);
 8001956:	ed97 7a03 	vldr	s14, [r7, #12]
 800195a:	edd7 7a02 	vldr	s15, [r7, #8]
 800195e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001962:	edd7 7a01 	vldr	s15, [r7, #4]
 8001966:	ee37 7a27 	vadd.f32	s14, s14, s15
 800196a:	edd7 7a04 	vldr	s15, [r7, #16]
 800196e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001972:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 80018ec <compute_and_publish_odometry+0x64>
 8001976:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float wz = (WHEEL_R / 4.0f) * ((-w[1] + w[2] - w[0] + w[3]) / A_SUM);
 800197e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001982:	edd7 7a02 	vldr	s15, [r7, #8]
 8001986:	ee37 7a67 	vsub.f32	s14, s14, s15
 800198a:	edd7 7a01 	vldr	s15, [r7, #4]
 800198e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001992:	edd7 7a04 	vldr	s15, [r7, #16]
 8001996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800199a:	ed5f 6a2d 	vldr	s13, [pc, #-180]	@ 80018e8 <compute_and_publish_odometry+0x60>
 800199e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a2:	ed1f 7a2e 	vldr	s14, [pc, #-184]	@ 80018ec <compute_and_publish_odometry+0x64>
 80019a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019aa:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    static float acc_vx = 0, acc_vy = 0, acc_wz = 0;
    static uint8_t count = 0;

    acc_vx += vx;
 80019ae:	4bc6      	ldr	r3, [pc, #792]	@ (8001cc8 <compute_and_publish_odometry+0x440>)
 80019b0:	ed93 7a00 	vldr	s14, [r3]
 80019b4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80019b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019bc:	4bc2      	ldr	r3, [pc, #776]	@ (8001cc8 <compute_and_publish_odometry+0x440>)
 80019be:	edc3 7a00 	vstr	s15, [r3]
    acc_vy += vy;
 80019c2:	4bc2      	ldr	r3, [pc, #776]	@ (8001ccc <compute_and_publish_odometry+0x444>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	4bbe      	ldr	r3, [pc, #760]	@ (8001ccc <compute_and_publish_odometry+0x444>)
 80019d2:	edc3 7a00 	vstr	s15, [r3]
    acc_wz += wz;
 80019d6:	4bbe      	ldr	r3, [pc, #760]	@ (8001cd0 <compute_and_publish_odometry+0x448>)
 80019d8:	ed93 7a00 	vldr	s14, [r3]
 80019dc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80019e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e4:	4bba      	ldr	r3, [pc, #744]	@ (8001cd0 <compute_and_publish_odometry+0x448>)
 80019e6:	edc3 7a00 	vstr	s15, [r3]
    count++;
 80019ea:	4bba      	ldr	r3, [pc, #744]	@ (8001cd4 <compute_and_publish_odometry+0x44c>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4bb8      	ldr	r3, [pc, #736]	@ (8001cd4 <compute_and_publish_odometry+0x44c>)
 80019f4:	701a      	strb	r2, [r3, #0]

    if (count >= 10)  {
 80019f6:	4bb7      	ldr	r3, [pc, #732]	@ (8001cd4 <compute_and_publish_odometry+0x44c>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b09      	cmp	r3, #9
 80019fc:	f240 817e 	bls.w	8001cfc <compute_and_publish_odometry+0x474>

        vx = acc_vx / count;
 8001a00:	4bb1      	ldr	r3, [pc, #708]	@ (8001cc8 <compute_and_publish_odometry+0x440>)
 8001a02:	edd3 6a00 	vldr	s13, [r3]
 8001a06:	4bb3      	ldr	r3, [pc, #716]	@ (8001cd4 <compute_and_publish_odometry+0x44c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a16:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
        vy = acc_vy / count;
 8001a1a:	4bac      	ldr	r3, [pc, #688]	@ (8001ccc <compute_and_publish_odometry+0x444>)
 8001a1c:	edd3 6a00 	vldr	s13, [r3]
 8001a20:	4bac      	ldr	r3, [pc, #688]	@ (8001cd4 <compute_and_publish_odometry+0x44c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a30:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        wz = acc_wz / count;
 8001a34:	4ba6      	ldr	r3, [pc, #664]	@ (8001cd0 <compute_and_publish_odometry+0x448>)
 8001a36:	edd3 6a00 	vldr	s13, [r3]
 8001a3a:	4ba6      	ldr	r3, [pc, #664]	@ (8001cd4 <compute_and_publish_odometry+0x44c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	ee07 3a90 	vmov	s15, r3
 8001a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a4a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        acc_vx = acc_vy = acc_wz = 0;
 8001a4e:	4ba0      	ldr	r3, [pc, #640]	@ (8001cd0 <compute_and_publish_odometry+0x448>)
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	4b9e      	ldr	r3, [pc, #632]	@ (8001cd0 <compute_and_publish_odometry+0x448>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a9c      	ldr	r2, [pc, #624]	@ (8001ccc <compute_and_publish_odometry+0x444>)
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b9b      	ldr	r3, [pc, #620]	@ (8001ccc <compute_and_publish_odometry+0x444>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a99      	ldr	r2, [pc, #612]	@ (8001cc8 <compute_and_publish_odometry+0x440>)
 8001a64:	6013      	str	r3, [r2, #0]
        count = 0;
 8001a66:	4b9b      	ldr	r3, [pc, #620]	@ (8001cd4 <compute_and_publish_odometry+0x44c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]

        float dt_publish = 0.010f;
 8001a6c:	4b9a      	ldr	r3, [pc, #616]	@ (8001cd8 <compute_and_publish_odometry+0x450>)
 8001a6e:	637b      	str	r3, [r7, #52]	@ 0x34
        float dx = (vx * cosf(theta) - vy * sinf(theta)) * dt_publish;
 8001a70:	4b9a      	ldr	r3, [pc, #616]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7a:	f017 fb63 	bl	8019144 <cosf>
 8001a7e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a82:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001a86:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001a8a:	4b94      	ldr	r3, [pc, #592]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	eeb0 0a67 	vmov.f32	s0, s15
 8001a94:	f017 fb9a 	bl	80191cc <sinf>
 8001a98:	eeb0 7a40 	vmov.f32	s14, s0
 8001a9c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa4:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001aa8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
        float dy = (vx * sinf(theta) + vy * cosf(theta)) * dt_publish;
 8001ab4:	4b89      	ldr	r3, [pc, #548]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	eeb0 0a67 	vmov.f32	s0, s15
 8001abe:	f017 fb85 	bl	80191cc <sinf>
 8001ac2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ac6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001aca:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001ace:	4b83      	ldr	r3, [pc, #524]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad8:	f017 fb34 	bl	8019144 <cosf>
 8001adc:	eeb0 7a40 	vmov.f32	s14, s0
 8001ae0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001aec:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        float dtheta = wz * dt_publish;
 8001af8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001afc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b04:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

        x += dx;
 8001b08:	4b75      	ldr	r3, [pc, #468]	@ (8001ce0 <compute_and_publish_odometry+0x458>)
 8001b0a:	ed93 7a00 	vldr	s14, [r3]
 8001b0e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b16:	4b72      	ldr	r3, [pc, #456]	@ (8001ce0 <compute_and_publish_odometry+0x458>)
 8001b18:	edc3 7a00 	vstr	s15, [r3]
        y += dy;
 8001b1c:	4b71      	ldr	r3, [pc, #452]	@ (8001ce4 <compute_and_publish_odometry+0x45c>)
 8001b1e:	ed93 7a00 	vldr	s14, [r3]
 8001b22:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ce4 <compute_and_publish_odometry+0x45c>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
        theta += dtheta;
 8001b30:	4b6a      	ldr	r3, [pc, #424]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3e:	4b67      	ldr	r3, [pc, #412]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001b40:	edc3 7a00 	vstr	s15, [r3]

        if (theta > M_PI)  theta -= 2.0f * M_PI;
 8001b44:	4b65      	ldr	r3, [pc, #404]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd2d 	bl	80005a8 <__aeabi_f2d>
 8001b4e:	a356      	add	r3, pc, #344	@ (adr r3, 8001ca8 <compute_and_publish_odometry+0x420>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fdfe 	bl	8000754 <__aeabi_dcmpgt>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d012      	beq.n	8001b84 <compute_and_publish_odometry+0x2fc>
 8001b5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fd20 	bl	80005a8 <__aeabi_f2d>
 8001b68:	a351      	add	r3, pc, #324	@ (adr r3, 8001cb0 <compute_and_publish_odometry+0x428>)
 8001b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6e:	f7fe fbbb 	bl	80002e8 <__aeabi_dsub>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7fe fdf5 	bl	8000768 <__aeabi_d2f>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a56      	ldr	r2, [pc, #344]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001b82:	6013      	str	r3, [r2, #0]
        if (theta < -M_PI) theta += 2.0f * M_PI;
 8001b84:	4b55      	ldr	r3, [pc, #340]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fd0d 	bl	80005a8 <__aeabi_f2d>
 8001b8e:	a34a      	add	r3, pc, #296	@ (adr r3, 8001cb8 <compute_and_publish_odometry+0x430>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fdc0 	bl	8000718 <__aeabi_dcmplt>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d012      	beq.n	8001bc4 <compute_and_publish_odometry+0x33c>
 8001b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fd00 	bl	80005a8 <__aeabi_f2d>
 8001ba8:	a341      	add	r3, pc, #260	@ (adr r3, 8001cb0 <compute_and_publish_odometry+0x428>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fb9d 	bl	80002ec <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7fe fdd5 	bl	8000768 <__aeabi_d2f>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4a46      	ldr	r2, [pc, #280]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001bc2:	6013      	str	r3, [r2, #0]

        odom_msg.pose.pose.position.x = x;
 8001bc4:	4b46      	ldr	r3, [pc, #280]	@ (8001ce0 <compute_and_publish_odometry+0x458>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fced 	bl	80005a8 <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4945      	ldr	r1, [pc, #276]	@ (8001ce8 <compute_and_publish_odometry+0x460>)
 8001bd4:	e9c1 2308 	strd	r2, r3, [r1, #32]
        odom_msg.pose.pose.position.y = y;
 8001bd8:	4b42      	ldr	r3, [pc, #264]	@ (8001ce4 <compute_and_publish_odometry+0x45c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fce3 	bl	80005a8 <__aeabi_f2d>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4940      	ldr	r1, [pc, #256]	@ (8001ce8 <compute_and_publish_odometry+0x460>)
 8001be8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        odom_msg.pose.pose.orientation.z = sinf(theta / 2.0f);
 8001bec:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001bf6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bfa:	eeb0 0a47 	vmov.f32	s0, s14
 8001bfe:	f017 fae5 	bl	80191cc <sinf>
 8001c02:	ee10 3a10 	vmov	r3, s0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fcce 	bl	80005a8 <__aeabi_f2d>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4935      	ldr	r1, [pc, #212]	@ (8001ce8 <compute_and_publish_odometry+0x460>)
 8001c12:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
        odom_msg.pose.pose.orientation.w = cosf(theta / 2.0f);
 8001c16:	4b31      	ldr	r3, [pc, #196]	@ (8001cdc <compute_and_publish_odometry+0x454>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001c20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c24:	eeb0 0a47 	vmov.f32	s0, s14
 8001c28:	f017 fa8c 	bl	8019144 <cosf>
 8001c2c:	ee10 3a10 	vmov	r3, s0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fcb9 	bl	80005a8 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	492b      	ldr	r1, [pc, #172]	@ (8001ce8 <compute_and_publish_odometry+0x460>)
 8001c3c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

        odom_msg.twist.twist.linear.x = vx;
 8001c40:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001c42:	f7fe fcb1 	bl	80005a8 <__aeabi_f2d>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4927      	ldr	r1, [pc, #156]	@ (8001ce8 <compute_and_publish_odometry+0x460>)
 8001c4c:	e9c1 235e 	strd	r2, r3, [r1, #376]	@ 0x178
        odom_msg.twist.twist.linear.y = vy;
 8001c50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001c52:	f7fe fca9 	bl	80005a8 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4923      	ldr	r1, [pc, #140]	@ (8001ce8 <compute_and_publish_odometry+0x460>)
 8001c5c:	e9c1 2360 	strd	r2, r3, [r1, #384]	@ 0x180
        odom_msg.twist.twist.angular.z = wz;
 8001c60:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c62:	f7fe fca1 	bl	80005a8 <__aeabi_f2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	491f      	ldr	r1, [pc, #124]	@ (8001ce8 <compute_and_publish_odometry+0x460>)
 8001c6c:	e9c1 2368 	strd	r2, r3, [r1, #416]	@ 0x1a0

        uint64_t now_ns = rmw_uros_epoch_nanos();
 8001c70:	f008 fd82 	bl	800a778 <rmw_uros_epoch_nanos>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	e9c7 2308 	strd	r2, r3, [r7, #32]
        odom_msg.header.stamp.sec = (int32_t)(now_ns / 1000000000ULL);
 8001c7c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c80:	a30f      	add	r3, pc, #60	@ (adr r3, 8001cc0 <compute_and_publish_odometry+0x438>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fe0f 	bl	80008a8 <__aeabi_uldivmod>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <compute_and_publish_odometry+0x460>)
 8001c90:	601a      	str	r2, [r3, #0]
        odom_msg.header.stamp.nanosec = (uint32_t)(now_ns % 1000000000ULL);
 8001c92:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c96:	a30a      	add	r3, pc, #40	@ (adr r3, 8001cc0 <compute_and_publish_odometry+0x438>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fe04 	bl	80008a8 <__aeabi_uldivmod>
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <compute_and_publish_odometry+0x460>)
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	e022      	b.n	8001cec <compute_and_publish_odometry+0x464>
 8001ca6:	bf00      	nop
 8001ca8:	54442d18 	.word	0x54442d18
 8001cac:	400921fb 	.word	0x400921fb
 8001cb0:	54442d18 	.word	0x54442d18
 8001cb4:	401921fb 	.word	0x401921fb
 8001cb8:	54442d18 	.word	0x54442d18
 8001cbc:	c00921fb 	.word	0xc00921fb
 8001cc0:	3b9aca00 	.word	0x3b9aca00
 8001cc4:	00000000 	.word	0x00000000
 8001cc8:	20006d38 	.word	0x20006d38
 8001ccc:	20006d3c 	.word	0x20006d3c
 8001cd0:	20006d40 	.word	0x20006d40
 8001cd4:	20006d44 	.word	0x20006d44
 8001cd8:	3c23d70a 	.word	0x3c23d70a
 8001cdc:	20006d18 	.word	0x20006d18
 8001ce0:	20006d10 	.word	0x20006d10
 8001ce4:	20006d14 	.word	0x20006d14
 8001ce8:	20006a48 	.word	0x20006a48

        rcl_ret_t rc1 = rcl_publish(&odom_pub, &odom_msg, NULL);
 8001cec:	2200      	movs	r2, #0
 8001cee:	4906      	ldr	r1, [pc, #24]	@ (8001d08 <compute_and_publish_odometry+0x480>)
 8001cf0:	4806      	ldr	r0, [pc, #24]	@ (8001d0c <compute_and_publish_odometry+0x484>)
 8001cf2:	f007 fb65 	bl	80093c0 <rcl_publish>
 8001cf6:	61f8      	str	r0, [r7, #28]
 8001cf8:	e000      	b.n	8001cfc <compute_and_publish_odometry+0x474>
    if (!encUpdateFlag) return;
 8001cfa:	bf00      	nop
        if (rc1 != RCL_RET_OK){	}
    }
}
 8001cfc:	3750      	adds	r7, #80	@ 0x50
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	ecbd 8b02 	vpop	{d8}
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20006a48 	.word	0x20006a48
 8001d0c:	20006a40 	.word	0x20006a40

08001d10 <StartDefaultTask>:


void StartDefaultTask(void *argument)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b0a2      	sub	sp, #136	@ 0x88
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	6078      	str	r0, [r7, #4]

	  rmw_uros_set_custom_transport(
 8001d18:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <StartDefaultTask+0x120>)
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	4b45      	ldr	r3, [pc, #276]	@ (8001e34 <StartDefaultTask+0x124>)
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4b45      	ldr	r3, [pc, #276]	@ (8001e38 <StartDefaultTask+0x128>)
 8001d22:	4a46      	ldr	r2, [pc, #280]	@ (8001e3c <StartDefaultTask+0x12c>)
 8001d24:	4946      	ldr	r1, [pc, #280]	@ (8001e40 <StartDefaultTask+0x130>)
 8001d26:	2001      	movs	r0, #1
 8001d28:	f008 fb0e 	bl	800a348 <rmw_uros_set_custom_transport>
	      true, (void *)&huart2,
	      cubemx_transport_open, cubemx_transport_close,
	      cubemx_transport_write, cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001d2c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d30:	4618      	mov	r0, r3
 8001d32:	f008 fa2f 	bl	800a194 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate      = microros_allocate;
 8001d36:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <StartDefaultTask+0x134>)
 8001d38:	663b      	str	r3, [r7, #96]	@ 0x60
	  freeRTOS_allocator.deallocate    = microros_deallocate;
 8001d3a:	4b43      	ldr	r3, [pc, #268]	@ (8001e48 <StartDefaultTask+0x138>)
 8001d3c:	667b      	str	r3, [r7, #100]	@ 0x64
	  freeRTOS_allocator.reallocate    = microros_reallocate;
 8001d3e:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <StartDefaultTask+0x13c>)
 8001d40:	66bb      	str	r3, [r7, #104]	@ 0x68
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001d42:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <StartDefaultTask+0x140>)
 8001d44:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  rcl_ret_t rc1 =  rcutils_set_default_allocator(&freeRTOS_allocator);
 8001d46:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f008 fa3e 	bl	800a1cc <rcutils_set_default_allocator>
 8001d50:	4603      	mov	r3, r0
 8001d52:	67bb      	str	r3, [r7, #120]	@ 0x78
	  if (rc1 != RCL_RET_OK) { /* Error handle */ }

	  for (int i = 0; i < 50; ++i) {
 8001d54:	2300      	movs	r3, #0
 8001d56:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d58:	e00c      	b.n	8001d74 <StartDefaultTask+0x64>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2064      	movs	r0, #100	@ 0x64
 8001d5e:	f008 fb09 	bl	800a374 <rmw_uros_ping_agent>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d009      	beq.n	8001d7c <StartDefaultTask+0x6c>
	    osDelay(100);
 8001d68:	2064      	movs	r0, #100	@ 0x64
 8001d6a:	f004 fc97 	bl	800669c <osDelay>
	  for (int i = 0; i < 50; ++i) {
 8001d6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d70:	3301      	adds	r3, #1
 8001d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001d76:	2b31      	cmp	r3, #49	@ 0x31
 8001d78:	ddef      	ble.n	8001d5a <StartDefaultTask+0x4a>
 8001d7a:	e000      	b.n	8001d7e <StartDefaultTask+0x6e>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8001d7c:	bf00      	nop
	  }

	  rclc_support_t support;
	  rcl_allocator_t allocator = rcl_get_default_allocator();
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	4618      	mov	r0, r3
 8001d84:	f008 fa14 	bl	800a1b0 <rcutils_get_default_allocator>
	  rclc_support_init(&support, 0, NULL, &allocator);
 8001d88:	f107 0318 	add.w	r3, r7, #24
 8001d8c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	f008 f90a 	bl	8009fac <rclc_support_init>

	  rcl_node_t node_base_controller;
	  rclc_node_init_default(&node_base_controller, "base_controller", "", &support);
 8001d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d9c:	f107 0010 	add.w	r0, r7, #16
 8001da0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e54 <StartDefaultTask+0x144>)
 8001da2:	492d      	ldr	r1, [pc, #180]	@ (8001e58 <StartDefaultTask+0x148>)
 8001da4:	f008 f94c 	bl	800a040 <rclc_node_init_default>


	  (void) rmw_uros_sync_session(1000);
 8001da8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dac:	f008 fcf2 	bl	800a794 <rmw_uros_sync_session>

	  rcl_ret_t rc7 = rclc_publisher_init_default(
 8001db0:	f007 f942 	bl	8009038 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>
 8001db4:	4602      	mov	r2, r0
 8001db6:	f107 0110 	add.w	r1, r7, #16
 8001dba:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <StartDefaultTask+0x14c>)
 8001dbc:	4828      	ldr	r0, [pc, #160]	@ (8001e60 <StartDefaultTask+0x150>)
 8001dbe:	f008 f97b 	bl	800a0b8 <rclc_publisher_init_default>
 8001dc2:	6778      	str	r0, [r7, #116]	@ 0x74
	      &odom_pub,
	      &node_base_controller,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(nav_msgs, msg, Odometry),
	      "odom");
	  if (rc7 != RCL_RET_OK) {   }
	  rosidl_runtime_c__String__init(&odom_msg.header.frame_id);
 8001dc4:	4827      	ldr	r0, [pc, #156]	@ (8001e64 <StartDefaultTask+0x154>)
 8001dc6:	f009 f875 	bl	800aeb4 <rosidl_runtime_c__String__init>
	  rosidl_runtime_c__String__assign(&odom_msg.header.frame_id, "odom");
 8001dca:	4924      	ldr	r1, [pc, #144]	@ (8001e5c <StartDefaultTask+0x14c>)
 8001dcc:	4825      	ldr	r0, [pc, #148]	@ (8001e64 <StartDefaultTask+0x154>)
 8001dce:	f009 f8d3 	bl	800af78 <rosidl_runtime_c__String__assign>
	  odom_msg.header.stamp.sec = 0;
 8001dd2:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <StartDefaultTask+0x158>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
	  odom_msg.header.stamp.nanosec = 0;
 8001dd8:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <StartDefaultTask+0x158>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	605a      	str	r2, [r3, #4]

	  rclc_executor_init(&executor, &support.context, 4, &allocator);
 8001dde:	f107 0318 	add.w	r3, r7, #24
 8001de2:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001de6:	2204      	movs	r2, #4
 8001de8:	4820      	ldr	r0, [pc, #128]	@ (8001e6c <StartDefaultTask+0x15c>)
 8001dea:	f007 fe99 	bl	8009b20 <rclc_executor_init>

	  rcl_timer_t timer_odom;
	  rclc_timer_init_default2(&timer_odom, &support, RCL_MS_TO_NS(10), odom_timer_cb, true);
 8001dee:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001df2:	f107 000c 	add.w	r0, r7, #12
 8001df6:	2301      	movs	r3, #1
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <StartDefaultTask+0x160>)
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <StartDefaultTask+0x164>)
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	f008 f98c 	bl	800a120 <rclc_timer_init_default2>
	  rclc_executor_add_timer(&executor, &timer_odom);
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4817      	ldr	r0, [pc, #92]	@ (8001e6c <StartDefaultTask+0x15c>)
 8001e10:	f007 fef2 	bl	8009bf8 <rclc_executor_add_timer>

	  for (;;) {
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(5));
 8001e14:	a304      	add	r3, pc, #16	@ (adr r3, 8001e28 <StartDefaultTask+0x118>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	4814      	ldr	r0, [pc, #80]	@ (8001e6c <StartDefaultTask+0x15c>)
 8001e1c:	f007 ff60 	bl	8009ce0 <rclc_executor_spin_some>
 8001e20:	e7f8      	b.n	8001e14 <StartDefaultTask+0x104>
 8001e22:	bf00      	nop
 8001e24:	f3af 8000 	nop.w
 8001e28:	004c4b40 	.word	0x004c4b40
 8001e2c:	00000000 	.word	0x00000000
 8001e30:	08001129 	.word	0x08001129
 8001e34:	080010c1 	.word	0x080010c1
 8001e38:	080010a1 	.word	0x080010a1
 8001e3c:	08001075 	.word	0x08001075
 8001e40:	200068a4 	.word	0x200068a4
 8001e44:	08001f69 	.word	0x08001f69
 8001e48:	08001fad 	.word	0x08001fad
 8001e4c:	08001fe5 	.word	0x08001fe5
 8001e50:	08002051 	.word	0x08002051
 8001e54:	08019c54 	.word	0x08019c54
 8001e58:	08019c58 	.word	0x08019c58
 8001e5c:	08019c68 	.word	0x08019c68
 8001e60:	20006a40 	.word	0x20006a40
 8001e64:	20006a50 	.word	0x20006a50
 8001e68:	20006a48 	.word	0x20006a48
 8001e6c:	200069b0 	.word	0x200069b0
 8001e70:	08001865 	.word	0x08001865
 8001e74:	00989680 	.word	0x00989680

08001e78 <HAL_TIM_PeriodElapsedCallback>:
	  }

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a2b      	ldr	r2, [pc, #172]	@ (8001f34 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d148      	bne.n	8001f1c <HAL_TIM_PeriodElapsedCallback+0xa4>
		currCount[0] = __HAL_TIM_GET_COUNTER(&htim4);
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	b21a      	sxth	r2, r3
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001e94:	801a      	strh	r2, [r3, #0]
		currCount[1] = __HAL_TIM_GET_COUNTER(&htim1);
 8001e96:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	b21a      	sxth	r2, r3
 8001e9e:	4b27      	ldr	r3, [pc, #156]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ea0:	805a      	strh	r2, [r3, #2]
		currCount[2] = __HAL_TIM_GET_COUNTER(&htim3);
 8001ea2:	4b28      	ldr	r3, [pc, #160]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	b21a      	sxth	r2, r3
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001eac:	809a      	strh	r2, [r3, #4]
		currCount[3] = __HAL_TIM_GET_COUNTER(&htim8);
 8001eae:	4b26      	ldr	r3, [pc, #152]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001eb8:	80da      	strh	r2, [r3, #6]

		for (int i=0; i<4; i++) {
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	e026      	b.n	8001f0e <HAL_TIM_PeriodElapsedCallback+0x96>

		  deltaEncoder[i] = (int16_t)(currCount[i] - pastCount[i]);
 8001ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	491f      	ldr	r1, [pc, #124]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	b219      	sxth	r1, r3
 8001ede:	4a1c      	ldr	r2, [pc, #112]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		  if (deltaEncoder[i] > 32767)       deltaEncoder[i] -= 65536;
 8001ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
		  else if (deltaEncoder[i] < -32768) deltaEncoder[i] += 65536;
 8001eee:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]

		  pastCount[i] = currCount[i];
 8001ef6:	4a11      	ldr	r2, [pc, #68]	@ (8001f3c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001efe:	b219      	sxth	r1, r3
 8001f00:	4a12      	ldr	r2, [pc, #72]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<4; i++) {
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	ddd5      	ble.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x48>

	  }
		encUpdateFlag = 1;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
	else if (htim->Instance == TIM7)
  {
    HAL_IncTick();
  }

}
 8001f1a:	e006      	b.n	8001f2a <HAL_TIM_PeriodElapsedCallback+0xb2>
	else if (htim->Instance == TIM7)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_TIM_PeriodElapsedCallback+0xb2>
    HAL_IncTick();
 8001f26:	f000 feb3 	bl	8002c90 <HAL_IncTick>
}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40001000 	.word	0x40001000
 8001f38:	200067cc 	.word	0x200067cc
 8001f3c:	20006d24 	.word	0x20006d24
 8001f40:	2000673c 	.word	0x2000673c
 8001f44:	20006784 	.word	0x20006784
 8001f48:	2000685c 	.word	0x2000685c
 8001f4c:	20006d2c 	.word	0x20006d2c
 8001f50:	20006d1c 	.word	0x20006d1c
 8001f54:	20006d34 	.word	0x20006d34
 8001f58:	40001400 	.word	0x40001400

08001f5c <Error_Handler>:


void Error_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
}
 8001f62:	bf00      	nop

  __disable_irq();
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <Error_Handler+0x8>

08001f68 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001f72:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <microros_allocate+0x3c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <microros_allocate+0x3c>)
 8001f80:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <microros_allocate+0x40>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <microros_allocate+0x40>)
 8001f90:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fe1e 	bl	8000bd4 <pvPortMallocMicroROS>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20006d48 	.word	0x20006d48
 8001fa8:	20006d4c 	.word	0x20006d4c

08001fac <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00c      	beq.n	8001fd6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7fe ff2d 	bl	8000e1c <getBlockSize>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a06      	ldr	r2, [pc, #24]	@ (8001fe0 <microros_deallocate+0x34>)
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <microros_deallocate+0x34>)
 8001fce:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7fe fec7 	bl	8000d64 <vPortFreeMicroROS>
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20006d4c 	.word	0x20006d4c

08001fe4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001ff0:	4b15      	ldr	r3, [pc, #84]	@ (8002048 <microros_reallocate+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <microros_reallocate+0x64>)
 8001ffe:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002000:	4b12      	ldr	r3, [pc, #72]	@ (800204c <microros_reallocate+0x68>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4413      	add	r3, r2
 800200a:	461a      	mov	r2, r3
 800200c:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <microros_reallocate+0x68>)
 800200e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d104      	bne.n	8002020 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002016:	68b8      	ldr	r0, [r7, #8]
 8002018:	f7fe fddc 	bl	8000bd4 <pvPortMallocMicroROS>
 800201c:	4603      	mov	r3, r0
 800201e:	e00e      	b.n	800203e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7fe fefb 	bl	8000e1c <getBlockSize>
 8002026:	4603      	mov	r3, r0
 8002028:	4a08      	ldr	r2, [pc, #32]	@ (800204c <microros_reallocate+0x68>)
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	461a      	mov	r2, r3
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <microros_reallocate+0x68>)
 8002032:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002034:	68b9      	ldr	r1, [r7, #8]
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7fe ff0e 	bl	8000e58 <pvPortReallocMicroROS>
 800203c:	4603      	mov	r3, r0
  }
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20006d48 	.word	0x20006d48
 800204c:	20006d4c 	.word	0x20006d4c

08002050 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	fb02 f303 	mul.w	r3, r2, r3
 8002064:	4a0c      	ldr	r2, [pc, #48]	@ (8002098 <microros_zero_allocate+0x48>)
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	4413      	add	r3, r2
 800206a:	461a      	mov	r2, r3
 800206c:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <microros_zero_allocate+0x48>)
 800206e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	4a08      	ldr	r2, [pc, #32]	@ (800209c <microros_zero_allocate+0x4c>)
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4413      	add	r3, r2
 800207e:	461a      	mov	r2, r3
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <microros_zero_allocate+0x4c>)
 8002082:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7fe ff13 	bl	8000eb2 <pvPortCallocMicroROS>
 800208c:	4603      	mov	r3, r0
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20006d48 	.word	0x20006d48
 800209c:	20006d4c 	.word	0x20006d4c

080020a0 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80020a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80020b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020b6:	a320      	add	r3, pc, #128	@ (adr r3, 8002138 <UTILS_NanosecondsToTimespec+0x98>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fba4 	bl	8000808 <__aeabi_ldivmod>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80020ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8002138 <UTILS_NanosecondsToTimespec+0x98>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fb98 	bl	8000808 <__aeabi_ldivmod>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	da20      	bge.n	8002126 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a11      	ldr	r2, [pc, #68]	@ (8002130 <UTILS_NanosecondsToTimespec+0x90>)
 80020ea:	fb82 1203 	smull	r1, r2, r2, r3
 80020ee:	1712      	asrs	r2, r2, #28
 80020f0:	17db      	asrs	r3, r3, #31
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	6979      	ldr	r1, [r7, #20]
 8002100:	17c8      	asrs	r0, r1, #31
 8002102:	460c      	mov	r4, r1
 8002104:	4605      	mov	r5, r0
 8002106:	ebb2 0804 	subs.w	r8, r2, r4
 800210a:	eb63 0905 	sbc.w	r9, r3, r5
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	4906      	ldr	r1, [pc, #24]	@ (8002134 <UTILS_NanosecondsToTimespec+0x94>)
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	441a      	add	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]
    }
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002130:	44b82fa1 	.word	0x44b82fa1
 8002134:	3b9aca00 	.word	0x3b9aca00
 8002138:	3b9aca00 	.word	0x3b9aca00
 800213c:	00000000 	.word	0x00000000

08002140 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002144:	b08e      	sub	sp, #56	@ 0x38
 8002146:	af00      	add	r7, sp, #0
 8002148:	6278      	str	r0, [r7, #36]	@ 0x24
 800214a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800214c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002150:	2300      	movs	r3, #0
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002162:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002166:	4618      	mov	r0, r3
 8002168:	f005 fd64 	bl	8007c34 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	17da      	asrs	r2, r3, #31
 8002170:	61bb      	str	r3, [r7, #24]
 8002172:	61fa      	str	r2, [r7, #28]
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	69b9      	ldr	r1, [r7, #24]
 800217e:	000b      	movs	r3, r1
 8002180:	2200      	movs	r2, #0
 8002182:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002188:	2200      	movs	r2, #0
 800218a:	461c      	mov	r4, r3
 800218c:	4615      	mov	r5, r2
 800218e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002192:	1911      	adds	r1, r2, r4
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	416b      	adcs	r3, r5
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800219e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80021a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	f04f 0400 	mov.w	r4, #0
 80021ae:	f04f 0500 	mov.w	r5, #0
 80021b2:	015d      	lsls	r5, r3, #5
 80021b4:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80021b8:	0154      	lsls	r4, r2, #5
 80021ba:	4622      	mov	r2, r4
 80021bc:	462b      	mov	r3, r5
 80021be:	ebb2 0800 	subs.w	r8, r2, r0
 80021c2:	eb63 0901 	sbc.w	r9, r3, r1
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80021d2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80021d6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80021da:	4690      	mov	r8, r2
 80021dc:	4699      	mov	r9, r3
 80021de:	eb18 0a00 	adds.w	sl, r8, r0
 80021e2:	eb49 0b01 	adc.w	fp, r9, r1
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021f2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021f6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021fa:	ebb2 040a 	subs.w	r4, r2, sl
 80021fe:	603c      	str	r4, [r7, #0]
 8002200:	eb63 030b 	sbc.w	r3, r3, fp
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800220a:	4623      	mov	r3, r4
 800220c:	181b      	adds	r3, r3, r0
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	462b      	mov	r3, r5
 8002212:	eb41 0303 	adc.w	r3, r1, r3
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	6a3a      	ldr	r2, [r7, #32]
 800221a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800221e:	f7ff ff3f 	bl	80020a0 <UTILS_NanosecondsToTimespec>

    return 0;
 8002222:	2300      	movs	r3, #0
 8002224:	4618      	mov	r0, r3
 8002226:	3738      	adds	r7, #56	@ 0x38
 8002228:	46bd      	mov	sp, r7
 800222a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002230 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_MspInit+0x54>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a11      	ldr	r2, [pc, #68]	@ (8002284 <HAL_MspInit+0x54>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <HAL_MspInit+0x54>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_MspInit+0x54>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_MspInit+0x54>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	@ 0x40
 8002262:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <HAL_MspInit+0x54>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	210f      	movs	r1, #15
 8002272:	f06f 0001 	mvn.w	r0, #1
 8002276:	f000 fe07 	bl	8002e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800

08002288 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b090      	sub	sp, #64	@ 0x40
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a8c      	ldr	r2, [pc, #560]	@ (80024d8 <HAL_TIM_Encoder_MspInit+0x250>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d14d      	bne.n	8002346 <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022ae:	4b8b      	ldr	r3, [pc, #556]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	4a8a      	ldr	r2, [pc, #552]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ba:	4b88      	ldr	r3, [pc, #544]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ca:	4b84      	ldr	r3, [pc, #528]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	4a83      	ldr	r2, [pc, #524]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d6:	4b81      	ldr	r3, [pc, #516]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	627b      	str	r3, [r7, #36]	@ 0x24
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FL_ENC_B_T1C1_Pin|FL_ENC_A_T1C2_Pin;
 80022e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022f4:	2301      	movs	r3, #1
 80022f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022fc:	4619      	mov	r1, r3
 80022fe:	4878      	ldr	r0, [pc, #480]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x258>)
 8002300:	f001 f9ee 	bl	80036e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2105      	movs	r1, #5
 8002308:	2018      	movs	r0, #24
 800230a:	f000 fdbd 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800230e:	2018      	movs	r0, #24
 8002310:	f000 fdd6 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002314:	2200      	movs	r2, #0
 8002316:	2105      	movs	r1, #5
 8002318:	2019      	movs	r0, #25
 800231a:	f000 fdb5 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800231e:	2019      	movs	r0, #25
 8002320:	f000 fdce 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2105      	movs	r1, #5
 8002328:	201a      	movs	r0, #26
 800232a:	f000 fdad 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800232e:	201a      	movs	r0, #26
 8002330:	f000 fdc6 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2105      	movs	r1, #5
 8002338:	201b      	movs	r0, #27
 800233a:	f000 fda5 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800233e:	201b      	movs	r0, #27
 8002340:	f000 fdbe 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002344:	e0c4      	b.n	80024d0 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM3)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a66      	ldr	r2, [pc, #408]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d134      	bne.n	80023ba <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
 8002354:	4b61      	ldr	r3, [pc, #388]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	4a60      	ldr	r2, [pc, #384]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002360:	4b5e      	ldr	r3, [pc, #376]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	4b5a      	ldr	r3, [pc, #360]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002374:	4a59      	ldr	r2, [pc, #356]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	6313      	str	r3, [r2, #48]	@ 0x30
 800237c:	4b57      	ldr	r3, [pc, #348]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FR_ENC_A_T3C1_Pin|FR_ENC_B_T3C2_Pin;
 8002388:	23c0      	movs	r3, #192	@ 0xc0
 800238a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002398:	2302      	movs	r3, #2
 800239a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a0:	4619      	mov	r1, r3
 80023a2:	484f      	ldr	r0, [pc, #316]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x258>)
 80023a4:	f001 f99c 	bl	80036e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2105      	movs	r1, #5
 80023ac:	201d      	movs	r0, #29
 80023ae:	f000 fd6b 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023b2:	201d      	movs	r0, #29
 80023b4:	f000 fd84 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
}
 80023b8:	e08a      	b.n	80024d0 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM4)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4a      	ldr	r2, [pc, #296]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0x260>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d134      	bne.n	800242e <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	4b44      	ldr	r3, [pc, #272]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023cc:	4a43      	ldr	r2, [pc, #268]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023ce:	f043 0304 	orr.w	r3, r3, #4
 80023d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d4:	4b41      	ldr	r3, [pc, #260]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	4b3d      	ldr	r3, [pc, #244]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	4a3c      	ldr	r2, [pc, #240]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f0:	4b3a      	ldr	r3, [pc, #232]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RL_ENC_B_T4C1_Pin|RL_ENC_A_T4C2_Pin;
 80023fc:	23c0      	movs	r3, #192	@ 0xc0
 80023fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800240c:	2302      	movs	r3, #2
 800240e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002410:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002414:	4619      	mov	r1, r3
 8002416:	4835      	ldr	r0, [pc, #212]	@ (80024ec <HAL_TIM_Encoder_MspInit+0x264>)
 8002418:	f001 f962 	bl	80036e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	2105      	movs	r1, #5
 8002420:	201e      	movs	r0, #30
 8002422:	f000 fd31 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002426:	201e      	movs	r0, #30
 8002428:	f000 fd4a 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
}
 800242c:	e050      	b.n	80024d0 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM8)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2f      	ldr	r2, [pc, #188]	@ (80024f0 <HAL_TIM_Encoder_MspInit+0x268>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d14b      	bne.n	80024d0 <HAL_TIM_Encoder_MspInit+0x248>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	4b27      	ldr	r3, [pc, #156]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 800243e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002440:	4a26      	ldr	r2, [pc, #152]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002442:	f043 0302 	orr.w	r3, r3, #2
 8002446:	6453      	str	r3, [r2, #68]	@ 0x44
 8002448:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	4b20      	ldr	r3, [pc, #128]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	4a1f      	ldr	r2, [pc, #124]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6313      	str	r3, [r2, #48]	@ 0x30
 8002464:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RR_ENC_A_T8C1_Pin|RR_ENC_B_T8C2_Pin;
 8002470:	23c0      	movs	r3, #192	@ 0xc0
 8002472:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247c:	2300      	movs	r3, #0
 800247e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002480:	2303      	movs	r3, #3
 8002482:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002484:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002488:	4619      	mov	r1, r3
 800248a:	481a      	ldr	r0, [pc, #104]	@ (80024f4 <HAL_TIM_Encoder_MspInit+0x26c>)
 800248c:	f001 f928 	bl	80036e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002490:	2200      	movs	r2, #0
 8002492:	2105      	movs	r1, #5
 8002494:	202b      	movs	r0, #43	@ 0x2b
 8002496:	f000 fcf7 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800249a:	202b      	movs	r0, #43	@ 0x2b
 800249c:	f000 fd10 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2105      	movs	r1, #5
 80024a4:	202c      	movs	r0, #44	@ 0x2c
 80024a6:	f000 fcef 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80024aa:	202c      	movs	r0, #44	@ 0x2c
 80024ac:	f000 fd08 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2105      	movs	r1, #5
 80024b4:	202d      	movs	r0, #45	@ 0x2d
 80024b6:	f000 fce7 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80024ba:	202d      	movs	r0, #45	@ 0x2d
 80024bc:	f000 fd00 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2105      	movs	r1, #5
 80024c4:	202e      	movs	r0, #46	@ 0x2e
 80024c6:	f000 fcdf 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80024ca:	202e      	movs	r0, #46	@ 0x2e
 80024cc:	f000 fcf8 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
}
 80024d0:	bf00      	nop
 80024d2:	3740      	adds	r7, #64	@ 0x40
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40010000 	.word	0x40010000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020000 	.word	0x40020000
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40000800 	.word	0x40000800
 80024ec:	40020400 	.word	0x40020400
 80024f0:	40010400 	.word	0x40010400
 80024f4:	40020800 	.word	0x40020800

080024f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002508:	d116      	bne.n	8002538 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b1a      	ldr	r3, [pc, #104]	@ (8002578 <HAL_TIM_Base_MspInit+0x80>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	4a19      	ldr	r2, [pc, #100]	@ (8002578 <HAL_TIM_Base_MspInit+0x80>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6413      	str	r3, [r2, #64]	@ 0x40
 800251a:	4b17      	ldr	r3, [pc, #92]	@ (8002578 <HAL_TIM_Base_MspInit+0x80>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2105      	movs	r1, #5
 800252a:	201c      	movs	r0, #28
 800252c:	f000 fcac 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002530:	201c      	movs	r0, #28
 8002532:	f000 fcc5 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002536:	e01a      	b.n	800256e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a0f      	ldr	r2, [pc, #60]	@ (800257c <HAL_TIM_Base_MspInit+0x84>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d115      	bne.n	800256e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <HAL_TIM_Base_MspInit+0x80>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	4a0b      	ldr	r2, [pc, #44]	@ (8002578 <HAL_TIM_Base_MspInit+0x80>)
 800254c:	f043 0310 	orr.w	r3, r3, #16
 8002550:	6413      	str	r3, [r2, #64]	@ 0x40
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_TIM_Base_MspInit+0x80>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	60bb      	str	r3, [r7, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2105      	movs	r1, #5
 8002562:	2036      	movs	r0, #54	@ 0x36
 8002564:	f000 fc90 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002568:	2036      	movs	r0, #54	@ 0x36
 800256a:	f000 fca9 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	40001000 	.word	0x40001000

08002580 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	@ 0x30
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a79      	ldr	r2, [pc, #484]	@ (8002784 <HAL_UART_MspInit+0x204>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d153      	bne.n	800264a <HAL_UART_MspInit+0xca>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	4b78      	ldr	r3, [pc, #480]	@ (8002788 <HAL_UART_MspInit+0x208>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	4a77      	ldr	r2, [pc, #476]	@ (8002788 <HAL_UART_MspInit+0x208>)
 80025ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025b2:	4b75      	ldr	r3, [pc, #468]	@ (8002788 <HAL_UART_MspInit+0x208>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ba:	61bb      	str	r3, [r7, #24]
 80025bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	4b71      	ldr	r3, [pc, #452]	@ (8002788 <HAL_UART_MspInit+0x208>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c6:	4a70      	ldr	r2, [pc, #448]	@ (8002788 <HAL_UART_MspInit+0x208>)
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002788 <HAL_UART_MspInit+0x208>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	4b6a      	ldr	r3, [pc, #424]	@ (8002788 <HAL_UART_MspInit+0x208>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	4a69      	ldr	r2, [pc, #420]	@ (8002788 <HAL_UART_MspInit+0x208>)
 80025e4:	f043 0308 	orr.w	r3, r3, #8
 80025e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ea:	4b67      	ldr	r3, [pc, #412]	@ (8002788 <HAL_UART_MspInit+0x208>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002604:	2303      	movs	r3, #3
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002608:	2308      	movs	r3, #8
 800260a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260c:	f107 031c 	add.w	r3, r7, #28
 8002610:	4619      	mov	r1, r3
 8002612:	485e      	ldr	r0, [pc, #376]	@ (800278c <HAL_UART_MspInit+0x20c>)
 8002614:	f001 f864 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002618:	2304      	movs	r3, #4
 800261a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002628:	2308      	movs	r3, #8
 800262a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4619      	mov	r1, r3
 8002632:	4857      	ldr	r0, [pc, #348]	@ (8002790 <HAL_UART_MspInit+0x210>)
 8002634:	f001 f854 	bl	80036e0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	2105      	movs	r1, #5
 800263c:	2035      	movs	r0, #53	@ 0x35
 800263e:	f000 fc23 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002642:	2035      	movs	r0, #53	@ 0x35
 8002644:	f000 fc3c 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8002648:	e098      	b.n	800277c <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a51      	ldr	r2, [pc, #324]	@ (8002794 <HAL_UART_MspInit+0x214>)
 8002650:	4293      	cmp	r3, r2
 8002652:	f040 8093 	bne.w	800277c <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b4b      	ldr	r3, [pc, #300]	@ (8002788 <HAL_UART_MspInit+0x208>)
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	4a4a      	ldr	r2, [pc, #296]	@ (8002788 <HAL_UART_MspInit+0x208>)
 8002660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002664:	6413      	str	r3, [r2, #64]	@ 0x40
 8002666:	4b48      	ldr	r3, [pc, #288]	@ (8002788 <HAL_UART_MspInit+0x208>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	4b44      	ldr	r3, [pc, #272]	@ (8002788 <HAL_UART_MspInit+0x208>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a43      	ldr	r2, [pc, #268]	@ (8002788 <HAL_UART_MspInit+0x208>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b41      	ldr	r3, [pc, #260]	@ (8002788 <HAL_UART_MspInit+0x208>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800268e:	230c      	movs	r3, #12
 8002690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800269e:	2307      	movs	r3, #7
 80026a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a2:	f107 031c 	add.w	r3, r7, #28
 80026a6:	4619      	mov	r1, r3
 80026a8:	483b      	ldr	r0, [pc, #236]	@ (8002798 <HAL_UART_MspInit+0x218>)
 80026aa:	f001 f819 	bl	80036e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80026ae:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026b0:	4a3b      	ldr	r2, [pc, #236]	@ (80027a0 <HAL_UART_MspInit+0x220>)
 80026b2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80026b4:	4b39      	ldr	r3, [pc, #228]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80026ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026bc:	4b37      	ldr	r3, [pc, #220]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c2:	4b36      	ldr	r3, [pc, #216]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c8:	4b34      	ldr	r3, [pc, #208]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d0:	4b32      	ldr	r3, [pc, #200]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d6:	4b31      	ldr	r3, [pc, #196]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80026dc:	4b2f      	ldr	r3, [pc, #188]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026e2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026e4:	4b2d      	ldr	r3, [pc, #180]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026e6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ec:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026f2:	482a      	ldr	r0, [pc, #168]	@ (800279c <HAL_UART_MspInit+0x21c>)
 80026f4:	f000 fbf2 	bl	8002edc <HAL_DMA_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <HAL_UART_MspInit+0x182>
      Error_Handler();
 80026fe:	f7ff fc2d 	bl	8001f5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a25      	ldr	r2, [pc, #148]	@ (800279c <HAL_UART_MspInit+0x21c>)
 8002706:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002708:	4a24      	ldr	r2, [pc, #144]	@ (800279c <HAL_UART_MspInit+0x21c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800270e:	4b25      	ldr	r3, [pc, #148]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 8002710:	4a25      	ldr	r2, [pc, #148]	@ (80027a8 <HAL_UART_MspInit+0x228>)
 8002712:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002714:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 8002716:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800271a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800271c:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 800271e:	2240      	movs	r2, #64	@ 0x40
 8002720:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002722:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 8002724:	2200      	movs	r2, #0
 8002726:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002728:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 800272a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800272e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002730:	4b1c      	ldr	r3, [pc, #112]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 8002732:	2200      	movs	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002736:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 8002738:	2200      	movs	r2, #0
 800273a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800273c:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002742:	4b18      	ldr	r3, [pc, #96]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 8002744:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002748:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800274a:	4b16      	ldr	r3, [pc, #88]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002750:	4814      	ldr	r0, [pc, #80]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 8002752:	f000 fbc3 	bl	8002edc <HAL_DMA_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 800275c:	f7ff fbfe 	bl	8001f5c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a10      	ldr	r2, [pc, #64]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 8002764:	639a      	str	r2, [r3, #56]	@ 0x38
 8002766:	4a0f      	ldr	r2, [pc, #60]	@ (80027a4 <HAL_UART_MspInit+0x224>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2105      	movs	r1, #5
 8002770:	2026      	movs	r0, #38	@ 0x26
 8002772:	f000 fb89 	bl	8002e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002776:	2026      	movs	r0, #38	@ 0x26
 8002778:	f000 fba2 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
}
 800277c:	bf00      	nop
 800277e:	3730      	adds	r7, #48	@ 0x30
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40005000 	.word	0x40005000
 8002788:	40023800 	.word	0x40023800
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40004400 	.word	0x40004400
 8002798:	40020000 	.word	0x40020000
 800279c:	200068ec 	.word	0x200068ec
 80027a0:	40026088 	.word	0x40026088
 80027a4:	2000694c 	.word	0x2000694c
 80027a8:	400260a0 	.word	0x400260a0

080027ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08e      	sub	sp, #56	@ 0x38
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	4b33      	ldr	r3, [pc, #204]	@ (8002890 <HAL_InitTick+0xe4>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	4a32      	ldr	r2, [pc, #200]	@ (8002890 <HAL_InitTick+0xe4>)
 80027c6:	f043 0320 	orr.w	r3, r3, #32
 80027ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80027cc:	4b30      	ldr	r3, [pc, #192]	@ (8002890 <HAL_InitTick+0xe4>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027d8:	f107 0210 	add.w	r2, r7, #16
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 fa44 	bl	8003c70 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027f2:	f001 fa15 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 80027f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80027f8:	e004      	b.n	8002804 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027fa:	f001 fa11 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 80027fe:	4603      	mov	r3, r0
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002806:	4a23      	ldr	r2, [pc, #140]	@ (8002894 <HAL_InitTick+0xe8>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	3b01      	subs	r3, #1
 8002810:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002812:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_InitTick+0xec>)
 8002814:	4a21      	ldr	r2, [pc, #132]	@ (800289c <HAL_InitTick+0xf0>)
 8002816:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002818:	4b1f      	ldr	r3, [pc, #124]	@ (8002898 <HAL_InitTick+0xec>)
 800281a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800281e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002820:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_InitTick+0xec>)
 8002822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002824:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002826:	4b1c      	ldr	r3, [pc, #112]	@ (8002898 <HAL_InitTick+0xec>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282c:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <HAL_InitTick+0xec>)
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002832:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <HAL_InitTick+0xec>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002838:	4817      	ldr	r0, [pc, #92]	@ (8002898 <HAL_InitTick+0xec>)
 800283a:	f001 ff19 	bl	8004670 <HAL_TIM_Base_Init>
 800283e:	4603      	mov	r3, r0
 8002840:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002844:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002848:	2b00      	cmp	r3, #0
 800284a:	d11b      	bne.n	8002884 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 800284c:	4812      	ldr	r0, [pc, #72]	@ (8002898 <HAL_InitTick+0xec>)
 800284e:	f001 ff5f 	bl	8004710 <HAL_TIM_Base_Start_IT>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002858:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002860:	2037      	movs	r0, #55	@ 0x37
 8002862:	f000 fb2d 	bl	8002ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b0f      	cmp	r3, #15
 800286a:	d808      	bhi.n	800287e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800286c:	2200      	movs	r2, #0
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	2037      	movs	r0, #55	@ 0x37
 8002872:	f000 fb09 	bl	8002e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002876:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <HAL_InitTick+0xf4>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e002      	b.n	8002884 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002884:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002888:	4618      	mov	r0, r3
 800288a:	3738      	adds	r7, #56	@ 0x38
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	431bde83 	.word	0x431bde83
 8002898:	20006d50 	.word	0x20006d50
 800289c:	40001400 	.word	0x40001400
 80028a0:	20000008 	.word	0x20000008

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <NMI_Handler+0x4>

080028ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	bf00      	nop
 80028ba:	e7fd      	b.n	80028b8 <MemManage_Handler+0x4>

080028bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <BusFault_Handler+0x4>

080028c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <UsageFault_Handler+0x4>

080028cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028e0:	4802      	ldr	r0, [pc, #8]	@ (80028ec <DMA1_Stream5_IRQHandler+0x10>)
 80028e2:	f000 fc93 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200068ec 	.word	0x200068ec

080028f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80028f4:	4802      	ldr	r0, [pc, #8]	@ (8002900 <DMA1_Stream6_IRQHandler+0x10>)
 80028f6:	f000 fc89 	bl	800320c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000694c 	.word	0x2000694c

08002904 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_IRQn 0 */
  //HAL_ADC_IRQHandler(&hadc1);
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002918:	4802      	ldr	r0, [pc, #8]	@ (8002924 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800291a:	f002 f89d 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2000673c 	.word	0x2000673c

08002928 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800292c:	4802      	ldr	r0, [pc, #8]	@ (8002938 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800292e:	f002 f893 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000673c 	.word	0x2000673c

0800293c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002940:	4802      	ldr	r0, [pc, #8]	@ (800294c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002942:	f002 f889 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2000673c 	.word	0x2000673c

08002950 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002954:	4802      	ldr	r0, [pc, #8]	@ (8002960 <TIM1_CC_IRQHandler+0x10>)
 8002956:	f002 f87f 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000673c 	.word	0x2000673c

08002964 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002978:	4802      	ldr	r0, [pc, #8]	@ (8002984 <TIM3_IRQHandler+0x10>)
 800297a:	f002 f86d 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20006784 	.word	0x20006784

08002988 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800298c:	4802      	ldr	r0, [pc, #8]	@ (8002998 <TIM4_IRQHandler+0x10>)
 800298e:	f002 f863 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200067cc 	.word	0x200067cc

0800299c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029a0:	4802      	ldr	r0, [pc, #8]	@ (80029ac <USART2_IRQHandler+0x10>)
 80029a2:	f002 fc3d 	bl	8005220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200068a4 	.word	0x200068a4

080029b0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80029b4:	4802      	ldr	r0, [pc, #8]	@ (80029c0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80029b6:	f002 f84f 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000685c 	.word	0x2000685c

080029c4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80029c8:	4802      	ldr	r0, [pc, #8]	@ (80029d4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80029ca:	f002 f845 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	2000685c 	.word	0x2000685c

080029d8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80029dc:	4802      	ldr	r0, [pc, #8]	@ (80029e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80029de:	f002 f83b 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	2000685c 	.word	0x2000685c

080029ec <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80029f0:	4802      	ldr	r0, [pc, #8]	@ (80029fc <TIM8_CC_IRQHandler+0x10>)
 80029f2:	f002 f831 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	2000685c 	.word	0x2000685c

08002a00 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_IRQn 0 */
  //HAL_UART_IRQHandler(&huart5);
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a14:	4802      	ldr	r0, [pc, #8]	@ (8002a20 <TIM6_DAC_IRQHandler+0x10>)
 8002a16:	f002 f81f 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20006814 	.word	0x20006814

08002a24 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a28:	4802      	ldr	r0, [pc, #8]	@ (8002a34 <TIM7_IRQHandler+0x10>)
 8002a2a:	f002 f815 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20006d50 	.word	0x20006d50

08002a38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_adc1);
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  return 1;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <_kill>:

int _kill(int pid, int sig)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a60:	f015 fcfe 	bl	8018460 <__errno>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2216      	movs	r2, #22
 8002a68:	601a      	str	r2, [r3, #0]
  return -1;
 8002a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <_exit>:

void _exit (int status)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a7e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffe7 	bl	8002a56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <_exit+0x12>

08002a8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e00a      	b.n	8002ab4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a9e:	f3af 8000 	nop.w
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	60ba      	str	r2, [r7, #8]
 8002aaa:	b2ca      	uxtb	r2, r1
 8002aac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dbf0      	blt.n	8002a9e <_read+0x12>
  }

  return len;
 8002abc:	687b      	ldr	r3, [r7, #4]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b086      	sub	sp, #24
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e009      	b.n	8002aec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	60ba      	str	r2, [r7, #8]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	dbf1      	blt.n	8002ad8 <_write+0x12>
  }
  return len;
 8002af4:	687b      	ldr	r3, [r7, #4]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <_close>:

int _close(int file)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b26:	605a      	str	r2, [r3, #4]
  return 0;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_isatty>:

int _isatty(int file)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b3e:	2301      	movs	r3, #1
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b70:	4a14      	ldr	r2, [pc, #80]	@ (8002bc4 <_sbrk+0x5c>)
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <_sbrk+0x60>)
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b7c:	4b13      	ldr	r3, [pc, #76]	@ (8002bcc <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d102      	bne.n	8002b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b84:	4b11      	ldr	r3, [pc, #68]	@ (8002bcc <_sbrk+0x64>)
 8002b86:	4a12      	ldr	r2, [pc, #72]	@ (8002bd0 <_sbrk+0x68>)
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b8a:	4b10      	ldr	r3, [pc, #64]	@ (8002bcc <_sbrk+0x64>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d207      	bcs.n	8002ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b98:	f015 fc62 	bl	8018460 <__errno>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	e009      	b.n	8002bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <_sbrk+0x64>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bae:	4b07      	ldr	r3, [pc, #28]	@ (8002bcc <_sbrk+0x64>)
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4a05      	ldr	r2, [pc, #20]	@ (8002bcc <_sbrk+0x64>)
 8002bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bba:	68fb      	ldr	r3, [r7, #12]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20020000 	.word	0x20020000
 8002bc8:	00000400 	.word	0x00000400
 8002bcc:	20006d9c 	.word	0x20006d9c
 8002bd0:	200106e0 	.word	0x200106e0

08002bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bd8:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <SystemInit+0x20>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bde:	4a05      	ldr	r2, [pc, #20]	@ (8002bf4 <SystemInit+0x20>)
 8002be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bfc:	f7ff ffea 	bl	8002bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c00:	480c      	ldr	r0, [pc, #48]	@ (8002c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c02:	490d      	ldr	r1, [pc, #52]	@ (8002c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c04:	4a0d      	ldr	r2, [pc, #52]	@ (8002c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c08:	e002      	b.n	8002c10 <LoopCopyDataInit>

08002c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c0e:	3304      	adds	r3, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c14:	d3f9      	bcc.n	8002c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c16:	4a0a      	ldr	r2, [pc, #40]	@ (8002c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c18:	4c0a      	ldr	r4, [pc, #40]	@ (8002c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c1c:	e001      	b.n	8002c22 <LoopFillZerobss>

08002c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c20:	3204      	adds	r2, #4

08002c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c24:	d3fb      	bcc.n	8002c1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c26:	f015 fc21 	bl	801846c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c2a:	f7fe faf3 	bl	8001214 <main>
  bx  lr    
 8002c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c38:	20002300 	.word	0x20002300
  ldr r2, =_sidata
 8002c3c:	0801b598 	.word	0x0801b598
  ldr r2, =_sbss
 8002c40:	20002300 	.word	0x20002300
  ldr r4, =_ebss
 8002c44:	200106e0 	.word	0x200106e0

08002c48 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c48:	e7fe      	b.n	8002c48 <CAN1_RX0_IRQHandler>
	...

08002c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c50:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <HAL_Init+0x40>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <HAL_Init+0x40>)
 8002c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <HAL_Init+0x40>)
 8002c62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c68:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a07      	ldr	r2, [pc, #28]	@ (8002c8c <HAL_Init+0x40>)
 8002c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c74:	2003      	movs	r0, #3
 8002c76:	f000 f8fc 	bl	8002e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c7a:	200f      	movs	r0, #15
 8002c7c:	f7ff fd96 	bl	80027ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c80:	f7ff fad6 	bl	8002230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023c00 	.word	0x40023c00

08002c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_IncTick+0x20>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_IncTick+0x24>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a04      	ldr	r2, [pc, #16]	@ (8002cb4 <HAL_IncTick+0x24>)
 8002ca2:	6013      	str	r3, [r2, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2000000c 	.word	0x2000000c
 8002cb4:	20006da0 	.word	0x20006da0

08002cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return uwTick;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	@ (8002ccc <HAL_GetTick+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20006da0 	.word	0x20006da0

08002cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd8:	f7ff ffee 	bl	8002cb8 <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d005      	beq.n	8002cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <HAL_Delay+0x44>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cf6:	bf00      	nop
 8002cf8:	f7ff ffde 	bl	8002cb8 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d8f7      	bhi.n	8002cf8 <HAL_Delay+0x28>
  {
  }
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	2000000c 	.word	0x2000000c

08002d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d28:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	@ (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	60d3      	str	r3, [r2, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <__NVIC_GetPriorityGrouping+0x18>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 0307 	and.w	r3, r3, #7
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db0b      	blt.n	8002da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4907      	ldr	r1, [pc, #28]	@ (8002db4 <__NVIC_EnableIRQ+0x38>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e100 	.word	0xe000e100

08002db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db0a      	blt.n	8002de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	490c      	ldr	r1, [pc, #48]	@ (8002e04 <__NVIC_SetPriority+0x4c>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de0:	e00a      	b.n	8002df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4908      	ldr	r1, [pc, #32]	@ (8002e08 <__NVIC_SetPriority+0x50>)
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3b04      	subs	r3, #4
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	440b      	add	r3, r1
 8002df6:	761a      	strb	r2, [r3, #24]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e100 	.word	0xe000e100
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	@ 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f1c3 0307 	rsb	r3, r3, #7
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	bf28      	it	cs
 8002e2a:	2304      	movcs	r3, #4
 8002e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d902      	bls.n	8002e3c <NVIC_EncodePriority+0x30>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3b03      	subs	r3, #3
 8002e3a:	e000      	b.n	8002e3e <NVIC_EncodePriority+0x32>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	401a      	ands	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43d9      	mvns	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	4313      	orrs	r3, r2
         );
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	@ 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ff4c 	bl	8002d18 <__NVIC_SetPriorityGrouping>
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e9a:	f7ff ff61 	bl	8002d60 <__NVIC_GetPriorityGrouping>
 8002e9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	6978      	ldr	r0, [r7, #20]
 8002ea6:	f7ff ffb1 	bl	8002e0c <NVIC_EncodePriority>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff80 	bl	8002db8 <__NVIC_SetPriority>
}
 8002eb8:	bf00      	nop
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ff54 	bl	8002d7c <__NVIC_EnableIRQ>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff fee6 	bl	8002cb8 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e099      	b.n	800302c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f18:	e00f      	b.n	8002f3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f1a:	f7ff fecd 	bl	8002cb8 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d908      	bls.n	8002f3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e078      	b.n	800302c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e8      	bne.n	8002f1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	4b38      	ldr	r3, [pc, #224]	@ (8003034 <HAL_DMA_Init+0x158>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d107      	bne.n	8002fa4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	f023 0307 	bic.w	r3, r3, #7
 8002fba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d117      	bne.n	8002ffe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00e      	beq.n	8002ffe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fb01 	bl	80035e8 <DMA_CheckFifoParam>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2240      	movs	r2, #64	@ 0x40
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e016      	b.n	800302c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fab8 	bl	800357c <DMA_CalcBaseAndBitshift>
 800300c:	4603      	mov	r3, r0
 800300e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	223f      	movs	r2, #63	@ 0x3f
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	f010803f 	.word	0xf010803f

08003038 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_DMA_Start_IT+0x26>
 800305a:	2302      	movs	r3, #2
 800305c:	e040      	b.n	80030e0 <HAL_DMA_Start_IT+0xa8>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d12f      	bne.n	80030d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fa4a 	bl	8003520 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003090:	223f      	movs	r2, #63	@ 0x3f
 8003092:	409a      	lsls	r2, r3
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0216 	orr.w	r2, r2, #22
 80030a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0208 	orr.w	r2, r2, #8
 80030be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e005      	b.n	80030de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030da:	2302      	movs	r3, #2
 80030dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030de:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80030f6:	f7ff fddf 	bl	8002cb8 <HAL_GetTick>
 80030fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d008      	beq.n	800311a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2280      	movs	r2, #128	@ 0x80
 800310c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e052      	b.n	80031c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0216 	bic.w	r2, r2, #22
 8003128:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695a      	ldr	r2, [r3, #20]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003138:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <HAL_DMA_Abort+0x62>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003146:	2b00      	cmp	r3, #0
 8003148:	d007      	beq.n	800315a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0208 	bic.w	r2, r2, #8
 8003158:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800316a:	e013      	b.n	8003194 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800316c:	f7ff fda4 	bl	8002cb8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b05      	cmp	r3, #5
 8003178:	d90c      	bls.n	8003194 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2203      	movs	r2, #3
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e015      	b.n	80031c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1e4      	bne.n	800316c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a6:	223f      	movs	r2, #63	@ 0x3f
 80031a8:	409a      	lsls	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d004      	beq.n	80031e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2280      	movs	r2, #128	@ 0x80
 80031e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00c      	b.n	8003200 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2205      	movs	r2, #5
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003218:	4b8e      	ldr	r3, [pc, #568]	@ (8003454 <HAL_DMA_IRQHandler+0x248>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a8e      	ldr	r2, [pc, #568]	@ (8003458 <HAL_DMA_IRQHandler+0x24c>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0a9b      	lsrs	r3, r3, #10
 8003224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003236:	2208      	movs	r2, #8
 8003238:	409a      	lsls	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01a      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0204 	bic.w	r2, r2, #4
 800325e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003264:	2208      	movs	r2, #8
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800327c:	2201      	movs	r2, #1
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	2201      	movs	r2, #1
 800329c:	409a      	lsls	r2, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	f043 0202 	orr.w	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b2:	2204      	movs	r2, #4
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d012      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	2204      	movs	r2, #4
 80032d2:	409a      	lsls	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e8:	2210      	movs	r2, #16
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d043      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d03c      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003306:	2210      	movs	r2, #16
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d024      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
 800333a:	e01f      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01b      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
 800334c:	e016      	b.n	800337c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0208 	bic.w	r2, r2, #8
 800336a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003380:	2220      	movs	r2, #32
 8003382:	409a      	lsls	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 808f 	beq.w	80034ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8087 	beq.w	80034ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	2220      	movs	r2, #32
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b05      	cmp	r3, #5
 80033b4:	d136      	bne.n	8003424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0216 	bic.w	r2, r2, #22
 80033c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <HAL_DMA_IRQHandler+0x1da>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0208 	bic.w	r2, r2, #8
 80033f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	223f      	movs	r2, #63	@ 0x3f
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d07e      	beq.n	8003518 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	4798      	blx	r3
        }
        return;
 8003422:	e079      	b.n	8003518 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01d      	beq.n	800346e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003444:	2b00      	cmp	r3, #0
 8003446:	d031      	beq.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	4798      	blx	r3
 8003450:	e02c      	b.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
 8003452:	bf00      	nop
 8003454:	20000004 	.word	0x20000004
 8003458:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d023      	beq.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
 800346c:	e01e      	b.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10f      	bne.n	800349c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0210 	bic.w	r2, r2, #16
 800348a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d032      	beq.n	800351a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d022      	beq.n	8003506 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2205      	movs	r2, #5
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3301      	adds	r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d307      	bcc.n	80034f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f2      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x2cc>
 80034f2:	e000      	b.n	80034f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80034f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350a:	2b00      	cmp	r3, #0
 800350c:	d005      	beq.n	800351a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
 8003516:	e000      	b.n	800351a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003518:	bf00      	nop
    }
  }
}
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800353c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	2b40      	cmp	r3, #64	@ 0x40
 800354c:	d108      	bne.n	8003560 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800355e:	e007      	b.n	8003570 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3b10      	subs	r3, #16
 800358c:	4a14      	ldr	r2, [pc, #80]	@ (80035e0 <DMA_CalcBaseAndBitshift+0x64>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003596:	4a13      	ldr	r2, [pc, #76]	@ (80035e4 <DMA_CalcBaseAndBitshift+0x68>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	461a      	mov	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d909      	bls.n	80035be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80035bc:	e007      	b.n	80035ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035c6:	f023 0303 	bic.w	r3, r3, #3
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	aaaaaaab 	.word	0xaaaaaaab
 80035e4:	08019ce4 	.word	0x08019ce4

080035e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11f      	bne.n	8003642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d856      	bhi.n	80036b6 <DMA_CheckFifoParam+0xce>
 8003608:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <DMA_CheckFifoParam+0x28>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	08003621 	.word	0x08003621
 8003614:	08003633 	.word	0x08003633
 8003618:	08003621 	.word	0x08003621
 800361c:	080036b7 	.word	0x080036b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d046      	beq.n	80036ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e043      	b.n	80036ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800363a:	d140      	bne.n	80036be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003640:	e03d      	b.n	80036be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800364a:	d121      	bne.n	8003690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d837      	bhi.n	80036c2 <DMA_CheckFifoParam+0xda>
 8003652:	a201      	add	r2, pc, #4	@ (adr r2, 8003658 <DMA_CheckFifoParam+0x70>)
 8003654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003658:	08003669 	.word	0x08003669
 800365c:	0800366f 	.word	0x0800366f
 8003660:	08003669 	.word	0x08003669
 8003664:	08003681 	.word	0x08003681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      break;
 800366c:	e030      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d025      	beq.n	80036c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367e:	e022      	b.n	80036c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003688:	d11f      	bne.n	80036ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800368e:	e01c      	b.n	80036ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d903      	bls.n	800369e <DMA_CheckFifoParam+0xb6>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b03      	cmp	r3, #3
 800369a:	d003      	beq.n	80036a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800369c:	e018      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      break;
 80036a2:	e015      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      break;
 80036b4:	e00b      	b.n	80036ce <DMA_CheckFifoParam+0xe6>
      break;
 80036b6:	bf00      	nop
 80036b8:	e00a      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ba:	bf00      	nop
 80036bc:	e008      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036be:	bf00      	nop
 80036c0:	e006      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036c2:	bf00      	nop
 80036c4:	e004      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036c6:	bf00      	nop
 80036c8:	e002      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ce:	bf00      	nop
    }
  } 
  
  return status; 
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	@ 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e165      	b.n	80039c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	f040 8154 	bne.w	80039c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d005      	beq.n	8003732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372e:	2b02      	cmp	r3, #2
 8003730:	d130      	bne.n	8003794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003768:	2201      	movs	r2, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 0201 	and.w	r2, r3, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b03      	cmp	r3, #3
 800379e:	d017      	beq.n	80037d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d123      	bne.n	8003824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80ae 	beq.w	80039c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b5d      	ldr	r3, [pc, #372]	@ (80039e0 <HAL_GPIO_Init+0x300>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386e:	4a5c      	ldr	r2, [pc, #368]	@ (80039e0 <HAL_GPIO_Init+0x300>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003874:	6453      	str	r3, [r2, #68]	@ 0x44
 8003876:	4b5a      	ldr	r3, [pc, #360]	@ (80039e0 <HAL_GPIO_Init+0x300>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003882:	4a58      	ldr	r2, [pc, #352]	@ (80039e4 <HAL_GPIO_Init+0x304>)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4f      	ldr	r2, [pc, #316]	@ (80039e8 <HAL_GPIO_Init+0x308>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d025      	beq.n	80038fa <HAL_GPIO_Init+0x21a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4e      	ldr	r2, [pc, #312]	@ (80039ec <HAL_GPIO_Init+0x30c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <HAL_GPIO_Init+0x216>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4d      	ldr	r2, [pc, #308]	@ (80039f0 <HAL_GPIO_Init+0x310>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d019      	beq.n	80038f2 <HAL_GPIO_Init+0x212>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4c      	ldr	r2, [pc, #304]	@ (80039f4 <HAL_GPIO_Init+0x314>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_GPIO_Init+0x20e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4b      	ldr	r2, [pc, #300]	@ (80039f8 <HAL_GPIO_Init+0x318>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00d      	beq.n	80038ea <HAL_GPIO_Init+0x20a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4a      	ldr	r2, [pc, #296]	@ (80039fc <HAL_GPIO_Init+0x31c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <HAL_GPIO_Init+0x206>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a49      	ldr	r2, [pc, #292]	@ (8003a00 <HAL_GPIO_Init+0x320>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_GPIO_Init+0x202>
 80038de:	2306      	movs	r3, #6
 80038e0:	e00c      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038e2:	2307      	movs	r3, #7
 80038e4:	e00a      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038e6:	2305      	movs	r3, #5
 80038e8:	e008      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038ea:	2304      	movs	r3, #4
 80038ec:	e006      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e004      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e002      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038fa:	2300      	movs	r3, #0
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	f002 0203 	and.w	r2, r2, #3
 8003902:	0092      	lsls	r2, r2, #2
 8003904:	4093      	lsls	r3, r2
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800390c:	4935      	ldr	r1, [pc, #212]	@ (80039e4 <HAL_GPIO_Init+0x304>)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800391a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800393e:	4a31      	ldr	r2, [pc, #196]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003944:	4b2f      	ldr	r3, [pc, #188]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003968:	4a26      	ldr	r2, [pc, #152]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800396e:	4b25      	ldr	r3, [pc, #148]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003992:	4a1c      	ldr	r2, [pc, #112]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003998:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039bc:	4a11      	ldr	r2, [pc, #68]	@ (8003a04 <HAL_GPIO_Init+0x324>)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	f67f ae96 	bls.w	80036fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3724      	adds	r7, #36	@ 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40020000 	.word	0x40020000
 80039ec:	40020400 	.word	0x40020400
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020c00 	.word	0x40020c00
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40021400 	.word	0x40021400
 8003a00:	40021800 	.word	0x40021800
 8003a04:	40013c00 	.word	0x40013c00

08003a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
 8003a14:	4613      	mov	r3, r2
 8003a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a18:	787b      	ldrb	r3, [r7, #1]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a24:	e003      	b.n	8003a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	041a      	lsls	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	619a      	str	r2, [r3, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0cc      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b68      	ldr	r3, [pc, #416]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d90c      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b65      	ldr	r3, [pc, #404]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b63      	ldr	r3, [pc, #396]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b8      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a90:	4b59      	ldr	r3, [pc, #356]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a58      	ldr	r2, [pc, #352]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa8:	4b53      	ldr	r3, [pc, #332]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a52      	ldr	r2, [pc, #328]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b50      	ldr	r3, [pc, #320]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	494d      	ldr	r1, [pc, #308]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d044      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b47      	ldr	r3, [pc, #284]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d119      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	4b3f      	ldr	r3, [pc, #252]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e067      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1a:	4b37      	ldr	r3, [pc, #220]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4934      	ldr	r1, [pc, #208]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b2c:	f7ff f8c4 	bl	8002cb8 <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f7ff f8c0 	bl	8002cb8 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e04f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 020c 	and.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1eb      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b25      	ldr	r3, [pc, #148]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d20c      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b22      	ldr	r3, [pc, #136]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b20      	ldr	r3, [pc, #128]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e032      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4916      	ldr	r1, [pc, #88]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bae:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	490e      	ldr	r1, [pc, #56]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bc2:	f000 f887 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	490a      	ldr	r1, [pc, #40]	@ (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	5ccb      	ldrb	r3, [r1, r3]
 8003bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bda:	4a09      	ldr	r2, [pc, #36]	@ (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bde:	4b09      	ldr	r3, [pc, #36]	@ (8003c04 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fde2 	bl	80027ac <HAL_InitTick>

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023c00 	.word	0x40023c00
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08019ccc 	.word	0x08019ccc
 8003c00:	20000004 	.word	0x20000004
 8003c04:	20000008 	.word	0x20000008

08003c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	@ (8003c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000004 	.word	0x20000004

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c24:	f7ff fff0 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0a9b      	lsrs	r3, r3, #10
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4903      	ldr	r1, [pc, #12]	@ (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	08019cdc 	.word	0x08019cdc

08003c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c4c:	f7ff ffdc 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0b5b      	lsrs	r3, r3, #13
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	@ (8003c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	08019cdc 	.word	0x08019cdc

08003c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c80:	4b12      	ldr	r3, [pc, #72]	@ (8003ccc <HAL_RCC_GetClockConfig+0x5c>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0203 	and.w	r2, r3, #3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <HAL_RCC_GetClockConfig+0x5c>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ccc <HAL_RCC_GetClockConfig+0x5c>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ca4:	4b09      	ldr	r3, [pc, #36]	@ (8003ccc <HAL_RCC_GetClockConfig+0x5c>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	08db      	lsrs	r3, r3, #3
 8003caa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cb2:	4b07      	ldr	r3, [pc, #28]	@ (8003cd0 <HAL_RCC_GetClockConfig+0x60>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 020f 	and.w	r2, r3, #15
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	601a      	str	r2, [r3, #0]
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40023c00 	.word	0x40023c00

08003cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd8:	b0ae      	sub	sp, #184	@ 0xb8
 8003cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cfa:	4bcb      	ldr	r3, [pc, #812]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	f200 8206 	bhi.w	8004114 <HAL_RCC_GetSysClockFreq+0x440>
 8003d08:	a201      	add	r2, pc, #4	@ (adr r2, 8003d10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d45 	.word	0x08003d45
 8003d14:	08004115 	.word	0x08004115
 8003d18:	08004115 	.word	0x08004115
 8003d1c:	08004115 	.word	0x08004115
 8003d20:	08003d4d 	.word	0x08003d4d
 8003d24:	08004115 	.word	0x08004115
 8003d28:	08004115 	.word	0x08004115
 8003d2c:	08004115 	.word	0x08004115
 8003d30:	08003d55 	.word	0x08003d55
 8003d34:	08004115 	.word	0x08004115
 8003d38:	08004115 	.word	0x08004115
 8003d3c:	08004115 	.word	0x08004115
 8003d40:	08003f45 	.word	0x08003f45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d44:	4bb9      	ldr	r3, [pc, #740]	@ (800402c <HAL_RCC_GetSysClockFreq+0x358>)
 8003d46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d4a:	e1e7      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d4c:	4bb8      	ldr	r3, [pc, #736]	@ (8004030 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d52:	e1e3      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d54:	4bb4      	ldr	r3, [pc, #720]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d60:	4bb1      	ldr	r3, [pc, #708]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d071      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6c:	4bae      	ldr	r3, [pc, #696]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	099b      	lsrs	r3, r3, #6
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d92:	4622      	mov	r2, r4
 8003d94:	462b      	mov	r3, r5
 8003d96:	f04f 0000 	mov.w	r0, #0
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	0159      	lsls	r1, r3, #5
 8003da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da4:	0150      	lsls	r0, r2, #5
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4621      	mov	r1, r4
 8003dac:	1a51      	subs	r1, r2, r1
 8003dae:	6439      	str	r1, [r7, #64]	@ 0x40
 8003db0:	4629      	mov	r1, r5
 8003db2:	eb63 0301 	sbc.w	r3, r3, r1
 8003db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	018b      	lsls	r3, r1, #6
 8003dc8:	4641      	mov	r1, r8
 8003dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dce:	4641      	mov	r1, r8
 8003dd0:	018a      	lsls	r2, r1, #6
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	1a51      	subs	r1, r2, r1
 8003dd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003dd8:	4649      	mov	r1, r9
 8003dda:	eb63 0301 	sbc.w	r3, r3, r1
 8003dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003dec:	4649      	mov	r1, r9
 8003dee:	00cb      	lsls	r3, r1, #3
 8003df0:	4641      	mov	r1, r8
 8003df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df6:	4641      	mov	r1, r8
 8003df8:	00ca      	lsls	r2, r1, #3
 8003dfa:	4610      	mov	r0, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4622      	mov	r2, r4
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e06:	462b      	mov	r3, r5
 8003e08:	460a      	mov	r2, r1
 8003e0a:	eb42 0303 	adc.w	r3, r2, r3
 8003e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	024b      	lsls	r3, r1, #9
 8003e20:	4621      	mov	r1, r4
 8003e22:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e26:	4621      	mov	r1, r4
 8003e28:	024a      	lsls	r2, r1, #9
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e40:	f7fc fd32 	bl	80008a8 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4613      	mov	r3, r2
 8003e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e4e:	e067      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e50:	4b75      	ldr	r3, [pc, #468]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	099b      	lsrs	r3, r3, #6
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e5c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e6e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e72:	4622      	mov	r2, r4
 8003e74:	462b      	mov	r3, r5
 8003e76:	f04f 0000 	mov.w	r0, #0
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	0159      	lsls	r1, r3, #5
 8003e80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e84:	0150      	lsls	r0, r2, #5
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	1a51      	subs	r1, r2, r1
 8003e8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003e90:	4629      	mov	r1, r5
 8003e92:	eb63 0301 	sbc.w	r3, r3, r1
 8003e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	018b      	lsls	r3, r1, #6
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eae:	4641      	mov	r1, r8
 8003eb0:	018a      	lsls	r2, r1, #6
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eb8:	4649      	mov	r1, r9
 8003eba:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ece:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed2:	4692      	mov	sl, r2
 8003ed4:	469b      	mov	fp, r3
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	eb1a 0303 	adds.w	r3, sl, r3
 8003edc:	623b      	str	r3, [r7, #32]
 8003ede:	462b      	mov	r3, r5
 8003ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	028b      	lsls	r3, r1, #10
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003efc:	4621      	mov	r1, r4
 8003efe:	028a      	lsls	r2, r1, #10
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f08:	2200      	movs	r2, #0
 8003f0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f0c:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f12:	f7fc fcc9 	bl	80008a8 <__aeabi_uldivmod>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f20:	4b41      	ldr	r3, [pc, #260]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f42:	e0eb      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f44:	4b38      	ldr	r3, [pc, #224]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f50:	4b35      	ldr	r3, [pc, #212]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d06b      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5c:	4b32      	ldr	r3, [pc, #200]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	2200      	movs	r2, #0
 8003f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f70:	2300      	movs	r3, #0
 8003f72:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f78:	4622      	mov	r2, r4
 8003f7a:	462b      	mov	r3, r5
 8003f7c:	f04f 0000 	mov.w	r0, #0
 8003f80:	f04f 0100 	mov.w	r1, #0
 8003f84:	0159      	lsls	r1, r3, #5
 8003f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8a:	0150      	lsls	r0, r2, #5
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4621      	mov	r1, r4
 8003f92:	1a51      	subs	r1, r2, r1
 8003f94:	61b9      	str	r1, [r7, #24]
 8003f96:	4629      	mov	r1, r5
 8003f98:	eb63 0301 	sbc.w	r3, r3, r1
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003faa:	4659      	mov	r1, fp
 8003fac:	018b      	lsls	r3, r1, #6
 8003fae:	4651      	mov	r1, sl
 8003fb0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fb4:	4651      	mov	r1, sl
 8003fb6:	018a      	lsls	r2, r1, #6
 8003fb8:	4651      	mov	r1, sl
 8003fba:	ebb2 0801 	subs.w	r8, r2, r1
 8003fbe:	4659      	mov	r1, fp
 8003fc0:	eb63 0901 	sbc.w	r9, r3, r1
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fd0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fd8:	4690      	mov	r8, r2
 8003fda:	4699      	mov	r9, r3
 8003fdc:	4623      	mov	r3, r4
 8003fde:	eb18 0303 	adds.w	r3, r8, r3
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	462b      	mov	r3, r5
 8003fe6:	eb49 0303 	adc.w	r3, r9, r3
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	024b      	lsls	r3, r1, #9
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004002:	4621      	mov	r1, r4
 8004004:	024a      	lsls	r2, r1, #9
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800400e:	2200      	movs	r2, #0
 8004010:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004012:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004014:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004018:	f7fc fc46 	bl	80008a8 <__aeabi_uldivmod>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4613      	mov	r3, r2
 8004022:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004026:	e065      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x420>
 8004028:	40023800 	.word	0x40023800
 800402c:	00f42400 	.word	0x00f42400
 8004030:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004034:	4b3d      	ldr	r3, [pc, #244]	@ (800412c <HAL_RCC_GetSysClockFreq+0x458>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	099b      	lsrs	r3, r3, #6
 800403a:	2200      	movs	r2, #0
 800403c:	4618      	mov	r0, r3
 800403e:	4611      	mov	r1, r2
 8004040:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004044:	653b      	str	r3, [r7, #80]	@ 0x50
 8004046:	2300      	movs	r3, #0
 8004048:	657b      	str	r3, [r7, #84]	@ 0x54
 800404a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800404e:	4642      	mov	r2, r8
 8004050:	464b      	mov	r3, r9
 8004052:	f04f 0000 	mov.w	r0, #0
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	0159      	lsls	r1, r3, #5
 800405c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004060:	0150      	lsls	r0, r2, #5
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4641      	mov	r1, r8
 8004068:	1a51      	subs	r1, r2, r1
 800406a:	60b9      	str	r1, [r7, #8]
 800406c:	4649      	mov	r1, r9
 800406e:	eb63 0301 	sbc.w	r3, r3, r1
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004080:	4659      	mov	r1, fp
 8004082:	018b      	lsls	r3, r1, #6
 8004084:	4651      	mov	r1, sl
 8004086:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800408a:	4651      	mov	r1, sl
 800408c:	018a      	lsls	r2, r1, #6
 800408e:	4651      	mov	r1, sl
 8004090:	1a54      	subs	r4, r2, r1
 8004092:	4659      	mov	r1, fp
 8004094:	eb63 0501 	sbc.w	r5, r3, r1
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	00eb      	lsls	r3, r5, #3
 80040a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a6:	00e2      	lsls	r2, r4, #3
 80040a8:	4614      	mov	r4, r2
 80040aa:	461d      	mov	r5, r3
 80040ac:	4643      	mov	r3, r8
 80040ae:	18e3      	adds	r3, r4, r3
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	464b      	mov	r3, r9
 80040b4:	eb45 0303 	adc.w	r3, r5, r3
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040c6:	4629      	mov	r1, r5
 80040c8:	028b      	lsls	r3, r1, #10
 80040ca:	4621      	mov	r1, r4
 80040cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d0:	4621      	mov	r1, r4
 80040d2:	028a      	lsls	r2, r1, #10
 80040d4:	4610      	mov	r0, r2
 80040d6:	4619      	mov	r1, r3
 80040d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040dc:	2200      	movs	r2, #0
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040e6:	f7fc fbdf 	bl	80008a8 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4613      	mov	r3, r2
 80040f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040f4:	4b0d      	ldr	r3, [pc, #52]	@ (800412c <HAL_RCC_GetSysClockFreq+0x458>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0f1b      	lsrs	r3, r3, #28
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004102:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800410a:	fbb2 f3f3 	udiv	r3, r2, r3
 800410e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004112:	e003      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004116:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800411a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004120:	4618      	mov	r0, r3
 8004122:	37b8      	adds	r7, #184	@ 0xb8
 8004124:	46bd      	mov	sp, r7
 8004126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	00f42400 	.word	0x00f42400

08004134 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e28d      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 8083 	beq.w	800425a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004154:	4b94      	ldr	r3, [pc, #592]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b04      	cmp	r3, #4
 800415e:	d019      	beq.n	8004194 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004160:	4b91      	ldr	r3, [pc, #580]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 030c 	and.w	r3, r3, #12
        || \
 8004168:	2b08      	cmp	r3, #8
 800416a:	d106      	bne.n	800417a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800416c:	4b8e      	ldr	r3, [pc, #568]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004174:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004178:	d00c      	beq.n	8004194 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417a:	4b8b      	ldr	r3, [pc, #556]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d112      	bne.n	80041ac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004186:	4b88      	ldr	r3, [pc, #544]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004192:	d10b      	bne.n	80041ac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004194:	4b84      	ldr	r3, [pc, #528]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d05b      	beq.n	8004258 <HAL_RCC_OscConfig+0x124>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d157      	bne.n	8004258 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e25a      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b4:	d106      	bne.n	80041c4 <HAL_RCC_OscConfig+0x90>
 80041b6:	4b7c      	ldr	r3, [pc, #496]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a7b      	ldr	r2, [pc, #492]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e01d      	b.n	8004200 <HAL_RCC_OscConfig+0xcc>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0xb4>
 80041ce:	4b76      	ldr	r3, [pc, #472]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a75      	ldr	r2, [pc, #468]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80041d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b73      	ldr	r3, [pc, #460]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a72      	ldr	r2, [pc, #456]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e00b      	b.n	8004200 <HAL_RCC_OscConfig+0xcc>
 80041e8:	4b6f      	ldr	r3, [pc, #444]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a6e      	ldr	r2, [pc, #440]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80041ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	4b6c      	ldr	r3, [pc, #432]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a6b      	ldr	r2, [pc, #428]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80041fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d013      	beq.n	8004230 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fe fd56 	bl	8002cb8 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004210:	f7fe fd52 	bl	8002cb8 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	@ 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e21f      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	4b61      	ldr	r3, [pc, #388]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0xdc>
 800422e:	e014      	b.n	800425a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fe fd42 	bl	8002cb8 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004238:	f7fe fd3e 	bl	8002cb8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	@ 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e20b      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	4b57      	ldr	r3, [pc, #348]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x104>
 8004256:	e000      	b.n	800425a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d06f      	beq.n	8004346 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004266:	4b50      	ldr	r3, [pc, #320]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b00      	cmp	r3, #0
 8004270:	d017      	beq.n	80042a2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004272:	4b4d      	ldr	r3, [pc, #308]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
        || \
 800427a:	2b08      	cmp	r3, #8
 800427c:	d105      	bne.n	800428a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800427e:	4b4a      	ldr	r3, [pc, #296]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b47      	ldr	r3, [pc, #284]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004292:	2b0c      	cmp	r3, #12
 8004294:	d11c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b44      	ldr	r3, [pc, #272]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d116      	bne.n	80042d0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_RCC_OscConfig+0x186>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e1d3      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ba:	4b3b      	ldr	r3, [pc, #236]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4937      	ldr	r1, [pc, #220]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ce:	e03a      	b.n	8004346 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d8:	4b34      	ldr	r3, [pc, #208]	@ (80043ac <HAL_RCC_OscConfig+0x278>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042de:	f7fe fceb 	bl	8002cb8 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e6:	f7fe fce7 	bl	8002cb8 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e1b4      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f8:	4b2b      	ldr	r3, [pc, #172]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004304:	4b28      	ldr	r3, [pc, #160]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4925      	ldr	r1, [pc, #148]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
 8004318:	e015      	b.n	8004346 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <HAL_RCC_OscConfig+0x278>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fe fcca 	bl	8002cb8 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004328:	f7fe fcc6 	bl	8002cb8 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e193      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433a:	4b1b      	ldr	r3, [pc, #108]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d036      	beq.n	80043c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800435a:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <HAL_RCC_OscConfig+0x27c>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fe fcaa 	bl	8002cb8 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004368:	f7fe fca6 	bl	8002cb8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e173      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437a:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <HAL_RCC_OscConfig+0x274>)
 800437c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x234>
 8004386:	e01b      	b.n	80043c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004388:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_RCC_OscConfig+0x27c>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438e:	f7fe fc93 	bl	8002cb8 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004394:	e00e      	b.n	80043b4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004396:	f7fe fc8f 	bl	8002cb8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d907      	bls.n	80043b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e15c      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
 80043a8:	40023800 	.word	0x40023800
 80043ac:	42470000 	.word	0x42470000
 80043b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b4:	4b8a      	ldr	r3, [pc, #552]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 80043b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ea      	bne.n	8004396 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8097 	beq.w	80044fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d2:	4b83      	ldr	r3, [pc, #524]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10f      	bne.n	80043fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	4b7f      	ldr	r3, [pc, #508]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	4a7e      	ldr	r2, [pc, #504]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ee:	4b7c      	ldr	r3, [pc, #496]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fe:	4b79      	ldr	r3, [pc, #484]	@ (80045e4 <HAL_RCC_OscConfig+0x4b0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d118      	bne.n	800443c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440a:	4b76      	ldr	r3, [pc, #472]	@ (80045e4 <HAL_RCC_OscConfig+0x4b0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a75      	ldr	r2, [pc, #468]	@ (80045e4 <HAL_RCC_OscConfig+0x4b0>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004416:	f7fe fc4f 	bl	8002cb8 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441e:	f7fe fc4b 	bl	8002cb8 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e118      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004430:	4b6c      	ldr	r3, [pc, #432]	@ (80045e4 <HAL_RCC_OscConfig+0x4b0>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x31e>
 8004444:	4b66      	ldr	r3, [pc, #408]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004448:	4a65      	ldr	r2, [pc, #404]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004450:	e01c      	b.n	800448c <HAL_RCC_OscConfig+0x358>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b05      	cmp	r3, #5
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x340>
 800445a:	4b61      	ldr	r3, [pc, #388]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445e:	4a60      	ldr	r2, [pc, #384]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	6713      	str	r3, [r2, #112]	@ 0x70
 8004466:	4b5e      	ldr	r3, [pc, #376]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	4a5d      	ldr	r2, [pc, #372]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6713      	str	r3, [r2, #112]	@ 0x70
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0x358>
 8004474:	4b5a      	ldr	r3, [pc, #360]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004478:	4a59      	ldr	r2, [pc, #356]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004480:	4b57      	ldr	r3, [pc, #348]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004484:	4a56      	ldr	r2, [pc, #344]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 8004486:	f023 0304 	bic.w	r3, r3, #4
 800448a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d015      	beq.n	80044c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fe fc10 	bl	8002cb8 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fe fc0c 	bl	8002cb8 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0d7      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b2:	4b4b      	ldr	r3, [pc, #300]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ee      	beq.n	800449c <HAL_RCC_OscConfig+0x368>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c0:	f7fe fbfa 	bl	8002cb8 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c6:	e00a      	b.n	80044de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c8:	f7fe fbf6 	bl	8002cb8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e0c1      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044de:	4b40      	ldr	r3, [pc, #256]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ee      	bne.n	80044c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d105      	bne.n	80044fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f0:	4b3b      	ldr	r3, [pc, #236]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	4a3a      	ldr	r2, [pc, #232]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 80044f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80ad 	beq.w	8004660 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004506:	4b36      	ldr	r3, [pc, #216]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b08      	cmp	r3, #8
 8004510:	d060      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d145      	bne.n	80045a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800451a:	4b33      	ldr	r3, [pc, #204]	@ (80045e8 <HAL_RCC_OscConfig+0x4b4>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fe fbca 	bl	8002cb8 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004528:	f7fe fbc6 	bl	8002cb8 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e093      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800453a:	4b29      	ldr	r3, [pc, #164]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	019b      	lsls	r3, r3, #6
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	3b01      	subs	r3, #1
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004570:	071b      	lsls	r3, r3, #28
 8004572:	491b      	ldr	r1, [pc, #108]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004578:	4b1b      	ldr	r3, [pc, #108]	@ (80045e8 <HAL_RCC_OscConfig+0x4b4>)
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fe fb9b 	bl	8002cb8 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004586:	f7fe fb97 	bl	8002cb8 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e064      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004598:	4b11      	ldr	r3, [pc, #68]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x452>
 80045a4:	e05c      	b.n	8004660 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a6:	4b10      	ldr	r3, [pc, #64]	@ (80045e8 <HAL_RCC_OscConfig+0x4b4>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fe fb84 	bl	8002cb8 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fe fb80 	bl	8002cb8 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e04d      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c6:	4b06      	ldr	r3, [pc, #24]	@ (80045e0 <HAL_RCC_OscConfig+0x4ac>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x480>
 80045d2:	e045      	b.n	8004660 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d107      	bne.n	80045ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e040      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40007000 	.word	0x40007000
 80045e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045ec:	4b1f      	ldr	r3, [pc, #124]	@ (800466c <HAL_RCC_OscConfig+0x538>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d030      	beq.n	800465c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d129      	bne.n	800465c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d122      	bne.n	800465c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004624:	4293      	cmp	r3, r2
 8004626:	d119      	bne.n	800465c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	3b01      	subs	r3, #1
 8004636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d10f      	bne.n	800465c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004648:	429a      	cmp	r2, r3
 800464a:	d107      	bne.n	800465c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d001      	beq.n	8004660 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800

08004670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e041      	b.n	8004706 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fd ff2e 	bl	80024f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f000 faea 	bl	8004c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d001      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e04e      	b.n	80047c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a23      	ldr	r2, [pc, #140]	@ (80047d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d022      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004752:	d01d      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1f      	ldr	r2, [pc, #124]	@ (80047d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d018      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1e      	ldr	r2, [pc, #120]	@ (80047dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d013      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1c      	ldr	r2, [pc, #112]	@ (80047e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00e      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1b      	ldr	r2, [pc, #108]	@ (80047e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a19      	ldr	r2, [pc, #100]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <HAL_TIM_Base_Start_IT+0x80>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a18      	ldr	r2, [pc, #96]	@ (80047ec <HAL_TIM_Base_Start_IT+0xdc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d111      	bne.n	80047b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d010      	beq.n	80047c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0201 	orr.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b2:	e007      	b.n	80047c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40010400 	.word	0x40010400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40001800 	.word	0x40001800

080047f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e097      	b.n	8004934 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d106      	bne.n	800481e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7fd fd35 	bl	8002288 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004834:	f023 0307 	bic.w	r3, r3, #7
 8004838:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f000 fa1f 	bl	8004c88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	4313      	orrs	r3, r2
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004890:	f023 030c 	bic.w	r3, r3, #12
 8004894:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800489c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	4313      	orrs	r3, r2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	011a      	lsls	r2, r3, #4
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	031b      	lsls	r3, r3, #12
 80048c0:	4313      	orrs	r3, r2
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	4313      	orrs	r3, r2
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800494c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004954:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800495c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004964:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d110      	bne.n	800498e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d102      	bne.n	8004978 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004972:	7b7b      	ldrb	r3, [r7, #13]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d001      	beq.n	800497c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e069      	b.n	8004a50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800498c:	e031      	b.n	80049f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b04      	cmp	r3, #4
 8004992:	d110      	bne.n	80049b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004994:	7bbb      	ldrb	r3, [r7, #14]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d102      	bne.n	80049a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800499a:	7b3b      	ldrb	r3, [r7, #12]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e055      	b.n	8004a50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049b4:	e01d      	b.n	80049f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d108      	bne.n	80049ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049bc:	7bbb      	ldrb	r3, [r7, #14]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049c2:	7b7b      	ldrb	r3, [r7, #13]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d102      	bne.n	80049ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049c8:	7b3b      	ldrb	r3, [r7, #12]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e03e      	b.n	8004a50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2202      	movs	r2, #2
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_TIM_Encoder_Start+0xc4>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d008      	beq.n	8004a10 <HAL_TIM_Encoder_Start+0xd4>
 80049fe:	e00f      	b.n	8004a20 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2201      	movs	r2, #1
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 f9e3 	bl	8004dd4 <TIM_CCxChannelCmd>
      break;
 8004a0e:	e016      	b.n	8004a3e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2201      	movs	r2, #1
 8004a16:	2104      	movs	r1, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 f9db 	bl	8004dd4 <TIM_CCxChannelCmd>
      break;
 8004a1e:	e00e      	b.n	8004a3e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2201      	movs	r2, #1
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f9d3 	bl	8004dd4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	2104      	movs	r1, #4
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f9cc 	bl	8004dd4 <TIM_CCxChannelCmd>
      break;
 8004a3c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0201 	orr.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d020      	beq.n	8004abc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01b      	beq.n	8004abc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0202 	mvn.w	r2, #2
 8004a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f8d2 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f8c4 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f8d5 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d020      	beq.n	8004b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01b      	beq.n	8004b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0204 	mvn.w	r2, #4
 8004ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8ac 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
 8004af4:	e005      	b.n	8004b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f89e 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f8af 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d020      	beq.n	8004b54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01b      	beq.n	8004b54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0208 	mvn.w	r2, #8
 8004b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f886 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f878 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f889 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d020      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01b      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0210 	mvn.w	r2, #16
 8004b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2208      	movs	r2, #8
 8004b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f860 	bl	8004c4c <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f852 	bl	8004c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f863 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0201 	mvn.w	r2, #1
 8004bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fd f95a 	bl	8001e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00c      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f9a2 	bl	8004f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00c      	beq.n	8004c0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d007      	beq.n	8004c0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f834 	bl	8004c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00c      	beq.n	8004c30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d007      	beq.n	8004c30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0220 	mvn.w	r2, #32
 8004c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f974 	bl	8004f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a43      	ldr	r2, [pc, #268]	@ (8004da8 <TIM_Base_SetConfig+0x120>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca6:	d00f      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a40      	ldr	r2, [pc, #256]	@ (8004dac <TIM_Base_SetConfig+0x124>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00b      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8004db0 <TIM_Base_SetConfig+0x128>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d007      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a3e      	ldr	r2, [pc, #248]	@ (8004db4 <TIM_Base_SetConfig+0x12c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8004db8 <TIM_Base_SetConfig+0x130>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d108      	bne.n	8004cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a32      	ldr	r2, [pc, #200]	@ (8004da8 <TIM_Base_SetConfig+0x120>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d02b      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce8:	d027      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2f      	ldr	r2, [pc, #188]	@ (8004dac <TIM_Base_SetConfig+0x124>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d023      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8004db0 <TIM_Base_SetConfig+0x128>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01f      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8004db4 <TIM_Base_SetConfig+0x12c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01b      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <TIM_Base_SetConfig+0x130>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d017      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004dbc <TIM_Base_SetConfig+0x134>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc0 <TIM_Base_SetConfig+0x138>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00f      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a29      	ldr	r2, [pc, #164]	@ (8004dc4 <TIM_Base_SetConfig+0x13c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00b      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a28      	ldr	r2, [pc, #160]	@ (8004dc8 <TIM_Base_SetConfig+0x140>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d007      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a27      	ldr	r2, [pc, #156]	@ (8004dcc <TIM_Base_SetConfig+0x144>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d003      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a26      	ldr	r2, [pc, #152]	@ (8004dd0 <TIM_Base_SetConfig+0x148>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d108      	bne.n	8004d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8004da8 <TIM_Base_SetConfig+0x120>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_Base_SetConfig+0xf2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a10      	ldr	r2, [pc, #64]	@ (8004db8 <TIM_Base_SetConfig+0x130>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d103      	bne.n	8004d82 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f043 0204 	orr.w	r2, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	601a      	str	r2, [r3, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40010400 	.word	0x40010400
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800
 8004dc8:	40001800 	.word	0x40001800
 8004dcc:	40001c00 	.word	0x40001c00
 8004dd0:	40002000 	.word	0x40002000

08004dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 031f 	and.w	r3, r3, #31
 8004de6:	2201      	movs	r2, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a1a      	ldr	r2, [r3, #32]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	43db      	mvns	r3, r3
 8004df6:	401a      	ands	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e05a      	b.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a21      	ldr	r2, [pc, #132]	@ (8004efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d022      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e84:	d01d      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004f00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d018      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1b      	ldr	r2, [pc, #108]	@ (8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a18      	ldr	r2, [pc, #96]	@ (8004f0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a17      	ldr	r2, [pc, #92]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a15      	ldr	r2, [pc, #84]	@ (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10c      	bne.n	8004edc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40010400 	.word	0x40010400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40001800 	.word	0x40001800

08004f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e042      	b.n	8004fd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fd fb0a 	bl	8002580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2224      	movs	r2, #36	@ 0x24
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fff5 	bl	8005f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695a      	ldr	r2, [r3, #20]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	@ 0x30
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	4613      	mov	r3, r2
 8004fec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d162      	bne.n	80050c0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <HAL_UART_Transmit_DMA+0x26>
 8005000:	88fb      	ldrh	r3, [r7, #6]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e05b      	b.n	80050c2 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	88fa      	ldrh	r2, [r7, #6]
 8005014:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	88fa      	ldrh	r2, [r7, #6]
 800501a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2221      	movs	r2, #33	@ 0x21
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502e:	4a27      	ldr	r2, [pc, #156]	@ (80050cc <HAL_UART_Transmit_DMA+0xec>)
 8005030:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005036:	4a26      	ldr	r2, [pc, #152]	@ (80050d0 <HAL_UART_Transmit_DMA+0xf0>)
 8005038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	4a25      	ldr	r2, [pc, #148]	@ (80050d4 <HAL_UART_Transmit_DMA+0xf4>)
 8005040:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005046:	2200      	movs	r2, #0
 8005048:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800504a:	f107 0308 	add.w	r3, r7, #8
 800504e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005056:	6819      	ldr	r1, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3304      	adds	r3, #4
 800505e:	461a      	mov	r2, r3
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	f7fd ffe9 	bl	8003038 <HAL_DMA_Start_IT>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2210      	movs	r2, #16
 8005070:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e021      	b.n	80050c2 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005086:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3314      	adds	r3, #20
 800508e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	617b      	str	r3, [r7, #20]
   return(result);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800509e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3314      	adds	r3, #20
 80050a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80050aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6a39      	ldr	r1, [r7, #32]
 80050ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3730      	adds	r7, #48	@ 0x30
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	080057f1 	.word	0x080057f1
 80050d0:	0800588b 	.word	0x0800588b
 80050d4:	08005a0f 	.word	0x08005a0f

080050d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b20      	cmp	r3, #32
 80050f0:	d112      	bne.n	8005118 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <HAL_UART_Receive_DMA+0x26>
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e00b      	b.n	800511a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	461a      	mov	r2, r3
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fcc8 	bl	8005aa4 <UART_Start_Receive_DMA>
 8005114:	4603      	mov	r3, r0
 8005116:	e000      	b.n	800511a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005118:	2302      	movs	r3, #2
  }
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b090      	sub	sp, #64	@ 0x40
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800512a:	2300      	movs	r3, #0
 800512c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005138:	2b80      	cmp	r3, #128	@ 0x80
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b21      	cmp	r3, #33	@ 0x21
 800514e:	d128      	bne.n	80051a2 <HAL_UART_DMAStop+0x80>
 8005150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d025      	beq.n	80051a2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3314      	adds	r3, #20
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	623b      	str	r3, [r7, #32]
   return(result);
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800516c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3314      	adds	r3, #20
 8005174:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005176:	633a      	str	r2, [r7, #48]	@ 0x30
 8005178:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800517c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e5      	bne.n	8005156 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518e:	2b00      	cmp	r3, #0
 8005190:	d004      	beq.n	800519c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005196:	4618      	mov	r0, r3
 8005198:	f7fd ffa6 	bl	80030e8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fd27 	bl	8005bf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	2b40      	cmp	r3, #64	@ 0x40
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b22      	cmp	r3, #34	@ 0x22
 80051c2:	d128      	bne.n	8005216 <HAL_UART_DMAStop+0xf4>
 80051c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d025      	beq.n	8005216 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3314      	adds	r3, #20
 80051d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3314      	adds	r3, #20
 80051e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051ea:	61fa      	str	r2, [r7, #28]
 80051ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	69b9      	ldr	r1, [r7, #24]
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	617b      	str	r3, [r7, #20]
   return(result);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e5      	bne.n	80051ca <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd ff6c 	bl	80030e8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fd15 	bl	8005c40 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3740      	adds	r7, #64	@ 0x40
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b0ba      	sub	sp, #232	@ 0xe8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005246:	2300      	movs	r3, #0
 8005248:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800524c:	2300      	movs	r3, #0
 800524e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800525e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <HAL_UART_IRQHandler+0x66>
 8005272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fdba 	bl	8005df8 <UART_Receive_IT>
      return;
 8005284:	e273      	b.n	800576e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80de 	beq.w	800544c <HAL_UART_IRQHandler+0x22c>
 8005290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005294:	f003 0301 	and.w	r3, r3, #1
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800529c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80d1 	beq.w	800544c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <HAL_UART_IRQHandler+0xae>
 80052b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c6:	f043 0201 	orr.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00b      	beq.n	80052f2 <HAL_UART_IRQHandler+0xd2>
 80052da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ea:	f043 0202 	orr.w	r2, r3, #2
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <HAL_UART_IRQHandler+0xf6>
 80052fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530e:	f043 0204 	orr.w	r2, r3, #4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d011      	beq.n	8005346 <HAL_UART_IRQHandler+0x126>
 8005322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	d105      	bne.n	800533a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800532e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d005      	beq.n	8005346 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533e:	f043 0208 	orr.w	r2, r3, #8
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 820a 	beq.w	8005764 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_UART_IRQHandler+0x14e>
 800535c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fd45 	bl	8005df8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005378:	2b40      	cmp	r3, #64	@ 0x40
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d103      	bne.n	800539a <HAL_UART_IRQHandler+0x17a>
 8005392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d04f      	beq.n	800543a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fc50 	bl	8005c40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053aa:	2b40      	cmp	r3, #64	@ 0x40
 80053ac:	d141      	bne.n	8005432 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3314      	adds	r3, #20
 80053b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3314      	adds	r3, #20
 80053d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053ea:	e841 2300 	strex	r3, r2, [r1]
 80053ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1d9      	bne.n	80053ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d013      	beq.n	800542a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005406:	4a8a      	ldr	r2, [pc, #552]	@ (8005630 <HAL_UART_IRQHandler+0x410>)
 8005408:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540e:	4618      	mov	r0, r3
 8005410:	f7fd feda 	bl	80031c8 <HAL_DMA_Abort_IT>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005424:	4610      	mov	r0, r2
 8005426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005428:	e00e      	b.n	8005448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f9ca 	bl	80057c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005430:	e00a      	b.n	8005448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f9c6 	bl	80057c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	e006      	b.n	8005448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f9c2 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005446:	e18d      	b.n	8005764 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005448:	bf00      	nop
    return;
 800544a:	e18b      	b.n	8005764 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005450:	2b01      	cmp	r3, #1
 8005452:	f040 8167 	bne.w	8005724 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 8160 	beq.w	8005724 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8159 	beq.w	8005724 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60bb      	str	r3, [r7, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005492:	2b40      	cmp	r3, #64	@ 0x40
 8005494:	f040 80ce 	bne.w	8005634 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80a9 	beq.w	8005600 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054b6:	429a      	cmp	r2, r3
 80054b8:	f080 80a2 	bcs.w	8005600 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ce:	f000 8088 	beq.w	80055e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054e0:	e853 3f00 	ldrex	r3, [r3]
 80054e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80054fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005502:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800550a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800550e:	e841 2300 	strex	r3, r2, [r1]
 8005512:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1d9      	bne.n	80054d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3314      	adds	r3, #20
 8005524:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800552e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3314      	adds	r3, #20
 800553e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005542:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005546:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800554a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005554:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e1      	bne.n	800551e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3314      	adds	r3, #20
 8005560:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800556a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800556c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3314      	adds	r3, #20
 800557a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800557e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005580:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005584:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800558c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e3      	bne.n	800555a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055aa:	e853 3f00 	ldrex	r3, [r3]
 80055ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055b2:	f023 0310 	bic.w	r3, r3, #16
 80055b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	330c      	adds	r3, #12
 80055c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e3      	bne.n	80055a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fd fd83 	bl	80030e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f8ed 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80055fe:	e0b3      	b.n	8005768 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005608:	429a      	cmp	r2, r3
 800560a:	f040 80ad 	bne.w	8005768 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005618:	f040 80a6 	bne.w	8005768 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005626:	4619      	mov	r1, r3
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f8d5 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
      return;
 800562e:	e09b      	b.n	8005768 <HAL_UART_IRQHandler+0x548>
 8005630:	08005d07 	.word	0x08005d07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800563c:	b29b      	uxth	r3, r3
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 808e 	beq.w	800576c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 8089 	beq.w	800576c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800566a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005670:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800567e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005680:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800568c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e3      	bne.n	800565a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3314      	adds	r3, #20
 8005698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	623b      	str	r3, [r7, #32]
   return(result);
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3314      	adds	r3, #20
 80056b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80056b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056be:	e841 2300 	strex	r3, r2, [r1]
 80056c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1e3      	bne.n	8005692 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	330c      	adds	r3, #12
 80056f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80056fc:	61fa      	str	r2, [r7, #28]
 80056fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	69b9      	ldr	r1, [r7, #24]
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	617b      	str	r3, [r7, #20]
   return(result);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e3      	bne.n	80056d8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005716:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f85b 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005722:	e023      	b.n	800576c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <HAL_UART_IRQHandler+0x524>
 8005730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 faf3 	bl	8005d28 <UART_Transmit_IT>
    return;
 8005742:	e014      	b.n	800576e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00e      	beq.n	800576e <HAL_UART_IRQHandler+0x54e>
 8005750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 fb33 	bl	8005dc8 <UART_EndTransmit_IT>
    return;
 8005762:	e004      	b.n	800576e <HAL_UART_IRQHandler+0x54e>
    return;
 8005764:	bf00      	nop
 8005766:	e002      	b.n	800576e <HAL_UART_IRQHandler+0x54e>
      return;
 8005768:	bf00      	nop
 800576a:	e000      	b.n	800576e <HAL_UART_IRQHandler+0x54e>
      return;
 800576c:	bf00      	nop
  }
}
 800576e:	37e8      	adds	r7, #232	@ 0xe8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b090      	sub	sp, #64	@ 0x40
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d137      	bne.n	800587c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800580c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580e:	2200      	movs	r2, #0
 8005810:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	623b      	str	r3, [r7, #32]
   return(result);
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005828:	63bb      	str	r3, [r7, #56]	@ 0x38
 800582a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3314      	adds	r3, #20
 8005830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005832:	633a      	str	r2, [r7, #48]	@ 0x30
 8005834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	330c      	adds	r3, #12
 800584c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	60fb      	str	r3, [r7, #12]
   return(result);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34
 800585e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	330c      	adds	r3, #12
 8005864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005866:	61fa      	str	r2, [r7, #28]
 8005868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	69b9      	ldr	r1, [r7, #24]
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	617b      	str	r3, [r7, #20]
   return(result);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800587a:	e002      	b.n	8005882 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800587c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800587e:	f7ff ff79 	bl	8005774 <HAL_UART_TxCpltCallback>
}
 8005882:	bf00      	nop
 8005884:	3740      	adds	r7, #64	@ 0x40
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005896:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7ff ff75 	bl	8005788 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b09c      	sub	sp, #112	@ 0x70
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d172      	bne.n	80059a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80058c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058c4:	2200      	movs	r2, #0
 80058c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	330c      	adds	r3, #12
 80058ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	330c      	adds	r3, #12
 80058e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80058e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e5      	bne.n	80058c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3314      	adds	r3, #20
 8005902:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005906:	e853 3f00 	ldrex	r3, [r3]
 800590a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800590c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	667b      	str	r3, [r7, #100]	@ 0x64
 8005914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3314      	adds	r3, #20
 800591a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800591c:	647a      	str	r2, [r7, #68]	@ 0x44
 800591e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005924:	e841 2300 	strex	r3, r2, [r1]
 8005928:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800592a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1e5      	bne.n	80058fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3314      	adds	r3, #20
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	623b      	str	r3, [r7, #32]
   return(result);
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005946:	663b      	str	r3, [r7, #96]	@ 0x60
 8005948:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3314      	adds	r3, #20
 800594e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005950:	633a      	str	r2, [r7, #48]	@ 0x30
 8005952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800595e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005966:	2220      	movs	r2, #32
 8005968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800596e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005970:	2b01      	cmp	r3, #1
 8005972:	d119      	bne.n	80059a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	330c      	adds	r3, #12
 800597a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	60fb      	str	r3, [r7, #12]
   return(result);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0310 	bic.w	r3, r3, #16
 800598a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800598c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005994:	61fa      	str	r2, [r7, #28]
 8005996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	69b9      	ldr	r1, [r7, #24]
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	617b      	str	r3, [r7, #20]
   return(result);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e5      	bne.n	8005974 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059aa:	2200      	movs	r2, #0
 80059ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d106      	bne.n	80059c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80059b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059ba:	4619      	mov	r1, r3
 80059bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80059be:	f7ff ff0b 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059c2:	e002      	b.n	80059ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80059c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80059c6:	f7ff fee9 	bl	800579c <HAL_UART_RxCpltCallback>
}
 80059ca:	bf00      	nop
 80059cc:	3770      	adds	r7, #112	@ 0x70
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d108      	bne.n	8005a00 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	4619      	mov	r1, r3
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff feed 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059fe:	e002      	b.n	8005a06 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f7ff fed5 	bl	80057b0 <HAL_UART_RxHalfCpltCallback>
}
 8005a06:	bf00      	nop
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a2a:	2b80      	cmp	r3, #128	@ 0x80
 8005a2c:	bf0c      	ite	eq
 8005a2e:	2301      	moveq	r3, #1
 8005a30:	2300      	movne	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b21      	cmp	r3, #33	@ 0x21
 8005a40:	d108      	bne.n	8005a54 <UART_DMAError+0x46>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005a4e:	68b8      	ldr	r0, [r7, #8]
 8005a50:	f000 f8ce 	bl	8005bf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b40      	cmp	r3, #64	@ 0x40
 8005a60:	bf0c      	ite	eq
 8005a62:	2301      	moveq	r3, #1
 8005a64:	2300      	movne	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b22      	cmp	r3, #34	@ 0x22
 8005a74:	d108      	bne.n	8005a88 <UART_DMAError+0x7a>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005a82:	68b8      	ldr	r0, [r7, #8]
 8005a84:	f000 f8dc 	bl	8005c40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8c:	f043 0210 	orr.w	r2, r3, #16
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a94:	68b8      	ldr	r0, [r7, #8]
 8005a96:	f7ff fe95 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b098      	sub	sp, #96	@ 0x60
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	88fa      	ldrh	r2, [r7, #6]
 8005abc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2222      	movs	r2, #34	@ 0x22
 8005ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad0:	4a44      	ldr	r2, [pc, #272]	@ (8005be4 <UART_Start_Receive_DMA+0x140>)
 8005ad2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad8:	4a43      	ldr	r2, [pc, #268]	@ (8005be8 <UART_Start_Receive_DMA+0x144>)
 8005ada:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae0:	4a42      	ldr	r2, [pc, #264]	@ (8005bec <UART_Start_Receive_DMA+0x148>)
 8005ae2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae8:	2200      	movs	r2, #0
 8005aea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005aec:	f107 0308 	add.w	r3, r7, #8
 8005af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3304      	adds	r3, #4
 8005afc:	4619      	mov	r1, r3
 8005afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	f7fd fa98 	bl	8003038 <HAL_DMA_Start_IT>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2210      	movs	r2, #16
 8005b12:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e05d      	b.n	8005bdc <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005b20:	2300      	movs	r3, #0
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d019      	beq.n	8005b72 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b5e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005b60:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005b64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e5      	bne.n	8005b3e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3314      	adds	r3, #20
 8005b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005b92:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005b94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005b98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b9a:	e841 2300 	strex	r3, r2, [r1]
 8005b9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1e5      	bne.n	8005b72 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3314      	adds	r3, #20
 8005bac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3314      	adds	r3, #20
 8005bc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bc6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	6a39      	ldr	r1, [r7, #32]
 8005bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bce:	e841 2300 	strex	r3, r2, [r1]
 8005bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1e5      	bne.n	8005ba6 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3760      	adds	r7, #96	@ 0x60
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	080058a7 	.word	0x080058a7
 8005be8:	080059d3 	.word	0x080059d3
 8005bec:	08005a0f 	.word	0x08005a0f

08005bf0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b089      	sub	sp, #36	@ 0x24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	61ba      	str	r2, [r7, #24]
 8005c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6979      	ldr	r1, [r7, #20]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	613b      	str	r3, [r7, #16]
   return(result);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e5      	bne.n	8005bf8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005c34:	bf00      	nop
 8005c36:	3724      	adds	r7, #36	@ 0x24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b095      	sub	sp, #84	@ 0x54
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	330c      	adds	r3, #12
 8005c66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c68:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e5      	bne.n	8005c48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3314      	adds	r3, #20
 8005c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f023 0301 	bic.w	r3, r3, #1
 8005c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3314      	adds	r3, #20
 8005c9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d119      	bne.n	8005cec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	330c      	adds	r3, #12
 8005cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f023 0310 	bic.w	r3, r3, #16
 8005cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cd8:	61ba      	str	r2, [r7, #24]
 8005cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6979      	ldr	r1, [r7, #20]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005cfa:	bf00      	nop
 8005cfc:	3754      	adds	r7, #84	@ 0x54
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b084      	sub	sp, #16
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff fd52 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d20:	bf00      	nop
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b21      	cmp	r3, #33	@ 0x21
 8005d3a:	d13e      	bne.n	8005dba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d44:	d114      	bne.n	8005d70 <UART_Transmit_IT+0x48>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d110      	bne.n	8005d70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	1c9a      	adds	r2, r3, #2
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	621a      	str	r2, [r3, #32]
 8005d6e:	e008      	b.n	8005d82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	1c59      	adds	r1, r3, #1
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6211      	str	r1, [r2, #32]
 8005d7a:	781a      	ldrb	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10f      	bne.n	8005db6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005da4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	e000      	b.n	8005dbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005dba:	2302      	movs	r3, #2
  }
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff fcc3 	bl	8005774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	@ 0x30
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005e04:	2300      	movs	r3, #0
 8005e06:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b22      	cmp	r3, #34	@ 0x22
 8005e12:	f040 80aa 	bne.w	8005f6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e1e:	d115      	bne.n	8005e4c <UART_Receive_IT+0x54>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d111      	bne.n	8005e4c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e44:	1c9a      	adds	r2, r3, #2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e4a:	e024      	b.n	8005e96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e5a:	d007      	beq.n	8005e6c <UART_Receive_IT+0x74>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <UART_Receive_IT+0x82>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	b2da      	uxtb	r2, r3
 8005e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	e008      	b.n	8005e8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d15d      	bne.n	8005f66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0220 	bic.w	r2, r2, #32
 8005eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68da      	ldr	r2, [r3, #12]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695a      	ldr	r2, [r3, #20]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d135      	bne.n	8005f5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	330c      	adds	r3, #12
 8005efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	613b      	str	r3, [r7, #16]
   return(result);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f023 0310 	bic.w	r3, r3, #16
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f16:	623a      	str	r2, [r7, #32]
 8005f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	69f9      	ldr	r1, [r7, #28]
 8005f1c:	6a3a      	ldr	r2, [r7, #32]
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e5      	bne.n	8005ef6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d10a      	bne.n	8005f4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff fc3f 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
 8005f5a:	e002      	b.n	8005f62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff fc1d 	bl	800579c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e002      	b.n	8005f6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e000      	b.n	8005f6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f6a:	2302      	movs	r3, #2
  }
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3730      	adds	r7, #48	@ 0x30
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f78:	b0c0      	sub	sp, #256	@ 0x100
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f90:	68d9      	ldr	r1, [r3, #12]
 8005f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	ea40 0301 	orr.w	r3, r0, r1
 8005f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fcc:	f021 010c 	bic.w	r1, r1, #12
 8005fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fee:	6999      	ldr	r1, [r3, #24]
 8005ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	ea40 0301 	orr.w	r3, r0, r1
 8005ffa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b8f      	ldr	r3, [pc, #572]	@ (8006240 <UART_SetConfig+0x2cc>)
 8006004:	429a      	cmp	r2, r3
 8006006:	d005      	beq.n	8006014 <UART_SetConfig+0xa0>
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b8d      	ldr	r3, [pc, #564]	@ (8006244 <UART_SetConfig+0x2d0>)
 8006010:	429a      	cmp	r2, r3
 8006012:	d104      	bne.n	800601e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fd fe18 	bl	8003c48 <HAL_RCC_GetPCLK2Freq>
 8006018:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800601c:	e003      	b.n	8006026 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800601e:	f7fd fdff 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8006022:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006030:	f040 810c 	bne.w	800624c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006038:	2200      	movs	r2, #0
 800603a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800603e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	1891      	adds	r1, r2, r2
 800604c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800604e:	415b      	adcs	r3, r3
 8006050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006056:	4621      	mov	r1, r4
 8006058:	eb12 0801 	adds.w	r8, r2, r1
 800605c:	4629      	mov	r1, r5
 800605e:	eb43 0901 	adc.w	r9, r3, r1
 8006062:	f04f 0200 	mov.w	r2, #0
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800606e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006076:	4690      	mov	r8, r2
 8006078:	4699      	mov	r9, r3
 800607a:	4623      	mov	r3, r4
 800607c:	eb18 0303 	adds.w	r3, r8, r3
 8006080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006084:	462b      	mov	r3, r5
 8006086:	eb49 0303 	adc.w	r3, r9, r3
 800608a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800609a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800609e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80060a2:	460b      	mov	r3, r1
 80060a4:	18db      	adds	r3, r3, r3
 80060a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80060a8:	4613      	mov	r3, r2
 80060aa:	eb42 0303 	adc.w	r3, r2, r3
 80060ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80060b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060b8:	f7fa fbf6 	bl	80008a8 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4b61      	ldr	r3, [pc, #388]	@ (8006248 <UART_SetConfig+0x2d4>)
 80060c2:	fba3 2302 	umull	r2, r3, r3, r2
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	011c      	lsls	r4, r3, #4
 80060ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	1891      	adds	r1, r2, r2
 80060e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060e4:	415b      	adcs	r3, r3
 80060e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060ec:	4641      	mov	r1, r8
 80060ee:	eb12 0a01 	adds.w	sl, r2, r1
 80060f2:	4649      	mov	r1, r9
 80060f4:	eb43 0b01 	adc.w	fp, r3, r1
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800610c:	4692      	mov	sl, r2
 800610e:	469b      	mov	fp, r3
 8006110:	4643      	mov	r3, r8
 8006112:	eb1a 0303 	adds.w	r3, sl, r3
 8006116:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800611a:	464b      	mov	r3, r9
 800611c:	eb4b 0303 	adc.w	r3, fp, r3
 8006120:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006130:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006134:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006138:	460b      	mov	r3, r1
 800613a:	18db      	adds	r3, r3, r3
 800613c:	643b      	str	r3, [r7, #64]	@ 0x40
 800613e:	4613      	mov	r3, r2
 8006140:	eb42 0303 	adc.w	r3, r2, r3
 8006144:	647b      	str	r3, [r7, #68]	@ 0x44
 8006146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800614a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800614e:	f7fa fbab 	bl	80008a8 <__aeabi_uldivmod>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4611      	mov	r1, r2
 8006158:	4b3b      	ldr	r3, [pc, #236]	@ (8006248 <UART_SetConfig+0x2d4>)
 800615a:	fba3 2301 	umull	r2, r3, r3, r1
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	2264      	movs	r2, #100	@ 0x64
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	1acb      	subs	r3, r1, r3
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800616e:	4b36      	ldr	r3, [pc, #216]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006170:	fba3 2302 	umull	r2, r3, r3, r2
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800617c:	441c      	add	r4, r3
 800617e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006182:	2200      	movs	r2, #0
 8006184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006188:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800618c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	1891      	adds	r1, r2, r2
 8006196:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006198:	415b      	adcs	r3, r3
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800619c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80061a0:	4641      	mov	r1, r8
 80061a2:	1851      	adds	r1, r2, r1
 80061a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80061a6:	4649      	mov	r1, r9
 80061a8:	414b      	adcs	r3, r1
 80061aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061b8:	4659      	mov	r1, fp
 80061ba:	00cb      	lsls	r3, r1, #3
 80061bc:	4651      	mov	r1, sl
 80061be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c2:	4651      	mov	r1, sl
 80061c4:	00ca      	lsls	r2, r1, #3
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	4642      	mov	r2, r8
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061d4:	464b      	mov	r3, r9
 80061d6:	460a      	mov	r2, r1
 80061d8:	eb42 0303 	adc.w	r3, r2, r3
 80061dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061f4:	460b      	mov	r3, r1
 80061f6:	18db      	adds	r3, r3, r3
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061fa:	4613      	mov	r3, r2
 80061fc:	eb42 0303 	adc.w	r3, r2, r3
 8006200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006206:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800620a:	f7fa fb4d 	bl	80008a8 <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4b0d      	ldr	r3, [pc, #52]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006214:	fba3 1302 	umull	r1, r3, r3, r2
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	2164      	movs	r1, #100	@ 0x64
 800621c:	fb01 f303 	mul.w	r3, r1, r3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	3332      	adds	r3, #50	@ 0x32
 8006226:	4a08      	ldr	r2, [pc, #32]	@ (8006248 <UART_SetConfig+0x2d4>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	f003 0207 	and.w	r2, r3, #7
 8006232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4422      	add	r2, r4
 800623a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800623c:	e106      	b.n	800644c <UART_SetConfig+0x4d8>
 800623e:	bf00      	nop
 8006240:	40011000 	.word	0x40011000
 8006244:	40011400 	.word	0x40011400
 8006248:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800624c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006250:	2200      	movs	r2, #0
 8006252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006256:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800625a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800625e:	4642      	mov	r2, r8
 8006260:	464b      	mov	r3, r9
 8006262:	1891      	adds	r1, r2, r2
 8006264:	6239      	str	r1, [r7, #32]
 8006266:	415b      	adcs	r3, r3
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24
 800626a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800626e:	4641      	mov	r1, r8
 8006270:	1854      	adds	r4, r2, r1
 8006272:	4649      	mov	r1, r9
 8006274:	eb43 0501 	adc.w	r5, r3, r1
 8006278:	f04f 0200 	mov.w	r2, #0
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	00eb      	lsls	r3, r5, #3
 8006282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006286:	00e2      	lsls	r2, r4, #3
 8006288:	4614      	mov	r4, r2
 800628a:	461d      	mov	r5, r3
 800628c:	4643      	mov	r3, r8
 800628e:	18e3      	adds	r3, r4, r3
 8006290:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006294:	464b      	mov	r3, r9
 8006296:	eb45 0303 	adc.w	r3, r5, r3
 800629a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80062aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062ba:	4629      	mov	r1, r5
 80062bc:	008b      	lsls	r3, r1, #2
 80062be:	4621      	mov	r1, r4
 80062c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c4:	4621      	mov	r1, r4
 80062c6:	008a      	lsls	r2, r1, #2
 80062c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062cc:	f7fa faec 	bl	80008a8 <__aeabi_uldivmod>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4b60      	ldr	r3, [pc, #384]	@ (8006458 <UART_SetConfig+0x4e4>)
 80062d6:	fba3 2302 	umull	r2, r3, r3, r2
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	011c      	lsls	r4, r3, #4
 80062de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062f0:	4642      	mov	r2, r8
 80062f2:	464b      	mov	r3, r9
 80062f4:	1891      	adds	r1, r2, r2
 80062f6:	61b9      	str	r1, [r7, #24]
 80062f8:	415b      	adcs	r3, r3
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006300:	4641      	mov	r1, r8
 8006302:	1851      	adds	r1, r2, r1
 8006304:	6139      	str	r1, [r7, #16]
 8006306:	4649      	mov	r1, r9
 8006308:	414b      	adcs	r3, r1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006318:	4659      	mov	r1, fp
 800631a:	00cb      	lsls	r3, r1, #3
 800631c:	4651      	mov	r1, sl
 800631e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006322:	4651      	mov	r1, sl
 8006324:	00ca      	lsls	r2, r1, #3
 8006326:	4610      	mov	r0, r2
 8006328:	4619      	mov	r1, r3
 800632a:	4603      	mov	r3, r0
 800632c:	4642      	mov	r2, r8
 800632e:	189b      	adds	r3, r3, r2
 8006330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006334:	464b      	mov	r3, r9
 8006336:	460a      	mov	r2, r1
 8006338:	eb42 0303 	adc.w	r3, r2, r3
 800633c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	67bb      	str	r3, [r7, #120]	@ 0x78
 800634a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006358:	4649      	mov	r1, r9
 800635a:	008b      	lsls	r3, r1, #2
 800635c:	4641      	mov	r1, r8
 800635e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006362:	4641      	mov	r1, r8
 8006364:	008a      	lsls	r2, r1, #2
 8006366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800636a:	f7fa fa9d 	bl	80008a8 <__aeabi_uldivmod>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4611      	mov	r1, r2
 8006374:	4b38      	ldr	r3, [pc, #224]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006376:	fba3 2301 	umull	r2, r3, r3, r1
 800637a:	095b      	lsrs	r3, r3, #5
 800637c:	2264      	movs	r2, #100	@ 0x64
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	1acb      	subs	r3, r1, r3
 8006384:	011b      	lsls	r3, r3, #4
 8006386:	3332      	adds	r3, #50	@ 0x32
 8006388:	4a33      	ldr	r2, [pc, #204]	@ (8006458 <UART_SetConfig+0x4e4>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	095b      	lsrs	r3, r3, #5
 8006390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006394:	441c      	add	r4, r3
 8006396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800639a:	2200      	movs	r2, #0
 800639c:	673b      	str	r3, [r7, #112]	@ 0x70
 800639e:	677a      	str	r2, [r7, #116]	@ 0x74
 80063a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	1891      	adds	r1, r2, r2
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	415b      	adcs	r3, r3
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063b4:	4641      	mov	r1, r8
 80063b6:	1851      	adds	r1, r2, r1
 80063b8:	6039      	str	r1, [r7, #0]
 80063ba:	4649      	mov	r1, r9
 80063bc:	414b      	adcs	r3, r1
 80063be:	607b      	str	r3, [r7, #4]
 80063c0:	f04f 0200 	mov.w	r2, #0
 80063c4:	f04f 0300 	mov.w	r3, #0
 80063c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063cc:	4659      	mov	r1, fp
 80063ce:	00cb      	lsls	r3, r1, #3
 80063d0:	4651      	mov	r1, sl
 80063d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063d6:	4651      	mov	r1, sl
 80063d8:	00ca      	lsls	r2, r1, #3
 80063da:	4610      	mov	r0, r2
 80063dc:	4619      	mov	r1, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	4642      	mov	r2, r8
 80063e2:	189b      	adds	r3, r3, r2
 80063e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063e6:	464b      	mov	r3, r9
 80063e8:	460a      	mov	r2, r1
 80063ea:	eb42 0303 	adc.w	r3, r2, r3
 80063ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80063fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006408:	4649      	mov	r1, r9
 800640a:	008b      	lsls	r3, r1, #2
 800640c:	4641      	mov	r1, r8
 800640e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006412:	4641      	mov	r1, r8
 8006414:	008a      	lsls	r2, r1, #2
 8006416:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800641a:	f7fa fa45 	bl	80008a8 <__aeabi_uldivmod>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4b0d      	ldr	r3, [pc, #52]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006424:	fba3 1302 	umull	r1, r3, r3, r2
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	2164      	movs	r1, #100	@ 0x64
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	011b      	lsls	r3, r3, #4
 8006434:	3332      	adds	r3, #50	@ 0x32
 8006436:	4a08      	ldr	r2, [pc, #32]	@ (8006458 <UART_SetConfig+0x4e4>)
 8006438:	fba2 2303 	umull	r2, r3, r2, r3
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	f003 020f 	and.w	r2, r3, #15
 8006442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4422      	add	r2, r4
 800644a:	609a      	str	r2, [r3, #8]
}
 800644c:	bf00      	nop
 800644e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006452:	46bd      	mov	sp, r7
 8006454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006458:	51eb851f 	.word	0x51eb851f

0800645c <__NVIC_SetPriority>:
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	4603      	mov	r3, r0
 8006464:	6039      	str	r1, [r7, #0]
 8006466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800646c:	2b00      	cmp	r3, #0
 800646e:	db0a      	blt.n	8006486 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	b2da      	uxtb	r2, r3
 8006474:	490c      	ldr	r1, [pc, #48]	@ (80064a8 <__NVIC_SetPriority+0x4c>)
 8006476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800647a:	0112      	lsls	r2, r2, #4
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	440b      	add	r3, r1
 8006480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006484:	e00a      	b.n	800649c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	b2da      	uxtb	r2, r3
 800648a:	4908      	ldr	r1, [pc, #32]	@ (80064ac <__NVIC_SetPriority+0x50>)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	3b04      	subs	r3, #4
 8006494:	0112      	lsls	r2, r2, #4
 8006496:	b2d2      	uxtb	r2, r2
 8006498:	440b      	add	r3, r1
 800649a:	761a      	strb	r2, [r3, #24]
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	e000e100 	.word	0xe000e100
 80064ac:	e000ed00 	.word	0xe000ed00

080064b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80064b4:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <SysTick_Handler+0x1c>)
 80064b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80064b8:	f001 fd40 	bl	8007f3c <xTaskGetSchedulerState>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d001      	beq.n	80064c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80064c2:	f002 fb39 	bl	8008b38 <xPortSysTickHandler>
  }
}
 80064c6:	bf00      	nop
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	e000e010 	.word	0xe000e010

080064d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80064d4:	2100      	movs	r1, #0
 80064d6:	f06f 0004 	mvn.w	r0, #4
 80064da:	f7ff ffbf 	bl	800645c <__NVIC_SetPriority>
#endif
}
 80064de:	bf00      	nop
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ea:	f3ef 8305 	mrs	r3, IPSR
 80064ee:	603b      	str	r3, [r7, #0]
  return(result);
 80064f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80064f6:	f06f 0305 	mvn.w	r3, #5
 80064fa:	607b      	str	r3, [r7, #4]
 80064fc:	e00c      	b.n	8006518 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006528 <osKernelInitialize+0x44>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006506:	4b08      	ldr	r3, [pc, #32]	@ (8006528 <osKernelInitialize+0x44>)
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800650c:	2300      	movs	r3, #0
 800650e:	607b      	str	r3, [r7, #4]
 8006510:	e002      	b.n	8006518 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006512:	f04f 33ff 	mov.w	r3, #4294967295
 8006516:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006518:	687b      	ldr	r3, [r7, #4]
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20006da4 	.word	0x20006da4

0800652c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006532:	f3ef 8305 	mrs	r3, IPSR
 8006536:	603b      	str	r3, [r7, #0]
  return(result);
 8006538:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <osKernelStart+0x1a>
    stat = osErrorISR;
 800653e:	f06f 0305 	mvn.w	r3, #5
 8006542:	607b      	str	r3, [r7, #4]
 8006544:	e010      	b.n	8006568 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006546:	4b0b      	ldr	r3, [pc, #44]	@ (8006574 <osKernelStart+0x48>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d109      	bne.n	8006562 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800654e:	f7ff ffbf 	bl	80064d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006552:	4b08      	ldr	r3, [pc, #32]	@ (8006574 <osKernelStart+0x48>)
 8006554:	2202      	movs	r2, #2
 8006556:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006558:	f001 f87a 	bl	8007650 <vTaskStartScheduler>
      stat = osOK;
 800655c:	2300      	movs	r3, #0
 800655e:	607b      	str	r3, [r7, #4]
 8006560:	e002      	b.n	8006568 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006562:	f04f 33ff 	mov.w	r3, #4294967295
 8006566:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006568:	687b      	ldr	r3, [r7, #4]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20006da4 	.word	0x20006da4

08006578 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	@ 0x38
 800657c:	af04      	add	r7, sp, #16
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006588:	f3ef 8305 	mrs	r3, IPSR
 800658c:	617b      	str	r3, [r7, #20]
  return(result);
 800658e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006590:	2b00      	cmp	r3, #0
 8006592:	d17e      	bne.n	8006692 <osThreadNew+0x11a>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d07b      	beq.n	8006692 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800659a:	2380      	movs	r3, #128	@ 0x80
 800659c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800659e:	2318      	movs	r3, #24
 80065a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295
 80065aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d045      	beq.n	800663e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <osThreadNew+0x48>
        name = attr->name;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d002      	beq.n	80065ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d008      	beq.n	80065e6 <osThreadNew+0x6e>
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b38      	cmp	r3, #56	@ 0x38
 80065d8:	d805      	bhi.n	80065e6 <osThreadNew+0x6e>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <osThreadNew+0x72>
        return (NULL);
 80065e6:	2300      	movs	r3, #0
 80065e8:	e054      	b.n	8006694 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	089b      	lsrs	r3, r3, #2
 80065f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00e      	beq.n	8006620 <osThreadNew+0xa8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2b5b      	cmp	r3, #91	@ 0x5b
 8006608:	d90a      	bls.n	8006620 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800660e:	2b00      	cmp	r3, #0
 8006610:	d006      	beq.n	8006620 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <osThreadNew+0xa8>
        mem = 1;
 800661a:	2301      	movs	r3, #1
 800661c:	61bb      	str	r3, [r7, #24]
 800661e:	e010      	b.n	8006642 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10c      	bne.n	8006642 <osThreadNew+0xca>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d108      	bne.n	8006642 <osThreadNew+0xca>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <osThreadNew+0xca>
          mem = 0;
 8006638:	2300      	movs	r3, #0
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	e001      	b.n	8006642 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d110      	bne.n	800666a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006650:	9202      	str	r2, [sp, #8]
 8006652:	9301      	str	r3, [sp, #4]
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6a3a      	ldr	r2, [r7, #32]
 800665c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 fe1a 	bl	8007298 <xTaskCreateStatic>
 8006664:	4603      	mov	r3, r0
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	e013      	b.n	8006692 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d110      	bne.n	8006692 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	b29a      	uxth	r2, r3
 8006674:	f107 0310 	add.w	r3, r7, #16
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fe68 	bl	8007358 <xTaskCreate>
 8006688:	4603      	mov	r3, r0
 800668a:	2b01      	cmp	r3, #1
 800668c:	d001      	beq.n	8006692 <osThreadNew+0x11a>
            hTask = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006692:	693b      	ldr	r3, [r7, #16]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3728      	adds	r7, #40	@ 0x28
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066a4:	f3ef 8305 	mrs	r3, IPSR
 80066a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80066aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <osDelay+0x1c>
    stat = osErrorISR;
 80066b0:	f06f 0305 	mvn.w	r3, #5
 80066b4:	60fb      	str	r3, [r7, #12]
 80066b6:	e007      	b.n	80066c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 ff8e 	bl	80075e4 <vTaskDelay>
    }
  }

  return (stat);
 80066c8:	68fb      	ldr	r3, [r7, #12]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4a07      	ldr	r2, [pc, #28]	@ (8006700 <vApplicationGetIdleTaskMemory+0x2c>)
 80066e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	4a06      	ldr	r2, [pc, #24]	@ (8006704 <vApplicationGetIdleTaskMemory+0x30>)
 80066ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2280      	movs	r2, #128	@ 0x80
 80066f0:	601a      	str	r2, [r3, #0]
}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20006da8 	.word	0x20006da8
 8006704:	20006e04 	.word	0x20006e04

08006708 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4a07      	ldr	r2, [pc, #28]	@ (8006734 <vApplicationGetTimerTaskMemory+0x2c>)
 8006718:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4a06      	ldr	r2, [pc, #24]	@ (8006738 <vApplicationGetTimerTaskMemory+0x30>)
 800671e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006726:	601a      	str	r2, [r3, #0]
}
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	20007004 	.word	0x20007004
 8006738:	20007060 	.word	0x20007060

0800673c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f103 0208 	add.w	r2, r3, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f04f 32ff 	mov.w	r2, #4294967295
 8006754:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f103 0208 	add.w	r2, r3, #8
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f103 0208 	add.w	r2, r3, #8
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	601a      	str	r2, [r3, #0]
}
 80067d2:	bf00      	nop
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067de:	b480      	push	{r7}
 80067e0:	b085      	sub	sp, #20
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d103      	bne.n	80067fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	e00c      	b.n	8006818 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3308      	adds	r3, #8
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e002      	b.n	800680c <vListInsert+0x2e>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	429a      	cmp	r2, r3
 8006816:	d2f6      	bcs.n	8006806 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	1c5a      	adds	r2, r3, #1
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	601a      	str	r2, [r3, #0]
}
 8006844:	bf00      	nop
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6892      	ldr	r2, [r2, #8]
 8006866:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6852      	ldr	r2, [r2, #4]
 8006870:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	429a      	cmp	r2, r3
 800687a:	d103      	bne.n	8006884 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	1e5a      	subs	r2, r3, #1
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <xQueueGenericReset+0x2c>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	60bb      	str	r3, [r7, #8]
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	e7fd      	b.n	80068cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068d0:	f002 f8a2 	bl	8008a18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068dc:	68f9      	ldr	r1, [r7, #12]
 80068de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80068e0:	fb01 f303 	mul.w	r3, r1, r3
 80068e4:	441a      	add	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006900:	3b01      	subs	r3, #1
 8006902:	68f9      	ldr	r1, [r7, #12]
 8006904:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	441a      	add	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	22ff      	movs	r2, #255	@ 0xff
 8006914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	22ff      	movs	r2, #255	@ 0xff
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d114      	bne.n	8006950 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01a      	beq.n	8006964 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	3310      	adds	r3, #16
 8006932:	4618      	mov	r0, r3
 8006934:	f001 f91a 	bl	8007b6c <xTaskRemoveFromEventList>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d012      	beq.n	8006964 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800693e:	4b0d      	ldr	r3, [pc, #52]	@ (8006974 <xQueueGenericReset+0xd0>)
 8006940:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	e009      	b.n	8006964 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3310      	adds	r3, #16
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff fef1 	bl	800673c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3324      	adds	r3, #36	@ 0x24
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff feec 	bl	800673c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006964:	f002 f88a 	bl	8008a7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006968:	2301      	movs	r3, #1
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	e000ed04 	.word	0xe000ed04

08006978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08e      	sub	sp, #56	@ 0x38
 800697c:	af02      	add	r7, sp, #8
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10b      	bne.n	80069a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <xQueueGenericCreateStatic+0x56>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <xQueueGenericCreateStatic+0x5a>
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <xQueueGenericCreateStatic+0x5c>
 80069d2:	2300      	movs	r3, #0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10b      	bne.n	80069f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	623b      	str	r3, [r7, #32]
}
 80069ea:	bf00      	nop
 80069ec:	bf00      	nop
 80069ee:	e7fd      	b.n	80069ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <xQueueGenericCreateStatic+0x84>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <xQueueGenericCreateStatic+0x88>
 80069fc:	2301      	movs	r3, #1
 80069fe:	e000      	b.n	8006a02 <xQueueGenericCreateStatic+0x8a>
 8006a00:	2300      	movs	r3, #0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10b      	bne.n	8006a1e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	61fb      	str	r3, [r7, #28]
}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	e7fd      	b.n	8006a1a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a1e:	2350      	movs	r3, #80	@ 0x50
 8006a20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b50      	cmp	r3, #80	@ 0x50
 8006a26:	d00b      	beq.n	8006a40 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	61bb      	str	r3, [r7, #24]
}
 8006a3a:	bf00      	nop
 8006a3c:	bf00      	nop
 8006a3e:	e7fd      	b.n	8006a3c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a40:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00d      	beq.n	8006a68 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a54:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f805 	bl	8006a72 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3730      	adds	r7, #48	@ 0x30
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	e002      	b.n	8006a94 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	69b8      	ldr	r0, [r7, #24]
 8006aa4:	f7ff fefe 	bl	80068a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	78fa      	ldrb	r2, [r7, #3]
 8006aac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ab0:	bf00      	nop
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08e      	sub	sp, #56	@ 0x38
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10b      	bne.n	8006aec <xQueueGenericSend+0x34>
	__asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	e7fd      	b.n	8006ae8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <xQueueGenericSend+0x42>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <xQueueGenericSend+0x46>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <xQueueGenericSend+0x48>
 8006afe:	2300      	movs	r3, #0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10b      	bne.n	8006b1c <xQueueGenericSend+0x64>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	e7fd      	b.n	8006b18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d103      	bne.n	8006b2a <xQueueGenericSend+0x72>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d101      	bne.n	8006b2e <xQueueGenericSend+0x76>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <xQueueGenericSend+0x78>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10b      	bne.n	8006b4c <xQueueGenericSend+0x94>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	623b      	str	r3, [r7, #32]
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	e7fd      	b.n	8006b48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b4c:	f001 f9f6 	bl	8007f3c <xTaskGetSchedulerState>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <xQueueGenericSend+0xa4>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <xQueueGenericSend+0xa8>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e000      	b.n	8006b62 <xQueueGenericSend+0xaa>
 8006b60:	2300      	movs	r3, #0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10b      	bne.n	8006b7e <xQueueGenericSend+0xc6>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	61fb      	str	r3, [r7, #28]
}
 8006b78:	bf00      	nop
 8006b7a:	bf00      	nop
 8006b7c:	e7fd      	b.n	8006b7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b7e:	f001 ff4b 	bl	8008a18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d302      	bcc.n	8006b94 <xQueueGenericSend+0xdc>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d129      	bne.n	8006be8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	68b9      	ldr	r1, [r7, #8]
 8006b98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b9a:	f000 fa0f 	bl	8006fbc <prvCopyDataToQueue>
 8006b9e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d010      	beq.n	8006bca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	3324      	adds	r3, #36	@ 0x24
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 ffdd 	bl	8007b6c <xTaskRemoveFromEventList>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bb8:	4b3f      	ldr	r3, [pc, #252]	@ (8006cb8 <xQueueGenericSend+0x200>)
 8006bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	e00a      	b.n	8006be0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d007      	beq.n	8006be0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bd0:	4b39      	ldr	r3, [pc, #228]	@ (8006cb8 <xQueueGenericSend+0x200>)
 8006bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006be0:	f001 ff4c 	bl	8008a7c <vPortExitCritical>
				return pdPASS;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e063      	b.n	8006cb0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d103      	bne.n	8006bf6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bee:	f001 ff45 	bl	8008a7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	e05c      	b.n	8006cb0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d106      	bne.n	8006c0a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bfc:	f107 0314 	add.w	r3, r7, #20
 8006c00:	4618      	mov	r0, r3
 8006c02:	f001 f83f 	bl	8007c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c06:	2301      	movs	r3, #1
 8006c08:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c0a:	f001 ff37 	bl	8008a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c0e:	f000 fd87 	bl	8007720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c12:	f001 ff01 	bl	8008a18 <vPortEnterCritical>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c1c:	b25b      	sxtb	r3, r3
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d103      	bne.n	8006c2c <xQueueGenericSend+0x174>
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c32:	b25b      	sxtb	r3, r3
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d103      	bne.n	8006c42 <xQueueGenericSend+0x18a>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c42:	f001 ff1b 	bl	8008a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c46:	1d3a      	adds	r2, r7, #4
 8006c48:	f107 0314 	add.w	r3, r7, #20
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f82e 	bl	8007cb0 <xTaskCheckForTimeOut>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d124      	bne.n	8006ca4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c5c:	f000 faa6 	bl	80071ac <prvIsQueueFull>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d018      	beq.n	8006c98 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	3310      	adds	r3, #16
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 ff2a 	bl	8007ac8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c76:	f000 fa31 	bl	80070dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c7a:	f000 fd5f 	bl	800773c <xTaskResumeAll>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f47f af7c 	bne.w	8006b7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006c86:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb8 <xQueueGenericSend+0x200>)
 8006c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	e772      	b.n	8006b7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c9a:	f000 fa1f 	bl	80070dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c9e:	f000 fd4d 	bl	800773c <xTaskResumeAll>
 8006ca2:	e76c      	b.n	8006b7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ca4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ca6:	f000 fa19 	bl	80070dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006caa:	f000 fd47 	bl	800773c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3738      	adds	r7, #56	@ 0x38
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b090      	sub	sp, #64	@ 0x40
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10b      	bne.n	8006cec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ce6:	bf00      	nop
 8006ce8:	bf00      	nop
 8006cea:	e7fd      	b.n	8006ce8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d103      	bne.n	8006cfa <xQueueGenericSendFromISR+0x3e>
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <xQueueGenericSendFromISR+0x42>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <xQueueGenericSendFromISR+0x44>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10b      	bne.n	8006d1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d103      	bne.n	8006d2a <xQueueGenericSendFromISR+0x6e>
 8006d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <xQueueGenericSendFromISR+0x72>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <xQueueGenericSendFromISR+0x74>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	623b      	str	r3, [r7, #32]
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	e7fd      	b.n	8006d48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d4c:	f001 ff44 	bl	8008bd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d50:	f3ef 8211 	mrs	r2, BASEPRI
 8006d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	61fa      	str	r2, [r7, #28]
 8006d66:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d6a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d302      	bcc.n	8006d7e <xQueueGenericSendFromISR+0xc2>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d12f      	bne.n	8006dde <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d94:	f000 f912 	bl	8006fbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da0:	d112      	bne.n	8006dc8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d016      	beq.n	8006dd8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dac:	3324      	adds	r3, #36	@ 0x24
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fedc 	bl	8007b6c <xTaskRemoveFromEventList>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00e      	beq.n	8006dd8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00b      	beq.n	8006dd8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	e007      	b.n	8006dd8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006dcc:	3301      	adds	r3, #1
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	b25a      	sxtb	r2, r3
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006ddc:	e001      	b.n	8006de2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006de4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006dec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3740      	adds	r7, #64	@ 0x40
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08c      	sub	sp, #48	@ 0x30
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e04:	2300      	movs	r3, #0
 8006e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10b      	bne.n	8006e2a <xQueueReceive+0x32>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	623b      	str	r3, [r7, #32]
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	e7fd      	b.n	8006e26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d103      	bne.n	8006e38 <xQueueReceive+0x40>
 8006e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <xQueueReceive+0x44>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e000      	b.n	8006e3e <xQueueReceive+0x46>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10b      	bne.n	8006e5a <xQueueReceive+0x62>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	61fb      	str	r3, [r7, #28]
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	e7fd      	b.n	8006e56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e5a:	f001 f86f 	bl	8007f3c <xTaskGetSchedulerState>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <xQueueReceive+0x72>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <xQueueReceive+0x76>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <xQueueReceive+0x78>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <xQueueReceive+0x94>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	61bb      	str	r3, [r7, #24]
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e8c:	f001 fdc4 	bl	8008a18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01f      	beq.n	8006edc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ea0:	f000 f8f6 	bl	8007090 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	1e5a      	subs	r2, r3, #1
 8006ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eaa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00f      	beq.n	8006ed4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb6:	3310      	adds	r3, #16
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fe57 	bl	8007b6c <xTaskRemoveFromEventList>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8006fb8 <xQueueReceive+0x1c0>)
 8006ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ed4:	f001 fdd2 	bl	8008a7c <vPortExitCritical>
				return pdPASS;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e069      	b.n	8006fb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d103      	bne.n	8006eea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ee2:	f001 fdcb 	bl	8008a7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e062      	b.n	8006fb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d106      	bne.n	8006efe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ef0:	f107 0310 	add.w	r3, r7, #16
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 fec5 	bl	8007c84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006efa:	2301      	movs	r3, #1
 8006efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006efe:	f001 fdbd 	bl	8008a7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f02:	f000 fc0d 	bl	8007720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f06:	f001 fd87 	bl	8008a18 <vPortEnterCritical>
 8006f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f10:	b25b      	sxtb	r3, r3
 8006f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f16:	d103      	bne.n	8006f20 <xQueueReceive+0x128>
 8006f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f26:	b25b      	sxtb	r3, r3
 8006f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2c:	d103      	bne.n	8006f36 <xQueueReceive+0x13e>
 8006f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f36:	f001 fda1 	bl	8008a7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f3a:	1d3a      	adds	r2, r7, #4
 8006f3c:	f107 0310 	add.w	r3, r7, #16
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 feb4 	bl	8007cb0 <xTaskCheckForTimeOut>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d123      	bne.n	8006f96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f50:	f000 f916 	bl	8007180 <prvIsQueueEmpty>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d017      	beq.n	8006f8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	3324      	adds	r3, #36	@ 0x24
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	4611      	mov	r1, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fdb0 	bl	8007ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f6a:	f000 f8b7 	bl	80070dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f6e:	f000 fbe5 	bl	800773c <xTaskResumeAll>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d189      	bne.n	8006e8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006f78:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb8 <xQueueReceive+0x1c0>)
 8006f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	e780      	b.n	8006e8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f8c:	f000 f8a6 	bl	80070dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f90:	f000 fbd4 	bl	800773c <xTaskResumeAll>
 8006f94:	e77a      	b.n	8006e8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f98:	f000 f8a0 	bl	80070dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f9c:	f000 fbce 	bl	800773c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006fa2:	f000 f8ed 	bl	8007180 <prvIsQueueEmpty>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f43f af6f 	beq.w	8006e8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3730      	adds	r7, #48	@ 0x30
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	e000ed04 	.word	0xe000ed04

08006fbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10d      	bne.n	8006ff6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d14d      	bne.n	800707e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 ffc6 	bl	8007f78 <xTaskPriorityDisinherit>
 8006fec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	609a      	str	r2, [r3, #8]
 8006ff4:	e043      	b.n	800707e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d119      	bne.n	8007030 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6858      	ldr	r0, [r3, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007004:	461a      	mov	r2, r3
 8007006:	68b9      	ldr	r1, [r7, #8]
 8007008:	f011 fa5f 	bl	80184ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007014:	441a      	add	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	429a      	cmp	r2, r3
 8007024:	d32b      	bcc.n	800707e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	e026      	b.n	800707e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68d8      	ldr	r0, [r3, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007038:	461a      	mov	r2, r3
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	f011 fa45 	bl	80184ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	68da      	ldr	r2, [r3, #12]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007048:	425b      	negs	r3, r3
 800704a:	441a      	add	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	68da      	ldr	r2, [r3, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d207      	bcs.n	800706c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007064:	425b      	negs	r3, r3
 8007066:	441a      	add	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d105      	bne.n	800707e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	3b01      	subs	r3, #1
 800707c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007086:	697b      	ldr	r3, [r7, #20]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d018      	beq.n	80070d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	441a      	add	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d303      	bcc.n	80070c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68d9      	ldr	r1, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070cc:	461a      	mov	r2, r3
 80070ce:	6838      	ldr	r0, [r7, #0]
 80070d0:	f011 f9fb 	bl	80184ca <memcpy>
	}
}
 80070d4:	bf00      	nop
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070e4:	f001 fc98 	bl	8008a18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070f0:	e011      	b.n	8007116 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d012      	beq.n	8007120 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3324      	adds	r3, #36	@ 0x24
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 fd34 	bl	8007b6c <xTaskRemoveFromEventList>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800710a:	f000 fe35 	bl	8007d78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	3b01      	subs	r3, #1
 8007112:	b2db      	uxtb	r3, r3
 8007114:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	dce9      	bgt.n	80070f2 <prvUnlockQueue+0x16>
 800711e:	e000      	b.n	8007122 <prvUnlockQueue+0x46>
					break;
 8007120:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	22ff      	movs	r2, #255	@ 0xff
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800712a:	f001 fca7 	bl	8008a7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800712e:	f001 fc73 	bl	8008a18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007138:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800713a:	e011      	b.n	8007160 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d012      	beq.n	800716a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3310      	adds	r3, #16
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fd0f 	bl	8007b6c <xTaskRemoveFromEventList>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007154:	f000 fe10 	bl	8007d78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	3b01      	subs	r3, #1
 800715c:	b2db      	uxtb	r3, r3
 800715e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007160:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dce9      	bgt.n	800713c <prvUnlockQueue+0x60>
 8007168:	e000      	b.n	800716c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800716a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	22ff      	movs	r2, #255	@ 0xff
 8007170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007174:	f001 fc82 	bl	8008a7c <vPortExitCritical>
}
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007188:	f001 fc46 	bl	8008a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d102      	bne.n	800719a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007194:	2301      	movs	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	e001      	b.n	800719e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800719a:	2300      	movs	r3, #0
 800719c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800719e:	f001 fc6d 	bl	8008a7c <vPortExitCritical>

	return xReturn;
 80071a2:	68fb      	ldr	r3, [r7, #12]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071b4:	f001 fc30 	bl	8008a18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d102      	bne.n	80071ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e001      	b.n	80071ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ce:	f001 fc55 	bl	8008a7c <vPortExitCritical>

	return xReturn;
 80071d2:	68fb      	ldr	r3, [r7, #12]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071e6:	2300      	movs	r3, #0
 80071e8:	60fb      	str	r3, [r7, #12]
 80071ea:	e014      	b.n	8007216 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071ec:	4a0f      	ldr	r2, [pc, #60]	@ (800722c <vQueueAddToRegistry+0x50>)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10b      	bne.n	8007210 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071f8:	490c      	ldr	r1, [pc, #48]	@ (800722c <vQueueAddToRegistry+0x50>)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007202:	4a0a      	ldr	r2, [pc, #40]	@ (800722c <vQueueAddToRegistry+0x50>)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	4413      	add	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800720e:	e006      	b.n	800721e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b07      	cmp	r3, #7
 800721a:	d9e7      	bls.n	80071ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800721c:	bf00      	nop
 800721e:	bf00      	nop
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20007460 	.word	0x20007460

08007230 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007240:	f001 fbea 	bl	8008a18 <vPortEnterCritical>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800724a:	b25b      	sxtb	r3, r3
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d103      	bne.n	800725a <vQueueWaitForMessageRestricted+0x2a>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007260:	b25b      	sxtb	r3, r3
 8007262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007266:	d103      	bne.n	8007270 <vQueueWaitForMessageRestricted+0x40>
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007270:	f001 fc04 	bl	8008a7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	3324      	adds	r3, #36	@ 0x24
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	4618      	mov	r0, r3
 8007286:	f000 fc45 	bl	8007b14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800728a:	6978      	ldr	r0, [r7, #20]
 800728c:	f7ff ff26 	bl	80070dc <prvUnlockQueue>
	}
 8007290:	bf00      	nop
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08e      	sub	sp, #56	@ 0x38
 800729c:	af04      	add	r7, sp, #16
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10b      	bne.n	80072c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	623b      	str	r3, [r7, #32]
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	e7fd      	b.n	80072c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10b      	bne.n	80072e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	61fb      	str	r3, [r7, #28]
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072e2:	235c      	movs	r3, #92	@ 0x5c
 80072e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80072ea:	d00b      	beq.n	8007304 <xTaskCreateStatic+0x6c>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	61bb      	str	r3, [r7, #24]
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	e7fd      	b.n	8007300 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007304:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01e      	beq.n	800734a <xTaskCreateStatic+0xb2>
 800730c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01b      	beq.n	800734a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800731a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	2202      	movs	r2, #2
 8007320:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007324:	2300      	movs	r3, #0
 8007326:	9303      	str	r3, [sp, #12]
 8007328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732a:	9302      	str	r3, [sp, #8]
 800732c:	f107 0314 	add.w	r3, r7, #20
 8007330:	9301      	str	r3, [sp, #4]
 8007332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f850 	bl	80073e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007342:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007344:	f000 f8de 	bl	8007504 <prvAddNewTaskToReadyList>
 8007348:	e001      	b.n	800734e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800734e:	697b      	ldr	r3, [r7, #20]
	}
 8007350:	4618      	mov	r0, r3
 8007352:	3728      	adds	r7, #40	@ 0x28
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08c      	sub	sp, #48	@ 0x30
 800735c:	af04      	add	r7, sp, #16
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	603b      	str	r3, [r7, #0]
 8007364:	4613      	mov	r3, r2
 8007366:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4618      	mov	r0, r3
 800736e:	f001 fc75 	bl	8008c5c <pvPortMalloc>
 8007372:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00e      	beq.n	8007398 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800737a:	205c      	movs	r0, #92	@ 0x5c
 800737c:	f001 fc6e 	bl	8008c5c <pvPortMalloc>
 8007380:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	631a      	str	r2, [r3, #48]	@ 0x30
 800738e:	e005      	b.n	800739c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007390:	6978      	ldr	r0, [r7, #20]
 8007392:	f001 fd31 	bl	8008df8 <vPortFree>
 8007396:	e001      	b.n	800739c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d017      	beq.n	80073d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073aa:	88fa      	ldrh	r2, [r7, #6]
 80073ac:	2300      	movs	r3, #0
 80073ae:	9303      	str	r3, [sp, #12]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	9302      	str	r3, [sp, #8]
 80073b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 f80e 	bl	80073e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073c6:	69f8      	ldr	r0, [r7, #28]
 80073c8:	f000 f89c 	bl	8007504 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073cc:	2301      	movs	r3, #1
 80073ce:	61bb      	str	r3, [r7, #24]
 80073d0:	e002      	b.n	80073d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073d2:	f04f 33ff 	mov.w	r3, #4294967295
 80073d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073d8:	69bb      	ldr	r3, [r7, #24]
	}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b088      	sub	sp, #32
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	60f8      	str	r0, [r7, #12]
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	607a      	str	r2, [r7, #4]
 80073ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	461a      	mov	r2, r3
 80073fa:	21a5      	movs	r1, #165	@ 0xa5
 80073fc:	f010 ff8a 	bl	8018314 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800740a:	3b01      	subs	r3, #1
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	f023 0307 	bic.w	r3, r3, #7
 8007418:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00b      	beq.n	800743c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	617b      	str	r3, [r7, #20]
}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	e7fd      	b.n	8007438 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01f      	beq.n	8007482 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007442:	2300      	movs	r3, #0
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	e012      	b.n	800746e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	4413      	add	r3, r2
 800744e:	7819      	ldrb	r1, [r3, #0]
 8007450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	3334      	adds	r3, #52	@ 0x34
 8007458:	460a      	mov	r2, r1
 800745a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	4413      	add	r3, r2
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d006      	beq.n	8007476 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	3301      	adds	r3, #1
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	2b0f      	cmp	r3, #15
 8007472:	d9e9      	bls.n	8007448 <prvInitialiseNewTask+0x66>
 8007474:	e000      	b.n	8007478 <prvInitialiseNewTask+0x96>
			{
				break;
 8007476:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007480:	e003      	b.n	800748a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748c:	2b37      	cmp	r3, #55	@ 0x37
 800748e:	d901      	bls.n	8007494 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007490:	2337      	movs	r3, #55	@ 0x37
 8007492:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007498:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800749a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800749e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	2200      	movs	r2, #0
 80074a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a8:	3304      	adds	r3, #4
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff f966 	bl	800677c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b2:	3318      	adds	r3, #24
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff f961 	bl	800677c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	2200      	movs	r2, #0
 80074d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	68f9      	ldr	r1, [r7, #12]
 80074e2:	69b8      	ldr	r0, [r7, #24]
 80074e4:	f001 f966 	bl	80087b4 <pxPortInitialiseStack>
 80074e8:	4602      	mov	r2, r0
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074fa:	bf00      	nop
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800750c:	f001 fa84 	bl	8008a18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007510:	4b2d      	ldr	r3, [pc, #180]	@ (80075c8 <prvAddNewTaskToReadyList+0xc4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	4a2c      	ldr	r2, [pc, #176]	@ (80075c8 <prvAddNewTaskToReadyList+0xc4>)
 8007518:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800751a:	4b2c      	ldr	r3, [pc, #176]	@ (80075cc <prvAddNewTaskToReadyList+0xc8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d109      	bne.n	8007536 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007522:	4a2a      	ldr	r2, [pc, #168]	@ (80075cc <prvAddNewTaskToReadyList+0xc8>)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007528:	4b27      	ldr	r3, [pc, #156]	@ (80075c8 <prvAddNewTaskToReadyList+0xc4>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d110      	bne.n	8007552 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007530:	f000 fc46 	bl	8007dc0 <prvInitialiseTaskLists>
 8007534:	e00d      	b.n	8007552 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007536:	4b26      	ldr	r3, [pc, #152]	@ (80075d0 <prvAddNewTaskToReadyList+0xcc>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d109      	bne.n	8007552 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800753e:	4b23      	ldr	r3, [pc, #140]	@ (80075cc <prvAddNewTaskToReadyList+0xc8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007548:	429a      	cmp	r2, r3
 800754a:	d802      	bhi.n	8007552 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800754c:	4a1f      	ldr	r2, [pc, #124]	@ (80075cc <prvAddNewTaskToReadyList+0xc8>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007552:	4b20      	ldr	r3, [pc, #128]	@ (80075d4 <prvAddNewTaskToReadyList+0xd0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3301      	adds	r3, #1
 8007558:	4a1e      	ldr	r2, [pc, #120]	@ (80075d4 <prvAddNewTaskToReadyList+0xd0>)
 800755a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800755c:	4b1d      	ldr	r3, [pc, #116]	@ (80075d4 <prvAddNewTaskToReadyList+0xd0>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007568:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <prvAddNewTaskToReadyList+0xd4>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	429a      	cmp	r2, r3
 800756e:	d903      	bls.n	8007578 <prvAddNewTaskToReadyList+0x74>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	4a18      	ldr	r2, [pc, #96]	@ (80075d8 <prvAddNewTaskToReadyList+0xd4>)
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757c:	4613      	mov	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	4413      	add	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4a15      	ldr	r2, [pc, #84]	@ (80075dc <prvAddNewTaskToReadyList+0xd8>)
 8007586:	441a      	add	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	3304      	adds	r3, #4
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f7ff f901 	bl	8006796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007594:	f001 fa72 	bl	8008a7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007598:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <prvAddNewTaskToReadyList+0xcc>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00e      	beq.n	80075be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075a0:	4b0a      	ldr	r3, [pc, #40]	@ (80075cc <prvAddNewTaskToReadyList+0xc8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d207      	bcs.n	80075be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075ae:	4b0c      	ldr	r3, [pc, #48]	@ (80075e0 <prvAddNewTaskToReadyList+0xdc>)
 80075b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20007974 	.word	0x20007974
 80075cc:	200074a0 	.word	0x200074a0
 80075d0:	20007980 	.word	0x20007980
 80075d4:	20007990 	.word	0x20007990
 80075d8:	2000797c 	.word	0x2000797c
 80075dc:	200074a4 	.word	0x200074a4
 80075e0:	e000ed04 	.word	0xe000ed04

080075e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d018      	beq.n	8007628 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075f6:	4b14      	ldr	r3, [pc, #80]	@ (8007648 <vTaskDelay+0x64>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <vTaskDelay+0x32>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	60bb      	str	r3, [r7, #8]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007616:	f000 f883 	bl	8007720 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800761a:	2100      	movs	r1, #0
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fd1b 	bl	8008058 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007622:	f000 f88b 	bl	800773c <xTaskResumeAll>
 8007626:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d107      	bne.n	800763e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800762e:	4b07      	ldr	r3, [pc, #28]	@ (800764c <vTaskDelay+0x68>)
 8007630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	2000799c 	.word	0x2000799c
 800764c:	e000ed04 	.word	0xe000ed04

08007650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	@ 0x28
 8007654:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007656:	2300      	movs	r3, #0
 8007658:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800765a:	2300      	movs	r3, #0
 800765c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800765e:	463a      	mov	r2, r7
 8007660:	1d39      	adds	r1, r7, #4
 8007662:	f107 0308 	add.w	r3, r7, #8
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff f834 	bl	80066d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	9202      	str	r2, [sp, #8]
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	2300      	movs	r3, #0
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	460a      	mov	r2, r1
 800767e:	4922      	ldr	r1, [pc, #136]	@ (8007708 <vTaskStartScheduler+0xb8>)
 8007680:	4822      	ldr	r0, [pc, #136]	@ (800770c <vTaskStartScheduler+0xbc>)
 8007682:	f7ff fe09 	bl	8007298 <xTaskCreateStatic>
 8007686:	4603      	mov	r3, r0
 8007688:	4a21      	ldr	r2, [pc, #132]	@ (8007710 <vTaskStartScheduler+0xc0>)
 800768a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800768c:	4b20      	ldr	r3, [pc, #128]	@ (8007710 <vTaskStartScheduler+0xc0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007694:	2301      	movs	r3, #1
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	e001      	b.n	800769e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d102      	bne.n	80076aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076a4:	f000 fd2c 	bl	8008100 <xTimerCreateTimerTask>
 80076a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d116      	bne.n	80076de <vTaskStartScheduler+0x8e>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	613b      	str	r3, [r7, #16]
}
 80076c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076c4:	4b13      	ldr	r3, [pc, #76]	@ (8007714 <vTaskStartScheduler+0xc4>)
 80076c6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076cc:	4b12      	ldr	r3, [pc, #72]	@ (8007718 <vTaskStartScheduler+0xc8>)
 80076ce:	2201      	movs	r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076d2:	4b12      	ldr	r3, [pc, #72]	@ (800771c <vTaskStartScheduler+0xcc>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076d8:	f001 f8fa 	bl	80088d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076dc:	e00f      	b.n	80076fe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e4:	d10b      	bne.n	80076fe <vTaskStartScheduler+0xae>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60fb      	str	r3, [r7, #12]
}
 80076f8:	bf00      	nop
 80076fa:	bf00      	nop
 80076fc:	e7fd      	b.n	80076fa <vTaskStartScheduler+0xaa>
}
 80076fe:	bf00      	nop
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	08019c70 	.word	0x08019c70
 800770c:	08007d91 	.word	0x08007d91
 8007710:	20007998 	.word	0x20007998
 8007714:	20007994 	.word	0x20007994
 8007718:	20007980 	.word	0x20007980
 800771c:	20007978 	.word	0x20007978

08007720 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007724:	4b04      	ldr	r3, [pc, #16]	@ (8007738 <vTaskSuspendAll+0x18>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	4a03      	ldr	r2, [pc, #12]	@ (8007738 <vTaskSuspendAll+0x18>)
 800772c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800772e:	bf00      	nop
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	2000799c 	.word	0x2000799c

0800773c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007746:	2300      	movs	r3, #0
 8007748:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800774a:	4b42      	ldr	r3, [pc, #264]	@ (8007854 <xTaskResumeAll+0x118>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10b      	bne.n	800776a <xTaskResumeAll+0x2e>
	__asm volatile
 8007752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	603b      	str	r3, [r7, #0]
}
 8007764:	bf00      	nop
 8007766:	bf00      	nop
 8007768:	e7fd      	b.n	8007766 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800776a:	f001 f955 	bl	8008a18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800776e:	4b39      	ldr	r3, [pc, #228]	@ (8007854 <xTaskResumeAll+0x118>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3b01      	subs	r3, #1
 8007774:	4a37      	ldr	r2, [pc, #220]	@ (8007854 <xTaskResumeAll+0x118>)
 8007776:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007778:	4b36      	ldr	r3, [pc, #216]	@ (8007854 <xTaskResumeAll+0x118>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d162      	bne.n	8007846 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007780:	4b35      	ldr	r3, [pc, #212]	@ (8007858 <xTaskResumeAll+0x11c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d05e      	beq.n	8007846 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007788:	e02f      	b.n	80077ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778a:	4b34      	ldr	r3, [pc, #208]	@ (800785c <xTaskResumeAll+0x120>)
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3318      	adds	r3, #24
 8007796:	4618      	mov	r0, r3
 8007798:	f7ff f85a 	bl	8006850 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	3304      	adds	r3, #4
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff f855 	bl	8006850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007860 <xTaskResumeAll+0x124>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d903      	bls.n	80077ba <xTaskResumeAll+0x7e>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007860 <xTaskResumeAll+0x124>)
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4a27      	ldr	r2, [pc, #156]	@ (8007864 <xTaskResumeAll+0x128>)
 80077c8:	441a      	add	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f7fe ffe0 	bl	8006796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077da:	4b23      	ldr	r3, [pc, #140]	@ (8007868 <xTaskResumeAll+0x12c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d302      	bcc.n	80077ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80077e4:	4b21      	ldr	r3, [pc, #132]	@ (800786c <xTaskResumeAll+0x130>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077ea:	4b1c      	ldr	r3, [pc, #112]	@ (800785c <xTaskResumeAll+0x120>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1cb      	bne.n	800778a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077f8:	f000 fb80 	bl	8007efc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007870 <xTaskResumeAll+0x134>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d010      	beq.n	800782a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007808:	f000 f846 	bl	8007898 <xTaskIncrementTick>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007812:	4b16      	ldr	r3, [pc, #88]	@ (800786c <xTaskResumeAll+0x130>)
 8007814:	2201      	movs	r2, #1
 8007816:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3b01      	subs	r3, #1
 800781c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1f1      	bne.n	8007808 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007824:	4b12      	ldr	r3, [pc, #72]	@ (8007870 <xTaskResumeAll+0x134>)
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800782a:	4b10      	ldr	r3, [pc, #64]	@ (800786c <xTaskResumeAll+0x130>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d009      	beq.n	8007846 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007836:	4b0f      	ldr	r3, [pc, #60]	@ (8007874 <xTaskResumeAll+0x138>)
 8007838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007846:	f001 f919 	bl	8008a7c <vPortExitCritical>

	return xAlreadyYielded;
 800784a:	68bb      	ldr	r3, [r7, #8]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	2000799c 	.word	0x2000799c
 8007858:	20007974 	.word	0x20007974
 800785c:	20007934 	.word	0x20007934
 8007860:	2000797c 	.word	0x2000797c
 8007864:	200074a4 	.word	0x200074a4
 8007868:	200074a0 	.word	0x200074a0
 800786c:	20007988 	.word	0x20007988
 8007870:	20007984 	.word	0x20007984
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800787e:	4b05      	ldr	r3, [pc, #20]	@ (8007894 <xTaskGetTickCount+0x1c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007884:	687b      	ldr	r3, [r7, #4]
}
 8007886:	4618      	mov	r0, r3
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
 8007892:	bf00      	nop
 8007894:	20007978 	.word	0x20007978

08007898 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078a2:	4b4f      	ldr	r3, [pc, #316]	@ (80079e0 <xTaskIncrementTick+0x148>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f040 8090 	bne.w	80079cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078ac:	4b4d      	ldr	r3, [pc, #308]	@ (80079e4 <xTaskIncrementTick+0x14c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3301      	adds	r3, #1
 80078b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078b4:	4a4b      	ldr	r2, [pc, #300]	@ (80079e4 <xTaskIncrementTick+0x14c>)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d121      	bne.n	8007904 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80078c0:	4b49      	ldr	r3, [pc, #292]	@ (80079e8 <xTaskIncrementTick+0x150>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00b      	beq.n	80078e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	603b      	str	r3, [r7, #0]
}
 80078dc:	bf00      	nop
 80078de:	bf00      	nop
 80078e0:	e7fd      	b.n	80078de <xTaskIncrementTick+0x46>
 80078e2:	4b41      	ldr	r3, [pc, #260]	@ (80079e8 <xTaskIncrementTick+0x150>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	60fb      	str	r3, [r7, #12]
 80078e8:	4b40      	ldr	r3, [pc, #256]	@ (80079ec <xTaskIncrementTick+0x154>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a3e      	ldr	r2, [pc, #248]	@ (80079e8 <xTaskIncrementTick+0x150>)
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	4a3e      	ldr	r2, [pc, #248]	@ (80079ec <xTaskIncrementTick+0x154>)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	4b3e      	ldr	r3, [pc, #248]	@ (80079f0 <xTaskIncrementTick+0x158>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3301      	adds	r3, #1
 80078fc:	4a3c      	ldr	r2, [pc, #240]	@ (80079f0 <xTaskIncrementTick+0x158>)
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	f000 fafc 	bl	8007efc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007904:	4b3b      	ldr	r3, [pc, #236]	@ (80079f4 <xTaskIncrementTick+0x15c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	429a      	cmp	r2, r3
 800790c:	d349      	bcc.n	80079a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800790e:	4b36      	ldr	r3, [pc, #216]	@ (80079e8 <xTaskIncrementTick+0x150>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d104      	bne.n	8007922 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007918:	4b36      	ldr	r3, [pc, #216]	@ (80079f4 <xTaskIncrementTick+0x15c>)
 800791a:	f04f 32ff 	mov.w	r2, #4294967295
 800791e:	601a      	str	r2, [r3, #0]
					break;
 8007920:	e03f      	b.n	80079a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007922:	4b31      	ldr	r3, [pc, #196]	@ (80079e8 <xTaskIncrementTick+0x150>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	429a      	cmp	r2, r3
 8007938:	d203      	bcs.n	8007942 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800793a:	4a2e      	ldr	r2, [pc, #184]	@ (80079f4 <xTaskIncrementTick+0x15c>)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007940:	e02f      	b.n	80079a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	3304      	adds	r3, #4
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe ff82 	bl	8006850 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007950:	2b00      	cmp	r3, #0
 8007952:	d004      	beq.n	800795e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	3318      	adds	r3, #24
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe ff79 	bl	8006850 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007962:	4b25      	ldr	r3, [pc, #148]	@ (80079f8 <xTaskIncrementTick+0x160>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d903      	bls.n	8007972 <xTaskIncrementTick+0xda>
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796e:	4a22      	ldr	r2, [pc, #136]	@ (80079f8 <xTaskIncrementTick+0x160>)
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4a1f      	ldr	r2, [pc, #124]	@ (80079fc <xTaskIncrementTick+0x164>)
 8007980:	441a      	add	r2, r3
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	3304      	adds	r3, #4
 8007986:	4619      	mov	r1, r3
 8007988:	4610      	mov	r0, r2
 800798a:	f7fe ff04 	bl	8006796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007992:	4b1b      	ldr	r3, [pc, #108]	@ (8007a00 <xTaskIncrementTick+0x168>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007998:	429a      	cmp	r2, r3
 800799a:	d3b8      	bcc.n	800790e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079a0:	e7b5      	b.n	800790e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079a2:	4b17      	ldr	r3, [pc, #92]	@ (8007a00 <xTaskIncrementTick+0x168>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a8:	4914      	ldr	r1, [pc, #80]	@ (80079fc <xTaskIncrementTick+0x164>)
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	440b      	add	r3, r1
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d901      	bls.n	80079be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80079ba:	2301      	movs	r3, #1
 80079bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079be:	4b11      	ldr	r3, [pc, #68]	@ (8007a04 <xTaskIncrementTick+0x16c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80079c6:	2301      	movs	r3, #1
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	e004      	b.n	80079d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007a08 <xTaskIncrementTick+0x170>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3301      	adds	r3, #1
 80079d2:	4a0d      	ldr	r2, [pc, #52]	@ (8007a08 <xTaskIncrementTick+0x170>)
 80079d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079d6:	697b      	ldr	r3, [r7, #20]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	2000799c 	.word	0x2000799c
 80079e4:	20007978 	.word	0x20007978
 80079e8:	2000792c 	.word	0x2000792c
 80079ec:	20007930 	.word	0x20007930
 80079f0:	2000798c 	.word	0x2000798c
 80079f4:	20007994 	.word	0x20007994
 80079f8:	2000797c 	.word	0x2000797c
 80079fc:	200074a4 	.word	0x200074a4
 8007a00:	200074a0 	.word	0x200074a0
 8007a04:	20007988 	.word	0x20007988
 8007a08:	20007984 	.word	0x20007984

08007a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a12:	4b28      	ldr	r3, [pc, #160]	@ (8007ab4 <vTaskSwitchContext+0xa8>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a1a:	4b27      	ldr	r3, [pc, #156]	@ (8007ab8 <vTaskSwitchContext+0xac>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a20:	e042      	b.n	8007aa8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007a22:	4b25      	ldr	r3, [pc, #148]	@ (8007ab8 <vTaskSwitchContext+0xac>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a28:	4b24      	ldr	r3, [pc, #144]	@ (8007abc <vTaskSwitchContext+0xb0>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	e011      	b.n	8007a54 <vTaskSwitchContext+0x48>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10b      	bne.n	8007a4e <vTaskSwitchContext+0x42>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	607b      	str	r3, [r7, #4]
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	e7fd      	b.n	8007a4a <vTaskSwitchContext+0x3e>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	491a      	ldr	r1, [pc, #104]	@ (8007ac0 <vTaskSwitchContext+0xb4>)
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0e3      	beq.n	8007a30 <vTaskSwitchContext+0x24>
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4a13      	ldr	r2, [pc, #76]	@ (8007ac0 <vTaskSwitchContext+0xb4>)
 8007a74:	4413      	add	r3, r2
 8007a76:	60bb      	str	r3, [r7, #8]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	605a      	str	r2, [r3, #4]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	3308      	adds	r3, #8
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d104      	bne.n	8007a98 <vTaskSwitchContext+0x8c>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	605a      	str	r2, [r3, #4]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	4a09      	ldr	r2, [pc, #36]	@ (8007ac4 <vTaskSwitchContext+0xb8>)
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	4a06      	ldr	r2, [pc, #24]	@ (8007abc <vTaskSwitchContext+0xb0>)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6013      	str	r3, [r2, #0]
}
 8007aa8:	bf00      	nop
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	2000799c 	.word	0x2000799c
 8007ab8:	20007988 	.word	0x20007988
 8007abc:	2000797c 	.word	0x2000797c
 8007ac0:	200074a4 	.word	0x200074a4
 8007ac4:	200074a0 	.word	0x200074a0

08007ac8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10b      	bne.n	8007af0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	60fb      	str	r3, [r7, #12]
}
 8007aea:	bf00      	nop
 8007aec:	bf00      	nop
 8007aee:	e7fd      	b.n	8007aec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007af0:	4b07      	ldr	r3, [pc, #28]	@ (8007b10 <vTaskPlaceOnEventList+0x48>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3318      	adds	r3, #24
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7fe fe70 	bl	80067de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007afe:	2101      	movs	r1, #1
 8007b00:	6838      	ldr	r0, [r7, #0]
 8007b02:	f000 faa9 	bl	8008058 <prvAddCurrentTaskToDelayedList>
}
 8007b06:	bf00      	nop
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	200074a0 	.word	0x200074a0

08007b14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10b      	bne.n	8007b3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	617b      	str	r3, [r7, #20]
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	e7fd      	b.n	8007b3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b68 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3318      	adds	r3, #24
 8007b44:	4619      	mov	r1, r3
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f7fe fe25 	bl	8006796 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007b52:	f04f 33ff 	mov.w	r3, #4294967295
 8007b56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	68b8      	ldr	r0, [r7, #8]
 8007b5c:	f000 fa7c 	bl	8008058 <prvAddCurrentTaskToDelayedList>
	}
 8007b60:	bf00      	nop
 8007b62:	3718      	adds	r7, #24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	200074a0 	.word	0x200074a0

08007b6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10b      	bne.n	8007b9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	60fb      	str	r3, [r7, #12]
}
 8007b94:	bf00      	nop
 8007b96:	bf00      	nop
 8007b98:	e7fd      	b.n	8007b96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3318      	adds	r3, #24
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fe56 	bl	8006850 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8007c1c <xTaskRemoveFromEventList+0xb0>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d11d      	bne.n	8007be8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fe fe4d 	bl	8006850 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bba:	4b19      	ldr	r3, [pc, #100]	@ (8007c20 <xTaskRemoveFromEventList+0xb4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d903      	bls.n	8007bca <xTaskRemoveFromEventList+0x5e>
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc6:	4a16      	ldr	r2, [pc, #88]	@ (8007c20 <xTaskRemoveFromEventList+0xb4>)
 8007bc8:	6013      	str	r3, [r2, #0]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4a13      	ldr	r2, [pc, #76]	@ (8007c24 <xTaskRemoveFromEventList+0xb8>)
 8007bd8:	441a      	add	r2, r3
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f7fe fdd8 	bl	8006796 <vListInsertEnd>
 8007be6:	e005      	b.n	8007bf4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	3318      	adds	r3, #24
 8007bec:	4619      	mov	r1, r3
 8007bee:	480e      	ldr	r0, [pc, #56]	@ (8007c28 <xTaskRemoveFromEventList+0xbc>)
 8007bf0:	f7fe fdd1 	bl	8006796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8007c2c <xTaskRemoveFromEventList+0xc0>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d905      	bls.n	8007c0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c02:	2301      	movs	r3, #1
 8007c04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c06:	4b0a      	ldr	r3, [pc, #40]	@ (8007c30 <xTaskRemoveFromEventList+0xc4>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	e001      	b.n	8007c12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c12:	697b      	ldr	r3, [r7, #20]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	2000799c 	.word	0x2000799c
 8007c20:	2000797c 	.word	0x2000797c
 8007c24:	200074a4 	.word	0x200074a4
 8007c28:	20007934 	.word	0x20007934
 8007c2c:	200074a0 	.word	0x200074a0
 8007c30:	20007988 	.word	0x20007988

08007c34 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10b      	bne.n	8007c5a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	60fb      	str	r3, [r7, #12]
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	e7fd      	b.n	8007c56 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8007c5a:	f000 fedd 	bl	8008a18 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c5e:	4b07      	ldr	r3, [pc, #28]	@ (8007c7c <vTaskSetTimeOutState+0x48>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8007c66:	4b06      	ldr	r3, [pc, #24]	@ (8007c80 <vTaskSetTimeOutState+0x4c>)
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8007c6e:	f000 ff05 	bl	8008a7c <vPortExitCritical>
}
 8007c72:	bf00      	nop
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	2000798c 	.word	0x2000798c
 8007c80:	20007978 	.word	0x20007978

08007c84 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c8c:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <vTaskInternalSetTimeOutState+0x24>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c94:	4b05      	ldr	r3, [pc, #20]	@ (8007cac <vTaskInternalSetTimeOutState+0x28>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	605a      	str	r2, [r3, #4]
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr
 8007ca8:	2000798c 	.word	0x2000798c
 8007cac:	20007978 	.word	0x20007978

08007cb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10b      	bne.n	8007cd8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	613b      	str	r3, [r7, #16]
}
 8007cd2:	bf00      	nop
 8007cd4:	bf00      	nop
 8007cd6:	e7fd      	b.n	8007cd4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10b      	bne.n	8007cf6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	60fb      	str	r3, [r7, #12]
}
 8007cf0:	bf00      	nop
 8007cf2:	bf00      	nop
 8007cf4:	e7fd      	b.n	8007cf2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007cf6:	f000 fe8f 	bl	8008a18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8007d70 <xTaskCheckForTimeOut+0xc0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d12:	d102      	bne.n	8007d1a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61fb      	str	r3, [r7, #28]
 8007d18:	e023      	b.n	8007d62 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4b15      	ldr	r3, [pc, #84]	@ (8007d74 <xTaskCheckForTimeOut+0xc4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d007      	beq.n	8007d36 <xTaskCheckForTimeOut+0x86>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d302      	bcc.n	8007d36 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d30:	2301      	movs	r3, #1
 8007d32:	61fb      	str	r3, [r7, #28]
 8007d34:	e015      	b.n	8007d62 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d20b      	bcs.n	8007d58 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	1ad2      	subs	r2, r2, r3
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff ff99 	bl	8007c84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	e004      	b.n	8007d62 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d62:	f000 fe8b 	bl	8008a7c <vPortExitCritical>

	return xReturn;
 8007d66:	69fb      	ldr	r3, [r7, #28]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3720      	adds	r7, #32
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20007978 	.word	0x20007978
 8007d74:	2000798c 	.word	0x2000798c

08007d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d7c:	4b03      	ldr	r3, [pc, #12]	@ (8007d8c <vTaskMissedYield+0x14>)
 8007d7e:	2201      	movs	r2, #1
 8007d80:	601a      	str	r2, [r3, #0]
}
 8007d82:	bf00      	nop
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	20007988 	.word	0x20007988

08007d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d98:	f000 f852 	bl	8007e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d9c:	4b06      	ldr	r3, [pc, #24]	@ (8007db8 <prvIdleTask+0x28>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d9f9      	bls.n	8007d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007da4:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <prvIdleTask+0x2c>)
 8007da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007db4:	e7f0      	b.n	8007d98 <prvIdleTask+0x8>
 8007db6:	bf00      	nop
 8007db8:	200074a4 	.word	0x200074a4
 8007dbc:	e000ed04 	.word	0xe000ed04

08007dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	607b      	str	r3, [r7, #4]
 8007dca:	e00c      	b.n	8007de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4a12      	ldr	r2, [pc, #72]	@ (8007e20 <prvInitialiseTaskLists+0x60>)
 8007dd8:	4413      	add	r3, r2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fcae 	bl	800673c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3301      	adds	r3, #1
 8007de4:	607b      	str	r3, [r7, #4]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b37      	cmp	r3, #55	@ 0x37
 8007dea:	d9ef      	bls.n	8007dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dec:	480d      	ldr	r0, [pc, #52]	@ (8007e24 <prvInitialiseTaskLists+0x64>)
 8007dee:	f7fe fca5 	bl	800673c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007df2:	480d      	ldr	r0, [pc, #52]	@ (8007e28 <prvInitialiseTaskLists+0x68>)
 8007df4:	f7fe fca2 	bl	800673c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007df8:	480c      	ldr	r0, [pc, #48]	@ (8007e2c <prvInitialiseTaskLists+0x6c>)
 8007dfa:	f7fe fc9f 	bl	800673c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dfe:	480c      	ldr	r0, [pc, #48]	@ (8007e30 <prvInitialiseTaskLists+0x70>)
 8007e00:	f7fe fc9c 	bl	800673c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e04:	480b      	ldr	r0, [pc, #44]	@ (8007e34 <prvInitialiseTaskLists+0x74>)
 8007e06:	f7fe fc99 	bl	800673c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e38 <prvInitialiseTaskLists+0x78>)
 8007e0c:	4a05      	ldr	r2, [pc, #20]	@ (8007e24 <prvInitialiseTaskLists+0x64>)
 8007e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e10:	4b0a      	ldr	r3, [pc, #40]	@ (8007e3c <prvInitialiseTaskLists+0x7c>)
 8007e12:	4a05      	ldr	r2, [pc, #20]	@ (8007e28 <prvInitialiseTaskLists+0x68>)
 8007e14:	601a      	str	r2, [r3, #0]
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	200074a4 	.word	0x200074a4
 8007e24:	20007904 	.word	0x20007904
 8007e28:	20007918 	.word	0x20007918
 8007e2c:	20007934 	.word	0x20007934
 8007e30:	20007948 	.word	0x20007948
 8007e34:	20007960 	.word	0x20007960
 8007e38:	2000792c 	.word	0x2000792c
 8007e3c:	20007930 	.word	0x20007930

08007e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e46:	e019      	b.n	8007e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e48:	f000 fde6 	bl	8008a18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e4c:	4b10      	ldr	r3, [pc, #64]	@ (8007e90 <prvCheckTasksWaitingTermination+0x50>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fe fcf9 	bl	8006850 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e94 <prvCheckTasksWaitingTermination+0x54>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	4a0b      	ldr	r2, [pc, #44]	@ (8007e94 <prvCheckTasksWaitingTermination+0x54>)
 8007e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e68:	4b0b      	ldr	r3, [pc, #44]	@ (8007e98 <prvCheckTasksWaitingTermination+0x58>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007e98 <prvCheckTasksWaitingTermination+0x58>)
 8007e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e72:	f000 fe03 	bl	8008a7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f810 	bl	8007e9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e7c:	4b06      	ldr	r3, [pc, #24]	@ (8007e98 <prvCheckTasksWaitingTermination+0x58>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e1      	bne.n	8007e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20007948 	.word	0x20007948
 8007e94:	20007974 	.word	0x20007974
 8007e98:	2000795c 	.word	0x2000795c

08007e9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d108      	bne.n	8007ec0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 ffa0 	bl	8008df8 <vPortFree>
				vPortFree( pxTCB );
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 ff9d 	bl	8008df8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ebe:	e019      	b.n	8007ef4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d103      	bne.n	8007ed2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 ff94 	bl	8008df8 <vPortFree>
	}
 8007ed0:	e010      	b.n	8007ef4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d00b      	beq.n	8007ef4 <prvDeleteTCB+0x58>
	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	60fb      	str	r3, [r7, #12]
}
 8007eee:	bf00      	nop
 8007ef0:	bf00      	nop
 8007ef2:	e7fd      	b.n	8007ef0 <prvDeleteTCB+0x54>
	}
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f02:	4b0c      	ldr	r3, [pc, #48]	@ (8007f34 <prvResetNextTaskUnblockTime+0x38>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d104      	bne.n	8007f16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f38 <prvResetNextTaskUnblockTime+0x3c>)
 8007f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f14:	e008      	b.n	8007f28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f16:	4b07      	ldr	r3, [pc, #28]	@ (8007f34 <prvResetNextTaskUnblockTime+0x38>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	4a04      	ldr	r2, [pc, #16]	@ (8007f38 <prvResetNextTaskUnblockTime+0x3c>)
 8007f26:	6013      	str	r3, [r2, #0]
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	2000792c 	.word	0x2000792c
 8007f38:	20007994 	.word	0x20007994

08007f3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f42:	4b0b      	ldr	r3, [pc, #44]	@ (8007f70 <xTaskGetSchedulerState+0x34>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	607b      	str	r3, [r7, #4]
 8007f4e:	e008      	b.n	8007f62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f50:	4b08      	ldr	r3, [pc, #32]	@ (8007f74 <xTaskGetSchedulerState+0x38>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	607b      	str	r3, [r7, #4]
 8007f5c:	e001      	b.n	8007f62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f62:	687b      	ldr	r3, [r7, #4]
	}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	20007980 	.word	0x20007980
 8007f74:	2000799c 	.word	0x2000799c

08007f78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d058      	beq.n	8008040 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800804c <xTaskPriorityDisinherit+0xd4>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d00b      	beq.n	8007fb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	60fb      	str	r3, [r7, #12]
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	e7fd      	b.n	8007fac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10b      	bne.n	8007fd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	60bb      	str	r3, [r7, #8]
}
 8007fca:	bf00      	nop
 8007fcc:	bf00      	nop
 8007fce:	e7fd      	b.n	8007fcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd4:	1e5a      	subs	r2, r3, #1
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d02c      	beq.n	8008040 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d128      	bne.n	8008040 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	3304      	adds	r3, #4
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fe fc2c 	bl	8006850 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008004:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008010:	4b0f      	ldr	r3, [pc, #60]	@ (8008050 <xTaskPriorityDisinherit+0xd8>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	429a      	cmp	r2, r3
 8008016:	d903      	bls.n	8008020 <xTaskPriorityDisinherit+0xa8>
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801c:	4a0c      	ldr	r2, [pc, #48]	@ (8008050 <xTaskPriorityDisinherit+0xd8>)
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4a09      	ldr	r2, [pc, #36]	@ (8008054 <xTaskPriorityDisinherit+0xdc>)
 800802e:	441a      	add	r2, r3
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	3304      	adds	r3, #4
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f7fe fbad 	bl	8006796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008040:	697b      	ldr	r3, [r7, #20]
	}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	200074a0 	.word	0x200074a0
 8008050:	2000797c 	.word	0x2000797c
 8008054:	200074a4 	.word	0x200074a4

08008058 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008062:	4b21      	ldr	r3, [pc, #132]	@ (80080e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008068:	4b20      	ldr	r3, [pc, #128]	@ (80080ec <prvAddCurrentTaskToDelayedList+0x94>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3304      	adds	r3, #4
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe fbee 	bl	8006850 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807a:	d10a      	bne.n	8008092 <prvAddCurrentTaskToDelayedList+0x3a>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d007      	beq.n	8008092 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008082:	4b1a      	ldr	r3, [pc, #104]	@ (80080ec <prvAddCurrentTaskToDelayedList+0x94>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3304      	adds	r3, #4
 8008088:	4619      	mov	r1, r3
 800808a:	4819      	ldr	r0, [pc, #100]	@ (80080f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800808c:	f7fe fb83 	bl	8006796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008090:	e026      	b.n	80080e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4413      	add	r3, r2
 8008098:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800809a:	4b14      	ldr	r3, [pc, #80]	@ (80080ec <prvAddCurrentTaskToDelayedList+0x94>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d209      	bcs.n	80080be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080aa:	4b12      	ldr	r3, [pc, #72]	@ (80080f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b0f      	ldr	r3, [pc, #60]	@ (80080ec <prvAddCurrentTaskToDelayedList+0x94>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f7fe fb91 	bl	80067de <vListInsert>
}
 80080bc:	e010      	b.n	80080e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080be:	4b0e      	ldr	r3, [pc, #56]	@ (80080f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	4b0a      	ldr	r3, [pc, #40]	@ (80080ec <prvAddCurrentTaskToDelayedList+0x94>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3304      	adds	r3, #4
 80080c8:	4619      	mov	r1, r3
 80080ca:	4610      	mov	r0, r2
 80080cc:	f7fe fb87 	bl	80067de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080d0:	4b0a      	ldr	r3, [pc, #40]	@ (80080fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d202      	bcs.n	80080e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080da:	4a08      	ldr	r2, [pc, #32]	@ (80080fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	6013      	str	r3, [r2, #0]
}
 80080e0:	bf00      	nop
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20007978 	.word	0x20007978
 80080ec:	200074a0 	.word	0x200074a0
 80080f0:	20007960 	.word	0x20007960
 80080f4:	20007930 	.word	0x20007930
 80080f8:	2000792c 	.word	0x2000792c
 80080fc:	20007994 	.word	0x20007994

08008100 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08a      	sub	sp, #40	@ 0x28
 8008104:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008106:	2300      	movs	r3, #0
 8008108:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800810a:	f000 fb13 	bl	8008734 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800810e:	4b1d      	ldr	r3, [pc, #116]	@ (8008184 <xTimerCreateTimerTask+0x84>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d021      	beq.n	800815a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800811a:	2300      	movs	r3, #0
 800811c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800811e:	1d3a      	adds	r2, r7, #4
 8008120:	f107 0108 	add.w	r1, r7, #8
 8008124:	f107 030c 	add.w	r3, r7, #12
 8008128:	4618      	mov	r0, r3
 800812a:	f7fe faed 	bl	8006708 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	9202      	str	r2, [sp, #8]
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	2302      	movs	r3, #2
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	2300      	movs	r3, #0
 800813e:	460a      	mov	r2, r1
 8008140:	4911      	ldr	r1, [pc, #68]	@ (8008188 <xTimerCreateTimerTask+0x88>)
 8008142:	4812      	ldr	r0, [pc, #72]	@ (800818c <xTimerCreateTimerTask+0x8c>)
 8008144:	f7ff f8a8 	bl	8007298 <xTaskCreateStatic>
 8008148:	4603      	mov	r3, r0
 800814a:	4a11      	ldr	r2, [pc, #68]	@ (8008190 <xTimerCreateTimerTask+0x90>)
 800814c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800814e:	4b10      	ldr	r3, [pc, #64]	@ (8008190 <xTimerCreateTimerTask+0x90>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008156:	2301      	movs	r3, #1
 8008158:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10b      	bne.n	8008178 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	613b      	str	r3, [r7, #16]
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008178:	697b      	ldr	r3, [r7, #20]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	200079d0 	.word	0x200079d0
 8008188:	08019c78 	.word	0x08019c78
 800818c:	080082cd 	.word	0x080082cd
 8008190:	200079d4 	.word	0x200079d4

08008194 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	@ 0x28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b0:	f383 8811 	msr	BASEPRI, r3
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	623b      	str	r3, [r7, #32]
}
 80081be:	bf00      	nop
 80081c0:	bf00      	nop
 80081c2:	e7fd      	b.n	80081c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081c4:	4b19      	ldr	r3, [pc, #100]	@ (800822c <xTimerGenericCommand+0x98>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d02a      	beq.n	8008222 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2b05      	cmp	r3, #5
 80081dc:	dc18      	bgt.n	8008210 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081de:	f7ff fead 	bl	8007f3c <xTaskGetSchedulerState>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d109      	bne.n	80081fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081e8:	4b10      	ldr	r3, [pc, #64]	@ (800822c <xTimerGenericCommand+0x98>)
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	f107 0110 	add.w	r1, r7, #16
 80081f0:	2300      	movs	r3, #0
 80081f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081f4:	f7fe fc60 	bl	8006ab8 <xQueueGenericSend>
 80081f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80081fa:	e012      	b.n	8008222 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081fc:	4b0b      	ldr	r3, [pc, #44]	@ (800822c <xTimerGenericCommand+0x98>)
 80081fe:	6818      	ldr	r0, [r3, #0]
 8008200:	f107 0110 	add.w	r1, r7, #16
 8008204:	2300      	movs	r3, #0
 8008206:	2200      	movs	r2, #0
 8008208:	f7fe fc56 	bl	8006ab8 <xQueueGenericSend>
 800820c:	6278      	str	r0, [r7, #36]	@ 0x24
 800820e:	e008      	b.n	8008222 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008210:	4b06      	ldr	r3, [pc, #24]	@ (800822c <xTimerGenericCommand+0x98>)
 8008212:	6818      	ldr	r0, [r3, #0]
 8008214:	f107 0110 	add.w	r1, r7, #16
 8008218:	2300      	movs	r3, #0
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	f7fe fd4e 	bl	8006cbc <xQueueGenericSendFromISR>
 8008220:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008224:	4618      	mov	r0, r3
 8008226:	3728      	adds	r7, #40	@ 0x28
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	200079d0 	.word	0x200079d0

08008230 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af02      	add	r7, sp, #8
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800823a:	4b23      	ldr	r3, [pc, #140]	@ (80082c8 <prvProcessExpiredTimer+0x98>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	3304      	adds	r3, #4
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe fb01 	bl	8006850 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008254:	f003 0304 	and.w	r3, r3, #4
 8008258:	2b00      	cmp	r3, #0
 800825a:	d023      	beq.n	80082a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	699a      	ldr	r2, [r3, #24]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	18d1      	adds	r1, r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	683a      	ldr	r2, [r7, #0]
 8008268:	6978      	ldr	r0, [r7, #20]
 800826a:	f000 f8d5 	bl	8008418 <prvInsertTimerInActiveList>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d020      	beq.n	80082b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008274:	2300      	movs	r3, #0
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	2300      	movs	r3, #0
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	2100      	movs	r1, #0
 800827e:	6978      	ldr	r0, [r7, #20]
 8008280:	f7ff ff88 	bl	8008194 <xTimerGenericCommand>
 8008284:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d114      	bne.n	80082b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	60fb      	str	r3, [r7, #12]
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	e7fd      	b.n	80082a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082aa:	f023 0301 	bic.w	r3, r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	6978      	ldr	r0, [r7, #20]
 80082bc:	4798      	blx	r3
}
 80082be:	bf00      	nop
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	200079c8 	.word	0x200079c8

080082cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082d4:	f107 0308 	add.w	r3, r7, #8
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f859 	bl	8008390 <prvGetNextExpireTime>
 80082de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4619      	mov	r1, r3
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 f805 	bl	80082f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082ea:	f000 f8d7 	bl	800849c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082ee:	bf00      	nop
 80082f0:	e7f0      	b.n	80082d4 <prvTimerTask+0x8>
	...

080082f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082fe:	f7ff fa0f 	bl	8007720 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008302:	f107 0308 	add.w	r3, r7, #8
 8008306:	4618      	mov	r0, r3
 8008308:	f000 f866 	bl	80083d8 <prvSampleTimeNow>
 800830c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d130      	bne.n	8008376 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10a      	bne.n	8008330 <prvProcessTimerOrBlockTask+0x3c>
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	429a      	cmp	r2, r3
 8008320:	d806      	bhi.n	8008330 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008322:	f7ff fa0b 	bl	800773c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008326:	68f9      	ldr	r1, [r7, #12]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7ff ff81 	bl	8008230 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800832e:	e024      	b.n	800837a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d008      	beq.n	8008348 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008336:	4b13      	ldr	r3, [pc, #76]	@ (8008384 <prvProcessTimerOrBlockTask+0x90>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <prvProcessTimerOrBlockTask+0x50>
 8008340:	2301      	movs	r3, #1
 8008342:	e000      	b.n	8008346 <prvProcessTimerOrBlockTask+0x52>
 8008344:	2300      	movs	r3, #0
 8008346:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008348:	4b0f      	ldr	r3, [pc, #60]	@ (8008388 <prvProcessTimerOrBlockTask+0x94>)
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	4619      	mov	r1, r3
 8008356:	f7fe ff6b 	bl	8007230 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800835a:	f7ff f9ef 	bl	800773c <xTaskResumeAll>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10a      	bne.n	800837a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008364:	4b09      	ldr	r3, [pc, #36]	@ (800838c <prvProcessTimerOrBlockTask+0x98>)
 8008366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	f3bf 8f6f 	isb	sy
}
 8008374:	e001      	b.n	800837a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008376:	f7ff f9e1 	bl	800773c <xTaskResumeAll>
}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	200079cc 	.word	0x200079cc
 8008388:	200079d0 	.word	0x200079d0
 800838c:	e000ed04 	.word	0xe000ed04

08008390 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008398:	4b0e      	ldr	r3, [pc, #56]	@ (80083d4 <prvGetNextExpireTime+0x44>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <prvGetNextExpireTime+0x16>
 80083a2:	2201      	movs	r2, #1
 80083a4:	e000      	b.n	80083a8 <prvGetNextExpireTime+0x18>
 80083a6:	2200      	movs	r2, #0
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d105      	bne.n	80083c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083b4:	4b07      	ldr	r3, [pc, #28]	@ (80083d4 <prvGetNextExpireTime+0x44>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	e001      	b.n	80083c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083c4:	68fb      	ldr	r3, [r7, #12]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	200079c8 	.word	0x200079c8

080083d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083e0:	f7ff fa4a 	bl	8007878 <xTaskGetTickCount>
 80083e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008414 <prvSampleTimeNow+0x3c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d205      	bcs.n	80083fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083f0:	f000 f93a 	bl	8008668 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	e002      	b.n	8008402 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008402:	4a04      	ldr	r2, [pc, #16]	@ (8008414 <prvSampleTimeNow+0x3c>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008408:	68fb      	ldr	r3, [r7, #12]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	200079d8 	.word	0x200079d8

08008418 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
 8008424:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	429a      	cmp	r2, r3
 800843c:	d812      	bhi.n	8008464 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	1ad2      	subs	r2, r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	429a      	cmp	r2, r3
 800844a:	d302      	bcc.n	8008452 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800844c:	2301      	movs	r3, #1
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	e01b      	b.n	800848a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008452:	4b10      	ldr	r3, [pc, #64]	@ (8008494 <prvInsertTimerInActiveList+0x7c>)
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3304      	adds	r3, #4
 800845a:	4619      	mov	r1, r3
 800845c:	4610      	mov	r0, r2
 800845e:	f7fe f9be 	bl	80067de <vListInsert>
 8008462:	e012      	b.n	800848a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	429a      	cmp	r2, r3
 800846a:	d206      	bcs.n	800847a <prvInsertTimerInActiveList+0x62>
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d302      	bcc.n	800847a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008474:	2301      	movs	r3, #1
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e007      	b.n	800848a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800847a:	4b07      	ldr	r3, [pc, #28]	@ (8008498 <prvInsertTimerInActiveList+0x80>)
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3304      	adds	r3, #4
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f7fe f9aa 	bl	80067de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800848a:	697b      	ldr	r3, [r7, #20]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3718      	adds	r7, #24
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	200079cc 	.word	0x200079cc
 8008498:	200079c8 	.word	0x200079c8

0800849c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b08e      	sub	sp, #56	@ 0x38
 80084a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084a2:	e0ce      	b.n	8008642 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da19      	bge.n	80084de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084aa:	1d3b      	adds	r3, r7, #4
 80084ac:	3304      	adds	r3, #4
 80084ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	61fb      	str	r3, [r7, #28]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084d4:	6850      	ldr	r0, [r2, #4]
 80084d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084d8:	6892      	ldr	r2, [r2, #8]
 80084da:	4611      	mov	r1, r2
 80084dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f2c0 80ae 	blt.w	8008642 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ec:	695b      	ldr	r3, [r3, #20]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f4:	3304      	adds	r3, #4
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe f9aa 	bl	8006850 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084fc:	463b      	mov	r3, r7
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff ff6a 	bl	80083d8 <prvSampleTimeNow>
 8008504:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b09      	cmp	r3, #9
 800850a:	f200 8097 	bhi.w	800863c <prvProcessReceivedCommands+0x1a0>
 800850e:	a201      	add	r2, pc, #4	@ (adr r2, 8008514 <prvProcessReceivedCommands+0x78>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	0800853d 	.word	0x0800853d
 8008518:	0800853d 	.word	0x0800853d
 800851c:	0800853d 	.word	0x0800853d
 8008520:	080085b3 	.word	0x080085b3
 8008524:	080085c7 	.word	0x080085c7
 8008528:	08008613 	.word	0x08008613
 800852c:	0800853d 	.word	0x0800853d
 8008530:	0800853d 	.word	0x0800853d
 8008534:	080085b3 	.word	0x080085b3
 8008538:	080085c7 	.word	0x080085c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800853c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008542:	f043 0301 	orr.w	r3, r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	18d1      	adds	r1, r2, r3
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800855a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800855c:	f7ff ff5c 	bl	8008418 <prvInsertTimerInActiveList>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d06c      	beq.n	8008640 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800856c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800856e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b00      	cmp	r3, #0
 800857a:	d061      	beq.n	8008640 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	441a      	add	r2, r3
 8008584:	2300      	movs	r3, #0
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	2300      	movs	r3, #0
 800858a:	2100      	movs	r1, #0
 800858c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800858e:	f7ff fe01 	bl	8008194 <xTimerGenericCommand>
 8008592:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d152      	bne.n	8008640 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	61bb      	str	r3, [r7, #24]
}
 80085ac:	bf00      	nop
 80085ae:	bf00      	nop
 80085b0:	e7fd      	b.n	80085ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085b8:	f023 0301 	bic.w	r3, r3, #1
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80085c4:	e03d      	b.n	8008642 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085cc:	f043 0301 	orr.w	r3, r3, #1
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10b      	bne.n	80085fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	617b      	str	r3, [r7, #20]
}
 80085f8:	bf00      	nop
 80085fa:	bf00      	nop
 80085fc:	e7fd      	b.n	80085fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008600:	699a      	ldr	r2, [r3, #24]
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	18d1      	adds	r1, r2, r3
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800860a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800860c:	f7ff ff04 	bl	8008418 <prvInsertTimerInActiveList>
					break;
 8008610:	e017      	b.n	8008642 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d103      	bne.n	8008628 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008622:	f000 fbe9 	bl	8008df8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008626:	e00c      	b.n	8008642 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800862e:	f023 0301 	bic.w	r3, r3, #1
 8008632:	b2da      	uxtb	r2, r3
 8008634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008636:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800863a:	e002      	b.n	8008642 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800863c:	bf00      	nop
 800863e:	e000      	b.n	8008642 <prvProcessReceivedCommands+0x1a6>
					break;
 8008640:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008642:	4b08      	ldr	r3, [pc, #32]	@ (8008664 <prvProcessReceivedCommands+0x1c8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	1d39      	adds	r1, r7, #4
 8008648:	2200      	movs	r2, #0
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe fbd4 	bl	8006df8 <xQueueReceive>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	f47f af26 	bne.w	80084a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	3730      	adds	r7, #48	@ 0x30
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	200079d0 	.word	0x200079d0

08008668 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800866e:	e049      	b.n	8008704 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008670:	4b2e      	ldr	r3, [pc, #184]	@ (800872c <prvSwitchTimerLists+0xc4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800867a:	4b2c      	ldr	r3, [pc, #176]	@ (800872c <prvSwitchTimerLists+0xc4>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3304      	adds	r3, #4
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe f8e1 	bl	8006850 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800869c:	f003 0304 	and.w	r3, r3, #4
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d02f      	beq.n	8008704 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4413      	add	r3, r2
 80086ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d90e      	bls.n	80086d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086c2:	4b1a      	ldr	r3, [pc, #104]	@ (800872c <prvSwitchTimerLists+0xc4>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3304      	adds	r3, #4
 80086ca:	4619      	mov	r1, r3
 80086cc:	4610      	mov	r0, r2
 80086ce:	f7fe f886 	bl	80067de <vListInsert>
 80086d2:	e017      	b.n	8008704 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086d4:	2300      	movs	r3, #0
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	2300      	movs	r3, #0
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	2100      	movs	r1, #0
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f7ff fd58 	bl	8008194 <xTimerGenericCommand>
 80086e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d10b      	bne.n	8008704 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	603b      	str	r3, [r7, #0]
}
 80086fe:	bf00      	nop
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008704:	4b09      	ldr	r3, [pc, #36]	@ (800872c <prvSwitchTimerLists+0xc4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1b0      	bne.n	8008670 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800870e:	4b07      	ldr	r3, [pc, #28]	@ (800872c <prvSwitchTimerLists+0xc4>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008714:	4b06      	ldr	r3, [pc, #24]	@ (8008730 <prvSwitchTimerLists+0xc8>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a04      	ldr	r2, [pc, #16]	@ (800872c <prvSwitchTimerLists+0xc4>)
 800871a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800871c:	4a04      	ldr	r2, [pc, #16]	@ (8008730 <prvSwitchTimerLists+0xc8>)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	6013      	str	r3, [r2, #0]
}
 8008722:	bf00      	nop
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	200079c8 	.word	0x200079c8
 8008730:	200079cc 	.word	0x200079cc

08008734 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800873a:	f000 f96d 	bl	8008a18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800873e:	4b15      	ldr	r3, [pc, #84]	@ (8008794 <prvCheckForValidListAndQueue+0x60>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d120      	bne.n	8008788 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008746:	4814      	ldr	r0, [pc, #80]	@ (8008798 <prvCheckForValidListAndQueue+0x64>)
 8008748:	f7fd fff8 	bl	800673c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800874c:	4813      	ldr	r0, [pc, #76]	@ (800879c <prvCheckForValidListAndQueue+0x68>)
 800874e:	f7fd fff5 	bl	800673c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008752:	4b13      	ldr	r3, [pc, #76]	@ (80087a0 <prvCheckForValidListAndQueue+0x6c>)
 8008754:	4a10      	ldr	r2, [pc, #64]	@ (8008798 <prvCheckForValidListAndQueue+0x64>)
 8008756:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008758:	4b12      	ldr	r3, [pc, #72]	@ (80087a4 <prvCheckForValidListAndQueue+0x70>)
 800875a:	4a10      	ldr	r2, [pc, #64]	@ (800879c <prvCheckForValidListAndQueue+0x68>)
 800875c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800875e:	2300      	movs	r3, #0
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	4b11      	ldr	r3, [pc, #68]	@ (80087a8 <prvCheckForValidListAndQueue+0x74>)
 8008764:	4a11      	ldr	r2, [pc, #68]	@ (80087ac <prvCheckForValidListAndQueue+0x78>)
 8008766:	2110      	movs	r1, #16
 8008768:	200a      	movs	r0, #10
 800876a:	f7fe f905 	bl	8006978 <xQueueGenericCreateStatic>
 800876e:	4603      	mov	r3, r0
 8008770:	4a08      	ldr	r2, [pc, #32]	@ (8008794 <prvCheckForValidListAndQueue+0x60>)
 8008772:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008774:	4b07      	ldr	r3, [pc, #28]	@ (8008794 <prvCheckForValidListAndQueue+0x60>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800877c:	4b05      	ldr	r3, [pc, #20]	@ (8008794 <prvCheckForValidListAndQueue+0x60>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	490b      	ldr	r1, [pc, #44]	@ (80087b0 <prvCheckForValidListAndQueue+0x7c>)
 8008782:	4618      	mov	r0, r3
 8008784:	f7fe fd2a 	bl	80071dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008788:	f000 f978 	bl	8008a7c <vPortExitCritical>
}
 800878c:	bf00      	nop
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	200079d0 	.word	0x200079d0
 8008798:	200079a0 	.word	0x200079a0
 800879c:	200079b4 	.word	0x200079b4
 80087a0:	200079c8 	.word	0x200079c8
 80087a4:	200079cc 	.word	0x200079cc
 80087a8:	20007a7c 	.word	0x20007a7c
 80087ac:	200079dc 	.word	0x200079dc
 80087b0:	08019c80 	.word	0x08019c80

080087b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3b04      	subs	r3, #4
 80087c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80087cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3b04      	subs	r3, #4
 80087d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f023 0201 	bic.w	r2, r3, #1
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b04      	subs	r3, #4
 80087e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008818 <pxPortInitialiseStack+0x64>)
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3b14      	subs	r3, #20
 80087ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3b04      	subs	r3, #4
 80087fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f06f 0202 	mvn.w	r2, #2
 8008802:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3b20      	subs	r3, #32
 8008808:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800880a:	68fb      	ldr	r3, [r7, #12]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	0800881d 	.word	0x0800881d

0800881c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008826:	4b13      	ldr	r3, [pc, #76]	@ (8008874 <prvTaskExitError+0x58>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800882e:	d00b      	beq.n	8008848 <prvTaskExitError+0x2c>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	60fb      	str	r3, [r7, #12]
}
 8008842:	bf00      	nop
 8008844:	bf00      	nop
 8008846:	e7fd      	b.n	8008844 <prvTaskExitError+0x28>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	60bb      	str	r3, [r7, #8]
}
 800885a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800885c:	bf00      	nop
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0fc      	beq.n	800885e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20000010 	.word	0x20000010
	...

08008880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008880:	4b07      	ldr	r3, [pc, #28]	@ (80088a0 <pxCurrentTCBConst2>)
 8008882:	6819      	ldr	r1, [r3, #0]
 8008884:	6808      	ldr	r0, [r1, #0]
 8008886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888a:	f380 8809 	msr	PSP, r0
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f04f 0000 	mov.w	r0, #0
 8008896:	f380 8811 	msr	BASEPRI, r0
 800889a:	4770      	bx	lr
 800889c:	f3af 8000 	nop.w

080088a0 <pxCurrentTCBConst2>:
 80088a0:	200074a0 	.word	0x200074a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop

080088a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088a8:	4808      	ldr	r0, [pc, #32]	@ (80088cc <prvPortStartFirstTask+0x24>)
 80088aa:	6800      	ldr	r0, [r0, #0]
 80088ac:	6800      	ldr	r0, [r0, #0]
 80088ae:	f380 8808 	msr	MSP, r0
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f380 8814 	msr	CONTROL, r0
 80088ba:	b662      	cpsie	i
 80088bc:	b661      	cpsie	f
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	df00      	svc	0
 80088c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088ca:	bf00      	nop
 80088cc:	e000ed08 	.word	0xe000ed08

080088d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088d6:	4b47      	ldr	r3, [pc, #284]	@ (80089f4 <xPortStartScheduler+0x124>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a47      	ldr	r2, [pc, #284]	@ (80089f8 <xPortStartScheduler+0x128>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d10b      	bne.n	80088f8 <xPortStartScheduler+0x28>
	__asm volatile
 80088e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	60fb      	str	r3, [r7, #12]
}
 80088f2:	bf00      	nop
 80088f4:	bf00      	nop
 80088f6:	e7fd      	b.n	80088f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088f8:	4b3e      	ldr	r3, [pc, #248]	@ (80089f4 <xPortStartScheduler+0x124>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a3f      	ldr	r2, [pc, #252]	@ (80089fc <xPortStartScheduler+0x12c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d10b      	bne.n	800891a <xPortStartScheduler+0x4a>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	613b      	str	r3, [r7, #16]
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	e7fd      	b.n	8008916 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800891a:	4b39      	ldr	r3, [pc, #228]	@ (8008a00 <xPortStartScheduler+0x130>)
 800891c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	22ff      	movs	r2, #255	@ 0xff
 800892a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008934:	78fb      	ldrb	r3, [r7, #3]
 8008936:	b2db      	uxtb	r3, r3
 8008938:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800893c:	b2da      	uxtb	r2, r3
 800893e:	4b31      	ldr	r3, [pc, #196]	@ (8008a04 <xPortStartScheduler+0x134>)
 8008940:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008942:	4b31      	ldr	r3, [pc, #196]	@ (8008a08 <xPortStartScheduler+0x138>)
 8008944:	2207      	movs	r2, #7
 8008946:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008948:	e009      	b.n	800895e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800894a:	4b2f      	ldr	r3, [pc, #188]	@ (8008a08 <xPortStartScheduler+0x138>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3b01      	subs	r3, #1
 8008950:	4a2d      	ldr	r2, [pc, #180]	@ (8008a08 <xPortStartScheduler+0x138>)
 8008952:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008954:	78fb      	ldrb	r3, [r7, #3]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008966:	2b80      	cmp	r3, #128	@ 0x80
 8008968:	d0ef      	beq.n	800894a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800896a:	4b27      	ldr	r3, [pc, #156]	@ (8008a08 <xPortStartScheduler+0x138>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f1c3 0307 	rsb	r3, r3, #7
 8008972:	2b04      	cmp	r3, #4
 8008974:	d00b      	beq.n	800898e <xPortStartScheduler+0xbe>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	60bb      	str	r3, [r7, #8]
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	e7fd      	b.n	800898a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800898e:	4b1e      	ldr	r3, [pc, #120]	@ (8008a08 <xPortStartScheduler+0x138>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	021b      	lsls	r3, r3, #8
 8008994:	4a1c      	ldr	r2, [pc, #112]	@ (8008a08 <xPortStartScheduler+0x138>)
 8008996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008998:	4b1b      	ldr	r3, [pc, #108]	@ (8008a08 <xPortStartScheduler+0x138>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089a0:	4a19      	ldr	r2, [pc, #100]	@ (8008a08 <xPortStartScheduler+0x138>)
 80089a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	b2da      	uxtb	r2, r3
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089ac:	4b17      	ldr	r3, [pc, #92]	@ (8008a0c <xPortStartScheduler+0x13c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a16      	ldr	r2, [pc, #88]	@ (8008a0c <xPortStartScheduler+0x13c>)
 80089b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80089b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089b8:	4b14      	ldr	r3, [pc, #80]	@ (8008a0c <xPortStartScheduler+0x13c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a13      	ldr	r2, [pc, #76]	@ (8008a0c <xPortStartScheduler+0x13c>)
 80089be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80089c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089c4:	f000 f8da 	bl	8008b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089c8:	4b11      	ldr	r3, [pc, #68]	@ (8008a10 <xPortStartScheduler+0x140>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089ce:	f000 f8f9 	bl	8008bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089d2:	4b10      	ldr	r3, [pc, #64]	@ (8008a14 <xPortStartScheduler+0x144>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008a14 <xPortStartScheduler+0x144>)
 80089d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80089dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089de:	f7ff ff63 	bl	80088a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089e2:	f7ff f813 	bl	8007a0c <vTaskSwitchContext>
	prvTaskExitError();
 80089e6:	f7ff ff19 	bl	800881c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	e000ed00 	.word	0xe000ed00
 80089f8:	410fc271 	.word	0x410fc271
 80089fc:	410fc270 	.word	0x410fc270
 8008a00:	e000e400 	.word	0xe000e400
 8008a04:	20007acc 	.word	0x20007acc
 8008a08:	20007ad0 	.word	0x20007ad0
 8008a0c:	e000ed20 	.word	0xe000ed20
 8008a10:	20000010 	.word	0x20000010
 8008a14:	e000ef34 	.word	0xe000ef34

08008a18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	607b      	str	r3, [r7, #4]
}
 8008a30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a32:	4b10      	ldr	r3, [pc, #64]	@ (8008a74 <vPortEnterCritical+0x5c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3301      	adds	r3, #1
 8008a38:	4a0e      	ldr	r2, [pc, #56]	@ (8008a74 <vPortEnterCritical+0x5c>)
 8008a3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a74 <vPortEnterCritical+0x5c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d110      	bne.n	8008a66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a44:	4b0c      	ldr	r3, [pc, #48]	@ (8008a78 <vPortEnterCritical+0x60>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00b      	beq.n	8008a66 <vPortEnterCritical+0x4e>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	603b      	str	r3, [r7, #0]
}
 8008a60:	bf00      	nop
 8008a62:	bf00      	nop
 8008a64:	e7fd      	b.n	8008a62 <vPortEnterCritical+0x4a>
	}
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000010 	.word	0x20000010
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a82:	4b12      	ldr	r3, [pc, #72]	@ (8008acc <vPortExitCritical+0x50>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10b      	bne.n	8008aa2 <vPortExitCritical+0x26>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	607b      	str	r3, [r7, #4]
}
 8008a9c:	bf00      	nop
 8008a9e:	bf00      	nop
 8008aa0:	e7fd      	b.n	8008a9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8008acc <vPortExitCritical+0x50>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	4a08      	ldr	r2, [pc, #32]	@ (8008acc <vPortExitCritical+0x50>)
 8008aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008aac:	4b07      	ldr	r3, [pc, #28]	@ (8008acc <vPortExitCritical+0x50>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d105      	bne.n	8008ac0 <vPortExitCritical+0x44>
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	f383 8811 	msr	BASEPRI, r3
}
 8008abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	20000010 	.word	0x20000010

08008ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ad0:	f3ef 8009 	mrs	r0, PSP
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	4b15      	ldr	r3, [pc, #84]	@ (8008b30 <pxCurrentTCBConst>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	f01e 0f10 	tst.w	lr, #16
 8008ae0:	bf08      	it	eq
 8008ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aea:	6010      	str	r0, [r2, #0]
 8008aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008af4:	f380 8811 	msr	BASEPRI, r0
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f7fe ff84 	bl	8007a0c <vTaskSwitchContext>
 8008b04:	f04f 0000 	mov.w	r0, #0
 8008b08:	f380 8811 	msr	BASEPRI, r0
 8008b0c:	bc09      	pop	{r0, r3}
 8008b0e:	6819      	ldr	r1, [r3, #0]
 8008b10:	6808      	ldr	r0, [r1, #0]
 8008b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b16:	f01e 0f10 	tst.w	lr, #16
 8008b1a:	bf08      	it	eq
 8008b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b20:	f380 8809 	msr	PSP, r0
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	f3af 8000 	nop.w

08008b30 <pxCurrentTCBConst>:
 8008b30:	200074a0 	.word	0x200074a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b34:	bf00      	nop
 8008b36:	bf00      	nop

08008b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	607b      	str	r3, [r7, #4]
}
 8008b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b52:	f7fe fea1 	bl	8007898 <xTaskIncrementTick>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d003      	beq.n	8008b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b5c:	4b06      	ldr	r3, [pc, #24]	@ (8008b78 <xPortSysTickHandler+0x40>)
 8008b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	2300      	movs	r3, #0
 8008b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	f383 8811 	msr	BASEPRI, r3
}
 8008b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	e000ed04 	.word	0xe000ed04

08008b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b80:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb0 <vPortSetupTimerInterrupt+0x34>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b86:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb4 <vPortSetupTimerInterrupt+0x38>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <vPortSetupTimerInterrupt+0x3c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a0a      	ldr	r2, [pc, #40]	@ (8008bbc <vPortSetupTimerInterrupt+0x40>)
 8008b92:	fba2 2303 	umull	r2, r3, r2, r3
 8008b96:	099b      	lsrs	r3, r3, #6
 8008b98:	4a09      	ldr	r2, [pc, #36]	@ (8008bc0 <vPortSetupTimerInterrupt+0x44>)
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b9e:	4b04      	ldr	r3, [pc, #16]	@ (8008bb0 <vPortSetupTimerInterrupt+0x34>)
 8008ba0:	2207      	movs	r2, #7
 8008ba2:	601a      	str	r2, [r3, #0]
}
 8008ba4:	bf00      	nop
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	e000e010 	.word	0xe000e010
 8008bb4:	e000e018 	.word	0xe000e018
 8008bb8:	20000004 	.word	0x20000004
 8008bbc:	10624dd3 	.word	0x10624dd3
 8008bc0:	e000e014 	.word	0xe000e014

08008bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008bd4 <vPortEnableVFP+0x10>
 8008bc8:	6801      	ldr	r1, [r0, #0]
 8008bca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008bce:	6001      	str	r1, [r0, #0]
 8008bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bd2:	bf00      	nop
 8008bd4:	e000ed88 	.word	0xe000ed88

08008bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bde:	f3ef 8305 	mrs	r3, IPSR
 8008be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b0f      	cmp	r3, #15
 8008be8:	d915      	bls.n	8008c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bea:	4a18      	ldr	r2, [pc, #96]	@ (8008c4c <vPortValidateInterruptPriority+0x74>)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bf4:	4b16      	ldr	r3, [pc, #88]	@ (8008c50 <vPortValidateInterruptPriority+0x78>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	7afa      	ldrb	r2, [r7, #11]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d20b      	bcs.n	8008c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	607b      	str	r3, [r7, #4]
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	e7fd      	b.n	8008c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c16:	4b0f      	ldr	r3, [pc, #60]	@ (8008c54 <vPortValidateInterruptPriority+0x7c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c58 <vPortValidateInterruptPriority+0x80>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d90b      	bls.n	8008c3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	603b      	str	r3, [r7, #0]
}
 8008c38:	bf00      	nop
 8008c3a:	bf00      	nop
 8008c3c:	e7fd      	b.n	8008c3a <vPortValidateInterruptPriority+0x62>
	}
 8008c3e:	bf00      	nop
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	e000e3f0 	.word	0xe000e3f0
 8008c50:	20007acc 	.word	0x20007acc
 8008c54:	e000ed0c 	.word	0xe000ed0c
 8008c58:	20007ad0 	.word	0x20007ad0

08008c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08a      	sub	sp, #40	@ 0x28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c64:	2300      	movs	r3, #0
 8008c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c68:	f7fe fd5a 	bl	8007720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c6c:	4b5c      	ldr	r3, [pc, #368]	@ (8008de0 <pvPortMalloc+0x184>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c74:	f000 f924 	bl	8008ec0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c78:	4b5a      	ldr	r3, [pc, #360]	@ (8008de4 <pvPortMalloc+0x188>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f040 8095 	bne.w	8008db0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01e      	beq.n	8008cca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c8c:	2208      	movs	r2, #8
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4413      	add	r3, r2
 8008c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f003 0307 	and.w	r3, r3, #7
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d015      	beq.n	8008cca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f023 0307 	bic.w	r3, r3, #7
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f003 0307 	and.w	r3, r3, #7
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00b      	beq.n	8008cca <pvPortMalloc+0x6e>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	617b      	str	r3, [r7, #20]
}
 8008cc4:	bf00      	nop
 8008cc6:	bf00      	nop
 8008cc8:	e7fd      	b.n	8008cc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d06f      	beq.n	8008db0 <pvPortMalloc+0x154>
 8008cd0:	4b45      	ldr	r3, [pc, #276]	@ (8008de8 <pvPortMalloc+0x18c>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d86a      	bhi.n	8008db0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cda:	4b44      	ldr	r3, [pc, #272]	@ (8008dec <pvPortMalloc+0x190>)
 8008cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cde:	4b43      	ldr	r3, [pc, #268]	@ (8008dec <pvPortMalloc+0x190>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ce4:	e004      	b.n	8008cf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d903      	bls.n	8008d02 <pvPortMalloc+0xa6>
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1f1      	bne.n	8008ce6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d02:	4b37      	ldr	r3, [pc, #220]	@ (8008de0 <pvPortMalloc+0x184>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d051      	beq.n	8008db0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2208      	movs	r2, #8
 8008d12:	4413      	add	r3, r2
 8008d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	1ad2      	subs	r2, r2, r3
 8008d26:	2308      	movs	r3, #8
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d920      	bls.n	8008d70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4413      	add	r3, r2
 8008d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	f003 0307 	and.w	r3, r3, #7
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <pvPortMalloc+0xfc>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	613b      	str	r3, [r7, #16]
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	e7fd      	b.n	8008d54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	1ad2      	subs	r2, r2, r3
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d6a:	69b8      	ldr	r0, [r7, #24]
 8008d6c:	f000 f90a 	bl	8008f84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d70:	4b1d      	ldr	r3, [pc, #116]	@ (8008de8 <pvPortMalloc+0x18c>)
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008de8 <pvPortMalloc+0x18c>)
 8008d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008de8 <pvPortMalloc+0x18c>)
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	4b1b      	ldr	r3, [pc, #108]	@ (8008df0 <pvPortMalloc+0x194>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d203      	bcs.n	8008d92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d8a:	4b17      	ldr	r3, [pc, #92]	@ (8008de8 <pvPortMalloc+0x18c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a18      	ldr	r2, [pc, #96]	@ (8008df0 <pvPortMalloc+0x194>)
 8008d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	4b13      	ldr	r3, [pc, #76]	@ (8008de4 <pvPortMalloc+0x188>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008da6:	4b13      	ldr	r3, [pc, #76]	@ (8008df4 <pvPortMalloc+0x198>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3301      	adds	r3, #1
 8008dac:	4a11      	ldr	r2, [pc, #68]	@ (8008df4 <pvPortMalloc+0x198>)
 8008dae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008db0:	f7fe fcc4 	bl	800773c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	f003 0307 	and.w	r3, r3, #7
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00b      	beq.n	8008dd6 <pvPortMalloc+0x17a>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	60fb      	str	r3, [r7, #12]
}
 8008dd0:	bf00      	nop
 8008dd2:	bf00      	nop
 8008dd4:	e7fd      	b.n	8008dd2 <pvPortMalloc+0x176>
	return pvReturn;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3728      	adds	r7, #40	@ 0x28
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	2000b6dc 	.word	0x2000b6dc
 8008de4:	2000b6f0 	.word	0x2000b6f0
 8008de8:	2000b6e0 	.word	0x2000b6e0
 8008dec:	2000b6d4 	.word	0x2000b6d4
 8008df0:	2000b6e4 	.word	0x2000b6e4
 8008df4:	2000b6e8 	.word	0x2000b6e8

08008df8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d04f      	beq.n	8008eaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e0a:	2308      	movs	r3, #8
 8008e0c:	425b      	negs	r3, r3
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4413      	add	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	4b25      	ldr	r3, [pc, #148]	@ (8008eb4 <vPortFree+0xbc>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4013      	ands	r3, r2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10b      	bne.n	8008e3e <vPortFree+0x46>
	__asm volatile
 8008e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2a:	f383 8811 	msr	BASEPRI, r3
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	60fb      	str	r3, [r7, #12]
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	e7fd      	b.n	8008e3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <vPortFree+0x66>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	60bb      	str	r3, [r7, #8]
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	4b14      	ldr	r3, [pc, #80]	@ (8008eb4 <vPortFree+0xbc>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4013      	ands	r3, r2
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01e      	beq.n	8008eaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d11a      	bne.n	8008eaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb4 <vPortFree+0xbc>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	43db      	mvns	r3, r3
 8008e7e:	401a      	ands	r2, r3
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e84:	f7fe fc4c 	bl	8007720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb8 <vPortFree+0xc0>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4413      	add	r3, r2
 8008e92:	4a09      	ldr	r2, [pc, #36]	@ (8008eb8 <vPortFree+0xc0>)
 8008e94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e96:	6938      	ldr	r0, [r7, #16]
 8008e98:	f000 f874 	bl	8008f84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e9c:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <vPortFree+0xc4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	4a06      	ldr	r2, [pc, #24]	@ (8008ebc <vPortFree+0xc4>)
 8008ea4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ea6:	f7fe fc49 	bl	800773c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008eaa:	bf00      	nop
 8008eac:	3718      	adds	r7, #24
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	2000b6f0 	.word	0x2000b6f0
 8008eb8:	2000b6e0 	.word	0x2000b6e0
 8008ebc:	2000b6ec 	.word	0x2000b6ec

08008ec0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ec6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008eca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ecc:	4b27      	ldr	r3, [pc, #156]	@ (8008f6c <prvHeapInit+0xac>)
 8008ece:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00c      	beq.n	8008ef4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3307      	adds	r3, #7
 8008ede:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 0307 	bic.w	r3, r3, #7
 8008ee6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	1ad3      	subs	r3, r2, r3
 8008eee:	4a1f      	ldr	r2, [pc, #124]	@ (8008f6c <prvHeapInit+0xac>)
 8008ef0:	4413      	add	r3, r2
 8008ef2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f70 <prvHeapInit+0xb0>)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008efe:	4b1c      	ldr	r3, [pc, #112]	@ (8008f70 <prvHeapInit+0xb0>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	4413      	add	r3, r2
 8008f0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f0c:	2208      	movs	r2, #8
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	1a9b      	subs	r3, r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f023 0307 	bic.w	r3, r3, #7
 8008f1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4a15      	ldr	r2, [pc, #84]	@ (8008f74 <prvHeapInit+0xb4>)
 8008f20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f22:	4b14      	ldr	r3, [pc, #80]	@ (8008f74 <prvHeapInit+0xb4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2200      	movs	r2, #0
 8008f28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f2a:	4b12      	ldr	r3, [pc, #72]	@ (8008f74 <prvHeapInit+0xb4>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	1ad2      	subs	r2, r2, r3
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f40:	4b0c      	ldr	r3, [pc, #48]	@ (8008f74 <prvHeapInit+0xb4>)
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8008f78 <prvHeapInit+0xb8>)
 8008f4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	4a09      	ldr	r2, [pc, #36]	@ (8008f7c <prvHeapInit+0xbc>)
 8008f56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f58:	4b09      	ldr	r3, [pc, #36]	@ (8008f80 <prvHeapInit+0xc0>)
 8008f5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f5e:	601a      	str	r2, [r3, #0]
}
 8008f60:	bf00      	nop
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	20007ad4 	.word	0x20007ad4
 8008f70:	2000b6d4 	.word	0x2000b6d4
 8008f74:	2000b6dc 	.word	0x2000b6dc
 8008f78:	2000b6e4 	.word	0x2000b6e4
 8008f7c:	2000b6e0 	.word	0x2000b6e0
 8008f80:	2000b6f0 	.word	0x2000b6f0

08008f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f8c:	4b28      	ldr	r3, [pc, #160]	@ (8009030 <prvInsertBlockIntoFreeList+0xac>)
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	e002      	b.n	8008f98 <prvInsertBlockIntoFreeList+0x14>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d8f7      	bhi.n	8008f92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	4413      	add	r3, r2
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d108      	bne.n	8008fc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	441a      	add	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d118      	bne.n	800900c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	4b15      	ldr	r3, [pc, #84]	@ (8009034 <prvInsertBlockIntoFreeList+0xb0>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d00d      	beq.n	8009002 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	441a      	add	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	e008      	b.n	8009014 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009002:	4b0c      	ldr	r3, [pc, #48]	@ (8009034 <prvInsertBlockIntoFreeList+0xb0>)
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	e003      	b.n	8009014 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	429a      	cmp	r2, r3
 800901a:	d002      	beq.n	8009022 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009022:	bf00      	nop
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
 800902e:	bf00      	nop
 8009030:	2000b6d4 	.word	0x2000b6d4
 8009034:	2000b6dc 	.word	0x2000b6dc

08009038 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 8009038:	4b04      	ldr	r3, [pc, #16]	@ (800904c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	b10a      	cbz	r2, 8009042 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xa>
 800903e:	4803      	ldr	r0, [pc, #12]	@ (800904c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 8009040:	4770      	bx	lr
 8009042:	4a03      	ldr	r2, [pc, #12]	@ (8009050 <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x18>)
 8009044:	4801      	ldr	r0, [pc, #4]	@ (800904c <rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x14>)
 8009046:	6812      	ldr	r2, [r2, #0]
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	4770      	bx	lr
 800904c:	20000014 	.word	0x20000014
 8009050:	20000184 	.word	0x20000184

08009054 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 8009054:	4a02      	ldr	r2, [pc, #8]	@ (8009060 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0xc>)
 8009056:	4b03      	ldr	r3, [pc, #12]	@ (8009064 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x10>)
 8009058:	6812      	ldr	r2, [r2, #0]
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	20000184 	.word	0x20000184
 8009064:	20000014 	.word	0x20000014

08009068 <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_init_function>:
 8009068:	f007 bc10 	b.w	801088c <nav_msgs__msg__Odometry__init>

0800906c <nav_msgs__msg__Odometry__rosidl_typesupport_introspection_c__Odometry_fini_function>:
 800906c:	f007 bc5a 	b.w	8010924 <nav_msgs__msg__Odometry__fini>

08009070 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 8009070:	b510      	push	{r4, lr}
 8009072:	f001 ffe3 	bl	800b03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8009076:	4c0a      	ldr	r4, [pc, #40]	@ (80090a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x30>)
 8009078:	60e0      	str	r0, [r4, #12]
 800907a:	f002 f921 	bl	800b2c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800907e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8009082:	f002 f951 	bl	800b328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 8009086:	4b07      	ldr	r3, [pc, #28]	@ (80090a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 8009088:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	b10a      	cbz	r2, 8009094 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x24>
 8009090:	4804      	ldr	r0, [pc, #16]	@ (80090a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 8009092:	bd10      	pop	{r4, pc}
 8009094:	4a04      	ldr	r2, [pc, #16]	@ (80090a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x38>)
 8009096:	4803      	ldr	r0, [pc, #12]	@ (80090a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x34>)
 8009098:	6812      	ldr	r2, [r2, #0]
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	bd10      	pop	{r4, pc}
 800909e:	bf00      	nop
 80090a0:	2000004c 	.word	0x2000004c
 80090a4:	20000034 	.word	0x20000034
 80090a8:	20000188 	.word	0x20000188

080090ac <get_serialized_size_nav_msgs__msg__Odometry>:
 80090ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ae:	4604      	mov	r4, r0
 80090b0:	b1c0      	cbz	r0, 80090e4 <get_serialized_size_nav_msgs__msg__Odometry+0x38>
 80090b2:	460e      	mov	r6, r1
 80090b4:	f001 ffe6 	bl	800b084 <get_serialized_size_std_msgs__msg__Header>
 80090b8:	1837      	adds	r7, r6, r0
 80090ba:	2104      	movs	r1, #4
 80090bc:	4638      	mov	r0, r7
 80090be:	f003 fef1 	bl	800cea4 <ucdr_alignment>
 80090c2:	69a5      	ldr	r5, [r4, #24]
 80090c4:	3505      	adds	r5, #5
 80090c6:	4405      	add	r5, r0
 80090c8:	443d      	add	r5, r7
 80090ca:	4629      	mov	r1, r5
 80090cc:	f104 0020 	add.w	r0, r4, #32
 80090d0:	f002 f940 	bl	800b354 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 80090d4:	4405      	add	r5, r0
 80090d6:	4629      	mov	r1, r5
 80090d8:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80090dc:	f002 f9aa 	bl	800b434 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 80090e0:	1b80      	subs	r0, r0, r6
 80090e2:	4428      	add	r0, r5
 80090e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090e6:	bf00      	nop

080090e8 <_Odometry__cdr_deserialize>:
 80090e8:	b570      	push	{r4, r5, r6, lr}
 80090ea:	460c      	mov	r4, r1
 80090ec:	b082      	sub	sp, #8
 80090ee:	b349      	cbz	r1, 8009144 <_Odometry__cdr_deserialize+0x5c>
 80090f0:	4605      	mov	r5, r0
 80090f2:	f002 f849 	bl	800b188 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80090f6:	6843      	ldr	r3, [r0, #4]
 80090f8:	4621      	mov	r1, r4
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	4628      	mov	r0, r5
 80090fe:	4798      	blx	r3
 8009100:	69e6      	ldr	r6, [r4, #28]
 8009102:	6961      	ldr	r1, [r4, #20]
 8009104:	ab01      	add	r3, sp, #4
 8009106:	4632      	mov	r2, r6
 8009108:	4628      	mov	r0, r5
 800910a:	f003 ff49 	bl	800cfa0 <ucdr_deserialize_sequence_char>
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	b9a0      	cbnz	r0, 800913c <_Odometry__cdr_deserialize+0x54>
 8009112:	429e      	cmp	r6, r3
 8009114:	d319      	bcc.n	800914a <_Odometry__cdr_deserialize+0x62>
 8009116:	f002 f989 	bl	800b42c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 800911a:	6843      	ldr	r3, [r0, #4]
 800911c:	f104 0120 	add.w	r1, r4, #32
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	4628      	mov	r0, r5
 8009124:	4798      	blx	r3
 8009126:	f002 f9f1 	bl	800b50c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 800912a:	6843      	ldr	r3, [r0, #4]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 8009132:	4628      	mov	r0, r5
 8009134:	b002      	add	sp, #8
 8009136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800913a:	4718      	bx	r3
 800913c:	b103      	cbz	r3, 8009140 <_Odometry__cdr_deserialize+0x58>
 800913e:	3b01      	subs	r3, #1
 8009140:	61a3      	str	r3, [r4, #24]
 8009142:	e7e8      	b.n	8009116 <_Odometry__cdr_deserialize+0x2e>
 8009144:	4608      	mov	r0, r1
 8009146:	b002      	add	sp, #8
 8009148:	bd70      	pop	{r4, r5, r6, pc}
 800914a:	2101      	movs	r1, #1
 800914c:	75a8      	strb	r0, [r5, #22]
 800914e:	7569      	strb	r1, [r5, #21]
 8009150:	61a0      	str	r0, [r4, #24]
 8009152:	4628      	mov	r0, r5
 8009154:	f003 febc 	bl	800ced0 <ucdr_align_to>
 8009158:	9901      	ldr	r1, [sp, #4]
 800915a:	4628      	mov	r0, r5
 800915c:	f003 feee 	bl	800cf3c <ucdr_advance_buffer>
 8009160:	e7d9      	b.n	8009116 <_Odometry__cdr_deserialize+0x2e>
 8009162:	bf00      	nop

08009164 <_Odometry__cdr_serialize>:
 8009164:	b348      	cbz	r0, 80091ba <_Odometry__cdr_serialize+0x56>
 8009166:	b570      	push	{r4, r5, r6, lr}
 8009168:	4604      	mov	r4, r0
 800916a:	460e      	mov	r6, r1
 800916c:	f002 f80c 	bl	800b188 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8009170:	6843      	ldr	r3, [r0, #4]
 8009172:	4631      	mov	r1, r6
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	4620      	mov	r0, r4
 8009178:	4798      	blx	r3
 800917a:	6965      	ldr	r5, [r4, #20]
 800917c:	b1d5      	cbz	r5, 80091b4 <_Odometry__cdr_serialize+0x50>
 800917e:	4628      	mov	r0, r5
 8009180:	f7f7 f8a6 	bl	80002d0 <strlen>
 8009184:	1c42      	adds	r2, r0, #1
 8009186:	4629      	mov	r1, r5
 8009188:	61a0      	str	r0, [r4, #24]
 800918a:	4630      	mov	r0, r6
 800918c:	f003 fef6 	bl	800cf7c <ucdr_serialize_sequence_char>
 8009190:	f002 f94c 	bl	800b42c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>
 8009194:	6843      	ldr	r3, [r0, #4]
 8009196:	4631      	mov	r1, r6
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f104 0020 	add.w	r0, r4, #32
 800919e:	4798      	blx	r3
 80091a0:	f002 f9b4 	bl	800b50c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>
 80091a4:	6843      	ldr	r3, [r0, #4]
 80091a6:	4631      	mov	r1, r6
 80091a8:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091b2:	4718      	bx	r3
 80091b4:	462a      	mov	r2, r5
 80091b6:	4628      	mov	r0, r5
 80091b8:	e7e5      	b.n	8009186 <_Odometry__cdr_serialize+0x22>
 80091ba:	4770      	bx	lr

080091bc <_Odometry__max_serialized_size>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	2301      	movs	r3, #1
 80091c2:	2100      	movs	r1, #0
 80091c4:	f10d 0007 	add.w	r0, sp, #7
 80091c8:	f88d 3007 	strb.w	r3, [sp, #7]
 80091cc:	f001 ffd2 	bl	800b174 <max_serialized_size_std_msgs__msg__Header>
 80091d0:	2300      	movs	r3, #0
 80091d2:	4601      	mov	r1, r0
 80091d4:	4604      	mov	r4, r0
 80091d6:	f10d 0007 	add.w	r0, sp, #7
 80091da:	f88d 3007 	strb.w	r3, [sp, #7]
 80091de:	f002 f915 	bl	800b40c <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 80091e2:	4404      	add	r4, r0
 80091e4:	4621      	mov	r1, r4
 80091e6:	f10d 0007 	add.w	r0, sp, #7
 80091ea:	f002 f97f 	bl	800b4ec <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 80091ee:	4420      	add	r0, r4
 80091f0:	b002      	add	sp, #8
 80091f2:	bd10      	pop	{r4, pc}

080091f4 <_Odometry__get_serialized_size>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	4604      	mov	r4, r0
 80091f8:	b1b8      	cbz	r0, 800922a <_Odometry__get_serialized_size+0x36>
 80091fa:	2100      	movs	r1, #0
 80091fc:	f001 ff42 	bl	800b084 <get_serialized_size_std_msgs__msg__Header>
 8009200:	2104      	movs	r1, #4
 8009202:	4606      	mov	r6, r0
 8009204:	f003 fe4e 	bl	800cea4 <ucdr_alignment>
 8009208:	69a5      	ldr	r5, [r4, #24]
 800920a:	3505      	adds	r5, #5
 800920c:	4603      	mov	r3, r0
 800920e:	4435      	add	r5, r6
 8009210:	441d      	add	r5, r3
 8009212:	4629      	mov	r1, r5
 8009214:	f104 0020 	add.w	r0, r4, #32
 8009218:	f002 f89c 	bl	800b354 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>
 800921c:	4405      	add	r5, r0
 800921e:	4629      	mov	r1, r5
 8009220:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8009224:	f002 f906 	bl	800b434 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>
 8009228:	4428      	add	r0, r5
 800922a:	bd70      	pop	{r4, r5, r6, pc}

0800922c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry>:
 800922c:	4800      	ldr	r0, [pc, #0]	@ (8009230 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__nav_msgs__msg__Odometry+0x4>)
 800922e:	4770      	bx	lr
 8009230:	2000013c 	.word	0x2000013c

08009234 <rcl_get_zero_initialized_publisher>:
 8009234:	4b01      	ldr	r3, [pc, #4]	@ (800923c <rcl_get_zero_initialized_publisher+0x8>)
 8009236:	6818      	ldr	r0, [r3, #0]
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	0801a5b8 	.word	0x0801a5b8

08009240 <rcl_publisher_init>:
 8009240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009244:	b088      	sub	sp, #32
 8009246:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8009248:	2d00      	cmp	r5, #0
 800924a:	d06a      	beq.n	8009322 <rcl_publisher_init+0xe2>
 800924c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8009250:	4604      	mov	r4, r0
 8009252:	4648      	mov	r0, r9
 8009254:	460e      	mov	r6, r1
 8009256:	4690      	mov	r8, r2
 8009258:	461f      	mov	r7, r3
 800925a:	f000 ffd5 	bl	800a208 <rcutils_allocator_is_valid>
 800925e:	2800      	cmp	r0, #0
 8009260:	d05f      	beq.n	8009322 <rcl_publisher_init+0xe2>
 8009262:	2c00      	cmp	r4, #0
 8009264:	d05d      	beq.n	8009322 <rcl_publisher_init+0xe2>
 8009266:	f8d4 a000 	ldr.w	sl, [r4]
 800926a:	f1ba 0f00 	cmp.w	sl, #0
 800926e:	d004      	beq.n	800927a <rcl_publisher_init+0x3a>
 8009270:	2764      	movs	r7, #100	@ 0x64
 8009272:	4638      	mov	r0, r7
 8009274:	b008      	add	sp, #32
 8009276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927a:	4630      	mov	r0, r6
 800927c:	f007 fffe 	bl	801127c <rcl_node_is_valid>
 8009280:	2800      	cmp	r0, #0
 8009282:	d053      	beq.n	800932c <rcl_publisher_init+0xec>
 8009284:	f1b8 0f00 	cmp.w	r8, #0
 8009288:	d04b      	beq.n	8009322 <rcl_publisher_init+0xe2>
 800928a:	2f00      	cmp	r7, #0
 800928c:	d049      	beq.n	8009322 <rcl_publisher_init+0xe2>
 800928e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8009292:	aa07      	add	r2, sp, #28
 8009294:	9205      	str	r2, [sp, #20]
 8009296:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800929a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800929e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80092a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80092a6:	4639      	mov	r1, r7
 80092a8:	e899 000c 	ldmia.w	r9, {r2, r3}
 80092ac:	4630      	mov	r0, r6
 80092ae:	f008 f875 	bl	801139c <rcl_node_resolve_name>
 80092b2:	4607      	mov	r7, r0
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d150      	bne.n	800935a <rcl_publisher_init+0x11a>
 80092b8:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 80092bc:	21c8      	movs	r1, #200	@ 0xc8
 80092be:	2001      	movs	r0, #1
 80092c0:	4798      	blx	r3
 80092c2:	6020      	str	r0, [r4, #0]
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d04e      	beq.n	8009366 <rcl_publisher_init+0x126>
 80092c8:	4630      	mov	r0, r6
 80092ca:	f007 fff9 	bl	80112c0 <rcl_node_get_rmw_handle>
 80092ce:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	9a07      	ldr	r2, [sp, #28]
 80092d6:	6827      	ldr	r7, [r4, #0]
 80092d8:	462b      	mov	r3, r5
 80092da:	4641      	mov	r1, r8
 80092dc:	f001 f8f8 	bl	800a4d0 <rmw_create_publisher>
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 80092e6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80092ea:	b370      	cbz	r0, 800934a <rcl_publisher_init+0x10a>
 80092ec:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 80092f0:	f001 f9ca 	bl	800a688 <rmw_publisher_get_actual_qos>
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	4607      	mov	r7, r0
 80092f8:	b9d0      	cbnz	r0, 8009330 <rcl_publisher_init+0xf0>
 80092fa:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 80092fe:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8009302:	4629      	mov	r1, r5
 8009304:	2270      	movs	r2, #112	@ 0x70
 8009306:	4618      	mov	r0, r3
 8009308:	f00f f8df 	bl	80184ca <memcpy>
 800930c:	6832      	ldr	r2, [r6, #0]
 800930e:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8009312:	9807      	ldr	r0, [sp, #28]
 8009314:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8009316:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009318:	4798      	blx	r3
 800931a:	4638      	mov	r0, r7
 800931c:	b008      	add	sp, #32
 800931e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009322:	270b      	movs	r7, #11
 8009324:	4638      	mov	r0, r7
 8009326:	b008      	add	sp, #32
 8009328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932c:	27c8      	movs	r7, #200	@ 0xc8
 800932e:	e7a0      	b.n	8009272 <rcl_publisher_init+0x32>
 8009330:	b18b      	cbz	r3, 8009356 <rcl_publisher_init+0x116>
 8009332:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8009336:	b142      	cbz	r2, 800934a <rcl_publisher_init+0x10a>
 8009338:	4630      	mov	r0, r6
 800933a:	f007 ffc1 	bl	80112c0 <rcl_node_get_rmw_handle>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8009344:	f001 f9ae 	bl	800a6a4 <rmw_destroy_publisher>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800934c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800934e:	4618      	mov	r0, r3
 8009350:	4790      	blx	r2
 8009352:	2300      	movs	r3, #0
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	2701      	movs	r7, #1
 8009358:	e7db      	b.n	8009312 <rcl_publisher_init+0xd2>
 800935a:	2867      	cmp	r0, #103	@ 0x67
 800935c:	d0d9      	beq.n	8009312 <rcl_publisher_init+0xd2>
 800935e:	2869      	cmp	r0, #105	@ 0x69
 8009360:	d003      	beq.n	800936a <rcl_publisher_init+0x12a>
 8009362:	280a      	cmp	r0, #10
 8009364:	d1f7      	bne.n	8009356 <rcl_publisher_init+0x116>
 8009366:	270a      	movs	r7, #10
 8009368:	e7d3      	b.n	8009312 <rcl_publisher_init+0xd2>
 800936a:	2767      	movs	r7, #103	@ 0x67
 800936c:	e7d1      	b.n	8009312 <rcl_publisher_init+0xd2>
 800936e:	bf00      	nop

08009370 <rcl_publisher_get_default_options>:
 8009370:	b530      	push	{r4, r5, lr}
 8009372:	4912      	ldr	r1, [pc, #72]	@ (80093bc <rcl_publisher_get_default_options+0x4c>)
 8009374:	b083      	sub	sp, #12
 8009376:	2250      	movs	r2, #80	@ 0x50
 8009378:	4604      	mov	r4, r0
 800937a:	f00f f8a6 	bl	80184ca <memcpy>
 800937e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009382:	f000 ff15 	bl	800a1b0 <rcutils_get_default_allocator>
 8009386:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800938a:	f000 ffd9 	bl	800a340 <rmw_get_default_publisher_options>
 800938e:	2500      	movs	r5, #0
 8009390:	f10d 0007 	add.w	r0, sp, #7
 8009394:	f88d 5007 	strb.w	r5, [sp, #7]
 8009398:	f007 ff98 	bl	80112cc <rcl_get_disable_loaned_message>
 800939c:	b930      	cbnz	r0, 80093ac <rcl_publisher_get_default_options+0x3c>
 800939e:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80093a2:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 80093a6:	4620      	mov	r0, r4
 80093a8:	b003      	add	sp, #12
 80093aa:	bd30      	pop	{r4, r5, pc}
 80093ac:	f000 ff58 	bl	800a260 <rcutils_reset_error>
 80093b0:	4620      	mov	r0, r4
 80093b2:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 80093b6:	b003      	add	sp, #12
 80093b8:	bd30      	pop	{r4, r5, pc}
 80093ba:	bf00      	nop
 80093bc:	0801a5c0 	.word	0x0801a5c0

080093c0 <rcl_publish>:
 80093c0:	b308      	cbz	r0, 8009406 <rcl_publish+0x46>
 80093c2:	6803      	ldr	r3, [r0, #0]
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	4604      	mov	r4, r0
 80093c8:	b1c3      	cbz	r3, 80093fc <rcl_publish+0x3c>
 80093ca:	4616      	mov	r6, r2
 80093cc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80093d0:	b1a2      	cbz	r2, 80093fc <rcl_publish+0x3c>
 80093d2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80093d6:	460d      	mov	r5, r1
 80093d8:	f007 fba2 	bl	8010b20 <rcl_context_is_valid>
 80093dc:	b160      	cbz	r0, 80093f8 <rcl_publish+0x38>
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80093e4:	b150      	cbz	r0, 80093fc <rcl_publish+0x3c>
 80093e6:	b165      	cbz	r5, 8009402 <rcl_publish+0x42>
 80093e8:	4632      	mov	r2, r6
 80093ea:	4629      	mov	r1, r5
 80093ec:	f001 f810 	bl	800a410 <rmw_publish>
 80093f0:	3800      	subs	r0, #0
 80093f2:	bf18      	it	ne
 80093f4:	2001      	movne	r0, #1
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	f000 ff14 	bl	800a224 <rcutils_error_is_set>
 80093fc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009400:	bd70      	pop	{r4, r5, r6, pc}
 8009402:	200b      	movs	r0, #11
 8009404:	bd70      	pop	{r4, r5, r6, pc}
 8009406:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800940a:	4770      	bx	lr

0800940c <rcl_publisher_is_valid>:
 800940c:	b1b0      	cbz	r0, 800943c <rcl_publisher_is_valid+0x30>
 800940e:	6803      	ldr	r3, [r0, #0]
 8009410:	b510      	push	{r4, lr}
 8009412:	4604      	mov	r4, r0
 8009414:	b183      	cbz	r3, 8009438 <rcl_publisher_is_valid+0x2c>
 8009416:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800941a:	b16a      	cbz	r2, 8009438 <rcl_publisher_is_valid+0x2c>
 800941c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8009420:	f007 fb7e 	bl	8010b20 <rcl_context_is_valid>
 8009424:	b130      	cbz	r0, 8009434 <rcl_publisher_is_valid+0x28>
 8009426:	6823      	ldr	r3, [r4, #0]
 8009428:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800942c:	3800      	subs	r0, #0
 800942e:	bf18      	it	ne
 8009430:	2001      	movne	r0, #1
 8009432:	bd10      	pop	{r4, pc}
 8009434:	f000 fef6 	bl	800a224 <rcutils_error_is_set>
 8009438:	2000      	movs	r0, #0
 800943a:	bd10      	pop	{r4, pc}
 800943c:	2000      	movs	r0, #0
 800943e:	4770      	bx	lr

08009440 <rcl_publisher_is_valid_except_context>:
 8009440:	b130      	cbz	r0, 8009450 <rcl_publisher_is_valid_except_context+0x10>
 8009442:	6800      	ldr	r0, [r0, #0]
 8009444:	b120      	cbz	r0, 8009450 <rcl_publisher_is_valid_except_context+0x10>
 8009446:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800944a:	3800      	subs	r0, #0
 800944c:	bf18      	it	ne
 800944e:	2001      	movne	r0, #1
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop

08009454 <_rclc_check_for_new_data>:
 8009454:	2800      	cmp	r0, #0
 8009456:	d046      	beq.n	80094e6 <_rclc_check_for_new_data+0x92>
 8009458:	b510      	push	{r4, lr}
 800945a:	7802      	ldrb	r2, [r0, #0]
 800945c:	b084      	sub	sp, #16
 800945e:	4603      	mov	r3, r0
 8009460:	2a0a      	cmp	r2, #10
 8009462:	d842      	bhi.n	80094ea <_rclc_check_for_new_data+0x96>
 8009464:	e8df f002 	tbb	[pc, r2]
 8009468:	14181212 	.word	0x14181212
 800946c:	06060614 	.word	0x06060614
 8009470:	2e1a      	.short	0x2e1a
 8009472:	16          	.byte	0x16
 8009473:	00          	.byte	0x00
 8009474:	6a0a      	ldr	r2, [r1, #32]
 8009476:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009478:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800947c:	3a00      	subs	r2, #0
 800947e:	bf18      	it	ne
 8009480:	2201      	movne	r2, #1
 8009482:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8009486:	2000      	movs	r0, #0
 8009488:	b004      	add	sp, #16
 800948a:	bd10      	pop	{r4, pc}
 800948c:	680a      	ldr	r2, [r1, #0]
 800948e:	e7f2      	b.n	8009476 <_rclc_check_for_new_data+0x22>
 8009490:	698a      	ldr	r2, [r1, #24]
 8009492:	e7f0      	b.n	8009476 <_rclc_check_for_new_data+0x22>
 8009494:	688a      	ldr	r2, [r1, #8]
 8009496:	e7ee      	b.n	8009476 <_rclc_check_for_new_data+0x22>
 8009498:	690a      	ldr	r2, [r1, #16]
 800949a:	e7ec      	b.n	8009476 <_rclc_check_for_new_data+0x22>
 800949c:	685c      	ldr	r4, [r3, #4]
 800949e:	4608      	mov	r0, r1
 80094a0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80094a4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80094a8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80094ac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80094b6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80094ba:	f104 0110 	add.w	r1, r4, #16
 80094be:	f009 fd53 	bl	8012f68 <rcl_action_client_wait_set_get_entities_ready>
 80094c2:	e7e1      	b.n	8009488 <_rclc_check_for_new_data+0x34>
 80094c4:	685c      	ldr	r4, [r3, #4]
 80094c6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 80094ca:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 80094ce:	e9cd 3200 	strd	r3, r2, [sp]
 80094d2:	4608      	mov	r0, r1
 80094d4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 80094d8:	f104 0220 	add.w	r2, r4, #32
 80094dc:	f104 0110 	add.w	r1, r4, #16
 80094e0:	f009 ff44 	bl	801336c <rcl_action_server_wait_set_get_entities_ready>
 80094e4:	e7d0      	b.n	8009488 <_rclc_check_for_new_data+0x34>
 80094e6:	200b      	movs	r0, #11
 80094e8:	4770      	bx	lr
 80094ea:	2001      	movs	r0, #1
 80094ec:	e7cc      	b.n	8009488 <_rclc_check_for_new_data+0x34>
 80094ee:	bf00      	nop

080094f0 <_rclc_take_new_data>:
 80094f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094f2:	b099      	sub	sp, #100	@ 0x64
 80094f4:	2800      	cmp	r0, #0
 80094f6:	f000 8082 	beq.w	80095fe <_rclc_take_new_data+0x10e>
 80094fa:	7803      	ldrb	r3, [r0, #0]
 80094fc:	4604      	mov	r4, r0
 80094fe:	2b0a      	cmp	r3, #10
 8009500:	f200 815d 	bhi.w	80097be <_rclc_take_new_data+0x2ce>
 8009504:	e8df f003 	tbb	[pc, r3]
 8009508:	31531f1f 	.word	0x31531f1f
 800950c:	06060631 	.word	0x06060631
 8009510:	4555      	.short	0x4555
 8009512:	53          	.byte	0x53
 8009513:	00          	.byte	0x00
 8009514:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009516:	6a0b      	ldr	r3, [r1, #32]
 8009518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d046      	beq.n	80095ae <_rclc_take_new_data+0xbe>
 8009520:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009524:	f104 0110 	add.w	r1, r4, #16
 8009528:	f007 ffe6 	bl	80114f8 <rcl_take_request>
 800952c:	4605      	mov	r5, r0
 800952e:	2800      	cmp	r0, #0
 8009530:	d03d      	beq.n	80095ae <_rclc_take_new_data+0xbe>
 8009532:	f240 2359 	movw	r3, #601	@ 0x259
 8009536:	4298      	cmp	r0, r3
 8009538:	d128      	bne.n	800958c <_rclc_take_new_data+0x9c>
 800953a:	2300      	movs	r3, #0
 800953c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 8009540:	4628      	mov	r0, r5
 8009542:	b019      	add	sp, #100	@ 0x64
 8009544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009546:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8009548:	680b      	ldr	r3, [r1, #0]
 800954a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954e:	b373      	cbz	r3, 80095ae <_rclc_take_new_data+0xbe>
 8009550:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8009554:	2300      	movs	r3, #0
 8009556:	aa0a      	add	r2, sp, #40	@ 0x28
 8009558:	f008 f8e2 	bl	8011720 <rcl_take>
 800955c:	4605      	mov	r5, r0
 800955e:	b330      	cbz	r0, 80095ae <_rclc_take_new_data+0xbe>
 8009560:	f240 1391 	movw	r3, #401	@ 0x191
 8009564:	4298      	cmp	r0, r3
 8009566:	d0e8      	beq.n	800953a <_rclc_take_new_data+0x4a>
 8009568:	e010      	b.n	800958c <_rclc_take_new_data+0x9c>
 800956a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800956c:	698b      	ldr	r3, [r1, #24]
 800956e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009572:	b1e3      	cbz	r3, 80095ae <_rclc_take_new_data+0xbe>
 8009574:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009578:	f104 0110 	add.w	r1, r4, #16
 800957c:	f007 fa40 	bl	8010a00 <rcl_take_response>
 8009580:	4605      	mov	r5, r0
 8009582:	b1a0      	cbz	r0, 80095ae <_rclc_take_new_data+0xbe>
 8009584:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8009588:	4298      	cmp	r0, r3
 800958a:	d0d9      	beq.n	8009540 <_rclc_take_new_data+0x50>
 800958c:	f000 fe68 	bl	800a260 <rcutils_reset_error>
 8009590:	e7d6      	b.n	8009540 <_rclc_take_new_data+0x50>
 8009592:	6840      	ldr	r0, [r0, #4]
 8009594:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d15f      	bne.n	800965c <_rclc_take_new_data+0x16c>
 800959c:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d179      	bne.n	8009698 <_rclc_take_new_data+0x1a8>
 80095a4:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f040 8096 	bne.w	80096da <_rclc_take_new_data+0x1ea>
 80095ae:	2500      	movs	r5, #0
 80095b0:	e7c6      	b.n	8009540 <_rclc_take_new_data+0x50>
 80095b2:	6840      	ldr	r0, [r0, #4]
 80095b4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d138      	bne.n	800962e <_rclc_take_new_data+0x13e>
 80095bc:	69c3      	ldr	r3, [r0, #28]
 80095be:	b113      	cbz	r3, 80095c6 <_rclc_take_new_data+0xd6>
 80095c0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80095c4:	b9fb      	cbnz	r3, 8009606 <_rclc_take_new_data+0x116>
 80095c6:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 80a8 	bne.w	8009720 <_rclc_take_new_data+0x230>
 80095d0:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0ea      	beq.n	80095ae <_rclc_take_new_data+0xbe>
 80095d8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80095da:	a90a      	add	r1, sp, #40	@ 0x28
 80095dc:	3010      	adds	r0, #16
 80095de:	f009 fba7 	bl	8012d30 <rcl_action_take_result_response>
 80095e2:	4605      	mov	r5, r0
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d1d1      	bne.n	800958c <_rclc_take_new_data+0x9c>
 80095e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80095ec:	6860      	ldr	r0, [r4, #4]
 80095ee:	f009 ffe7 	bl	80135c0 <rclc_action_find_handle_by_result_request_sequence_number>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	d0db      	beq.n	80095ae <_rclc_take_new_data+0xbe>
 80095f6:	2301      	movs	r3, #1
 80095f8:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 80095fc:	e7d7      	b.n	80095ae <_rclc_take_new_data+0xbe>
 80095fe:	250b      	movs	r5, #11
 8009600:	4628      	mov	r0, r5
 8009602:	b019      	add	sp, #100	@ 0x64
 8009604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009606:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009608:	3010      	adds	r0, #16
 800960a:	f009 fc0d 	bl	8012e28 <rcl_action_take_feedback>
 800960e:	4605      	mov	r5, r0
 8009610:	2800      	cmp	r0, #0
 8009612:	d1bb      	bne.n	800958c <_rclc_take_new_data+0x9c>
 8009614:	6860      	ldr	r0, [r4, #4]
 8009616:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009618:	f009 ff90 	bl	801353c <rclc_action_find_goal_handle_by_uuid>
 800961c:	4603      	mov	r3, r0
 800961e:	2800      	cmp	r0, #0
 8009620:	f000 80c4 	beq.w	80097ac <_rclc_take_new_data+0x2bc>
 8009624:	2201      	movs	r2, #1
 8009626:	6860      	ldr	r0, [r4, #4]
 8009628:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800962c:	e7cb      	b.n	80095c6 <_rclc_take_new_data+0xd6>
 800962e:	aa04      	add	r2, sp, #16
 8009630:	a90a      	add	r1, sp, #40	@ 0x28
 8009632:	3010      	adds	r0, #16
 8009634:	f009 fb0c 	bl	8012c50 <rcl_action_take_goal_response>
 8009638:	4605      	mov	r5, r0
 800963a:	2800      	cmp	r0, #0
 800963c:	d1a6      	bne.n	800958c <_rclc_take_new_data+0x9c>
 800963e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009642:	6860      	ldr	r0, [r4, #4]
 8009644:	f009 ffaa 	bl	801359c <rclc_action_find_handle_by_goal_request_sequence_number>
 8009648:	b130      	cbz	r0, 8009658 <_rclc_take_new_data+0x168>
 800964a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800964e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009652:	2201      	movs	r2, #1
 8009654:	f880 2020 	strb.w	r2, [r0, #32]
 8009658:	6860      	ldr	r0, [r4, #4]
 800965a:	e7af      	b.n	80095bc <_rclc_take_new_data+0xcc>
 800965c:	f009 ff48 	bl	80134f0 <rclc_action_take_goal_handle>
 8009660:	4606      	mov	r6, r0
 8009662:	6860      	ldr	r0, [r4, #4]
 8009664:	2e00      	cmp	r6, #0
 8009666:	d099      	beq.n	800959c <_rclc_take_new_data+0xac>
 8009668:	6070      	str	r0, [r6, #4]
 800966a:	69f2      	ldr	r2, [r6, #28]
 800966c:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 8009670:	3010      	adds	r0, #16
 8009672:	f009 fd09 	bl	8013088 <rcl_action_take_goal_request>
 8009676:	4605      	mov	r5, r0
 8009678:	2800      	cmp	r0, #0
 800967a:	f040 8099 	bne.w	80097b0 <_rclc_take_new_data+0x2c0>
 800967e:	69f7      	ldr	r7, [r6, #28]
 8009680:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009682:	7235      	strb	r5, [r6, #8]
 8009684:	f8c6 0009 	str.w	r0, [r6, #9]
 8009688:	f8c6 100d 	str.w	r1, [r6, #13]
 800968c:	6860      	ldr	r0, [r4, #4]
 800968e:	f8c6 2011 	str.w	r2, [r6, #17]
 8009692:	f8c6 3015 	str.w	r3, [r6, #21]
 8009696:	e781      	b.n	800959c <_rclc_take_new_data+0xac>
 8009698:	aa04      	add	r2, sp, #16
 800969a:	3010      	adds	r0, #16
 800969c:	a90a      	add	r1, sp, #40	@ 0x28
 800969e:	f009 fd63 	bl	8013168 <rcl_action_take_result_request>
 80096a2:	4605      	mov	r5, r0
 80096a4:	2800      	cmp	r0, #0
 80096a6:	f47f af71 	bne.w	800958c <_rclc_take_new_data+0x9c>
 80096aa:	6860      	ldr	r0, [r4, #4]
 80096ac:	a904      	add	r1, sp, #16
 80096ae:	f009 ff45 	bl	801353c <rclc_action_find_goal_handle_by_uuid>
 80096b2:	4607      	mov	r7, r0
 80096b4:	b160      	cbz	r0, 80096d0 <_rclc_take_new_data+0x1e0>
 80096b6:	ad0a      	add	r5, sp, #40	@ 0x28
 80096b8:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 80096bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80096c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80096c4:	f04f 0c02 	mov.w	ip, #2
 80096c8:	e886 0003 	stmia.w	r6, {r0, r1}
 80096cc:	f887 c008 	strb.w	ip, [r7, #8]
 80096d0:	6860      	ldr	r0, [r4, #4]
 80096d2:	2300      	movs	r3, #0
 80096d4:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 80096d8:	e764      	b.n	80095a4 <_rclc_take_new_data+0xb4>
 80096da:	ae04      	add	r6, sp, #16
 80096dc:	aa0a      	add	r2, sp, #40	@ 0x28
 80096de:	3010      	adds	r0, #16
 80096e0:	4631      	mov	r1, r6
 80096e2:	f009 fd7f 	bl	80131e4 <rcl_action_take_cancel_request>
 80096e6:	4605      	mov	r5, r0
 80096e8:	2800      	cmp	r0, #0
 80096ea:	f47f af4f 	bne.w	800958c <_rclc_take_new_data+0x9c>
 80096ee:	6860      	ldr	r0, [r4, #4]
 80096f0:	a90a      	add	r1, sp, #40	@ 0x28
 80096f2:	f009 ff23 	bl	801353c <rclc_action_find_goal_handle_by_uuid>
 80096f6:	4605      	mov	r5, r0
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d04c      	beq.n	8009796 <_rclc_take_new_data+0x2a6>
 80096fc:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009700:	2101      	movs	r1, #1
 8009702:	f009 fea3 	bl	801344c <rcl_action_transition_goal_state>
 8009706:	2803      	cmp	r0, #3
 8009708:	4607      	mov	r7, r0
 800970a:	d139      	bne.n	8009780 <_rclc_take_new_data+0x290>
 800970c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800970e:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 8009712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009714:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009718:	e884 0003 	stmia.w	r4, {r0, r1}
 800971c:	722f      	strb	r7, [r5, #8]
 800971e:	e746      	b.n	80095ae <_rclc_take_new_data+0xbe>
 8009720:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8009724:	a90a      	add	r1, sp, #40	@ 0x28
 8009726:	3010      	adds	r0, #16
 8009728:	f009 fb40 	bl	8012dac <rcl_action_take_cancel_response>
 800972c:	4605      	mov	r5, r0
 800972e:	2800      	cmp	r0, #0
 8009730:	f47f af2c 	bne.w	800958c <_rclc_take_new_data+0x9c>
 8009734:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009738:	6860      	ldr	r0, [r4, #4]
 800973a:	f009 ff53 	bl	80135e4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800973e:	4606      	mov	r6, r0
 8009740:	6860      	ldr	r0, [r4, #4]
 8009742:	2e00      	cmp	r6, #0
 8009744:	f43f af44 	beq.w	80095d0 <_rclc_take_new_data+0xe0>
 8009748:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800974a:	2701      	movs	r7, #1
 800974c:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800974e:	2b00      	cmp	r3, #0
 8009750:	f43f af3e 	beq.w	80095d0 <_rclc_take_new_data+0xe0>
 8009754:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8009756:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800975a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800975e:	f009 feed 	bl	801353c <rclc_action_find_goal_handle_by_uuid>
 8009762:	b138      	cbz	r0, 8009774 <_rclc_take_new_data+0x284>
 8009764:	6860      	ldr	r0, [r4, #4]
 8009766:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009768:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800976c:	3501      	adds	r5, #1
 800976e:	42ab      	cmp	r3, r5
 8009770:	d8f0      	bhi.n	8009754 <_rclc_take_new_data+0x264>
 8009772:	e72d      	b.n	80095d0 <_rclc_take_new_data+0xe0>
 8009774:	6860      	ldr	r0, [r4, #4]
 8009776:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8009778:	3501      	adds	r5, #1
 800977a:	42ab      	cmp	r3, r5
 800977c:	d8ea      	bhi.n	8009754 <_rclc_take_new_data+0x264>
 800977e:	e727      	b.n	80095d0 <_rclc_take_new_data+0xe0>
 8009780:	ab06      	add	r3, sp, #24
 8009782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009784:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009788:	2103      	movs	r1, #3
 800978a:	e896 000c 	ldmia.w	r6, {r2, r3}
 800978e:	6860      	ldr	r0, [r4, #4]
 8009790:	f009 ff9e 	bl	80136d0 <rclc_action_server_goal_cancel_reject>
 8009794:	e70b      	b.n	80095ae <_rclc_take_new_data+0xbe>
 8009796:	ab06      	add	r3, sp, #24
 8009798:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800979a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800979e:	2102      	movs	r1, #2
 80097a0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80097a4:	6860      	ldr	r0, [r4, #4]
 80097a6:	f009 ff93 	bl	80136d0 <rclc_action_server_goal_cancel_reject>
 80097aa:	e700      	b.n	80095ae <_rclc_take_new_data+0xbe>
 80097ac:	6860      	ldr	r0, [r4, #4]
 80097ae:	e70a      	b.n	80095c6 <_rclc_take_new_data+0xd6>
 80097b0:	6860      	ldr	r0, [r4, #4]
 80097b2:	4631      	mov	r1, r6
 80097b4:	f009 feac 	bl	8013510 <rclc_action_remove_used_goal_handle>
 80097b8:	f000 fd52 	bl	800a260 <rcutils_reset_error>
 80097bc:	e6c0      	b.n	8009540 <_rclc_take_new_data+0x50>
 80097be:	2501      	movs	r5, #1
 80097c0:	e6be      	b.n	8009540 <_rclc_take_new_data+0x50>
 80097c2:	bf00      	nop

080097c4 <rclc_executor_trigger_any>:
 80097c4:	4603      	mov	r3, r0
 80097c6:	b370      	cbz	r0, 8009826 <rclc_executor_trigger_any+0x62>
 80097c8:	b379      	cbz	r1, 800982a <rclc_executor_trigger_any+0x66>
 80097ca:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 80097ce:	2200      	movs	r2, #0
 80097d0:	b350      	cbz	r0, 8009828 <rclc_executor_trigger_any+0x64>
 80097d2:	b430      	push	{r4, r5}
 80097d4:	f893 c000 	ldrb.w	ip, [r3]
 80097d8:	f1bc 0f08 	cmp.w	ip, #8
 80097dc:	d017      	beq.n	800980e <rclc_executor_trigger_any+0x4a>
 80097de:	f1bc 0f09 	cmp.w	ip, #9
 80097e2:	d00d      	beq.n	8009800 <rclc_executor_trigger_any+0x3c>
 80097e4:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 80097e8:	b940      	cbnz	r0, 80097fc <rclc_executor_trigger_any+0x38>
 80097ea:	3201      	adds	r2, #1
 80097ec:	4291      	cmp	r1, r2
 80097ee:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80097f2:	d003      	beq.n	80097fc <rclc_executor_trigger_any+0x38>
 80097f4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 80097f8:	2800      	cmp	r0, #0
 80097fa:	d1eb      	bne.n	80097d4 <rclc_executor_trigger_any+0x10>
 80097fc:	bc30      	pop	{r4, r5}
 80097fe:	4770      	bx	lr
 8009800:	685c      	ldr	r4, [r3, #4]
 8009802:	6a25      	ldr	r5, [r4, #32]
 8009804:	2d00      	cmp	r5, #0
 8009806:	d1f9      	bne.n	80097fc <rclc_executor_trigger_any+0x38>
 8009808:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800980c:	e7ec      	b.n	80097e8 <rclc_executor_trigger_any+0x24>
 800980e:	685c      	ldr	r4, [r3, #4]
 8009810:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8009812:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8009816:	d1f1      	bne.n	80097fc <rclc_executor_trigger_any+0x38>
 8009818:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800981c:	2800      	cmp	r0, #0
 800981e:	d1ed      	bne.n	80097fc <rclc_executor_trigger_any+0x38>
 8009820:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8009824:	e7e0      	b.n	80097e8 <rclc_executor_trigger_any+0x24>
 8009826:	4770      	bx	lr
 8009828:	4770      	bx	lr
 800982a:	4608      	mov	r0, r1
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop

08009830 <_rclc_execute>:
 8009830:	2800      	cmp	r0, #0
 8009832:	f000 80dc 	beq.w	80099ee <_rclc_execute+0x1be>
 8009836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009838:	7843      	ldrb	r3, [r0, #1]
 800983a:	b087      	sub	sp, #28
 800983c:	4604      	mov	r4, r0
 800983e:	b123      	cbz	r3, 800984a <_rclc_execute+0x1a>
 8009840:	2b01      	cmp	r3, #1
 8009842:	d01c      	beq.n	800987e <_rclc_execute+0x4e>
 8009844:	2000      	movs	r0, #0
 8009846:	b007      	add	sp, #28
 8009848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800984a:	7803      	ldrb	r3, [r0, #0]
 800984c:	2b08      	cmp	r3, #8
 800984e:	f000 80a0 	beq.w	8009992 <_rclc_execute+0x162>
 8009852:	2b09      	cmp	r3, #9
 8009854:	d024      	beq.n	80098a0 <_rclc_execute+0x70>
 8009856:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800985a:	2800      	cmp	r0, #0
 800985c:	d0f2      	beq.n	8009844 <_rclc_execute+0x14>
 800985e:	2b0a      	cmp	r3, #10
 8009860:	f200 815a 	bhi.w	8009b18 <_rclc_execute+0x2e8>
 8009864:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009868:	008e006f 	.word	0x008e006f
 800986c:	006f007c 	.word	0x006f007c
 8009870:	00590073 	.word	0x00590073
 8009874:	00590059 	.word	0x00590059
 8009878:	01580158 	.word	0x01580158
 800987c:	0079      	.short	0x0079
 800987e:	7803      	ldrb	r3, [r0, #0]
 8009880:	2b0a      	cmp	r3, #10
 8009882:	f200 8149 	bhi.w	8009b18 <_rclc_execute+0x2e8>
 8009886:	e8df f013 	tbh	[pc, r3, lsl #1]
 800988a:	00f9      	.short	0x00f9
 800988c:	006b007b 	.word	0x006b007b
 8009890:	0062005e 	.word	0x0062005e
 8009894:	00480048 	.word	0x00480048
 8009898:	01000048 	.word	0x01000048
 800989c:	00680102 	.word	0x00680102
 80098a0:	6840      	ldr	r0, [r0, #4]
 80098a2:	6a02      	ldr	r2, [r0, #32]
 80098a4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	f040 80f3 	bne.w	8009a94 <_rclc_execute+0x264>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0c8      	beq.n	8009844 <_rclc_execute+0x14>
 80098b2:	e003      	b.n	80098bc <_rclc_execute+0x8c>
 80098b4:	6858      	ldr	r0, [r3, #4]
 80098b6:	f009 fe2b 	bl	8013510 <rclc_action_remove_used_goal_handle>
 80098ba:	6860      	ldr	r0, [r4, #4]
 80098bc:	f009 fe62 	bl	8013584 <rclc_action_find_first_terminated_handle>
 80098c0:	4603      	mov	r3, r0
 80098c2:	4601      	mov	r1, r0
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d1f5      	bne.n	80098b4 <_rclc_execute+0x84>
 80098c8:	6860      	ldr	r0, [r4, #4]
 80098ca:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 80098ce:	f890 3020 	ldrb.w	r3, [r0, #32]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f000 80eb 	beq.w	8009aae <_rclc_execute+0x27e>
 80098d8:	f241 0604 	movw	r6, #4100	@ 0x1004
 80098dc:	2701      	movs	r7, #1
 80098de:	e007      	b.n	80098f0 <_rclc_execute+0xc0>
 80098e0:	4628      	mov	r0, r5
 80098e2:	f009 fea9 	bl	8013638 <rclc_action_server_response_goal_request>
 80098e6:	6860      	ldr	r0, [r4, #4]
 80098e8:	4629      	mov	r1, r5
 80098ea:	f009 fe11 	bl	8013510 <rclc_action_remove_used_goal_handle>
 80098ee:	6860      	ldr	r0, [r4, #4]
 80098f0:	2100      	movs	r1, #0
 80098f2:	f009 fe3b 	bl	801356c <rclc_action_find_first_handle_by_status>
 80098f6:	4605      	mov	r5, r0
 80098f8:	2800      	cmp	r0, #0
 80098fa:	f000 80d5 	beq.w	8009aa8 <_rclc_execute+0x278>
 80098fe:	6863      	ldr	r3, [r4, #4]
 8009900:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	4798      	blx	r3
 8009906:	42b0      	cmp	r0, r6
 8009908:	f04f 0100 	mov.w	r1, #0
 800990c:	d1e8      	bne.n	80098e0 <_rclc_execute+0xb0>
 800990e:	2101      	movs	r1, #1
 8009910:	4628      	mov	r0, r5
 8009912:	f009 fe91 	bl	8013638 <rclc_action_server_response_goal_request>
 8009916:	722f      	strb	r7, [r5, #8]
 8009918:	e7e9      	b.n	80098ee <_rclc_execute+0xbe>
 800991a:	2b06      	cmp	r3, #6
 800991c:	68a0      	ldr	r0, [r4, #8]
 800991e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8009920:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8009922:	f000 80bb 	beq.w	8009a9c <_rclc_execute+0x26c>
 8009926:	2b07      	cmp	r3, #7
 8009928:	f000 80f1 	beq.w	8009b0e <_rclc_execute+0x2de>
 800992c:	47b0      	blx	r6
 800992e:	f104 0510 	add.w	r5, r4, #16
 8009932:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009934:	6860      	ldr	r0, [r4, #4]
 8009936:	4629      	mov	r1, r5
 8009938:	f007 fe2e 	bl	8011598 <rcl_send_response>
 800993c:	2802      	cmp	r0, #2
 800993e:	d117      	bne.n	8009970 <_rclc_execute+0x140>
 8009940:	f000 fc8e 	bl	800a260 <rcutils_reset_error>
 8009944:	e77e      	b.n	8009844 <_rclc_execute+0x14>
 8009946:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009948:	68a0      	ldr	r0, [r4, #8]
 800994a:	4798      	blx	r3
 800994c:	e77a      	b.n	8009844 <_rclc_execute+0x14>
 800994e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009950:	68a0      	ldr	r0, [r4, #8]
 8009952:	f104 0110 	add.w	r1, r4, #16
 8009956:	4798      	blx	r3
 8009958:	e774      	b.n	8009844 <_rclc_execute+0x14>
 800995a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800995c:	4798      	blx	r3
 800995e:	e771      	b.n	8009844 <_rclc_execute+0x14>
 8009960:	6860      	ldr	r0, [r4, #4]
 8009962:	f008 fa21 	bl	8011da8 <rcl_timer_call>
 8009966:	f240 3321 	movw	r3, #801	@ 0x321
 800996a:	4298      	cmp	r0, r3
 800996c:	f43f af6a 	beq.w	8009844 <_rclc_execute+0x14>
 8009970:	2800      	cmp	r0, #0
 8009972:	f43f af68 	beq.w	8009846 <_rclc_execute+0x16>
 8009976:	9005      	str	r0, [sp, #20]
 8009978:	f000 fc72 	bl	800a260 <rcutils_reset_error>
 800997c:	9805      	ldr	r0, [sp, #20]
 800997e:	e762      	b.n	8009846 <_rclc_execute+0x16>
 8009980:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8009984:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 8009988:	2800      	cmp	r0, #0
 800998a:	d0e4      	beq.n	8009956 <_rclc_execute+0x126>
 800998c:	68a0      	ldr	r0, [r4, #8]
 800998e:	4798      	blx	r3
 8009990:	e758      	b.n	8009844 <_rclc_execute+0x14>
 8009992:	6840      	ldr	r0, [r0, #4]
 8009994:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009996:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800999a:	d107      	bne.n	80099ac <_rclc_execute+0x17c>
 800999c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80099a0:	b923      	cbnz	r3, 80099ac <_rclc_execute+0x17c>
 80099a2:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f43f af4c 	beq.w	8009844 <_rclc_execute+0x14>
 80099ac:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80099b0:	b303      	cbz	r3, 80099f4 <_rclc_execute+0x1c4>
 80099b2:	2600      	movs	r6, #0
 80099b4:	2701      	movs	r7, #1
 80099b6:	e004      	b.n	80099c2 <_rclc_execute+0x192>
 80099b8:	f009 fd74 	bl	80134a4 <rclc_action_send_result_request>
 80099bc:	b990      	cbnz	r0, 80099e4 <_rclc_execute+0x1b4>
 80099be:	722f      	strb	r7, [r5, #8]
 80099c0:	6860      	ldr	r0, [r4, #4]
 80099c2:	f009 fe21 	bl	8013608 <rclc_action_find_first_handle_with_goal_response>
 80099c6:	4605      	mov	r5, r0
 80099c8:	b198      	cbz	r0, 80099f2 <_rclc_execute+0x1c2>
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 80099d4:	f885 6020 	strb.w	r6, [r5, #32]
 80099d8:	4798      	blx	r3
 80099da:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80099de:	4628      	mov	r0, r5
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d1e9      	bne.n	80099b8 <_rclc_execute+0x188>
 80099e4:	6860      	ldr	r0, [r4, #4]
 80099e6:	4629      	mov	r1, r5
 80099e8:	f009 fd92 	bl	8013510 <rclc_action_remove_used_goal_handle>
 80099ec:	e7e8      	b.n	80099c0 <_rclc_execute+0x190>
 80099ee:	200b      	movs	r0, #11
 80099f0:	4770      	bx	lr
 80099f2:	6860      	ldr	r0, [r4, #4]
 80099f4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80099f8:	b18b      	cbz	r3, 8009a1e <_rclc_execute+0x1ee>
 80099fa:	68c5      	ldr	r5, [r0, #12]
 80099fc:	b32d      	cbz	r5, 8009a4a <_rclc_execute+0x21a>
 80099fe:	2600      	movs	r6, #0
 8009a00:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8009a04:	b143      	cbz	r3, 8009a18 <_rclc_execute+0x1e8>
 8009a06:	69c3      	ldr	r3, [r0, #28]
 8009a08:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8009a0c:	b123      	cbz	r3, 8009a18 <_rclc_execute+0x1e8>
 8009a0e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8009a10:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a12:	4628      	mov	r0, r5
 8009a14:	4798      	blx	r3
 8009a16:	6860      	ldr	r0, [r4, #4]
 8009a18:	682d      	ldr	r5, [r5, #0]
 8009a1a:	2d00      	cmp	r5, #0
 8009a1c:	d1f0      	bne.n	8009a00 <_rclc_execute+0x1d0>
 8009a1e:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8009a22:	b193      	cbz	r3, 8009a4a <_rclc_execute+0x21a>
 8009a24:	68c5      	ldr	r5, [r0, #12]
 8009a26:	b185      	cbz	r5, 8009a4a <_rclc_execute+0x21a>
 8009a28:	2600      	movs	r6, #0
 8009a2a:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8009a2e:	b14b      	cbz	r3, 8009a44 <_rclc_execute+0x214>
 8009a30:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009a32:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8009a36:	b12b      	cbz	r3, 8009a44 <_rclc_execute+0x214>
 8009a38:	4628      	mov	r0, r5
 8009a3a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a3c:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8009a40:	4798      	blx	r3
 8009a42:	6860      	ldr	r0, [r4, #4]
 8009a44:	682d      	ldr	r5, [r5, #0]
 8009a46:	2d00      	cmp	r5, #0
 8009a48:	d1ef      	bne.n	8009a2a <_rclc_execute+0x1fa>
 8009a4a:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f43f aef8 	beq.w	8009844 <_rclc_execute+0x14>
 8009a54:	2700      	movs	r7, #0
 8009a56:	e00b      	b.n	8009a70 <_rclc_execute+0x240>
 8009a58:	6863      	ldr	r3, [r4, #4]
 8009a5a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009a5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009a5e:	6a1e      	ldr	r6, [r3, #32]
 8009a60:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8009a64:	47b0      	blx	r6
 8009a66:	6860      	ldr	r0, [r4, #4]
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f009 fd51 	bl	8013510 <rclc_action_remove_used_goal_handle>
 8009a6e:	6860      	ldr	r0, [r4, #4]
 8009a70:	f009 fdd6 	bl	8013620 <rclc_action_find_first_handle_with_result_response>
 8009a74:	4605      	mov	r5, r0
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d1ee      	bne.n	8009a58 <_rclc_execute+0x228>
 8009a7a:	e6e3      	b.n	8009844 <_rclc_execute+0x14>
 8009a7c:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 8009a80:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f43f af61 	beq.w	800994a <_rclc_execute+0x11a>
 8009a88:	e75e      	b.n	8009948 <_rclc_execute+0x118>
 8009a8a:	6840      	ldr	r0, [r0, #4]
 8009a8c:	e78e      	b.n	80099ac <_rclc_execute+0x17c>
 8009a8e:	6840      	ldr	r0, [r0, #4]
 8009a90:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f43f af1a 	beq.w	80098ce <_rclc_execute+0x9e>
 8009a9a:	e70f      	b.n	80098bc <_rclc_execute+0x8c>
 8009a9c:	f104 0510 	add.w	r5, r4, #16
 8009aa0:	460a      	mov	r2, r1
 8009aa2:	4629      	mov	r1, r5
 8009aa4:	47b0      	blx	r6
 8009aa6:	e744      	b.n	8009932 <_rclc_execute+0x102>
 8009aa8:	6860      	ldr	r0, [r4, #4]
 8009aaa:	f880 5020 	strb.w	r5, [r0, #32]
 8009aae:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	f43f aec6 	beq.w	8009844 <_rclc_execute+0x14>
 8009ab8:	68c5      	ldr	r5, [r0, #12]
 8009aba:	b325      	cbz	r5, 8009b06 <_rclc_execute+0x2d6>
 8009abc:	2602      	movs	r6, #2
 8009abe:	e001      	b.n	8009ac4 <_rclc_execute+0x294>
 8009ac0:	682d      	ldr	r5, [r5, #0]
 8009ac2:	b305      	cbz	r5, 8009b06 <_rclc_execute+0x2d6>
 8009ac4:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d1f9      	bne.n	8009ac0 <_rclc_execute+0x290>
 8009acc:	69c3      	ldr	r3, [r0, #28]
 8009ace:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009ad0:	4628      	mov	r0, r5
 8009ad2:	4798      	blx	r3
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8009ada:	4628      	mov	r0, r5
 8009adc:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009ae0:	b11b      	cbz	r3, 8009aea <_rclc_execute+0x2ba>
 8009ae2:	f009 fdc9 	bl	8013678 <rclc_action_server_goal_cancel_accept>
 8009ae6:	6860      	ldr	r0, [r4, #4]
 8009ae8:	e7ea      	b.n	8009ac0 <_rclc_execute+0x290>
 8009aea:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8009aec:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009af0:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8009af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009af8:	6860      	ldr	r0, [r4, #4]
 8009afa:	2101      	movs	r1, #1
 8009afc:	f009 fde8 	bl	80136d0 <rclc_action_server_goal_cancel_reject>
 8009b00:	722e      	strb	r6, [r5, #8]
 8009b02:	6860      	ldr	r0, [r4, #4]
 8009b04:	e7dc      	b.n	8009ac0 <_rclc_execute+0x290>
 8009b06:	2300      	movs	r3, #0
 8009b08:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8009b0c:	e69a      	b.n	8009844 <_rclc_execute+0x14>
 8009b0e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009b10:	47b0      	blx	r6
 8009b12:	f104 0510 	add.w	r5, r4, #16
 8009b16:	e70c      	b.n	8009932 <_rclc_execute+0x102>
 8009b18:	2001      	movs	r0, #1
 8009b1a:	e694      	b.n	8009846 <_rclc_execute+0x16>
 8009b1c:	0000      	movs	r0, r0
	...

08009b20 <rclc_executor_init>:
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d05a      	beq.n	8009bda <rclc_executor_init+0xba>
 8009b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b28:	460d      	mov	r5, r1
 8009b2a:	b0b2      	sub	sp, #200	@ 0xc8
 8009b2c:	2900      	cmp	r1, #0
 8009b2e:	d050      	beq.n	8009bd2 <rclc_executor_init+0xb2>
 8009b30:	4604      	mov	r4, r0
 8009b32:	4618      	mov	r0, r3
 8009b34:	4616      	mov	r6, r2
 8009b36:	461f      	mov	r7, r3
 8009b38:	f000 fb66 	bl	800a208 <rcutils_allocator_is_valid>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d048      	beq.n	8009bd2 <rclc_executor_init+0xb2>
 8009b40:	2e00      	cmp	r6, #0
 8009b42:	d046      	beq.n	8009bd2 <rclc_executor_init+0xb2>
 8009b44:	492a      	ldr	r1, [pc, #168]	@ (8009bf0 <rclc_executor_init+0xd0>)
 8009b46:	2290      	movs	r2, #144	@ 0x90
 8009b48:	a80e      	add	r0, sp, #56	@ 0x38
 8009b4a:	f00e fcbe 	bl	80184ca <memcpy>
 8009b4e:	a90e      	add	r1, sp, #56	@ 0x38
 8009b50:	2290      	movs	r2, #144	@ 0x90
 8009b52:	4620      	mov	r0, r4
 8009b54:	f00e fcb9 	bl	80184ca <memcpy>
 8009b58:	6065      	str	r5, [r4, #4]
 8009b5a:	4668      	mov	r0, sp
 8009b5c:	60e6      	str	r6, [r4, #12]
 8009b5e:	466d      	mov	r5, sp
 8009b60:	f008 fa14 	bl	8011f8c <rcl_get_zero_initialized_wait_set>
 8009b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b66:	f104 0c18 	add.w	ip, r4, #24
 8009b6a:	f8d7 8000 	ldr.w	r8, [r7]
 8009b6e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b7e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8009be8 <rclc_executor_init+0xc8>
 8009b82:	682b      	ldr	r3, [r5, #0]
 8009b84:	f8cc 3000 	str.w	r3, [ip]
 8009b88:	6939      	ldr	r1, [r7, #16]
 8009b8a:	6167      	str	r7, [r4, #20]
 8009b8c:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 8009b90:	01b0      	lsls	r0, r6, #6
 8009b92:	47c0      	blx	r8
 8009b94:	60a0      	str	r0, [r4, #8]
 8009b96:	b310      	cbz	r0, 8009bde <rclc_executor_init+0xbe>
 8009b98:	2500      	movs	r5, #0
 8009b9a:	e000      	b.n	8009b9e <rclc_executor_init+0x7e>
 8009b9c:	68a0      	ldr	r0, [r4, #8]
 8009b9e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 8009ba2:	4631      	mov	r1, r6
 8009ba4:	3501      	adds	r5, #1
 8009ba6:	f000 f9f1 	bl	8009f8c <rclc_executor_handle_init>
 8009baa:	42ae      	cmp	r6, r5
 8009bac:	d1f6      	bne.n	8009b9c <rclc_executor_init+0x7c>
 8009bae:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8009bb2:	f000 f9e1 	bl	8009f78 <rclc_executor_handle_counters_zero_init>
 8009bb6:	490f      	ldr	r1, [pc, #60]	@ (8009bf4 <rclc_executor_init+0xd4>)
 8009bb8:	68a2      	ldr	r2, [r4, #8]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 8009bc0:	b12a      	cbz	r2, 8009bce <rclc_executor_init+0xae>
 8009bc2:	6962      	ldr	r2, [r4, #20]
 8009bc4:	b11a      	cbz	r2, 8009bce <rclc_executor_init+0xae>
 8009bc6:	68e2      	ldr	r2, [r4, #12]
 8009bc8:	b10a      	cbz	r2, 8009bce <rclc_executor_init+0xae>
 8009bca:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 8009bce:	2000      	movs	r0, #0
 8009bd0:	e000      	b.n	8009bd4 <rclc_executor_init+0xb4>
 8009bd2:	200b      	movs	r0, #11
 8009bd4:	b032      	add	sp, #200	@ 0xc8
 8009bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bda:	200b      	movs	r0, #11
 8009bdc:	4770      	bx	lr
 8009bde:	200a      	movs	r0, #10
 8009be0:	e7f8      	b.n	8009bd4 <rclc_executor_init+0xb4>
 8009be2:	bf00      	nop
 8009be4:	f3af 8000 	nop.w
 8009be8:	3b9aca00 	.word	0x3b9aca00
 8009bec:	00000000 	.word	0x00000000
 8009bf0:	0801a610 	.word	0x0801a610
 8009bf4:	080097c5 	.word	0x080097c5

08009bf8 <rclc_executor_add_timer>:
 8009bf8:	b300      	cbz	r0, 8009c3c <rclc_executor_add_timer+0x44>
 8009bfa:	b1f9      	cbz	r1, 8009c3c <rclc_executor_add_timer+0x44>
 8009bfc:	b538      	push	{r3, r4, r5, lr}
 8009bfe:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8009c02:	4293      	cmp	r3, r2
 8009c04:	4604      	mov	r4, r0
 8009c06:	d301      	bcc.n	8009c0c <rclc_executor_add_timer+0x14>
 8009c08:	2001      	movs	r0, #1
 8009c0a:	bd38      	pop	{r3, r4, r5, pc}
 8009c0c:	6880      	ldr	r0, [r0, #8]
 8009c0e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8009c12:	019d      	lsls	r5, r3, #6
 8009c14:	6051      	str	r1, [r2, #4]
 8009c16:	2102      	movs	r1, #2
 8009c18:	5341      	strh	r1, [r0, r5]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	2101      	movs	r1, #1
 8009c20:	f104 0518 	add.w	r5, r4, #24
 8009c24:	62d0      	str	r0, [r2, #44]	@ 0x2c
 8009c26:	8711      	strh	r1, [r2, #56]	@ 0x38
 8009c28:	4628      	mov	r0, r5
 8009c2a:	6123      	str	r3, [r4, #16]
 8009c2c:	f008 f9c2 	bl	8011fb4 <rcl_wait_set_is_valid>
 8009c30:	b930      	cbnz	r0, 8009c40 <rclc_executor_add_timer+0x48>
 8009c32:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009c34:	3301      	adds	r3, #1
 8009c36:	2000      	movs	r0, #0
 8009c38:	6523      	str	r3, [r4, #80]	@ 0x50
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
 8009c3c:	200b      	movs	r0, #11
 8009c3e:	4770      	bx	lr
 8009c40:	4628      	mov	r0, r5
 8009c42:	f008 f9bd 	bl	8011fc0 <rcl_wait_set_fini>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d0f3      	beq.n	8009c32 <rclc_executor_add_timer+0x3a>
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}

08009c4c <rclc_executor_prepare>:
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d044      	beq.n	8009cda <rclc_executor_prepare+0x8e>
 8009c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c52:	f100 0518 	add.w	r5, r0, #24
 8009c56:	b09b      	sub	sp, #108	@ 0x6c
 8009c58:	4604      	mov	r4, r0
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f008 f9aa 	bl	8011fb4 <rcl_wait_set_is_valid>
 8009c60:	b110      	cbz	r0, 8009c68 <rclc_executor_prepare+0x1c>
 8009c62:	2000      	movs	r0, #0
 8009c64:	b01b      	add	sp, #108	@ 0x6c
 8009c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f008 f9a9 	bl	8011fc0 <rcl_wait_set_fini>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d130      	bne.n	8009cd4 <rclc_executor_prepare+0x88>
 8009c72:	a80c      	add	r0, sp, #48	@ 0x30
 8009c74:	f008 f98a 	bl	8011f8c <rcl_get_zero_initialized_wait_set>
 8009c78:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8009c7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c80:	46ae      	mov	lr, r5
 8009c82:	6967      	ldr	r7, [r4, #20]
 8009c84:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009c88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c8c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009c90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009c94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009c98:	f8dc 3000 	ldr.w	r3, [ip]
 8009c9c:	f8ce 3000 	str.w	r3, [lr]
 8009ca0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009ca2:	ae04      	add	r6, sp, #16
 8009ca4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	6862      	ldr	r2, [r4, #4]
 8009caa:	6033      	str	r3, [r6, #0]
 8009cac:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8009cae:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8009cb0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009cb4:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 8009cb8:	e9cd 2100 	strd	r2, r1, [sp]
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cc0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8009cc2:	f008 fcad 	bl	8012620 <rcl_wait_set_init>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d0cc      	beq.n	8009c64 <rclc_executor_prepare+0x18>
 8009cca:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009ccc:	f000 fac8 	bl	800a260 <rcutils_reset_error>
 8009cd0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009cd2:	e7c7      	b.n	8009c64 <rclc_executor_prepare+0x18>
 8009cd4:	f000 fac4 	bl	800a260 <rcutils_reset_error>
 8009cd8:	e7cb      	b.n	8009c72 <rclc_executor_prepare+0x26>
 8009cda:	200b      	movs	r0, #11
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop

08009ce0 <rclc_executor_spin_some>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	b083      	sub	sp, #12
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f000 8091 	beq.w	8009e0e <rclc_executor_spin_some+0x12e>
 8009cec:	4604      	mov	r4, r0
 8009cee:	6840      	ldr	r0, [r0, #4]
 8009cf0:	4690      	mov	r8, r2
 8009cf2:	4699      	mov	r9, r3
 8009cf4:	f006 ff14 	bl	8010b20 <rcl_context_is_valid>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d037      	beq.n	8009d6c <rclc_executor_spin_some+0x8c>
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f104 0718 	add.w	r7, r4, #24
 8009d02:	f7ff ffa3 	bl	8009c4c <rclc_executor_prepare>
 8009d06:	4638      	mov	r0, r7
 8009d08:	f008 fa3e 	bl	8012188 <rcl_wait_set_clear>
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d177      	bne.n	8009e02 <rclc_executor_spin_some+0x122>
 8009d12:	68e3      	ldr	r3, [r4, #12]
 8009d14:	4605      	mov	r5, r0
 8009d16:	b1eb      	cbz	r3, 8009d54 <rclc_executor_spin_some+0x74>
 8009d18:	68a1      	ldr	r1, [r4, #8]
 8009d1a:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 8009d1e:	01aa      	lsls	r2, r5, #6
 8009d20:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8009d24:	b1b3      	cbz	r3, 8009d54 <rclc_executor_spin_some+0x74>
 8009d26:	5c8b      	ldrb	r3, [r1, r2]
 8009d28:	2b0a      	cmp	r3, #10
 8009d2a:	d81f      	bhi.n	8009d6c <rclc_executor_spin_some+0x8c>
 8009d2c:	e8df f003 	tbb	[pc, r3]
 8009d30:	253e3434 	.word	0x253e3434
 8009d34:	06060625 	.word	0x06060625
 8009d38:	525d      	.short	0x525d
 8009d3a:	48          	.byte	0x48
 8009d3b:	00          	.byte	0x00
 8009d3c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009d40:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009d44:	4638      	mov	r0, r7
 8009d46:	f008 fd75 	bl	8012834 <rcl_wait_set_add_service>
 8009d4a:	b9f8      	cbnz	r0, 8009d8c <rclc_executor_spin_some+0xac>
 8009d4c:	68e3      	ldr	r3, [r4, #12]
 8009d4e:	3501      	adds	r5, #1
 8009d50:	42ab      	cmp	r3, r5
 8009d52:	d8e1      	bhi.n	8009d18 <rclc_executor_spin_some+0x38>
 8009d54:	4642      	mov	r2, r8
 8009d56:	464b      	mov	r3, r9
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f008 fd99 	bl	8012890 <rcl_wait>
 8009d5e:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 8009d62:	2d00      	cmp	r5, #0
 8009d64:	f000 80ab 	beq.w	8009ebe <rclc_executor_spin_some+0x1de>
 8009d68:	2d01      	cmp	r5, #1
 8009d6a:	d055      	beq.n	8009e18 <rclc_executor_spin_some+0x138>
 8009d6c:	f000 fa78 	bl	800a260 <rcutils_reset_error>
 8009d70:	2601      	movs	r6, #1
 8009d72:	4630      	mov	r0, r6
 8009d74:	b003      	add	sp, #12
 8009d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d7a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009d7e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009d82:	4638      	mov	r0, r7
 8009d84:	f008 fd2a 	bl	80127dc <rcl_wait_set_add_client>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d0df      	beq.n	8009d4c <rclc_executor_spin_some+0x6c>
 8009d8c:	9001      	str	r0, [sp, #4]
 8009d8e:	f000 fa67 	bl	800a260 <rcutils_reset_error>
 8009d92:	9801      	ldr	r0, [sp, #4]
 8009d94:	4606      	mov	r6, r0
 8009d96:	e7ec      	b.n	8009d72 <rclc_executor_spin_some+0x92>
 8009d98:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009d9c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009da0:	4638      	mov	r0, r7
 8009da2:	f008 f9c5 	bl	8012130 <rcl_wait_set_add_subscription>
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d0d0      	beq.n	8009d4c <rclc_executor_spin_some+0x6c>
 8009daa:	e7ef      	b.n	8009d8c <rclc_executor_spin_some+0xac>
 8009dac:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009db0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009db4:	4638      	mov	r0, r7
 8009db6:	f008 fce1 	bl	801277c <rcl_wait_set_add_timer>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d0c6      	beq.n	8009d4c <rclc_executor_spin_some+0x6c>
 8009dbe:	e7e5      	b.n	8009d8c <rclc_executor_spin_some+0xac>
 8009dc0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009dc4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009dc8:	4638      	mov	r0, r7
 8009dca:	f008 fcab 	bl	8012724 <rcl_wait_set_add_guard_condition>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d0bc      	beq.n	8009d4c <rclc_executor_spin_some+0x6c>
 8009dd2:	e7db      	b.n	8009d8c <rclc_executor_spin_some+0xac>
 8009dd4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009dd8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009ddc:	3110      	adds	r1, #16
 8009dde:	4638      	mov	r0, r7
 8009de0:	f009 fa74 	bl	80132cc <rcl_action_wait_set_add_action_server>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d0b1      	beq.n	8009d4c <rclc_executor_spin_some+0x6c>
 8009de8:	e7d0      	b.n	8009d8c <rclc_executor_spin_some+0xac>
 8009dea:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009dee:	2300      	movs	r3, #0
 8009df0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8009df4:	3110      	adds	r1, #16
 8009df6:	4638      	mov	r0, r7
 8009df8:	f009 f856 	bl	8012ea8 <rcl_action_wait_set_add_action_client>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d0a5      	beq.n	8009d4c <rclc_executor_spin_some+0x6c>
 8009e00:	e7c4      	b.n	8009d8c <rclc_executor_spin_some+0xac>
 8009e02:	f000 fa2d 	bl	800a260 <rcutils_reset_error>
 8009e06:	4630      	mov	r0, r6
 8009e08:	b003      	add	sp, #12
 8009e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0e:	260b      	movs	r6, #11
 8009e10:	4630      	mov	r0, r6
 8009e12:	b003      	add	sp, #12
 8009e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e18:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 8009e1c:	4663      	mov	r3, ip
 8009e1e:	4615      	mov	r5, r2
 8009e20:	b1ca      	cbz	r2, 8009e56 <rclc_executor_spin_some+0x176>
 8009e22:	2500      	movs	r5, #0
 8009e24:	46a8      	mov	r8, r5
 8009e26:	f240 1991 	movw	r9, #401	@ 0x191
 8009e2a:	e00c      	b.n	8009e46 <rclc_executor_spin_some+0x166>
 8009e2c:	f7ff fb12 	bl	8009454 <_rclc_check_for_new_data>
 8009e30:	f108 0801 	add.w	r8, r8, #1
 8009e34:	4605      	mov	r5, r0
 8009e36:	b108      	cbz	r0, 8009e3c <rclc_executor_spin_some+0x15c>
 8009e38:	4548      	cmp	r0, r9
 8009e3a:	d13e      	bne.n	8009eba <rclc_executor_spin_some+0x1da>
 8009e3c:	68e2      	ldr	r2, [r4, #12]
 8009e3e:	4590      	cmp	r8, r2
 8009e40:	f080 808b 	bcs.w	8009f5a <rclc_executor_spin_some+0x27a>
 8009e44:	68a3      	ldr	r3, [r4, #8]
 8009e46:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8009e4a:	469c      	mov	ip, r3
 8009e4c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009e50:	4639      	mov	r1, r7
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1ea      	bne.n	8009e2c <rclc_executor_spin_some+0x14c>
 8009e56:	4611      	mov	r1, r2
 8009e58:	4660      	mov	r0, ip
 8009e5a:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 8009e5e:	4798      	blx	r3
 8009e60:	b358      	cbz	r0, 8009eba <rclc_executor_spin_some+0x1da>
 8009e62:	68e3      	ldr	r3, [r4, #12]
 8009e64:	b34b      	cbz	r3, 8009eba <rclc_executor_spin_some+0x1da>
 8009e66:	f04f 0800 	mov.w	r8, #0
 8009e6a:	f240 1991 	movw	r9, #401	@ 0x191
 8009e6e:	e00a      	b.n	8009e86 <rclc_executor_spin_some+0x1a6>
 8009e70:	f7ff fb3e 	bl	80094f0 <_rclc_take_new_data>
 8009e74:	f108 0801 	add.w	r8, r8, #1
 8009e78:	4605      	mov	r5, r0
 8009e7a:	b108      	cbz	r0, 8009e80 <rclc_executor_spin_some+0x1a0>
 8009e7c:	4548      	cmp	r0, r9
 8009e7e:	d11c      	bne.n	8009eba <rclc_executor_spin_some+0x1da>
 8009e80:	68e3      	ldr	r3, [r4, #12]
 8009e82:	4598      	cmp	r8, r3
 8009e84:	d26f      	bcs.n	8009f66 <rclc_executor_spin_some+0x286>
 8009e86:	68a3      	ldr	r3, [r4, #8]
 8009e88:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8009e92:	2a00      	cmp	r2, #0
 8009e94:	d1ec      	bne.n	8009e70 <rclc_executor_spin_some+0x190>
 8009e96:	2700      	movs	r7, #0
 8009e98:	e009      	b.n	8009eae <rclc_executor_spin_some+0x1ce>
 8009e9a:	f7ff fcc9 	bl	8009830 <_rclc_execute>
 8009e9e:	3701      	adds	r7, #1
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	b950      	cbnz	r0, 8009eba <rclc_executor_spin_some+0x1da>
 8009ea4:	68e3      	ldr	r3, [r4, #12]
 8009ea6:	429f      	cmp	r7, r3
 8009ea8:	f4bf af63 	bcs.w	8009d72 <rclc_executor_spin_some+0x92>
 8009eac:	68a3      	ldr	r3, [r4, #8]
 8009eae:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 8009eb2:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1ef      	bne.n	8009e9a <rclc_executor_spin_some+0x1ba>
 8009eba:	462e      	mov	r6, r5
 8009ebc:	e759      	b.n	8009d72 <rclc_executor_spin_some+0x92>
 8009ebe:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 8009ec2:	4663      	mov	r3, ip
 8009ec4:	2a00      	cmp	r2, #0
 8009ec6:	d054      	beq.n	8009f72 <rclc_executor_spin_some+0x292>
 8009ec8:	46a8      	mov	r8, r5
 8009eca:	f240 1991 	movw	r9, #401	@ 0x191
 8009ece:	e00b      	b.n	8009ee8 <rclc_executor_spin_some+0x208>
 8009ed0:	f7ff fac0 	bl	8009454 <_rclc_check_for_new_data>
 8009ed4:	f108 0801 	add.w	r8, r8, #1
 8009ed8:	4605      	mov	r5, r0
 8009eda:	b108      	cbz	r0, 8009ee0 <rclc_executor_spin_some+0x200>
 8009edc:	4548      	cmp	r0, r9
 8009ede:	d1ec      	bne.n	8009eba <rclc_executor_spin_some+0x1da>
 8009ee0:	68e2      	ldr	r2, [r4, #12]
 8009ee2:	4590      	cmp	r8, r2
 8009ee4:	d23c      	bcs.n	8009f60 <rclc_executor_spin_some+0x280>
 8009ee6:	68a3      	ldr	r3, [r4, #8]
 8009ee8:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 8009eec:	469c      	mov	ip, r3
 8009eee:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009ef2:	4639      	mov	r1, r7
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1eb      	bne.n	8009ed0 <rclc_executor_spin_some+0x1f0>
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4660      	mov	r0, ip
 8009efc:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 8009f00:	4798      	blx	r3
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d0d9      	beq.n	8009eba <rclc_executor_spin_some+0x1da>
 8009f06:	68e3      	ldr	r3, [r4, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0d6      	beq.n	8009eba <rclc_executor_spin_some+0x1da>
 8009f0c:	f04f 0a00 	mov.w	sl, #0
 8009f10:	f240 1891 	movw	r8, #401	@ 0x191
 8009f14:	f240 2959 	movw	r9, #601	@ 0x259
 8009f18:	e013      	b.n	8009f42 <rclc_executor_spin_some+0x262>
 8009f1a:	f7ff fae9 	bl	80094f0 <_rclc_take_new_data>
 8009f1e:	b118      	cbz	r0, 8009f28 <rclc_executor_spin_some+0x248>
 8009f20:	4540      	cmp	r0, r8
 8009f22:	d001      	beq.n	8009f28 <rclc_executor_spin_some+0x248>
 8009f24:	4548      	cmp	r0, r9
 8009f26:	d122      	bne.n	8009f6e <rclc_executor_spin_some+0x28e>
 8009f28:	68a0      	ldr	r0, [r4, #8]
 8009f2a:	4458      	add	r0, fp
 8009f2c:	f7ff fc80 	bl	8009830 <_rclc_execute>
 8009f30:	f10a 0a01 	add.w	sl, sl, #1
 8009f34:	4605      	mov	r5, r0
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d1bf      	bne.n	8009eba <rclc_executor_spin_some+0x1da>
 8009f3a:	68e3      	ldr	r3, [r4, #12]
 8009f3c:	459a      	cmp	sl, r3
 8009f3e:	f4bf af18 	bcs.w	8009d72 <rclc_executor_spin_some+0x92>
 8009f42:	68a0      	ldr	r0, [r4, #8]
 8009f44:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 8009f48:	4639      	mov	r1, r7
 8009f4a:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8009f4e:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1e1      	bne.n	8009f1a <rclc_executor_spin_some+0x23a>
 8009f56:	462e      	mov	r6, r5
 8009f58:	e70b      	b.n	8009d72 <rclc_executor_spin_some+0x92>
 8009f5a:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8009f5e:	e77a      	b.n	8009e56 <rclc_executor_spin_some+0x176>
 8009f60:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8009f64:	e7c8      	b.n	8009ef8 <rclc_executor_spin_some+0x218>
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0a7      	beq.n	8009eba <rclc_executor_spin_some+0x1da>
 8009f6a:	68a3      	ldr	r3, [r4, #8]
 8009f6c:	e793      	b.n	8009e96 <rclc_executor_spin_some+0x1b6>
 8009f6e:	4606      	mov	r6, r0
 8009f70:	e6ff      	b.n	8009d72 <rclc_executor_spin_some+0x92>
 8009f72:	4615      	mov	r5, r2
 8009f74:	e7c0      	b.n	8009ef8 <rclc_executor_spin_some+0x218>
 8009f76:	bf00      	nop

08009f78 <rclc_executor_handle_counters_zero_init>:
 8009f78:	b130      	cbz	r0, 8009f88 <rclc_executor_handle_counters_zero_init+0x10>
 8009f7a:	b508      	push	{r3, lr}
 8009f7c:	2220      	movs	r2, #32
 8009f7e:	2100      	movs	r1, #0
 8009f80:	f00e f9c8 	bl	8018314 <memset>
 8009f84:	2000      	movs	r0, #0
 8009f86:	bd08      	pop	{r3, pc}
 8009f88:	200b      	movs	r0, #11
 8009f8a:	4770      	bx	lr

08009f8c <rclc_executor_handle_init>:
 8009f8c:	b158      	cbz	r0, 8009fa6 <rclc_executor_handle_init+0x1a>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	220b      	movs	r2, #11
 8009f92:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8009f96:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8009f9a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 8009f9e:	8002      	strh	r2, [r0, #0]
 8009fa0:	8703      	strh	r3, [r0, #56]	@ 0x38
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	4770      	bx	lr
 8009fa6:	200b      	movs	r0, #11
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop

08009fac <rclc_support_init>:
 8009fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	b086      	sub	sp, #24
 8009fb2:	b3b8      	cbz	r0, 800a024 <rclc_support_init+0x78>
 8009fb4:	461c      	mov	r4, r3
 8009fb6:	b3ab      	cbz	r3, 800a024 <rclc_support_init+0x78>
 8009fb8:	460f      	mov	r7, r1
 8009fba:	4690      	mov	r8, r2
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	f006 ff19 	bl	8010df4 <rcl_get_zero_initialized_init_options>
 8009fc2:	f104 030c 	add.w	r3, r4, #12
 8009fc6:	9005      	str	r0, [sp, #20]
 8009fc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009fcc:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009fd0:	a805      	add	r0, sp, #20
 8009fd2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8009fd6:	f006 ff0f 	bl	8010df8 <rcl_init_options_init>
 8009fda:	4605      	mov	r5, r0
 8009fdc:	b9e0      	cbnz	r0, 800a018 <rclc_support_init+0x6c>
 8009fde:	ad02      	add	r5, sp, #8
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	f006 fd99 	bl	8010b18 <rcl_get_zero_initialized_context>
 8009fe6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009fea:	4633      	mov	r3, r6
 8009fec:	e886 0003 	stmia.w	r6, {r0, r1}
 8009ff0:	aa05      	add	r2, sp, #20
 8009ff2:	4641      	mov	r1, r8
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f006 fdf9 	bl	8010bec <rcl_init>
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	b9b8      	cbnz	r0, 800a02e <rclc_support_init+0x82>
 8009ffe:	60b4      	str	r4, [r6, #8]
 800a000:	4622      	mov	r2, r4
 800a002:	f106 010c 	add.w	r1, r6, #12
 800a006:	2003      	movs	r0, #3
 800a008:	f007 fc16 	bl	8011838 <rcl_clock_init>
 800a00c:	4605      	mov	r5, r0
 800a00e:	b970      	cbnz	r0, 800a02e <rclc_support_init+0x82>
 800a010:	a805      	add	r0, sp, #20
 800a012:	f006 ff4d 	bl	8010eb0 <rcl_init_options_fini>
 800a016:	b108      	cbz	r0, 800a01c <rclc_support_init+0x70>
 800a018:	f000 f922 	bl	800a260 <rcutils_reset_error>
 800a01c:	4628      	mov	r0, r5
 800a01e:	b006      	add	sp, #24
 800a020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a024:	250b      	movs	r5, #11
 800a026:	4628      	mov	r0, r5
 800a028:	b006      	add	sp, #24
 800a02a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a02e:	f000 f917 	bl	800a260 <rcutils_reset_error>
 800a032:	a805      	add	r0, sp, #20
 800a034:	f006 ff3c 	bl	8010eb0 <rcl_init_options_fini>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d0ef      	beq.n	800a01c <rclc_support_init+0x70>
 800a03c:	e7ec      	b.n	800a018 <rclc_support_init+0x6c>
 800a03e:	bf00      	nop

0800a040 <rclc_node_init_default>:
 800a040:	b3b8      	cbz	r0, 800a0b2 <rclc_node_init_default+0x72>
 800a042:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a046:	460d      	mov	r5, r1
 800a048:	b0a1      	sub	sp, #132	@ 0x84
 800a04a:	b329      	cbz	r1, 800a098 <rclc_node_init_default+0x58>
 800a04c:	4616      	mov	r6, r2
 800a04e:	b31a      	cbz	r2, 800a098 <rclc_node_init_default+0x58>
 800a050:	461f      	mov	r7, r3
 800a052:	b30b      	cbz	r3, 800a098 <rclc_node_init_default+0x58>
 800a054:	f10d 0810 	add.w	r8, sp, #16
 800a058:	4604      	mov	r4, r0
 800a05a:	4640      	mov	r0, r8
 800a05c:	f006 ffae 	bl	8010fbc <rcl_get_zero_initialized_node>
 800a060:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a064:	f10d 0918 	add.w	r9, sp, #24
 800a068:	e884 0003 	stmia.w	r4, {r0, r1}
 800a06c:	4648      	mov	r0, r9
 800a06e:	f007 f94d 	bl	801130c <rcl_node_get_default_options>
 800a072:	4640      	mov	r0, r8
 800a074:	f006 ffa2 	bl	8010fbc <rcl_get_zero_initialized_node>
 800a078:	f8cd 9000 	str.w	r9, [sp]
 800a07c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a080:	463b      	mov	r3, r7
 800a082:	e884 0003 	stmia.w	r4, {r0, r1}
 800a086:	4632      	mov	r2, r6
 800a088:	4629      	mov	r1, r5
 800a08a:	4620      	mov	r0, r4
 800a08c:	f006 ffa0 	bl	8010fd0 <rcl_node_init>
 800a090:	b930      	cbnz	r0, 800a0a0 <rclc_node_init_default+0x60>
 800a092:	b021      	add	sp, #132	@ 0x84
 800a094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a098:	200b      	movs	r0, #11
 800a09a:	b021      	add	sp, #132	@ 0x84
 800a09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0a0:	9003      	str	r0, [sp, #12]
 800a0a2:	f000 f8dd 	bl	800a260 <rcutils_reset_error>
 800a0a6:	f000 f8db 	bl	800a260 <rcutils_reset_error>
 800a0aa:	9803      	ldr	r0, [sp, #12]
 800a0ac:	b021      	add	sp, #132	@ 0x84
 800a0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0b2:	200b      	movs	r0, #11
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop

0800a0b8 <rclc_publisher_init_default>:
 800a0b8:	b368      	cbz	r0, 800a116 <rclc_publisher_init_default+0x5e>
 800a0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0be:	460d      	mov	r5, r1
 800a0c0:	b0a0      	sub	sp, #128	@ 0x80
 800a0c2:	b321      	cbz	r1, 800a10e <rclc_publisher_init_default+0x56>
 800a0c4:	4616      	mov	r6, r2
 800a0c6:	b312      	cbz	r2, 800a10e <rclc_publisher_init_default+0x56>
 800a0c8:	461f      	mov	r7, r3
 800a0ca:	b303      	cbz	r3, 800a10e <rclc_publisher_init_default+0x56>
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	f7ff f8b1 	bl	8009234 <rcl_get_zero_initialized_publisher>
 800a0d2:	f10d 0810 	add.w	r8, sp, #16
 800a0d6:	6020      	str	r0, [r4, #0]
 800a0d8:	4640      	mov	r0, r8
 800a0da:	f7ff f949 	bl	8009370 <rcl_publisher_get_default_options>
 800a0de:	490f      	ldr	r1, [pc, #60]	@ (800a11c <rclc_publisher_init_default+0x64>)
 800a0e0:	2250      	movs	r2, #80	@ 0x50
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	f00e f9f1 	bl	80184ca <memcpy>
 800a0e8:	f8cd 8000 	str.w	r8, [sp]
 800a0ec:	463b      	mov	r3, r7
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f7ff f8a4 	bl	8009240 <rcl_publisher_init>
 800a0f8:	b910      	cbnz	r0, 800a100 <rclc_publisher_init_default+0x48>
 800a0fa:	b020      	add	sp, #128	@ 0x80
 800a0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a100:	9003      	str	r0, [sp, #12]
 800a102:	f000 f8ad 	bl	800a260 <rcutils_reset_error>
 800a106:	9803      	ldr	r0, [sp, #12]
 800a108:	b020      	add	sp, #128	@ 0x80
 800a10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a10e:	200b      	movs	r0, #11
 800a110:	b020      	add	sp, #128	@ 0x80
 800a112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a116:	200b      	movs	r0, #11
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	0801a6a0 	.word	0x0801a6a0

0800a120 <rclc_timer_init_default2>:
 800a120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a124:	b08c      	sub	sp, #48	@ 0x30
 800a126:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 800a12a:	b330      	cbz	r0, 800a17a <rclc_timer_init_default2+0x5a>
 800a12c:	460e      	mov	r6, r1
 800a12e:	b321      	cbz	r1, 800a17a <rclc_timer_init_default2+0x5a>
 800a130:	4690      	mov	r8, r2
 800a132:	461f      	mov	r7, r3
 800a134:	4605      	mov	r5, r0
 800a136:	f007 fd5f 	bl	8011bf8 <rcl_get_zero_initialized_timer>
 800a13a:	9408      	str	r4, [sp, #32]
 800a13c:	68b4      	ldr	r4, [r6, #8]
 800a13e:	6028      	str	r0, [r5, #0]
 800a140:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a142:	f10d 0c0c 	add.w	ip, sp, #12
 800a146:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	f8cc 3000 	str.w	r3, [ip]
 800a150:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a152:	9302      	str	r3, [sp, #8]
 800a154:	e9cd 8700 	strd	r8, r7, [sp]
 800a158:	4628      	mov	r0, r5
 800a15a:	4632      	mov	r2, r6
 800a15c:	f106 010c 	add.w	r1, r6, #12
 800a160:	f007 fd52 	bl	8011c08 <rcl_timer_init2>
 800a164:	b910      	cbnz	r0, 800a16c <rclc_timer_init_default2+0x4c>
 800a166:	b00c      	add	sp, #48	@ 0x30
 800a168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a16c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a16e:	f000 f877 	bl	800a260 <rcutils_reset_error>
 800a172:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a174:	b00c      	add	sp, #48	@ 0x30
 800a176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a17a:	200b      	movs	r0, #11
 800a17c:	b00c      	add	sp, #48	@ 0x30
 800a17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a182:	bf00      	nop

0800a184 <__default_zero_allocate>:
 800a184:	f00d bbe8 	b.w	8017958 <calloc>

0800a188 <__default_reallocate>:
 800a188:	f00d bd86 	b.w	8017c98 <realloc>

0800a18c <__default_deallocate>:
 800a18c:	f00d bc62 	b.w	8017a54 <free>

0800a190 <__default_allocate>:
 800a190:	f00d bc58 	b.w	8017a44 <malloc>

0800a194 <rcutils_get_zero_initialized_allocator>:
 800a194:	b510      	push	{r4, lr}
 800a196:	4c05      	ldr	r4, [pc, #20]	@ (800a1ac <rcutils_get_zero_initialized_allocator+0x18>)
 800a198:	4686      	mov	lr, r0
 800a19a:	4684      	mov	ip, r0
 800a19c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a19e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	f8cc 3000 	str.w	r3, [ip]
 800a1a8:	4670      	mov	r0, lr
 800a1aa:	bd10      	pop	{r4, pc}
 800a1ac:	0801a6f0 	.word	0x0801a6f0

0800a1b0 <rcutils_get_default_allocator>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	4c05      	ldr	r4, [pc, #20]	@ (800a1c8 <rcutils_get_default_allocator+0x18>)
 800a1b4:	4686      	mov	lr, r0
 800a1b6:	4684      	mov	ip, r0
 800a1b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	f8cc 3000 	str.w	r3, [ip]
 800a1c4:	4670      	mov	r0, lr
 800a1c6:	bd10      	pop	{r4, pc}
 800a1c8:	20000170 	.word	0x20000170

0800a1cc <rcutils_set_default_allocator>:
 800a1cc:	b1a8      	cbz	r0, 800a1fa <rcutils_set_default_allocator+0x2e>
 800a1ce:	6802      	ldr	r2, [r0, #0]
 800a1d0:	b1a2      	cbz	r2, 800a1fc <rcutils_set_default_allocator+0x30>
 800a1d2:	6841      	ldr	r1, [r0, #4]
 800a1d4:	b1a1      	cbz	r1, 800a200 <rcutils_set_default_allocator+0x34>
 800a1d6:	b410      	push	{r4}
 800a1d8:	68c4      	ldr	r4, [r0, #12]
 800a1da:	b164      	cbz	r4, 800a1f6 <rcutils_set_default_allocator+0x2a>
 800a1dc:	6880      	ldr	r0, [r0, #8]
 800a1de:	b138      	cbz	r0, 800a1f0 <rcutils_set_default_allocator+0x24>
 800a1e0:	4b08      	ldr	r3, [pc, #32]	@ (800a204 <rcutils_set_default_allocator+0x38>)
 800a1e2:	601a      	str	r2, [r3, #0]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a1ea:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	e7fa      	b.n	800a1f0 <rcutils_set_default_allocator+0x24>
 800a1fa:	4770      	bx	lr
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	4770      	bx	lr
 800a200:	4608      	mov	r0, r1
 800a202:	4770      	bx	lr
 800a204:	20000170 	.word	0x20000170

0800a208 <rcutils_allocator_is_valid>:
 800a208:	b158      	cbz	r0, 800a222 <rcutils_allocator_is_valid+0x1a>
 800a20a:	6803      	ldr	r3, [r0, #0]
 800a20c:	b143      	cbz	r3, 800a220 <rcutils_allocator_is_valid+0x18>
 800a20e:	6843      	ldr	r3, [r0, #4]
 800a210:	b133      	cbz	r3, 800a220 <rcutils_allocator_is_valid+0x18>
 800a212:	68c3      	ldr	r3, [r0, #12]
 800a214:	b123      	cbz	r3, 800a220 <rcutils_allocator_is_valid+0x18>
 800a216:	6880      	ldr	r0, [r0, #8]
 800a218:	3800      	subs	r0, #0
 800a21a:	bf18      	it	ne
 800a21c:	2001      	movne	r0, #1
 800a21e:	4770      	bx	lr
 800a220:	4618      	mov	r0, r3
 800a222:	4770      	bx	lr

0800a224 <rcutils_error_is_set>:
 800a224:	4b01      	ldr	r3, [pc, #4]	@ (800a22c <rcutils_error_is_set+0x8>)
 800a226:	7818      	ldrb	r0, [r3, #0]
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	2000b6f4 	.word	0x2000b6f4

0800a230 <rcutils_get_error_string>:
 800a230:	4b06      	ldr	r3, [pc, #24]	@ (800a24c <rcutils_get_error_string+0x1c>)
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	b13b      	cbz	r3, 800a246 <rcutils_get_error_string+0x16>
 800a236:	4b06      	ldr	r3, [pc, #24]	@ (800a250 <rcutils_get_error_string+0x20>)
 800a238:	781a      	ldrb	r2, [r3, #0]
 800a23a:	b90a      	cbnz	r2, 800a240 <rcutils_get_error_string+0x10>
 800a23c:	2201      	movs	r2, #1
 800a23e:	701a      	strb	r2, [r3, #0]
 800a240:	4b04      	ldr	r3, [pc, #16]	@ (800a254 <rcutils_get_error_string+0x24>)
 800a242:	7818      	ldrb	r0, [r3, #0]
 800a244:	4770      	bx	lr
 800a246:	4b04      	ldr	r3, [pc, #16]	@ (800a258 <rcutils_get_error_string+0x28>)
 800a248:	7818      	ldrb	r0, [r3, #0]
 800a24a:	4770      	bx	lr
 800a24c:	2000b6f4 	.word	0x2000b6f4
 800a250:	2000b6f9 	.word	0x2000b6f9
 800a254:	2000b6f8 	.word	0x2000b6f8
 800a258:	08019e44 	.word	0x08019e44
 800a25c:	00000000 	.word	0x00000000

0800a260 <rcutils_reset_error>:
 800a260:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a280 <rcutils_reset_error+0x20>
 800a264:	4a08      	ldr	r2, [pc, #32]	@ (800a288 <rcutils_reset_error+0x28>)
 800a266:	4809      	ldr	r0, [pc, #36]	@ (800a28c <rcutils_reset_error+0x2c>)
 800a268:	4909      	ldr	r1, [pc, #36]	@ (800a290 <rcutils_reset_error+0x30>)
 800a26a:	2300      	movs	r3, #0
 800a26c:	8013      	strh	r3, [r2, #0]
 800a26e:	ed82 7b02 	vstr	d7, [r2, #8]
 800a272:	4a08      	ldr	r2, [pc, #32]	@ (800a294 <rcutils_reset_error+0x34>)
 800a274:	7003      	strb	r3, [r0, #0]
 800a276:	700b      	strb	r3, [r1, #0]
 800a278:	7013      	strb	r3, [r2, #0]
 800a27a:	4770      	bx	lr
 800a27c:	f3af 8000 	nop.w
	...
 800a288:	2000b700 	.word	0x2000b700
 800a28c:	2000b6f9 	.word	0x2000b6f9
 800a290:	2000b6f8 	.word	0x2000b6f8
 800a294:	2000b6f4 	.word	0x2000b6f4

0800a298 <rcutils_system_time_now>:
 800a298:	b318      	cbz	r0, 800a2e2 <rcutils_system_time_now+0x4a>
 800a29a:	b570      	push	{r4, r5, r6, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	4604      	mov	r4, r0
 800a2a0:	4669      	mov	r1, sp
 800a2a2:	2001      	movs	r0, #1
 800a2a4:	f7f7 ff4c 	bl	8002140 <clock_gettime>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	db17      	blt.n	800a2dc <rcutils_system_time_now+0x44>
 800a2ac:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a2b0:	2900      	cmp	r1, #0
 800a2b2:	db13      	blt.n	800a2dc <rcutils_system_time_now+0x44>
 800a2b4:	9d02      	ldr	r5, [sp, #8]
 800a2b6:	2d00      	cmp	r5, #0
 800a2b8:	db0d      	blt.n	800a2d6 <rcutils_system_time_now+0x3e>
 800a2ba:	4e0b      	ldr	r6, [pc, #44]	@ (800a2e8 <rcutils_system_time_now+0x50>)
 800a2bc:	fba3 3206 	umull	r3, r2, r3, r6
 800a2c0:	195b      	adds	r3, r3, r5
 800a2c2:	fb06 2201 	mla	r2, r6, r1, r2
 800a2c6:	f04f 0000 	mov.w	r0, #0
 800a2ca:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800a2ce:	e9c4 3200 	strd	r3, r2, [r4]
 800a2d2:	b004      	add	sp, #16
 800a2d4:	bd70      	pop	{r4, r5, r6, pc}
 800a2d6:	ea53 0201 	orrs.w	r2, r3, r1
 800a2da:	d1ee      	bne.n	800a2ba <rcutils_system_time_now+0x22>
 800a2dc:	2002      	movs	r0, #2
 800a2de:	b004      	add	sp, #16
 800a2e0:	bd70      	pop	{r4, r5, r6, pc}
 800a2e2:	200b      	movs	r0, #11
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	3b9aca00 	.word	0x3b9aca00

0800a2ec <rcutils_steady_time_now>:
 800a2ec:	b318      	cbz	r0, 800a336 <rcutils_steady_time_now+0x4a>
 800a2ee:	b570      	push	{r4, r5, r6, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4669      	mov	r1, sp
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	f7f7 ff22 	bl	8002140 <clock_gettime>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	db17      	blt.n	800a330 <rcutils_steady_time_now+0x44>
 800a300:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a304:	2900      	cmp	r1, #0
 800a306:	db13      	blt.n	800a330 <rcutils_steady_time_now+0x44>
 800a308:	9d02      	ldr	r5, [sp, #8]
 800a30a:	2d00      	cmp	r5, #0
 800a30c:	db0d      	blt.n	800a32a <rcutils_steady_time_now+0x3e>
 800a30e:	4e0b      	ldr	r6, [pc, #44]	@ (800a33c <rcutils_steady_time_now+0x50>)
 800a310:	fba3 3206 	umull	r3, r2, r3, r6
 800a314:	195b      	adds	r3, r3, r5
 800a316:	fb06 2201 	mla	r2, r6, r1, r2
 800a31a:	f04f 0000 	mov.w	r0, #0
 800a31e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800a322:	e9c4 3200 	strd	r3, r2, [r4]
 800a326:	b004      	add	sp, #16
 800a328:	bd70      	pop	{r4, r5, r6, pc}
 800a32a:	ea53 0201 	orrs.w	r2, r3, r1
 800a32e:	d1ee      	bne.n	800a30e <rcutils_steady_time_now+0x22>
 800a330:	2002      	movs	r0, #2
 800a332:	b004      	add	sp, #16
 800a334:	bd70      	pop	{r4, r5, r6, pc}
 800a336:	200b      	movs	r0, #11
 800a338:	4770      	bx	lr
 800a33a:	bf00      	nop
 800a33c:	3b9aca00 	.word	0x3b9aca00

0800a340 <rmw_get_default_publisher_options>:
 800a340:	2200      	movs	r2, #0
 800a342:	6002      	str	r2, [r0, #0]
 800a344:	7102      	strb	r2, [r0, #4]
 800a346:	4770      	bx	lr

0800a348 <rmw_uros_set_custom_transport>:
 800a348:	b470      	push	{r4, r5, r6}
 800a34a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a34e:	b162      	cbz	r2, 800a36a <rmw_uros_set_custom_transport+0x22>
 800a350:	b15b      	cbz	r3, 800a36a <rmw_uros_set_custom_transport+0x22>
 800a352:	b155      	cbz	r5, 800a36a <rmw_uros_set_custom_transport+0x22>
 800a354:	b14e      	cbz	r6, 800a36a <rmw_uros_set_custom_transport+0x22>
 800a356:	4c06      	ldr	r4, [pc, #24]	@ (800a370 <rmw_uros_set_custom_transport+0x28>)
 800a358:	7020      	strb	r0, [r4, #0]
 800a35a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a35e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a362:	6166      	str	r6, [r4, #20]
 800a364:	2000      	movs	r0, #0
 800a366:	bc70      	pop	{r4, r5, r6}
 800a368:	4770      	bx	lr
 800a36a:	200b      	movs	r0, #11
 800a36c:	bc70      	pop	{r4, r5, r6}
 800a36e:	4770      	bx	lr
 800a370:	2000b710 	.word	0x2000b710

0800a374 <rmw_uros_ping_agent>:
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	4b22      	ldr	r3, [pc, #136]	@ (800a400 <rmw_uros_ping_agent+0x8c>)
 800a378:	7b1a      	ldrb	r2, [r3, #12]
 800a37a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800a37e:	4605      	mov	r5, r0
 800a380:	460e      	mov	r6, r1
 800a382:	b10a      	cbz	r2, 800a388 <rmw_uros_ping_agent+0x14>
 800a384:	681c      	ldr	r4, [r3, #0]
 800a386:	b9bc      	cbnz	r4, 800a3b8 <rmw_uros_ping_agent+0x44>
 800a388:	4b1e      	ldr	r3, [pc, #120]	@ (800a404 <rmw_uros_ping_agent+0x90>)
 800a38a:	781a      	ldrb	r2, [r3, #0]
 800a38c:	6918      	ldr	r0, [r3, #16]
 800a38e:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800a396:	2100      	movs	r1, #0
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	909c      	str	r0, [sp, #624]	@ 0x270
 800a39c:	6958      	ldr	r0, [r3, #20]
 800a39e:	929b      	str	r2, [sp, #620]	@ 0x26c
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	909d      	str	r0, [sp, #628]	@ 0x274
 800a3a4:	466a      	mov	r2, sp
 800a3a6:	4608      	mov	r0, r1
 800a3a8:	939a      	str	r3, [sp, #616]	@ 0x268
 800a3aa:	f000 f9cd 	bl	800a748 <rmw_uxrce_transport_init>
 800a3ae:	b198      	cbz	r0, 800a3d8 <rmw_uros_ping_agent+0x64>
 800a3b0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a3b4:	bd70      	pop	{r4, r5, r6, pc}
 800a3b6:	b9f0      	cbnz	r0, 800a3f6 <rmw_uros_ping_agent+0x82>
 800a3b8:	68a0      	ldr	r0, [r4, #8]
 800a3ba:	4632      	mov	r2, r6
 800a3bc:	4629      	mov	r1, r5
 800a3be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a3c2:	f003 f869 	bl	800d498 <uxr_ping_agent_session>
 800a3c6:	6864      	ldr	r4, [r4, #4]
 800a3c8:	2c00      	cmp	r4, #0
 800a3ca:	d1f4      	bne.n	800a3b6 <rmw_uros_ping_agent+0x42>
 800a3cc:	f080 0001 	eor.w	r0, r0, #1
 800a3d0:	b2c0      	uxtb	r0, r0
 800a3d2:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}
 800a3d8:	4632      	mov	r2, r6
 800a3da:	4629      	mov	r1, r5
 800a3dc:	a89e      	add	r0, sp, #632	@ 0x278
 800a3de:	f003 f8ab 	bl	800d538 <uxr_ping_agent_attempts>
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4668      	mov	r0, sp
 800a3e6:	f003 f825 	bl	800d434 <uxr_close_custom_transport>
 800a3ea:	f084 0001 	eor.w	r0, r4, #1
 800a3ee:	b2c0      	uxtb	r0, r0
 800a3f0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a3f4:	bd70      	pop	{r4, r5, r6, pc}
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800a3fc:	bd70      	pop	{r4, r5, r6, pc}
 800a3fe:	bf00      	nop
 800a400:	20010070 	.word	0x20010070
 800a404:	2000b710 	.word	0x2000b710

0800a408 <flush_session>:
 800a408:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a40a:	f003 bde5 	b.w	800dfd8 <uxr_run_session_until_confirm_delivery>
 800a40e:	bf00      	nop

0800a410 <rmw_publish>:
 800a410:	2800      	cmp	r0, #0
 800a412:	d053      	beq.n	800a4bc <rmw_publish+0xac>
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	460d      	mov	r5, r1
 800a418:	b08e      	sub	sp, #56	@ 0x38
 800a41a:	2900      	cmp	r1, #0
 800a41c:	d04b      	beq.n	800a4b6 <rmw_publish+0xa6>
 800a41e:	4604      	mov	r4, r0
 800a420:	6800      	ldr	r0, [r0, #0]
 800a422:	f000 fd2d 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 800a426:	2800      	cmp	r0, #0
 800a428:	d045      	beq.n	800a4b6 <rmw_publish+0xa6>
 800a42a:	6866      	ldr	r6, [r4, #4]
 800a42c:	2e00      	cmp	r6, #0
 800a42e:	d042      	beq.n	800a4b6 <rmw_publish+0xa6>
 800a430:	69b4      	ldr	r4, [r6, #24]
 800a432:	4628      	mov	r0, r5
 800a434:	6923      	ldr	r3, [r4, #16]
 800a436:	4798      	blx	r3
 800a438:	69f3      	ldr	r3, [r6, #28]
 800a43a:	9005      	str	r0, [sp, #20]
 800a43c:	b113      	cbz	r3, 800a444 <rmw_publish+0x34>
 800a43e:	a805      	add	r0, sp, #20
 800a440:	4798      	blx	r3
 800a442:	9805      	ldr	r0, [sp, #20]
 800a444:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	9000      	str	r0, [sp, #0]
 800a44c:	6972      	ldr	r2, [r6, #20]
 800a44e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a450:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a454:	ab06      	add	r3, sp, #24
 800a456:	f005 f87f 	bl	800f558 <uxr_prepare_output_stream>
 800a45a:	b1d8      	cbz	r0, 800a494 <rmw_publish+0x84>
 800a45c:	68a3      	ldr	r3, [r4, #8]
 800a45e:	a906      	add	r1, sp, #24
 800a460:	4628      	mov	r0, r5
 800a462:	4798      	blx	r3
 800a464:	6a33      	ldr	r3, [r6, #32]
 800a466:	4604      	mov	r4, r0
 800a468:	b10b      	cbz	r3, 800a46e <rmw_publish+0x5e>
 800a46a:	a806      	add	r0, sp, #24
 800a46c:	4798      	blx	r3
 800a46e:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a472:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800a476:	2b01      	cmp	r3, #1
 800a478:	6910      	ldr	r0, [r2, #16]
 800a47a:	d021      	beq.n	800a4c0 <rmw_publish+0xb0>
 800a47c:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a47e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a482:	f003 fda9 	bl	800dfd8 <uxr_run_session_until_confirm_delivery>
 800a486:	4004      	ands	r4, r0
 800a488:	b2e4      	uxtb	r4, r4
 800a48a:	f084 0001 	eor.w	r0, r4, #1
 800a48e:	b2c0      	uxtb	r0, r0
 800a490:	b00e      	add	sp, #56	@ 0x38
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a498:	6918      	ldr	r0, [r3, #16]
 800a49a:	4b0c      	ldr	r3, [pc, #48]	@ (800a4cc <rmw_publish+0xbc>)
 800a49c:	9301      	str	r3, [sp, #4]
 800a49e:	9b05      	ldr	r3, [sp, #20]
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	9602      	str	r6, [sp, #8]
 800a4a4:	6972      	ldr	r2, [r6, #20]
 800a4a6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a4a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a4ac:	ab06      	add	r3, sp, #24
 800a4ae:	f005 f883 	bl	800f5b8 <uxr_prepare_output_stream_fragmented>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d1d2      	bne.n	800a45c <rmw_publish+0x4c>
 800a4b6:	2001      	movs	r0, #1
 800a4b8:	b00e      	add	sp, #56	@ 0x38
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	2001      	movs	r0, #1
 800a4be:	4770      	bx	lr
 800a4c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a4c4:	f003 f9f0 	bl	800d8a8 <uxr_flash_output_streams>
 800a4c8:	e7df      	b.n	800a48a <rmw_publish+0x7a>
 800a4ca:	bf00      	nop
 800a4cc:	0800a409 	.word	0x0800a409

0800a4d0 <rmw_create_publisher>:
 800a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	b087      	sub	sp, #28
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	f000 80c9 	beq.w	800a66e <rmw_create_publisher+0x19e>
 800a4dc:	460f      	mov	r7, r1
 800a4de:	2900      	cmp	r1, #0
 800a4e0:	f000 80c5 	beq.w	800a66e <rmw_create_publisher+0x19e>
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	6800      	ldr	r0, [r0, #0]
 800a4e8:	4615      	mov	r5, r2
 800a4ea:	461e      	mov	r6, r3
 800a4ec:	f000 fcc8 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	f000 80bc 	beq.w	800a66e <rmw_create_publisher+0x19e>
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	f000 80b9 	beq.w	800a66e <rmw_create_publisher+0x19e>
 800a4fc:	782b      	ldrb	r3, [r5, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 80b5 	beq.w	800a66e <rmw_create_publisher+0x19e>
 800a504:	2e00      	cmp	r6, #0
 800a506:	f000 80b2 	beq.w	800a66e <rmw_create_publisher+0x19e>
 800a50a:	485c      	ldr	r0, [pc, #368]	@ (800a67c <rmw_create_publisher+0x1ac>)
 800a50c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a510:	f009 fe34 	bl	801417c <get_memory>
 800a514:	2800      	cmp	r0, #0
 800a516:	f000 80aa 	beq.w	800a66e <rmw_create_publisher+0x19e>
 800a51a:	6884      	ldr	r4, [r0, #8]
 800a51c:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a520:	f009 feb2 	bl	8014288 <rmw_get_implementation_identifier>
 800a524:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a528:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a52c:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a530:	4628      	mov	r0, r5
 800a532:	f7f5 fecd 	bl	80002d0 <strlen>
 800a536:	3001      	adds	r0, #1
 800a538:	283c      	cmp	r0, #60	@ 0x3c
 800a53a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800a53e:	f200 808f 	bhi.w	800a660 <rmw_create_publisher+0x190>
 800a542:	4a4f      	ldr	r2, [pc, #316]	@ (800a680 <rmw_create_publisher+0x1b0>)
 800a544:	462b      	mov	r3, r5
 800a546:	213c      	movs	r1, #60	@ 0x3c
 800a548:	4650      	mov	r0, sl
 800a54a:	f00d fd6f 	bl	801802c <sniprintf>
 800a54e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a552:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a554:	4631      	mov	r1, r6
 800a556:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a55a:	2250      	movs	r2, #80	@ 0x50
 800a55c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a560:	f00d ffb3 	bl	80184ca <memcpy>
 800a564:	7a33      	ldrb	r3, [r6, #8]
 800a566:	4947      	ldr	r1, [pc, #284]	@ (800a684 <rmw_create_publisher+0x1b4>)
 800a568:	2b02      	cmp	r3, #2
 800a56a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a56e:	bf0c      	ite	eq
 800a570:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a574:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a578:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a57a:	2300      	movs	r3, #0
 800a57c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a580:	4638      	mov	r0, r7
 800a582:	f000 fc8b 	bl	800ae9c <get_message_typesupport_handle>
 800a586:	2800      	cmp	r0, #0
 800a588:	d06a      	beq.n	800a660 <rmw_create_publisher+0x190>
 800a58a:	6842      	ldr	r2, [r0, #4]
 800a58c:	61a2      	str	r2, [r4, #24]
 800a58e:	2a00      	cmp	r2, #0
 800a590:	d066      	beq.n	800a660 <rmw_create_publisher+0x190>
 800a592:	4629      	mov	r1, r5
 800a594:	4633      	mov	r3, r6
 800a596:	4648      	mov	r0, r9
 800a598:	f00a f8d2 	bl	8014740 <create_topic>
 800a59c:	6260      	str	r0, [r4, #36]	@ 0x24
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d062      	beq.n	800a668 <rmw_create_publisher+0x198>
 800a5a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5aa:	2103      	movs	r1, #3
 800a5ac:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800a5b0:	1c42      	adds	r2, r0, #1
 800a5b2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800a5b6:	f002 ff41 	bl	800d43c <uxr_object_id>
 800a5ba:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800a5be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5c2:	6120      	str	r0, [r4, #16]
 800a5c4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800a5c8:	6910      	ldr	r0, [r2, #16]
 800a5ca:	2506      	movs	r5, #6
 800a5cc:	9500      	str	r5, [sp, #0]
 800a5ce:	6819      	ldr	r1, [r3, #0]
 800a5d0:	6922      	ldr	r2, [r4, #16]
 800a5d2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a5d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a5da:	f002 fddb 	bl	800d194 <uxr_buffer_create_publisher_bin>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a5e4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a5e8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a5ec:	f000 fbc2 	bl	800ad74 <run_xrce_session>
 800a5f0:	b3b0      	cbz	r0, 800a660 <rmw_create_publisher+0x190>
 800a5f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5fa:	2105      	movs	r1, #5
 800a5fc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800a600:	1c42      	adds	r2, r0, #1
 800a602:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800a606:	f002 ff19 	bl	800d43c <uxr_object_id>
 800a60a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a60e:	6160      	str	r0, [r4, #20]
 800a610:	4631      	mov	r1, r6
 800a612:	af04      	add	r7, sp, #16
 800a614:	691e      	ldr	r6, [r3, #16]
 800a616:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a61a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800a61e:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800a622:	4638      	mov	r0, r7
 800a624:	f000 fbc6 	bl	800adb4 <convert_qos_profile>
 800a628:	9503      	str	r5, [sp, #12]
 800a62a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a62e:	9001      	str	r0, [sp, #4]
 800a630:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a634:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800a63e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a642:	f8da 1000 	ldr.w	r1, [sl]
 800a646:	4630      	mov	r0, r6
 800a648:	f002 fdd2 	bl	800d1f0 <uxr_buffer_create_datawriter_bin>
 800a64c:	4602      	mov	r2, r0
 800a64e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a652:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800a656:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800a65a:	f000 fb8b 	bl	800ad74 <run_xrce_session>
 800a65e:	b940      	cbnz	r0, 800a672 <rmw_create_publisher+0x1a2>
 800a660:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a662:	b108      	cbz	r0, 800a668 <rmw_create_publisher+0x198>
 800a664:	f000 fa7e 	bl	800ab64 <rmw_uxrce_fini_topic_memory>
 800a668:	4640      	mov	r0, r8
 800a66a:	f000 fa23 	bl	800aab4 <rmw_uxrce_fini_publisher_memory>
 800a66e:	f04f 0800 	mov.w	r8, #0
 800a672:	4640      	mov	r0, r8
 800a674:	b007      	add	sp, #28
 800a676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67a:	bf00      	nop
 800a67c:	2000ea00 	.word	0x2000ea00
 800a680:	08019e58 	.word	0x08019e58
 800a684:	08019dd8 	.word	0x08019dd8

0800a688 <rmw_publisher_get_actual_qos>:
 800a688:	b508      	push	{r3, lr}
 800a68a:	4603      	mov	r3, r0
 800a68c:	b140      	cbz	r0, 800a6a0 <rmw_publisher_get_actual_qos+0x18>
 800a68e:	4608      	mov	r0, r1
 800a690:	b131      	cbz	r1, 800a6a0 <rmw_publisher_get_actual_qos+0x18>
 800a692:	6859      	ldr	r1, [r3, #4]
 800a694:	2250      	movs	r2, #80	@ 0x50
 800a696:	3128      	adds	r1, #40	@ 0x28
 800a698:	f00d ff17 	bl	80184ca <memcpy>
 800a69c:	2000      	movs	r0, #0
 800a69e:	bd08      	pop	{r3, pc}
 800a6a0:	200b      	movs	r0, #11
 800a6a2:	bd08      	pop	{r3, pc}

0800a6a4 <rmw_destroy_publisher>:
 800a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	b128      	cbz	r0, 800a6b6 <rmw_destroy_publisher+0x12>
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	6800      	ldr	r0, [r0, #0]
 800a6ae:	460d      	mov	r5, r1
 800a6b0:	f000 fbe6 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 800a6b4:	b918      	cbnz	r0, 800a6be <rmw_destroy_publisher+0x1a>
 800a6b6:	2401      	movs	r4, #1
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6be:	6863      	ldr	r3, [r4, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d0f8      	beq.n	800a6b6 <rmw_destroy_publisher+0x12>
 800a6c4:	2d00      	cmp	r5, #0
 800a6c6:	d0f6      	beq.n	800a6b6 <rmw_destroy_publisher+0x12>
 800a6c8:	6828      	ldr	r0, [r5, #0]
 800a6ca:	f000 fbd9 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d0f1      	beq.n	800a6b6 <rmw_destroy_publisher+0x12>
 800a6d2:	686c      	ldr	r4, [r5, #4]
 800a6d4:	2c00      	cmp	r4, #0
 800a6d6:	d0ee      	beq.n	800a6b6 <rmw_destroy_publisher+0x12>
 800a6d8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a6da:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800a6de:	f00a f883 	bl	80147e8 <destroy_topic>
 800a6e2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a6e6:	6962      	ldr	r2, [r4, #20]
 800a6e8:	6918      	ldr	r0, [r3, #16]
 800a6ea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a6ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a6f2:	6819      	ldr	r1, [r3, #0]
 800a6f4:	f002 fc9e 	bl	800d034 <uxr_buffer_delete_entity>
 800a6f8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800a6fc:	6922      	ldr	r2, [r4, #16]
 800a6fe:	4680      	mov	r8, r0
 800a700:	6918      	ldr	r0, [r3, #16]
 800a702:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800a706:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a70a:	6819      	ldr	r1, [r3, #0]
 800a70c:	f002 fc92 	bl	800d034 <uxr_buffer_delete_entity>
 800a710:	4606      	mov	r6, r0
 800a712:	6938      	ldr	r0, [r7, #16]
 800a714:	4642      	mov	r2, r8
 800a716:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a71a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a71e:	f000 fb29 	bl	800ad74 <run_xrce_session>
 800a722:	4604      	mov	r4, r0
 800a724:	6938      	ldr	r0, [r7, #16]
 800a726:	4632      	mov	r2, r6
 800a728:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800a72c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800a730:	f000 fb20 	bl	800ad74 <run_xrce_session>
 800a734:	4004      	ands	r4, r0
 800a736:	f084 0401 	eor.w	r4, r4, #1
 800a73a:	b2e4      	uxtb	r4, r4
 800a73c:	4628      	mov	r0, r5
 800a73e:	0064      	lsls	r4, r4, #1
 800a740:	f000 f9b8 	bl	800aab4 <rmw_uxrce_fini_publisher_memory>
 800a744:	e7b8      	b.n	800a6b8 <rmw_destroy_publisher+0x14>
 800a746:	bf00      	nop

0800a748 <rmw_uxrce_transport_init>:
 800a748:	b508      	push	{r3, lr}
 800a74a:	b108      	cbz	r0, 800a750 <rmw_uxrce_transport_init+0x8>
 800a74c:	f100 0210 	add.w	r2, r0, #16
 800a750:	b139      	cbz	r1, 800a762 <rmw_uxrce_transport_init+0x1a>
 800a752:	6949      	ldr	r1, [r1, #20]
 800a754:	4610      	mov	r0, r2
 800a756:	f002 fe39 	bl	800d3cc <uxr_init_custom_transport>
 800a75a:	f080 0001 	eor.w	r0, r0, #1
 800a75e:	b2c0      	uxtb	r0, r0
 800a760:	bd08      	pop	{r3, pc}
 800a762:	4b04      	ldr	r3, [pc, #16]	@ (800a774 <rmw_uxrce_transport_init+0x2c>)
 800a764:	4610      	mov	r0, r2
 800a766:	6859      	ldr	r1, [r3, #4]
 800a768:	f002 fe30 	bl	800d3cc <uxr_init_custom_transport>
 800a76c:	f080 0001 	eor.w	r0, r0, #1
 800a770:	b2c0      	uxtb	r0, r0
 800a772:	bd08      	pop	{r3, pc}
 800a774:	2000b710 	.word	0x2000b710

0800a778 <rmw_uros_epoch_nanos>:
 800a778:	4b05      	ldr	r3, [pc, #20]	@ (800a790 <rmw_uros_epoch_nanos+0x18>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	b123      	cbz	r3, 800a788 <rmw_uros_epoch_nanos+0x10>
 800a77e:	6898      	ldr	r0, [r3, #8]
 800a780:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a784:	f003 b886 	b.w	800d894 <uxr_epoch_nanos>
 800a788:	2000      	movs	r0, #0
 800a78a:	2100      	movs	r1, #0
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	20010070 	.word	0x20010070

0800a794 <rmw_uros_sync_session>:
 800a794:	b508      	push	{r3, lr}
 800a796:	4b07      	ldr	r3, [pc, #28]	@ (800a7b4 <rmw_uros_sync_session+0x20>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	b14b      	cbz	r3, 800a7b0 <rmw_uros_sync_session+0x1c>
 800a79c:	4601      	mov	r1, r0
 800a79e:	6898      	ldr	r0, [r3, #8]
 800a7a0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a7a4:	f003 fc94 	bl	800e0d0 <uxr_sync_session>
 800a7a8:	f080 0001 	eor.w	r0, r0, #1
 800a7ac:	b2c0      	uxtb	r0, r0
 800a7ae:	bd08      	pop	{r3, pc}
 800a7b0:	2001      	movs	r0, #1
 800a7b2:	bd08      	pop	{r3, pc}
 800a7b4:	20010070 	.word	0x20010070

0800a7b8 <rmw_uxrce_init_service_memory>:
 800a7b8:	b1e2      	cbz	r2, 800a7f4 <rmw_uxrce_init_service_memory+0x3c>
 800a7ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7be:	7b05      	ldrb	r5, [r0, #12]
 800a7c0:	4606      	mov	r6, r0
 800a7c2:	b9ad      	cbnz	r5, 800a7f0 <rmw_uxrce_init_service_memory+0x38>
 800a7c4:	23c8      	movs	r3, #200	@ 0xc8
 800a7c6:	e9c0 5500 	strd	r5, r5, [r0]
 800a7ca:	6083      	str	r3, [r0, #8]
 800a7cc:	f240 1301 	movw	r3, #257	@ 0x101
 800a7d0:	4617      	mov	r7, r2
 800a7d2:	8183      	strh	r3, [r0, #12]
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	46a8      	mov	r8, r5
 800a7d8:	4621      	mov	r1, r4
 800a7da:	4630      	mov	r0, r6
 800a7dc:	3501      	adds	r5, #1
 800a7de:	f009 fcdd 	bl	801419c <put_memory>
 800a7e2:	42af      	cmp	r7, r5
 800a7e4:	60a4      	str	r4, [r4, #8]
 800a7e6:	f884 800c 	strb.w	r8, [r4, #12]
 800a7ea:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a7ee:	d1f3      	bne.n	800a7d8 <rmw_uxrce_init_service_memory+0x20>
 800a7f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop

0800a7f8 <rmw_uxrce_init_client_memory>:
 800a7f8:	b1e2      	cbz	r2, 800a834 <rmw_uxrce_init_client_memory+0x3c>
 800a7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fe:	7b05      	ldrb	r5, [r0, #12]
 800a800:	4606      	mov	r6, r0
 800a802:	b9ad      	cbnz	r5, 800a830 <rmw_uxrce_init_client_memory+0x38>
 800a804:	23c8      	movs	r3, #200	@ 0xc8
 800a806:	e9c0 5500 	strd	r5, r5, [r0]
 800a80a:	6083      	str	r3, [r0, #8]
 800a80c:	f240 1301 	movw	r3, #257	@ 0x101
 800a810:	4617      	mov	r7, r2
 800a812:	8183      	strh	r3, [r0, #12]
 800a814:	460c      	mov	r4, r1
 800a816:	46a8      	mov	r8, r5
 800a818:	4621      	mov	r1, r4
 800a81a:	4630      	mov	r0, r6
 800a81c:	3501      	adds	r5, #1
 800a81e:	f009 fcbd 	bl	801419c <put_memory>
 800a822:	42af      	cmp	r7, r5
 800a824:	60a4      	str	r4, [r4, #8]
 800a826:	f884 800c 	strb.w	r8, [r4, #12]
 800a82a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800a82e:	d1f3      	bne.n	800a818 <rmw_uxrce_init_client_memory+0x20>
 800a830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop

0800a838 <rmw_uxrce_init_publisher_memory>:
 800a838:	b1e2      	cbz	r2, 800a874 <rmw_uxrce_init_publisher_memory+0x3c>
 800a83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83e:	7b05      	ldrb	r5, [r0, #12]
 800a840:	4606      	mov	r6, r0
 800a842:	b9ad      	cbnz	r5, 800a870 <rmw_uxrce_init_publisher_memory+0x38>
 800a844:	23d8      	movs	r3, #216	@ 0xd8
 800a846:	e9c0 5500 	strd	r5, r5, [r0]
 800a84a:	6083      	str	r3, [r0, #8]
 800a84c:	f240 1301 	movw	r3, #257	@ 0x101
 800a850:	4617      	mov	r7, r2
 800a852:	8183      	strh	r3, [r0, #12]
 800a854:	460c      	mov	r4, r1
 800a856:	46a8      	mov	r8, r5
 800a858:	4621      	mov	r1, r4
 800a85a:	4630      	mov	r0, r6
 800a85c:	3501      	adds	r5, #1
 800a85e:	f009 fc9d 	bl	801419c <put_memory>
 800a862:	42af      	cmp	r7, r5
 800a864:	60a4      	str	r4, [r4, #8]
 800a866:	f884 800c 	strb.w	r8, [r4, #12]
 800a86a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a86e:	d1f3      	bne.n	800a858 <rmw_uxrce_init_publisher_memory+0x20>
 800a870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop

0800a878 <rmw_uxrce_init_subscription_memory>:
 800a878:	b1e2      	cbz	r2, 800a8b4 <rmw_uxrce_init_subscription_memory+0x3c>
 800a87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87e:	7b05      	ldrb	r5, [r0, #12]
 800a880:	4606      	mov	r6, r0
 800a882:	b9ad      	cbnz	r5, 800a8b0 <rmw_uxrce_init_subscription_memory+0x38>
 800a884:	23d8      	movs	r3, #216	@ 0xd8
 800a886:	e9c0 5500 	strd	r5, r5, [r0]
 800a88a:	6083      	str	r3, [r0, #8]
 800a88c:	f240 1301 	movw	r3, #257	@ 0x101
 800a890:	4617      	mov	r7, r2
 800a892:	8183      	strh	r3, [r0, #12]
 800a894:	460c      	mov	r4, r1
 800a896:	46a8      	mov	r8, r5
 800a898:	4621      	mov	r1, r4
 800a89a:	4630      	mov	r0, r6
 800a89c:	3501      	adds	r5, #1
 800a89e:	f009 fc7d 	bl	801419c <put_memory>
 800a8a2:	42af      	cmp	r7, r5
 800a8a4:	60a4      	str	r4, [r4, #8]
 800a8a6:	f884 800c 	strb.w	r8, [r4, #12]
 800a8aa:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800a8ae:	d1f3      	bne.n	800a898 <rmw_uxrce_init_subscription_memory+0x20>
 800a8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop

0800a8b8 <rmw_uxrce_init_node_memory>:
 800a8b8:	b1e2      	cbz	r2, 800a8f4 <rmw_uxrce_init_node_memory+0x3c>
 800a8ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8be:	7b05      	ldrb	r5, [r0, #12]
 800a8c0:	4606      	mov	r6, r0
 800a8c2:	b9ad      	cbnz	r5, 800a8f0 <rmw_uxrce_init_node_memory+0x38>
 800a8c4:	23a4      	movs	r3, #164	@ 0xa4
 800a8c6:	e9c0 5500 	strd	r5, r5, [r0]
 800a8ca:	6083      	str	r3, [r0, #8]
 800a8cc:	f240 1301 	movw	r3, #257	@ 0x101
 800a8d0:	4617      	mov	r7, r2
 800a8d2:	8183      	strh	r3, [r0, #12]
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	46a8      	mov	r8, r5
 800a8d8:	4621      	mov	r1, r4
 800a8da:	4630      	mov	r0, r6
 800a8dc:	3501      	adds	r5, #1
 800a8de:	f009 fc5d 	bl	801419c <put_memory>
 800a8e2:	42af      	cmp	r7, r5
 800a8e4:	60a4      	str	r4, [r4, #8]
 800a8e6:	f884 800c 	strb.w	r8, [r4, #12]
 800a8ea:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800a8ee:	d1f3      	bne.n	800a8d8 <rmw_uxrce_init_node_memory+0x20>
 800a8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop

0800a8f8 <rmw_uxrce_init_session_memory>:
 800a8f8:	b1ea      	cbz	r2, 800a936 <rmw_uxrce_init_session_memory+0x3e>
 800a8fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8fe:	7b05      	ldrb	r5, [r0, #12]
 800a900:	4606      	mov	r6, r0
 800a902:	b9b5      	cbnz	r5, 800a932 <rmw_uxrce_init_session_memory+0x3a>
 800a904:	e9c0 5500 	strd	r5, r5, [r0]
 800a908:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800a90c:	f240 1301 	movw	r3, #257	@ 0x101
 800a910:	4617      	mov	r7, r2
 800a912:	f8c0 8008 	str.w	r8, [r0, #8]
 800a916:	460c      	mov	r4, r1
 800a918:	8183      	strh	r3, [r0, #12]
 800a91a:	46a9      	mov	r9, r5
 800a91c:	4621      	mov	r1, r4
 800a91e:	4630      	mov	r0, r6
 800a920:	3501      	adds	r5, #1
 800a922:	f009 fc3b 	bl	801419c <put_memory>
 800a926:	42af      	cmp	r7, r5
 800a928:	60a4      	str	r4, [r4, #8]
 800a92a:	f884 900c 	strb.w	r9, [r4, #12]
 800a92e:	4444      	add	r4, r8
 800a930:	d1f4      	bne.n	800a91c <rmw_uxrce_init_session_memory+0x24>
 800a932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a936:	4770      	bx	lr

0800a938 <rmw_uxrce_init_topic_memory>:
 800a938:	b1e2      	cbz	r2, 800a974 <rmw_uxrce_init_topic_memory+0x3c>
 800a93a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a93e:	7b05      	ldrb	r5, [r0, #12]
 800a940:	4606      	mov	r6, r0
 800a942:	b9ad      	cbnz	r5, 800a970 <rmw_uxrce_init_topic_memory+0x38>
 800a944:	231c      	movs	r3, #28
 800a946:	e9c0 5500 	strd	r5, r5, [r0]
 800a94a:	6083      	str	r3, [r0, #8]
 800a94c:	f240 1301 	movw	r3, #257	@ 0x101
 800a950:	4617      	mov	r7, r2
 800a952:	8183      	strh	r3, [r0, #12]
 800a954:	460c      	mov	r4, r1
 800a956:	46a8      	mov	r8, r5
 800a958:	4621      	mov	r1, r4
 800a95a:	4630      	mov	r0, r6
 800a95c:	3501      	adds	r5, #1
 800a95e:	f009 fc1d 	bl	801419c <put_memory>
 800a962:	42af      	cmp	r7, r5
 800a964:	60a4      	str	r4, [r4, #8]
 800a966:	f884 800c 	strb.w	r8, [r4, #12]
 800a96a:	f104 041c 	add.w	r4, r4, #28
 800a96e:	d1f3      	bne.n	800a958 <rmw_uxrce_init_topic_memory+0x20>
 800a970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop

0800a978 <rmw_uxrce_init_static_input_buffer_memory>:
 800a978:	b1ea      	cbz	r2, 800a9b6 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800a97a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a97e:	7b05      	ldrb	r5, [r0, #12]
 800a980:	4606      	mov	r6, r0
 800a982:	b9b5      	cbnz	r5, 800a9b2 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800a984:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800a988:	e9c0 5500 	strd	r5, r5, [r0]
 800a98c:	6083      	str	r3, [r0, #8]
 800a98e:	f240 1301 	movw	r3, #257	@ 0x101
 800a992:	4617      	mov	r7, r2
 800a994:	8183      	strh	r3, [r0, #12]
 800a996:	460c      	mov	r4, r1
 800a998:	46a8      	mov	r8, r5
 800a99a:	4621      	mov	r1, r4
 800a99c:	4630      	mov	r0, r6
 800a99e:	3501      	adds	r5, #1
 800a9a0:	f009 fbfc 	bl	801419c <put_memory>
 800a9a4:	42af      	cmp	r7, r5
 800a9a6:	60a4      	str	r4, [r4, #8]
 800a9a8:	f884 800c 	strb.w	r8, [r4, #12]
 800a9ac:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800a9b0:	d1f3      	bne.n	800a99a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800a9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b6:	4770      	bx	lr

0800a9b8 <rmw_uxrce_init_init_options_impl_memory>:
 800a9b8:	b1e2      	cbz	r2, 800a9f4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800a9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9be:	7b05      	ldrb	r5, [r0, #12]
 800a9c0:	4606      	mov	r6, r0
 800a9c2:	b9ad      	cbnz	r5, 800a9f0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800a9c4:	232c      	movs	r3, #44	@ 0x2c
 800a9c6:	e9c0 5500 	strd	r5, r5, [r0]
 800a9ca:	6083      	str	r3, [r0, #8]
 800a9cc:	f240 1301 	movw	r3, #257	@ 0x101
 800a9d0:	4617      	mov	r7, r2
 800a9d2:	8183      	strh	r3, [r0, #12]
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	46a8      	mov	r8, r5
 800a9d8:	4621      	mov	r1, r4
 800a9da:	4630      	mov	r0, r6
 800a9dc:	3501      	adds	r5, #1
 800a9de:	f009 fbdd 	bl	801419c <put_memory>
 800a9e2:	42af      	cmp	r7, r5
 800a9e4:	60a4      	str	r4, [r4, #8]
 800a9e6:	f884 800c 	strb.w	r8, [r4, #12]
 800a9ea:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800a9ee:	d1f3      	bne.n	800a9d8 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop

0800a9f8 <rmw_uxrce_init_wait_set_memory>:
 800a9f8:	b1e2      	cbz	r2, 800aa34 <rmw_uxrce_init_wait_set_memory+0x3c>
 800a9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9fe:	7b05      	ldrb	r5, [r0, #12]
 800aa00:	4606      	mov	r6, r0
 800aa02:	b9ad      	cbnz	r5, 800aa30 <rmw_uxrce_init_wait_set_memory+0x38>
 800aa04:	231c      	movs	r3, #28
 800aa06:	e9c0 5500 	strd	r5, r5, [r0]
 800aa0a:	6083      	str	r3, [r0, #8]
 800aa0c:	f240 1301 	movw	r3, #257	@ 0x101
 800aa10:	4617      	mov	r7, r2
 800aa12:	8183      	strh	r3, [r0, #12]
 800aa14:	460c      	mov	r4, r1
 800aa16:	46a8      	mov	r8, r5
 800aa18:	4621      	mov	r1, r4
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	f009 fbbd 	bl	801419c <put_memory>
 800aa22:	42af      	cmp	r7, r5
 800aa24:	60a4      	str	r4, [r4, #8]
 800aa26:	f884 800c 	strb.w	r8, [r4, #12]
 800aa2a:	f104 041c 	add.w	r4, r4, #28
 800aa2e:	d1f3      	bne.n	800aa18 <rmw_uxrce_init_wait_set_memory+0x20>
 800aa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop

0800aa38 <rmw_uxrce_init_guard_condition_memory>:
 800aa38:	b1e2      	cbz	r2, 800aa74 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800aa3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa3e:	7b05      	ldrb	r5, [r0, #12]
 800aa40:	4606      	mov	r6, r0
 800aa42:	b9ad      	cbnz	r5, 800aa70 <rmw_uxrce_init_guard_condition_memory+0x38>
 800aa44:	2320      	movs	r3, #32
 800aa46:	e9c0 5500 	strd	r5, r5, [r0]
 800aa4a:	6083      	str	r3, [r0, #8]
 800aa4c:	f240 1301 	movw	r3, #257	@ 0x101
 800aa50:	4617      	mov	r7, r2
 800aa52:	8183      	strh	r3, [r0, #12]
 800aa54:	460c      	mov	r4, r1
 800aa56:	46a8      	mov	r8, r5
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	3501      	adds	r5, #1
 800aa5e:	f009 fb9d 	bl	801419c <put_memory>
 800aa62:	42af      	cmp	r7, r5
 800aa64:	60a4      	str	r4, [r4, #8]
 800aa66:	f884 800c 	strb.w	r8, [r4, #12]
 800aa6a:	f104 0420 	add.w	r4, r4, #32
 800aa6e:	d1f3      	bne.n	800aa58 <rmw_uxrce_init_guard_condition_memory+0x20>
 800aa70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop

0800aa78 <rmw_uxrce_fini_session_memory>:
 800aa78:	4601      	mov	r1, r0
 800aa7a:	4801      	ldr	r0, [pc, #4]	@ (800aa80 <rmw_uxrce_fini_session_memory+0x8>)
 800aa7c:	f009 bb8e 	b.w	801419c <put_memory>
 800aa80:	20010070 	.word	0x20010070

0800aa84 <rmw_uxrce_fini_node_memory>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4604      	mov	r4, r0
 800aa88:	6800      	ldr	r0, [r0, #0]
 800aa8a:	b128      	cbz	r0, 800aa98 <rmw_uxrce_fini_node_memory+0x14>
 800aa8c:	4b07      	ldr	r3, [pc, #28]	@ (800aaac <rmw_uxrce_fini_node_memory+0x28>)
 800aa8e:	6819      	ldr	r1, [r3, #0]
 800aa90:	f7f5 fbbe 	bl	8000210 <strcmp>
 800aa94:	b940      	cbnz	r0, 800aaa8 <rmw_uxrce_fini_node_memory+0x24>
 800aa96:	6020      	str	r0, [r4, #0]
 800aa98:	6861      	ldr	r1, [r4, #4]
 800aa9a:	b129      	cbz	r1, 800aaa8 <rmw_uxrce_fini_node_memory+0x24>
 800aa9c:	2500      	movs	r5, #0
 800aa9e:	4804      	ldr	r0, [pc, #16]	@ (800aab0 <rmw_uxrce_fini_node_memory+0x2c>)
 800aaa0:	610d      	str	r5, [r1, #16]
 800aaa2:	f009 fb7b 	bl	801419c <put_memory>
 800aaa6:	6065      	str	r5, [r4, #4]
 800aaa8:	bd38      	pop	{r3, r4, r5, pc}
 800aaaa:	bf00      	nop
 800aaac:	0801ac04 	.word	0x0801ac04
 800aab0:	2000eab4 	.word	0x2000eab4

0800aab4 <rmw_uxrce_fini_publisher_memory>:
 800aab4:	b510      	push	{r4, lr}
 800aab6:	4604      	mov	r4, r0
 800aab8:	6800      	ldr	r0, [r0, #0]
 800aaba:	b128      	cbz	r0, 800aac8 <rmw_uxrce_fini_publisher_memory+0x14>
 800aabc:	4b06      	ldr	r3, [pc, #24]	@ (800aad8 <rmw_uxrce_fini_publisher_memory+0x24>)
 800aabe:	6819      	ldr	r1, [r3, #0]
 800aac0:	f7f5 fba6 	bl	8000210 <strcmp>
 800aac4:	b938      	cbnz	r0, 800aad6 <rmw_uxrce_fini_publisher_memory+0x22>
 800aac6:	6020      	str	r0, [r4, #0]
 800aac8:	6861      	ldr	r1, [r4, #4]
 800aaca:	b121      	cbz	r1, 800aad6 <rmw_uxrce_fini_publisher_memory+0x22>
 800aacc:	4803      	ldr	r0, [pc, #12]	@ (800aadc <rmw_uxrce_fini_publisher_memory+0x28>)
 800aace:	f009 fb65 	bl	801419c <put_memory>
 800aad2:	2300      	movs	r3, #0
 800aad4:	6063      	str	r3, [r4, #4]
 800aad6:	bd10      	pop	{r4, pc}
 800aad8:	0801ac04 	.word	0x0801ac04
 800aadc:	2000ea00 	.word	0x2000ea00

0800aae0 <rmw_uxrce_fini_subscription_memory>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	4604      	mov	r4, r0
 800aae4:	6800      	ldr	r0, [r0, #0]
 800aae6:	b128      	cbz	r0, 800aaf4 <rmw_uxrce_fini_subscription_memory+0x14>
 800aae8:	4b06      	ldr	r3, [pc, #24]	@ (800ab04 <rmw_uxrce_fini_subscription_memory+0x24>)
 800aaea:	6819      	ldr	r1, [r3, #0]
 800aaec:	f7f5 fb90 	bl	8000210 <strcmp>
 800aaf0:	b938      	cbnz	r0, 800ab02 <rmw_uxrce_fini_subscription_memory+0x22>
 800aaf2:	6020      	str	r0, [r4, #0]
 800aaf4:	6861      	ldr	r1, [r4, #4]
 800aaf6:	b121      	cbz	r1, 800ab02 <rmw_uxrce_fini_subscription_memory+0x22>
 800aaf8:	4803      	ldr	r0, [pc, #12]	@ (800ab08 <rmw_uxrce_fini_subscription_memory+0x28>)
 800aafa:	f009 fb4f 	bl	801419c <put_memory>
 800aafe:	2300      	movs	r3, #0
 800ab00:	6063      	str	r3, [r4, #4]
 800ab02:	bd10      	pop	{r4, pc}
 800ab04:	0801ac04 	.word	0x0801ac04
 800ab08:	2000e180 	.word	0x2000e180

0800ab0c <rmw_uxrce_fini_service_memory>:
 800ab0c:	b510      	push	{r4, lr}
 800ab0e:	4604      	mov	r4, r0
 800ab10:	6800      	ldr	r0, [r0, #0]
 800ab12:	b128      	cbz	r0, 800ab20 <rmw_uxrce_fini_service_memory+0x14>
 800ab14:	4b06      	ldr	r3, [pc, #24]	@ (800ab30 <rmw_uxrce_fini_service_memory+0x24>)
 800ab16:	6819      	ldr	r1, [r3, #0]
 800ab18:	f7f5 fb7a 	bl	8000210 <strcmp>
 800ab1c:	b938      	cbnz	r0, 800ab2e <rmw_uxrce_fini_service_memory+0x22>
 800ab1e:	6020      	str	r0, [r4, #0]
 800ab20:	6861      	ldr	r1, [r4, #4]
 800ab22:	b121      	cbz	r1, 800ab2e <rmw_uxrce_fini_service_memory+0x22>
 800ab24:	4803      	ldr	r0, [pc, #12]	@ (800ab34 <rmw_uxrce_fini_service_memory+0x28>)
 800ab26:	f009 fb39 	bl	801419c <put_memory>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	6063      	str	r3, [r4, #4]
 800ab2e:	bd10      	pop	{r4, pc}
 800ab30:	0801ac04 	.word	0x0801ac04
 800ab34:	2000dd38 	.word	0x2000dd38

0800ab38 <rmw_uxrce_fini_client_memory>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	6800      	ldr	r0, [r0, #0]
 800ab3e:	b128      	cbz	r0, 800ab4c <rmw_uxrce_fini_client_memory+0x14>
 800ab40:	4b06      	ldr	r3, [pc, #24]	@ (800ab5c <rmw_uxrce_fini_client_memory+0x24>)
 800ab42:	6819      	ldr	r1, [r3, #0]
 800ab44:	f7f5 fb64 	bl	8000210 <strcmp>
 800ab48:	b938      	cbnz	r0, 800ab5a <rmw_uxrce_fini_client_memory+0x22>
 800ab4a:	6020      	str	r0, [r4, #0]
 800ab4c:	6861      	ldr	r1, [r4, #4]
 800ab4e:	b121      	cbz	r1, 800ab5a <rmw_uxrce_fini_client_memory+0x22>
 800ab50:	4803      	ldr	r0, [pc, #12]	@ (800ab60 <rmw_uxrce_fini_client_memory+0x28>)
 800ab52:	f009 fb23 	bl	801419c <put_memory>
 800ab56:	2300      	movs	r3, #0
 800ab58:	6063      	str	r3, [r4, #4]
 800ab5a:	bd10      	pop	{r4, pc}
 800ab5c:	0801ac04 	.word	0x0801ac04
 800ab60:	2000dc60 	.word	0x2000dc60

0800ab64 <rmw_uxrce_fini_topic_memory>:
 800ab64:	b510      	push	{r4, lr}
 800ab66:	4604      	mov	r4, r0
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4803      	ldr	r0, [pc, #12]	@ (800ab78 <rmw_uxrce_fini_topic_memory+0x14>)
 800ab6c:	f009 fb16 	bl	801419c <put_memory>
 800ab70:	2300      	movs	r3, #0
 800ab72:	61a3      	str	r3, [r4, #24]
 800ab74:	bd10      	pop	{r4, pc}
 800ab76:	bf00      	nop
 800ab78:	2000db84 	.word	0x2000db84

0800ab7c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	b530      	push	{r4, r5, lr}
 800ab80:	4929      	ldr	r1, [pc, #164]	@ (800ac28 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800ab82:	ac03      	add	r4, sp, #12
 800ab84:	e884 000c 	stmia.w	r4, {r2, r3}
 800ab88:	680c      	ldr	r4, [r1, #0]
 800ab8a:	461d      	mov	r5, r3
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	2c00      	cmp	r4, #0
 800ab90:	d043      	beq.n	800ac1a <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800ab92:	4620      	mov	r0, r4
 800ab94:	2100      	movs	r1, #0
 800ab96:	6883      	ldr	r3, [r0, #8]
 800ab98:	6840      	ldr	r0, [r0, #4]
 800ab9a:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	bf08      	it	eq
 800aba2:	3101      	addeq	r1, #1
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d1f6      	bne.n	800ab96 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800aba8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800abac:	2b02      	cmp	r3, #2
 800abae:	d027      	beq.n	800ac00 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800abb0:	d906      	bls.n	800abc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d004      	beq.n	800abc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800abb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abba:	2000      	movs	r0, #0
 800abbc:	b002      	add	sp, #8
 800abbe:	4770      	bx	lr
 800abc0:	b1fd      	cbz	r5, 800ac02 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800abc2:	428d      	cmp	r5, r1
 800abc4:	d81d      	bhi.n	800ac02 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800abc6:	2c00      	cmp	r4, #0
 800abc8:	d0f5      	beq.n	800abb6 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800abca:	2000      	movs	r0, #0
 800abcc:	f04f 3cff 	mov.w	ip, #4294967295
 800abd0:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800abd4:	e001      	b.n	800abda <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800abd6:	6864      	ldr	r4, [r4, #4]
 800abd8:	b1dc      	cbz	r4, 800ac12 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800abe0:	428a      	cmp	r2, r1
 800abe2:	d1f8      	bne.n	800abd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800abe4:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800abe8:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800abec:	4561      	cmp	r1, ip
 800abee:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800abf2:	eb73 0e05 	sbcs.w	lr, r3, r5
 800abf6:	daee      	bge.n	800abd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800abf8:	468c      	mov	ip, r1
 800abfa:	461d      	mov	r5, r3
 800abfc:	4620      	mov	r0, r4
 800abfe:	e7ea      	b.n	800abd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac00:	b92d      	cbnz	r5, 800ac0e <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800ac02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac06:	4808      	ldr	r0, [pc, #32]	@ (800ac28 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800ac08:	b002      	add	sp, #8
 800ac0a:	f009 bab7 	b.w	801417c <get_memory>
 800ac0e:	428d      	cmp	r5, r1
 800ac10:	d8f7      	bhi.n	800ac02 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ac12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac16:	b002      	add	sp, #8
 800ac18:	4770      	bx	lr
 800ac1a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d0ef      	beq.n	800ac02 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ac22:	d9ee      	bls.n	800ac02 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ac24:	4621      	mov	r1, r4
 800ac26:	e7c4      	b.n	800abb2 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800ac28:	2000d9d0 	.word	0x2000d9d0

0800ac2c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ac2c:	4b11      	ldr	r3, [pc, #68]	@ (800ac74 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	b1eb      	cbz	r3, 800ac6e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ac32:	b530      	push	{r4, r5, lr}
 800ac34:	4684      	mov	ip, r0
 800ac36:	f04f 34ff 	mov.w	r4, #4294967295
 800ac3a:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800ac3e:	2000      	movs	r0, #0
 800ac40:	e001      	b.n	800ac46 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	b193      	cbz	r3, 800ac6c <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ac4c:	458c      	cmp	ip, r1
 800ac4e:	d1f8      	bne.n	800ac42 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ac50:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800ac54:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800ac58:	42a1      	cmp	r1, r4
 800ac5a:	eb72 050e 	sbcs.w	r5, r2, lr
 800ac5e:	daf0      	bge.n	800ac42 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ac60:	4618      	mov	r0, r3
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	460c      	mov	r4, r1
 800ac66:	4696      	mov	lr, r2
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1ec      	bne.n	800ac46 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ac6c:	bd30      	pop	{r4, r5, pc}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	2000d9d0 	.word	0x2000d9d0

0800ac78 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7c:	4b3c      	ldr	r3, [pc, #240]	@ (800ad70 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ac7e:	ed2d 8b06 	vpush	{d8-d10}
 800ac82:	f8d3 8000 	ldr.w	r8, [r3]
 800ac86:	b08d      	sub	sp, #52	@ 0x34
 800ac88:	f7ff fd76 	bl	800a778 <rmw_uros_epoch_nanos>
 800ac8c:	f1b8 0f00 	cmp.w	r8, #0
 800ac90:	d05c      	beq.n	800ad4c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800ac92:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ac96:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ac9a:	2b04      	cmp	r3, #4
 800ac9c:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800ad58 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800aca0:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800ad60 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800aca4:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800ad68 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800aca8:	4683      	mov	fp, r0
 800acaa:	ac04      	add	r4, sp, #16
 800acac:	468a      	mov	sl, r1
 800acae:	d03f      	beq.n	800ad30 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800acb0:	2b05      	cmp	r3, #5
 800acb2:	d044      	beq.n	800ad3e <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800acb4:	2b03      	cmp	r3, #3
 800acb6:	d03b      	beq.n	800ad30 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800acb8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800acbc:	ed8d ab06 	vstr	d10, [sp, #24]
 800acc0:	ed8d 8b08 	vstr	d8, [sp, #32]
 800acc4:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800acc8:	ab08      	add	r3, sp, #32
 800acca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800accc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800acd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800acd4:	f009 f888 	bl	8013de8 <rmw_time_equal>
 800acd8:	b118      	cbz	r0, 800ace2 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800acda:	ed8d 9b04 	vstr	d9, [sp, #16]
 800acde:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ace2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ace6:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800acea:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800acee:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800acf2:	f009 f8cd 	bl	8013e90 <rmw_time_total_nsec>
 800acf6:	183f      	adds	r7, r7, r0
 800acf8:	eb46 0601 	adc.w	r6, r6, r1
 800acfc:	455f      	cmp	r7, fp
 800acfe:	eb76 060a 	sbcs.w	r6, r6, sl
 800ad02:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800ad06:	db05      	blt.n	800ad14 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800ad08:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800ad0c:	4593      	cmp	fp, r2
 800ad0e:	eb7a 0303 	sbcs.w	r3, sl, r3
 800ad12:	da03      	bge.n	800ad1c <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800ad14:	4816      	ldr	r0, [pc, #88]	@ (800ad70 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ad16:	4641      	mov	r1, r8
 800ad18:	f009 fa40 	bl	801419c <put_memory>
 800ad1c:	f1b9 0f00 	cmp.w	r9, #0
 800ad20:	d014      	beq.n	800ad4c <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800ad22:	46c8      	mov	r8, r9
 800ad24:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ad28:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d1bf      	bne.n	800acb0 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800ad30:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ad34:	3340      	adds	r3, #64	@ 0x40
 800ad36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad3c:	e7c0      	b.n	800acc0 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800ad3e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800ad42:	3348      	adds	r3, #72	@ 0x48
 800ad44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ad4a:	e7b9      	b.n	800acc0 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800ad4c:	b00d      	add	sp, #52	@ 0x34
 800ad4e:	ecbd 8b06 	vpop	{d8-d10}
 800ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad56:	bf00      	nop
	...
 800ad60:	00000001 	.word	0x00000001
 800ad64:	00000000 	.word	0x00000000
 800ad68:	0000001e 	.word	0x0000001e
 800ad6c:	00000000 	.word	0x00000000
 800ad70:	2000d9d0 	.word	0x2000d9d0

0800ad74 <run_xrce_session>:
 800ad74:	b500      	push	{lr}
 800ad76:	f891 c002 	ldrb.w	ip, [r1, #2]
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	f1bc 0f01 	cmp.w	ip, #1
 800ad80:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ad84:	d00f      	beq.n	800ada6 <run_xrce_session+0x32>
 800ad86:	4619      	mov	r1, r3
 800ad88:	2301      	movs	r3, #1
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	f10d 020e 	add.w	r2, sp, #14
 800ad90:	f10d 0317 	add.w	r3, sp, #23
 800ad94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ad98:	f003 f944 	bl	800e024 <uxr_run_session_until_all_status>
 800ad9c:	b100      	cbz	r0, 800ada0 <run_xrce_session+0x2c>
 800ad9e:	2001      	movs	r0, #1
 800ada0:	b007      	add	sp, #28
 800ada2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ada6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800adaa:	f002 fd7d 	bl	800d8a8 <uxr_flash_output_streams>
 800adae:	2001      	movs	r0, #1
 800adb0:	e7f6      	b.n	800ada0 <run_xrce_session+0x2c>
 800adb2:	bf00      	nop

0800adb4 <convert_qos_profile>:
 800adb4:	780a      	ldrb	r2, [r1, #0]
 800adb6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800adba:	f1a2 0202 	sub.w	r2, r2, #2
 800adbe:	fab2 f282 	clz	r2, r2
 800adc2:	0952      	lsrs	r2, r2, #5
 800adc4:	7082      	strb	r2, [r0, #2]
 800adc6:	7a4a      	ldrb	r2, [r1, #9]
 800adc8:	8889      	ldrh	r1, [r1, #4]
 800adca:	8081      	strh	r1, [r0, #4]
 800adcc:	f1a2 0202 	sub.w	r2, r2, #2
 800add0:	f1ac 0c02 	sub.w	ip, ip, #2
 800add4:	fab2 f282 	clz	r2, r2
 800add8:	fabc fc8c 	clz	ip, ip
 800addc:	0952      	lsrs	r2, r2, #5
 800adde:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ade2:	0052      	lsls	r2, r2, #1
 800ade4:	f880 c001 	strb.w	ip, [r0, #1]
 800ade8:	7002      	strb	r2, [r0, #0]
 800adea:	4770      	bx	lr

0800adec <generate_type_name>:
 800adec:	b530      	push	{r4, r5, lr}
 800adee:	2300      	movs	r3, #0
 800adf0:	700b      	strb	r3, [r1, #0]
 800adf2:	6803      	ldr	r3, [r0, #0]
 800adf4:	b087      	sub	sp, #28
 800adf6:	4614      	mov	r4, r2
 800adf8:	b1d3      	cbz	r3, 800ae30 <generate_type_name+0x44>
 800adfa:	4a0f      	ldr	r2, [pc, #60]	@ (800ae38 <generate_type_name+0x4c>)
 800adfc:	4615      	mov	r5, r2
 800adfe:	9203      	str	r2, [sp, #12]
 800ae00:	9500      	str	r5, [sp, #0]
 800ae02:	6842      	ldr	r2, [r0, #4]
 800ae04:	480d      	ldr	r0, [pc, #52]	@ (800ae3c <generate_type_name+0x50>)
 800ae06:	9001      	str	r0, [sp, #4]
 800ae08:	4608      	mov	r0, r1
 800ae0a:	490d      	ldr	r1, [pc, #52]	@ (800ae40 <generate_type_name+0x54>)
 800ae0c:	9204      	str	r2, [sp, #16]
 800ae0e:	9105      	str	r1, [sp, #20]
 800ae10:	9102      	str	r1, [sp, #8]
 800ae12:	4a0c      	ldr	r2, [pc, #48]	@ (800ae44 <generate_type_name+0x58>)
 800ae14:	4621      	mov	r1, r4
 800ae16:	f00d f909 	bl	801802c <sniprintf>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	db05      	blt.n	800ae2a <generate_type_name+0x3e>
 800ae1e:	4284      	cmp	r4, r0
 800ae20:	bfd4      	ite	le
 800ae22:	2000      	movle	r0, #0
 800ae24:	2001      	movgt	r0, #1
 800ae26:	b007      	add	sp, #28
 800ae28:	bd30      	pop	{r4, r5, pc}
 800ae2a:	2000      	movs	r0, #0
 800ae2c:	b007      	add	sp, #28
 800ae2e:	bd30      	pop	{r4, r5, pc}
 800ae30:	4b05      	ldr	r3, [pc, #20]	@ (800ae48 <generate_type_name+0x5c>)
 800ae32:	4a01      	ldr	r2, [pc, #4]	@ (800ae38 <generate_type_name+0x4c>)
 800ae34:	461d      	mov	r5, r3
 800ae36:	e7e2      	b.n	800adfe <generate_type_name+0x12>
 800ae38:	08019e48 	.word	0x08019e48
 800ae3c:	08019e60 	.word	0x08019e60
 800ae40:	08019e5c 	.word	0x08019e5c
 800ae44:	08019e4c 	.word	0x08019e4c
 800ae48:	08019eb8 	.word	0x08019eb8

0800ae4c <generate_topic_name>:
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	4614      	mov	r4, r2
 800ae52:	9000      	str	r0, [sp, #0]
 800ae54:	4b08      	ldr	r3, [pc, #32]	@ (800ae78 <generate_topic_name+0x2c>)
 800ae56:	4a09      	ldr	r2, [pc, #36]	@ (800ae7c <generate_topic_name+0x30>)
 800ae58:	4608      	mov	r0, r1
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	f00d f8e6 	bl	801802c <sniprintf>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	db05      	blt.n	800ae70 <generate_topic_name+0x24>
 800ae64:	4284      	cmp	r4, r0
 800ae66:	bfd4      	ite	le
 800ae68:	2000      	movle	r0, #0
 800ae6a:	2001      	movgt	r0, #1
 800ae6c:	b002      	add	sp, #8
 800ae6e:	bd10      	pop	{r4, pc}
 800ae70:	2000      	movs	r0, #0
 800ae72:	b002      	add	sp, #8
 800ae74:	bd10      	pop	{r4, pc}
 800ae76:	bf00      	nop
 800ae78:	0801a704 	.word	0x0801a704
 800ae7c:	08019e64 	.word	0x08019e64

0800ae80 <is_uxrce_rmw_identifier_valid>:
 800ae80:	b510      	push	{r4, lr}
 800ae82:	4604      	mov	r4, r0
 800ae84:	b140      	cbz	r0, 800ae98 <is_uxrce_rmw_identifier_valid+0x18>
 800ae86:	f009 f9ff 	bl	8014288 <rmw_get_implementation_identifier>
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f7f5 f9bf 	bl	8000210 <strcmp>
 800ae92:	fab0 f080 	clz	r0, r0
 800ae96:	0940      	lsrs	r0, r0, #5
 800ae98:	bd10      	pop	{r4, pc}
 800ae9a:	bf00      	nop

0800ae9c <get_message_typesupport_handle>:
 800ae9c:	6883      	ldr	r3, [r0, #8]
 800ae9e:	4718      	bx	r3

0800aea0 <get_message_typesupport_handle_function>:
 800aea0:	b510      	push	{r4, lr}
 800aea2:	4604      	mov	r4, r0
 800aea4:	6800      	ldr	r0, [r0, #0]
 800aea6:	f7f5 f9b3 	bl	8000210 <strcmp>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	bf0c      	ite	eq
 800aeae:	4620      	moveq	r0, r4
 800aeb0:	2000      	movne	r0, #0
 800aeb2:	bd10      	pop	{r4, pc}

0800aeb4 <rosidl_runtime_c__String__init>:
 800aeb4:	b1b0      	cbz	r0, 800aee4 <rosidl_runtime_c__String__init+0x30>
 800aeb6:	b510      	push	{r4, lr}
 800aeb8:	b086      	sub	sp, #24
 800aeba:	4604      	mov	r4, r0
 800aebc:	a801      	add	r0, sp, #4
 800aebe:	f7ff f977 	bl	800a1b0 <rcutils_get_default_allocator>
 800aec2:	9b01      	ldr	r3, [sp, #4]
 800aec4:	9905      	ldr	r1, [sp, #20]
 800aec6:	2001      	movs	r0, #1
 800aec8:	4798      	blx	r3
 800aeca:	6020      	str	r0, [r4, #0]
 800aecc:	b138      	cbz	r0, 800aede <rosidl_runtime_c__String__init+0x2a>
 800aece:	2200      	movs	r2, #0
 800aed0:	2301      	movs	r3, #1
 800aed2:	7002      	strb	r2, [r0, #0]
 800aed4:	4618      	mov	r0, r3
 800aed6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800aeda:	b006      	add	sp, #24
 800aedc:	bd10      	pop	{r4, pc}
 800aede:	2000      	movs	r0, #0
 800aee0:	b006      	add	sp, #24
 800aee2:	bd10      	pop	{r4, pc}
 800aee4:	2000      	movs	r0, #0
 800aee6:	4770      	bx	lr

0800aee8 <rosidl_runtime_c__String__fini>:
 800aee8:	b320      	cbz	r0, 800af34 <rosidl_runtime_c__String__fini+0x4c>
 800aeea:	b510      	push	{r4, lr}
 800aeec:	6803      	ldr	r3, [r0, #0]
 800aeee:	b086      	sub	sp, #24
 800aef0:	4604      	mov	r4, r0
 800aef2:	b173      	cbz	r3, 800af12 <rosidl_runtime_c__String__fini+0x2a>
 800aef4:	6883      	ldr	r3, [r0, #8]
 800aef6:	b1f3      	cbz	r3, 800af36 <rosidl_runtime_c__String__fini+0x4e>
 800aef8:	a801      	add	r0, sp, #4
 800aefa:	f7ff f959 	bl	800a1b0 <rcutils_get_default_allocator>
 800aefe:	9b02      	ldr	r3, [sp, #8]
 800af00:	9905      	ldr	r1, [sp, #20]
 800af02:	6820      	ldr	r0, [r4, #0]
 800af04:	4798      	blx	r3
 800af06:	2300      	movs	r3, #0
 800af08:	e9c4 3300 	strd	r3, r3, [r4]
 800af0c:	60a3      	str	r3, [r4, #8]
 800af0e:	b006      	add	sp, #24
 800af10:	bd10      	pop	{r4, pc}
 800af12:	6843      	ldr	r3, [r0, #4]
 800af14:	b9db      	cbnz	r3, 800af4e <rosidl_runtime_c__String__fini+0x66>
 800af16:	6883      	ldr	r3, [r0, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0f8      	beq.n	800af0e <rosidl_runtime_c__String__fini+0x26>
 800af1c:	4b12      	ldr	r3, [pc, #72]	@ (800af68 <rosidl_runtime_c__String__fini+0x80>)
 800af1e:	4813      	ldr	r0, [pc, #76]	@ (800af6c <rosidl_runtime_c__String__fini+0x84>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2251      	movs	r2, #81	@ 0x51
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	2101      	movs	r1, #1
 800af28:	f00d f872 	bl	8018010 <fwrite>
 800af2c:	f04f 30ff 	mov.w	r0, #4294967295
 800af30:	f00c fd2e 	bl	8017990 <exit>
 800af34:	4770      	bx	lr
 800af36:	4b0c      	ldr	r3, [pc, #48]	@ (800af68 <rosidl_runtime_c__String__fini+0x80>)
 800af38:	480d      	ldr	r0, [pc, #52]	@ (800af70 <rosidl_runtime_c__String__fini+0x88>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	224c      	movs	r2, #76	@ 0x4c
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	2101      	movs	r1, #1
 800af42:	f00d f865 	bl	8018010 <fwrite>
 800af46:	f04f 30ff 	mov.w	r0, #4294967295
 800af4a:	f00c fd21 	bl	8017990 <exit>
 800af4e:	4b06      	ldr	r3, [pc, #24]	@ (800af68 <rosidl_runtime_c__String__fini+0x80>)
 800af50:	4808      	ldr	r0, [pc, #32]	@ (800af74 <rosidl_runtime_c__String__fini+0x8c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	224e      	movs	r2, #78	@ 0x4e
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	2101      	movs	r1, #1
 800af5a:	f00d f859 	bl	8018010 <fwrite>
 800af5e:	f04f 30ff 	mov.w	r0, #4294967295
 800af62:	f00c fd15 	bl	8017990 <exit>
 800af66:	bf00      	nop
 800af68:	200022b0 	.word	0x200022b0
 800af6c:	08019f0c 	.word	0x08019f0c
 800af70:	08019e6c 	.word	0x08019e6c
 800af74:	08019ebc 	.word	0x08019ebc

0800af78 <rosidl_runtime_c__String__assign>:
 800af78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af7c:	460c      	mov	r4, r1
 800af7e:	b086      	sub	sp, #24
 800af80:	b319      	cbz	r1, 800afca <rosidl_runtime_c__String__assign+0x52>
 800af82:	4605      	mov	r5, r0
 800af84:	4608      	mov	r0, r1
 800af86:	f7f5 f9a3 	bl	80002d0 <strlen>
 800af8a:	4606      	mov	r6, r0
 800af8c:	b1cd      	cbz	r5, 800afc2 <rosidl_runtime_c__String__assign+0x4a>
 800af8e:	a801      	add	r0, sp, #4
 800af90:	f106 0801 	add.w	r8, r6, #1
 800af94:	f7ff f90c 	bl	800a1b0 <rcutils_get_default_allocator>
 800af98:	9b03      	ldr	r3, [sp, #12]
 800af9a:	9a05      	ldr	r2, [sp, #20]
 800af9c:	6828      	ldr	r0, [r5, #0]
 800af9e:	4641      	mov	r1, r8
 800afa0:	4798      	blx	r3
 800afa2:	4607      	mov	r7, r0
 800afa4:	b168      	cbz	r0, 800afc2 <rosidl_runtime_c__String__assign+0x4a>
 800afa6:	4621      	mov	r1, r4
 800afa8:	4632      	mov	r2, r6
 800afaa:	f00d fa8e 	bl	80184ca <memcpy>
 800afae:	2300      	movs	r3, #0
 800afb0:	2001      	movs	r0, #1
 800afb2:	55bb      	strb	r3, [r7, r6]
 800afb4:	e9c5 7600 	strd	r7, r6, [r5]
 800afb8:	f8c5 8008 	str.w	r8, [r5, #8]
 800afbc:	b006      	add	sp, #24
 800afbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc2:	2000      	movs	r0, #0
 800afc4:	b006      	add	sp, #24
 800afc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afca:	4608      	mov	r0, r1
 800afcc:	b006      	add	sp, #24
 800afce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd2:	bf00      	nop

0800afd4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd8:	6805      	ldr	r5, [r0, #0]
 800afda:	4604      	mov	r4, r0
 800afdc:	4628      	mov	r0, r5
 800afde:	460e      	mov	r6, r1
 800afe0:	f7f5 f916 	bl	8000210 <strcmp>
 800afe4:	b308      	cbz	r0, 800b02a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800afe6:	4b12      	ldr	r3, [pc, #72]	@ (800b030 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 800afe8:	4628      	mov	r0, r5
 800afea:	6819      	ldr	r1, [r3, #0]
 800afec:	f7f5 f910 	bl	8000210 <strcmp>
 800aff0:	4605      	mov	r5, r0
 800aff2:	b980      	cbnz	r0, 800b016 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 800aff4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800aff8:	f8d8 4000 	ldr.w	r4, [r8]
 800affc:	b1ac      	cbz	r4, 800b02a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 800affe:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800b002:	3f04      	subs	r7, #4
 800b004:	f857 0f04 	ldr.w	r0, [r7, #4]!
 800b008:	4631      	mov	r1, r6
 800b00a:	f7f5 f901 	bl	8000210 <strcmp>
 800b00e:	b128      	cbz	r0, 800b01c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 800b010:	3501      	adds	r5, #1
 800b012:	42a5      	cmp	r5, r4
 800b014:	d1f6      	bne.n	800b004 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 800b016:	2000      	movs	r0, #0
 800b018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b01c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b020:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	4718      	bx	r3
 800b02a:	4620      	mov	r0, r4
 800b02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b030:	20000184 	.word	0x20000184

0800b034 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800b034:	f00a b936 	b.w	80152a4 <std_msgs__msg__Header__init>

0800b038 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800b038:	f00a b954 	b.w	80152e4 <std_msgs__msg__Header__fini>

0800b03c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800b03c:	b508      	push	{r3, lr}
 800b03e:	f000 f8ab 	bl	800b198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800b042:	4b06      	ldr	r3, [pc, #24]	@ (800b05c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b044:	4906      	ldr	r1, [pc, #24]	@ (800b060 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	60c8      	str	r0, [r1, #12]
 800b04a:	b10a      	cbz	r2, 800b050 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800b04c:	4803      	ldr	r0, [pc, #12]	@ (800b05c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b04e:	bd08      	pop	{r3, pc}
 800b050:	4a04      	ldr	r2, [pc, #16]	@ (800b064 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800b052:	4802      	ldr	r0, [pc, #8]	@ (800b05c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800b054:	6812      	ldr	r2, [r2, #0]
 800b056:	601a      	str	r2, [r3, #0]
 800b058:	bd08      	pop	{r3, pc}
 800b05a:	bf00      	nop
 800b05c:	2000018c 	.word	0x2000018c
 800b060:	200001a4 	.word	0x200001a4
 800b064:	20000188 	.word	0x20000188

0800b068 <_Header__max_serialized_size>:
 800b068:	b500      	push	{lr}
 800b06a:	b083      	sub	sp, #12
 800b06c:	2301      	movs	r3, #1
 800b06e:	2100      	movs	r1, #0
 800b070:	f10d 0007 	add.w	r0, sp, #7
 800b074:	f88d 3007 	strb.w	r3, [sp, #7]
 800b078:	f000 f8ec 	bl	800b254 <max_serialized_size_builtin_interfaces__msg__Time>
 800b07c:	b003      	add	sp, #12
 800b07e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b082:	bf00      	nop

0800b084 <get_serialized_size_std_msgs__msg__Header>:
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	4605      	mov	r5, r0
 800b088:	b168      	cbz	r0, 800b0a6 <get_serialized_size_std_msgs__msg__Header+0x22>
 800b08a:	460c      	mov	r4, r1
 800b08c:	f000 f892 	bl	800b1b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800b090:	1826      	adds	r6, r4, r0
 800b092:	2104      	movs	r1, #4
 800b094:	4630      	mov	r0, r6
 800b096:	f001 ff05 	bl	800cea4 <ucdr_alignment>
 800b09a:	68eb      	ldr	r3, [r5, #12]
 800b09c:	f1c4 0405 	rsb	r4, r4, #5
 800b0a0:	441c      	add	r4, r3
 800b0a2:	4404      	add	r4, r0
 800b0a4:	19a0      	adds	r0, r4, r6
 800b0a6:	bd70      	pop	{r4, r5, r6, pc}

0800b0a8 <_Header__cdr_deserialize>:
 800b0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	b083      	sub	sp, #12
 800b0ae:	b1e1      	cbz	r1, 800b0ea <_Header__cdr_deserialize+0x42>
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	f000 f8e3 	bl	800b27c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800b0b6:	6843      	ldr	r3, [r0, #4]
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	4630      	mov	r0, r6
 800b0be:	4798      	blx	r3
 800b0c0:	6927      	ldr	r7, [r4, #16]
 800b0c2:	68a1      	ldr	r1, [r4, #8]
 800b0c4:	ab01      	add	r3, sp, #4
 800b0c6:	463a      	mov	r2, r7
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f001 ff69 	bl	800cfa0 <ucdr_deserialize_sequence_char>
 800b0ce:	9b01      	ldr	r3, [sp, #4]
 800b0d0:	4605      	mov	r5, r0
 800b0d2:	b920      	cbnz	r0, 800b0de <_Header__cdr_deserialize+0x36>
 800b0d4:	429f      	cmp	r7, r3
 800b0d6:	d30c      	bcc.n	800b0f2 <_Header__cdr_deserialize+0x4a>
 800b0d8:	4628      	mov	r0, r5
 800b0da:	b003      	add	sp, #12
 800b0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0de:	b103      	cbz	r3, 800b0e2 <_Header__cdr_deserialize+0x3a>
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	60e3      	str	r3, [r4, #12]
 800b0e6:	b003      	add	sp, #12
 800b0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0ea:	460d      	mov	r5, r1
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	b003      	add	sp, #12
 800b0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	75b0      	strb	r0, [r6, #22]
 800b0f6:	7571      	strb	r1, [r6, #21]
 800b0f8:	60e0      	str	r0, [r4, #12]
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f001 fee8 	bl	800ced0 <ucdr_align_to>
 800b100:	4630      	mov	r0, r6
 800b102:	9901      	ldr	r1, [sp, #4]
 800b104:	f001 ff1a 	bl	800cf3c <ucdr_advance_buffer>
 800b108:	4628      	mov	r0, r5
 800b10a:	b003      	add	sp, #12
 800b10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b10e:	bf00      	nop

0800b110 <_Header__cdr_serialize>:
 800b110:	b1f8      	cbz	r0, 800b152 <_Header__cdr_serialize+0x42>
 800b112:	b570      	push	{r4, r5, r6, lr}
 800b114:	4604      	mov	r4, r0
 800b116:	460d      	mov	r5, r1
 800b118:	f000 f8b0 	bl	800b27c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800b11c:	6843      	ldr	r3, [r0, #4]
 800b11e:	4629      	mov	r1, r5
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	4620      	mov	r0, r4
 800b124:	4798      	blx	r3
 800b126:	68a6      	ldr	r6, [r4, #8]
 800b128:	b156      	cbz	r6, 800b140 <_Header__cdr_serialize+0x30>
 800b12a:	4630      	mov	r0, r6
 800b12c:	f7f5 f8d0 	bl	80002d0 <strlen>
 800b130:	4631      	mov	r1, r6
 800b132:	60e0      	str	r0, [r4, #12]
 800b134:	1c42      	adds	r2, r0, #1
 800b136:	4628      	mov	r0, r5
 800b138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b13c:	f001 bf1e 	b.w	800cf7c <ucdr_serialize_sequence_char>
 800b140:	4630      	mov	r0, r6
 800b142:	60e0      	str	r0, [r4, #12]
 800b144:	4632      	mov	r2, r6
 800b146:	4631      	mov	r1, r6
 800b148:	4628      	mov	r0, r5
 800b14a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b14e:	f001 bf15 	b.w	800cf7c <ucdr_serialize_sequence_char>
 800b152:	4770      	bx	lr

0800b154 <_Header__get_serialized_size>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4604      	mov	r4, r0
 800b158:	b150      	cbz	r0, 800b170 <_Header__get_serialized_size+0x1c>
 800b15a:	2100      	movs	r1, #0
 800b15c:	f000 f82a 	bl	800b1b4 <get_serialized_size_builtin_interfaces__msg__Time>
 800b160:	2104      	movs	r1, #4
 800b162:	4605      	mov	r5, r0
 800b164:	f001 fe9e 	bl	800cea4 <ucdr_alignment>
 800b168:	68e4      	ldr	r4, [r4, #12]
 800b16a:	3405      	adds	r4, #5
 800b16c:	442c      	add	r4, r5
 800b16e:	4420      	add	r0, r4
 800b170:	bd38      	pop	{r3, r4, r5, pc}
 800b172:	bf00      	nop

0800b174 <max_serialized_size_std_msgs__msg__Header>:
 800b174:	b510      	push	{r4, lr}
 800b176:	2301      	movs	r3, #1
 800b178:	4604      	mov	r4, r0
 800b17a:	7003      	strb	r3, [r0, #0]
 800b17c:	f000 f86a 	bl	800b254 <max_serialized_size_builtin_interfaces__msg__Time>
 800b180:	2300      	movs	r3, #0
 800b182:	7023      	strb	r3, [r4, #0]
 800b184:	bd10      	pop	{r4, pc}
 800b186:	bf00      	nop

0800b188 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800b188:	4800      	ldr	r0, [pc, #0]	@ (800b18c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800b18a:	4770      	bx	lr
 800b18c:	2000021c 	.word	0x2000021c

0800b190 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800b190:	f00a b8e4 	b.w	801535c <builtin_interfaces__msg__Time__init>

0800b194 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800b194:	f00a b8e6 	b.w	8015364 <builtin_interfaces__msg__Time__fini>

0800b198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800b198:	4b04      	ldr	r3, [pc, #16]	@ (800b1ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	b10a      	cbz	r2, 800b1a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800b19e:	4803      	ldr	r0, [pc, #12]	@ (800b1ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800b1a0:	4770      	bx	lr
 800b1a2:	4a03      	ldr	r2, [pc, #12]	@ (800b1b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800b1a4:	4801      	ldr	r0, [pc, #4]	@ (800b1ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800b1a6:	6812      	ldr	r2, [r2, #0]
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	4770      	bx	lr
 800b1ac:	20000250 	.word	0x20000250
 800b1b0:	20000188 	.word	0x20000188

0800b1b4 <get_serialized_size_builtin_interfaces__msg__Time>:
 800b1b4:	b180      	cbz	r0, 800b1d8 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800b1b6:	b538      	push	{r3, r4, r5, lr}
 800b1b8:	460d      	mov	r5, r1
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	2104      	movs	r1, #4
 800b1be:	f001 fe71 	bl	800cea4 <ucdr_alignment>
 800b1c2:	2104      	movs	r1, #4
 800b1c4:	186c      	adds	r4, r5, r1
 800b1c6:	4404      	add	r4, r0
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f001 fe6b 	bl	800cea4 <ucdr_alignment>
 800b1ce:	f1c5 0504 	rsb	r5, r5, #4
 800b1d2:	4405      	add	r5, r0
 800b1d4:	1928      	adds	r0, r5, r4
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop

0800b1dc <_Time__cdr_deserialize>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	460c      	mov	r4, r1
 800b1e0:	b141      	cbz	r1, 800b1f4 <_Time__cdr_deserialize+0x18>
 800b1e2:	4605      	mov	r5, r0
 800b1e4:	f001 fa62 	bl	800c6ac <ucdr_deserialize_int32_t>
 800b1e8:	1d21      	adds	r1, r4, #4
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1f0:	f000 beda 	b.w	800bfa8 <ucdr_deserialize_uint32_t>
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	bd38      	pop	{r3, r4, r5, pc}

0800b1f8 <_Time__cdr_serialize>:
 800b1f8:	b160      	cbz	r0, 800b214 <_Time__cdr_serialize+0x1c>
 800b1fa:	b538      	push	{r3, r4, r5, lr}
 800b1fc:	460d      	mov	r5, r1
 800b1fe:	4604      	mov	r4, r0
 800b200:	6801      	ldr	r1, [r0, #0]
 800b202:	4628      	mov	r0, r5
 800b204:	f001 f9b8 	bl	800c578 <ucdr_serialize_int32_t>
 800b208:	6861      	ldr	r1, [r4, #4]
 800b20a:	4628      	mov	r0, r5
 800b20c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b210:	f000 bda0 	b.w	800bd54 <ucdr_serialize_uint32_t>
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop

0800b218 <_Time__get_serialized_size>:
 800b218:	b160      	cbz	r0, 800b234 <_Time__get_serialized_size+0x1c>
 800b21a:	b510      	push	{r4, lr}
 800b21c:	2104      	movs	r1, #4
 800b21e:	2000      	movs	r0, #0
 800b220:	f001 fe40 	bl	800cea4 <ucdr_alignment>
 800b224:	1d04      	adds	r4, r0, #4
 800b226:	2104      	movs	r1, #4
 800b228:	4620      	mov	r0, r4
 800b22a:	f001 fe3b 	bl	800cea4 <ucdr_alignment>
 800b22e:	3004      	adds	r0, #4
 800b230:	4420      	add	r0, r4
 800b232:	bd10      	pop	{r4, pc}
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop

0800b238 <_Time__max_serialized_size>:
 800b238:	b510      	push	{r4, lr}
 800b23a:	2104      	movs	r1, #4
 800b23c:	2000      	movs	r0, #0
 800b23e:	f001 fe31 	bl	800cea4 <ucdr_alignment>
 800b242:	1d04      	adds	r4, r0, #4
 800b244:	2104      	movs	r1, #4
 800b246:	4620      	mov	r0, r4
 800b248:	f001 fe2c 	bl	800cea4 <ucdr_alignment>
 800b24c:	3004      	adds	r0, #4
 800b24e:	4420      	add	r0, r4
 800b250:	bd10      	pop	{r4, pc}
 800b252:	bf00      	nop

0800b254 <max_serialized_size_builtin_interfaces__msg__Time>:
 800b254:	b538      	push	{r3, r4, r5, lr}
 800b256:	460c      	mov	r4, r1
 800b258:	2301      	movs	r3, #1
 800b25a:	7003      	strb	r3, [r0, #0]
 800b25c:	2104      	movs	r1, #4
 800b25e:	4620      	mov	r0, r4
 800b260:	f001 fe20 	bl	800cea4 <ucdr_alignment>
 800b264:	2104      	movs	r1, #4
 800b266:	1863      	adds	r3, r4, r1
 800b268:	18c5      	adds	r5, r0, r3
 800b26a:	4628      	mov	r0, r5
 800b26c:	f001 fe1a 	bl	800cea4 <ucdr_alignment>
 800b270:	f1c4 0404 	rsb	r4, r4, #4
 800b274:	4420      	add	r0, r4
 800b276:	4428      	add	r0, r5
 800b278:	bd38      	pop	{r3, r4, r5, pc}
 800b27a:	bf00      	nop

0800b27c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800b27c:	4800      	ldr	r0, [pc, #0]	@ (800b280 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800b27e:	4770      	bx	lr
 800b280:	200002e0 	.word	0x200002e0

0800b284 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__size_function__PoseWithCovariance__covariance>:
 800b284:	2024      	movs	r0, #36	@ 0x24
 800b286:	4770      	bx	lr

0800b288 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_const_function__PoseWithCovariance__covariance>:
 800b288:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop

0800b290 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__fetch_function__PoseWithCovariance__covariance>:
 800b290:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b294:	e9d0 0100 	ldrd	r0, r1, [r0]
 800b298:	e9c2 0100 	strd	r0, r1, [r2]
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop

0800b2a0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__assign_function__PoseWithCovariance__covariance>:
 800b2a0:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b2a4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b2a8:	e9c0 2300 	strd	r2, r3, [r0]
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop

0800b2b0 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_init_function>:
 800b2b0:	f00a b962 	b.w	8015578 <geometry_msgs__msg__PoseWithCovariance__init>

0800b2b4 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__PoseWithCovariance_fini_function>:
 800b2b4:	f00a b96e 	b.w	8015594 <geometry_msgs__msg__PoseWithCovariance__fini>

0800b2b8 <geometry_msgs__msg__PoseWithCovariance__rosidl_typesupport_introspection_c__get_function__PoseWithCovariance__covariance>:
 800b2b8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop

0800b2c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800b2c0:	b508      	push	{r3, lr}
 800b2c2:	f00a fa89 	bl	80157d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800b2c6:	4b06      	ldr	r3, [pc, #24]	@ (800b2e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800b2c8:	4906      	ldr	r1, [pc, #24]	@ (800b2e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x24>)
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	60c8      	str	r0, [r1, #12]
 800b2ce:	b10a      	cbz	r2, 800b2d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x14>
 800b2d0:	4803      	ldr	r0, [pc, #12]	@ (800b2e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800b2d2:	bd08      	pop	{r3, pc}
 800b2d4:	4a04      	ldr	r2, [pc, #16]	@ (800b2e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x28>)
 800b2d6:	4802      	ldr	r0, [pc, #8]	@ (800b2e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x20>)
 800b2d8:	6812      	ldr	r2, [r2, #0]
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	bd08      	pop	{r3, pc}
 800b2de:	bf00      	nop
 800b2e0:	20000314 	.word	0x20000314
 800b2e4:	2000032c 	.word	0x2000032c
 800b2e8:	20000188 	.word	0x20000188

0800b2ec <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__size_function__TwistWithCovariance__covariance>:
 800b2ec:	2024      	movs	r0, #36	@ 0x24
 800b2ee:	4770      	bx	lr

0800b2f0 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_const_function__TwistWithCovariance__covariance>:
 800b2f0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop

0800b2f8 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__fetch_function__TwistWithCovariance__covariance>:
 800b2f8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b2fc:	e9d0 0100 	ldrd	r0, r1, [r0]
 800b300:	e9c2 0100 	strd	r0, r1, [r2]
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop

0800b308 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__assign_function__TwistWithCovariance__covariance>:
 800b308:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b30c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b310:	e9c0 2300 	strd	r2, r3, [r0]
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop

0800b318 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_init_function>:
 800b318:	f00a ba18 	b.w	801574c <geometry_msgs__msg__TwistWithCovariance__init>

0800b31c <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__TwistWithCovariance_fini_function>:
 800b31c:	f00a ba24 	b.w	8015768 <geometry_msgs__msg__TwistWithCovariance__fini>

0800b320 <geometry_msgs__msg__TwistWithCovariance__rosidl_typesupport_introspection_c__get_function__TwistWithCovariance__covariance>:
 800b320:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop

0800b328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800b328:	b508      	push	{r3, lr}
 800b32a:	f00a fa83 	bl	8015834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800b32e:	4b06      	ldr	r3, [pc, #24]	@ (800b348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800b330:	4906      	ldr	r1, [pc, #24]	@ (800b34c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x24>)
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	60c8      	str	r0, [r1, #12]
 800b336:	b10a      	cbz	r2, 800b33c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x14>
 800b338:	4803      	ldr	r0, [pc, #12]	@ (800b348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800b33a:	bd08      	pop	{r3, pc}
 800b33c:	4a04      	ldr	r2, [pc, #16]	@ (800b350 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x28>)
 800b33e:	4802      	ldr	r0, [pc, #8]	@ (800b348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x20>)
 800b340:	6812      	ldr	r2, [r2, #0]
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	bd08      	pop	{r3, pc}
 800b346:	bf00      	nop
 800b348:	200003a4 	.word	0x200003a4
 800b34c:	200003bc 	.word	0x200003bc
 800b350:	20000188 	.word	0x20000188

0800b354 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800b354:	b538      	push	{r3, r4, r5, lr}
 800b356:	b158      	cbz	r0, 800b370 <get_serialized_size_geometry_msgs__msg__PoseWithCovariance+0x1c>
 800b358:	460d      	mov	r5, r1
 800b35a:	f00a fa95 	bl	8015888 <get_serialized_size_geometry_msgs__msg__Pose>
 800b35e:	182c      	adds	r4, r5, r0
 800b360:	2108      	movs	r1, #8
 800b362:	4620      	mov	r0, r4
 800b364:	f001 fd9e 	bl	800cea4 <ucdr_alignment>
 800b368:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800b36c:	4405      	add	r5, r0
 800b36e:	1928      	adds	r0, r5, r4
 800b370:	bd38      	pop	{r3, r4, r5, pc}
 800b372:	bf00      	nop

0800b374 <_PoseWithCovariance__cdr_deserialize>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	460c      	mov	r4, r1
 800b378:	b179      	cbz	r1, 800b39a <_PoseWithCovariance__cdr_deserialize+0x26>
 800b37a:	4605      	mov	r5, r0
 800b37c:	f00a faf0 	bl	8015960 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800b380:	6843      	ldr	r3, [r0, #4]
 800b382:	4621      	mov	r1, r4
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	4628      	mov	r0, r5
 800b388:	4798      	blx	r3
 800b38a:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800b38e:	4628      	mov	r0, r5
 800b390:	2224      	movs	r2, #36	@ 0x24
 800b392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b396:	f000 ba3d 	b.w	800b814 <ucdr_deserialize_array_double>
 800b39a:	4608      	mov	r0, r1
 800b39c:	bd38      	pop	{r3, r4, r5, pc}
 800b39e:	bf00      	nop

0800b3a0 <_PoseWithCovariance__cdr_serialize>:
 800b3a0:	b188      	cbz	r0, 800b3c6 <_PoseWithCovariance__cdr_serialize+0x26>
 800b3a2:	b538      	push	{r3, r4, r5, lr}
 800b3a4:	460d      	mov	r5, r1
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	f00a fada 	bl	8015960 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>
 800b3ac:	6843      	ldr	r3, [r0, #4]
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	4798      	blx	r3
 800b3b6:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	2224      	movs	r2, #36	@ 0x24
 800b3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3c2:	f000 b9d3 	b.w	800b76c <ucdr_serialize_array_double>
 800b3c6:	4770      	bx	lr

0800b3c8 <_PoseWithCovariance__get_serialized_size>:
 800b3c8:	b158      	cbz	r0, 800b3e2 <_PoseWithCovariance__get_serialized_size+0x1a>
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	f00a fa5b 	bl	8015888 <get_serialized_size_geometry_msgs__msg__Pose>
 800b3d2:	2108      	movs	r1, #8
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	f001 fd65 	bl	800cea4 <ucdr_alignment>
 800b3da:	4420      	add	r0, r4
 800b3dc:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800b3e0:	bd10      	pop	{r4, pc}
 800b3e2:	4770      	bx	lr

0800b3e4 <_PoseWithCovariance__max_serialized_size>:
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	f10d 0007 	add.w	r0, sp, #7
 800b3f0:	f88d 3007 	strb.w	r3, [sp, #7]
 800b3f4:	f00a faa6 	bl	8015944 <max_serialized_size_geometry_msgs__msg__Pose>
 800b3f8:	2108      	movs	r1, #8
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	f001 fd52 	bl	800cea4 <ucdr_alignment>
 800b400:	4420      	add	r0, r4
 800b402:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800b406:	b002      	add	sp, #8
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	bf00      	nop

0800b40c <max_serialized_size_geometry_msgs__msg__PoseWithCovariance>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	2301      	movs	r3, #1
 800b410:	7003      	strb	r3, [r0, #0]
 800b412:	460c      	mov	r4, r1
 800b414:	f00a fa96 	bl	8015944 <max_serialized_size_geometry_msgs__msg__Pose>
 800b418:	1825      	adds	r5, r4, r0
 800b41a:	2108      	movs	r1, #8
 800b41c:	4628      	mov	r0, r5
 800b41e:	f001 fd41 	bl	800cea4 <ucdr_alignment>
 800b422:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800b426:	4420      	add	r0, r4
 800b428:	4428      	add	r0, r5
 800b42a:	bd38      	pop	{r3, r4, r5, pc}

0800b42c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance>:
 800b42c:	4800      	ldr	r0, [pc, #0]	@ (800b430 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__PoseWithCovariance+0x4>)
 800b42e:	4770      	bx	lr
 800b430:	20000434 	.word	0x20000434

0800b434 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	b158      	cbz	r0, 800b450 <get_serialized_size_geometry_msgs__msg__TwistWithCovariance+0x1c>
 800b438:	460d      	mov	r5, r1
 800b43a:	f00a fb4d 	bl	8015ad8 <get_serialized_size_geometry_msgs__msg__Twist>
 800b43e:	182c      	adds	r4, r5, r0
 800b440:	2108      	movs	r1, #8
 800b442:	4620      	mov	r0, r4
 800b444:	f001 fd2e 	bl	800cea4 <ucdr_alignment>
 800b448:	f5c5 7590 	rsb	r5, r5, #288	@ 0x120
 800b44c:	4405      	add	r5, r0
 800b44e:	1928      	adds	r0, r5, r4
 800b450:	bd38      	pop	{r3, r4, r5, pc}
 800b452:	bf00      	nop

0800b454 <_TwistWithCovariance__cdr_deserialize>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	460c      	mov	r4, r1
 800b458:	b179      	cbz	r1, 800b47a <_TwistWithCovariance__cdr_deserialize+0x26>
 800b45a:	4605      	mov	r5, r0
 800b45c:	f00a fba8 	bl	8015bb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800b460:	6843      	ldr	r3, [r0, #4]
 800b462:	4621      	mov	r1, r4
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	4628      	mov	r0, r5
 800b468:	4798      	blx	r3
 800b46a:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800b46e:	4628      	mov	r0, r5
 800b470:	2224      	movs	r2, #36	@ 0x24
 800b472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b476:	f000 b9cd 	b.w	800b814 <ucdr_deserialize_array_double>
 800b47a:	4608      	mov	r0, r1
 800b47c:	bd38      	pop	{r3, r4, r5, pc}
 800b47e:	bf00      	nop

0800b480 <_TwistWithCovariance__cdr_serialize>:
 800b480:	b188      	cbz	r0, 800b4a6 <_TwistWithCovariance__cdr_serialize+0x26>
 800b482:	b538      	push	{r3, r4, r5, lr}
 800b484:	460d      	mov	r5, r1
 800b486:	4604      	mov	r4, r0
 800b488:	f00a fb92 	bl	8015bb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 800b48c:	6843      	ldr	r3, [r0, #4]
 800b48e:	4629      	mov	r1, r5
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	4620      	mov	r0, r4
 800b494:	4798      	blx	r3
 800b496:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800b49a:	4628      	mov	r0, r5
 800b49c:	2224      	movs	r2, #36	@ 0x24
 800b49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4a2:	f000 b963 	b.w	800b76c <ucdr_serialize_array_double>
 800b4a6:	4770      	bx	lr

0800b4a8 <_TwistWithCovariance__get_serialized_size>:
 800b4a8:	b158      	cbz	r0, 800b4c2 <_TwistWithCovariance__get_serialized_size+0x1a>
 800b4aa:	b510      	push	{r4, lr}
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	f00a fb13 	bl	8015ad8 <get_serialized_size_geometry_msgs__msg__Twist>
 800b4b2:	2108      	movs	r1, #8
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	f001 fcf5 	bl	800cea4 <ucdr_alignment>
 800b4ba:	4420      	add	r0, r4
 800b4bc:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800b4c0:	bd10      	pop	{r4, pc}
 800b4c2:	4770      	bx	lr

0800b4c4 <_TwistWithCovariance__max_serialized_size>:
 800b4c4:	b510      	push	{r4, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	f10d 0007 	add.w	r0, sp, #7
 800b4d0:	f88d 3007 	strb.w	r3, [sp, #7]
 800b4d4:	f00a fb5e 	bl	8015b94 <max_serialized_size_geometry_msgs__msg__Twist>
 800b4d8:	2108      	movs	r1, #8
 800b4da:	4604      	mov	r4, r0
 800b4dc:	f001 fce2 	bl	800cea4 <ucdr_alignment>
 800b4e0:	4420      	add	r0, r4
 800b4e2:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800b4e6:	b002      	add	sp, #8
 800b4e8:	bd10      	pop	{r4, pc}
 800b4ea:	bf00      	nop

0800b4ec <max_serialized_size_geometry_msgs__msg__TwistWithCovariance>:
 800b4ec:	b538      	push	{r3, r4, r5, lr}
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	7003      	strb	r3, [r0, #0]
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	f00a fb4e 	bl	8015b94 <max_serialized_size_geometry_msgs__msg__Twist>
 800b4f8:	1825      	adds	r5, r4, r0
 800b4fa:	2108      	movs	r1, #8
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f001 fcd1 	bl	800cea4 <ucdr_alignment>
 800b502:	f5c4 7490 	rsb	r4, r4, #288	@ 0x120
 800b506:	4420      	add	r0, r4
 800b508:	4428      	add	r0, r5
 800b50a:	bd38      	pop	{r3, r4, r5, pc}

0800b50c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance>:
 800b50c:	4800      	ldr	r0, [pc, #0]	@ (800b510 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__TwistWithCovariance+0x4>)
 800b50e:	4770      	bx	lr
 800b510:	20000468 	.word	0x20000468

0800b514 <ucdr_serialize_endian_array_char>:
 800b514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b518:	4619      	mov	r1, r3
 800b51a:	461f      	mov	r7, r3
 800b51c:	4605      	mov	r5, r0
 800b51e:	4690      	mov	r8, r2
 800b520:	f001 fc68 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800b524:	b9e0      	cbnz	r0, 800b560 <ucdr_serialize_endian_array_char+0x4c>
 800b526:	463e      	mov	r6, r7
 800b528:	e009      	b.n	800b53e <ucdr_serialize_endian_array_char+0x2a>
 800b52a:	68a8      	ldr	r0, [r5, #8]
 800b52c:	f00c ffcd 	bl	80184ca <memcpy>
 800b530:	68ab      	ldr	r3, [r5, #8]
 800b532:	6928      	ldr	r0, [r5, #16]
 800b534:	4423      	add	r3, r4
 800b536:	4420      	add	r0, r4
 800b538:	1b36      	subs	r6, r6, r4
 800b53a:	60ab      	str	r3, [r5, #8]
 800b53c:	6128      	str	r0, [r5, #16]
 800b53e:	2201      	movs	r2, #1
 800b540:	4631      	mov	r1, r6
 800b542:	4628      	mov	r0, r5
 800b544:	f001 fcde 	bl	800cf04 <ucdr_check_final_buffer_behavior_array>
 800b548:	1bb9      	subs	r1, r7, r6
 800b54a:	4604      	mov	r4, r0
 800b54c:	4602      	mov	r2, r0
 800b54e:	4441      	add	r1, r8
 800b550:	2800      	cmp	r0, #0
 800b552:	d1ea      	bne.n	800b52a <ucdr_serialize_endian_array_char+0x16>
 800b554:	2301      	movs	r3, #1
 800b556:	7da8      	ldrb	r0, [r5, #22]
 800b558:	756b      	strb	r3, [r5, #21]
 800b55a:	4058      	eors	r0, r3
 800b55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b560:	463a      	mov	r2, r7
 800b562:	68a8      	ldr	r0, [r5, #8]
 800b564:	4641      	mov	r1, r8
 800b566:	f00c ffb0 	bl	80184ca <memcpy>
 800b56a:	68aa      	ldr	r2, [r5, #8]
 800b56c:	692b      	ldr	r3, [r5, #16]
 800b56e:	443a      	add	r2, r7
 800b570:	443b      	add	r3, r7
 800b572:	60aa      	str	r2, [r5, #8]
 800b574:	612b      	str	r3, [r5, #16]
 800b576:	e7ed      	b.n	800b554 <ucdr_serialize_endian_array_char+0x40>

0800b578 <ucdr_deserialize_endian_array_char>:
 800b578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b57c:	4619      	mov	r1, r3
 800b57e:	461f      	mov	r7, r3
 800b580:	4605      	mov	r5, r0
 800b582:	4690      	mov	r8, r2
 800b584:	f001 fc36 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800b588:	b9e0      	cbnz	r0, 800b5c4 <ucdr_deserialize_endian_array_char+0x4c>
 800b58a:	463e      	mov	r6, r7
 800b58c:	e009      	b.n	800b5a2 <ucdr_deserialize_endian_array_char+0x2a>
 800b58e:	68a9      	ldr	r1, [r5, #8]
 800b590:	f00c ff9b 	bl	80184ca <memcpy>
 800b594:	68aa      	ldr	r2, [r5, #8]
 800b596:	692b      	ldr	r3, [r5, #16]
 800b598:	4422      	add	r2, r4
 800b59a:	4423      	add	r3, r4
 800b59c:	1b36      	subs	r6, r6, r4
 800b59e:	60aa      	str	r2, [r5, #8]
 800b5a0:	612b      	str	r3, [r5, #16]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f001 fcac 	bl	800cf04 <ucdr_check_final_buffer_behavior_array>
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	1bb8      	subs	r0, r7, r6
 800b5b0:	4622      	mov	r2, r4
 800b5b2:	4440      	add	r0, r8
 800b5b4:	2c00      	cmp	r4, #0
 800b5b6:	d1ea      	bne.n	800b58e <ucdr_deserialize_endian_array_char+0x16>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	7da8      	ldrb	r0, [r5, #22]
 800b5bc:	756b      	strb	r3, [r5, #21]
 800b5be:	4058      	eors	r0, r3
 800b5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5c4:	463a      	mov	r2, r7
 800b5c6:	68a9      	ldr	r1, [r5, #8]
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	f00c ff7e 	bl	80184ca <memcpy>
 800b5ce:	68aa      	ldr	r2, [r5, #8]
 800b5d0:	692b      	ldr	r3, [r5, #16]
 800b5d2:	443a      	add	r2, r7
 800b5d4:	443b      	add	r3, r7
 800b5d6:	60aa      	str	r2, [r5, #8]
 800b5d8:	612b      	str	r3, [r5, #16]
 800b5da:	e7ed      	b.n	800b5b8 <ucdr_deserialize_endian_array_char+0x40>

0800b5dc <ucdr_serialize_array_uint8_t>:
 800b5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e0:	4688      	mov	r8, r1
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	4617      	mov	r7, r2
 800b5e6:	4605      	mov	r5, r0
 800b5e8:	f001 fc04 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800b5ec:	b9e0      	cbnz	r0, 800b628 <ucdr_serialize_array_uint8_t+0x4c>
 800b5ee:	463e      	mov	r6, r7
 800b5f0:	e009      	b.n	800b606 <ucdr_serialize_array_uint8_t+0x2a>
 800b5f2:	68a8      	ldr	r0, [r5, #8]
 800b5f4:	f00c ff69 	bl	80184ca <memcpy>
 800b5f8:	68aa      	ldr	r2, [r5, #8]
 800b5fa:	692b      	ldr	r3, [r5, #16]
 800b5fc:	4422      	add	r2, r4
 800b5fe:	4423      	add	r3, r4
 800b600:	1b36      	subs	r6, r6, r4
 800b602:	60aa      	str	r2, [r5, #8]
 800b604:	612b      	str	r3, [r5, #16]
 800b606:	2201      	movs	r2, #1
 800b608:	4631      	mov	r1, r6
 800b60a:	4628      	mov	r0, r5
 800b60c:	f001 fc7a 	bl	800cf04 <ucdr_check_final_buffer_behavior_array>
 800b610:	1bb9      	subs	r1, r7, r6
 800b612:	4604      	mov	r4, r0
 800b614:	4602      	mov	r2, r0
 800b616:	4441      	add	r1, r8
 800b618:	2800      	cmp	r0, #0
 800b61a:	d1ea      	bne.n	800b5f2 <ucdr_serialize_array_uint8_t+0x16>
 800b61c:	2301      	movs	r3, #1
 800b61e:	7da8      	ldrb	r0, [r5, #22]
 800b620:	756b      	strb	r3, [r5, #21]
 800b622:	4058      	eors	r0, r3
 800b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b628:	463a      	mov	r2, r7
 800b62a:	68a8      	ldr	r0, [r5, #8]
 800b62c:	4641      	mov	r1, r8
 800b62e:	f00c ff4c 	bl	80184ca <memcpy>
 800b632:	68aa      	ldr	r2, [r5, #8]
 800b634:	692b      	ldr	r3, [r5, #16]
 800b636:	443a      	add	r2, r7
 800b638:	443b      	add	r3, r7
 800b63a:	60aa      	str	r2, [r5, #8]
 800b63c:	612b      	str	r3, [r5, #16]
 800b63e:	e7ed      	b.n	800b61c <ucdr_serialize_array_uint8_t+0x40>

0800b640 <ucdr_serialize_endian_array_uint8_t>:
 800b640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b644:	4619      	mov	r1, r3
 800b646:	461f      	mov	r7, r3
 800b648:	4605      	mov	r5, r0
 800b64a:	4690      	mov	r8, r2
 800b64c:	f001 fbd2 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800b650:	b9e0      	cbnz	r0, 800b68c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800b652:	463e      	mov	r6, r7
 800b654:	e009      	b.n	800b66a <ucdr_serialize_endian_array_uint8_t+0x2a>
 800b656:	68a8      	ldr	r0, [r5, #8]
 800b658:	f00c ff37 	bl	80184ca <memcpy>
 800b65c:	68ab      	ldr	r3, [r5, #8]
 800b65e:	6928      	ldr	r0, [r5, #16]
 800b660:	4423      	add	r3, r4
 800b662:	4420      	add	r0, r4
 800b664:	1b36      	subs	r6, r6, r4
 800b666:	60ab      	str	r3, [r5, #8]
 800b668:	6128      	str	r0, [r5, #16]
 800b66a:	2201      	movs	r2, #1
 800b66c:	4631      	mov	r1, r6
 800b66e:	4628      	mov	r0, r5
 800b670:	f001 fc48 	bl	800cf04 <ucdr_check_final_buffer_behavior_array>
 800b674:	1bb9      	subs	r1, r7, r6
 800b676:	4604      	mov	r4, r0
 800b678:	4602      	mov	r2, r0
 800b67a:	4441      	add	r1, r8
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d1ea      	bne.n	800b656 <ucdr_serialize_endian_array_uint8_t+0x16>
 800b680:	2301      	movs	r3, #1
 800b682:	7da8      	ldrb	r0, [r5, #22]
 800b684:	756b      	strb	r3, [r5, #21]
 800b686:	4058      	eors	r0, r3
 800b688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b68c:	463a      	mov	r2, r7
 800b68e:	68a8      	ldr	r0, [r5, #8]
 800b690:	4641      	mov	r1, r8
 800b692:	f00c ff1a 	bl	80184ca <memcpy>
 800b696:	68aa      	ldr	r2, [r5, #8]
 800b698:	692b      	ldr	r3, [r5, #16]
 800b69a:	443a      	add	r2, r7
 800b69c:	443b      	add	r3, r7
 800b69e:	60aa      	str	r2, [r5, #8]
 800b6a0:	612b      	str	r3, [r5, #16]
 800b6a2:	e7ed      	b.n	800b680 <ucdr_serialize_endian_array_uint8_t+0x40>

0800b6a4 <ucdr_deserialize_array_uint8_t>:
 800b6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a8:	4688      	mov	r8, r1
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	4617      	mov	r7, r2
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	f001 fba0 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800b6b4:	b9e0      	cbnz	r0, 800b6f0 <ucdr_deserialize_array_uint8_t+0x4c>
 800b6b6:	463e      	mov	r6, r7
 800b6b8:	e009      	b.n	800b6ce <ucdr_deserialize_array_uint8_t+0x2a>
 800b6ba:	68a9      	ldr	r1, [r5, #8]
 800b6bc:	f00c ff05 	bl	80184ca <memcpy>
 800b6c0:	68aa      	ldr	r2, [r5, #8]
 800b6c2:	692b      	ldr	r3, [r5, #16]
 800b6c4:	4422      	add	r2, r4
 800b6c6:	4423      	add	r3, r4
 800b6c8:	1b36      	subs	r6, r6, r4
 800b6ca:	60aa      	str	r2, [r5, #8]
 800b6cc:	612b      	str	r3, [r5, #16]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	f001 fc16 	bl	800cf04 <ucdr_check_final_buffer_behavior_array>
 800b6d8:	4604      	mov	r4, r0
 800b6da:	1bb8      	subs	r0, r7, r6
 800b6dc:	4622      	mov	r2, r4
 800b6de:	4440      	add	r0, r8
 800b6e0:	2c00      	cmp	r4, #0
 800b6e2:	d1ea      	bne.n	800b6ba <ucdr_deserialize_array_uint8_t+0x16>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	7da8      	ldrb	r0, [r5, #22]
 800b6e8:	756b      	strb	r3, [r5, #21]
 800b6ea:	4058      	eors	r0, r3
 800b6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f0:	463a      	mov	r2, r7
 800b6f2:	68a9      	ldr	r1, [r5, #8]
 800b6f4:	4640      	mov	r0, r8
 800b6f6:	f00c fee8 	bl	80184ca <memcpy>
 800b6fa:	68aa      	ldr	r2, [r5, #8]
 800b6fc:	692b      	ldr	r3, [r5, #16]
 800b6fe:	443a      	add	r2, r7
 800b700:	443b      	add	r3, r7
 800b702:	60aa      	str	r2, [r5, #8]
 800b704:	612b      	str	r3, [r5, #16]
 800b706:	e7ed      	b.n	800b6e4 <ucdr_deserialize_array_uint8_t+0x40>

0800b708 <ucdr_deserialize_endian_array_uint8_t>:
 800b708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70c:	4619      	mov	r1, r3
 800b70e:	461f      	mov	r7, r3
 800b710:	4605      	mov	r5, r0
 800b712:	4690      	mov	r8, r2
 800b714:	f001 fb6e 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800b718:	b9e0      	cbnz	r0, 800b754 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800b71a:	463e      	mov	r6, r7
 800b71c:	e009      	b.n	800b732 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800b71e:	68a9      	ldr	r1, [r5, #8]
 800b720:	f00c fed3 	bl	80184ca <memcpy>
 800b724:	68aa      	ldr	r2, [r5, #8]
 800b726:	692b      	ldr	r3, [r5, #16]
 800b728:	4422      	add	r2, r4
 800b72a:	4423      	add	r3, r4
 800b72c:	1b36      	subs	r6, r6, r4
 800b72e:	60aa      	str	r2, [r5, #8]
 800b730:	612b      	str	r3, [r5, #16]
 800b732:	2201      	movs	r2, #1
 800b734:	4631      	mov	r1, r6
 800b736:	4628      	mov	r0, r5
 800b738:	f001 fbe4 	bl	800cf04 <ucdr_check_final_buffer_behavior_array>
 800b73c:	4604      	mov	r4, r0
 800b73e:	1bb8      	subs	r0, r7, r6
 800b740:	4622      	mov	r2, r4
 800b742:	4440      	add	r0, r8
 800b744:	2c00      	cmp	r4, #0
 800b746:	d1ea      	bne.n	800b71e <ucdr_deserialize_endian_array_uint8_t+0x16>
 800b748:	2301      	movs	r3, #1
 800b74a:	7da8      	ldrb	r0, [r5, #22]
 800b74c:	756b      	strb	r3, [r5, #21]
 800b74e:	4058      	eors	r0, r3
 800b750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b754:	463a      	mov	r2, r7
 800b756:	68a9      	ldr	r1, [r5, #8]
 800b758:	4640      	mov	r0, r8
 800b75a:	f00c feb6 	bl	80184ca <memcpy>
 800b75e:	68aa      	ldr	r2, [r5, #8]
 800b760:	692b      	ldr	r3, [r5, #16]
 800b762:	443a      	add	r2, r7
 800b764:	443b      	add	r3, r7
 800b766:	60aa      	str	r2, [r5, #8]
 800b768:	612b      	str	r3, [r5, #16]
 800b76a:	e7ed      	b.n	800b748 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800b76c <ucdr_serialize_array_double>:
 800b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b770:	460e      	mov	r6, r1
 800b772:	2108      	movs	r1, #8
 800b774:	4604      	mov	r4, r0
 800b776:	4617      	mov	r7, r2
 800b778:	f001 fb9c 	bl	800ceb4 <ucdr_buffer_alignment>
 800b77c:	4601      	mov	r1, r0
 800b77e:	4620      	mov	r0, r4
 800b780:	7d65      	ldrb	r5, [r4, #21]
 800b782:	f001 fbdb 	bl	800cf3c <ucdr_advance_buffer>
 800b786:	7d21      	ldrb	r1, [r4, #20]
 800b788:	7565      	strb	r5, [r4, #21]
 800b78a:	2901      	cmp	r1, #1
 800b78c:	d010      	beq.n	800b7b0 <ucdr_serialize_array_double+0x44>
 800b78e:	b157      	cbz	r7, 800b7a6 <ucdr_serialize_array_double+0x3a>
 800b790:	2500      	movs	r5, #0
 800b792:	e000      	b.n	800b796 <ucdr_serialize_array_double+0x2a>
 800b794:	7d21      	ldrb	r1, [r4, #20]
 800b796:	ecb6 0b02 	vldmia	r6!, {d0}
 800b79a:	4620      	mov	r0, r4
 800b79c:	3501      	adds	r5, #1
 800b79e:	f001 f8db 	bl	800c958 <ucdr_serialize_endian_double>
 800b7a2:	42af      	cmp	r7, r5
 800b7a4:	d1f6      	bne.n	800b794 <ucdr_serialize_array_double+0x28>
 800b7a6:	7da0      	ldrb	r0, [r4, #22]
 800b7a8:	f080 0001 	eor.w	r0, r0, #1
 800b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b0:	00ff      	lsls	r7, r7, #3
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f001 fb1d 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800b7ba:	b9f8      	cbnz	r0, 800b7fc <ucdr_serialize_array_double+0x90>
 800b7bc:	46b8      	mov	r8, r7
 800b7be:	e00a      	b.n	800b7d6 <ucdr_serialize_array_double+0x6a>
 800b7c0:	68a0      	ldr	r0, [r4, #8]
 800b7c2:	f00c fe82 	bl	80184ca <memcpy>
 800b7c6:	68a2      	ldr	r2, [r4, #8]
 800b7c8:	6923      	ldr	r3, [r4, #16]
 800b7ca:	442a      	add	r2, r5
 800b7cc:	442b      	add	r3, r5
 800b7ce:	eba8 0805 	sub.w	r8, r8, r5
 800b7d2:	60a2      	str	r2, [r4, #8]
 800b7d4:	6123      	str	r3, [r4, #16]
 800b7d6:	2208      	movs	r2, #8
 800b7d8:	4641      	mov	r1, r8
 800b7da:	4620      	mov	r0, r4
 800b7dc:	f001 fb92 	bl	800cf04 <ucdr_check_final_buffer_behavior_array>
 800b7e0:	eba7 0108 	sub.w	r1, r7, r8
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	4431      	add	r1, r6
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d1e8      	bne.n	800b7c0 <ucdr_serialize_array_double+0x54>
 800b7ee:	7da0      	ldrb	r0, [r4, #22]
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	7563      	strb	r3, [r4, #21]
 800b7f4:	f080 0001 	eor.w	r0, r0, #1
 800b7f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7fc:	463a      	mov	r2, r7
 800b7fe:	68a0      	ldr	r0, [r4, #8]
 800b800:	4631      	mov	r1, r6
 800b802:	f00c fe62 	bl	80184ca <memcpy>
 800b806:	68a2      	ldr	r2, [r4, #8]
 800b808:	6923      	ldr	r3, [r4, #16]
 800b80a:	443a      	add	r2, r7
 800b80c:	443b      	add	r3, r7
 800b80e:	60a2      	str	r2, [r4, #8]
 800b810:	6123      	str	r3, [r4, #16]
 800b812:	e7ec      	b.n	800b7ee <ucdr_serialize_array_double+0x82>

0800b814 <ucdr_deserialize_array_double>:
 800b814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b818:	460e      	mov	r6, r1
 800b81a:	2108      	movs	r1, #8
 800b81c:	4604      	mov	r4, r0
 800b81e:	4617      	mov	r7, r2
 800b820:	f001 fb48 	bl	800ceb4 <ucdr_buffer_alignment>
 800b824:	4601      	mov	r1, r0
 800b826:	4620      	mov	r0, r4
 800b828:	7d65      	ldrb	r5, [r4, #21]
 800b82a:	f001 fb87 	bl	800cf3c <ucdr_advance_buffer>
 800b82e:	7d21      	ldrb	r1, [r4, #20]
 800b830:	7565      	strb	r5, [r4, #21]
 800b832:	2901      	cmp	r1, #1
 800b834:	d011      	beq.n	800b85a <ucdr_deserialize_array_double+0x46>
 800b836:	b15f      	cbz	r7, 800b850 <ucdr_deserialize_array_double+0x3c>
 800b838:	2500      	movs	r5, #0
 800b83a:	e000      	b.n	800b83e <ucdr_deserialize_array_double+0x2a>
 800b83c:	7d21      	ldrb	r1, [r4, #20]
 800b83e:	4632      	mov	r2, r6
 800b840:	4620      	mov	r0, r4
 800b842:	3501      	adds	r5, #1
 800b844:	f001 fa0e 	bl	800cc64 <ucdr_deserialize_endian_double>
 800b848:	42af      	cmp	r7, r5
 800b84a:	f106 0608 	add.w	r6, r6, #8
 800b84e:	d1f5      	bne.n	800b83c <ucdr_deserialize_array_double+0x28>
 800b850:	7da0      	ldrb	r0, [r4, #22]
 800b852:	f080 0001 	eor.w	r0, r0, #1
 800b856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b85a:	00ff      	lsls	r7, r7, #3
 800b85c:	4639      	mov	r1, r7
 800b85e:	4620      	mov	r0, r4
 800b860:	f001 fac8 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800b864:	b9f8      	cbnz	r0, 800b8a6 <ucdr_deserialize_array_double+0x92>
 800b866:	46b8      	mov	r8, r7
 800b868:	e00a      	b.n	800b880 <ucdr_deserialize_array_double+0x6c>
 800b86a:	68a1      	ldr	r1, [r4, #8]
 800b86c:	f00c fe2d 	bl	80184ca <memcpy>
 800b870:	68a2      	ldr	r2, [r4, #8]
 800b872:	6923      	ldr	r3, [r4, #16]
 800b874:	442a      	add	r2, r5
 800b876:	442b      	add	r3, r5
 800b878:	eba8 0805 	sub.w	r8, r8, r5
 800b87c:	60a2      	str	r2, [r4, #8]
 800b87e:	6123      	str	r3, [r4, #16]
 800b880:	2208      	movs	r2, #8
 800b882:	4641      	mov	r1, r8
 800b884:	4620      	mov	r0, r4
 800b886:	f001 fb3d 	bl	800cf04 <ucdr_check_final_buffer_behavior_array>
 800b88a:	4605      	mov	r5, r0
 800b88c:	eba7 0008 	sub.w	r0, r7, r8
 800b890:	462a      	mov	r2, r5
 800b892:	4430      	add	r0, r6
 800b894:	2d00      	cmp	r5, #0
 800b896:	d1e8      	bne.n	800b86a <ucdr_deserialize_array_double+0x56>
 800b898:	7da0      	ldrb	r0, [r4, #22]
 800b89a:	2308      	movs	r3, #8
 800b89c:	7563      	strb	r3, [r4, #21]
 800b89e:	f080 0001 	eor.w	r0, r0, #1
 800b8a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8a6:	463a      	mov	r2, r7
 800b8a8:	68a1      	ldr	r1, [r4, #8]
 800b8aa:	4630      	mov	r0, r6
 800b8ac:	f00c fe0d 	bl	80184ca <memcpy>
 800b8b0:	68a2      	ldr	r2, [r4, #8]
 800b8b2:	6923      	ldr	r3, [r4, #16]
 800b8b4:	443a      	add	r2, r7
 800b8b6:	443b      	add	r3, r7
 800b8b8:	60a2      	str	r2, [r4, #8]
 800b8ba:	6123      	str	r3, [r4, #16]
 800b8bc:	e7ec      	b.n	800b898 <ucdr_deserialize_array_double+0x84>
 800b8be:	bf00      	nop

0800b8c0 <ucdr_serialize_bool>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	460d      	mov	r5, r1
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	f001 faa0 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800b8cc:	b148      	cbz	r0, 800b8e2 <ucdr_serialize_bool+0x22>
 800b8ce:	68a3      	ldr	r3, [r4, #8]
 800b8d0:	701d      	strb	r5, [r3, #0]
 800b8d2:	68a2      	ldr	r2, [r4, #8]
 800b8d4:	6923      	ldr	r3, [r4, #16]
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	440a      	add	r2, r1
 800b8da:	440b      	add	r3, r1
 800b8dc:	60a2      	str	r2, [r4, #8]
 800b8de:	6123      	str	r3, [r4, #16]
 800b8e0:	7561      	strb	r1, [r4, #21]
 800b8e2:	7da0      	ldrb	r0, [r4, #22]
 800b8e4:	f080 0001 	eor.w	r0, r0, #1
 800b8e8:	bd38      	pop	{r3, r4, r5, pc}
 800b8ea:	bf00      	nop

0800b8ec <ucdr_deserialize_bool>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	460d      	mov	r5, r1
 800b8f0:	2101      	movs	r1, #1
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	f001 fa8a 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800b8f8:	b160      	cbz	r0, 800b914 <ucdr_deserialize_bool+0x28>
 800b8fa:	68a2      	ldr	r2, [r4, #8]
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b902:	3900      	subs	r1, #0
 800b904:	bf18      	it	ne
 800b906:	2101      	movne	r1, #1
 800b908:	7029      	strb	r1, [r5, #0]
 800b90a:	3301      	adds	r3, #1
 800b90c:	2101      	movs	r1, #1
 800b90e:	60a2      	str	r2, [r4, #8]
 800b910:	6123      	str	r3, [r4, #16]
 800b912:	7561      	strb	r1, [r4, #21]
 800b914:	7da0      	ldrb	r0, [r4, #22]
 800b916:	f080 0001 	eor.w	r0, r0, #1
 800b91a:	bd38      	pop	{r3, r4, r5, pc}

0800b91c <ucdr_serialize_uint8_t>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	460d      	mov	r5, r1
 800b920:	2101      	movs	r1, #1
 800b922:	4604      	mov	r4, r0
 800b924:	f001 fa72 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800b928:	b148      	cbz	r0, 800b93e <ucdr_serialize_uint8_t+0x22>
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	701d      	strb	r5, [r3, #0]
 800b92e:	68a2      	ldr	r2, [r4, #8]
 800b930:	6923      	ldr	r3, [r4, #16]
 800b932:	2101      	movs	r1, #1
 800b934:	440a      	add	r2, r1
 800b936:	440b      	add	r3, r1
 800b938:	60a2      	str	r2, [r4, #8]
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	7561      	strb	r1, [r4, #21]
 800b93e:	7da0      	ldrb	r0, [r4, #22]
 800b940:	f080 0001 	eor.w	r0, r0, #1
 800b944:	bd38      	pop	{r3, r4, r5, pc}
 800b946:	bf00      	nop

0800b948 <ucdr_deserialize_uint8_t>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	460d      	mov	r5, r1
 800b94c:	2101      	movs	r1, #1
 800b94e:	4604      	mov	r4, r0
 800b950:	f001 fa5c 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800b954:	b150      	cbz	r0, 800b96c <ucdr_deserialize_uint8_t+0x24>
 800b956:	68a3      	ldr	r3, [r4, #8]
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	702b      	strb	r3, [r5, #0]
 800b95c:	68a2      	ldr	r2, [r4, #8]
 800b95e:	6923      	ldr	r3, [r4, #16]
 800b960:	2101      	movs	r1, #1
 800b962:	440a      	add	r2, r1
 800b964:	440b      	add	r3, r1
 800b966:	60a2      	str	r2, [r4, #8]
 800b968:	6123      	str	r3, [r4, #16]
 800b96a:	7561      	strb	r1, [r4, #21]
 800b96c:	7da0      	ldrb	r0, [r4, #22]
 800b96e:	f080 0001 	eor.w	r0, r0, #1
 800b972:	bd38      	pop	{r3, r4, r5, pc}

0800b974 <ucdr_serialize_uint16_t>:
 800b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b978:	b082      	sub	sp, #8
 800b97a:	460b      	mov	r3, r1
 800b97c:	2102      	movs	r1, #2
 800b97e:	4604      	mov	r4, r0
 800b980:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b984:	f001 fa96 	bl	800ceb4 <ucdr_buffer_alignment>
 800b988:	4601      	mov	r1, r0
 800b98a:	4620      	mov	r0, r4
 800b98c:	7d67      	ldrb	r7, [r4, #21]
 800b98e:	f001 fad5 	bl	800cf3c <ucdr_advance_buffer>
 800b992:	2102      	movs	r1, #2
 800b994:	4620      	mov	r0, r4
 800b996:	f001 fa2d 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800b99a:	b1c0      	cbz	r0, 800b9ce <ucdr_serialize_uint16_t+0x5a>
 800b99c:	7d22      	ldrb	r2, [r4, #20]
 800b99e:	68a3      	ldr	r3, [r4, #8]
 800b9a0:	2a01      	cmp	r2, #1
 800b9a2:	d04e      	beq.n	800ba42 <ucdr_serialize_uint16_t+0xce>
 800b9a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b9a8:	701a      	strb	r2, [r3, #0]
 800b9aa:	68a3      	ldr	r3, [r4, #8]
 800b9ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9b0:	705a      	strb	r2, [r3, #1]
 800b9b2:	68a2      	ldr	r2, [r4, #8]
 800b9b4:	6923      	ldr	r3, [r4, #16]
 800b9b6:	3202      	adds	r2, #2
 800b9b8:	3302      	adds	r3, #2
 800b9ba:	2102      	movs	r1, #2
 800b9bc:	60a2      	str	r2, [r4, #8]
 800b9be:	6123      	str	r3, [r4, #16]
 800b9c0:	7561      	strb	r1, [r4, #21]
 800b9c2:	7da0      	ldrb	r0, [r4, #22]
 800b9c4:	f080 0001 	eor.w	r0, r0, #1
 800b9c8:	b002      	add	sp, #8
 800b9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ce:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b9d2:	42ab      	cmp	r3, r5
 800b9d4:	d923      	bls.n	800ba1e <ucdr_serialize_uint16_t+0xaa>
 800b9d6:	1b5e      	subs	r6, r3, r5
 800b9d8:	60a3      	str	r3, [r4, #8]
 800b9da:	6923      	ldr	r3, [r4, #16]
 800b9dc:	f1c6 0802 	rsb	r8, r6, #2
 800b9e0:	4433      	add	r3, r6
 800b9e2:	6123      	str	r3, [r4, #16]
 800b9e4:	4641      	mov	r1, r8
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f001 fa10 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800b9ec:	b368      	cbz	r0, 800ba4a <ucdr_serialize_uint16_t+0xd6>
 800b9ee:	7d23      	ldrb	r3, [r4, #20]
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d03b      	beq.n	800ba6c <ucdr_serialize_uint16_t+0xf8>
 800b9f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9f8:	702b      	strb	r3, [r5, #0]
 800b9fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b9fe:	706b      	strb	r3, [r5, #1]
 800ba00:	6923      	ldr	r3, [r4, #16]
 800ba02:	68a2      	ldr	r2, [r4, #8]
 800ba04:	7da0      	ldrb	r0, [r4, #22]
 800ba06:	3302      	adds	r3, #2
 800ba08:	4442      	add	r2, r8
 800ba0a:	1b9b      	subs	r3, r3, r6
 800ba0c:	2102      	movs	r1, #2
 800ba0e:	f080 0001 	eor.w	r0, r0, #1
 800ba12:	60a2      	str	r2, [r4, #8]
 800ba14:	6123      	str	r3, [r4, #16]
 800ba16:	7561      	strb	r1, [r4, #21]
 800ba18:	b002      	add	sp, #8
 800ba1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1e:	2102      	movs	r1, #2
 800ba20:	4620      	mov	r0, r4
 800ba22:	f001 f9f3 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	d0cb      	beq.n	800b9c2 <ucdr_serialize_uint16_t+0x4e>
 800ba2a:	7d23      	ldrb	r3, [r4, #20]
 800ba2c:	68a2      	ldr	r2, [r4, #8]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d018      	beq.n	800ba64 <ucdr_serialize_uint16_t+0xf0>
 800ba32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ba36:	7013      	strb	r3, [r2, #0]
 800ba38:	68a3      	ldr	r3, [r4, #8]
 800ba3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba3e:	705a      	strb	r2, [r3, #1]
 800ba40:	e7b7      	b.n	800b9b2 <ucdr_serialize_uint16_t+0x3e>
 800ba42:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba46:	801a      	strh	r2, [r3, #0]
 800ba48:	e7b3      	b.n	800b9b2 <ucdr_serialize_uint16_t+0x3e>
 800ba4a:	68a2      	ldr	r2, [r4, #8]
 800ba4c:	6923      	ldr	r3, [r4, #16]
 800ba4e:	7da0      	ldrb	r0, [r4, #22]
 800ba50:	7567      	strb	r7, [r4, #21]
 800ba52:	1b92      	subs	r2, r2, r6
 800ba54:	1b9b      	subs	r3, r3, r6
 800ba56:	f080 0001 	eor.w	r0, r0, #1
 800ba5a:	60a2      	str	r2, [r4, #8]
 800ba5c:	6123      	str	r3, [r4, #16]
 800ba5e:	b002      	add	sp, #8
 800ba60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ba68:	8013      	strh	r3, [r2, #0]
 800ba6a:	e7a2      	b.n	800b9b2 <ucdr_serialize_uint16_t+0x3e>
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	f10d 0506 	add.w	r5, sp, #6
 800ba72:	4632      	mov	r2, r6
 800ba74:	4629      	mov	r1, r5
 800ba76:	f00c fd28 	bl	80184ca <memcpy>
 800ba7a:	68a0      	ldr	r0, [r4, #8]
 800ba7c:	4642      	mov	r2, r8
 800ba7e:	19a9      	adds	r1, r5, r6
 800ba80:	f00c fd23 	bl	80184ca <memcpy>
 800ba84:	e7bc      	b.n	800ba00 <ucdr_serialize_uint16_t+0x8c>
 800ba86:	bf00      	nop

0800ba88 <ucdr_serialize_endian_uint16_t>:
 800ba88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba8c:	b083      	sub	sp, #12
 800ba8e:	460d      	mov	r5, r1
 800ba90:	2102      	movs	r1, #2
 800ba92:	4604      	mov	r4, r0
 800ba94:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ba98:	f001 fa0c 	bl	800ceb4 <ucdr_buffer_alignment>
 800ba9c:	4601      	mov	r1, r0
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800baa4:	f001 fa4a 	bl	800cf3c <ucdr_advance_buffer>
 800baa8:	2102      	movs	r1, #2
 800baaa:	4620      	mov	r0, r4
 800baac:	f001 f9a2 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800bab0:	bb60      	cbnz	r0, 800bb0c <ucdr_serialize_endian_uint16_t+0x84>
 800bab2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bab6:	42be      	cmp	r6, r7
 800bab8:	d923      	bls.n	800bb02 <ucdr_serialize_endian_uint16_t+0x7a>
 800baba:	6923      	ldr	r3, [r4, #16]
 800babc:	60a6      	str	r6, [r4, #8]
 800babe:	1bf6      	subs	r6, r6, r7
 800bac0:	4433      	add	r3, r6
 800bac2:	f1c6 0902 	rsb	r9, r6, #2
 800bac6:	6123      	str	r3, [r4, #16]
 800bac8:	4649      	mov	r1, r9
 800baca:	4620      	mov	r0, r4
 800bacc:	f001 f99e 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	d037      	beq.n	800bb44 <ucdr_serialize_endian_uint16_t+0xbc>
 800bad4:	2d01      	cmp	r5, #1
 800bad6:	d043      	beq.n	800bb60 <ucdr_serialize_endian_uint16_t+0xd8>
 800bad8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800badc:	703b      	strb	r3, [r7, #0]
 800bade:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bae2:	707b      	strb	r3, [r7, #1]
 800bae4:	6923      	ldr	r3, [r4, #16]
 800bae6:	68a2      	ldr	r2, [r4, #8]
 800bae8:	7da0      	ldrb	r0, [r4, #22]
 800baea:	3302      	adds	r3, #2
 800baec:	444a      	add	r2, r9
 800baee:	1b9b      	subs	r3, r3, r6
 800baf0:	2102      	movs	r1, #2
 800baf2:	f080 0001 	eor.w	r0, r0, #1
 800baf6:	60a2      	str	r2, [r4, #8]
 800baf8:	6123      	str	r3, [r4, #16]
 800bafa:	7561      	strb	r1, [r4, #21]
 800bafc:	b003      	add	sp, #12
 800bafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb02:	2102      	movs	r1, #2
 800bb04:	4620      	mov	r0, r4
 800bb06:	f001 f981 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800bb0a:	b188      	cbz	r0, 800bb30 <ucdr_serialize_endian_uint16_t+0xa8>
 800bb0c:	2d01      	cmp	r5, #1
 800bb0e:	68a3      	ldr	r3, [r4, #8]
 800bb10:	d014      	beq.n	800bb3c <ucdr_serialize_endian_uint16_t+0xb4>
 800bb12:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bb16:	701a      	strb	r2, [r3, #0]
 800bb18:	68a3      	ldr	r3, [r4, #8]
 800bb1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bb1e:	705a      	strb	r2, [r3, #1]
 800bb20:	68a2      	ldr	r2, [r4, #8]
 800bb22:	6923      	ldr	r3, [r4, #16]
 800bb24:	3202      	adds	r2, #2
 800bb26:	3302      	adds	r3, #2
 800bb28:	2102      	movs	r1, #2
 800bb2a:	60a2      	str	r2, [r4, #8]
 800bb2c:	6123      	str	r3, [r4, #16]
 800bb2e:	7561      	strb	r1, [r4, #21]
 800bb30:	7da0      	ldrb	r0, [r4, #22]
 800bb32:	f080 0001 	eor.w	r0, r0, #1
 800bb36:	b003      	add	sp, #12
 800bb38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb3c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bb40:	801a      	strh	r2, [r3, #0]
 800bb42:	e7ed      	b.n	800bb20 <ucdr_serialize_endian_uint16_t+0x98>
 800bb44:	68a2      	ldr	r2, [r4, #8]
 800bb46:	6923      	ldr	r3, [r4, #16]
 800bb48:	7da0      	ldrb	r0, [r4, #22]
 800bb4a:	f884 8015 	strb.w	r8, [r4, #21]
 800bb4e:	1b92      	subs	r2, r2, r6
 800bb50:	1b9b      	subs	r3, r3, r6
 800bb52:	f080 0001 	eor.w	r0, r0, #1
 800bb56:	60a2      	str	r2, [r4, #8]
 800bb58:	6123      	str	r3, [r4, #16]
 800bb5a:	b003      	add	sp, #12
 800bb5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb60:	f10d 0506 	add.w	r5, sp, #6
 800bb64:	4632      	mov	r2, r6
 800bb66:	4629      	mov	r1, r5
 800bb68:	4638      	mov	r0, r7
 800bb6a:	f00c fcae 	bl	80184ca <memcpy>
 800bb6e:	68a0      	ldr	r0, [r4, #8]
 800bb70:	464a      	mov	r2, r9
 800bb72:	19a9      	adds	r1, r5, r6
 800bb74:	f00c fca9 	bl	80184ca <memcpy>
 800bb78:	e7b4      	b.n	800bae4 <ucdr_serialize_endian_uint16_t+0x5c>
 800bb7a:	bf00      	nop

0800bb7c <ucdr_deserialize_uint16_t>:
 800bb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb80:	460d      	mov	r5, r1
 800bb82:	2102      	movs	r1, #2
 800bb84:	4604      	mov	r4, r0
 800bb86:	f001 f995 	bl	800ceb4 <ucdr_buffer_alignment>
 800bb8a:	4601      	mov	r1, r0
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bb92:	f001 f9d3 	bl	800cf3c <ucdr_advance_buffer>
 800bb96:	2102      	movs	r1, #2
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f001 f92b 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800bb9e:	b1a8      	cbz	r0, 800bbcc <ucdr_deserialize_uint16_t+0x50>
 800bba0:	7d22      	ldrb	r2, [r4, #20]
 800bba2:	68a3      	ldr	r3, [r4, #8]
 800bba4:	2a01      	cmp	r2, #1
 800bba6:	d046      	beq.n	800bc36 <ucdr_deserialize_uint16_t+0xba>
 800bba8:	785b      	ldrb	r3, [r3, #1]
 800bbaa:	702b      	strb	r3, [r5, #0]
 800bbac:	68a3      	ldr	r3, [r4, #8]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	706b      	strb	r3, [r5, #1]
 800bbb2:	68a2      	ldr	r2, [r4, #8]
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	3202      	adds	r2, #2
 800bbb8:	3302      	adds	r3, #2
 800bbba:	2102      	movs	r1, #2
 800bbbc:	60a2      	str	r2, [r4, #8]
 800bbbe:	6123      	str	r3, [r4, #16]
 800bbc0:	7561      	strb	r1, [r4, #21]
 800bbc2:	7da0      	ldrb	r0, [r4, #22]
 800bbc4:	f080 0001 	eor.w	r0, r0, #1
 800bbc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbcc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bbd0:	42be      	cmp	r6, r7
 800bbd2:	d920      	bls.n	800bc16 <ucdr_deserialize_uint16_t+0x9a>
 800bbd4:	6923      	ldr	r3, [r4, #16]
 800bbd6:	60a6      	str	r6, [r4, #8]
 800bbd8:	1bf6      	subs	r6, r6, r7
 800bbda:	4433      	add	r3, r6
 800bbdc:	f1c6 0902 	rsb	r9, r6, #2
 800bbe0:	6123      	str	r3, [r4, #16]
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f001 f911 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800bbea:	b338      	cbz	r0, 800bc3c <ucdr_deserialize_uint16_t+0xc0>
 800bbec:	7d23      	ldrb	r3, [r4, #20]
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d034      	beq.n	800bc5c <ucdr_deserialize_uint16_t+0xe0>
 800bbf2:	787b      	ldrb	r3, [r7, #1]
 800bbf4:	702b      	strb	r3, [r5, #0]
 800bbf6:	783b      	ldrb	r3, [r7, #0]
 800bbf8:	706b      	strb	r3, [r5, #1]
 800bbfa:	6923      	ldr	r3, [r4, #16]
 800bbfc:	68a2      	ldr	r2, [r4, #8]
 800bbfe:	7da0      	ldrb	r0, [r4, #22]
 800bc00:	2102      	movs	r1, #2
 800bc02:	3302      	adds	r3, #2
 800bc04:	444a      	add	r2, r9
 800bc06:	1b9b      	subs	r3, r3, r6
 800bc08:	7561      	strb	r1, [r4, #21]
 800bc0a:	60a2      	str	r2, [r4, #8]
 800bc0c:	6123      	str	r3, [r4, #16]
 800bc0e:	f080 0001 	eor.w	r0, r0, #1
 800bc12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc16:	2102      	movs	r1, #2
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f001 f8f7 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d0cf      	beq.n	800bbc2 <ucdr_deserialize_uint16_t+0x46>
 800bc22:	7d23      	ldrb	r3, [r4, #20]
 800bc24:	68a2      	ldr	r2, [r4, #8]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d015      	beq.n	800bc56 <ucdr_deserialize_uint16_t+0xda>
 800bc2a:	7853      	ldrb	r3, [r2, #1]
 800bc2c:	702b      	strb	r3, [r5, #0]
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	706b      	strb	r3, [r5, #1]
 800bc34:	e7bd      	b.n	800bbb2 <ucdr_deserialize_uint16_t+0x36>
 800bc36:	881b      	ldrh	r3, [r3, #0]
 800bc38:	802b      	strh	r3, [r5, #0]
 800bc3a:	e7ba      	b.n	800bbb2 <ucdr_deserialize_uint16_t+0x36>
 800bc3c:	68a2      	ldr	r2, [r4, #8]
 800bc3e:	6923      	ldr	r3, [r4, #16]
 800bc40:	7da0      	ldrb	r0, [r4, #22]
 800bc42:	f884 8015 	strb.w	r8, [r4, #21]
 800bc46:	1b92      	subs	r2, r2, r6
 800bc48:	1b9b      	subs	r3, r3, r6
 800bc4a:	60a2      	str	r2, [r4, #8]
 800bc4c:	6123      	str	r3, [r4, #16]
 800bc4e:	f080 0001 	eor.w	r0, r0, #1
 800bc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc56:	8813      	ldrh	r3, [r2, #0]
 800bc58:	802b      	strh	r3, [r5, #0]
 800bc5a:	e7aa      	b.n	800bbb2 <ucdr_deserialize_uint16_t+0x36>
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	4632      	mov	r2, r6
 800bc60:	4628      	mov	r0, r5
 800bc62:	f00c fc32 	bl	80184ca <memcpy>
 800bc66:	68a1      	ldr	r1, [r4, #8]
 800bc68:	464a      	mov	r2, r9
 800bc6a:	19a8      	adds	r0, r5, r6
 800bc6c:	f00c fc2d 	bl	80184ca <memcpy>
 800bc70:	e7c3      	b.n	800bbfa <ucdr_deserialize_uint16_t+0x7e>
 800bc72:	bf00      	nop

0800bc74 <ucdr_deserialize_endian_uint16_t>:
 800bc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc78:	460e      	mov	r6, r1
 800bc7a:	2102      	movs	r1, #2
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	4615      	mov	r5, r2
 800bc80:	f001 f918 	bl	800ceb4 <ucdr_buffer_alignment>
 800bc84:	4601      	mov	r1, r0
 800bc86:	4620      	mov	r0, r4
 800bc88:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bc8c:	f001 f956 	bl	800cf3c <ucdr_advance_buffer>
 800bc90:	2102      	movs	r1, #2
 800bc92:	4620      	mov	r0, r4
 800bc94:	f001 f8ae 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800bc98:	bb60      	cbnz	r0, 800bcf4 <ucdr_deserialize_endian_uint16_t+0x80>
 800bc9a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800bc9e:	4547      	cmp	r7, r8
 800bca0:	d923      	bls.n	800bcea <ucdr_deserialize_endian_uint16_t+0x76>
 800bca2:	6923      	ldr	r3, [r4, #16]
 800bca4:	60a7      	str	r7, [r4, #8]
 800bca6:	eba7 0708 	sub.w	r7, r7, r8
 800bcaa:	443b      	add	r3, r7
 800bcac:	f1c7 0a02 	rsb	sl, r7, #2
 800bcb0:	6123      	str	r3, [r4, #16]
 800bcb2:	4651      	mov	r1, sl
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f001 f8a9 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	d032      	beq.n	800bd24 <ucdr_deserialize_endian_uint16_t+0xb0>
 800bcbe:	2e01      	cmp	r6, #1
 800bcc0:	d03d      	beq.n	800bd3e <ucdr_deserialize_endian_uint16_t+0xca>
 800bcc2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bcc6:	702b      	strb	r3, [r5, #0]
 800bcc8:	f898 3000 	ldrb.w	r3, [r8]
 800bccc:	706b      	strb	r3, [r5, #1]
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	68a2      	ldr	r2, [r4, #8]
 800bcd2:	7da0      	ldrb	r0, [r4, #22]
 800bcd4:	2102      	movs	r1, #2
 800bcd6:	3302      	adds	r3, #2
 800bcd8:	4452      	add	r2, sl
 800bcda:	1bdb      	subs	r3, r3, r7
 800bcdc:	7561      	strb	r1, [r4, #21]
 800bcde:	60a2      	str	r2, [r4, #8]
 800bce0:	6123      	str	r3, [r4, #16]
 800bce2:	f080 0001 	eor.w	r0, r0, #1
 800bce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcea:	2102      	movs	r1, #2
 800bcec:	4620      	mov	r0, r4
 800bcee:	f001 f88d 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800bcf2:	b178      	cbz	r0, 800bd14 <ucdr_deserialize_endian_uint16_t+0xa0>
 800bcf4:	2e01      	cmp	r6, #1
 800bcf6:	68a3      	ldr	r3, [r4, #8]
 800bcf8:	d011      	beq.n	800bd1e <ucdr_deserialize_endian_uint16_t+0xaa>
 800bcfa:	785b      	ldrb	r3, [r3, #1]
 800bcfc:	702b      	strb	r3, [r5, #0]
 800bcfe:	68a3      	ldr	r3, [r4, #8]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	706b      	strb	r3, [r5, #1]
 800bd04:	68a2      	ldr	r2, [r4, #8]
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	3202      	adds	r2, #2
 800bd0a:	3302      	adds	r3, #2
 800bd0c:	2102      	movs	r1, #2
 800bd0e:	60a2      	str	r2, [r4, #8]
 800bd10:	6123      	str	r3, [r4, #16]
 800bd12:	7561      	strb	r1, [r4, #21]
 800bd14:	7da0      	ldrb	r0, [r4, #22]
 800bd16:	f080 0001 	eor.w	r0, r0, #1
 800bd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd1e:	881b      	ldrh	r3, [r3, #0]
 800bd20:	802b      	strh	r3, [r5, #0]
 800bd22:	e7ef      	b.n	800bd04 <ucdr_deserialize_endian_uint16_t+0x90>
 800bd24:	68a2      	ldr	r2, [r4, #8]
 800bd26:	6923      	ldr	r3, [r4, #16]
 800bd28:	7da0      	ldrb	r0, [r4, #22]
 800bd2a:	f884 9015 	strb.w	r9, [r4, #21]
 800bd2e:	1bd2      	subs	r2, r2, r7
 800bd30:	1bdb      	subs	r3, r3, r7
 800bd32:	60a2      	str	r2, [r4, #8]
 800bd34:	6123      	str	r3, [r4, #16]
 800bd36:	f080 0001 	eor.w	r0, r0, #1
 800bd3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd3e:	4641      	mov	r1, r8
 800bd40:	463a      	mov	r2, r7
 800bd42:	4628      	mov	r0, r5
 800bd44:	f00c fbc1 	bl	80184ca <memcpy>
 800bd48:	68a1      	ldr	r1, [r4, #8]
 800bd4a:	4652      	mov	r2, sl
 800bd4c:	19e8      	adds	r0, r5, r7
 800bd4e:	f00c fbbc 	bl	80184ca <memcpy>
 800bd52:	e7bc      	b.n	800bcce <ucdr_deserialize_endian_uint16_t+0x5a>

0800bd54 <ucdr_serialize_uint32_t>:
 800bd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd58:	b082      	sub	sp, #8
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	9101      	str	r1, [sp, #4]
 800bd5e:	2104      	movs	r1, #4
 800bd60:	f001 f8a8 	bl	800ceb4 <ucdr_buffer_alignment>
 800bd64:	4601      	mov	r1, r0
 800bd66:	4620      	mov	r0, r4
 800bd68:	7d67      	ldrb	r7, [r4, #21]
 800bd6a:	f001 f8e7 	bl	800cf3c <ucdr_advance_buffer>
 800bd6e:	2104      	movs	r1, #4
 800bd70:	4620      	mov	r0, r4
 800bd72:	f001 f83f 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800bd76:	b300      	cbz	r0, 800bdba <ucdr_serialize_uint32_t+0x66>
 800bd78:	7d22      	ldrb	r2, [r4, #20]
 800bd7a:	68a3      	ldr	r3, [r4, #8]
 800bd7c:	2a01      	cmp	r2, #1
 800bd7e:	d05d      	beq.n	800be3c <ucdr_serialize_uint32_t+0xe8>
 800bd80:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd84:	701a      	strb	r2, [r3, #0]
 800bd86:	68a3      	ldr	r3, [r4, #8]
 800bd88:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd8c:	705a      	strb	r2, [r3, #1]
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd94:	709a      	strb	r2, [r3, #2]
 800bd96:	68a3      	ldr	r3, [r4, #8]
 800bd98:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd9c:	70da      	strb	r2, [r3, #3]
 800bd9e:	68a2      	ldr	r2, [r4, #8]
 800bda0:	6923      	ldr	r3, [r4, #16]
 800bda2:	3204      	adds	r2, #4
 800bda4:	3304      	adds	r3, #4
 800bda6:	2104      	movs	r1, #4
 800bda8:	60a2      	str	r2, [r4, #8]
 800bdaa:	6123      	str	r3, [r4, #16]
 800bdac:	7561      	strb	r1, [r4, #21]
 800bdae:	7da0      	ldrb	r0, [r4, #22]
 800bdb0:	f080 0001 	eor.w	r0, r0, #1
 800bdb4:	b002      	add	sp, #8
 800bdb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdba:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bdbe:	42ab      	cmp	r3, r5
 800bdc0:	d92e      	bls.n	800be20 <ucdr_serialize_uint32_t+0xcc>
 800bdc2:	1b5e      	subs	r6, r3, r5
 800bdc4:	60a3      	str	r3, [r4, #8]
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	f1c6 0804 	rsb	r8, r6, #4
 800bdcc:	4433      	add	r3, r6
 800bdce:	6123      	str	r3, [r4, #16]
 800bdd0:	4641      	mov	r1, r8
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f001 f81a 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800bdd8:	b398      	cbz	r0, 800be42 <ucdr_serialize_uint32_t+0xee>
 800bdda:	7d23      	ldrb	r3, [r4, #20]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d046      	beq.n	800be6e <ucdr_serialize_uint32_t+0x11a>
 800bde0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bde4:	702b      	strb	r3, [r5, #0]
 800bde6:	2e01      	cmp	r6, #1
 800bde8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bdec:	706b      	strb	r3, [r5, #1]
 800bdee:	d035      	beq.n	800be5c <ucdr_serialize_uint32_t+0x108>
 800bdf0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bdf4:	70ab      	strb	r3, [r5, #2]
 800bdf6:	2e02      	cmp	r6, #2
 800bdf8:	d034      	beq.n	800be64 <ucdr_serialize_uint32_t+0x110>
 800bdfa:	3503      	adds	r5, #3
 800bdfc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be00:	702b      	strb	r3, [r5, #0]
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	68a2      	ldr	r2, [r4, #8]
 800be06:	7da0      	ldrb	r0, [r4, #22]
 800be08:	3304      	adds	r3, #4
 800be0a:	4442      	add	r2, r8
 800be0c:	1b9b      	subs	r3, r3, r6
 800be0e:	2104      	movs	r1, #4
 800be10:	f080 0001 	eor.w	r0, r0, #1
 800be14:	60a2      	str	r2, [r4, #8]
 800be16:	6123      	str	r3, [r4, #16]
 800be18:	7561      	strb	r1, [r4, #21]
 800be1a:	b002      	add	sp, #8
 800be1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be20:	2104      	movs	r1, #4
 800be22:	4620      	mov	r0, r4
 800be24:	f000 fff2 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d0c0      	beq.n	800bdae <ucdr_serialize_uint32_t+0x5a>
 800be2c:	7d23      	ldrb	r3, [r4, #20]
 800be2e:	68a2      	ldr	r2, [r4, #8]
 800be30:	2b01      	cmp	r3, #1
 800be32:	d019      	beq.n	800be68 <ucdr_serialize_uint32_t+0x114>
 800be34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be38:	7013      	strb	r3, [r2, #0]
 800be3a:	e7a4      	b.n	800bd86 <ucdr_serialize_uint32_t+0x32>
 800be3c:	9a01      	ldr	r2, [sp, #4]
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	e7ad      	b.n	800bd9e <ucdr_serialize_uint32_t+0x4a>
 800be42:	68a2      	ldr	r2, [r4, #8]
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	7da0      	ldrb	r0, [r4, #22]
 800be48:	7567      	strb	r7, [r4, #21]
 800be4a:	1b92      	subs	r2, r2, r6
 800be4c:	1b9b      	subs	r3, r3, r6
 800be4e:	f080 0001 	eor.w	r0, r0, #1
 800be52:	60a2      	str	r2, [r4, #8]
 800be54:	6123      	str	r3, [r4, #16]
 800be56:	b002      	add	sp, #8
 800be58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be5c:	68a3      	ldr	r3, [r4, #8]
 800be5e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800be62:	701a      	strb	r2, [r3, #0]
 800be64:	68a5      	ldr	r5, [r4, #8]
 800be66:	e7c9      	b.n	800bdfc <ucdr_serialize_uint32_t+0xa8>
 800be68:	9b01      	ldr	r3, [sp, #4]
 800be6a:	6013      	str	r3, [r2, #0]
 800be6c:	e797      	b.n	800bd9e <ucdr_serialize_uint32_t+0x4a>
 800be6e:	4628      	mov	r0, r5
 800be70:	ad01      	add	r5, sp, #4
 800be72:	4632      	mov	r2, r6
 800be74:	4629      	mov	r1, r5
 800be76:	f00c fb28 	bl	80184ca <memcpy>
 800be7a:	68a0      	ldr	r0, [r4, #8]
 800be7c:	4642      	mov	r2, r8
 800be7e:	19a9      	adds	r1, r5, r6
 800be80:	f00c fb23 	bl	80184ca <memcpy>
 800be84:	e7bd      	b.n	800be02 <ucdr_serialize_uint32_t+0xae>
 800be86:	bf00      	nop

0800be88 <ucdr_serialize_endian_uint32_t>:
 800be88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be8c:	b083      	sub	sp, #12
 800be8e:	460d      	mov	r5, r1
 800be90:	2104      	movs	r1, #4
 800be92:	4604      	mov	r4, r0
 800be94:	9201      	str	r2, [sp, #4]
 800be96:	f001 f80d 	bl	800ceb4 <ucdr_buffer_alignment>
 800be9a:	4601      	mov	r1, r0
 800be9c:	4620      	mov	r0, r4
 800be9e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bea2:	f001 f84b 	bl	800cf3c <ucdr_advance_buffer>
 800bea6:	2104      	movs	r1, #4
 800bea8:	4620      	mov	r0, r4
 800beaa:	f000 ffa3 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d137      	bne.n	800bf22 <ucdr_serialize_endian_uint32_t+0x9a>
 800beb2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800beb6:	42b7      	cmp	r7, r6
 800beb8:	d92e      	bls.n	800bf18 <ucdr_serialize_endian_uint32_t+0x90>
 800beba:	6923      	ldr	r3, [r4, #16]
 800bebc:	60a7      	str	r7, [r4, #8]
 800bebe:	1bbf      	subs	r7, r7, r6
 800bec0:	443b      	add	r3, r7
 800bec2:	f1c7 0904 	rsb	r9, r7, #4
 800bec6:	6123      	str	r3, [r4, #16]
 800bec8:	4649      	mov	r1, r9
 800beca:	4620      	mov	r0, r4
 800becc:	f000 ff9e 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d049      	beq.n	800bf68 <ucdr_serialize_endian_uint32_t+0xe0>
 800bed4:	2d01      	cmp	r5, #1
 800bed6:	d05b      	beq.n	800bf90 <ucdr_serialize_endian_uint32_t+0x108>
 800bed8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bedc:	7033      	strb	r3, [r6, #0]
 800bede:	2f01      	cmp	r7, #1
 800bee0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bee4:	7073      	strb	r3, [r6, #1]
 800bee6:	d04d      	beq.n	800bf84 <ucdr_serialize_endian_uint32_t+0xfc>
 800bee8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800beec:	70b3      	strb	r3, [r6, #2]
 800beee:	2f02      	cmp	r7, #2
 800bef0:	d04c      	beq.n	800bf8c <ucdr_serialize_endian_uint32_t+0x104>
 800bef2:	3603      	adds	r6, #3
 800bef4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bef8:	7033      	strb	r3, [r6, #0]
 800befa:	6923      	ldr	r3, [r4, #16]
 800befc:	68a2      	ldr	r2, [r4, #8]
 800befe:	7da0      	ldrb	r0, [r4, #22]
 800bf00:	3304      	adds	r3, #4
 800bf02:	444a      	add	r2, r9
 800bf04:	1bdb      	subs	r3, r3, r7
 800bf06:	2104      	movs	r1, #4
 800bf08:	f080 0001 	eor.w	r0, r0, #1
 800bf0c:	60a2      	str	r2, [r4, #8]
 800bf0e:	6123      	str	r3, [r4, #16]
 800bf10:	7561      	strb	r1, [r4, #21]
 800bf12:	b003      	add	sp, #12
 800bf14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf18:	2104      	movs	r1, #4
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f000 ff76 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800bf20:	b1c8      	cbz	r0, 800bf56 <ucdr_serialize_endian_uint32_t+0xce>
 800bf22:	2d01      	cmp	r5, #1
 800bf24:	68a3      	ldr	r3, [r4, #8]
 800bf26:	d01c      	beq.n	800bf62 <ucdr_serialize_endian_uint32_t+0xda>
 800bf28:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bf2c:	701a      	strb	r2, [r3, #0]
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf34:	705a      	strb	r2, [r3, #1]
 800bf36:	68a3      	ldr	r3, [r4, #8]
 800bf38:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf3c:	709a      	strb	r2, [r3, #2]
 800bf3e:	68a3      	ldr	r3, [r4, #8]
 800bf40:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf44:	70da      	strb	r2, [r3, #3]
 800bf46:	68a2      	ldr	r2, [r4, #8]
 800bf48:	6923      	ldr	r3, [r4, #16]
 800bf4a:	3204      	adds	r2, #4
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	2104      	movs	r1, #4
 800bf50:	60a2      	str	r2, [r4, #8]
 800bf52:	6123      	str	r3, [r4, #16]
 800bf54:	7561      	strb	r1, [r4, #21]
 800bf56:	7da0      	ldrb	r0, [r4, #22]
 800bf58:	f080 0001 	eor.w	r0, r0, #1
 800bf5c:	b003      	add	sp, #12
 800bf5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf62:	9a01      	ldr	r2, [sp, #4]
 800bf64:	601a      	str	r2, [r3, #0]
 800bf66:	e7ee      	b.n	800bf46 <ucdr_serialize_endian_uint32_t+0xbe>
 800bf68:	68a2      	ldr	r2, [r4, #8]
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	7da0      	ldrb	r0, [r4, #22]
 800bf6e:	f884 8015 	strb.w	r8, [r4, #21]
 800bf72:	1bd2      	subs	r2, r2, r7
 800bf74:	1bdb      	subs	r3, r3, r7
 800bf76:	f080 0001 	eor.w	r0, r0, #1
 800bf7a:	60a2      	str	r2, [r4, #8]
 800bf7c:	6123      	str	r3, [r4, #16]
 800bf7e:	b003      	add	sp, #12
 800bf80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf84:	68a3      	ldr	r3, [r4, #8]
 800bf86:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf8a:	701a      	strb	r2, [r3, #0]
 800bf8c:	68a6      	ldr	r6, [r4, #8]
 800bf8e:	e7b1      	b.n	800bef4 <ucdr_serialize_endian_uint32_t+0x6c>
 800bf90:	ad01      	add	r5, sp, #4
 800bf92:	463a      	mov	r2, r7
 800bf94:	4629      	mov	r1, r5
 800bf96:	4630      	mov	r0, r6
 800bf98:	f00c fa97 	bl	80184ca <memcpy>
 800bf9c:	68a0      	ldr	r0, [r4, #8]
 800bf9e:	464a      	mov	r2, r9
 800bfa0:	19e9      	adds	r1, r5, r7
 800bfa2:	f00c fa92 	bl	80184ca <memcpy>
 800bfa6:	e7a8      	b.n	800befa <ucdr_serialize_endian_uint32_t+0x72>

0800bfa8 <ucdr_deserialize_uint32_t>:
 800bfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfac:	460d      	mov	r5, r1
 800bfae:	2104      	movs	r1, #4
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	f000 ff7f 	bl	800ceb4 <ucdr_buffer_alignment>
 800bfb6:	4601      	mov	r1, r0
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bfbe:	f000 ffbd 	bl	800cf3c <ucdr_advance_buffer>
 800bfc2:	2104      	movs	r1, #4
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f000 ff15 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800bfca:	b1d8      	cbz	r0, 800c004 <ucdr_deserialize_uint32_t+0x5c>
 800bfcc:	7d22      	ldrb	r2, [r4, #20]
 800bfce:	68a3      	ldr	r3, [r4, #8]
 800bfd0:	2a01      	cmp	r2, #1
 800bfd2:	d052      	beq.n	800c07a <ucdr_deserialize_uint32_t+0xd2>
 800bfd4:	78db      	ldrb	r3, [r3, #3]
 800bfd6:	702b      	strb	r3, [r5, #0]
 800bfd8:	68a3      	ldr	r3, [r4, #8]
 800bfda:	789b      	ldrb	r3, [r3, #2]
 800bfdc:	706b      	strb	r3, [r5, #1]
 800bfde:	68a3      	ldr	r3, [r4, #8]
 800bfe0:	785b      	ldrb	r3, [r3, #1]
 800bfe2:	70ab      	strb	r3, [r5, #2]
 800bfe4:	68a3      	ldr	r3, [r4, #8]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	70eb      	strb	r3, [r5, #3]
 800bfea:	68a2      	ldr	r2, [r4, #8]
 800bfec:	6923      	ldr	r3, [r4, #16]
 800bfee:	3204      	adds	r2, #4
 800bff0:	3304      	adds	r3, #4
 800bff2:	2104      	movs	r1, #4
 800bff4:	60a2      	str	r2, [r4, #8]
 800bff6:	6123      	str	r3, [r4, #16]
 800bff8:	7561      	strb	r1, [r4, #21]
 800bffa:	7da0      	ldrb	r0, [r4, #22]
 800bffc:	f080 0001 	eor.w	r0, r0, #1
 800c000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c004:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c008:	42b7      	cmp	r7, r6
 800c00a:	d92a      	bls.n	800c062 <ucdr_deserialize_uint32_t+0xba>
 800c00c:	6923      	ldr	r3, [r4, #16]
 800c00e:	60a7      	str	r7, [r4, #8]
 800c010:	1bbf      	subs	r7, r7, r6
 800c012:	443b      	add	r3, r7
 800c014:	f1c7 0904 	rsb	r9, r7, #4
 800c018:	6123      	str	r3, [r4, #16]
 800c01a:	4649      	mov	r1, r9
 800c01c:	4620      	mov	r0, r4
 800c01e:	f000 fef5 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c022:	b368      	cbz	r0, 800c080 <ucdr_deserialize_uint32_t+0xd8>
 800c024:	7d23      	ldrb	r3, [r4, #20]
 800c026:	2b01      	cmp	r3, #1
 800c028:	d040      	beq.n	800c0ac <ucdr_deserialize_uint32_t+0x104>
 800c02a:	78f3      	ldrb	r3, [r6, #3]
 800c02c:	702b      	strb	r3, [r5, #0]
 800c02e:	78b3      	ldrb	r3, [r6, #2]
 800c030:	706b      	strb	r3, [r5, #1]
 800c032:	2f01      	cmp	r7, #1
 800c034:	d031      	beq.n	800c09a <ucdr_deserialize_uint32_t+0xf2>
 800c036:	7873      	ldrb	r3, [r6, #1]
 800c038:	70ab      	strb	r3, [r5, #2]
 800c03a:	2f02      	cmp	r7, #2
 800c03c:	f105 0503 	add.w	r5, r5, #3
 800c040:	d02f      	beq.n	800c0a2 <ucdr_deserialize_uint32_t+0xfa>
 800c042:	7833      	ldrb	r3, [r6, #0]
 800c044:	702b      	strb	r3, [r5, #0]
 800c046:	6923      	ldr	r3, [r4, #16]
 800c048:	68a2      	ldr	r2, [r4, #8]
 800c04a:	7da0      	ldrb	r0, [r4, #22]
 800c04c:	2104      	movs	r1, #4
 800c04e:	3304      	adds	r3, #4
 800c050:	444a      	add	r2, r9
 800c052:	1bdb      	subs	r3, r3, r7
 800c054:	7561      	strb	r1, [r4, #21]
 800c056:	60a2      	str	r2, [r4, #8]
 800c058:	6123      	str	r3, [r4, #16]
 800c05a:	f080 0001 	eor.w	r0, r0, #1
 800c05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c062:	2104      	movs	r1, #4
 800c064:	4620      	mov	r0, r4
 800c066:	f000 fed1 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d0c5      	beq.n	800bffa <ucdr_deserialize_uint32_t+0x52>
 800c06e:	7d23      	ldrb	r3, [r4, #20]
 800c070:	68a2      	ldr	r2, [r4, #8]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d017      	beq.n	800c0a6 <ucdr_deserialize_uint32_t+0xfe>
 800c076:	78d3      	ldrb	r3, [r2, #3]
 800c078:	e7ad      	b.n	800bfd6 <ucdr_deserialize_uint32_t+0x2e>
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	602b      	str	r3, [r5, #0]
 800c07e:	e7b4      	b.n	800bfea <ucdr_deserialize_uint32_t+0x42>
 800c080:	68a2      	ldr	r2, [r4, #8]
 800c082:	6923      	ldr	r3, [r4, #16]
 800c084:	7da0      	ldrb	r0, [r4, #22]
 800c086:	f884 8015 	strb.w	r8, [r4, #21]
 800c08a:	1bd2      	subs	r2, r2, r7
 800c08c:	1bdb      	subs	r3, r3, r7
 800c08e:	60a2      	str	r2, [r4, #8]
 800c090:	6123      	str	r3, [r4, #16]
 800c092:	f080 0001 	eor.w	r0, r0, #1
 800c096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c09a:	68a3      	ldr	r3, [r4, #8]
 800c09c:	785b      	ldrb	r3, [r3, #1]
 800c09e:	70ab      	strb	r3, [r5, #2]
 800c0a0:	3503      	adds	r5, #3
 800c0a2:	68a6      	ldr	r6, [r4, #8]
 800c0a4:	e7cd      	b.n	800c042 <ucdr_deserialize_uint32_t+0x9a>
 800c0a6:	6813      	ldr	r3, [r2, #0]
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	e79e      	b.n	800bfea <ucdr_deserialize_uint32_t+0x42>
 800c0ac:	4631      	mov	r1, r6
 800c0ae:	463a      	mov	r2, r7
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	f00c fa0a 	bl	80184ca <memcpy>
 800c0b6:	68a1      	ldr	r1, [r4, #8]
 800c0b8:	464a      	mov	r2, r9
 800c0ba:	19e8      	adds	r0, r5, r7
 800c0bc:	f00c fa05 	bl	80184ca <memcpy>
 800c0c0:	e7c1      	b.n	800c046 <ucdr_deserialize_uint32_t+0x9e>
 800c0c2:	bf00      	nop

0800c0c4 <ucdr_deserialize_endian_uint32_t>:
 800c0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0c8:	460e      	mov	r6, r1
 800c0ca:	2104      	movs	r1, #4
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	4615      	mov	r5, r2
 800c0d0:	f000 fef0 	bl	800ceb4 <ucdr_buffer_alignment>
 800c0d4:	4601      	mov	r1, r0
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c0dc:	f000 ff2e 	bl	800cf3c <ucdr_advance_buffer>
 800c0e0:	2104      	movs	r1, #4
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f000 fe86 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d137      	bne.n	800c15c <ucdr_deserialize_endian_uint32_t+0x98>
 800c0ec:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c0f0:	42bb      	cmp	r3, r7
 800c0f2:	d92e      	bls.n	800c152 <ucdr_deserialize_endian_uint32_t+0x8e>
 800c0f4:	eba3 0807 	sub.w	r8, r3, r7
 800c0f8:	60a3      	str	r3, [r4, #8]
 800c0fa:	6923      	ldr	r3, [r4, #16]
 800c0fc:	f1c8 0a04 	rsb	sl, r8, #4
 800c100:	4443      	add	r3, r8
 800c102:	6123      	str	r3, [r4, #16]
 800c104:	4651      	mov	r1, sl
 800c106:	4620      	mov	r0, r4
 800c108:	f000 fe80 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d043      	beq.n	800c198 <ucdr_deserialize_endian_uint32_t+0xd4>
 800c110:	2e01      	cmp	r6, #1
 800c112:	d056      	beq.n	800c1c2 <ucdr_deserialize_endian_uint32_t+0xfe>
 800c114:	78fb      	ldrb	r3, [r7, #3]
 800c116:	702b      	strb	r3, [r5, #0]
 800c118:	78bb      	ldrb	r3, [r7, #2]
 800c11a:	706b      	strb	r3, [r5, #1]
 800c11c:	f1b8 0f01 	cmp.w	r8, #1
 800c120:	d049      	beq.n	800c1b6 <ucdr_deserialize_endian_uint32_t+0xf2>
 800c122:	787b      	ldrb	r3, [r7, #1]
 800c124:	70ab      	strb	r3, [r5, #2]
 800c126:	f1b8 0f02 	cmp.w	r8, #2
 800c12a:	f105 0503 	add.w	r5, r5, #3
 800c12e:	d046      	beq.n	800c1be <ucdr_deserialize_endian_uint32_t+0xfa>
 800c130:	783b      	ldrb	r3, [r7, #0]
 800c132:	702b      	strb	r3, [r5, #0]
 800c134:	6923      	ldr	r3, [r4, #16]
 800c136:	68a2      	ldr	r2, [r4, #8]
 800c138:	7da0      	ldrb	r0, [r4, #22]
 800c13a:	2104      	movs	r1, #4
 800c13c:	3304      	adds	r3, #4
 800c13e:	4452      	add	r2, sl
 800c140:	eba3 0308 	sub.w	r3, r3, r8
 800c144:	7561      	strb	r1, [r4, #21]
 800c146:	60a2      	str	r2, [r4, #8]
 800c148:	6123      	str	r3, [r4, #16]
 800c14a:	f080 0001 	eor.w	r0, r0, #1
 800c14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c152:	2104      	movs	r1, #4
 800c154:	4620      	mov	r0, r4
 800c156:	f000 fe59 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c15a:	b1a8      	cbz	r0, 800c188 <ucdr_deserialize_endian_uint32_t+0xc4>
 800c15c:	2e01      	cmp	r6, #1
 800c15e:	68a3      	ldr	r3, [r4, #8]
 800c160:	d017      	beq.n	800c192 <ucdr_deserialize_endian_uint32_t+0xce>
 800c162:	78db      	ldrb	r3, [r3, #3]
 800c164:	702b      	strb	r3, [r5, #0]
 800c166:	68a3      	ldr	r3, [r4, #8]
 800c168:	789b      	ldrb	r3, [r3, #2]
 800c16a:	706b      	strb	r3, [r5, #1]
 800c16c:	68a3      	ldr	r3, [r4, #8]
 800c16e:	785b      	ldrb	r3, [r3, #1]
 800c170:	70ab      	strb	r3, [r5, #2]
 800c172:	68a3      	ldr	r3, [r4, #8]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	70eb      	strb	r3, [r5, #3]
 800c178:	68a2      	ldr	r2, [r4, #8]
 800c17a:	6923      	ldr	r3, [r4, #16]
 800c17c:	3204      	adds	r2, #4
 800c17e:	3304      	adds	r3, #4
 800c180:	2104      	movs	r1, #4
 800c182:	60a2      	str	r2, [r4, #8]
 800c184:	6123      	str	r3, [r4, #16]
 800c186:	7561      	strb	r1, [r4, #21]
 800c188:	7da0      	ldrb	r0, [r4, #22]
 800c18a:	f080 0001 	eor.w	r0, r0, #1
 800c18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	602b      	str	r3, [r5, #0]
 800c196:	e7ef      	b.n	800c178 <ucdr_deserialize_endian_uint32_t+0xb4>
 800c198:	68a2      	ldr	r2, [r4, #8]
 800c19a:	6923      	ldr	r3, [r4, #16]
 800c19c:	7da0      	ldrb	r0, [r4, #22]
 800c19e:	f884 9015 	strb.w	r9, [r4, #21]
 800c1a2:	eba2 0208 	sub.w	r2, r2, r8
 800c1a6:	eba3 0308 	sub.w	r3, r3, r8
 800c1aa:	60a2      	str	r2, [r4, #8]
 800c1ac:	6123      	str	r3, [r4, #16]
 800c1ae:	f080 0001 	eor.w	r0, r0, #1
 800c1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b6:	68a3      	ldr	r3, [r4, #8]
 800c1b8:	785b      	ldrb	r3, [r3, #1]
 800c1ba:	70ab      	strb	r3, [r5, #2]
 800c1bc:	3503      	adds	r5, #3
 800c1be:	68a7      	ldr	r7, [r4, #8]
 800c1c0:	e7b6      	b.n	800c130 <ucdr_deserialize_endian_uint32_t+0x6c>
 800c1c2:	4639      	mov	r1, r7
 800c1c4:	4642      	mov	r2, r8
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	f00c f97f 	bl	80184ca <memcpy>
 800c1cc:	68a1      	ldr	r1, [r4, #8]
 800c1ce:	4652      	mov	r2, sl
 800c1d0:	eb05 0008 	add.w	r0, r5, r8
 800c1d4:	f00c f979 	bl	80184ca <memcpy>
 800c1d8:	e7ac      	b.n	800c134 <ucdr_deserialize_endian_uint32_t+0x70>
 800c1da:	bf00      	nop

0800c1dc <ucdr_serialize_uint64_t>:
 800c1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e0:	2108      	movs	r1, #8
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	e9cd 2300 	strd	r2, r3, [sp]
 800c1ea:	f000 fe63 	bl	800ceb4 <ucdr_buffer_alignment>
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	7d67      	ldrb	r7, [r4, #21]
 800c1f4:	f000 fea2 	bl	800cf3c <ucdr_advance_buffer>
 800c1f8:	2108      	movs	r1, #8
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 fdfa 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800c200:	2800      	cmp	r0, #0
 800c202:	d14d      	bne.n	800c2a0 <ucdr_serialize_uint64_t+0xc4>
 800c204:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c208:	42ab      	cmp	r3, r5
 800c20a:	d944      	bls.n	800c296 <ucdr_serialize_uint64_t+0xba>
 800c20c:	1b5e      	subs	r6, r3, r5
 800c20e:	60a3      	str	r3, [r4, #8]
 800c210:	6923      	ldr	r3, [r4, #16]
 800c212:	f1c6 0808 	rsb	r8, r6, #8
 800c216:	4433      	add	r3, r6
 800c218:	6123      	str	r3, [r4, #16]
 800c21a:	4641      	mov	r1, r8
 800c21c:	4620      	mov	r0, r4
 800c21e:	f000 fdf5 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c222:	2800      	cmp	r0, #0
 800c224:	d072      	beq.n	800c30c <ucdr_serialize_uint64_t+0x130>
 800c226:	7d23      	ldrb	r3, [r4, #20]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	f000 8092 	beq.w	800c352 <ucdr_serialize_uint64_t+0x176>
 800c22e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c232:	702b      	strb	r3, [r5, #0]
 800c234:	2e01      	cmp	r6, #1
 800c236:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c23a:	706b      	strb	r3, [r5, #1]
 800c23c:	d073      	beq.n	800c326 <ucdr_serialize_uint64_t+0x14a>
 800c23e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c242:	70ab      	strb	r3, [r5, #2]
 800c244:	2e02      	cmp	r6, #2
 800c246:	d072      	beq.n	800c32e <ucdr_serialize_uint64_t+0x152>
 800c248:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c24c:	70eb      	strb	r3, [r5, #3]
 800c24e:	2e03      	cmp	r6, #3
 800c250:	d071      	beq.n	800c336 <ucdr_serialize_uint64_t+0x15a>
 800c252:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c256:	712b      	strb	r3, [r5, #4]
 800c258:	2e04      	cmp	r6, #4
 800c25a:	d070      	beq.n	800c33e <ucdr_serialize_uint64_t+0x162>
 800c25c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c260:	716b      	strb	r3, [r5, #5]
 800c262:	2e05      	cmp	r6, #5
 800c264:	d06f      	beq.n	800c346 <ucdr_serialize_uint64_t+0x16a>
 800c266:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c26a:	71ab      	strb	r3, [r5, #6]
 800c26c:	2e06      	cmp	r6, #6
 800c26e:	d06e      	beq.n	800c34e <ucdr_serialize_uint64_t+0x172>
 800c270:	3507      	adds	r5, #7
 800c272:	f89d 3000 	ldrb.w	r3, [sp]
 800c276:	702b      	strb	r3, [r5, #0]
 800c278:	6923      	ldr	r3, [r4, #16]
 800c27a:	68a2      	ldr	r2, [r4, #8]
 800c27c:	7da0      	ldrb	r0, [r4, #22]
 800c27e:	3308      	adds	r3, #8
 800c280:	4442      	add	r2, r8
 800c282:	1b9b      	subs	r3, r3, r6
 800c284:	2108      	movs	r1, #8
 800c286:	f080 0001 	eor.w	r0, r0, #1
 800c28a:	60a2      	str	r2, [r4, #8]
 800c28c:	6123      	str	r3, [r4, #16]
 800c28e:	7561      	strb	r1, [r4, #21]
 800c290:	b002      	add	sp, #8
 800c292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c296:	2108      	movs	r1, #8
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 fdb7 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c29e:	b350      	cbz	r0, 800c2f6 <ucdr_serialize_uint64_t+0x11a>
 800c2a0:	7d22      	ldrb	r2, [r4, #20]
 800c2a2:	68a3      	ldr	r3, [r4, #8]
 800c2a4:	2a01      	cmp	r2, #1
 800c2a6:	d02c      	beq.n	800c302 <ucdr_serialize_uint64_t+0x126>
 800c2a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c2ac:	701a      	strb	r2, [r3, #0]
 800c2ae:	68a3      	ldr	r3, [r4, #8]
 800c2b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2b4:	705a      	strb	r2, [r3, #1]
 800c2b6:	68a3      	ldr	r3, [r4, #8]
 800c2b8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2bc:	709a      	strb	r2, [r3, #2]
 800c2be:	68a3      	ldr	r3, [r4, #8]
 800c2c0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2c4:	70da      	strb	r2, [r3, #3]
 800c2c6:	68a3      	ldr	r3, [r4, #8]
 800c2c8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c2cc:	711a      	strb	r2, [r3, #4]
 800c2ce:	68a3      	ldr	r3, [r4, #8]
 800c2d0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c2d4:	715a      	strb	r2, [r3, #5]
 800c2d6:	68a3      	ldr	r3, [r4, #8]
 800c2d8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c2dc:	719a      	strb	r2, [r3, #6]
 800c2de:	68a3      	ldr	r3, [r4, #8]
 800c2e0:	f89d 2000 	ldrb.w	r2, [sp]
 800c2e4:	71da      	strb	r2, [r3, #7]
 800c2e6:	68a2      	ldr	r2, [r4, #8]
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	3208      	adds	r2, #8
 800c2ec:	3308      	adds	r3, #8
 800c2ee:	2108      	movs	r1, #8
 800c2f0:	60a2      	str	r2, [r4, #8]
 800c2f2:	6123      	str	r3, [r4, #16]
 800c2f4:	7561      	strb	r1, [r4, #21]
 800c2f6:	7da0      	ldrb	r0, [r4, #22]
 800c2f8:	f080 0001 	eor.w	r0, r0, #1
 800c2fc:	b002      	add	sp, #8
 800c2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c302:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c306:	6019      	str	r1, [r3, #0]
 800c308:	605a      	str	r2, [r3, #4]
 800c30a:	e7ec      	b.n	800c2e6 <ucdr_serialize_uint64_t+0x10a>
 800c30c:	68a2      	ldr	r2, [r4, #8]
 800c30e:	6923      	ldr	r3, [r4, #16]
 800c310:	7da0      	ldrb	r0, [r4, #22]
 800c312:	7567      	strb	r7, [r4, #21]
 800c314:	1b92      	subs	r2, r2, r6
 800c316:	1b9b      	subs	r3, r3, r6
 800c318:	f080 0001 	eor.w	r0, r0, #1
 800c31c:	60a2      	str	r2, [r4, #8]
 800c31e:	6123      	str	r3, [r4, #16]
 800c320:	b002      	add	sp, #8
 800c322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c326:	68a3      	ldr	r3, [r4, #8]
 800c328:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c32c:	701a      	strb	r2, [r3, #0]
 800c32e:	68a3      	ldr	r3, [r4, #8]
 800c330:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c334:	701a      	strb	r2, [r3, #0]
 800c336:	68a3      	ldr	r3, [r4, #8]
 800c338:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c33c:	701a      	strb	r2, [r3, #0]
 800c33e:	68a3      	ldr	r3, [r4, #8]
 800c340:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c344:	701a      	strb	r2, [r3, #0]
 800c346:	68a3      	ldr	r3, [r4, #8]
 800c348:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c34c:	701a      	strb	r2, [r3, #0]
 800c34e:	68a5      	ldr	r5, [r4, #8]
 800c350:	e78f      	b.n	800c272 <ucdr_serialize_uint64_t+0x96>
 800c352:	4628      	mov	r0, r5
 800c354:	466d      	mov	r5, sp
 800c356:	4632      	mov	r2, r6
 800c358:	4629      	mov	r1, r5
 800c35a:	f00c f8b6 	bl	80184ca <memcpy>
 800c35e:	68a0      	ldr	r0, [r4, #8]
 800c360:	4642      	mov	r2, r8
 800c362:	19a9      	adds	r1, r5, r6
 800c364:	f00c f8b1 	bl	80184ca <memcpy>
 800c368:	e786      	b.n	800c278 <ucdr_serialize_uint64_t+0x9c>
 800c36a:	bf00      	nop

0800c36c <ucdr_serialize_int16_t>:
 800c36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c370:	b082      	sub	sp, #8
 800c372:	460b      	mov	r3, r1
 800c374:	2102      	movs	r1, #2
 800c376:	4604      	mov	r4, r0
 800c378:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c37c:	f000 fd9a 	bl	800ceb4 <ucdr_buffer_alignment>
 800c380:	4601      	mov	r1, r0
 800c382:	4620      	mov	r0, r4
 800c384:	7d67      	ldrb	r7, [r4, #21]
 800c386:	f000 fdd9 	bl	800cf3c <ucdr_advance_buffer>
 800c38a:	2102      	movs	r1, #2
 800c38c:	4620      	mov	r0, r4
 800c38e:	f000 fd31 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800c392:	b1c0      	cbz	r0, 800c3c6 <ucdr_serialize_int16_t+0x5a>
 800c394:	7d22      	ldrb	r2, [r4, #20]
 800c396:	68a3      	ldr	r3, [r4, #8]
 800c398:	2a01      	cmp	r2, #1
 800c39a:	d04e      	beq.n	800c43a <ucdr_serialize_int16_t+0xce>
 800c39c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c3a0:	701a      	strb	r2, [r3, #0]
 800c3a2:	68a3      	ldr	r3, [r4, #8]
 800c3a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c3a8:	705a      	strb	r2, [r3, #1]
 800c3aa:	68a2      	ldr	r2, [r4, #8]
 800c3ac:	6923      	ldr	r3, [r4, #16]
 800c3ae:	3202      	adds	r2, #2
 800c3b0:	3302      	adds	r3, #2
 800c3b2:	2102      	movs	r1, #2
 800c3b4:	60a2      	str	r2, [r4, #8]
 800c3b6:	6123      	str	r3, [r4, #16]
 800c3b8:	7561      	strb	r1, [r4, #21]
 800c3ba:	7da0      	ldrb	r0, [r4, #22]
 800c3bc:	f080 0001 	eor.w	r0, r0, #1
 800c3c0:	b002      	add	sp, #8
 800c3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c3ca:	42ab      	cmp	r3, r5
 800c3cc:	d923      	bls.n	800c416 <ucdr_serialize_int16_t+0xaa>
 800c3ce:	1b5e      	subs	r6, r3, r5
 800c3d0:	60a3      	str	r3, [r4, #8]
 800c3d2:	6923      	ldr	r3, [r4, #16]
 800c3d4:	f1c6 0802 	rsb	r8, r6, #2
 800c3d8:	4433      	add	r3, r6
 800c3da:	6123      	str	r3, [r4, #16]
 800c3dc:	4641      	mov	r1, r8
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f000 fd14 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c3e4:	b368      	cbz	r0, 800c442 <ucdr_serialize_int16_t+0xd6>
 800c3e6:	7d23      	ldrb	r3, [r4, #20]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d03b      	beq.n	800c464 <ucdr_serialize_int16_t+0xf8>
 800c3ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c3f0:	702b      	strb	r3, [r5, #0]
 800c3f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c3f6:	706b      	strb	r3, [r5, #1]
 800c3f8:	6923      	ldr	r3, [r4, #16]
 800c3fa:	68a2      	ldr	r2, [r4, #8]
 800c3fc:	7da0      	ldrb	r0, [r4, #22]
 800c3fe:	3302      	adds	r3, #2
 800c400:	4442      	add	r2, r8
 800c402:	1b9b      	subs	r3, r3, r6
 800c404:	2102      	movs	r1, #2
 800c406:	f080 0001 	eor.w	r0, r0, #1
 800c40a:	60a2      	str	r2, [r4, #8]
 800c40c:	6123      	str	r3, [r4, #16]
 800c40e:	7561      	strb	r1, [r4, #21]
 800c410:	b002      	add	sp, #8
 800c412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c416:	2102      	movs	r1, #2
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 fcf7 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c41e:	2800      	cmp	r0, #0
 800c420:	d0cb      	beq.n	800c3ba <ucdr_serialize_int16_t+0x4e>
 800c422:	7d23      	ldrb	r3, [r4, #20]
 800c424:	68a2      	ldr	r2, [r4, #8]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d018      	beq.n	800c45c <ucdr_serialize_int16_t+0xf0>
 800c42a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c42e:	7013      	strb	r3, [r2, #0]
 800c430:	68a3      	ldr	r3, [r4, #8]
 800c432:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c436:	705a      	strb	r2, [r3, #1]
 800c438:	e7b7      	b.n	800c3aa <ucdr_serialize_int16_t+0x3e>
 800c43a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c43e:	801a      	strh	r2, [r3, #0]
 800c440:	e7b3      	b.n	800c3aa <ucdr_serialize_int16_t+0x3e>
 800c442:	68a2      	ldr	r2, [r4, #8]
 800c444:	6923      	ldr	r3, [r4, #16]
 800c446:	7da0      	ldrb	r0, [r4, #22]
 800c448:	7567      	strb	r7, [r4, #21]
 800c44a:	1b92      	subs	r2, r2, r6
 800c44c:	1b9b      	subs	r3, r3, r6
 800c44e:	f080 0001 	eor.w	r0, r0, #1
 800c452:	60a2      	str	r2, [r4, #8]
 800c454:	6123      	str	r3, [r4, #16]
 800c456:	b002      	add	sp, #8
 800c458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c45c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800c460:	8013      	strh	r3, [r2, #0]
 800c462:	e7a2      	b.n	800c3aa <ucdr_serialize_int16_t+0x3e>
 800c464:	4628      	mov	r0, r5
 800c466:	f10d 0506 	add.w	r5, sp, #6
 800c46a:	4632      	mov	r2, r6
 800c46c:	4629      	mov	r1, r5
 800c46e:	f00c f82c 	bl	80184ca <memcpy>
 800c472:	68a0      	ldr	r0, [r4, #8]
 800c474:	4642      	mov	r2, r8
 800c476:	19a9      	adds	r1, r5, r6
 800c478:	f00c f827 	bl	80184ca <memcpy>
 800c47c:	e7bc      	b.n	800c3f8 <ucdr_serialize_int16_t+0x8c>
 800c47e:	bf00      	nop

0800c480 <ucdr_deserialize_int16_t>:
 800c480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c484:	460d      	mov	r5, r1
 800c486:	2102      	movs	r1, #2
 800c488:	4604      	mov	r4, r0
 800c48a:	f000 fd13 	bl	800ceb4 <ucdr_buffer_alignment>
 800c48e:	4601      	mov	r1, r0
 800c490:	4620      	mov	r0, r4
 800c492:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c496:	f000 fd51 	bl	800cf3c <ucdr_advance_buffer>
 800c49a:	2102      	movs	r1, #2
 800c49c:	4620      	mov	r0, r4
 800c49e:	f000 fca9 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800c4a2:	b1a8      	cbz	r0, 800c4d0 <ucdr_deserialize_int16_t+0x50>
 800c4a4:	7d22      	ldrb	r2, [r4, #20]
 800c4a6:	68a3      	ldr	r3, [r4, #8]
 800c4a8:	2a01      	cmp	r2, #1
 800c4aa:	d046      	beq.n	800c53a <ucdr_deserialize_int16_t+0xba>
 800c4ac:	785b      	ldrb	r3, [r3, #1]
 800c4ae:	702b      	strb	r3, [r5, #0]
 800c4b0:	68a3      	ldr	r3, [r4, #8]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	706b      	strb	r3, [r5, #1]
 800c4b6:	68a2      	ldr	r2, [r4, #8]
 800c4b8:	6923      	ldr	r3, [r4, #16]
 800c4ba:	3202      	adds	r2, #2
 800c4bc:	3302      	adds	r3, #2
 800c4be:	2102      	movs	r1, #2
 800c4c0:	60a2      	str	r2, [r4, #8]
 800c4c2:	6123      	str	r3, [r4, #16]
 800c4c4:	7561      	strb	r1, [r4, #21]
 800c4c6:	7da0      	ldrb	r0, [r4, #22]
 800c4c8:	f080 0001 	eor.w	r0, r0, #1
 800c4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c4d4:	42be      	cmp	r6, r7
 800c4d6:	d920      	bls.n	800c51a <ucdr_deserialize_int16_t+0x9a>
 800c4d8:	6923      	ldr	r3, [r4, #16]
 800c4da:	60a6      	str	r6, [r4, #8]
 800c4dc:	1bf6      	subs	r6, r6, r7
 800c4de:	4433      	add	r3, r6
 800c4e0:	f1c6 0902 	rsb	r9, r6, #2
 800c4e4:	6123      	str	r3, [r4, #16]
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	f000 fc8f 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c4ee:	b338      	cbz	r0, 800c540 <ucdr_deserialize_int16_t+0xc0>
 800c4f0:	7d23      	ldrb	r3, [r4, #20]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d034      	beq.n	800c560 <ucdr_deserialize_int16_t+0xe0>
 800c4f6:	787b      	ldrb	r3, [r7, #1]
 800c4f8:	702b      	strb	r3, [r5, #0]
 800c4fa:	783b      	ldrb	r3, [r7, #0]
 800c4fc:	706b      	strb	r3, [r5, #1]
 800c4fe:	6923      	ldr	r3, [r4, #16]
 800c500:	68a2      	ldr	r2, [r4, #8]
 800c502:	7da0      	ldrb	r0, [r4, #22]
 800c504:	2102      	movs	r1, #2
 800c506:	3302      	adds	r3, #2
 800c508:	444a      	add	r2, r9
 800c50a:	1b9b      	subs	r3, r3, r6
 800c50c:	7561      	strb	r1, [r4, #21]
 800c50e:	60a2      	str	r2, [r4, #8]
 800c510:	6123      	str	r3, [r4, #16]
 800c512:	f080 0001 	eor.w	r0, r0, #1
 800c516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51a:	2102      	movs	r1, #2
 800c51c:	4620      	mov	r0, r4
 800c51e:	f000 fc75 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c522:	2800      	cmp	r0, #0
 800c524:	d0cf      	beq.n	800c4c6 <ucdr_deserialize_int16_t+0x46>
 800c526:	7d23      	ldrb	r3, [r4, #20]
 800c528:	68a2      	ldr	r2, [r4, #8]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d015      	beq.n	800c55a <ucdr_deserialize_int16_t+0xda>
 800c52e:	7853      	ldrb	r3, [r2, #1]
 800c530:	702b      	strb	r3, [r5, #0]
 800c532:	68a3      	ldr	r3, [r4, #8]
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	706b      	strb	r3, [r5, #1]
 800c538:	e7bd      	b.n	800c4b6 <ucdr_deserialize_int16_t+0x36>
 800c53a:	881b      	ldrh	r3, [r3, #0]
 800c53c:	802b      	strh	r3, [r5, #0]
 800c53e:	e7ba      	b.n	800c4b6 <ucdr_deserialize_int16_t+0x36>
 800c540:	68a2      	ldr	r2, [r4, #8]
 800c542:	6923      	ldr	r3, [r4, #16]
 800c544:	7da0      	ldrb	r0, [r4, #22]
 800c546:	f884 8015 	strb.w	r8, [r4, #21]
 800c54a:	1b92      	subs	r2, r2, r6
 800c54c:	1b9b      	subs	r3, r3, r6
 800c54e:	60a2      	str	r2, [r4, #8]
 800c550:	6123      	str	r3, [r4, #16]
 800c552:	f080 0001 	eor.w	r0, r0, #1
 800c556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c55a:	8813      	ldrh	r3, [r2, #0]
 800c55c:	802b      	strh	r3, [r5, #0]
 800c55e:	e7aa      	b.n	800c4b6 <ucdr_deserialize_int16_t+0x36>
 800c560:	4639      	mov	r1, r7
 800c562:	4632      	mov	r2, r6
 800c564:	4628      	mov	r0, r5
 800c566:	f00b ffb0 	bl	80184ca <memcpy>
 800c56a:	68a1      	ldr	r1, [r4, #8]
 800c56c:	464a      	mov	r2, r9
 800c56e:	19a8      	adds	r0, r5, r6
 800c570:	f00b ffab 	bl	80184ca <memcpy>
 800c574:	e7c3      	b.n	800c4fe <ucdr_deserialize_int16_t+0x7e>
 800c576:	bf00      	nop

0800c578 <ucdr_serialize_int32_t>:
 800c578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57c:	b082      	sub	sp, #8
 800c57e:	4604      	mov	r4, r0
 800c580:	9101      	str	r1, [sp, #4]
 800c582:	2104      	movs	r1, #4
 800c584:	f000 fc96 	bl	800ceb4 <ucdr_buffer_alignment>
 800c588:	4601      	mov	r1, r0
 800c58a:	4620      	mov	r0, r4
 800c58c:	7d67      	ldrb	r7, [r4, #21]
 800c58e:	f000 fcd5 	bl	800cf3c <ucdr_advance_buffer>
 800c592:	2104      	movs	r1, #4
 800c594:	4620      	mov	r0, r4
 800c596:	f000 fc2d 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800c59a:	b300      	cbz	r0, 800c5de <ucdr_serialize_int32_t+0x66>
 800c59c:	7d22      	ldrb	r2, [r4, #20]
 800c59e:	68a3      	ldr	r3, [r4, #8]
 800c5a0:	2a01      	cmp	r2, #1
 800c5a2:	d05d      	beq.n	800c660 <ucdr_serialize_int32_t+0xe8>
 800c5a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c5a8:	701a      	strb	r2, [r3, #0]
 800c5aa:	68a3      	ldr	r3, [r4, #8]
 800c5ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c5b0:	705a      	strb	r2, [r3, #1]
 800c5b2:	68a3      	ldr	r3, [r4, #8]
 800c5b4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c5b8:	709a      	strb	r2, [r3, #2]
 800c5ba:	68a3      	ldr	r3, [r4, #8]
 800c5bc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c5c0:	70da      	strb	r2, [r3, #3]
 800c5c2:	68a2      	ldr	r2, [r4, #8]
 800c5c4:	6923      	ldr	r3, [r4, #16]
 800c5c6:	3204      	adds	r2, #4
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	2104      	movs	r1, #4
 800c5cc:	60a2      	str	r2, [r4, #8]
 800c5ce:	6123      	str	r3, [r4, #16]
 800c5d0:	7561      	strb	r1, [r4, #21]
 800c5d2:	7da0      	ldrb	r0, [r4, #22]
 800c5d4:	f080 0001 	eor.w	r0, r0, #1
 800c5d8:	b002      	add	sp, #8
 800c5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5de:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c5e2:	42ab      	cmp	r3, r5
 800c5e4:	d92e      	bls.n	800c644 <ucdr_serialize_int32_t+0xcc>
 800c5e6:	1b5e      	subs	r6, r3, r5
 800c5e8:	60a3      	str	r3, [r4, #8]
 800c5ea:	6923      	ldr	r3, [r4, #16]
 800c5ec:	f1c6 0804 	rsb	r8, r6, #4
 800c5f0:	4433      	add	r3, r6
 800c5f2:	6123      	str	r3, [r4, #16]
 800c5f4:	4641      	mov	r1, r8
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f000 fc08 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c5fc:	b398      	cbz	r0, 800c666 <ucdr_serialize_int32_t+0xee>
 800c5fe:	7d23      	ldrb	r3, [r4, #20]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d046      	beq.n	800c692 <ucdr_serialize_int32_t+0x11a>
 800c604:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c608:	702b      	strb	r3, [r5, #0]
 800c60a:	2e01      	cmp	r6, #1
 800c60c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c610:	706b      	strb	r3, [r5, #1]
 800c612:	d035      	beq.n	800c680 <ucdr_serialize_int32_t+0x108>
 800c614:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c618:	70ab      	strb	r3, [r5, #2]
 800c61a:	2e02      	cmp	r6, #2
 800c61c:	d034      	beq.n	800c688 <ucdr_serialize_int32_t+0x110>
 800c61e:	3503      	adds	r5, #3
 800c620:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c624:	702b      	strb	r3, [r5, #0]
 800c626:	6923      	ldr	r3, [r4, #16]
 800c628:	68a2      	ldr	r2, [r4, #8]
 800c62a:	7da0      	ldrb	r0, [r4, #22]
 800c62c:	3304      	adds	r3, #4
 800c62e:	4442      	add	r2, r8
 800c630:	1b9b      	subs	r3, r3, r6
 800c632:	2104      	movs	r1, #4
 800c634:	f080 0001 	eor.w	r0, r0, #1
 800c638:	60a2      	str	r2, [r4, #8]
 800c63a:	6123      	str	r3, [r4, #16]
 800c63c:	7561      	strb	r1, [r4, #21]
 800c63e:	b002      	add	sp, #8
 800c640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c644:	2104      	movs	r1, #4
 800c646:	4620      	mov	r0, r4
 800c648:	f000 fbe0 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	d0c0      	beq.n	800c5d2 <ucdr_serialize_int32_t+0x5a>
 800c650:	7d23      	ldrb	r3, [r4, #20]
 800c652:	68a2      	ldr	r2, [r4, #8]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d019      	beq.n	800c68c <ucdr_serialize_int32_t+0x114>
 800c658:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c65c:	7013      	strb	r3, [r2, #0]
 800c65e:	e7a4      	b.n	800c5aa <ucdr_serialize_int32_t+0x32>
 800c660:	9a01      	ldr	r2, [sp, #4]
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	e7ad      	b.n	800c5c2 <ucdr_serialize_int32_t+0x4a>
 800c666:	68a2      	ldr	r2, [r4, #8]
 800c668:	6923      	ldr	r3, [r4, #16]
 800c66a:	7da0      	ldrb	r0, [r4, #22]
 800c66c:	7567      	strb	r7, [r4, #21]
 800c66e:	1b92      	subs	r2, r2, r6
 800c670:	1b9b      	subs	r3, r3, r6
 800c672:	f080 0001 	eor.w	r0, r0, #1
 800c676:	60a2      	str	r2, [r4, #8]
 800c678:	6123      	str	r3, [r4, #16]
 800c67a:	b002      	add	sp, #8
 800c67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c680:	68a3      	ldr	r3, [r4, #8]
 800c682:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c686:	701a      	strb	r2, [r3, #0]
 800c688:	68a5      	ldr	r5, [r4, #8]
 800c68a:	e7c9      	b.n	800c620 <ucdr_serialize_int32_t+0xa8>
 800c68c:	9b01      	ldr	r3, [sp, #4]
 800c68e:	6013      	str	r3, [r2, #0]
 800c690:	e797      	b.n	800c5c2 <ucdr_serialize_int32_t+0x4a>
 800c692:	4628      	mov	r0, r5
 800c694:	ad01      	add	r5, sp, #4
 800c696:	4632      	mov	r2, r6
 800c698:	4629      	mov	r1, r5
 800c69a:	f00b ff16 	bl	80184ca <memcpy>
 800c69e:	68a0      	ldr	r0, [r4, #8]
 800c6a0:	4642      	mov	r2, r8
 800c6a2:	19a9      	adds	r1, r5, r6
 800c6a4:	f00b ff11 	bl	80184ca <memcpy>
 800c6a8:	e7bd      	b.n	800c626 <ucdr_serialize_int32_t+0xae>
 800c6aa:	bf00      	nop

0800c6ac <ucdr_deserialize_int32_t>:
 800c6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	2104      	movs	r1, #4
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	f000 fbfd 	bl	800ceb4 <ucdr_buffer_alignment>
 800c6ba:	4601      	mov	r1, r0
 800c6bc:	4620      	mov	r0, r4
 800c6be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c6c2:	f000 fc3b 	bl	800cf3c <ucdr_advance_buffer>
 800c6c6:	2104      	movs	r1, #4
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 fb93 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800c6ce:	b1d8      	cbz	r0, 800c708 <ucdr_deserialize_int32_t+0x5c>
 800c6d0:	7d22      	ldrb	r2, [r4, #20]
 800c6d2:	68a3      	ldr	r3, [r4, #8]
 800c6d4:	2a01      	cmp	r2, #1
 800c6d6:	d052      	beq.n	800c77e <ucdr_deserialize_int32_t+0xd2>
 800c6d8:	78db      	ldrb	r3, [r3, #3]
 800c6da:	702b      	strb	r3, [r5, #0]
 800c6dc:	68a3      	ldr	r3, [r4, #8]
 800c6de:	789b      	ldrb	r3, [r3, #2]
 800c6e0:	706b      	strb	r3, [r5, #1]
 800c6e2:	68a3      	ldr	r3, [r4, #8]
 800c6e4:	785b      	ldrb	r3, [r3, #1]
 800c6e6:	70ab      	strb	r3, [r5, #2]
 800c6e8:	68a3      	ldr	r3, [r4, #8]
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	70eb      	strb	r3, [r5, #3]
 800c6ee:	68a2      	ldr	r2, [r4, #8]
 800c6f0:	6923      	ldr	r3, [r4, #16]
 800c6f2:	3204      	adds	r2, #4
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	2104      	movs	r1, #4
 800c6f8:	60a2      	str	r2, [r4, #8]
 800c6fa:	6123      	str	r3, [r4, #16]
 800c6fc:	7561      	strb	r1, [r4, #21]
 800c6fe:	7da0      	ldrb	r0, [r4, #22]
 800c700:	f080 0001 	eor.w	r0, r0, #1
 800c704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c708:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c70c:	42b7      	cmp	r7, r6
 800c70e:	d92a      	bls.n	800c766 <ucdr_deserialize_int32_t+0xba>
 800c710:	6923      	ldr	r3, [r4, #16]
 800c712:	60a7      	str	r7, [r4, #8]
 800c714:	1bbf      	subs	r7, r7, r6
 800c716:	443b      	add	r3, r7
 800c718:	f1c7 0904 	rsb	r9, r7, #4
 800c71c:	6123      	str	r3, [r4, #16]
 800c71e:	4649      	mov	r1, r9
 800c720:	4620      	mov	r0, r4
 800c722:	f000 fb73 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c726:	b368      	cbz	r0, 800c784 <ucdr_deserialize_int32_t+0xd8>
 800c728:	7d23      	ldrb	r3, [r4, #20]
 800c72a:	2b01      	cmp	r3, #1
 800c72c:	d040      	beq.n	800c7b0 <ucdr_deserialize_int32_t+0x104>
 800c72e:	78f3      	ldrb	r3, [r6, #3]
 800c730:	702b      	strb	r3, [r5, #0]
 800c732:	78b3      	ldrb	r3, [r6, #2]
 800c734:	706b      	strb	r3, [r5, #1]
 800c736:	2f01      	cmp	r7, #1
 800c738:	d031      	beq.n	800c79e <ucdr_deserialize_int32_t+0xf2>
 800c73a:	7873      	ldrb	r3, [r6, #1]
 800c73c:	70ab      	strb	r3, [r5, #2]
 800c73e:	2f02      	cmp	r7, #2
 800c740:	f105 0503 	add.w	r5, r5, #3
 800c744:	d02f      	beq.n	800c7a6 <ucdr_deserialize_int32_t+0xfa>
 800c746:	7833      	ldrb	r3, [r6, #0]
 800c748:	702b      	strb	r3, [r5, #0]
 800c74a:	6923      	ldr	r3, [r4, #16]
 800c74c:	68a2      	ldr	r2, [r4, #8]
 800c74e:	7da0      	ldrb	r0, [r4, #22]
 800c750:	2104      	movs	r1, #4
 800c752:	3304      	adds	r3, #4
 800c754:	444a      	add	r2, r9
 800c756:	1bdb      	subs	r3, r3, r7
 800c758:	7561      	strb	r1, [r4, #21]
 800c75a:	60a2      	str	r2, [r4, #8]
 800c75c:	6123      	str	r3, [r4, #16]
 800c75e:	f080 0001 	eor.w	r0, r0, #1
 800c762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c766:	2104      	movs	r1, #4
 800c768:	4620      	mov	r0, r4
 800c76a:	f000 fb4f 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c76e:	2800      	cmp	r0, #0
 800c770:	d0c5      	beq.n	800c6fe <ucdr_deserialize_int32_t+0x52>
 800c772:	7d23      	ldrb	r3, [r4, #20]
 800c774:	68a2      	ldr	r2, [r4, #8]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d017      	beq.n	800c7aa <ucdr_deserialize_int32_t+0xfe>
 800c77a:	78d3      	ldrb	r3, [r2, #3]
 800c77c:	e7ad      	b.n	800c6da <ucdr_deserialize_int32_t+0x2e>
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	602b      	str	r3, [r5, #0]
 800c782:	e7b4      	b.n	800c6ee <ucdr_deserialize_int32_t+0x42>
 800c784:	68a2      	ldr	r2, [r4, #8]
 800c786:	6923      	ldr	r3, [r4, #16]
 800c788:	7da0      	ldrb	r0, [r4, #22]
 800c78a:	f884 8015 	strb.w	r8, [r4, #21]
 800c78e:	1bd2      	subs	r2, r2, r7
 800c790:	1bdb      	subs	r3, r3, r7
 800c792:	60a2      	str	r2, [r4, #8]
 800c794:	6123      	str	r3, [r4, #16]
 800c796:	f080 0001 	eor.w	r0, r0, #1
 800c79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c79e:	68a3      	ldr	r3, [r4, #8]
 800c7a0:	785b      	ldrb	r3, [r3, #1]
 800c7a2:	70ab      	strb	r3, [r5, #2]
 800c7a4:	3503      	adds	r5, #3
 800c7a6:	68a6      	ldr	r6, [r4, #8]
 800c7a8:	e7cd      	b.n	800c746 <ucdr_deserialize_int32_t+0x9a>
 800c7aa:	6813      	ldr	r3, [r2, #0]
 800c7ac:	602b      	str	r3, [r5, #0]
 800c7ae:	e79e      	b.n	800c6ee <ucdr_deserialize_int32_t+0x42>
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	463a      	mov	r2, r7
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	f00b fe88 	bl	80184ca <memcpy>
 800c7ba:	68a1      	ldr	r1, [r4, #8]
 800c7bc:	464a      	mov	r2, r9
 800c7be:	19e8      	adds	r0, r5, r7
 800c7c0:	f00b fe83 	bl	80184ca <memcpy>
 800c7c4:	e7c1      	b.n	800c74a <ucdr_deserialize_int32_t+0x9e>
 800c7c6:	bf00      	nop

0800c7c8 <ucdr_serialize_double>:
 800c7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7cc:	2108      	movs	r1, #8
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	ed8d 0b00 	vstr	d0, [sp]
 800c7d6:	f000 fb6d 	bl	800ceb4 <ucdr_buffer_alignment>
 800c7da:	4601      	mov	r1, r0
 800c7dc:	4620      	mov	r0, r4
 800c7de:	7d67      	ldrb	r7, [r4, #21]
 800c7e0:	f000 fbac 	bl	800cf3c <ucdr_advance_buffer>
 800c7e4:	2108      	movs	r1, #8
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f000 fb04 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d14d      	bne.n	800c88c <ucdr_serialize_double+0xc4>
 800c7f0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c7f4:	42ab      	cmp	r3, r5
 800c7f6:	d944      	bls.n	800c882 <ucdr_serialize_double+0xba>
 800c7f8:	1b5e      	subs	r6, r3, r5
 800c7fa:	60a3      	str	r3, [r4, #8]
 800c7fc:	6923      	ldr	r3, [r4, #16]
 800c7fe:	f1c6 0808 	rsb	r8, r6, #8
 800c802:	4433      	add	r3, r6
 800c804:	6123      	str	r3, [r4, #16]
 800c806:	4641      	mov	r1, r8
 800c808:	4620      	mov	r0, r4
 800c80a:	f000 faff 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d072      	beq.n	800c8f8 <ucdr_serialize_double+0x130>
 800c812:	7d23      	ldrb	r3, [r4, #20]
 800c814:	2b01      	cmp	r3, #1
 800c816:	f000 8092 	beq.w	800c93e <ucdr_serialize_double+0x176>
 800c81a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c81e:	702b      	strb	r3, [r5, #0]
 800c820:	2e01      	cmp	r6, #1
 800c822:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c826:	706b      	strb	r3, [r5, #1]
 800c828:	d073      	beq.n	800c912 <ucdr_serialize_double+0x14a>
 800c82a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c82e:	70ab      	strb	r3, [r5, #2]
 800c830:	2e02      	cmp	r6, #2
 800c832:	d072      	beq.n	800c91a <ucdr_serialize_double+0x152>
 800c834:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c838:	70eb      	strb	r3, [r5, #3]
 800c83a:	2e03      	cmp	r6, #3
 800c83c:	d071      	beq.n	800c922 <ucdr_serialize_double+0x15a>
 800c83e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c842:	712b      	strb	r3, [r5, #4]
 800c844:	2e04      	cmp	r6, #4
 800c846:	d070      	beq.n	800c92a <ucdr_serialize_double+0x162>
 800c848:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c84c:	716b      	strb	r3, [r5, #5]
 800c84e:	2e05      	cmp	r6, #5
 800c850:	d06f      	beq.n	800c932 <ucdr_serialize_double+0x16a>
 800c852:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c856:	71ab      	strb	r3, [r5, #6]
 800c858:	2e06      	cmp	r6, #6
 800c85a:	d06e      	beq.n	800c93a <ucdr_serialize_double+0x172>
 800c85c:	3507      	adds	r5, #7
 800c85e:	f89d 3000 	ldrb.w	r3, [sp]
 800c862:	702b      	strb	r3, [r5, #0]
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	68a2      	ldr	r2, [r4, #8]
 800c868:	7da0      	ldrb	r0, [r4, #22]
 800c86a:	3308      	adds	r3, #8
 800c86c:	4442      	add	r2, r8
 800c86e:	1b9b      	subs	r3, r3, r6
 800c870:	2108      	movs	r1, #8
 800c872:	f080 0001 	eor.w	r0, r0, #1
 800c876:	60a2      	str	r2, [r4, #8]
 800c878:	6123      	str	r3, [r4, #16]
 800c87a:	7561      	strb	r1, [r4, #21]
 800c87c:	b002      	add	sp, #8
 800c87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c882:	2108      	movs	r1, #8
 800c884:	4620      	mov	r0, r4
 800c886:	f000 fac1 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c88a:	b350      	cbz	r0, 800c8e2 <ucdr_serialize_double+0x11a>
 800c88c:	7d22      	ldrb	r2, [r4, #20]
 800c88e:	68a3      	ldr	r3, [r4, #8]
 800c890:	2a01      	cmp	r2, #1
 800c892:	d02c      	beq.n	800c8ee <ucdr_serialize_double+0x126>
 800c894:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c898:	701a      	strb	r2, [r3, #0]
 800c89a:	68a3      	ldr	r3, [r4, #8]
 800c89c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c8a0:	705a      	strb	r2, [r3, #1]
 800c8a2:	68a3      	ldr	r3, [r4, #8]
 800c8a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c8a8:	709a      	strb	r2, [r3, #2]
 800c8aa:	68a3      	ldr	r3, [r4, #8]
 800c8ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c8b0:	70da      	strb	r2, [r3, #3]
 800c8b2:	68a3      	ldr	r3, [r4, #8]
 800c8b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c8b8:	711a      	strb	r2, [r3, #4]
 800c8ba:	68a3      	ldr	r3, [r4, #8]
 800c8bc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c8c0:	715a      	strb	r2, [r3, #5]
 800c8c2:	68a3      	ldr	r3, [r4, #8]
 800c8c4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c8c8:	719a      	strb	r2, [r3, #6]
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	f89d 2000 	ldrb.w	r2, [sp]
 800c8d0:	71da      	strb	r2, [r3, #7]
 800c8d2:	68a2      	ldr	r2, [r4, #8]
 800c8d4:	6923      	ldr	r3, [r4, #16]
 800c8d6:	3208      	adds	r2, #8
 800c8d8:	3308      	adds	r3, #8
 800c8da:	2108      	movs	r1, #8
 800c8dc:	60a2      	str	r2, [r4, #8]
 800c8de:	6123      	str	r3, [r4, #16]
 800c8e0:	7561      	strb	r1, [r4, #21]
 800c8e2:	7da0      	ldrb	r0, [r4, #22]
 800c8e4:	f080 0001 	eor.w	r0, r0, #1
 800c8e8:	b002      	add	sp, #8
 800c8ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c8f2:	6019      	str	r1, [r3, #0]
 800c8f4:	605a      	str	r2, [r3, #4]
 800c8f6:	e7ec      	b.n	800c8d2 <ucdr_serialize_double+0x10a>
 800c8f8:	68a2      	ldr	r2, [r4, #8]
 800c8fa:	6923      	ldr	r3, [r4, #16]
 800c8fc:	7da0      	ldrb	r0, [r4, #22]
 800c8fe:	7567      	strb	r7, [r4, #21]
 800c900:	1b92      	subs	r2, r2, r6
 800c902:	1b9b      	subs	r3, r3, r6
 800c904:	f080 0001 	eor.w	r0, r0, #1
 800c908:	60a2      	str	r2, [r4, #8]
 800c90a:	6123      	str	r3, [r4, #16]
 800c90c:	b002      	add	sp, #8
 800c90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c912:	68a3      	ldr	r3, [r4, #8]
 800c914:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c918:	701a      	strb	r2, [r3, #0]
 800c91a:	68a3      	ldr	r3, [r4, #8]
 800c91c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c920:	701a      	strb	r2, [r3, #0]
 800c922:	68a3      	ldr	r3, [r4, #8]
 800c924:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c928:	701a      	strb	r2, [r3, #0]
 800c92a:	68a3      	ldr	r3, [r4, #8]
 800c92c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c930:	701a      	strb	r2, [r3, #0]
 800c932:	68a3      	ldr	r3, [r4, #8]
 800c934:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c938:	701a      	strb	r2, [r3, #0]
 800c93a:	68a5      	ldr	r5, [r4, #8]
 800c93c:	e78f      	b.n	800c85e <ucdr_serialize_double+0x96>
 800c93e:	4628      	mov	r0, r5
 800c940:	466d      	mov	r5, sp
 800c942:	4632      	mov	r2, r6
 800c944:	4629      	mov	r1, r5
 800c946:	f00b fdc0 	bl	80184ca <memcpy>
 800c94a:	68a0      	ldr	r0, [r4, #8]
 800c94c:	4642      	mov	r2, r8
 800c94e:	19a9      	adds	r1, r5, r6
 800c950:	f00b fdbb 	bl	80184ca <memcpy>
 800c954:	e786      	b.n	800c864 <ucdr_serialize_double+0x9c>
 800c956:	bf00      	nop

0800c958 <ucdr_serialize_endian_double>:
 800c958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c95c:	460e      	mov	r6, r1
 800c95e:	b083      	sub	sp, #12
 800c960:	2108      	movs	r1, #8
 800c962:	4604      	mov	r4, r0
 800c964:	ed8d 0b00 	vstr	d0, [sp]
 800c968:	f000 faa4 	bl	800ceb4 <ucdr_buffer_alignment>
 800c96c:	4601      	mov	r1, r0
 800c96e:	4620      	mov	r0, r4
 800c970:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c974:	f000 fae2 	bl	800cf3c <ucdr_advance_buffer>
 800c978:	2108      	movs	r1, #8
 800c97a:	4620      	mov	r0, r4
 800c97c:	f000 fa3a 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800c980:	2800      	cmp	r0, #0
 800c982:	d14c      	bne.n	800ca1e <ucdr_serialize_endian_double+0xc6>
 800c984:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 800c988:	42bd      	cmp	r5, r7
 800c98a:	d943      	bls.n	800ca14 <ucdr_serialize_endian_double+0xbc>
 800c98c:	6923      	ldr	r3, [r4, #16]
 800c98e:	60a5      	str	r5, [r4, #8]
 800c990:	1bed      	subs	r5, r5, r7
 800c992:	442b      	add	r3, r5
 800c994:	f1c5 0908 	rsb	r9, r5, #8
 800c998:	6123      	str	r3, [r4, #16]
 800c99a:	4649      	mov	r1, r9
 800c99c:	4620      	mov	r0, r4
 800c99e:	f000 fa35 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	d070      	beq.n	800ca88 <ucdr_serialize_endian_double+0x130>
 800c9a6:	2e01      	cmp	r6, #1
 800c9a8:	f000 8092 	beq.w	800cad0 <ucdr_serialize_endian_double+0x178>
 800c9ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c9b0:	703b      	strb	r3, [r7, #0]
 800c9b2:	2d01      	cmp	r5, #1
 800c9b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c9b8:	707b      	strb	r3, [r7, #1]
 800c9ba:	d073      	beq.n	800caa4 <ucdr_serialize_endian_double+0x14c>
 800c9bc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c9c0:	70bb      	strb	r3, [r7, #2]
 800c9c2:	2d02      	cmp	r5, #2
 800c9c4:	d072      	beq.n	800caac <ucdr_serialize_endian_double+0x154>
 800c9c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c9ca:	70fb      	strb	r3, [r7, #3]
 800c9cc:	2d03      	cmp	r5, #3
 800c9ce:	d071      	beq.n	800cab4 <ucdr_serialize_endian_double+0x15c>
 800c9d0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c9d4:	713b      	strb	r3, [r7, #4]
 800c9d6:	2d04      	cmp	r5, #4
 800c9d8:	d070      	beq.n	800cabc <ucdr_serialize_endian_double+0x164>
 800c9da:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c9de:	717b      	strb	r3, [r7, #5]
 800c9e0:	2d05      	cmp	r5, #5
 800c9e2:	d06f      	beq.n	800cac4 <ucdr_serialize_endian_double+0x16c>
 800c9e4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c9e8:	71bb      	strb	r3, [r7, #6]
 800c9ea:	2d06      	cmp	r5, #6
 800c9ec:	d06e      	beq.n	800cacc <ucdr_serialize_endian_double+0x174>
 800c9ee:	3707      	adds	r7, #7
 800c9f0:	f89d 3000 	ldrb.w	r3, [sp]
 800c9f4:	703b      	strb	r3, [r7, #0]
 800c9f6:	6923      	ldr	r3, [r4, #16]
 800c9f8:	68a2      	ldr	r2, [r4, #8]
 800c9fa:	7da0      	ldrb	r0, [r4, #22]
 800c9fc:	3308      	adds	r3, #8
 800c9fe:	444a      	add	r2, r9
 800ca00:	1b5b      	subs	r3, r3, r5
 800ca02:	2108      	movs	r1, #8
 800ca04:	f080 0001 	eor.w	r0, r0, #1
 800ca08:	60a2      	str	r2, [r4, #8]
 800ca0a:	6123      	str	r3, [r4, #16]
 800ca0c:	7561      	strb	r1, [r4, #21]
 800ca0e:	b003      	add	sp, #12
 800ca10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca14:	2108      	movs	r1, #8
 800ca16:	4620      	mov	r0, r4
 800ca18:	f000 f9f8 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800ca1c:	b348      	cbz	r0, 800ca72 <ucdr_serialize_endian_double+0x11a>
 800ca1e:	2e01      	cmp	r6, #1
 800ca20:	68a3      	ldr	r3, [r4, #8]
 800ca22:	d02c      	beq.n	800ca7e <ucdr_serialize_endian_double+0x126>
 800ca24:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ca28:	701a      	strb	r2, [r3, #0]
 800ca2a:	68a3      	ldr	r3, [r4, #8]
 800ca2c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ca30:	705a      	strb	r2, [r3, #1]
 800ca32:	68a3      	ldr	r3, [r4, #8]
 800ca34:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ca38:	709a      	strb	r2, [r3, #2]
 800ca3a:	68a3      	ldr	r3, [r4, #8]
 800ca3c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ca40:	70da      	strb	r2, [r3, #3]
 800ca42:	68a3      	ldr	r3, [r4, #8]
 800ca44:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ca48:	711a      	strb	r2, [r3, #4]
 800ca4a:	68a3      	ldr	r3, [r4, #8]
 800ca4c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ca50:	715a      	strb	r2, [r3, #5]
 800ca52:	68a3      	ldr	r3, [r4, #8]
 800ca54:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ca58:	719a      	strb	r2, [r3, #6]
 800ca5a:	68a3      	ldr	r3, [r4, #8]
 800ca5c:	f89d 2000 	ldrb.w	r2, [sp]
 800ca60:	71da      	strb	r2, [r3, #7]
 800ca62:	68a2      	ldr	r2, [r4, #8]
 800ca64:	6923      	ldr	r3, [r4, #16]
 800ca66:	3208      	adds	r2, #8
 800ca68:	3308      	adds	r3, #8
 800ca6a:	2108      	movs	r1, #8
 800ca6c:	60a2      	str	r2, [r4, #8]
 800ca6e:	6123      	str	r3, [r4, #16]
 800ca70:	7561      	strb	r1, [r4, #21]
 800ca72:	7da0      	ldrb	r0, [r4, #22]
 800ca74:	f080 0001 	eor.w	r0, r0, #1
 800ca78:	b003      	add	sp, #12
 800ca7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca82:	6019      	str	r1, [r3, #0]
 800ca84:	605a      	str	r2, [r3, #4]
 800ca86:	e7ec      	b.n	800ca62 <ucdr_serialize_endian_double+0x10a>
 800ca88:	68a2      	ldr	r2, [r4, #8]
 800ca8a:	6923      	ldr	r3, [r4, #16]
 800ca8c:	7da0      	ldrb	r0, [r4, #22]
 800ca8e:	f884 8015 	strb.w	r8, [r4, #21]
 800ca92:	1b52      	subs	r2, r2, r5
 800ca94:	1b5b      	subs	r3, r3, r5
 800ca96:	f080 0001 	eor.w	r0, r0, #1
 800ca9a:	60a2      	str	r2, [r4, #8]
 800ca9c:	6123      	str	r3, [r4, #16]
 800ca9e:	b003      	add	sp, #12
 800caa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caa4:	68a3      	ldr	r3, [r4, #8]
 800caa6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800caaa:	701a      	strb	r2, [r3, #0]
 800caac:	68a3      	ldr	r3, [r4, #8]
 800caae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cab2:	701a      	strb	r2, [r3, #0]
 800cab4:	68a3      	ldr	r3, [r4, #8]
 800cab6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800caba:	701a      	strb	r2, [r3, #0]
 800cabc:	68a3      	ldr	r3, [r4, #8]
 800cabe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800cac2:	701a      	strb	r2, [r3, #0]
 800cac4:	68a3      	ldr	r3, [r4, #8]
 800cac6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800caca:	701a      	strb	r2, [r3, #0]
 800cacc:	68a7      	ldr	r7, [r4, #8]
 800cace:	e78f      	b.n	800c9f0 <ucdr_serialize_endian_double+0x98>
 800cad0:	466e      	mov	r6, sp
 800cad2:	462a      	mov	r2, r5
 800cad4:	4631      	mov	r1, r6
 800cad6:	4638      	mov	r0, r7
 800cad8:	f00b fcf7 	bl	80184ca <memcpy>
 800cadc:	68a0      	ldr	r0, [r4, #8]
 800cade:	464a      	mov	r2, r9
 800cae0:	1971      	adds	r1, r6, r5
 800cae2:	f00b fcf2 	bl	80184ca <memcpy>
 800cae6:	e786      	b.n	800c9f6 <ucdr_serialize_endian_double+0x9e>

0800cae8 <ucdr_deserialize_double>:
 800cae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caec:	460d      	mov	r5, r1
 800caee:	2108      	movs	r1, #8
 800caf0:	4604      	mov	r4, r0
 800caf2:	f000 f9df 	bl	800ceb4 <ucdr_buffer_alignment>
 800caf6:	4601      	mov	r1, r0
 800caf8:	4620      	mov	r0, r4
 800cafa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cafe:	f000 fa1d 	bl	800cf3c <ucdr_advance_buffer>
 800cb02:	2108      	movs	r1, #8
 800cb04:	4620      	mov	r0, r4
 800cb06:	f000 f975 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d147      	bne.n	800cb9e <ucdr_deserialize_double+0xb6>
 800cb0e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cb12:	42be      	cmp	r6, r7
 800cb14:	d93e      	bls.n	800cb94 <ucdr_deserialize_double+0xac>
 800cb16:	6923      	ldr	r3, [r4, #16]
 800cb18:	60a6      	str	r6, [r4, #8]
 800cb1a:	1bf6      	subs	r6, r6, r7
 800cb1c:	4433      	add	r3, r6
 800cb1e:	f1c6 0908 	rsb	r9, r6, #8
 800cb22:	6123      	str	r3, [r4, #16]
 800cb24:	4649      	mov	r1, r9
 800cb26:	4620      	mov	r0, r4
 800cb28:	f000 f970 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d063      	beq.n	800cbf8 <ucdr_deserialize_double+0x110>
 800cb30:	7d23      	ldrb	r3, [r4, #20]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	f000 8083 	beq.w	800cc3e <ucdr_deserialize_double+0x156>
 800cb38:	79fb      	ldrb	r3, [r7, #7]
 800cb3a:	702b      	strb	r3, [r5, #0]
 800cb3c:	79bb      	ldrb	r3, [r7, #6]
 800cb3e:	706b      	strb	r3, [r5, #1]
 800cb40:	2e01      	cmp	r6, #1
 800cb42:	d066      	beq.n	800cc12 <ucdr_deserialize_double+0x12a>
 800cb44:	797b      	ldrb	r3, [r7, #5]
 800cb46:	70ab      	strb	r3, [r5, #2]
 800cb48:	2e02      	cmp	r6, #2
 800cb4a:	f000 8089 	beq.w	800cc60 <ucdr_deserialize_double+0x178>
 800cb4e:	793b      	ldrb	r3, [r7, #4]
 800cb50:	70eb      	strb	r3, [r5, #3]
 800cb52:	2e03      	cmp	r6, #3
 800cb54:	f000 8082 	beq.w	800cc5c <ucdr_deserialize_double+0x174>
 800cb58:	78fb      	ldrb	r3, [r7, #3]
 800cb5a:	712b      	strb	r3, [r5, #4]
 800cb5c:	2e04      	cmp	r6, #4
 800cb5e:	d07b      	beq.n	800cc58 <ucdr_deserialize_double+0x170>
 800cb60:	78bb      	ldrb	r3, [r7, #2]
 800cb62:	716b      	strb	r3, [r5, #5]
 800cb64:	2e05      	cmp	r6, #5
 800cb66:	d075      	beq.n	800cc54 <ucdr_deserialize_double+0x16c>
 800cb68:	787b      	ldrb	r3, [r7, #1]
 800cb6a:	71ab      	strb	r3, [r5, #6]
 800cb6c:	2e06      	cmp	r6, #6
 800cb6e:	f105 0507 	add.w	r5, r5, #7
 800cb72:	d062      	beq.n	800cc3a <ucdr_deserialize_double+0x152>
 800cb74:	783b      	ldrb	r3, [r7, #0]
 800cb76:	702b      	strb	r3, [r5, #0]
 800cb78:	6923      	ldr	r3, [r4, #16]
 800cb7a:	68a2      	ldr	r2, [r4, #8]
 800cb7c:	7da0      	ldrb	r0, [r4, #22]
 800cb7e:	2108      	movs	r1, #8
 800cb80:	3308      	adds	r3, #8
 800cb82:	444a      	add	r2, r9
 800cb84:	1b9b      	subs	r3, r3, r6
 800cb86:	7561      	strb	r1, [r4, #21]
 800cb88:	60a2      	str	r2, [r4, #8]
 800cb8a:	6123      	str	r3, [r4, #16]
 800cb8c:	f080 0001 	eor.w	r0, r0, #1
 800cb90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb94:	2108      	movs	r1, #8
 800cb96:	4620      	mov	r0, r4
 800cb98:	f000 f938 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800cb9c:	b310      	cbz	r0, 800cbe4 <ucdr_deserialize_double+0xfc>
 800cb9e:	7d22      	ldrb	r2, [r4, #20]
 800cba0:	68a3      	ldr	r3, [r4, #8]
 800cba2:	2a01      	cmp	r2, #1
 800cba4:	d023      	beq.n	800cbee <ucdr_deserialize_double+0x106>
 800cba6:	79db      	ldrb	r3, [r3, #7]
 800cba8:	702b      	strb	r3, [r5, #0]
 800cbaa:	68a3      	ldr	r3, [r4, #8]
 800cbac:	799b      	ldrb	r3, [r3, #6]
 800cbae:	706b      	strb	r3, [r5, #1]
 800cbb0:	68a3      	ldr	r3, [r4, #8]
 800cbb2:	795b      	ldrb	r3, [r3, #5]
 800cbb4:	70ab      	strb	r3, [r5, #2]
 800cbb6:	68a3      	ldr	r3, [r4, #8]
 800cbb8:	791b      	ldrb	r3, [r3, #4]
 800cbba:	70eb      	strb	r3, [r5, #3]
 800cbbc:	68a3      	ldr	r3, [r4, #8]
 800cbbe:	78db      	ldrb	r3, [r3, #3]
 800cbc0:	712b      	strb	r3, [r5, #4]
 800cbc2:	68a3      	ldr	r3, [r4, #8]
 800cbc4:	789b      	ldrb	r3, [r3, #2]
 800cbc6:	716b      	strb	r3, [r5, #5]
 800cbc8:	68a3      	ldr	r3, [r4, #8]
 800cbca:	785b      	ldrb	r3, [r3, #1]
 800cbcc:	71ab      	strb	r3, [r5, #6]
 800cbce:	68a3      	ldr	r3, [r4, #8]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	71eb      	strb	r3, [r5, #7]
 800cbd4:	68a2      	ldr	r2, [r4, #8]
 800cbd6:	6923      	ldr	r3, [r4, #16]
 800cbd8:	3208      	adds	r2, #8
 800cbda:	3308      	adds	r3, #8
 800cbdc:	2108      	movs	r1, #8
 800cbde:	60a2      	str	r2, [r4, #8]
 800cbe0:	6123      	str	r3, [r4, #16]
 800cbe2:	7561      	strb	r1, [r4, #21]
 800cbe4:	7da0      	ldrb	r0, [r4, #22]
 800cbe6:	f080 0001 	eor.w	r0, r0, #1
 800cbea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	606b      	str	r3, [r5, #4]
 800cbf4:	602a      	str	r2, [r5, #0]
 800cbf6:	e7ed      	b.n	800cbd4 <ucdr_deserialize_double+0xec>
 800cbf8:	68a2      	ldr	r2, [r4, #8]
 800cbfa:	6923      	ldr	r3, [r4, #16]
 800cbfc:	7da0      	ldrb	r0, [r4, #22]
 800cbfe:	f884 8015 	strb.w	r8, [r4, #21]
 800cc02:	1b92      	subs	r2, r2, r6
 800cc04:	1b9b      	subs	r3, r3, r6
 800cc06:	60a2      	str	r2, [r4, #8]
 800cc08:	6123      	str	r3, [r4, #16]
 800cc0a:	f080 0001 	eor.w	r0, r0, #1
 800cc0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc12:	68a3      	ldr	r3, [r4, #8]
 800cc14:	795b      	ldrb	r3, [r3, #5]
 800cc16:	70ab      	strb	r3, [r5, #2]
 800cc18:	3503      	adds	r5, #3
 800cc1a:	68a3      	ldr	r3, [r4, #8]
 800cc1c:	791b      	ldrb	r3, [r3, #4]
 800cc1e:	f805 3b01 	strb.w	r3, [r5], #1
 800cc22:	68a3      	ldr	r3, [r4, #8]
 800cc24:	78db      	ldrb	r3, [r3, #3]
 800cc26:	f805 3b01 	strb.w	r3, [r5], #1
 800cc2a:	68a3      	ldr	r3, [r4, #8]
 800cc2c:	789b      	ldrb	r3, [r3, #2]
 800cc2e:	f805 3b01 	strb.w	r3, [r5], #1
 800cc32:	68a3      	ldr	r3, [r4, #8]
 800cc34:	785b      	ldrb	r3, [r3, #1]
 800cc36:	f805 3b01 	strb.w	r3, [r5], #1
 800cc3a:	68a7      	ldr	r7, [r4, #8]
 800cc3c:	e79a      	b.n	800cb74 <ucdr_deserialize_double+0x8c>
 800cc3e:	4639      	mov	r1, r7
 800cc40:	4632      	mov	r2, r6
 800cc42:	4628      	mov	r0, r5
 800cc44:	f00b fc41 	bl	80184ca <memcpy>
 800cc48:	68a1      	ldr	r1, [r4, #8]
 800cc4a:	464a      	mov	r2, r9
 800cc4c:	19a8      	adds	r0, r5, r6
 800cc4e:	f00b fc3c 	bl	80184ca <memcpy>
 800cc52:	e791      	b.n	800cb78 <ucdr_deserialize_double+0x90>
 800cc54:	3506      	adds	r5, #6
 800cc56:	e7ec      	b.n	800cc32 <ucdr_deserialize_double+0x14a>
 800cc58:	3505      	adds	r5, #5
 800cc5a:	e7e6      	b.n	800cc2a <ucdr_deserialize_double+0x142>
 800cc5c:	3504      	adds	r5, #4
 800cc5e:	e7e0      	b.n	800cc22 <ucdr_deserialize_double+0x13a>
 800cc60:	3503      	adds	r5, #3
 800cc62:	e7da      	b.n	800cc1a <ucdr_deserialize_double+0x132>

0800cc64 <ucdr_deserialize_endian_double>:
 800cc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc68:	460f      	mov	r7, r1
 800cc6a:	2108      	movs	r1, #8
 800cc6c:	4604      	mov	r4, r0
 800cc6e:	4615      	mov	r5, r2
 800cc70:	f000 f920 	bl	800ceb4 <ucdr_buffer_alignment>
 800cc74:	4601      	mov	r1, r0
 800cc76:	4620      	mov	r0, r4
 800cc78:	f894 9015 	ldrb.w	r9, [r4, #21]
 800cc7c:	f000 f95e 	bl	800cf3c <ucdr_advance_buffer>
 800cc80:	2108      	movs	r1, #8
 800cc82:	4620      	mov	r0, r4
 800cc84:	f000 f8b6 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d14f      	bne.n	800cd2c <ucdr_deserialize_endian_double+0xc8>
 800cc8c:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 800cc90:	4546      	cmp	r6, r8
 800cc92:	d946      	bls.n	800cd22 <ucdr_deserialize_endian_double+0xbe>
 800cc94:	6923      	ldr	r3, [r4, #16]
 800cc96:	60a6      	str	r6, [r4, #8]
 800cc98:	eba6 0608 	sub.w	r6, r6, r8
 800cc9c:	4433      	add	r3, r6
 800cc9e:	f1c6 0a08 	rsb	sl, r6, #8
 800cca2:	6123      	str	r3, [r4, #16]
 800cca4:	4651      	mov	r1, sl
 800cca6:	4620      	mov	r0, r4
 800cca8:	f000 f8b0 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d069      	beq.n	800cd84 <ucdr_deserialize_endian_double+0x120>
 800ccb0:	2f01      	cmp	r7, #1
 800ccb2:	f000 808b 	beq.w	800cdcc <ucdr_deserialize_endian_double+0x168>
 800ccb6:	f898 3007 	ldrb.w	r3, [r8, #7]
 800ccba:	702b      	strb	r3, [r5, #0]
 800ccbc:	f898 3006 	ldrb.w	r3, [r8, #6]
 800ccc0:	706b      	strb	r3, [r5, #1]
 800ccc2:	2e01      	cmp	r6, #1
 800ccc4:	d06b      	beq.n	800cd9e <ucdr_deserialize_endian_double+0x13a>
 800ccc6:	f898 3005 	ldrb.w	r3, [r8, #5]
 800ccca:	70ab      	strb	r3, [r5, #2]
 800cccc:	2e02      	cmp	r6, #2
 800ccce:	f000 808e 	beq.w	800cdee <ucdr_deserialize_endian_double+0x18a>
 800ccd2:	f898 3004 	ldrb.w	r3, [r8, #4]
 800ccd6:	70eb      	strb	r3, [r5, #3]
 800ccd8:	2e03      	cmp	r6, #3
 800ccda:	f000 8086 	beq.w	800cdea <ucdr_deserialize_endian_double+0x186>
 800ccde:	f898 3003 	ldrb.w	r3, [r8, #3]
 800cce2:	712b      	strb	r3, [r5, #4]
 800cce4:	2e04      	cmp	r6, #4
 800cce6:	d07e      	beq.n	800cde6 <ucdr_deserialize_endian_double+0x182>
 800cce8:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ccec:	716b      	strb	r3, [r5, #5]
 800ccee:	2e05      	cmp	r6, #5
 800ccf0:	d077      	beq.n	800cde2 <ucdr_deserialize_endian_double+0x17e>
 800ccf2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ccf6:	71ab      	strb	r3, [r5, #6]
 800ccf8:	2e06      	cmp	r6, #6
 800ccfa:	f105 0507 	add.w	r5, r5, #7
 800ccfe:	d062      	beq.n	800cdc6 <ucdr_deserialize_endian_double+0x162>
 800cd00:	f898 3000 	ldrb.w	r3, [r8]
 800cd04:	702b      	strb	r3, [r5, #0]
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	68a2      	ldr	r2, [r4, #8]
 800cd0a:	7da0      	ldrb	r0, [r4, #22]
 800cd0c:	2108      	movs	r1, #8
 800cd0e:	3308      	adds	r3, #8
 800cd10:	4452      	add	r2, sl
 800cd12:	1b9b      	subs	r3, r3, r6
 800cd14:	7561      	strb	r1, [r4, #21]
 800cd16:	60a2      	str	r2, [r4, #8]
 800cd18:	6123      	str	r3, [r4, #16]
 800cd1a:	f080 0001 	eor.w	r0, r0, #1
 800cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd22:	2108      	movs	r1, #8
 800cd24:	4620      	mov	r0, r4
 800cd26:	f000 f871 	bl	800ce0c <ucdr_check_final_buffer_behavior>
 800cd2a:	b308      	cbz	r0, 800cd70 <ucdr_deserialize_endian_double+0x10c>
 800cd2c:	2f01      	cmp	r7, #1
 800cd2e:	68a3      	ldr	r3, [r4, #8]
 800cd30:	d023      	beq.n	800cd7a <ucdr_deserialize_endian_double+0x116>
 800cd32:	79db      	ldrb	r3, [r3, #7]
 800cd34:	702b      	strb	r3, [r5, #0]
 800cd36:	68a3      	ldr	r3, [r4, #8]
 800cd38:	799b      	ldrb	r3, [r3, #6]
 800cd3a:	706b      	strb	r3, [r5, #1]
 800cd3c:	68a3      	ldr	r3, [r4, #8]
 800cd3e:	795b      	ldrb	r3, [r3, #5]
 800cd40:	70ab      	strb	r3, [r5, #2]
 800cd42:	68a3      	ldr	r3, [r4, #8]
 800cd44:	791b      	ldrb	r3, [r3, #4]
 800cd46:	70eb      	strb	r3, [r5, #3]
 800cd48:	68a3      	ldr	r3, [r4, #8]
 800cd4a:	78db      	ldrb	r3, [r3, #3]
 800cd4c:	712b      	strb	r3, [r5, #4]
 800cd4e:	68a3      	ldr	r3, [r4, #8]
 800cd50:	789b      	ldrb	r3, [r3, #2]
 800cd52:	716b      	strb	r3, [r5, #5]
 800cd54:	68a3      	ldr	r3, [r4, #8]
 800cd56:	785b      	ldrb	r3, [r3, #1]
 800cd58:	71ab      	strb	r3, [r5, #6]
 800cd5a:	68a3      	ldr	r3, [r4, #8]
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	71eb      	strb	r3, [r5, #7]
 800cd60:	68a2      	ldr	r2, [r4, #8]
 800cd62:	6923      	ldr	r3, [r4, #16]
 800cd64:	3208      	adds	r2, #8
 800cd66:	3308      	adds	r3, #8
 800cd68:	2108      	movs	r1, #8
 800cd6a:	60a2      	str	r2, [r4, #8]
 800cd6c:	6123      	str	r3, [r4, #16]
 800cd6e:	7561      	strb	r1, [r4, #21]
 800cd70:	7da0      	ldrb	r0, [r4, #22]
 800cd72:	f080 0001 	eor.w	r0, r0, #1
 800cd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	606b      	str	r3, [r5, #4]
 800cd80:	602a      	str	r2, [r5, #0]
 800cd82:	e7ed      	b.n	800cd60 <ucdr_deserialize_endian_double+0xfc>
 800cd84:	68a2      	ldr	r2, [r4, #8]
 800cd86:	6923      	ldr	r3, [r4, #16]
 800cd88:	7da0      	ldrb	r0, [r4, #22]
 800cd8a:	f884 9015 	strb.w	r9, [r4, #21]
 800cd8e:	1b92      	subs	r2, r2, r6
 800cd90:	1b9b      	subs	r3, r3, r6
 800cd92:	60a2      	str	r2, [r4, #8]
 800cd94:	6123      	str	r3, [r4, #16]
 800cd96:	f080 0001 	eor.w	r0, r0, #1
 800cd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd9e:	68a3      	ldr	r3, [r4, #8]
 800cda0:	795b      	ldrb	r3, [r3, #5]
 800cda2:	70ab      	strb	r3, [r5, #2]
 800cda4:	3503      	adds	r5, #3
 800cda6:	68a3      	ldr	r3, [r4, #8]
 800cda8:	791b      	ldrb	r3, [r3, #4]
 800cdaa:	f805 3b01 	strb.w	r3, [r5], #1
 800cdae:	68a3      	ldr	r3, [r4, #8]
 800cdb0:	78db      	ldrb	r3, [r3, #3]
 800cdb2:	f805 3b01 	strb.w	r3, [r5], #1
 800cdb6:	68a3      	ldr	r3, [r4, #8]
 800cdb8:	789b      	ldrb	r3, [r3, #2]
 800cdba:	f805 3b01 	strb.w	r3, [r5], #1
 800cdbe:	68a3      	ldr	r3, [r4, #8]
 800cdc0:	785b      	ldrb	r3, [r3, #1]
 800cdc2:	f805 3b01 	strb.w	r3, [r5], #1
 800cdc6:	f8d4 8008 	ldr.w	r8, [r4, #8]
 800cdca:	e799      	b.n	800cd00 <ucdr_deserialize_endian_double+0x9c>
 800cdcc:	4641      	mov	r1, r8
 800cdce:	4632      	mov	r2, r6
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	f00b fb7a 	bl	80184ca <memcpy>
 800cdd6:	68a1      	ldr	r1, [r4, #8]
 800cdd8:	4652      	mov	r2, sl
 800cdda:	19a8      	adds	r0, r5, r6
 800cddc:	f00b fb75 	bl	80184ca <memcpy>
 800cde0:	e791      	b.n	800cd06 <ucdr_deserialize_endian_double+0xa2>
 800cde2:	3506      	adds	r5, #6
 800cde4:	e7eb      	b.n	800cdbe <ucdr_deserialize_endian_double+0x15a>
 800cde6:	3505      	adds	r5, #5
 800cde8:	e7e5      	b.n	800cdb6 <ucdr_deserialize_endian_double+0x152>
 800cdea:	3504      	adds	r5, #4
 800cdec:	e7df      	b.n	800cdae <ucdr_deserialize_endian_double+0x14a>
 800cdee:	3503      	adds	r5, #3
 800cdf0:	e7d9      	b.n	800cda6 <ucdr_deserialize_endian_double+0x142>
 800cdf2:	bf00      	nop

0800cdf4 <ucdr_check_buffer_available_for>:
 800cdf4:	7d83      	ldrb	r3, [r0, #22]
 800cdf6:	b93b      	cbnz	r3, 800ce08 <ucdr_check_buffer_available_for+0x14>
 800cdf8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800cdfc:	440b      	add	r3, r1
 800cdfe:	4298      	cmp	r0, r3
 800ce00:	bf34      	ite	cc
 800ce02:	2000      	movcc	r0, #0
 800ce04:	2001      	movcs	r0, #1
 800ce06:	4770      	bx	lr
 800ce08:	2000      	movs	r0, #0
 800ce0a:	4770      	bx	lr

0800ce0c <ucdr_check_final_buffer_behavior>:
 800ce0c:	7d83      	ldrb	r3, [r0, #22]
 800ce0e:	b943      	cbnz	r3, 800ce22 <ucdr_check_final_buffer_behavior+0x16>
 800ce10:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ce14:	4291      	cmp	r1, r2
 800ce16:	b510      	push	{r4, lr}
 800ce18:	4604      	mov	r4, r0
 800ce1a:	d205      	bcs.n	800ce28 <ucdr_check_final_buffer_behavior+0x1c>
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	4618      	mov	r0, r3
 800ce20:	bd10      	pop	{r4, pc}
 800ce22:	2300      	movs	r3, #0
 800ce24:	4618      	mov	r0, r3
 800ce26:	4770      	bx	lr
 800ce28:	6982      	ldr	r2, [r0, #24]
 800ce2a:	b13a      	cbz	r2, 800ce3c <ucdr_check_final_buffer_behavior+0x30>
 800ce2c:	69c1      	ldr	r1, [r0, #28]
 800ce2e:	4790      	blx	r2
 800ce30:	f080 0301 	eor.w	r3, r0, #1
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	75a0      	strb	r0, [r4, #22]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	bd10      	pop	{r4, pc}
 800ce3c:	2001      	movs	r0, #1
 800ce3e:	75a0      	strb	r0, [r4, #22]
 800ce40:	e7fa      	b.n	800ce38 <ucdr_check_final_buffer_behavior+0x2c>
 800ce42:	bf00      	nop

0800ce44 <ucdr_set_on_full_buffer_callback>:
 800ce44:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop

0800ce4c <ucdr_init_buffer_origin_offset_endian>:
 800ce4c:	b410      	push	{r4}
 800ce4e:	9c01      	ldr	r4, [sp, #4]
 800ce50:	6001      	str	r1, [r0, #0]
 800ce52:	440a      	add	r2, r1
 800ce54:	6042      	str	r2, [r0, #4]
 800ce56:	190a      	adds	r2, r1, r4
 800ce58:	441c      	add	r4, r3
 800ce5a:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ce5e:	6082      	str	r2, [r0, #8]
 800ce60:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ce64:	7503      	strb	r3, [r0, #20]
 800ce66:	2200      	movs	r2, #0
 800ce68:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ce6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce70:	7542      	strb	r2, [r0, #21]
 800ce72:	7582      	strb	r2, [r0, #22]
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop

0800ce78 <ucdr_init_buffer_origin_offset>:
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	9c04      	ldr	r4, [sp, #16]
 800ce7e:	9400      	str	r4, [sp, #0]
 800ce80:	2401      	movs	r4, #1
 800ce82:	9401      	str	r4, [sp, #4]
 800ce84:	f7ff ffe2 	bl	800ce4c <ucdr_init_buffer_origin_offset_endian>
 800ce88:	b002      	add	sp, #8
 800ce8a:	bd10      	pop	{r4, pc}

0800ce8c <ucdr_init_buffer_origin>:
 800ce8c:	b510      	push	{r4, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	2400      	movs	r4, #0
 800ce92:	9400      	str	r4, [sp, #0]
 800ce94:	f7ff fff0 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 800ce98:	b002      	add	sp, #8
 800ce9a:	bd10      	pop	{r4, pc}

0800ce9c <ucdr_init_buffer>:
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	f7ff bff5 	b.w	800ce8c <ucdr_init_buffer_origin>
 800cea2:	bf00      	nop

0800cea4 <ucdr_alignment>:
 800cea4:	fbb0 f3f1 	udiv	r3, r0, r1
 800cea8:	fb03 0011 	mls	r0, r3, r1, r0
 800ceac:	1a08      	subs	r0, r1, r0
 800ceae:	3901      	subs	r1, #1
 800ceb0:	4008      	ands	r0, r1
 800ceb2:	4770      	bx	lr

0800ceb4 <ucdr_buffer_alignment>:
 800ceb4:	7d43      	ldrb	r3, [r0, #21]
 800ceb6:	428b      	cmp	r3, r1
 800ceb8:	d208      	bcs.n	800cecc <ucdr_buffer_alignment+0x18>
 800ceba:	6900      	ldr	r0, [r0, #16]
 800cebc:	fbb0 f3f1 	udiv	r3, r0, r1
 800cec0:	fb01 0013 	mls	r0, r1, r3, r0
 800cec4:	1a08      	subs	r0, r1, r0
 800cec6:	3901      	subs	r1, #1
 800cec8:	4008      	ands	r0, r1
 800ceca:	4770      	bx	lr
 800cecc:	2000      	movs	r0, #0
 800cece:	4770      	bx	lr

0800ced0 <ucdr_align_to>:
 800ced0:	b538      	push	{r3, r4, r5, lr}
 800ced2:	4604      	mov	r4, r0
 800ced4:	460d      	mov	r5, r1
 800ced6:	f7ff ffed 	bl	800ceb4 <ucdr_buffer_alignment>
 800ceda:	68a3      	ldr	r3, [r4, #8]
 800cedc:	6861      	ldr	r1, [r4, #4]
 800cede:	6922      	ldr	r2, [r4, #16]
 800cee0:	7565      	strb	r5, [r4, #21]
 800cee2:	4403      	add	r3, r0
 800cee4:	428b      	cmp	r3, r1
 800cee6:	bf28      	it	cs
 800cee8:	460b      	movcs	r3, r1
 800ceea:	4402      	add	r2, r0
 800ceec:	60a3      	str	r3, [r4, #8]
 800ceee:	6122      	str	r2, [r4, #16]
 800cef0:	bd38      	pop	{r3, r4, r5, pc}
 800cef2:	bf00      	nop

0800cef4 <ucdr_buffer_length>:
 800cef4:	6882      	ldr	r2, [r0, #8]
 800cef6:	6800      	ldr	r0, [r0, #0]
 800cef8:	1a10      	subs	r0, r2, r0
 800cefa:	4770      	bx	lr

0800cefc <ucdr_buffer_remaining>:
 800cefc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800cf00:	1a10      	subs	r0, r2, r0
 800cf02:	4770      	bx	lr

0800cf04 <ucdr_check_final_buffer_behavior_array>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	7d83      	ldrb	r3, [r0, #22]
 800cf08:	b963      	cbnz	r3, 800cf24 <ucdr_check_final_buffer_behavior_array+0x20>
 800cf0a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	4604      	mov	r4, r0
 800cf12:	460d      	mov	r5, r1
 800cf14:	d308      	bcc.n	800cf28 <ucdr_check_final_buffer_behavior_array+0x24>
 800cf16:	b139      	cbz	r1, 800cf28 <ucdr_check_final_buffer_behavior_array+0x24>
 800cf18:	6983      	ldr	r3, [r0, #24]
 800cf1a:	b163      	cbz	r3, 800cf36 <ucdr_check_final_buffer_behavior_array+0x32>
 800cf1c:	69c1      	ldr	r1, [r0, #28]
 800cf1e:	4798      	blx	r3
 800cf20:	75a0      	strb	r0, [r4, #22]
 800cf22:	b108      	cbz	r0, 800cf28 <ucdr_check_final_buffer_behavior_array+0x24>
 800cf24:	2000      	movs	r0, #0
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f7ff ffe7 	bl	800cefc <ucdr_buffer_remaining>
 800cf2e:	42a8      	cmp	r0, r5
 800cf30:	bf28      	it	cs
 800cf32:	4628      	movcs	r0, r5
 800cf34:	bd38      	pop	{r3, r4, r5, pc}
 800cf36:	2301      	movs	r3, #1
 800cf38:	7583      	strb	r3, [r0, #22]
 800cf3a:	e7f3      	b.n	800cf24 <ucdr_check_final_buffer_behavior_array+0x20>

0800cf3c <ucdr_advance_buffer>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4604      	mov	r4, r0
 800cf40:	460d      	mov	r5, r1
 800cf42:	f7ff ff57 	bl	800cdf4 <ucdr_check_buffer_available_for>
 800cf46:	b178      	cbz	r0, 800cf68 <ucdr_advance_buffer+0x2c>
 800cf48:	6923      	ldr	r3, [r4, #16]
 800cf4a:	68a2      	ldr	r2, [r4, #8]
 800cf4c:	442b      	add	r3, r5
 800cf4e:	6123      	str	r3, [r4, #16]
 800cf50:	2301      	movs	r3, #1
 800cf52:	442a      	add	r2, r5
 800cf54:	7563      	strb	r3, [r4, #21]
 800cf56:	60a2      	str	r2, [r4, #8]
 800cf58:	bd38      	pop	{r3, r4, r5, pc}
 800cf5a:	68a2      	ldr	r2, [r4, #8]
 800cf5c:	6923      	ldr	r3, [r4, #16]
 800cf5e:	4402      	add	r2, r0
 800cf60:	4403      	add	r3, r0
 800cf62:	1a2d      	subs	r5, r5, r0
 800cf64:	60a2      	str	r2, [r4, #8]
 800cf66:	6123      	str	r3, [r4, #16]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f7ff ffc9 	bl	800cf04 <ucdr_check_final_buffer_behavior_array>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d1f1      	bne.n	800cf5a <ucdr_advance_buffer+0x1e>
 800cf76:	2301      	movs	r3, #1
 800cf78:	7563      	strb	r3, [r4, #21]
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}

0800cf7c <ucdr_serialize_sequence_char>:
 800cf7c:	b570      	push	{r4, r5, r6, lr}
 800cf7e:	460e      	mov	r6, r1
 800cf80:	4615      	mov	r5, r2
 800cf82:	7d01      	ldrb	r1, [r0, #20]
 800cf84:	4604      	mov	r4, r0
 800cf86:	f7fe ff7f 	bl	800be88 <ucdr_serialize_endian_uint32_t>
 800cf8a:	b90d      	cbnz	r5, 800cf90 <ucdr_serialize_sequence_char+0x14>
 800cf8c:	2001      	movs	r0, #1
 800cf8e:	bd70      	pop	{r4, r5, r6, pc}
 800cf90:	7d21      	ldrb	r1, [r4, #20]
 800cf92:	462b      	mov	r3, r5
 800cf94:	4632      	mov	r2, r6
 800cf96:	4620      	mov	r0, r4
 800cf98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf9c:	f7fe baba 	b.w	800b514 <ucdr_serialize_endian_array_char>

0800cfa0 <ucdr_deserialize_sequence_char>:
 800cfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa4:	461d      	mov	r5, r3
 800cfa6:	4616      	mov	r6, r2
 800cfa8:	460f      	mov	r7, r1
 800cfaa:	461a      	mov	r2, r3
 800cfac:	7d01      	ldrb	r1, [r0, #20]
 800cfae:	4604      	mov	r4, r0
 800cfb0:	f7ff f888 	bl	800c0c4 <ucdr_deserialize_endian_uint32_t>
 800cfb4:	682b      	ldr	r3, [r5, #0]
 800cfb6:	429e      	cmp	r6, r3
 800cfb8:	d208      	bcs.n	800cfcc <ucdr_deserialize_sequence_char+0x2c>
 800cfba:	2201      	movs	r2, #1
 800cfbc:	75a2      	strb	r2, [r4, #22]
 800cfbe:	7d21      	ldrb	r1, [r4, #20]
 800cfc0:	463a      	mov	r2, r7
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc8:	f7fe bad6 	b.w	800b578 <ucdr_deserialize_endian_array_char>
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1f6      	bne.n	800cfbe <ucdr_deserialize_sequence_char+0x1e>
 800cfd0:	2001      	movs	r0, #1
 800cfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd6:	bf00      	nop

0800cfd8 <ucdr_serialize_sequence_uint8_t>:
 800cfd8:	b570      	push	{r4, r5, r6, lr}
 800cfda:	460e      	mov	r6, r1
 800cfdc:	4615      	mov	r5, r2
 800cfde:	7d01      	ldrb	r1, [r0, #20]
 800cfe0:	4604      	mov	r4, r0
 800cfe2:	f7fe ff51 	bl	800be88 <ucdr_serialize_endian_uint32_t>
 800cfe6:	b90d      	cbnz	r5, 800cfec <ucdr_serialize_sequence_uint8_t+0x14>
 800cfe8:	2001      	movs	r0, #1
 800cfea:	bd70      	pop	{r4, r5, r6, pc}
 800cfec:	7d21      	ldrb	r1, [r4, #20]
 800cfee:	462b      	mov	r3, r5
 800cff0:	4632      	mov	r2, r6
 800cff2:	4620      	mov	r0, r4
 800cff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cff8:	f7fe bb22 	b.w	800b640 <ucdr_serialize_endian_array_uint8_t>

0800cffc <ucdr_deserialize_sequence_uint8_t>:
 800cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d000:	461d      	mov	r5, r3
 800d002:	4616      	mov	r6, r2
 800d004:	460f      	mov	r7, r1
 800d006:	461a      	mov	r2, r3
 800d008:	7d01      	ldrb	r1, [r0, #20]
 800d00a:	4604      	mov	r4, r0
 800d00c:	f7ff f85a 	bl	800c0c4 <ucdr_deserialize_endian_uint32_t>
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	429e      	cmp	r6, r3
 800d014:	d208      	bcs.n	800d028 <ucdr_deserialize_sequence_uint8_t+0x2c>
 800d016:	2201      	movs	r2, #1
 800d018:	75a2      	strb	r2, [r4, #22]
 800d01a:	7d21      	ldrb	r1, [r4, #20]
 800d01c:	463a      	mov	r2, r7
 800d01e:	4620      	mov	r0, r4
 800d020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d024:	f7fe bb70 	b.w	800b708 <ucdr_deserialize_endian_array_uint8_t>
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1f6      	bne.n	800d01a <ucdr_deserialize_sequence_uint8_t+0x1e>
 800d02c:	2001      	movs	r0, #1
 800d02e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d032:	bf00      	nop

0800d034 <uxr_buffer_delete_entity>:
 800d034:	b510      	push	{r4, lr}
 800d036:	2300      	movs	r3, #0
 800d038:	b08e      	sub	sp, #56	@ 0x38
 800d03a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d03e:	2303      	movs	r3, #3
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	2204      	movs	r2, #4
 800d044:	ab06      	add	r3, sp, #24
 800d046:	4604      	mov	r4, r0
 800d048:	f001 fa9a 	bl	800e580 <uxr_prepare_stream_to_write_submessage>
 800d04c:	b918      	cbnz	r0, 800d056 <uxr_buffer_delete_entity+0x22>
 800d04e:	4604      	mov	r4, r0
 800d050:	4620      	mov	r0, r4
 800d052:	b00e      	add	sp, #56	@ 0x38
 800d054:	bd10      	pop	{r4, pc}
 800d056:	9902      	ldr	r1, [sp, #8]
 800d058:	aa05      	add	r2, sp, #20
 800d05a:	4620      	mov	r0, r4
 800d05c:	f001 fbca 	bl	800e7f4 <uxr_init_base_object_request>
 800d060:	a905      	add	r1, sp, #20
 800d062:	4604      	mov	r4, r0
 800d064:	a806      	add	r0, sp, #24
 800d066:	f003 f963 	bl	8010330 <uxr_serialize_DELETE_Payload>
 800d06a:	4620      	mov	r0, r4
 800d06c:	b00e      	add	sp, #56	@ 0x38
 800d06e:	bd10      	pop	{r4, pc}

0800d070 <uxr_common_create_entity>:
 800d070:	b510      	push	{r4, lr}
 800d072:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d076:	b08c      	sub	sp, #48	@ 0x30
 800d078:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d07c:	f1bc 0f01 	cmp.w	ip, #1
 800d080:	bf08      	it	eq
 800d082:	f003 0201 	andeq.w	r2, r3, #1
 800d086:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800d08a:	bf18      	it	ne
 800d08c:	2200      	movne	r2, #0
 800d08e:	330e      	adds	r3, #14
 800d090:	441a      	add	r2, r3
 800d092:	2301      	movs	r3, #1
 800d094:	e9cd 3100 	strd	r3, r1, [sp]
 800d098:	b292      	uxth	r2, r2
 800d09a:	9903      	ldr	r1, [sp, #12]
 800d09c:	ab04      	add	r3, sp, #16
 800d09e:	4604      	mov	r4, r0
 800d0a0:	f001 fa6e 	bl	800e580 <uxr_prepare_stream_to_write_submessage>
 800d0a4:	b918      	cbnz	r0, 800d0ae <uxr_common_create_entity+0x3e>
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	b00c      	add	sp, #48	@ 0x30
 800d0ac:	bd10      	pop	{r4, pc}
 800d0ae:	9902      	ldr	r1, [sp, #8]
 800d0b0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f001 fb9e 	bl	800e7f4 <uxr_init_base_object_request>
 800d0b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	a804      	add	r0, sp, #16
 800d0be:	f003 f881 	bl	80101c4 <uxr_serialize_CREATE_Payload>
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	b00c      	add	sp, #48	@ 0x30
 800d0c6:	bd10      	pop	{r4, pc}

0800d0c8 <uxr_buffer_create_participant_bin>:
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800d0ce:	ac11      	add	r4, sp, #68	@ 0x44
 800d0d0:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	7223      	strb	r3, [r4, #8]
 800d0d8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800d0da:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800d0de:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	7122      	strb	r2, [r4, #4]
 800d0ea:	f88d 1014 	strb.w	r1, [sp, #20]
 800d0ee:	b1cb      	cbz	r3, 800d124 <uxr_buffer_create_participant_bin+0x5c>
 800d0f0:	f88d 201c 	strb.w	r2, [sp, #28]
 800d0f4:	9308      	str	r3, [sp, #32]
 800d0f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0fa:	a915      	add	r1, sp, #84	@ 0x54
 800d0fc:	a809      	add	r0, sp, #36	@ 0x24
 800d0fe:	f7ff fecd 	bl	800ce9c <ucdr_init_buffer>
 800d102:	a905      	add	r1, sp, #20
 800d104:	a809      	add	r0, sp, #36	@ 0x24
 800d106:	f002 fd53 	bl	800fbb0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800d10a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d10c:	9600      	str	r6, [sp, #0]
 800d10e:	9401      	str	r4, [sp, #4]
 800d110:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d114:	60e3      	str	r3, [r4, #12]
 800d116:	4628      	mov	r0, r5
 800d118:	b29b      	uxth	r3, r3
 800d11a:	f7ff ffa9 	bl	800d070 <uxr_common_create_entity>
 800d11e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800d122:	bd70      	pop	{r4, r5, r6, pc}
 800d124:	f88d 301c 	strb.w	r3, [sp, #28]
 800d128:	e7e5      	b.n	800d0f6 <uxr_buffer_create_participant_bin+0x2e>
 800d12a:	bf00      	nop

0800d12c <uxr_buffer_create_topic_bin>:
 800d12c:	b570      	push	{r4, r5, r6, lr}
 800d12e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800d132:	4605      	mov	r5, r0
 800d134:	9105      	str	r1, [sp, #20]
 800d136:	4618      	mov	r0, r3
 800d138:	a997      	add	r1, sp, #604	@ 0x25c
 800d13a:	2302      	movs	r3, #2
 800d13c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800d140:	9204      	str	r2, [sp, #16]
 800d142:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800d146:	f000 f99b 	bl	800d480 <uxr_object_id_to_raw>
 800d14a:	2303      	movs	r3, #3
 800d14c:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800d150:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800d152:	9306      	str	r3, [sp, #24]
 800d154:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800d156:	930a      	str	r3, [sp, #40]	@ 0x28
 800d158:	2301      	movs	r3, #1
 800d15a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800d15e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d162:	2300      	movs	r3, #0
 800d164:	a917      	add	r1, sp, #92	@ 0x5c
 800d166:	a80b      	add	r0, sp, #44	@ 0x2c
 800d168:	f88d 301c 	strb.w	r3, [sp, #28]
 800d16c:	f7ff fe96 	bl	800ce9c <ucdr_init_buffer>
 800d170:	a906      	add	r1, sp, #24
 800d172:	a80b      	add	r0, sp, #44	@ 0x2c
 800d174:	f002 fd3e 	bl	800fbf4 <uxr_serialize_OBJK_Topic_Binary>
 800d178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d17a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d17c:	ac13      	add	r4, sp, #76	@ 0x4c
 800d17e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d182:	9600      	str	r6, [sp, #0]
 800d184:	9401      	str	r4, [sp, #4]
 800d186:	b29b      	uxth	r3, r3
 800d188:	4628      	mov	r0, r5
 800d18a:	f7ff ff71 	bl	800d070 <uxr_common_create_entity>
 800d18e:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800d192:	bd70      	pop	{r4, r5, r6, pc}

0800d194 <uxr_buffer_create_publisher_bin>:
 800d194:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d196:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800d19a:	4605      	mov	r5, r0
 800d19c:	9105      	str	r1, [sp, #20]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	2603      	movs	r6, #3
 800d1a2:	a992      	add	r1, sp, #584	@ 0x248
 800d1a4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800d1a8:	9204      	str	r2, [sp, #16]
 800d1aa:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800d1ae:	f000 f967 	bl	800d480 <uxr_object_id_to_raw>
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d1b8:	a912      	add	r1, sp, #72	@ 0x48
 800d1ba:	a806      	add	r0, sp, #24
 800d1bc:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800d1c0:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800d1c4:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800d1c8:	f7ff fe68 	bl	800ce9c <ucdr_init_buffer>
 800d1cc:	a993      	add	r1, sp, #588	@ 0x24c
 800d1ce:	a806      	add	r0, sp, #24
 800d1d0:	f002 fdc6 	bl	800fd60 <uxr_serialize_OBJK_Publisher_Binary>
 800d1d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1d6:	9311      	str	r3, [sp, #68]	@ 0x44
 800d1d8:	ac0e      	add	r4, sp, #56	@ 0x38
 800d1da:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d1de:	9700      	str	r7, [sp, #0]
 800d1e0:	9401      	str	r4, [sp, #4]
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	f7ff ff43 	bl	800d070 <uxr_common_create_entity>
 800d1ea:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800d1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1f0 <uxr_buffer_create_datawriter_bin>:
 800d1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1f2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800d1f6:	ac1d      	add	r4, sp, #116	@ 0x74
 800d1f8:	9105      	str	r1, [sp, #20]
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	a9a1      	add	r1, sp, #644	@ 0x284
 800d1fe:	4618      	mov	r0, r3
 800d200:	2305      	movs	r3, #5
 800d202:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 800d206:	9204      	str	r2, [sp, #16]
 800d208:	7123      	strb	r3, [r4, #4]
 800d20a:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 800d20e:	f000 f937 	bl	800d480 <uxr_object_id_to_raw>
 800d212:	2303      	movs	r3, #3
 800d214:	a90e      	add	r1, sp, #56	@ 0x38
 800d216:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800d218:	7223      	strb	r3, [r4, #8]
 800d21a:	f000 f931 	bl	800d480 <uxr_object_id_to_raw>
 800d21e:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 800d222:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 800d226:	2200      	movs	r2, #0
 800d228:	3f00      	subs	r7, #0
 800d22a:	fab3 f383 	clz	r3, r3
 800d22e:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 800d232:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 800d236:	bf18      	it	ne
 800d238:	2701      	movne	r7, #1
 800d23a:	095b      	lsrs	r3, r3, #5
 800d23c:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 800d240:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 800d244:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 800d248:	2201      	movs	r2, #1
 800d24a:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 800d24e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d252:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 800d256:	b919      	cbnz	r1, 800d260 <uxr_buffer_create_datawriter_bin+0x70>
 800d258:	f043 0302 	orr.w	r3, r3, #2
 800d25c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d260:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 800d264:	2a01      	cmp	r2, #1
 800d266:	d022      	beq.n	800d2ae <uxr_buffer_create_datawriter_bin+0xbe>
 800d268:	2a03      	cmp	r2, #3
 800d26a:	d01b      	beq.n	800d2a4 <uxr_buffer_create_datawriter_bin+0xb4>
 800d26c:	b91a      	cbnz	r2, 800d276 <uxr_buffer_create_datawriter_bin+0x86>
 800d26e:	f043 0308 	orr.w	r3, r3, #8
 800d272:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d276:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d27a:	a921      	add	r1, sp, #132	@ 0x84
 800d27c:	a806      	add	r0, sp, #24
 800d27e:	f7ff fe0d 	bl	800ce9c <ucdr_init_buffer>
 800d282:	a90e      	add	r1, sp, #56	@ 0x38
 800d284:	a806      	add	r0, sp, #24
 800d286:	f002 fdd1 	bl	800fe2c <uxr_serialize_OBJK_DataWriter_Binary>
 800d28a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d28c:	9600      	str	r6, [sp, #0]
 800d28e:	9401      	str	r4, [sp, #4]
 800d290:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d294:	60e3      	str	r3, [r4, #12]
 800d296:	4628      	mov	r0, r5
 800d298:	b29b      	uxth	r3, r3
 800d29a:	f7ff fee9 	bl	800d070 <uxr_common_create_entity>
 800d29e:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800d2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a4:	f043 0320 	orr.w	r3, r3, #32
 800d2a8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d2ac:	e7e3      	b.n	800d276 <uxr_buffer_create_datawriter_bin+0x86>
 800d2ae:	f043 0310 	orr.w	r3, r3, #16
 800d2b2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d2b6:	e7de      	b.n	800d276 <uxr_buffer_create_datawriter_bin+0x86>

0800d2b8 <get_custom_error>:
 800d2b8:	4b01      	ldr	r3, [pc, #4]	@ (800d2c0 <get_custom_error+0x8>)
 800d2ba:	7818      	ldrb	r0, [r3, #0]
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	20010080 	.word	0x20010080

0800d2c4 <recv_custom_msg>:
 800d2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c8:	b089      	sub	sp, #36	@ 0x24
 800d2ca:	4693      	mov	fp, r2
 800d2cc:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800d2d0:	9104      	str	r1, [sp, #16]
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800d2d8:	9305      	str	r3, [sp, #20]
 800d2da:	4604      	mov	r4, r0
 800d2dc:	f88d 101e 	strb.w	r1, [sp, #30]
 800d2e0:	b332      	cbz	r2, 800d330 <recv_custom_msg+0x6c>
 800d2e2:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 800d2e6:	f10d 091f 	add.w	r9, sp, #31
 800d2ea:	f10d 0814 	add.w	r8, sp, #20
 800d2ee:	f10d 071e 	add.w	r7, sp, #30
 800d2f2:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800d2f6:	e004      	b.n	800d302 <recv_custom_msg+0x3e>
 800d2f8:	9b05      	ldr	r3, [sp, #20]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	dd10      	ble.n	800d320 <recv_custom_msg+0x5c>
 800d2fe:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 800d302:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d306:	e9cd 6700 	strd	r6, r7, [sp]
 800d30a:	4623      	mov	r3, r4
 800d30c:	4622      	mov	r2, r4
 800d30e:	4629      	mov	r1, r5
 800d310:	4650      	mov	r0, sl
 800d312:	f001 fc81 	bl	800ec18 <uxr_read_framed_msg>
 800d316:	2800      	cmp	r0, #0
 800d318:	d0ee      	beq.n	800d2f8 <recv_custom_msg+0x34>
 800d31a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d31e:	b1a3      	cbz	r3, 800d34a <recv_custom_msg+0x86>
 800d320:	4b0e      	ldr	r3, [pc, #56]	@ (800d35c <recv_custom_msg+0x98>)
 800d322:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800d326:	701a      	strb	r2, [r3, #0]
 800d328:	2000      	movs	r0, #0
 800d32a:	b009      	add	sp, #36	@ 0x24
 800d32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d330:	f10d 021f 	add.w	r2, sp, #31
 800d334:	9200      	str	r2, [sp, #0]
 800d336:	4601      	mov	r1, r0
 800d338:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d33c:	47a8      	blx	r5
 800d33e:	2800      	cmp	r0, #0
 800d340:	d0ee      	beq.n	800d320 <recv_custom_msg+0x5c>
 800d342:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1ea      	bne.n	800d320 <recv_custom_msg+0x5c>
 800d34a:	9b04      	ldr	r3, [sp, #16]
 800d34c:	f8cb 0000 	str.w	r0, [fp]
 800d350:	2001      	movs	r0, #1
 800d352:	601c      	str	r4, [r3, #0]
 800d354:	b009      	add	sp, #36	@ 0x24
 800d356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d35a:	bf00      	nop
 800d35c:	20010080 	.word	0x20010080

0800d360 <send_custom_msg>:
 800d360:	b570      	push	{r4, r5, r6, lr}
 800d362:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 800d366:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800d36a:	b086      	sub	sp, #24
 800d36c:	4616      	mov	r6, r2
 800d36e:	b965      	cbnz	r5, 800d38a <send_custom_msg+0x2a>
 800d370:	f10d 0317 	add.w	r3, sp, #23
 800d374:	47a0      	blx	r4
 800d376:	b108      	cbz	r0, 800d37c <send_custom_msg+0x1c>
 800d378:	42b0      	cmp	r0, r6
 800d37a:	d014      	beq.n	800d3a6 <send_custom_msg+0x46>
 800d37c:	4b0b      	ldr	r3, [pc, #44]	@ (800d3ac <send_custom_msg+0x4c>)
 800d37e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800d382:	701a      	strb	r2, [r3, #0]
 800d384:	2000      	movs	r0, #0
 800d386:	b006      	add	sp, #24
 800d388:	bd70      	pop	{r4, r5, r6, pc}
 800d38a:	f10d 0217 	add.w	r2, sp, #23
 800d38e:	9202      	str	r2, [sp, #8]
 800d390:	2200      	movs	r2, #0
 800d392:	e9cd 6200 	strd	r6, r2, [sp]
 800d396:	460b      	mov	r3, r1
 800d398:	4602      	mov	r2, r0
 800d39a:	4621      	mov	r1, r4
 800d39c:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800d3a0:	f001 fa5c 	bl	800e85c <uxr_write_framed_msg>
 800d3a4:	e7e7      	b.n	800d376 <send_custom_msg+0x16>
 800d3a6:	2001      	movs	r0, #1
 800d3a8:	b006      	add	sp, #24
 800d3aa:	bd70      	pop	{r4, r5, r6, pc}
 800d3ac:	20010080 	.word	0x20010080

0800d3b0 <uxr_set_custom_transport_callbacks>:
 800d3b0:	b410      	push	{r4}
 800d3b2:	9c01      	ldr	r4, [sp, #4]
 800d3b4:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800d3b8:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800d3bc:	9b02      	ldr	r3, [sp, #8]
 800d3be:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800d3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3c6:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800d3ca:	4770      	bx	lr

0800d3cc <uxr_init_custom_transport>:
 800d3cc:	b538      	push	{r3, r4, r5, lr}
 800d3ce:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800d3d2:	b303      	cbz	r3, 800d416 <uxr_init_custom_transport+0x4a>
 800d3d4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800d3d8:	4604      	mov	r4, r0
 800d3da:	b1e2      	cbz	r2, 800d416 <uxr_init_custom_transport+0x4a>
 800d3dc:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800d3e0:	b1ca      	cbz	r2, 800d416 <uxr_init_custom_transport+0x4a>
 800d3e2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800d3e6:	b1b2      	cbz	r2, 800d416 <uxr_init_custom_transport+0x4a>
 800d3e8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800d3ec:	4798      	blx	r3
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	b188      	cbz	r0, 800d416 <uxr_init_custom_transport+0x4a>
 800d3f2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800d3f6:	b98b      	cbnz	r3, 800d41c <uxr_init_custom_transport+0x50>
 800d3f8:	490b      	ldr	r1, [pc, #44]	@ (800d428 <uxr_init_custom_transport+0x5c>)
 800d3fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d42c <uxr_init_custom_transport+0x60>)
 800d3fc:	4a0c      	ldr	r2, [pc, #48]	@ (800d430 <uxr_init_custom_transport+0x64>)
 800d3fe:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800d402:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d406:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800d40a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800d40e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800d412:	4628      	mov	r0, r5
 800d414:	bd38      	pop	{r3, r4, r5, pc}
 800d416:	2500      	movs	r5, #0
 800d418:	4628      	mov	r0, r5
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	2100      	movs	r1, #0
 800d41e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800d422:	f001 fa15 	bl	800e850 <uxr_init_framing_io>
 800d426:	e7e7      	b.n	800d3f8 <uxr_init_custom_transport+0x2c>
 800d428:	0800d361 	.word	0x0800d361
 800d42c:	0800d2c5 	.word	0x0800d2c5
 800d430:	0800d2b9 	.word	0x0800d2b9

0800d434 <uxr_close_custom_transport>:
 800d434:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800d438:	4718      	bx	r3
 800d43a:	bf00      	nop

0800d43c <uxr_object_id>:
 800d43c:	b082      	sub	sp, #8
 800d43e:	2300      	movs	r3, #0
 800d440:	f88d 1006 	strb.w	r1, [sp, #6]
 800d444:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d448:	f360 030f 	bfi	r3, r0, #0, #16
 800d44c:	f362 431f 	bfi	r3, r2, #16, #16
 800d450:	4618      	mov	r0, r3
 800d452:	b002      	add	sp, #8
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop

0800d458 <uxr_object_id_from_raw>:
 800d458:	7843      	ldrb	r3, [r0, #1]
 800d45a:	7801      	ldrb	r1, [r0, #0]
 800d45c:	b082      	sub	sp, #8
 800d45e:	f003 020f 	and.w	r2, r3, #15
 800d462:	f88d 2006 	strb.w	r2, [sp, #6]
 800d466:	091b      	lsrs	r3, r3, #4
 800d468:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d46c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d470:	2000      	movs	r0, #0
 800d472:	f363 000f 	bfi	r0, r3, #0, #16
 800d476:	f362 401f 	bfi	r0, r2, #16, #16
 800d47a:	b002      	add	sp, #8
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop

0800d480 <uxr_object_id_to_raw>:
 800d480:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d484:	b082      	sub	sp, #8
 800d486:	f3c0 120b 	ubfx	r2, r0, #4, #12
 800d48a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800d48e:	700a      	strb	r2, [r1, #0]
 800d490:	704b      	strb	r3, [r1, #1]
 800d492:	b002      	add	sp, #8
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop

0800d498 <uxr_ping_agent_session>:
 800d498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d49c:	4616      	mov	r6, r2
 800d49e:	b091      	sub	sp, #68	@ 0x44
 800d4a0:	2210      	movs	r2, #16
 800d4a2:	4605      	mov	r5, r0
 800d4a4:	460f      	mov	r7, r1
 800d4a6:	a808      	add	r0, sp, #32
 800d4a8:	eb0d 0102 	add.w	r1, sp, r2
 800d4ac:	f7ff fcf6 	bl	800ce9c <ucdr_init_buffer>
 800d4b0:	4b20      	ldr	r3, [pc, #128]	@ (800d534 <uxr_ping_agent_session+0x9c>)
 800d4b2:	2400      	movs	r4, #0
 800d4b4:	881b      	ldrh	r3, [r3, #0]
 800d4b6:	f8ad 300a 	strh.w	r3, [sp, #10]
 800d4ba:	9400      	str	r4, [sp, #0]
 800d4bc:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800d4c0:	f04f 0802 	mov.w	r8, #2
 800d4c4:	7829      	ldrb	r1, [r5, #0]
 800d4c6:	f8ad 3008 	strh.w	r3, [sp, #8]
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	4623      	mov	r3, r4
 800d4ce:	a808      	add	r0, sp, #32
 800d4d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4d4:	f002 f93c 	bl	800f750 <uxr_serialize_message_header>
 800d4d8:	4641      	mov	r1, r8
 800d4da:	4623      	mov	r3, r4
 800d4dc:	2208      	movs	r2, #8
 800d4de:	a808      	add	r0, sp, #32
 800d4e0:	f001 ff38 	bl	800f354 <uxr_buffer_submessage_header>
 800d4e4:	a902      	add	r1, sp, #8
 800d4e6:	4680      	mov	r8, r0
 800d4e8:	a808      	add	r0, sp, #32
 800d4ea:	f002 fef9 	bl	80102e0 <uxr_serialize_GET_INFO_Payload>
 800d4ee:	f1b8 0f00 	cmp.w	r8, #0
 800d4f2:	d000      	beq.n	800d4f6 <uxr_ping_agent_session+0x5e>
 800d4f4:	b918      	cbnz	r0, 800d4fe <uxr_ping_agent_session+0x66>
 800d4f6:	2000      	movs	r0, #0
 800d4f8:	b011      	add	sp, #68	@ 0x44
 800d4fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4fe:	a808      	add	r0, sp, #32
 800d500:	f7ff fcf8 	bl	800cef4 <ucdr_buffer_length>
 800d504:	4680      	mov	r8, r0
 800d506:	2e00      	cmp	r6, #0
 800d508:	d0f5      	beq.n	800d4f6 <uxr_ping_agent_session+0x5e>
 800d50a:	46a1      	mov	r9, r4
 800d50c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d50e:	4642      	mov	r2, r8
 800d510:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d514:	a904      	add	r1, sp, #16
 800d516:	47a0      	blx	r4
 800d518:	4639      	mov	r1, r7
 800d51a:	4604      	mov	r4, r0
 800d51c:	4628      	mov	r0, r5
 800d51e:	f000 fe23 	bl	800e168 <uxr_run_session_until_pong>
 800d522:	4020      	ands	r0, r4
 800d524:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 800d528:	f109 0901 	add.w	r9, r9, #1
 800d52c:	d1e4      	bne.n	800d4f8 <uxr_ping_agent_session+0x60>
 800d52e:	454e      	cmp	r6, r9
 800d530:	d1ec      	bne.n	800d50c <uxr_ping_agent_session+0x74>
 800d532:	e7e0      	b.n	800d4f6 <uxr_ping_agent_session+0x5e>
 800d534:	08019c88 	.word	0x08019c88

0800d538 <uxr_ping_agent_attempts>:
 800d538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53c:	b0d3      	sub	sp, #332	@ 0x14c
 800d53e:	4606      	mov	r6, r0
 800d540:	4688      	mov	r8, r1
 800d542:	a810      	add	r0, sp, #64	@ 0x40
 800d544:	a90c      	add	r1, sp, #48	@ 0x30
 800d546:	4692      	mov	sl, r2
 800d548:	2210      	movs	r2, #16
 800d54a:	f7ff fca7 	bl	800ce9c <ucdr_init_buffer>
 800d54e:	4b56      	ldr	r3, [pc, #344]	@ (800d6a8 <uxr_ping_agent_attempts+0x170>)
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 800d556:	2400      	movs	r4, #0
 800d558:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800d55c:	2502      	movs	r5, #2
 800d55e:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 800d562:	4622      	mov	r2, r4
 800d564:	4623      	mov	r3, r4
 800d566:	2180      	movs	r1, #128	@ 0x80
 800d568:	a810      	add	r0, sp, #64	@ 0x40
 800d56a:	9400      	str	r4, [sp, #0]
 800d56c:	9521      	str	r5, [sp, #132]	@ 0x84
 800d56e:	f002 f8ef 	bl	800f750 <uxr_serialize_message_header>
 800d572:	4629      	mov	r1, r5
 800d574:	4623      	mov	r3, r4
 800d576:	2208      	movs	r2, #8
 800d578:	a810      	add	r0, sp, #64	@ 0x40
 800d57a:	f001 feeb 	bl	800f354 <uxr_buffer_submessage_header>
 800d57e:	a920      	add	r1, sp, #128	@ 0x80
 800d580:	4605      	mov	r5, r0
 800d582:	a810      	add	r0, sp, #64	@ 0x40
 800d584:	f002 feac 	bl	80102e0 <uxr_serialize_GET_INFO_Payload>
 800d588:	4005      	ands	r5, r0
 800d58a:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 800d58e:	d104      	bne.n	800d59a <uxr_ping_agent_attempts+0x62>
 800d590:	2500      	movs	r5, #0
 800d592:	4628      	mov	r0, r5
 800d594:	b053      	add	sp, #332	@ 0x14c
 800d596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59a:	a810      	add	r0, sp, #64	@ 0x40
 800d59c:	f7ff fcaa 	bl	800cef4 <ucdr_buffer_length>
 800d5a0:	9004      	str	r0, [sp, #16]
 800d5a2:	f1ba 0f00 	cmp.w	sl, #0
 800d5a6:	d0f3      	beq.n	800d590 <uxr_ping_agent_attempts+0x58>
 800d5a8:	9505      	str	r5, [sp, #20]
 800d5aa:	46a1      	mov	r9, r4
 800d5ac:	4627      	mov	r7, r4
 800d5ae:	4655      	mov	r5, sl
 800d5b0:	e9d6 0300 	ldrd	r0, r3, [r6]
 800d5b4:	9a04      	ldr	r2, [sp, #16]
 800d5b6:	a90c      	add	r1, sp, #48	@ 0x30
 800d5b8:	4798      	blx	r3
 800d5ba:	f001 ff11 	bl	800f3e0 <uxr_millis>
 800d5be:	46c2      	mov	sl, r8
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	9503      	str	r5, [sp, #12]
 800d5c4:	6830      	ldr	r0, [r6, #0]
 800d5c6:	68b5      	ldr	r5, [r6, #8]
 800d5c8:	9708      	str	r7, [sp, #32]
 800d5ca:	4643      	mov	r3, r8
 800d5cc:	aa09      	add	r2, sp, #36	@ 0x24
 800d5ce:	a908      	add	r1, sp, #32
 800d5d0:	47a8      	blx	r5
 800d5d2:	4683      	mov	fp, r0
 800d5d4:	b998      	cbnz	r0, 800d5fe <uxr_ping_agent_attempts+0xc6>
 800d5d6:	f001 ff03 	bl	800f3e0 <uxr_millis>
 800d5da:	1b00      	subs	r0, r0, r4
 800d5dc:	ebaa 0a00 	sub.w	sl, sl, r0
 800d5e0:	f001 fefe 	bl	800f3e0 <uxr_millis>
 800d5e4:	f1ba 0f00 	cmp.w	sl, #0
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	dceb      	bgt.n	800d5c4 <uxr_ping_agent_attempts+0x8c>
 800d5ec:	9d03      	ldr	r5, [sp, #12]
 800d5ee:	f109 0901 	add.w	r9, r9, #1
 800d5f2:	f1bb 0f00 	cmp.w	fp, #0
 800d5f6:	d12a      	bne.n	800d64e <uxr_ping_agent_attempts+0x116>
 800d5f8:	45a9      	cmp	r9, r5
 800d5fa:	d1d9      	bne.n	800d5b0 <uxr_ping_agent_attempts+0x78>
 800d5fc:	e7c8      	b.n	800d590 <uxr_ping_agent_attempts+0x58>
 800d5fe:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d602:	a818      	add	r0, sp, #96	@ 0x60
 800d604:	f7ff fc4a 	bl	800ce9c <ucdr_init_buffer>
 800d608:	ab07      	add	r3, sp, #28
 800d60a:	f10d 0219 	add.w	r2, sp, #25
 800d60e:	a918      	add	r1, sp, #96	@ 0x60
 800d610:	a80a      	add	r0, sp, #40	@ 0x28
 800d612:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 800d616:	f001 f8a7 	bl	800e768 <uxr_read_session_header>
 800d61a:	22c8      	movs	r2, #200	@ 0xc8
 800d61c:	2100      	movs	r1, #0
 800d61e:	a820      	add	r0, sp, #128	@ 0x80
 800d620:	f00a fe78 	bl	8018314 <memset>
 800d624:	a818      	add	r0, sp, #96	@ 0x60
 800d626:	f7ff fc69 	bl	800cefc <ucdr_buffer_remaining>
 800d62a:	2804      	cmp	r0, #4
 800d62c:	d814      	bhi.n	800d658 <uxr_ping_agent_attempts+0x120>
 800d62e:	f89d b135 	ldrb.w	fp, [sp, #309]	@ 0x135
 800d632:	f001 fed5 	bl	800f3e0 <uxr_millis>
 800d636:	1b00      	subs	r0, r0, r4
 800d638:	ebaa 0a00 	sub.w	sl, sl, r0
 800d63c:	f001 fed0 	bl	800f3e0 <uxr_millis>
 800d640:	f1ba 0f00 	cmp.w	sl, #0
 800d644:	4604      	mov	r4, r0
 800d646:	dd28      	ble.n	800d69a <uxr_ping_agent_attempts+0x162>
 800d648:	f1bb 0f00 	cmp.w	fp, #0
 800d64c:	d0ba      	beq.n	800d5c4 <uxr_ping_agent_attempts+0x8c>
 800d64e:	9d05      	ldr	r5, [sp, #20]
 800d650:	4628      	mov	r0, r5
 800d652:	b053      	add	sp, #332	@ 0x14c
 800d654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d658:	f10d 031e 	add.w	r3, sp, #30
 800d65c:	f10d 021b 	add.w	r2, sp, #27
 800d660:	f10d 011a 	add.w	r1, sp, #26
 800d664:	a818      	add	r0, sp, #96	@ 0x60
 800d666:	f88d 701a 	strb.w	r7, [sp, #26]
 800d66a:	f88d 701b 	strb.w	r7, [sp, #27]
 800d66e:	f8ad 701e 	strh.w	r7, [sp, #30]
 800d672:	f002 f8bd 	bl	800f7f0 <uxr_deserialize_submessage_header>
 800d676:	a818      	add	r0, sp, #96	@ 0x60
 800d678:	f7ff fc40 	bl	800cefc <ucdr_buffer_remaining>
 800d67c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d680:	4298      	cmp	r0, r3
 800d682:	d3d4      	bcc.n	800d62e <uxr_ping_agent_attempts+0xf6>
 800d684:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800d688:	2b06      	cmp	r3, #6
 800d68a:	d1d0      	bne.n	800d62e <uxr_ping_agent_attempts+0xf6>
 800d68c:	a918      	add	r1, sp, #96	@ 0x60
 800d68e:	a820      	add	r0, sp, #128	@ 0x80
 800d690:	f88d 7135 	strb.w	r7, [sp, #309]	@ 0x135
 800d694:	f000 f974 	bl	800d980 <read_submessage_info>
 800d698:	e7c9      	b.n	800d62e <uxr_ping_agent_attempts+0xf6>
 800d69a:	f1bb 0b00 	subs.w	fp, fp, #0
 800d69e:	9d03      	ldr	r5, [sp, #12]
 800d6a0:	bf18      	it	ne
 800d6a2:	f04f 0b01 	movne.w	fp, #1
 800d6a6:	e7a2      	b.n	800d5ee <uxr_ping_agent_attempts+0xb6>
 800d6a8:	08019c88 	.word	0x08019c88

0800d6ac <on_get_fragmentation_info>:
 800d6ac:	b500      	push	{lr}
 800d6ae:	b08b      	sub	sp, #44	@ 0x2c
 800d6b0:	4601      	mov	r1, r0
 800d6b2:	2204      	movs	r2, #4
 800d6b4:	a802      	add	r0, sp, #8
 800d6b6:	f7ff fbf1 	bl	800ce9c <ucdr_init_buffer>
 800d6ba:	f10d 0305 	add.w	r3, sp, #5
 800d6be:	f10d 0206 	add.w	r2, sp, #6
 800d6c2:	a901      	add	r1, sp, #4
 800d6c4:	a802      	add	r0, sp, #8
 800d6c6:	f001 fe5f 	bl	800f388 <uxr_read_submessage_header>
 800d6ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d6ce:	2b0d      	cmp	r3, #13
 800d6d0:	d003      	beq.n	800d6da <on_get_fragmentation_info+0x2e>
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	b00b      	add	sp, #44	@ 0x2c
 800d6d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d6de:	f013 0f02 	tst.w	r3, #2
 800d6e2:	bf0c      	ite	eq
 800d6e4:	2001      	moveq	r0, #1
 800d6e6:	2002      	movne	r0, #2
 800d6e8:	b00b      	add	sp, #44	@ 0x2c
 800d6ea:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6ee:	bf00      	nop

0800d6f0 <read_submessage_get_info>:
 800d6f0:	b570      	push	{r4, r5, r6, lr}
 800d6f2:	2500      	movs	r5, #0
 800d6f4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d6fe:	460e      	mov	r6, r1
 800d700:	a810      	add	r0, sp, #64	@ 0x40
 800d702:	4629      	mov	r1, r5
 800d704:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d708:	f00a fe04 	bl	8018314 <memset>
 800d70c:	a903      	add	r1, sp, #12
 800d70e:	4630      	mov	r0, r6
 800d710:	f002 fdfa 	bl	8010308 <uxr_deserialize_GET_INFO_Payload>
 800d714:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d718:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d71c:	4620      	mov	r0, r4
 800d71e:	f001 f861 	bl	800e7e4 <uxr_session_header_offset>
 800d722:	462b      	mov	r3, r5
 800d724:	9000      	str	r0, [sp, #0]
 800d726:	220c      	movs	r2, #12
 800d728:	a905      	add	r1, sp, #20
 800d72a:	a808      	add	r0, sp, #32
 800d72c:	f7ff fba4 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 800d730:	a910      	add	r1, sp, #64	@ 0x40
 800d732:	a808      	add	r0, sp, #32
 800d734:	f002 fe5a 	bl	80103ec <uxr_serialize_INFO_Payload>
 800d738:	9b08      	ldr	r3, [sp, #32]
 800d73a:	462a      	mov	r2, r5
 800d73c:	4629      	mov	r1, r5
 800d73e:	4620      	mov	r0, r4
 800d740:	f000 fffc 	bl	800e73c <uxr_stamp_session_header>
 800d744:	a808      	add	r0, sp, #32
 800d746:	f7ff fbd5 	bl	800cef4 <ucdr_buffer_length>
 800d74a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d74c:	4602      	mov	r2, r0
 800d74e:	a905      	add	r1, sp, #20
 800d750:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d754:	47a0      	blx	r4
 800d756:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800d75a:	bd70      	pop	{r4, r5, r6, pc}

0800d75c <write_submessage_acknack.isra.0>:
 800d75c:	b570      	push	{r4, r5, r6, lr}
 800d75e:	b092      	sub	sp, #72	@ 0x48
 800d760:	4605      	mov	r5, r0
 800d762:	460e      	mov	r6, r1
 800d764:	4614      	mov	r4, r2
 800d766:	f001 f83d 	bl	800e7e4 <uxr_session_header_offset>
 800d76a:	a905      	add	r1, sp, #20
 800d76c:	9000      	str	r0, [sp, #0]
 800d76e:	2300      	movs	r3, #0
 800d770:	a80a      	add	r0, sp, #40	@ 0x28
 800d772:	2211      	movs	r2, #17
 800d774:	f7ff fb80 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 800d778:	2318      	movs	r3, #24
 800d77a:	fb03 5404 	mla	r4, r3, r4, r5
 800d77e:	2205      	movs	r2, #5
 800d780:	2300      	movs	r3, #0
 800d782:	3450      	adds	r4, #80	@ 0x50
 800d784:	210a      	movs	r1, #10
 800d786:	a80a      	add	r0, sp, #40	@ 0x28
 800d788:	f001 fde4 	bl	800f354 <uxr_buffer_submessage_header>
 800d78c:	a903      	add	r1, sp, #12
 800d78e:	4620      	mov	r0, r4
 800d790:	f008 fc4e 	bl	8016030 <uxr_compute_acknack>
 800d794:	ba40      	rev16	r0, r0
 800d796:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d79a:	a903      	add	r1, sp, #12
 800d79c:	a80a      	add	r0, sp, #40	@ 0x28
 800d79e:	f88d 6010 	strb.w	r6, [sp, #16]
 800d7a2:	f002 fe93 	bl	80104cc <uxr_serialize_ACKNACK_Payload>
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	f000 ffc5 	bl	800e73c <uxr_stamp_session_header>
 800d7b2:	a80a      	add	r0, sp, #40	@ 0x28
 800d7b4:	f7ff fb9e 	bl	800cef4 <ucdr_buffer_length>
 800d7b8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	a905      	add	r1, sp, #20
 800d7be:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d7c2:	47a0      	blx	r4
 800d7c4:	b012      	add	sp, #72	@ 0x48
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}

0800d7c8 <uxr_init_session>:
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d800 <uxr_init_session+0x38>
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800d7da:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800d7de:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800d7e2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800d7e6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800d7ea:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800d7ee:	2181      	movs	r1, #129	@ 0x81
 800d7f0:	f000 ff08 	bl	800e604 <uxr_init_session_info>
 800d7f4:	f104 0008 	add.w	r0, r4, #8
 800d7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7fc:	f001 bcc6 	b.w	800f18c <uxr_init_stream_storage>
	...

0800d808 <uxr_set_status_callback>:
 800d808:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop

0800d810 <uxr_set_topic_callback>:
 800d810:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop

0800d818 <uxr_set_request_callback>:
 800d818:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop

0800d820 <uxr_set_reply_callback>:
 800d820:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop

0800d828 <uxr_create_output_best_effort_stream>:
 800d828:	b570      	push	{r4, r5, r6, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	4604      	mov	r4, r0
 800d82e:	460d      	mov	r5, r1
 800d830:	4616      	mov	r6, r2
 800d832:	f000 ffd7 	bl	800e7e4 <uxr_session_header_offset>
 800d836:	4632      	mov	r2, r6
 800d838:	4603      	mov	r3, r0
 800d83a:	4629      	mov	r1, r5
 800d83c:	f104 0008 	add.w	r0, r4, #8
 800d840:	b002      	add	sp, #8
 800d842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d846:	f001 bceb 	b.w	800f220 <uxr_add_output_best_effort_buffer>
 800d84a:	bf00      	nop

0800d84c <uxr_create_output_reliable_stream>:
 800d84c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d84e:	b085      	sub	sp, #20
 800d850:	4604      	mov	r4, r0
 800d852:	460d      	mov	r5, r1
 800d854:	4616      	mov	r6, r2
 800d856:	461f      	mov	r7, r3
 800d858:	f000 ffc4 	bl	800e7e4 <uxr_session_header_offset>
 800d85c:	463b      	mov	r3, r7
 800d85e:	9000      	str	r0, [sp, #0]
 800d860:	4632      	mov	r2, r6
 800d862:	4629      	mov	r1, r5
 800d864:	f104 0008 	add.w	r0, r4, #8
 800d868:	f001 fcee 	bl	800f248 <uxr_add_output_reliable_buffer>
 800d86c:	b005      	add	sp, #20
 800d86e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d870 <uxr_create_input_best_effort_stream>:
 800d870:	b082      	sub	sp, #8
 800d872:	3008      	adds	r0, #8
 800d874:	b002      	add	sp, #8
 800d876:	f001 bd01 	b.w	800f27c <uxr_add_input_best_effort_buffer>
 800d87a:	bf00      	nop

0800d87c <uxr_create_input_reliable_stream>:
 800d87c:	b510      	push	{r4, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	4c03      	ldr	r4, [pc, #12]	@ (800d890 <uxr_create_input_reliable_stream+0x14>)
 800d882:	9400      	str	r4, [sp, #0]
 800d884:	3008      	adds	r0, #8
 800d886:	f001 fd0f 	bl	800f2a8 <uxr_add_input_reliable_buffer>
 800d88a:	b004      	add	sp, #16
 800d88c:	bd10      	pop	{r4, pc}
 800d88e:	bf00      	nop
 800d890:	0800d6ad 	.word	0x0800d6ad

0800d894 <uxr_epoch_nanos>:
 800d894:	b510      	push	{r4, lr}
 800d896:	4604      	mov	r4, r0
 800d898:	f001 fdbc 	bl	800f414 <uxr_nanos>
 800d89c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800d8a0:	1ac0      	subs	r0, r0, r3
 800d8a2:	eb61 0102 	sbc.w	r1, r1, r2
 800d8a6:	bd10      	pop	{r4, pc}

0800d8a8 <uxr_flash_output_streams>:
 800d8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ac:	7e03      	ldrb	r3, [r0, #24]
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	b373      	cbz	r3, 800d912 <uxr_flash_output_streams+0x6a>
 800d8b4:	2500      	movs	r5, #0
 800d8b6:	f100 0908 	add.w	r9, r0, #8
 800d8ba:	f10d 0802 	add.w	r8, sp, #2
 800d8be:	4628      	mov	r0, r5
 800d8c0:	af03      	add	r7, sp, #12
 800d8c2:	ae02      	add	r6, sp, #8
 800d8c4:	e006      	b.n	800d8d4 <uxr_flash_output_streams+0x2c>
 800d8c6:	7e23      	ldrb	r3, [r4, #24]
 800d8c8:	3501      	adds	r5, #1
 800d8ca:	b2e8      	uxtb	r0, r5
 800d8cc:	4283      	cmp	r3, r0
 800d8ce:	f109 0910 	add.w	r9, r9, #16
 800d8d2:	d91e      	bls.n	800d912 <uxr_flash_output_streams+0x6a>
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	f001 fc20 	bl	800f11c <uxr_stream_id>
 800d8dc:	4643      	mov	r3, r8
 800d8de:	4684      	mov	ip, r0
 800d8e0:	463a      	mov	r2, r7
 800d8e2:	4631      	mov	r1, r6
 800d8e4:	4648      	mov	r0, r9
 800d8e6:	f8cd c004 	str.w	ip, [sp, #4]
 800d8ea:	f008 fc25 	bl	8016138 <uxr_prepare_best_effort_buffer_to_send>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	d0e9      	beq.n	800d8c6 <uxr_flash_output_streams+0x1e>
 800d8f2:	9b02      	ldr	r3, [sp, #8]
 800d8f4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d8f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d8fc:	4620      	mov	r0, r4
 800d8fe:	f000 ff1d 	bl	800e73c <uxr_stamp_session_header>
 800d902:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d904:	9a03      	ldr	r2, [sp, #12]
 800d906:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d90a:	9902      	ldr	r1, [sp, #8]
 800d90c:	6818      	ldr	r0, [r3, #0]
 800d90e:	47d0      	blx	sl
 800d910:	e7d9      	b.n	800d8c6 <uxr_flash_output_streams+0x1e>
 800d912:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d916:	b37b      	cbz	r3, 800d978 <uxr_flash_output_streams+0xd0>
 800d918:	f04f 0900 	mov.w	r9, #0
 800d91c:	f104 0520 	add.w	r5, r4, #32
 800d920:	f10d 0802 	add.w	r8, sp, #2
 800d924:	af03      	add	r7, sp, #12
 800d926:	ae02      	add	r6, sp, #8
 800d928:	4648      	mov	r0, r9
 800d92a:	2201      	movs	r2, #1
 800d92c:	2102      	movs	r1, #2
 800d92e:	f001 fbf5 	bl	800f11c <uxr_stream_id>
 800d932:	9001      	str	r0, [sp, #4]
 800d934:	e00e      	b.n	800d954 <uxr_flash_output_streams+0xac>
 800d936:	9b02      	ldr	r3, [sp, #8]
 800d938:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d93c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d940:	4620      	mov	r0, r4
 800d942:	f000 fefb 	bl	800e73c <uxr_stamp_session_header>
 800d946:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d948:	9a03      	ldr	r2, [sp, #12]
 800d94a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d94e:	9902      	ldr	r1, [sp, #8]
 800d950:	6818      	ldr	r0, [r3, #0]
 800d952:	47d0      	blx	sl
 800d954:	4643      	mov	r3, r8
 800d956:	463a      	mov	r2, r7
 800d958:	4631      	mov	r1, r6
 800d95a:	4628      	mov	r0, r5
 800d95c:	f008 fe00 	bl	8016560 <uxr_prepare_next_reliable_buffer_to_send>
 800d960:	2800      	cmp	r0, #0
 800d962:	d1e8      	bne.n	800d936 <uxr_flash_output_streams+0x8e>
 800d964:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d968:	f109 0901 	add.w	r9, r9, #1
 800d96c:	fa5f f089 	uxtb.w	r0, r9
 800d970:	4283      	cmp	r3, r0
 800d972:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 800d976:	d8d8      	bhi.n	800d92a <uxr_flash_output_streams+0x82>
 800d978:	b004      	add	sp, #16
 800d97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d97e:	bf00      	nop

0800d980 <read_submessage_info>:
 800d980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d984:	460d      	mov	r5, r1
 800d986:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d98a:	4669      	mov	r1, sp
 800d98c:	4607      	mov	r7, r0
 800d98e:	4628      	mov	r0, r5
 800d990:	f002 fbb6 	bl	8010100 <uxr_deserialize_BaseObjectReply>
 800d994:	a902      	add	r1, sp, #8
 800d996:	4604      	mov	r4, r0
 800d998:	4628      	mov	r0, r5
 800d99a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d99e:	f7fd ffa5 	bl	800b8ec <ucdr_deserialize_bool>
 800d9a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d9a6:	4004      	ands	r4, r0
 800d9a8:	b2e4      	uxtb	r4, r4
 800d9aa:	b95b      	cbnz	r3, 800d9c4 <read_submessage_info+0x44>
 800d9ac:	a987      	add	r1, sp, #540	@ 0x21c
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f7fd ff9c 	bl	800b8ec <ucdr_deserialize_bool>
 800d9b4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	b94b      	cbnz	r3, 800d9d0 <read_submessage_info+0x50>
 800d9bc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c4:	a903      	add	r1, sp, #12
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f002 fa5c 	bl	800fe84 <uxr_deserialize_ObjectVariant>
 800d9cc:	4004      	ands	r4, r0
 800d9ce:	e7ed      	b.n	800d9ac <read_submessage_info+0x2c>
 800d9d0:	a988      	add	r1, sp, #544	@ 0x220
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	f7fd ffb8 	bl	800b948 <ucdr_deserialize_uint8_t>
 800d9d8:	4234      	tst	r4, r6
 800d9da:	d0ef      	beq.n	800d9bc <read_submessage_info+0x3c>
 800d9dc:	2800      	cmp	r0, #0
 800d9de:	d0ed      	beq.n	800d9bc <read_submessage_info+0x3c>
 800d9e0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800d9e4:	2b0d      	cmp	r3, #13
 800d9e6:	d1e9      	bne.n	800d9bc <read_submessage_info+0x3c>
 800d9e8:	a98a      	add	r1, sp, #552	@ 0x228
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f7fe fd48 	bl	800c480 <ucdr_deserialize_int16_t>
 800d9f0:	b140      	cbz	r0, 800da04 <read_submessage_info+0x84>
 800d9f2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	dd07      	ble.n	800da0a <read_submessage_info+0x8a>
 800d9fa:	f1b8 0f00 	cmp.w	r8, #0
 800d9fe:	bf0c      	ite	eq
 800da00:	2002      	moveq	r0, #2
 800da02:	2001      	movne	r0, #1
 800da04:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800da08:	e7d8      	b.n	800d9bc <read_submessage_info+0x3c>
 800da0a:	2000      	movs	r0, #0
 800da0c:	e7fa      	b.n	800da04 <read_submessage_info+0x84>
 800da0e:	bf00      	nop

0800da10 <read_submessage_list>:
 800da10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da14:	b097      	sub	sp, #92	@ 0x5c
 800da16:	4604      	mov	r4, r0
 800da18:	460d      	mov	r5, r1
 800da1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800da1c:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800da20:	aa0c      	add	r2, sp, #48	@ 0x30
 800da22:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800da26:	4628      	mov	r0, r5
 800da28:	f001 fcae 	bl	800f388 <uxr_read_submessage_header>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	f000 812c 	beq.w	800dc8a <read_submessage_list+0x27a>
 800da32:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 800da36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da38:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 800da3c:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 800da40:	3902      	subs	r1, #2
 800da42:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800da46:	290d      	cmp	r1, #13
 800da48:	d8e8      	bhi.n	800da1c <read_submessage_list+0xc>
 800da4a:	a201      	add	r2, pc, #4	@ (adr r2, 800da50 <read_submessage_list+0x40>)
 800da4c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 800da50:	0800dc81 	.word	0x0800dc81
 800da54:	0800da1d 	.word	0x0800da1d
 800da58:	0800dc71 	.word	0x0800dc71
 800da5c:	0800dc13 	.word	0x0800dc13
 800da60:	0800dc09 	.word	0x0800dc09
 800da64:	0800da1d 	.word	0x0800da1d
 800da68:	0800da1d 	.word	0x0800da1d
 800da6c:	0800db8d 	.word	0x0800db8d
 800da70:	0800db25 	.word	0x0800db25
 800da74:	0800dae5 	.word	0x0800dae5
 800da78:	0800da1d 	.word	0x0800da1d
 800da7c:	0800da1d 	.word	0x0800da1d
 800da80:	0800da1d 	.word	0x0800da1d
 800da84:	0800da89 	.word	0x0800da89
 800da88:	a910      	add	r1, sp, #64	@ 0x40
 800da8a:	4628      	mov	r0, r5
 800da8c:	f002 fd7c 	bl	8010588 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800da90:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 800da94:	2e00      	cmp	r6, #0
 800da96:	f000 8100 	beq.w	800dc9a <read_submessage_list+0x28a>
 800da9a:	f001 fcbb 	bl	800f414 <uxr_nanos>
 800da9e:	f04f 0800 	mov.w	r8, #0
 800daa2:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800daa4:	4602      	mov	r2, r0
 800daa6:	460b      	mov	r3, r1
 800daa8:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800daaa:	4990      	ldr	r1, [pc, #576]	@ (800dcec <read_submessage_list+0x2dc>)
 800daac:	46c4      	mov	ip, r8
 800daae:	fbc0 7c01 	smlal	r7, ip, r0, r1
 800dab2:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800dab6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800dab8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800daba:	46c6      	mov	lr, r8
 800dabc:	fbc0 7e01 	smlal	r7, lr, r0, r1
 800dac0:	46bc      	mov	ip, r7
 800dac2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800dac6:	fbc0 7801 	smlal	r7, r8, r0, r1
 800daca:	e9cd ce02 	strd	ip, lr, [sp, #8]
 800dace:	e9cd 7800 	strd	r7, r8, [sp]
 800dad2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800dad6:	9106      	str	r1, [sp, #24]
 800dad8:	4620      	mov	r0, r4
 800dada:	47b0      	blx	r6
 800dadc:	2301      	movs	r3, #1
 800dade:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800dae2:	e79b      	b.n	800da1c <read_submessage_list+0xc>
 800dae4:	a910      	add	r1, sp, #64	@ 0x40
 800dae6:	4628      	mov	r0, r5
 800dae8:	f002 fd2e 	bl	8010548 <uxr_deserialize_HEARTBEAT_Payload>
 800daec:	2100      	movs	r1, #0
 800daee:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800daf2:	f001 fb2f 	bl	800f154 <uxr_stream_id_from_raw>
 800daf6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dafa:	900f      	str	r0, [sp, #60]	@ 0x3c
 800dafc:	4631      	mov	r1, r6
 800dafe:	f104 0008 	add.w	r0, r4, #8
 800db02:	f001 fc07 	bl	800f314 <uxr_get_input_reliable_stream>
 800db06:	2800      	cmp	r0, #0
 800db08:	d088      	beq.n	800da1c <read_submessage_list+0xc>
 800db0a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800db0e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800db12:	f008 fa81 	bl	8016018 <uxr_process_heartbeat>
 800db16:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800db1a:	4632      	mov	r2, r6
 800db1c:	4620      	mov	r0, r4
 800db1e:	f7ff fe1d 	bl	800d75c <write_submessage_acknack.isra.0>
 800db22:	e77b      	b.n	800da1c <read_submessage_list+0xc>
 800db24:	a910      	add	r1, sp, #64	@ 0x40
 800db26:	4628      	mov	r0, r5
 800db28:	f002 fce6 	bl	80104f8 <uxr_deserialize_ACKNACK_Payload>
 800db2c:	2100      	movs	r1, #0
 800db2e:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800db32:	f001 fb0f 	bl	800f154 <uxr_stream_id_from_raw>
 800db36:	900d      	str	r0, [sp, #52]	@ 0x34
 800db38:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800db3c:	f104 0008 	add.w	r0, r4, #8
 800db40:	f001 fbd4 	bl	800f2ec <uxr_get_output_reliable_stream>
 800db44:	4606      	mov	r6, r0
 800db46:	2800      	cmp	r0, #0
 800db48:	f43f af68 	beq.w	800da1c <read_submessage_list+0xc>
 800db4c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 800db50:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800db54:	ba49      	rev16	r1, r1
 800db56:	b289      	uxth	r1, r1
 800db58:	f008 fdac 	bl	80166b4 <uxr_process_acknack>
 800db5c:	4630      	mov	r0, r6
 800db5e:	f008 fd6d 	bl	801663c <uxr_begin_output_nack_buffer_it>
 800db62:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800db66:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800db6a:	e005      	b.n	800db78 <read_submessage_list+0x168>
 800db6c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800db6e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800db70:	685f      	ldr	r7, [r3, #4]
 800db72:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800db74:	6818      	ldr	r0, [r3, #0]
 800db76:	47b8      	blx	r7
 800db78:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800db7c:	aa0f      	add	r2, sp, #60	@ 0x3c
 800db7e:	4641      	mov	r1, r8
 800db80:	4630      	mov	r0, r6
 800db82:	f008 fd5d 	bl	8016640 <uxr_next_reliable_nack_buffer_to_send>
 800db86:	2800      	cmp	r0, #0
 800db88:	d1f0      	bne.n	800db6c <read_submessage_list+0x15c>
 800db8a:	e747      	b.n	800da1c <read_submessage_list+0xc>
 800db8c:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800db90:	4641      	mov	r1, r8
 800db92:	900d      	str	r0, [sp, #52]	@ 0x34
 800db94:	4628      	mov	r0, r5
 800db96:	f002 fa15 	bl	800ffc4 <uxr_deserialize_BaseObjectRequest>
 800db9a:	3e04      	subs	r6, #4
 800db9c:	4640      	mov	r0, r8
 800db9e:	a90f      	add	r1, sp, #60	@ 0x3c
 800dba0:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800dba4:	f000 fe44 	bl	800e830 <uxr_parse_base_object_request>
 800dba8:	fa1f f886 	uxth.w	r8, r6
 800dbac:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800dbb0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dbb2:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 800dbb6:	9110      	str	r1, [sp, #64]	@ 0x40
 800dbb8:	f007 070e 	and.w	r7, r7, #14
 800dbbc:	b136      	cbz	r6, 800dbcc <read_submessage_list+0x1bc>
 800dbbe:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800dbc2:	9300      	str	r3, [sp, #0]
 800dbc4:	464a      	mov	r2, r9
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	4620      	mov	r0, r4
 800dbca:	47b0      	blx	r6
 800dbcc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800dbce:	b16b      	cbz	r3, 800dbec <read_submessage_list+0x1dc>
 800dbd0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	3802      	subs	r0, #2
 800dbd6:	e002      	b.n	800dbde <read_submessage_list+0x1ce>
 800dbd8:	3101      	adds	r1, #1
 800dbda:	428b      	cmp	r3, r1
 800dbdc:	d006      	beq.n	800dbec <read_submessage_list+0x1dc>
 800dbde:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800dbe2:	454e      	cmp	r6, r9
 800dbe4:	d1f8      	bne.n	800dbd8 <read_submessage_list+0x1c8>
 800dbe6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800dbe8:	2200      	movs	r2, #0
 800dbea:	545a      	strb	r2, [r3, r1]
 800dbec:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800dbf0:	9102      	str	r1, [sp, #8]
 800dbf2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dbf4:	9101      	str	r1, [sp, #4]
 800dbf6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800dbf8:	9100      	str	r1, [sp, #0]
 800dbfa:	463b      	mov	r3, r7
 800dbfc:	4642      	mov	r2, r8
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4620      	mov	r0, r4
 800dc02:	f008 fdd7 	bl	80167b4 <read_submessage_format>
 800dc06:	e709      	b.n	800da1c <read_submessage_list+0xc>
 800dc08:	4629      	mov	r1, r5
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	f7ff feb8 	bl	800d980 <read_submessage_info>
 800dc10:	e704      	b.n	800da1c <read_submessage_list+0xc>
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d03c      	beq.n	800dc90 <read_submessage_list+0x280>
 800dc16:	a910      	add	r1, sp, #64	@ 0x40
 800dc18:	4628      	mov	r0, r5
 800dc1a:	f002 fbc9 	bl	80103b0 <uxr_deserialize_STATUS_Payload>
 800dc1e:	a90e      	add	r1, sp, #56	@ 0x38
 800dc20:	a810      	add	r0, sp, #64	@ 0x40
 800dc22:	aa0d      	add	r2, sp, #52	@ 0x34
 800dc24:	f000 fe04 	bl	800e830 <uxr_parse_base_object_request>
 800dc28:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 800dc2c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dc2e:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 800dc32:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800dc36:	910f      	str	r1, [sp, #60]	@ 0x3c
 800dc38:	b136      	cbz	r6, 800dc48 <read_submessage_list+0x238>
 800dc3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	463a      	mov	r2, r7
 800dc42:	4643      	mov	r3, r8
 800dc44:	4620      	mov	r0, r4
 800dc46:	47b0      	blx	r6
 800dc48:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800dc4a:	2a00      	cmp	r2, #0
 800dc4c:	f43f aee6 	beq.w	800da1c <read_submessage_list+0xc>
 800dc50:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800dc52:	2100      	movs	r1, #0
 800dc54:	3802      	subs	r0, #2
 800dc56:	e003      	b.n	800dc60 <read_submessage_list+0x250>
 800dc58:	3101      	adds	r1, #1
 800dc5a:	4291      	cmp	r1, r2
 800dc5c:	f43f aede 	beq.w	800da1c <read_submessage_list+0xc>
 800dc60:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 800dc64:	42be      	cmp	r6, r7
 800dc66:	d1f7      	bne.n	800dc58 <read_submessage_list+0x248>
 800dc68:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800dc6a:	f803 8001 	strb.w	r8, [r3, r1]
 800dc6e:	e6d5      	b.n	800da1c <read_submessage_list+0xc>
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f47f aed3 	bne.w	800da1c <read_submessage_list+0xc>
 800dc76:	4629      	mov	r1, r5
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f000 fd21 	bl	800e6c0 <uxr_read_create_session_status>
 800dc7e:	e6cd      	b.n	800da1c <read_submessage_list+0xc>
 800dc80:	4629      	mov	r1, r5
 800dc82:	4620      	mov	r0, r4
 800dc84:	f7ff fd34 	bl	800d6f0 <read_submessage_get_info>
 800dc88:	e6c8      	b.n	800da1c <read_submessage_list+0xc>
 800dc8a:	b017      	add	sp, #92	@ 0x5c
 800dc8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc90:	4629      	mov	r1, r5
 800dc92:	4620      	mov	r0, r4
 800dc94:	f000 fd22 	bl	800e6dc <uxr_read_delete_session_status>
 800dc98:	e6c0      	b.n	800da1c <read_submessage_list+0xc>
 800dc9a:	f001 fbbb 	bl	800f414 <uxr_nanos>
 800dc9e:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 800dca2:	f8df c048 	ldr.w	ip, [pc, #72]	@ 800dcec <read_submessage_list+0x2dc>
 800dca6:	4633      	mov	r3, r6
 800dca8:	fbc7 230c 	smlal	r2, r3, r7, ip
 800dcac:	1810      	adds	r0, r2, r0
 800dcae:	eb43 0301 	adc.w	r3, r3, r1
 800dcb2:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 800dcb6:	46b6      	mov	lr, r6
 800dcb8:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 800dcbc:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 800dcc0:	fbc1 760c 	smlal	r7, r6, r1, ip
 800dcc4:	19d2      	adds	r2, r2, r7
 800dcc6:	eb4e 0106 	adc.w	r1, lr, r6
 800dcca:	1a80      	subs	r0, r0, r2
 800dccc:	eb63 0301 	sbc.w	r3, r3, r1
 800dcd0:	0fda      	lsrs	r2, r3, #31
 800dcd2:	1812      	adds	r2, r2, r0
 800dcd4:	f143 0300 	adc.w	r3, r3, #0
 800dcd8:	0852      	lsrs	r2, r2, #1
 800dcda:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800dcde:	105b      	asrs	r3, r3, #1
 800dce0:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800dce4:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800dce8:	e6f8      	b.n	800dadc <read_submessage_list+0xcc>
 800dcea:	bf00      	nop
 800dcec:	3b9aca00 	.word	0x3b9aca00

0800dcf0 <listen_message_reliably>:
 800dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf4:	f1b1 0b00 	subs.w	fp, r1, #0
 800dcf8:	b09f      	sub	sp, #124	@ 0x7c
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	bfb8      	it	lt
 800dcfe:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 800dd02:	f001 fb6d 	bl	800f3e0 <uxr_millis>
 800dd06:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800dd0a:	9003      	str	r0, [sp, #12]
 800dd0c:	9104      	str	r1, [sp, #16]
 800dd0e:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800dd12:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f000 80a4 	beq.w	800de64 <listen_message_reliably+0x174>
 800dd1c:	2500      	movs	r5, #0
 800dd1e:	e9cd b806 	strd	fp, r8, [sp, #24]
 800dd22:	f106 0420 	add.w	r4, r6, #32
 800dd26:	f04f 37ff 	mov.w	r7, #4294967295
 800dd2a:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 800dd2e:	4628      	mov	r0, r5
 800dd30:	e011      	b.n	800dd56 <listen_message_reliably+0x66>
 800dd32:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800dd36:	42ba      	cmp	r2, r7
 800dd38:	eb73 0109 	sbcs.w	r1, r3, r9
 800dd3c:	bfb8      	it	lt
 800dd3e:	4699      	movlt	r9, r3
 800dd40:	f105 0501 	add.w	r5, r5, #1
 800dd44:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800dd48:	b2e8      	uxtb	r0, r5
 800dd4a:	bfb8      	it	lt
 800dd4c:	4617      	movlt	r7, r2
 800dd4e:	4283      	cmp	r3, r0
 800dd50:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 800dd54:	d94a      	bls.n	800ddec <listen_message_reliably+0xfc>
 800dd56:	2201      	movs	r2, #1
 800dd58:	2102      	movs	r1, #2
 800dd5a:	f001 f9df 	bl	800f11c <uxr_stream_id>
 800dd5e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800dd62:	4601      	mov	r1, r0
 800dd64:	4620      	mov	r0, r4
 800dd66:	910b      	str	r1, [sp, #44]	@ 0x2c
 800dd68:	f008 fc38 	bl	80165dc <uxr_update_output_stream_heartbeat_timestamp>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d0e0      	beq.n	800dd32 <listen_message_reliably+0x42>
 800dd70:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800dd74:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 800dd78:	9305      	str	r3, [sp, #20]
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	f000 fd32 	bl	800e7e4 <uxr_session_header_offset>
 800dd80:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 800dd84:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 800dd88:	9000      	str	r0, [sp, #0]
 800dd8a:	a90e      	add	r1, sp, #56	@ 0x38
 800dd8c:	4640      	mov	r0, r8
 800dd8e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 800dd92:	2300      	movs	r3, #0
 800dd94:	2211      	movs	r2, #17
 800dd96:	f7ff f86f 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	2205      	movs	r2, #5
 800dd9e:	210b      	movs	r1, #11
 800dda0:	4640      	mov	r0, r8
 800dda2:	f001 fad7 	bl	800f354 <uxr_buffer_submessage_header>
 800dda6:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 800ddaa:	2101      	movs	r1, #1
 800ddac:	f008 fdd6 	bl	801695c <uxr_seq_num_add>
 800ddb0:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 800ddb4:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800ddb8:	4602      	mov	r2, r0
 800ddba:	9b05      	ldr	r3, [sp, #20]
 800ddbc:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800ddc0:	a90c      	add	r1, sp, #48	@ 0x30
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800ddc8:	f002 fbaa 	bl	8010520 <uxr_serialize_HEARTBEAT_Payload>
 800ddcc:	2200      	movs	r2, #0
 800ddce:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	4630      	mov	r0, r6
 800ddd4:	f000 fcb2 	bl	800e73c <uxr_stamp_session_header>
 800ddd8:	4640      	mov	r0, r8
 800ddda:	f7ff f88b 	bl	800cef4 <ucdr_buffer_length>
 800ddde:	4602      	mov	r2, r0
 800dde0:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 800dde2:	a90e      	add	r1, sp, #56	@ 0x38
 800dde4:	e9d0 0300 	ldrd	r0, r3, [r0]
 800dde8:	4798      	blx	r3
 800ddea:	e7a2      	b.n	800dd32 <listen_message_reliably+0x42>
 800ddec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ddf0:	4599      	cmp	r9, r3
 800ddf2:	bf08      	it	eq
 800ddf4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 800ddf8:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 800ddfc:	d032      	beq.n	800de64 <listen_message_reliably+0x174>
 800ddfe:	9b03      	ldr	r3, [sp, #12]
 800de00:	1aff      	subs	r7, r7, r3
 800de02:	2f00      	cmp	r7, #0
 800de04:	bf08      	it	eq
 800de06:	2701      	moveq	r7, #1
 800de08:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800de0a:	455f      	cmp	r7, fp
 800de0c:	bfa8      	it	ge
 800de0e:	465f      	movge	r7, fp
 800de10:	689c      	ldr	r4, [r3, #8]
 800de12:	6818      	ldr	r0, [r3, #0]
 800de14:	4642      	mov	r2, r8
 800de16:	463b      	mov	r3, r7
 800de18:	4651      	mov	r1, sl
 800de1a:	47a0      	blx	r4
 800de1c:	ebab 0b07 	sub.w	fp, fp, r7
 800de20:	b958      	cbnz	r0, 800de3a <listen_message_reliably+0x14a>
 800de22:	f1bb 0f00 	cmp.w	fp, #0
 800de26:	dd44      	ble.n	800deb2 <listen_message_reliably+0x1c2>
 800de28:	f001 fada 	bl	800f3e0 <uxr_millis>
 800de2c:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 800de30:	2b00      	cmp	r3, #0
 800de32:	d03c      	beq.n	800deae <listen_message_reliably+0x1be>
 800de34:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800de38:	e770      	b.n	800dd1c <listen_message_reliably+0x2c>
 800de3a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800de3e:	4604      	mov	r4, r0
 800de40:	a80e      	add	r0, sp, #56	@ 0x38
 800de42:	f7ff f82b 	bl	800ce9c <ucdr_init_buffer>
 800de46:	2500      	movs	r5, #0
 800de48:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 800de4c:	aa08      	add	r2, sp, #32
 800de4e:	a90e      	add	r1, sp, #56	@ 0x38
 800de50:	4630      	mov	r0, r6
 800de52:	f88d 5020 	strb.w	r5, [sp, #32]
 800de56:	f000 fc87 	bl	800e768 <uxr_read_session_header>
 800de5a:	b928      	cbnz	r0, 800de68 <listen_message_reliably+0x178>
 800de5c:	4620      	mov	r0, r4
 800de5e:	b01f      	add	sp, #124	@ 0x7c
 800de60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de64:	465f      	mov	r7, fp
 800de66:	e7cc      	b.n	800de02 <listen_message_reliably+0x112>
 800de68:	4629      	mov	r1, r5
 800de6a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800de6e:	f001 f971 	bl	800f154 <uxr_stream_id_from_raw>
 800de72:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800de76:	2f01      	cmp	r7, #1
 800de78:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 800de7c:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 800de80:	fa5f f880 	uxtb.w	r8, r0
 800de84:	f3c0 2507 	ubfx	r5, r0, #8, #8
 800de88:	d050      	beq.n	800df2c <listen_message_reliably+0x23c>
 800de8a:	2f02      	cmp	r7, #2
 800de8c:	d016      	beq.n	800debc <listen_message_reliably+0x1cc>
 800de8e:	2f00      	cmp	r7, #0
 800de90:	d1e4      	bne.n	800de5c <listen_message_reliably+0x16c>
 800de92:	4639      	mov	r1, r7
 800de94:	4638      	mov	r0, r7
 800de96:	f001 f95d 	bl	800f154 <uxr_stream_id_from_raw>
 800de9a:	a90e      	add	r1, sp, #56	@ 0x38
 800de9c:	4602      	mov	r2, r0
 800de9e:	4630      	mov	r0, r6
 800dea0:	920c      	str	r2, [sp, #48]	@ 0x30
 800dea2:	f7ff fdb5 	bl	800da10 <read_submessage_list>
 800dea6:	4620      	mov	r0, r4
 800dea8:	b01f      	add	sp, #124	@ 0x7c
 800deaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deae:	465f      	mov	r7, fp
 800deb0:	e7aa      	b.n	800de08 <listen_message_reliably+0x118>
 800deb2:	4604      	mov	r4, r0
 800deb4:	4620      	mov	r0, r4
 800deb6:	b01f      	add	sp, #124	@ 0x7c
 800deb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800debc:	4629      	mov	r1, r5
 800debe:	f106 0008 	add.w	r0, r6, #8
 800dec2:	f001 fa27 	bl	800f314 <uxr_get_input_reliable_stream>
 800dec6:	4681      	mov	r9, r0
 800dec8:	b338      	cbz	r0, 800df1a <listen_message_reliably+0x22a>
 800deca:	a80e      	add	r0, sp, #56	@ 0x38
 800decc:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 800ded0:	f7ff f814 	bl	800cefc <ucdr_buffer_remaining>
 800ded4:	4603      	mov	r3, r0
 800ded6:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 800deda:	9000      	str	r0, [sp, #0]
 800dedc:	465a      	mov	r2, fp
 800dede:	4651      	mov	r1, sl
 800dee0:	4648      	mov	r0, r9
 800dee2:	f007 ffa7 	bl	8015e34 <uxr_receive_reliable_message>
 800dee6:	b1c0      	cbz	r0, 800df1a <listen_message_reliably+0x22a>
 800dee8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800deec:	b393      	cbz	r3, 800df54 <listen_message_reliably+0x264>
 800deee:	af16      	add	r7, sp, #88	@ 0x58
 800def0:	f04f 0a02 	mov.w	sl, #2
 800def4:	e00a      	b.n	800df0c <listen_message_reliably+0x21c>
 800def6:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 800defa:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 800defe:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 800df02:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df04:	4639      	mov	r1, r7
 800df06:	4630      	mov	r0, r6
 800df08:	f7ff fd82 	bl	800da10 <read_submessage_list>
 800df0c:	2204      	movs	r2, #4
 800df0e:	4639      	mov	r1, r7
 800df10:	4648      	mov	r0, r9
 800df12:	f008 f809 	bl	8015f28 <uxr_next_input_reliable_buffer_available>
 800df16:	2800      	cmp	r0, #0
 800df18:	d1ed      	bne.n	800def6 <listen_message_reliably+0x206>
 800df1a:	4630      	mov	r0, r6
 800df1c:	462a      	mov	r2, r5
 800df1e:	4641      	mov	r1, r8
 800df20:	f7ff fc1c 	bl	800d75c <write_submessage_acknack.isra.0>
 800df24:	4620      	mov	r0, r4
 800df26:	b01f      	add	sp, #124	@ 0x7c
 800df28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2c:	4629      	mov	r1, r5
 800df2e:	f106 0008 	add.w	r0, r6, #8
 800df32:	f001 f9e5 	bl	800f300 <uxr_get_input_best_effort_stream>
 800df36:	2800      	cmp	r0, #0
 800df38:	d090      	beq.n	800de5c <listen_message_reliably+0x16c>
 800df3a:	4651      	mov	r1, sl
 800df3c:	f007 feea 	bl	8015d14 <uxr_receive_best_effort_message>
 800df40:	2800      	cmp	r0, #0
 800df42:	d08b      	beq.n	800de5c <listen_message_reliably+0x16c>
 800df44:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800df48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df4a:	a90e      	add	r1, sp, #56	@ 0x38
 800df4c:	4630      	mov	r0, r6
 800df4e:	f7ff fd5f 	bl	800da10 <read_submessage_list>
 800df52:	e783      	b.n	800de5c <listen_message_reliably+0x16c>
 800df54:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 800df58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df5a:	a90e      	add	r1, sp, #56	@ 0x38
 800df5c:	4630      	mov	r0, r6
 800df5e:	f7ff fd57 	bl	800da10 <read_submessage_list>
 800df62:	e7c4      	b.n	800deee <listen_message_reliably+0x1fe>

0800df64 <uxr_run_session_timeout>:
 800df64:	b570      	push	{r4, r5, r6, lr}
 800df66:	4604      	mov	r4, r0
 800df68:	460d      	mov	r5, r1
 800df6a:	f001 fa39 	bl	800f3e0 <uxr_millis>
 800df6e:	4606      	mov	r6, r0
 800df70:	4620      	mov	r0, r4
 800df72:	f7ff fc99 	bl	800d8a8 <uxr_flash_output_streams>
 800df76:	4629      	mov	r1, r5
 800df78:	4620      	mov	r0, r4
 800df7a:	f7ff feb9 	bl	800dcf0 <listen_message_reliably>
 800df7e:	f001 fa2f 	bl	800f3e0 <uxr_millis>
 800df82:	1b81      	subs	r1, r0, r6
 800df84:	1a69      	subs	r1, r5, r1
 800df86:	2900      	cmp	r1, #0
 800df88:	dcf6      	bgt.n	800df78 <uxr_run_session_timeout+0x14>
 800df8a:	f104 0008 	add.w	r0, r4, #8
 800df8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df92:	f001 b9c9 	b.w	800f328 <uxr_output_streams_confirmed>
 800df96:	bf00      	nop

0800df98 <uxr_run_session_until_data>:
 800df98:	b570      	push	{r4, r5, r6, lr}
 800df9a:	4604      	mov	r4, r0
 800df9c:	460d      	mov	r5, r1
 800df9e:	f001 fa1f 	bl	800f3e0 <uxr_millis>
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	f7ff fc7f 	bl	800d8a8 <uxr_flash_output_streams>
 800dfaa:	2300      	movs	r3, #0
 800dfac:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	e005      	b.n	800dfc0 <uxr_run_session_until_data+0x28>
 800dfb4:	f001 fa14 	bl	800f3e0 <uxr_millis>
 800dfb8:	1b81      	subs	r1, r0, r6
 800dfba:	1a69      	subs	r1, r5, r1
 800dfbc:	2900      	cmp	r1, #0
 800dfbe:	dd07      	ble.n	800dfd0 <uxr_run_session_until_data+0x38>
 800dfc0:	4620      	mov	r0, r4
 800dfc2:	f7ff fe95 	bl	800dcf0 <listen_message_reliably>
 800dfc6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d0f2      	beq.n	800dfb4 <uxr_run_session_until_data+0x1c>
 800dfce:	bd70      	pop	{r4, r5, r6, pc}
 800dfd0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800dfd4:	bd70      	pop	{r4, r5, r6, pc}
 800dfd6:	bf00      	nop

0800dfd8 <uxr_run_session_until_confirm_delivery>:
 800dfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfdc:	4606      	mov	r6, r0
 800dfde:	460d      	mov	r5, r1
 800dfe0:	f001 f9fe 	bl	800f3e0 <uxr_millis>
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f7ff fc5e 	bl	800d8a8 <uxr_flash_output_streams>
 800dfec:	2d00      	cmp	r5, #0
 800dfee:	db16      	blt.n	800e01e <uxr_run_session_until_confirm_delivery+0x46>
 800dff0:	462c      	mov	r4, r5
 800dff2:	f106 0808 	add.w	r8, r6, #8
 800dff6:	e008      	b.n	800e00a <uxr_run_session_until_confirm_delivery+0x32>
 800dff8:	4621      	mov	r1, r4
 800dffa:	4630      	mov	r0, r6
 800dffc:	f7ff fe78 	bl	800dcf0 <listen_message_reliably>
 800e000:	f001 f9ee 	bl	800f3e0 <uxr_millis>
 800e004:	1bc1      	subs	r1, r0, r7
 800e006:	1a6c      	subs	r4, r5, r1
 800e008:	d404      	bmi.n	800e014 <uxr_run_session_until_confirm_delivery+0x3c>
 800e00a:	4640      	mov	r0, r8
 800e00c:	f001 f98c 	bl	800f328 <uxr_output_streams_confirmed>
 800e010:	2800      	cmp	r0, #0
 800e012:	d0f1      	beq.n	800dff8 <uxr_run_session_until_confirm_delivery+0x20>
 800e014:	4640      	mov	r0, r8
 800e016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e01a:	f001 b985 	b.w	800f328 <uxr_output_streams_confirmed>
 800e01e:	f106 0808 	add.w	r8, r6, #8
 800e022:	e7f7      	b.n	800e014 <uxr_run_session_until_confirm_delivery+0x3c>

0800e024 <uxr_run_session_until_all_status>:
 800e024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e028:	9c08      	ldr	r4, [sp, #32]
 800e02a:	4605      	mov	r5, r0
 800e02c:	460f      	mov	r7, r1
 800e02e:	4690      	mov	r8, r2
 800e030:	461e      	mov	r6, r3
 800e032:	f7ff fc39 	bl	800d8a8 <uxr_flash_output_streams>
 800e036:	b124      	cbz	r4, 800e042 <uxr_run_session_until_all_status+0x1e>
 800e038:	4622      	mov	r2, r4
 800e03a:	21ff      	movs	r1, #255	@ 0xff
 800e03c:	4630      	mov	r0, r6
 800e03e:	f00a f969 	bl	8018314 <memset>
 800e042:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 800e046:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800e048:	f001 f9ca 	bl	800f3e0 <uxr_millis>
 800e04c:	4639      	mov	r1, r7
 800e04e:	4681      	mov	r9, r0
 800e050:	4628      	mov	r0, r5
 800e052:	f7ff fe4d 	bl	800dcf0 <listen_message_reliably>
 800e056:	f001 f9c3 	bl	800f3e0 <uxr_millis>
 800e05a:	eba0 0109 	sub.w	r1, r0, r9
 800e05e:	1a79      	subs	r1, r7, r1
 800e060:	b36c      	cbz	r4, 800e0be <uxr_run_session_until_all_status+0x9a>
 800e062:	1e70      	subs	r0, r6, #1
 800e064:	46c6      	mov	lr, r8
 800e066:	1902      	adds	r2, r0, r4
 800e068:	4684      	mov	ip, r0
 800e06a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e06e:	2bff      	cmp	r3, #255	@ 0xff
 800e070:	d007      	beq.n	800e082 <uxr_run_session_until_all_status+0x5e>
 800e072:	4594      	cmp	ip, r2
 800e074:	d00f      	beq.n	800e096 <uxr_run_session_until_all_status+0x72>
 800e076:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800e07a:	2bff      	cmp	r3, #255	@ 0xff
 800e07c:	f10e 0e02 	add.w	lr, lr, #2
 800e080:	d1f7      	bne.n	800e072 <uxr_run_session_until_all_status+0x4e>
 800e082:	4594      	cmp	ip, r2
 800e084:	f8be 3000 	ldrh.w	r3, [lr]
 800e088:	d014      	beq.n	800e0b4 <uxr_run_session_until_all_status+0x90>
 800e08a:	f10e 0e02 	add.w	lr, lr, #2
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d0eb      	beq.n	800e06a <uxr_run_session_until_all_status+0x46>
 800e092:	2900      	cmp	r1, #0
 800e094:	dcdc      	bgt.n	800e050 <uxr_run_session_until_all_status+0x2c>
 800e096:	2300      	movs	r3, #0
 800e098:	67eb      	str	r3, [r5, #124]	@ 0x7c
 800e09a:	e001      	b.n	800e0a0 <uxr_run_session_until_all_status+0x7c>
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d812      	bhi.n	800e0c6 <uxr_run_session_until_all_status+0xa2>
 800e0a0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800e0a4:	4290      	cmp	r0, r2
 800e0a6:	d1f9      	bne.n	800e09c <uxr_run_session_until_all_status+0x78>
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	bf8c      	ite	hi
 800e0ac:	2000      	movhi	r0, #0
 800e0ae:	2001      	movls	r0, #1
 800e0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0b4:	2900      	cmp	r1, #0
 800e0b6:	ddee      	ble.n	800e096 <uxr_run_session_until_all_status+0x72>
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d1c9      	bne.n	800e050 <uxr_run_session_until_all_status+0x2c>
 800e0bc:	e7eb      	b.n	800e096 <uxr_run_session_until_all_status+0x72>
 800e0be:	67ec      	str	r4, [r5, #124]	@ 0x7c
 800e0c0:	2001      	movs	r0, #1
 800e0c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0cc:	0000      	movs	r0, r0
	...

0800e0d0 <uxr_sync_session>:
 800e0d0:	b570      	push	{r4, r5, r6, lr}
 800e0d2:	b092      	sub	sp, #72	@ 0x48
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	460d      	mov	r5, r1
 800e0d8:	f000 fb84 	bl	800e7e4 <uxr_session_header_offset>
 800e0dc:	2214      	movs	r2, #20
 800e0de:	eb0d 0102 	add.w	r1, sp, r2
 800e0e2:	9000      	str	r0, [sp, #0]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	a80a      	add	r0, sp, #40	@ 0x28
 800e0e8:	f7fe fec6 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	2208      	movs	r2, #8
 800e0f0:	210e      	movs	r1, #14
 800e0f2:	a80a      	add	r0, sp, #40	@ 0x28
 800e0f4:	f001 f92e 	bl	800f354 <uxr_buffer_submessage_header>
 800e0f8:	f001 f98c 	bl	800f414 <uxr_nanos>
 800e0fc:	a318      	add	r3, pc, #96	@ (adr r3, 800e160 <uxr_sync_session+0x90>)
 800e0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e102:	f7f2 fb81 	bl	8000808 <__aeabi_ldivmod>
 800e106:	a903      	add	r1, sp, #12
 800e108:	e9cd 0203 	strd	r0, r2, [sp, #12]
 800e10c:	a80a      	add	r0, sp, #40	@ 0x28
 800e10e:	f002 fa2d 	bl	801056c <uxr_serialize_TIMESTAMP_Payload>
 800e112:	2200      	movs	r2, #0
 800e114:	4611      	mov	r1, r2
 800e116:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e118:	4620      	mov	r0, r4
 800e11a:	f000 fb0f 	bl	800e73c <uxr_stamp_session_header>
 800e11e:	a80a      	add	r0, sp, #40	@ 0x28
 800e120:	f7fe fee8 	bl	800cef4 <ucdr_buffer_length>
 800e124:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e126:	4602      	mov	r2, r0
 800e128:	a905      	add	r1, sp, #20
 800e12a:	e9d3 0600 	ldrd	r0, r6, [r3]
 800e12e:	47b0      	blx	r6
 800e130:	f001 f956 	bl	800f3e0 <uxr_millis>
 800e134:	2300      	movs	r3, #0
 800e136:	4606      	mov	r6, r0
 800e138:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 800e13c:	4629      	mov	r1, r5
 800e13e:	e000      	b.n	800e142 <uxr_sync_session+0x72>
 800e140:	b950      	cbnz	r0, 800e158 <uxr_sync_session+0x88>
 800e142:	4620      	mov	r0, r4
 800e144:	f7ff fdd4 	bl	800dcf0 <listen_message_reliably>
 800e148:	f001 f94a 	bl	800f3e0 <uxr_millis>
 800e14c:	1b81      	subs	r1, r0, r6
 800e14e:	1a69      	subs	r1, r5, r1
 800e150:	2900      	cmp	r1, #0
 800e152:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 800e156:	dcf3      	bgt.n	800e140 <uxr_sync_session+0x70>
 800e158:	b012      	add	sp, #72	@ 0x48
 800e15a:	bd70      	pop	{r4, r5, r6, pc}
 800e15c:	f3af 8000 	nop.w
 800e160:	3b9aca00 	.word	0x3b9aca00
 800e164:	00000000 	.word	0x00000000

0800e168 <uxr_run_session_until_pong>:
 800e168:	b570      	push	{r4, r5, r6, lr}
 800e16a:	4604      	mov	r4, r0
 800e16c:	460d      	mov	r5, r1
 800e16e:	f001 f937 	bl	800f3e0 <uxr_millis>
 800e172:	4606      	mov	r6, r0
 800e174:	4620      	mov	r0, r4
 800e176:	f7ff fb97 	bl	800d8a8 <uxr_flash_output_streams>
 800e17a:	2300      	movs	r3, #0
 800e17c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 800e180:	4629      	mov	r1, r5
 800e182:	e005      	b.n	800e190 <uxr_run_session_until_pong+0x28>
 800e184:	f001 f92c 	bl	800f3e0 <uxr_millis>
 800e188:	1b81      	subs	r1, r0, r6
 800e18a:	1a69      	subs	r1, r5, r1
 800e18c:	2900      	cmp	r1, #0
 800e18e:	dd0c      	ble.n	800e1aa <uxr_run_session_until_pong+0x42>
 800e190:	4620      	mov	r0, r4
 800e192:	f7ff fdad 	bl	800dcf0 <listen_message_reliably>
 800e196:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800e19a:	2800      	cmp	r0, #0
 800e19c:	d0f2      	beq.n	800e184 <uxr_run_session_until_pong+0x1c>
 800e19e:	f1a0 0001 	sub.w	r0, r0, #1
 800e1a2:	fab0 f080 	clz	r0, r0
 800e1a6:	0940      	lsrs	r0, r0, #5
 800e1a8:	bd70      	pop	{r4, r5, r6, pc}
 800e1aa:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 800e1ae:	f1a0 0001 	sub.w	r0, r0, #1
 800e1b2:	fab0 f080 	clz	r0, r0
 800e1b6:	0940      	lsrs	r0, r0, #5
 800e1b8:	bd70      	pop	{r4, r5, r6, pc}
 800e1ba:	bf00      	nop

0800e1bc <wait_session_status>:
 800e1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	20ff      	movs	r0, #255	@ 0xff
 800e1c4:	b09f      	sub	sp, #124	@ 0x7c
 800e1c6:	7160      	strb	r0, [r4, #5]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	f000 80bb 	beq.w	800e344 <wait_session_status+0x188>
 800e1ce:	4692      	mov	sl, r2
 800e1d0:	469b      	mov	fp, r3
 800e1d2:	f04f 0800 	mov.w	r8, #0
 800e1d6:	9105      	str	r1, [sp, #20]
 800e1d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e1da:	9905      	ldr	r1, [sp, #20]
 800e1dc:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e1e0:	4652      	mov	r2, sl
 800e1e2:	47a8      	blx	r5
 800e1e4:	f001 f8fc 	bl	800f3e0 <uxr_millis>
 800e1e8:	2700      	movs	r7, #0
 800e1ea:	4605      	mov	r5, r0
 800e1ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e1f0:	e009      	b.n	800e206 <wait_session_status+0x4a>
 800e1f2:	f001 f8f5 	bl	800f3e0 <uxr_millis>
 800e1f6:	1b43      	subs	r3, r0, r5
 800e1f8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	7962      	ldrb	r2, [r4, #5]
 800e200:	dd3d      	ble.n	800e27e <wait_session_status+0xc2>
 800e202:	2aff      	cmp	r2, #255	@ 0xff
 800e204:	d13b      	bne.n	800e27e <wait_session_status+0xc2>
 800e206:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e208:	a90a      	add	r1, sp, #40	@ 0x28
 800e20a:	6896      	ldr	r6, [r2, #8]
 800e20c:	6810      	ldr	r0, [r2, #0]
 800e20e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e210:	47b0      	blx	r6
 800e212:	2800      	cmp	r0, #0
 800e214:	d0ed      	beq.n	800e1f2 <wait_session_status+0x36>
 800e216:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 800e21a:	a80e      	add	r0, sp, #56	@ 0x38
 800e21c:	f7fe fe3e 	bl	800ce9c <ucdr_init_buffer>
 800e220:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 800e224:	aa09      	add	r2, sp, #36	@ 0x24
 800e226:	a90e      	add	r1, sp, #56	@ 0x38
 800e228:	4620      	mov	r0, r4
 800e22a:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 800e22e:	f000 fa9b 	bl	800e768 <uxr_read_session_header>
 800e232:	2800      	cmp	r0, #0
 800e234:	d0dd      	beq.n	800e1f2 <wait_session_status+0x36>
 800e236:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 800e23a:	2100      	movs	r1, #0
 800e23c:	f000 ff8a 	bl	800f154 <uxr_stream_id_from_raw>
 800e240:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800e244:	9304      	str	r3, [sp, #16]
 800e246:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800e24a:	b2c3      	uxtb	r3, r0
 800e24c:	f1b9 0f01 	cmp.w	r9, #1
 800e250:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 800e254:	9303      	str	r3, [sp, #12]
 800e256:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e25a:	d05d      	beq.n	800e318 <wait_session_status+0x15c>
 800e25c:	f1b9 0f02 	cmp.w	r9, #2
 800e260:	d01a      	beq.n	800e298 <wait_session_status+0xdc>
 800e262:	f1b9 0f00 	cmp.w	r9, #0
 800e266:	d1c4      	bne.n	800e1f2 <wait_session_status+0x36>
 800e268:	4649      	mov	r1, r9
 800e26a:	4648      	mov	r0, r9
 800e26c:	f000 ff72 	bl	800f154 <uxr_stream_id_from_raw>
 800e270:	a90e      	add	r1, sp, #56	@ 0x38
 800e272:	4602      	mov	r2, r0
 800e274:	900d      	str	r0, [sp, #52]	@ 0x34
 800e276:	4620      	mov	r0, r4
 800e278:	f7ff fbca 	bl	800da10 <read_submessage_list>
 800e27c:	e7b9      	b.n	800e1f2 <wait_session_status+0x36>
 800e27e:	f108 0801 	add.w	r8, r8, #1
 800e282:	45c3      	cmp	fp, r8
 800e284:	d001      	beq.n	800e28a <wait_session_status+0xce>
 800e286:	2aff      	cmp	r2, #255	@ 0xff
 800e288:	d0a6      	beq.n	800e1d8 <wait_session_status+0x1c>
 800e28a:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 800e28e:	bf18      	it	ne
 800e290:	2001      	movne	r0, #1
 800e292:	b01f      	add	sp, #124	@ 0x7c
 800e294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e298:	4631      	mov	r1, r6
 800e29a:	f104 0008 	add.w	r0, r4, #8
 800e29e:	f001 f839 	bl	800f314 <uxr_get_input_reliable_stream>
 800e2a2:	9006      	str	r0, [sp, #24]
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d031      	beq.n	800e30c <wait_session_status+0x150>
 800e2a8:	aa0e      	add	r2, sp, #56	@ 0x38
 800e2aa:	4610      	mov	r0, r2
 800e2ac:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e2ae:	9207      	str	r2, [sp, #28]
 800e2b0:	f7fe fe24 	bl	800cefc <ucdr_buffer_remaining>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 800e2ba:	9000      	str	r0, [sp, #0]
 800e2bc:	9a07      	ldr	r2, [sp, #28]
 800e2be:	9904      	ldr	r1, [sp, #16]
 800e2c0:	9806      	ldr	r0, [sp, #24]
 800e2c2:	f007 fdb7 	bl	8015e34 <uxr_receive_reliable_message>
 800e2c6:	b308      	cbz	r0, 800e30c <wait_session_status+0x150>
 800e2c8:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d041      	beq.n	800e354 <wait_session_status+0x198>
 800e2d0:	f8cd 8010 	str.w	r8, [sp, #16]
 800e2d4:	9507      	str	r5, [sp, #28]
 800e2d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e2da:	9d06      	ldr	r5, [sp, #24]
 800e2dc:	f04f 0902 	mov.w	r9, #2
 800e2e0:	e00a      	b.n	800e2f8 <wait_session_status+0x13c>
 800e2e2:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 800e2e6:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 800e2ea:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800e2ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e2f0:	a916      	add	r1, sp, #88	@ 0x58
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	f7ff fb8c 	bl	800da10 <read_submessage_list>
 800e2f8:	2204      	movs	r2, #4
 800e2fa:	a916      	add	r1, sp, #88	@ 0x58
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	f007 fe13 	bl	8015f28 <uxr_next_input_reliable_buffer_available>
 800e302:	2800      	cmp	r0, #0
 800e304:	d1ed      	bne.n	800e2e2 <wait_session_status+0x126>
 800e306:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e30a:	9d07      	ldr	r5, [sp, #28]
 800e30c:	9903      	ldr	r1, [sp, #12]
 800e30e:	4632      	mov	r2, r6
 800e310:	4620      	mov	r0, r4
 800e312:	f7ff fa23 	bl	800d75c <write_submessage_acknack.isra.0>
 800e316:	e76c      	b.n	800e1f2 <wait_session_status+0x36>
 800e318:	4631      	mov	r1, r6
 800e31a:	f104 0008 	add.w	r0, r4, #8
 800e31e:	f000 ffef 	bl	800f300 <uxr_get_input_best_effort_stream>
 800e322:	2800      	cmp	r0, #0
 800e324:	f43f af65 	beq.w	800e1f2 <wait_session_status+0x36>
 800e328:	9904      	ldr	r1, [sp, #16]
 800e32a:	f007 fcf3 	bl	8015d14 <uxr_receive_best_effort_message>
 800e32e:	2800      	cmp	r0, #0
 800e330:	f43f af5f 	beq.w	800e1f2 <wait_session_status+0x36>
 800e334:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800e338:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e33a:	a90e      	add	r1, sp, #56	@ 0x38
 800e33c:	4620      	mov	r0, r4
 800e33e:	f7ff fb67 	bl	800da10 <read_submessage_list>
 800e342:	e756      	b.n	800e1f2 <wait_session_status+0x36>
 800e344:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e346:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e34a:	47a0      	blx	r4
 800e34c:	2001      	movs	r0, #1
 800e34e:	b01f      	add	sp, #124	@ 0x7c
 800e350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e354:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 800e358:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e35a:	a90e      	add	r1, sp, #56	@ 0x38
 800e35c:	4620      	mov	r0, r4
 800e35e:	f7ff fb57 	bl	800da10 <read_submessage_list>
 800e362:	e7b5      	b.n	800e2d0 <wait_session_status+0x114>

0800e364 <uxr_delete_session_retries>:
 800e364:	b530      	push	{r4, r5, lr}
 800e366:	b08f      	sub	sp, #60	@ 0x3c
 800e368:	4604      	mov	r4, r0
 800e36a:	460d      	mov	r5, r1
 800e36c:	f000 fa3a 	bl	800e7e4 <uxr_session_header_offset>
 800e370:	2300      	movs	r3, #0
 800e372:	2210      	movs	r2, #16
 800e374:	9000      	str	r0, [sp, #0]
 800e376:	a902      	add	r1, sp, #8
 800e378:	a806      	add	r0, sp, #24
 800e37a:	f7fe fd7d 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 800e37e:	a906      	add	r1, sp, #24
 800e380:	4620      	mov	r0, r4
 800e382:	f000 f981 	bl	800e688 <uxr_buffer_delete_session>
 800e386:	2200      	movs	r2, #0
 800e388:	4611      	mov	r1, r2
 800e38a:	9b06      	ldr	r3, [sp, #24]
 800e38c:	4620      	mov	r0, r4
 800e38e:	f000 f9d5 	bl	800e73c <uxr_stamp_session_header>
 800e392:	a806      	add	r0, sp, #24
 800e394:	f7fe fdae 	bl	800cef4 <ucdr_buffer_length>
 800e398:	462b      	mov	r3, r5
 800e39a:	4602      	mov	r2, r0
 800e39c:	a902      	add	r1, sp, #8
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f7ff ff0c 	bl	800e1bc <wait_session_status>
 800e3a4:	b118      	cbz	r0, 800e3ae <uxr_delete_session_retries+0x4a>
 800e3a6:	7960      	ldrb	r0, [r4, #5]
 800e3a8:	fab0 f080 	clz	r0, r0
 800e3ac:	0940      	lsrs	r0, r0, #5
 800e3ae:	b00f      	add	sp, #60	@ 0x3c
 800e3b0:	bd30      	pop	{r4, r5, pc}
 800e3b2:	bf00      	nop

0800e3b4 <uxr_create_session>:
 800e3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b8:	f100 0308 	add.w	r3, r0, #8
 800e3bc:	b0ab      	sub	sp, #172	@ 0xac
 800e3be:	4604      	mov	r4, r0
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	9303      	str	r3, [sp, #12]
 800e3c4:	f000 feec 	bl	800f1a0 <uxr_reset_stream_storage>
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	f000 fa0b 	bl	800e7e4 <uxr_session_header_offset>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	9000      	str	r0, [sp, #0]
 800e3d2:	221c      	movs	r2, #28
 800e3d4:	a90b      	add	r1, sp, #44	@ 0x2c
 800e3d6:	a812      	add	r0, sp, #72	@ 0x48
 800e3d8:	f7fe fd4e 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 800e3dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e3de:	8a1a      	ldrh	r2, [r3, #16]
 800e3e0:	3a04      	subs	r2, #4
 800e3e2:	b292      	uxth	r2, r2
 800e3e4:	a912      	add	r1, sp, #72	@ 0x48
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f000 f924 	bl	800e634 <uxr_buffer_create_session>
 800e3ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f000 f990 	bl	800e714 <uxr_stamp_create_session_header>
 800e3f4:	a812      	add	r0, sp, #72	@ 0x48
 800e3f6:	f7fe fd7d 	bl	800cef4 <ucdr_buffer_length>
 800e3fa:	23ff      	movs	r3, #255	@ 0xff
 800e3fc:	4683      	mov	fp, r0
 800e3fe:	7163      	strb	r3, [r4, #5]
 800e400:	f04f 080a 	mov.w	r8, #10
 800e404:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e406:	465a      	mov	r2, fp
 800e408:	e9d3 0500 	ldrd	r0, r5, [r3]
 800e40c:	a90b      	add	r1, sp, #44	@ 0x2c
 800e40e:	47a8      	blx	r5
 800e410:	f000 ffe6 	bl	800f3e0 <uxr_millis>
 800e414:	2700      	movs	r7, #0
 800e416:	4605      	mov	r5, r0
 800e418:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e41c:	e009      	b.n	800e432 <uxr_create_session+0x7e>
 800e41e:	f000 ffdf 	bl	800f3e0 <uxr_millis>
 800e422:	1b43      	subs	r3, r0, r5
 800e424:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 800e428:	2b00      	cmp	r3, #0
 800e42a:	7962      	ldrb	r2, [r4, #5]
 800e42c:	dd3d      	ble.n	800e4aa <uxr_create_session+0xf6>
 800e42e:	2aff      	cmp	r2, #255	@ 0xff
 800e430:	d13b      	bne.n	800e4aa <uxr_create_session+0xf6>
 800e432:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800e434:	a907      	add	r1, sp, #28
 800e436:	6896      	ldr	r6, [r2, #8]
 800e438:	6810      	ldr	r0, [r2, #0]
 800e43a:	aa08      	add	r2, sp, #32
 800e43c:	47b0      	blx	r6
 800e43e:	2800      	cmp	r0, #0
 800e440:	d0ed      	beq.n	800e41e <uxr_create_session+0x6a>
 800e442:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800e446:	a81a      	add	r0, sp, #104	@ 0x68
 800e448:	f7fe fd28 	bl	800ce9c <ucdr_init_buffer>
 800e44c:	f10d 031a 	add.w	r3, sp, #26
 800e450:	aa06      	add	r2, sp, #24
 800e452:	a91a      	add	r1, sp, #104	@ 0x68
 800e454:	4620      	mov	r0, r4
 800e456:	f88d 7018 	strb.w	r7, [sp, #24]
 800e45a:	f000 f985 	bl	800e768 <uxr_read_session_header>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d0dd      	beq.n	800e41e <uxr_create_session+0x6a>
 800e462:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e466:	2100      	movs	r1, #0
 800e468:	f000 fe74 	bl	800f154 <uxr_stream_id_from_raw>
 800e46c:	f3c0 4907 	ubfx	r9, r0, #16, #8
 800e470:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 800e474:	9302      	str	r3, [sp, #8]
 800e476:	f1b9 0f01 	cmp.w	r9, #1
 800e47a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800e47e:	fa5f fa80 	uxtb.w	sl, r0
 800e482:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800e486:	d056      	beq.n	800e536 <uxr_create_session+0x182>
 800e488:	f1b9 0f02 	cmp.w	r9, #2
 800e48c:	d018      	beq.n	800e4c0 <uxr_create_session+0x10c>
 800e48e:	f1b9 0f00 	cmp.w	r9, #0
 800e492:	d1c4      	bne.n	800e41e <uxr_create_session+0x6a>
 800e494:	4649      	mov	r1, r9
 800e496:	4648      	mov	r0, r9
 800e498:	f000 fe5c 	bl	800f154 <uxr_stream_id_from_raw>
 800e49c:	a91a      	add	r1, sp, #104	@ 0x68
 800e49e:	4602      	mov	r2, r0
 800e4a0:	900a      	str	r0, [sp, #40]	@ 0x28
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	f7ff fab4 	bl	800da10 <read_submessage_list>
 800e4a8:	e7b9      	b.n	800e41e <uxr_create_session+0x6a>
 800e4aa:	f1b8 0801 	subs.w	r8, r8, #1
 800e4ae:	d001      	beq.n	800e4b4 <uxr_create_session+0x100>
 800e4b0:	2aff      	cmp	r2, #255	@ 0xff
 800e4b2:	d0a7      	beq.n	800e404 <uxr_create_session+0x50>
 800e4b4:	2a00      	cmp	r2, #0
 800e4b6:	d05b      	beq.n	800e570 <uxr_create_session+0x1bc>
 800e4b8:	2000      	movs	r0, #0
 800e4ba:	b02b      	add	sp, #172	@ 0xac
 800e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c0:	9803      	ldr	r0, [sp, #12]
 800e4c2:	4631      	mov	r1, r6
 800e4c4:	f000 ff26 	bl	800f314 <uxr_get_input_reliable_stream>
 800e4c8:	9004      	str	r0, [sp, #16]
 800e4ca:	b370      	cbz	r0, 800e52a <uxr_create_session+0x176>
 800e4cc:	aa1a      	add	r2, sp, #104	@ 0x68
 800e4ce:	4610      	mov	r0, r2
 800e4d0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e4d2:	9205      	str	r2, [sp, #20]
 800e4d4:	f7fe fd12 	bl	800cefc <ucdr_buffer_remaining>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	f10d 0019 	add.w	r0, sp, #25
 800e4de:	9000      	str	r0, [sp, #0]
 800e4e0:	9a05      	ldr	r2, [sp, #20]
 800e4e2:	9902      	ldr	r1, [sp, #8]
 800e4e4:	9804      	ldr	r0, [sp, #16]
 800e4e6:	f007 fca5 	bl	8015e34 <uxr_receive_reliable_message>
 800e4ea:	b1f0      	cbz	r0, 800e52a <uxr_create_session+0x176>
 800e4ec:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d035      	beq.n	800e560 <uxr_create_session+0x1ac>
 800e4f4:	f8cd b008 	str.w	fp, [sp, #8]
 800e4f8:	f04f 0902 	mov.w	r9, #2
 800e4fc:	f8dd b010 	ldr.w	fp, [sp, #16]
 800e500:	e00a      	b.n	800e518 <uxr_create_session+0x164>
 800e502:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 800e506:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800e50a:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800e50e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e510:	a922      	add	r1, sp, #136	@ 0x88
 800e512:	4620      	mov	r0, r4
 800e514:	f7ff fa7c 	bl	800da10 <read_submessage_list>
 800e518:	2204      	movs	r2, #4
 800e51a:	a922      	add	r1, sp, #136	@ 0x88
 800e51c:	4658      	mov	r0, fp
 800e51e:	f007 fd03 	bl	8015f28 <uxr_next_input_reliable_buffer_available>
 800e522:	2800      	cmp	r0, #0
 800e524:	d1ed      	bne.n	800e502 <uxr_create_session+0x14e>
 800e526:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e52a:	4632      	mov	r2, r6
 800e52c:	4651      	mov	r1, sl
 800e52e:	4620      	mov	r0, r4
 800e530:	f7ff f914 	bl	800d75c <write_submessage_acknack.isra.0>
 800e534:	e773      	b.n	800e41e <uxr_create_session+0x6a>
 800e536:	9803      	ldr	r0, [sp, #12]
 800e538:	4631      	mov	r1, r6
 800e53a:	f000 fee1 	bl	800f300 <uxr_get_input_best_effort_stream>
 800e53e:	2800      	cmp	r0, #0
 800e540:	f43f af6d 	beq.w	800e41e <uxr_create_session+0x6a>
 800e544:	9902      	ldr	r1, [sp, #8]
 800e546:	f007 fbe5 	bl	8015d14 <uxr_receive_best_effort_message>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	f43f af67 	beq.w	800e41e <uxr_create_session+0x6a>
 800e550:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800e554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e556:	a91a      	add	r1, sp, #104	@ 0x68
 800e558:	4620      	mov	r0, r4
 800e55a:	f7ff fa59 	bl	800da10 <read_submessage_list>
 800e55e:	e75e      	b.n	800e41e <uxr_create_session+0x6a>
 800e560:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 800e564:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e566:	a91a      	add	r1, sp, #104	@ 0x68
 800e568:	4620      	mov	r0, r4
 800e56a:	f7ff fa51 	bl	800da10 <read_submessage_list>
 800e56e:	e7c1      	b.n	800e4f4 <uxr_create_session+0x140>
 800e570:	9803      	ldr	r0, [sp, #12]
 800e572:	f000 fe15 	bl	800f1a0 <uxr_reset_stream_storage>
 800e576:	2001      	movs	r0, #1
 800e578:	b02b      	add	sp, #172	@ 0xac
 800e57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e57e:	bf00      	nop

0800e580 <uxr_prepare_stream_to_write_submessage>:
 800e580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e584:	b082      	sub	sp, #8
 800e586:	4606      	mov	r6, r0
 800e588:	4610      	mov	r0, r2
 800e58a:	4614      	mov	r4, r2
 800e58c:	9101      	str	r1, [sp, #4]
 800e58e:	461f      	mov	r7, r3
 800e590:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800e594:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 800e598:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 800e59c:	f000 ff1a 	bl	800f3d4 <uxr_submessage_padding>
 800e5a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e5a4:	1d21      	adds	r1, r4, #4
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	eb01 0a00 	add.w	sl, r1, r0
 800e5ac:	d012      	beq.n	800e5d4 <uxr_prepare_stream_to_write_submessage+0x54>
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d003      	beq.n	800e5ba <uxr_prepare_stream_to_write_submessage+0x3a>
 800e5b2:	2000      	movs	r0, #0
 800e5b4:	b002      	add	sp, #8
 800e5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ba:	4629      	mov	r1, r5
 800e5bc:	f106 0008 	add.w	r0, r6, #8
 800e5c0:	f000 fe94 	bl	800f2ec <uxr_get_output_reliable_stream>
 800e5c4:	2800      	cmp	r0, #0
 800e5c6:	d0f4      	beq.n	800e5b2 <uxr_prepare_stream_to_write_submessage+0x32>
 800e5c8:	4651      	mov	r1, sl
 800e5ca:	463a      	mov	r2, r7
 800e5cc:	f007 fe62 	bl	8016294 <uxr_prepare_reliable_buffer_to_write>
 800e5d0:	b968      	cbnz	r0, 800e5ee <uxr_prepare_stream_to_write_submessage+0x6e>
 800e5d2:	e7ee      	b.n	800e5b2 <uxr_prepare_stream_to_write_submessage+0x32>
 800e5d4:	4629      	mov	r1, r5
 800e5d6:	f106 0008 	add.w	r0, r6, #8
 800e5da:	f000 fe7f 	bl	800f2dc <uxr_get_output_best_effort_stream>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d0e7      	beq.n	800e5b2 <uxr_prepare_stream_to_write_submessage+0x32>
 800e5e2:	4651      	mov	r1, sl
 800e5e4:	463a      	mov	r2, r7
 800e5e6:	f007 fd87 	bl	80160f8 <uxr_prepare_best_effort_buffer_to_write>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	d0e1      	beq.n	800e5b2 <uxr_prepare_stream_to_write_submessage+0x32>
 800e5ee:	464b      	mov	r3, r9
 800e5f0:	b2a2      	uxth	r2, r4
 800e5f2:	4641      	mov	r1, r8
 800e5f4:	4638      	mov	r0, r7
 800e5f6:	f000 fead 	bl	800f354 <uxr_buffer_submessage_header>
 800e5fa:	2001      	movs	r0, #1
 800e5fc:	b002      	add	sp, #8
 800e5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e602:	bf00      	nop

0800e604 <uxr_init_session_info>:
 800e604:	2300      	movs	r3, #0
 800e606:	f361 0307 	bfi	r3, r1, #0, #8
 800e60a:	0e11      	lsrs	r1, r2, #24
 800e60c:	f361 230f 	bfi	r3, r1, #8, #8
 800e610:	f3c2 4107 	ubfx	r1, r2, #16, #8
 800e614:	f361 4317 	bfi	r3, r1, #16, #8
 800e618:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e61c:	f361 631f 	bfi	r3, r1, #24, #8
 800e620:	f04f 0c09 	mov.w	ip, #9
 800e624:	21ff      	movs	r1, #255	@ 0xff
 800e626:	6003      	str	r3, [r0, #0]
 800e628:	7102      	strb	r2, [r0, #4]
 800e62a:	f8a0 c006 	strh.w	ip, [r0, #6]
 800e62e:	7141      	strb	r1, [r0, #5]
 800e630:	4770      	bx	lr
 800e632:	bf00      	nop

0800e634 <uxr_buffer_create_session>:
 800e634:	b530      	push	{r4, r5, lr}
 800e636:	4d13      	ldr	r5, [pc, #76]	@ (800e684 <uxr_buffer_create_session+0x50>)
 800e638:	b089      	sub	sp, #36	@ 0x24
 800e63a:	2300      	movs	r3, #0
 800e63c:	9307      	str	r3, [sp, #28]
 800e63e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e642:	682a      	ldr	r2, [r5, #0]
 800e644:	9200      	str	r2, [sp, #0]
 800e646:	460c      	mov	r4, r1
 800e648:	2201      	movs	r2, #1
 800e64a:	88a9      	ldrh	r1, [r5, #4]
 800e64c:	9301      	str	r3, [sp, #4]
 800e64e:	80c2      	strh	r2, [r0, #6]
 800e650:	f8ad 1006 	strh.w	r1, [sp, #6]
 800e654:	f8d0 1001 	ldr.w	r1, [r0, #1]
 800e658:	7800      	ldrb	r0, [r0, #0]
 800e65a:	9303      	str	r3, [sp, #12]
 800e65c:	f88d 2004 	strb.w	r2, [sp, #4]
 800e660:	9102      	str	r1, [sp, #8]
 800e662:	2210      	movs	r2, #16
 800e664:	4619      	mov	r1, r3
 800e666:	f88d 000c 	strb.w	r0, [sp, #12]
 800e66a:	4620      	mov	r0, r4
 800e66c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800e670:	9306      	str	r3, [sp, #24]
 800e672:	f000 fe6f 	bl	800f354 <uxr_buffer_submessage_header>
 800e676:	4669      	mov	r1, sp
 800e678:	4620      	mov	r0, r4
 800e67a:	f001 fda1 	bl	80101c0 <uxr_serialize_CREATE_CLIENT_Payload>
 800e67e:	b009      	add	sp, #36	@ 0x24
 800e680:	bd30      	pop	{r4, r5, pc}
 800e682:	bf00      	nop
 800e684:	08019c8c 	.word	0x08019c8c

0800e688 <uxr_buffer_delete_session>:
 800e688:	b510      	push	{r4, lr}
 800e68a:	4a0c      	ldr	r2, [pc, #48]	@ (800e6bc <uxr_buffer_delete_session+0x34>)
 800e68c:	b082      	sub	sp, #8
 800e68e:	460c      	mov	r4, r1
 800e690:	2302      	movs	r3, #2
 800e692:	8911      	ldrh	r1, [r2, #8]
 800e694:	80c3      	strh	r3, [r0, #6]
 800e696:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 800e69a:	2300      	movs	r3, #0
 800e69c:	2204      	movs	r2, #4
 800e69e:	f8ad 1006 	strh.w	r1, [sp, #6]
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	2103      	movs	r1, #3
 800e6a6:	f8ad c004 	strh.w	ip, [sp, #4]
 800e6aa:	f000 fe53 	bl	800f354 <uxr_buffer_submessage_header>
 800e6ae:	a901      	add	r1, sp, #4
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f001 fe3d 	bl	8010330 <uxr_serialize_DELETE_Payload>
 800e6b6:	b002      	add	sp, #8
 800e6b8:	bd10      	pop	{r4, pc}
 800e6ba:	bf00      	nop
 800e6bc:	08019c8c 	.word	0x08019c8c

0800e6c0 <uxr_read_create_session_status>:
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	b088      	sub	sp, #32
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	a901      	add	r1, sp, #4
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f001 fe40 	bl	8010350 <uxr_deserialize_STATUS_AGENT_Payload>
 800e6d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e6d4:	7163      	strb	r3, [r4, #5]
 800e6d6:	b008      	add	sp, #32
 800e6d8:	bd10      	pop	{r4, pc}
 800e6da:	bf00      	nop

0800e6dc <uxr_read_delete_session_status>:
 800e6dc:	b510      	push	{r4, lr}
 800e6de:	460b      	mov	r3, r1
 800e6e0:	b082      	sub	sp, #8
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	4669      	mov	r1, sp
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f001 fe62 	bl	80103b0 <uxr_deserialize_STATUS_Payload>
 800e6ec:	88e3      	ldrh	r3, [r4, #6]
 800e6ee:	2b02      	cmp	r3, #2
 800e6f0:	d001      	beq.n	800e6f6 <uxr_read_delete_session_status+0x1a>
 800e6f2:	b002      	add	sp, #8
 800e6f4:	bd10      	pop	{r4, pc}
 800e6f6:	f10d 0002 	add.w	r0, sp, #2
 800e6fa:	f7fe fead 	bl	800d458 <uxr_object_id_from_raw>
 800e6fe:	f8bd 3000 	ldrh.w	r3, [sp]
 800e702:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e70a:	bf08      	it	eq
 800e70c:	7162      	strbeq	r2, [r4, #5]
 800e70e:	b002      	add	sp, #8
 800e710:	bd10      	pop	{r4, pc}
 800e712:	bf00      	nop

0800e714 <uxr_stamp_create_session_header>:
 800e714:	b510      	push	{r4, lr}
 800e716:	2208      	movs	r2, #8
 800e718:	b08a      	sub	sp, #40	@ 0x28
 800e71a:	4604      	mov	r4, r0
 800e71c:	eb0d 0002 	add.w	r0, sp, r2
 800e720:	f7fe fbbc 	bl	800ce9c <ucdr_init_buffer>
 800e724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e728:	9400      	str	r4, [sp, #0]
 800e72a:	2300      	movs	r3, #0
 800e72c:	461a      	mov	r2, r3
 800e72e:	a802      	add	r0, sp, #8
 800e730:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e734:	f001 f80c 	bl	800f750 <uxr_serialize_message_header>
 800e738:	b00a      	add	sp, #40	@ 0x28
 800e73a:	bd10      	pop	{r4, pc}

0800e73c <uxr_stamp_session_header>:
 800e73c:	b570      	push	{r4, r5, r6, lr}
 800e73e:	4604      	mov	r4, r0
 800e740:	b08a      	sub	sp, #40	@ 0x28
 800e742:	4616      	mov	r6, r2
 800e744:	2208      	movs	r2, #8
 800e746:	eb0d 0002 	add.w	r0, sp, r2
 800e74a:	460d      	mov	r5, r1
 800e74c:	4619      	mov	r1, r3
 800e74e:	f7fe fba5 	bl	800ce9c <ucdr_init_buffer>
 800e752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e756:	9400      	str	r4, [sp, #0]
 800e758:	4633      	mov	r3, r6
 800e75a:	462a      	mov	r2, r5
 800e75c:	a802      	add	r0, sp, #8
 800e75e:	f000 fff7 	bl	800f750 <uxr_serialize_message_header>
 800e762:	b00a      	add	sp, #40	@ 0x28
 800e764:	bd70      	pop	{r4, r5, r6, pc}
 800e766:	bf00      	nop

0800e768 <uxr_read_session_header>:
 800e768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e76a:	4607      	mov	r7, r0
 800e76c:	b085      	sub	sp, #20
 800e76e:	4608      	mov	r0, r1
 800e770:	460c      	mov	r4, r1
 800e772:	4615      	mov	r5, r2
 800e774:	461e      	mov	r6, r3
 800e776:	f7fe fbc1 	bl	800cefc <ucdr_buffer_remaining>
 800e77a:	2808      	cmp	r0, #8
 800e77c:	d802      	bhi.n	800e784 <uxr_read_session_header+0x1c>
 800e77e:	2000      	movs	r0, #0
 800e780:	b005      	add	sp, #20
 800e782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e784:	ab03      	add	r3, sp, #12
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	462a      	mov	r2, r5
 800e78a:	4633      	mov	r3, r6
 800e78c:	f10d 010b 	add.w	r1, sp, #11
 800e790:	4620      	mov	r0, r4
 800e792:	f000 fffb 	bl	800f78c <uxr_deserialize_message_header>
 800e796:	783a      	ldrb	r2, [r7, #0]
 800e798:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e79c:	4293      	cmp	r3, r2
 800e79e:	d1ee      	bne.n	800e77e <uxr_read_session_header+0x16>
 800e7a0:	061b      	lsls	r3, r3, #24
 800e7a2:	d41c      	bmi.n	800e7de <uxr_read_session_header+0x76>
 800e7a4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e7a8:	787b      	ldrb	r3, [r7, #1]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d003      	beq.n	800e7b6 <uxr_read_session_header+0x4e>
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	f080 0001 	eor.w	r0, r0, #1
 800e7b4:	e7e4      	b.n	800e780 <uxr_read_session_header+0x18>
 800e7b6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e7ba:	78bb      	ldrb	r3, [r7, #2]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	f107 0102 	add.w	r1, r7, #2
 800e7c2:	d1f4      	bne.n	800e7ae <uxr_read_session_header+0x46>
 800e7c4:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e7c8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d1ee      	bne.n	800e7ae <uxr_read_session_header+0x46>
 800e7d0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e7d4:	784b      	ldrb	r3, [r1, #1]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d1e9      	bne.n	800e7ae <uxr_read_session_header+0x46>
 800e7da:	2000      	movs	r0, #0
 800e7dc:	e7e8      	b.n	800e7b0 <uxr_read_session_header+0x48>
 800e7de:	2001      	movs	r0, #1
 800e7e0:	e7ce      	b.n	800e780 <uxr_read_session_header+0x18>
 800e7e2:	bf00      	nop

0800e7e4 <uxr_session_header_offset>:
 800e7e4:	f990 3000 	ldrsb.w	r3, [r0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	bfb4      	ite	lt
 800e7ec:	2004      	movlt	r0, #4
 800e7ee:	2008      	movge	r0, #8
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop

0800e7f4 <uxr_init_base_object_request>:
 800e7f4:	b510      	push	{r4, lr}
 800e7f6:	88c3      	ldrh	r3, [r0, #6]
 800e7f8:	b082      	sub	sp, #8
 800e7fa:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800e7fe:	9101      	str	r1, [sp, #4]
 800e800:	f1a3 010a 	sub.w	r1, r3, #10
 800e804:	b289      	uxth	r1, r1
 800e806:	42a1      	cmp	r1, r4
 800e808:	d80e      	bhi.n	800e828 <uxr_init_base_object_request+0x34>
 800e80a:	3301      	adds	r3, #1
 800e80c:	b29c      	uxth	r4, r3
 800e80e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e812:	b2db      	uxtb	r3, r3
 800e814:	80c4      	strh	r4, [r0, #6]
 800e816:	9801      	ldr	r0, [sp, #4]
 800e818:	7011      	strb	r1, [r2, #0]
 800e81a:	7053      	strb	r3, [r2, #1]
 800e81c:	1c91      	adds	r1, r2, #2
 800e81e:	f7fe fe2f 	bl	800d480 <uxr_object_id_to_raw>
 800e822:	4620      	mov	r0, r4
 800e824:	b002      	add	sp, #8
 800e826:	bd10      	pop	{r4, pc}
 800e828:	230a      	movs	r3, #10
 800e82a:	2100      	movs	r1, #0
 800e82c:	461c      	mov	r4, r3
 800e82e:	e7f1      	b.n	800e814 <uxr_init_base_object_request+0x20>

0800e830 <uxr_parse_base_object_request>:
 800e830:	b570      	push	{r4, r5, r6, lr}
 800e832:	4604      	mov	r4, r0
 800e834:	3002      	adds	r0, #2
 800e836:	460d      	mov	r5, r1
 800e838:	4616      	mov	r6, r2
 800e83a:	f7fe fe0d 	bl	800d458 <uxr_object_id_from_raw>
 800e83e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e842:	8028      	strh	r0, [r5, #0]
 800e844:	806b      	strh	r3, [r5, #2]
 800e846:	8823      	ldrh	r3, [r4, #0]
 800e848:	ba5b      	rev16	r3, r3
 800e84a:	8033      	strh	r3, [r6, #0]
 800e84c:	bd70      	pop	{r4, r5, r6, pc}
 800e84e:	bf00      	nop

0800e850 <uxr_init_framing_io>:
 800e850:	2300      	movs	r3, #0
 800e852:	7041      	strb	r1, [r0, #1]
 800e854:	7003      	strb	r3, [r0, #0]
 800e856:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e858:	4770      	bx	lr
 800e85a:	bf00      	nop

0800e85c <uxr_write_framed_msg>:
 800e85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e860:	f890 c001 	ldrb.w	ip, [r0, #1]
 800e864:	4617      	mov	r7, r2
 800e866:	227e      	movs	r2, #126	@ 0x7e
 800e868:	b085      	sub	sp, #20
 800e86a:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 800e86e:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 800e872:	2a01      	cmp	r2, #1
 800e874:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800e878:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 800e87c:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e880:	4604      	mov	r4, r0
 800e882:	460e      	mov	r6, r1
 800e884:	469a      	mov	sl, r3
 800e886:	f240 812e 	bls.w	800eae6 <uxr_write_framed_msg+0x28a>
 800e88a:	2003      	movs	r0, #3
 800e88c:	2102      	movs	r1, #2
 800e88e:	f04f 0905 	mov.w	r9, #5
 800e892:	2204      	movs	r2, #4
 800e894:	4686      	mov	lr, r0
 800e896:	460b      	mov	r3, r1
 800e898:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 800e89c:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 800e8a0:	f1bc 0f01 	cmp.w	ip, #1
 800e8a4:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800e8a8:	4421      	add	r1, r4
 800e8aa:	f240 8110 	bls.w	800eace <uxr_write_framed_msg+0x272>
 800e8ae:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800e8b2:	fa5f fc8b 	uxtb.w	ip, fp
 800e8b6:	f3cb 2107 	ubfx	r1, fp, #8, #8
 800e8ba:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 800e8be:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 800e8c2:	f1be 0f01 	cmp.w	lr, #1
 800e8c6:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 800e8ca:	b2ed      	uxtb	r5, r5
 800e8cc:	d94c      	bls.n	800e968 <uxr_write_framed_msg+0x10c>
 800e8ce:	4420      	add	r0, r4
 800e8d0:	2d01      	cmp	r5, #1
 800e8d2:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800e8d6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e8da:	d95d      	bls.n	800e998 <uxr_write_framed_msg+0x13c>
 800e8dc:	18a0      	adds	r0, r4, r2
 800e8de:	3201      	adds	r2, #1
 800e8e0:	b2d2      	uxtb	r2, r2
 800e8e2:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e8e6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e8ea:	f1bb 0f00 	cmp.w	fp, #0
 800e8ee:	f000 8108 	beq.w	800eb02 <uxr_write_framed_msg+0x2a6>
 800e8f2:	f04f 0c00 	mov.w	ip, #0
 800e8f6:	4661      	mov	r1, ip
 800e8f8:	46de      	mov	lr, fp
 800e8fa:	46e3      	mov	fp, ip
 800e8fc:	46d4      	mov	ip, sl
 800e8fe:	468a      	mov	sl, r1
 800e900:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 800eb0c <uxr_write_framed_msg+0x2b0>
 800e904:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800e908:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e90c:	2901      	cmp	r1, #1
 800e90e:	d91b      	bls.n	800e948 <uxr_write_framed_msg+0xec>
 800e910:	2a29      	cmp	r2, #41	@ 0x29
 800e912:	d84e      	bhi.n	800e9b2 <uxr_write_framed_msg+0x156>
 800e914:	18a1      	adds	r1, r4, r2
 800e916:	3201      	adds	r2, #1
 800e918:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800e91c:	b2d2      	uxtb	r2, r2
 800e91e:	ea8b 0303 	eor.w	r3, fp, r3
 800e922:	b2db      	uxtb	r3, r3
 800e924:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e928:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 800e92c:	f10a 0a01 	add.w	sl, sl, #1
 800e930:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 800e934:	45d6      	cmp	lr, sl
 800e936:	d95a      	bls.n	800e9ee <uxr_write_framed_msg+0x192>
 800e938:	f81c 300a 	ldrb.w	r3, [ip, sl]
 800e93c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e940:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800e944:	2901      	cmp	r1, #1
 800e946:	d8e3      	bhi.n	800e910 <uxr_write_framed_msg+0xb4>
 800e948:	1c51      	adds	r1, r2, #1
 800e94a:	b2c9      	uxtb	r1, r1
 800e94c:	2929      	cmp	r1, #41	@ 0x29
 800e94e:	d830      	bhi.n	800e9b2 <uxr_write_framed_msg+0x156>
 800e950:	18a1      	adds	r1, r4, r2
 800e952:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 800e956:	3202      	adds	r2, #2
 800e958:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800e95c:	f083 0020 	eor.w	r0, r3, #32
 800e960:	b2d2      	uxtb	r2, r2
 800e962:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 800e966:	e7da      	b.n	800e91e <uxr_write_framed_msg+0xc2>
 800e968:	eb04 0e00 	add.w	lr, r4, r0
 800e96c:	f08c 0c20 	eor.w	ip, ip, #32
 800e970:	1c82      	adds	r2, r0, #2
 800e972:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 800e976:	b2d2      	uxtb	r2, r2
 800e978:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800e97c:	2d01      	cmp	r5, #1
 800e97e:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 800e982:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e986:	d907      	bls.n	800e998 <uxr_write_framed_msg+0x13c>
 800e988:	4422      	add	r2, r4
 800e98a:	3003      	adds	r0, #3
 800e98c:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 800e990:	b2c2      	uxtb	r2, r0
 800e992:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e996:	e7ac      	b.n	800e8f2 <uxr_write_framed_msg+0x96>
 800e998:	18a0      	adds	r0, r4, r2
 800e99a:	f081 0120 	eor.w	r1, r1, #32
 800e99e:	3202      	adds	r2, #2
 800e9a0:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 800e9a4:	b2d2      	uxtb	r2, r2
 800e9a6:	217d      	movs	r1, #125	@ 0x7d
 800e9a8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e9ac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800e9b0:	e79f      	b.n	800e8f2 <uxr_write_framed_msg+0x96>
 800e9b2:	e9cd ba00 	strd	fp, sl, [sp]
 800e9b6:	2500      	movs	r5, #0
 800e9b8:	46e2      	mov	sl, ip
 800e9ba:	46f3      	mov	fp, lr
 800e9bc:	e000      	b.n	800e9c0 <uxr_write_framed_msg+0x164>
 800e9be:	b190      	cbz	r0, 800e9e6 <uxr_write_framed_msg+0x18a>
 800e9c0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800e9c4:	1b52      	subs	r2, r2, r5
 800e9c6:	4643      	mov	r3, r8
 800e9c8:	4421      	add	r1, r4
 800e9ca:	4638      	mov	r0, r7
 800e9cc:	47b0      	blx	r6
 800e9ce:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e9d2:	4405      	add	r5, r0
 800e9d4:	4295      	cmp	r5, r2
 800e9d6:	d3f2      	bcc.n	800e9be <uxr_write_framed_msg+0x162>
 800e9d8:	46d4      	mov	ip, sl
 800e9da:	46de      	mov	lr, fp
 800e9dc:	f8dd a004 	ldr.w	sl, [sp, #4]
 800e9e0:	f8dd b000 	ldr.w	fp, [sp]
 800e9e4:	d06f      	beq.n	800eac6 <uxr_write_framed_msg+0x26a>
 800e9e6:	2000      	movs	r0, #0
 800e9e8:	b005      	add	sp, #20
 800e9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9ee:	46dc      	mov	ip, fp
 800e9f0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800e9f4:	f8ad c00c 	strh.w	ip, [sp, #12]
 800e9f8:	46f3      	mov	fp, lr
 800e9fa:	fa5f fc8c 	uxtb.w	ip, ip
 800e9fe:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	f04f 0900 	mov.w	r9, #0
 800ea08:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 800ea0c:	d930      	bls.n	800ea70 <uxr_write_framed_msg+0x214>
 800ea0e:	2a29      	cmp	r2, #41	@ 0x29
 800ea10:	d91c      	bls.n	800ea4c <uxr_write_framed_msg+0x1f0>
 800ea12:	2500      	movs	r5, #0
 800ea14:	e001      	b.n	800ea1a <uxr_write_framed_msg+0x1be>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	d0e5      	beq.n	800e9e6 <uxr_write_framed_msg+0x18a>
 800ea1a:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800ea1e:	1b52      	subs	r2, r2, r5
 800ea20:	4643      	mov	r3, r8
 800ea22:	4421      	add	r1, r4
 800ea24:	4638      	mov	r0, r7
 800ea26:	47b0      	blx	r6
 800ea28:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800ea2c:	4405      	add	r5, r0
 800ea2e:	4295      	cmp	r5, r2
 800ea30:	d3f1      	bcc.n	800ea16 <uxr_write_framed_msg+0x1ba>
 800ea32:	d1d8      	bne.n	800e9e6 <uxr_write_framed_msg+0x18a>
 800ea34:	f109 0310 	add.w	r3, r9, #16
 800ea38:	446b      	add	r3, sp
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 800ea40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ea44:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d911      	bls.n	800ea70 <uxr_write_framed_msg+0x214>
 800ea4c:	18a3      	adds	r3, r4, r2
 800ea4e:	3201      	adds	r2, #1
 800ea50:	b2d2      	uxtb	r2, r2
 800ea52:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 800ea56:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ea5a:	f1b9 0f00 	cmp.w	r9, #0
 800ea5e:	d119      	bne.n	800ea94 <uxr_write_framed_msg+0x238>
 800ea60:	f89d c00d 	ldrb.w	ip, [sp, #13]
 800ea64:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	f04f 0901 	mov.w	r9, #1
 800ea6e:	d8ce      	bhi.n	800ea0e <uxr_write_framed_msg+0x1b2>
 800ea70:	1c53      	adds	r3, r2, #1
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	2b29      	cmp	r3, #41	@ 0x29
 800ea76:	d8cc      	bhi.n	800ea12 <uxr_write_framed_msg+0x1b6>
 800ea78:	18a3      	adds	r3, r4, r2
 800ea7a:	3202      	adds	r2, #2
 800ea7c:	f08c 0c20 	eor.w	ip, ip, #32
 800ea80:	b2d2      	uxtb	r2, r2
 800ea82:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 800ea86:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 800ea8a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ea8e:	f1b9 0f00 	cmp.w	r9, #0
 800ea92:	d0e5      	beq.n	800ea60 <uxr_write_framed_msg+0x204>
 800ea94:	2500      	movs	r5, #0
 800ea96:	e001      	b.n	800ea9c <uxr_write_framed_msg+0x240>
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d0a4      	beq.n	800e9e6 <uxr_write_framed_msg+0x18a>
 800ea9c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800eaa0:	1b52      	subs	r2, r2, r5
 800eaa2:	4643      	mov	r3, r8
 800eaa4:	4421      	add	r1, r4
 800eaa6:	4638      	mov	r0, r7
 800eaa8:	47b0      	blx	r6
 800eaaa:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800eaae:	4405      	add	r5, r0
 800eab0:	4295      	cmp	r5, r2
 800eab2:	d3f1      	bcc.n	800ea98 <uxr_write_framed_msg+0x23c>
 800eab4:	d197      	bne.n	800e9e6 <uxr_write_framed_msg+0x18a>
 800eab6:	2300      	movs	r3, #0
 800eab8:	fa1f f08b 	uxth.w	r0, fp
 800eabc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800eac0:	b005      	add	sp, #20
 800eac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac6:	2300      	movs	r3, #0
 800eac8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800eacc:	e732      	b.n	800e934 <uxr_write_framed_msg+0xd8>
 800eace:	44a6      	add	lr, r4
 800ead0:	f085 0520 	eor.w	r5, r5, #32
 800ead4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800ead8:	4610      	mov	r0, r2
 800eada:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 800eade:	464a      	mov	r2, r9
 800eae0:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 800eae4:	e6e5      	b.n	800e8b2 <uxr_write_framed_msg+0x56>
 800eae6:	f08c 0c20 	eor.w	ip, ip, #32
 800eaea:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 800eaee:	2103      	movs	r1, #3
 800eaf0:	2004      	movs	r0, #4
 800eaf2:	f04f 0906 	mov.w	r9, #6
 800eaf6:	2205      	movs	r2, #5
 800eaf8:	4686      	mov	lr, r0
 800eafa:	460b      	mov	r3, r1
 800eafc:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800eb00:	e6ca      	b.n	800e898 <uxr_write_framed_msg+0x3c>
 800eb02:	f8ad b00c 	strh.w	fp, [sp, #12]
 800eb06:	46dc      	mov	ip, fp
 800eb08:	e779      	b.n	800e9fe <uxr_write_framed_msg+0x1a2>
 800eb0a:	bf00      	nop
 800eb0c:	0801a788 	.word	0x0801a788

0800eb10 <uxr_framing_read_transport>:
 800eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb14:	4604      	mov	r4, r0
 800eb16:	b083      	sub	sp, #12
 800eb18:	461f      	mov	r7, r3
 800eb1a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800eb1e:	4689      	mov	r9, r1
 800eb20:	4692      	mov	sl, r2
 800eb22:	f000 fc5d 	bl	800f3e0 <uxr_millis>
 800eb26:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800eb2a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800eb2e:	42b3      	cmp	r3, r6
 800eb30:	4680      	mov	r8, r0
 800eb32:	d062      	beq.n	800ebfa <uxr_framing_read_transport+0xea>
 800eb34:	d81c      	bhi.n	800eb70 <uxr_framing_read_transport+0x60>
 800eb36:	1e75      	subs	r5, r6, #1
 800eb38:	1aed      	subs	r5, r5, r3
 800eb3a:	b2ed      	uxtb	r5, r5
 800eb3c:	2600      	movs	r6, #0
 800eb3e:	455d      	cmp	r5, fp
 800eb40:	d81f      	bhi.n	800eb82 <uxr_framing_read_transport+0x72>
 800eb42:	19ab      	adds	r3, r5, r6
 800eb44:	455b      	cmp	r3, fp
 800eb46:	bf84      	itt	hi
 800eb48:	ebab 0b05 	subhi.w	fp, fp, r5
 800eb4c:	fa5f f68b 	uxtbhi.w	r6, fp
 800eb50:	b9e5      	cbnz	r5, 800eb8c <uxr_framing_read_transport+0x7c>
 800eb52:	f04f 0b00 	mov.w	fp, #0
 800eb56:	f000 fc43 	bl	800f3e0 <uxr_millis>
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	eba0 0108 	sub.w	r1, r0, r8
 800eb60:	1a5b      	subs	r3, r3, r1
 800eb62:	4658      	mov	r0, fp
 800eb64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eb68:	603b      	str	r3, [r7, #0]
 800eb6a:	b003      	add	sp, #12
 800eb6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb70:	2e00      	cmp	r6, #0
 800eb72:	d04a      	beq.n	800ec0a <uxr_framing_read_transport+0xfa>
 800eb74:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 800eb78:	b2dd      	uxtb	r5, r3
 800eb7a:	3e01      	subs	r6, #1
 800eb7c:	455d      	cmp	r5, fp
 800eb7e:	b2f6      	uxtb	r6, r6
 800eb80:	d9df      	bls.n	800eb42 <uxr_framing_read_transport+0x32>
 800eb82:	fa5f f58b 	uxtb.w	r5, fp
 800eb86:	2600      	movs	r6, #0
 800eb88:	2d00      	cmp	r5, #0
 800eb8a:	d0e2      	beq.n	800eb52 <uxr_framing_read_transport+0x42>
 800eb8c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800eb90:	3102      	adds	r1, #2
 800eb92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb94:	9300      	str	r3, [sp, #0]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	4421      	add	r1, r4
 800eb9a:	462a      	mov	r2, r5
 800eb9c:	4650      	mov	r0, sl
 800eb9e:	47c8      	blx	r9
 800eba0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800eba4:	4a1b      	ldr	r2, [pc, #108]	@ (800ec14 <uxr_framing_read_transport+0x104>)
 800eba6:	4403      	add	r3, r0
 800eba8:	0859      	lsrs	r1, r3, #1
 800ebaa:	4683      	mov	fp, r0
 800ebac:	fba2 0101 	umull	r0, r1, r2, r1
 800ebb0:	0889      	lsrs	r1, r1, #2
 800ebb2:	222a      	movs	r2, #42	@ 0x2a
 800ebb4:	fb02 3111 	mls	r1, r2, r1, r3
 800ebb8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800ebbc:	f1bb 0f00 	cmp.w	fp, #0
 800ebc0:	d0c7      	beq.n	800eb52 <uxr_framing_read_transport+0x42>
 800ebc2:	45ab      	cmp	fp, r5
 800ebc4:	d1c7      	bne.n	800eb56 <uxr_framing_read_transport+0x46>
 800ebc6:	2e00      	cmp	r6, #0
 800ebc8:	d0c5      	beq.n	800eb56 <uxr_framing_read_transport+0x46>
 800ebca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ebcc:	9300      	str	r3, [sp, #0]
 800ebce:	3102      	adds	r1, #2
 800ebd0:	4632      	mov	r2, r6
 800ebd2:	4421      	add	r1, r4
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4650      	mov	r0, sl
 800ebd8:	47c8      	blx	r9
 800ebda:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800ebde:	4a0d      	ldr	r2, [pc, #52]	@ (800ec14 <uxr_framing_read_transport+0x104>)
 800ebe0:	4403      	add	r3, r0
 800ebe2:	0859      	lsrs	r1, r3, #1
 800ebe4:	fba2 2101 	umull	r2, r1, r2, r1
 800ebe8:	0889      	lsrs	r1, r1, #2
 800ebea:	222a      	movs	r2, #42	@ 0x2a
 800ebec:	fb02 3311 	mls	r3, r2, r1, r3
 800ebf0:	eb00 0b05 	add.w	fp, r0, r5
 800ebf4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800ebf8:	e7ad      	b.n	800eb56 <uxr_framing_read_transport+0x46>
 800ebfa:	2600      	movs	r6, #0
 800ebfc:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800ec00:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800ec02:	d9be      	bls.n	800eb82 <uxr_framing_read_transport+0x72>
 800ec04:	2529      	movs	r5, #41	@ 0x29
 800ec06:	2102      	movs	r1, #2
 800ec08:	e7c3      	b.n	800eb92 <uxr_framing_read_transport+0x82>
 800ec0a:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 800ec0e:	b2dd      	uxtb	r5, r3
 800ec10:	e795      	b.n	800eb3e <uxr_framing_read_transport+0x2e>
 800ec12:	bf00      	nop
 800ec14:	30c30c31 	.word	0x30c30c31

0800ec18 <uxr_read_framed_msg>:
 800ec18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec1c:	461d      	mov	r5, r3
 800ec1e:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 800ec22:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800ec26:	b085      	sub	sp, #20
 800ec28:	459c      	cmp	ip, r3
 800ec2a:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800ec2e:	4604      	mov	r4, r0
 800ec30:	460f      	mov	r7, r1
 800ec32:	4616      	mov	r6, r2
 800ec34:	f000 81ae 	beq.w	800ef94 <uxr_read_framed_msg+0x37c>
 800ec38:	2000      	movs	r0, #0
 800ec3a:	4639      	mov	r1, r7
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	d138      	bne.n	800ecb2 <uxr_read_framed_msg+0x9a>
 800ec40:	468a      	mov	sl, r1
 800ec42:	7823      	ldrb	r3, [r4, #0]
 800ec44:	2b07      	cmp	r3, #7
 800ec46:	d8fd      	bhi.n	800ec44 <uxr_read_framed_msg+0x2c>
 800ec48:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ec4c:	0116013b 	.word	0x0116013b
 800ec50:	00cd00f0 	.word	0x00cd00f0
 800ec54:	005a00a0 	.word	0x005a00a0
 800ec58:	00080037 	.word	0x00080037
 800ec5c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ec60:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ec64:	4290      	cmp	r0, r2
 800ec66:	f000 8167 	beq.w	800ef38 <uxr_read_framed_msg+0x320>
 800ec6a:	18a3      	adds	r3, r4, r2
 800ec6c:	1c57      	adds	r7, r2, #1
 800ec6e:	49c7      	ldr	r1, [pc, #796]	@ (800ef8c <uxr_read_framed_msg+0x374>)
 800ec70:	f893 c002 	ldrb.w	ip, [r3, #2]
 800ec74:	087b      	lsrs	r3, r7, #1
 800ec76:	fba1 8303 	umull	r8, r3, r1, r3
 800ec7a:	089b      	lsrs	r3, r3, #2
 800ec7c:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800ec80:	fb08 7313 	mls	r3, r8, r3, r7
 800ec84:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800ec88:	b2df      	uxtb	r7, r3
 800ec8a:	f000 81b2 	beq.w	800eff2 <uxr_read_framed_msg+0x3da>
 800ec8e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800ec92:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 800ec96:	f000 8220 	beq.w	800f0da <uxr_read_framed_msg+0x4c2>
 800ec9a:	4661      	mov	r1, ip
 800ec9c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800ec9e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800eca0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	2100      	movs	r1, #0
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ecac:	7021      	strb	r1, [r4, #0]
 800ecae:	f000 8198 	beq.w	800efe2 <uxr_read_framed_msg+0x3ca>
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	b005      	add	sp, #20
 800ecb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecba:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800ecbe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ecc2:	4297      	cmp	r7, r2
 800ecc4:	f000 8148 	beq.w	800ef58 <uxr_read_framed_msg+0x340>
 800ecc8:	18a3      	adds	r3, r4, r2
 800ecca:	f102 0c01 	add.w	ip, r2, #1
 800ecce:	49af      	ldr	r1, [pc, #700]	@ (800ef8c <uxr_read_framed_msg+0x374>)
 800ecd0:	7898      	ldrb	r0, [r3, #2]
 800ecd2:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800ecd6:	fba1 8303 	umull	r8, r3, r1, r3
 800ecda:	089b      	lsrs	r3, r3, #2
 800ecdc:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800ece0:	fb08 c313 	mls	r3, r8, r3, ip
 800ece4:	287d      	cmp	r0, #125	@ 0x7d
 800ece6:	fa5f fc83 	uxtb.w	ip, r3
 800ecea:	f000 8194 	beq.w	800f016 <uxr_read_framed_msg+0x3fe>
 800ecee:	287e      	cmp	r0, #126	@ 0x7e
 800ecf0:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800ecf4:	f000 8200 	beq.w	800f0f8 <uxr_read_framed_msg+0x4e0>
 800ecf8:	2307      	movs	r3, #7
 800ecfa:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800ecfc:	7023      	strb	r3, [r4, #0]
 800ecfe:	e7a0      	b.n	800ec42 <uxr_read_framed_msg+0x2a>
 800ed00:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ed02:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800ed04:	429f      	cmp	r7, r3
 800ed06:	f240 8164 	bls.w	800efd2 <uxr_read_framed_msg+0x3ba>
 800ed0a:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 800ef8c <uxr_read_framed_msg+0x374>
 800ed0e:	f8cd a00c 	str.w	sl, [sp, #12]
 800ed12:	212a      	movs	r1, #42	@ 0x2a
 800ed14:	e01f      	b.n	800ed56 <uxr_read_framed_msg+0x13e>
 800ed16:	f89a e002 	ldrb.w	lr, [sl, #2]
 800ed1a:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 800ed1e:	f000 80ea 	beq.w	800eef6 <uxr_read_framed_msg+0x2de>
 800ed22:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800ed26:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800ed2a:	f000 8142 	beq.w	800efb2 <uxr_read_framed_msg+0x39a>
 800ed2e:	f805 e003 	strb.w	lr, [r5, r3]
 800ed32:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 800ed34:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800ed36:	4f96      	ldr	r7, [pc, #600]	@ (800ef90 <uxr_read_framed_msg+0x378>)
 800ed38:	ea80 020e 	eor.w	r2, r0, lr
 800ed3c:	b2d2      	uxtb	r2, r2
 800ed3e:	3301      	adds	r3, #1
 800ed40:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800ed44:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 800ed4c:	42bb      	cmp	r3, r7
 800ed4e:	8663      	strh	r3, [r4, #50]	@ 0x32
 800ed50:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800ed52:	f080 80e7 	bcs.w	800ef24 <uxr_read_framed_msg+0x30c>
 800ed56:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800ed5a:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800ed5e:	f100 0c01 	add.w	ip, r0, #1
 800ed62:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 800ed66:	fba9 e20e 	umull	lr, r2, r9, lr
 800ed6a:	0892      	lsrs	r2, r2, #2
 800ed6c:	fb01 c212 	mls	r2, r1, r2, ip
 800ed70:	4580      	cmp	r8, r0
 800ed72:	eb04 0a00 	add.w	sl, r4, r0
 800ed76:	fa5f fc82 	uxtb.w	ip, r2
 800ed7a:	d1cc      	bne.n	800ed16 <uxr_read_framed_msg+0xfe>
 800ed7c:	42bb      	cmp	r3, r7
 800ed7e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ed82:	f040 8128 	bne.w	800efd6 <uxr_read_framed_msg+0x3be>
 800ed86:	2306      	movs	r3, #6
 800ed88:	7023      	strb	r3, [r4, #0]
 800ed8a:	e75a      	b.n	800ec42 <uxr_read_framed_msg+0x2a>
 800ed8c:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800ed90:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ed94:	4297      	cmp	r7, r2
 800ed96:	f000 80cf 	beq.w	800ef38 <uxr_read_framed_msg+0x320>
 800ed9a:	18a3      	adds	r3, r4, r2
 800ed9c:	f102 0c01 	add.w	ip, r2, #1
 800eda0:	497a      	ldr	r1, [pc, #488]	@ (800ef8c <uxr_read_framed_msg+0x374>)
 800eda2:	7898      	ldrb	r0, [r3, #2]
 800eda4:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800eda8:	fba1 8303 	umull	r8, r3, r1, r3
 800edac:	089b      	lsrs	r3, r3, #2
 800edae:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800edb2:	fb08 c313 	mls	r3, r8, r3, ip
 800edb6:	287d      	cmp	r0, #125	@ 0x7d
 800edb8:	fa5f fc83 	uxtb.w	ip, r3
 800edbc:	f000 813d 	beq.w	800f03a <uxr_read_framed_msg+0x422>
 800edc0:	287e      	cmp	r0, #126	@ 0x7e
 800edc2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800edc6:	f000 8188 	beq.w	800f0da <uxr_read_framed_msg+0x4c2>
 800edca:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800edcc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800edce:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	2200      	movs	r2, #0
 800edd6:	428b      	cmp	r3, r1
 800edd8:	8623      	strh	r3, [r4, #48]	@ 0x30
 800edda:	8662      	strh	r2, [r4, #50]	@ 0x32
 800eddc:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800edde:	f240 80f5 	bls.w	800efcc <uxr_read_framed_msg+0x3b4>
 800ede2:	7022      	strb	r2, [r4, #0]
 800ede4:	e765      	b.n	800ecb2 <uxr_read_framed_msg+0x9a>
 800ede6:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800edea:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800edee:	4297      	cmp	r7, r2
 800edf0:	f000 80b2 	beq.w	800ef58 <uxr_read_framed_msg+0x340>
 800edf4:	18a3      	adds	r3, r4, r2
 800edf6:	f102 0c01 	add.w	ip, r2, #1
 800edfa:	4964      	ldr	r1, [pc, #400]	@ (800ef8c <uxr_read_framed_msg+0x374>)
 800edfc:	7898      	ldrb	r0, [r3, #2]
 800edfe:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800ee02:	fba1 8303 	umull	r8, r3, r1, r3
 800ee06:	089b      	lsrs	r3, r3, #2
 800ee08:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800ee0c:	fb08 c313 	mls	r3, r8, r3, ip
 800ee10:	287d      	cmp	r0, #125	@ 0x7d
 800ee12:	fa5f fc83 	uxtb.w	ip, r3
 800ee16:	f000 813b 	beq.w	800f090 <uxr_read_framed_msg+0x478>
 800ee1a:	287e      	cmp	r0, #126	@ 0x7e
 800ee1c:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800ee20:	f000 816a 	beq.w	800f0f8 <uxr_read_framed_msg+0x4e0>
 800ee24:	2304      	movs	r3, #4
 800ee26:	8620      	strh	r0, [r4, #48]	@ 0x30
 800ee28:	7023      	strb	r3, [r4, #0]
 800ee2a:	e70a      	b.n	800ec42 <uxr_read_framed_msg+0x2a>
 800ee2c:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 800ee30:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ee34:	4297      	cmp	r7, r2
 800ee36:	f000 80c4 	beq.w	800efc2 <uxr_read_framed_msg+0x3aa>
 800ee3a:	18a3      	adds	r3, r4, r2
 800ee3c:	f102 0c01 	add.w	ip, r2, #1
 800ee40:	4952      	ldr	r1, [pc, #328]	@ (800ef8c <uxr_read_framed_msg+0x374>)
 800ee42:	7898      	ldrb	r0, [r3, #2]
 800ee44:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800ee48:	fba1 8303 	umull	r8, r3, r1, r3
 800ee4c:	089b      	lsrs	r3, r3, #2
 800ee4e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800ee52:	fb08 c313 	mls	r3, r8, r3, ip
 800ee56:	287d      	cmp	r0, #125	@ 0x7d
 800ee58:	fa5f fc83 	uxtb.w	ip, r3
 800ee5c:	f000 812b 	beq.w	800f0b6 <uxr_read_framed_msg+0x49e>
 800ee60:	287e      	cmp	r0, #126	@ 0x7e
 800ee62:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800ee66:	f000 8155 	beq.w	800f114 <uxr_read_framed_msg+0x4fc>
 800ee6a:	7863      	ldrb	r3, [r4, #1]
 800ee6c:	4283      	cmp	r3, r0
 800ee6e:	bf0c      	ite	eq
 800ee70:	2303      	moveq	r3, #3
 800ee72:	2300      	movne	r3, #0
 800ee74:	7023      	strb	r3, [r4, #0]
 800ee76:	e6e4      	b.n	800ec42 <uxr_read_framed_msg+0x2a>
 800ee78:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ee7c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ee80:	2300      	movs	r3, #0
 800ee82:	4290      	cmp	r0, r2
 800ee84:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 800ee88:	d06b      	beq.n	800ef62 <uxr_read_framed_msg+0x34a>
 800ee8a:	18a3      	adds	r3, r4, r2
 800ee8c:	f102 0c01 	add.w	ip, r2, #1
 800ee90:	493e      	ldr	r1, [pc, #248]	@ (800ef8c <uxr_read_framed_msg+0x374>)
 800ee92:	789f      	ldrb	r7, [r3, #2]
 800ee94:	ea4f 035c 	mov.w	r3, ip, lsr #1
 800ee98:	fba1 8303 	umull	r8, r3, r1, r3
 800ee9c:	089b      	lsrs	r3, r3, #2
 800ee9e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 800eea2:	fb08 c313 	mls	r3, r8, r3, ip
 800eea6:	2f7d      	cmp	r7, #125	@ 0x7d
 800eea8:	fa5f fc83 	uxtb.w	ip, r3
 800eeac:	f000 80d8 	beq.w	800f060 <uxr_read_framed_msg+0x448>
 800eeb0:	2f7e      	cmp	r7, #126	@ 0x7e
 800eeb2:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 800eeb6:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 800eeba:	d052      	beq.n	800ef62 <uxr_read_framed_msg+0x34a>
 800eebc:	2302      	movs	r3, #2
 800eebe:	7023      	strb	r3, [r4, #0]
 800eec0:	e6bf      	b.n	800ec42 <uxr_read_framed_msg+0x2a>
 800eec2:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 800eec6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800eeca:	4930      	ldr	r1, [pc, #192]	@ (800ef8c <uxr_read_framed_msg+0x374>)
 800eecc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800eed0:	e004      	b.n	800eedc <uxr_read_framed_msg+0x2c4>
 800eed2:	78bb      	ldrb	r3, [r7, #2]
 800eed4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800eed8:	2b7e      	cmp	r3, #126	@ 0x7e
 800eeda:	d02a      	beq.n	800ef32 <uxr_read_framed_msg+0x31a>
 800eedc:	1c50      	adds	r0, r2, #1
 800eede:	0843      	lsrs	r3, r0, #1
 800eee0:	fba1 e303 	umull	lr, r3, r1, r3
 800eee4:	089b      	lsrs	r3, r3, #2
 800eee6:	fb0c 0013 	mls	r0, ip, r3, r0
 800eeea:	4590      	cmp	r8, r2
 800eeec:	eb04 0702 	add.w	r7, r4, r2
 800eef0:	b2c2      	uxtb	r2, r0
 800eef2:	d1ee      	bne.n	800eed2 <uxr_read_framed_msg+0x2ba>
 800eef4:	e6dd      	b.n	800ecb2 <uxr_read_framed_msg+0x9a>
 800eef6:	3002      	adds	r0, #2
 800eef8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 800eefc:	eb04 0a02 	add.w	sl, r4, r2
 800ef00:	fba9 e20e 	umull	lr, r2, r9, lr
 800ef04:	0892      	lsrs	r2, r2, #2
 800ef06:	45e0      	cmp	r8, ip
 800ef08:	fb01 0012 	mls	r0, r1, r2, r0
 800ef0c:	f43f af36 	beq.w	800ed7c <uxr_read_framed_msg+0x164>
 800ef10:	f89a e002 	ldrb.w	lr, [sl, #2]
 800ef14:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800ef18:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800ef1c:	d049      	beq.n	800efb2 <uxr_read_framed_msg+0x39a>
 800ef1e:	f08e 0e20 	eor.w	lr, lr, #32
 800ef22:	e704      	b.n	800ed2e <uxr_read_framed_msg+0x116>
 800ef24:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800ef28:	f43f af2d 	beq.w	800ed86 <uxr_read_framed_msg+0x16e>
 800ef2c:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 800ef30:	d151      	bne.n	800efd6 <uxr_read_framed_msg+0x3be>
 800ef32:	2301      	movs	r3, #1
 800ef34:	7023      	strb	r3, [r4, #0]
 800ef36:	e684      	b.n	800ec42 <uxr_read_framed_msg+0x2a>
 800ef38:	4651      	mov	r1, sl
 800ef3a:	f8cd b000 	str.w	fp, [sp]
 800ef3e:	2301      	movs	r3, #1
 800ef40:	9301      	str	r3, [sp, #4]
 800ef42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef44:	9103      	str	r1, [sp, #12]
 800ef46:	4632      	mov	r2, r6
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f7ff fde1 	bl	800eb10 <uxr_framing_read_transport>
 800ef4e:	fab0 f080 	clz	r0, r0
 800ef52:	9903      	ldr	r1, [sp, #12]
 800ef54:	0940      	lsrs	r0, r0, #5
 800ef56:	e671      	b.n	800ec3c <uxr_read_framed_msg+0x24>
 800ef58:	4651      	mov	r1, sl
 800ef5a:	f8cd b000 	str.w	fp, [sp]
 800ef5e:	2302      	movs	r3, #2
 800ef60:	e7ee      	b.n	800ef40 <uxr_read_framed_msg+0x328>
 800ef62:	2304      	movs	r3, #4
 800ef64:	9301      	str	r3, [sp, #4]
 800ef66:	f8cd b000 	str.w	fp, [sp]
 800ef6a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef6c:	4632      	mov	r2, r6
 800ef6e:	4651      	mov	r1, sl
 800ef70:	4620      	mov	r0, r4
 800ef72:	f7ff fdcd 	bl	800eb10 <uxr_framing_read_transport>
 800ef76:	2800      	cmp	r0, #0
 800ef78:	f47f ae63 	bne.w	800ec42 <uxr_read_framed_msg+0x2a>
 800ef7c:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 800ef80:	387e      	subs	r0, #126	@ 0x7e
 800ef82:	4651      	mov	r1, sl
 800ef84:	bf18      	it	ne
 800ef86:	2001      	movne	r0, #1
 800ef88:	e658      	b.n	800ec3c <uxr_read_framed_msg+0x24>
 800ef8a:	bf00      	nop
 800ef8c:	30c30c31 	.word	0x30c30c31
 800ef90:	0801a788 	.word	0x0801a788
 800ef94:	2305      	movs	r3, #5
 800ef96:	9301      	str	r3, [sp, #4]
 800ef98:	f8cd b000 	str.w	fp, [sp]
 800ef9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef9e:	f7ff fdb7 	bl	800eb10 <uxr_framing_read_transport>
 800efa2:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800efa6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800efaa:	429a      	cmp	r2, r3
 800efac:	f43f ae81 	beq.w	800ecb2 <uxr_read_framed_msg+0x9a>
 800efb0:	e642      	b.n	800ec38 <uxr_read_framed_msg+0x20>
 800efb2:	42bb      	cmp	r3, r7
 800efb4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800efb8:	f43f aee5 	beq.w	800ed86 <uxr_read_framed_msg+0x16e>
 800efbc:	2301      	movs	r3, #1
 800efbe:	7023      	strb	r3, [r4, #0]
 800efc0:	e63f      	b.n	800ec42 <uxr_read_framed_msg+0x2a>
 800efc2:	4651      	mov	r1, sl
 800efc4:	f8cd b000 	str.w	fp, [sp]
 800efc8:	2303      	movs	r3, #3
 800efca:	e7b9      	b.n	800ef40 <uxr_read_framed_msg+0x328>
 800efcc:	2305      	movs	r3, #5
 800efce:	7023      	strb	r3, [r4, #0]
 800efd0:	e637      	b.n	800ec42 <uxr_read_framed_msg+0x2a>
 800efd2:	f43f aed8 	beq.w	800ed86 <uxr_read_framed_msg+0x16e>
 800efd6:	1afb      	subs	r3, r7, r3
 800efd8:	3302      	adds	r3, #2
 800efda:	e9cd b300 	strd	fp, r3, [sp]
 800efde:	4651      	mov	r1, sl
 800efe0:	e7af      	b.n	800ef42 <uxr_read_framed_msg+0x32a>
 800efe2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800efe4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800efe8:	7013      	strb	r3, [r2, #0]
 800efea:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800efec:	b005      	add	sp, #20
 800efee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff2:	4287      	cmp	r7, r0
 800eff4:	d0a0      	beq.n	800ef38 <uxr_read_framed_msg+0x320>
 800eff6:	4423      	add	r3, r4
 800eff8:	3202      	adds	r2, #2
 800effa:	7898      	ldrb	r0, [r3, #2]
 800effc:	0853      	lsrs	r3, r2, #1
 800effe:	fba1 e303 	umull	lr, r3, r1, r3
 800f002:	089b      	lsrs	r3, r3, #2
 800f004:	fb08 2213 	mls	r2, r8, r3, r2
 800f008:	287e      	cmp	r0, #126	@ 0x7e
 800f00a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f00e:	d064      	beq.n	800f0da <uxr_read_framed_msg+0x4c2>
 800f010:	f080 0120 	eor.w	r1, r0, #32
 800f014:	e642      	b.n	800ec9c <uxr_read_framed_msg+0x84>
 800f016:	45bc      	cmp	ip, r7
 800f018:	d09e      	beq.n	800ef58 <uxr_read_framed_msg+0x340>
 800f01a:	4423      	add	r3, r4
 800f01c:	3202      	adds	r2, #2
 800f01e:	7898      	ldrb	r0, [r3, #2]
 800f020:	0853      	lsrs	r3, r2, #1
 800f022:	fba1 e303 	umull	lr, r3, r1, r3
 800f026:	089b      	lsrs	r3, r3, #2
 800f028:	fb08 2213 	mls	r2, r8, r3, r2
 800f02c:	287e      	cmp	r0, #126	@ 0x7e
 800f02e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f032:	d061      	beq.n	800f0f8 <uxr_read_framed_msg+0x4e0>
 800f034:	f080 0020 	eor.w	r0, r0, #32
 800f038:	e65e      	b.n	800ecf8 <uxr_read_framed_msg+0xe0>
 800f03a:	4567      	cmp	r7, ip
 800f03c:	f43f af7c 	beq.w	800ef38 <uxr_read_framed_msg+0x320>
 800f040:	4423      	add	r3, r4
 800f042:	3202      	adds	r2, #2
 800f044:	7898      	ldrb	r0, [r3, #2]
 800f046:	0853      	lsrs	r3, r2, #1
 800f048:	fba1 e303 	umull	lr, r3, r1, r3
 800f04c:	089b      	lsrs	r3, r3, #2
 800f04e:	fb08 2213 	mls	r2, r8, r3, r2
 800f052:	287e      	cmp	r0, #126	@ 0x7e
 800f054:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f058:	d03f      	beq.n	800f0da <uxr_read_framed_msg+0x4c2>
 800f05a:	f080 0020 	eor.w	r0, r0, #32
 800f05e:	e6b4      	b.n	800edca <uxr_read_framed_msg+0x1b2>
 800f060:	4560      	cmp	r0, ip
 800f062:	f43f af7e 	beq.w	800ef62 <uxr_read_framed_msg+0x34a>
 800f066:	4423      	add	r3, r4
 800f068:	3202      	adds	r2, #2
 800f06a:	7898      	ldrb	r0, [r3, #2]
 800f06c:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f070:	0853      	lsrs	r3, r2, #1
 800f072:	fba1 e303 	umull	lr, r3, r1, r3
 800f076:	089b      	lsrs	r3, r3, #2
 800f078:	fb08 2213 	mls	r2, r8, r3, r2
 800f07c:	287e      	cmp	r0, #126	@ 0x7e
 800f07e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f082:	f43f af6e 	beq.w	800ef62 <uxr_read_framed_msg+0x34a>
 800f086:	f080 0020 	eor.w	r0, r0, #32
 800f08a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f08e:	e715      	b.n	800eebc <uxr_read_framed_msg+0x2a4>
 800f090:	4567      	cmp	r7, ip
 800f092:	f43f af61 	beq.w	800ef58 <uxr_read_framed_msg+0x340>
 800f096:	4423      	add	r3, r4
 800f098:	3202      	adds	r2, #2
 800f09a:	7898      	ldrb	r0, [r3, #2]
 800f09c:	0853      	lsrs	r3, r2, #1
 800f09e:	fba1 e303 	umull	lr, r3, r1, r3
 800f0a2:	089b      	lsrs	r3, r3, #2
 800f0a4:	fb08 2213 	mls	r2, r8, r3, r2
 800f0a8:	287e      	cmp	r0, #126	@ 0x7e
 800f0aa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f0ae:	d023      	beq.n	800f0f8 <uxr_read_framed_msg+0x4e0>
 800f0b0:	f080 0020 	eor.w	r0, r0, #32
 800f0b4:	e6b6      	b.n	800ee24 <uxr_read_framed_msg+0x20c>
 800f0b6:	45bc      	cmp	ip, r7
 800f0b8:	d083      	beq.n	800efc2 <uxr_read_framed_msg+0x3aa>
 800f0ba:	4423      	add	r3, r4
 800f0bc:	3202      	adds	r2, #2
 800f0be:	7898      	ldrb	r0, [r3, #2]
 800f0c0:	0853      	lsrs	r3, r2, #1
 800f0c2:	fba1 e303 	umull	lr, r3, r1, r3
 800f0c6:	089b      	lsrs	r3, r3, #2
 800f0c8:	fb08 2213 	mls	r2, r8, r3, r2
 800f0cc:	287e      	cmp	r0, #126	@ 0x7e
 800f0ce:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f0d2:	d01f      	beq.n	800f114 <uxr_read_framed_msg+0x4fc>
 800f0d4:	f080 0020 	eor.w	r0, r0, #32
 800f0d8:	e6c7      	b.n	800ee6a <uxr_read_framed_msg+0x252>
 800f0da:	2701      	movs	r7, #1
 800f0dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f0de:	f8cd b000 	str.w	fp, [sp]
 800f0e2:	9701      	str	r7, [sp, #4]
 800f0e4:	4632      	mov	r2, r6
 800f0e6:	4651      	mov	r1, sl
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f7ff fd11 	bl	800eb10 <uxr_framing_read_transport>
 800f0ee:	2800      	cmp	r0, #0
 800f0f0:	f47f ada7 	bne.w	800ec42 <uxr_read_framed_msg+0x2a>
 800f0f4:	7027      	strb	r7, [r4, #0]
 800f0f6:	e5a4      	b.n	800ec42 <uxr_read_framed_msg+0x2a>
 800f0f8:	f8cd b000 	str.w	fp, [sp]
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	9301      	str	r3, [sp, #4]
 800f100:	4632      	mov	r2, r6
 800f102:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f104:	4651      	mov	r1, sl
 800f106:	4620      	mov	r0, r4
 800f108:	f7ff fd02 	bl	800eb10 <uxr_framing_read_transport>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	f47f ad98 	bne.w	800ec42 <uxr_read_framed_msg+0x2a>
 800f112:	e70e      	b.n	800ef32 <uxr_read_framed_msg+0x31a>
 800f114:	f8cd b000 	str.w	fp, [sp]
 800f118:	2303      	movs	r3, #3
 800f11a:	e7f0      	b.n	800f0fe <uxr_read_framed_msg+0x4e6>

0800f11c <uxr_stream_id>:
 800f11c:	2901      	cmp	r1, #1
 800f11e:	b082      	sub	sp, #8
 800f120:	4603      	mov	r3, r0
 800f122:	d011      	beq.n	800f148 <uxr_stream_id+0x2c>
 800f124:	2902      	cmp	r1, #2
 800f126:	f04f 0c00 	mov.w	ip, #0
 800f12a:	d00a      	beq.n	800f142 <uxr_stream_id+0x26>
 800f12c:	2000      	movs	r0, #0
 800f12e:	f36c 0007 	bfi	r0, ip, #0, #8
 800f132:	f363 200f 	bfi	r0, r3, #8, #8
 800f136:	f361 4017 	bfi	r0, r1, #16, #8
 800f13a:	f362 601f 	bfi	r0, r2, #24, #8
 800f13e:	b002      	add	sp, #8
 800f140:	4770      	bx	lr
 800f142:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800f146:	e7f1      	b.n	800f12c <uxr_stream_id+0x10>
 800f148:	f100 0c01 	add.w	ip, r0, #1
 800f14c:	fa5f fc8c 	uxtb.w	ip, ip
 800f150:	e7ec      	b.n	800f12c <uxr_stream_id+0x10>
 800f152:	bf00      	nop

0800f154 <uxr_stream_id_from_raw>:
 800f154:	b082      	sub	sp, #8
 800f156:	4603      	mov	r3, r0
 800f158:	b130      	cbz	r0, 800f168 <uxr_stream_id_from_raw+0x14>
 800f15a:	0602      	lsls	r2, r0, #24
 800f15c:	d411      	bmi.n	800f182 <uxr_stream_id_from_raw+0x2e>
 800f15e:	1e42      	subs	r2, r0, #1
 800f160:	b2d2      	uxtb	r2, r2
 800f162:	f04f 0c01 	mov.w	ip, #1
 800f166:	e001      	b.n	800f16c <uxr_stream_id_from_raw+0x18>
 800f168:	4684      	mov	ip, r0
 800f16a:	4602      	mov	r2, r0
 800f16c:	2000      	movs	r0, #0
 800f16e:	f363 0007 	bfi	r0, r3, #0, #8
 800f172:	f362 200f 	bfi	r0, r2, #8, #8
 800f176:	f36c 4017 	bfi	r0, ip, #16, #8
 800f17a:	f361 601f 	bfi	r0, r1, #24, #8
 800f17e:	b002      	add	sp, #8
 800f180:	4770      	bx	lr
 800f182:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800f186:	f04f 0c02 	mov.w	ip, #2
 800f18a:	e7ef      	b.n	800f16c <uxr_stream_id_from_raw+0x18>

0800f18c <uxr_init_stream_storage>:
 800f18c:	2300      	movs	r3, #0
 800f18e:	7403      	strb	r3, [r0, #16]
 800f190:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800f194:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800f198:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop

0800f1a0 <uxr_reset_stream_storage>:
 800f1a0:	b570      	push	{r4, r5, r6, lr}
 800f1a2:	7c03      	ldrb	r3, [r0, #16]
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	b153      	cbz	r3, 800f1be <uxr_reset_stream_storage+0x1e>
 800f1a8:	4606      	mov	r6, r0
 800f1aa:	2500      	movs	r5, #0
 800f1ac:	4630      	mov	r0, r6
 800f1ae:	f006 ff9d 	bl	80160ec <uxr_reset_output_best_effort_stream>
 800f1b2:	7c23      	ldrb	r3, [r4, #16]
 800f1b4:	3501      	adds	r5, #1
 800f1b6:	42ab      	cmp	r3, r5
 800f1b8:	f106 0610 	add.w	r6, r6, #16
 800f1bc:	d8f6      	bhi.n	800f1ac <uxr_reset_stream_storage+0xc>
 800f1be:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f1c2:	b163      	cbz	r3, 800f1de <uxr_reset_stream_storage+0x3e>
 800f1c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f1c8:	2500      	movs	r5, #0
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	f006 fd9e 	bl	8015d0c <uxr_reset_input_best_effort_stream>
 800f1d0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f1d4:	3501      	adds	r5, #1
 800f1d6:	42ab      	cmp	r3, r5
 800f1d8:	f106 0602 	add.w	r6, r6, #2
 800f1dc:	d8f5      	bhi.n	800f1ca <uxr_reset_stream_storage+0x2a>
 800f1de:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f1e2:	b163      	cbz	r3, 800f1fe <uxr_reset_stream_storage+0x5e>
 800f1e4:	f104 0618 	add.w	r6, r4, #24
 800f1e8:	2500      	movs	r5, #0
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f007 f828 	bl	8016240 <uxr_reset_output_reliable_stream>
 800f1f0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800f1f4:	3501      	adds	r5, #1
 800f1f6:	42ab      	cmp	r3, r5
 800f1f8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800f1fc:	d8f5      	bhi.n	800f1ea <uxr_reset_stream_storage+0x4a>
 800f1fe:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f202:	b163      	cbz	r3, 800f21e <uxr_reset_stream_storage+0x7e>
 800f204:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800f208:	2500      	movs	r5, #0
 800f20a:	4630      	mov	r0, r6
 800f20c:	f006 fdee 	bl	8015dec <uxr_reset_input_reliable_stream>
 800f210:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800f214:	3501      	adds	r5, #1
 800f216:	42ab      	cmp	r3, r5
 800f218:	f106 0618 	add.w	r6, r6, #24
 800f21c:	d8f5      	bhi.n	800f20a <uxr_reset_stream_storage+0x6a>
 800f21e:	bd70      	pop	{r4, r5, r6, pc}

0800f220 <uxr_add_output_best_effort_buffer>:
 800f220:	b510      	push	{r4, lr}
 800f222:	7c04      	ldrb	r4, [r0, #16]
 800f224:	f104 0c01 	add.w	ip, r4, #1
 800f228:	b082      	sub	sp, #8
 800f22a:	f880 c010 	strb.w	ip, [r0, #16]
 800f22e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800f232:	f006 ff51 	bl	80160d8 <uxr_init_output_best_effort_stream>
 800f236:	2201      	movs	r2, #1
 800f238:	4611      	mov	r1, r2
 800f23a:	4620      	mov	r0, r4
 800f23c:	b002      	add	sp, #8
 800f23e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f242:	f7ff bf6b 	b.w	800f11c <uxr_stream_id>
 800f246:	bf00      	nop

0800f248 <uxr_add_output_reliable_buffer>:
 800f248:	b510      	push	{r4, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	4684      	mov	ip, r0
 800f24e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f252:	9000      	str	r0, [sp, #0]
 800f254:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800f258:	2028      	movs	r0, #40	@ 0x28
 800f25a:	fb00 c004 	mla	r0, r0, r4, ip
 800f25e:	f104 0e01 	add.w	lr, r4, #1
 800f262:	3018      	adds	r0, #24
 800f264:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800f268:	f006 ffb2 	bl	80161d0 <uxr_init_output_reliable_stream>
 800f26c:	2201      	movs	r2, #1
 800f26e:	2102      	movs	r1, #2
 800f270:	4620      	mov	r0, r4
 800f272:	b004      	add	sp, #16
 800f274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f278:	f7ff bf50 	b.w	800f11c <uxr_stream_id>

0800f27c <uxr_add_input_best_effort_buffer>:
 800f27c:	b510      	push	{r4, lr}
 800f27e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800f282:	1c62      	adds	r2, r4, #1
 800f284:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800f288:	b082      	sub	sp, #8
 800f28a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 800f28e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800f292:	f006 fd37 	bl	8015d04 <uxr_init_input_best_effort_stream>
 800f296:	2200      	movs	r2, #0
 800f298:	2101      	movs	r1, #1
 800f29a:	4620      	mov	r0, r4
 800f29c:	b002      	add	sp, #8
 800f29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2a2:	f7ff bf3b 	b.w	800f11c <uxr_stream_id>
 800f2a6:	bf00      	nop

0800f2a8 <uxr_add_input_reliable_buffer>:
 800f2a8:	b510      	push	{r4, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	4684      	mov	ip, r0
 800f2ae:	9806      	ldr	r0, [sp, #24]
 800f2b0:	9000      	str	r0, [sp, #0]
 800f2b2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800f2b6:	2018      	movs	r0, #24
 800f2b8:	fb00 c004 	mla	r0, r0, r4, ip
 800f2bc:	f104 0e01 	add.w	lr, r4, #1
 800f2c0:	3048      	adds	r0, #72	@ 0x48
 800f2c2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800f2c6:	f006 fd65 	bl	8015d94 <uxr_init_input_reliable_stream>
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	2102      	movs	r1, #2
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	b004      	add	sp, #16
 800f2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2d6:	f7ff bf21 	b.w	800f11c <uxr_stream_id>
 800f2da:	bf00      	nop

0800f2dc <uxr_get_output_best_effort_stream>:
 800f2dc:	7c03      	ldrb	r3, [r0, #16]
 800f2de:	428b      	cmp	r3, r1
 800f2e0:	bf8c      	ite	hi
 800f2e2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800f2e6:	2000      	movls	r0, #0
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop

0800f2ec <uxr_get_output_reliable_stream>:
 800f2ec:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f2f0:	428b      	cmp	r3, r1
 800f2f2:	bf83      	ittte	hi
 800f2f4:	2328      	movhi	r3, #40	@ 0x28
 800f2f6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f2fa:	3018      	addhi	r0, #24
 800f2fc:	2000      	movls	r0, #0
 800f2fe:	4770      	bx	lr

0800f300 <uxr_get_input_best_effort_stream>:
 800f300:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800f304:	428b      	cmp	r3, r1
 800f306:	bf86      	itte	hi
 800f308:	3121      	addhi	r1, #33	@ 0x21
 800f30a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800f30e:	2000      	movls	r0, #0
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop

0800f314 <uxr_get_input_reliable_stream>:
 800f314:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800f318:	428b      	cmp	r3, r1
 800f31a:	bf83      	ittte	hi
 800f31c:	2318      	movhi	r3, #24
 800f31e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800f322:	3048      	addhi	r0, #72	@ 0x48
 800f324:	2000      	movls	r0, #0
 800f326:	4770      	bx	lr

0800f328 <uxr_output_streams_confirmed>:
 800f328:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800f32c:	b183      	cbz	r3, 800f350 <uxr_output_streams_confirmed+0x28>
 800f32e:	b570      	push	{r4, r5, r6, lr}
 800f330:	4606      	mov	r6, r0
 800f332:	f100 0518 	add.w	r5, r0, #24
 800f336:	2400      	movs	r4, #0
 800f338:	e001      	b.n	800f33e <uxr_output_streams_confirmed+0x16>
 800f33a:	3528      	adds	r5, #40	@ 0x28
 800f33c:	b138      	cbz	r0, 800f34e <uxr_output_streams_confirmed+0x26>
 800f33e:	4628      	mov	r0, r5
 800f340:	f007 f9e6 	bl	8016710 <uxr_is_output_up_to_date>
 800f344:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800f348:	3401      	adds	r4, #1
 800f34a:	42a3      	cmp	r3, r4
 800f34c:	d8f5      	bhi.n	800f33a <uxr_output_streams_confirmed+0x12>
 800f34e:	bd70      	pop	{r4, r5, r6, pc}
 800f350:	2001      	movs	r0, #1
 800f352:	4770      	bx	lr

0800f354 <uxr_buffer_submessage_header>:
 800f354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f356:	4604      	mov	r4, r0
 800f358:	460e      	mov	r6, r1
 800f35a:	2104      	movs	r1, #4
 800f35c:	4615      	mov	r5, r2
 800f35e:	461f      	mov	r7, r3
 800f360:	f7fd fdb6 	bl	800ced0 <ucdr_align_to>
 800f364:	2301      	movs	r3, #1
 800f366:	7523      	strb	r3, [r4, #20]
 800f368:	f047 0201 	orr.w	r2, r7, #1
 800f36c:	462b      	mov	r3, r5
 800f36e:	4631      	mov	r1, r6
 800f370:	4620      	mov	r0, r4
 800f372:	f000 fa2b 	bl	800f7cc <uxr_serialize_submessage_header>
 800f376:	4620      	mov	r0, r4
 800f378:	f7fd fdc0 	bl	800cefc <ucdr_buffer_remaining>
 800f37c:	42a8      	cmp	r0, r5
 800f37e:	bf34      	ite	cc
 800f380:	2000      	movcc	r0, #0
 800f382:	2001      	movcs	r0, #1
 800f384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f386:	bf00      	nop

0800f388 <uxr_read_submessage_header>:
 800f388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f38c:	4604      	mov	r4, r0
 800f38e:	460d      	mov	r5, r1
 800f390:	2104      	movs	r1, #4
 800f392:	4616      	mov	r6, r2
 800f394:	4698      	mov	r8, r3
 800f396:	f7fd fd9b 	bl	800ced0 <ucdr_align_to>
 800f39a:	4620      	mov	r0, r4
 800f39c:	f7fd fdae 	bl	800cefc <ucdr_buffer_remaining>
 800f3a0:	2803      	cmp	r0, #3
 800f3a2:	bf8c      	ite	hi
 800f3a4:	2701      	movhi	r7, #1
 800f3a6:	2700      	movls	r7, #0
 800f3a8:	d802      	bhi.n	800f3b0 <uxr_read_submessage_header+0x28>
 800f3aa:	4638      	mov	r0, r7
 800f3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b0:	4633      	mov	r3, r6
 800f3b2:	4642      	mov	r2, r8
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	4629      	mov	r1, r5
 800f3b8:	f000 fa1a 	bl	800f7f0 <uxr_deserialize_submessage_header>
 800f3bc:	f898 3000 	ldrb.w	r3, [r8]
 800f3c0:	f003 0201 	and.w	r2, r3, #1
 800f3c4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800f3c8:	f888 3000 	strb.w	r3, [r8]
 800f3cc:	7522      	strb	r2, [r4, #20]
 800f3ce:	4638      	mov	r0, r7
 800f3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f3d4 <uxr_submessage_padding>:
 800f3d4:	f010 0003 	ands.w	r0, r0, #3
 800f3d8:	bf18      	it	ne
 800f3da:	f1c0 0004 	rsbne	r0, r0, #4
 800f3de:	4770      	bx	lr

0800f3e0 <uxr_millis>:
 800f3e0:	b510      	push	{r4, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	4669      	mov	r1, sp
 800f3e6:	2001      	movs	r0, #1
 800f3e8:	f7f2 feaa 	bl	8002140 <clock_gettime>
 800f3ec:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800f3f0:	4b06      	ldr	r3, [pc, #24]	@ (800f40c <uxr_millis+0x2c>)
 800f3f2:	fba0 0103 	umull	r0, r1, r0, r3
 800f3f6:	1900      	adds	r0, r0, r4
 800f3f8:	fb03 1102 	mla	r1, r3, r2, r1
 800f3fc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800f400:	4a03      	ldr	r2, [pc, #12]	@ (800f410 <uxr_millis+0x30>)
 800f402:	2300      	movs	r3, #0
 800f404:	f7f1 fa00 	bl	8000808 <__aeabi_ldivmod>
 800f408:	b004      	add	sp, #16
 800f40a:	bd10      	pop	{r4, pc}
 800f40c:	3b9aca00 	.word	0x3b9aca00
 800f410:	000f4240 	.word	0x000f4240

0800f414 <uxr_nanos>:
 800f414:	b510      	push	{r4, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	4669      	mov	r1, sp
 800f41a:	2001      	movs	r0, #1
 800f41c:	f7f2 fe90 	bl	8002140 <clock_gettime>
 800f420:	4a06      	ldr	r2, [pc, #24]	@ (800f43c <uxr_nanos+0x28>)
 800f422:	9800      	ldr	r0, [sp, #0]
 800f424:	9902      	ldr	r1, [sp, #8]
 800f426:	9c01      	ldr	r4, [sp, #4]
 800f428:	fba0 0302 	umull	r0, r3, r0, r2
 800f42c:	1840      	adds	r0, r0, r1
 800f42e:	fb02 3304 	mla	r3, r2, r4, r3
 800f432:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800f436:	b004      	add	sp, #16
 800f438:	bd10      	pop	{r4, pc}
 800f43a:	bf00      	nop
 800f43c:	3b9aca00 	.word	0x3b9aca00

0800f440 <on_full_output_buffer_fragmented>:
 800f440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f444:	460c      	mov	r4, r1
 800f446:	b08a      	sub	sp, #40	@ 0x28
 800f448:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800f44c:	4606      	mov	r6, r0
 800f44e:	f104 0008 	add.w	r0, r4, #8
 800f452:	f7ff ff4b 	bl	800f2ec <uxr_get_output_reliable_stream>
 800f456:	4605      	mov	r5, r0
 800f458:	f007 f964 	bl	8016724 <get_available_free_slots>
 800f45c:	b968      	cbnz	r0, 800f47a <on_full_output_buffer_fragmented+0x3a>
 800f45e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800f462:	4620      	mov	r0, r4
 800f464:	4798      	blx	r3
 800f466:	b918      	cbnz	r0, 800f470 <on_full_output_buffer_fragmented+0x30>
 800f468:	2001      	movs	r0, #1
 800f46a:	b00a      	add	sp, #40	@ 0x28
 800f46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f470:	4628      	mov	r0, r5
 800f472:	f007 f957 	bl	8016724 <get_available_free_slots>
 800f476:	2800      	cmp	r0, #0
 800f478:	d0f6      	beq.n	800f468 <on_full_output_buffer_fragmented+0x28>
 800f47a:	892a      	ldrh	r2, [r5, #8]
 800f47c:	686b      	ldr	r3, [r5, #4]
 800f47e:	fbb3 f8f2 	udiv	r8, r3, r2
 800f482:	89eb      	ldrh	r3, [r5, #14]
 800f484:	7b29      	ldrb	r1, [r5, #12]
 800f486:	fbb3 f0f2 	udiv	r0, r3, r2
 800f48a:	fb02 3310 	mls	r3, r2, r0, r3
 800f48e:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 800f492:	b29b      	uxth	r3, r3
 800f494:	fb08 f303 	mul.w	r3, r8, r3
 800f498:	31fc      	adds	r1, #252	@ 0xfc
 800f49a:	f1a8 0804 	sub.w	r8, r8, #4
 800f49e:	4441      	add	r1, r8
 800f4a0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f4a4:	b28f      	uxth	r7, r1
 800f4a6:	6829      	ldr	r1, [r5, #0]
 800f4a8:	3304      	adds	r3, #4
 800f4aa:	1bd2      	subs	r2, r2, r7
 800f4ac:	4419      	add	r1, r3
 800f4ae:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 800f4b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4b6:	9300      	str	r3, [sp, #0]
 800f4b8:	4642      	mov	r2, r8
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	a802      	add	r0, sp, #8
 800f4be:	f7fd fcdb 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 800f4c2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f4c6:	f102 0308 	add.w	r3, r2, #8
 800f4ca:	4543      	cmp	r3, r8
 800f4cc:	d928      	bls.n	800f520 <on_full_output_buffer_fragmented+0xe0>
 800f4ce:	463a      	mov	r2, r7
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	210d      	movs	r1, #13
 800f4d4:	a802      	add	r0, sp, #8
 800f4d6:	f7ff ff3d 	bl	800f354 <uxr_buffer_submessage_header>
 800f4da:	8929      	ldrh	r1, [r5, #8]
 800f4dc:	89eb      	ldrh	r3, [r5, #14]
 800f4de:	fbb3 f2f1 	udiv	r2, r3, r1
 800f4e2:	fb01 3312 	mls	r3, r1, r2, r3
 800f4e6:	b29b      	uxth	r3, r3
 800f4e8:	686a      	ldr	r2, [r5, #4]
 800f4ea:	fbb2 f2f1 	udiv	r2, r2, r1
 800f4ee:	fb02 f303 	mul.w	r3, r2, r3
 800f4f2:	682a      	ldr	r2, [r5, #0]
 800f4f4:	f842 8003 	str.w	r8, [r2, r3]
 800f4f8:	89e8      	ldrh	r0, [r5, #14]
 800f4fa:	2101      	movs	r1, #1
 800f4fc:	f007 fa2e 	bl	801695c <uxr_seq_num_add>
 800f500:	9904      	ldr	r1, [sp, #16]
 800f502:	9a03      	ldr	r2, [sp, #12]
 800f504:	81e8      	strh	r0, [r5, #14]
 800f506:	1a52      	subs	r2, r2, r1
 800f508:	4630      	mov	r0, r6
 800f50a:	f7fd fcc7 	bl	800ce9c <ucdr_init_buffer>
 800f50e:	4630      	mov	r0, r6
 800f510:	4910      	ldr	r1, [pc, #64]	@ (800f554 <on_full_output_buffer_fragmented+0x114>)
 800f512:	4622      	mov	r2, r4
 800f514:	f7fd fc96 	bl	800ce44 <ucdr_set_on_full_buffer_callback>
 800f518:	2000      	movs	r0, #0
 800f51a:	b00a      	add	sp, #40	@ 0x28
 800f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f520:	b292      	uxth	r2, r2
 800f522:	2302      	movs	r3, #2
 800f524:	210d      	movs	r1, #13
 800f526:	a802      	add	r0, sp, #8
 800f528:	f7ff ff14 	bl	800f354 <uxr_buffer_submessage_header>
 800f52c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800f530:	8928      	ldrh	r0, [r5, #8]
 800f532:	f103 0208 	add.w	r2, r3, #8
 800f536:	89eb      	ldrh	r3, [r5, #14]
 800f538:	fbb3 f1f0 	udiv	r1, r3, r0
 800f53c:	fb00 3311 	mls	r3, r0, r1, r3
 800f540:	b29b      	uxth	r3, r3
 800f542:	6869      	ldr	r1, [r5, #4]
 800f544:	fbb1 f1f0 	udiv	r1, r1, r0
 800f548:	fb01 f303 	mul.w	r3, r1, r3
 800f54c:	6829      	ldr	r1, [r5, #0]
 800f54e:	50ca      	str	r2, [r1, r3]
 800f550:	e7d2      	b.n	800f4f8 <on_full_output_buffer_fragmented+0xb8>
 800f552:	bf00      	nop
 800f554:	0800f441 	.word	0x0800f441

0800f558 <uxr_prepare_output_stream>:
 800f558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f55a:	b087      	sub	sp, #28
 800f55c:	2707      	movs	r7, #7
 800f55e:	9202      	str	r2, [sp, #8]
 800f560:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f562:	2500      	movs	r5, #0
 800f564:	3204      	adds	r2, #4
 800f566:	e9cd 7500 	strd	r7, r5, [sp]
 800f56a:	461c      	mov	r4, r3
 800f56c:	4606      	mov	r6, r0
 800f56e:	f7ff f807 	bl	800e580 <uxr_prepare_stream_to_write_submessage>
 800f572:	f080 0201 	eor.w	r2, r0, #1
 800f576:	b2d2      	uxtb	r2, r2
 800f578:	75a2      	strb	r2, [r4, #22]
 800f57a:	b112      	cbz	r2, 800f582 <uxr_prepare_output_stream+0x2a>
 800f57c:	4628      	mov	r0, r5
 800f57e:	b007      	add	sp, #28
 800f580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f582:	aa05      	add	r2, sp, #20
 800f584:	9902      	ldr	r1, [sp, #8]
 800f586:	4630      	mov	r0, r6
 800f588:	f7ff f934 	bl	800e7f4 <uxr_init_base_object_request>
 800f58c:	a905      	add	r1, sp, #20
 800f58e:	4605      	mov	r5, r0
 800f590:	4620      	mov	r0, r4
 800f592:	f000 ff8b 	bl	80104ac <uxr_serialize_WRITE_DATA_Payload_Data>
 800f596:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800f59a:	69a6      	ldr	r6, [r4, #24]
 800f59c:	69e7      	ldr	r7, [r4, #28]
 800f59e:	1a52      	subs	r2, r2, r1
 800f5a0:	4620      	mov	r0, r4
 800f5a2:	f7fd fc7b 	bl	800ce9c <ucdr_init_buffer>
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	463a      	mov	r2, r7
 800f5aa:	4631      	mov	r1, r6
 800f5ac:	f7fd fc4a 	bl	800ce44 <ucdr_set_on_full_buffer_callback>
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	b007      	add	sp, #28
 800f5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5b6:	bf00      	nop

0800f5b8 <uxr_prepare_output_stream_fragmented>:
 800f5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5bc:	b093      	sub	sp, #76	@ 0x4c
 800f5be:	4605      	mov	r5, r0
 800f5c0:	9107      	str	r1, [sp, #28]
 800f5c2:	3008      	adds	r0, #8
 800f5c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f5c8:	9303      	str	r3, [sp, #12]
 800f5ca:	9206      	str	r2, [sp, #24]
 800f5cc:	f7ff fe8e 	bl	800f2ec <uxr_get_output_reliable_stream>
 800f5d0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	f000 8095 	beq.w	800f704 <uxr_prepare_output_stream_fragmented+0x14c>
 800f5da:	4604      	mov	r4, r0
 800f5dc:	2800      	cmp	r0, #0
 800f5de:	f000 8091 	beq.w	800f704 <uxr_prepare_output_stream_fragmented+0x14c>
 800f5e2:	f007 f89f 	bl	8016724 <get_available_free_slots>
 800f5e6:	2800      	cmp	r0, #0
 800f5e8:	f000 8087 	beq.w	800f6fa <uxr_prepare_output_stream_fragmented+0x142>
 800f5ec:	8922      	ldrh	r2, [r4, #8]
 800f5ee:	89e7      	ldrh	r7, [r4, #14]
 800f5f0:	fbb7 f3f2 	udiv	r3, r7, r2
 800f5f4:	fb02 7313 	mls	r3, r2, r3, r7
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	6861      	ldr	r1, [r4, #4]
 800f5fc:	fbb1 f1f2 	udiv	r1, r1, r2
 800f600:	6822      	ldr	r2, [r4, #0]
 800f602:	9105      	str	r1, [sp, #20]
 800f604:	fb01 f303 	mul.w	r3, r1, r3
 800f608:	3304      	adds	r3, #4
 800f60a:	eb02 0903 	add.w	r9, r2, r3
 800f60e:	7b23      	ldrb	r3, [r4, #12]
 800f610:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f614:	4543      	cmp	r3, r8
 800f616:	f1a1 0b04 	sub.w	fp, r1, #4
 800f61a:	d37f      	bcc.n	800f71c <uxr_prepare_output_stream_fragmented+0x164>
 800f61c:	f1ab 0a04 	sub.w	sl, fp, #4
 800f620:	ebaa 0a03 	sub.w	sl, sl, r3
 800f624:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f626:	f8cd 8000 	str.w	r8, [sp]
 800f62a:	fa1f f38a 	uxth.w	r3, sl
 800f62e:	9304      	str	r3, [sp, #16]
 800f630:	465a      	mov	r2, fp
 800f632:	2300      	movs	r3, #0
 800f634:	4649      	mov	r1, r9
 800f636:	a80a      	add	r0, sp, #40	@ 0x28
 800f638:	f7fd fc1e 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 800f63c:	f106 0a08 	add.w	sl, r6, #8
 800f640:	45da      	cmp	sl, fp
 800f642:	bf2c      	ite	cs
 800f644:	2300      	movcs	r3, #0
 800f646:	2301      	movcc	r3, #1
 800f648:	9a04      	ldr	r2, [sp, #16]
 800f64a:	005b      	lsls	r3, r3, #1
 800f64c:	210d      	movs	r1, #13
 800f64e:	a80a      	add	r0, sp, #40	@ 0x28
 800f650:	f7ff fe80 	bl	800f354 <uxr_buffer_submessage_header>
 800f654:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800f658:	fbb7 f2fc 	udiv	r2, r7, ip
 800f65c:	fb0c 7212 	mls	r2, ip, r2, r7
 800f660:	b292      	uxth	r2, r2
 800f662:	6863      	ldr	r3, [r4, #4]
 800f664:	fbb3 f3fc 	udiv	r3, r3, ip
 800f668:	fb02 f303 	mul.w	r3, r2, r3
 800f66c:	6822      	ldr	r2, [r4, #0]
 800f66e:	2101      	movs	r1, #1
 800f670:	f842 b003 	str.w	fp, [r2, r3]
 800f674:	4638      	mov	r0, r7
 800f676:	f007 f971 	bl	801695c <uxr_seq_num_add>
 800f67a:	9b05      	ldr	r3, [sp, #20]
 800f67c:	9e03      	ldr	r6, [sp, #12]
 800f67e:	f1a3 0208 	sub.w	r2, r3, #8
 800f682:	f108 0104 	add.w	r1, r8, #4
 800f686:	4607      	mov	r7, r0
 800f688:	eba2 0208 	sub.w	r2, r2, r8
 800f68c:	4449      	add	r1, r9
 800f68e:	4630      	mov	r0, r6
 800f690:	f7fd fc04 	bl	800ce9c <ucdr_init_buffer>
 800f694:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800f696:	81e7      	strh	r7, [r4, #14]
 800f698:	1d1a      	adds	r2, r3, #4
 800f69a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f69e:	bf28      	it	cs
 800f6a0:	2200      	movcs	r2, #0
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	b292      	uxth	r2, r2
 800f6a6:	2107      	movs	r1, #7
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	f7ff fe53 	bl	800f354 <uxr_buffer_submessage_header>
 800f6ae:	9906      	ldr	r1, [sp, #24]
 800f6b0:	aa09      	add	r2, sp, #36	@ 0x24
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	f7ff f89e 	bl	800e7f4 <uxr_init_base_object_request>
 800f6b8:	4604      	mov	r4, r0
 800f6ba:	b320      	cbz	r0, 800f706 <uxr_prepare_output_stream_fragmented+0x14e>
 800f6bc:	9e03      	ldr	r6, [sp, #12]
 800f6be:	a909      	add	r1, sp, #36	@ 0x24
 800f6c0:	4630      	mov	r0, r6
 800f6c2:	f000 fef3 	bl	80104ac <uxr_serialize_WRITE_DATA_Payload_Data>
 800f6c6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	1a52      	subs	r2, r2, r1
 800f6ce:	f7fd fbe5 	bl	800ce9c <ucdr_init_buffer>
 800f6d2:	9b07      	ldr	r3, [sp, #28]
 800f6d4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800f6d8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f6da:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800f6de:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f6e0:	491a      	ldr	r1, [pc, #104]	@ (800f74c <uxr_prepare_output_stream_fragmented+0x194>)
 800f6e2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800f6e6:	4630      	mov	r0, r6
 800f6e8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800f6ec:	462a      	mov	r2, r5
 800f6ee:	f7fd fba9 	bl	800ce44 <ucdr_set_on_full_buffer_callback>
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	b013      	add	sp, #76	@ 0x4c
 800f6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6fa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800f6fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f6fe:	4628      	mov	r0, r5
 800f700:	4798      	blx	r3
 800f702:	b920      	cbnz	r0, 800f70e <uxr_prepare_output_stream_fragmented+0x156>
 800f704:	2400      	movs	r4, #0
 800f706:	4620      	mov	r0, r4
 800f708:	b013      	add	sp, #76	@ 0x4c
 800f70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f70e:	4620      	mov	r0, r4
 800f710:	f007 f808 	bl	8016724 <get_available_free_slots>
 800f714:	2800      	cmp	r0, #0
 800f716:	f47f af69 	bne.w	800f5ec <uxr_prepare_output_stream_fragmented+0x34>
 800f71a:	e7f3      	b.n	800f704 <uxr_prepare_output_stream_fragmented+0x14c>
 800f71c:	4638      	mov	r0, r7
 800f71e:	2101      	movs	r1, #1
 800f720:	f007 f91c 	bl	801695c <uxr_seq_num_add>
 800f724:	8921      	ldrh	r1, [r4, #8]
 800f726:	fbb0 f2f1 	udiv	r2, r0, r1
 800f72a:	fb01 0212 	mls	r2, r1, r2, r0
 800f72e:	b292      	uxth	r2, r2
 800f730:	6863      	ldr	r3, [r4, #4]
 800f732:	fbb3 f3f1 	udiv	r3, r3, r1
 800f736:	fb02 f303 	mul.w	r3, r2, r3
 800f73a:	6822      	ldr	r2, [r4, #0]
 800f73c:	3304      	adds	r3, #4
 800f73e:	eb02 0903 	add.w	r9, r2, r3
 800f742:	4607      	mov	r7, r0
 800f744:	7b23      	ldrb	r3, [r4, #12]
 800f746:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800f74a:	e767      	b.n	800f61c <uxr_prepare_output_stream_fragmented+0x64>
 800f74c:	0800f441 	.word	0x0800f441

0800f750 <uxr_serialize_message_header>:
 800f750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f754:	4617      	mov	r7, r2
 800f756:	4604      	mov	r4, r0
 800f758:	461e      	mov	r6, r3
 800f75a:	460d      	mov	r5, r1
 800f75c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f760:	f7fc f8dc 	bl	800b91c <ucdr_serialize_uint8_t>
 800f764:	4639      	mov	r1, r7
 800f766:	4620      	mov	r0, r4
 800f768:	f7fc f8d8 	bl	800b91c <ucdr_serialize_uint8_t>
 800f76c:	4632      	mov	r2, r6
 800f76e:	2101      	movs	r1, #1
 800f770:	4620      	mov	r0, r4
 800f772:	f7fc f989 	bl	800ba88 <ucdr_serialize_endian_uint16_t>
 800f776:	062b      	lsls	r3, r5, #24
 800f778:	d501      	bpl.n	800f77e <uxr_serialize_message_header+0x2e>
 800f77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f77e:	4641      	mov	r1, r8
 800f780:	4620      	mov	r0, r4
 800f782:	2204      	movs	r2, #4
 800f784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f788:	f7fb bf28 	b.w	800b5dc <ucdr_serialize_array_uint8_t>

0800f78c <uxr_deserialize_message_header>:
 800f78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f790:	4617      	mov	r7, r2
 800f792:	4604      	mov	r4, r0
 800f794:	461e      	mov	r6, r3
 800f796:	460d      	mov	r5, r1
 800f798:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800f79c:	f7fc f8d4 	bl	800b948 <ucdr_deserialize_uint8_t>
 800f7a0:	4639      	mov	r1, r7
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f7fc f8d0 	bl	800b948 <ucdr_deserialize_uint8_t>
 800f7a8:	4632      	mov	r2, r6
 800f7aa:	2101      	movs	r1, #1
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f7fc fa61 	bl	800bc74 <ucdr_deserialize_endian_uint16_t>
 800f7b2:	f995 3000 	ldrsb.w	r3, [r5]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	da01      	bge.n	800f7be <uxr_deserialize_message_header+0x32>
 800f7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7be:	4641      	mov	r1, r8
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	2204      	movs	r2, #4
 800f7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c8:	f7fb bf6c 	b.w	800b6a4 <ucdr_deserialize_array_uint8_t>

0800f7cc <uxr_serialize_submessage_header>:
 800f7cc:	b570      	push	{r4, r5, r6, lr}
 800f7ce:	4616      	mov	r6, r2
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	461d      	mov	r5, r3
 800f7d4:	f7fc f8a2 	bl	800b91c <ucdr_serialize_uint8_t>
 800f7d8:	4631      	mov	r1, r6
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f7fc f89e 	bl	800b91c <ucdr_serialize_uint8_t>
 800f7e0:	462a      	mov	r2, r5
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	2101      	movs	r1, #1
 800f7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7ea:	f7fc b94d 	b.w	800ba88 <ucdr_serialize_endian_uint16_t>
 800f7ee:	bf00      	nop

0800f7f0 <uxr_deserialize_submessage_header>:
 800f7f0:	b570      	push	{r4, r5, r6, lr}
 800f7f2:	4616      	mov	r6, r2
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	461d      	mov	r5, r3
 800f7f8:	f7fc f8a6 	bl	800b948 <ucdr_deserialize_uint8_t>
 800f7fc:	4631      	mov	r1, r6
 800f7fe:	4620      	mov	r0, r4
 800f800:	f7fc f8a2 	bl	800b948 <ucdr_deserialize_uint8_t>
 800f804:	462a      	mov	r2, r5
 800f806:	4620      	mov	r0, r4
 800f808:	2101      	movs	r1, #1
 800f80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f80e:	f7fc ba31 	b.w	800bc74 <ucdr_deserialize_endian_uint16_t>
 800f812:	bf00      	nop

0800f814 <uxr_serialize_CLIENT_Representation>:
 800f814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f818:	2204      	movs	r2, #4
 800f81a:	460e      	mov	r6, r1
 800f81c:	4605      	mov	r5, r0
 800f81e:	f7fb fedd 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 800f822:	2202      	movs	r2, #2
 800f824:	1d31      	adds	r1, r6, #4
 800f826:	4604      	mov	r4, r0
 800f828:	4628      	mov	r0, r5
 800f82a:	f7fb fed7 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 800f82e:	2202      	movs	r2, #2
 800f830:	4004      	ands	r4, r0
 800f832:	1db1      	adds	r1, r6, #6
 800f834:	4628      	mov	r0, r5
 800f836:	f7fb fed1 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 800f83a:	b2e4      	uxtb	r4, r4
 800f83c:	2204      	movs	r2, #4
 800f83e:	4004      	ands	r4, r0
 800f840:	f106 0108 	add.w	r1, r6, #8
 800f844:	4628      	mov	r0, r5
 800f846:	f7fb fec9 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 800f84a:	7b31      	ldrb	r1, [r6, #12]
 800f84c:	ea00 0804 	and.w	r8, r0, r4
 800f850:	4628      	mov	r0, r5
 800f852:	f7fc f863 	bl	800b91c <ucdr_serialize_uint8_t>
 800f856:	7b71      	ldrb	r1, [r6, #13]
 800f858:	ea08 0800 	and.w	r8, r8, r0
 800f85c:	4628      	mov	r0, r5
 800f85e:	f7fc f82f 	bl	800b8c0 <ucdr_serialize_bool>
 800f862:	7b73      	ldrb	r3, [r6, #13]
 800f864:	ea08 0800 	and.w	r8, r8, r0
 800f868:	b93b      	cbnz	r3, 800f87a <uxr_serialize_CLIENT_Representation+0x66>
 800f86a:	8bb1      	ldrh	r1, [r6, #28]
 800f86c:	4628      	mov	r0, r5
 800f86e:	f7fc f881 	bl	800b974 <ucdr_serialize_uint16_t>
 800f872:	ea08 0000 	and.w	r0, r8, r0
 800f876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f87a:	6931      	ldr	r1, [r6, #16]
 800f87c:	4628      	mov	r0, r5
 800f87e:	f7fc fa69 	bl	800bd54 <ucdr_serialize_uint32_t>
 800f882:	6933      	ldr	r3, [r6, #16]
 800f884:	b1e3      	cbz	r3, 800f8c0 <uxr_serialize_CLIENT_Representation+0xac>
 800f886:	b1c0      	cbz	r0, 800f8ba <uxr_serialize_CLIENT_Representation+0xa6>
 800f888:	4637      	mov	r7, r6
 800f88a:	f04f 0900 	mov.w	r9, #0
 800f88e:	e001      	b.n	800f894 <uxr_serialize_CLIENT_Representation+0x80>
 800f890:	3708      	adds	r7, #8
 800f892:	b194      	cbz	r4, 800f8ba <uxr_serialize_CLIENT_Representation+0xa6>
 800f894:	6979      	ldr	r1, [r7, #20]
 800f896:	4628      	mov	r0, r5
 800f898:	f006 fa1e 	bl	8015cd8 <ucdr_serialize_string>
 800f89c:	69b9      	ldr	r1, [r7, #24]
 800f89e:	4604      	mov	r4, r0
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	f006 fa19 	bl	8015cd8 <ucdr_serialize_string>
 800f8a6:	6933      	ldr	r3, [r6, #16]
 800f8a8:	f109 0901 	add.w	r9, r9, #1
 800f8ac:	4004      	ands	r4, r0
 800f8ae:	4599      	cmp	r9, r3
 800f8b0:	b2e4      	uxtb	r4, r4
 800f8b2:	d3ed      	bcc.n	800f890 <uxr_serialize_CLIENT_Representation+0x7c>
 800f8b4:	ea08 0804 	and.w	r8, r8, r4
 800f8b8:	e7d7      	b.n	800f86a <uxr_serialize_CLIENT_Representation+0x56>
 800f8ba:	f04f 0800 	mov.w	r8, #0
 800f8be:	e7d4      	b.n	800f86a <uxr_serialize_CLIENT_Representation+0x56>
 800f8c0:	ea08 0800 	and.w	r8, r8, r0
 800f8c4:	e7d1      	b.n	800f86a <uxr_serialize_CLIENT_Representation+0x56>
 800f8c6:	bf00      	nop

0800f8c8 <uxr_deserialize_CLIENT_Representation>:
 800f8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8cc:	2204      	movs	r2, #4
 800f8ce:	460c      	mov	r4, r1
 800f8d0:	4605      	mov	r5, r0
 800f8d2:	f7fb fee7 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800f8d6:	2202      	movs	r2, #2
 800f8d8:	1d21      	adds	r1, r4, #4
 800f8da:	4606      	mov	r6, r0
 800f8dc:	4628      	mov	r0, r5
 800f8de:	f7fb fee1 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800f8e2:	2202      	movs	r2, #2
 800f8e4:	4006      	ands	r6, r0
 800f8e6:	1da1      	adds	r1, r4, #6
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	f7fb fedb 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800f8ee:	b2f6      	uxtb	r6, r6
 800f8f0:	2204      	movs	r2, #4
 800f8f2:	4006      	ands	r6, r0
 800f8f4:	f104 0108 	add.w	r1, r4, #8
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	f7fb fed3 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800f8fe:	f104 010c 	add.w	r1, r4, #12
 800f902:	ea00 0706 	and.w	r7, r0, r6
 800f906:	4628      	mov	r0, r5
 800f908:	f7fc f81e 	bl	800b948 <ucdr_deserialize_uint8_t>
 800f90c:	f104 010d 	add.w	r1, r4, #13
 800f910:	4007      	ands	r7, r0
 800f912:	4628      	mov	r0, r5
 800f914:	f7fb ffea 	bl	800b8ec <ucdr_deserialize_bool>
 800f918:	7b63      	ldrb	r3, [r4, #13]
 800f91a:	4007      	ands	r7, r0
 800f91c:	b93b      	cbnz	r3, 800f92e <uxr_deserialize_CLIENT_Representation+0x66>
 800f91e:	f104 011c 	add.w	r1, r4, #28
 800f922:	4628      	mov	r0, r5
 800f924:	f7fc f92a 	bl	800bb7c <ucdr_deserialize_uint16_t>
 800f928:	4038      	ands	r0, r7
 800f92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f92e:	f104 0110 	add.w	r1, r4, #16
 800f932:	4628      	mov	r0, r5
 800f934:	f7fc fb38 	bl	800bfa8 <ucdr_deserialize_uint32_t>
 800f938:	6923      	ldr	r3, [r4, #16]
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d903      	bls.n	800f946 <uxr_deserialize_CLIENT_Representation+0x7e>
 800f93e:	2301      	movs	r3, #1
 800f940:	75ab      	strb	r3, [r5, #22]
 800f942:	2700      	movs	r7, #0
 800f944:	e7eb      	b.n	800f91e <uxr_deserialize_CLIENT_Representation+0x56>
 800f946:	b30b      	cbz	r3, 800f98c <uxr_deserialize_CLIENT_Representation+0xc4>
 800f948:	2800      	cmp	r0, #0
 800f94a:	d0fa      	beq.n	800f942 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f94c:	46a0      	mov	r8, r4
 800f94e:	f04f 0900 	mov.w	r9, #0
 800f952:	e003      	b.n	800f95c <uxr_deserialize_CLIENT_Representation+0x94>
 800f954:	f108 0808 	add.w	r8, r8, #8
 800f958:	2e00      	cmp	r6, #0
 800f95a:	d0f2      	beq.n	800f942 <uxr_deserialize_CLIENT_Representation+0x7a>
 800f95c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800f960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f964:	4628      	mov	r0, r5
 800f966:	f006 f9c5 	bl	8015cf4 <ucdr_deserialize_string>
 800f96a:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800f96e:	4606      	mov	r6, r0
 800f970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f974:	4628      	mov	r0, r5
 800f976:	f006 f9bd 	bl	8015cf4 <ucdr_deserialize_string>
 800f97a:	6923      	ldr	r3, [r4, #16]
 800f97c:	f109 0901 	add.w	r9, r9, #1
 800f980:	4006      	ands	r6, r0
 800f982:	4599      	cmp	r9, r3
 800f984:	b2f6      	uxtb	r6, r6
 800f986:	d3e5      	bcc.n	800f954 <uxr_deserialize_CLIENT_Representation+0x8c>
 800f988:	4037      	ands	r7, r6
 800f98a:	e7c8      	b.n	800f91e <uxr_deserialize_CLIENT_Representation+0x56>
 800f98c:	4007      	ands	r7, r0
 800f98e:	e7c6      	b.n	800f91e <uxr_deserialize_CLIENT_Representation+0x56>

0800f990 <uxr_serialize_AGENT_Representation>:
 800f990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f994:	2204      	movs	r2, #4
 800f996:	460f      	mov	r7, r1
 800f998:	4605      	mov	r5, r0
 800f99a:	f7fb fe1f 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 800f99e:	2202      	movs	r2, #2
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	1d39      	adds	r1, r7, #4
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	f7fb fe19 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 800f9aa:	4020      	ands	r0, r4
 800f9ac:	2202      	movs	r2, #2
 800f9ae:	b2c4      	uxtb	r4, r0
 800f9b0:	1db9      	adds	r1, r7, #6
 800f9b2:	4628      	mov	r0, r5
 800f9b4:	f7fb fe12 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 800f9b8:	7a39      	ldrb	r1, [r7, #8]
 800f9ba:	4004      	ands	r4, r0
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f7fb ff7f 	bl	800b8c0 <ucdr_serialize_bool>
 800f9c2:	7a3b      	ldrb	r3, [r7, #8]
 800f9c4:	ea00 0804 	and.w	r8, r0, r4
 800f9c8:	b913      	cbnz	r3, 800f9d0 <uxr_serialize_AGENT_Representation+0x40>
 800f9ca:	4640      	mov	r0, r8
 800f9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9d0:	68f9      	ldr	r1, [r7, #12]
 800f9d2:	4628      	mov	r0, r5
 800f9d4:	f7fc f9be 	bl	800bd54 <ucdr_serialize_uint32_t>
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	b303      	cbz	r3, 800fa1e <uxr_serialize_AGENT_Representation+0x8e>
 800f9dc:	b1d0      	cbz	r0, 800fa14 <uxr_serialize_AGENT_Representation+0x84>
 800f9de:	463e      	mov	r6, r7
 800f9e0:	f04f 0900 	mov.w	r9, #0
 800f9e4:	e001      	b.n	800f9ea <uxr_serialize_AGENT_Representation+0x5a>
 800f9e6:	3608      	adds	r6, #8
 800f9e8:	b1a4      	cbz	r4, 800fa14 <uxr_serialize_AGENT_Representation+0x84>
 800f9ea:	6931      	ldr	r1, [r6, #16]
 800f9ec:	4628      	mov	r0, r5
 800f9ee:	f006 f973 	bl	8015cd8 <ucdr_serialize_string>
 800f9f2:	6971      	ldr	r1, [r6, #20]
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	4628      	mov	r0, r5
 800f9f8:	f006 f96e 	bl	8015cd8 <ucdr_serialize_string>
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f109 0901 	add.w	r9, r9, #1
 800fa02:	4004      	ands	r4, r0
 800fa04:	4599      	cmp	r9, r3
 800fa06:	b2e4      	uxtb	r4, r4
 800fa08:	d3ed      	bcc.n	800f9e6 <uxr_serialize_AGENT_Representation+0x56>
 800fa0a:	ea08 0804 	and.w	r8, r8, r4
 800fa0e:	4640      	mov	r0, r8
 800fa10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa14:	f04f 0800 	mov.w	r8, #0
 800fa18:	4640      	mov	r0, r8
 800fa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa1e:	ea08 0800 	and.w	r8, r8, r0
 800fa22:	e7d2      	b.n	800f9ca <uxr_serialize_AGENT_Representation+0x3a>

0800fa24 <uxr_serialize_DATAWRITER_Representation>:
 800fa24:	b570      	push	{r4, r5, r6, lr}
 800fa26:	460d      	mov	r5, r1
 800fa28:	7809      	ldrb	r1, [r1, #0]
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	f7fb ff76 	bl	800b91c <ucdr_serialize_uint8_t>
 800fa30:	4604      	mov	r4, r0
 800fa32:	b130      	cbz	r0, 800fa42 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fa34:	782b      	ldrb	r3, [r5, #0]
 800fa36:	2b02      	cmp	r3, #2
 800fa38:	d00c      	beq.n	800fa54 <uxr_serialize_DATAWRITER_Representation+0x30>
 800fa3a:	2b03      	cmp	r3, #3
 800fa3c:	d010      	beq.n	800fa60 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	d008      	beq.n	800fa54 <uxr_serialize_DATAWRITER_Representation+0x30>
 800fa42:	2202      	movs	r2, #2
 800fa44:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800fa48:	4630      	mov	r0, r6
 800fa4a:	f7fb fdc7 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 800fa4e:	4020      	ands	r0, r4
 800fa50:	b2c0      	uxtb	r0, r0
 800fa52:	bd70      	pop	{r4, r5, r6, pc}
 800fa54:	6869      	ldr	r1, [r5, #4]
 800fa56:	4630      	mov	r0, r6
 800fa58:	f006 f93e 	bl	8015cd8 <ucdr_serialize_string>
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	e7f0      	b.n	800fa42 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fa60:	4629      	mov	r1, r5
 800fa62:	4630      	mov	r0, r6
 800fa64:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800fa68:	3104      	adds	r1, #4
 800fa6a:	f7fd fab5 	bl	800cfd8 <ucdr_serialize_sequence_uint8_t>
 800fa6e:	4604      	mov	r4, r0
 800fa70:	e7e7      	b.n	800fa42 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800fa72:	bf00      	nop

0800fa74 <uxr_serialize_ObjectVariant.part.0>:
 800fa74:	b570      	push	{r4, r5, r6, lr}
 800fa76:	780b      	ldrb	r3, [r1, #0]
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	460c      	mov	r4, r1
 800fa7c:	4605      	mov	r5, r0
 800fa7e:	2b0d      	cmp	r3, #13
 800fa80:	d816      	bhi.n	800fab0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800fa82:	e8df f003 	tbb	[pc, r3]
 800fa86:	0733      	.short	0x0733
 800fa88:	07071717 	.word	0x07071717
 800fa8c:	0c150707 	.word	0x0c150707
 800fa90:	4c510c0c 	.word	0x4c510c0c
 800fa94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa98:	3104      	adds	r1, #4
 800fa9a:	f7ff bfc3 	b.w	800fa24 <uxr_serialize_DATAWRITER_Representation>
 800fa9e:	7909      	ldrb	r1, [r1, #4]
 800faa0:	f7fb ff3c 	bl	800b91c <ucdr_serialize_uint8_t>
 800faa4:	b300      	cbz	r0, 800fae8 <uxr_serialize_ObjectVariant.part.0+0x74>
 800faa6:	7923      	ldrb	r3, [r4, #4]
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d042      	beq.n	800fb32 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800faac:	2b02      	cmp	r3, #2
 800faae:	d040      	beq.n	800fb32 <uxr_serialize_ObjectVariant.part.0+0xbe>
 800fab0:	2001      	movs	r0, #1
 800fab2:	bd70      	pop	{r4, r5, r6, pc}
 800fab4:	7909      	ldrb	r1, [r1, #4]
 800fab6:	f7fb ff31 	bl	800b91c <ucdr_serialize_uint8_t>
 800faba:	4606      	mov	r6, r0
 800fabc:	b158      	cbz	r0, 800fad6 <uxr_serialize_ObjectVariant.part.0+0x62>
 800fabe:	7923      	ldrb	r3, [r4, #4]
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	d03c      	beq.n	800fb3e <uxr_serialize_ObjectVariant.part.0+0xca>
 800fac4:	2b03      	cmp	r3, #3
 800fac6:	d106      	bne.n	800fad6 <uxr_serialize_ObjectVariant.part.0+0x62>
 800fac8:	68a2      	ldr	r2, [r4, #8]
 800faca:	f104 010c 	add.w	r1, r4, #12
 800face:	4628      	mov	r0, r5
 800fad0:	f7fd fa82 	bl	800cfd8 <ucdr_serialize_sequence_uint8_t>
 800fad4:	4606      	mov	r6, r0
 800fad6:	2202      	movs	r2, #2
 800fad8:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800fadc:	4628      	mov	r0, r5
 800fade:	f7fb fd7d 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 800fae2:	4030      	ands	r0, r6
 800fae4:	b2c0      	uxtb	r0, r0
 800fae6:	bd70      	pop	{r4, r5, r6, pc}
 800fae8:	2000      	movs	r0, #0
 800faea:	bd70      	pop	{r4, r5, r6, pc}
 800faec:	7909      	ldrb	r1, [r1, #4]
 800faee:	f7fb ff15 	bl	800b91c <ucdr_serialize_uint8_t>
 800faf2:	4606      	mov	r6, r0
 800faf4:	b158      	cbz	r0, 800fb0e <uxr_serialize_ObjectVariant.part.0+0x9a>
 800faf6:	7923      	ldrb	r3, [r4, #4]
 800faf8:	2b02      	cmp	r3, #2
 800fafa:	d003      	beq.n	800fb04 <uxr_serialize_ObjectVariant.part.0+0x90>
 800fafc:	2b03      	cmp	r3, #3
 800fafe:	d024      	beq.n	800fb4a <uxr_serialize_ObjectVariant.part.0+0xd6>
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	d104      	bne.n	800fb0e <uxr_serialize_ObjectVariant.part.0+0x9a>
 800fb04:	68a1      	ldr	r1, [r4, #8]
 800fb06:	4628      	mov	r0, r5
 800fb08:	f006 f8e6 	bl	8015cd8 <ucdr_serialize_string>
 800fb0c:	4606      	mov	r6, r0
 800fb0e:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800fb12:	4628      	mov	r0, r5
 800fb14:	f7fc fc2a 	bl	800c36c <ucdr_serialize_int16_t>
 800fb18:	4030      	ands	r0, r6
 800fb1a:	b2c0      	uxtb	r0, r0
 800fb1c:	bd70      	pop	{r4, r5, r6, pc}
 800fb1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb22:	3104      	adds	r1, #4
 800fb24:	f7ff be76 	b.w	800f814 <uxr_serialize_CLIENT_Representation>
 800fb28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb2c:	3104      	adds	r1, #4
 800fb2e:	f7ff bf2f 	b.w	800f990 <uxr_serialize_AGENT_Representation>
 800fb32:	68a1      	ldr	r1, [r4, #8]
 800fb34:	4628      	mov	r0, r5
 800fb36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb3a:	f006 b8cd 	b.w	8015cd8 <ucdr_serialize_string>
 800fb3e:	68a1      	ldr	r1, [r4, #8]
 800fb40:	4628      	mov	r0, r5
 800fb42:	f006 f8c9 	bl	8015cd8 <ucdr_serialize_string>
 800fb46:	4606      	mov	r6, r0
 800fb48:	e7c5      	b.n	800fad6 <uxr_serialize_ObjectVariant.part.0+0x62>
 800fb4a:	68a2      	ldr	r2, [r4, #8]
 800fb4c:	f104 010c 	add.w	r1, r4, #12
 800fb50:	4628      	mov	r0, r5
 800fb52:	f7fd fa41 	bl	800cfd8 <ucdr_serialize_sequence_uint8_t>
 800fb56:	4606      	mov	r6, r0
 800fb58:	e7d9      	b.n	800fb0e <uxr_serialize_ObjectVariant.part.0+0x9a>
 800fb5a:	bf00      	nop

0800fb5c <uxr_deserialize_DATAWRITER_Representation>:
 800fb5c:	b570      	push	{r4, r5, r6, lr}
 800fb5e:	4606      	mov	r6, r0
 800fb60:	460d      	mov	r5, r1
 800fb62:	f7fb fef1 	bl	800b948 <ucdr_deserialize_uint8_t>
 800fb66:	4604      	mov	r4, r0
 800fb68:	b130      	cbz	r0, 800fb78 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fb6a:	782b      	ldrb	r3, [r5, #0]
 800fb6c:	2b02      	cmp	r3, #2
 800fb6e:	d00c      	beq.n	800fb8a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800fb70:	2b03      	cmp	r3, #3
 800fb72:	d012      	beq.n	800fb9a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d008      	beq.n	800fb8a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800fb78:	2202      	movs	r2, #2
 800fb7a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800fb7e:	4630      	mov	r0, r6
 800fb80:	f7fb fd90 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800fb84:	4020      	ands	r0, r4
 800fb86:	b2c0      	uxtb	r0, r0
 800fb88:	bd70      	pop	{r4, r5, r6, pc}
 800fb8a:	6869      	ldr	r1, [r5, #4]
 800fb8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb90:	4630      	mov	r0, r6
 800fb92:	f006 f8af 	bl	8015cf4 <ucdr_deserialize_string>
 800fb96:	4604      	mov	r4, r0
 800fb98:	e7ee      	b.n	800fb78 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fb9a:	1d2b      	adds	r3, r5, #4
 800fb9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fba0:	f105 0108 	add.w	r1, r5, #8
 800fba4:	4630      	mov	r0, r6
 800fba6:	f7fd fa29 	bl	800cffc <ucdr_deserialize_sequence_uint8_t>
 800fbaa:	4604      	mov	r4, r0
 800fbac:	e7e4      	b.n	800fb78 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800fbae:	bf00      	nop

0800fbb0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800fbb0:	b570      	push	{r4, r5, r6, lr}
 800fbb2:	460d      	mov	r5, r1
 800fbb4:	7809      	ldrb	r1, [r1, #0]
 800fbb6:	4606      	mov	r6, r0
 800fbb8:	f7fb fe82 	bl	800b8c0 <ucdr_serialize_bool>
 800fbbc:	782b      	ldrb	r3, [r5, #0]
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	b94b      	cbnz	r3, 800fbd6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800fbc2:	7a29      	ldrb	r1, [r5, #8]
 800fbc4:	4630      	mov	r0, r6
 800fbc6:	f7fb fe7b 	bl	800b8c0 <ucdr_serialize_bool>
 800fbca:	7a2b      	ldrb	r3, [r5, #8]
 800fbcc:	4004      	ands	r4, r0
 800fbce:	b2e4      	uxtb	r4, r4
 800fbd0:	b943      	cbnz	r3, 800fbe4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	bd70      	pop	{r4, r5, r6, pc}
 800fbd6:	6869      	ldr	r1, [r5, #4]
 800fbd8:	4630      	mov	r0, r6
 800fbda:	f006 f87d 	bl	8015cd8 <ucdr_serialize_string>
 800fbde:	4004      	ands	r4, r0
 800fbe0:	b2e4      	uxtb	r4, r4
 800fbe2:	e7ee      	b.n	800fbc2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800fbe4:	68e9      	ldr	r1, [r5, #12]
 800fbe6:	4630      	mov	r0, r6
 800fbe8:	f006 f876 	bl	8015cd8 <ucdr_serialize_string>
 800fbec:	4004      	ands	r4, r0
 800fbee:	4620      	mov	r0, r4
 800fbf0:	bd70      	pop	{r4, r5, r6, pc}
 800fbf2:	bf00      	nop

0800fbf4 <uxr_serialize_OBJK_Topic_Binary>:
 800fbf4:	b570      	push	{r4, r5, r6, lr}
 800fbf6:	460d      	mov	r5, r1
 800fbf8:	6809      	ldr	r1, [r1, #0]
 800fbfa:	4606      	mov	r6, r0
 800fbfc:	f006 f86c 	bl	8015cd8 <ucdr_serialize_string>
 800fc00:	7929      	ldrb	r1, [r5, #4]
 800fc02:	4604      	mov	r4, r0
 800fc04:	4630      	mov	r0, r6
 800fc06:	f7fb fe5b 	bl	800b8c0 <ucdr_serialize_bool>
 800fc0a:	792b      	ldrb	r3, [r5, #4]
 800fc0c:	4004      	ands	r4, r0
 800fc0e:	b2e4      	uxtb	r4, r4
 800fc10:	b943      	cbnz	r3, 800fc24 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800fc12:	7b29      	ldrb	r1, [r5, #12]
 800fc14:	4630      	mov	r0, r6
 800fc16:	f7fb fe53 	bl	800b8c0 <ucdr_serialize_bool>
 800fc1a:	7b2b      	ldrb	r3, [r5, #12]
 800fc1c:	4004      	ands	r4, r0
 800fc1e:	b93b      	cbnz	r3, 800fc30 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800fc20:	4620      	mov	r0, r4
 800fc22:	bd70      	pop	{r4, r5, r6, pc}
 800fc24:	68a9      	ldr	r1, [r5, #8]
 800fc26:	4630      	mov	r0, r6
 800fc28:	f006 f856 	bl	8015cd8 <ucdr_serialize_string>
 800fc2c:	4004      	ands	r4, r0
 800fc2e:	e7f0      	b.n	800fc12 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800fc30:	6929      	ldr	r1, [r5, #16]
 800fc32:	4630      	mov	r0, r6
 800fc34:	f006 f850 	bl	8015cd8 <ucdr_serialize_string>
 800fc38:	4004      	ands	r4, r0
 800fc3a:	b2e4      	uxtb	r4, r4
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	bd70      	pop	{r4, r5, r6, pc}

0800fc40 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800fc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc44:	460c      	mov	r4, r1
 800fc46:	7809      	ldrb	r1, [r1, #0]
 800fc48:	4606      	mov	r6, r0
 800fc4a:	f7fb fe39 	bl	800b8c0 <ucdr_serialize_bool>
 800fc4e:	7823      	ldrb	r3, [r4, #0]
 800fc50:	4605      	mov	r5, r0
 800fc52:	b96b      	cbnz	r3, 800fc70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800fc54:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800fc58:	4630      	mov	r0, r6
 800fc5a:	f7fb fe31 	bl	800b8c0 <ucdr_serialize_bool>
 800fc5e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fc62:	4005      	ands	r5, r0
 800fc64:	b2ed      	uxtb	r5, r5
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d16a      	bne.n	800fd40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc70:	6861      	ldr	r1, [r4, #4]
 800fc72:	4630      	mov	r0, r6
 800fc74:	f7fc f86e 	bl	800bd54 <ucdr_serialize_uint32_t>
 800fc78:	6863      	ldr	r3, [r4, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d06c      	beq.n	800fd58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	d068      	beq.n	800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fc82:	68a1      	ldr	r1, [r4, #8]
 800fc84:	4630      	mov	r0, r6
 800fc86:	f006 f827 	bl	8015cd8 <ucdr_serialize_string>
 800fc8a:	6862      	ldr	r2, [r4, #4]
 800fc8c:	2a01      	cmp	r2, #1
 800fc8e:	d953      	bls.n	800fd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d05f      	beq.n	800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fc94:	68e1      	ldr	r1, [r4, #12]
 800fc96:	4630      	mov	r0, r6
 800fc98:	f006 f81e 	bl	8015cd8 <ucdr_serialize_string>
 800fc9c:	6862      	ldr	r2, [r4, #4]
 800fc9e:	2a02      	cmp	r2, #2
 800fca0:	d94a      	bls.n	800fd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d056      	beq.n	800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fca6:	6921      	ldr	r1, [r4, #16]
 800fca8:	4630      	mov	r0, r6
 800fcaa:	f006 f815 	bl	8015cd8 <ucdr_serialize_string>
 800fcae:	6862      	ldr	r2, [r4, #4]
 800fcb0:	2a03      	cmp	r2, #3
 800fcb2:	d941      	bls.n	800fd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	d04d      	beq.n	800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fcb8:	6961      	ldr	r1, [r4, #20]
 800fcba:	4630      	mov	r0, r6
 800fcbc:	f006 f80c 	bl	8015cd8 <ucdr_serialize_string>
 800fcc0:	6862      	ldr	r2, [r4, #4]
 800fcc2:	2a04      	cmp	r2, #4
 800fcc4:	d938      	bls.n	800fd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d044      	beq.n	800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fcca:	69a1      	ldr	r1, [r4, #24]
 800fccc:	4630      	mov	r0, r6
 800fcce:	f006 f803 	bl	8015cd8 <ucdr_serialize_string>
 800fcd2:	6862      	ldr	r2, [r4, #4]
 800fcd4:	2a05      	cmp	r2, #5
 800fcd6:	d92f      	bls.n	800fd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	d03b      	beq.n	800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fcdc:	69e1      	ldr	r1, [r4, #28]
 800fcde:	4630      	mov	r0, r6
 800fce0:	f005 fffa 	bl	8015cd8 <ucdr_serialize_string>
 800fce4:	6862      	ldr	r2, [r4, #4]
 800fce6:	2a06      	cmp	r2, #6
 800fce8:	d926      	bls.n	800fd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fcea:	b398      	cbz	r0, 800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fcec:	6a21      	ldr	r1, [r4, #32]
 800fcee:	4630      	mov	r0, r6
 800fcf0:	f005 fff2 	bl	8015cd8 <ucdr_serialize_string>
 800fcf4:	6862      	ldr	r2, [r4, #4]
 800fcf6:	2a07      	cmp	r2, #7
 800fcf8:	d91e      	bls.n	800fd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fcfa:	b358      	cbz	r0, 800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fcfc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800fcfe:	4630      	mov	r0, r6
 800fd00:	f005 ffea 	bl	8015cd8 <ucdr_serialize_string>
 800fd04:	6862      	ldr	r2, [r4, #4]
 800fd06:	2a08      	cmp	r2, #8
 800fd08:	d916      	bls.n	800fd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fd0a:	b318      	cbz	r0, 800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fd0c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800fd0e:	4630      	mov	r0, r6
 800fd10:	f005 ffe2 	bl	8015cd8 <ucdr_serialize_string>
 800fd14:	6862      	ldr	r2, [r4, #4]
 800fd16:	2a09      	cmp	r2, #9
 800fd18:	d90e      	bls.n	800fd38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800fd1a:	b1d8      	cbz	r0, 800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fd1c:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 800fd20:	2709      	movs	r7, #9
 800fd22:	e000      	b.n	800fd26 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800fd24:	b1b0      	cbz	r0, 800fd54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 800fd26:	f858 1f04 	ldr.w	r1, [r8, #4]!
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	f005 ffd4 	bl	8015cd8 <ucdr_serialize_string>
 800fd30:	6862      	ldr	r2, [r4, #4]
 800fd32:	3701      	adds	r7, #1
 800fd34:	4297      	cmp	r7, r2
 800fd36:	d3f5      	bcc.n	800fd24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800fd38:	ea05 0300 	and.w	r3, r5, r0
 800fd3c:	b2dd      	uxtb	r5, r3
 800fd3e:	e789      	b.n	800fc54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fd40:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fd42:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800fd46:	4630      	mov	r0, r6
 800fd48:	f7fd f946 	bl	800cfd8 <ucdr_serialize_sequence_uint8_t>
 800fd4c:	4005      	ands	r5, r0
 800fd4e:	4628      	mov	r0, r5
 800fd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd54:	2500      	movs	r5, #0
 800fd56:	e77d      	b.n	800fc54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fd58:	4028      	ands	r0, r5
 800fd5a:	b2c5      	uxtb	r5, r0
 800fd5c:	e77a      	b.n	800fc54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800fd5e:	bf00      	nop

0800fd60 <uxr_serialize_OBJK_Publisher_Binary>:
 800fd60:	b570      	push	{r4, r5, r6, lr}
 800fd62:	460d      	mov	r5, r1
 800fd64:	7809      	ldrb	r1, [r1, #0]
 800fd66:	4606      	mov	r6, r0
 800fd68:	f7fb fdaa 	bl	800b8c0 <ucdr_serialize_bool>
 800fd6c:	782b      	ldrb	r3, [r5, #0]
 800fd6e:	4604      	mov	r4, r0
 800fd70:	b94b      	cbnz	r3, 800fd86 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800fd72:	7a29      	ldrb	r1, [r5, #8]
 800fd74:	4630      	mov	r0, r6
 800fd76:	f7fb fda3 	bl	800b8c0 <ucdr_serialize_bool>
 800fd7a:	7a2b      	ldrb	r3, [r5, #8]
 800fd7c:	4004      	ands	r4, r0
 800fd7e:	b2e4      	uxtb	r4, r4
 800fd80:	b943      	cbnz	r3, 800fd94 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800fd82:	4620      	mov	r0, r4
 800fd84:	bd70      	pop	{r4, r5, r6, pc}
 800fd86:	6869      	ldr	r1, [r5, #4]
 800fd88:	4630      	mov	r0, r6
 800fd8a:	f005 ffa5 	bl	8015cd8 <ucdr_serialize_string>
 800fd8e:	4004      	ands	r4, r0
 800fd90:	b2e4      	uxtb	r4, r4
 800fd92:	e7ee      	b.n	800fd72 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800fd94:	f105 010c 	add.w	r1, r5, #12
 800fd98:	4630      	mov	r0, r6
 800fd9a:	f7ff ff51 	bl	800fc40 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800fd9e:	4004      	ands	r4, r0
 800fda0:	4620      	mov	r0, r4
 800fda2:	bd70      	pop	{r4, r5, r6, pc}

0800fda4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800fda4:	b570      	push	{r4, r5, r6, lr}
 800fda6:	460d      	mov	r5, r1
 800fda8:	8809      	ldrh	r1, [r1, #0]
 800fdaa:	4606      	mov	r6, r0
 800fdac:	f7fb fde2 	bl	800b974 <ucdr_serialize_uint16_t>
 800fdb0:	78a9      	ldrb	r1, [r5, #2]
 800fdb2:	4604      	mov	r4, r0
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	f7fb fd83 	bl	800b8c0 <ucdr_serialize_bool>
 800fdba:	78ab      	ldrb	r3, [r5, #2]
 800fdbc:	4004      	ands	r4, r0
 800fdbe:	b2e4      	uxtb	r4, r4
 800fdc0:	b9b3      	cbnz	r3, 800fdf0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 800fdc2:	79a9      	ldrb	r1, [r5, #6]
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f7fb fd7b 	bl	800b8c0 <ucdr_serialize_bool>
 800fdca:	79ab      	ldrb	r3, [r5, #6]
 800fdcc:	4004      	ands	r4, r0
 800fdce:	bb33      	cbnz	r3, 800fe1e <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 800fdd0:	7b29      	ldrb	r1, [r5, #12]
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	f7fb fd74 	bl	800b8c0 <ucdr_serialize_bool>
 800fdd8:	7b2b      	ldrb	r3, [r5, #12]
 800fdda:	4004      	ands	r4, r0
 800fddc:	b9c3      	cbnz	r3, 800fe10 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 800fdde:	7d29      	ldrb	r1, [r5, #20]
 800fde0:	4630      	mov	r0, r6
 800fde2:	f7fb fd6d 	bl	800b8c0 <ucdr_serialize_bool>
 800fde6:	7d2b      	ldrb	r3, [r5, #20]
 800fde8:	4004      	ands	r4, r0
 800fdea:	b93b      	cbnz	r3, 800fdfc <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 800fdec:	4620      	mov	r0, r4
 800fdee:	bd70      	pop	{r4, r5, r6, pc}
 800fdf0:	88a9      	ldrh	r1, [r5, #4]
 800fdf2:	4630      	mov	r0, r6
 800fdf4:	f7fb fdbe 	bl	800b974 <ucdr_serialize_uint16_t>
 800fdf8:	4004      	ands	r4, r0
 800fdfa:	e7e2      	b.n	800fdc2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 800fdfc:	69aa      	ldr	r2, [r5, #24]
 800fdfe:	f105 011c 	add.w	r1, r5, #28
 800fe02:	4630      	mov	r0, r6
 800fe04:	f7fd f8e8 	bl	800cfd8 <ucdr_serialize_sequence_uint8_t>
 800fe08:	4004      	ands	r4, r0
 800fe0a:	b2e4      	uxtb	r4, r4
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	bd70      	pop	{r4, r5, r6, pc}
 800fe10:	6929      	ldr	r1, [r5, #16]
 800fe12:	4630      	mov	r0, r6
 800fe14:	f7fb ff9e 	bl	800bd54 <ucdr_serialize_uint32_t>
 800fe18:	4004      	ands	r4, r0
 800fe1a:	b2e4      	uxtb	r4, r4
 800fe1c:	e7df      	b.n	800fdde <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 800fe1e:	68a9      	ldr	r1, [r5, #8]
 800fe20:	4630      	mov	r0, r6
 800fe22:	f7fb ff97 	bl	800bd54 <ucdr_serialize_uint32_t>
 800fe26:	4004      	ands	r4, r0
 800fe28:	b2e4      	uxtb	r4, r4
 800fe2a:	e7d1      	b.n	800fdd0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

0800fe2c <uxr_serialize_OBJK_DataWriter_Binary>:
 800fe2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe2e:	2202      	movs	r2, #2
 800fe30:	460d      	mov	r5, r1
 800fe32:	4606      	mov	r6, r0
 800fe34:	f7fb fbd2 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 800fe38:	78a9      	ldrb	r1, [r5, #2]
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	f7fb fd3f 	bl	800b8c0 <ucdr_serialize_bool>
 800fe42:	78ab      	ldrb	r3, [r5, #2]
 800fe44:	4004      	ands	r4, r0
 800fe46:	b2e4      	uxtb	r4, r4
 800fe48:	b90b      	cbnz	r3, 800fe4e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe4e:	f105 0108 	add.w	r1, r5, #8
 800fe52:	4630      	mov	r0, r6
 800fe54:	f7ff ffa6 	bl	800fda4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800fe58:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800fe5c:	4607      	mov	r7, r0
 800fe5e:	4630      	mov	r0, r6
 800fe60:	f7fb fd2e 	bl	800b8c0 <ucdr_serialize_bool>
 800fe64:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800fe68:	4007      	ands	r7, r0
 800fe6a:	b2ff      	uxtb	r7, r7
 800fe6c:	b913      	cbnz	r3, 800fe74 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800fe6e:	403c      	ands	r4, r7
 800fe70:	4620      	mov	r0, r4
 800fe72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe74:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800fe78:	4630      	mov	r0, r6
 800fe7a:	f7fc f9af 	bl	800c1dc <ucdr_serialize_uint64_t>
 800fe7e:	4007      	ands	r7, r0
 800fe80:	e7f5      	b.n	800fe6e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800fe82:	bf00      	nop

0800fe84 <uxr_deserialize_ObjectVariant>:
 800fe84:	b570      	push	{r4, r5, r6, lr}
 800fe86:	4605      	mov	r5, r0
 800fe88:	460e      	mov	r6, r1
 800fe8a:	f7fb fd5d 	bl	800b948 <ucdr_deserialize_uint8_t>
 800fe8e:	b168      	cbz	r0, 800feac <uxr_deserialize_ObjectVariant+0x28>
 800fe90:	7833      	ldrb	r3, [r6, #0]
 800fe92:	3b01      	subs	r3, #1
 800fe94:	4604      	mov	r4, r0
 800fe96:	2b0d      	cmp	r3, #13
 800fe98:	d809      	bhi.n	800feae <uxr_deserialize_ObjectVariant+0x2a>
 800fe9a:	e8df f003 	tbb	[pc, r3]
 800fe9e:	0a64      	.short	0x0a64
 800fea0:	0a0a2323 	.word	0x0a0a2323
 800fea4:	10080a0a 	.word	0x10080a0a
 800fea8:	5e411010 	.word	0x5e411010
 800feac:	2400      	movs	r4, #0
 800feae:	4620      	mov	r0, r4
 800feb0:	bd70      	pop	{r4, r5, r6, pc}
 800feb2:	1d31      	adds	r1, r6, #4
 800feb4:	4628      	mov	r0, r5
 800feb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800feba:	f7ff be4f 	b.w	800fb5c <uxr_deserialize_DATAWRITER_Representation>
 800febe:	1d31      	adds	r1, r6, #4
 800fec0:	4628      	mov	r0, r5
 800fec2:	f7fb fd41 	bl	800b948 <ucdr_deserialize_uint8_t>
 800fec6:	2800      	cmp	r0, #0
 800fec8:	d0f0      	beq.n	800feac <uxr_deserialize_ObjectVariant+0x28>
 800feca:	7933      	ldrb	r3, [r6, #4]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d001      	beq.n	800fed4 <uxr_deserialize_ObjectVariant+0x50>
 800fed0:	2b02      	cmp	r3, #2
 800fed2:	d1ec      	bne.n	800feae <uxr_deserialize_ObjectVariant+0x2a>
 800fed4:	68b1      	ldr	r1, [r6, #8]
 800fed6:	4628      	mov	r0, r5
 800fed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fee0:	f005 bf08 	b.w	8015cf4 <ucdr_deserialize_string>
 800fee4:	1d31      	adds	r1, r6, #4
 800fee6:	4628      	mov	r0, r5
 800fee8:	f7fb fd2e 	bl	800b948 <ucdr_deserialize_uint8_t>
 800feec:	4604      	mov	r4, r0
 800feee:	b170      	cbz	r0, 800ff0e <uxr_deserialize_ObjectVariant+0x8a>
 800fef0:	7933      	ldrb	r3, [r6, #4]
 800fef2:	2b02      	cmp	r3, #2
 800fef4:	d053      	beq.n	800ff9e <uxr_deserialize_ObjectVariant+0x11a>
 800fef6:	2b03      	cmp	r3, #3
 800fef8:	d109      	bne.n	800ff0e <uxr_deserialize_ObjectVariant+0x8a>
 800fefa:	f106 0308 	add.w	r3, r6, #8
 800fefe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff02:	f106 010c 	add.w	r1, r6, #12
 800ff06:	4628      	mov	r0, r5
 800ff08:	f7fd f878 	bl	800cffc <ucdr_deserialize_sequence_uint8_t>
 800ff0c:	4604      	mov	r4, r0
 800ff0e:	2202      	movs	r2, #2
 800ff10:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ff14:	4628      	mov	r0, r5
 800ff16:	f7fb fbc5 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800ff1a:	4004      	ands	r4, r0
 800ff1c:	b2e4      	uxtb	r4, r4
 800ff1e:	e7c6      	b.n	800feae <uxr_deserialize_ObjectVariant+0x2a>
 800ff20:	2204      	movs	r2, #4
 800ff22:	18b1      	adds	r1, r6, r2
 800ff24:	4628      	mov	r0, r5
 800ff26:	f7fb fbbd 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800ff2a:	2202      	movs	r2, #2
 800ff2c:	f106 0108 	add.w	r1, r6, #8
 800ff30:	4604      	mov	r4, r0
 800ff32:	4628      	mov	r0, r5
 800ff34:	f7fb fbb6 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800ff38:	2202      	movs	r2, #2
 800ff3a:	4004      	ands	r4, r0
 800ff3c:	f106 010a 	add.w	r1, r6, #10
 800ff40:	4628      	mov	r0, r5
 800ff42:	f7fb fbaf 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800ff46:	b2e4      	uxtb	r4, r4
 800ff48:	4603      	mov	r3, r0
 800ff4a:	f106 010c 	add.w	r1, r6, #12
 800ff4e:	4628      	mov	r0, r5
 800ff50:	401c      	ands	r4, r3
 800ff52:	f7fb fccb 	bl	800b8ec <ucdr_deserialize_bool>
 800ff56:	4004      	ands	r4, r0
 800ff58:	e7a9      	b.n	800feae <uxr_deserialize_ObjectVariant+0x2a>
 800ff5a:	1d31      	adds	r1, r6, #4
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff62:	f7ff bcb1 	b.w	800f8c8 <uxr_deserialize_CLIENT_Representation>
 800ff66:	1d31      	adds	r1, r6, #4
 800ff68:	4628      	mov	r0, r5
 800ff6a:	f7fb fced 	bl	800b948 <ucdr_deserialize_uint8_t>
 800ff6e:	4604      	mov	r4, r0
 800ff70:	b168      	cbz	r0, 800ff8e <uxr_deserialize_ObjectVariant+0x10a>
 800ff72:	7933      	ldrb	r3, [r6, #4]
 800ff74:	2b02      	cmp	r3, #2
 800ff76:	d003      	beq.n	800ff80 <uxr_deserialize_ObjectVariant+0xfc>
 800ff78:	2b03      	cmp	r3, #3
 800ff7a:	d018      	beq.n	800ffae <uxr_deserialize_ObjectVariant+0x12a>
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	d106      	bne.n	800ff8e <uxr_deserialize_ObjectVariant+0x10a>
 800ff80:	68b1      	ldr	r1, [r6, #8]
 800ff82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff86:	4628      	mov	r0, r5
 800ff88:	f005 feb4 	bl	8015cf4 <ucdr_deserialize_string>
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800ff92:	4628      	mov	r0, r5
 800ff94:	f7fc fa74 	bl	800c480 <ucdr_deserialize_int16_t>
 800ff98:	4004      	ands	r4, r0
 800ff9a:	b2e4      	uxtb	r4, r4
 800ff9c:	e787      	b.n	800feae <uxr_deserialize_ObjectVariant+0x2a>
 800ff9e:	68b1      	ldr	r1, [r6, #8]
 800ffa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ffa4:	4628      	mov	r0, r5
 800ffa6:	f005 fea5 	bl	8015cf4 <ucdr_deserialize_string>
 800ffaa:	4604      	mov	r4, r0
 800ffac:	e7af      	b.n	800ff0e <uxr_deserialize_ObjectVariant+0x8a>
 800ffae:	f106 0308 	add.w	r3, r6, #8
 800ffb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ffb6:	f106 010c 	add.w	r1, r6, #12
 800ffba:	4628      	mov	r0, r5
 800ffbc:	f7fd f81e 	bl	800cffc <ucdr_deserialize_sequence_uint8_t>
 800ffc0:	4604      	mov	r4, r0
 800ffc2:	e7e4      	b.n	800ff8e <uxr_deserialize_ObjectVariant+0x10a>

0800ffc4 <uxr_deserialize_BaseObjectRequest>:
 800ffc4:	b570      	push	{r4, r5, r6, lr}
 800ffc6:	2202      	movs	r2, #2
 800ffc8:	4605      	mov	r5, r0
 800ffca:	460e      	mov	r6, r1
 800ffcc:	f7fb fb6a 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800ffd0:	2202      	movs	r2, #2
 800ffd2:	4604      	mov	r4, r0
 800ffd4:	18b1      	adds	r1, r6, r2
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	f7fb fb64 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 800ffdc:	4020      	ands	r0, r4
 800ffde:	b2c0      	uxtb	r0, r0
 800ffe0:	bd70      	pop	{r4, r5, r6, pc}
 800ffe2:	bf00      	nop

0800ffe4 <uxr_serialize_ActivityInfoVariant>:
 800ffe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffe8:	460d      	mov	r5, r1
 800ffea:	7809      	ldrb	r1, [r1, #0]
 800ffec:	4606      	mov	r6, r0
 800ffee:	f7fb fc95 	bl	800b91c <ucdr_serialize_uint8_t>
 800fff2:	b130      	cbz	r0, 8010002 <uxr_serialize_ActivityInfoVariant+0x1e>
 800fff4:	782b      	ldrb	r3, [r5, #0]
 800fff6:	2b06      	cmp	r3, #6
 800fff8:	d014      	beq.n	8010024 <uxr_serialize_ActivityInfoVariant+0x40>
 800fffa:	2b0d      	cmp	r3, #13
 800fffc:	d019      	beq.n	8010032 <uxr_serialize_ActivityInfoVariant+0x4e>
 800fffe:	2b05      	cmp	r3, #5
 8010000:	d001      	beq.n	8010006 <uxr_serialize_ActivityInfoVariant+0x22>
 8010002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010006:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801000a:	4630      	mov	r0, r6
 801000c:	f7fc f9ae 	bl	800c36c <ucdr_serialize_int16_t>
 8010010:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8010014:	4604      	mov	r4, r0
 8010016:	4630      	mov	r0, r6
 8010018:	f7fc f8e0 	bl	800c1dc <ucdr_serialize_uint64_t>
 801001c:	4020      	ands	r0, r4
 801001e:	b2c0      	uxtb	r0, r0
 8010020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010024:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010028:	4630      	mov	r0, r6
 801002a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801002e:	f7fc b99d 	b.w	800c36c <ucdr_serialize_int16_t>
 8010032:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010036:	4630      	mov	r0, r6
 8010038:	f7fc f998 	bl	800c36c <ucdr_serialize_int16_t>
 801003c:	68e9      	ldr	r1, [r5, #12]
 801003e:	4681      	mov	r9, r0
 8010040:	4630      	mov	r0, r6
 8010042:	f7fb fe87 	bl	800bd54 <ucdr_serialize_uint32_t>
 8010046:	68eb      	ldr	r3, [r5, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d051      	beq.n	80100f0 <uxr_serialize_ActivityInfoVariant+0x10c>
 801004c:	b1e8      	cbz	r0, 801008a <uxr_serialize_ActivityInfoVariant+0xa6>
 801004e:	f105 0714 	add.w	r7, r5, #20
 8010052:	f04f 0800 	mov.w	r8, #0
 8010056:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 801005a:	4630      	mov	r0, r6
 801005c:	f7fb fc5e 	bl	800b91c <ucdr_serialize_uint8_t>
 8010060:	b198      	cbz	r0, 801008a <uxr_serialize_ActivityInfoVariant+0xa6>
 8010062:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8010066:	2b03      	cmp	r3, #3
 8010068:	d839      	bhi.n	80100de <uxr_serialize_ActivityInfoVariant+0xfa>
 801006a:	e8df f003 	tbb	[pc, r3]
 801006e:	1e2b      	.short	0x1e2b
 8010070:	0211      	.short	0x0211
 8010072:	6839      	ldr	r1, [r7, #0]
 8010074:	4630      	mov	r0, r6
 8010076:	f005 fe2f 	bl	8015cd8 <ucdr_serialize_string>
 801007a:	68eb      	ldr	r3, [r5, #12]
 801007c:	f108 0801 	add.w	r8, r8, #1
 8010080:	4598      	cmp	r8, r3
 8010082:	d231      	bcs.n	80100e8 <uxr_serialize_ActivityInfoVariant+0x104>
 8010084:	3718      	adds	r7, #24
 8010086:	2800      	cmp	r0, #0
 8010088:	d1e5      	bne.n	8010056 <uxr_serialize_ActivityInfoVariant+0x72>
 801008a:	2000      	movs	r0, #0
 801008c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010090:	2210      	movs	r2, #16
 8010092:	4639      	mov	r1, r7
 8010094:	4630      	mov	r0, r6
 8010096:	f7fb faa1 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 801009a:	6939      	ldr	r1, [r7, #16]
 801009c:	4604      	mov	r4, r0
 801009e:	4630      	mov	r0, r6
 80100a0:	f7fb fe58 	bl	800bd54 <ucdr_serialize_uint32_t>
 80100a4:	4020      	ands	r0, r4
 80100a6:	b2c0      	uxtb	r0, r0
 80100a8:	e7e7      	b.n	801007a <uxr_serialize_ActivityInfoVariant+0x96>
 80100aa:	2204      	movs	r2, #4
 80100ac:	4639      	mov	r1, r7
 80100ae:	4630      	mov	r0, r6
 80100b0:	f7fb fa94 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80100b4:	88b9      	ldrh	r1, [r7, #4]
 80100b6:	4604      	mov	r4, r0
 80100b8:	4630      	mov	r0, r6
 80100ba:	f7fb fc5b 	bl	800b974 <ucdr_serialize_uint16_t>
 80100be:	4020      	ands	r0, r4
 80100c0:	b2c0      	uxtb	r0, r0
 80100c2:	e7da      	b.n	801007a <uxr_serialize_ActivityInfoVariant+0x96>
 80100c4:	2202      	movs	r2, #2
 80100c6:	4639      	mov	r1, r7
 80100c8:	4630      	mov	r0, r6
 80100ca:	f7fb fa87 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80100ce:	78b9      	ldrb	r1, [r7, #2]
 80100d0:	4604      	mov	r4, r0
 80100d2:	4630      	mov	r0, r6
 80100d4:	f7fb fc22 	bl	800b91c <ucdr_serialize_uint8_t>
 80100d8:	4020      	ands	r0, r4
 80100da:	b2c0      	uxtb	r0, r0
 80100dc:	e7cd      	b.n	801007a <uxr_serialize_ActivityInfoVariant+0x96>
 80100de:	68eb      	ldr	r3, [r5, #12]
 80100e0:	f108 0801 	add.w	r8, r8, #1
 80100e4:	4598      	cmp	r8, r3
 80100e6:	d308      	bcc.n	80100fa <uxr_serialize_ActivityInfoVariant+0x116>
 80100e8:	ea09 0000 	and.w	r0, r9, r0
 80100ec:	b2c0      	uxtb	r0, r0
 80100ee:	e788      	b.n	8010002 <uxr_serialize_ActivityInfoVariant+0x1e>
 80100f0:	ea09 0900 	and.w	r9, r9, r0
 80100f4:	fa5f f089 	uxtb.w	r0, r9
 80100f8:	e783      	b.n	8010002 <uxr_serialize_ActivityInfoVariant+0x1e>
 80100fa:	3718      	adds	r7, #24
 80100fc:	e7ab      	b.n	8010056 <uxr_serialize_ActivityInfoVariant+0x72>
 80100fe:	bf00      	nop

08010100 <uxr_deserialize_BaseObjectReply>:
 8010100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010104:	2202      	movs	r2, #2
 8010106:	4606      	mov	r6, r0
 8010108:	460f      	mov	r7, r1
 801010a:	f7fb facb 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 801010e:	2202      	movs	r2, #2
 8010110:	18b9      	adds	r1, r7, r2
 8010112:	4605      	mov	r5, r0
 8010114:	4630      	mov	r0, r6
 8010116:	f7fb fac5 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 801011a:	1d39      	adds	r1, r7, #4
 801011c:	4680      	mov	r8, r0
 801011e:	4630      	mov	r0, r6
 8010120:	f7fb fc12 	bl	800b948 <ucdr_deserialize_uint8_t>
 8010124:	1d79      	adds	r1, r7, #5
 8010126:	4604      	mov	r4, r0
 8010128:	4630      	mov	r0, r6
 801012a:	f7fb fc0d 	bl	800b948 <ucdr_deserialize_uint8_t>
 801012e:	ea05 0508 	and.w	r5, r5, r8
 8010132:	402c      	ands	r4, r5
 8010134:	4020      	ands	r0, r4
 8010136:	b2c0      	uxtb	r0, r0
 8010138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801013c <uxr_serialize_ReadSpecification>:
 801013c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010140:	460d      	mov	r5, r1
 8010142:	7809      	ldrb	r1, [r1, #0]
 8010144:	4606      	mov	r6, r0
 8010146:	f7fb fbe9 	bl	800b91c <ucdr_serialize_uint8_t>
 801014a:	7869      	ldrb	r1, [r5, #1]
 801014c:	4604      	mov	r4, r0
 801014e:	4630      	mov	r0, r6
 8010150:	f7fb fbe4 	bl	800b91c <ucdr_serialize_uint8_t>
 8010154:	78a9      	ldrb	r1, [r5, #2]
 8010156:	4004      	ands	r4, r0
 8010158:	4630      	mov	r0, r6
 801015a:	f7fb fbb1 	bl	800b8c0 <ucdr_serialize_bool>
 801015e:	78ab      	ldrb	r3, [r5, #2]
 8010160:	b2e4      	uxtb	r4, r4
 8010162:	4004      	ands	r4, r0
 8010164:	b94b      	cbnz	r3, 801017a <uxr_serialize_ReadSpecification+0x3e>
 8010166:	7a29      	ldrb	r1, [r5, #8]
 8010168:	4630      	mov	r0, r6
 801016a:	f7fb fba9 	bl	800b8c0 <ucdr_serialize_bool>
 801016e:	7a2b      	ldrb	r3, [r5, #8]
 8010170:	4004      	ands	r4, r0
 8010172:	b943      	cbnz	r3, 8010186 <uxr_serialize_ReadSpecification+0x4a>
 8010174:	4620      	mov	r0, r4
 8010176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801017a:	6869      	ldr	r1, [r5, #4]
 801017c:	4630      	mov	r0, r6
 801017e:	f005 fdab 	bl	8015cd8 <ucdr_serialize_string>
 8010182:	4004      	ands	r4, r0
 8010184:	e7ef      	b.n	8010166 <uxr_serialize_ReadSpecification+0x2a>
 8010186:	8969      	ldrh	r1, [r5, #10]
 8010188:	4630      	mov	r0, r6
 801018a:	f7fb fbf3 	bl	800b974 <ucdr_serialize_uint16_t>
 801018e:	89a9      	ldrh	r1, [r5, #12]
 8010190:	4607      	mov	r7, r0
 8010192:	4630      	mov	r0, r6
 8010194:	f7fb fbee 	bl	800b974 <ucdr_serialize_uint16_t>
 8010198:	89e9      	ldrh	r1, [r5, #14]
 801019a:	4007      	ands	r7, r0
 801019c:	4630      	mov	r0, r6
 801019e:	f7fb fbe9 	bl	800b974 <ucdr_serialize_uint16_t>
 80101a2:	8a29      	ldrh	r1, [r5, #16]
 80101a4:	4680      	mov	r8, r0
 80101a6:	4630      	mov	r0, r6
 80101a8:	f7fb fbe4 	bl	800b974 <ucdr_serialize_uint16_t>
 80101ac:	b2ff      	uxtb	r7, r7
 80101ae:	ea04 0507 	and.w	r5, r4, r7
 80101b2:	ea05 0508 	and.w	r5, r5, r8
 80101b6:	ea00 0405 	and.w	r4, r0, r5
 80101ba:	4620      	mov	r0, r4
 80101bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080101c0 <uxr_serialize_CREATE_CLIENT_Payload>:
 80101c0:	f7ff bb28 	b.w	800f814 <uxr_serialize_CLIENT_Representation>

080101c4 <uxr_serialize_CREATE_Payload>:
 80101c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c6:	2202      	movs	r2, #2
 80101c8:	4606      	mov	r6, r0
 80101ca:	460d      	mov	r5, r1
 80101cc:	f7fb fa06 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80101d0:	2202      	movs	r2, #2
 80101d2:	18a9      	adds	r1, r5, r2
 80101d4:	4604      	mov	r4, r0
 80101d6:	4630      	mov	r0, r6
 80101d8:	f7fb fa00 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80101dc:	7929      	ldrb	r1, [r5, #4]
 80101de:	4607      	mov	r7, r0
 80101e0:	4630      	mov	r0, r6
 80101e2:	f7fb fb9b 	bl	800b91c <ucdr_serialize_uint8_t>
 80101e6:	b170      	cbz	r0, 8010206 <uxr_serialize_CREATE_Payload+0x42>
 80101e8:	792b      	ldrb	r3, [r5, #4]
 80101ea:	403c      	ands	r4, r7
 80101ec:	3b01      	subs	r3, #1
 80101ee:	b2e4      	uxtb	r4, r4
 80101f0:	2b0d      	cmp	r3, #13
 80101f2:	d809      	bhi.n	8010208 <uxr_serialize_CREATE_Payload+0x44>
 80101f4:	e8df f003 	tbb	[pc, r3]
 80101f8:	23230a3e 	.word	0x23230a3e
 80101fc:	0a0a0a0a 	.word	0x0a0a0a0a
 8010200:	12121208 	.word	0x12121208
 8010204:	5f58      	.short	0x5f58
 8010206:	2400      	movs	r4, #0
 8010208:	4620      	mov	r0, r4
 801020a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801020c:	f105 0108 	add.w	r1, r5, #8
 8010210:	4630      	mov	r0, r6
 8010212:	f7ff fc07 	bl	800fa24 <uxr_serialize_DATAWRITER_Representation>
 8010216:	4004      	ands	r4, r0
 8010218:	4620      	mov	r0, r4
 801021a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801021c:	7a29      	ldrb	r1, [r5, #8]
 801021e:	4630      	mov	r0, r6
 8010220:	f7fb fb7c 	bl	800b91c <ucdr_serialize_uint8_t>
 8010224:	2800      	cmp	r0, #0
 8010226:	d0ee      	beq.n	8010206 <uxr_serialize_CREATE_Payload+0x42>
 8010228:	7a2b      	ldrb	r3, [r5, #8]
 801022a:	2b01      	cmp	r3, #1
 801022c:	d001      	beq.n	8010232 <uxr_serialize_CREATE_Payload+0x6e>
 801022e:	2b02      	cmp	r3, #2
 8010230:	d1ea      	bne.n	8010208 <uxr_serialize_CREATE_Payload+0x44>
 8010232:	68e9      	ldr	r1, [r5, #12]
 8010234:	4630      	mov	r0, r6
 8010236:	f005 fd4f 	bl	8015cd8 <ucdr_serialize_string>
 801023a:	4004      	ands	r4, r0
 801023c:	e7e4      	b.n	8010208 <uxr_serialize_CREATE_Payload+0x44>
 801023e:	7a29      	ldrb	r1, [r5, #8]
 8010240:	4630      	mov	r0, r6
 8010242:	f7fb fb6b 	bl	800b91c <ucdr_serialize_uint8_t>
 8010246:	4607      	mov	r7, r0
 8010248:	b158      	cbz	r0, 8010262 <uxr_serialize_CREATE_Payload+0x9e>
 801024a:	7a2b      	ldrb	r3, [r5, #8]
 801024c:	2b02      	cmp	r3, #2
 801024e:	d039      	beq.n	80102c4 <uxr_serialize_CREATE_Payload+0x100>
 8010250:	2b03      	cmp	r3, #3
 8010252:	d106      	bne.n	8010262 <uxr_serialize_CREATE_Payload+0x9e>
 8010254:	68ea      	ldr	r2, [r5, #12]
 8010256:	f105 0110 	add.w	r1, r5, #16
 801025a:	4630      	mov	r0, r6
 801025c:	f7fc febc 	bl	800cfd8 <ucdr_serialize_sequence_uint8_t>
 8010260:	4607      	mov	r7, r0
 8010262:	2202      	movs	r2, #2
 8010264:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8010268:	4630      	mov	r0, r6
 801026a:	f7fb f9b7 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 801026e:	4038      	ands	r0, r7
 8010270:	4004      	ands	r4, r0
 8010272:	e7c9      	b.n	8010208 <uxr_serialize_CREATE_Payload+0x44>
 8010274:	7a29      	ldrb	r1, [r5, #8]
 8010276:	4630      	mov	r0, r6
 8010278:	f7fb fb50 	bl	800b91c <ucdr_serialize_uint8_t>
 801027c:	4607      	mov	r7, r0
 801027e:	b158      	cbz	r0, 8010298 <uxr_serialize_CREATE_Payload+0xd4>
 8010280:	7a2b      	ldrb	r3, [r5, #8]
 8010282:	2b02      	cmp	r3, #2
 8010284:	d003      	beq.n	801028e <uxr_serialize_CREATE_Payload+0xca>
 8010286:	2b03      	cmp	r3, #3
 8010288:	d022      	beq.n	80102d0 <uxr_serialize_CREATE_Payload+0x10c>
 801028a:	2b01      	cmp	r3, #1
 801028c:	d104      	bne.n	8010298 <uxr_serialize_CREATE_Payload+0xd4>
 801028e:	68e9      	ldr	r1, [r5, #12]
 8010290:	4630      	mov	r0, r6
 8010292:	f005 fd21 	bl	8015cd8 <ucdr_serialize_string>
 8010296:	4607      	mov	r7, r0
 8010298:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 801029c:	4630      	mov	r0, r6
 801029e:	f7fc f865 	bl	800c36c <ucdr_serialize_int16_t>
 80102a2:	4038      	ands	r0, r7
 80102a4:	4004      	ands	r4, r0
 80102a6:	e7af      	b.n	8010208 <uxr_serialize_CREATE_Payload+0x44>
 80102a8:	f105 0108 	add.w	r1, r5, #8
 80102ac:	4630      	mov	r0, r6
 80102ae:	f7ff fb6f 	bl	800f990 <uxr_serialize_AGENT_Representation>
 80102b2:	4004      	ands	r4, r0
 80102b4:	e7a8      	b.n	8010208 <uxr_serialize_CREATE_Payload+0x44>
 80102b6:	f105 0108 	add.w	r1, r5, #8
 80102ba:	4630      	mov	r0, r6
 80102bc:	f7ff faaa 	bl	800f814 <uxr_serialize_CLIENT_Representation>
 80102c0:	4004      	ands	r4, r0
 80102c2:	e7a1      	b.n	8010208 <uxr_serialize_CREATE_Payload+0x44>
 80102c4:	68e9      	ldr	r1, [r5, #12]
 80102c6:	4630      	mov	r0, r6
 80102c8:	f005 fd06 	bl	8015cd8 <ucdr_serialize_string>
 80102cc:	4607      	mov	r7, r0
 80102ce:	e7c8      	b.n	8010262 <uxr_serialize_CREATE_Payload+0x9e>
 80102d0:	68ea      	ldr	r2, [r5, #12]
 80102d2:	f105 0110 	add.w	r1, r5, #16
 80102d6:	4630      	mov	r0, r6
 80102d8:	f7fc fe7e 	bl	800cfd8 <ucdr_serialize_sequence_uint8_t>
 80102dc:	4607      	mov	r7, r0
 80102de:	e7db      	b.n	8010298 <uxr_serialize_CREATE_Payload+0xd4>

080102e0 <uxr_serialize_GET_INFO_Payload>:
 80102e0:	b570      	push	{r4, r5, r6, lr}
 80102e2:	2202      	movs	r2, #2
 80102e4:	4605      	mov	r5, r0
 80102e6:	460e      	mov	r6, r1
 80102e8:	f7fb f978 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80102ec:	2202      	movs	r2, #2
 80102ee:	18b1      	adds	r1, r6, r2
 80102f0:	4604      	mov	r4, r0
 80102f2:	4628      	mov	r0, r5
 80102f4:	f7fb f972 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80102f8:	6871      	ldr	r1, [r6, #4]
 80102fa:	4004      	ands	r4, r0
 80102fc:	4628      	mov	r0, r5
 80102fe:	f7fb fd29 	bl	800bd54 <ucdr_serialize_uint32_t>
 8010302:	b2e4      	uxtb	r4, r4
 8010304:	4020      	ands	r0, r4
 8010306:	bd70      	pop	{r4, r5, r6, pc}

08010308 <uxr_deserialize_GET_INFO_Payload>:
 8010308:	b570      	push	{r4, r5, r6, lr}
 801030a:	2202      	movs	r2, #2
 801030c:	4605      	mov	r5, r0
 801030e:	460e      	mov	r6, r1
 8010310:	f7fb f9c8 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 8010314:	2202      	movs	r2, #2
 8010316:	18b1      	adds	r1, r6, r2
 8010318:	4604      	mov	r4, r0
 801031a:	4628      	mov	r0, r5
 801031c:	f7fb f9c2 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 8010320:	1d31      	adds	r1, r6, #4
 8010322:	4004      	ands	r4, r0
 8010324:	4628      	mov	r0, r5
 8010326:	f7fb fe3f 	bl	800bfa8 <ucdr_deserialize_uint32_t>
 801032a:	b2e4      	uxtb	r4, r4
 801032c:	4020      	ands	r0, r4
 801032e:	bd70      	pop	{r4, r5, r6, pc}

08010330 <uxr_serialize_DELETE_Payload>:
 8010330:	b570      	push	{r4, r5, r6, lr}
 8010332:	2202      	movs	r2, #2
 8010334:	4605      	mov	r5, r0
 8010336:	460e      	mov	r6, r1
 8010338:	f7fb f950 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 801033c:	2202      	movs	r2, #2
 801033e:	4604      	mov	r4, r0
 8010340:	18b1      	adds	r1, r6, r2
 8010342:	4628      	mov	r0, r5
 8010344:	f7fb f94a 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 8010348:	4020      	ands	r0, r4
 801034a:	b2c0      	uxtb	r0, r0
 801034c:	bd70      	pop	{r4, r5, r6, pc}
 801034e:	bf00      	nop

08010350 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010354:	4605      	mov	r5, r0
 8010356:	460e      	mov	r6, r1
 8010358:	f7fb faf6 	bl	800b948 <ucdr_deserialize_uint8_t>
 801035c:	1c71      	adds	r1, r6, #1
 801035e:	4604      	mov	r4, r0
 8010360:	4628      	mov	r0, r5
 8010362:	f7fb faf1 	bl	800b948 <ucdr_deserialize_uint8_t>
 8010366:	2204      	movs	r2, #4
 8010368:	18b1      	adds	r1, r6, r2
 801036a:	4681      	mov	r9, r0
 801036c:	4628      	mov	r0, r5
 801036e:	f7fb f999 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 8010372:	f106 0108 	add.w	r1, r6, #8
 8010376:	4680      	mov	r8, r0
 8010378:	2202      	movs	r2, #2
 801037a:	4628      	mov	r0, r5
 801037c:	f7fb f992 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 8010380:	2202      	movs	r2, #2
 8010382:	f106 010a 	add.w	r1, r6, #10
 8010386:	4607      	mov	r7, r0
 8010388:	4628      	mov	r0, r5
 801038a:	f7fb f98b 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 801038e:	ea04 0409 	and.w	r4, r4, r9
 8010392:	4603      	mov	r3, r0
 8010394:	f106 010c 	add.w	r1, r6, #12
 8010398:	4628      	mov	r0, r5
 801039a:	b2e4      	uxtb	r4, r4
 801039c:	461d      	mov	r5, r3
 801039e:	ea04 0408 	and.w	r4, r4, r8
 80103a2:	f7fb faa3 	bl	800b8ec <ucdr_deserialize_bool>
 80103a6:	4027      	ands	r7, r4
 80103a8:	403d      	ands	r5, r7
 80103aa:	4028      	ands	r0, r5
 80103ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080103b0 <uxr_deserialize_STATUS_Payload>:
 80103b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b4:	2202      	movs	r2, #2
 80103b6:	4606      	mov	r6, r0
 80103b8:	460f      	mov	r7, r1
 80103ba:	f7fb f973 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 80103be:	2202      	movs	r2, #2
 80103c0:	18b9      	adds	r1, r7, r2
 80103c2:	4605      	mov	r5, r0
 80103c4:	4630      	mov	r0, r6
 80103c6:	f7fb f96d 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 80103ca:	1d39      	adds	r1, r7, #4
 80103cc:	4680      	mov	r8, r0
 80103ce:	4630      	mov	r0, r6
 80103d0:	f7fb faba 	bl	800b948 <ucdr_deserialize_uint8_t>
 80103d4:	1d79      	adds	r1, r7, #5
 80103d6:	4604      	mov	r4, r0
 80103d8:	4630      	mov	r0, r6
 80103da:	f7fb fab5 	bl	800b948 <ucdr_deserialize_uint8_t>
 80103de:	ea05 0508 	and.w	r5, r5, r8
 80103e2:	402c      	ands	r4, r5
 80103e4:	4020      	ands	r0, r4
 80103e6:	b2c0      	uxtb	r0, r0
 80103e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080103ec <uxr_serialize_INFO_Payload>:
 80103ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103f0:	2202      	movs	r2, #2
 80103f2:	460c      	mov	r4, r1
 80103f4:	4605      	mov	r5, r0
 80103f6:	f7fb f8f1 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80103fa:	2202      	movs	r2, #2
 80103fc:	18a1      	adds	r1, r4, r2
 80103fe:	4680      	mov	r8, r0
 8010400:	4628      	mov	r0, r5
 8010402:	f7fb f8eb 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 8010406:	7921      	ldrb	r1, [r4, #4]
 8010408:	4607      	mov	r7, r0
 801040a:	4628      	mov	r0, r5
 801040c:	f7fb fa86 	bl	800b91c <ucdr_serialize_uint8_t>
 8010410:	7961      	ldrb	r1, [r4, #5]
 8010412:	4606      	mov	r6, r0
 8010414:	4628      	mov	r0, r5
 8010416:	f7fb fa81 	bl	800b91c <ucdr_serialize_uint8_t>
 801041a:	ea08 0807 	and.w	r8, r8, r7
 801041e:	ea06 0608 	and.w	r6, r6, r8
 8010422:	ea00 0706 	and.w	r7, r0, r6
 8010426:	7a21      	ldrb	r1, [r4, #8]
 8010428:	4628      	mov	r0, r5
 801042a:	f7fb fa49 	bl	800b8c0 <ucdr_serialize_bool>
 801042e:	7a23      	ldrb	r3, [r4, #8]
 8010430:	b2ff      	uxtb	r7, r7
 8010432:	4606      	mov	r6, r0
 8010434:	b96b      	cbnz	r3, 8010452 <uxr_serialize_INFO_Payload+0x66>
 8010436:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801043a:	4628      	mov	r0, r5
 801043c:	f7fb fa40 	bl	800b8c0 <ucdr_serialize_bool>
 8010440:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8010444:	4030      	ands	r0, r6
 8010446:	b2c6      	uxtb	r6, r0
 8010448:	b983      	cbnz	r3, 801046c <uxr_serialize_INFO_Payload+0x80>
 801044a:	ea06 0007 	and.w	r0, r6, r7
 801044e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010452:	7b21      	ldrb	r1, [r4, #12]
 8010454:	4628      	mov	r0, r5
 8010456:	f7fb fa61 	bl	800b91c <ucdr_serialize_uint8_t>
 801045a:	b188      	cbz	r0, 8010480 <uxr_serialize_INFO_Payload+0x94>
 801045c:	f104 010c 	add.w	r1, r4, #12
 8010460:	4628      	mov	r0, r5
 8010462:	f7ff fb07 	bl	800fa74 <uxr_serialize_ObjectVariant.part.0>
 8010466:	4030      	ands	r0, r6
 8010468:	b2c6      	uxtb	r6, r0
 801046a:	e7e4      	b.n	8010436 <uxr_serialize_INFO_Payload+0x4a>
 801046c:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8010470:	4628      	mov	r0, r5
 8010472:	f7ff fdb7 	bl	800ffe4 <uxr_serialize_ActivityInfoVariant>
 8010476:	4006      	ands	r6, r0
 8010478:	ea06 0007 	and.w	r0, r6, r7
 801047c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010480:	4606      	mov	r6, r0
 8010482:	e7d8      	b.n	8010436 <uxr_serialize_INFO_Payload+0x4a>

08010484 <uxr_serialize_READ_DATA_Payload>:
 8010484:	b570      	push	{r4, r5, r6, lr}
 8010486:	2202      	movs	r2, #2
 8010488:	4605      	mov	r5, r0
 801048a:	460e      	mov	r6, r1
 801048c:	f7fb f8a6 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 8010490:	2202      	movs	r2, #2
 8010492:	18b1      	adds	r1, r6, r2
 8010494:	4604      	mov	r4, r0
 8010496:	4628      	mov	r0, r5
 8010498:	f7fb f8a0 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 801049c:	1d31      	adds	r1, r6, #4
 801049e:	4004      	ands	r4, r0
 80104a0:	4628      	mov	r0, r5
 80104a2:	f7ff fe4b 	bl	801013c <uxr_serialize_ReadSpecification>
 80104a6:	b2e4      	uxtb	r4, r4
 80104a8:	4020      	ands	r0, r4
 80104aa:	bd70      	pop	{r4, r5, r6, pc}

080104ac <uxr_serialize_WRITE_DATA_Payload_Data>:
 80104ac:	b570      	push	{r4, r5, r6, lr}
 80104ae:	2202      	movs	r2, #2
 80104b0:	4605      	mov	r5, r0
 80104b2:	460e      	mov	r6, r1
 80104b4:	f7fb f892 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80104b8:	2202      	movs	r2, #2
 80104ba:	4604      	mov	r4, r0
 80104bc:	18b1      	adds	r1, r6, r2
 80104be:	4628      	mov	r0, r5
 80104c0:	f7fb f88c 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80104c4:	4020      	ands	r0, r4
 80104c6:	b2c0      	uxtb	r0, r0
 80104c8:	bd70      	pop	{r4, r5, r6, pc}
 80104ca:	bf00      	nop

080104cc <uxr_serialize_ACKNACK_Payload>:
 80104cc:	b570      	push	{r4, r5, r6, lr}
 80104ce:	460c      	mov	r4, r1
 80104d0:	460e      	mov	r6, r1
 80104d2:	f834 1b02 	ldrh.w	r1, [r4], #2
 80104d6:	4605      	mov	r5, r0
 80104d8:	f7fb fa4c 	bl	800b974 <ucdr_serialize_uint16_t>
 80104dc:	2202      	movs	r2, #2
 80104de:	4621      	mov	r1, r4
 80104e0:	4604      	mov	r4, r0
 80104e2:	4628      	mov	r0, r5
 80104e4:	f7fb f87a 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80104e8:	7931      	ldrb	r1, [r6, #4]
 80104ea:	4004      	ands	r4, r0
 80104ec:	4628      	mov	r0, r5
 80104ee:	f7fb fa15 	bl	800b91c <ucdr_serialize_uint8_t>
 80104f2:	b2e4      	uxtb	r4, r4
 80104f4:	4020      	ands	r0, r4
 80104f6:	bd70      	pop	{r4, r5, r6, pc}

080104f8 <uxr_deserialize_ACKNACK_Payload>:
 80104f8:	b570      	push	{r4, r5, r6, lr}
 80104fa:	4605      	mov	r5, r0
 80104fc:	460e      	mov	r6, r1
 80104fe:	f7fb fb3d 	bl	800bb7c <ucdr_deserialize_uint16_t>
 8010502:	2202      	movs	r2, #2
 8010504:	18b1      	adds	r1, r6, r2
 8010506:	4604      	mov	r4, r0
 8010508:	4628      	mov	r0, r5
 801050a:	f7fb f8cb 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 801050e:	1d31      	adds	r1, r6, #4
 8010510:	4004      	ands	r4, r0
 8010512:	4628      	mov	r0, r5
 8010514:	f7fb fa18 	bl	800b948 <ucdr_deserialize_uint8_t>
 8010518:	b2e4      	uxtb	r4, r4
 801051a:	4020      	ands	r0, r4
 801051c:	bd70      	pop	{r4, r5, r6, pc}
 801051e:	bf00      	nop

08010520 <uxr_serialize_HEARTBEAT_Payload>:
 8010520:	b570      	push	{r4, r5, r6, lr}
 8010522:	460d      	mov	r5, r1
 8010524:	8809      	ldrh	r1, [r1, #0]
 8010526:	4606      	mov	r6, r0
 8010528:	f7fb fa24 	bl	800b974 <ucdr_serialize_uint16_t>
 801052c:	8869      	ldrh	r1, [r5, #2]
 801052e:	4604      	mov	r4, r0
 8010530:	4630      	mov	r0, r6
 8010532:	f7fb fa1f 	bl	800b974 <ucdr_serialize_uint16_t>
 8010536:	7929      	ldrb	r1, [r5, #4]
 8010538:	4004      	ands	r4, r0
 801053a:	4630      	mov	r0, r6
 801053c:	f7fb f9ee 	bl	800b91c <ucdr_serialize_uint8_t>
 8010540:	b2e4      	uxtb	r4, r4
 8010542:	4020      	ands	r0, r4
 8010544:	bd70      	pop	{r4, r5, r6, pc}
 8010546:	bf00      	nop

08010548 <uxr_deserialize_HEARTBEAT_Payload>:
 8010548:	b570      	push	{r4, r5, r6, lr}
 801054a:	4605      	mov	r5, r0
 801054c:	460e      	mov	r6, r1
 801054e:	f7fb fb15 	bl	800bb7c <ucdr_deserialize_uint16_t>
 8010552:	1cb1      	adds	r1, r6, #2
 8010554:	4604      	mov	r4, r0
 8010556:	4628      	mov	r0, r5
 8010558:	f7fb fb10 	bl	800bb7c <ucdr_deserialize_uint16_t>
 801055c:	1d31      	adds	r1, r6, #4
 801055e:	4004      	ands	r4, r0
 8010560:	4628      	mov	r0, r5
 8010562:	f7fb f9f1 	bl	800b948 <ucdr_deserialize_uint8_t>
 8010566:	b2e4      	uxtb	r4, r4
 8010568:	4020      	ands	r0, r4
 801056a:	bd70      	pop	{r4, r5, r6, pc}

0801056c <uxr_serialize_TIMESTAMP_Payload>:
 801056c:	b570      	push	{r4, r5, r6, lr}
 801056e:	460d      	mov	r5, r1
 8010570:	6809      	ldr	r1, [r1, #0]
 8010572:	4606      	mov	r6, r0
 8010574:	f7fc f800 	bl	800c578 <ucdr_serialize_int32_t>
 8010578:	6869      	ldr	r1, [r5, #4]
 801057a:	4604      	mov	r4, r0
 801057c:	4630      	mov	r0, r6
 801057e:	f7fb fbe9 	bl	800bd54 <ucdr_serialize_uint32_t>
 8010582:	4020      	ands	r0, r4
 8010584:	b2c0      	uxtb	r0, r0
 8010586:	bd70      	pop	{r4, r5, r6, pc}

08010588 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801058c:	4605      	mov	r5, r0
 801058e:	460e      	mov	r6, r1
 8010590:	f7fc f88c 	bl	800c6ac <ucdr_deserialize_int32_t>
 8010594:	1d31      	adds	r1, r6, #4
 8010596:	4607      	mov	r7, r0
 8010598:	4628      	mov	r0, r5
 801059a:	f7fb fd05 	bl	800bfa8 <ucdr_deserialize_uint32_t>
 801059e:	f106 0108 	add.w	r1, r6, #8
 80105a2:	4680      	mov	r8, r0
 80105a4:	4628      	mov	r0, r5
 80105a6:	f7fc f881 	bl	800c6ac <ucdr_deserialize_int32_t>
 80105aa:	f106 010c 	add.w	r1, r6, #12
 80105ae:	4604      	mov	r4, r0
 80105b0:	4628      	mov	r0, r5
 80105b2:	f7fb fcf9 	bl	800bfa8 <ucdr_deserialize_uint32_t>
 80105b6:	ea07 0708 	and.w	r7, r7, r8
 80105ba:	403c      	ands	r4, r7
 80105bc:	f106 0110 	add.w	r1, r6, #16
 80105c0:	4004      	ands	r4, r0
 80105c2:	4628      	mov	r0, r5
 80105c4:	f7fc f872 	bl	800c6ac <ucdr_deserialize_int32_t>
 80105c8:	f106 0114 	add.w	r1, r6, #20
 80105cc:	4607      	mov	r7, r0
 80105ce:	4628      	mov	r0, r5
 80105d0:	f7fb fcea 	bl	800bfa8 <ucdr_deserialize_uint32_t>
 80105d4:	b2e4      	uxtb	r4, r4
 80105d6:	403c      	ands	r4, r7
 80105d8:	4020      	ands	r0, r4
 80105da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105de:	bf00      	nop

080105e0 <uxr_serialize_SampleIdentity>:
 80105e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105e4:	220c      	movs	r2, #12
 80105e6:	4604      	mov	r4, r0
 80105e8:	460d      	mov	r5, r1
 80105ea:	f7fa fff7 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80105ee:	2203      	movs	r2, #3
 80105f0:	f105 010c 	add.w	r1, r5, #12
 80105f4:	4680      	mov	r8, r0
 80105f6:	4620      	mov	r0, r4
 80105f8:	f7fa fff0 	bl	800b5dc <ucdr_serialize_array_uint8_t>
 80105fc:	7be9      	ldrb	r1, [r5, #15]
 80105fe:	4681      	mov	r9, r0
 8010600:	4620      	mov	r0, r4
 8010602:	f7fb f98b 	bl	800b91c <ucdr_serialize_uint8_t>
 8010606:	6929      	ldr	r1, [r5, #16]
 8010608:	4607      	mov	r7, r0
 801060a:	4620      	mov	r0, r4
 801060c:	f7fb ffb4 	bl	800c578 <ucdr_serialize_int32_t>
 8010610:	6969      	ldr	r1, [r5, #20]
 8010612:	4606      	mov	r6, r0
 8010614:	4620      	mov	r0, r4
 8010616:	f7fb fb9d 	bl	800bd54 <ucdr_serialize_uint32_t>
 801061a:	ea08 0809 	and.w	r8, r8, r9
 801061e:	ea07 0708 	and.w	r7, r7, r8
 8010622:	403e      	ands	r6, r7
 8010624:	4030      	ands	r0, r6
 8010626:	b2c0      	uxtb	r0, r0
 8010628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801062c <uxr_deserialize_SampleIdentity>:
 801062c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010630:	220c      	movs	r2, #12
 8010632:	4604      	mov	r4, r0
 8010634:	460d      	mov	r5, r1
 8010636:	f7fb f835 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 801063a:	2203      	movs	r2, #3
 801063c:	f105 010c 	add.w	r1, r5, #12
 8010640:	4680      	mov	r8, r0
 8010642:	4620      	mov	r0, r4
 8010644:	f7fb f82e 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 8010648:	f105 010f 	add.w	r1, r5, #15
 801064c:	4681      	mov	r9, r0
 801064e:	4620      	mov	r0, r4
 8010650:	f7fb f97a 	bl	800b948 <ucdr_deserialize_uint8_t>
 8010654:	f105 0110 	add.w	r1, r5, #16
 8010658:	4607      	mov	r7, r0
 801065a:	4620      	mov	r0, r4
 801065c:	f7fc f826 	bl	800c6ac <ucdr_deserialize_int32_t>
 8010660:	f105 0114 	add.w	r1, r5, #20
 8010664:	4606      	mov	r6, r0
 8010666:	4620      	mov	r0, r4
 8010668:	f7fb fc9e 	bl	800bfa8 <ucdr_deserialize_uint32_t>
 801066c:	ea08 0809 	and.w	r8, r8, r9
 8010670:	ea07 0708 	and.w	r7, r7, r8
 8010674:	403e      	ands	r6, r7
 8010676:	4030      	ands	r0, r6
 8010678:	b2c0      	uxtb	r0, r0
 801067a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801067e:	bf00      	nop

08010680 <nav_msgs__msg__Odometry__get_type_hash>:
 8010680:	4800      	ldr	r0, [pc, #0]	@ (8010684 <nav_msgs__msg__Odometry__get_type_hash+0x4>)
 8010682:	4770      	bx	lr
 8010684:	2000049c 	.word	0x2000049c

08010688 <nav_msgs__msg__Odometry__get_type_description>:
 8010688:	b570      	push	{r4, r5, r6, lr}
 801068a:	4e2c      	ldr	r6, [pc, #176]	@ (801073c <nav_msgs__msg__Odometry__get_type_description+0xb4>)
 801068c:	7835      	ldrb	r5, [r6, #0]
 801068e:	b10d      	cbz	r5, 8010694 <nav_msgs__msg__Odometry__get_type_description+0xc>
 8010690:	482b      	ldr	r0, [pc, #172]	@ (8010740 <nav_msgs__msg__Odometry__get_type_description+0xb8>)
 8010692:	bd70      	pop	{r4, r5, r6, pc}
 8010694:	4628      	mov	r0, r5
 8010696:	f004 fe35 	bl	8015304 <builtin_interfaces__msg__Time__get_type_description>
 801069a:	300c      	adds	r0, #12
 801069c:	c807      	ldmia	r0, {r0, r1, r2}
 801069e:	4c29      	ldr	r4, [pc, #164]	@ (8010744 <nav_msgs__msg__Odometry__get_type_description+0xbc>)
 80106a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80106a4:	4628      	mov	r0, r5
 80106a6:	f004 fe63 	bl	8015370 <geometry_msgs__msg__Point__get_type_description>
 80106aa:	300c      	adds	r0, #12
 80106ac:	c807      	ldmia	r0, {r0, r1, r2}
 80106ae:	f104 0318 	add.w	r3, r4, #24
 80106b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106b6:	4628      	mov	r0, r5
 80106b8:	f004 fe8a 	bl	80153d0 <geometry_msgs__msg__Pose__get_type_description>
 80106bc:	300c      	adds	r0, #12
 80106be:	c807      	ldmia	r0, {r0, r1, r2}
 80106c0:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80106c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106c8:	4628      	mov	r0, r5
 80106ca:	f004 fee1 	bl	8015490 <geometry_msgs__msg__PoseWithCovariance__get_type_description>
 80106ce:	300c      	adds	r0, #12
 80106d0:	c807      	ldmia	r0, {r0, r1, r2}
 80106d2:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80106d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106da:	4628      	mov	r0, r5
 80106dc:	f004 ff62 	bl	80155a4 <geometry_msgs__msg__Quaternion__get_type_description>
 80106e0:	300c      	adds	r0, #12
 80106e2:	c807      	ldmia	r0, {r0, r1, r2}
 80106e4:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 80106e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106ec:	4628      	mov	r0, r5
 80106ee:	f004 ff89 	bl	8015604 <geometry_msgs__msg__Twist__get_type_description>
 80106f2:	300c      	adds	r0, #12
 80106f4:	c807      	ldmia	r0, {r0, r1, r2}
 80106f6:	f104 0378 	add.w	r3, r4, #120	@ 0x78
 80106fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80106fe:	4628      	mov	r0, r5
 8010700:	f004 ffc8 	bl	8015694 <geometry_msgs__msg__TwistWithCovariance__get_type_description>
 8010704:	300c      	adds	r0, #12
 8010706:	c807      	ldmia	r0, {r0, r1, r2}
 8010708:	f104 0390 	add.w	r3, r4, #144	@ 0x90
 801070c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010710:	4628      	mov	r0, r5
 8010712:	f005 f831 	bl	8015778 <geometry_msgs__msg__Vector3__get_type_description>
 8010716:	300c      	adds	r0, #12
 8010718:	c807      	ldmia	r0, {r0, r1, r2}
 801071a:	f104 03a8 	add.w	r3, r4, #168	@ 0xa8
 801071e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010722:	4628      	mov	r0, r5
 8010724:	f004 fd7a 	bl	801521c <std_msgs__msg__Header__get_type_description>
 8010728:	300c      	adds	r0, #12
 801072a:	c807      	ldmia	r0, {r0, r1, r2}
 801072c:	34c0      	adds	r4, #192	@ 0xc0
 801072e:	2301      	movs	r3, #1
 8010730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010734:	7033      	strb	r3, [r6, #0]
 8010736:	4802      	ldr	r0, [pc, #8]	@ (8010740 <nav_msgs__msg__Odometry__get_type_description+0xb8>)
 8010738:	bd70      	pop	{r4, r5, r6, pc}
 801073a:	bf00      	nop
 801073c:	200101ed 	.word	0x200101ed
 8010740:	0801a9b8 	.word	0x0801a9b8
 8010744:	20000758 	.word	0x20000758

08010748 <nav_msgs__msg__Odometry__get_type_description_sources>:
 8010748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801074a:	4d4c      	ldr	r5, [pc, #304]	@ (801087c <nav_msgs__msg__Odometry__get_type_description_sources+0x134>)
 801074c:	782e      	ldrb	r6, [r5, #0]
 801074e:	b10e      	cbz	r6, 8010754 <nav_msgs__msg__Odometry__get_type_description_sources+0xc>
 8010750:	484b      	ldr	r0, [pc, #300]	@ (8010880 <nav_msgs__msg__Odometry__get_type_description_sources+0x138>)
 8010752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010754:	4f4b      	ldr	r7, [pc, #300]	@ (8010884 <nav_msgs__msg__Odometry__get_type_description_sources+0x13c>)
 8010756:	4c4c      	ldr	r4, [pc, #304]	@ (8010888 <nav_msgs__msg__Odometry__get_type_description_sources+0x140>)
 8010758:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801075a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801075c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801075e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	4627      	mov	r7, r4
 8010764:	4630      	mov	r0, r6
 8010766:	f847 3b04 	str.w	r3, [r7], #4
 801076a:	f004 fdd7 	bl	801531c <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801076e:	4684      	mov	ip, r0
 8010770:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010774:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010776:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801077a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801077c:	4630      	mov	r0, r6
 801077e:	f8dc 3000 	ldr.w	r3, [ip]
 8010782:	603b      	str	r3, [r7, #0]
 8010784:	f004 fe00 	bl	8015388 <geometry_msgs__msg__Point__get_individual_type_description_source>
 8010788:	4684      	mov	ip, r0
 801078a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801078e:	f104 0728 	add.w	r7, r4, #40	@ 0x28
 8010792:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010794:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010798:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801079a:	4630      	mov	r0, r6
 801079c:	f8dc 3000 	ldr.w	r3, [ip]
 80107a0:	603b      	str	r3, [r7, #0]
 80107a2:	f004 fe35 	bl	8015410 <geometry_msgs__msg__Pose__get_individual_type_description_source>
 80107a6:	4684      	mov	ip, r0
 80107a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107ac:	f104 074c 	add.w	r7, r4, #76	@ 0x4c
 80107b0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80107b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107b6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80107b8:	4630      	mov	r0, r6
 80107ba:	f8dc 3000 	ldr.w	r3, [ip]
 80107be:	603b      	str	r3, [r7, #0]
 80107c0:	f004 fe90 	bl	80154e4 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>
 80107c4:	4684      	mov	ip, r0
 80107c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107ca:	f104 0770 	add.w	r7, r4, #112	@ 0x70
 80107ce:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80107d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80107d6:	4630      	mov	r0, r6
 80107d8:	f8dc 3000 	ldr.w	r3, [ip]
 80107dc:	603b      	str	r3, [r7, #0]
 80107de:	f004 feed 	bl	80155bc <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 80107e2:	4684      	mov	ip, r0
 80107e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107e8:	f104 0794 	add.w	r7, r4, #148	@ 0x94
 80107ec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80107ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80107f2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80107f4:	4630      	mov	r0, r6
 80107f6:	f8dc 3000 	ldr.w	r3, [ip]
 80107fa:	603b      	str	r3, [r7, #0]
 80107fc:	f004 ff1a 	bl	8015634 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 8010800:	4684      	mov	ip, r0
 8010802:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010806:	f104 07b8 	add.w	r7, r4, #184	@ 0xb8
 801080a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801080c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010810:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010812:	4630      	mov	r0, r6
 8010814:	f8dc 3000 	ldr.w	r3, [ip]
 8010818:	603b      	str	r3, [r7, #0]
 801081a:	f004 ff5b 	bl	80156d4 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>
 801081e:	4684      	mov	ip, r0
 8010820:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010824:	f104 07dc 	add.w	r7, r4, #220	@ 0xdc
 8010828:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801082a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801082e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010830:	4630      	mov	r0, r6
 8010832:	f8dc 3000 	ldr.w	r3, [ip]
 8010836:	603b      	str	r3, [r7, #0]
 8010838:	f004 ffaa 	bl	8015790 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801083c:	4684      	mov	ip, r0
 801083e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010842:	f504 7780 	add.w	r7, r4, #256	@ 0x100
 8010846:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8010848:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801084c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801084e:	4630      	mov	r0, r6
 8010850:	f8dc 3000 	ldr.w	r3, [ip]
 8010854:	603b      	str	r3, [r7, #0]
 8010856:	f004 fcf9 	bl	801524c <std_msgs__msg__Header__get_individual_type_description_source>
 801085a:	2301      	movs	r3, #1
 801085c:	4684      	mov	ip, r0
 801085e:	702b      	strb	r3, [r5, #0]
 8010860:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010864:	f504 7492 	add.w	r4, r4, #292	@ 0x124
 8010868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801086a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801086e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010870:	f8dc 3000 	ldr.w	r3, [ip]
 8010874:	4802      	ldr	r0, [pc, #8]	@ (8010880 <nav_msgs__msg__Odometry__get_type_description_sources+0x138>)
 8010876:	6023      	str	r3, [r4, #0]
 8010878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801087a:	bf00      	nop
 801087c:	200101ec 	.word	0x200101ec
 8010880:	0801a988 	.word	0x0801a988
 8010884:	0801a994 	.word	0x0801a994
 8010888:	20010084 	.word	0x20010084

0801088c <nav_msgs__msg__Odometry__init>:
 801088c:	b3d8      	cbz	r0, 8010906 <nav_msgs__msg__Odometry__init+0x7a>
 801088e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010890:	4604      	mov	r4, r0
 8010892:	f004 fd07 	bl	80152a4 <std_msgs__msg__Header__init>
 8010896:	b190      	cbz	r0, 80108be <nav_msgs__msg__Odometry__init+0x32>
 8010898:	f104 0514 	add.w	r5, r4, #20
 801089c:	4628      	mov	r0, r5
 801089e:	f7fa fb09 	bl	800aeb4 <rosidl_runtime_c__String__init>
 80108a2:	b358      	cbz	r0, 80108fc <nav_msgs__msg__Odometry__init+0x70>
 80108a4:	f104 0620 	add.w	r6, r4, #32
 80108a8:	4630      	mov	r0, r6
 80108aa:	f004 fe65 	bl	8015578 <geometry_msgs__msg__PoseWithCovariance__init>
 80108ae:	b1b8      	cbz	r0, 80108e0 <nav_msgs__msg__Odometry__init+0x54>
 80108b0:	f504 77bc 	add.w	r7, r4, #376	@ 0x178
 80108b4:	4638      	mov	r0, r7
 80108b6:	f004 ff49 	bl	801574c <geometry_msgs__msg__TwistWithCovariance__init>
 80108ba:	b330      	cbz	r0, 801090a <nav_msgs__msg__Odometry__init+0x7e>
 80108bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108be:	4620      	mov	r0, r4
 80108c0:	f004 fd10 	bl	80152e4 <std_msgs__msg__Header__fini>
 80108c4:	f104 0014 	add.w	r0, r4, #20
 80108c8:	f7fa fb0e 	bl	800aee8 <rosidl_runtime_c__String__fini>
 80108cc:	f104 0020 	add.w	r0, r4, #32
 80108d0:	f004 fe60 	bl	8015594 <geometry_msgs__msg__PoseWithCovariance__fini>
 80108d4:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80108d8:	f004 ff46 	bl	8015768 <geometry_msgs__msg__TwistWithCovariance__fini>
 80108dc:	2000      	movs	r0, #0
 80108de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108e0:	4620      	mov	r0, r4
 80108e2:	f004 fcff 	bl	80152e4 <std_msgs__msg__Header__fini>
 80108e6:	4628      	mov	r0, r5
 80108e8:	f7fa fafe 	bl	800aee8 <rosidl_runtime_c__String__fini>
 80108ec:	4630      	mov	r0, r6
 80108ee:	f004 fe51 	bl	8015594 <geometry_msgs__msg__PoseWithCovariance__fini>
 80108f2:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80108f6:	f004 ff37 	bl	8015768 <geometry_msgs__msg__TwistWithCovariance__fini>
 80108fa:	e7ef      	b.n	80108dc <nav_msgs__msg__Odometry__init+0x50>
 80108fc:	4620      	mov	r0, r4
 80108fe:	f004 fcf1 	bl	80152e4 <std_msgs__msg__Header__fini>
 8010902:	4628      	mov	r0, r5
 8010904:	e7e0      	b.n	80108c8 <nav_msgs__msg__Odometry__init+0x3c>
 8010906:	2000      	movs	r0, #0
 8010908:	4770      	bx	lr
 801090a:	4620      	mov	r0, r4
 801090c:	f004 fcea 	bl	80152e4 <std_msgs__msg__Header__fini>
 8010910:	4628      	mov	r0, r5
 8010912:	f7fa fae9 	bl	800aee8 <rosidl_runtime_c__String__fini>
 8010916:	4630      	mov	r0, r6
 8010918:	f004 fe3c 	bl	8015594 <geometry_msgs__msg__PoseWithCovariance__fini>
 801091c:	4638      	mov	r0, r7
 801091e:	f004 ff23 	bl	8015768 <geometry_msgs__msg__TwistWithCovariance__fini>
 8010922:	e7db      	b.n	80108dc <nav_msgs__msg__Odometry__init+0x50>

08010924 <nav_msgs__msg__Odometry__fini>:
 8010924:	b188      	cbz	r0, 801094a <nav_msgs__msg__Odometry__fini+0x26>
 8010926:	b510      	push	{r4, lr}
 8010928:	4604      	mov	r4, r0
 801092a:	f004 fcdb 	bl	80152e4 <std_msgs__msg__Header__fini>
 801092e:	f104 0014 	add.w	r0, r4, #20
 8010932:	f7fa fad9 	bl	800aee8 <rosidl_runtime_c__String__fini>
 8010936:	f104 0020 	add.w	r0, r4, #32
 801093a:	f004 fe2b 	bl	8015594 <geometry_msgs__msg__PoseWithCovariance__fini>
 801093e:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 8010942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010946:	f004 bf0f 	b.w	8015768 <geometry_msgs__msg__TwistWithCovariance__fini>
 801094a:	4770      	bx	lr

0801094c <rcl_client_get_rmw_handle>:
 801094c:	b118      	cbz	r0, 8010956 <rcl_client_get_rmw_handle+0xa>
 801094e:	6800      	ldr	r0, [r0, #0]
 8010950:	b108      	cbz	r0, 8010956 <rcl_client_get_rmw_handle+0xa>
 8010952:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010956:	4770      	bx	lr

08010958 <rcl_send_request>:
 8010958:	2800      	cmp	r0, #0
 801095a:	d048      	beq.n	80109ee <rcl_send_request+0x96>
 801095c:	b570      	push	{r4, r5, r6, lr}
 801095e:	4604      	mov	r4, r0
 8010960:	6800      	ldr	r0, [r0, #0]
 8010962:	b08a      	sub	sp, #40	@ 0x28
 8010964:	b1c0      	cbz	r0, 8010998 <rcl_send_request+0x40>
 8010966:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801096a:	b1ab      	cbz	r3, 8010998 <rcl_send_request+0x40>
 801096c:	460e      	mov	r6, r1
 801096e:	b1b9      	cbz	r1, 80109a0 <rcl_send_request+0x48>
 8010970:	4615      	mov	r5, r2
 8010972:	b1aa      	cbz	r2, 80109a0 <rcl_send_request+0x48>
 8010974:	2105      	movs	r1, #5
 8010976:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801097a:	f002 fec9 	bl	8013710 <__atomic_load_8>
 801097e:	6823      	ldr	r3, [r4, #0]
 8010980:	e9c5 0100 	strd	r0, r1, [r5]
 8010984:	462a      	mov	r2, r5
 8010986:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801098a:	4631      	mov	r1, r6
 801098c:	f004 f862 	bl	8014a54 <rmw_send_request>
 8010990:	b148      	cbz	r0, 80109a6 <rcl_send_request+0x4e>
 8010992:	2001      	movs	r0, #1
 8010994:	b00a      	add	sp, #40	@ 0x28
 8010996:	bd70      	pop	{r4, r5, r6, pc}
 8010998:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801099c:	b00a      	add	sp, #40	@ 0x28
 801099e:	bd70      	pop	{r4, r5, r6, pc}
 80109a0:	200b      	movs	r0, #11
 80109a2:	b00a      	add	sp, #40	@ 0x28
 80109a4:	bd70      	pop	{r4, r5, r6, pc}
 80109a6:	6820      	ldr	r0, [r4, #0]
 80109a8:	2305      	movs	r3, #5
 80109aa:	9300      	str	r3, [sp, #0]
 80109ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80109b0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80109b4:	f002 ff18 	bl	80137e8 <__atomic_exchange_8>
 80109b8:	6823      	ldr	r3, [r4, #0]
 80109ba:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80109be:	b1a2      	cbz	r2, 80109ea <rcl_send_request+0x92>
 80109c0:	a905      	add	r1, sp, #20
 80109c2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80109c6:	f003 fc41 	bl	801424c <rmw_get_gid_for_client>
 80109ca:	4601      	mov	r1, r0
 80109cc:	b990      	cbnz	r0, 80109f4 <rcl_send_request+0x9c>
 80109ce:	6822      	ldr	r2, [r4, #0]
 80109d0:	ab06      	add	r3, sp, #24
 80109d2:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 80109d6:	9302      	str	r3, [sp, #8]
 80109d8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80109dc:	4632      	mov	r2, r6
 80109de:	e9cd 4500 	strd	r4, r5, [sp]
 80109e2:	f000 fe15 	bl	8011610 <rcl_send_service_event_message>
 80109e6:	2800      	cmp	r0, #0
 80109e8:	d1d4      	bne.n	8010994 <rcl_send_request+0x3c>
 80109ea:	2000      	movs	r0, #0
 80109ec:	e7d2      	b.n	8010994 <rcl_send_request+0x3c>
 80109ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80109f2:	4770      	bx	lr
 80109f4:	f000 f87a 	bl	8010aec <rcl_convert_rmw_ret_to_rcl_ret>
 80109f8:	e7cc      	b.n	8010994 <rcl_send_request+0x3c>
 80109fa:	bf00      	nop
 80109fc:	0000      	movs	r0, r0
	...

08010a00 <rcl_take_response>:
 8010a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a02:	468e      	mov	lr, r1
 8010a04:	460c      	mov	r4, r1
 8010a06:	4617      	mov	r7, r2
 8010a08:	4605      	mov	r5, r0
 8010a0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a0e:	b095      	sub	sp, #84	@ 0x54
 8010a10:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8010a14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a18:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010a1c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010a20:	2d00      	cmp	r5, #0
 8010a22:	d044      	beq.n	8010aae <rcl_take_response+0xae>
 8010a24:	682b      	ldr	r3, [r5, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d041      	beq.n	8010aae <rcl_take_response+0xae>
 8010a2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d03d      	beq.n	8010aae <rcl_take_response+0xae>
 8010a32:	2f00      	cmp	r7, #0
 8010a34:	d03e      	beq.n	8010ab4 <rcl_take_response+0xb4>
 8010a36:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8010ad0 <rcl_take_response+0xd0>
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	f88d 3013 	strb.w	r3, [sp, #19]
 8010a40:	463a      	mov	r2, r7
 8010a42:	f10d 0313 	add.w	r3, sp, #19
 8010a46:	a90a      	add	r1, sp, #40	@ 0x28
 8010a48:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8010a4c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010a50:	f004 f900 	bl	8014c54 <rmw_take_response>
 8010a54:	4606      	mov	r6, r0
 8010a56:	bb78      	cbnz	r0, 8010ab8 <rcl_take_response+0xb8>
 8010a58:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8010a5c:	b373      	cbz	r3, 8010abc <rcl_take_response+0xbc>
 8010a5e:	682b      	ldr	r3, [r5, #0]
 8010a60:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8010a64:	b1aa      	cbz	r2, 8010a92 <rcl_take_response+0x92>
 8010a66:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010a6a:	a905      	add	r1, sp, #20
 8010a6c:	f003 fbee 	bl	801424c <rmw_get_gid_for_client>
 8010a70:	bb38      	cbnz	r0, 8010ac2 <rcl_take_response+0xc2>
 8010a72:	682b      	ldr	r3, [r5, #0]
 8010a74:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8010a78:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 8010a7c:	ab06      	add	r3, sp, #24
 8010a7e:	ed8d 7b00 	vstr	d7, [sp]
 8010a82:	463a      	mov	r2, r7
 8010a84:	9302      	str	r3, [sp, #8]
 8010a86:	2103      	movs	r1, #3
 8010a88:	f000 fdc2 	bl	8011610 <rcl_send_service_event_message>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	bf18      	it	ne
 8010a90:	4606      	movne	r6, r0
 8010a92:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 8010a96:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a9a:	46a4      	mov	ip, r4
 8010a9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010aa0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010aa4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010aa8:	4630      	mov	r0, r6
 8010aaa:	b015      	add	sp, #84	@ 0x54
 8010aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010aae:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8010ab2:	e7ee      	b.n	8010a92 <rcl_take_response+0x92>
 8010ab4:	260b      	movs	r6, #11
 8010ab6:	e7ec      	b.n	8010a92 <rcl_take_response+0x92>
 8010ab8:	2601      	movs	r6, #1
 8010aba:	e7ea      	b.n	8010a92 <rcl_take_response+0x92>
 8010abc:	f240 16f5 	movw	r6, #501	@ 0x1f5
 8010ac0:	e7e7      	b.n	8010a92 <rcl_take_response+0x92>
 8010ac2:	f000 f813 	bl	8010aec <rcl_convert_rmw_ret_to_rcl_ret>
 8010ac6:	4606      	mov	r6, r0
 8010ac8:	e7e3      	b.n	8010a92 <rcl_take_response+0x92>
 8010aca:	bf00      	nop
 8010acc:	f3af 8000 	nop.w
	...

08010ad8 <rcl_client_is_valid>:
 8010ad8:	b130      	cbz	r0, 8010ae8 <rcl_client_is_valid+0x10>
 8010ada:	6800      	ldr	r0, [r0, #0]
 8010adc:	b120      	cbz	r0, 8010ae8 <rcl_client_is_valid+0x10>
 8010ade:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010ae2:	3800      	subs	r0, #0
 8010ae4:	bf18      	it	ne
 8010ae6:	2001      	movne	r0, #1
 8010ae8:	4770      	bx	lr
 8010aea:	bf00      	nop

08010aec <rcl_convert_rmw_ret_to_rcl_ret>:
 8010aec:	280b      	cmp	r0, #11
 8010aee:	dc0d      	bgt.n	8010b0c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	db09      	blt.n	8010b08 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010af4:	280b      	cmp	r0, #11
 8010af6:	d807      	bhi.n	8010b08 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8010af8:	e8df f000 	tbb	[pc, r0]
 8010afc:	07060607 	.word	0x07060607
 8010b00:	06060606 	.word	0x06060606
 8010b04:	07070606 	.word	0x07070606
 8010b08:	2001      	movs	r0, #1
 8010b0a:	4770      	bx	lr
 8010b0c:	28cb      	cmp	r0, #203	@ 0xcb
 8010b0e:	bf14      	ite	ne
 8010b10:	2001      	movne	r0, #1
 8010b12:	20cb      	moveq	r0, #203	@ 0xcb
 8010b14:	4770      	bx	lr
 8010b16:	bf00      	nop

08010b18 <rcl_get_zero_initialized_context>:
 8010b18:	2200      	movs	r2, #0
 8010b1a:	e9c0 2200 	strd	r2, r2, [r0]
 8010b1e:	4770      	bx	lr

08010b20 <rcl_context_is_valid>:
 8010b20:	b118      	cbz	r0, 8010b2a <rcl_context_is_valid+0xa>
 8010b22:	6840      	ldr	r0, [r0, #4]
 8010b24:	3800      	subs	r0, #0
 8010b26:	bf18      	it	ne
 8010b28:	2001      	movne	r0, #1
 8010b2a:	4770      	bx	lr

08010b2c <__cleanup_context>:
 8010b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b30:	4606      	mov	r6, r0
 8010b32:	6800      	ldr	r0, [r0, #0]
 8010b34:	2300      	movs	r3, #0
 8010b36:	6073      	str	r3, [r6, #4]
 8010b38:	2800      	cmp	r0, #0
 8010b3a:	d042      	beq.n	8010bc2 <__cleanup_context+0x96>
 8010b3c:	6943      	ldr	r3, [r0, #20]
 8010b3e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8010b42:	6907      	ldr	r7, [r0, #16]
 8010b44:	b39b      	cbz	r3, 8010bae <__cleanup_context+0x82>
 8010b46:	3014      	adds	r0, #20
 8010b48:	f000 f9b2 	bl	8010eb0 <rcl_init_options_fini>
 8010b4c:	4680      	mov	r8, r0
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	d144      	bne.n	8010bdc <__cleanup_context+0xb0>
 8010b52:	6830      	ldr	r0, [r6, #0]
 8010b54:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010b56:	b123      	cbz	r3, 8010b62 <__cleanup_context+0x36>
 8010b58:	3028      	adds	r0, #40	@ 0x28
 8010b5a:	f003 fdbf 	bl	80146dc <rmw_context_fini>
 8010b5e:	bbb8      	cbnz	r0, 8010bd0 <__cleanup_context+0xa4>
 8010b60:	6830      	ldr	r0, [r6, #0]
 8010b62:	6a03      	ldr	r3, [r0, #32]
 8010b64:	b1db      	cbz	r3, 8010b9e <__cleanup_context+0x72>
 8010b66:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8010b6a:	2a01      	cmp	r2, #1
 8010b6c:	f17c 0100 	sbcs.w	r1, ip, #0
 8010b70:	db11      	blt.n	8010b96 <__cleanup_context+0x6a>
 8010b72:	2400      	movs	r4, #0
 8010b74:	4625      	mov	r5, r4
 8010b76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010b7a:	4639      	mov	r1, r7
 8010b7c:	b1c8      	cbz	r0, 8010bb2 <__cleanup_context+0x86>
 8010b7e:	47c8      	blx	r9
 8010b80:	6833      	ldr	r3, [r6, #0]
 8010b82:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8010b86:	3401      	adds	r4, #1
 8010b88:	f145 0500 	adc.w	r5, r5, #0
 8010b8c:	4294      	cmp	r4, r2
 8010b8e:	eb75 010c 	sbcs.w	r1, r5, ip
 8010b92:	6a1b      	ldr	r3, [r3, #32]
 8010b94:	dbef      	blt.n	8010b76 <__cleanup_context+0x4a>
 8010b96:	4618      	mov	r0, r3
 8010b98:	4639      	mov	r1, r7
 8010b9a:	47c8      	blx	r9
 8010b9c:	6830      	ldr	r0, [r6, #0]
 8010b9e:	4639      	mov	r1, r7
 8010ba0:	47c8      	blx	r9
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	e9c6 3300 	strd	r3, r3, [r6]
 8010ba8:	4640      	mov	r0, r8
 8010baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bae:	4698      	mov	r8, r3
 8010bb0:	e7d0      	b.n	8010b54 <__cleanup_context+0x28>
 8010bb2:	3401      	adds	r4, #1
 8010bb4:	f145 0500 	adc.w	r5, r5, #0
 8010bb8:	4294      	cmp	r4, r2
 8010bba:	eb75 010c 	sbcs.w	r1, r5, ip
 8010bbe:	dbda      	blt.n	8010b76 <__cleanup_context+0x4a>
 8010bc0:	e7e9      	b.n	8010b96 <__cleanup_context+0x6a>
 8010bc2:	4680      	mov	r8, r0
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	e9c6 3300 	strd	r3, r3, [r6]
 8010bca:	4640      	mov	r0, r8
 8010bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bd0:	f1b8 0f00 	cmp.w	r8, #0
 8010bd4:	d005      	beq.n	8010be2 <__cleanup_context+0xb6>
 8010bd6:	f7f9 fb43 	bl	800a260 <rcutils_reset_error>
 8010bda:	e7c1      	b.n	8010b60 <__cleanup_context+0x34>
 8010bdc:	f7f9 fb40 	bl	800a260 <rcutils_reset_error>
 8010be0:	e7b7      	b.n	8010b52 <__cleanup_context+0x26>
 8010be2:	f7ff ff83 	bl	8010aec <rcl_convert_rmw_ret_to_rcl_ret>
 8010be6:	4680      	mov	r8, r0
 8010be8:	e7f5      	b.n	8010bd6 <__cleanup_context+0xaa>
 8010bea:	bf00      	nop

08010bec <rcl_init>:
 8010bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf0:	1e04      	subs	r4, r0, #0
 8010bf2:	b0a5      	sub	sp, #148	@ 0x94
 8010bf4:	460d      	mov	r5, r1
 8010bf6:	4617      	mov	r7, r2
 8010bf8:	461e      	mov	r6, r3
 8010bfa:	dd13      	ble.n	8010c24 <rcl_init+0x38>
 8010bfc:	b161      	cbz	r1, 8010c18 <rcl_init+0x2c>
 8010bfe:	f1a1 0e04 	sub.w	lr, r1, #4
 8010c02:	f04f 0c00 	mov.w	ip, #0
 8010c06:	e001      	b.n	8010c0c <rcl_init+0x20>
 8010c08:	4564      	cmp	r4, ip
 8010c0a:	d00d      	beq.n	8010c28 <rcl_init+0x3c>
 8010c0c:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8010c10:	f10c 0c01 	add.w	ip, ip, #1
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d1f7      	bne.n	8010c08 <rcl_init+0x1c>
 8010c18:	f04f 080b 	mov.w	r8, #11
 8010c1c:	4640      	mov	r0, r8
 8010c1e:	b025      	add	sp, #148	@ 0x94
 8010c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c24:	2900      	cmp	r1, #0
 8010c26:	d1f7      	bne.n	8010c18 <rcl_init+0x2c>
 8010c28:	2f00      	cmp	r7, #0
 8010c2a:	d0f5      	beq.n	8010c18 <rcl_init+0x2c>
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d0f2      	beq.n	8010c18 <rcl_init+0x2c>
 8010c32:	469c      	mov	ip, r3
 8010c34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010c38:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8010c3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010c40:	f8dc 3000 	ldr.w	r3, [ip]
 8010c44:	f8ce 3000 	str.w	r3, [lr]
 8010c48:	a81f      	add	r0, sp, #124	@ 0x7c
 8010c4a:	f7f9 fadd 	bl	800a208 <rcutils_allocator_is_valid>
 8010c4e:	2800      	cmp	r0, #0
 8010c50:	d0e2      	beq.n	8010c18 <rcl_init+0x2c>
 8010c52:	2e00      	cmp	r6, #0
 8010c54:	d0e0      	beq.n	8010c18 <rcl_init+0x2c>
 8010c56:	6833      	ldr	r3, [r6, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d173      	bne.n	8010d44 <rcl_init+0x158>
 8010c5c:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8010c60:	2198      	movs	r1, #152	@ 0x98
 8010c62:	2001      	movs	r0, #1
 8010c64:	4798      	blx	r3
 8010c66:	4680      	mov	r8, r0
 8010c68:	6030      	str	r0, [r6, #0]
 8010c6a:	2800      	cmp	r0, #0
 8010c6c:	f000 80ac 	beq.w	8010dc8 <rcl_init+0x1dc>
 8010c70:	a802      	add	r0, sp, #8
 8010c72:	f003 f8a5 	bl	8013dc0 <rmw_get_zero_initialized_context>
 8010c76:	a902      	add	r1, sp, #8
 8010c78:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 8010c7c:	2270      	movs	r2, #112	@ 0x70
 8010c7e:	f007 fc24 	bl	80184ca <memcpy>
 8010c82:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8010c86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c8a:	f8d6 8000 	ldr.w	r8, [r6]
 8010c8e:	46c4      	mov	ip, r8
 8010c90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c94:	f8de 3000 	ldr.w	r3, [lr]
 8010c98:	f8cc 3000 	str.w	r3, [ip]
 8010c9c:	f108 0114 	add.w	r1, r8, #20
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	f000 f92f 	bl	8010f04 <rcl_init_options_copy>
 8010ca6:	4680      	mov	r8, r0
 8010ca8:	2800      	cmp	r0, #0
 8010caa:	d147      	bne.n	8010d3c <rcl_init+0x150>
 8010cac:	f8d6 9000 	ldr.w	r9, [r6]
 8010cb0:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 8010cb4:	f8c9 0020 	str.w	r0, [r9, #32]
 8010cb8:	f8c9 4018 	str.w	r4, [r9, #24]
 8010cbc:	f8c9 a01c 	str.w	sl, [r9, #28]
 8010cc0:	2c00      	cmp	r4, #0
 8010cc2:	d047      	beq.n	8010d54 <rcl_init+0x168>
 8010cc4:	2d00      	cmp	r5, #0
 8010cc6:	d045      	beq.n	8010d54 <rcl_init+0x168>
 8010cc8:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8010ccc:	2104      	movs	r1, #4
 8010cce:	4620      	mov	r0, r4
 8010cd0:	4798      	blx	r3
 8010cd2:	f8c9 0020 	str.w	r0, [r9, #32]
 8010cd6:	f8d6 9000 	ldr.w	r9, [r6]
 8010cda:	f8d9 b020 	ldr.w	fp, [r9, #32]
 8010cde:	f1bb 0f00 	cmp.w	fp, #0
 8010ce2:	d029      	beq.n	8010d38 <rcl_init+0x14c>
 8010ce4:	2c01      	cmp	r4, #1
 8010ce6:	f17a 0300 	sbcs.w	r3, sl, #0
 8010cea:	db33      	blt.n	8010d54 <rcl_init+0x168>
 8010cec:	f04f 0800 	mov.w	r8, #0
 8010cf0:	3d04      	subs	r5, #4
 8010cf2:	46c1      	mov	r9, r8
 8010cf4:	e00d      	b.n	8010d12 <rcl_init+0x126>
 8010cf6:	6829      	ldr	r1, [r5, #0]
 8010cf8:	f007 fbe7 	bl	80184ca <memcpy>
 8010cfc:	f118 0801 	adds.w	r8, r8, #1
 8010d00:	f149 0900 	adc.w	r9, r9, #0
 8010d04:	45ca      	cmp	sl, r9
 8010d06:	bf08      	it	eq
 8010d08:	4544      	cmpeq	r4, r8
 8010d0a:	d021      	beq.n	8010d50 <rcl_init+0x164>
 8010d0c:	6833      	ldr	r3, [r6, #0]
 8010d0e:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8010d12:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8010d16:	f7ef fadb 	bl	80002d0 <strlen>
 8010d1a:	1c42      	adds	r2, r0, #1
 8010d1c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8010d1e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8010d20:	9201      	str	r2, [sp, #4]
 8010d22:	4610      	mov	r0, r2
 8010d24:	4798      	blx	r3
 8010d26:	6833      	ldr	r3, [r6, #0]
 8010d28:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 8010d2c:	6a1b      	ldr	r3, [r3, #32]
 8010d2e:	9a01      	ldr	r2, [sp, #4]
 8010d30:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010d34:	2800      	cmp	r0, #0
 8010d36:	d1de      	bne.n	8010cf6 <rcl_init+0x10a>
 8010d38:	f04f 080a 	mov.w	r8, #10
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	f7ff fef5 	bl	8010b2c <__cleanup_context>
 8010d42:	e76b      	b.n	8010c1c <rcl_init+0x30>
 8010d44:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8010d48:	4640      	mov	r0, r8
 8010d4a:	b025      	add	sp, #148	@ 0x94
 8010d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d50:	f8d6 9000 	ldr.w	r9, [r6]
 8010d54:	4a26      	ldr	r2, [pc, #152]	@ (8010df0 <rcl_init+0x204>)
 8010d56:	6813      	ldr	r3, [r2, #0]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	d030      	beq.n	8010dbe <rcl_init+0x1d2>
 8010d5c:	461d      	mov	r5, r3
 8010d5e:	2000      	movs	r0, #0
 8010d60:	4619      	mov	r1, r3
 8010d62:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8010d66:	6073      	str	r3, [r6, #4]
 8010d68:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010d6a:	6011      	str	r1, [r2, #0]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	e9c4 5006 	strd	r5, r0, [r4, #24]
 8010d72:	d033      	beq.n	8010ddc <rcl_init+0x1f0>
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010d7a:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 8010d7e:	b333      	cbz	r3, 8010dce <rcl_init+0x1e2>
 8010d80:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010d82:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8010d86:	b953      	cbnz	r3, 8010d9e <rcl_init+0x1b2>
 8010d88:	2801      	cmp	r0, #1
 8010d8a:	d008      	beq.n	8010d9e <rcl_init+0x1b2>
 8010d8c:	a91f      	add	r1, sp, #124	@ 0x7c
 8010d8e:	4628      	mov	r0, r5
 8010d90:	f005 fe4e 	bl	8016a30 <rcl_get_discovery_static_peers>
 8010d94:	4680      	mov	r8, r0
 8010d96:	2800      	cmp	r0, #0
 8010d98:	d1d0      	bne.n	8010d3c <rcl_init+0x150>
 8010d9a:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8010d9e:	f005 fe3d 	bl	8016a1c <rcl_automatic_discovery_range_to_string>
 8010da2:	6831      	ldr	r1, [r6, #0]
 8010da4:	6948      	ldr	r0, [r1, #20]
 8010da6:	3128      	adds	r1, #40	@ 0x28
 8010da8:	3018      	adds	r0, #24
 8010daa:	f003 fb63 	bl	8014474 <rmw_init>
 8010dae:	4680      	mov	r8, r0
 8010db0:	2800      	cmp	r0, #0
 8010db2:	f43f af33 	beq.w	8010c1c <rcl_init+0x30>
 8010db6:	f7ff fe99 	bl	8010aec <rcl_convert_rmw_ret_to_rcl_ret>
 8010dba:	4680      	mov	r8, r0
 8010dbc:	e7be      	b.n	8010d3c <rcl_init+0x150>
 8010dbe:	2101      	movs	r1, #1
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	460d      	mov	r5, r1
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	e7cc      	b.n	8010d62 <rcl_init+0x176>
 8010dc8:	f04f 080a 	mov.w	r8, #10
 8010dcc:	e726      	b.n	8010c1c <rcl_init+0x30>
 8010dce:	4628      	mov	r0, r5
 8010dd0:	f005 fde2 	bl	8016998 <rcl_get_automatic_discovery_range>
 8010dd4:	4680      	mov	r8, r0
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	d0d2      	beq.n	8010d80 <rcl_init+0x194>
 8010dda:	e7af      	b.n	8010d3c <rcl_init+0x150>
 8010ddc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8010de0:	f005 fe90 	bl	8016b04 <rcl_get_default_domain_id>
 8010de4:	4680      	mov	r8, r0
 8010de6:	2800      	cmp	r0, #0
 8010de8:	d1a8      	bne.n	8010d3c <rcl_init+0x150>
 8010dea:	6833      	ldr	r3, [r6, #0]
 8010dec:	695c      	ldr	r4, [r3, #20]
 8010dee:	e7c1      	b.n	8010d74 <rcl_init+0x188>
 8010df0:	200101f0 	.word	0x200101f0

08010df4 <rcl_get_zero_initialized_init_options>:
 8010df4:	2000      	movs	r0, #0
 8010df6:	4770      	bx	lr

08010df8 <rcl_init_options_init>:
 8010df8:	b084      	sub	sp, #16
 8010dfa:	b570      	push	{r4, r5, r6, lr}
 8010dfc:	b09e      	sub	sp, #120	@ 0x78
 8010dfe:	ad23      	add	r5, sp, #140	@ 0x8c
 8010e00:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010e04:	2800      	cmp	r0, #0
 8010e06:	d046      	beq.n	8010e96 <rcl_init_options_init+0x9e>
 8010e08:	6803      	ldr	r3, [r0, #0]
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	b133      	cbz	r3, 8010e1c <rcl_init_options_init+0x24>
 8010e0e:	2564      	movs	r5, #100	@ 0x64
 8010e10:	4628      	mov	r0, r5
 8010e12:	b01e      	add	sp, #120	@ 0x78
 8010e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e18:	b004      	add	sp, #16
 8010e1a:	4770      	bx	lr
 8010e1c:	4628      	mov	r0, r5
 8010e1e:	f7f9 f9f3 	bl	800a208 <rcutils_allocator_is_valid>
 8010e22:	2800      	cmp	r0, #0
 8010e24:	d037      	beq.n	8010e96 <rcl_init_options_init+0x9e>
 8010e26:	46ae      	mov	lr, r5
 8010e28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e2c:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010e30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e34:	f8de 3000 	ldr.w	r3, [lr]
 8010e38:	f8cc 3000 	str.w	r3, [ip]
 8010e3c:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8010e3e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e40:	2070      	movs	r0, #112	@ 0x70
 8010e42:	4798      	blx	r3
 8010e44:	4606      	mov	r6, r0
 8010e46:	6020      	str	r0, [r4, #0]
 8010e48:	b338      	cbz	r0, 8010e9a <rcl_init_options_init+0xa2>
 8010e4a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8010e4e:	4686      	mov	lr, r0
 8010e50:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010e54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010e58:	f8dc 3000 	ldr.w	r3, [ip]
 8010e5c:	f8ce 3000 	str.w	r3, [lr]
 8010e60:	a802      	add	r0, sp, #8
 8010e62:	f002 ffb7 	bl	8013dd4 <rmw_get_zero_initialized_init_options>
 8010e66:	2258      	movs	r2, #88	@ 0x58
 8010e68:	a902      	add	r1, sp, #8
 8010e6a:	f106 0018 	add.w	r0, r6, #24
 8010e6e:	f007 fb2c 	bl	80184ca <memcpy>
 8010e72:	ab26      	add	r3, sp, #152	@ 0x98
 8010e74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010e78:	6826      	ldr	r6, [r4, #0]
 8010e7a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010e7e:	f106 0018 	add.w	r0, r6, #24
 8010e82:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8010e86:	f003 fa05 	bl	8014294 <rmw_init_options_init>
 8010e8a:	4605      	mov	r5, r0
 8010e8c:	b938      	cbnz	r0, 8010e9e <rcl_init_options_init+0xa6>
 8010e8e:	6823      	ldr	r3, [r4, #0]
 8010e90:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 8010e94:	e7bc      	b.n	8010e10 <rcl_init_options_init+0x18>
 8010e96:	250b      	movs	r5, #11
 8010e98:	e7ba      	b.n	8010e10 <rcl_init_options_init+0x18>
 8010e9a:	250a      	movs	r5, #10
 8010e9c:	e7b8      	b.n	8010e10 <rcl_init_options_init+0x18>
 8010e9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8010ea0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8010ea2:	6820      	ldr	r0, [r4, #0]
 8010ea4:	4798      	blx	r3
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	f7ff fe20 	bl	8010aec <rcl_convert_rmw_ret_to_rcl_ret>
 8010eac:	4605      	mov	r5, r0
 8010eae:	e7af      	b.n	8010e10 <rcl_init_options_init+0x18>

08010eb0 <rcl_init_options_fini>:
 8010eb0:	b530      	push	{r4, r5, lr}
 8010eb2:	b087      	sub	sp, #28
 8010eb4:	b1f0      	cbz	r0, 8010ef4 <rcl_init_options_fini+0x44>
 8010eb6:	6803      	ldr	r3, [r0, #0]
 8010eb8:	4604      	mov	r4, r0
 8010eba:	b1db      	cbz	r3, 8010ef4 <rcl_init_options_fini+0x44>
 8010ebc:	469c      	mov	ip, r3
 8010ebe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ec2:	f10d 0e04 	add.w	lr, sp, #4
 8010ec6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010eca:	f8dc 3000 	ldr.w	r3, [ip]
 8010ece:	f8ce 3000 	str.w	r3, [lr]
 8010ed2:	a801      	add	r0, sp, #4
 8010ed4:	f7f9 f998 	bl	800a208 <rcutils_allocator_is_valid>
 8010ed8:	b160      	cbz	r0, 8010ef4 <rcl_init_options_fini+0x44>
 8010eda:	6820      	ldr	r0, [r4, #0]
 8010edc:	3018      	adds	r0, #24
 8010ede:	f003 fa8b 	bl	80143f8 <rmw_init_options_fini>
 8010ee2:	4605      	mov	r5, r0
 8010ee4:	b950      	cbnz	r0, 8010efc <rcl_init_options_fini+0x4c>
 8010ee6:	6820      	ldr	r0, [r4, #0]
 8010ee8:	9b02      	ldr	r3, [sp, #8]
 8010eea:	9905      	ldr	r1, [sp, #20]
 8010eec:	4798      	blx	r3
 8010eee:	4628      	mov	r0, r5
 8010ef0:	b007      	add	sp, #28
 8010ef2:	bd30      	pop	{r4, r5, pc}
 8010ef4:	250b      	movs	r5, #11
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	b007      	add	sp, #28
 8010efa:	bd30      	pop	{r4, r5, pc}
 8010efc:	f7ff fdf6 	bl	8010aec <rcl_convert_rmw_ret_to_rcl_ret>
 8010f00:	4605      	mov	r5, r0
 8010f02:	e7f8      	b.n	8010ef6 <rcl_init_options_fini+0x46>

08010f04 <rcl_init_options_copy>:
 8010f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f06:	b09d      	sub	sp, #116	@ 0x74
 8010f08:	2800      	cmp	r0, #0
 8010f0a:	d04a      	beq.n	8010fa2 <rcl_init_options_copy+0x9e>
 8010f0c:	4604      	mov	r4, r0
 8010f0e:	6800      	ldr	r0, [r0, #0]
 8010f10:	2800      	cmp	r0, #0
 8010f12:	d046      	beq.n	8010fa2 <rcl_init_options_copy+0x9e>
 8010f14:	460d      	mov	r5, r1
 8010f16:	f7f9 f977 	bl	800a208 <rcutils_allocator_is_valid>
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d041      	beq.n	8010fa2 <rcl_init_options_copy+0x9e>
 8010f1e:	2d00      	cmp	r5, #0
 8010f20:	d03f      	beq.n	8010fa2 <rcl_init_options_copy+0x9e>
 8010f22:	682b      	ldr	r3, [r5, #0]
 8010f24:	b11b      	cbz	r3, 8010f2e <rcl_init_options_copy+0x2a>
 8010f26:	2464      	movs	r4, #100	@ 0x64
 8010f28:	4620      	mov	r0, r4
 8010f2a:	b01d      	add	sp, #116	@ 0x74
 8010f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f2e:	6826      	ldr	r6, [r4, #0]
 8010f30:	46b6      	mov	lr, r6
 8010f32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010f36:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8010f3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f3e:	f8de 3000 	ldr.w	r3, [lr]
 8010f42:	6837      	ldr	r7, [r6, #0]
 8010f44:	f8cc 3000 	str.w	r3, [ip]
 8010f48:	4619      	mov	r1, r3
 8010f4a:	2070      	movs	r0, #112	@ 0x70
 8010f4c:	47b8      	blx	r7
 8010f4e:	4606      	mov	r6, r0
 8010f50:	6028      	str	r0, [r5, #0]
 8010f52:	b350      	cbz	r0, 8010faa <rcl_init_options_copy+0xa6>
 8010f54:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8010f58:	4686      	mov	lr, r0
 8010f5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010f62:	f8dc 3000 	ldr.w	r3, [ip]
 8010f66:	f8ce 3000 	str.w	r3, [lr]
 8010f6a:	4668      	mov	r0, sp
 8010f6c:	f002 ff32 	bl	8013dd4 <rmw_get_zero_initialized_init_options>
 8010f70:	2258      	movs	r2, #88	@ 0x58
 8010f72:	4669      	mov	r1, sp
 8010f74:	f106 0018 	add.w	r0, r6, #24
 8010f78:	f007 faa7 	bl	80184ca <memcpy>
 8010f7c:	6820      	ldr	r0, [r4, #0]
 8010f7e:	6829      	ldr	r1, [r5, #0]
 8010f80:	3018      	adds	r0, #24
 8010f82:	3118      	adds	r1, #24
 8010f84:	f003 f9e8 	bl	8014358 <rmw_init_options_copy>
 8010f88:	4604      	mov	r4, r0
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	d0cc      	beq.n	8010f28 <rcl_init_options_copy+0x24>
 8010f8e:	f7f9 f94f 	bl	800a230 <rcutils_get_error_string>
 8010f92:	f7f9 f965 	bl	800a260 <rcutils_reset_error>
 8010f96:	4628      	mov	r0, r5
 8010f98:	f7ff ff8a 	bl	8010eb0 <rcl_init_options_fini>
 8010f9c:	b138      	cbz	r0, 8010fae <rcl_init_options_copy+0xaa>
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	e7c2      	b.n	8010f28 <rcl_init_options_copy+0x24>
 8010fa2:	240b      	movs	r4, #11
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	b01d      	add	sp, #116	@ 0x74
 8010fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010faa:	240a      	movs	r4, #10
 8010fac:	e7bc      	b.n	8010f28 <rcl_init_options_copy+0x24>
 8010fae:	4620      	mov	r0, r4
 8010fb0:	b01d      	add	sp, #116	@ 0x74
 8010fb2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010fb6:	f7ff bd99 	b.w	8010aec <rcl_convert_rmw_ret_to_rcl_ret>
 8010fba:	bf00      	nop

08010fbc <rcl_get_zero_initialized_node>:
 8010fbc:	4a03      	ldr	r2, [pc, #12]	@ (8010fcc <rcl_get_zero_initialized_node+0x10>)
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	4770      	bx	lr
 8010fcc:	0801a9dc 	.word	0x0801a9dc

08010fd0 <rcl_node_init>:
 8010fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd4:	b0ab      	sub	sp, #172	@ 0xac
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 8010fda:	a825      	add	r0, sp, #148	@ 0x94
 8010fdc:	4689      	mov	r9, r1
 8010fde:	4690      	mov	r8, r2
 8010fe0:	461f      	mov	r7, r3
 8010fe2:	f006 f801 	bl	8016fe8 <rcl_guard_condition_get_default_options>
 8010fe6:	2d00      	cmp	r5, #0
 8010fe8:	f000 80d8 	beq.w	801119c <rcl_node_init+0x1cc>
 8010fec:	4628      	mov	r0, r5
 8010fee:	f7f9 f90b 	bl	800a208 <rcutils_allocator_is_valid>
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	f000 80d2 	beq.w	801119c <rcl_node_init+0x1cc>
 8010ff8:	f1b9 0f00 	cmp.w	r9, #0
 8010ffc:	f000 80ce 	beq.w	801119c <rcl_node_init+0x1cc>
 8011000:	f1b8 0f00 	cmp.w	r8, #0
 8011004:	f000 80ca 	beq.w	801119c <rcl_node_init+0x1cc>
 8011008:	2c00      	cmp	r4, #0
 801100a:	f000 80c7 	beq.w	801119c <rcl_node_init+0x1cc>
 801100e:	6866      	ldr	r6, [r4, #4]
 8011010:	2e00      	cmp	r6, #0
 8011012:	f040 80ca 	bne.w	80111aa <rcl_node_init+0x1da>
 8011016:	2f00      	cmp	r7, #0
 8011018:	f000 80c0 	beq.w	801119c <rcl_node_init+0x1cc>
 801101c:	4638      	mov	r0, r7
 801101e:	f7ff fd7f 	bl	8010b20 <rcl_context_is_valid>
 8011022:	2800      	cmp	r0, #0
 8011024:	f000 80bf 	beq.w	80111a6 <rcl_node_init+0x1d6>
 8011028:	4632      	mov	r2, r6
 801102a:	a924      	add	r1, sp, #144	@ 0x90
 801102c:	4648      	mov	r0, r9
 801102e:	9624      	str	r6, [sp, #144]	@ 0x90
 8011030:	f003 f84c 	bl	80140cc <rmw_validate_node_name>
 8011034:	4606      	mov	r6, r0
 8011036:	2800      	cmp	r0, #0
 8011038:	f040 80b1 	bne.w	801119e <rcl_node_init+0x1ce>
 801103c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801103e:	2800      	cmp	r0, #0
 8011040:	f040 8104 	bne.w	801124c <rcl_node_init+0x27c>
 8011044:	f898 3000 	ldrb.w	r3, [r8]
 8011048:	2b00      	cmp	r3, #0
 801104a:	f000 80f0 	beq.w	801122e <rcl_node_init+0x25e>
 801104e:	2b2f      	cmp	r3, #47	@ 0x2f
 8011050:	f000 80b0 	beq.w	80111b4 <rcl_node_init+0x1e4>
 8011054:	4b85      	ldr	r3, [pc, #532]	@ (801126c <rcl_node_init+0x29c>)
 8011056:	f8cd 800c 	str.w	r8, [sp, #12]
 801105a:	9302      	str	r3, [sp, #8]
 801105c:	692b      	ldr	r3, [r5, #16]
 801105e:	9300      	str	r3, [sp, #0]
 8011060:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011064:	9301      	str	r3, [sp, #4]
 8011066:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801106a:	f002 fc0f 	bl	801388c <rcutils_format_string_limit>
 801106e:	4680      	mov	r8, r0
 8011070:	f1b8 0f00 	cmp.w	r8, #0
 8011074:	f000 80e8 	beq.w	8011248 <rcl_node_init+0x278>
 8011078:	2200      	movs	r2, #0
 801107a:	a924      	add	r1, sp, #144	@ 0x90
 801107c:	4640      	mov	r0, r8
 801107e:	9224      	str	r2, [sp, #144]	@ 0x90
 8011080:	f003 f806 	bl	8014090 <rmw_validate_namespace>
 8011084:	4606      	mov	r6, r0
 8011086:	2800      	cmp	r0, #0
 8011088:	f040 80a4 	bne.w	80111d4 <rcl_node_init+0x204>
 801108c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801108e:	2800      	cmp	r0, #0
 8011090:	f040 809d 	bne.w	80111ce <rcl_node_init+0x1fe>
 8011094:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8011098:	2178      	movs	r1, #120	@ 0x78
 801109a:	2001      	movs	r0, #1
 801109c:	4798      	blx	r3
 801109e:	4606      	mov	r6, r0
 80110a0:	6060      	str	r0, [r4, #4]
 80110a2:	2800      	cmp	r0, #0
 80110a4:	f000 80d6 	beq.w	8011254 <rcl_node_init+0x284>
 80110a8:	a80a      	add	r0, sp, #40	@ 0x28
 80110aa:	f000 f92f 	bl	801130c <rcl_node_get_default_options>
 80110ae:	a90a      	add	r1, sp, #40	@ 0x28
 80110b0:	4630      	mov	r0, r6
 80110b2:	2268      	movs	r2, #104	@ 0x68
 80110b4:	f007 fa09 	bl	80184ca <memcpy>
 80110b8:	6861      	ldr	r1, [r4, #4]
 80110ba:	6027      	str	r7, [r4, #0]
 80110bc:	4628      	mov	r0, r5
 80110be:	f000 f933 	bl	8011328 <rcl_node_options_copy>
 80110c2:	4606      	mov	r6, r0
 80110c4:	2800      	cmp	r0, #0
 80110c6:	f040 8085 	bne.w	80111d4 <rcl_node_init+0x204>
 80110ca:	4640      	mov	r0, r8
 80110cc:	f7ef f900 	bl	80002d0 <strlen>
 80110d0:	eb08 0300 	add.w	r3, r8, r0
 80110d4:	6866      	ldr	r6, [r4, #4]
 80110d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80110da:	e9cd 8903 	strd	r8, r9, [sp, #12]
 80110de:	2b2f      	cmp	r3, #47	@ 0x2f
 80110e0:	bf0c      	ite	eq
 80110e2:	4b63      	ldreq	r3, [pc, #396]	@ (8011270 <rcl_node_init+0x2a0>)
 80110e4:	4b63      	ldrne	r3, [pc, #396]	@ (8011274 <rcl_node_init+0x2a4>)
 80110e6:	9302      	str	r3, [sp, #8]
 80110e8:	692b      	ldr	r3, [r5, #16]
 80110ea:	9300      	str	r3, [sp, #0]
 80110ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80110f0:	9301      	str	r3, [sp, #4]
 80110f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80110f6:	f002 fbc9 	bl	801388c <rcutils_format_string_limit>
 80110fa:	6863      	ldr	r3, [r4, #4]
 80110fc:	6770      	str	r0, [r6, #116]	@ 0x74
 80110fe:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8011100:	2a00      	cmp	r2, #0
 8011102:	f000 80a9 	beq.w	8011258 <rcl_node_init+0x288>
 8011106:	6822      	ldr	r2, [r4, #0]
 8011108:	9307      	str	r3, [sp, #28]
 801110a:	6810      	ldr	r0, [r2, #0]
 801110c:	4649      	mov	r1, r9
 801110e:	3028      	adds	r0, #40	@ 0x28
 8011110:	4642      	mov	r2, r8
 8011112:	f003 fc07 	bl	8014924 <rmw_create_node>
 8011116:	9b07      	ldr	r3, [sp, #28]
 8011118:	6698      	str	r0, [r3, #104]	@ 0x68
 801111a:	6863      	ldr	r3, [r4, #4]
 801111c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801111e:	2800      	cmp	r0, #0
 8011120:	f000 809d 	beq.w	801125e <rcl_node_init+0x28e>
 8011124:	f003 fc90 	bl	8014a48 <rmw_node_get_graph_guard_condition>
 8011128:	4681      	mov	r9, r0
 801112a:	2800      	cmp	r0, #0
 801112c:	f000 809c 	beq.w	8011268 <rcl_node_init+0x298>
 8011130:	682b      	ldr	r3, [r5, #0]
 8011132:	6929      	ldr	r1, [r5, #16]
 8011134:	6866      	ldr	r6, [r4, #4]
 8011136:	2008      	movs	r0, #8
 8011138:	4798      	blx	r3
 801113a:	6863      	ldr	r3, [r4, #4]
 801113c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801113e:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8011142:	f1ba 0f00 	cmp.w	sl, #0
 8011146:	f000 808d 	beq.w	8011264 <rcl_node_init+0x294>
 801114a:	f10d 0b20 	add.w	fp, sp, #32
 801114e:	4658      	mov	r0, fp
 8011150:	f005 fe72 	bl	8016e38 <rcl_get_zero_initialized_guard_condition>
 8011154:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8011158:	6863      	ldr	r3, [r4, #4]
 801115a:	46ac      	mov	ip, r5
 801115c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8011160:	e88a 0003 	stmia.w	sl, {r0, r1}
 8011164:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011168:	ae25      	add	r6, sp, #148	@ 0x94
 801116a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801116c:	f8dc 3000 	ldr.w	r3, [ip]
 8011170:	6033      	str	r3, [r6, #0]
 8011172:	ab2a      	add	r3, sp, #168	@ 0xa8
 8011174:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8011178:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801117c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801117e:	463a      	mov	r2, r7
 8011180:	4649      	mov	r1, r9
 8011182:	4670      	mov	r0, lr
 8011184:	f005 feae 	bl	8016ee4 <rcl_guard_condition_init_from_rmw>
 8011188:	4606      	mov	r6, r0
 801118a:	bb18      	cbnz	r0, 80111d4 <rcl_node_init+0x204>
 801118c:	686b      	ldr	r3, [r5, #4]
 801118e:	6929      	ldr	r1, [r5, #16]
 8011190:	4798      	blx	r3
 8011192:	686b      	ldr	r3, [r5, #4]
 8011194:	6929      	ldr	r1, [r5, #16]
 8011196:	4640      	mov	r0, r8
 8011198:	4798      	blx	r3
 801119a:	e000      	b.n	801119e <rcl_node_init+0x1ce>
 801119c:	260b      	movs	r6, #11
 801119e:	4630      	mov	r0, r6
 80111a0:	b02b      	add	sp, #172	@ 0xac
 80111a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111a6:	2665      	movs	r6, #101	@ 0x65
 80111a8:	e7f9      	b.n	801119e <rcl_node_init+0x1ce>
 80111aa:	2664      	movs	r6, #100	@ 0x64
 80111ac:	4630      	mov	r0, r6
 80111ae:	b02b      	add	sp, #172	@ 0xac
 80111b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111b4:	f105 030c 	add.w	r3, r5, #12
 80111b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80111bc:	e88d 0003 	stmia.w	sp, {r0, r1}
 80111c0:	4640      	mov	r0, r8
 80111c2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80111c6:	f002 fc7f 	bl	8013ac8 <rcutils_strdup>
 80111ca:	4680      	mov	r8, r0
 80111cc:	e750      	b.n	8011070 <rcl_node_init+0xa0>
 80111ce:	f002 ff71 	bl	80140b4 <rmw_namespace_validation_result_string>
 80111d2:	26ca      	movs	r6, #202	@ 0xca
 80111d4:	6863      	ldr	r3, [r4, #4]
 80111d6:	b1f3      	cbz	r3, 8011216 <rcl_node_init+0x246>
 80111d8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80111da:	b138      	cbz	r0, 80111ec <rcl_node_init+0x21c>
 80111dc:	f005 fee2 	bl	8016fa4 <rcl_guard_condition_fini>
 80111e0:	6863      	ldr	r3, [r4, #4]
 80111e2:	6929      	ldr	r1, [r5, #16]
 80111e4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80111e6:	686b      	ldr	r3, [r5, #4]
 80111e8:	4798      	blx	r3
 80111ea:	6863      	ldr	r3, [r4, #4]
 80111ec:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80111ee:	b110      	cbz	r0, 80111f6 <rcl_node_init+0x226>
 80111f0:	f003 fbae 	bl	8014950 <rmw_destroy_node>
 80111f4:	6863      	ldr	r3, [r4, #4]
 80111f6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80111f8:	6929      	ldr	r1, [r5, #16]
 80111fa:	686b      	ldr	r3, [r5, #4]
 80111fc:	4798      	blx	r3
 80111fe:	6863      	ldr	r3, [r4, #4]
 8011200:	6929      	ldr	r1, [r5, #16]
 8011202:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8011204:	686b      	ldr	r3, [r5, #4]
 8011206:	4798      	blx	r3
 8011208:	6860      	ldr	r0, [r4, #4]
 801120a:	f000 f8ab 	bl	8011364 <rcl_node_options_fini>
 801120e:	686b      	ldr	r3, [r5, #4]
 8011210:	6929      	ldr	r1, [r5, #16]
 8011212:	6860      	ldr	r0, [r4, #4]
 8011214:	4798      	blx	r3
 8011216:	686b      	ldr	r3, [r5, #4]
 8011218:	6929      	ldr	r1, [r5, #16]
 801121a:	2000      	movs	r0, #0
 801121c:	4798      	blx	r3
 801121e:	686b      	ldr	r3, [r5, #4]
 8011220:	6929      	ldr	r1, [r5, #16]
 8011222:	4640      	mov	r0, r8
 8011224:	4798      	blx	r3
 8011226:	2300      	movs	r3, #0
 8011228:	e9c4 3300 	strd	r3, r3, [r4]
 801122c:	e7b7      	b.n	801119e <rcl_node_init+0x1ce>
 801122e:	f105 030c 	add.w	r3, r5, #12
 8011232:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011236:	e88d 0003 	stmia.w	sp, {r0, r1}
 801123a:	480f      	ldr	r0, [pc, #60]	@ (8011278 <rcl_node_init+0x2a8>)
 801123c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8011240:	f002 fc42 	bl	8013ac8 <rcutils_strdup>
 8011244:	4680      	mov	r8, r0
 8011246:	e713      	b.n	8011070 <rcl_node_init+0xa0>
 8011248:	260a      	movs	r6, #10
 801124a:	e7a8      	b.n	801119e <rcl_node_init+0x1ce>
 801124c:	f002 ff8a 	bl	8014164 <rmw_node_name_validation_result_string>
 8011250:	26c9      	movs	r6, #201	@ 0xc9
 8011252:	e7a4      	b.n	801119e <rcl_node_init+0x1ce>
 8011254:	260a      	movs	r6, #10
 8011256:	e7de      	b.n	8011216 <rcl_node_init+0x246>
 8011258:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801125a:	260a      	movs	r6, #10
 801125c:	e7bd      	b.n	80111da <rcl_node_init+0x20a>
 801125e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8011260:	2601      	movs	r6, #1
 8011262:	e7ba      	b.n	80111da <rcl_node_init+0x20a>
 8011264:	260a      	movs	r6, #10
 8011266:	e7c1      	b.n	80111ec <rcl_node_init+0x21c>
 8011268:	2601      	movs	r6, #1
 801126a:	e7b3      	b.n	80111d4 <rcl_node_init+0x204>
 801126c:	0801a058 	.word	0x0801a058
 8011270:	08019e64 	.word	0x08019e64
 8011274:	0801a05c 	.word	0x0801a05c
 8011278:	0801a054 	.word	0x0801a054

0801127c <rcl_node_is_valid>:
 801127c:	b130      	cbz	r0, 801128c <rcl_node_is_valid+0x10>
 801127e:	6843      	ldr	r3, [r0, #4]
 8011280:	b123      	cbz	r3, 801128c <rcl_node_is_valid+0x10>
 8011282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011284:	b113      	cbz	r3, 801128c <rcl_node_is_valid+0x10>
 8011286:	6800      	ldr	r0, [r0, #0]
 8011288:	f7ff bc4a 	b.w	8010b20 <rcl_context_is_valid>
 801128c:	2000      	movs	r0, #0
 801128e:	4770      	bx	lr

08011290 <rcl_node_get_name>:
 8011290:	b120      	cbz	r0, 801129c <rcl_node_get_name+0xc>
 8011292:	6840      	ldr	r0, [r0, #4]
 8011294:	b110      	cbz	r0, 801129c <rcl_node_get_name+0xc>
 8011296:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8011298:	b100      	cbz	r0, 801129c <rcl_node_get_name+0xc>
 801129a:	6880      	ldr	r0, [r0, #8]
 801129c:	4770      	bx	lr
 801129e:	bf00      	nop

080112a0 <rcl_node_get_namespace>:
 80112a0:	b120      	cbz	r0, 80112ac <rcl_node_get_namespace+0xc>
 80112a2:	6840      	ldr	r0, [r0, #4]
 80112a4:	b110      	cbz	r0, 80112ac <rcl_node_get_namespace+0xc>
 80112a6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80112a8:	b100      	cbz	r0, 80112ac <rcl_node_get_namespace+0xc>
 80112aa:	68c0      	ldr	r0, [r0, #12]
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop

080112b0 <rcl_node_get_options>:
 80112b0:	b128      	cbz	r0, 80112be <rcl_node_get_options+0xe>
 80112b2:	6840      	ldr	r0, [r0, #4]
 80112b4:	b118      	cbz	r0, 80112be <rcl_node_get_options+0xe>
 80112b6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	bf08      	it	eq
 80112bc:	2000      	moveq	r0, #0
 80112be:	4770      	bx	lr

080112c0 <rcl_node_get_rmw_handle>:
 80112c0:	b110      	cbz	r0, 80112c8 <rcl_node_get_rmw_handle+0x8>
 80112c2:	6840      	ldr	r0, [r0, #4]
 80112c4:	b100      	cbz	r0, 80112c8 <rcl_node_get_rmw_handle+0x8>
 80112c6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80112c8:	4770      	bx	lr
 80112ca:	bf00      	nop

080112cc <rcl_get_disable_loaned_message>:
 80112cc:	b510      	push	{r4, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	2300      	movs	r3, #0
 80112d2:	9301      	str	r3, [sp, #4]
 80112d4:	b1a0      	cbz	r0, 8011300 <rcl_get_disable_loaned_message+0x34>
 80112d6:	4604      	mov	r4, r0
 80112d8:	a901      	add	r1, sp, #4
 80112da:	480b      	ldr	r0, [pc, #44]	@ (8011308 <rcl_get_disable_loaned_message+0x3c>)
 80112dc:	f002 fabe 	bl	801385c <rcutils_get_env>
 80112e0:	b110      	cbz	r0, 80112e8 <rcl_get_disable_loaned_message+0x1c>
 80112e2:	2001      	movs	r0, #1
 80112e4:	b002      	add	sp, #8
 80112e6:	bd10      	pop	{r4, pc}
 80112e8:	9a01      	ldr	r2, [sp, #4]
 80112ea:	7813      	ldrb	r3, [r2, #0]
 80112ec:	3b31      	subs	r3, #49	@ 0x31
 80112ee:	bf08      	it	eq
 80112f0:	7853      	ldrbeq	r3, [r2, #1]
 80112f2:	fab3 f383 	clz	r3, r3
 80112f6:	095b      	lsrs	r3, r3, #5
 80112f8:	2000      	movs	r0, #0
 80112fa:	7023      	strb	r3, [r4, #0]
 80112fc:	b002      	add	sp, #8
 80112fe:	bd10      	pop	{r4, pc}
 8011300:	200b      	movs	r0, #11
 8011302:	b002      	add	sp, #8
 8011304:	bd10      	pop	{r4, pc}
 8011306:	bf00      	nop
 8011308:	0801a064 	.word	0x0801a064

0801130c <rcl_node_get_default_options>:
 801130c:	b510      	push	{r4, lr}
 801130e:	2253      	movs	r2, #83	@ 0x53
 8011310:	4604      	mov	r4, r0
 8011312:	2100      	movs	r1, #0
 8011314:	3015      	adds	r0, #21
 8011316:	f006 fffd 	bl	8018314 <memset>
 801131a:	4620      	mov	r0, r4
 801131c:	f7f8 ff48 	bl	800a1b0 <rcutils_get_default_allocator>
 8011320:	2301      	movs	r3, #1
 8011322:	7523      	strb	r3, [r4, #20]
 8011324:	4620      	mov	r0, r4
 8011326:	bd10      	pop	{r4, pc}

08011328 <rcl_node_options_copy>:
 8011328:	b1d0      	cbz	r0, 8011360 <rcl_node_options_copy+0x38>
 801132a:	b570      	push	{r4, r5, r6, lr}
 801132c:	460c      	mov	r4, r1
 801132e:	b1a9      	cbz	r1, 801135c <rcl_node_options_copy+0x34>
 8011330:	4288      	cmp	r0, r1
 8011332:	4684      	mov	ip, r0
 8011334:	d012      	beq.n	801135c <rcl_node_options_copy+0x34>
 8011336:	4605      	mov	r5, r0
 8011338:	8a86      	ldrh	r6, [r0, #20]
 801133a:	468e      	mov	lr, r1
 801133c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801133e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011342:	682b      	ldr	r3, [r5, #0]
 8011344:	f8ce 3000 	str.w	r3, [lr]
 8011348:	f10c 0118 	add.w	r1, ip, #24
 801134c:	2250      	movs	r2, #80	@ 0x50
 801134e:	82a6      	strh	r6, [r4, #20]
 8011350:	f104 0018 	add.w	r0, r4, #24
 8011354:	f007 f8b9 	bl	80184ca <memcpy>
 8011358:	2000      	movs	r0, #0
 801135a:	bd70      	pop	{r4, r5, r6, pc}
 801135c:	200b      	movs	r0, #11
 801135e:	bd70      	pop	{r4, r5, r6, pc}
 8011360:	200b      	movs	r0, #11
 8011362:	4770      	bx	lr

08011364 <rcl_node_options_fini>:
 8011364:	b1c0      	cbz	r0, 8011398 <rcl_node_options_fini+0x34>
 8011366:	b500      	push	{lr}
 8011368:	4684      	mov	ip, r0
 801136a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801136e:	b087      	sub	sp, #28
 8011370:	f10d 0e04 	add.w	lr, sp, #4
 8011374:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011378:	f8dc 3000 	ldr.w	r3, [ip]
 801137c:	f8ce 3000 	str.w	r3, [lr]
 8011380:	a801      	add	r0, sp, #4
 8011382:	f7f8 ff41 	bl	800a208 <rcutils_allocator_is_valid>
 8011386:	b118      	cbz	r0, 8011390 <rcl_node_options_fini+0x2c>
 8011388:	2000      	movs	r0, #0
 801138a:	b007      	add	sp, #28
 801138c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011390:	200b      	movs	r0, #11
 8011392:	b007      	add	sp, #28
 8011394:	f85d fb04 	ldr.w	pc, [sp], #4
 8011398:	200b      	movs	r0, #11
 801139a:	4770      	bx	lr

0801139c <rcl_node_resolve_name>:
 801139c:	b082      	sub	sp, #8
 801139e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a2:	b091      	sub	sp, #68	@ 0x44
 80113a4:	ac1a      	add	r4, sp, #104	@ 0x68
 80113a6:	e884 000c 	stmia.w	r4, {r2, r3}
 80113aa:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80113ae:	2800      	cmp	r0, #0
 80113b0:	d03a      	beq.n	8011428 <rcl_node_resolve_name+0x8c>
 80113b2:	460c      	mov	r4, r1
 80113b4:	4605      	mov	r5, r0
 80113b6:	f7ff ff7b 	bl	80112b0 <rcl_node_get_options>
 80113ba:	b370      	cbz	r0, 801141a <rcl_node_resolve_name+0x7e>
 80113bc:	4628      	mov	r0, r5
 80113be:	f7ff ff67 	bl	8011290 <rcl_node_get_name>
 80113c2:	4681      	mov	r9, r0
 80113c4:	4628      	mov	r0, r5
 80113c6:	f7ff ff6b 	bl	80112a0 <rcl_node_get_namespace>
 80113ca:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80113ce:	4607      	mov	r7, r0
 80113d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80113d4:	ad0b      	add	r5, sp, #44	@ 0x2c
 80113d6:	46ac      	mov	ip, r5
 80113d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80113dc:	f8de 3000 	ldr.w	r3, [lr]
 80113e0:	f8cc 3000 	str.w	r3, [ip]
 80113e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80113e6:	b1fb      	cbz	r3, 8011428 <rcl_node_resolve_name+0x8c>
 80113e8:	468a      	mov	sl, r1
 80113ea:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80113ee:	f002 fbcb 	bl	8013b88 <rcutils_get_zero_initialized_string_map>
 80113f2:	ab10      	add	r3, sp, #64	@ 0x40
 80113f4:	9008      	str	r0, [sp, #32]
 80113f6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80113fa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80113fe:	2100      	movs	r1, #0
 8011400:	e895 000c 	ldmia.w	r5, {r2, r3}
 8011404:	a808      	add	r0, sp, #32
 8011406:	f002 fc19 	bl	8013c3c <rcutils_string_map_init>
 801140a:	4606      	mov	r6, r0
 801140c:	b170      	cbz	r0, 801142c <rcl_node_resolve_name+0x90>
 801140e:	f7f8 ff0f 	bl	800a230 <rcutils_get_error_string>
 8011412:	f7f8 ff25 	bl	800a260 <rcutils_reset_error>
 8011416:	2e0a      	cmp	r6, #10
 8011418:	d000      	beq.n	801141c <rcl_node_resolve_name+0x80>
 801141a:	2601      	movs	r6, #1
 801141c:	4630      	mov	r0, r6
 801141e:	b011      	add	sp, #68	@ 0x44
 8011420:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011424:	b002      	add	sp, #8
 8011426:	4770      	bx	lr
 8011428:	260b      	movs	r6, #11
 801142a:	e7f7      	b.n	801141c <rcl_node_resolve_name+0x80>
 801142c:	9009      	str	r0, [sp, #36]	@ 0x24
 801142e:	9007      	str	r0, [sp, #28]
 8011430:	a808      	add	r0, sp, #32
 8011432:	f005 fcfb 	bl	8016e2c <rcl_get_default_topic_name_substitutions>
 8011436:	4606      	mov	r6, r0
 8011438:	b1b0      	cbz	r0, 8011468 <rcl_node_resolve_name+0xcc>
 801143a:	280a      	cmp	r0, #10
 801143c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011440:	d000      	beq.n	8011444 <rcl_node_resolve_name+0xa8>
 8011442:	2601      	movs	r6, #1
 8011444:	a808      	add	r0, sp, #32
 8011446:	f002 fc37 	bl	8013cb8 <rcutils_string_map_fini>
 801144a:	2800      	cmp	r0, #0
 801144c:	d132      	bne.n	80114b4 <rcl_node_resolve_name+0x118>
 801144e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011450:	4659      	mov	r1, fp
 8011452:	47d0      	blx	sl
 8011454:	4659      	mov	r1, fp
 8011456:	4648      	mov	r0, r9
 8011458:	47d0      	blx	sl
 801145a:	f1b8 0f00 	cmp.w	r8, #0
 801145e:	d0dd      	beq.n	801141c <rcl_node_resolve_name+0x80>
 8011460:	2e67      	cmp	r6, #103	@ 0x67
 8011462:	bf08      	it	eq
 8011464:	2668      	moveq	r6, #104	@ 0x68
 8011466:	e7d9      	b.n	801141c <rcl_node_resolve_name+0x80>
 8011468:	ab09      	add	r3, sp, #36	@ 0x24
 801146a:	9305      	str	r3, [sp, #20]
 801146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801146e:	46ec      	mov	ip, sp
 8011470:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011474:	682b      	ldr	r3, [r5, #0]
 8011476:	f8cc 3000 	str.w	r3, [ip]
 801147a:	463a      	mov	r2, r7
 801147c:	4649      	mov	r1, r9
 801147e:	4620      	mov	r0, r4
 8011480:	ab08      	add	r3, sp, #32
 8011482:	f005 fb6d 	bl	8016b60 <rcl_expand_topic_name>
 8011486:	4606      	mov	r6, r0
 8011488:	b9c8      	cbnz	r0, 80114be <rcl_node_resolve_name+0x122>
 801148a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801148e:	9009      	str	r0, [sp, #36]	@ 0x24
 8011490:	4602      	mov	r2, r0
 8011492:	a90a      	add	r1, sp, #40	@ 0x28
 8011494:	4648      	mov	r0, r9
 8011496:	f002 fd43 	bl	8013f20 <rmw_validate_full_topic_name>
 801149a:	b998      	cbnz	r0, 80114c4 <rcl_node_resolve_name+0x128>
 801149c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801149e:	bb14      	cbnz	r4, 80114e6 <rcl_node_resolve_name+0x14a>
 80114a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80114a2:	a808      	add	r0, sp, #32
 80114a4:	f8c3 9000 	str.w	r9, [r3]
 80114a8:	f002 fc06 	bl	8013cb8 <rcutils_string_map_fini>
 80114ac:	4606      	mov	r6, r0
 80114ae:	b978      	cbnz	r0, 80114d0 <rcl_node_resolve_name+0x134>
 80114b0:	4681      	mov	r9, r0
 80114b2:	e7cc      	b.n	801144e <rcl_node_resolve_name+0xb2>
 80114b4:	f7f8 febc 	bl	800a230 <rcutils_get_error_string>
 80114b8:	f7f8 fed2 	bl	800a260 <rcutils_reset_error>
 80114bc:	e7c7      	b.n	801144e <rcl_node_resolve_name+0xb2>
 80114be:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80114c2:	e7bf      	b.n	8011444 <rcl_node_resolve_name+0xa8>
 80114c4:	f7f8 feb4 	bl	800a230 <rcutils_get_error_string>
 80114c8:	2601      	movs	r6, #1
 80114ca:	f7f8 fec9 	bl	800a260 <rcutils_reset_error>
 80114ce:	e7b9      	b.n	8011444 <rcl_node_resolve_name+0xa8>
 80114d0:	f7f8 feae 	bl	800a230 <rcutils_get_error_string>
 80114d4:	f7f8 fec4 	bl	800a260 <rcutils_reset_error>
 80114d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114da:	4659      	mov	r1, fp
 80114dc:	47d0      	blx	sl
 80114de:	4659      	mov	r1, fp
 80114e0:	4620      	mov	r0, r4
 80114e2:	47d0      	blx	sl
 80114e4:	e799      	b.n	801141a <rcl_node_resolve_name+0x7e>
 80114e6:	2667      	movs	r6, #103	@ 0x67
 80114e8:	e7ac      	b.n	8011444 <rcl_node_resolve_name+0xa8>
 80114ea:	bf00      	nop

080114ec <rcl_service_get_rmw_handle>:
 80114ec:	b118      	cbz	r0, 80114f6 <rcl_service_get_rmw_handle+0xa>
 80114ee:	6800      	ldr	r0, [r0, #0]
 80114f0:	b108      	cbz	r0, 80114f6 <rcl_service_get_rmw_handle+0xa>
 80114f2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80114f6:	4770      	bx	lr

080114f8 <rcl_take_request>:
 80114f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114fa:	468e      	mov	lr, r1
 80114fc:	460c      	mov	r4, r1
 80114fe:	4617      	mov	r7, r2
 8011500:	4605      	mov	r5, r0
 8011502:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011506:	b091      	sub	sp, #68	@ 0x44
 8011508:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 801150c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011510:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011514:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011518:	b30d      	cbz	r5, 801155e <rcl_take_request+0x66>
 801151a:	682b      	ldr	r3, [r5, #0]
 801151c:	b1fb      	cbz	r3, 801155e <rcl_take_request+0x66>
 801151e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011522:	b1e0      	cbz	r0, 801155e <rcl_take_request+0x66>
 8011524:	b397      	cbz	r7, 801158c <rcl_take_request+0x94>
 8011526:	2300      	movs	r3, #0
 8011528:	f88d 3017 	strb.w	r3, [sp, #23]
 801152c:	463a      	mov	r2, r7
 801152e:	f10d 0317 	add.w	r3, sp, #23
 8011532:	a906      	add	r1, sp, #24
 8011534:	f003 fad6 	bl	8014ae4 <rmw_take_request>
 8011538:	4606      	mov	r6, r0
 801153a:	b198      	cbz	r0, 8011564 <rcl_take_request+0x6c>
 801153c:	280a      	cmp	r0, #10
 801153e:	bf18      	it	ne
 8011540:	2601      	movne	r6, #1
 8011542:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8011546:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801154a:	46a6      	mov	lr, r4
 801154c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011550:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011554:	e88e 0003 	stmia.w	lr, {r0, r1}
 8011558:	4630      	mov	r0, r6
 801155a:	b011      	add	sp, #68	@ 0x44
 801155c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801155e:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8011562:	e7ee      	b.n	8011542 <rcl_take_request+0x4a>
 8011564:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8011568:	b193      	cbz	r3, 8011590 <rcl_take_request+0x98>
 801156a:	682b      	ldr	r3, [r5, #0]
 801156c:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8011570:	2800      	cmp	r0, #0
 8011572:	d0e6      	beq.n	8011542 <rcl_take_request+0x4a>
 8011574:	463a      	mov	r2, r7
 8011576:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 801157a:	ab0a      	add	r3, sp, #40	@ 0x28
 801157c:	e9cd 6700 	strd	r6, r7, [sp]
 8011580:	9302      	str	r3, [sp, #8]
 8011582:	2101      	movs	r1, #1
 8011584:	f000 f844 	bl	8011610 <rcl_send_service_event_message>
 8011588:	4606      	mov	r6, r0
 801158a:	e7da      	b.n	8011542 <rcl_take_request+0x4a>
 801158c:	260b      	movs	r6, #11
 801158e:	e7d8      	b.n	8011542 <rcl_take_request+0x4a>
 8011590:	f240 2659 	movw	r6, #601	@ 0x259
 8011594:	e7d5      	b.n	8011542 <rcl_take_request+0x4a>
 8011596:	bf00      	nop

08011598 <rcl_send_response>:
 8011598:	b350      	cbz	r0, 80115f0 <rcl_send_response+0x58>
 801159a:	b570      	push	{r4, r5, r6, lr}
 801159c:	6803      	ldr	r3, [r0, #0]
 801159e:	b084      	sub	sp, #16
 80115a0:	4604      	mov	r4, r0
 80115a2:	b1cb      	cbz	r3, 80115d8 <rcl_send_response+0x40>
 80115a4:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80115a8:	b1b0      	cbz	r0, 80115d8 <rcl_send_response+0x40>
 80115aa:	460e      	mov	r6, r1
 80115ac:	b1e9      	cbz	r1, 80115ea <rcl_send_response+0x52>
 80115ae:	4615      	mov	r5, r2
 80115b0:	b1da      	cbz	r2, 80115ea <rcl_send_response+0x52>
 80115b2:	f003 faf5 	bl	8014ba0 <rmw_send_response>
 80115b6:	b998      	cbnz	r0, 80115e0 <rcl_send_response+0x48>
 80115b8:	6823      	ldr	r3, [r4, #0]
 80115ba:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80115be:	b16b      	cbz	r3, 80115dc <rcl_send_response+0x44>
 80115c0:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 80115c4:	462a      	mov	r2, r5
 80115c6:	e9cd 0100 	strd	r0, r1, [sp]
 80115ca:	9602      	str	r6, [sp, #8]
 80115cc:	2102      	movs	r1, #2
 80115ce:	4618      	mov	r0, r3
 80115d0:	f000 f81e 	bl	8011610 <rcl_send_service_event_message>
 80115d4:	b004      	add	sp, #16
 80115d6:	bd70      	pop	{r4, r5, r6, pc}
 80115d8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80115dc:	b004      	add	sp, #16
 80115de:	bd70      	pop	{r4, r5, r6, pc}
 80115e0:	2802      	cmp	r0, #2
 80115e2:	bf18      	it	ne
 80115e4:	2001      	movne	r0, #1
 80115e6:	b004      	add	sp, #16
 80115e8:	bd70      	pop	{r4, r5, r6, pc}
 80115ea:	200b      	movs	r0, #11
 80115ec:	b004      	add	sp, #16
 80115ee:	bd70      	pop	{r4, r5, r6, pc}
 80115f0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop

080115f8 <rcl_service_is_valid>:
 80115f8:	b130      	cbz	r0, 8011608 <rcl_service_is_valid+0x10>
 80115fa:	6800      	ldr	r0, [r0, #0]
 80115fc:	b120      	cbz	r0, 8011608 <rcl_service_is_valid+0x10>
 80115fe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011602:	3800      	subs	r0, #0
 8011604:	bf18      	it	ne
 8011606:	2001      	movne	r0, #1
 8011608:	4770      	bx	lr
 801160a:	bf00      	nop
 801160c:	0000      	movs	r0, r0
	...

08011610 <rcl_send_service_event_message>:
 8011610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011612:	b093      	sub	sp, #76	@ 0x4c
 8011614:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8011616:	b17a      	cbz	r2, 8011638 <rcl_send_service_event_message+0x28>
 8011618:	b176      	cbz	r6, 8011638 <rcl_send_service_event_message+0x28>
 801161a:	4604      	mov	r4, r0
 801161c:	b150      	cbz	r0, 8011634 <rcl_send_service_event_message+0x24>
 801161e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8011622:	b13b      	cbz	r3, 8011634 <rcl_send_service_event_message+0x24>
 8011624:	68c0      	ldr	r0, [r0, #12]
 8011626:	460f      	mov	r7, r1
 8011628:	4615      	mov	r5, r2
 801162a:	f000 f8fb 	bl	8011824 <rcl_clock_valid>
 801162e:	b108      	cbz	r0, 8011634 <rcl_send_service_event_message+0x24>
 8011630:	7a23      	ldrb	r3, [r4, #8]
 8011632:	b92b      	cbnz	r3, 8011640 <rcl_send_service_event_message+0x30>
 8011634:	2501      	movs	r5, #1
 8011636:	e000      	b.n	801163a <rcl_send_service_event_message+0x2a>
 8011638:	250b      	movs	r5, #11
 801163a:	4628      	mov	r0, r5
 801163c:	b013      	add	sp, #76	@ 0x4c
 801163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011640:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8011644:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011648:	f10d 0c0c 	add.w	ip, sp, #12
 801164c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011650:	f8de 3000 	ldr.w	r3, [lr]
 8011654:	f8cc 3000 	str.w	r3, [ip]
 8011658:	a803      	add	r0, sp, #12
 801165a:	f7f8 fdd5 	bl	800a208 <rcutils_allocator_is_valid>
 801165e:	2800      	cmp	r0, #0
 8011660:	d0ea      	beq.n	8011638 <rcl_send_service_event_message+0x28>
 8011662:	6820      	ldr	r0, [r4, #0]
 8011664:	f7f7 fed2 	bl	800940c <rcl_publisher_is_valid>
 8011668:	2800      	cmp	r0, #0
 801166a:	d045      	beq.n	80116f8 <rcl_send_service_event_message+0xe8>
 801166c:	4669      	mov	r1, sp
 801166e:	68e0      	ldr	r0, [r4, #12]
 8011670:	f000 f950 	bl	8011914 <rcl_clock_get_now>
 8011674:	4601      	mov	r1, r0
 8011676:	2800      	cmp	r0, #0
 8011678:	d13b      	bne.n	80116f2 <rcl_send_service_event_message+0xe2>
 801167a:	2220      	movs	r2, #32
 801167c:	eb0d 0002 	add.w	r0, sp, r2
 8011680:	f006 fe48 	bl	8018314 <memset>
 8011684:	a324      	add	r3, pc, #144	@ (adr r3, 8011718 <rcl_send_service_event_message+0x108>)
 8011686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801168e:	f88d 7020 	strb.w	r7, [sp, #32]
 8011692:	f7ef f8b9 	bl	8000808 <__aeabi_ldivmod>
 8011696:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 801169a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 801169e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80116a2:	7a23      	ldrb	r3, [r4, #8]
 80116a4:	6830      	ldr	r0, [r6, #0]
 80116a6:	6871      	ldr	r1, [r6, #4]
 80116a8:	68b2      	ldr	r2, [r6, #8]
 80116aa:	2b01      	cmp	r3, #1
 80116ac:	68f3      	ldr	r3, [r6, #12]
 80116ae:	bf08      	it	eq
 80116b0:	2500      	moveq	r5, #0
 80116b2:	ae0b      	add	r6, sp, #44	@ 0x2c
 80116b4:	2f01      	cmp	r7, #1
 80116b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80116b8:	d821      	bhi.n	80116fe <rcl_send_service_event_message+0xee>
 80116ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80116be:	462a      	mov	r2, r5
 80116c0:	a808      	add	r0, sp, #32
 80116c2:	699d      	ldr	r5, [r3, #24]
 80116c4:	a903      	add	r1, sp, #12
 80116c6:	2300      	movs	r3, #0
 80116c8:	47a8      	blx	r5
 80116ca:	4606      	mov	r6, r0
 80116cc:	2e00      	cmp	r6, #0
 80116ce:	d0b1      	beq.n	8011634 <rcl_send_service_event_message+0x24>
 80116d0:	4631      	mov	r1, r6
 80116d2:	6820      	ldr	r0, [r4, #0]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f7f7 fe73 	bl	80093c0 <rcl_publish>
 80116da:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80116de:	4605      	mov	r5, r0
 80116e0:	69db      	ldr	r3, [r3, #28]
 80116e2:	a903      	add	r1, sp, #12
 80116e4:	4630      	mov	r0, r6
 80116e6:	4798      	blx	r3
 80116e8:	2d00      	cmp	r5, #0
 80116ea:	d0a6      	beq.n	801163a <rcl_send_service_event_message+0x2a>
 80116ec:	f7f8 fdb8 	bl	800a260 <rcutils_reset_error>
 80116f0:	e7a3      	b.n	801163a <rcl_send_service_event_message+0x2a>
 80116f2:	f7f8 fdb5 	bl	800a260 <rcutils_reset_error>
 80116f6:	e79d      	b.n	8011634 <rcl_send_service_event_message+0x24>
 80116f8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80116fc:	e79d      	b.n	801163a <rcl_send_service_event_message+0x2a>
 80116fe:	1eb9      	subs	r1, r7, #2
 8011700:	2901      	cmp	r1, #1
 8011702:	d8f6      	bhi.n	80116f2 <rcl_send_service_event_message+0xe2>
 8011704:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8011708:	462b      	mov	r3, r5
 801170a:	a808      	add	r0, sp, #32
 801170c:	6995      	ldr	r5, [r2, #24]
 801170e:	a903      	add	r1, sp, #12
 8011710:	2200      	movs	r2, #0
 8011712:	47a8      	blx	r5
 8011714:	4606      	mov	r6, r0
 8011716:	e7d9      	b.n	80116cc <rcl_send_service_event_message+0xbc>
 8011718:	3b9aca00 	.word	0x3b9aca00
 801171c:	00000000 	.word	0x00000000

08011720 <rcl_take>:
 8011720:	2800      	cmp	r0, #0
 8011722:	d04b      	beq.n	80117bc <rcl_take+0x9c>
 8011724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011728:	4615      	mov	r5, r2
 801172a:	6802      	ldr	r2, [r0, #0]
 801172c:	b0a0      	sub	sp, #128	@ 0x80
 801172e:	4604      	mov	r4, r0
 8011730:	2a00      	cmp	r2, #0
 8011732:	d03b      	beq.n	80117ac <rcl_take+0x8c>
 8011734:	461f      	mov	r7, r3
 8011736:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 801173a:	2b00      	cmp	r3, #0
 801173c:	d036      	beq.n	80117ac <rcl_take+0x8c>
 801173e:	460e      	mov	r6, r1
 8011740:	2900      	cmp	r1, #0
 8011742:	d039      	beq.n	80117b8 <rcl_take+0x98>
 8011744:	2d00      	cmp	r5, #0
 8011746:	d03d      	beq.n	80117c4 <rcl_take+0xa4>
 8011748:	a802      	add	r0, sp, #8
 801174a:	f002 fbd3 	bl	8013ef4 <rmw_get_zero_initialized_message_info>
 801174e:	6823      	ldr	r3, [r4, #0]
 8011750:	f10d 0c08 	add.w	ip, sp, #8
 8011754:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 8011758:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801175c:	46ae      	mov	lr, r5
 801175e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011762:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011766:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801176a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801176e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011772:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011776:	462b      	mov	r3, r5
 8011778:	e88e 0003 	stmia.w	lr, {r0, r1}
 801177c:	f04f 0800 	mov.w	r8, #0
 8011780:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 8011784:	4631      	mov	r1, r6
 8011786:	4620      	mov	r0, r4
 8011788:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 801178c:	9700      	str	r7, [sp, #0]
 801178e:	f003 fb4f 	bl	8014e30 <rmw_take_with_info>
 8011792:	4603      	mov	r3, r0
 8011794:	b9c0      	cbnz	r0, 80117c8 <rcl_take+0xa8>
 8011796:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 801179a:	f240 1291 	movw	r2, #401	@ 0x191
 801179e:	2900      	cmp	r1, #0
 80117a0:	bf08      	it	eq
 80117a2:	4613      	moveq	r3, r2
 80117a4:	4618      	mov	r0, r3
 80117a6:	b020      	add	sp, #128	@ 0x80
 80117a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117ac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80117b0:	4618      	mov	r0, r3
 80117b2:	b020      	add	sp, #128	@ 0x80
 80117b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117b8:	230b      	movs	r3, #11
 80117ba:	e7f3      	b.n	80117a4 <rcl_take+0x84>
 80117bc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80117c0:	4618      	mov	r0, r3
 80117c2:	4770      	bx	lr
 80117c4:	ad12      	add	r5, sp, #72	@ 0x48
 80117c6:	e7bf      	b.n	8011748 <rcl_take+0x28>
 80117c8:	f7ff f990 	bl	8010aec <rcl_convert_rmw_ret_to_rcl_ret>
 80117cc:	4603      	mov	r3, r0
 80117ce:	e7e9      	b.n	80117a4 <rcl_take+0x84>

080117d0 <rcl_subscription_get_rmw_handle>:
 80117d0:	b118      	cbz	r0, 80117da <rcl_subscription_get_rmw_handle+0xa>
 80117d2:	6800      	ldr	r0, [r0, #0]
 80117d4:	b108      	cbz	r0, 80117da <rcl_subscription_get_rmw_handle+0xa>
 80117d6:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 80117da:	4770      	bx	lr

080117dc <rcl_subscription_is_valid>:
 80117dc:	b130      	cbz	r0, 80117ec <rcl_subscription_is_valid+0x10>
 80117de:	6800      	ldr	r0, [r0, #0]
 80117e0:	b120      	cbz	r0, 80117ec <rcl_subscription_is_valid+0x10>
 80117e2:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 80117e6:	3800      	subs	r0, #0
 80117e8:	bf18      	it	ne
 80117ea:	2001      	movne	r0, #1
 80117ec:	4770      	bx	lr
 80117ee:	bf00      	nop

080117f0 <rcl_get_system_time>:
 80117f0:	4608      	mov	r0, r1
 80117f2:	f7f8 bd51 	b.w	800a298 <rcutils_system_time_now>
 80117f6:	bf00      	nop

080117f8 <rcl_get_steady_time>:
 80117f8:	4608      	mov	r0, r1
 80117fa:	f7f8 bd77 	b.w	800a2ec <rcutils_steady_time_now>
 80117fe:	bf00      	nop

08011800 <rcl_get_ros_time>:
 8011800:	7a03      	ldrb	r3, [r0, #8]
 8011802:	b510      	push	{r4, lr}
 8011804:	460c      	mov	r4, r1
 8011806:	b143      	cbz	r3, 801181a <rcl_get_ros_time+0x1a>
 8011808:	2105      	movs	r1, #5
 801180a:	f001 ff81 	bl	8013710 <__atomic_load_8>
 801180e:	4602      	mov	r2, r0
 8011810:	460b      	mov	r3, r1
 8011812:	e9c4 2300 	strd	r2, r3, [r4]
 8011816:	2000      	movs	r0, #0
 8011818:	bd10      	pop	{r4, pc}
 801181a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801181e:	4608      	mov	r0, r1
 8011820:	f7f8 bd3a 	b.w	800a298 <rcutils_system_time_now>

08011824 <rcl_clock_valid>:
 8011824:	b138      	cbz	r0, 8011836 <rcl_clock_valid+0x12>
 8011826:	7803      	ldrb	r3, [r0, #0]
 8011828:	b123      	cbz	r3, 8011834 <rcl_clock_valid+0x10>
 801182a:	68c0      	ldr	r0, [r0, #12]
 801182c:	3800      	subs	r0, #0
 801182e:	bf18      	it	ne
 8011830:	2001      	movne	r0, #1
 8011832:	4770      	bx	lr
 8011834:	4618      	mov	r0, r3
 8011836:	4770      	bx	lr

08011838 <rcl_clock_init>:
 8011838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801183a:	4605      	mov	r5, r0
 801183c:	4610      	mov	r0, r2
 801183e:	4614      	mov	r4, r2
 8011840:	460e      	mov	r6, r1
 8011842:	f7f8 fce1 	bl	800a208 <rcutils_allocator_is_valid>
 8011846:	b128      	cbz	r0, 8011854 <rcl_clock_init+0x1c>
 8011848:	2d03      	cmp	r5, #3
 801184a:	d803      	bhi.n	8011854 <rcl_clock_init+0x1c>
 801184c:	e8df f005 	tbb	[pc, r5]
 8011850:	044c291a 	.word	0x044c291a
 8011854:	200b      	movs	r0, #11
 8011856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011858:	2e00      	cmp	r6, #0
 801185a:	d0fb      	beq.n	8011854 <rcl_clock_init+0x1c>
 801185c:	2c00      	cmp	r4, #0
 801185e:	d0f9      	beq.n	8011854 <rcl_clock_init+0x1c>
 8011860:	2300      	movs	r3, #0
 8011862:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011866:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 801190c <rcl_clock_init+0xd4>
 801186a:	6133      	str	r3, [r6, #16]
 801186c:	f106 0514 	add.w	r5, r6, #20
 8011870:	2703      	movs	r7, #3
 8011872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011876:	6823      	ldr	r3, [r4, #0]
 8011878:	602b      	str	r3, [r5, #0]
 801187a:	f8c6 c00c 	str.w	ip, [r6, #12]
 801187e:	7037      	strb	r7, [r6, #0]
 8011880:	2000      	movs	r0, #0
 8011882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011884:	2e00      	cmp	r6, #0
 8011886:	d0e5      	beq.n	8011854 <rcl_clock_init+0x1c>
 8011888:	2300      	movs	r3, #0
 801188a:	7033      	strb	r3, [r6, #0]
 801188c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011890:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011896:	f106 0514 	add.w	r5, r6, #20
 801189a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801189c:	6823      	ldr	r3, [r4, #0]
 801189e:	602b      	str	r3, [r5, #0]
 80118a0:	e7ee      	b.n	8011880 <rcl_clock_init+0x48>
 80118a2:	2e00      	cmp	r6, #0
 80118a4:	d0d6      	beq.n	8011854 <rcl_clock_init+0x1c>
 80118a6:	2c00      	cmp	r4, #0
 80118a8:	d0d4      	beq.n	8011854 <rcl_clock_init+0x1c>
 80118aa:	2700      	movs	r7, #0
 80118ac:	7037      	strb	r7, [r6, #0]
 80118ae:	46a4      	mov	ip, r4
 80118b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80118b4:	f106 0514 	add.w	r5, r6, #20
 80118b8:	e9c6 7701 	strd	r7, r7, [r6, #4]
 80118bc:	e9c6 7703 	strd	r7, r7, [r6, #12]
 80118c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80118c2:	f8dc 3000 	ldr.w	r3, [ip]
 80118c6:	602b      	str	r3, [r5, #0]
 80118c8:	6921      	ldr	r1, [r4, #16]
 80118ca:	6823      	ldr	r3, [r4, #0]
 80118cc:	2010      	movs	r0, #16
 80118ce:	4798      	blx	r3
 80118d0:	6130      	str	r0, [r6, #16]
 80118d2:	b1b8      	cbz	r0, 8011904 <rcl_clock_init+0xcc>
 80118d4:	2200      	movs	r2, #0
 80118d6:	2300      	movs	r3, #0
 80118d8:	e9c0 2300 	strd	r2, r3, [r0]
 80118dc:	4a0a      	ldr	r2, [pc, #40]	@ (8011908 <rcl_clock_init+0xd0>)
 80118de:	7207      	strb	r7, [r0, #8]
 80118e0:	2301      	movs	r3, #1
 80118e2:	60f2      	str	r2, [r6, #12]
 80118e4:	7033      	strb	r3, [r6, #0]
 80118e6:	e7cb      	b.n	8011880 <rcl_clock_init+0x48>
 80118e8:	2e00      	cmp	r6, #0
 80118ea:	d0b3      	beq.n	8011854 <rcl_clock_init+0x1c>
 80118ec:	2c00      	cmp	r4, #0
 80118ee:	d0b1      	beq.n	8011854 <rcl_clock_init+0x1c>
 80118f0:	2300      	movs	r3, #0
 80118f2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80118f6:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8011910 <rcl_clock_init+0xd8>
 80118fa:	6133      	str	r3, [r6, #16]
 80118fc:	f106 0514 	add.w	r5, r6, #20
 8011900:	2702      	movs	r7, #2
 8011902:	e7b6      	b.n	8011872 <rcl_clock_init+0x3a>
 8011904:	200a      	movs	r0, #10
 8011906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011908:	08011801 	.word	0x08011801
 801190c:	080117f9 	.word	0x080117f9
 8011910:	080117f1 	.word	0x080117f1

08011914 <rcl_clock_get_now>:
 8011914:	b140      	cbz	r0, 8011928 <rcl_clock_get_now+0x14>
 8011916:	b139      	cbz	r1, 8011928 <rcl_clock_get_now+0x14>
 8011918:	7803      	ldrb	r3, [r0, #0]
 801191a:	b11b      	cbz	r3, 8011924 <rcl_clock_get_now+0x10>
 801191c:	68c3      	ldr	r3, [r0, #12]
 801191e:	b10b      	cbz	r3, 8011924 <rcl_clock_get_now+0x10>
 8011920:	6900      	ldr	r0, [r0, #16]
 8011922:	4718      	bx	r3
 8011924:	2001      	movs	r0, #1
 8011926:	4770      	bx	lr
 8011928:	200b      	movs	r0, #11
 801192a:	4770      	bx	lr

0801192c <rcl_is_enabled_ros_time_override>:
 801192c:	b158      	cbz	r0, 8011946 <rcl_is_enabled_ros_time_override+0x1a>
 801192e:	b151      	cbz	r1, 8011946 <rcl_is_enabled_ros_time_override+0x1a>
 8011930:	7803      	ldrb	r3, [r0, #0]
 8011932:	2b01      	cmp	r3, #1
 8011934:	d105      	bne.n	8011942 <rcl_is_enabled_ros_time_override+0x16>
 8011936:	6902      	ldr	r2, [r0, #16]
 8011938:	b11a      	cbz	r2, 8011942 <rcl_is_enabled_ros_time_override+0x16>
 801193a:	7a13      	ldrb	r3, [r2, #8]
 801193c:	700b      	strb	r3, [r1, #0]
 801193e:	2000      	movs	r0, #0
 8011940:	4770      	bx	lr
 8011942:	2001      	movs	r0, #1
 8011944:	4770      	bx	lr
 8011946:	200b      	movs	r0, #11
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop

0801194c <rcl_clock_add_jump_callback>:
 801194c:	b082      	sub	sp, #8
 801194e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011952:	a906      	add	r1, sp, #24
 8011954:	e881 000c 	stmia.w	r1, {r2, r3}
 8011958:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 801195c:	b320      	cbz	r0, 80119a8 <rcl_clock_add_jump_callback+0x5c>
 801195e:	4605      	mov	r5, r0
 8011960:	3014      	adds	r0, #20
 8011962:	f7f8 fc51 	bl	800a208 <rcutils_allocator_is_valid>
 8011966:	b1f8      	cbz	r0, 80119a8 <rcl_clock_add_jump_callback+0x5c>
 8011968:	b1f7      	cbz	r7, 80119a8 <rcl_clock_add_jump_callback+0x5c>
 801196a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801196c:	2b00      	cmp	r3, #0
 801196e:	db1b      	blt.n	80119a8 <rcl_clock_add_jump_callback+0x5c>
 8011970:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011974:	2a01      	cmp	r2, #1
 8011976:	f173 0300 	sbcs.w	r3, r3, #0
 801197a:	da15      	bge.n	80119a8 <rcl_clock_add_jump_callback+0x5c>
 801197c:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 8011980:	2c00      	cmp	r4, #0
 8011982:	d042      	beq.n	8011a0a <rcl_clock_add_jump_callback+0xbe>
 8011984:	4603      	mov	r3, r0
 8011986:	2200      	movs	r2, #0
 8011988:	e003      	b.n	8011992 <rcl_clock_add_jump_callback+0x46>
 801198a:	4294      	cmp	r4, r2
 801198c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8011990:	d011      	beq.n	80119b6 <rcl_clock_add_jump_callback+0x6a>
 8011992:	6819      	ldr	r1, [r3, #0]
 8011994:	42b9      	cmp	r1, r7
 8011996:	f102 0201 	add.w	r2, r2, #1
 801199a:	d1f6      	bne.n	801198a <rcl_clock_add_jump_callback+0x3e>
 801199c:	6a19      	ldr	r1, [r3, #32]
 801199e:	42b1      	cmp	r1, r6
 80119a0:	d1f3      	bne.n	801198a <rcl_clock_add_jump_callback+0x3e>
 80119a2:	f04f 0e01 	mov.w	lr, #1
 80119a6:	e001      	b.n	80119ac <rcl_clock_add_jump_callback+0x60>
 80119a8:	f04f 0e0b 	mov.w	lr, #11
 80119ac:	4670      	mov	r0, lr
 80119ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119b2:	b002      	add	sp, #8
 80119b4:	4770      	bx	lr
 80119b6:	3401      	adds	r4, #1
 80119b8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80119bc:	00e1      	lsls	r1, r4, #3
 80119be:	69eb      	ldr	r3, [r5, #28]
 80119c0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80119c2:	4798      	blx	r3
 80119c4:	b1f0      	cbz	r0, 8011a04 <rcl_clock_add_jump_callback+0xb8>
 80119c6:	68ab      	ldr	r3, [r5, #8]
 80119c8:	6068      	str	r0, [r5, #4]
 80119ca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80119ce:	f10d 0c18 	add.w	ip, sp, #24
 80119d2:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 80119d6:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 80119da:	f103 0801 	add.w	r8, r3, #1
 80119de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80119e2:	f104 0708 	add.w	r7, r4, #8
 80119e6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80119e8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80119ec:	f04f 0e00 	mov.w	lr, #0
 80119f0:	e887 0003 	stmia.w	r7, {r0, r1}
 80119f4:	6226      	str	r6, [r4, #32]
 80119f6:	4670      	mov	r0, lr
 80119f8:	f8c5 8008 	str.w	r8, [r5, #8]
 80119fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a00:	b002      	add	sp, #8
 8011a02:	4770      	bx	lr
 8011a04:	f04f 0e0a 	mov.w	lr, #10
 8011a08:	e7d0      	b.n	80119ac <rcl_clock_add_jump_callback+0x60>
 8011a0a:	2128      	movs	r1, #40	@ 0x28
 8011a0c:	e7d7      	b.n	80119be <rcl_clock_add_jump_callback+0x72>
 8011a0e:	bf00      	nop

08011a10 <rcl_clock_remove_jump_callback>:
 8011a10:	2800      	cmp	r0, #0
 8011a12:	d05a      	beq.n	8011aca <rcl_clock_remove_jump_callback+0xba>
 8011a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a18:	4605      	mov	r5, r0
 8011a1a:	3014      	adds	r0, #20
 8011a1c:	460f      	mov	r7, r1
 8011a1e:	4692      	mov	sl, r2
 8011a20:	f7f8 fbf2 	bl	800a208 <rcutils_allocator_is_valid>
 8011a24:	2800      	cmp	r0, #0
 8011a26:	d03f      	beq.n	8011aa8 <rcl_clock_remove_jump_callback+0x98>
 8011a28:	2f00      	cmp	r7, #0
 8011a2a:	d03d      	beq.n	8011aa8 <rcl_clock_remove_jump_callback+0x98>
 8011a2c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8011a30:	f1b8 0f00 	cmp.w	r8, #0
 8011a34:	d00c      	beq.n	8011a50 <rcl_clock_remove_jump_callback+0x40>
 8011a36:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011a3a:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8011a3e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8011a42:	464c      	mov	r4, r9
 8011a44:	6823      	ldr	r3, [r4, #0]
 8011a46:	42bb      	cmp	r3, r7
 8011a48:	d005      	beq.n	8011a56 <rcl_clock_remove_jump_callback+0x46>
 8011a4a:	3428      	adds	r4, #40	@ 0x28
 8011a4c:	42b4      	cmp	r4, r6
 8011a4e:	d1f9      	bne.n	8011a44 <rcl_clock_remove_jump_callback+0x34>
 8011a50:	2001      	movs	r0, #1
 8011a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a56:	6a23      	ldr	r3, [r4, #32]
 8011a58:	3428      	adds	r4, #40	@ 0x28
 8011a5a:	42b4      	cmp	r4, r6
 8011a5c:	d02c      	beq.n	8011ab8 <rcl_clock_remove_jump_callback+0xa8>
 8011a5e:	4553      	cmp	r3, sl
 8011a60:	d1f0      	bne.n	8011a44 <rcl_clock_remove_jump_callback+0x34>
 8011a62:	46a6      	mov	lr, r4
 8011a64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a68:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8011a6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011a74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011a78:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011a7c:	3428      	adds	r4, #40	@ 0x28
 8011a7e:	42a6      	cmp	r6, r4
 8011a80:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011a84:	d1ed      	bne.n	8011a62 <rcl_clock_remove_jump_callback+0x52>
 8011a86:	f108 34ff 	add.w	r4, r8, #4294967295
 8011a8a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011a8c:	60ac      	str	r4, [r5, #8]
 8011a8e:	b174      	cbz	r4, 8011aae <rcl_clock_remove_jump_callback+0x9e>
 8011a90:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8011a94:	00e1      	lsls	r1, r4, #3
 8011a96:	69eb      	ldr	r3, [r5, #28]
 8011a98:	4648      	mov	r0, r9
 8011a9a:	4798      	blx	r3
 8011a9c:	4604      	mov	r4, r0
 8011a9e:	b1b0      	cbz	r0, 8011ace <rcl_clock_remove_jump_callback+0xbe>
 8011aa0:	606c      	str	r4, [r5, #4]
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa8:	200b      	movs	r0, #11
 8011aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aae:	69ab      	ldr	r3, [r5, #24]
 8011ab0:	4611      	mov	r1, r2
 8011ab2:	4648      	mov	r0, r9
 8011ab4:	4798      	blx	r3
 8011ab6:	e7f3      	b.n	8011aa0 <rcl_clock_remove_jump_callback+0x90>
 8011ab8:	4553      	cmp	r3, sl
 8011aba:	d1c9      	bne.n	8011a50 <rcl_clock_remove_jump_callback+0x40>
 8011abc:	f108 34ff 	add.w	r4, r8, #4294967295
 8011ac0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8011ac2:	60ac      	str	r4, [r5, #8]
 8011ac4:	2c00      	cmp	r4, #0
 8011ac6:	d1e3      	bne.n	8011a90 <rcl_clock_remove_jump_callback+0x80>
 8011ac8:	e7f1      	b.n	8011aae <rcl_clock_remove_jump_callback+0x9e>
 8011aca:	200b      	movs	r0, #11
 8011acc:	4770      	bx	lr
 8011ace:	200a      	movs	r0, #10
 8011ad0:	e7eb      	b.n	8011aaa <rcl_clock_remove_jump_callback+0x9a>
 8011ad2:	bf00      	nop

08011ad4 <_rcl_timer_time_jump>:
 8011ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad8:	4681      	mov	r9, r0
 8011ada:	b087      	sub	sp, #28
 8011adc:	4614      	mov	r4, r2
 8011ade:	b131      	cbz	r1, 8011aee <_rcl_timer_time_jump+0x1a>
 8011ae0:	7803      	ldrb	r3, [r0, #0]
 8011ae2:	3b02      	subs	r3, #2
 8011ae4:	2b01      	cmp	r3, #1
 8011ae6:	d93e      	bls.n	8011b66 <_rcl_timer_time_jump+0x92>
 8011ae8:	b007      	add	sp, #28
 8011aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aee:	6810      	ldr	r0, [r2, #0]
 8011af0:	a904      	add	r1, sp, #16
 8011af2:	f7ff ff0f 	bl	8011914 <rcl_clock_get_now>
 8011af6:	2800      	cmp	r0, #0
 8011af8:	d1f6      	bne.n	8011ae8 <_rcl_timer_time_jump+0x14>
 8011afa:	f104 0a20 	add.w	sl, r4, #32
 8011afe:	2105      	movs	r1, #5
 8011b00:	4650      	mov	r0, sl
 8011b02:	f001 fe05 	bl	8013710 <__atomic_load_8>
 8011b06:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 8011b0a:	4680      	mov	r8, r0
 8011b0c:	460e      	mov	r6, r1
 8011b0e:	4658      	mov	r0, fp
 8011b10:	2105      	movs	r1, #5
 8011b12:	f001 fdfd 	bl	8013710 <__atomic_load_8>
 8011b16:	4607      	mov	r7, r0
 8011b18:	460d      	mov	r5, r1
 8011b1a:	f104 0018 	add.w	r0, r4, #24
 8011b1e:	2105      	movs	r1, #5
 8011b20:	f001 fdf6 	bl	8013710 <__atomic_load_8>
 8011b24:	f899 3000 	ldrb.w	r3, [r9]
 8011b28:	9003      	str	r0, [sp, #12]
 8011b2a:	3b02      	subs	r3, #2
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	4689      	mov	r9, r1
 8011b30:	d935      	bls.n	8011b9e <_rcl_timer_time_jump+0xca>
 8011b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b36:	42ba      	cmp	r2, r7
 8011b38:	eb73 0505 	sbcs.w	r5, r3, r5
 8011b3c:	da57      	bge.n	8011bee <_rcl_timer_time_jump+0x11a>
 8011b3e:	4542      	cmp	r2, r8
 8011b40:	eb73 0606 	sbcs.w	r6, r3, r6
 8011b44:	dad0      	bge.n	8011ae8 <_rcl_timer_time_jump+0x14>
 8011b46:	1882      	adds	r2, r0, r2
 8011b48:	f04f 0405 	mov.w	r4, #5
 8011b4c:	eb43 0309 	adc.w	r3, r3, r9
 8011b50:	4658      	mov	r0, fp
 8011b52:	9400      	str	r4, [sp, #0]
 8011b54:	f001 fe12 	bl	801377c <__atomic_store_8>
 8011b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b5c:	9400      	str	r4, [sp, #0]
 8011b5e:	4650      	mov	r0, sl
 8011b60:	f001 fe0c 	bl	801377c <__atomic_store_8>
 8011b64:	e7c0      	b.n	8011ae8 <_rcl_timer_time_jump+0x14>
 8011b66:	6810      	ldr	r0, [r2, #0]
 8011b68:	a904      	add	r1, sp, #16
 8011b6a:	f7ff fed3 	bl	8011914 <rcl_clock_get_now>
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d1ba      	bne.n	8011ae8 <_rcl_timer_time_jump+0x14>
 8011b72:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011b76:	4313      	orrs	r3, r2
 8011b78:	d0b6      	beq.n	8011ae8 <_rcl_timer_time_jump+0x14>
 8011b7a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011b7e:	2105      	movs	r1, #5
 8011b80:	f001 fdc6 	bl	8013710 <__atomic_load_8>
 8011b84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b88:	1a82      	subs	r2, r0, r2
 8011b8a:	f04f 0005 	mov.w	r0, #5
 8011b8e:	9000      	str	r0, [sp, #0]
 8011b90:	eb61 0303 	sbc.w	r3, r1, r3
 8011b94:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8011b98:	f001 fdf0 	bl	801377c <__atomic_store_8>
 8011b9c:	e7a4      	b.n	8011ae8 <_rcl_timer_time_jump+0x14>
 8011b9e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	d0a0      	beq.n	8011ae8 <_rcl_timer_time_jump+0x14>
 8011ba6:	2605      	movs	r6, #5
 8011ba8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8011bac:	2300      	movs	r3, #0
 8011bae:	9600      	str	r6, [sp, #0]
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f001 fe19 	bl	80137e8 <__atomic_exchange_8>
 8011bb6:	ea51 0300 	orrs.w	r3, r1, r0
 8011bba:	4604      	mov	r4, r0
 8011bbc:	460d      	mov	r5, r1
 8011bbe:	d093      	beq.n	8011ae8 <_rcl_timer_time_jump+0x14>
 8011bc0:	9a04      	ldr	r2, [sp, #16]
 8011bc2:	9b05      	ldr	r3, [sp, #20]
 8011bc4:	9600      	str	r6, [sp, #0]
 8011bc6:	1b12      	subs	r2, r2, r4
 8011bc8:	eb63 0301 	sbc.w	r3, r3, r1
 8011bcc:	9903      	ldr	r1, [sp, #12]
 8011bce:	1852      	adds	r2, r2, r1
 8011bd0:	eb43 0309 	adc.w	r3, r3, r9
 8011bd4:	4658      	mov	r0, fp
 8011bd6:	f001 fdd1 	bl	801377c <__atomic_store_8>
 8011bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011bde:	1b12      	subs	r2, r2, r4
 8011be0:	9600      	str	r6, [sp, #0]
 8011be2:	eb63 0305 	sbc.w	r3, r3, r5
 8011be6:	4650      	mov	r0, sl
 8011be8:	f001 fdc8 	bl	801377c <__atomic_store_8>
 8011bec:	e77c      	b.n	8011ae8 <_rcl_timer_time_jump+0x14>
 8011bee:	f104 0008 	add.w	r0, r4, #8
 8011bf2:	f005 f9ff 	bl	8016ff4 <rcl_trigger_guard_condition>
 8011bf6:	e777      	b.n	8011ae8 <_rcl_timer_time_jump+0x14>

08011bf8 <rcl_get_zero_initialized_timer>:
 8011bf8:	4b01      	ldr	r3, [pc, #4]	@ (8011c00 <rcl_get_zero_initialized_timer+0x8>)
 8011bfa:	6818      	ldr	r0, [r3, #0]
 8011bfc:	4770      	bx	lr
 8011bfe:	bf00      	nop
 8011c00:	0801a9e4 	.word	0x0801a9e4
 8011c04:	00000000 	.word	0x00000000

08011c08 <rcl_timer_init2>:
 8011c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c0c:	b0ae      	sub	sp, #184	@ 0xb8
 8011c0e:	4604      	mov	r4, r0
 8011c10:	a839      	add	r0, sp, #228	@ 0xe4
 8011c12:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 8011c16:	460d      	mov	r5, r1
 8011c18:	4691      	mov	r9, r2
 8011c1a:	f7f8 faf5 	bl	800a208 <rcutils_allocator_is_valid>
 8011c1e:	2800      	cmp	r0, #0
 8011c20:	f000 8097 	beq.w	8011d52 <rcl_timer_init2+0x14a>
 8011c24:	2c00      	cmp	r4, #0
 8011c26:	f000 8094 	beq.w	8011d52 <rcl_timer_init2+0x14a>
 8011c2a:	2d00      	cmp	r5, #0
 8011c2c:	f000 8091 	beq.w	8011d52 <rcl_timer_init2+0x14a>
 8011c30:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f2c0 808d 	blt.w	8011d52 <rcl_timer_init2+0x14a>
 8011c38:	6823      	ldr	r3, [r4, #0]
 8011c3a:	b123      	cbz	r3, 8011c46 <rcl_timer_init2+0x3e>
 8011c3c:	2664      	movs	r6, #100	@ 0x64
 8011c3e:	4630      	mov	r0, r6
 8011c40:	b02e      	add	sp, #184	@ 0xb8
 8011c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c46:	a908      	add	r1, sp, #32
 8011c48:	4628      	mov	r0, r5
 8011c4a:	f7ff fe63 	bl	8011914 <rcl_clock_get_now>
 8011c4e:	4606      	mov	r6, r0
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d1f4      	bne.n	8011c3e <rcl_timer_init2+0x36>
 8011c54:	ae06      	add	r6, sp, #24
 8011c56:	4630      	mov	r0, r6
 8011c58:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 8011c5c:	f005 f8ec 	bl	8016e38 <rcl_get_zero_initialized_guard_condition>
 8011c60:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011c64:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 8011c68:	ae0b      	add	r6, sp, #44	@ 0x2c
 8011c6a:	e88a 0003 	stmia.w	sl, {r0, r1}
 8011c6e:	4630      	mov	r0, r6
 8011c70:	f005 f9ba 	bl	8016fe8 <rcl_guard_condition_get_default_options>
 8011c74:	ab0d      	add	r3, sp, #52	@ 0x34
 8011c76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011c7a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011c7e:	4649      	mov	r1, r9
 8011c80:	e896 000c 	ldmia.w	r6, {r2, r3}
 8011c84:	4650      	mov	r0, sl
 8011c86:	f005 f8e1 	bl	8016e4c <rcl_guard_condition_init>
 8011c8a:	4606      	mov	r6, r0
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	d1d6      	bne.n	8011c3e <rcl_timer_init2+0x36>
 8011c90:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8011c92:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c94:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 8011c98:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8011c9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011ca0:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 8011ca2:	902a      	str	r0, [sp, #168]	@ 0xa8
 8011ca4:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
 8011ca8:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 8011d80 <rcl_timer_init2+0x178>
 8011cac:	19d0      	adds	r0, r2, r7
 8011cae:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 8011cb0:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 8011cb4:	eb43 0107 	adc.w	r1, r3, r7
 8011cb8:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8011cbc:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8011cc0:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8011cc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011cc8:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 8011ccc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011cd0:	f8dc 3000 	ldr.w	r3, [ip]
 8011cd4:	f8ce 3000 	str.w	r3, [lr]
 8011cd8:	f088 0801 	eor.w	r8, r8, #1
 8011cdc:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	2060      	movs	r0, #96	@ 0x60
 8011ce4:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011ce6:	4798      	blx	r3
 8011ce8:	4680      	mov	r8, r0
 8011cea:	6020      	str	r0, [r4, #0]
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d035      	beq.n	8011d5c <rcl_timer_init2+0x154>
 8011cf0:	a916      	add	r1, sp, #88	@ 0x58
 8011cf2:	2260      	movs	r2, #96	@ 0x60
 8011cf4:	f006 fbe9 	bl	80184ca <memcpy>
 8011cf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	2b01      	cmp	r3, #1
 8011cfe:	d19e      	bne.n	8011c3e <rcl_timer_init2+0x36>
 8011d00:	2001      	movs	r0, #1
 8011d02:	2100      	movs	r1, #0
 8011d04:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8011d08:	f04f 30ff 	mov.w	r0, #4294967295
 8011d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8011d10:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8011d14:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8011d18:	4b1b      	ldr	r3, [pc, #108]	@ (8011d88 <rcl_timer_init2+0x180>)
 8011d1a:	9304      	str	r3, [sp, #16]
 8011d1c:	f8cd 8014 	str.w	r8, [sp, #20]
 8011d20:	ab12      	add	r3, sp, #72	@ 0x48
 8011d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011d24:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8011d28:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8011d32:	f7ff fe0b 	bl	801194c <rcl_clock_add_jump_callback>
 8011d36:	4605      	mov	r5, r0
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	d080      	beq.n	8011c3e <rcl_timer_init2+0x36>
 8011d3c:	4650      	mov	r0, sl
 8011d3e:	f005 f931 	bl	8016fa4 <rcl_guard_condition_fini>
 8011d42:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8011d44:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8011d46:	6820      	ldr	r0, [r4, #0]
 8011d48:	4798      	blx	r3
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	6023      	str	r3, [r4, #0]
 8011d4e:	462e      	mov	r6, r5
 8011d50:	e775      	b.n	8011c3e <rcl_timer_init2+0x36>
 8011d52:	260b      	movs	r6, #11
 8011d54:	4630      	mov	r0, r6
 8011d56:	b02e      	add	sp, #184	@ 0xb8
 8011d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d5c:	4650      	mov	r0, sl
 8011d5e:	f005 f921 	bl	8016fa4 <rcl_guard_condition_fini>
 8011d62:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	d001      	beq.n	8011d6e <rcl_timer_init2+0x166>
 8011d6a:	260a      	movs	r6, #10
 8011d6c:	e767      	b.n	8011c3e <rcl_timer_init2+0x36>
 8011d6e:	4906      	ldr	r1, [pc, #24]	@ (8011d88 <rcl_timer_init2+0x180>)
 8011d70:	4622      	mov	r2, r4
 8011d72:	4628      	mov	r0, r5
 8011d74:	f7ff fe4c 	bl	8011a10 <rcl_clock_remove_jump_callback>
 8011d78:	e7f7      	b.n	8011d6a <rcl_timer_init2+0x162>
 8011d7a:	bf00      	nop
 8011d7c:	f3af 8000 	nop.w
	...
 8011d88:	08011ad5 	.word	0x08011ad5

08011d8c <rcl_timer_clock>:
 8011d8c:	b130      	cbz	r0, 8011d9c <rcl_timer_clock+0x10>
 8011d8e:	b129      	cbz	r1, 8011d9c <rcl_timer_clock+0x10>
 8011d90:	6803      	ldr	r3, [r0, #0]
 8011d92:	b12b      	cbz	r3, 8011da0 <rcl_timer_clock+0x14>
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	600b      	str	r3, [r1, #0]
 8011d98:	2000      	movs	r0, #0
 8011d9a:	4770      	bx	lr
 8011d9c:	200b      	movs	r0, #11
 8011d9e:	4770      	bx	lr
 8011da0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8011da4:	4770      	bx	lr
 8011da6:	bf00      	nop

08011da8 <rcl_timer_call>:
 8011da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dac:	b087      	sub	sp, #28
 8011dae:	2800      	cmp	r0, #0
 8011db0:	d067      	beq.n	8011e82 <rcl_timer_call+0xda>
 8011db2:	6803      	ldr	r3, [r0, #0]
 8011db4:	4604      	mov	r4, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d068      	beq.n	8011e8c <rcl_timer_call+0xe4>
 8011dba:	f3bf 8f5b 	dmb	ish
 8011dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011dc2:	f3bf 8f5b 	dmb	ish
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d150      	bne.n	8011e6c <rcl_timer_call+0xc4>
 8011dca:	6803      	ldr	r3, [r0, #0]
 8011dcc:	a904      	add	r1, sp, #16
 8011dce:	6818      	ldr	r0, [r3, #0]
 8011dd0:	f7ff fda0 	bl	8011914 <rcl_clock_get_now>
 8011dd4:	4605      	mov	r5, r0
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	d144      	bne.n	8011e64 <rcl_timer_call+0xbc>
 8011dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	db4a      	blt.n	8011e78 <rcl_timer_call+0xd0>
 8011de2:	6820      	ldr	r0, [r4, #0]
 8011de4:	f04f 0a05 	mov.w	sl, #5
 8011de8:	f8cd a000 	str.w	sl, [sp]
 8011dec:	3020      	adds	r0, #32
 8011dee:	f001 fcfb 	bl	80137e8 <__atomic_exchange_8>
 8011df2:	6823      	ldr	r3, [r4, #0]
 8011df4:	f3bf 8f5b 	dmb	ish
 8011df8:	4680      	mov	r8, r0
 8011dfa:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8011dfe:	f3bf 8f5b 	dmb	ish
 8011e02:	6820      	ldr	r0, [r4, #0]
 8011e04:	4689      	mov	r9, r1
 8011e06:	3028      	adds	r0, #40	@ 0x28
 8011e08:	4651      	mov	r1, sl
 8011e0a:	f001 fc81 	bl	8013710 <__atomic_load_8>
 8011e0e:	4606      	mov	r6, r0
 8011e10:	6820      	ldr	r0, [r4, #0]
 8011e12:	460f      	mov	r7, r1
 8011e14:	3018      	adds	r0, #24
 8011e16:	4651      	mov	r1, sl
 8011e18:	f001 fc7a 	bl	8013710 <__atomic_load_8>
 8011e1c:	1836      	adds	r6, r6, r0
 8011e1e:	eb41 0707 	adc.w	r7, r1, r7
 8011e22:	4602      	mov	r2, r0
 8011e24:	460b      	mov	r3, r1
 8011e26:	4682      	mov	sl, r0
 8011e28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e2c:	42b0      	cmp	r0, r6
 8011e2e:	eb71 0c07 	sbcs.w	ip, r1, r7
 8011e32:	db04      	blt.n	8011e3e <rcl_timer_call+0x96>
 8011e34:	ea53 0c02 	orrs.w	ip, r3, r2
 8011e38:	d12b      	bne.n	8011e92 <rcl_timer_call+0xea>
 8011e3a:	4606      	mov	r6, r0
 8011e3c:	460f      	mov	r7, r1
 8011e3e:	6820      	ldr	r0, [r4, #0]
 8011e40:	2105      	movs	r1, #5
 8011e42:	4632      	mov	r2, r6
 8011e44:	463b      	mov	r3, r7
 8011e46:	3028      	adds	r0, #40	@ 0x28
 8011e48:	9100      	str	r1, [sp, #0]
 8011e4a:	f001 fc97 	bl	801377c <__atomic_store_8>
 8011e4e:	f1bb 0f00 	cmp.w	fp, #0
 8011e52:	d007      	beq.n	8011e64 <rcl_timer_call+0xbc>
 8011e54:	9a04      	ldr	r2, [sp, #16]
 8011e56:	9b05      	ldr	r3, [sp, #20]
 8011e58:	ebb2 0208 	subs.w	r2, r2, r8
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	eb63 0309 	sbc.w	r3, r3, r9
 8011e62:	47d8      	blx	fp
 8011e64:	4628      	mov	r0, r5
 8011e66:	b007      	add	sp, #28
 8011e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e6c:	f240 3521 	movw	r5, #801	@ 0x321
 8011e70:	4628      	mov	r0, r5
 8011e72:	b007      	add	sp, #28
 8011e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e78:	2501      	movs	r5, #1
 8011e7a:	4628      	mov	r0, r5
 8011e7c:	b007      	add	sp, #28
 8011e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e82:	250b      	movs	r5, #11
 8011e84:	4628      	mov	r0, r5
 8011e86:	b007      	add	sp, #28
 8011e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e8c:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8011e90:	e7e8      	b.n	8011e64 <rcl_timer_call+0xbc>
 8011e92:	1b80      	subs	r0, r0, r6
 8011e94:	eb61 0107 	sbc.w	r1, r1, r7
 8011e98:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011e9c:	f7ee fcb4 	bl	8000808 <__aeabi_ldivmod>
 8011ea0:	9b02      	ldr	r3, [sp, #8]
 8011ea2:	3001      	adds	r0, #1
 8011ea4:	f141 0100 	adc.w	r1, r1, #0
 8011ea8:	fb00 f303 	mul.w	r3, r0, r3
 8011eac:	fb01 330a 	mla	r3, r1, sl, r3
 8011eb0:	fba0 0a0a 	umull	r0, sl, r0, sl
 8011eb4:	1830      	adds	r0, r6, r0
 8011eb6:	4453      	add	r3, sl
 8011eb8:	eb43 0707 	adc.w	r7, r3, r7
 8011ebc:	4606      	mov	r6, r0
 8011ebe:	e7be      	b.n	8011e3e <rcl_timer_call+0x96>

08011ec0 <rcl_timer_is_ready>:
 8011ec0:	b398      	cbz	r0, 8011f2a <rcl_timer_is_ready+0x6a>
 8011ec2:	b530      	push	{r4, r5, lr}
 8011ec4:	6803      	ldr	r3, [r0, #0]
 8011ec6:	b083      	sub	sp, #12
 8011ec8:	4604      	mov	r4, r0
 8011eca:	b383      	cbz	r3, 8011f2e <rcl_timer_is_ready+0x6e>
 8011ecc:	460d      	mov	r5, r1
 8011ece:	b349      	cbz	r1, 8011f24 <rcl_timer_is_ready+0x64>
 8011ed0:	f3bf 8f5b 	dmb	ish
 8011ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011ed8:	f3bf 8f5b 	dmb	ish
 8011edc:	b9fb      	cbnz	r3, 8011f1e <rcl_timer_is_ready+0x5e>
 8011ede:	6803      	ldr	r3, [r0, #0]
 8011ee0:	4669      	mov	r1, sp
 8011ee2:	6818      	ldr	r0, [r3, #0]
 8011ee4:	f7ff fd16 	bl	8011914 <rcl_clock_get_now>
 8011ee8:	b128      	cbz	r0, 8011ef6 <rcl_timer_is_ready+0x36>
 8011eea:	f240 3321 	movw	r3, #801	@ 0x321
 8011eee:	4298      	cmp	r0, r3
 8011ef0:	d015      	beq.n	8011f1e <rcl_timer_is_ready+0x5e>
 8011ef2:	b003      	add	sp, #12
 8011ef4:	bd30      	pop	{r4, r5, pc}
 8011ef6:	6820      	ldr	r0, [r4, #0]
 8011ef8:	2105      	movs	r1, #5
 8011efa:	3028      	adds	r0, #40	@ 0x28
 8011efc:	f001 fc08 	bl	8013710 <__atomic_load_8>
 8011f00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011f04:	1ac0      	subs	r0, r0, r3
 8011f06:	eb61 0102 	sbc.w	r1, r1, r2
 8011f0a:	2801      	cmp	r0, #1
 8011f0c:	f171 0100 	sbcs.w	r1, r1, #0
 8011f10:	bfb4      	ite	lt
 8011f12:	2301      	movlt	r3, #1
 8011f14:	2300      	movge	r3, #0
 8011f16:	702b      	strb	r3, [r5, #0]
 8011f18:	2000      	movs	r0, #0
 8011f1a:	b003      	add	sp, #12
 8011f1c:	bd30      	pop	{r4, r5, pc}
 8011f1e:	2300      	movs	r3, #0
 8011f20:	702b      	strb	r3, [r5, #0]
 8011f22:	e7f9      	b.n	8011f18 <rcl_timer_is_ready+0x58>
 8011f24:	200b      	movs	r0, #11
 8011f26:	b003      	add	sp, #12
 8011f28:	bd30      	pop	{r4, r5, pc}
 8011f2a:	200b      	movs	r0, #11
 8011f2c:	4770      	bx	lr
 8011f2e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8011f32:	e7de      	b.n	8011ef2 <rcl_timer_is_ready+0x32>

08011f34 <rcl_timer_get_next_call_time>:
 8011f34:	b1d8      	cbz	r0, 8011f6e <rcl_timer_get_next_call_time+0x3a>
 8011f36:	b538      	push	{r3, r4, r5, lr}
 8011f38:	6803      	ldr	r3, [r0, #0]
 8011f3a:	b1d3      	cbz	r3, 8011f72 <rcl_timer_get_next_call_time+0x3e>
 8011f3c:	460c      	mov	r4, r1
 8011f3e:	b1a1      	cbz	r1, 8011f6a <rcl_timer_get_next_call_time+0x36>
 8011f40:	f3bf 8f5b 	dmb	ish
 8011f44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011f48:	f3bf 8f5b 	dmb	ish
 8011f4c:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8011f50:	b943      	cbnz	r3, 8011f64 <rcl_timer_get_next_call_time+0x30>
 8011f52:	6800      	ldr	r0, [r0, #0]
 8011f54:	2105      	movs	r1, #5
 8011f56:	3028      	adds	r0, #40	@ 0x28
 8011f58:	f001 fbda 	bl	8013710 <__atomic_load_8>
 8011f5c:	e9c4 0100 	strd	r0, r1, [r4]
 8011f60:	4628      	mov	r0, r5
 8011f62:	bd38      	pop	{r3, r4, r5, pc}
 8011f64:	f240 3021 	movw	r0, #801	@ 0x321
 8011f68:	bd38      	pop	{r3, r4, r5, pc}
 8011f6a:	200b      	movs	r0, #11
 8011f6c:	bd38      	pop	{r3, r4, r5, pc}
 8011f6e:	200b      	movs	r0, #11
 8011f70:	4770      	bx	lr
 8011f72:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8011f76:	bd38      	pop	{r3, r4, r5, pc}

08011f78 <rcl_timer_get_guard_condition>:
 8011f78:	b130      	cbz	r0, 8011f88 <rcl_timer_get_guard_condition+0x10>
 8011f7a:	6800      	ldr	r0, [r0, #0]
 8011f7c:	b120      	cbz	r0, 8011f88 <rcl_timer_get_guard_condition+0x10>
 8011f7e:	68c3      	ldr	r3, [r0, #12]
 8011f80:	b10b      	cbz	r3, 8011f86 <rcl_timer_get_guard_condition+0xe>
 8011f82:	3008      	adds	r0, #8
 8011f84:	4770      	bx	lr
 8011f86:	4618      	mov	r0, r3
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop

08011f8c <rcl_get_zero_initialized_wait_set>:
 8011f8c:	b510      	push	{r4, lr}
 8011f8e:	4c08      	ldr	r4, [pc, #32]	@ (8011fb0 <rcl_get_zero_initialized_wait_set+0x24>)
 8011f90:	4686      	mov	lr, r0
 8011f92:	4684      	mov	ip, r0
 8011f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011fa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011fa6:	6823      	ldr	r3, [r4, #0]
 8011fa8:	f8cc 3000 	str.w	r3, [ip]
 8011fac:	4670      	mov	r0, lr
 8011fae:	bd10      	pop	{r4, pc}
 8011fb0:	0801a9e8 	.word	0x0801a9e8

08011fb4 <rcl_wait_set_is_valid>:
 8011fb4:	b118      	cbz	r0, 8011fbe <rcl_wait_set_is_valid+0xa>
 8011fb6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011fb8:	3800      	subs	r0, #0
 8011fba:	bf18      	it	ne
 8011fbc:	2001      	movne	r0, #1
 8011fbe:	4770      	bx	lr

08011fc0 <rcl_wait_set_fini>:
 8011fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	f000 80ab 	beq.w	8012120 <rcl_wait_set_fini+0x160>
 8011fca:	4605      	mov	r5, r0
 8011fcc:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8011fce:	2800      	cmp	r0, #0
 8011fd0:	f000 809c 	beq.w	801210c <rcl_wait_set_fini+0x14c>
 8011fd4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8011fd6:	f003 f909 	bl	80151ec <rmw_destroy_wait_set>
 8011fda:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8011fdc:	4680      	mov	r8, r0
 8011fde:	2800      	cmp	r0, #0
 8011fe0:	f040 808e 	bne.w	8012100 <rcl_wait_set_fini+0x140>
 8011fe4:	2c00      	cmp	r4, #0
 8011fe6:	f000 80a0 	beq.w	801212a <rcl_wait_set_fini+0x16a>
 8011fea:	6828      	ldr	r0, [r5, #0]
 8011fec:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8011fee:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8011ff2:	2600      	movs	r6, #0
 8011ff4:	606e      	str	r6, [r5, #4]
 8011ff6:	6026      	str	r6, [r4, #0]
 8011ff8:	b118      	cbz	r0, 8012002 <rcl_wait_set_fini+0x42>
 8011ffa:	4649      	mov	r1, r9
 8011ffc:	47b8      	blx	r7
 8011ffe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012000:	602e      	str	r6, [r5, #0]
 8012002:	68a0      	ldr	r0, [r4, #8]
 8012004:	b128      	cbz	r0, 8012012 <rcl_wait_set_fini+0x52>
 8012006:	4649      	mov	r1, r9
 8012008:	47b8      	blx	r7
 801200a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801200c:	2300      	movs	r3, #0
 801200e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8012012:	68a8      	ldr	r0, [r5, #8]
 8012014:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8012016:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012018:	f04f 0900 	mov.w	r9, #0
 801201c:	f8c5 900c 	str.w	r9, [r5, #12]
 8012020:	f8c4 900c 	str.w	r9, [r4, #12]
 8012024:	b130      	cbz	r0, 8012034 <rcl_wait_set_fini+0x74>
 8012026:	4639      	mov	r1, r7
 8012028:	47b0      	blx	r6
 801202a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801202c:	f8c5 9008 	str.w	r9, [r5, #8]
 8012030:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8012032:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012034:	6960      	ldr	r0, [r4, #20]
 8012036:	f04f 0900 	mov.w	r9, #0
 801203a:	f8c4 9010 	str.w	r9, [r4, #16]
 801203e:	b130      	cbz	r0, 801204e <rcl_wait_set_fini+0x8e>
 8012040:	4639      	mov	r1, r7
 8012042:	47b0      	blx	r6
 8012044:	f8c4 9014 	str.w	r9, [r4, #20]
 8012048:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801204a:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 801204c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801204e:	6928      	ldr	r0, [r5, #16]
 8012050:	f04f 0900 	mov.w	r9, #0
 8012054:	f8c5 9014 	str.w	r9, [r5, #20]
 8012058:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 801205c:	b130      	cbz	r0, 801206c <rcl_wait_set_fini+0xac>
 801205e:	4639      	mov	r1, r7
 8012060:	47b0      	blx	r6
 8012062:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012064:	f8c5 9010 	str.w	r9, [r5, #16]
 8012068:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 801206a:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801206c:	69a8      	ldr	r0, [r5, #24]
 801206e:	f04f 0900 	mov.w	r9, #0
 8012072:	f8c5 901c 	str.w	r9, [r5, #28]
 8012076:	f8c4 9018 	str.w	r9, [r4, #24]
 801207a:	b120      	cbz	r0, 8012086 <rcl_wait_set_fini+0xc6>
 801207c:	4639      	mov	r1, r7
 801207e:	47b0      	blx	r6
 8012080:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012082:	f8c5 9018 	str.w	r9, [r5, #24]
 8012086:	6a20      	ldr	r0, [r4, #32]
 8012088:	b128      	cbz	r0, 8012096 <rcl_wait_set_fini+0xd6>
 801208a:	4639      	mov	r1, r7
 801208c:	47b0      	blx	r6
 801208e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012090:	2300      	movs	r3, #0
 8012092:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8012096:	6a28      	ldr	r0, [r5, #32]
 8012098:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 801209a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801209e:	2600      	movs	r6, #0
 80120a0:	626e      	str	r6, [r5, #36]	@ 0x24
 80120a2:	6266      	str	r6, [r4, #36]	@ 0x24
 80120a4:	b118      	cbz	r0, 80120ae <rcl_wait_set_fini+0xee>
 80120a6:	4649      	mov	r1, r9
 80120a8:	47b8      	blx	r7
 80120aa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80120ac:	622e      	str	r6, [r5, #32]
 80120ae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80120b0:	b128      	cbz	r0, 80120be <rcl_wait_set_fini+0xfe>
 80120b2:	4649      	mov	r1, r9
 80120b4:	47b8      	blx	r7
 80120b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80120b8:	2300      	movs	r3, #0
 80120ba:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80120be:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80120c0:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 80120c2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80120c6:	2600      	movs	r6, #0
 80120c8:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80120ca:	6326      	str	r6, [r4, #48]	@ 0x30
 80120cc:	b118      	cbz	r0, 80120d6 <rcl_wait_set_fini+0x116>
 80120ce:	4649      	mov	r1, r9
 80120d0:	47b8      	blx	r7
 80120d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80120d4:	62ae      	str	r6, [r5, #40]	@ 0x28
 80120d6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80120d8:	b1e0      	cbz	r0, 8012114 <rcl_wait_set_fini+0x154>
 80120da:	4649      	mov	r1, r9
 80120dc:	47b8      	blx	r7
 80120de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80120e0:	2300      	movs	r3, #0
 80120e2:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80120e6:	4598      	cmp	r8, r3
 80120e8:	bf18      	it	ne
 80120ea:	f44f 7861 	movne.w	r8, #900	@ 0x384
 80120ee:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80120f0:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80120f2:	4620      	mov	r0, r4
 80120f4:	4798      	blx	r3
 80120f6:	2300      	movs	r3, #0
 80120f8:	632b      	str	r3, [r5, #48]	@ 0x30
 80120fa:	4640      	mov	r0, r8
 80120fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012100:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8012104:	2c00      	cmp	r4, #0
 8012106:	f47f af70 	bne.w	8011fea <rcl_wait_set_fini+0x2a>
 801210a:	e7f6      	b.n	80120fa <rcl_wait_set_fini+0x13a>
 801210c:	4680      	mov	r8, r0
 801210e:	4640      	mov	r0, r8
 8012110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012114:	f1b8 0f00 	cmp.w	r8, #0
 8012118:	bf18      	it	ne
 801211a:	f44f 7861 	movne.w	r8, #900	@ 0x384
 801211e:	e7e6      	b.n	80120ee <rcl_wait_set_fini+0x12e>
 8012120:	f04f 080b 	mov.w	r8, #11
 8012124:	4640      	mov	r0, r8
 8012126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801212a:	f44f 7861 	mov.w	r8, #900	@ 0x384
 801212e:	e7e4      	b.n	80120fa <rcl_wait_set_fini+0x13a>

08012130 <rcl_wait_set_add_subscription>:
 8012130:	b318      	cbz	r0, 801217a <rcl_wait_set_add_subscription+0x4a>
 8012132:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012134:	b570      	push	{r4, r5, r6, lr}
 8012136:	4604      	mov	r4, r0
 8012138:	b30b      	cbz	r3, 801217e <rcl_wait_set_add_subscription+0x4e>
 801213a:	b319      	cbz	r1, 8012184 <rcl_wait_set_add_subscription+0x54>
 801213c:	681d      	ldr	r5, [r3, #0]
 801213e:	6840      	ldr	r0, [r0, #4]
 8012140:	4285      	cmp	r5, r0
 8012142:	d217      	bcs.n	8012174 <rcl_wait_set_add_subscription+0x44>
 8012144:	6820      	ldr	r0, [r4, #0]
 8012146:	1c6e      	adds	r6, r5, #1
 8012148:	601e      	str	r6, [r3, #0]
 801214a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801214e:	b102      	cbz	r2, 8012152 <rcl_wait_set_add_subscription+0x22>
 8012150:	6015      	str	r5, [r2, #0]
 8012152:	4608      	mov	r0, r1
 8012154:	f7ff fb3c 	bl	80117d0 <rcl_subscription_get_rmw_handle>
 8012158:	b150      	cbz	r0, 8012170 <rcl_wait_set_add_subscription+0x40>
 801215a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801215c:	6842      	ldr	r2, [r0, #4]
 801215e:	689b      	ldr	r3, [r3, #8]
 8012160:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012164:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012166:	6853      	ldr	r3, [r2, #4]
 8012168:	3301      	adds	r3, #1
 801216a:	2000      	movs	r0, #0
 801216c:	6053      	str	r3, [r2, #4]
 801216e:	bd70      	pop	{r4, r5, r6, pc}
 8012170:	2001      	movs	r0, #1
 8012172:	bd70      	pop	{r4, r5, r6, pc}
 8012174:	f240 3086 	movw	r0, #902	@ 0x386
 8012178:	bd70      	pop	{r4, r5, r6, pc}
 801217a:	200b      	movs	r0, #11
 801217c:	4770      	bx	lr
 801217e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012182:	bd70      	pop	{r4, r5, r6, pc}
 8012184:	200b      	movs	r0, #11
 8012186:	bd70      	pop	{r4, r5, r6, pc}

08012188 <rcl_wait_set_clear>:
 8012188:	2800      	cmp	r0, #0
 801218a:	d074      	beq.n	8012276 <rcl_wait_set_clear+0xee>
 801218c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801218e:	b510      	push	{r4, lr}
 8012190:	4604      	mov	r4, r0
 8012192:	2b00      	cmp	r3, #0
 8012194:	d071      	beq.n	801227a <rcl_wait_set_clear+0xf2>
 8012196:	6800      	ldr	r0, [r0, #0]
 8012198:	b138      	cbz	r0, 80121aa <rcl_wait_set_clear+0x22>
 801219a:	6862      	ldr	r2, [r4, #4]
 801219c:	2100      	movs	r1, #0
 801219e:	0092      	lsls	r2, r2, #2
 80121a0:	f006 f8b8 	bl	8018314 <memset>
 80121a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80121a6:	2200      	movs	r2, #0
 80121a8:	601a      	str	r2, [r3, #0]
 80121aa:	68a0      	ldr	r0, [r4, #8]
 80121ac:	b138      	cbz	r0, 80121be <rcl_wait_set_clear+0x36>
 80121ae:	68e2      	ldr	r2, [r4, #12]
 80121b0:	2100      	movs	r1, #0
 80121b2:	0092      	lsls	r2, r2, #2
 80121b4:	f006 f8ae 	bl	8018314 <memset>
 80121b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80121ba:	2200      	movs	r2, #0
 80121bc:	60da      	str	r2, [r3, #12]
 80121be:	69a0      	ldr	r0, [r4, #24]
 80121c0:	b138      	cbz	r0, 80121d2 <rcl_wait_set_clear+0x4a>
 80121c2:	69e2      	ldr	r2, [r4, #28]
 80121c4:	2100      	movs	r1, #0
 80121c6:	0092      	lsls	r2, r2, #2
 80121c8:	f006 f8a4 	bl	8018314 <memset>
 80121cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80121ce:	2200      	movs	r2, #0
 80121d0:	619a      	str	r2, [r3, #24]
 80121d2:	6a20      	ldr	r0, [r4, #32]
 80121d4:	b138      	cbz	r0, 80121e6 <rcl_wait_set_clear+0x5e>
 80121d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80121d8:	2100      	movs	r1, #0
 80121da:	0092      	lsls	r2, r2, #2
 80121dc:	f006 f89a 	bl	8018314 <memset>
 80121e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80121e2:	2200      	movs	r2, #0
 80121e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80121e6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80121e8:	b138      	cbz	r0, 80121fa <rcl_wait_set_clear+0x72>
 80121ea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80121ec:	2100      	movs	r1, #0
 80121ee:	0092      	lsls	r2, r2, #2
 80121f0:	f006 f890 	bl	8018314 <memset>
 80121f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80121f6:	2200      	movs	r2, #0
 80121f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80121fa:	6920      	ldr	r0, [r4, #16]
 80121fc:	b138      	cbz	r0, 801220e <rcl_wait_set_clear+0x86>
 80121fe:	6962      	ldr	r2, [r4, #20]
 8012200:	2100      	movs	r1, #0
 8012202:	0092      	lsls	r2, r2, #2
 8012204:	f006 f886 	bl	8018314 <memset>
 8012208:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801220a:	2200      	movs	r2, #0
 801220c:	641a      	str	r2, [r3, #64]	@ 0x40
 801220e:	6898      	ldr	r0, [r3, #8]
 8012210:	b138      	cbz	r0, 8012222 <rcl_wait_set_clear+0x9a>
 8012212:	685a      	ldr	r2, [r3, #4]
 8012214:	2100      	movs	r1, #0
 8012216:	0092      	lsls	r2, r2, #2
 8012218:	f006 f87c 	bl	8018314 <memset>
 801221c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801221e:	2200      	movs	r2, #0
 8012220:	605a      	str	r2, [r3, #4]
 8012222:	6958      	ldr	r0, [r3, #20]
 8012224:	b138      	cbz	r0, 8012236 <rcl_wait_set_clear+0xae>
 8012226:	691a      	ldr	r2, [r3, #16]
 8012228:	2100      	movs	r1, #0
 801222a:	0092      	lsls	r2, r2, #2
 801222c:	f006 f872 	bl	8018314 <memset>
 8012230:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012232:	2200      	movs	r2, #0
 8012234:	611a      	str	r2, [r3, #16]
 8012236:	6a18      	ldr	r0, [r3, #32]
 8012238:	b138      	cbz	r0, 801224a <rcl_wait_set_clear+0xc2>
 801223a:	69da      	ldr	r2, [r3, #28]
 801223c:	2100      	movs	r1, #0
 801223e:	0092      	lsls	r2, r2, #2
 8012240:	f006 f868 	bl	8018314 <memset>
 8012244:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012246:	2200      	movs	r2, #0
 8012248:	61da      	str	r2, [r3, #28]
 801224a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801224c:	b138      	cbz	r0, 801225e <rcl_wait_set_clear+0xd6>
 801224e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012250:	2100      	movs	r1, #0
 8012252:	0092      	lsls	r2, r2, #2
 8012254:	f006 f85e 	bl	8018314 <memset>
 8012258:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801225a:	2200      	movs	r2, #0
 801225c:	629a      	str	r2, [r3, #40]	@ 0x28
 801225e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8012260:	b138      	cbz	r0, 8012272 <rcl_wait_set_clear+0xea>
 8012262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012264:	2100      	movs	r1, #0
 8012266:	0092      	lsls	r2, r2, #2
 8012268:	f006 f854 	bl	8018314 <memset>
 801226c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801226e:	2200      	movs	r2, #0
 8012270:	635a      	str	r2, [r3, #52]	@ 0x34
 8012272:	2000      	movs	r0, #0
 8012274:	bd10      	pop	{r4, pc}
 8012276:	200b      	movs	r0, #11
 8012278:	4770      	bx	lr
 801227a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801227e:	bd10      	pop	{r4, pc}

08012280 <rcl_wait_set_resize>:
 8012280:	2800      	cmp	r0, #0
 8012282:	f000 81a1 	beq.w	80125c8 <rcl_wait_set_resize+0x348>
 8012286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801228a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 801228e:	b083      	sub	sp, #12
 8012290:	4604      	mov	r4, r0
 8012292:	f1ba 0f00 	cmp.w	sl, #0
 8012296:	f000 8199 	beq.w	80125cc <rcl_wait_set_resize+0x34c>
 801229a:	f04f 0800 	mov.w	r8, #0
 801229e:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 80122a2:	461e      	mov	r6, r3
 80122a4:	460f      	mov	r7, r1
 80122a6:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 80122aa:	4615      	mov	r5, r2
 80122ac:	f8c0 8004 	str.w	r8, [r0, #4]
 80122b0:	6800      	ldr	r0, [r0, #0]
 80122b2:	f8ca 8000 	str.w	r8, [sl]
 80122b6:	2900      	cmp	r1, #0
 80122b8:	f000 80cf 	beq.w	801245a <rcl_wait_set_resize+0x1da>
 80122bc:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80122c0:	464a      	mov	r2, r9
 80122c2:	4651      	mov	r1, sl
 80122c4:	9301      	str	r3, [sp, #4]
 80122c6:	4798      	blx	r3
 80122c8:	9b01      	ldr	r3, [sp, #4]
 80122ca:	6020      	str	r0, [r4, #0]
 80122cc:	2800      	cmp	r0, #0
 80122ce:	f000 8109 	beq.w	80124e4 <rcl_wait_set_resize+0x264>
 80122d2:	4652      	mov	r2, sl
 80122d4:	4641      	mov	r1, r8
 80122d6:	9301      	str	r3, [sp, #4]
 80122d8:	f006 f81c 	bl	8018314 <memset>
 80122dc:	6067      	str	r7, [r4, #4]
 80122de:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 80122e0:	9b01      	ldr	r3, [sp, #4]
 80122e2:	68b8      	ldr	r0, [r7, #8]
 80122e4:	f8c7 8004 	str.w	r8, [r7, #4]
 80122e8:	464a      	mov	r2, r9
 80122ea:	4651      	mov	r1, sl
 80122ec:	4798      	blx	r3
 80122ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80122f0:	60b8      	str	r0, [r7, #8]
 80122f2:	689f      	ldr	r7, [r3, #8]
 80122f4:	2f00      	cmp	r7, #0
 80122f6:	f000 80f0 	beq.w	80124da <rcl_wait_set_resize+0x25a>
 80122fa:	4652      	mov	r2, sl
 80122fc:	4641      	mov	r1, r8
 80122fe:	4638      	mov	r0, r7
 8012300:	f006 f808 	bl	8018314 <memset>
 8012304:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012308:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801230c:	68a0      	ldr	r0, [r4, #8]
 801230e:	2700      	movs	r7, #0
 8012310:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8012314:	60e7      	str	r7, [r4, #12]
 8012316:	f8ca 700c 	str.w	r7, [sl, #12]
 801231a:	2d00      	cmp	r5, #0
 801231c:	f040 80b0 	bne.w	8012480 <rcl_wait_set_resize+0x200>
 8012320:	b130      	cbz	r0, 8012330 <rcl_wait_set_resize+0xb0>
 8012322:	4641      	mov	r1, r8
 8012324:	4790      	blx	r2
 8012326:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801232a:	60a5      	str	r5, [r4, #8]
 801232c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012330:	f8da 0014 	ldr.w	r0, [sl, #20]
 8012334:	2700      	movs	r7, #0
 8012336:	19ad      	adds	r5, r5, r6
 8012338:	f8ca 7010 	str.w	r7, [sl, #16]
 801233c:	f040 80b8 	bne.w	80124b0 <rcl_wait_set_resize+0x230>
 8012340:	b148      	cbz	r0, 8012356 <rcl_wait_set_resize+0xd6>
 8012342:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8012346:	4641      	mov	r1, r8
 8012348:	4798      	blx	r3
 801234a:	f8ca 5014 	str.w	r5, [sl, #20]
 801234e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012352:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012356:	6920      	ldr	r0, [r4, #16]
 8012358:	2500      	movs	r5, #0
 801235a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801235e:	6165      	str	r5, [r4, #20]
 8012360:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8012364:	2e00      	cmp	r6, #0
 8012366:	f040 80c1 	bne.w	80124ec <rcl_wait_set_resize+0x26c>
 801236a:	b140      	cbz	r0, 801237e <rcl_wait_set_resize+0xfe>
 801236c:	4641      	mov	r1, r8
 801236e:	47c8      	blx	r9
 8012370:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012374:	6126      	str	r6, [r4, #16]
 8012376:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801237a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 801237e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012380:	69a0      	ldr	r0, [r4, #24]
 8012382:	2500      	movs	r5, #0
 8012384:	61e5      	str	r5, [r4, #28]
 8012386:	f8ca 5018 	str.w	r5, [sl, #24]
 801238a:	2b00      	cmp	r3, #0
 801238c:	f040 80c2 	bne.w	8012514 <rcl_wait_set_resize+0x294>
 8012390:	b128      	cbz	r0, 801239e <rcl_wait_set_resize+0x11e>
 8012392:	4641      	mov	r1, r8
 8012394:	47c8      	blx	r9
 8012396:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012398:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801239c:	61a3      	str	r3, [r4, #24]
 801239e:	f8da 0020 	ldr.w	r0, [sl, #32]
 80123a2:	b130      	cbz	r0, 80123b2 <rcl_wait_set_resize+0x132>
 80123a4:	4641      	mov	r1, r8
 80123a6:	47c8      	blx	r9
 80123a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80123ac:	2300      	movs	r3, #0
 80123ae:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80123b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80123b4:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 80123b8:	6a20      	ldr	r0, [r4, #32]
 80123ba:	2500      	movs	r5, #0
 80123bc:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 80123c0:	6265      	str	r5, [r4, #36]	@ 0x24
 80123c2:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	f000 80c8 	beq.w	801255c <rcl_wait_set_resize+0x2dc>
 80123cc:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80123d0:	4632      	mov	r2, r6
 80123d2:	4649      	mov	r1, r9
 80123d4:	47c0      	blx	r8
 80123d6:	6220      	str	r0, [r4, #32]
 80123d8:	2800      	cmp	r0, #0
 80123da:	f000 8083 	beq.w	80124e4 <rcl_wait_set_resize+0x264>
 80123de:	464a      	mov	r2, r9
 80123e0:	4629      	mov	r1, r5
 80123e2:	f005 ff97 	bl	8018314 <memset>
 80123e6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80123ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80123ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80123ee:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80123f2:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 80123f6:	4632      	mov	r2, r6
 80123f8:	4649      	mov	r1, r9
 80123fa:	47c0      	blx	r8
 80123fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80123fe:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8012402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012404:	2b00      	cmp	r3, #0
 8012406:	f000 80fb 	beq.w	8012600 <rcl_wait_set_resize+0x380>
 801240a:	464a      	mov	r2, r9
 801240c:	4629      	mov	r1, r5
 801240e:	4618      	mov	r0, r3
 8012410:	f005 ff80 	bl	8018314 <memset>
 8012414:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012418:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801241a:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 801241e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012420:	2500      	movs	r5, #0
 8012422:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8012426:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8012428:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 801242c:	2b00      	cmp	r3, #0
 801242e:	f040 80a9 	bne.w	8012584 <rcl_wait_set_resize+0x304>
 8012432:	b128      	cbz	r0, 8012440 <rcl_wait_set_resize+0x1c0>
 8012434:	4631      	mov	r1, r6
 8012436:	47b8      	blx	r7
 8012438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801243a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801243e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012440:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012444:	b128      	cbz	r0, 8012452 <rcl_wait_set_resize+0x1d2>
 8012446:	4631      	mov	r1, r6
 8012448:	47b8      	blx	r7
 801244a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801244c:	2200      	movs	r2, #0
 801244e:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8012452:	2000      	movs	r0, #0
 8012454:	b003      	add	sp, #12
 8012456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801245a:	b120      	cbz	r0, 8012466 <rcl_wait_set_resize+0x1e6>
 801245c:	4649      	mov	r1, r9
 801245e:	47d8      	blx	fp
 8012460:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012464:	6027      	str	r7, [r4, #0]
 8012466:	f8da 0008 	ldr.w	r0, [sl, #8]
 801246a:	2800      	cmp	r0, #0
 801246c:	f43f af4c 	beq.w	8012308 <rcl_wait_set_resize+0x88>
 8012470:	4649      	mov	r1, r9
 8012472:	47d8      	blx	fp
 8012474:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012478:	2300      	movs	r3, #0
 801247a:	e9ca 3301 	strd	r3, r3, [sl, #4]
 801247e:	e743      	b.n	8012308 <rcl_wait_set_resize+0x88>
 8012480:	4642      	mov	r2, r8
 8012482:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8012486:	4641      	mov	r1, r8
 8012488:	4798      	blx	r3
 801248a:	60a0      	str	r0, [r4, #8]
 801248c:	b350      	cbz	r0, 80124e4 <rcl_wait_set_resize+0x264>
 801248e:	4642      	mov	r2, r8
 8012490:	4639      	mov	r1, r7
 8012492:	f005 ff3f 	bl	8018314 <memset>
 8012496:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801249a:	60e5      	str	r5, [r4, #12]
 801249c:	2700      	movs	r7, #0
 801249e:	19ad      	adds	r5, r5, r6
 80124a0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80124a4:	f8da 0014 	ldr.w	r0, [sl, #20]
 80124a8:	f8ca 7010 	str.w	r7, [sl, #16]
 80124ac:	f43f af48 	beq.w	8012340 <rcl_wait_set_resize+0xc0>
 80124b0:	00ad      	lsls	r5, r5, #2
 80124b2:	4642      	mov	r2, r8
 80124b4:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 80124b8:	4629      	mov	r1, r5
 80124ba:	4798      	blx	r3
 80124bc:	4680      	mov	r8, r0
 80124be:	f8ca 0014 	str.w	r0, [sl, #20]
 80124c2:	2800      	cmp	r0, #0
 80124c4:	f000 8085 	beq.w	80125d2 <rcl_wait_set_resize+0x352>
 80124c8:	462a      	mov	r2, r5
 80124ca:	4639      	mov	r1, r7
 80124cc:	f005 ff22 	bl	8018314 <memset>
 80124d0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80124d4:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80124d8:	e73d      	b.n	8012356 <rcl_wait_set_resize+0xd6>
 80124da:	6820      	ldr	r0, [r4, #0]
 80124dc:	4649      	mov	r1, r9
 80124de:	47d8      	blx	fp
 80124e0:	e9c4 7700 	strd	r7, r7, [r4]
 80124e4:	200a      	movs	r0, #10
 80124e6:	b003      	add	sp, #12
 80124e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ec:	4642      	mov	r2, r8
 80124ee:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80124f2:	4641      	mov	r1, r8
 80124f4:	47b8      	blx	r7
 80124f6:	6120      	str	r0, [r4, #16]
 80124f8:	2800      	cmp	r0, #0
 80124fa:	d0f3      	beq.n	80124e4 <rcl_wait_set_resize+0x264>
 80124fc:	4642      	mov	r2, r8
 80124fe:	4629      	mov	r1, r5
 8012500:	f005 ff08 	bl	8018314 <memset>
 8012504:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012508:	6166      	str	r6, [r4, #20]
 801250a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801250e:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8012512:	e734      	b.n	801237e <rcl_wait_set_resize+0xfe>
 8012514:	009e      	lsls	r6, r3, #2
 8012516:	4642      	mov	r2, r8
 8012518:	4631      	mov	r1, r6
 801251a:	47b8      	blx	r7
 801251c:	61a0      	str	r0, [r4, #24]
 801251e:	2800      	cmp	r0, #0
 8012520:	d0e0      	beq.n	80124e4 <rcl_wait_set_resize+0x264>
 8012522:	4632      	mov	r2, r6
 8012524:	4629      	mov	r1, r5
 8012526:	f005 fef5 	bl	8018314 <memset>
 801252a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801252e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012530:	61e3      	str	r3, [r4, #28]
 8012532:	f8da 0020 	ldr.w	r0, [sl, #32]
 8012536:	f8ca 501c 	str.w	r5, [sl, #28]
 801253a:	4642      	mov	r2, r8
 801253c:	4631      	mov	r1, r6
 801253e:	47b8      	blx	r7
 8012540:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012542:	f8ca 0020 	str.w	r0, [sl, #32]
 8012546:	6a1f      	ldr	r7, [r3, #32]
 8012548:	2f00      	cmp	r7, #0
 801254a:	d053      	beq.n	80125f4 <rcl_wait_set_resize+0x374>
 801254c:	4632      	mov	r2, r6
 801254e:	4629      	mov	r1, r5
 8012550:	4638      	mov	r0, r7
 8012552:	f005 fedf 	bl	8018314 <memset>
 8012556:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801255a:	e72a      	b.n	80123b2 <rcl_wait_set_resize+0x132>
 801255c:	b128      	cbz	r0, 801256a <rcl_wait_set_resize+0x2ea>
 801255e:	4631      	mov	r1, r6
 8012560:	47b8      	blx	r7
 8012562:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012564:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8012568:	6223      	str	r3, [r4, #32]
 801256a:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 801256e:	2800      	cmp	r0, #0
 8012570:	f43f af52 	beq.w	8012418 <rcl_wait_set_resize+0x198>
 8012574:	4631      	mov	r1, r6
 8012576:	47b8      	blx	r7
 8012578:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801257c:	2300      	movs	r3, #0
 801257e:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8012582:	e749      	b.n	8012418 <rcl_wait_set_resize+0x198>
 8012584:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8012588:	4632      	mov	r2, r6
 801258a:	4649      	mov	r1, r9
 801258c:	47c0      	blx	r8
 801258e:	62a0      	str	r0, [r4, #40]	@ 0x28
 8012590:	2800      	cmp	r0, #0
 8012592:	d0a7      	beq.n	80124e4 <rcl_wait_set_resize+0x264>
 8012594:	464a      	mov	r2, r9
 8012596:	4629      	mov	r1, r5
 8012598:	f005 febc 	bl	8018314 <memset>
 801259c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80125a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80125a4:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80125a8:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 80125ac:	4632      	mov	r2, r6
 80125ae:	4649      	mov	r1, r9
 80125b0:	47c0      	blx	r8
 80125b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80125b4:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80125b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125ba:	b34b      	cbz	r3, 8012610 <rcl_wait_set_resize+0x390>
 80125bc:	464a      	mov	r2, r9
 80125be:	4629      	mov	r1, r5
 80125c0:	4618      	mov	r0, r3
 80125c2:	f005 fea7 	bl	8018314 <memset>
 80125c6:	e744      	b.n	8012452 <rcl_wait_set_resize+0x1d2>
 80125c8:	200b      	movs	r0, #11
 80125ca:	4770      	bx	lr
 80125cc:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80125d0:	e789      	b.n	80124e6 <rcl_wait_set_resize+0x266>
 80125d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80125d4:	68a0      	ldr	r0, [r4, #8]
 80125d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80125d8:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80125da:	4790      	blx	r2
 80125dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80125de:	6920      	ldr	r0, [r4, #16]
 80125e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80125e2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80125e4:	f8c4 800c 	str.w	r8, [r4, #12]
 80125e8:	f8c4 8008 	str.w	r8, [r4, #8]
 80125ec:	4790      	blx	r2
 80125ee:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80125f2:	e777      	b.n	80124e4 <rcl_wait_set_resize+0x264>
 80125f4:	69a0      	ldr	r0, [r4, #24]
 80125f6:	4641      	mov	r1, r8
 80125f8:	47c8      	blx	r9
 80125fa:	e9c4 7706 	strd	r7, r7, [r4, #24]
 80125fe:	e771      	b.n	80124e4 <rcl_wait_set_resize+0x264>
 8012600:	6a20      	ldr	r0, [r4, #32]
 8012602:	9301      	str	r3, [sp, #4]
 8012604:	4631      	mov	r1, r6
 8012606:	47b8      	blx	r7
 8012608:	9b01      	ldr	r3, [sp, #4]
 801260a:	e9c4 3308 	strd	r3, r3, [r4, #32]
 801260e:	e769      	b.n	80124e4 <rcl_wait_set_resize+0x264>
 8012610:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012612:	9301      	str	r3, [sp, #4]
 8012614:	4631      	mov	r1, r6
 8012616:	47b8      	blx	r7
 8012618:	9b01      	ldr	r3, [sp, #4]
 801261a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801261e:	e761      	b.n	80124e4 <rcl_wait_set_resize+0x264>

08012620 <rcl_wait_set_init>:
 8012620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012624:	b084      	sub	sp, #16
 8012626:	4604      	mov	r4, r0
 8012628:	a810      	add	r0, sp, #64	@ 0x40
 801262a:	460d      	mov	r5, r1
 801262c:	4690      	mov	r8, r2
 801262e:	461f      	mov	r7, r3
 8012630:	f7f7 fdea 	bl	800a208 <rcutils_allocator_is_valid>
 8012634:	2800      	cmp	r0, #0
 8012636:	d068      	beq.n	801270a <rcl_wait_set_init+0xea>
 8012638:	2c00      	cmp	r4, #0
 801263a:	d066      	beq.n	801270a <rcl_wait_set_init+0xea>
 801263c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801263e:	b126      	cbz	r6, 801264a <rcl_wait_set_init+0x2a>
 8012640:	2564      	movs	r5, #100	@ 0x64
 8012642:	4628      	mov	r0, r5
 8012644:	b004      	add	sp, #16
 8012646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801264a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801264c:	2b00      	cmp	r3, #0
 801264e:	d05c      	beq.n	801270a <rcl_wait_set_init+0xea>
 8012650:	4618      	mov	r0, r3
 8012652:	f7fe fa65 	bl	8010b20 <rcl_context_is_valid>
 8012656:	2800      	cmp	r0, #0
 8012658:	d05c      	beq.n	8012714 <rcl_wait_set_init+0xf4>
 801265a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801265c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801265e:	205c      	movs	r0, #92	@ 0x5c
 8012660:	4798      	blx	r3
 8012662:	6320      	str	r0, [r4, #48]	@ 0x30
 8012664:	2800      	cmp	r0, #0
 8012666:	d059      	beq.n	801271c <rcl_wait_set_init+0xfc>
 8012668:	4631      	mov	r1, r6
 801266a:	225c      	movs	r2, #92	@ 0x5c
 801266c:	f005 fe52 	bl	8018314 <memset>
 8012670:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 8012674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012676:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 801267a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801267e:	eb03 0e02 	add.w	lr, r3, r2
 8012682:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012684:	449e      	add	lr, r3
 8012686:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012688:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801268c:	f8d3 a000 	ldr.w	sl, [r3]
 8012690:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012694:	e9c9 6601 	strd	r6, r6, [r9, #4]
 8012698:	e9c9 6604 	strd	r6, r6, [r9, #16]
 801269c:	e9c9 6607 	strd	r6, r6, [r9, #28]
 80126a0:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 80126a4:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 80126a8:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 80126ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80126ae:	44c6      	add	lr, r8
 80126b0:	f8dc 3000 	ldr.w	r3, [ip]
 80126b4:	6033      	str	r3, [r6, #0]
 80126b6:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 80126ba:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80126be:	f002 fd8b 	bl	80151d8 <rmw_create_wait_set>
 80126c2:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 80126c6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80126c8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80126ca:	b32b      	cbz	r3, 8012718 <rcl_wait_set_init+0xf8>
 80126cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80126ce:	9302      	str	r3, [sp, #8]
 80126d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80126d2:	9301      	str	r3, [sp, #4]
 80126d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80126d6:	9300      	str	r3, [sp, #0]
 80126d8:	4629      	mov	r1, r5
 80126da:	463b      	mov	r3, r7
 80126dc:	4642      	mov	r2, r8
 80126de:	4620      	mov	r0, r4
 80126e0:	f7ff fdce 	bl	8012280 <rcl_wait_set_resize>
 80126e4:	4605      	mov	r5, r0
 80126e6:	2800      	cmp	r0, #0
 80126e8:	d0ab      	beq.n	8012642 <rcl_wait_set_init+0x22>
 80126ea:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80126ec:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80126ee:	b133      	cbz	r3, 80126fe <rcl_wait_set_init+0xde>
 80126f0:	4618      	mov	r0, r3
 80126f2:	f002 fd7b 	bl	80151ec <rmw_destroy_wait_set>
 80126f6:	b198      	cbz	r0, 8012720 <rcl_wait_set_init+0x100>
 80126f8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80126fa:	f44f 7561 	mov.w	r5, #900	@ 0x384
 80126fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8012700:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8012702:	4798      	blx	r3
 8012704:	2300      	movs	r3, #0
 8012706:	6323      	str	r3, [r4, #48]	@ 0x30
 8012708:	e79b      	b.n	8012642 <rcl_wait_set_init+0x22>
 801270a:	250b      	movs	r5, #11
 801270c:	4628      	mov	r0, r5
 801270e:	b004      	add	sp, #16
 8012710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012714:	2565      	movs	r5, #101	@ 0x65
 8012716:	e794      	b.n	8012642 <rcl_wait_set_init+0x22>
 8012718:	250a      	movs	r5, #10
 801271a:	e7f0      	b.n	80126fe <rcl_wait_set_init+0xde>
 801271c:	250a      	movs	r5, #10
 801271e:	e790      	b.n	8012642 <rcl_wait_set_init+0x22>
 8012720:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012722:	e7ec      	b.n	80126fe <rcl_wait_set_init+0xde>

08012724 <rcl_wait_set_add_guard_condition>:
 8012724:	b318      	cbz	r0, 801276e <rcl_wait_set_add_guard_condition+0x4a>
 8012726:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012728:	b570      	push	{r4, r5, r6, lr}
 801272a:	4604      	mov	r4, r0
 801272c:	b30b      	cbz	r3, 8012772 <rcl_wait_set_add_guard_condition+0x4e>
 801272e:	b319      	cbz	r1, 8012778 <rcl_wait_set_add_guard_condition+0x54>
 8012730:	68dd      	ldr	r5, [r3, #12]
 8012732:	68c0      	ldr	r0, [r0, #12]
 8012734:	4285      	cmp	r5, r0
 8012736:	d217      	bcs.n	8012768 <rcl_wait_set_add_guard_condition+0x44>
 8012738:	68a0      	ldr	r0, [r4, #8]
 801273a:	1c6e      	adds	r6, r5, #1
 801273c:	60de      	str	r6, [r3, #12]
 801273e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012742:	b102      	cbz	r2, 8012746 <rcl_wait_set_add_guard_condition+0x22>
 8012744:	6015      	str	r5, [r2, #0]
 8012746:	4608      	mov	r0, r1
 8012748:	f004 fc64 	bl	8017014 <rcl_guard_condition_get_rmw_handle>
 801274c:	b150      	cbz	r0, 8012764 <rcl_wait_set_add_guard_condition+0x40>
 801274e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012750:	6842      	ldr	r2, [r0, #4]
 8012752:	695b      	ldr	r3, [r3, #20]
 8012754:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012758:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801275a:	6913      	ldr	r3, [r2, #16]
 801275c:	3301      	adds	r3, #1
 801275e:	2000      	movs	r0, #0
 8012760:	6113      	str	r3, [r2, #16]
 8012762:	bd70      	pop	{r4, r5, r6, pc}
 8012764:	2001      	movs	r0, #1
 8012766:	bd70      	pop	{r4, r5, r6, pc}
 8012768:	f240 3086 	movw	r0, #902	@ 0x386
 801276c:	bd70      	pop	{r4, r5, r6, pc}
 801276e:	200b      	movs	r0, #11
 8012770:	4770      	bx	lr
 8012772:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012776:	bd70      	pop	{r4, r5, r6, pc}
 8012778:	200b      	movs	r0, #11
 801277a:	bd70      	pop	{r4, r5, r6, pc}

0801277c <rcl_wait_set_add_timer>:
 801277c:	b328      	cbz	r0, 80127ca <rcl_wait_set_add_timer+0x4e>
 801277e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012780:	b570      	push	{r4, r5, r6, lr}
 8012782:	4604      	mov	r4, r0
 8012784:	b31b      	cbz	r3, 80127ce <rcl_wait_set_add_timer+0x52>
 8012786:	b329      	cbz	r1, 80127d4 <rcl_wait_set_add_timer+0x58>
 8012788:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801278a:	6965      	ldr	r5, [r4, #20]
 801278c:	42a8      	cmp	r0, r5
 801278e:	d219      	bcs.n	80127c4 <rcl_wait_set_add_timer+0x48>
 8012790:	6925      	ldr	r5, [r4, #16]
 8012792:	1c46      	adds	r6, r0, #1
 8012794:	641e      	str	r6, [r3, #64]	@ 0x40
 8012796:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801279a:	b102      	cbz	r2, 801279e <rcl_wait_set_add_timer+0x22>
 801279c:	6010      	str	r0, [r2, #0]
 801279e:	4608      	mov	r0, r1
 80127a0:	f7ff fbea 	bl	8011f78 <rcl_timer_get_guard_condition>
 80127a4:	b160      	cbz	r0, 80127c0 <rcl_wait_set_add_timer+0x44>
 80127a6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80127a8:	68e3      	ldr	r3, [r4, #12]
 80127aa:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80127ac:	3b01      	subs	r3, #1
 80127ae:	441d      	add	r5, r3
 80127b0:	f004 fc30 	bl	8017014 <rcl_guard_condition_get_rmw_handle>
 80127b4:	b180      	cbz	r0, 80127d8 <rcl_wait_set_add_timer+0x5c>
 80127b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127b8:	6842      	ldr	r2, [r0, #4]
 80127ba:	695b      	ldr	r3, [r3, #20]
 80127bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80127c0:	2000      	movs	r0, #0
 80127c2:	bd70      	pop	{r4, r5, r6, pc}
 80127c4:	f240 3086 	movw	r0, #902	@ 0x386
 80127c8:	bd70      	pop	{r4, r5, r6, pc}
 80127ca:	200b      	movs	r0, #11
 80127cc:	4770      	bx	lr
 80127ce:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80127d2:	bd70      	pop	{r4, r5, r6, pc}
 80127d4:	200b      	movs	r0, #11
 80127d6:	bd70      	pop	{r4, r5, r6, pc}
 80127d8:	2001      	movs	r0, #1
 80127da:	bd70      	pop	{r4, r5, r6, pc}

080127dc <rcl_wait_set_add_client>:
 80127dc:	b318      	cbz	r0, 8012826 <rcl_wait_set_add_client+0x4a>
 80127de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80127e0:	b570      	push	{r4, r5, r6, lr}
 80127e2:	4604      	mov	r4, r0
 80127e4:	b30b      	cbz	r3, 801282a <rcl_wait_set_add_client+0x4e>
 80127e6:	b319      	cbz	r1, 8012830 <rcl_wait_set_add_client+0x54>
 80127e8:	699d      	ldr	r5, [r3, #24]
 80127ea:	69c0      	ldr	r0, [r0, #28]
 80127ec:	4285      	cmp	r5, r0
 80127ee:	d217      	bcs.n	8012820 <rcl_wait_set_add_client+0x44>
 80127f0:	69a0      	ldr	r0, [r4, #24]
 80127f2:	1c6e      	adds	r6, r5, #1
 80127f4:	619e      	str	r6, [r3, #24]
 80127f6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80127fa:	b102      	cbz	r2, 80127fe <rcl_wait_set_add_client+0x22>
 80127fc:	6015      	str	r5, [r2, #0]
 80127fe:	4608      	mov	r0, r1
 8012800:	f7fe f8a4 	bl	801094c <rcl_client_get_rmw_handle>
 8012804:	b150      	cbz	r0, 801281c <rcl_wait_set_add_client+0x40>
 8012806:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012808:	6842      	ldr	r2, [r0, #4]
 801280a:	6a1b      	ldr	r3, [r3, #32]
 801280c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012810:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012812:	69d3      	ldr	r3, [r2, #28]
 8012814:	3301      	adds	r3, #1
 8012816:	2000      	movs	r0, #0
 8012818:	61d3      	str	r3, [r2, #28]
 801281a:	bd70      	pop	{r4, r5, r6, pc}
 801281c:	2001      	movs	r0, #1
 801281e:	bd70      	pop	{r4, r5, r6, pc}
 8012820:	f240 3086 	movw	r0, #902	@ 0x386
 8012824:	bd70      	pop	{r4, r5, r6, pc}
 8012826:	200b      	movs	r0, #11
 8012828:	4770      	bx	lr
 801282a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801282e:	bd70      	pop	{r4, r5, r6, pc}
 8012830:	200b      	movs	r0, #11
 8012832:	bd70      	pop	{r4, r5, r6, pc}

08012834 <rcl_wait_set_add_service>:
 8012834:	b318      	cbz	r0, 801287e <rcl_wait_set_add_service+0x4a>
 8012836:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012838:	b570      	push	{r4, r5, r6, lr}
 801283a:	4604      	mov	r4, r0
 801283c:	b30b      	cbz	r3, 8012882 <rcl_wait_set_add_service+0x4e>
 801283e:	b319      	cbz	r1, 8012888 <rcl_wait_set_add_service+0x54>
 8012840:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8012842:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012844:	4285      	cmp	r5, r0
 8012846:	d217      	bcs.n	8012878 <rcl_wait_set_add_service+0x44>
 8012848:	6a20      	ldr	r0, [r4, #32]
 801284a:	1c6e      	adds	r6, r5, #1
 801284c:	625e      	str	r6, [r3, #36]	@ 0x24
 801284e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012852:	b102      	cbz	r2, 8012856 <rcl_wait_set_add_service+0x22>
 8012854:	6015      	str	r5, [r2, #0]
 8012856:	4608      	mov	r0, r1
 8012858:	f7fe fe48 	bl	80114ec <rcl_service_get_rmw_handle>
 801285c:	b150      	cbz	r0, 8012874 <rcl_wait_set_add_service+0x40>
 801285e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012860:	6842      	ldr	r2, [r0, #4]
 8012862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012864:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012868:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801286a:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801286c:	3301      	adds	r3, #1
 801286e:	2000      	movs	r0, #0
 8012870:	6293      	str	r3, [r2, #40]	@ 0x28
 8012872:	bd70      	pop	{r4, r5, r6, pc}
 8012874:	2001      	movs	r0, #1
 8012876:	bd70      	pop	{r4, r5, r6, pc}
 8012878:	f240 3086 	movw	r0, #902	@ 0x386
 801287c:	bd70      	pop	{r4, r5, r6, pc}
 801287e:	200b      	movs	r0, #11
 8012880:	4770      	bx	lr
 8012882:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012886:	bd70      	pop	{r4, r5, r6, pc}
 8012888:	200b      	movs	r0, #11
 801288a:	bd70      	pop	{r4, r5, r6, pc}
 801288c:	0000      	movs	r0, r0
	...

08012890 <rcl_wait>:
 8012890:	2800      	cmp	r0, #0
 8012892:	f000 81d4 	beq.w	8012c3e <rcl_wait+0x3ae>
 8012896:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801289a:	ed2d 8b02 	vpush	{d8}
 801289e:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 80128a0:	b099      	sub	sp, #100	@ 0x64
 80128a2:	4604      	mov	r4, r0
 80128a4:	2d00      	cmp	r5, #0
 80128a6:	f000 8178 	beq.w	8012b9a <rcl_wait+0x30a>
 80128aa:	461f      	mov	r7, r3
 80128ac:	6843      	ldr	r3, [r0, #4]
 80128ae:	4690      	mov	r8, r2
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	f000 809b 	beq.w	80129ec <rcl_wait+0x15c>
 80128b6:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80128b8:	2e00      	cmp	r6, #0
 80128ba:	f000 80b2 	beq.w	8012a22 <rcl_wait+0x192>
 80128be:	2100      	movs	r1, #0
 80128c0:	468c      	mov	ip, r1
 80128c2:	460a      	mov	r2, r1
 80128c4:	46a6      	mov	lr, r4
 80128c6:	f8de 3010 	ldr.w	r3, [lr, #16]
 80128ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128ce:	b173      	cbz	r3, 80128ee <rcl_wait+0x5e>
 80128d0:	f8de 300c 	ldr.w	r3, [lr, #12]
 80128d4:	6968      	ldr	r0, [r5, #20]
 80128d6:	440b      	add	r3, r1
 80128d8:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 80128dc:	b13c      	cbz	r4, 80128ee <rcl_wait+0x5e>
 80128de:	692b      	ldr	r3, [r5, #16]
 80128e0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 80128e4:	3301      	adds	r3, #1
 80128e6:	612b      	str	r3, [r5, #16]
 80128e8:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 80128ec:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 80128ee:	3101      	adds	r1, #1
 80128f0:	f14c 0c00 	adc.w	ip, ip, #0
 80128f4:	42b1      	cmp	r1, r6
 80128f6:	f17c 0300 	sbcs.w	r3, ip, #0
 80128fa:	d3e4      	bcc.n	80128c6 <rcl_wait+0x36>
 80128fc:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8012ba8 <rcl_wait+0x318>
 8012900:	ea58 0307 	orrs.w	r3, r8, r7
 8012904:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8012908:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 801290c:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8012910:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8012914:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8012918:	4674      	mov	r4, lr
 801291a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801291e:	f000 8094 	beq.w	8012a4a <rcl_wait+0x1ba>
 8012922:	2e00      	cmp	r6, #0
 8012924:	f000 8145 	beq.w	8012bb2 <rcl_wait+0x322>
 8012928:	2500      	movs	r5, #0
 801292a:	46bb      	mov	fp, r7
 801292c:	e02c      	b.n	8012988 <rcl_wait+0xf8>
 801292e:	6923      	ldr	r3, [r4, #16]
 8012930:	f853 0009 	ldr.w	r0, [r3, r9]
 8012934:	a908      	add	r1, sp, #32
 8012936:	ed8d 8b08 	vstr	d8, [sp, #32]
 801293a:	f7ff fafb 	bl	8011f34 <rcl_timer_get_next_call_time>
 801293e:	f240 3321 	movw	r3, #801	@ 0x321
 8012942:	4298      	cmp	r0, r3
 8012944:	f000 80bb 	beq.w	8012abe <rcl_wait+0x22e>
 8012948:	2800      	cmp	r0, #0
 801294a:	d165      	bne.n	8012a18 <rcl_wait+0x188>
 801294c:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 8012950:	7830      	ldrb	r0, [r6, #0]
 8012952:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012954:	ab18      	add	r3, sp, #96	@ 0x60
 8012956:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801295a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 801295e:	9205      	str	r2, [sp, #20]
 8012960:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8012964:	4297      	cmp	r7, r2
 8012966:	9a05      	ldr	r2, [sp, #20]
 8012968:	eb71 0202 	sbcs.w	r2, r1, r2
 801296c:	da06      	bge.n	801297c <rcl_wait+0xec>
 801296e:	e943 7108 	strd	r7, r1, [r3, #-32]
 8012972:	ab18      	add	r3, sp, #96	@ 0x60
 8012974:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012978:	f840 6c30 	str.w	r6, [r0, #-48]
 801297c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801297e:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 8012980:	3501      	adds	r5, #1
 8012982:	42b5      	cmp	r5, r6
 8012984:	f080 8114 	bcs.w	8012bb0 <rcl_wait+0x320>
 8012988:	6923      	ldr	r3, [r4, #16]
 801298a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801298e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8012992:	2800      	cmp	r0, #0
 8012994:	d0f4      	beq.n	8012980 <rcl_wait+0xf0>
 8012996:	a907      	add	r1, sp, #28
 8012998:	f7ff f9f8 	bl	8011d8c <rcl_timer_clock>
 801299c:	4603      	mov	r3, r0
 801299e:	2800      	cmp	r0, #0
 80129a0:	f040 8141 	bne.w	8012c26 <rcl_wait+0x396>
 80129a4:	9807      	ldr	r0, [sp, #28]
 80129a6:	7802      	ldrb	r2, [r0, #0]
 80129a8:	2a01      	cmp	r2, #1
 80129aa:	d1c0      	bne.n	801292e <rcl_wait+0x9e>
 80129ac:	f10d 011b 	add.w	r1, sp, #27
 80129b0:	f88d 301b 	strb.w	r3, [sp, #27]
 80129b4:	f7fe ffba 	bl	801192c <rcl_is_enabled_ros_time_override>
 80129b8:	4602      	mov	r2, r0
 80129ba:	2800      	cmp	r0, #0
 80129bc:	f040 8133 	bne.w	8012c26 <rcl_wait+0x396>
 80129c0:	6923      	ldr	r3, [r4, #16]
 80129c2:	f89d 101b 	ldrb.w	r1, [sp, #27]
 80129c6:	f853 0009 	ldr.w	r0, [r3, r9]
 80129ca:	2900      	cmp	r1, #0
 80129cc:	d0b0      	beq.n	8012930 <rcl_wait+0xa0>
 80129ce:	ae08      	add	r6, sp, #32
 80129d0:	4631      	mov	r1, r6
 80129d2:	f88d 2020 	strb.w	r2, [sp, #32]
 80129d6:	f7ff fa73 	bl	8011ec0 <rcl_timer_is_ready>
 80129da:	2800      	cmp	r0, #0
 80129dc:	f040 8123 	bne.w	8012c26 <rcl_wait+0x396>
 80129e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d0c9      	beq.n	801297c <rcl_wait+0xec>
 80129e8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80129ea:	e02f      	b.n	8012a4c <rcl_wait+0x1bc>
 80129ec:	68c3      	ldr	r3, [r0, #12]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	f47f af61 	bne.w	80128b6 <rcl_wait+0x26>
 80129f4:	6943      	ldr	r3, [r0, #20]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	f47f af5d 	bne.w	80128b6 <rcl_wait+0x26>
 80129fc:	69c3      	ldr	r3, [r0, #28]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	f47f af59 	bne.w	80128b6 <rcl_wait+0x26>
 8012a04:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	f47f af55 	bne.w	80128b6 <rcl_wait+0x26>
 8012a0c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	f47f af51 	bne.w	80128b6 <rcl_wait+0x26>
 8012a14:	f240 3085 	movw	r0, #901	@ 0x385
 8012a18:	b019      	add	sp, #100	@ 0x64
 8012a1a:	ecbd 8b02 	vpop	{d8}
 8012a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a22:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012a26:	f04f 32ff 	mov.w	r2, #4294967295
 8012a2a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8012a2e:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8012a32:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8012a36:	ea58 0307 	orrs.w	r3, r8, r7
 8012a3a:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 8012a3e:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 8012a42:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8012a46:	f040 80b4 	bne.w	8012bb2 <rcl_wait+0x322>
 8012a4a:	ae08      	add	r6, sp, #32
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	2300      	movs	r3, #0
 8012a50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012a54:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012a58:	9602      	str	r6, [sp, #8]
 8012a5a:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8012a5c:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8012a60:	e9cd 3200 	strd	r3, r2, [sp]
 8012a64:	f105 0110 	add.w	r1, r5, #16
 8012a68:	f105 031c 	add.w	r3, r5, #28
 8012a6c:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 8012a70:	1d28      	adds	r0, r5, #4
 8012a72:	f002 fa2f 	bl	8014ed4 <rmw_wait>
 8012a76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012a78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012a7a:	4680      	mov	r8, r0
 8012a7c:	b332      	cbz	r2, 8012acc <rcl_wait+0x23c>
 8012a7e:	2500      	movs	r5, #0
 8012a80:	462f      	mov	r7, r5
 8012a82:	462e      	mov	r6, r5
 8012a84:	e007      	b.n	8012a96 <rcl_wait+0x206>
 8012a86:	6922      	ldr	r2, [r4, #16]
 8012a88:	f842 3009 	str.w	r3, [r2, r9]
 8012a8c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012a90:	3501      	adds	r5, #1
 8012a92:	4295      	cmp	r5, r2
 8012a94:	d21b      	bcs.n	8012ace <rcl_wait+0x23e>
 8012a96:	6920      	ldr	r0, [r4, #16]
 8012a98:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8012a9c:	a907      	add	r1, sp, #28
 8012a9e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d0f4      	beq.n	8012a90 <rcl_wait+0x200>
 8012aa6:	f88d 601c 	strb.w	r6, [sp, #28]
 8012aaa:	f7ff fa09 	bl	8011ec0 <rcl_timer_is_ready>
 8012aae:	2800      	cmp	r0, #0
 8012ab0:	d1b2      	bne.n	8012a18 <rcl_wait+0x188>
 8012ab2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d0e5      	beq.n	8012a86 <rcl_wait+0x1f6>
 8012aba:	461f      	mov	r7, r3
 8012abc:	e7e6      	b.n	8012a8c <rcl_wait+0x1fc>
 8012abe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012ac0:	6923      	ldr	r3, [r4, #16]
 8012ac2:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	f843 2009 	str.w	r2, [r3, r9]
 8012aca:	e759      	b.n	8012980 <rcl_wait+0xf0>
 8012acc:	4617      	mov	r7, r2
 8012ace:	f038 0002 	bics.w	r0, r8, #2
 8012ad2:	f040 80a8 	bne.w	8012c26 <rcl_wait+0x396>
 8012ad6:	6866      	ldr	r6, [r4, #4]
 8012ad8:	4602      	mov	r2, r0
 8012ada:	b91e      	cbnz	r6, 8012ae4 <rcl_wait+0x254>
 8012adc:	e00d      	b.n	8012afa <rcl_wait+0x26a>
 8012ade:	3201      	adds	r2, #1
 8012ae0:	4296      	cmp	r6, r2
 8012ae2:	d00a      	beq.n	8012afa <rcl_wait+0x26a>
 8012ae4:	6899      	ldr	r1, [r3, #8]
 8012ae6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012aea:	2900      	cmp	r1, #0
 8012aec:	d1f7      	bne.n	8012ade <rcl_wait+0x24e>
 8012aee:	6825      	ldr	r5, [r4, #0]
 8012af0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012af4:	3201      	adds	r2, #1
 8012af6:	4296      	cmp	r6, r2
 8012af8:	d1f4      	bne.n	8012ae4 <rcl_wait+0x254>
 8012afa:	68e6      	ldr	r6, [r4, #12]
 8012afc:	2200      	movs	r2, #0
 8012afe:	b91e      	cbnz	r6, 8012b08 <rcl_wait+0x278>
 8012b00:	e00d      	b.n	8012b1e <rcl_wait+0x28e>
 8012b02:	3201      	adds	r2, #1
 8012b04:	42b2      	cmp	r2, r6
 8012b06:	d00a      	beq.n	8012b1e <rcl_wait+0x28e>
 8012b08:	6959      	ldr	r1, [r3, #20]
 8012b0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012b0e:	2900      	cmp	r1, #0
 8012b10:	d1f7      	bne.n	8012b02 <rcl_wait+0x272>
 8012b12:	68a5      	ldr	r5, [r4, #8]
 8012b14:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012b18:	3201      	adds	r2, #1
 8012b1a:	42b2      	cmp	r2, r6
 8012b1c:	d1f4      	bne.n	8012b08 <rcl_wait+0x278>
 8012b1e:	69e6      	ldr	r6, [r4, #28]
 8012b20:	2200      	movs	r2, #0
 8012b22:	b91e      	cbnz	r6, 8012b2c <rcl_wait+0x29c>
 8012b24:	e00d      	b.n	8012b42 <rcl_wait+0x2b2>
 8012b26:	3201      	adds	r2, #1
 8012b28:	4296      	cmp	r6, r2
 8012b2a:	d00a      	beq.n	8012b42 <rcl_wait+0x2b2>
 8012b2c:	6a19      	ldr	r1, [r3, #32]
 8012b2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012b32:	2900      	cmp	r1, #0
 8012b34:	d1f7      	bne.n	8012b26 <rcl_wait+0x296>
 8012b36:	69a5      	ldr	r5, [r4, #24]
 8012b38:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012b3c:	3201      	adds	r2, #1
 8012b3e:	4296      	cmp	r6, r2
 8012b40:	d1f4      	bne.n	8012b2c <rcl_wait+0x29c>
 8012b42:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8012b44:	2200      	movs	r2, #0
 8012b46:	b91e      	cbnz	r6, 8012b50 <rcl_wait+0x2c0>
 8012b48:	e00d      	b.n	8012b66 <rcl_wait+0x2d6>
 8012b4a:	3201      	adds	r2, #1
 8012b4c:	42b2      	cmp	r2, r6
 8012b4e:	d00a      	beq.n	8012b66 <rcl_wait+0x2d6>
 8012b50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012b52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012b56:	2900      	cmp	r1, #0
 8012b58:	d1f7      	bne.n	8012b4a <rcl_wait+0x2ba>
 8012b5a:	6a25      	ldr	r5, [r4, #32]
 8012b5c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012b60:	3201      	adds	r2, #1
 8012b62:	42b2      	cmp	r2, r6
 8012b64:	d1f4      	bne.n	8012b50 <rcl_wait+0x2c0>
 8012b66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012b68:	2200      	movs	r2, #0
 8012b6a:	b91e      	cbnz	r6, 8012b74 <rcl_wait+0x2e4>
 8012b6c:	e00d      	b.n	8012b8a <rcl_wait+0x2fa>
 8012b6e:	3201      	adds	r2, #1
 8012b70:	42b2      	cmp	r2, r6
 8012b72:	d00a      	beq.n	8012b8a <rcl_wait+0x2fa>
 8012b74:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012b76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8012b7a:	2900      	cmp	r1, #0
 8012b7c:	d1f7      	bne.n	8012b6e <rcl_wait+0x2de>
 8012b7e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8012b80:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8012b84:	3201      	adds	r2, #1
 8012b86:	42b2      	cmp	r2, r6
 8012b88:	d1f4      	bne.n	8012b74 <rcl_wait+0x2e4>
 8012b8a:	f1b8 0f02 	cmp.w	r8, #2
 8012b8e:	f47f af43 	bne.w	8012a18 <rcl_wait+0x188>
 8012b92:	f087 0701 	eor.w	r7, r7, #1
 8012b96:	0078      	lsls	r0, r7, #1
 8012b98:	e73e      	b.n	8012a18 <rcl_wait+0x188>
 8012b9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012b9e:	b019      	add	sp, #100	@ 0x64
 8012ba0:	ecbd 8b02 	vpop	{d8}
 8012ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ba8:	ffffffff 	.word	0xffffffff
 8012bac:	7fffffff 	.word	0x7fffffff
 8012bb0:	465f      	mov	r7, fp
 8012bb2:	f1b8 0f01 	cmp.w	r8, #1
 8012bb6:	f177 0300 	sbcs.w	r3, r7, #0
 8012bba:	db3a      	blt.n	8012c32 <rcl_wait+0x3a2>
 8012bbc:	2601      	movs	r6, #1
 8012bbe:	ad10      	add	r5, sp, #64	@ 0x40
 8012bc0:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 8012bc4:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8012bc8:	a908      	add	r1, sp, #32
 8012bca:	b1a0      	cbz	r0, 8012bf6 <rcl_wait+0x366>
 8012bcc:	f7fe fea2 	bl	8011914 <rcl_clock_get_now>
 8012bd0:	2800      	cmp	r0, #0
 8012bd2:	f47f af21 	bne.w	8012a18 <rcl_wait+0x188>
 8012bd6:	9a08      	ldr	r2, [sp, #32]
 8012bd8:	68ab      	ldr	r3, [r5, #8]
 8012bda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012bdc:	1a9b      	subs	r3, r3, r2
 8012bde:	68ea      	ldr	r2, [r5, #12]
 8012be0:	eb62 0201 	sbc.w	r2, r2, r1
 8012be4:	4598      	cmp	r8, r3
 8012be6:	eb77 0102 	sbcs.w	r1, r7, r2
 8012bea:	bfba      	itte	lt
 8012bec:	4643      	movlt	r3, r8
 8012bee:	463a      	movlt	r2, r7
 8012bf0:	2601      	movge	r6, #1
 8012bf2:	4698      	mov	r8, r3
 8012bf4:	4617      	mov	r7, r2
 8012bf6:	3508      	adds	r5, #8
 8012bf8:	45a9      	cmp	r9, r5
 8012bfa:	d1e3      	bne.n	8012bc4 <rcl_wait+0x334>
 8012bfc:	2f00      	cmp	r7, #0
 8012bfe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012c00:	bfab      	itete	ge
 8012c02:	4640      	movge	r0, r8
 8012c04:	2000      	movlt	r0, #0
 8012c06:	4639      	movge	r1, r7
 8012c08:	2100      	movlt	r1, #0
 8012c0a:	2e00      	cmp	r6, #0
 8012c0c:	f43f af24 	beq.w	8012a58 <rcl_wait+0x1c8>
 8012c10:	a30d      	add	r3, pc, #52	@ (adr r3, 8012c48 <rcl_wait+0x3b8>)
 8012c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c16:	f7ed fdf7 	bl	8000808 <__aeabi_ldivmod>
 8012c1a:	ae08      	add	r6, sp, #32
 8012c1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012c20:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8012c24:	e718      	b.n	8012a58 <rcl_wait+0x1c8>
 8012c26:	2001      	movs	r0, #1
 8012c28:	b019      	add	sp, #100	@ 0x64
 8012c2a:	ecbd 8b02 	vpop	{d8}
 8012c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c32:	2600      	movs	r6, #0
 8012c34:	f04f 38ff 	mov.w	r8, #4294967295
 8012c38:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8012c3c:	e7bf      	b.n	8012bbe <rcl_wait+0x32e>
 8012c3e:	200b      	movs	r0, #11
 8012c40:	4770      	bx	lr
 8012c42:	bf00      	nop
 8012c44:	f3af 8000 	nop.w
 8012c48:	3b9aca00 	.word	0x3b9aca00
 8012c4c:	00000000 	.word	0x00000000

08012c50 <rcl_action_take_goal_response>:
 8012c50:	b3b0      	cbz	r0, 8012cc0 <rcl_action_take_goal_response+0x70>
 8012c52:	b570      	push	{r4, r5, r6, lr}
 8012c54:	4604      	mov	r4, r0
 8012c56:	6800      	ldr	r0, [r0, #0]
 8012c58:	b368      	cbz	r0, 8012cb6 <rcl_action_take_goal_response+0x66>
 8012c5a:	460d      	mov	r5, r1
 8012c5c:	4616      	mov	r6, r2
 8012c5e:	f7fd ff3b 	bl	8010ad8 <rcl_client_is_valid>
 8012c62:	b330      	cbz	r0, 8012cb2 <rcl_action_take_goal_response+0x62>
 8012c64:	6820      	ldr	r0, [r4, #0]
 8012c66:	3004      	adds	r0, #4
 8012c68:	f7fd ff36 	bl	8010ad8 <rcl_client_is_valid>
 8012c6c:	b308      	cbz	r0, 8012cb2 <rcl_action_take_goal_response+0x62>
 8012c6e:	6820      	ldr	r0, [r4, #0]
 8012c70:	3008      	adds	r0, #8
 8012c72:	f7fd ff31 	bl	8010ad8 <rcl_client_is_valid>
 8012c76:	b1e0      	cbz	r0, 8012cb2 <rcl_action_take_goal_response+0x62>
 8012c78:	6820      	ldr	r0, [r4, #0]
 8012c7a:	300c      	adds	r0, #12
 8012c7c:	f7fe fdae 	bl	80117dc <rcl_subscription_is_valid>
 8012c80:	b1b8      	cbz	r0, 8012cb2 <rcl_action_take_goal_response+0x62>
 8012c82:	6820      	ldr	r0, [r4, #0]
 8012c84:	3010      	adds	r0, #16
 8012c86:	f7fe fda9 	bl	80117dc <rcl_subscription_is_valid>
 8012c8a:	b190      	cbz	r0, 8012cb2 <rcl_action_take_goal_response+0x62>
 8012c8c:	b1b5      	cbz	r5, 8012cbc <rcl_action_take_goal_response+0x6c>
 8012c8e:	b1ae      	cbz	r6, 8012cbc <rcl_action_take_goal_response+0x6c>
 8012c90:	6820      	ldr	r0, [r4, #0]
 8012c92:	4632      	mov	r2, r6
 8012c94:	4629      	mov	r1, r5
 8012c96:	f7fd feb3 	bl	8010a00 <rcl_take_response>
 8012c9a:	b148      	cbz	r0, 8012cb0 <rcl_action_take_goal_response+0x60>
 8012c9c:	280a      	cmp	r0, #10
 8012c9e:	d007      	beq.n	8012cb0 <rcl_action_take_goal_response+0x60>
 8012ca0:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012ca4:	f241 0307 	movw	r3, #4103	@ 0x1007
 8012ca8:	4290      	cmp	r0, r2
 8012caa:	bf0c      	ite	eq
 8012cac:	4618      	moveq	r0, r3
 8012cae:	2001      	movne	r0, #1
 8012cb0:	bd70      	pop	{r4, r5, r6, pc}
 8012cb2:	f7f7 fad5 	bl	800a260 <rcutils_reset_error>
 8012cb6:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012cba:	bd70      	pop	{r4, r5, r6, pc}
 8012cbc:	200b      	movs	r0, #11
 8012cbe:	bd70      	pop	{r4, r5, r6, pc}
 8012cc0:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012cc4:	4770      	bx	lr
 8012cc6:	bf00      	nop

08012cc8 <rcl_action_send_result_request>:
 8012cc8:	b378      	cbz	r0, 8012d2a <rcl_action_send_result_request+0x62>
 8012cca:	b570      	push	{r4, r5, r6, lr}
 8012ccc:	4604      	mov	r4, r0
 8012cce:	6800      	ldr	r0, [r0, #0]
 8012cd0:	b330      	cbz	r0, 8012d20 <rcl_action_send_result_request+0x58>
 8012cd2:	460d      	mov	r5, r1
 8012cd4:	4616      	mov	r6, r2
 8012cd6:	f7fd feff 	bl	8010ad8 <rcl_client_is_valid>
 8012cda:	b1f8      	cbz	r0, 8012d1c <rcl_action_send_result_request+0x54>
 8012cdc:	6820      	ldr	r0, [r4, #0]
 8012cde:	3004      	adds	r0, #4
 8012ce0:	f7fd fefa 	bl	8010ad8 <rcl_client_is_valid>
 8012ce4:	b1d0      	cbz	r0, 8012d1c <rcl_action_send_result_request+0x54>
 8012ce6:	6820      	ldr	r0, [r4, #0]
 8012ce8:	3008      	adds	r0, #8
 8012cea:	f7fd fef5 	bl	8010ad8 <rcl_client_is_valid>
 8012cee:	b1a8      	cbz	r0, 8012d1c <rcl_action_send_result_request+0x54>
 8012cf0:	6820      	ldr	r0, [r4, #0]
 8012cf2:	300c      	adds	r0, #12
 8012cf4:	f7fe fd72 	bl	80117dc <rcl_subscription_is_valid>
 8012cf8:	b180      	cbz	r0, 8012d1c <rcl_action_send_result_request+0x54>
 8012cfa:	6820      	ldr	r0, [r4, #0]
 8012cfc:	3010      	adds	r0, #16
 8012cfe:	f7fe fd6d 	bl	80117dc <rcl_subscription_is_valid>
 8012d02:	b158      	cbz	r0, 8012d1c <rcl_action_send_result_request+0x54>
 8012d04:	b17d      	cbz	r5, 8012d26 <rcl_action_send_result_request+0x5e>
 8012d06:	b176      	cbz	r6, 8012d26 <rcl_action_send_result_request+0x5e>
 8012d08:	6820      	ldr	r0, [r4, #0]
 8012d0a:	4632      	mov	r2, r6
 8012d0c:	4629      	mov	r1, r5
 8012d0e:	3008      	adds	r0, #8
 8012d10:	f7fd fe22 	bl	8010958 <rcl_send_request>
 8012d14:	3800      	subs	r0, #0
 8012d16:	bf18      	it	ne
 8012d18:	2001      	movne	r0, #1
 8012d1a:	bd70      	pop	{r4, r5, r6, pc}
 8012d1c:	f7f7 faa0 	bl	800a260 <rcutils_reset_error>
 8012d20:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012d24:	bd70      	pop	{r4, r5, r6, pc}
 8012d26:	200b      	movs	r0, #11
 8012d28:	bd70      	pop	{r4, r5, r6, pc}
 8012d2a:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012d2e:	4770      	bx	lr

08012d30 <rcl_action_take_result_response>:
 8012d30:	2800      	cmp	r0, #0
 8012d32:	d037      	beq.n	8012da4 <rcl_action_take_result_response+0x74>
 8012d34:	b570      	push	{r4, r5, r6, lr}
 8012d36:	4604      	mov	r4, r0
 8012d38:	6800      	ldr	r0, [r0, #0]
 8012d3a:	b370      	cbz	r0, 8012d9a <rcl_action_take_result_response+0x6a>
 8012d3c:	460d      	mov	r5, r1
 8012d3e:	4616      	mov	r6, r2
 8012d40:	f7fd feca 	bl	8010ad8 <rcl_client_is_valid>
 8012d44:	b338      	cbz	r0, 8012d96 <rcl_action_take_result_response+0x66>
 8012d46:	6820      	ldr	r0, [r4, #0]
 8012d48:	3004      	adds	r0, #4
 8012d4a:	f7fd fec5 	bl	8010ad8 <rcl_client_is_valid>
 8012d4e:	b310      	cbz	r0, 8012d96 <rcl_action_take_result_response+0x66>
 8012d50:	6820      	ldr	r0, [r4, #0]
 8012d52:	3008      	adds	r0, #8
 8012d54:	f7fd fec0 	bl	8010ad8 <rcl_client_is_valid>
 8012d58:	b1e8      	cbz	r0, 8012d96 <rcl_action_take_result_response+0x66>
 8012d5a:	6820      	ldr	r0, [r4, #0]
 8012d5c:	300c      	adds	r0, #12
 8012d5e:	f7fe fd3d 	bl	80117dc <rcl_subscription_is_valid>
 8012d62:	b1c0      	cbz	r0, 8012d96 <rcl_action_take_result_response+0x66>
 8012d64:	6820      	ldr	r0, [r4, #0]
 8012d66:	3010      	adds	r0, #16
 8012d68:	f7fe fd38 	bl	80117dc <rcl_subscription_is_valid>
 8012d6c:	b198      	cbz	r0, 8012d96 <rcl_action_take_result_response+0x66>
 8012d6e:	b1bd      	cbz	r5, 8012da0 <rcl_action_take_result_response+0x70>
 8012d70:	b1b6      	cbz	r6, 8012da0 <rcl_action_take_result_response+0x70>
 8012d72:	6820      	ldr	r0, [r4, #0]
 8012d74:	4632      	mov	r2, r6
 8012d76:	4629      	mov	r1, r5
 8012d78:	3008      	adds	r0, #8
 8012d7a:	f7fd fe41 	bl	8010a00 <rcl_take_response>
 8012d7e:	b148      	cbz	r0, 8012d94 <rcl_action_take_result_response+0x64>
 8012d80:	280a      	cmp	r0, #10
 8012d82:	d007      	beq.n	8012d94 <rcl_action_take_result_response+0x64>
 8012d84:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012d88:	f241 0307 	movw	r3, #4103	@ 0x1007
 8012d8c:	4290      	cmp	r0, r2
 8012d8e:	bf0c      	ite	eq
 8012d90:	4618      	moveq	r0, r3
 8012d92:	2001      	movne	r0, #1
 8012d94:	bd70      	pop	{r4, r5, r6, pc}
 8012d96:	f7f7 fa63 	bl	800a260 <rcutils_reset_error>
 8012d9a:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012d9e:	bd70      	pop	{r4, r5, r6, pc}
 8012da0:	200b      	movs	r0, #11
 8012da2:	bd70      	pop	{r4, r5, r6, pc}
 8012da4:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012da8:	4770      	bx	lr
 8012daa:	bf00      	nop

08012dac <rcl_action_take_cancel_response>:
 8012dac:	2800      	cmp	r0, #0
 8012dae:	d037      	beq.n	8012e20 <rcl_action_take_cancel_response+0x74>
 8012db0:	b570      	push	{r4, r5, r6, lr}
 8012db2:	4604      	mov	r4, r0
 8012db4:	6800      	ldr	r0, [r0, #0]
 8012db6:	b370      	cbz	r0, 8012e16 <rcl_action_take_cancel_response+0x6a>
 8012db8:	460d      	mov	r5, r1
 8012dba:	4616      	mov	r6, r2
 8012dbc:	f7fd fe8c 	bl	8010ad8 <rcl_client_is_valid>
 8012dc0:	b338      	cbz	r0, 8012e12 <rcl_action_take_cancel_response+0x66>
 8012dc2:	6820      	ldr	r0, [r4, #0]
 8012dc4:	3004      	adds	r0, #4
 8012dc6:	f7fd fe87 	bl	8010ad8 <rcl_client_is_valid>
 8012dca:	b310      	cbz	r0, 8012e12 <rcl_action_take_cancel_response+0x66>
 8012dcc:	6820      	ldr	r0, [r4, #0]
 8012dce:	3008      	adds	r0, #8
 8012dd0:	f7fd fe82 	bl	8010ad8 <rcl_client_is_valid>
 8012dd4:	b1e8      	cbz	r0, 8012e12 <rcl_action_take_cancel_response+0x66>
 8012dd6:	6820      	ldr	r0, [r4, #0]
 8012dd8:	300c      	adds	r0, #12
 8012dda:	f7fe fcff 	bl	80117dc <rcl_subscription_is_valid>
 8012dde:	b1c0      	cbz	r0, 8012e12 <rcl_action_take_cancel_response+0x66>
 8012de0:	6820      	ldr	r0, [r4, #0]
 8012de2:	3010      	adds	r0, #16
 8012de4:	f7fe fcfa 	bl	80117dc <rcl_subscription_is_valid>
 8012de8:	b198      	cbz	r0, 8012e12 <rcl_action_take_cancel_response+0x66>
 8012dea:	b1bd      	cbz	r5, 8012e1c <rcl_action_take_cancel_response+0x70>
 8012dec:	b1b6      	cbz	r6, 8012e1c <rcl_action_take_cancel_response+0x70>
 8012dee:	6820      	ldr	r0, [r4, #0]
 8012df0:	4632      	mov	r2, r6
 8012df2:	4629      	mov	r1, r5
 8012df4:	3004      	adds	r0, #4
 8012df6:	f7fd fe03 	bl	8010a00 <rcl_take_response>
 8012dfa:	b148      	cbz	r0, 8012e10 <rcl_action_take_cancel_response+0x64>
 8012dfc:	280a      	cmp	r0, #10
 8012dfe:	d007      	beq.n	8012e10 <rcl_action_take_cancel_response+0x64>
 8012e00:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8012e04:	f241 0307 	movw	r3, #4103	@ 0x1007
 8012e08:	4290      	cmp	r0, r2
 8012e0a:	bf0c      	ite	eq
 8012e0c:	4618      	moveq	r0, r3
 8012e0e:	2001      	movne	r0, #1
 8012e10:	bd70      	pop	{r4, r5, r6, pc}
 8012e12:	f7f7 fa25 	bl	800a260 <rcutils_reset_error>
 8012e16:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012e1a:	bd70      	pop	{r4, r5, r6, pc}
 8012e1c:	200b      	movs	r0, #11
 8012e1e:	bd70      	pop	{r4, r5, r6, pc}
 8012e20:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop

08012e28 <rcl_action_take_feedback>:
 8012e28:	2800      	cmp	r0, #0
 8012e2a:	d037      	beq.n	8012e9c <rcl_action_take_feedback+0x74>
 8012e2c:	b530      	push	{r4, r5, lr}
 8012e2e:	4604      	mov	r4, r0
 8012e30:	6800      	ldr	r0, [r0, #0]
 8012e32:	b08f      	sub	sp, #60	@ 0x3c
 8012e34:	b358      	cbz	r0, 8012e8e <rcl_action_take_feedback+0x66>
 8012e36:	460d      	mov	r5, r1
 8012e38:	f7fd fe4e 	bl	8010ad8 <rcl_client_is_valid>
 8012e3c:	b328      	cbz	r0, 8012e8a <rcl_action_take_feedback+0x62>
 8012e3e:	6820      	ldr	r0, [r4, #0]
 8012e40:	3004      	adds	r0, #4
 8012e42:	f7fd fe49 	bl	8010ad8 <rcl_client_is_valid>
 8012e46:	b300      	cbz	r0, 8012e8a <rcl_action_take_feedback+0x62>
 8012e48:	6820      	ldr	r0, [r4, #0]
 8012e4a:	3008      	adds	r0, #8
 8012e4c:	f7fd fe44 	bl	8010ad8 <rcl_client_is_valid>
 8012e50:	b1d8      	cbz	r0, 8012e8a <rcl_action_take_feedback+0x62>
 8012e52:	6820      	ldr	r0, [r4, #0]
 8012e54:	300c      	adds	r0, #12
 8012e56:	f7fe fcc1 	bl	80117dc <rcl_subscription_is_valid>
 8012e5a:	b1b0      	cbz	r0, 8012e8a <rcl_action_take_feedback+0x62>
 8012e5c:	6820      	ldr	r0, [r4, #0]
 8012e5e:	3010      	adds	r0, #16
 8012e60:	f7fe fcbc 	bl	80117dc <rcl_subscription_is_valid>
 8012e64:	b188      	cbz	r0, 8012e8a <rcl_action_take_feedback+0x62>
 8012e66:	b1b5      	cbz	r5, 8012e96 <rcl_action_take_feedback+0x6e>
 8012e68:	6820      	ldr	r0, [r4, #0]
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	466a      	mov	r2, sp
 8012e6e:	4629      	mov	r1, r5
 8012e70:	300c      	adds	r0, #12
 8012e72:	f7fe fc55 	bl	8011720 <rcl_take>
 8012e76:	b160      	cbz	r0, 8012e92 <rcl_action_take_feedback+0x6a>
 8012e78:	f240 1391 	movw	r3, #401	@ 0x191
 8012e7c:	4298      	cmp	r0, r3
 8012e7e:	d010      	beq.n	8012ea2 <rcl_action_take_feedback+0x7a>
 8012e80:	280a      	cmp	r0, #10
 8012e82:	bf18      	it	ne
 8012e84:	2001      	movne	r0, #1
 8012e86:	b00f      	add	sp, #60	@ 0x3c
 8012e88:	bd30      	pop	{r4, r5, pc}
 8012e8a:	f7f7 f9e9 	bl	800a260 <rcutils_reset_error>
 8012e8e:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012e92:	b00f      	add	sp, #60	@ 0x3c
 8012e94:	bd30      	pop	{r4, r5, pc}
 8012e96:	200b      	movs	r0, #11
 8012e98:	b00f      	add	sp, #60	@ 0x3c
 8012e9a:	bd30      	pop	{r4, r5, pc}
 8012e9c:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012ea0:	4770      	bx	lr
 8012ea2:	f241 0007 	movw	r0, #4103	@ 0x1007
 8012ea6:	e7f4      	b.n	8012e92 <rcl_action_take_feedback+0x6a>

08012ea8 <rcl_action_wait_set_add_action_client>:
 8012ea8:	2800      	cmp	r0, #0
 8012eaa:	d045      	beq.n	8012f38 <rcl_action_wait_set_add_action_client+0x90>
 8012eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eae:	460c      	mov	r4, r1
 8012eb0:	2900      	cmp	r1, #0
 8012eb2:	d03e      	beq.n	8012f32 <rcl_action_wait_set_add_action_client+0x8a>
 8012eb4:	4605      	mov	r5, r0
 8012eb6:	6808      	ldr	r0, [r1, #0]
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	d03a      	beq.n	8012f32 <rcl_action_wait_set_add_action_client+0x8a>
 8012ebc:	4617      	mov	r7, r2
 8012ebe:	461e      	mov	r6, r3
 8012ec0:	f7fd fe0a 	bl	8010ad8 <rcl_client_is_valid>
 8012ec4:	b398      	cbz	r0, 8012f2e <rcl_action_wait_set_add_action_client+0x86>
 8012ec6:	6820      	ldr	r0, [r4, #0]
 8012ec8:	3004      	adds	r0, #4
 8012eca:	f7fd fe05 	bl	8010ad8 <rcl_client_is_valid>
 8012ece:	b370      	cbz	r0, 8012f2e <rcl_action_wait_set_add_action_client+0x86>
 8012ed0:	6820      	ldr	r0, [r4, #0]
 8012ed2:	3008      	adds	r0, #8
 8012ed4:	f7fd fe00 	bl	8010ad8 <rcl_client_is_valid>
 8012ed8:	b348      	cbz	r0, 8012f2e <rcl_action_wait_set_add_action_client+0x86>
 8012eda:	6820      	ldr	r0, [r4, #0]
 8012edc:	300c      	adds	r0, #12
 8012ede:	f7fe fc7d 	bl	80117dc <rcl_subscription_is_valid>
 8012ee2:	b320      	cbz	r0, 8012f2e <rcl_action_wait_set_add_action_client+0x86>
 8012ee4:	6820      	ldr	r0, [r4, #0]
 8012ee6:	3010      	adds	r0, #16
 8012ee8:	f7fe fc78 	bl	80117dc <rcl_subscription_is_valid>
 8012eec:	b1f8      	cbz	r0, 8012f2e <rcl_action_wait_set_add_action_client+0x86>
 8012eee:	6821      	ldr	r1, [r4, #0]
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8012ef6:	f7ff fc71 	bl	80127dc <rcl_wait_set_add_client>
 8012efa:	b9b8      	cbnz	r0, 8012f2c <rcl_action_wait_set_add_action_client+0x84>
 8012efc:	6821      	ldr	r1, [r4, #0]
 8012efe:	4628      	mov	r0, r5
 8012f00:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8012f04:	3104      	adds	r1, #4
 8012f06:	f7ff fc69 	bl	80127dc <rcl_wait_set_add_client>
 8012f0a:	b978      	cbnz	r0, 8012f2c <rcl_action_wait_set_add_action_client+0x84>
 8012f0c:	6821      	ldr	r1, [r4, #0]
 8012f0e:	4628      	mov	r0, r5
 8012f10:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8012f14:	3108      	adds	r1, #8
 8012f16:	f7ff fc61 	bl	80127dc <rcl_wait_set_add_client>
 8012f1a:	b938      	cbnz	r0, 8012f2c <rcl_action_wait_set_add_action_client+0x84>
 8012f1c:	6821      	ldr	r1, [r4, #0]
 8012f1e:	4628      	mov	r0, r5
 8012f20:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8012f24:	310c      	adds	r1, #12
 8012f26:	f7ff f903 	bl	8012130 <rcl_wait_set_add_subscription>
 8012f2a:	b140      	cbz	r0, 8012f3e <rcl_action_wait_set_add_action_client+0x96>
 8012f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f2e:	f7f7 f997 	bl	800a260 <rcutils_reset_error>
 8012f32:	f241 0006 	movw	r0, #4102	@ 0x1006
 8012f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f38:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012f3c:	4770      	bx	lr
 8012f3e:	6821      	ldr	r1, [r4, #0]
 8012f40:	4628      	mov	r0, r5
 8012f42:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8012f46:	3110      	adds	r1, #16
 8012f48:	f7ff f8f2 	bl	8012130 <rcl_wait_set_add_subscription>
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	d1ed      	bne.n	8012f2c <rcl_action_wait_set_add_action_client+0x84>
 8012f50:	b11f      	cbz	r7, 8012f5a <rcl_action_wait_set_add_action_client+0xb2>
 8012f52:	6823      	ldr	r3, [r4, #0]
 8012f54:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8012f58:	603b      	str	r3, [r7, #0]
 8012f5a:	2e00      	cmp	r6, #0
 8012f5c:	d0e6      	beq.n	8012f2c <rcl_action_wait_set_add_action_client+0x84>
 8012f5e:	6823      	ldr	r3, [r4, #0]
 8012f60:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8012f64:	6033      	str	r3, [r6, #0]
 8012f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012f68 <rcl_action_client_wait_set_get_entities_ready>:
 8012f68:	2800      	cmp	r0, #0
 8012f6a:	f000 8089 	beq.w	8013080 <rcl_action_client_wait_set_get_entities_ready+0x118>
 8012f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f72:	460c      	mov	r4, r1
 8012f74:	2900      	cmp	r1, #0
 8012f76:	d079      	beq.n	801306c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012f78:	4605      	mov	r5, r0
 8012f7a:	6808      	ldr	r0, [r1, #0]
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	d075      	beq.n	801306c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8012f80:	4616      	mov	r6, r2
 8012f82:	461f      	mov	r7, r3
 8012f84:	f7fd fda8 	bl	8010ad8 <rcl_client_is_valid>
 8012f88:	2800      	cmp	r0, #0
 8012f8a:	d06d      	beq.n	8013068 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012f8c:	6820      	ldr	r0, [r4, #0]
 8012f8e:	3004      	adds	r0, #4
 8012f90:	f7fd fda2 	bl	8010ad8 <rcl_client_is_valid>
 8012f94:	2800      	cmp	r0, #0
 8012f96:	d067      	beq.n	8013068 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012f98:	6820      	ldr	r0, [r4, #0]
 8012f9a:	3008      	adds	r0, #8
 8012f9c:	f7fd fd9c 	bl	8010ad8 <rcl_client_is_valid>
 8012fa0:	2800      	cmp	r0, #0
 8012fa2:	d061      	beq.n	8013068 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012fa4:	6820      	ldr	r0, [r4, #0]
 8012fa6:	300c      	adds	r0, #12
 8012fa8:	f7fe fc18 	bl	80117dc <rcl_subscription_is_valid>
 8012fac:	2800      	cmp	r0, #0
 8012fae:	d05b      	beq.n	8013068 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012fb0:	6820      	ldr	r0, [r4, #0]
 8012fb2:	3010      	adds	r0, #16
 8012fb4:	f7fe fc12 	bl	80117dc <rcl_subscription_is_valid>
 8012fb8:	2800      	cmp	r0, #0
 8012fba:	d055      	beq.n	8013068 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8012fbc:	2e00      	cmp	r6, #0
 8012fbe:	d05c      	beq.n	801307a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012fc0:	2f00      	cmp	r7, #0
 8012fc2:	d05a      	beq.n	801307a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012fc4:	9b06      	ldr	r3, [sp, #24]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d057      	beq.n	801307a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012fca:	9b07      	ldr	r3, [sp, #28]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d054      	beq.n	801307a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012fd0:	9b08      	ldr	r3, [sp, #32]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d051      	beq.n	801307a <rcl_action_client_wait_set_get_entities_ready+0x112>
 8012fd6:	6823      	ldr	r3, [r4, #0]
 8012fd8:	686a      	ldr	r2, [r5, #4]
 8012fda:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8012fde:	428a      	cmp	r2, r1
 8012fe0:	d948      	bls.n	8013074 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8012fe2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8012fe6:	4282      	cmp	r2, r0
 8012fe8:	d944      	bls.n	8013074 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8012fea:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8012fee:	69ea      	ldr	r2, [r5, #28]
 8012ff0:	42a2      	cmp	r2, r4
 8012ff2:	d93f      	bls.n	8013074 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8012ff4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8012ff8:	4562      	cmp	r2, ip
 8012ffa:	d93b      	bls.n	8013074 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8012ffc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8013000:	4572      	cmp	r2, lr
 8013002:	d937      	bls.n	8013074 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8013004:	69aa      	ldr	r2, [r5, #24]
 8013006:	682d      	ldr	r5, [r5, #0]
 8013008:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801300c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8013010:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8013014:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8013018:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801301c:	f103 0c0c 	add.w	ip, r3, #12
 8013020:	eba5 050c 	sub.w	r5, r5, ip
 8013024:	fab5 f585 	clz	r5, r5
 8013028:	096d      	lsrs	r5, r5, #5
 801302a:	7035      	strb	r5, [r6, #0]
 801302c:	f103 0510 	add.w	r5, r3, #16
 8013030:	1b64      	subs	r4, r4, r5
 8013032:	fab4 f484 	clz	r4, r4
 8013036:	0964      	lsrs	r4, r4, #5
 8013038:	703c      	strb	r4, [r7, #0]
 801303a:	eba3 0008 	sub.w	r0, r3, r8
 801303e:	1d1c      	adds	r4, r3, #4
 8013040:	3308      	adds	r3, #8
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	fab0 f080 	clz	r0, r0
 8013048:	9a06      	ldr	r2, [sp, #24]
 801304a:	0940      	lsrs	r0, r0, #5
 801304c:	1b09      	subs	r1, r1, r4
 801304e:	7010      	strb	r0, [r2, #0]
 8013050:	fab1 f181 	clz	r1, r1
 8013054:	9a07      	ldr	r2, [sp, #28]
 8013056:	0949      	lsrs	r1, r1, #5
 8013058:	7011      	strb	r1, [r2, #0]
 801305a:	fab3 f383 	clz	r3, r3
 801305e:	9a08      	ldr	r2, [sp, #32]
 8013060:	095b      	lsrs	r3, r3, #5
 8013062:	2000      	movs	r0, #0
 8013064:	7013      	strb	r3, [r2, #0]
 8013066:	e003      	b.n	8013070 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013068:	f7f7 f8fa 	bl	800a260 <rcutils_reset_error>
 801306c:	f241 0006 	movw	r0, #4102	@ 0x1006
 8013070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013074:	2001      	movs	r0, #1
 8013076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801307a:	200b      	movs	r0, #11
 801307c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013080:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop

08013088 <rcl_action_take_goal_request>:
 8013088:	b3b0      	cbz	r0, 80130f8 <rcl_action_take_goal_request+0x70>
 801308a:	b570      	push	{r4, r5, r6, lr}
 801308c:	4604      	mov	r4, r0
 801308e:	6800      	ldr	r0, [r0, #0]
 8013090:	b368      	cbz	r0, 80130ee <rcl_action_take_goal_request+0x66>
 8013092:	460d      	mov	r5, r1
 8013094:	4616      	mov	r6, r2
 8013096:	f7fe faaf 	bl	80115f8 <rcl_service_is_valid>
 801309a:	b330      	cbz	r0, 80130ea <rcl_action_take_goal_request+0x62>
 801309c:	6820      	ldr	r0, [r4, #0]
 801309e:	3004      	adds	r0, #4
 80130a0:	f7fe faaa 	bl	80115f8 <rcl_service_is_valid>
 80130a4:	b308      	cbz	r0, 80130ea <rcl_action_take_goal_request+0x62>
 80130a6:	6820      	ldr	r0, [r4, #0]
 80130a8:	3008      	adds	r0, #8
 80130aa:	f7fe faa5 	bl	80115f8 <rcl_service_is_valid>
 80130ae:	b1e0      	cbz	r0, 80130ea <rcl_action_take_goal_request+0x62>
 80130b0:	6820      	ldr	r0, [r4, #0]
 80130b2:	300c      	adds	r0, #12
 80130b4:	f7f6 f9aa 	bl	800940c <rcl_publisher_is_valid>
 80130b8:	b1b8      	cbz	r0, 80130ea <rcl_action_take_goal_request+0x62>
 80130ba:	6820      	ldr	r0, [r4, #0]
 80130bc:	3010      	adds	r0, #16
 80130be:	f7f6 f9a5 	bl	800940c <rcl_publisher_is_valid>
 80130c2:	b190      	cbz	r0, 80130ea <rcl_action_take_goal_request+0x62>
 80130c4:	b1b5      	cbz	r5, 80130f4 <rcl_action_take_goal_request+0x6c>
 80130c6:	b1ae      	cbz	r6, 80130f4 <rcl_action_take_goal_request+0x6c>
 80130c8:	6820      	ldr	r0, [r4, #0]
 80130ca:	4632      	mov	r2, r6
 80130cc:	4629      	mov	r1, r5
 80130ce:	f7fe fa13 	bl	80114f8 <rcl_take_request>
 80130d2:	b148      	cbz	r0, 80130e8 <rcl_action_take_goal_request+0x60>
 80130d4:	280a      	cmp	r0, #10
 80130d6:	d007      	beq.n	80130e8 <rcl_action_take_goal_request+0x60>
 80130d8:	f240 2259 	movw	r2, #601	@ 0x259
 80130dc:	f241 0369 	movw	r3, #4201	@ 0x1069
 80130e0:	4290      	cmp	r0, r2
 80130e2:	bf0c      	ite	eq
 80130e4:	4618      	moveq	r0, r3
 80130e6:	2001      	movne	r0, #1
 80130e8:	bd70      	pop	{r4, r5, r6, pc}
 80130ea:	f7f7 f8b9 	bl	800a260 <rcutils_reset_error>
 80130ee:	f241 0068 	movw	r0, #4200	@ 0x1068
 80130f2:	bd70      	pop	{r4, r5, r6, pc}
 80130f4:	200b      	movs	r0, #11
 80130f6:	bd70      	pop	{r4, r5, r6, pc}
 80130f8:	f241 0068 	movw	r0, #4200	@ 0x1068
 80130fc:	4770      	bx	lr
 80130fe:	bf00      	nop

08013100 <rcl_action_send_goal_response>:
 8013100:	b378      	cbz	r0, 8013162 <rcl_action_send_goal_response+0x62>
 8013102:	b570      	push	{r4, r5, r6, lr}
 8013104:	4604      	mov	r4, r0
 8013106:	6800      	ldr	r0, [r0, #0]
 8013108:	b330      	cbz	r0, 8013158 <rcl_action_send_goal_response+0x58>
 801310a:	460d      	mov	r5, r1
 801310c:	4616      	mov	r6, r2
 801310e:	f7fe fa73 	bl	80115f8 <rcl_service_is_valid>
 8013112:	b1f8      	cbz	r0, 8013154 <rcl_action_send_goal_response+0x54>
 8013114:	6820      	ldr	r0, [r4, #0]
 8013116:	3004      	adds	r0, #4
 8013118:	f7fe fa6e 	bl	80115f8 <rcl_service_is_valid>
 801311c:	b1d0      	cbz	r0, 8013154 <rcl_action_send_goal_response+0x54>
 801311e:	6820      	ldr	r0, [r4, #0]
 8013120:	3008      	adds	r0, #8
 8013122:	f7fe fa69 	bl	80115f8 <rcl_service_is_valid>
 8013126:	b1a8      	cbz	r0, 8013154 <rcl_action_send_goal_response+0x54>
 8013128:	6820      	ldr	r0, [r4, #0]
 801312a:	300c      	adds	r0, #12
 801312c:	f7f6 f96e 	bl	800940c <rcl_publisher_is_valid>
 8013130:	b180      	cbz	r0, 8013154 <rcl_action_send_goal_response+0x54>
 8013132:	6820      	ldr	r0, [r4, #0]
 8013134:	3010      	adds	r0, #16
 8013136:	f7f6 f969 	bl	800940c <rcl_publisher_is_valid>
 801313a:	b158      	cbz	r0, 8013154 <rcl_action_send_goal_response+0x54>
 801313c:	b17d      	cbz	r5, 801315e <rcl_action_send_goal_response+0x5e>
 801313e:	b176      	cbz	r6, 801315e <rcl_action_send_goal_response+0x5e>
 8013140:	6820      	ldr	r0, [r4, #0]
 8013142:	4632      	mov	r2, r6
 8013144:	4629      	mov	r1, r5
 8013146:	f7fe fa27 	bl	8011598 <rcl_send_response>
 801314a:	b110      	cbz	r0, 8013152 <rcl_action_send_goal_response+0x52>
 801314c:	2802      	cmp	r0, #2
 801314e:	bf18      	it	ne
 8013150:	2001      	movne	r0, #1
 8013152:	bd70      	pop	{r4, r5, r6, pc}
 8013154:	f7f7 f884 	bl	800a260 <rcutils_reset_error>
 8013158:	f241 0068 	movw	r0, #4200	@ 0x1068
 801315c:	bd70      	pop	{r4, r5, r6, pc}
 801315e:	200b      	movs	r0, #11
 8013160:	bd70      	pop	{r4, r5, r6, pc}
 8013162:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013166:	4770      	bx	lr

08013168 <rcl_action_take_result_request>:
 8013168:	2800      	cmp	r0, #0
 801316a:	d037      	beq.n	80131dc <rcl_action_take_result_request+0x74>
 801316c:	b570      	push	{r4, r5, r6, lr}
 801316e:	4604      	mov	r4, r0
 8013170:	6800      	ldr	r0, [r0, #0]
 8013172:	b370      	cbz	r0, 80131d2 <rcl_action_take_result_request+0x6a>
 8013174:	460d      	mov	r5, r1
 8013176:	4616      	mov	r6, r2
 8013178:	f7fe fa3e 	bl	80115f8 <rcl_service_is_valid>
 801317c:	b338      	cbz	r0, 80131ce <rcl_action_take_result_request+0x66>
 801317e:	6820      	ldr	r0, [r4, #0]
 8013180:	3004      	adds	r0, #4
 8013182:	f7fe fa39 	bl	80115f8 <rcl_service_is_valid>
 8013186:	b310      	cbz	r0, 80131ce <rcl_action_take_result_request+0x66>
 8013188:	6820      	ldr	r0, [r4, #0]
 801318a:	3008      	adds	r0, #8
 801318c:	f7fe fa34 	bl	80115f8 <rcl_service_is_valid>
 8013190:	b1e8      	cbz	r0, 80131ce <rcl_action_take_result_request+0x66>
 8013192:	6820      	ldr	r0, [r4, #0]
 8013194:	300c      	adds	r0, #12
 8013196:	f7f6 f939 	bl	800940c <rcl_publisher_is_valid>
 801319a:	b1c0      	cbz	r0, 80131ce <rcl_action_take_result_request+0x66>
 801319c:	6820      	ldr	r0, [r4, #0]
 801319e:	3010      	adds	r0, #16
 80131a0:	f7f6 f934 	bl	800940c <rcl_publisher_is_valid>
 80131a4:	b198      	cbz	r0, 80131ce <rcl_action_take_result_request+0x66>
 80131a6:	b1bd      	cbz	r5, 80131d8 <rcl_action_take_result_request+0x70>
 80131a8:	b1b6      	cbz	r6, 80131d8 <rcl_action_take_result_request+0x70>
 80131aa:	6820      	ldr	r0, [r4, #0]
 80131ac:	4632      	mov	r2, r6
 80131ae:	4629      	mov	r1, r5
 80131b0:	3008      	adds	r0, #8
 80131b2:	f7fe f9a1 	bl	80114f8 <rcl_take_request>
 80131b6:	b148      	cbz	r0, 80131cc <rcl_action_take_result_request+0x64>
 80131b8:	280a      	cmp	r0, #10
 80131ba:	d007      	beq.n	80131cc <rcl_action_take_result_request+0x64>
 80131bc:	f240 2259 	movw	r2, #601	@ 0x259
 80131c0:	f241 0369 	movw	r3, #4201	@ 0x1069
 80131c4:	4290      	cmp	r0, r2
 80131c6:	bf0c      	ite	eq
 80131c8:	4618      	moveq	r0, r3
 80131ca:	2001      	movne	r0, #1
 80131cc:	bd70      	pop	{r4, r5, r6, pc}
 80131ce:	f7f7 f847 	bl	800a260 <rcutils_reset_error>
 80131d2:	f241 0068 	movw	r0, #4200	@ 0x1068
 80131d6:	bd70      	pop	{r4, r5, r6, pc}
 80131d8:	200b      	movs	r0, #11
 80131da:	bd70      	pop	{r4, r5, r6, pc}
 80131dc:	f241 0068 	movw	r0, #4200	@ 0x1068
 80131e0:	4770      	bx	lr
 80131e2:	bf00      	nop

080131e4 <rcl_action_take_cancel_request>:
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d037      	beq.n	8013258 <rcl_action_take_cancel_request+0x74>
 80131e8:	b570      	push	{r4, r5, r6, lr}
 80131ea:	4604      	mov	r4, r0
 80131ec:	6800      	ldr	r0, [r0, #0]
 80131ee:	b370      	cbz	r0, 801324e <rcl_action_take_cancel_request+0x6a>
 80131f0:	460d      	mov	r5, r1
 80131f2:	4616      	mov	r6, r2
 80131f4:	f7fe fa00 	bl	80115f8 <rcl_service_is_valid>
 80131f8:	b338      	cbz	r0, 801324a <rcl_action_take_cancel_request+0x66>
 80131fa:	6820      	ldr	r0, [r4, #0]
 80131fc:	3004      	adds	r0, #4
 80131fe:	f7fe f9fb 	bl	80115f8 <rcl_service_is_valid>
 8013202:	b310      	cbz	r0, 801324a <rcl_action_take_cancel_request+0x66>
 8013204:	6820      	ldr	r0, [r4, #0]
 8013206:	3008      	adds	r0, #8
 8013208:	f7fe f9f6 	bl	80115f8 <rcl_service_is_valid>
 801320c:	b1e8      	cbz	r0, 801324a <rcl_action_take_cancel_request+0x66>
 801320e:	6820      	ldr	r0, [r4, #0]
 8013210:	300c      	adds	r0, #12
 8013212:	f7f6 f8fb 	bl	800940c <rcl_publisher_is_valid>
 8013216:	b1c0      	cbz	r0, 801324a <rcl_action_take_cancel_request+0x66>
 8013218:	6820      	ldr	r0, [r4, #0]
 801321a:	3010      	adds	r0, #16
 801321c:	f7f6 f8f6 	bl	800940c <rcl_publisher_is_valid>
 8013220:	b198      	cbz	r0, 801324a <rcl_action_take_cancel_request+0x66>
 8013222:	b1bd      	cbz	r5, 8013254 <rcl_action_take_cancel_request+0x70>
 8013224:	b1b6      	cbz	r6, 8013254 <rcl_action_take_cancel_request+0x70>
 8013226:	6820      	ldr	r0, [r4, #0]
 8013228:	4632      	mov	r2, r6
 801322a:	4629      	mov	r1, r5
 801322c:	3004      	adds	r0, #4
 801322e:	f7fe f963 	bl	80114f8 <rcl_take_request>
 8013232:	b148      	cbz	r0, 8013248 <rcl_action_take_cancel_request+0x64>
 8013234:	280a      	cmp	r0, #10
 8013236:	d007      	beq.n	8013248 <rcl_action_take_cancel_request+0x64>
 8013238:	f240 2259 	movw	r2, #601	@ 0x259
 801323c:	f241 0369 	movw	r3, #4201	@ 0x1069
 8013240:	4290      	cmp	r0, r2
 8013242:	bf0c      	ite	eq
 8013244:	4618      	moveq	r0, r3
 8013246:	2001      	movne	r0, #1
 8013248:	bd70      	pop	{r4, r5, r6, pc}
 801324a:	f7f7 f809 	bl	800a260 <rcutils_reset_error>
 801324e:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013252:	bd70      	pop	{r4, r5, r6, pc}
 8013254:	200b      	movs	r0, #11
 8013256:	bd70      	pop	{r4, r5, r6, pc}
 8013258:	f241 0068 	movw	r0, #4200	@ 0x1068
 801325c:	4770      	bx	lr
 801325e:	bf00      	nop

08013260 <rcl_action_send_cancel_response>:
 8013260:	b380      	cbz	r0, 80132c4 <rcl_action_send_cancel_response+0x64>
 8013262:	b570      	push	{r4, r5, r6, lr}
 8013264:	4604      	mov	r4, r0
 8013266:	6800      	ldr	r0, [r0, #0]
 8013268:	b338      	cbz	r0, 80132ba <rcl_action_send_cancel_response+0x5a>
 801326a:	460d      	mov	r5, r1
 801326c:	4616      	mov	r6, r2
 801326e:	f7fe f9c3 	bl	80115f8 <rcl_service_is_valid>
 8013272:	b300      	cbz	r0, 80132b6 <rcl_action_send_cancel_response+0x56>
 8013274:	6820      	ldr	r0, [r4, #0]
 8013276:	3004      	adds	r0, #4
 8013278:	f7fe f9be 	bl	80115f8 <rcl_service_is_valid>
 801327c:	b1d8      	cbz	r0, 80132b6 <rcl_action_send_cancel_response+0x56>
 801327e:	6820      	ldr	r0, [r4, #0]
 8013280:	3008      	adds	r0, #8
 8013282:	f7fe f9b9 	bl	80115f8 <rcl_service_is_valid>
 8013286:	b1b0      	cbz	r0, 80132b6 <rcl_action_send_cancel_response+0x56>
 8013288:	6820      	ldr	r0, [r4, #0]
 801328a:	300c      	adds	r0, #12
 801328c:	f7f6 f8be 	bl	800940c <rcl_publisher_is_valid>
 8013290:	b188      	cbz	r0, 80132b6 <rcl_action_send_cancel_response+0x56>
 8013292:	6820      	ldr	r0, [r4, #0]
 8013294:	3010      	adds	r0, #16
 8013296:	f7f6 f8b9 	bl	800940c <rcl_publisher_is_valid>
 801329a:	b160      	cbz	r0, 80132b6 <rcl_action_send_cancel_response+0x56>
 801329c:	b185      	cbz	r5, 80132c0 <rcl_action_send_cancel_response+0x60>
 801329e:	b17e      	cbz	r6, 80132c0 <rcl_action_send_cancel_response+0x60>
 80132a0:	6820      	ldr	r0, [r4, #0]
 80132a2:	4632      	mov	r2, r6
 80132a4:	4629      	mov	r1, r5
 80132a6:	3004      	adds	r0, #4
 80132a8:	f7fe f976 	bl	8011598 <rcl_send_response>
 80132ac:	b110      	cbz	r0, 80132b4 <rcl_action_send_cancel_response+0x54>
 80132ae:	2802      	cmp	r0, #2
 80132b0:	bf18      	it	ne
 80132b2:	2001      	movne	r0, #1
 80132b4:	bd70      	pop	{r4, r5, r6, pc}
 80132b6:	f7f6 ffd3 	bl	800a260 <rcutils_reset_error>
 80132ba:	f241 0068 	movw	r0, #4200	@ 0x1068
 80132be:	bd70      	pop	{r4, r5, r6, pc}
 80132c0:	200b      	movs	r0, #11
 80132c2:	bd70      	pop	{r4, r5, r6, pc}
 80132c4:	f241 0068 	movw	r0, #4200	@ 0x1068
 80132c8:	4770      	bx	lr
 80132ca:	bf00      	nop

080132cc <rcl_action_wait_set_add_action_server>:
 80132cc:	2800      	cmp	r0, #0
 80132ce:	d04a      	beq.n	8013366 <rcl_action_wait_set_add_action_server+0x9a>
 80132d0:	b570      	push	{r4, r5, r6, lr}
 80132d2:	460c      	mov	r4, r1
 80132d4:	2900      	cmp	r1, #0
 80132d6:	d043      	beq.n	8013360 <rcl_action_wait_set_add_action_server+0x94>
 80132d8:	4605      	mov	r5, r0
 80132da:	6808      	ldr	r0, [r1, #0]
 80132dc:	2800      	cmp	r0, #0
 80132de:	d03f      	beq.n	8013360 <rcl_action_wait_set_add_action_server+0x94>
 80132e0:	4616      	mov	r6, r2
 80132e2:	f7fe f989 	bl	80115f8 <rcl_service_is_valid>
 80132e6:	2800      	cmp	r0, #0
 80132e8:	d038      	beq.n	801335c <rcl_action_wait_set_add_action_server+0x90>
 80132ea:	6820      	ldr	r0, [r4, #0]
 80132ec:	3004      	adds	r0, #4
 80132ee:	f7fe f983 	bl	80115f8 <rcl_service_is_valid>
 80132f2:	b398      	cbz	r0, 801335c <rcl_action_wait_set_add_action_server+0x90>
 80132f4:	6820      	ldr	r0, [r4, #0]
 80132f6:	3008      	adds	r0, #8
 80132f8:	f7fe f97e 	bl	80115f8 <rcl_service_is_valid>
 80132fc:	b370      	cbz	r0, 801335c <rcl_action_wait_set_add_action_server+0x90>
 80132fe:	6820      	ldr	r0, [r4, #0]
 8013300:	300c      	adds	r0, #12
 8013302:	f7f6 f89d 	bl	8009440 <rcl_publisher_is_valid_except_context>
 8013306:	b348      	cbz	r0, 801335c <rcl_action_wait_set_add_action_server+0x90>
 8013308:	6820      	ldr	r0, [r4, #0]
 801330a:	3010      	adds	r0, #16
 801330c:	f7f6 f898 	bl	8009440 <rcl_publisher_is_valid_except_context>
 8013310:	b320      	cbz	r0, 801335c <rcl_action_wait_set_add_action_server+0x90>
 8013312:	6821      	ldr	r1, [r4, #0]
 8013314:	4628      	mov	r0, r5
 8013316:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801331a:	f7ff fa8b 	bl	8012834 <rcl_wait_set_add_service>
 801331e:	b9e0      	cbnz	r0, 801335a <rcl_action_wait_set_add_action_server+0x8e>
 8013320:	6821      	ldr	r1, [r4, #0]
 8013322:	4628      	mov	r0, r5
 8013324:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8013328:	3104      	adds	r1, #4
 801332a:	f7ff fa83 	bl	8012834 <rcl_wait_set_add_service>
 801332e:	b9a0      	cbnz	r0, 801335a <rcl_action_wait_set_add_action_server+0x8e>
 8013330:	6821      	ldr	r1, [r4, #0]
 8013332:	4628      	mov	r0, r5
 8013334:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8013338:	3108      	adds	r1, #8
 801333a:	f7ff fa7b 	bl	8012834 <rcl_wait_set_add_service>
 801333e:	b960      	cbnz	r0, 801335a <rcl_action_wait_set_add_action_server+0x8e>
 8013340:	6821      	ldr	r1, [r4, #0]
 8013342:	4628      	mov	r0, r5
 8013344:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8013348:	3114      	adds	r1, #20
 801334a:	f7ff fa17 	bl	801277c <rcl_wait_set_add_timer>
 801334e:	b920      	cbnz	r0, 801335a <rcl_action_wait_set_add_action_server+0x8e>
 8013350:	b11e      	cbz	r6, 801335a <rcl_action_wait_set_add_action_server+0x8e>
 8013352:	6823      	ldr	r3, [r4, #0]
 8013354:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8013358:	6033      	str	r3, [r6, #0]
 801335a:	bd70      	pop	{r4, r5, r6, pc}
 801335c:	f7f6 ff80 	bl	800a260 <rcutils_reset_error>
 8013360:	f241 0068 	movw	r0, #4200	@ 0x1068
 8013364:	bd70      	pop	{r4, r5, r6, pc}
 8013366:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801336a:	4770      	bx	lr

0801336c <rcl_action_server_wait_set_get_entities_ready>:
 801336c:	2800      	cmp	r0, #0
 801336e:	d060      	beq.n	8013432 <rcl_action_server_wait_set_get_entities_ready+0xc6>
 8013370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013372:	460c      	mov	r4, r1
 8013374:	2900      	cmp	r1, #0
 8013376:	d057      	beq.n	8013428 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8013378:	4605      	mov	r5, r0
 801337a:	6808      	ldr	r0, [r1, #0]
 801337c:	2800      	cmp	r0, #0
 801337e:	d053      	beq.n	8013428 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8013380:	4616      	mov	r6, r2
 8013382:	461f      	mov	r7, r3
 8013384:	f7fe f938 	bl	80115f8 <rcl_service_is_valid>
 8013388:	2800      	cmp	r0, #0
 801338a:	d04b      	beq.n	8013424 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 801338c:	6820      	ldr	r0, [r4, #0]
 801338e:	3004      	adds	r0, #4
 8013390:	f7fe f932 	bl	80115f8 <rcl_service_is_valid>
 8013394:	2800      	cmp	r0, #0
 8013396:	d045      	beq.n	8013424 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8013398:	6820      	ldr	r0, [r4, #0]
 801339a:	3008      	adds	r0, #8
 801339c:	f7fe f92c 	bl	80115f8 <rcl_service_is_valid>
 80133a0:	2800      	cmp	r0, #0
 80133a2:	d03f      	beq.n	8013424 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 80133a4:	6820      	ldr	r0, [r4, #0]
 80133a6:	300c      	adds	r0, #12
 80133a8:	f7f6 f84a 	bl	8009440 <rcl_publisher_is_valid_except_context>
 80133ac:	2800      	cmp	r0, #0
 80133ae:	d039      	beq.n	8013424 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 80133b0:	6820      	ldr	r0, [r4, #0]
 80133b2:	3010      	adds	r0, #16
 80133b4:	f7f6 f844 	bl	8009440 <rcl_publisher_is_valid_except_context>
 80133b8:	b3a0      	cbz	r0, 8013424 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 80133ba:	b3c6      	cbz	r6, 801342e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 80133bc:	b3bf      	cbz	r7, 801342e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 80133be:	9b06      	ldr	r3, [sp, #24]
 80133c0:	b3ab      	cbz	r3, 801342e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 80133c2:	9b07      	ldr	r3, [sp, #28]
 80133c4:	b39b      	cbz	r3, 801342e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 80133c6:	6823      	ldr	r3, [r4, #0]
 80133c8:	692a      	ldr	r2, [r5, #16]
 80133ca:	6a2c      	ldr	r4, [r5, #32]
 80133cc:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 80133d0:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 80133d4:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 80133d8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80133dc:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 80133e0:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 80133e4:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 80133e8:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80133ec:	1ae4      	subs	r4, r4, r3
 80133ee:	fab4 f484 	clz	r4, r4
 80133f2:	0964      	lsrs	r4, r4, #5
 80133f4:	7034      	strb	r4, [r6, #0]
 80133f6:	1d1c      	adds	r4, r3, #4
 80133f8:	1b00      	subs	r0, r0, r4
 80133fa:	fab0 f080 	clz	r0, r0
 80133fe:	0940      	lsrs	r0, r0, #5
 8013400:	7038      	strb	r0, [r7, #0]
 8013402:	f103 0008 	add.w	r0, r3, #8
 8013406:	1a09      	subs	r1, r1, r0
 8013408:	3314      	adds	r3, #20
 801340a:	1ad3      	subs	r3, r2, r3
 801340c:	fab1 f181 	clz	r1, r1
 8013410:	9a06      	ldr	r2, [sp, #24]
 8013412:	0949      	lsrs	r1, r1, #5
 8013414:	7011      	strb	r1, [r2, #0]
 8013416:	fab3 f383 	clz	r3, r3
 801341a:	9a07      	ldr	r2, [sp, #28]
 801341c:	095b      	lsrs	r3, r3, #5
 801341e:	2000      	movs	r0, #0
 8013420:	7013      	strb	r3, [r2, #0]
 8013422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013424:	f7f6 ff1c 	bl	800a260 <rcutils_reset_error>
 8013428:	f241 0068 	movw	r0, #4200	@ 0x1068
 801342c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801342e:	200b      	movs	r0, #11
 8013430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013432:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013436:	4770      	bx	lr

08013438 <_execute_event_handler>:
 8013438:	2002      	movs	r0, #2
 801343a:	4770      	bx	lr

0801343c <_cancel_goal_event_handler>:
 801343c:	2003      	movs	r0, #3
 801343e:	4770      	bx	lr

08013440 <_succeed_event_handler>:
 8013440:	2004      	movs	r0, #4
 8013442:	4770      	bx	lr

08013444 <_abort_event_handler>:
 8013444:	2006      	movs	r0, #6
 8013446:	4770      	bx	lr

08013448 <_canceled_event_handler>:
 8013448:	2005      	movs	r0, #5
 801344a:	4770      	bx	lr

0801344c <rcl_action_transition_goal_state>:
 801344c:	fa5f fc80 	uxtb.w	ip, r0
 8013450:	f1bc 0f06 	cmp.w	ip, #6
 8013454:	d80c      	bhi.n	8013470 <rcl_action_transition_goal_state+0x24>
 8013456:	2904      	cmp	r1, #4
 8013458:	d80a      	bhi.n	8013470 <rcl_action_transition_goal_state+0x24>
 801345a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 801345e:	b410      	push	{r4}
 8013460:	440b      	add	r3, r1
 8013462:	4c06      	ldr	r4, [pc, #24]	@ (801347c <rcl_action_transition_goal_state+0x30>)
 8013464:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013468:	b123      	cbz	r3, 8013474 <rcl_action_transition_goal_state+0x28>
 801346a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801346e:	4718      	bx	r3
 8013470:	2000      	movs	r0, #0
 8013472:	4770      	bx	lr
 8013474:	2000      	movs	r0, #0
 8013476:	f85d 4b04 	ldr.w	r4, [sp], #4
 801347a:	4770      	bx	lr
 801347c:	0801aa1c 	.word	0x0801aa1c

08013480 <rcl_action_get_zero_initialized_cancel_response>:
 8013480:	b510      	push	{r4, lr}
 8013482:	4c07      	ldr	r4, [pc, #28]	@ (80134a0 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8013484:	4686      	mov	lr, r0
 8013486:	4684      	mov	ip, r0
 8013488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801348a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801348e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013490:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013494:	6823      	ldr	r3, [r4, #0]
 8013496:	f8cc 3000 	str.w	r3, [ip]
 801349a:	4670      	mov	r0, lr
 801349c:	bd10      	pop	{r4, pc}
 801349e:	bf00      	nop
 80134a0:	0801aaa8 	.word	0x0801aaa8

080134a4 <rclc_action_send_result_request>:
 80134a4:	b1d0      	cbz	r0, 80134dc <rclc_action_send_result_request+0x38>
 80134a6:	b500      	push	{lr}
 80134a8:	4684      	mov	ip, r0
 80134aa:	b087      	sub	sp, #28
 80134ac:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80134b0:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80134b4:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80134b8:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80134bc:	f10d 0e08 	add.w	lr, sp, #8
 80134c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80134c4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80134c8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80134cc:	a902      	add	r1, sp, #8
 80134ce:	3010      	adds	r0, #16
 80134d0:	f7ff fbfa 	bl	8012cc8 <rcl_action_send_result_request>
 80134d4:	b920      	cbnz	r0, 80134e0 <rclc_action_send_result_request+0x3c>
 80134d6:	b007      	add	sp, #28
 80134d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80134dc:	200b      	movs	r0, #11
 80134de:	4770      	bx	lr
 80134e0:	9001      	str	r0, [sp, #4]
 80134e2:	f7f6 febd 	bl	800a260 <rcutils_reset_error>
 80134e6:	9801      	ldr	r0, [sp, #4]
 80134e8:	b007      	add	sp, #28
 80134ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80134ee:	bf00      	nop

080134f0 <rclc_action_take_goal_handle>:
 80134f0:	4603      	mov	r3, r0
 80134f2:	b158      	cbz	r0, 801350c <rclc_action_take_goal_handle+0x1c>
 80134f4:	6880      	ldr	r0, [r0, #8]
 80134f6:	b148      	cbz	r0, 801350c <rclc_action_take_goal_handle+0x1c>
 80134f8:	6801      	ldr	r1, [r0, #0]
 80134fa:	6099      	str	r1, [r3, #8]
 80134fc:	2200      	movs	r2, #0
 80134fe:	7202      	strb	r2, [r0, #8]
 8013500:	68d9      	ldr	r1, [r3, #12]
 8013502:	6001      	str	r1, [r0, #0]
 8013504:	6202      	str	r2, [r0, #32]
 8013506:	8482      	strh	r2, [r0, #36]	@ 0x24
 8013508:	60d8      	str	r0, [r3, #12]
 801350a:	4770      	bx	lr
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop

08013510 <rclc_action_remove_used_goal_handle>:
 8013510:	b180      	cbz	r0, 8013534 <rclc_action_remove_used_goal_handle+0x24>
 8013512:	b179      	cbz	r1, 8013534 <rclc_action_remove_used_goal_handle+0x24>
 8013514:	68c3      	ldr	r3, [r0, #12]
 8013516:	4299      	cmp	r1, r3
 8013518:	d00d      	beq.n	8013536 <rclc_action_remove_used_goal_handle+0x26>
 801351a:	b12b      	cbz	r3, 8013528 <rclc_action_remove_used_goal_handle+0x18>
 801351c:	681a      	ldr	r2, [r3, #0]
 801351e:	4291      	cmp	r1, r2
 8013520:	d003      	beq.n	801352a <rclc_action_remove_used_goal_handle+0x1a>
 8013522:	4613      	mov	r3, r2
 8013524:	2b00      	cmp	r3, #0
 8013526:	d1f9      	bne.n	801351c <rclc_action_remove_used_goal_handle+0xc>
 8013528:	4770      	bx	lr
 801352a:	680a      	ldr	r2, [r1, #0]
 801352c:	601a      	str	r2, [r3, #0]
 801352e:	6883      	ldr	r3, [r0, #8]
 8013530:	600b      	str	r3, [r1, #0]
 8013532:	6081      	str	r1, [r0, #8]
 8013534:	4770      	bx	lr
 8013536:	680b      	ldr	r3, [r1, #0]
 8013538:	60c3      	str	r3, [r0, #12]
 801353a:	e7f8      	b.n	801352e <rclc_action_remove_used_goal_handle+0x1e>

0801353c <rclc_action_find_goal_handle_by_uuid>:
 801353c:	b538      	push	{r3, r4, r5, lr}
 801353e:	b180      	cbz	r0, 8013562 <rclc_action_find_goal_handle_by_uuid+0x26>
 8013540:	460d      	mov	r5, r1
 8013542:	b181      	cbz	r1, 8013566 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8013544:	68c4      	ldr	r4, [r0, #12]
 8013546:	b914      	cbnz	r4, 801354e <rclc_action_find_goal_handle_by_uuid+0x12>
 8013548:	e009      	b.n	801355e <rclc_action_find_goal_handle_by_uuid+0x22>
 801354a:	6824      	ldr	r4, [r4, #0]
 801354c:	b13c      	cbz	r4, 801355e <rclc_action_find_goal_handle_by_uuid+0x22>
 801354e:	2210      	movs	r2, #16
 8013550:	4629      	mov	r1, r5
 8013552:	f104 0009 	add.w	r0, r4, #9
 8013556:	f004 feb3 	bl	80182c0 <memcmp>
 801355a:	2800      	cmp	r0, #0
 801355c:	d1f5      	bne.n	801354a <rclc_action_find_goal_handle_by_uuid+0xe>
 801355e:	4620      	mov	r0, r4
 8013560:	bd38      	pop	{r3, r4, r5, pc}
 8013562:	4604      	mov	r4, r0
 8013564:	e7fb      	b.n	801355e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013566:	460c      	mov	r4, r1
 8013568:	e7f9      	b.n	801355e <rclc_action_find_goal_handle_by_uuid+0x22>
 801356a:	bf00      	nop

0801356c <rclc_action_find_first_handle_by_status>:
 801356c:	b140      	cbz	r0, 8013580 <rclc_action_find_first_handle_by_status+0x14>
 801356e:	68c0      	ldr	r0, [r0, #12]
 8013570:	b910      	cbnz	r0, 8013578 <rclc_action_find_first_handle_by_status+0xc>
 8013572:	e005      	b.n	8013580 <rclc_action_find_first_handle_by_status+0x14>
 8013574:	6800      	ldr	r0, [r0, #0]
 8013576:	b118      	cbz	r0, 8013580 <rclc_action_find_first_handle_by_status+0x14>
 8013578:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801357c:	428b      	cmp	r3, r1
 801357e:	d1f9      	bne.n	8013574 <rclc_action_find_first_handle_by_status+0x8>
 8013580:	4770      	bx	lr
 8013582:	bf00      	nop

08013584 <rclc_action_find_first_terminated_handle>:
 8013584:	b140      	cbz	r0, 8013598 <rclc_action_find_first_terminated_handle+0x14>
 8013586:	68c0      	ldr	r0, [r0, #12]
 8013588:	b910      	cbnz	r0, 8013590 <rclc_action_find_first_terminated_handle+0xc>
 801358a:	e005      	b.n	8013598 <rclc_action_find_first_terminated_handle+0x14>
 801358c:	6800      	ldr	r0, [r0, #0]
 801358e:	b118      	cbz	r0, 8013598 <rclc_action_find_first_terminated_handle+0x14>
 8013590:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013594:	2b03      	cmp	r3, #3
 8013596:	ddf9      	ble.n	801358c <rclc_action_find_first_terminated_handle+0x8>
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop

0801359c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801359c:	b170      	cbz	r0, 80135bc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801359e:	68c0      	ldr	r0, [r0, #12]
 80135a0:	b160      	cbz	r0, 80135bc <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80135a2:	b410      	push	{r4}
 80135a4:	e001      	b.n	80135aa <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80135a6:	6800      	ldr	r0, [r0, #0]
 80135a8:	b128      	cbz	r0, 80135b6 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80135aa:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80135ae:	4299      	cmp	r1, r3
 80135b0:	bf08      	it	eq
 80135b2:	4294      	cmpeq	r4, r2
 80135b4:	d1f7      	bne.n	80135a6 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80135b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135ba:	4770      	bx	lr
 80135bc:	4770      	bx	lr
 80135be:	bf00      	nop

080135c0 <rclc_action_find_handle_by_result_request_sequence_number>:
 80135c0:	b170      	cbz	r0, 80135e0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80135c2:	68c0      	ldr	r0, [r0, #12]
 80135c4:	b160      	cbz	r0, 80135e0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80135c6:	b410      	push	{r4}
 80135c8:	e001      	b.n	80135ce <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80135ca:	6800      	ldr	r0, [r0, #0]
 80135cc:	b128      	cbz	r0, 80135da <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80135ce:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80135d2:	4299      	cmp	r1, r3
 80135d4:	bf08      	it	eq
 80135d6:	4294      	cmpeq	r4, r2
 80135d8:	d1f7      	bne.n	80135ca <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80135da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80135de:	4770      	bx	lr
 80135e0:	4770      	bx	lr
 80135e2:	bf00      	nop

080135e4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80135e4:	b170      	cbz	r0, 8013604 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80135e6:	68c0      	ldr	r0, [r0, #12]
 80135e8:	b160      	cbz	r0, 8013604 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80135ea:	b410      	push	{r4}
 80135ec:	e001      	b.n	80135f2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80135ee:	6800      	ldr	r0, [r0, #0]
 80135f0:	b128      	cbz	r0, 80135fe <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80135f2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80135f6:	4299      	cmp	r1, r3
 80135f8:	bf08      	it	eq
 80135fa:	4294      	cmpeq	r4, r2
 80135fc:	d1f7      	bne.n	80135ee <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80135fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013602:	4770      	bx	lr
 8013604:	4770      	bx	lr
 8013606:	bf00      	nop

08013608 <rclc_action_find_first_handle_with_goal_response>:
 8013608:	b140      	cbz	r0, 801361c <rclc_action_find_first_handle_with_goal_response+0x14>
 801360a:	68c0      	ldr	r0, [r0, #12]
 801360c:	b910      	cbnz	r0, 8013614 <rclc_action_find_first_handle_with_goal_response+0xc>
 801360e:	e005      	b.n	801361c <rclc_action_find_first_handle_with_goal_response+0x14>
 8013610:	6800      	ldr	r0, [r0, #0]
 8013612:	b118      	cbz	r0, 801361c <rclc_action_find_first_handle_with_goal_response+0x14>
 8013614:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d0f9      	beq.n	8013610 <rclc_action_find_first_handle_with_goal_response+0x8>
 801361c:	4770      	bx	lr
 801361e:	bf00      	nop

08013620 <rclc_action_find_first_handle_with_result_response>:
 8013620:	b140      	cbz	r0, 8013634 <rclc_action_find_first_handle_with_result_response+0x14>
 8013622:	68c0      	ldr	r0, [r0, #12]
 8013624:	b910      	cbnz	r0, 801362c <rclc_action_find_first_handle_with_result_response+0xc>
 8013626:	e005      	b.n	8013634 <rclc_action_find_first_handle_with_result_response+0x14>
 8013628:	6800      	ldr	r0, [r0, #0]
 801362a:	b118      	cbz	r0, 8013634 <rclc_action_find_first_handle_with_result_response+0x14>
 801362c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8013630:	2b00      	cmp	r3, #0
 8013632:	d0f9      	beq.n	8013628 <rclc_action_find_first_handle_with_result_response+0x8>
 8013634:	4770      	bx	lr
 8013636:	bf00      	nop

08013638 <rclc_action_server_response_goal_request>:
 8013638:	b198      	cbz	r0, 8013662 <rclc_action_server_response_goal_request+0x2a>
 801363a:	b510      	push	{r4, lr}
 801363c:	6844      	ldr	r4, [r0, #4]
 801363e:	b086      	sub	sp, #24
 8013640:	2200      	movs	r2, #0
 8013642:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013646:	460b      	mov	r3, r1
 8013648:	9205      	str	r2, [sp, #20]
 801364a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801364e:	aa03      	add	r2, sp, #12
 8013650:	f104 0010 	add.w	r0, r4, #16
 8013654:	f88d 300c 	strb.w	r3, [sp, #12]
 8013658:	f7ff fd52 	bl	8013100 <rcl_action_send_goal_response>
 801365c:	b918      	cbnz	r0, 8013666 <rclc_action_server_response_goal_request+0x2e>
 801365e:	b006      	add	sp, #24
 8013660:	bd10      	pop	{r4, pc}
 8013662:	200b      	movs	r0, #11
 8013664:	4770      	bx	lr
 8013666:	9001      	str	r0, [sp, #4]
 8013668:	f7f6 fdfa 	bl	800a260 <rcutils_reset_error>
 801366c:	9801      	ldr	r0, [sp, #4]
 801366e:	b006      	add	sp, #24
 8013670:	bd10      	pop	{r4, pc}
 8013672:	bf00      	nop
 8013674:	0000      	movs	r0, r0
	...

08013678 <rclc_action_server_goal_cancel_accept>:
 8013678:	b310      	cbz	r0, 80136c0 <rclc_action_server_goal_cancel_accept+0x48>
 801367a:	b510      	push	{r4, lr}
 801367c:	b090      	sub	sp, #64	@ 0x40
 801367e:	4604      	mov	r4, r0
 8013680:	a806      	add	r0, sp, #24
 8013682:	f7ff fefd 	bl	8013480 <rcl_action_get_zero_initialized_cancel_response>
 8013686:	2300      	movs	r3, #0
 8013688:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801368c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013690:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8013694:	f88d 3018 	strb.w	r3, [sp, #24]
 8013698:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801369c:	f8cd d01c 	str.w	sp, [sp, #28]
 80136a0:	46ec      	mov	ip, sp
 80136a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80136a6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80136c8 <rclc_action_server_goal_cancel_accept+0x50>
 80136aa:	6860      	ldr	r0, [r4, #4]
 80136ac:	aa06      	add	r2, sp, #24
 80136ae:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80136b2:	3010      	adds	r0, #16
 80136b4:	ed8d 7b08 	vstr	d7, [sp, #32]
 80136b8:	f7ff fdd2 	bl	8013260 <rcl_action_send_cancel_response>
 80136bc:	b010      	add	sp, #64	@ 0x40
 80136be:	bd10      	pop	{r4, pc}
 80136c0:	200b      	movs	r0, #11
 80136c2:	4770      	bx	lr
 80136c4:	f3af 8000 	nop.w
 80136c8:	00000001 	.word	0x00000001
 80136cc:	00000001 	.word	0x00000001

080136d0 <rclc_action_server_goal_cancel_reject>:
 80136d0:	b082      	sub	sp, #8
 80136d2:	b530      	push	{r4, r5, lr}
 80136d4:	b08b      	sub	sp, #44	@ 0x2c
 80136d6:	ac0e      	add	r4, sp, #56	@ 0x38
 80136d8:	e884 000c 	stmia.w	r4, {r2, r3}
 80136dc:	b188      	cbz	r0, 8013702 <rclc_action_server_goal_cancel_reject+0x32>
 80136de:	4604      	mov	r4, r0
 80136e0:	a801      	add	r0, sp, #4
 80136e2:	460d      	mov	r5, r1
 80136e4:	f7ff fecc 	bl	8013480 <rcl_action_get_zero_initialized_cancel_response>
 80136e8:	aa01      	add	r2, sp, #4
 80136ea:	a90e      	add	r1, sp, #56	@ 0x38
 80136ec:	f104 0010 	add.w	r0, r4, #16
 80136f0:	f88d 5004 	strb.w	r5, [sp, #4]
 80136f4:	f7ff fdb4 	bl	8013260 <rcl_action_send_cancel_response>
 80136f8:	b00b      	add	sp, #44	@ 0x2c
 80136fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136fe:	b002      	add	sp, #8
 8013700:	4770      	bx	lr
 8013702:	200b      	movs	r0, #11
 8013704:	b00b      	add	sp, #44	@ 0x2c
 8013706:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801370a:	b002      	add	sp, #8
 801370c:	4770      	bx	lr
 801370e:	bf00      	nop

08013710 <__atomic_load_8>:
 8013710:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013714:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013718:	4a15      	ldr	r2, [pc, #84]	@ (8013770 <__atomic_load_8+0x60>)
 801371a:	4b16      	ldr	r3, [pc, #88]	@ (8013774 <__atomic_load_8+0x64>)
 801371c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013720:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013724:	fb02 f101 	mul.w	r1, r2, r1
 8013728:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801372c:	fba3 2301 	umull	r2, r3, r3, r1
 8013730:	091b      	lsrs	r3, r3, #4
 8013732:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013736:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801373a:	b4f0      	push	{r4, r5, r6, r7}
 801373c:	4d0e      	ldr	r5, [pc, #56]	@ (8013778 <__atomic_load_8+0x68>)
 801373e:	1ac9      	subs	r1, r1, r3
 8013740:	194a      	adds	r2, r1, r5
 8013742:	f04f 0c01 	mov.w	ip, #1
 8013746:	e8d2 3f4f 	ldrexb	r3, [r2]
 801374a:	e8c2 cf44 	strexb	r4, ip, [r2]
 801374e:	2c00      	cmp	r4, #0
 8013750:	d1f9      	bne.n	8013746 <__atomic_load_8+0x36>
 8013752:	f3bf 8f5b 	dmb	ish
 8013756:	b2dc      	uxtb	r4, r3
 8013758:	2c00      	cmp	r4, #0
 801375a:	d1f4      	bne.n	8013746 <__atomic_load_8+0x36>
 801375c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013760:	f3bf 8f5b 	dmb	ish
 8013764:	546b      	strb	r3, [r5, r1]
 8013766:	4630      	mov	r0, r6
 8013768:	4639      	mov	r1, r7
 801376a:	bcf0      	pop	{r4, r5, r6, r7}
 801376c:	4770      	bx	lr
 801376e:	bf00      	nop
 8013770:	27d4eb2d 	.word	0x27d4eb2d
 8013774:	b21642c9 	.word	0xb21642c9
 8013778:	200101f4 	.word	0x200101f4

0801377c <__atomic_store_8>:
 801377c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013780:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013784:	b570      	push	{r4, r5, r6, lr}
 8013786:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801378a:	4c14      	ldr	r4, [pc, #80]	@ (80137dc <__atomic_store_8+0x60>)
 801378c:	4e14      	ldr	r6, [pc, #80]	@ (80137e0 <__atomic_store_8+0x64>)
 801378e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013792:	fb04 f101 	mul.w	r1, r4, r1
 8013796:	4c13      	ldr	r4, [pc, #76]	@ (80137e4 <__atomic_store_8+0x68>)
 8013798:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801379c:	fba4 5401 	umull	r5, r4, r4, r1
 80137a0:	0924      	lsrs	r4, r4, #4
 80137a2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80137a6:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80137aa:	eba1 0e04 	sub.w	lr, r1, r4
 80137ae:	f04f 0501 	mov.w	r5, #1
 80137b2:	eb0e 0c06 	add.w	ip, lr, r6
 80137b6:	e8dc 1f4f 	ldrexb	r1, [ip]
 80137ba:	e8cc 5f44 	strexb	r4, r5, [ip]
 80137be:	2c00      	cmp	r4, #0
 80137c0:	d1f9      	bne.n	80137b6 <__atomic_store_8+0x3a>
 80137c2:	f3bf 8f5b 	dmb	ish
 80137c6:	b2cc      	uxtb	r4, r1
 80137c8:	2c00      	cmp	r4, #0
 80137ca:	d1f4      	bne.n	80137b6 <__atomic_store_8+0x3a>
 80137cc:	e9c0 2300 	strd	r2, r3, [r0]
 80137d0:	f3bf 8f5b 	dmb	ish
 80137d4:	f806 100e 	strb.w	r1, [r6, lr]
 80137d8:	bd70      	pop	{r4, r5, r6, pc}
 80137da:	bf00      	nop
 80137dc:	27d4eb2d 	.word	0x27d4eb2d
 80137e0:	200101f4 	.word	0x200101f4
 80137e4:	b21642c9 	.word	0xb21642c9

080137e8 <__atomic_exchange_8>:
 80137e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80137ea:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80137ee:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 80137f2:	4917      	ldr	r1, [pc, #92]	@ (8013850 <__atomic_exchange_8+0x68>)
 80137f4:	4f17      	ldr	r7, [pc, #92]	@ (8013854 <__atomic_exchange_8+0x6c>)
 80137f6:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 80137fa:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 80137fe:	fb01 fe0e 	mul.w	lr, r1, lr
 8013802:	4915      	ldr	r1, [pc, #84]	@ (8013858 <__atomic_exchange_8+0x70>)
 8013804:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8013808:	4606      	mov	r6, r0
 801380a:	fba1 010e 	umull	r0, r1, r1, lr
 801380e:	0909      	lsrs	r1, r1, #4
 8013810:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8013814:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8013818:	ebae 0e01 	sub.w	lr, lr, r1
 801381c:	f04f 0501 	mov.w	r5, #1
 8013820:	eb0e 0107 	add.w	r1, lr, r7
 8013824:	e8d1 cf4f 	ldrexb	ip, [r1]
 8013828:	e8c1 5f40 	strexb	r0, r5, [r1]
 801382c:	2800      	cmp	r0, #0
 801382e:	d1f9      	bne.n	8013824 <__atomic_exchange_8+0x3c>
 8013830:	f3bf 8f5b 	dmb	ish
 8013834:	fa5f f48c 	uxtb.w	r4, ip
 8013838:	2c00      	cmp	r4, #0
 801383a:	d1f3      	bne.n	8013824 <__atomic_exchange_8+0x3c>
 801383c:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013840:	e9c6 2300 	strd	r2, r3, [r6]
 8013844:	f3bf 8f5b 	dmb	ish
 8013848:	f807 c00e 	strb.w	ip, [r7, lr]
 801384c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801384e:	bf00      	nop
 8013850:	27d4eb2d 	.word	0x27d4eb2d
 8013854:	200101f4 	.word	0x200101f4
 8013858:	b21642c9 	.word	0xb21642c9

0801385c <rcutils_get_env>:
 801385c:	b150      	cbz	r0, 8013874 <rcutils_get_env+0x18>
 801385e:	b510      	push	{r4, lr}
 8013860:	460c      	mov	r4, r1
 8013862:	b909      	cbnz	r1, 8013868 <rcutils_get_env+0xc>
 8013864:	4806      	ldr	r0, [pc, #24]	@ (8013880 <rcutils_get_env+0x24>)
 8013866:	bd10      	pop	{r4, pc}
 8013868:	f004 f8a4 	bl	80179b4 <getenv>
 801386c:	b120      	cbz	r0, 8013878 <rcutils_get_env+0x1c>
 801386e:	6020      	str	r0, [r4, #0]
 8013870:	2000      	movs	r0, #0
 8013872:	bd10      	pop	{r4, pc}
 8013874:	4803      	ldr	r0, [pc, #12]	@ (8013884 <rcutils_get_env+0x28>)
 8013876:	4770      	bx	lr
 8013878:	4b03      	ldr	r3, [pc, #12]	@ (8013888 <rcutils_get_env+0x2c>)
 801387a:	6023      	str	r3, [r4, #0]
 801387c:	e7f8      	b.n	8013870 <rcutils_get_env+0x14>
 801387e:	bf00      	nop
 8013880:	0801a09c 	.word	0x0801a09c
 8013884:	0801a080 	.word	0x0801a080
 8013888:	08019eb8 	.word	0x08019eb8

0801388c <rcutils_format_string_limit>:
 801388c:	b40f      	push	{r0, r1, r2, r3}
 801388e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013890:	b083      	sub	sp, #12
 8013892:	ac08      	add	r4, sp, #32
 8013894:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801389a:	b376      	cbz	r6, 80138fa <rcutils_format_string_limit+0x6e>
 801389c:	4620      	mov	r0, r4
 801389e:	f7f6 fcb3 	bl	800a208 <rcutils_allocator_is_valid>
 80138a2:	b350      	cbz	r0, 80138fa <rcutils_format_string_limit+0x6e>
 80138a4:	2100      	movs	r1, #0
 80138a6:	ab0f      	add	r3, sp, #60	@ 0x3c
 80138a8:	4632      	mov	r2, r6
 80138aa:	4608      	mov	r0, r1
 80138ac:	e9cd 3300 	strd	r3, r3, [sp]
 80138b0:	f000 f8f8 	bl	8013aa4 <rcutils_vsnprintf>
 80138b4:	1c43      	adds	r3, r0, #1
 80138b6:	4605      	mov	r5, r0
 80138b8:	d01f      	beq.n	80138fa <rcutils_format_string_limit+0x6e>
 80138ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80138bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80138be:	1c47      	adds	r7, r0, #1
 80138c0:	429f      	cmp	r7, r3
 80138c2:	bf84      	itt	hi
 80138c4:	461f      	movhi	r7, r3
 80138c6:	f103 35ff 	addhi.w	r5, r3, #4294967295
 80138ca:	4638      	mov	r0, r7
 80138cc:	9b08      	ldr	r3, [sp, #32]
 80138ce:	4798      	blx	r3
 80138d0:	4604      	mov	r4, r0
 80138d2:	b190      	cbz	r0, 80138fa <rcutils_format_string_limit+0x6e>
 80138d4:	9b01      	ldr	r3, [sp, #4]
 80138d6:	4632      	mov	r2, r6
 80138d8:	4639      	mov	r1, r7
 80138da:	f000 f8e3 	bl	8013aa4 <rcutils_vsnprintf>
 80138de:	2800      	cmp	r0, #0
 80138e0:	db07      	blt.n	80138f2 <rcutils_format_string_limit+0x66>
 80138e2:	2300      	movs	r3, #0
 80138e4:	5563      	strb	r3, [r4, r5]
 80138e6:	4620      	mov	r0, r4
 80138e8:	b003      	add	sp, #12
 80138ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80138ee:	b004      	add	sp, #16
 80138f0:	4770      	bx	lr
 80138f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138f4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80138f6:	4620      	mov	r0, r4
 80138f8:	4798      	blx	r3
 80138fa:	2400      	movs	r4, #0
 80138fc:	e7f3      	b.n	80138e6 <rcutils_format_string_limit+0x5a>
 80138fe:	bf00      	nop

08013900 <rcutils_repl_str>:
 8013900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013904:	4699      	mov	r9, r3
 8013906:	b089      	sub	sp, #36	@ 0x24
 8013908:	4603      	mov	r3, r0
 801390a:	4648      	mov	r0, r9
 801390c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8013910:	4698      	mov	r8, r3
 8013912:	9300      	str	r3, [sp, #0]
 8013914:	460c      	mov	r4, r1
 8013916:	f7f6 fc77 	bl	800a208 <rcutils_allocator_is_valid>
 801391a:	2800      	cmp	r0, #0
 801391c:	f000 80a3 	beq.w	8013a66 <rcutils_repl_str+0x166>
 8013920:	4620      	mov	r0, r4
 8013922:	f7ec fcd5 	bl	80002d0 <strlen>
 8013926:	f04f 0a00 	mov.w	sl, #0
 801392a:	f8d9 b010 	ldr.w	fp, [r9, #16]
 801392e:	9001      	str	r0, [sp, #4]
 8013930:	4657      	mov	r7, sl
 8013932:	4655      	mov	r5, sl
 8013934:	2610      	movs	r6, #16
 8013936:	e01e      	b.n	8013976 <rcutils_repl_str+0x76>
 8013938:	3501      	adds	r5, #1
 801393a:	45aa      	cmp	sl, r5
 801393c:	d212      	bcs.n	8013964 <rcutils_repl_str+0x64>
 801393e:	44b2      	add	sl, r6
 8013940:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013944:	ea4f 018a 	mov.w	r1, sl, lsl #2
 8013948:	4798      	blx	r3
 801394a:	2800      	cmp	r0, #0
 801394c:	f000 8088 	beq.w	8013a60 <rcutils_repl_str+0x160>
 8013950:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8013954:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 8013958:	f8d9 b010 	ldr.w	fp, [r9, #16]
 801395c:	4607      	mov	r7, r0
 801395e:	bf28      	it	cs
 8013960:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 8013964:	9a00      	ldr	r2, [sp, #0]
 8013966:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 801396a:	1aa2      	subs	r2, r4, r2
 801396c:	f843 2c04 	str.w	r2, [r3, #-4]
 8013970:	9b01      	ldr	r3, [sp, #4]
 8013972:	eb04 0803 	add.w	r8, r4, r3
 8013976:	9902      	ldr	r1, [sp, #8]
 8013978:	4640      	mov	r0, r8
 801397a:	f004 fd05 	bl	8018388 <strstr>
 801397e:	4604      	mov	r4, r0
 8013980:	465a      	mov	r2, fp
 8013982:	4638      	mov	r0, r7
 8013984:	2c00      	cmp	r4, #0
 8013986:	d1d7      	bne.n	8013938 <rcutils_repl_str+0x38>
 8013988:	4640      	mov	r0, r8
 801398a:	f7ec fca1 	bl	80002d0 <strlen>
 801398e:	9b00      	ldr	r3, [sp, #0]
 8013990:	eba8 0803 	sub.w	r8, r8, r3
 8013994:	eb08 0300 	add.w	r3, r8, r0
 8013998:	9304      	str	r3, [sp, #16]
 801399a:	f8d9 8000 	ldr.w	r8, [r9]
 801399e:	2d00      	cmp	r5, #0
 80139a0:	d03f      	beq.n	8013a22 <rcutils_repl_str+0x122>
 80139a2:	9803      	ldr	r0, [sp, #12]
 80139a4:	f7ec fc94 	bl	80002d0 <strlen>
 80139a8:	4606      	mov	r6, r0
 80139aa:	9801      	ldr	r0, [sp, #4]
 80139ac:	9a04      	ldr	r2, [sp, #16]
 80139ae:	1a33      	subs	r3, r6, r0
 80139b0:	fb05 2a03 	mla	sl, r5, r3, r2
 80139b4:	4659      	mov	r1, fp
 80139b6:	f10a 0001 	add.w	r0, sl, #1
 80139ba:	47c0      	blx	r8
 80139bc:	4683      	mov	fp, r0
 80139be:	2800      	cmp	r0, #0
 80139c0:	d04e      	beq.n	8013a60 <rcutils_repl_str+0x160>
 80139c2:	683a      	ldr	r2, [r7, #0]
 80139c4:	9900      	ldr	r1, [sp, #0]
 80139c6:	f004 fd80 	bl	80184ca <memcpy>
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	9706      	str	r7, [sp, #24]
 80139ce:	1e6a      	subs	r2, r5, #1
 80139d0:	445b      	add	r3, fp
 80139d2:	46a8      	mov	r8, r5
 80139d4:	9202      	str	r2, [sp, #8]
 80139d6:	4625      	mov	r5, r4
 80139d8:	f8cd 901c 	str.w	r9, [sp, #28]
 80139dc:	461c      	mov	r4, r3
 80139de:	9903      	ldr	r1, [sp, #12]
 80139e0:	4632      	mov	r2, r6
 80139e2:	4620      	mov	r0, r4
 80139e4:	f004 fd71 	bl	80184ca <memcpy>
 80139e8:	9b01      	ldr	r3, [sp, #4]
 80139ea:	f857 2b04 	ldr.w	r2, [r7], #4
 80139ee:	eb02 0c03 	add.w	ip, r2, r3
 80139f2:	9b00      	ldr	r3, [sp, #0]
 80139f4:	eb03 010c 	add.w	r1, r3, ip
 80139f8:	9b02      	ldr	r3, [sp, #8]
 80139fa:	4434      	add	r4, r6
 80139fc:	429d      	cmp	r5, r3
 80139fe:	4620      	mov	r0, r4
 8013a00:	d022      	beq.n	8013a48 <rcutils_repl_str+0x148>
 8013a02:	683a      	ldr	r2, [r7, #0]
 8013a04:	eba2 090c 	sub.w	r9, r2, ip
 8013a08:	464a      	mov	r2, r9
 8013a0a:	3501      	adds	r5, #1
 8013a0c:	f004 fd5d 	bl	80184ca <memcpy>
 8013a10:	45a8      	cmp	r8, r5
 8013a12:	444c      	add	r4, r9
 8013a14:	d1e3      	bne.n	80139de <rcutils_repl_str+0xde>
 8013a16:	2300      	movs	r3, #0
 8013a18:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 8013a1c:	f80b 300a 	strb.w	r3, [fp, sl]
 8013a20:	e008      	b.n	8013a34 <rcutils_repl_str+0x134>
 8013a22:	4618      	mov	r0, r3
 8013a24:	4659      	mov	r1, fp
 8013a26:	3001      	adds	r0, #1
 8013a28:	47c0      	blx	r8
 8013a2a:	4683      	mov	fp, r0
 8013a2c:	b110      	cbz	r0, 8013a34 <rcutils_repl_str+0x134>
 8013a2e:	9900      	ldr	r1, [sp, #0]
 8013a30:	f004 fd43 	bl	80184ba <strcpy>
 8013a34:	4638      	mov	r0, r7
 8013a36:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013a3a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013a3e:	4798      	blx	r3
 8013a40:	4658      	mov	r0, fp
 8013a42:	b009      	add	sp, #36	@ 0x24
 8013a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a48:	9b04      	ldr	r3, [sp, #16]
 8013a4a:	eba3 020c 	sub.w	r2, r3, ip
 8013a4e:	9205      	str	r2, [sp, #20]
 8013a50:	3501      	adds	r5, #1
 8013a52:	f004 fd3a 	bl	80184ca <memcpy>
 8013a56:	9a05      	ldr	r2, [sp, #20]
 8013a58:	45a8      	cmp	r8, r5
 8013a5a:	4414      	add	r4, r2
 8013a5c:	d1bf      	bne.n	80139de <rcutils_repl_str+0xde>
 8013a5e:	e7da      	b.n	8013a16 <rcutils_repl_str+0x116>
 8013a60:	f04f 0b00 	mov.w	fp, #0
 8013a64:	e7e6      	b.n	8013a34 <rcutils_repl_str+0x134>
 8013a66:	4683      	mov	fp, r0
 8013a68:	4658      	mov	r0, fp
 8013a6a:	b009      	add	sp, #36	@ 0x24
 8013a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a70 <rcutils_snprintf>:
 8013a70:	b40c      	push	{r2, r3}
 8013a72:	b530      	push	{r4, r5, lr}
 8013a74:	b083      	sub	sp, #12
 8013a76:	ab06      	add	r3, sp, #24
 8013a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a7c:	9301      	str	r3, [sp, #4]
 8013a7e:	b152      	cbz	r2, 8013a96 <rcutils_snprintf+0x26>
 8013a80:	b138      	cbz	r0, 8013a92 <rcutils_snprintf+0x22>
 8013a82:	b141      	cbz	r1, 8013a96 <rcutils_snprintf+0x26>
 8013a84:	f004 fb7a 	bl	801817c <vsniprintf>
 8013a88:	b003      	add	sp, #12
 8013a8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a8e:	b002      	add	sp, #8
 8013a90:	4770      	bx	lr
 8013a92:	2900      	cmp	r1, #0
 8013a94:	d0f6      	beq.n	8013a84 <rcutils_snprintf+0x14>
 8013a96:	f004 fce3 	bl	8018460 <__errno>
 8013a9a:	2316      	movs	r3, #22
 8013a9c:	6003      	str	r3, [r0, #0]
 8013a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa2:	e7f1      	b.n	8013a88 <rcutils_snprintf+0x18>

08013aa4 <rcutils_vsnprintf>:
 8013aa4:	b570      	push	{r4, r5, r6, lr}
 8013aa6:	b13a      	cbz	r2, 8013ab8 <rcutils_vsnprintf+0x14>
 8013aa8:	b120      	cbz	r0, 8013ab4 <rcutils_vsnprintf+0x10>
 8013aaa:	b129      	cbz	r1, 8013ab8 <rcutils_vsnprintf+0x14>
 8013aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ab0:	f004 bb64 	b.w	801817c <vsniprintf>
 8013ab4:	2900      	cmp	r1, #0
 8013ab6:	d0f9      	beq.n	8013aac <rcutils_vsnprintf+0x8>
 8013ab8:	f004 fcd2 	bl	8018460 <__errno>
 8013abc:	2316      	movs	r3, #22
 8013abe:	6003      	str	r3, [r0, #0]
 8013ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ac4:	bd70      	pop	{r4, r5, r6, pc}
 8013ac6:	bf00      	nop

08013ac8 <rcutils_strdup>:
 8013ac8:	b084      	sub	sp, #16
 8013aca:	b570      	push	{r4, r5, r6, lr}
 8013acc:	b086      	sub	sp, #24
 8013ace:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8013ad2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8013ad6:	4604      	mov	r4, r0
 8013ad8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013adc:	f10d 0e04 	add.w	lr, sp, #4
 8013ae0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013ae4:	f8dc 3000 	ldr.w	r3, [ip]
 8013ae8:	f8ce 3000 	str.w	r3, [lr]
 8013aec:	b304      	cbz	r4, 8013b30 <rcutils_strdup+0x68>
 8013aee:	a801      	add	r0, sp, #4
 8013af0:	f7f6 fb8a 	bl	800a208 <rcutils_allocator_is_valid>
 8013af4:	b1e0      	cbz	r0, 8013b30 <rcutils_strdup+0x68>
 8013af6:	f04f 32ff 	mov.w	r2, #4294967295
 8013afa:	2100      	movs	r1, #0
 8013afc:	4620      	mov	r0, r4
 8013afe:	f7ec fb97 	bl	8000230 <memchr>
 8013b02:	b190      	cbz	r0, 8013b2a <rcutils_strdup+0x62>
 8013b04:	1b06      	subs	r6, r0, r4
 8013b06:	1c70      	adds	r0, r6, #1
 8013b08:	9b01      	ldr	r3, [sp, #4]
 8013b0a:	9905      	ldr	r1, [sp, #20]
 8013b0c:	4798      	blx	r3
 8013b0e:	4605      	mov	r5, r0
 8013b10:	b128      	cbz	r0, 8013b1e <rcutils_strdup+0x56>
 8013b12:	4632      	mov	r2, r6
 8013b14:	4621      	mov	r1, r4
 8013b16:	f004 fcd8 	bl	80184ca <memcpy>
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	55ab      	strb	r3, [r5, r6]
 8013b1e:	4628      	mov	r0, r5
 8013b20:	b006      	add	sp, #24
 8013b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b26:	b004      	add	sp, #16
 8013b28:	4770      	bx	lr
 8013b2a:	f04f 36ff 	mov.w	r6, #4294967295
 8013b2e:	e7eb      	b.n	8013b08 <rcutils_strdup+0x40>
 8013b30:	2500      	movs	r5, #0
 8013b32:	e7f4      	b.n	8013b1e <rcutils_strdup+0x56>

08013b34 <rcutils_strndup>:
 8013b34:	b082      	sub	sp, #8
 8013b36:	b570      	push	{r4, r5, r6, lr}
 8013b38:	ac04      	add	r4, sp, #16
 8013b3a:	e884 000c 	stmia.w	r4, {r2, r3}
 8013b3e:	b1e8      	cbz	r0, 8013b7c <rcutils_strndup+0x48>
 8013b40:	4605      	mov	r5, r0
 8013b42:	a804      	add	r0, sp, #16
 8013b44:	460c      	mov	r4, r1
 8013b46:	f7f6 fb5f 	bl	800a208 <rcutils_allocator_is_valid>
 8013b4a:	b1b8      	cbz	r0, 8013b7c <rcutils_strndup+0x48>
 8013b4c:	4622      	mov	r2, r4
 8013b4e:	2100      	movs	r1, #0
 8013b50:	4628      	mov	r0, r5
 8013b52:	f7ec fb6d 	bl	8000230 <memchr>
 8013b56:	b100      	cbz	r0, 8013b5a <rcutils_strndup+0x26>
 8013b58:	1b44      	subs	r4, r0, r5
 8013b5a:	9b04      	ldr	r3, [sp, #16]
 8013b5c:	9908      	ldr	r1, [sp, #32]
 8013b5e:	1c60      	adds	r0, r4, #1
 8013b60:	4798      	blx	r3
 8013b62:	4606      	mov	r6, r0
 8013b64:	b128      	cbz	r0, 8013b72 <rcutils_strndup+0x3e>
 8013b66:	4622      	mov	r2, r4
 8013b68:	4629      	mov	r1, r5
 8013b6a:	f004 fcae 	bl	80184ca <memcpy>
 8013b6e:	2300      	movs	r3, #0
 8013b70:	5533      	strb	r3, [r6, r4]
 8013b72:	4630      	mov	r0, r6
 8013b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b78:	b002      	add	sp, #8
 8013b7a:	4770      	bx	lr
 8013b7c:	2600      	movs	r6, #0
 8013b7e:	4630      	mov	r0, r6
 8013b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b84:	b002      	add	sp, #8
 8013b86:	4770      	bx	lr

08013b88 <rcutils_get_zero_initialized_string_map>:
 8013b88:	4b01      	ldr	r3, [pc, #4]	@ (8013b90 <rcutils_get_zero_initialized_string_map+0x8>)
 8013b8a:	6818      	ldr	r0, [r3, #0]
 8013b8c:	4770      	bx	lr
 8013b8e:	bf00      	nop
 8013b90:	0801aacc 	.word	0x0801aacc

08013b94 <rcutils_string_map_reserve>:
 8013b94:	2800      	cmp	r0, #0
 8013b96:	d04e      	beq.n	8013c36 <rcutils_string_map_reserve+0xa2>
 8013b98:	b530      	push	{r4, r5, lr}
 8013b9a:	6803      	ldr	r3, [r0, #0]
 8013b9c:	b087      	sub	sp, #28
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d043      	beq.n	8013c2c <rcutils_string_map_reserve+0x98>
 8013ba4:	f103 0c0c 	add.w	ip, r3, #12
 8013ba8:	460d      	mov	r5, r1
 8013baa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013bae:	f10d 0e04 	add.w	lr, sp, #4
 8013bb2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013bb6:	f8dc 3000 	ldr.w	r3, [ip]
 8013bba:	f8ce 3000 	str.w	r3, [lr]
 8013bbe:	a801      	add	r0, sp, #4
 8013bc0:	f7f6 fb22 	bl	800a208 <rcutils_allocator_is_valid>
 8013bc4:	b308      	cbz	r0, 8013c0a <rcutils_string_map_reserve+0x76>
 8013bc6:	6823      	ldr	r3, [r4, #0]
 8013bc8:	6899      	ldr	r1, [r3, #8]
 8013bca:	42a9      	cmp	r1, r5
 8013bcc:	d829      	bhi.n	8013c22 <rcutils_string_map_reserve+0x8e>
 8013bce:	685a      	ldr	r2, [r3, #4]
 8013bd0:	42aa      	cmp	r2, r5
 8013bd2:	d024      	beq.n	8013c1e <rcutils_string_map_reserve+0x8a>
 8013bd4:	b1e5      	cbz	r5, 8013c10 <rcutils_string_map_reserve+0x7c>
 8013bd6:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 8013bda:	d22a      	bcs.n	8013c32 <rcutils_string_map_reserve+0x9e>
 8013bdc:	6818      	ldr	r0, [r3, #0]
 8013bde:	9a05      	ldr	r2, [sp, #20]
 8013be0:	9b03      	ldr	r3, [sp, #12]
 8013be2:	00e9      	lsls	r1, r5, #3
 8013be4:	4798      	blx	r3
 8013be6:	b320      	cbz	r0, 8013c32 <rcutils_string_map_reserve+0x9e>
 8013be8:	6824      	ldr	r4, [r4, #0]
 8013bea:	6861      	ldr	r1, [r4, #4]
 8013bec:	6020      	str	r0, [r4, #0]
 8013bee:	42a9      	cmp	r1, r5
 8013bf0:	d214      	bcs.n	8013c1c <rcutils_string_map_reserve+0x88>
 8013bf2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8013bf6:	1a69      	subs	r1, r5, r1
 8013bf8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	e9c3 2200 	strd	r2, r2, [r3]
 8013c02:	3308      	adds	r3, #8
 8013c04:	428b      	cmp	r3, r1
 8013c06:	d1fa      	bne.n	8013bfe <rcutils_string_map_reserve+0x6a>
 8013c08:	e008      	b.n	8013c1c <rcutils_string_map_reserve+0x88>
 8013c0a:	200b      	movs	r0, #11
 8013c0c:	b007      	add	sp, #28
 8013c0e:	bd30      	pop	{r4, r5, pc}
 8013c10:	9a02      	ldr	r2, [sp, #8]
 8013c12:	9905      	ldr	r1, [sp, #20]
 8013c14:	6818      	ldr	r0, [r3, #0]
 8013c16:	4790      	blx	r2
 8013c18:	6824      	ldr	r4, [r4, #0]
 8013c1a:	6025      	str	r5, [r4, #0]
 8013c1c:	6065      	str	r5, [r4, #4]
 8013c1e:	2000      	movs	r0, #0
 8013c20:	e7f4      	b.n	8013c0c <rcutils_string_map_reserve+0x78>
 8013c22:	4620      	mov	r0, r4
 8013c24:	f7ff ffb6 	bl	8013b94 <rcutils_string_map_reserve>
 8013c28:	b007      	add	sp, #28
 8013c2a:	bd30      	pop	{r4, r5, pc}
 8013c2c:	201f      	movs	r0, #31
 8013c2e:	b007      	add	sp, #28
 8013c30:	bd30      	pop	{r4, r5, pc}
 8013c32:	200a      	movs	r0, #10
 8013c34:	e7ea      	b.n	8013c0c <rcutils_string_map_reserve+0x78>
 8013c36:	200b      	movs	r0, #11
 8013c38:	4770      	bx	lr
 8013c3a:	bf00      	nop

08013c3c <rcutils_string_map_init>:
 8013c3c:	b082      	sub	sp, #8
 8013c3e:	b570      	push	{r4, r5, r6, lr}
 8013c40:	ac04      	add	r4, sp, #16
 8013c42:	e884 000c 	stmia.w	r4, {r2, r3}
 8013c46:	b378      	cbz	r0, 8013ca8 <rcutils_string_map_init+0x6c>
 8013c48:	6806      	ldr	r6, [r0, #0]
 8013c4a:	4604      	mov	r4, r0
 8013c4c:	b12e      	cbz	r6, 8013c5a <rcutils_string_map_init+0x1e>
 8013c4e:	251e      	movs	r5, #30
 8013c50:	4628      	mov	r0, r5
 8013c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c56:	b002      	add	sp, #8
 8013c58:	4770      	bx	lr
 8013c5a:	a804      	add	r0, sp, #16
 8013c5c:	460d      	mov	r5, r1
 8013c5e:	f7f6 fad3 	bl	800a208 <rcutils_allocator_is_valid>
 8013c62:	b308      	cbz	r0, 8013ca8 <rcutils_string_map_init+0x6c>
 8013c64:	9b04      	ldr	r3, [sp, #16]
 8013c66:	9908      	ldr	r1, [sp, #32]
 8013c68:	2020      	movs	r0, #32
 8013c6a:	4798      	blx	r3
 8013c6c:	6020      	str	r0, [r4, #0]
 8013c6e:	b308      	cbz	r0, 8013cb4 <rcutils_string_map_init+0x78>
 8013c70:	f10d 0e10 	add.w	lr, sp, #16
 8013c74:	e9c0 6600 	strd	r6, r6, [r0]
 8013c78:	6086      	str	r6, [r0, #8]
 8013c7a:	f100 0c0c 	add.w	ip, r0, #12
 8013c7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013c82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c86:	f8de 3000 	ldr.w	r3, [lr]
 8013c8a:	f8cc 3000 	str.w	r3, [ip]
 8013c8e:	4629      	mov	r1, r5
 8013c90:	4620      	mov	r0, r4
 8013c92:	f7ff ff7f 	bl	8013b94 <rcutils_string_map_reserve>
 8013c96:	4605      	mov	r5, r0
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	d0d9      	beq.n	8013c50 <rcutils_string_map_init+0x14>
 8013c9c:	9b05      	ldr	r3, [sp, #20]
 8013c9e:	9908      	ldr	r1, [sp, #32]
 8013ca0:	6820      	ldr	r0, [r4, #0]
 8013ca2:	4798      	blx	r3
 8013ca4:	6026      	str	r6, [r4, #0]
 8013ca6:	e7d3      	b.n	8013c50 <rcutils_string_map_init+0x14>
 8013ca8:	250b      	movs	r5, #11
 8013caa:	4628      	mov	r0, r5
 8013cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cb0:	b002      	add	sp, #8
 8013cb2:	4770      	bx	lr
 8013cb4:	250a      	movs	r5, #10
 8013cb6:	e7cb      	b.n	8013c50 <rcutils_string_map_init+0x14>

08013cb8 <rcutils_string_map_fini>:
 8013cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cbc:	b086      	sub	sp, #24
 8013cbe:	2800      	cmp	r0, #0
 8013cc0:	d04f      	beq.n	8013d62 <rcutils_string_map_fini+0xaa>
 8013cc2:	6805      	ldr	r5, [r0, #0]
 8013cc4:	4606      	mov	r6, r0
 8013cc6:	2d00      	cmp	r5, #0
 8013cc8:	d046      	beq.n	8013d58 <rcutils_string_map_fini+0xa0>
 8013cca:	686b      	ldr	r3, [r5, #4]
 8013ccc:	b353      	cbz	r3, 8013d24 <rcutils_string_map_fini+0x6c>
 8013cce:	2400      	movs	r4, #0
 8013cd0:	682a      	ldr	r2, [r5, #0]
 8013cd2:	4627      	mov	r7, r4
 8013cd4:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8013cd8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8013cdc:	b1f8      	cbz	r0, 8013d1e <rcutils_string_map_fini+0x66>
 8013cde:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8013ce2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013ce6:	4651      	mov	r1, sl
 8013ce8:	47c8      	blx	r9
 8013cea:	682b      	ldr	r3, [r5, #0]
 8013cec:	eb03 0208 	add.w	r2, r3, r8
 8013cf0:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8013cf4:	6850      	ldr	r0, [r2, #4]
 8013cf6:	4651      	mov	r1, sl
 8013cf8:	47c8      	blx	r9
 8013cfa:	682a      	ldr	r2, [r5, #0]
 8013cfc:	68ab      	ldr	r3, [r5, #8]
 8013cfe:	4442      	add	r2, r8
 8013d00:	3b01      	subs	r3, #1
 8013d02:	6057      	str	r7, [r2, #4]
 8013d04:	60ab      	str	r3, [r5, #8]
 8013d06:	6835      	ldr	r5, [r6, #0]
 8013d08:	686b      	ldr	r3, [r5, #4]
 8013d0a:	3401      	adds	r4, #1
 8013d0c:	429c      	cmp	r4, r3
 8013d0e:	d209      	bcs.n	8013d24 <rcutils_string_map_fini+0x6c>
 8013d10:	682a      	ldr	r2, [r5, #0]
 8013d12:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8013d16:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	d1df      	bne.n	8013cde <rcutils_string_map_fini+0x26>
 8013d1e:	3401      	adds	r4, #1
 8013d20:	42a3      	cmp	r3, r4
 8013d22:	d8d7      	bhi.n	8013cd4 <rcutils_string_map_fini+0x1c>
 8013d24:	2100      	movs	r1, #0
 8013d26:	4630      	mov	r0, r6
 8013d28:	f7ff ff34 	bl	8013b94 <rcutils_string_map_reserve>
 8013d2c:	4604      	mov	r4, r0
 8013d2e:	b118      	cbz	r0, 8013d38 <rcutils_string_map_fini+0x80>
 8013d30:	4620      	mov	r0, r4
 8013d32:	b006      	add	sp, #24
 8013d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d38:	6835      	ldr	r5, [r6, #0]
 8013d3a:	350c      	adds	r5, #12
 8013d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d3e:	af01      	add	r7, sp, #4
 8013d40:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013d42:	682b      	ldr	r3, [r5, #0]
 8013d44:	603b      	str	r3, [r7, #0]
 8013d46:	a801      	add	r0, sp, #4
 8013d48:	f7f6 fa5e 	bl	800a208 <rcutils_allocator_is_valid>
 8013d4c:	b148      	cbz	r0, 8013d62 <rcutils_string_map_fini+0xaa>
 8013d4e:	9b02      	ldr	r3, [sp, #8]
 8013d50:	9905      	ldr	r1, [sp, #20]
 8013d52:	6830      	ldr	r0, [r6, #0]
 8013d54:	4798      	blx	r3
 8013d56:	6034      	str	r4, [r6, #0]
 8013d58:	2400      	movs	r4, #0
 8013d5a:	4620      	mov	r0, r4
 8013d5c:	b006      	add	sp, #24
 8013d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d62:	240b      	movs	r4, #11
 8013d64:	4620      	mov	r0, r4
 8013d66:	b006      	add	sp, #24
 8013d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013d6c <rcutils_string_map_getn>:
 8013d6c:	b338      	cbz	r0, 8013dbe <rcutils_string_map_getn+0x52>
 8013d6e:	6800      	ldr	r0, [r0, #0]
 8013d70:	b328      	cbz	r0, 8013dbe <rcutils_string_map_getn+0x52>
 8013d72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d76:	460e      	mov	r6, r1
 8013d78:	b1c1      	cbz	r1, 8013dac <rcutils_string_map_getn+0x40>
 8013d7a:	e9d0 9800 	ldrd	r9, r8, [r0]
 8013d7e:	f1b8 0f00 	cmp.w	r8, #0
 8013d82:	d013      	beq.n	8013dac <rcutils_string_map_getn+0x40>
 8013d84:	4617      	mov	r7, r2
 8013d86:	2400      	movs	r4, #0
 8013d88:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 8013d8c:	4628      	mov	r0, r5
 8013d8e:	b155      	cbz	r5, 8013da6 <rcutils_string_map_getn+0x3a>
 8013d90:	f7ec fa9e 	bl	80002d0 <strlen>
 8013d94:	42b8      	cmp	r0, r7
 8013d96:	4602      	mov	r2, r0
 8013d98:	4629      	mov	r1, r5
 8013d9a:	bf38      	it	cc
 8013d9c:	463a      	movcc	r2, r7
 8013d9e:	4630      	mov	r0, r6
 8013da0:	f004 facd 	bl	801833e <strncmp>
 8013da4:	b128      	cbz	r0, 8013db2 <rcutils_string_map_getn+0x46>
 8013da6:	3401      	adds	r4, #1
 8013da8:	45a0      	cmp	r8, r4
 8013daa:	d1ed      	bne.n	8013d88 <rcutils_string_map_getn+0x1c>
 8013dac:	2000      	movs	r0, #0
 8013dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013db2:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8013db6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8013dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dbe:	4770      	bx	lr

08013dc0 <rmw_get_zero_initialized_context>:
 8013dc0:	b510      	push	{r4, lr}
 8013dc2:	4903      	ldr	r1, [pc, #12]	@ (8013dd0 <rmw_get_zero_initialized_context+0x10>)
 8013dc4:	4604      	mov	r4, r0
 8013dc6:	2270      	movs	r2, #112	@ 0x70
 8013dc8:	f004 fb7f 	bl	80184ca <memcpy>
 8013dcc:	4620      	mov	r0, r4
 8013dce:	bd10      	pop	{r4, pc}
 8013dd0:	0801aad0 	.word	0x0801aad0

08013dd4 <rmw_get_zero_initialized_init_options>:
 8013dd4:	b510      	push	{r4, lr}
 8013dd6:	4903      	ldr	r1, [pc, #12]	@ (8013de4 <rmw_get_zero_initialized_init_options+0x10>)
 8013dd8:	4604      	mov	r4, r0
 8013dda:	2258      	movs	r2, #88	@ 0x58
 8013ddc:	f004 fb75 	bl	80184ca <memcpy>
 8013de0:	4620      	mov	r0, r4
 8013de2:	bd10      	pop	{r4, pc}
 8013de4:	0801ab40 	.word	0x0801ab40

08013de8 <rmw_time_equal>:
 8013de8:	b570      	push	{r4, r5, r6, lr}
 8013dea:	b084      	sub	sp, #16
 8013dec:	ac04      	add	r4, sp, #16
 8013dee:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013df2:	4925      	ldr	r1, [pc, #148]	@ (8013e88 <rmw_time_equal+0xa0>)
 8013df4:	9c01      	ldr	r4, [sp, #4]
 8013df6:	2202      	movs	r2, #2
 8013df8:	4281      	cmp	r1, r0
 8013dfa:	41a2      	sbcs	r2, r4
 8013dfc:	d333      	bcc.n	8013e66 <rmw_time_equal+0x7e>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	4822      	ldr	r0, [pc, #136]	@ (8013e8c <rmw_time_equal+0xa4>)
 8013e02:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 8013e06:	fba3 3200 	umull	r3, r2, r3, r0
 8013e0a:	fb00 2204 	mla	r2, r0, r4, r2
 8013e0e:	43de      	mvns	r6, r3
 8013e10:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013e14:	1a84      	subs	r4, r0, r2
 8013e16:	428e      	cmp	r6, r1
 8013e18:	41ac      	sbcs	r4, r5
 8013e1a:	d332      	bcc.n	8013e82 <rmw_time_equal+0x9a>
 8013e1c:	eb11 0e03 	adds.w	lr, r1, r3
 8013e20:	eb42 0005 	adc.w	r0, r2, r5
 8013e24:	9b08      	ldr	r3, [sp, #32]
 8013e26:	4918      	ldr	r1, [pc, #96]	@ (8013e88 <rmw_time_equal+0xa0>)
 8013e28:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8013e2a:	2202      	movs	r2, #2
 8013e2c:	4299      	cmp	r1, r3
 8013e2e:	41aa      	sbcs	r2, r5
 8013e30:	d31e      	bcc.n	8013e70 <rmw_time_equal+0x88>
 8013e32:	4c16      	ldr	r4, [pc, #88]	@ (8013e8c <rmw_time_equal+0xa4>)
 8013e34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013e36:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013e38:	fba3 3104 	umull	r3, r1, r3, r4
 8013e3c:	fb04 1105 	mla	r1, r4, r5, r1
 8013e40:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8013e44:	43dd      	mvns	r5, r3
 8013e46:	ebac 0401 	sub.w	r4, ip, r1
 8013e4a:	4295      	cmp	r5, r2
 8013e4c:	41b4      	sbcs	r4, r6
 8013e4e:	d314      	bcc.n	8013e7a <rmw_time_equal+0x92>
 8013e50:	18d2      	adds	r2, r2, r3
 8013e52:	eb41 0306 	adc.w	r3, r1, r6
 8013e56:	4283      	cmp	r3, r0
 8013e58:	bf08      	it	eq
 8013e5a:	4572      	cmpeq	r2, lr
 8013e5c:	bf0c      	ite	eq
 8013e5e:	2001      	moveq	r0, #1
 8013e60:	2000      	movne	r0, #0
 8013e62:	b004      	add	sp, #16
 8013e64:	bd70      	pop	{r4, r5, r6, pc}
 8013e66:	f04f 3eff 	mov.w	lr, #4294967295
 8013e6a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013e6e:	e7d9      	b.n	8013e24 <rmw_time_equal+0x3c>
 8013e70:	f04f 32ff 	mov.w	r2, #4294967295
 8013e74:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013e78:	e7ed      	b.n	8013e56 <rmw_time_equal+0x6e>
 8013e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e7e:	4663      	mov	r3, ip
 8013e80:	e7e9      	b.n	8013e56 <rmw_time_equal+0x6e>
 8013e82:	f04f 3eff 	mov.w	lr, #4294967295
 8013e86:	e7cd      	b.n	8013e24 <rmw_time_equal+0x3c>
 8013e88:	25c17d04 	.word	0x25c17d04
 8013e8c:	3b9aca00 	.word	0x3b9aca00

08013e90 <rmw_time_total_nsec>:
 8013e90:	b430      	push	{r4, r5}
 8013e92:	b084      	sub	sp, #16
 8013e94:	ac04      	add	r4, sp, #16
 8013e96:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8013e9a:	4914      	ldr	r1, [pc, #80]	@ (8013eec <rmw_time_total_nsec+0x5c>)
 8013e9c:	9c01      	ldr	r4, [sp, #4]
 8013e9e:	2202      	movs	r2, #2
 8013ea0:	4281      	cmp	r1, r0
 8013ea2:	41a2      	sbcs	r2, r4
 8013ea4:	d315      	bcc.n	8013ed2 <rmw_time_total_nsec+0x42>
 8013ea6:	4912      	ldr	r1, [pc, #72]	@ (8013ef0 <rmw_time_total_nsec+0x60>)
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 8013eae:	fba3 3201 	umull	r3, r2, r3, r1
 8013eb2:	fb01 2204 	mla	r2, r1, r4, r2
 8013eb6:	ea6f 0c03 	mvn.w	ip, r3
 8013eba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013ebe:	1a8c      	subs	r4, r1, r2
 8013ec0:	4584      	cmp	ip, r0
 8013ec2:	41ac      	sbcs	r4, r5
 8013ec4:	d30c      	bcc.n	8013ee0 <rmw_time_total_nsec+0x50>
 8013ec6:	1818      	adds	r0, r3, r0
 8013ec8:	eb42 0105 	adc.w	r1, r2, r5
 8013ecc:	b004      	add	sp, #16
 8013ece:	bc30      	pop	{r4, r5}
 8013ed0:	4770      	bx	lr
 8013ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ed6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013eda:	b004      	add	sp, #16
 8013edc:	bc30      	pop	{r4, r5}
 8013ede:	4770      	bx	lr
 8013ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee4:	b004      	add	sp, #16
 8013ee6:	bc30      	pop	{r4, r5}
 8013ee8:	4770      	bx	lr
 8013eea:	bf00      	nop
 8013eec:	25c17d04 	.word	0x25c17d04
 8013ef0:	3b9aca00 	.word	0x3b9aca00

08013ef4 <rmw_get_zero_initialized_message_info>:
 8013ef4:	b510      	push	{r4, lr}
 8013ef6:	4c09      	ldr	r4, [pc, #36]	@ (8013f1c <rmw_get_zero_initialized_message_info+0x28>)
 8013ef8:	4686      	mov	lr, r0
 8013efa:	4684      	mov	ip, r0
 8013efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013efe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013f12:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013f16:	4670      	mov	r0, lr
 8013f18:	bd10      	pop	{r4, pc}
 8013f1a:	bf00      	nop
 8013f1c:	0801ab98 	.word	0x0801ab98

08013f20 <rmw_validate_full_topic_name>:
 8013f20:	2800      	cmp	r0, #0
 8013f22:	d049      	beq.n	8013fb8 <rmw_validate_full_topic_name+0x98>
 8013f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f28:	460e      	mov	r6, r1
 8013f2a:	2900      	cmp	r1, #0
 8013f2c:	d056      	beq.n	8013fdc <rmw_validate_full_topic_name+0xbc>
 8013f2e:	4615      	mov	r5, r2
 8013f30:	4604      	mov	r4, r0
 8013f32:	f7ec f9cd 	bl	80002d0 <strlen>
 8013f36:	b150      	cbz	r0, 8013f4e <rmw_validate_full_topic_name+0x2e>
 8013f38:	7823      	ldrb	r3, [r4, #0]
 8013f3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8013f3c:	d00c      	beq.n	8013f58 <rmw_validate_full_topic_name+0x38>
 8013f3e:	2302      	movs	r3, #2
 8013f40:	6033      	str	r3, [r6, #0]
 8013f42:	b10d      	cbz	r5, 8013f48 <rmw_validate_full_topic_name+0x28>
 8013f44:	2300      	movs	r3, #0
 8013f46:	602b      	str	r3, [r5, #0]
 8013f48:	2000      	movs	r0, #0
 8013f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f4e:	2301      	movs	r3, #1
 8013f50:	6033      	str	r3, [r6, #0]
 8013f52:	2d00      	cmp	r5, #0
 8013f54:	d1f6      	bne.n	8013f44 <rmw_validate_full_topic_name+0x24>
 8013f56:	e7f7      	b.n	8013f48 <rmw_validate_full_topic_name+0x28>
 8013f58:	1e47      	subs	r7, r0, #1
 8013f5a:	5de3      	ldrb	r3, [r4, r7]
 8013f5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8013f5e:	d03f      	beq.n	8013fe0 <rmw_validate_full_topic_name+0xc0>
 8013f60:	1e63      	subs	r3, r4, #1
 8013f62:	4621      	mov	r1, r4
 8013f64:	eb03 0e00 	add.w	lr, r3, r0
 8013f68:	469c      	mov	ip, r3
 8013f6a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8013f6e:	2a5f      	cmp	r2, #95	@ 0x5f
 8013f70:	d006      	beq.n	8013f80 <rmw_validate_full_topic_name+0x60>
 8013f72:	d823      	bhi.n	8013fbc <rmw_validate_full_topic_name+0x9c>
 8013f74:	2a39      	cmp	r2, #57	@ 0x39
 8013f76:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8013f7a:	d82b      	bhi.n	8013fd4 <rmw_validate_full_topic_name+0xb4>
 8013f7c:	2a2e      	cmp	r2, #46	@ 0x2e
 8013f7e:	d920      	bls.n	8013fc2 <rmw_validate_full_topic_name+0xa2>
 8013f80:	4573      	cmp	r3, lr
 8013f82:	d1f1      	bne.n	8013f68 <rmw_validate_full_topic_name+0x48>
 8013f84:	4c21      	ldr	r4, [pc, #132]	@ (801400c <rmw_validate_full_topic_name+0xec>)
 8013f86:	2300      	movs	r3, #0
 8013f88:	e003      	b.n	8013f92 <rmw_validate_full_topic_name+0x72>
 8013f8a:	4298      	cmp	r0, r3
 8013f8c:	f101 0101 	add.w	r1, r1, #1
 8013f90:	d02c      	beq.n	8013fec <rmw_validate_full_topic_name+0xcc>
 8013f92:	429f      	cmp	r7, r3
 8013f94:	f103 0301 	add.w	r3, r3, #1
 8013f98:	d0f7      	beq.n	8013f8a <rmw_validate_full_topic_name+0x6a>
 8013f9a:	780a      	ldrb	r2, [r1, #0]
 8013f9c:	2a2f      	cmp	r2, #47	@ 0x2f
 8013f9e:	d1f4      	bne.n	8013f8a <rmw_validate_full_topic_name+0x6a>
 8013fa0:	784a      	ldrb	r2, [r1, #1]
 8013fa2:	2a2f      	cmp	r2, #47	@ 0x2f
 8013fa4:	d02d      	beq.n	8014002 <rmw_validate_full_topic_name+0xe2>
 8013fa6:	5ca2      	ldrb	r2, [r4, r2]
 8013fa8:	0752      	lsls	r2, r2, #29
 8013faa:	d5ee      	bpl.n	8013f8a <rmw_validate_full_topic_name+0x6a>
 8013fac:	2206      	movs	r2, #6
 8013fae:	6032      	str	r2, [r6, #0]
 8013fb0:	2d00      	cmp	r5, #0
 8013fb2:	d0c9      	beq.n	8013f48 <rmw_validate_full_topic_name+0x28>
 8013fb4:	602b      	str	r3, [r5, #0]
 8013fb6:	e7c7      	b.n	8013f48 <rmw_validate_full_topic_name+0x28>
 8013fb8:	200b      	movs	r0, #11
 8013fba:	4770      	bx	lr
 8013fbc:	3a61      	subs	r2, #97	@ 0x61
 8013fbe:	2a19      	cmp	r2, #25
 8013fc0:	d9de      	bls.n	8013f80 <rmw_validate_full_topic_name+0x60>
 8013fc2:	2304      	movs	r3, #4
 8013fc4:	6033      	str	r3, [r6, #0]
 8013fc6:	2d00      	cmp	r5, #0
 8013fc8:	d0be      	beq.n	8013f48 <rmw_validate_full_topic_name+0x28>
 8013fca:	f1c4 0401 	rsb	r4, r4, #1
 8013fce:	4464      	add	r4, ip
 8013fd0:	602c      	str	r4, [r5, #0]
 8013fd2:	e7b9      	b.n	8013f48 <rmw_validate_full_topic_name+0x28>
 8013fd4:	f1b8 0f19 	cmp.w	r8, #25
 8013fd8:	d9d2      	bls.n	8013f80 <rmw_validate_full_topic_name+0x60>
 8013fda:	e7f2      	b.n	8013fc2 <rmw_validate_full_topic_name+0xa2>
 8013fdc:	200b      	movs	r0, #11
 8013fde:	e7b4      	b.n	8013f4a <rmw_validate_full_topic_name+0x2a>
 8013fe0:	2303      	movs	r3, #3
 8013fe2:	6033      	str	r3, [r6, #0]
 8013fe4:	2d00      	cmp	r5, #0
 8013fe6:	d0af      	beq.n	8013f48 <rmw_validate_full_topic_name+0x28>
 8013fe8:	602f      	str	r7, [r5, #0]
 8013fea:	e7ad      	b.n	8013f48 <rmw_validate_full_topic_name+0x28>
 8013fec:	28f7      	cmp	r0, #247	@ 0xf7
 8013fee:	d802      	bhi.n	8013ff6 <rmw_validate_full_topic_name+0xd6>
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	6033      	str	r3, [r6, #0]
 8013ff4:	e7a8      	b.n	8013f48 <rmw_validate_full_topic_name+0x28>
 8013ff6:	2307      	movs	r3, #7
 8013ff8:	6033      	str	r3, [r6, #0]
 8013ffa:	2d00      	cmp	r5, #0
 8013ffc:	d0a4      	beq.n	8013f48 <rmw_validate_full_topic_name+0x28>
 8013ffe:	23f6      	movs	r3, #246	@ 0xf6
 8014000:	e7d8      	b.n	8013fb4 <rmw_validate_full_topic_name+0x94>
 8014002:	2205      	movs	r2, #5
 8014004:	6032      	str	r2, [r6, #0]
 8014006:	2d00      	cmp	r5, #0
 8014008:	d1d4      	bne.n	8013fb4 <rmw_validate_full_topic_name+0x94>
 801400a:	e79d      	b.n	8013f48 <rmw_validate_full_topic_name+0x28>
 801400c:	0801b0b3 	.word	0x0801b0b3

08014010 <rmw_validate_namespace_with_size>:
 8014010:	2800      	cmp	r0, #0
 8014012:	d031      	beq.n	8014078 <rmw_validate_namespace_with_size+0x68>
 8014014:	b570      	push	{r4, r5, r6, lr}
 8014016:	4614      	mov	r4, r2
 8014018:	b0c2      	sub	sp, #264	@ 0x108
 801401a:	b1ba      	cbz	r2, 801404c <rmw_validate_namespace_with_size+0x3c>
 801401c:	2901      	cmp	r1, #1
 801401e:	460e      	mov	r6, r1
 8014020:	461d      	mov	r5, r3
 8014022:	d102      	bne.n	801402a <rmw_validate_namespace_with_size+0x1a>
 8014024:	7803      	ldrb	r3, [r0, #0]
 8014026:	2b2f      	cmp	r3, #47	@ 0x2f
 8014028:	d015      	beq.n	8014056 <rmw_validate_namespace_with_size+0x46>
 801402a:	aa01      	add	r2, sp, #4
 801402c:	4669      	mov	r1, sp
 801402e:	f7ff ff77 	bl	8013f20 <rmw_validate_full_topic_name>
 8014032:	b960      	cbnz	r0, 801404e <rmw_validate_namespace_with_size+0x3e>
 8014034:	9b00      	ldr	r3, [sp, #0]
 8014036:	b163      	cbz	r3, 8014052 <rmw_validate_namespace_with_size+0x42>
 8014038:	2b07      	cmp	r3, #7
 801403a:	d00a      	beq.n	8014052 <rmw_validate_namespace_with_size+0x42>
 801403c:	1e5a      	subs	r2, r3, #1
 801403e:	2a05      	cmp	r2, #5
 8014040:	d81c      	bhi.n	801407c <rmw_validate_namespace_with_size+0x6c>
 8014042:	e8df f002 	tbb	[pc, r2]
 8014046:	0c0c      	.short	0x0c0c
 8014048:	0c0c0c0c 	.word	0x0c0c0c0c
 801404c:	200b      	movs	r0, #11
 801404e:	b042      	add	sp, #264	@ 0x108
 8014050:	bd70      	pop	{r4, r5, r6, pc}
 8014052:	2ef5      	cmp	r6, #245	@ 0xf5
 8014054:	d809      	bhi.n	801406a <rmw_validate_namespace_with_size+0x5a>
 8014056:	2300      	movs	r3, #0
 8014058:	6023      	str	r3, [r4, #0]
 801405a:	2000      	movs	r0, #0
 801405c:	e7f7      	b.n	801404e <rmw_validate_namespace_with_size+0x3e>
 801405e:	6023      	str	r3, [r4, #0]
 8014060:	2d00      	cmp	r5, #0
 8014062:	d0fa      	beq.n	801405a <rmw_validate_namespace_with_size+0x4a>
 8014064:	9b01      	ldr	r3, [sp, #4]
 8014066:	602b      	str	r3, [r5, #0]
 8014068:	e7f7      	b.n	801405a <rmw_validate_namespace_with_size+0x4a>
 801406a:	2307      	movs	r3, #7
 801406c:	6023      	str	r3, [r4, #0]
 801406e:	2d00      	cmp	r5, #0
 8014070:	d0f3      	beq.n	801405a <rmw_validate_namespace_with_size+0x4a>
 8014072:	23f4      	movs	r3, #244	@ 0xf4
 8014074:	602b      	str	r3, [r5, #0]
 8014076:	e7f0      	b.n	801405a <rmw_validate_namespace_with_size+0x4a>
 8014078:	200b      	movs	r0, #11
 801407a:	4770      	bx	lr
 801407c:	4a03      	ldr	r2, [pc, #12]	@ (801408c <rmw_validate_namespace_with_size+0x7c>)
 801407e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014082:	a802      	add	r0, sp, #8
 8014084:	f7ff fcf4 	bl	8013a70 <rcutils_snprintf>
 8014088:	2001      	movs	r0, #1
 801408a:	e7e0      	b.n	801404e <rmw_validate_namespace_with_size+0x3e>
 801408c:	0801a0b8 	.word	0x0801a0b8

08014090 <rmw_validate_namespace>:
 8014090:	b168      	cbz	r0, 80140ae <rmw_validate_namespace+0x1e>
 8014092:	b570      	push	{r4, r5, r6, lr}
 8014094:	460d      	mov	r5, r1
 8014096:	4616      	mov	r6, r2
 8014098:	4604      	mov	r4, r0
 801409a:	f7ec f919 	bl	80002d0 <strlen>
 801409e:	4633      	mov	r3, r6
 80140a0:	4601      	mov	r1, r0
 80140a2:	462a      	mov	r2, r5
 80140a4:	4620      	mov	r0, r4
 80140a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140aa:	f7ff bfb1 	b.w	8014010 <rmw_validate_namespace_with_size>
 80140ae:	200b      	movs	r0, #11
 80140b0:	4770      	bx	lr
 80140b2:	bf00      	nop

080140b4 <rmw_namespace_validation_result_string>:
 80140b4:	2807      	cmp	r0, #7
 80140b6:	bf9a      	itte	ls
 80140b8:	4b02      	ldrls	r3, [pc, #8]	@ (80140c4 <rmw_namespace_validation_result_string+0x10>)
 80140ba:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80140be:	4802      	ldrhi	r0, [pc, #8]	@ (80140c8 <rmw_namespace_validation_result_string+0x14>)
 80140c0:	4770      	bx	lr
 80140c2:	bf00      	nop
 80140c4:	0801abd0 	.word	0x0801abd0
 80140c8:	0801a108 	.word	0x0801a108

080140cc <rmw_validate_node_name>:
 80140cc:	2800      	cmp	r0, #0
 80140ce:	d037      	beq.n	8014140 <rmw_validate_node_name+0x74>
 80140d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140d2:	460e      	mov	r6, r1
 80140d4:	2900      	cmp	r1, #0
 80140d6:	d035      	beq.n	8014144 <rmw_validate_node_name+0x78>
 80140d8:	4617      	mov	r7, r2
 80140da:	4604      	mov	r4, r0
 80140dc:	f7ec f8f8 	bl	80002d0 <strlen>
 80140e0:	b1d8      	cbz	r0, 801411a <rmw_validate_node_name+0x4e>
 80140e2:	1e63      	subs	r3, r4, #1
 80140e4:	1819      	adds	r1, r3, r0
 80140e6:	461a      	mov	r2, r3
 80140e8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80140ec:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 80140f0:	f02e 0c20 	bic.w	ip, lr, #32
 80140f4:	2d09      	cmp	r5, #9
 80140f6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80140fa:	d915      	bls.n	8014128 <rmw_validate_node_name+0x5c>
 80140fc:	f1bc 0f19 	cmp.w	ip, #25
 8014100:	d912      	bls.n	8014128 <rmw_validate_node_name+0x5c>
 8014102:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8014106:	d00f      	beq.n	8014128 <rmw_validate_node_name+0x5c>
 8014108:	2302      	movs	r3, #2
 801410a:	6033      	str	r3, [r6, #0]
 801410c:	b11f      	cbz	r7, 8014116 <rmw_validate_node_name+0x4a>
 801410e:	f1c4 0401 	rsb	r4, r4, #1
 8014112:	4414      	add	r4, r2
 8014114:	603c      	str	r4, [r7, #0]
 8014116:	2000      	movs	r0, #0
 8014118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801411a:	2301      	movs	r3, #1
 801411c:	6033      	str	r3, [r6, #0]
 801411e:	2f00      	cmp	r7, #0
 8014120:	d0f9      	beq.n	8014116 <rmw_validate_node_name+0x4a>
 8014122:	2300      	movs	r3, #0
 8014124:	603b      	str	r3, [r7, #0]
 8014126:	e7f6      	b.n	8014116 <rmw_validate_node_name+0x4a>
 8014128:	4299      	cmp	r1, r3
 801412a:	d1dc      	bne.n	80140e6 <rmw_validate_node_name+0x1a>
 801412c:	7823      	ldrb	r3, [r4, #0]
 801412e:	4a0c      	ldr	r2, [pc, #48]	@ (8014160 <rmw_validate_node_name+0x94>)
 8014130:	5cd3      	ldrb	r3, [r2, r3]
 8014132:	f013 0304 	ands.w	r3, r3, #4
 8014136:	d10e      	bne.n	8014156 <rmw_validate_node_name+0x8a>
 8014138:	28ff      	cmp	r0, #255	@ 0xff
 801413a:	d805      	bhi.n	8014148 <rmw_validate_node_name+0x7c>
 801413c:	6033      	str	r3, [r6, #0]
 801413e:	e7ea      	b.n	8014116 <rmw_validate_node_name+0x4a>
 8014140:	200b      	movs	r0, #11
 8014142:	4770      	bx	lr
 8014144:	200b      	movs	r0, #11
 8014146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014148:	2304      	movs	r3, #4
 801414a:	6033      	str	r3, [r6, #0]
 801414c:	2f00      	cmp	r7, #0
 801414e:	d0e2      	beq.n	8014116 <rmw_validate_node_name+0x4a>
 8014150:	23fe      	movs	r3, #254	@ 0xfe
 8014152:	603b      	str	r3, [r7, #0]
 8014154:	e7df      	b.n	8014116 <rmw_validate_node_name+0x4a>
 8014156:	2303      	movs	r3, #3
 8014158:	6033      	str	r3, [r6, #0]
 801415a:	2f00      	cmp	r7, #0
 801415c:	d1e1      	bne.n	8014122 <rmw_validate_node_name+0x56>
 801415e:	e7da      	b.n	8014116 <rmw_validate_node_name+0x4a>
 8014160:	0801b0b3 	.word	0x0801b0b3

08014164 <rmw_node_name_validation_result_string>:
 8014164:	2804      	cmp	r0, #4
 8014166:	bf9a      	itte	ls
 8014168:	4b02      	ldrls	r3, [pc, #8]	@ (8014174 <rmw_node_name_validation_result_string+0x10>)
 801416a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801416e:	4802      	ldrhi	r0, [pc, #8]	@ (8014178 <rmw_node_name_validation_result_string+0x14>)
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	0801abf0 	.word	0x0801abf0
 8014178:	0801a2b0 	.word	0x0801a2b0

0801417c <get_memory>:
 801417c:	4603      	mov	r3, r0
 801417e:	6840      	ldr	r0, [r0, #4]
 8014180:	b158      	cbz	r0, 801419a <get_memory+0x1e>
 8014182:	6842      	ldr	r2, [r0, #4]
 8014184:	605a      	str	r2, [r3, #4]
 8014186:	b10a      	cbz	r2, 801418c <get_memory+0x10>
 8014188:	2100      	movs	r1, #0
 801418a:	6011      	str	r1, [r2, #0]
 801418c:	681a      	ldr	r2, [r3, #0]
 801418e:	6042      	str	r2, [r0, #4]
 8014190:	b102      	cbz	r2, 8014194 <get_memory+0x18>
 8014192:	6010      	str	r0, [r2, #0]
 8014194:	2200      	movs	r2, #0
 8014196:	6002      	str	r2, [r0, #0]
 8014198:	6018      	str	r0, [r3, #0]
 801419a:	4770      	bx	lr

0801419c <put_memory>:
 801419c:	680b      	ldr	r3, [r1, #0]
 801419e:	b10b      	cbz	r3, 80141a4 <put_memory+0x8>
 80141a0:	684a      	ldr	r2, [r1, #4]
 80141a2:	605a      	str	r2, [r3, #4]
 80141a4:	684a      	ldr	r2, [r1, #4]
 80141a6:	b102      	cbz	r2, 80141aa <put_memory+0xe>
 80141a8:	6013      	str	r3, [r2, #0]
 80141aa:	6803      	ldr	r3, [r0, #0]
 80141ac:	428b      	cmp	r3, r1
 80141ae:	6843      	ldr	r3, [r0, #4]
 80141b0:	bf08      	it	eq
 80141b2:	6002      	streq	r2, [r0, #0]
 80141b4:	604b      	str	r3, [r1, #4]
 80141b6:	b103      	cbz	r3, 80141ba <put_memory+0x1e>
 80141b8:	6019      	str	r1, [r3, #0]
 80141ba:	2300      	movs	r3, #0
 80141bc:	600b      	str	r3, [r1, #0]
 80141be:	6041      	str	r1, [r0, #4]
 80141c0:	4770      	bx	lr
 80141c2:	bf00      	nop

080141c4 <rmw_destroy_client>:
 80141c4:	b570      	push	{r4, r5, r6, lr}
 80141c6:	b128      	cbz	r0, 80141d4 <rmw_destroy_client+0x10>
 80141c8:	4604      	mov	r4, r0
 80141ca:	6800      	ldr	r0, [r0, #0]
 80141cc:	460d      	mov	r5, r1
 80141ce:	f7f6 fe57 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 80141d2:	b910      	cbnz	r0, 80141da <rmw_destroy_client+0x16>
 80141d4:	2401      	movs	r4, #1
 80141d6:	4620      	mov	r0, r4
 80141d8:	bd70      	pop	{r4, r5, r6, pc}
 80141da:	6863      	ldr	r3, [r4, #4]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d0f9      	beq.n	80141d4 <rmw_destroy_client+0x10>
 80141e0:	2d00      	cmp	r5, #0
 80141e2:	d0f7      	beq.n	80141d4 <rmw_destroy_client+0x10>
 80141e4:	6828      	ldr	r0, [r5, #0]
 80141e6:	f7f6 fe4b 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 80141ea:	2800      	cmp	r0, #0
 80141ec:	d0f2      	beq.n	80141d4 <rmw_destroy_client+0x10>
 80141ee:	686e      	ldr	r6, [r5, #4]
 80141f0:	2e00      	cmp	r6, #0
 80141f2:	d0ef      	beq.n	80141d4 <rmw_destroy_client+0x10>
 80141f4:	6864      	ldr	r4, [r4, #4]
 80141f6:	6932      	ldr	r2, [r6, #16]
 80141f8:	6920      	ldr	r0, [r4, #16]
 80141fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80141fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014202:	6819      	ldr	r1, [r3, #0]
 8014204:	f002 faac 	bl	8016760 <uxr_buffer_cancel_data>
 8014208:	4602      	mov	r2, r0
 801420a:	6920      	ldr	r0, [r4, #16]
 801420c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014210:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014214:	f7f6 fdae 	bl	800ad74 <run_xrce_session>
 8014218:	6920      	ldr	r0, [r4, #16]
 801421a:	6932      	ldr	r2, [r6, #16]
 801421c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014220:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014224:	6819      	ldr	r1, [r3, #0]
 8014226:	f7f8 ff05 	bl	800d034 <uxr_buffer_delete_entity>
 801422a:	4602      	mov	r2, r0
 801422c:	6920      	ldr	r0, [r4, #16]
 801422e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014232:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014236:	f7f6 fd9d 	bl	800ad74 <run_xrce_session>
 801423a:	f080 0401 	eor.w	r4, r0, #1
 801423e:	b2e4      	uxtb	r4, r4
 8014240:	4628      	mov	r0, r5
 8014242:	0064      	lsls	r4, r4, #1
 8014244:	f7f6 fc78 	bl	800ab38 <rmw_uxrce_fini_client_memory>
 8014248:	e7c5      	b.n	80141d6 <rmw_destroy_client+0x12>
 801424a:	bf00      	nop

0801424c <rmw_get_gid_for_client>:
 801424c:	b1a8      	cbz	r0, 801427a <rmw_get_gid_for_client+0x2e>
 801424e:	b538      	push	{r3, r4, r5, lr}
 8014250:	460c      	mov	r4, r1
 8014252:	b1a1      	cbz	r1, 801427e <rmw_get_gid_for_client+0x32>
 8014254:	4605      	mov	r5, r0
 8014256:	6800      	ldr	r0, [r0, #0]
 8014258:	b120      	cbz	r0, 8014264 <rmw_get_gid_for_client+0x18>
 801425a:	4b0a      	ldr	r3, [pc, #40]	@ (8014284 <rmw_get_gid_for_client+0x38>)
 801425c:	6819      	ldr	r1, [r3, #0]
 801425e:	f7eb ffd7 	bl	8000210 <strcmp>
 8014262:	b940      	cbnz	r0, 8014276 <rmw_get_gid_for_client+0x2a>
 8014264:	686b      	ldr	r3, [r5, #4]
 8014266:	2000      	movs	r0, #0
 8014268:	6060      	str	r0, [r4, #4]
 801426a:	60a0      	str	r0, [r4, #8]
 801426c:	60e0      	str	r0, [r4, #12]
 801426e:	6120      	str	r0, [r4, #16]
 8014270:	691b      	ldr	r3, [r3, #16]
 8014272:	6063      	str	r3, [r4, #4]
 8014274:	bd38      	pop	{r3, r4, r5, pc}
 8014276:	200c      	movs	r0, #12
 8014278:	bd38      	pop	{r3, r4, r5, pc}
 801427a:	200b      	movs	r0, #11
 801427c:	4770      	bx	lr
 801427e:	200b      	movs	r0, #11
 8014280:	bd38      	pop	{r3, r4, r5, pc}
 8014282:	bf00      	nop
 8014284:	0801ac04 	.word	0x0801ac04

08014288 <rmw_get_implementation_identifier>:
 8014288:	4b01      	ldr	r3, [pc, #4]	@ (8014290 <rmw_get_implementation_identifier+0x8>)
 801428a:	6818      	ldr	r0, [r3, #0]
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	0801ac04 	.word	0x0801ac04

08014294 <rmw_init_options_init>:
 8014294:	b084      	sub	sp, #16
 8014296:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014298:	b083      	sub	sp, #12
 801429a:	ad09      	add	r5, sp, #36	@ 0x24
 801429c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80142a0:	b130      	cbz	r0, 80142b0 <rmw_init_options_init+0x1c>
 80142a2:	4604      	mov	r4, r0
 80142a4:	4628      	mov	r0, r5
 80142a6:	f7f5 ffaf 	bl	800a208 <rcutils_allocator_is_valid>
 80142aa:	b108      	cbz	r0, 80142b0 <rmw_init_options_init+0x1c>
 80142ac:	68a6      	ldr	r6, [r4, #8]
 80142ae:	b12e      	cbz	r6, 80142bc <rmw_init_options_init+0x28>
 80142b0:	200b      	movs	r0, #11
 80142b2:	b003      	add	sp, #12
 80142b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80142b8:	b004      	add	sp, #16
 80142ba:	4770      	bx	lr
 80142bc:	2200      	movs	r2, #0
 80142be:	2300      	movs	r3, #0
 80142c0:	e9c4 2300 	strd	r2, r3, [r4]
 80142c4:	4b20      	ldr	r3, [pc, #128]	@ (8014348 <rmw_init_options_init+0xb4>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	60a3      	str	r3, [r4, #8]
 80142ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80142cc:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 80142d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142d4:	466f      	mov	r7, sp
 80142d6:	682b      	ldr	r3, [r5, #0]
 80142d8:	f8cc 3000 	str.w	r3, [ip]
 80142dc:	4638      	mov	r0, r7
 80142de:	63a6      	str	r6, [r4, #56]	@ 0x38
 80142e0:	60e6      	str	r6, [r4, #12]
 80142e2:	f003 f8f7 	bl	80174d4 <rmw_get_default_security_options>
 80142e6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80142ea:	f104 0310 	add.w	r3, r4, #16
 80142ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80142f2:	2203      	movs	r2, #3
 80142f4:	4815      	ldr	r0, [pc, #84]	@ (801434c <rmw_init_options_init+0xb8>)
 80142f6:	4916      	ldr	r1, [pc, #88]	@ (8014350 <rmw_init_options_init+0xbc>)
 80142f8:	f7f6 fb5e 	bl	800a9b8 <rmw_uxrce_init_init_options_impl_memory>
 80142fc:	4813      	ldr	r0, [pc, #76]	@ (801434c <rmw_init_options_init+0xb8>)
 80142fe:	f7ff ff3d 	bl	801417c <get_memory>
 8014302:	b1f0      	cbz	r0, 8014342 <rmw_init_options_init+0xae>
 8014304:	4a13      	ldr	r2, [pc, #76]	@ (8014354 <rmw_init_options_init+0xc0>)
 8014306:	6883      	ldr	r3, [r0, #8]
 8014308:	6851      	ldr	r1, [r2, #4]
 801430a:	7810      	ldrb	r0, [r2, #0]
 801430c:	6523      	str	r3, [r4, #80]	@ 0x50
 801430e:	7418      	strb	r0, [r3, #16]
 8014310:	6159      	str	r1, [r3, #20]
 8014312:	68d1      	ldr	r1, [r2, #12]
 8014314:	61d9      	str	r1, [r3, #28]
 8014316:	6911      	ldr	r1, [r2, #16]
 8014318:	6219      	str	r1, [r3, #32]
 801431a:	6951      	ldr	r1, [r2, #20]
 801431c:	6892      	ldr	r2, [r2, #8]
 801431e:	619a      	str	r2, [r3, #24]
 8014320:	6259      	str	r1, [r3, #36]	@ 0x24
 8014322:	f7fb f877 	bl	800f414 <uxr_nanos>
 8014326:	f003 fc4b 	bl	8017bc0 <srand>
 801432a:	f003 fc77 	bl	8017c1c <rand>
 801432e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8014330:	6298      	str	r0, [r3, #40]	@ 0x28
 8014332:	2800      	cmp	r0, #0
 8014334:	d0f9      	beq.n	801432a <rmw_init_options_init+0x96>
 8014336:	2000      	movs	r0, #0
 8014338:	b003      	add	sp, #12
 801433a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801433e:	b004      	add	sp, #16
 8014340:	4770      	bx	lr
 8014342:	2001      	movs	r0, #1
 8014344:	e7b5      	b.n	80142b2 <rmw_init_options_init+0x1e>
 8014346:	bf00      	nop
 8014348:	0801ac04 	.word	0x0801ac04
 801434c:	2000b8c0 	.word	0x2000b8c0
 8014350:	2000b83c 	.word	0x2000b83c
 8014354:	2000b710 	.word	0x2000b710

08014358 <rmw_init_options_copy>:
 8014358:	2800      	cmp	r0, #0
 801435a:	d03e      	beq.n	80143da <rmw_init_options_copy+0x82>
 801435c:	b570      	push	{r4, r5, r6, lr}
 801435e:	460d      	mov	r5, r1
 8014360:	b149      	cbz	r1, 8014376 <rmw_init_options_copy+0x1e>
 8014362:	4604      	mov	r4, r0
 8014364:	6880      	ldr	r0, [r0, #8]
 8014366:	b120      	cbz	r0, 8014372 <rmw_init_options_copy+0x1a>
 8014368:	4b21      	ldr	r3, [pc, #132]	@ (80143f0 <rmw_init_options_copy+0x98>)
 801436a:	6819      	ldr	r1, [r3, #0]
 801436c:	f7eb ff50 	bl	8000210 <strcmp>
 8014370:	bb78      	cbnz	r0, 80143d2 <rmw_init_options_copy+0x7a>
 8014372:	68ab      	ldr	r3, [r5, #8]
 8014374:	b11b      	cbz	r3, 801437e <rmw_init_options_copy+0x26>
 8014376:	f04f 0c0b 	mov.w	ip, #11
 801437a:	4660      	mov	r0, ip
 801437c:	bd70      	pop	{r4, r5, r6, pc}
 801437e:	2258      	movs	r2, #88	@ 0x58
 8014380:	4621      	mov	r1, r4
 8014382:	4628      	mov	r0, r5
 8014384:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8014388:	f004 f89f 	bl	80184ca <memcpy>
 801438c:	4630      	mov	r0, r6
 801438e:	f7f5 ff3b 	bl	800a208 <rcutils_allocator_is_valid>
 8014392:	2800      	cmp	r0, #0
 8014394:	d0ef      	beq.n	8014376 <rmw_init_options_copy+0x1e>
 8014396:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014398:	b138      	cbz	r0, 80143aa <rmw_init_options_copy+0x52>
 801439a:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 801439e:	4631      	mov	r1, r6
 80143a0:	f003 f864 	bl	801746c <rmw_enclave_options_copy>
 80143a4:	4684      	mov	ip, r0
 80143a6:	2800      	cmp	r0, #0
 80143a8:	d1e7      	bne.n	801437a <rmw_init_options_copy+0x22>
 80143aa:	4812      	ldr	r0, [pc, #72]	@ (80143f4 <rmw_init_options_copy+0x9c>)
 80143ac:	f7ff fee6 	bl	801417c <get_memory>
 80143b0:	b1b8      	cbz	r0, 80143e2 <rmw_init_options_copy+0x8a>
 80143b2:	6883      	ldr	r3, [r0, #8]
 80143b4:	652b      	str	r3, [r5, #80]	@ 0x50
 80143b6:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 80143b8:	3510      	adds	r5, #16
 80143ba:	f103 0410 	add.w	r4, r3, #16
 80143be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80143c6:	f04f 0c00 	mov.w	ip, #0
 80143ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80143ce:	4660      	mov	r0, ip
 80143d0:	bd70      	pop	{r4, r5, r6, pc}
 80143d2:	f04f 0c0c 	mov.w	ip, #12
 80143d6:	4660      	mov	r0, ip
 80143d8:	bd70      	pop	{r4, r5, r6, pc}
 80143da:	f04f 0c0b 	mov.w	ip, #11
 80143de:	4660      	mov	r0, ip
 80143e0:	4770      	bx	lr
 80143e2:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80143e4:	4631      	mov	r1, r6
 80143e6:	f003 f863 	bl	80174b0 <rmw_enclave_options_fini>
 80143ea:	f04f 0c01 	mov.w	ip, #1
 80143ee:	e7c4      	b.n	801437a <rmw_init_options_copy+0x22>
 80143f0:	0801ac04 	.word	0x0801ac04
 80143f4:	2000b8c0 	.word	0x2000b8c0

080143f8 <rmw_init_options_fini>:
 80143f8:	2800      	cmp	r0, #0
 80143fa:	d035      	beq.n	8014468 <rmw_init_options_fini+0x70>
 80143fc:	b530      	push	{r4, r5, lr}
 80143fe:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 8014402:	b097      	sub	sp, #92	@ 0x5c
 8014404:	4604      	mov	r4, r0
 8014406:	4628      	mov	r0, r5
 8014408:	f7f5 fefe 	bl	800a208 <rcutils_allocator_is_valid>
 801440c:	b320      	cbz	r0, 8014458 <rmw_init_options_fini+0x60>
 801440e:	68a0      	ldr	r0, [r4, #8]
 8014410:	b120      	cbz	r0, 801441c <rmw_init_options_fini+0x24>
 8014412:	4b16      	ldr	r3, [pc, #88]	@ (801446c <rmw_init_options_fini+0x74>)
 8014414:	6819      	ldr	r1, [r3, #0]
 8014416:	f7eb fefb 	bl	8000210 <strcmp>
 801441a:	bb18      	cbnz	r0, 8014464 <rmw_init_options_fini+0x6c>
 801441c:	4b14      	ldr	r3, [pc, #80]	@ (8014470 <rmw_init_options_fini+0x78>)
 801441e:	6819      	ldr	r1, [r3, #0]
 8014420:	b1e9      	cbz	r1, 801445e <rmw_init_options_fini+0x66>
 8014422:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8014424:	e001      	b.n	801442a <rmw_init_options_fini+0x32>
 8014426:	6849      	ldr	r1, [r1, #4]
 8014428:	b1c9      	cbz	r1, 801445e <rmw_init_options_fini+0x66>
 801442a:	688b      	ldr	r3, [r1, #8]
 801442c:	429a      	cmp	r2, r3
 801442e:	d1fa      	bne.n	8014426 <rmw_init_options_fini+0x2e>
 8014430:	480f      	ldr	r0, [pc, #60]	@ (8014470 <rmw_init_options_fini+0x78>)
 8014432:	f7ff feb3 	bl	801419c <put_memory>
 8014436:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8014438:	b118      	cbz	r0, 8014442 <rmw_init_options_fini+0x4a>
 801443a:	4629      	mov	r1, r5
 801443c:	f003 f838 	bl	80174b0 <rmw_enclave_options_fini>
 8014440:	b940      	cbnz	r0, 8014454 <rmw_init_options_fini+0x5c>
 8014442:	4668      	mov	r0, sp
 8014444:	f7ff fcc6 	bl	8013dd4 <rmw_get_zero_initialized_init_options>
 8014448:	2258      	movs	r2, #88	@ 0x58
 801444a:	4669      	mov	r1, sp
 801444c:	4620      	mov	r0, r4
 801444e:	f004 f83c 	bl	80184ca <memcpy>
 8014452:	2000      	movs	r0, #0
 8014454:	b017      	add	sp, #92	@ 0x5c
 8014456:	bd30      	pop	{r4, r5, pc}
 8014458:	200b      	movs	r0, #11
 801445a:	b017      	add	sp, #92	@ 0x5c
 801445c:	bd30      	pop	{r4, r5, pc}
 801445e:	2001      	movs	r0, #1
 8014460:	b017      	add	sp, #92	@ 0x5c
 8014462:	bd30      	pop	{r4, r5, pc}
 8014464:	200c      	movs	r0, #12
 8014466:	e7f5      	b.n	8014454 <rmw_init_options_fini+0x5c>
 8014468:	200b      	movs	r0, #11
 801446a:	4770      	bx	lr
 801446c:	0801ac04 	.word	0x0801ac04
 8014470:	2000b8c0 	.word	0x2000b8c0

08014474 <rmw_init>:
 8014474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014478:	b083      	sub	sp, #12
 801447a:	2800      	cmp	r0, #0
 801447c:	f000 80d4 	beq.w	8014628 <rmw_init+0x1b4>
 8014480:	460e      	mov	r6, r1
 8014482:	2900      	cmp	r1, #0
 8014484:	f000 80d0 	beq.w	8014628 <rmw_init+0x1b4>
 8014488:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801448a:	4605      	mov	r5, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	f000 80cb 	beq.w	8014628 <rmw_init+0x1b4>
 8014492:	4b77      	ldr	r3, [pc, #476]	@ (8014670 <rmw_init+0x1fc>)
 8014494:	6880      	ldr	r0, [r0, #8]
 8014496:	681f      	ldr	r7, [r3, #0]
 8014498:	b128      	cbz	r0, 80144a6 <rmw_init+0x32>
 801449a:	4639      	mov	r1, r7
 801449c:	f7eb feb8 	bl	8000210 <strcmp>
 80144a0:	2800      	cmp	r0, #0
 80144a2:	f040 80d3 	bne.w	801464c <rmw_init+0x1d8>
 80144a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80144aa:	4c72      	ldr	r4, [pc, #456]	@ (8014674 <rmw_init+0x200>)
 80144ac:	4972      	ldr	r1, [pc, #456]	@ (8014678 <rmw_init+0x204>)
 80144ae:	4873      	ldr	r0, [pc, #460]	@ (801467c <rmw_init+0x208>)
 80144b0:	60b7      	str	r7, [r6, #8]
 80144b2:	e9c6 2300 	strd	r2, r3, [r6]
 80144b6:	68eb      	ldr	r3, [r5, #12]
 80144b8:	66b3      	str	r3, [r6, #104]	@ 0x68
 80144ba:	2201      	movs	r2, #1
 80144bc:	f7f6 fa1c 	bl	800a8f8 <rmw_uxrce_init_session_memory>
 80144c0:	4620      	mov	r0, r4
 80144c2:	496f      	ldr	r1, [pc, #444]	@ (8014680 <rmw_init+0x20c>)
 80144c4:	2204      	movs	r2, #4
 80144c6:	f7f6 fa57 	bl	800a978 <rmw_uxrce_init_static_input_buffer_memory>
 80144ca:	f04f 0800 	mov.w	r8, #0
 80144ce:	486b      	ldr	r0, [pc, #428]	@ (801467c <rmw_init+0x208>)
 80144d0:	f884 800d 	strb.w	r8, [r4, #13]
 80144d4:	f7ff fe52 	bl	801417c <get_memory>
 80144d8:	2800      	cmp	r0, #0
 80144da:	f000 80b2 	beq.w	8014642 <rmw_init+0x1ce>
 80144de:	6884      	ldr	r4, [r0, #8]
 80144e0:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80144e2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80144e4:	f890 c010 	ldrb.w	ip, [r0, #16]
 80144e8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80144ec:	9101      	str	r1, [sp, #4]
 80144ee:	6a00      	ldr	r0, [r0, #32]
 80144f0:	9000      	str	r0, [sp, #0]
 80144f2:	f104 0910 	add.w	r9, r4, #16
 80144f6:	4661      	mov	r1, ip
 80144f8:	4648      	mov	r0, r9
 80144fa:	f7f8 ff59 	bl	800d3b0 <uxr_set_custom_transport_callbacks>
 80144fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014502:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 8014506:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801450a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801450e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8014512:	495c      	ldr	r1, [pc, #368]	@ (8014684 <rmw_init+0x210>)
 8014514:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8014518:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801451c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8014520:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8014524:	4858      	ldr	r0, [pc, #352]	@ (8014688 <rmw_init+0x214>)
 8014526:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801452a:	2201      	movs	r2, #1
 801452c:	66f4      	str	r4, [r6, #108]	@ 0x6c
 801452e:	f7f6 f9c3 	bl	800a8b8 <rmw_uxrce_init_node_memory>
 8014532:	4956      	ldr	r1, [pc, #344]	@ (801468c <rmw_init+0x218>)
 8014534:	4856      	ldr	r0, [pc, #344]	@ (8014690 <rmw_init+0x21c>)
 8014536:	2205      	movs	r2, #5
 8014538:	f7f6 f99e 	bl	800a878 <rmw_uxrce_init_subscription_memory>
 801453c:	4955      	ldr	r1, [pc, #340]	@ (8014694 <rmw_init+0x220>)
 801453e:	4856      	ldr	r0, [pc, #344]	@ (8014698 <rmw_init+0x224>)
 8014540:	220a      	movs	r2, #10
 8014542:	f7f6 f979 	bl	800a838 <rmw_uxrce_init_publisher_memory>
 8014546:	4955      	ldr	r1, [pc, #340]	@ (801469c <rmw_init+0x228>)
 8014548:	4855      	ldr	r0, [pc, #340]	@ (80146a0 <rmw_init+0x22c>)
 801454a:	2201      	movs	r2, #1
 801454c:	f7f6 f934 	bl	800a7b8 <rmw_uxrce_init_service_memory>
 8014550:	4954      	ldr	r1, [pc, #336]	@ (80146a4 <rmw_init+0x230>)
 8014552:	4855      	ldr	r0, [pc, #340]	@ (80146a8 <rmw_init+0x234>)
 8014554:	2201      	movs	r2, #1
 8014556:	f7f6 f94f 	bl	800a7f8 <rmw_uxrce_init_client_memory>
 801455a:	4954      	ldr	r1, [pc, #336]	@ (80146ac <rmw_init+0x238>)
 801455c:	4854      	ldr	r0, [pc, #336]	@ (80146b0 <rmw_init+0x23c>)
 801455e:	220f      	movs	r2, #15
 8014560:	f7f6 f9ea 	bl	800a938 <rmw_uxrce_init_topic_memory>
 8014564:	4953      	ldr	r1, [pc, #332]	@ (80146b4 <rmw_init+0x240>)
 8014566:	4854      	ldr	r0, [pc, #336]	@ (80146b8 <rmw_init+0x244>)
 8014568:	2203      	movs	r2, #3
 801456a:	f7f6 fa25 	bl	800a9b8 <rmw_uxrce_init_init_options_impl_memory>
 801456e:	4953      	ldr	r1, [pc, #332]	@ (80146bc <rmw_init+0x248>)
 8014570:	4853      	ldr	r0, [pc, #332]	@ (80146c0 <rmw_init+0x24c>)
 8014572:	2204      	movs	r2, #4
 8014574:	f7f6 fa40 	bl	800a9f8 <rmw_uxrce_init_wait_set_memory>
 8014578:	4952      	ldr	r1, [pc, #328]	@ (80146c4 <rmw_init+0x250>)
 801457a:	4853      	ldr	r0, [pc, #332]	@ (80146c8 <rmw_init+0x254>)
 801457c:	2204      	movs	r2, #4
 801457e:	f7f6 fa5b 	bl	800aa38 <rmw_uxrce_init_guard_condition_memory>
 8014582:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8014584:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8014586:	4642      	mov	r2, r8
 8014588:	f7f6 f8de 	bl	800a748 <rmw_uxrce_transport_init>
 801458c:	4607      	mov	r7, r0
 801458e:	2800      	cmp	r0, #0
 8014590:	d161      	bne.n	8014656 <rmw_init+0x1e2>
 8014592:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8014594:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8014598:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801459a:	4628      	mov	r0, r5
 801459c:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 80145a0:	f7f9 f912 	bl	800d7c8 <uxr_init_session>
 80145a4:	4628      	mov	r0, r5
 80145a6:	4949      	ldr	r1, [pc, #292]	@ (80146cc <rmw_init+0x258>)
 80145a8:	4622      	mov	r2, r4
 80145aa:	f7f9 f931 	bl	800d810 <uxr_set_topic_callback>
 80145ae:	4628      	mov	r0, r5
 80145b0:	4947      	ldr	r1, [pc, #284]	@ (80146d0 <rmw_init+0x25c>)
 80145b2:	463a      	mov	r2, r7
 80145b4:	f7f9 f928 	bl	800d808 <uxr_set_status_callback>
 80145b8:	4628      	mov	r0, r5
 80145ba:	4946      	ldr	r1, [pc, #280]	@ (80146d4 <rmw_init+0x260>)
 80145bc:	463a      	mov	r2, r7
 80145be:	f7f9 f92b 	bl	800d818 <uxr_set_request_callback>
 80145c2:	4628      	mov	r0, r5
 80145c4:	4944      	ldr	r1, [pc, #272]	@ (80146d8 <rmw_init+0x264>)
 80145c6:	463a      	mov	r2, r7
 80145c8:	f7f9 f92a 	bl	800d820 <uxr_set_reply_callback>
 80145cc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80145d0:	2304      	movs	r3, #4
 80145d2:	0092      	lsls	r2, r2, #2
 80145d4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 80145d8:	4628      	mov	r0, r5
 80145da:	f7f9 f94f 	bl	800d87c <uxr_create_input_reliable_stream>
 80145de:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80145e2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 80145e6:	2304      	movs	r3, #4
 80145e8:	0092      	lsls	r2, r2, #2
 80145ea:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 80145ee:	4628      	mov	r0, r5
 80145f0:	f7f9 f92c 	bl	800d84c <uxr_create_output_reliable_stream>
 80145f4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 80145f8:	4628      	mov	r0, r5
 80145fa:	f7f9 f939 	bl	800d870 <uxr_create_input_best_effort_stream>
 80145fe:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8014602:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8014606:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801460a:	3114      	adds	r1, #20
 801460c:	4628      	mov	r0, r5
 801460e:	f7f9 f90b 	bl	800d828 <uxr_create_output_best_effort_stream>
 8014612:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8014616:	4628      	mov	r0, r5
 8014618:	f7f9 fecc 	bl	800e3b4 <uxr_create_session>
 801461c:	4605      	mov	r5, r0
 801461e:	b140      	cbz	r0, 8014632 <rmw_init+0x1be>
 8014620:	4638      	mov	r0, r7
 8014622:	b003      	add	sp, #12
 8014624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014628:	270b      	movs	r7, #11
 801462a:	4638      	mov	r0, r7
 801462c:	b003      	add	sp, #12
 801462e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014632:	4648      	mov	r0, r9
 8014634:	f7f8 fefe 	bl	800d434 <uxr_close_custom_transport>
 8014638:	4810      	ldr	r0, [pc, #64]	@ (801467c <rmw_init+0x208>)
 801463a:	4621      	mov	r1, r4
 801463c:	f7ff fdae 	bl	801419c <put_memory>
 8014640:	66f5      	str	r5, [r6, #108]	@ 0x6c
 8014642:	2701      	movs	r7, #1
 8014644:	4638      	mov	r0, r7
 8014646:	b003      	add	sp, #12
 8014648:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801464c:	270c      	movs	r7, #12
 801464e:	4638      	mov	r0, r7
 8014650:	b003      	add	sp, #12
 8014652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014656:	4648      	mov	r0, r9
 8014658:	f7f8 feec 	bl	800d434 <uxr_close_custom_transport>
 801465c:	4807      	ldr	r0, [pc, #28]	@ (801467c <rmw_init+0x208>)
 801465e:	4621      	mov	r1, r4
 8014660:	f7ff fd9c 	bl	801419c <put_memory>
 8014664:	4638      	mov	r0, r7
 8014666:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 801466a:	b003      	add	sp, #12
 801466c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014670:	0801ac04 	.word	0x0801ac04
 8014674:	2000d9d0 	.word	0x2000d9d0
 8014678:	2000eac8 	.word	0x2000eac8
 801467c:	20010070 	.word	0x20010070
 8014680:	2000b8d0 	.word	0x2000b8d0
 8014684:	2000ea10 	.word	0x2000ea10
 8014688:	2000eab4 	.word	0x2000eab4
 801468c:	2000dd48 	.word	0x2000dd48
 8014690:	2000e180 	.word	0x2000e180
 8014694:	2000e190 	.word	0x2000e190
 8014698:	2000ea00 	.word	0x2000ea00
 801469c:	2000dc70 	.word	0x2000dc70
 80146a0:	2000dd38 	.word	0x2000dd38
 80146a4:	2000db98 	.word	0x2000db98
 80146a8:	2000dc60 	.word	0x2000dc60
 80146ac:	2000d9e0 	.word	0x2000d9e0
 80146b0:	2000db84 	.word	0x2000db84
 80146b4:	2000b83c 	.word	0x2000b83c
 80146b8:	2000b8c0 	.word	0x2000b8c0
 80146bc:	2000b7bc 	.word	0x2000b7bc
 80146c0:	2000b82c 	.word	0x2000b82c
 80146c4:	2000b72c 	.word	0x2000b72c
 80146c8:	2000b7ac 	.word	0x2000b7ac
 80146cc:	080174e5 	.word	0x080174e5
 80146d0:	080174dd 	.word	0x080174dd
 80146d4:	0801757d 	.word	0x0801757d
 80146d8:	08017619 	.word	0x08017619

080146dc <rmw_context_fini>:
 80146dc:	4b17      	ldr	r3, [pc, #92]	@ (801473c <rmw_context_fini+0x60>)
 80146de:	b570      	push	{r4, r5, r6, lr}
 80146e0:	681c      	ldr	r4, [r3, #0]
 80146e2:	4605      	mov	r5, r0
 80146e4:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 80146e6:	b33c      	cbz	r4, 8014738 <rmw_context_fini+0x5c>
 80146e8:	2600      	movs	r6, #0
 80146ea:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 80146ee:	691a      	ldr	r2, [r3, #16]
 80146f0:	4282      	cmp	r2, r0
 80146f2:	d018      	beq.n	8014726 <rmw_context_fini+0x4a>
 80146f4:	2c00      	cmp	r4, #0
 80146f6:	d1f8      	bne.n	80146ea <rmw_context_fini+0xe>
 80146f8:	b188      	cbz	r0, 801471e <rmw_context_fini+0x42>
 80146fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80146fe:	789b      	ldrb	r3, [r3, #2]
 8014700:	2b01      	cmp	r3, #1
 8014702:	bf14      	ite	ne
 8014704:	210a      	movne	r1, #10
 8014706:	2100      	moveq	r1, #0
 8014708:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801470c:	f7f9 fe2a 	bl	800e364 <uxr_delete_session_retries>
 8014710:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8014712:	f7f6 f9b1 	bl	800aa78 <rmw_uxrce_fini_session_memory>
 8014716:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8014718:	3010      	adds	r0, #16
 801471a:	f7f8 fe8b 	bl	800d434 <uxr_close_custom_transport>
 801471e:	2300      	movs	r3, #0
 8014720:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8014722:	4630      	mov	r0, r6
 8014724:	bd70      	pop	{r4, r5, r6, pc}
 8014726:	f103 0018 	add.w	r0, r3, #24
 801472a:	f000 f911 	bl	8014950 <rmw_destroy_node>
 801472e:	4606      	mov	r6, r0
 8014730:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8014732:	2c00      	cmp	r4, #0
 8014734:	d1d9      	bne.n	80146ea <rmw_context_fini+0xe>
 8014736:	e7df      	b.n	80146f8 <rmw_context_fini+0x1c>
 8014738:	4626      	mov	r6, r4
 801473a:	e7dd      	b.n	80146f8 <rmw_context_fini+0x1c>
 801473c:	2000eab4 	.word	0x2000eab4

08014740 <create_topic>:
 8014740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014744:	4604      	mov	r4, r0
 8014746:	b084      	sub	sp, #16
 8014748:	4824      	ldr	r0, [pc, #144]	@ (80147dc <create_topic+0x9c>)
 801474a:	460f      	mov	r7, r1
 801474c:	4616      	mov	r6, r2
 801474e:	f7ff fd15 	bl	801417c <get_memory>
 8014752:	2800      	cmp	r0, #0
 8014754:	d03c      	beq.n	80147d0 <create_topic+0x90>
 8014756:	6923      	ldr	r3, [r4, #16]
 8014758:	6885      	ldr	r5, [r0, #8]
 801475a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80147e4 <create_topic+0xa4>
 801475e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014762:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8014766:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801476a:	1c42      	adds	r2, r0, #1
 801476c:	2102      	movs	r1, #2
 801476e:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8014772:	f7f8 fe63 	bl	800d43c <uxr_object_id>
 8014776:	223c      	movs	r2, #60	@ 0x3c
 8014778:	6128      	str	r0, [r5, #16]
 801477a:	4641      	mov	r1, r8
 801477c:	4638      	mov	r0, r7
 801477e:	f7f6 fb65 	bl	800ae4c <generate_topic_name>
 8014782:	b310      	cbz	r0, 80147ca <create_topic+0x8a>
 8014784:	4f16      	ldr	r7, [pc, #88]	@ (80147e0 <create_topic+0xa0>)
 8014786:	4630      	mov	r0, r6
 8014788:	2264      	movs	r2, #100	@ 0x64
 801478a:	4639      	mov	r1, r7
 801478c:	f7f6 fb2e 	bl	800adec <generate_type_name>
 8014790:	b1d8      	cbz	r0, 80147ca <create_topic+0x8a>
 8014792:	6920      	ldr	r0, [r4, #16]
 8014794:	2306      	movs	r3, #6
 8014796:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801479a:	f8cd 8000 	str.w	r8, [sp]
 801479e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80147a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80147a6:	6811      	ldr	r1, [r2, #0]
 80147a8:	6963      	ldr	r3, [r4, #20]
 80147aa:	692a      	ldr	r2, [r5, #16]
 80147ac:	f7f8 fcbe 	bl	800d12c <uxr_buffer_create_topic_bin>
 80147b0:	4602      	mov	r2, r0
 80147b2:	6920      	ldr	r0, [r4, #16]
 80147b4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80147b8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80147bc:	f7f6 fada 	bl	800ad74 <run_xrce_session>
 80147c0:	b118      	cbz	r0, 80147ca <create_topic+0x8a>
 80147c2:	4628      	mov	r0, r5
 80147c4:	b004      	add	sp, #16
 80147c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147ca:	4628      	mov	r0, r5
 80147cc:	f7f6 f9ca 	bl	800ab64 <rmw_uxrce_fini_topic_memory>
 80147d0:	2500      	movs	r5, #0
 80147d2:	4628      	mov	r0, r5
 80147d4:	b004      	add	sp, #16
 80147d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147da:	bf00      	nop
 80147dc:	2000db84 	.word	0x2000db84
 80147e0:	2001020c 	.word	0x2001020c
 80147e4:	20010270 	.word	0x20010270

080147e8 <destroy_topic>:
 80147e8:	b538      	push	{r3, r4, r5, lr}
 80147ea:	6984      	ldr	r4, [r0, #24]
 80147ec:	b1d4      	cbz	r4, 8014824 <destroy_topic+0x3c>
 80147ee:	4605      	mov	r5, r0
 80147f0:	6920      	ldr	r0, [r4, #16]
 80147f2:	692a      	ldr	r2, [r5, #16]
 80147f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80147f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80147fc:	6819      	ldr	r1, [r3, #0]
 80147fe:	f7f8 fc19 	bl	800d034 <uxr_buffer_delete_entity>
 8014802:	4602      	mov	r2, r0
 8014804:	6920      	ldr	r0, [r4, #16]
 8014806:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801480a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801480e:	f7f6 fab1 	bl	800ad74 <run_xrce_session>
 8014812:	f080 0401 	eor.w	r4, r0, #1
 8014816:	b2e4      	uxtb	r4, r4
 8014818:	4628      	mov	r0, r5
 801481a:	0064      	lsls	r4, r4, #1
 801481c:	f7f6 f9a2 	bl	800ab64 <rmw_uxrce_fini_topic_memory>
 8014820:	4620      	mov	r0, r4
 8014822:	bd38      	pop	{r3, r4, r5, pc}
 8014824:	2401      	movs	r4, #1
 8014826:	4620      	mov	r0, r4
 8014828:	bd38      	pop	{r3, r4, r5, pc}
 801482a:	bf00      	nop

0801482c <create_node>:
 801482c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014830:	b083      	sub	sp, #12
 8014832:	2b00      	cmp	r3, #0
 8014834:	d063      	beq.n	80148fe <create_node+0xd2>
 8014836:	4606      	mov	r6, r0
 8014838:	4836      	ldr	r0, [pc, #216]	@ (8014914 <create_node+0xe8>)
 801483a:	460f      	mov	r7, r1
 801483c:	4690      	mov	r8, r2
 801483e:	461d      	mov	r5, r3
 8014840:	f7ff fc9c 	bl	801417c <get_memory>
 8014844:	2800      	cmp	r0, #0
 8014846:	d05a      	beq.n	80148fe <create_node+0xd2>
 8014848:	6884      	ldr	r4, [r0, #8]
 801484a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 801484c:	6123      	str	r3, [r4, #16]
 801484e:	f7ff fd1b 	bl	8014288 <rmw_get_implementation_identifier>
 8014852:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8014856:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801485a:	f8c4 9020 	str.w	r9, [r4, #32]
 801485e:	4630      	mov	r0, r6
 8014860:	f7eb fd36 	bl	80002d0 <strlen>
 8014864:	1c42      	adds	r2, r0, #1
 8014866:	2a3c      	cmp	r2, #60	@ 0x3c
 8014868:	f104 0518 	add.w	r5, r4, #24
 801486c:	d844      	bhi.n	80148f8 <create_node+0xcc>
 801486e:	4648      	mov	r0, r9
 8014870:	4631      	mov	r1, r6
 8014872:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8014876:	f003 fe28 	bl	80184ca <memcpy>
 801487a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801487e:	4638      	mov	r0, r7
 8014880:	f7eb fd26 	bl	80002d0 <strlen>
 8014884:	1c42      	adds	r2, r0, #1
 8014886:	2a3c      	cmp	r2, #60	@ 0x3c
 8014888:	d836      	bhi.n	80148f8 <create_node+0xcc>
 801488a:	4639      	mov	r1, r7
 801488c:	4648      	mov	r0, r9
 801488e:	f003 fe1c 	bl	80184ca <memcpy>
 8014892:	6923      	ldr	r3, [r4, #16]
 8014894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014898:	2101      	movs	r1, #1
 801489a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801489e:	1842      	adds	r2, r0, r1
 80148a0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80148a4:	f7f8 fdca 	bl	800d43c <uxr_object_id>
 80148a8:	6160      	str	r0, [r4, #20]
 80148aa:	783b      	ldrb	r3, [r7, #0]
 80148ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80148ae:	d128      	bne.n	8014902 <create_node+0xd6>
 80148b0:	787b      	ldrb	r3, [r7, #1]
 80148b2:	bb33      	cbnz	r3, 8014902 <create_node+0xd6>
 80148b4:	4a18      	ldr	r2, [pc, #96]	@ (8014918 <create_node+0xec>)
 80148b6:	4819      	ldr	r0, [pc, #100]	@ (801491c <create_node+0xf0>)
 80148b8:	4633      	mov	r3, r6
 80148ba:	213c      	movs	r1, #60	@ 0x3c
 80148bc:	f003 fbb6 	bl	801802c <sniprintf>
 80148c0:	6920      	ldr	r0, [r4, #16]
 80148c2:	4916      	ldr	r1, [pc, #88]	@ (801491c <create_node+0xf0>)
 80148c4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80148c8:	9100      	str	r1, [sp, #0]
 80148ca:	2106      	movs	r1, #6
 80148cc:	9101      	str	r1, [sp, #4]
 80148ce:	6811      	ldr	r1, [r2, #0]
 80148d0:	6962      	ldr	r2, [r4, #20]
 80148d2:	fa1f f388 	uxth.w	r3, r8
 80148d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80148da:	f7f8 fbf5 	bl	800d0c8 <uxr_buffer_create_participant_bin>
 80148de:	4602      	mov	r2, r0
 80148e0:	6920      	ldr	r0, [r4, #16]
 80148e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80148e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80148ea:	f7f6 fa43 	bl	800ad74 <run_xrce_session>
 80148ee:	b118      	cbz	r0, 80148f8 <create_node+0xcc>
 80148f0:	4628      	mov	r0, r5
 80148f2:	b003      	add	sp, #12
 80148f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148f8:	4628      	mov	r0, r5
 80148fa:	f7f6 f8c3 	bl	800aa84 <rmw_uxrce_fini_node_memory>
 80148fe:	2500      	movs	r5, #0
 8014900:	e7f6      	b.n	80148f0 <create_node+0xc4>
 8014902:	4a07      	ldr	r2, [pc, #28]	@ (8014920 <create_node+0xf4>)
 8014904:	9600      	str	r6, [sp, #0]
 8014906:	463b      	mov	r3, r7
 8014908:	213c      	movs	r1, #60	@ 0x3c
 801490a:	4804      	ldr	r0, [pc, #16]	@ (801491c <create_node+0xf0>)
 801490c:	f003 fb8e 	bl	801802c <sniprintf>
 8014910:	e7d6      	b.n	80148c0 <create_node+0x94>
 8014912:	bf00      	nop
 8014914:	2000eab4 	.word	0x2000eab4
 8014918:	08019e58 	.word	0x08019e58
 801491c:	200102ac 	.word	0x200102ac
 8014920:	0801a05c 	.word	0x0801a05c

08014924 <rmw_create_node>:
 8014924:	b191      	cbz	r1, 801494c <rmw_create_node+0x28>
 8014926:	b410      	push	{r4}
 8014928:	4614      	mov	r4, r2
 801492a:	780a      	ldrb	r2, [r1, #0]
 801492c:	4603      	mov	r3, r0
 801492e:	4608      	mov	r0, r1
 8014930:	b142      	cbz	r2, 8014944 <rmw_create_node+0x20>
 8014932:	b13c      	cbz	r4, 8014944 <rmw_create_node+0x20>
 8014934:	7822      	ldrb	r2, [r4, #0]
 8014936:	b12a      	cbz	r2, 8014944 <rmw_create_node+0x20>
 8014938:	4621      	mov	r1, r4
 801493a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801493c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014940:	f7ff bf74 	b.w	801482c <create_node>
 8014944:	2000      	movs	r0, #0
 8014946:	f85d 4b04 	ldr.w	r4, [sp], #4
 801494a:	4770      	bx	lr
 801494c:	2000      	movs	r0, #0
 801494e:	4770      	bx	lr

08014950 <rmw_destroy_node>:
 8014950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014952:	b328      	cbz	r0, 80149a0 <rmw_destroy_node+0x50>
 8014954:	4607      	mov	r7, r0
 8014956:	6800      	ldr	r0, [r0, #0]
 8014958:	b120      	cbz	r0, 8014964 <rmw_destroy_node+0x14>
 801495a:	4b36      	ldr	r3, [pc, #216]	@ (8014a34 <rmw_destroy_node+0xe4>)
 801495c:	6819      	ldr	r1, [r3, #0]
 801495e:	f7eb fc57 	bl	8000210 <strcmp>
 8014962:	b9e8      	cbnz	r0, 80149a0 <rmw_destroy_node+0x50>
 8014964:	687d      	ldr	r5, [r7, #4]
 8014966:	b1dd      	cbz	r5, 80149a0 <rmw_destroy_node+0x50>
 8014968:	4b33      	ldr	r3, [pc, #204]	@ (8014a38 <rmw_destroy_node+0xe8>)
 801496a:	681c      	ldr	r4, [r3, #0]
 801496c:	2c00      	cmp	r4, #0
 801496e:	d05f      	beq.n	8014a30 <rmw_destroy_node+0xe0>
 8014970:	2600      	movs	r6, #0
 8014972:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8014976:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801497a:	429d      	cmp	r5, r3
 801497c:	d013      	beq.n	80149a6 <rmw_destroy_node+0x56>
 801497e:	2c00      	cmp	r4, #0
 8014980:	d1f7      	bne.n	8014972 <rmw_destroy_node+0x22>
 8014982:	4b2e      	ldr	r3, [pc, #184]	@ (8014a3c <rmw_destroy_node+0xec>)
 8014984:	681c      	ldr	r4, [r3, #0]
 8014986:	b1c4      	cbz	r4, 80149ba <rmw_destroy_node+0x6a>
 8014988:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801498c:	6a0b      	ldr	r3, [r1, #32]
 801498e:	429d      	cmp	r5, r3
 8014990:	d1f9      	bne.n	8014986 <rmw_destroy_node+0x36>
 8014992:	317c      	adds	r1, #124	@ 0x7c
 8014994:	4638      	mov	r0, r7
 8014996:	f000 f9eb 	bl	8014d70 <rmw_destroy_subscription>
 801499a:	2801      	cmp	r0, #1
 801499c:	4606      	mov	r6, r0
 801499e:	d1f2      	bne.n	8014986 <rmw_destroy_node+0x36>
 80149a0:	2601      	movs	r6, #1
 80149a2:	4630      	mov	r0, r6
 80149a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80149a6:	3184      	adds	r1, #132	@ 0x84
 80149a8:	4638      	mov	r0, r7
 80149aa:	f7f5 fe7b 	bl	800a6a4 <rmw_destroy_publisher>
 80149ae:	2801      	cmp	r0, #1
 80149b0:	4606      	mov	r6, r0
 80149b2:	d0f5      	beq.n	80149a0 <rmw_destroy_node+0x50>
 80149b4:	2c00      	cmp	r4, #0
 80149b6:	d1dc      	bne.n	8014972 <rmw_destroy_node+0x22>
 80149b8:	e7e3      	b.n	8014982 <rmw_destroy_node+0x32>
 80149ba:	4b21      	ldr	r3, [pc, #132]	@ (8014a40 <rmw_destroy_node+0xf0>)
 80149bc:	681c      	ldr	r4, [r3, #0]
 80149be:	b16c      	cbz	r4, 80149dc <rmw_destroy_node+0x8c>
 80149c0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80149c4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80149c6:	429d      	cmp	r5, r3
 80149c8:	d1f9      	bne.n	80149be <rmw_destroy_node+0x6e>
 80149ca:	317c      	adds	r1, #124	@ 0x7c
 80149cc:	4638      	mov	r0, r7
 80149ce:	f000 f98b 	bl	8014ce8 <rmw_destroy_service>
 80149d2:	2801      	cmp	r0, #1
 80149d4:	4606      	mov	r6, r0
 80149d6:	d0e3      	beq.n	80149a0 <rmw_destroy_node+0x50>
 80149d8:	2c00      	cmp	r4, #0
 80149da:	d1f1      	bne.n	80149c0 <rmw_destroy_node+0x70>
 80149dc:	4b19      	ldr	r3, [pc, #100]	@ (8014a44 <rmw_destroy_node+0xf4>)
 80149de:	681c      	ldr	r4, [r3, #0]
 80149e0:	b16c      	cbz	r4, 80149fe <rmw_destroy_node+0xae>
 80149e2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80149e6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80149e8:	429d      	cmp	r5, r3
 80149ea:	d1f9      	bne.n	80149e0 <rmw_destroy_node+0x90>
 80149ec:	317c      	adds	r1, #124	@ 0x7c
 80149ee:	4638      	mov	r0, r7
 80149f0:	f7ff fbe8 	bl	80141c4 <rmw_destroy_client>
 80149f4:	2801      	cmp	r0, #1
 80149f6:	4606      	mov	r6, r0
 80149f8:	d0d2      	beq.n	80149a0 <rmw_destroy_node+0x50>
 80149fa:	2c00      	cmp	r4, #0
 80149fc:	d1f1      	bne.n	80149e2 <rmw_destroy_node+0x92>
 80149fe:	6928      	ldr	r0, [r5, #16]
 8014a00:	696a      	ldr	r2, [r5, #20]
 8014a02:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014a06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014a0a:	6819      	ldr	r1, [r3, #0]
 8014a0c:	f7f8 fb12 	bl	800d034 <uxr_buffer_delete_entity>
 8014a10:	4602      	mov	r2, r0
 8014a12:	6928      	ldr	r0, [r5, #16]
 8014a14:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014a18:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014a1c:	f7f6 f9aa 	bl	800ad74 <run_xrce_session>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	bf08      	it	eq
 8014a24:	2602      	moveq	r6, #2
 8014a26:	4638      	mov	r0, r7
 8014a28:	f7f6 f82c 	bl	800aa84 <rmw_uxrce_fini_node_memory>
 8014a2c:	4630      	mov	r0, r6
 8014a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a30:	4626      	mov	r6, r4
 8014a32:	e7a6      	b.n	8014982 <rmw_destroy_node+0x32>
 8014a34:	0801ac04 	.word	0x0801ac04
 8014a38:	2000ea00 	.word	0x2000ea00
 8014a3c:	2000e180 	.word	0x2000e180
 8014a40:	2000dd38 	.word	0x2000dd38
 8014a44:	2000dc60 	.word	0x2000dc60

08014a48 <rmw_node_get_graph_guard_condition>:
 8014a48:	6843      	ldr	r3, [r0, #4]
 8014a4a:	6918      	ldr	r0, [r3, #16]
 8014a4c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8014a50:	4770      	bx	lr
 8014a52:	bf00      	nop

08014a54 <rmw_send_request>:
 8014a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a58:	4604      	mov	r4, r0
 8014a5a:	6800      	ldr	r0, [r0, #0]
 8014a5c:	b08a      	sub	sp, #40	@ 0x28
 8014a5e:	460e      	mov	r6, r1
 8014a60:	4615      	mov	r5, r2
 8014a62:	b128      	cbz	r0, 8014a70 <rmw_send_request+0x1c>
 8014a64:	4b1e      	ldr	r3, [pc, #120]	@ (8014ae0 <rmw_send_request+0x8c>)
 8014a66:	6819      	ldr	r1, [r3, #0]
 8014a68:	f7eb fbd2 	bl	8000210 <strcmp>
 8014a6c:	2800      	cmp	r0, #0
 8014a6e:	d133      	bne.n	8014ad8 <rmw_send_request+0x84>
 8014a70:	6864      	ldr	r4, [r4, #4]
 8014a72:	6963      	ldr	r3, [r4, #20]
 8014a74:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 8014a76:	689b      	ldr	r3, [r3, #8]
 8014a78:	4798      	blx	r3
 8014a7a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014a7e:	4630      	mov	r0, r6
 8014a80:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014a84:	4798      	blx	r3
 8014a86:	693b      	ldr	r3, [r7, #16]
 8014a88:	9000      	str	r0, [sp, #0]
 8014a8a:	6922      	ldr	r2, [r4, #16]
 8014a8c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8014a8e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8014a92:	ab02      	add	r3, sp, #8
 8014a94:	f7fa fd60 	bl	800f558 <uxr_prepare_output_stream>
 8014a98:	2300      	movs	r3, #0
 8014a9a:	6028      	str	r0, [r5, #0]
 8014a9c:	606b      	str	r3, [r5, #4]
 8014a9e:	b190      	cbz	r0, 8014ac6 <rmw_send_request+0x72>
 8014aa0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014aa4:	a902      	add	r1, sp, #8
 8014aa6:	4630      	mov	r0, r6
 8014aa8:	4798      	blx	r3
 8014aaa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014aae:	6938      	ldr	r0, [r7, #16]
 8014ab0:	2b01      	cmp	r3, #1
 8014ab2:	d00c      	beq.n	8014ace <rmw_send_request+0x7a>
 8014ab4:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8014ab6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014aba:	f7f9 fa8d 	bl	800dfd8 <uxr_run_session_until_confirm_delivery>
 8014abe:	2000      	movs	r0, #0
 8014ac0:	b00a      	add	sp, #40	@ 0x28
 8014ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac6:	2001      	movs	r0, #1
 8014ac8:	b00a      	add	sp, #40	@ 0x28
 8014aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ace:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ad2:	f7f8 fee9 	bl	800d8a8 <uxr_flash_output_streams>
 8014ad6:	e7f2      	b.n	8014abe <rmw_send_request+0x6a>
 8014ad8:	200c      	movs	r0, #12
 8014ada:	b00a      	add	sp, #40	@ 0x28
 8014adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ae0:	0801ac04 	.word	0x0801ac04

08014ae4 <rmw_take_request>:
 8014ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ae8:	4605      	mov	r5, r0
 8014aea:	6800      	ldr	r0, [r0, #0]
 8014aec:	b089      	sub	sp, #36	@ 0x24
 8014aee:	460c      	mov	r4, r1
 8014af0:	4690      	mov	r8, r2
 8014af2:	461e      	mov	r6, r3
 8014af4:	b128      	cbz	r0, 8014b02 <rmw_take_request+0x1e>
 8014af6:	4b28      	ldr	r3, [pc, #160]	@ (8014b98 <rmw_take_request+0xb4>)
 8014af8:	6819      	ldr	r1, [r3, #0]
 8014afa:	f7eb fb89 	bl	8000210 <strcmp>
 8014afe:	2800      	cmp	r0, #0
 8014b00:	d146      	bne.n	8014b90 <rmw_take_request+0xac>
 8014b02:	b10e      	cbz	r6, 8014b08 <rmw_take_request+0x24>
 8014b04:	2300      	movs	r3, #0
 8014b06:	7033      	strb	r3, [r6, #0]
 8014b08:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014b0c:	f7f6 f8b4 	bl	800ac78 <rmw_uxrce_clean_expired_static_input_buffer>
 8014b10:	4648      	mov	r0, r9
 8014b12:	f7f6 f88b 	bl	800ac2c <rmw_uxrce_find_static_input_buffer_by_owner>
 8014b16:	4607      	mov	r7, r0
 8014b18:	b3b0      	cbz	r0, 8014b88 <rmw_take_request+0xa4>
 8014b1a:	6885      	ldr	r5, [r0, #8]
 8014b1c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8014b20:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8014b24:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014b28:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8014b2c:	7423      	strb	r3, [r4, #16]
 8014b2e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8014b32:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8014b36:	74e2      	strb	r2, [r4, #19]
 8014b38:	f8a4 3011 	strh.w	r3, [r4, #17]
 8014b3c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8014b40:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8014b44:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8014b48:	61e1      	str	r1, [r4, #28]
 8014b4a:	6162      	str	r2, [r4, #20]
 8014b4c:	61a3      	str	r3, [r4, #24]
 8014b4e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014b52:	689b      	ldr	r3, [r3, #8]
 8014b54:	4798      	blx	r3
 8014b56:	6844      	ldr	r4, [r0, #4]
 8014b58:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8014b5c:	f105 0110 	add.w	r1, r5, #16
 8014b60:	4668      	mov	r0, sp
 8014b62:	f7f8 f99b 	bl	800ce9c <ucdr_init_buffer>
 8014b66:	68e3      	ldr	r3, [r4, #12]
 8014b68:	4641      	mov	r1, r8
 8014b6a:	4668      	mov	r0, sp
 8014b6c:	4798      	blx	r3
 8014b6e:	4639      	mov	r1, r7
 8014b70:	4604      	mov	r4, r0
 8014b72:	480a      	ldr	r0, [pc, #40]	@ (8014b9c <rmw_take_request+0xb8>)
 8014b74:	f7ff fb12 	bl	801419c <put_memory>
 8014b78:	b106      	cbz	r6, 8014b7c <rmw_take_request+0x98>
 8014b7a:	7034      	strb	r4, [r6, #0]
 8014b7c:	f084 0001 	eor.w	r0, r4, #1
 8014b80:	b2c0      	uxtb	r0, r0
 8014b82:	b009      	add	sp, #36	@ 0x24
 8014b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b88:	2001      	movs	r0, #1
 8014b8a:	b009      	add	sp, #36	@ 0x24
 8014b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b90:	200c      	movs	r0, #12
 8014b92:	b009      	add	sp, #36	@ 0x24
 8014b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b98:	0801ac04 	.word	0x0801ac04
 8014b9c:	2000d9d0 	.word	0x2000d9d0

08014ba0 <rmw_send_response>:
 8014ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ba2:	4605      	mov	r5, r0
 8014ba4:	6800      	ldr	r0, [r0, #0]
 8014ba6:	b091      	sub	sp, #68	@ 0x44
 8014ba8:	460c      	mov	r4, r1
 8014baa:	4616      	mov	r6, r2
 8014bac:	b128      	cbz	r0, 8014bba <rmw_send_response+0x1a>
 8014bae:	4b28      	ldr	r3, [pc, #160]	@ (8014c50 <rmw_send_response+0xb0>)
 8014bb0:	6819      	ldr	r1, [r3, #0]
 8014bb2:	f7eb fb2d 	bl	8000210 <strcmp>
 8014bb6:	2800      	cmp	r0, #0
 8014bb8:	d141      	bne.n	8014c3e <rmw_send_response+0x9e>
 8014bba:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8014bbe:	9306      	str	r3, [sp, #24]
 8014bc0:	4623      	mov	r3, r4
 8014bc2:	9207      	str	r2, [sp, #28]
 8014bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014bc8:	686d      	ldr	r5, [r5, #4]
 8014bca:	789b      	ldrb	r3, [r3, #2]
 8014bcc:	68a1      	ldr	r1, [r4, #8]
 8014bce:	f88d 2017 	strb.w	r2, [sp, #23]
 8014bd2:	f88d 3016 	strb.w	r3, [sp, #22]
 8014bd6:	68e2      	ldr	r2, [r4, #12]
 8014bd8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014bdc:	6860      	ldr	r0, [r4, #4]
 8014bde:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014be2:	ab02      	add	r3, sp, #8
 8014be4:	c307      	stmia	r3!, {r0, r1, r2}
 8014be6:	696b      	ldr	r3, [r5, #20]
 8014be8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	4798      	blx	r3
 8014bee:	6844      	ldr	r4, [r0, #4]
 8014bf0:	4630      	mov	r0, r6
 8014bf2:	6923      	ldr	r3, [r4, #16]
 8014bf4:	4798      	blx	r3
 8014bf6:	f100 0318 	add.w	r3, r0, #24
 8014bfa:	6938      	ldr	r0, [r7, #16]
 8014bfc:	9300      	str	r3, [sp, #0]
 8014bfe:	692a      	ldr	r2, [r5, #16]
 8014c00:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8014c02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014c06:	ab08      	add	r3, sp, #32
 8014c08:	f7fa fca6 	bl	800f558 <uxr_prepare_output_stream>
 8014c0c:	b910      	cbnz	r0, 8014c14 <rmw_send_response+0x74>
 8014c0e:	2001      	movs	r0, #1
 8014c10:	b011      	add	sp, #68	@ 0x44
 8014c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c14:	a902      	add	r1, sp, #8
 8014c16:	a808      	add	r0, sp, #32
 8014c18:	f7fb fce2 	bl	80105e0 <uxr_serialize_SampleIdentity>
 8014c1c:	68a3      	ldr	r3, [r4, #8]
 8014c1e:	a908      	add	r1, sp, #32
 8014c20:	4630      	mov	r0, r6
 8014c22:	4798      	blx	r3
 8014c24:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8014c28:	6938      	ldr	r0, [r7, #16]
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d00a      	beq.n	8014c44 <rmw_send_response+0xa4>
 8014c2e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8014c30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014c34:	f7f9 f9d0 	bl	800dfd8 <uxr_run_session_until_confirm_delivery>
 8014c38:	2000      	movs	r0, #0
 8014c3a:	b011      	add	sp, #68	@ 0x44
 8014c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c3e:	200c      	movs	r0, #12
 8014c40:	b011      	add	sp, #68	@ 0x44
 8014c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014c48:	f7f8 fe2e 	bl	800d8a8 <uxr_flash_output_streams>
 8014c4c:	e7f4      	b.n	8014c38 <rmw_send_response+0x98>
 8014c4e:	bf00      	nop
 8014c50:	0801ac04 	.word	0x0801ac04

08014c54 <rmw_take_response>:
 8014c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c58:	4604      	mov	r4, r0
 8014c5a:	6800      	ldr	r0, [r0, #0]
 8014c5c:	b088      	sub	sp, #32
 8014c5e:	4688      	mov	r8, r1
 8014c60:	4617      	mov	r7, r2
 8014c62:	461d      	mov	r5, r3
 8014c64:	b120      	cbz	r0, 8014c70 <rmw_take_response+0x1c>
 8014c66:	4b1e      	ldr	r3, [pc, #120]	@ (8014ce0 <rmw_take_response+0x8c>)
 8014c68:	6819      	ldr	r1, [r3, #0]
 8014c6a:	f7eb fad1 	bl	8000210 <strcmp>
 8014c6e:	bb78      	cbnz	r0, 8014cd0 <rmw_take_response+0x7c>
 8014c70:	b10d      	cbz	r5, 8014c76 <rmw_take_response+0x22>
 8014c72:	2300      	movs	r3, #0
 8014c74:	702b      	strb	r3, [r5, #0]
 8014c76:	6864      	ldr	r4, [r4, #4]
 8014c78:	f7f5 fffe 	bl	800ac78 <rmw_uxrce_clean_expired_static_input_buffer>
 8014c7c:	4620      	mov	r0, r4
 8014c7e:	f7f5 ffd5 	bl	800ac2c <rmw_uxrce_find_static_input_buffer_by_owner>
 8014c82:	4606      	mov	r6, r0
 8014c84:	b340      	cbz	r0, 8014cd8 <rmw_take_response+0x84>
 8014c86:	6963      	ldr	r3, [r4, #20]
 8014c88:	6884      	ldr	r4, [r0, #8]
 8014c8a:	68db      	ldr	r3, [r3, #12]
 8014c8c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8014c90:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014c94:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014c98:	4798      	blx	r3
 8014c9a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014c9e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8014ca2:	f104 0110 	add.w	r1, r4, #16
 8014ca6:	4668      	mov	r0, sp
 8014ca8:	f7f8 f8f8 	bl	800ce9c <ucdr_init_buffer>
 8014cac:	4639      	mov	r1, r7
 8014cae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014cb2:	4668      	mov	r0, sp
 8014cb4:	4798      	blx	r3
 8014cb6:	4631      	mov	r1, r6
 8014cb8:	4604      	mov	r4, r0
 8014cba:	480a      	ldr	r0, [pc, #40]	@ (8014ce4 <rmw_take_response+0x90>)
 8014cbc:	f7ff fa6e 	bl	801419c <put_memory>
 8014cc0:	b105      	cbz	r5, 8014cc4 <rmw_take_response+0x70>
 8014cc2:	702c      	strb	r4, [r5, #0]
 8014cc4:	f084 0001 	eor.w	r0, r4, #1
 8014cc8:	b2c0      	uxtb	r0, r0
 8014cca:	b008      	add	sp, #32
 8014ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cd0:	200c      	movs	r0, #12
 8014cd2:	b008      	add	sp, #32
 8014cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cd8:	2001      	movs	r0, #1
 8014cda:	b008      	add	sp, #32
 8014cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ce0:	0801ac04 	.word	0x0801ac04
 8014ce4:	2000d9d0 	.word	0x2000d9d0

08014ce8 <rmw_destroy_service>:
 8014ce8:	b570      	push	{r4, r5, r6, lr}
 8014cea:	b128      	cbz	r0, 8014cf8 <rmw_destroy_service+0x10>
 8014cec:	4604      	mov	r4, r0
 8014cee:	6800      	ldr	r0, [r0, #0]
 8014cf0:	460d      	mov	r5, r1
 8014cf2:	f7f6 f8c5 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 8014cf6:	b910      	cbnz	r0, 8014cfe <rmw_destroy_service+0x16>
 8014cf8:	2401      	movs	r4, #1
 8014cfa:	4620      	mov	r0, r4
 8014cfc:	bd70      	pop	{r4, r5, r6, pc}
 8014cfe:	6863      	ldr	r3, [r4, #4]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d0f9      	beq.n	8014cf8 <rmw_destroy_service+0x10>
 8014d04:	2d00      	cmp	r5, #0
 8014d06:	d0f7      	beq.n	8014cf8 <rmw_destroy_service+0x10>
 8014d08:	6828      	ldr	r0, [r5, #0]
 8014d0a:	f7f6 f8b9 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 8014d0e:	2800      	cmp	r0, #0
 8014d10:	d0f2      	beq.n	8014cf8 <rmw_destroy_service+0x10>
 8014d12:	686e      	ldr	r6, [r5, #4]
 8014d14:	2e00      	cmp	r6, #0
 8014d16:	d0ef      	beq.n	8014cf8 <rmw_destroy_service+0x10>
 8014d18:	6864      	ldr	r4, [r4, #4]
 8014d1a:	6932      	ldr	r2, [r6, #16]
 8014d1c:	6920      	ldr	r0, [r4, #16]
 8014d1e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014d22:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014d26:	6819      	ldr	r1, [r3, #0]
 8014d28:	f001 fd1a 	bl	8016760 <uxr_buffer_cancel_data>
 8014d2c:	4602      	mov	r2, r0
 8014d2e:	6920      	ldr	r0, [r4, #16]
 8014d30:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014d34:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014d38:	f7f6 f81c 	bl	800ad74 <run_xrce_session>
 8014d3c:	6920      	ldr	r0, [r4, #16]
 8014d3e:	6932      	ldr	r2, [r6, #16]
 8014d40:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014d44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014d48:	6819      	ldr	r1, [r3, #0]
 8014d4a:	f7f8 f973 	bl	800d034 <uxr_buffer_delete_entity>
 8014d4e:	4602      	mov	r2, r0
 8014d50:	6920      	ldr	r0, [r4, #16]
 8014d52:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014d56:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014d5a:	f7f6 f80b 	bl	800ad74 <run_xrce_session>
 8014d5e:	f080 0401 	eor.w	r4, r0, #1
 8014d62:	b2e4      	uxtb	r4, r4
 8014d64:	4628      	mov	r0, r5
 8014d66:	0064      	lsls	r4, r4, #1
 8014d68:	f7f5 fed0 	bl	800ab0c <rmw_uxrce_fini_service_memory>
 8014d6c:	e7c5      	b.n	8014cfa <rmw_destroy_service+0x12>
 8014d6e:	bf00      	nop

08014d70 <rmw_destroy_subscription>:
 8014d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d74:	b128      	cbz	r0, 8014d82 <rmw_destroy_subscription+0x12>
 8014d76:	4604      	mov	r4, r0
 8014d78:	6800      	ldr	r0, [r0, #0]
 8014d7a:	460d      	mov	r5, r1
 8014d7c:	f7f6 f880 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 8014d80:	b918      	cbnz	r0, 8014d8a <rmw_destroy_subscription+0x1a>
 8014d82:	2401      	movs	r4, #1
 8014d84:	4620      	mov	r0, r4
 8014d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d8a:	6863      	ldr	r3, [r4, #4]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d0f8      	beq.n	8014d82 <rmw_destroy_subscription+0x12>
 8014d90:	2d00      	cmp	r5, #0
 8014d92:	d0f6      	beq.n	8014d82 <rmw_destroy_subscription+0x12>
 8014d94:	6828      	ldr	r0, [r5, #0]
 8014d96:	f7f6 f873 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 8014d9a:	2800      	cmp	r0, #0
 8014d9c:	d0f1      	beq.n	8014d82 <rmw_destroy_subscription+0x12>
 8014d9e:	686c      	ldr	r4, [r5, #4]
 8014da0:	2c00      	cmp	r4, #0
 8014da2:	d0ee      	beq.n	8014d82 <rmw_destroy_subscription+0x12>
 8014da4:	6a26      	ldr	r6, [r4, #32]
 8014da6:	6962      	ldr	r2, [r4, #20]
 8014da8:	6930      	ldr	r0, [r6, #16]
 8014daa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014dae:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014db2:	6819      	ldr	r1, [r3, #0]
 8014db4:	f001 fcd4 	bl	8016760 <uxr_buffer_cancel_data>
 8014db8:	4602      	mov	r2, r0
 8014dba:	6930      	ldr	r0, [r6, #16]
 8014dbc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014dc0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014dc4:	f7f5 ffd6 	bl	800ad74 <run_xrce_session>
 8014dc8:	69e0      	ldr	r0, [r4, #28]
 8014dca:	f7ff fd0d 	bl	80147e8 <destroy_topic>
 8014dce:	6a23      	ldr	r3, [r4, #32]
 8014dd0:	6962      	ldr	r2, [r4, #20]
 8014dd2:	6918      	ldr	r0, [r3, #16]
 8014dd4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014dd8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ddc:	6819      	ldr	r1, [r3, #0]
 8014dde:	f7f8 f929 	bl	800d034 <uxr_buffer_delete_entity>
 8014de2:	6a23      	ldr	r3, [r4, #32]
 8014de4:	6922      	ldr	r2, [r4, #16]
 8014de6:	4680      	mov	r8, r0
 8014de8:	6918      	ldr	r0, [r3, #16]
 8014dea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014dee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014df2:	6819      	ldr	r1, [r3, #0]
 8014df4:	f7f8 f91e 	bl	800d034 <uxr_buffer_delete_entity>
 8014df8:	4607      	mov	r7, r0
 8014dfa:	6930      	ldr	r0, [r6, #16]
 8014dfc:	4642      	mov	r2, r8
 8014dfe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014e02:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014e06:	f7f5 ffb5 	bl	800ad74 <run_xrce_session>
 8014e0a:	4604      	mov	r4, r0
 8014e0c:	6930      	ldr	r0, [r6, #16]
 8014e0e:	463a      	mov	r2, r7
 8014e10:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014e14:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014e18:	f7f5 ffac 	bl	800ad74 <run_xrce_session>
 8014e1c:	4004      	ands	r4, r0
 8014e1e:	f084 0401 	eor.w	r4, r4, #1
 8014e22:	b2e4      	uxtb	r4, r4
 8014e24:	4628      	mov	r0, r5
 8014e26:	0064      	lsls	r4, r4, #1
 8014e28:	f7f5 fe5a 	bl	800aae0 <rmw_uxrce_fini_subscription_memory>
 8014e2c:	e7aa      	b.n	8014d84 <rmw_destroy_subscription+0x14>
 8014e2e:	bf00      	nop

08014e30 <rmw_take_with_info>:
 8014e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e32:	4604      	mov	r4, r0
 8014e34:	6800      	ldr	r0, [r0, #0]
 8014e36:	b089      	sub	sp, #36	@ 0x24
 8014e38:	460f      	mov	r7, r1
 8014e3a:	4615      	mov	r5, r2
 8014e3c:	b128      	cbz	r0, 8014e4a <rmw_take_with_info+0x1a>
 8014e3e:	4b23      	ldr	r3, [pc, #140]	@ (8014ecc <rmw_take_with_info+0x9c>)
 8014e40:	6819      	ldr	r1, [r3, #0]
 8014e42:	f7eb f9e5 	bl	8000210 <strcmp>
 8014e46:	2800      	cmp	r0, #0
 8014e48:	d13d      	bne.n	8014ec6 <rmw_take_with_info+0x96>
 8014e4a:	6864      	ldr	r4, [r4, #4]
 8014e4c:	b1fd      	cbz	r5, 8014e8e <rmw_take_with_info+0x5e>
 8014e4e:	2300      	movs	r3, #0
 8014e50:	702b      	strb	r3, [r5, #0]
 8014e52:	f7f5 ff11 	bl	800ac78 <rmw_uxrce_clean_expired_static_input_buffer>
 8014e56:	4620      	mov	r0, r4
 8014e58:	f7f5 fee8 	bl	800ac2c <rmw_uxrce_find_static_input_buffer_by_owner>
 8014e5c:	4606      	mov	r6, r0
 8014e5e:	b1e8      	cbz	r0, 8014e9c <rmw_take_with_info+0x6c>
 8014e60:	6881      	ldr	r1, [r0, #8]
 8014e62:	4668      	mov	r0, sp
 8014e64:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014e68:	3110      	adds	r1, #16
 8014e6a:	f7f8 f817 	bl	800ce9c <ucdr_init_buffer>
 8014e6e:	69a3      	ldr	r3, [r4, #24]
 8014e70:	4639      	mov	r1, r7
 8014e72:	68db      	ldr	r3, [r3, #12]
 8014e74:	4668      	mov	r0, sp
 8014e76:	4798      	blx	r3
 8014e78:	4631      	mov	r1, r6
 8014e7a:	4604      	mov	r4, r0
 8014e7c:	4814      	ldr	r0, [pc, #80]	@ (8014ed0 <rmw_take_with_info+0xa0>)
 8014e7e:	f7ff f98d 	bl	801419c <put_memory>
 8014e82:	702c      	strb	r4, [r5, #0]
 8014e84:	f084 0001 	eor.w	r0, r4, #1
 8014e88:	b2c0      	uxtb	r0, r0
 8014e8a:	b009      	add	sp, #36	@ 0x24
 8014e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e8e:	f7f5 fef3 	bl	800ac78 <rmw_uxrce_clean_expired_static_input_buffer>
 8014e92:	4620      	mov	r0, r4
 8014e94:	f7f5 feca 	bl	800ac2c <rmw_uxrce_find_static_input_buffer_by_owner>
 8014e98:	4605      	mov	r5, r0
 8014e9a:	b910      	cbnz	r0, 8014ea2 <rmw_take_with_info+0x72>
 8014e9c:	2001      	movs	r0, #1
 8014e9e:	b009      	add	sp, #36	@ 0x24
 8014ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ea2:	68a9      	ldr	r1, [r5, #8]
 8014ea4:	4668      	mov	r0, sp
 8014ea6:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014eaa:	3110      	adds	r1, #16
 8014eac:	f7f7 fff6 	bl	800ce9c <ucdr_init_buffer>
 8014eb0:	69a3      	ldr	r3, [r4, #24]
 8014eb2:	4639      	mov	r1, r7
 8014eb4:	68db      	ldr	r3, [r3, #12]
 8014eb6:	4668      	mov	r0, sp
 8014eb8:	4798      	blx	r3
 8014eba:	4629      	mov	r1, r5
 8014ebc:	4604      	mov	r4, r0
 8014ebe:	4804      	ldr	r0, [pc, #16]	@ (8014ed0 <rmw_take_with_info+0xa0>)
 8014ec0:	f7ff f96c 	bl	801419c <put_memory>
 8014ec4:	e7de      	b.n	8014e84 <rmw_take_with_info+0x54>
 8014ec6:	200c      	movs	r0, #12
 8014ec8:	b009      	add	sp, #36	@ 0x24
 8014eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ecc:	0801ac04 	.word	0x0801ac04
 8014ed0:	2000d9d0 	.word	0x2000d9d0

08014ed4 <rmw_wait>:
 8014ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ed8:	b089      	sub	sp, #36	@ 0x24
 8014eda:	4607      	mov	r7, r0
 8014edc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8014ede:	460e      	mov	r6, r1
 8014ee0:	4698      	mov	r8, r3
 8014ee2:	4691      	mov	r9, r2
 8014ee4:	2a00      	cmp	r2, #0
 8014ee6:	f000 811e 	beq.w	8015126 <rmw_wait+0x252>
 8014eea:	2c00      	cmp	r4, #0
 8014eec:	f000 80ef 	beq.w	80150ce <rmw_wait+0x1fa>
 8014ef0:	4bb5      	ldr	r3, [pc, #724]	@ (80151c8 <rmw_wait+0x2f4>)
 8014ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014ef4:	ad04      	add	r5, sp, #16
 8014ef6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8014efa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014efe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014f02:	f7fe ff71 	bl	8013de8 <rmw_time_equal>
 8014f06:	2800      	cmp	r0, #0
 8014f08:	f000 811b 	beq.w	8015142 <rmw_wait+0x26e>
 8014f0c:	f04f 35ff 	mov.w	r5, #4294967295
 8014f10:	f7f5 feb2 	bl	800ac78 <rmw_uxrce_clean_expired_static_input_buffer>
 8014f14:	4bad      	ldr	r3, [pc, #692]	@ (80151cc <rmw_wait+0x2f8>)
 8014f16:	681c      	ldr	r4, [r3, #0]
 8014f18:	b14c      	cbz	r4, 8014f2e <rmw_wait+0x5a>
 8014f1a:	4623      	mov	r3, r4
 8014f1c:	2100      	movs	r1, #0
 8014f1e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014f22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014f26:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d1f7      	bne.n	8014f1e <rmw_wait+0x4a>
 8014f2e:	f1b9 0f00 	cmp.w	r9, #0
 8014f32:	d011      	beq.n	8014f58 <rmw_wait+0x84>
 8014f34:	f8d9 1000 	ldr.w	r1, [r9]
 8014f38:	b171      	cbz	r1, 8014f58 <rmw_wait+0x84>
 8014f3a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014f3e:	2300      	movs	r3, #0
 8014f40:	2001      	movs	r0, #1
 8014f42:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014f46:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014f48:	6912      	ldr	r2, [r2, #16]
 8014f4a:	3301      	adds	r3, #1
 8014f4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014f50:	4299      	cmp	r1, r3
 8014f52:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014f56:	d1f4      	bne.n	8014f42 <rmw_wait+0x6e>
 8014f58:	f1b8 0f00 	cmp.w	r8, #0
 8014f5c:	f000 8109 	beq.w	8015172 <rmw_wait+0x29e>
 8014f60:	f8d8 1000 	ldr.w	r1, [r8]
 8014f64:	2900      	cmp	r1, #0
 8014f66:	f000 8116 	beq.w	8015196 <rmw_wait+0x2c2>
 8014f6a:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8014f6e:	2300      	movs	r3, #0
 8014f70:	2001      	movs	r0, #1
 8014f72:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014f76:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014f78:	6912      	ldr	r2, [r2, #16]
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014f80:	4299      	cmp	r1, r3
 8014f82:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014f86:	d1f4      	bne.n	8014f72 <rmw_wait+0x9e>
 8014f88:	2f00      	cmp	r7, #0
 8014f8a:	f000 8114 	beq.w	80151b6 <rmw_wait+0x2e2>
 8014f8e:	6839      	ldr	r1, [r7, #0]
 8014f90:	b171      	cbz	r1, 8014fb0 <rmw_wait+0xdc>
 8014f92:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8014f96:	2300      	movs	r3, #0
 8014f98:	2001      	movs	r0, #1
 8014f9a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014f9e:	6a12      	ldr	r2, [r2, #32]
 8014fa0:	6912      	ldr	r2, [r2, #16]
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014fa8:	4299      	cmp	r1, r3
 8014faa:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014fae:	d1f4      	bne.n	8014f9a <rmw_wait+0xc6>
 8014fb0:	b344      	cbz	r4, 8015004 <rmw_wait+0x130>
 8014fb2:	4622      	mov	r2, r4
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8014fba:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8014fbe:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8014fc2:	440b      	add	r3, r1
 8014fc4:	b2db      	uxtb	r3, r3
 8014fc6:	2a00      	cmp	r2, #0
 8014fc8:	d1f5      	bne.n	8014fb6 <rmw_wait+0xe2>
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d075      	beq.n	80150ba <rmw_wait+0x1e6>
 8014fce:	1c6a      	adds	r2, r5, #1
 8014fd0:	d00d      	beq.n	8014fee <rmw_wait+0x11a>
 8014fd2:	ee07 5a90 	vmov	s15, r5
 8014fd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014fda:	ee07 3a90 	vmov	s15, r3
 8014fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014fe6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014fea:	ee17 5a90 	vmov	r5, s15
 8014fee:	68a0      	ldr	r0, [r4, #8]
 8014ff0:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8014ff4:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	f040 808a 	bne.w	8015112 <rmw_wait+0x23e>
 8014ffe:	6864      	ldr	r4, [r4, #4]
 8015000:	2c00      	cmp	r4, #0
 8015002:	d1f4      	bne.n	8014fee <rmw_wait+0x11a>
 8015004:	f1b9 0f00 	cmp.w	r9, #0
 8015008:	f000 80c3 	beq.w	8015192 <rmw_wait+0x2be>
 801500c:	f8d9 5000 	ldr.w	r5, [r9]
 8015010:	b185      	cbz	r5, 8015034 <rmw_wait+0x160>
 8015012:	2400      	movs	r4, #0
 8015014:	4625      	mov	r5, r4
 8015016:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801501a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801501e:	f7f5 fe05 	bl	800ac2c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015022:	2800      	cmp	r0, #0
 8015024:	d06d      	beq.n	8015102 <rmw_wait+0x22e>
 8015026:	f8d9 3000 	ldr.w	r3, [r9]
 801502a:	3401      	adds	r4, #1
 801502c:	42a3      	cmp	r3, r4
 801502e:	f04f 0501 	mov.w	r5, #1
 8015032:	d8f0      	bhi.n	8015016 <rmw_wait+0x142>
 8015034:	f1b8 0f00 	cmp.w	r8, #0
 8015038:	d012      	beq.n	8015060 <rmw_wait+0x18c>
 801503a:	f8d8 1000 	ldr.w	r1, [r8]
 801503e:	2400      	movs	r4, #0
 8015040:	b171      	cbz	r1, 8015060 <rmw_wait+0x18c>
 8015042:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015046:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801504a:	f7f5 fdef 	bl	800ac2c <rmw_uxrce_find_static_input_buffer_by_owner>
 801504e:	2800      	cmp	r0, #0
 8015050:	d047      	beq.n	80150e2 <rmw_wait+0x20e>
 8015052:	f8d8 3000 	ldr.w	r3, [r8]
 8015056:	3401      	adds	r4, #1
 8015058:	42a3      	cmp	r3, r4
 801505a:	f04f 0501 	mov.w	r5, #1
 801505e:	d8f0      	bhi.n	8015042 <rmw_wait+0x16e>
 8015060:	b17f      	cbz	r7, 8015082 <rmw_wait+0x1ae>
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	2400      	movs	r4, #0
 8015066:	b163      	cbz	r3, 8015082 <rmw_wait+0x1ae>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801506e:	f7f5 fddd 	bl	800ac2c <rmw_uxrce_find_static_input_buffer_by_owner>
 8015072:	2800      	cmp	r0, #0
 8015074:	d03d      	beq.n	80150f2 <rmw_wait+0x21e>
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	3401      	adds	r4, #1
 801507a:	42a3      	cmp	r3, r4
 801507c:	f04f 0501 	mov.w	r5, #1
 8015080:	d8f2      	bhi.n	8015068 <rmw_wait+0x194>
 8015082:	b1a6      	cbz	r6, 80150ae <rmw_wait+0x1da>
 8015084:	6834      	ldr	r4, [r6, #0]
 8015086:	b194      	cbz	r4, 80150ae <rmw_wait+0x1da>
 8015088:	2300      	movs	r3, #0
 801508a:	461f      	mov	r7, r3
 801508c:	e004      	b.n	8015098 <rmw_wait+0x1c4>
 801508e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015092:	3301      	adds	r3, #1
 8015094:	429c      	cmp	r4, r3
 8015096:	d00a      	beq.n	80150ae <rmw_wait+0x1da>
 8015098:	6870      	ldr	r0, [r6, #4]
 801509a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801509e:	7c0a      	ldrb	r2, [r1, #16]
 80150a0:	2a00      	cmp	r2, #0
 80150a2:	d0f4      	beq.n	801508e <rmw_wait+0x1ba>
 80150a4:	3301      	adds	r3, #1
 80150a6:	429c      	cmp	r4, r3
 80150a8:	740f      	strb	r7, [r1, #16]
 80150aa:	4615      	mov	r5, r2
 80150ac:	d1f4      	bne.n	8015098 <rmw_wait+0x1c4>
 80150ae:	f085 0001 	eor.w	r0, r5, #1
 80150b2:	0040      	lsls	r0, r0, #1
 80150b4:	b009      	add	sp, #36	@ 0x24
 80150b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150ba:	68a0      	ldr	r0, [r4, #8]
 80150bc:	2100      	movs	r1, #0
 80150be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80150c2:	f7f8 ff4f 	bl	800df64 <uxr_run_session_timeout>
 80150c6:	6864      	ldr	r4, [r4, #4]
 80150c8:	2c00      	cmp	r4, #0
 80150ca:	d1f6      	bne.n	80150ba <rmw_wait+0x1e6>
 80150cc:	e79a      	b.n	8015004 <rmw_wait+0x130>
 80150ce:	f7f5 fdd3 	bl	800ac78 <rmw_uxrce_clean_expired_static_input_buffer>
 80150d2:	4b3e      	ldr	r3, [pc, #248]	@ (80151cc <rmw_wait+0x2f8>)
 80150d4:	681c      	ldr	r4, [r3, #0]
 80150d6:	f04f 35ff 	mov.w	r5, #4294967295
 80150da:	2c00      	cmp	r4, #0
 80150dc:	f47f af1d 	bne.w	8014f1a <rmw_wait+0x46>
 80150e0:	e728      	b.n	8014f34 <rmw_wait+0x60>
 80150e2:	e9d8 3200 	ldrd	r3, r2, [r8]
 80150e6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80150ea:	3401      	adds	r4, #1
 80150ec:	429c      	cmp	r4, r3
 80150ee:	d3a8      	bcc.n	8015042 <rmw_wait+0x16e>
 80150f0:	e7b6      	b.n	8015060 <rmw_wait+0x18c>
 80150f2:	e9d7 3200 	ldrd	r3, r2, [r7]
 80150f6:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80150fa:	3401      	adds	r4, #1
 80150fc:	42a3      	cmp	r3, r4
 80150fe:	d8b3      	bhi.n	8015068 <rmw_wait+0x194>
 8015100:	e7bf      	b.n	8015082 <rmw_wait+0x1ae>
 8015102:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015106:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801510a:	3401      	adds	r4, #1
 801510c:	42a3      	cmp	r3, r4
 801510e:	d882      	bhi.n	8015016 <rmw_wait+0x142>
 8015110:	e790      	b.n	8015034 <rmw_wait+0x160>
 8015112:	4629      	mov	r1, r5
 8015114:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015118:	f7f8 ff3e 	bl	800df98 <uxr_run_session_until_data>
 801511c:	6864      	ldr	r4, [r4, #4]
 801511e:	2c00      	cmp	r4, #0
 8015120:	f47f af65 	bne.w	8014fee <rmw_wait+0x11a>
 8015124:	e76e      	b.n	8015004 <rmw_wait+0x130>
 8015126:	b1f3      	cbz	r3, 8015166 <rmw_wait+0x292>
 8015128:	2c00      	cmp	r4, #0
 801512a:	f47f aee1 	bne.w	8014ef0 <rmw_wait+0x1c>
 801512e:	f7f5 fda3 	bl	800ac78 <rmw_uxrce_clean_expired_static_input_buffer>
 8015132:	4b26      	ldr	r3, [pc, #152]	@ (80151cc <rmw_wait+0x2f8>)
 8015134:	681c      	ldr	r4, [r3, #0]
 8015136:	f04f 35ff 	mov.w	r5, #4294967295
 801513a:	2c00      	cmp	r4, #0
 801513c:	f47f aeed 	bne.w	8014f1a <rmw_wait+0x46>
 8015140:	e70a      	b.n	8014f58 <rmw_wait+0x84>
 8015142:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015146:	f7fe fea3 	bl	8013e90 <rmw_time_total_nsec>
 801514a:	4a21      	ldr	r2, [pc, #132]	@ (80151d0 <rmw_wait+0x2fc>)
 801514c:	2300      	movs	r3, #0
 801514e:	f7eb fbab 	bl	80008a8 <__aeabi_uldivmod>
 8015152:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015156:	f171 0100 	sbcs.w	r1, r1, #0
 801515a:	4605      	mov	r5, r0
 801515c:	f6ff aed8 	blt.w	8014f10 <rmw_wait+0x3c>
 8015160:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8015164:	e6d4      	b.n	8014f10 <rmw_wait+0x3c>
 8015166:	2800      	cmp	r0, #0
 8015168:	d1de      	bne.n	8015128 <rmw_wait+0x254>
 801516a:	2900      	cmp	r1, #0
 801516c:	d1dc      	bne.n	8015128 <rmw_wait+0x254>
 801516e:	4608      	mov	r0, r1
 8015170:	e7a0      	b.n	80150b4 <rmw_wait+0x1e0>
 8015172:	2f00      	cmp	r7, #0
 8015174:	f47f af0b 	bne.w	8014f8e <rmw_wait+0xba>
 8015178:	2c00      	cmp	r4, #0
 801517a:	f47f af1a 	bne.w	8014fb2 <rmw_wait+0xde>
 801517e:	f1b9 0f00 	cmp.w	r9, #0
 8015182:	d027      	beq.n	80151d4 <rmw_wait+0x300>
 8015184:	f8d9 3000 	ldr.w	r3, [r9]
 8015188:	4625      	mov	r5, r4
 801518a:	2b00      	cmp	r3, #0
 801518c:	f47f af41 	bne.w	8015012 <rmw_wait+0x13e>
 8015190:	e777      	b.n	8015082 <rmw_wait+0x1ae>
 8015192:	464d      	mov	r5, r9
 8015194:	e74e      	b.n	8015034 <rmw_wait+0x160>
 8015196:	2f00      	cmp	r7, #0
 8015198:	f47f aef9 	bne.w	8014f8e <rmw_wait+0xba>
 801519c:	2c00      	cmp	r4, #0
 801519e:	f47f af08 	bne.w	8014fb2 <rmw_wait+0xde>
 80151a2:	f1b9 0f00 	cmp.w	r9, #0
 80151a6:	d015      	beq.n	80151d4 <rmw_wait+0x300>
 80151a8:	f8d9 3000 	ldr.w	r3, [r9]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	f47f af30 	bne.w	8015012 <rmw_wait+0x13e>
 80151b2:	2500      	movs	r5, #0
 80151b4:	e743      	b.n	801503e <rmw_wait+0x16a>
 80151b6:	2c00      	cmp	r4, #0
 80151b8:	f47f aefb 	bne.w	8014fb2 <rmw_wait+0xde>
 80151bc:	f1b9 0f00 	cmp.w	r9, #0
 80151c0:	f47f af24 	bne.w	801500c <rmw_wait+0x138>
 80151c4:	e7f5      	b.n	80151b2 <rmw_wait+0x2de>
 80151c6:	bf00      	nop
 80151c8:	08019c98 	.word	0x08019c98
 80151cc:	20010070 	.word	0x20010070
 80151d0:	000f4240 	.word	0x000f4240
 80151d4:	464d      	mov	r5, r9
 80151d6:	e754      	b.n	8015082 <rmw_wait+0x1ae>

080151d8 <rmw_create_wait_set>:
 80151d8:	b508      	push	{r3, lr}
 80151da:	4803      	ldr	r0, [pc, #12]	@ (80151e8 <rmw_create_wait_set+0x10>)
 80151dc:	f7fe ffce 	bl	801417c <get_memory>
 80151e0:	b108      	cbz	r0, 80151e6 <rmw_create_wait_set+0xe>
 80151e2:	6880      	ldr	r0, [r0, #8]
 80151e4:	3010      	adds	r0, #16
 80151e6:	bd08      	pop	{r3, pc}
 80151e8:	2000b82c 	.word	0x2000b82c

080151ec <rmw_destroy_wait_set>:
 80151ec:	b508      	push	{r3, lr}
 80151ee:	4b08      	ldr	r3, [pc, #32]	@ (8015210 <rmw_destroy_wait_set+0x24>)
 80151f0:	6819      	ldr	r1, [r3, #0]
 80151f2:	b911      	cbnz	r1, 80151fa <rmw_destroy_wait_set+0xe>
 80151f4:	e00a      	b.n	801520c <rmw_destroy_wait_set+0x20>
 80151f6:	6849      	ldr	r1, [r1, #4]
 80151f8:	b141      	cbz	r1, 801520c <rmw_destroy_wait_set+0x20>
 80151fa:	688b      	ldr	r3, [r1, #8]
 80151fc:	3310      	adds	r3, #16
 80151fe:	4298      	cmp	r0, r3
 8015200:	d1f9      	bne.n	80151f6 <rmw_destroy_wait_set+0xa>
 8015202:	4803      	ldr	r0, [pc, #12]	@ (8015210 <rmw_destroy_wait_set+0x24>)
 8015204:	f7fe ffca 	bl	801419c <put_memory>
 8015208:	2000      	movs	r0, #0
 801520a:	bd08      	pop	{r3, pc}
 801520c:	2001      	movs	r0, #1
 801520e:	bd08      	pop	{r3, pc}
 8015210:	2000b82c 	.word	0x2000b82c

08015214 <std_msgs__msg__Header__get_type_hash>:
 8015214:	4800      	ldr	r0, [pc, #0]	@ (8015218 <std_msgs__msg__Header__get_type_hash+0x4>)
 8015216:	4770      	bx	lr
 8015218:	20000a8c 	.word	0x20000a8c

0801521c <std_msgs__msg__Header__get_type_description>:
 801521c:	b510      	push	{r4, lr}
 801521e:	4c08      	ldr	r4, [pc, #32]	@ (8015240 <std_msgs__msg__Header__get_type_description+0x24>)
 8015220:	7820      	ldrb	r0, [r4, #0]
 8015222:	b108      	cbz	r0, 8015228 <std_msgs__msg__Header__get_type_description+0xc>
 8015224:	4807      	ldr	r0, [pc, #28]	@ (8015244 <std_msgs__msg__Header__get_type_description+0x28>)
 8015226:	bd10      	pop	{r4, pc}
 8015228:	f000 f86c 	bl	8015304 <builtin_interfaces__msg__Time__get_type_description>
 801522c:	300c      	adds	r0, #12
 801522e:	c807      	ldmia	r0, {r0, r1, r2}
 8015230:	4b05      	ldr	r3, [pc, #20]	@ (8015248 <std_msgs__msg__Header__get_type_description+0x2c>)
 8015232:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015236:	2301      	movs	r3, #1
 8015238:	4802      	ldr	r0, [pc, #8]	@ (8015244 <std_msgs__msg__Header__get_type_description+0x28>)
 801523a:	7023      	strb	r3, [r4, #0]
 801523c:	bd10      	pop	{r4, pc}
 801523e:	bf00      	nop
 8015240:	20010331 	.word	0x20010331
 8015244:	0801ac38 	.word	0x0801ac38
 8015248:	20000c04 	.word	0x20000c04

0801524c <std_msgs__msg__Header__get_individual_type_description_source>:
 801524c:	4800      	ldr	r0, [pc, #0]	@ (8015250 <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 801524e:	4770      	bx	lr
 8015250:	0801ac14 	.word	0x0801ac14

08015254 <std_msgs__msg__Header__get_type_description_sources>:
 8015254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015256:	4e0f      	ldr	r6, [pc, #60]	@ (8015294 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 8015258:	7837      	ldrb	r7, [r6, #0]
 801525a:	b10f      	cbz	r7, 8015260 <std_msgs__msg__Header__get_type_description_sources+0xc>
 801525c:	480e      	ldr	r0, [pc, #56]	@ (8015298 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 801525e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015260:	4d0e      	ldr	r5, [pc, #56]	@ (801529c <std_msgs__msg__Header__get_type_description_sources+0x48>)
 8015262:	4c0f      	ldr	r4, [pc, #60]	@ (80152a0 <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 8015264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801526a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801526c:	682b      	ldr	r3, [r5, #0]
 801526e:	f844 3b04 	str.w	r3, [r4], #4
 8015272:	4638      	mov	r0, r7
 8015274:	f000 f852 	bl	801531c <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8015278:	2301      	movs	r3, #1
 801527a:	4684      	mov	ip, r0
 801527c:	7033      	strb	r3, [r6, #0]
 801527e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015284:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801528a:	f8dc 3000 	ldr.w	r3, [ip]
 801528e:	4802      	ldr	r0, [pc, #8]	@ (8015298 <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8015290:	6023      	str	r3, [r4, #0]
 8015292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015294:	20010330 	.word	0x20010330
 8015298:	0801ac08 	.word	0x0801ac08
 801529c:	0801ac14 	.word	0x0801ac14
 80152a0:	200102e8 	.word	0x200102e8

080152a4 <std_msgs__msg__Header__init>:
 80152a4:	b1d8      	cbz	r0, 80152de <std_msgs__msg__Header__init+0x3a>
 80152a6:	b538      	push	{r3, r4, r5, lr}
 80152a8:	4604      	mov	r4, r0
 80152aa:	f000 f857 	bl	801535c <builtin_interfaces__msg__Time__init>
 80152ae:	b130      	cbz	r0, 80152be <std_msgs__msg__Header__init+0x1a>
 80152b0:	f104 0508 	add.w	r5, r4, #8
 80152b4:	4628      	mov	r0, r5
 80152b6:	f7f5 fdfd 	bl	800aeb4 <rosidl_runtime_c__String__init>
 80152ba:	b148      	cbz	r0, 80152d0 <std_msgs__msg__Header__init+0x2c>
 80152bc:	bd38      	pop	{r3, r4, r5, pc}
 80152be:	4620      	mov	r0, r4
 80152c0:	f000 f850 	bl	8015364 <builtin_interfaces__msg__Time__fini>
 80152c4:	f104 0008 	add.w	r0, r4, #8
 80152c8:	f7f5 fe0e 	bl	800aee8 <rosidl_runtime_c__String__fini>
 80152cc:	2000      	movs	r0, #0
 80152ce:	bd38      	pop	{r3, r4, r5, pc}
 80152d0:	4620      	mov	r0, r4
 80152d2:	f000 f847 	bl	8015364 <builtin_interfaces__msg__Time__fini>
 80152d6:	4628      	mov	r0, r5
 80152d8:	f7f5 fe06 	bl	800aee8 <rosidl_runtime_c__String__fini>
 80152dc:	e7f6      	b.n	80152cc <std_msgs__msg__Header__init+0x28>
 80152de:	2000      	movs	r0, #0
 80152e0:	4770      	bx	lr
 80152e2:	bf00      	nop

080152e4 <std_msgs__msg__Header__fini>:
 80152e4:	b148      	cbz	r0, 80152fa <std_msgs__msg__Header__fini+0x16>
 80152e6:	b510      	push	{r4, lr}
 80152e8:	4604      	mov	r4, r0
 80152ea:	f000 f83b 	bl	8015364 <builtin_interfaces__msg__Time__fini>
 80152ee:	f104 0008 	add.w	r0, r4, #8
 80152f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152f6:	f7f5 bdf7 	b.w	800aee8 <rosidl_runtime_c__String__fini>
 80152fa:	4770      	bx	lr

080152fc <builtin_interfaces__msg__Time__get_type_hash>:
 80152fc:	4800      	ldr	r0, [pc, #0]	@ (8015300 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 80152fe:	4770      	bx	lr
 8015300:	20000ce4 	.word	0x20000ce4

08015304 <builtin_interfaces__msg__Time__get_type_description>:
 8015304:	4b03      	ldr	r3, [pc, #12]	@ (8015314 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8015306:	781a      	ldrb	r2, [r3, #0]
 8015308:	b90a      	cbnz	r2, 801530e <builtin_interfaces__msg__Time__get_type_description+0xa>
 801530a:	2201      	movs	r2, #1
 801530c:	701a      	strb	r2, [r3, #0]
 801530e:	4802      	ldr	r0, [pc, #8]	@ (8015318 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8015310:	4770      	bx	lr
 8015312:	bf00      	nop
 8015314:	20010359 	.word	0x20010359
 8015318:	0801ac8c 	.word	0x0801ac8c

0801531c <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 801531c:	4800      	ldr	r0, [pc, #0]	@ (8015320 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801531e:	4770      	bx	lr
 8015320:	0801ac68 	.word	0x0801ac68

08015324 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8015324:	4b09      	ldr	r3, [pc, #36]	@ (801534c <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8015326:	781a      	ldrb	r2, [r3, #0]
 8015328:	b96a      	cbnz	r2, 8015346 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 801532a:	b430      	push	{r4, r5}
 801532c:	4d08      	ldr	r5, [pc, #32]	@ (8015350 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801532e:	4c09      	ldr	r4, [pc, #36]	@ (8015354 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8015330:	2201      	movs	r2, #1
 8015332:	701a      	strb	r2, [r3, #0]
 8015334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801533a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801533c:	682b      	ldr	r3, [r5, #0]
 801533e:	4806      	ldr	r0, [pc, #24]	@ (8015358 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8015340:	6023      	str	r3, [r4, #0]
 8015342:	bc30      	pop	{r4, r5}
 8015344:	4770      	bx	lr
 8015346:	4804      	ldr	r0, [pc, #16]	@ (8015358 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8015348:	4770      	bx	lr
 801534a:	bf00      	nop
 801534c:	20010358 	.word	0x20010358
 8015350:	0801ac68 	.word	0x0801ac68
 8015354:	20010334 	.word	0x20010334
 8015358:	0801ac5c 	.word	0x0801ac5c

0801535c <builtin_interfaces__msg__Time__init>:
 801535c:	3800      	subs	r0, #0
 801535e:	bf18      	it	ne
 8015360:	2001      	movne	r0, #1
 8015362:	4770      	bx	lr

08015364 <builtin_interfaces__msg__Time__fini>:
 8015364:	4770      	bx	lr
 8015366:	bf00      	nop

08015368 <geometry_msgs__msg__Point__get_type_hash>:
 8015368:	4800      	ldr	r0, [pc, #0]	@ (801536c <geometry_msgs__msg__Point__get_type_hash+0x4>)
 801536a:	4770      	bx	lr
 801536c:	20000f70 	.word	0x20000f70

08015370 <geometry_msgs__msg__Point__get_type_description>:
 8015370:	4b03      	ldr	r3, [pc, #12]	@ (8015380 <geometry_msgs__msg__Point__get_type_description+0x10>)
 8015372:	781a      	ldrb	r2, [r3, #0]
 8015374:	b90a      	cbnz	r2, 801537a <geometry_msgs__msg__Point__get_type_description+0xa>
 8015376:	2201      	movs	r2, #1
 8015378:	701a      	strb	r2, [r3, #0]
 801537a:	4802      	ldr	r0, [pc, #8]	@ (8015384 <geometry_msgs__msg__Point__get_type_description+0x14>)
 801537c:	4770      	bx	lr
 801537e:	bf00      	nop
 8015380:	20010381 	.word	0x20010381
 8015384:	0801ace0 	.word	0x0801ace0

08015388 <geometry_msgs__msg__Point__get_individual_type_description_source>:
 8015388:	4800      	ldr	r0, [pc, #0]	@ (801538c <geometry_msgs__msg__Point__get_individual_type_description_source+0x4>)
 801538a:	4770      	bx	lr
 801538c:	0801acbc 	.word	0x0801acbc

08015390 <geometry_msgs__msg__Point__get_type_description_sources>:
 8015390:	4b09      	ldr	r3, [pc, #36]	@ (80153b8 <geometry_msgs__msg__Point__get_type_description_sources+0x28>)
 8015392:	781a      	ldrb	r2, [r3, #0]
 8015394:	b96a      	cbnz	r2, 80153b2 <geometry_msgs__msg__Point__get_type_description_sources+0x22>
 8015396:	b430      	push	{r4, r5}
 8015398:	4d08      	ldr	r5, [pc, #32]	@ (80153bc <geometry_msgs__msg__Point__get_type_description_sources+0x2c>)
 801539a:	4c09      	ldr	r4, [pc, #36]	@ (80153c0 <geometry_msgs__msg__Point__get_type_description_sources+0x30>)
 801539c:	2201      	movs	r2, #1
 801539e:	701a      	strb	r2, [r3, #0]
 80153a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153a8:	682b      	ldr	r3, [r5, #0]
 80153aa:	4806      	ldr	r0, [pc, #24]	@ (80153c4 <geometry_msgs__msg__Point__get_type_description_sources+0x34>)
 80153ac:	6023      	str	r3, [r4, #0]
 80153ae:	bc30      	pop	{r4, r5}
 80153b0:	4770      	bx	lr
 80153b2:	4804      	ldr	r0, [pc, #16]	@ (80153c4 <geometry_msgs__msg__Point__get_type_description_sources+0x34>)
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop
 80153b8:	20010380 	.word	0x20010380
 80153bc:	0801acbc 	.word	0x0801acbc
 80153c0:	2001035c 	.word	0x2001035c
 80153c4:	0801acb0 	.word	0x0801acb0

080153c8 <geometry_msgs__msg__Pose__get_type_hash>:
 80153c8:	4800      	ldr	r0, [pc, #0]	@ (80153cc <geometry_msgs__msg__Pose__get_type_hash+0x4>)
 80153ca:	4770      	bx	lr
 80153cc:	200010ec 	.word	0x200010ec

080153d0 <geometry_msgs__msg__Pose__get_type_description>:
 80153d0:	b570      	push	{r4, r5, r6, lr}
 80153d2:	4e0c      	ldr	r6, [pc, #48]	@ (8015404 <geometry_msgs__msg__Pose__get_type_description+0x34>)
 80153d4:	7835      	ldrb	r5, [r6, #0]
 80153d6:	b10d      	cbz	r5, 80153dc <geometry_msgs__msg__Pose__get_type_description+0xc>
 80153d8:	480b      	ldr	r0, [pc, #44]	@ (8015408 <geometry_msgs__msg__Pose__get_type_description+0x38>)
 80153da:	bd70      	pop	{r4, r5, r6, pc}
 80153dc:	4628      	mov	r0, r5
 80153de:	f7ff ffc7 	bl	8015370 <geometry_msgs__msg__Point__get_type_description>
 80153e2:	300c      	adds	r0, #12
 80153e4:	c807      	ldmia	r0, {r0, r1, r2}
 80153e6:	4c09      	ldr	r4, [pc, #36]	@ (801540c <geometry_msgs__msg__Pose__get_type_description+0x3c>)
 80153e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80153ec:	4628      	mov	r0, r5
 80153ee:	f000 f8d9 	bl	80155a4 <geometry_msgs__msg__Quaternion__get_type_description>
 80153f2:	300c      	adds	r0, #12
 80153f4:	c807      	ldmia	r0, {r0, r1, r2}
 80153f6:	3418      	adds	r4, #24
 80153f8:	2301      	movs	r3, #1
 80153fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80153fe:	7033      	strb	r3, [r6, #0]
 8015400:	4801      	ldr	r0, [pc, #4]	@ (8015408 <geometry_msgs__msg__Pose__get_type_description+0x38>)
 8015402:	bd70      	pop	{r4, r5, r6, pc}
 8015404:	200103f1 	.word	0x200103f1
 8015408:	0801ad34 	.word	0x0801ad34
 801540c:	20001198 	.word	0x20001198

08015410 <geometry_msgs__msg__Pose__get_individual_type_description_source>:
 8015410:	4800      	ldr	r0, [pc, #0]	@ (8015414 <geometry_msgs__msg__Pose__get_individual_type_description_source+0x4>)
 8015412:	4770      	bx	lr
 8015414:	0801ad10 	.word	0x0801ad10

08015418 <geometry_msgs__msg__Pose__get_type_description_sources>:
 8015418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801541a:	4e17      	ldr	r6, [pc, #92]	@ (8015478 <geometry_msgs__msg__Pose__get_type_description_sources+0x60>)
 801541c:	7837      	ldrb	r7, [r6, #0]
 801541e:	b10f      	cbz	r7, 8015424 <geometry_msgs__msg__Pose__get_type_description_sources+0xc>
 8015420:	4816      	ldr	r0, [pc, #88]	@ (801547c <geometry_msgs__msg__Pose__get_type_description_sources+0x64>)
 8015422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015424:	4d16      	ldr	r5, [pc, #88]	@ (8015480 <geometry_msgs__msg__Pose__get_type_description_sources+0x68>)
 8015426:	4c17      	ldr	r4, [pc, #92]	@ (8015484 <geometry_msgs__msg__Pose__get_type_description_sources+0x6c>)
 8015428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801542a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801542c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801542e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015430:	682b      	ldr	r3, [r5, #0]
 8015432:	4625      	mov	r5, r4
 8015434:	4638      	mov	r0, r7
 8015436:	f845 3b04 	str.w	r3, [r5], #4
 801543a:	f7ff ffa5 	bl	8015388 <geometry_msgs__msg__Point__get_individual_type_description_source>
 801543e:	4684      	mov	ip, r0
 8015440:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801544a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801544c:	4638      	mov	r0, r7
 801544e:	f8dc 3000 	ldr.w	r3, [ip]
 8015452:	602b      	str	r3, [r5, #0]
 8015454:	f000 f8b2 	bl	80155bc <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 8015458:	2301      	movs	r3, #1
 801545a:	4684      	mov	ip, r0
 801545c:	7033      	strb	r3, [r6, #0]
 801545e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015462:	3428      	adds	r4, #40	@ 0x28
 8015464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015466:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801546a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801546c:	f8dc 3000 	ldr.w	r3, [ip]
 8015470:	4802      	ldr	r0, [pc, #8]	@ (801547c <geometry_msgs__msg__Pose__get_type_description_sources+0x64>)
 8015472:	6023      	str	r3, [r4, #0]
 8015474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015476:	bf00      	nop
 8015478:	200103f0 	.word	0x200103f0
 801547c:	0801ad04 	.word	0x0801ad04
 8015480:	0801ad10 	.word	0x0801ad10
 8015484:	20010384 	.word	0x20010384

08015488 <geometry_msgs__msg__PoseWithCovariance__get_type_hash>:
 8015488:	4800      	ldr	r0, [pc, #0]	@ (801548c <geometry_msgs__msg__PoseWithCovariance__get_type_hash+0x4>)
 801548a:	4770      	bx	lr
 801548c:	200012b8 	.word	0x200012b8

08015490 <geometry_msgs__msg__PoseWithCovariance__get_type_description>:
 8015490:	b570      	push	{r4, r5, r6, lr}
 8015492:	4e11      	ldr	r6, [pc, #68]	@ (80154d8 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x48>)
 8015494:	7835      	ldrb	r5, [r6, #0]
 8015496:	b10d      	cbz	r5, 801549c <geometry_msgs__msg__PoseWithCovariance__get_type_description+0xc>
 8015498:	4810      	ldr	r0, [pc, #64]	@ (80154dc <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x4c>)
 801549a:	bd70      	pop	{r4, r5, r6, pc}
 801549c:	4628      	mov	r0, r5
 801549e:	f7ff ff67 	bl	8015370 <geometry_msgs__msg__Point__get_type_description>
 80154a2:	300c      	adds	r0, #12
 80154a4:	c807      	ldmia	r0, {r0, r1, r2}
 80154a6:	4c0e      	ldr	r4, [pc, #56]	@ (80154e0 <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x50>)
 80154a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80154ac:	4628      	mov	r0, r5
 80154ae:	f7ff ff8f 	bl	80153d0 <geometry_msgs__msg__Pose__get_type_description>
 80154b2:	300c      	adds	r0, #12
 80154b4:	c807      	ldmia	r0, {r0, r1, r2}
 80154b6:	f104 0318 	add.w	r3, r4, #24
 80154ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80154be:	4628      	mov	r0, r5
 80154c0:	f000 f870 	bl	80155a4 <geometry_msgs__msg__Quaternion__get_type_description>
 80154c4:	300c      	adds	r0, #12
 80154c6:	c807      	ldmia	r0, {r0, r1, r2}
 80154c8:	3430      	adds	r4, #48	@ 0x30
 80154ca:	2301      	movs	r3, #1
 80154cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80154d0:	7033      	strb	r3, [r6, #0]
 80154d2:	4802      	ldr	r0, [pc, #8]	@ (80154dc <geometry_msgs__msg__PoseWithCovariance__get_type_description+0x4c>)
 80154d4:	bd70      	pop	{r4, r5, r6, pc}
 80154d6:	bf00      	nop
 80154d8:	20010485 	.word	0x20010485
 80154dc:	0801ad88 	.word	0x0801ad88
 80154e0:	20001430 	.word	0x20001430

080154e4 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source>:
 80154e4:	4800      	ldr	r0, [pc, #0]	@ (80154e8 <geometry_msgs__msg__PoseWithCovariance__get_individual_type_description_source+0x4>)
 80154e6:	4770      	bx	lr
 80154e8:	0801ad64 	.word	0x0801ad64

080154ec <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources>:
 80154ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ee:	4e1e      	ldr	r6, [pc, #120]	@ (8015568 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x7c>)
 80154f0:	7837      	ldrb	r7, [r6, #0]
 80154f2:	b10f      	cbz	r7, 80154f8 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0xc>
 80154f4:	481d      	ldr	r0, [pc, #116]	@ (801556c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x80>)
 80154f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80154f8:	4d1d      	ldr	r5, [pc, #116]	@ (8015570 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x84>)
 80154fa:	4c1e      	ldr	r4, [pc, #120]	@ (8015574 <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x88>)
 80154fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015504:	682b      	ldr	r3, [r5, #0]
 8015506:	4625      	mov	r5, r4
 8015508:	4638      	mov	r0, r7
 801550a:	f845 3b04 	str.w	r3, [r5], #4
 801550e:	f7ff ff3b 	bl	8015388 <geometry_msgs__msg__Point__get_individual_type_description_source>
 8015512:	4684      	mov	ip, r0
 8015514:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801551a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801551e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015520:	4638      	mov	r0, r7
 8015522:	f8dc 3000 	ldr.w	r3, [ip]
 8015526:	602b      	str	r3, [r5, #0]
 8015528:	f7ff ff72 	bl	8015410 <geometry_msgs__msg__Pose__get_individual_type_description_source>
 801552c:	4684      	mov	ip, r0
 801552e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015532:	f104 0528 	add.w	r5, r4, #40	@ 0x28
 8015536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015538:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801553c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801553e:	4638      	mov	r0, r7
 8015540:	f8dc 3000 	ldr.w	r3, [ip]
 8015544:	602b      	str	r3, [r5, #0]
 8015546:	f000 f839 	bl	80155bc <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801554a:	2301      	movs	r3, #1
 801554c:	4684      	mov	ip, r0
 801554e:	7033      	strb	r3, [r6, #0]
 8015550:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015554:	344c      	adds	r4, #76	@ 0x4c
 8015556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015558:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801555c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801555e:	f8dc 3000 	ldr.w	r3, [ip]
 8015562:	4802      	ldr	r0, [pc, #8]	@ (801556c <geometry_msgs__msg__PoseWithCovariance__get_type_description_sources+0x80>)
 8015564:	6023      	str	r3, [r4, #0]
 8015566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015568:	20010484 	.word	0x20010484
 801556c:	0801ad58 	.word	0x0801ad58
 8015570:	0801ad64 	.word	0x0801ad64
 8015574:	200103f4 	.word	0x200103f4

08015578 <geometry_msgs__msg__PoseWithCovariance__init>:
 8015578:	b150      	cbz	r0, 8015590 <geometry_msgs__msg__PoseWithCovariance__init+0x18>
 801557a:	b510      	push	{r4, lr}
 801557c:	4604      	mov	r4, r0
 801557e:	f002 f8cd 	bl	801771c <geometry_msgs__msg__Pose__init>
 8015582:	b100      	cbz	r0, 8015586 <geometry_msgs__msg__PoseWithCovariance__init+0xe>
 8015584:	bd10      	pop	{r4, pc}
 8015586:	4620      	mov	r0, r4
 8015588:	f002 f8e8 	bl	801775c <geometry_msgs__msg__Pose__fini>
 801558c:	2000      	movs	r0, #0
 801558e:	bd10      	pop	{r4, pc}
 8015590:	2000      	movs	r0, #0
 8015592:	4770      	bx	lr

08015594 <geometry_msgs__msg__PoseWithCovariance__fini>:
 8015594:	b108      	cbz	r0, 801559a <geometry_msgs__msg__PoseWithCovariance__fini+0x6>
 8015596:	f002 b8e1 	b.w	801775c <geometry_msgs__msg__Pose__fini>
 801559a:	4770      	bx	lr

0801559c <geometry_msgs__msg__Quaternion__get_type_hash>:
 801559c:	4800      	ldr	r0, [pc, #0]	@ (80155a0 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 801559e:	4770      	bx	lr
 80155a0:	2000158c 	.word	0x2000158c

080155a4 <geometry_msgs__msg__Quaternion__get_type_description>:
 80155a4:	4b03      	ldr	r3, [pc, #12]	@ (80155b4 <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 80155a6:	781a      	ldrb	r2, [r3, #0]
 80155a8:	b90a      	cbnz	r2, 80155ae <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 80155aa:	2201      	movs	r2, #1
 80155ac:	701a      	strb	r2, [r3, #0]
 80155ae:	4802      	ldr	r0, [pc, #8]	@ (80155b8 <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 80155b0:	4770      	bx	lr
 80155b2:	bf00      	nop
 80155b4:	200104ad 	.word	0x200104ad
 80155b8:	0801addc 	.word	0x0801addc

080155bc <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 80155bc:	4800      	ldr	r0, [pc, #0]	@ (80155c0 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 80155be:	4770      	bx	lr
 80155c0:	0801adb8 	.word	0x0801adb8

080155c4 <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 80155c4:	4b09      	ldr	r3, [pc, #36]	@ (80155ec <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 80155c6:	781a      	ldrb	r2, [r3, #0]
 80155c8:	b96a      	cbnz	r2, 80155e6 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 80155ca:	b430      	push	{r4, r5}
 80155cc:	4d08      	ldr	r5, [pc, #32]	@ (80155f0 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 80155ce:	4c09      	ldr	r4, [pc, #36]	@ (80155f4 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 80155d0:	2201      	movs	r2, #1
 80155d2:	701a      	strb	r2, [r3, #0]
 80155d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80155dc:	682b      	ldr	r3, [r5, #0]
 80155de:	4806      	ldr	r0, [pc, #24]	@ (80155f8 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 80155e0:	6023      	str	r3, [r4, #0]
 80155e2:	bc30      	pop	{r4, r5}
 80155e4:	4770      	bx	lr
 80155e6:	4804      	ldr	r0, [pc, #16]	@ (80155f8 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 80155e8:	4770      	bx	lr
 80155ea:	bf00      	nop
 80155ec:	200104ac 	.word	0x200104ac
 80155f0:	0801adb8 	.word	0x0801adb8
 80155f4:	20010488 	.word	0x20010488
 80155f8:	0801adac 	.word	0x0801adac

080155fc <geometry_msgs__msg__Twist__get_type_hash>:
 80155fc:	4800      	ldr	r0, [pc, #0]	@ (8015600 <geometry_msgs__msg__Twist__get_type_hash+0x4>)
 80155fe:	4770      	bx	lr
 8015600:	20001788 	.word	0x20001788

08015604 <geometry_msgs__msg__Twist__get_type_description>:
 8015604:	b510      	push	{r4, lr}
 8015606:	4c08      	ldr	r4, [pc, #32]	@ (8015628 <geometry_msgs__msg__Twist__get_type_description+0x24>)
 8015608:	7820      	ldrb	r0, [r4, #0]
 801560a:	b108      	cbz	r0, 8015610 <geometry_msgs__msg__Twist__get_type_description+0xc>
 801560c:	4807      	ldr	r0, [pc, #28]	@ (801562c <geometry_msgs__msg__Twist__get_type_description+0x28>)
 801560e:	bd10      	pop	{r4, pc}
 8015610:	f000 f8b2 	bl	8015778 <geometry_msgs__msg__Vector3__get_type_description>
 8015614:	300c      	adds	r0, #12
 8015616:	c807      	ldmia	r0, {r0, r1, r2}
 8015618:	4b05      	ldr	r3, [pc, #20]	@ (8015630 <geometry_msgs__msg__Twist__get_type_description+0x2c>)
 801561a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801561e:	2301      	movs	r3, #1
 8015620:	4802      	ldr	r0, [pc, #8]	@ (801562c <geometry_msgs__msg__Twist__get_type_description+0x28>)
 8015622:	7023      	strb	r3, [r4, #0]
 8015624:	bd10      	pop	{r4, pc}
 8015626:	bf00      	nop
 8015628:	200104f9 	.word	0x200104f9
 801562c:	0801ae30 	.word	0x0801ae30
 8015630:	20001830 	.word	0x20001830

08015634 <geometry_msgs__msg__Twist__get_individual_type_description_source>:
 8015634:	4800      	ldr	r0, [pc, #0]	@ (8015638 <geometry_msgs__msg__Twist__get_individual_type_description_source+0x4>)
 8015636:	4770      	bx	lr
 8015638:	0801ae0c 	.word	0x0801ae0c

0801563c <geometry_msgs__msg__Twist__get_type_description_sources>:
 801563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801563e:	4e0f      	ldr	r6, [pc, #60]	@ (801567c <geometry_msgs__msg__Twist__get_type_description_sources+0x40>)
 8015640:	7837      	ldrb	r7, [r6, #0]
 8015642:	b10f      	cbz	r7, 8015648 <geometry_msgs__msg__Twist__get_type_description_sources+0xc>
 8015644:	480e      	ldr	r0, [pc, #56]	@ (8015680 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 8015646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015648:	4d0e      	ldr	r5, [pc, #56]	@ (8015684 <geometry_msgs__msg__Twist__get_type_description_sources+0x48>)
 801564a:	4c0f      	ldr	r4, [pc, #60]	@ (8015688 <geometry_msgs__msg__Twist__get_type_description_sources+0x4c>)
 801564c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801564e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015654:	682b      	ldr	r3, [r5, #0]
 8015656:	f844 3b04 	str.w	r3, [r4], #4
 801565a:	4638      	mov	r0, r7
 801565c:	f000 f898 	bl	8015790 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 8015660:	2301      	movs	r3, #1
 8015662:	4684      	mov	ip, r0
 8015664:	7033      	strb	r3, [r6, #0]
 8015666:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801566a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801566c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015672:	f8dc 3000 	ldr.w	r3, [ip]
 8015676:	4802      	ldr	r0, [pc, #8]	@ (8015680 <geometry_msgs__msg__Twist__get_type_description_sources+0x44>)
 8015678:	6023      	str	r3, [r4, #0]
 801567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801567c:	200104f8 	.word	0x200104f8
 8015680:	0801ae00 	.word	0x0801ae00
 8015684:	0801ae0c 	.word	0x0801ae0c
 8015688:	200104b0 	.word	0x200104b0

0801568c <geometry_msgs__msg__TwistWithCovariance__get_type_hash>:
 801568c:	4800      	ldr	r0, [pc, #0]	@ (8015690 <geometry_msgs__msg__TwistWithCovariance__get_type_hash+0x4>)
 801568e:	4770      	bx	lr
 8015690:	20001914 	.word	0x20001914

08015694 <geometry_msgs__msg__TwistWithCovariance__get_type_description>:
 8015694:	b570      	push	{r4, r5, r6, lr}
 8015696:	4e0c      	ldr	r6, [pc, #48]	@ (80156c8 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x34>)
 8015698:	7835      	ldrb	r5, [r6, #0]
 801569a:	b10d      	cbz	r5, 80156a0 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0xc>
 801569c:	480b      	ldr	r0, [pc, #44]	@ (80156cc <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x38>)
 801569e:	bd70      	pop	{r4, r5, r6, pc}
 80156a0:	4628      	mov	r0, r5
 80156a2:	f7ff ffaf 	bl	8015604 <geometry_msgs__msg__Twist__get_type_description>
 80156a6:	300c      	adds	r0, #12
 80156a8:	c807      	ldmia	r0, {r0, r1, r2}
 80156aa:	4c09      	ldr	r4, [pc, #36]	@ (80156d0 <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x3c>)
 80156ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80156b0:	4628      	mov	r0, r5
 80156b2:	f000 f861 	bl	8015778 <geometry_msgs__msg__Vector3__get_type_description>
 80156b6:	300c      	adds	r0, #12
 80156b8:	c807      	ldmia	r0, {r0, r1, r2}
 80156ba:	3418      	adds	r4, #24
 80156bc:	2301      	movs	r3, #1
 80156be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80156c2:	7033      	strb	r3, [r6, #0]
 80156c4:	4801      	ldr	r0, [pc, #4]	@ (80156cc <geometry_msgs__msg__TwistWithCovariance__get_type_description+0x38>)
 80156c6:	bd70      	pop	{r4, r5, r6, pc}
 80156c8:	20010569 	.word	0x20010569
 80156cc:	0801ae84 	.word	0x0801ae84
 80156d0:	20001a90 	.word	0x20001a90

080156d4 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source>:
 80156d4:	4800      	ldr	r0, [pc, #0]	@ (80156d8 <geometry_msgs__msg__TwistWithCovariance__get_individual_type_description_source+0x4>)
 80156d6:	4770      	bx	lr
 80156d8:	0801ae60 	.word	0x0801ae60

080156dc <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources>:
 80156dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156de:	4e17      	ldr	r6, [pc, #92]	@ (801573c <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x60>)
 80156e0:	7837      	ldrb	r7, [r6, #0]
 80156e2:	b10f      	cbz	r7, 80156e8 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0xc>
 80156e4:	4816      	ldr	r0, [pc, #88]	@ (8015740 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x64>)
 80156e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156e8:	4d16      	ldr	r5, [pc, #88]	@ (8015744 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x68>)
 80156ea:	4c17      	ldr	r4, [pc, #92]	@ (8015748 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x6c>)
 80156ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156f4:	682b      	ldr	r3, [r5, #0]
 80156f6:	4625      	mov	r5, r4
 80156f8:	4638      	mov	r0, r7
 80156fa:	f845 3b04 	str.w	r3, [r5], #4
 80156fe:	f7ff ff99 	bl	8015634 <geometry_msgs__msg__Twist__get_individual_type_description_source>
 8015702:	4684      	mov	ip, r0
 8015704:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801570a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801570e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015710:	4638      	mov	r0, r7
 8015712:	f8dc 3000 	ldr.w	r3, [ip]
 8015716:	602b      	str	r3, [r5, #0]
 8015718:	f000 f83a 	bl	8015790 <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 801571c:	2301      	movs	r3, #1
 801571e:	4684      	mov	ip, r0
 8015720:	7033      	strb	r3, [r6, #0]
 8015722:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015726:	3428      	adds	r4, #40	@ 0x28
 8015728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801572a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801572e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015730:	f8dc 3000 	ldr.w	r3, [ip]
 8015734:	4802      	ldr	r0, [pc, #8]	@ (8015740 <geometry_msgs__msg__TwistWithCovariance__get_type_description_sources+0x64>)
 8015736:	6023      	str	r3, [r4, #0]
 8015738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801573a:	bf00      	nop
 801573c:	20010568 	.word	0x20010568
 8015740:	0801ae54 	.word	0x0801ae54
 8015744:	0801ae60 	.word	0x0801ae60
 8015748:	200104fc 	.word	0x200104fc

0801574c <geometry_msgs__msg__TwistWithCovariance__init>:
 801574c:	b150      	cbz	r0, 8015764 <geometry_msgs__msg__TwistWithCovariance__init+0x18>
 801574e:	b510      	push	{r4, lr}
 8015750:	4604      	mov	r4, r0
 8015752:	f002 f827 	bl	80177a4 <geometry_msgs__msg__Twist__init>
 8015756:	b100      	cbz	r0, 801575a <geometry_msgs__msg__TwistWithCovariance__init+0xe>
 8015758:	bd10      	pop	{r4, pc}
 801575a:	4620      	mov	r0, r4
 801575c:	f002 f842 	bl	80177e4 <geometry_msgs__msg__Twist__fini>
 8015760:	2000      	movs	r0, #0
 8015762:	bd10      	pop	{r4, pc}
 8015764:	2000      	movs	r0, #0
 8015766:	4770      	bx	lr

08015768 <geometry_msgs__msg__TwistWithCovariance__fini>:
 8015768:	b108      	cbz	r0, 801576e <geometry_msgs__msg__TwistWithCovariance__fini+0x6>
 801576a:	f002 b83b 	b.w	80177e4 <geometry_msgs__msg__Twist__fini>
 801576e:	4770      	bx	lr

08015770 <geometry_msgs__msg__Vector3__get_type_hash>:
 8015770:	4800      	ldr	r0, [pc, #0]	@ (8015774 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 8015772:	4770      	bx	lr
 8015774:	20001bb8 	.word	0x20001bb8

08015778 <geometry_msgs__msg__Vector3__get_type_description>:
 8015778:	4b03      	ldr	r3, [pc, #12]	@ (8015788 <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 801577a:	781a      	ldrb	r2, [r3, #0]
 801577c:	b90a      	cbnz	r2, 8015782 <geometry_msgs__msg__Vector3__get_type_description+0xa>
 801577e:	2201      	movs	r2, #1
 8015780:	701a      	strb	r2, [r3, #0]
 8015782:	4802      	ldr	r0, [pc, #8]	@ (801578c <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 8015784:	4770      	bx	lr
 8015786:	bf00      	nop
 8015788:	20010591 	.word	0x20010591
 801578c:	0801aed8 	.word	0x0801aed8

08015790 <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 8015790:	4800      	ldr	r0, [pc, #0]	@ (8015794 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 8015792:	4770      	bx	lr
 8015794:	0801aeb4 	.word	0x0801aeb4

08015798 <geometry_msgs__msg__Vector3__get_type_description_sources>:
 8015798:	4b09      	ldr	r3, [pc, #36]	@ (80157c0 <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 801579a:	781a      	ldrb	r2, [r3, #0]
 801579c:	b96a      	cbnz	r2, 80157ba <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 801579e:	b430      	push	{r4, r5}
 80157a0:	4d08      	ldr	r5, [pc, #32]	@ (80157c4 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 80157a2:	4c09      	ldr	r4, [pc, #36]	@ (80157c8 <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 80157a4:	2201      	movs	r2, #1
 80157a6:	701a      	strb	r2, [r3, #0]
 80157a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157b0:	682b      	ldr	r3, [r5, #0]
 80157b2:	4806      	ldr	r0, [pc, #24]	@ (80157cc <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 80157b4:	6023      	str	r3, [r4, #0]
 80157b6:	bc30      	pop	{r4, r5}
 80157b8:	4770      	bx	lr
 80157ba:	4804      	ldr	r0, [pc, #16]	@ (80157cc <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 80157bc:	4770      	bx	lr
 80157be:	bf00      	nop
 80157c0:	20010590 	.word	0x20010590
 80157c4:	0801aeb4 	.word	0x0801aeb4
 80157c8:	2001056c 	.word	0x2001056c
 80157cc:	0801aea8 	.word	0x0801aea8

080157d0 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_init_function>:
 80157d0:	f001 bfa4 	b.w	801771c <geometry_msgs__msg__Pose__init>

080157d4 <geometry_msgs__msg__Pose__rosidl_typesupport_introspection_c__Pose_fini_function>:
 80157d4:	f001 bfc2 	b.w	801775c <geometry_msgs__msg__Pose__fini>

080157d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 80157d8:	b510      	push	{r4, lr}
 80157da:	f002 f819 	bl	8017810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80157de:	4c07      	ldr	r4, [pc, #28]	@ (80157fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x24>)
 80157e0:	60e0      	str	r0, [r4, #12]
 80157e2:	f000 f815 	bl	8015810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80157e6:	4b06      	ldr	r3, [pc, #24]	@ (8015800 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 80157e8:	64a0      	str	r0, [r4, #72]	@ 0x48
 80157ea:	681a      	ldr	r2, [r3, #0]
 80157ec:	b10a      	cbz	r2, 80157f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x1a>
 80157ee:	4804      	ldr	r0, [pc, #16]	@ (8015800 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 80157f0:	bd10      	pop	{r4, pc}
 80157f2:	4a04      	ldr	r2, [pc, #16]	@ (8015804 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x2c>)
 80157f4:	4802      	ldr	r0, [pc, #8]	@ (8015800 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x28>)
 80157f6:	6812      	ldr	r2, [r2, #0]
 80157f8:	601a      	str	r2, [r3, #0]
 80157fa:	bd10      	pop	{r4, pc}
 80157fc:	20001df8 	.word	0x20001df8
 8015800:	20001de0 	.word	0x20001de0
 8015804:	20000188 	.word	0x20000188

08015808 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 8015808:	f001 bfb6 	b.w	8017778 <geometry_msgs__msg__Quaternion__init>

0801580c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 801580c:	f001 bfc8 	b.w	80177a0 <geometry_msgs__msg__Quaternion__fini>

08015810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8015810:	4b04      	ldr	r3, [pc, #16]	@ (8015824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8015812:	681a      	ldr	r2, [r3, #0]
 8015814:	b10a      	cbz	r2, 801581a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 8015816:	4803      	ldr	r0, [pc, #12]	@ (8015824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 8015818:	4770      	bx	lr
 801581a:	4a03      	ldr	r2, [pc, #12]	@ (8015828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 801581c:	4801      	ldr	r0, [pc, #4]	@ (8015824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 801581e:	6812      	ldr	r2, [r2, #0]
 8015820:	601a      	str	r2, [r3, #0]
 8015822:	4770      	bx	lr
 8015824:	20001e70 	.word	0x20001e70
 8015828:	20000188 	.word	0x20000188

0801582c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 801582c:	f001 bfba 	b.w	80177a4 <geometry_msgs__msg__Twist__init>

08015830 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 8015830:	f001 bfd8 	b.w	80177e4 <geometry_msgs__msg__Twist__fini>

08015834 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8015834:	b510      	push	{r4, lr}
 8015836:	f000 f819 	bl	801586c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801583a:	4c07      	ldr	r4, [pc, #28]	@ (8015858 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 801583c:	60e0      	str	r0, [r4, #12]
 801583e:	f000 f815 	bl	801586c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015842:	4b06      	ldr	r3, [pc, #24]	@ (801585c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8015844:	64a0      	str	r0, [r4, #72]	@ 0x48
 8015846:	681a      	ldr	r2, [r3, #0]
 8015848:	b10a      	cbz	r2, 801584e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 801584a:	4804      	ldr	r0, [pc, #16]	@ (801585c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 801584c:	bd10      	pop	{r4, pc}
 801584e:	4a04      	ldr	r2, [pc, #16]	@ (8015860 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 8015850:	4802      	ldr	r0, [pc, #8]	@ (801585c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8015852:	6812      	ldr	r2, [r2, #0]
 8015854:	601a      	str	r2, [r3, #0]
 8015856:	bd10      	pop	{r4, pc}
 8015858:	20001f90 	.word	0x20001f90
 801585c:	20001f78 	.word	0x20001f78
 8015860:	20000188 	.word	0x20000188

08015864 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8015864:	f001 bfca 	b.w	80177fc <geometry_msgs__msg__Vector3__init>

08015868 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8015868:	f001 bfcc 	b.w	8017804 <geometry_msgs__msg__Vector3__fini>

0801586c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 801586c:	4b04      	ldr	r3, [pc, #16]	@ (8015880 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 801586e:	681a      	ldr	r2, [r3, #0]
 8015870:	b10a      	cbz	r2, 8015876 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 8015872:	4803      	ldr	r0, [pc, #12]	@ (8015880 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 8015874:	4770      	bx	lr
 8015876:	4a03      	ldr	r2, [pc, #12]	@ (8015884 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 8015878:	4801      	ldr	r0, [pc, #4]	@ (8015880 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 801587a:	6812      	ldr	r2, [r2, #0]
 801587c:	601a      	str	r2, [r3, #0]
 801587e:	4770      	bx	lr
 8015880:	20002008 	.word	0x20002008
 8015884:	20000188 	.word	0x20000188

08015888 <get_serialized_size_geometry_msgs__msg__Pose>:
 8015888:	b570      	push	{r4, r5, r6, lr}
 801588a:	4604      	mov	r4, r0
 801588c:	b148      	cbz	r0, 80158a2 <get_serialized_size_geometry_msgs__msg__Pose+0x1a>
 801588e:	460d      	mov	r5, r1
 8015890:	f001 ffcc 	bl	801782c <get_serialized_size_geometry_msgs__msg__Point>
 8015894:	4606      	mov	r6, r0
 8015896:	1829      	adds	r1, r5, r0
 8015898:	f104 0018 	add.w	r0, r4, #24
 801589c:	f000 f864 	bl	8015968 <get_serialized_size_geometry_msgs__msg__Quaternion>
 80158a0:	4430      	add	r0, r6
 80158a2:	bd70      	pop	{r4, r5, r6, pc}

080158a4 <_Pose__cdr_deserialize>:
 80158a4:	b570      	push	{r4, r5, r6, lr}
 80158a6:	460c      	mov	r4, r1
 80158a8:	b189      	cbz	r1, 80158ce <_Pose__cdr_deserialize+0x2a>
 80158aa:	4605      	mov	r5, r0
 80158ac:	f002 f84a 	bl	8017944 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80158b0:	6843      	ldr	r3, [r0, #4]
 80158b2:	4621      	mov	r1, r4
 80158b4:	68db      	ldr	r3, [r3, #12]
 80158b6:	4628      	mov	r0, r5
 80158b8:	4798      	blx	r3
 80158ba:	f000 f909 	bl	8015ad0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80158be:	6843      	ldr	r3, [r0, #4]
 80158c0:	f104 0118 	add.w	r1, r4, #24
 80158c4:	4628      	mov	r0, r5
 80158c6:	68db      	ldr	r3, [r3, #12]
 80158c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158cc:	4718      	bx	r3
 80158ce:	4608      	mov	r0, r1
 80158d0:	bd70      	pop	{r4, r5, r6, pc}
 80158d2:	bf00      	nop

080158d4 <_Pose__cdr_serialize>:
 80158d4:	b198      	cbz	r0, 80158fe <_Pose__cdr_serialize+0x2a>
 80158d6:	b570      	push	{r4, r5, r6, lr}
 80158d8:	460d      	mov	r5, r1
 80158da:	4604      	mov	r4, r0
 80158dc:	f002 f832 	bl	8017944 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>
 80158e0:	6843      	ldr	r3, [r0, #4]
 80158e2:	4629      	mov	r1, r5
 80158e4:	689b      	ldr	r3, [r3, #8]
 80158e6:	4620      	mov	r0, r4
 80158e8:	4798      	blx	r3
 80158ea:	f000 f8f1 	bl	8015ad0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 80158ee:	6843      	ldr	r3, [r0, #4]
 80158f0:	4629      	mov	r1, r5
 80158f2:	f104 0018 	add.w	r0, r4, #24
 80158f6:	689b      	ldr	r3, [r3, #8]
 80158f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158fc:	4718      	bx	r3
 80158fe:	4770      	bx	lr

08015900 <_Pose__get_serialized_size>:
 8015900:	b538      	push	{r3, r4, r5, lr}
 8015902:	4604      	mov	r4, r0
 8015904:	b148      	cbz	r0, 801591a <_Pose__get_serialized_size+0x1a>
 8015906:	2100      	movs	r1, #0
 8015908:	f001 ff90 	bl	801782c <get_serialized_size_geometry_msgs__msg__Point>
 801590c:	4605      	mov	r5, r0
 801590e:	4601      	mov	r1, r0
 8015910:	f104 0018 	add.w	r0, r4, #24
 8015914:	f000 f828 	bl	8015968 <get_serialized_size_geometry_msgs__msg__Quaternion>
 8015918:	4428      	add	r0, r5
 801591a:	bd38      	pop	{r3, r4, r5, pc}

0801591c <_Pose__max_serialized_size>:
 801591c:	b510      	push	{r4, lr}
 801591e:	b082      	sub	sp, #8
 8015920:	2301      	movs	r3, #1
 8015922:	2100      	movs	r1, #0
 8015924:	f10d 0007 	add.w	r0, sp, #7
 8015928:	f88d 3007 	strb.w	r3, [sp, #7]
 801592c:	f001 fff0 	bl	8017910 <max_serialized_size_geometry_msgs__msg__Point>
 8015930:	4604      	mov	r4, r0
 8015932:	4601      	mov	r1, r0
 8015934:	f10d 0007 	add.w	r0, sp, #7
 8015938:	f000 f8a8 	bl	8015a8c <max_serialized_size_geometry_msgs__msg__Quaternion>
 801593c:	4420      	add	r0, r4
 801593e:	b002      	add	sp, #8
 8015940:	bd10      	pop	{r4, pc}
 8015942:	bf00      	nop

08015944 <max_serialized_size_geometry_msgs__msg__Pose>:
 8015944:	2301      	movs	r3, #1
 8015946:	b570      	push	{r4, r5, r6, lr}
 8015948:	7003      	strb	r3, [r0, #0]
 801594a:	4605      	mov	r5, r0
 801594c:	460e      	mov	r6, r1
 801594e:	f001 ffdf 	bl	8017910 <max_serialized_size_geometry_msgs__msg__Point>
 8015952:	4604      	mov	r4, r0
 8015954:	1831      	adds	r1, r6, r0
 8015956:	4628      	mov	r0, r5
 8015958:	f000 f898 	bl	8015a8c <max_serialized_size_geometry_msgs__msg__Quaternion>
 801595c:	4420      	add	r0, r4
 801595e:	bd70      	pop	{r4, r5, r6, pc}

08015960 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose>:
 8015960:	4800      	ldr	r0, [pc, #0]	@ (8015964 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Pose+0x4>)
 8015962:	4770      	bx	lr
 8015964:	200020d4 	.word	0x200020d4

08015968 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 8015968:	b1f0      	cbz	r0, 80159a8 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 801596a:	b570      	push	{r4, r5, r6, lr}
 801596c:	460d      	mov	r5, r1
 801596e:	4628      	mov	r0, r5
 8015970:	2108      	movs	r1, #8
 8015972:	f7f7 fa97 	bl	800cea4 <ucdr_alignment>
 8015976:	2108      	movs	r1, #8
 8015978:	186c      	adds	r4, r5, r1
 801597a:	4404      	add	r4, r0
 801597c:	4620      	mov	r0, r4
 801597e:	f7f7 fa91 	bl	800cea4 <ucdr_alignment>
 8015982:	f100 0608 	add.w	r6, r0, #8
 8015986:	4426      	add	r6, r4
 8015988:	2108      	movs	r1, #8
 801598a:	4630      	mov	r0, r6
 801598c:	f7f7 fa8a 	bl	800cea4 <ucdr_alignment>
 8015990:	f100 0408 	add.w	r4, r0, #8
 8015994:	4434      	add	r4, r6
 8015996:	2108      	movs	r1, #8
 8015998:	4620      	mov	r0, r4
 801599a:	f7f7 fa83 	bl	800cea4 <ucdr_alignment>
 801599e:	f1c5 0508 	rsb	r5, r5, #8
 80159a2:	4405      	add	r5, r0
 80159a4:	1928      	adds	r0, r5, r4
 80159a6:	bd70      	pop	{r4, r5, r6, pc}
 80159a8:	4770      	bx	lr
 80159aa:	bf00      	nop

080159ac <_Quaternion__cdr_deserialize>:
 80159ac:	b538      	push	{r3, r4, r5, lr}
 80159ae:	460c      	mov	r4, r1
 80159b0:	b199      	cbz	r1, 80159da <_Quaternion__cdr_deserialize+0x2e>
 80159b2:	4605      	mov	r5, r0
 80159b4:	f7f7 f898 	bl	800cae8 <ucdr_deserialize_double>
 80159b8:	f104 0108 	add.w	r1, r4, #8
 80159bc:	4628      	mov	r0, r5
 80159be:	f7f7 f893 	bl	800cae8 <ucdr_deserialize_double>
 80159c2:	f104 0110 	add.w	r1, r4, #16
 80159c6:	4628      	mov	r0, r5
 80159c8:	f7f7 f88e 	bl	800cae8 <ucdr_deserialize_double>
 80159cc:	f104 0118 	add.w	r1, r4, #24
 80159d0:	4628      	mov	r0, r5
 80159d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159d6:	f7f7 b887 	b.w	800cae8 <ucdr_deserialize_double>
 80159da:	4608      	mov	r0, r1
 80159dc:	bd38      	pop	{r3, r4, r5, pc}
 80159de:	bf00      	nop

080159e0 <_Quaternion__cdr_serialize>:
 80159e0:	b1c0      	cbz	r0, 8015a14 <_Quaternion__cdr_serialize+0x34>
 80159e2:	b538      	push	{r3, r4, r5, lr}
 80159e4:	ed90 0b00 	vldr	d0, [r0]
 80159e8:	460d      	mov	r5, r1
 80159ea:	4604      	mov	r4, r0
 80159ec:	4608      	mov	r0, r1
 80159ee:	f7f6 feeb 	bl	800c7c8 <ucdr_serialize_double>
 80159f2:	ed94 0b02 	vldr	d0, [r4, #8]
 80159f6:	4628      	mov	r0, r5
 80159f8:	f7f6 fee6 	bl	800c7c8 <ucdr_serialize_double>
 80159fc:	ed94 0b04 	vldr	d0, [r4, #16]
 8015a00:	4628      	mov	r0, r5
 8015a02:	f7f6 fee1 	bl	800c7c8 <ucdr_serialize_double>
 8015a06:	ed94 0b06 	vldr	d0, [r4, #24]
 8015a0a:	4628      	mov	r0, r5
 8015a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a10:	f7f6 beda 	b.w	800c7c8 <ucdr_serialize_double>
 8015a14:	4770      	bx	lr
 8015a16:	bf00      	nop

08015a18 <_Quaternion__get_serialized_size>:
 8015a18:	b1d8      	cbz	r0, 8015a52 <_Quaternion__get_serialized_size+0x3a>
 8015a1a:	b538      	push	{r3, r4, r5, lr}
 8015a1c:	2108      	movs	r1, #8
 8015a1e:	2000      	movs	r0, #0
 8015a20:	f7f7 fa40 	bl	800cea4 <ucdr_alignment>
 8015a24:	f100 0408 	add.w	r4, r0, #8
 8015a28:	2108      	movs	r1, #8
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	f7f7 fa3a 	bl	800cea4 <ucdr_alignment>
 8015a30:	f100 0508 	add.w	r5, r0, #8
 8015a34:	4425      	add	r5, r4
 8015a36:	2108      	movs	r1, #8
 8015a38:	4628      	mov	r0, r5
 8015a3a:	f7f7 fa33 	bl	800cea4 <ucdr_alignment>
 8015a3e:	f100 0408 	add.w	r4, r0, #8
 8015a42:	442c      	add	r4, r5
 8015a44:	2108      	movs	r1, #8
 8015a46:	4620      	mov	r0, r4
 8015a48:	f7f7 fa2c 	bl	800cea4 <ucdr_alignment>
 8015a4c:	3008      	adds	r0, #8
 8015a4e:	4420      	add	r0, r4
 8015a50:	bd38      	pop	{r3, r4, r5, pc}
 8015a52:	4770      	bx	lr

08015a54 <_Quaternion__max_serialized_size>:
 8015a54:	b538      	push	{r3, r4, r5, lr}
 8015a56:	2108      	movs	r1, #8
 8015a58:	2000      	movs	r0, #0
 8015a5a:	f7f7 fa23 	bl	800cea4 <ucdr_alignment>
 8015a5e:	f100 0408 	add.w	r4, r0, #8
 8015a62:	2108      	movs	r1, #8
 8015a64:	4620      	mov	r0, r4
 8015a66:	f7f7 fa1d 	bl	800cea4 <ucdr_alignment>
 8015a6a:	f100 0508 	add.w	r5, r0, #8
 8015a6e:	4425      	add	r5, r4
 8015a70:	2108      	movs	r1, #8
 8015a72:	4628      	mov	r0, r5
 8015a74:	f7f7 fa16 	bl	800cea4 <ucdr_alignment>
 8015a78:	f100 0408 	add.w	r4, r0, #8
 8015a7c:	442c      	add	r4, r5
 8015a7e:	2108      	movs	r1, #8
 8015a80:	4620      	mov	r0, r4
 8015a82:	f7f7 fa0f 	bl	800cea4 <ucdr_alignment>
 8015a86:	3008      	adds	r0, #8
 8015a88:	4420      	add	r0, r4
 8015a8a:	bd38      	pop	{r3, r4, r5, pc}

08015a8c <max_serialized_size_geometry_msgs__msg__Quaternion>:
 8015a8c:	b570      	push	{r4, r5, r6, lr}
 8015a8e:	2301      	movs	r3, #1
 8015a90:	460c      	mov	r4, r1
 8015a92:	7003      	strb	r3, [r0, #0]
 8015a94:	2108      	movs	r1, #8
 8015a96:	4620      	mov	r0, r4
 8015a98:	f7f7 fa04 	bl	800cea4 <ucdr_alignment>
 8015a9c:	2108      	movs	r1, #8
 8015a9e:	1863      	adds	r3, r4, r1
 8015aa0:	18c5      	adds	r5, r0, r3
 8015aa2:	4628      	mov	r0, r5
 8015aa4:	f7f7 f9fe 	bl	800cea4 <ucdr_alignment>
 8015aa8:	f100 0608 	add.w	r6, r0, #8
 8015aac:	442e      	add	r6, r5
 8015aae:	2108      	movs	r1, #8
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	f7f7 f9f7 	bl	800cea4 <ucdr_alignment>
 8015ab6:	f100 0508 	add.w	r5, r0, #8
 8015aba:	4435      	add	r5, r6
 8015abc:	2108      	movs	r1, #8
 8015abe:	4628      	mov	r0, r5
 8015ac0:	f7f7 f9f0 	bl	800cea4 <ucdr_alignment>
 8015ac4:	f1c4 0408 	rsb	r4, r4, #8
 8015ac8:	4420      	add	r0, r4
 8015aca:	4428      	add	r0, r5
 8015acc:	bd70      	pop	{r4, r5, r6, pc}
 8015ace:	bf00      	nop

08015ad0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 8015ad0:	4800      	ldr	r0, [pc, #0]	@ (8015ad4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 8015ad2:	4770      	bx	lr
 8015ad4:	20002108 	.word	0x20002108

08015ad8 <get_serialized_size_geometry_msgs__msg__Twist>:
 8015ad8:	b570      	push	{r4, r5, r6, lr}
 8015ada:	4604      	mov	r4, r0
 8015adc:	b148      	cbz	r0, 8015af2 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 8015ade:	460d      	mov	r5, r1
 8015ae0:	f000 f86a 	bl	8015bb8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8015ae4:	4606      	mov	r6, r0
 8015ae6:	1829      	adds	r1, r5, r0
 8015ae8:	f104 0018 	add.w	r0, r4, #24
 8015aec:	f000 f864 	bl	8015bb8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8015af0:	4430      	add	r0, r6
 8015af2:	bd70      	pop	{r4, r5, r6, pc}

08015af4 <_Twist__cdr_deserialize>:
 8015af4:	b570      	push	{r4, r5, r6, lr}
 8015af6:	460c      	mov	r4, r1
 8015af8:	b189      	cbz	r1, 8015b1e <_Twist__cdr_deserialize+0x2a>
 8015afa:	4605      	mov	r5, r0
 8015afc:	f000 f8e8 	bl	8015cd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015b00:	6843      	ldr	r3, [r0, #4]
 8015b02:	4621      	mov	r1, r4
 8015b04:	68db      	ldr	r3, [r3, #12]
 8015b06:	4628      	mov	r0, r5
 8015b08:	4798      	blx	r3
 8015b0a:	f000 f8e1 	bl	8015cd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015b0e:	6843      	ldr	r3, [r0, #4]
 8015b10:	f104 0118 	add.w	r1, r4, #24
 8015b14:	4628      	mov	r0, r5
 8015b16:	68db      	ldr	r3, [r3, #12]
 8015b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b1c:	4718      	bx	r3
 8015b1e:	4608      	mov	r0, r1
 8015b20:	bd70      	pop	{r4, r5, r6, pc}
 8015b22:	bf00      	nop

08015b24 <_Twist__cdr_serialize>:
 8015b24:	b198      	cbz	r0, 8015b4e <_Twist__cdr_serialize+0x2a>
 8015b26:	b570      	push	{r4, r5, r6, lr}
 8015b28:	460d      	mov	r5, r1
 8015b2a:	4604      	mov	r4, r0
 8015b2c:	f000 f8d0 	bl	8015cd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015b30:	6843      	ldr	r3, [r0, #4]
 8015b32:	4629      	mov	r1, r5
 8015b34:	689b      	ldr	r3, [r3, #8]
 8015b36:	4620      	mov	r0, r4
 8015b38:	4798      	blx	r3
 8015b3a:	f000 f8c9 	bl	8015cd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8015b3e:	6843      	ldr	r3, [r0, #4]
 8015b40:	4629      	mov	r1, r5
 8015b42:	f104 0018 	add.w	r0, r4, #24
 8015b46:	689b      	ldr	r3, [r3, #8]
 8015b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b4c:	4718      	bx	r3
 8015b4e:	4770      	bx	lr

08015b50 <_Twist__get_serialized_size>:
 8015b50:	b538      	push	{r3, r4, r5, lr}
 8015b52:	4604      	mov	r4, r0
 8015b54:	b148      	cbz	r0, 8015b6a <_Twist__get_serialized_size+0x1a>
 8015b56:	2100      	movs	r1, #0
 8015b58:	f000 f82e 	bl	8015bb8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8015b5c:	4605      	mov	r5, r0
 8015b5e:	4601      	mov	r1, r0
 8015b60:	f104 0018 	add.w	r0, r4, #24
 8015b64:	f000 f828 	bl	8015bb8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8015b68:	4428      	add	r0, r5
 8015b6a:	bd38      	pop	{r3, r4, r5, pc}

08015b6c <_Twist__max_serialized_size>:
 8015b6c:	b510      	push	{r4, lr}
 8015b6e:	b082      	sub	sp, #8
 8015b70:	2301      	movs	r3, #1
 8015b72:	2100      	movs	r1, #0
 8015b74:	f10d 0007 	add.w	r0, sp, #7
 8015b78:	f88d 3007 	strb.w	r3, [sp, #7]
 8015b7c:	f000 f88e 	bl	8015c9c <max_serialized_size_geometry_msgs__msg__Vector3>
 8015b80:	4604      	mov	r4, r0
 8015b82:	4601      	mov	r1, r0
 8015b84:	f10d 0007 	add.w	r0, sp, #7
 8015b88:	f000 f888 	bl	8015c9c <max_serialized_size_geometry_msgs__msg__Vector3>
 8015b8c:	4420      	add	r0, r4
 8015b8e:	b002      	add	sp, #8
 8015b90:	bd10      	pop	{r4, pc}
 8015b92:	bf00      	nop

08015b94 <max_serialized_size_geometry_msgs__msg__Twist>:
 8015b94:	2301      	movs	r3, #1
 8015b96:	b570      	push	{r4, r5, r6, lr}
 8015b98:	7003      	strb	r3, [r0, #0]
 8015b9a:	4605      	mov	r5, r0
 8015b9c:	460e      	mov	r6, r1
 8015b9e:	f000 f87d 	bl	8015c9c <max_serialized_size_geometry_msgs__msg__Vector3>
 8015ba2:	4604      	mov	r4, r0
 8015ba4:	1831      	adds	r1, r6, r0
 8015ba6:	4628      	mov	r0, r5
 8015ba8:	f000 f878 	bl	8015c9c <max_serialized_size_geometry_msgs__msg__Vector3>
 8015bac:	4420      	add	r0, r4
 8015bae:	bd70      	pop	{r4, r5, r6, pc}

08015bb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8015bb0:	4800      	ldr	r0, [pc, #0]	@ (8015bb4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 8015bb2:	4770      	bx	lr
 8015bb4:	2000213c 	.word	0x2000213c

08015bb8 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8015bb8:	b1b8      	cbz	r0, 8015bea <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8015bba:	b570      	push	{r4, r5, r6, lr}
 8015bbc:	460d      	mov	r5, r1
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	2108      	movs	r1, #8
 8015bc2:	f7f7 f96f 	bl	800cea4 <ucdr_alignment>
 8015bc6:	2108      	movs	r1, #8
 8015bc8:	186e      	adds	r6, r5, r1
 8015bca:	4406      	add	r6, r0
 8015bcc:	4630      	mov	r0, r6
 8015bce:	f7f7 f969 	bl	800cea4 <ucdr_alignment>
 8015bd2:	f100 0408 	add.w	r4, r0, #8
 8015bd6:	4434      	add	r4, r6
 8015bd8:	2108      	movs	r1, #8
 8015bda:	4620      	mov	r0, r4
 8015bdc:	f7f7 f962 	bl	800cea4 <ucdr_alignment>
 8015be0:	f1c5 0508 	rsb	r5, r5, #8
 8015be4:	4405      	add	r5, r0
 8015be6:	1928      	adds	r0, r5, r4
 8015be8:	bd70      	pop	{r4, r5, r6, pc}
 8015bea:	4770      	bx	lr

08015bec <_Vector3__cdr_deserialize>:
 8015bec:	b538      	push	{r3, r4, r5, lr}
 8015bee:	460c      	mov	r4, r1
 8015bf0:	b171      	cbz	r1, 8015c10 <_Vector3__cdr_deserialize+0x24>
 8015bf2:	4605      	mov	r5, r0
 8015bf4:	f7f6 ff78 	bl	800cae8 <ucdr_deserialize_double>
 8015bf8:	f104 0108 	add.w	r1, r4, #8
 8015bfc:	4628      	mov	r0, r5
 8015bfe:	f7f6 ff73 	bl	800cae8 <ucdr_deserialize_double>
 8015c02:	f104 0110 	add.w	r1, r4, #16
 8015c06:	4628      	mov	r0, r5
 8015c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c0c:	f7f6 bf6c 	b.w	800cae8 <ucdr_deserialize_double>
 8015c10:	4608      	mov	r0, r1
 8015c12:	bd38      	pop	{r3, r4, r5, pc}

08015c14 <_Vector3__cdr_serialize>:
 8015c14:	b198      	cbz	r0, 8015c3e <_Vector3__cdr_serialize+0x2a>
 8015c16:	b538      	push	{r3, r4, r5, lr}
 8015c18:	ed90 0b00 	vldr	d0, [r0]
 8015c1c:	460d      	mov	r5, r1
 8015c1e:	4604      	mov	r4, r0
 8015c20:	4608      	mov	r0, r1
 8015c22:	f7f6 fdd1 	bl	800c7c8 <ucdr_serialize_double>
 8015c26:	ed94 0b02 	vldr	d0, [r4, #8]
 8015c2a:	4628      	mov	r0, r5
 8015c2c:	f7f6 fdcc 	bl	800c7c8 <ucdr_serialize_double>
 8015c30:	ed94 0b04 	vldr	d0, [r4, #16]
 8015c34:	4628      	mov	r0, r5
 8015c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c3a:	f7f6 bdc5 	b.w	800c7c8 <ucdr_serialize_double>
 8015c3e:	4770      	bx	lr

08015c40 <_Vector3__get_serialized_size>:
 8015c40:	b1a0      	cbz	r0, 8015c6c <_Vector3__get_serialized_size+0x2c>
 8015c42:	b538      	push	{r3, r4, r5, lr}
 8015c44:	2108      	movs	r1, #8
 8015c46:	2000      	movs	r0, #0
 8015c48:	f7f7 f92c 	bl	800cea4 <ucdr_alignment>
 8015c4c:	f100 0508 	add.w	r5, r0, #8
 8015c50:	2108      	movs	r1, #8
 8015c52:	4628      	mov	r0, r5
 8015c54:	f7f7 f926 	bl	800cea4 <ucdr_alignment>
 8015c58:	f100 0408 	add.w	r4, r0, #8
 8015c5c:	442c      	add	r4, r5
 8015c5e:	2108      	movs	r1, #8
 8015c60:	4620      	mov	r0, r4
 8015c62:	f7f7 f91f 	bl	800cea4 <ucdr_alignment>
 8015c66:	3008      	adds	r0, #8
 8015c68:	4420      	add	r0, r4
 8015c6a:	bd38      	pop	{r3, r4, r5, pc}
 8015c6c:	4770      	bx	lr
 8015c6e:	bf00      	nop

08015c70 <_Vector3__max_serialized_size>:
 8015c70:	b538      	push	{r3, r4, r5, lr}
 8015c72:	2108      	movs	r1, #8
 8015c74:	2000      	movs	r0, #0
 8015c76:	f7f7 f915 	bl	800cea4 <ucdr_alignment>
 8015c7a:	f100 0508 	add.w	r5, r0, #8
 8015c7e:	2108      	movs	r1, #8
 8015c80:	4628      	mov	r0, r5
 8015c82:	f7f7 f90f 	bl	800cea4 <ucdr_alignment>
 8015c86:	f100 0408 	add.w	r4, r0, #8
 8015c8a:	442c      	add	r4, r5
 8015c8c:	2108      	movs	r1, #8
 8015c8e:	4620      	mov	r0, r4
 8015c90:	f7f7 f908 	bl	800cea4 <ucdr_alignment>
 8015c94:	3008      	adds	r0, #8
 8015c96:	4420      	add	r0, r4
 8015c98:	bd38      	pop	{r3, r4, r5, pc}
 8015c9a:	bf00      	nop

08015c9c <max_serialized_size_geometry_msgs__msg__Vector3>:
 8015c9c:	b570      	push	{r4, r5, r6, lr}
 8015c9e:	2301      	movs	r3, #1
 8015ca0:	460c      	mov	r4, r1
 8015ca2:	7003      	strb	r3, [r0, #0]
 8015ca4:	2108      	movs	r1, #8
 8015ca6:	4620      	mov	r0, r4
 8015ca8:	f7f7 f8fc 	bl	800cea4 <ucdr_alignment>
 8015cac:	2108      	movs	r1, #8
 8015cae:	1863      	adds	r3, r4, r1
 8015cb0:	18c6      	adds	r6, r0, r3
 8015cb2:	4630      	mov	r0, r6
 8015cb4:	f7f7 f8f6 	bl	800cea4 <ucdr_alignment>
 8015cb8:	f100 0508 	add.w	r5, r0, #8
 8015cbc:	4435      	add	r5, r6
 8015cbe:	2108      	movs	r1, #8
 8015cc0:	4628      	mov	r0, r5
 8015cc2:	f7f7 f8ef 	bl	800cea4 <ucdr_alignment>
 8015cc6:	f1c4 0408 	rsb	r4, r4, #8
 8015cca:	4420      	add	r0, r4
 8015ccc:	4428      	add	r0, r5
 8015cce:	bd70      	pop	{r4, r5, r6, pc}

08015cd0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 8015cd0:	4800      	ldr	r0, [pc, #0]	@ (8015cd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 8015cd2:	4770      	bx	lr
 8015cd4:	20002170 	.word	0x20002170

08015cd8 <ucdr_serialize_string>:
 8015cd8:	b538      	push	{r3, r4, r5, lr}
 8015cda:	4605      	mov	r5, r0
 8015cdc:	4608      	mov	r0, r1
 8015cde:	460c      	mov	r4, r1
 8015ce0:	f7ea faf6 	bl	80002d0 <strlen>
 8015ce4:	4621      	mov	r1, r4
 8015ce6:	1c42      	adds	r2, r0, #1
 8015ce8:	4628      	mov	r0, r5
 8015cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cee:	f7f7 b945 	b.w	800cf7c <ucdr_serialize_sequence_char>
 8015cf2:	bf00      	nop

08015cf4 <ucdr_deserialize_string>:
 8015cf4:	b500      	push	{lr}
 8015cf6:	b083      	sub	sp, #12
 8015cf8:	ab01      	add	r3, sp, #4
 8015cfa:	f7f7 f951 	bl	800cfa0 <ucdr_deserialize_sequence_char>
 8015cfe:	b003      	add	sp, #12
 8015d00:	f85d fb04 	ldr.w	pc, [sp], #4

08015d04 <uxr_init_input_best_effort_stream>:
 8015d04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015d08:	8003      	strh	r3, [r0, #0]
 8015d0a:	4770      	bx	lr

08015d0c <uxr_reset_input_best_effort_stream>:
 8015d0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015d10:	8003      	strh	r3, [r0, #0]
 8015d12:	4770      	bx	lr

08015d14 <uxr_receive_best_effort_message>:
 8015d14:	b538      	push	{r3, r4, r5, lr}
 8015d16:	4604      	mov	r4, r0
 8015d18:	8800      	ldrh	r0, [r0, #0]
 8015d1a:	460d      	mov	r5, r1
 8015d1c:	f000 fe26 	bl	801696c <uxr_seq_num_cmp>
 8015d20:	4603      	mov	r3, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015d28:	bfb8      	it	lt
 8015d2a:	8025      	strhlt	r5, [r4, #0]
 8015d2c:	bd38      	pop	{r3, r4, r5, pc}
 8015d2e:	bf00      	nop

08015d30 <on_full_input_buffer>:
 8015d30:	b570      	push	{r4, r5, r6, lr}
 8015d32:	4605      	mov	r5, r0
 8015d34:	460c      	mov	r4, r1
 8015d36:	682b      	ldr	r3, [r5, #0]
 8015d38:	6809      	ldr	r1, [r1, #0]
 8015d3a:	8920      	ldrh	r0, [r4, #8]
 8015d3c:	6862      	ldr	r2, [r4, #4]
 8015d3e:	fbb2 f2f0 	udiv	r2, r2, r0
 8015d42:	1a5b      	subs	r3, r3, r1
 8015d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d48:	3301      	adds	r3, #1
 8015d4a:	b29b      	uxth	r3, r3
 8015d4c:	fbb3 f6f0 	udiv	r6, r3, r0
 8015d50:	fb00 3316 	mls	r3, r0, r6, r3
 8015d54:	b29b      	uxth	r3, r3
 8015d56:	fb02 f303 	mul.w	r3, r2, r3
 8015d5a:	1d18      	adds	r0, r3, #4
 8015d5c:	4408      	add	r0, r1
 8015d5e:	7d26      	ldrb	r6, [r4, #20]
 8015d60:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8015d64:	b116      	cbz	r6, 8015d6c <on_full_input_buffer+0x3c>
 8015d66:	2600      	movs	r6, #0
 8015d68:	f840 6c04 	str.w	r6, [r0, #-4]
 8015d6c:	2a03      	cmp	r2, #3
 8015d6e:	d801      	bhi.n	8015d74 <on_full_input_buffer+0x44>
 8015d70:	2001      	movs	r0, #1
 8015d72:	bd70      	pop	{r4, r5, r6, pc}
 8015d74:	3308      	adds	r3, #8
 8015d76:	4419      	add	r1, r3
 8015d78:	4628      	mov	r0, r5
 8015d7a:	692b      	ldr	r3, [r5, #16]
 8015d7c:	3a04      	subs	r2, #4
 8015d7e:	f7f7 f885 	bl	800ce8c <ucdr_init_buffer_origin>
 8015d82:	4628      	mov	r0, r5
 8015d84:	4902      	ldr	r1, [pc, #8]	@ (8015d90 <on_full_input_buffer+0x60>)
 8015d86:	4622      	mov	r2, r4
 8015d88:	f7f7 f85c 	bl	800ce44 <ucdr_set_on_full_buffer_callback>
 8015d8c:	2000      	movs	r0, #0
 8015d8e:	bd70      	pop	{r4, r5, r6, pc}
 8015d90:	08015d31 	.word	0x08015d31

08015d94 <uxr_init_input_reliable_stream>:
 8015d94:	b500      	push	{lr}
 8015d96:	e9c0 1200 	strd	r1, r2, [r0]
 8015d9a:	f04f 0e00 	mov.w	lr, #0
 8015d9e:	9a01      	ldr	r2, [sp, #4]
 8015da0:	8103      	strh	r3, [r0, #8]
 8015da2:	6102      	str	r2, [r0, #16]
 8015da4:	f880 e014 	strb.w	lr, [r0, #20]
 8015da8:	b1d3      	cbz	r3, 8015de0 <uxr_init_input_reliable_stream+0x4c>
 8015daa:	f8c1 e000 	str.w	lr, [r1]
 8015dae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015db2:	f1bc 0f01 	cmp.w	ip, #1
 8015db6:	d913      	bls.n	8015de0 <uxr_init_input_reliable_stream+0x4c>
 8015db8:	2301      	movs	r3, #1
 8015dba:	fbb3 f1fc 	udiv	r1, r3, ip
 8015dbe:	fb0c 3111 	mls	r1, ip, r1, r3
 8015dc2:	b289      	uxth	r1, r1
 8015dc4:	6842      	ldr	r2, [r0, #4]
 8015dc6:	fbb2 f2fc 	udiv	r2, r2, ip
 8015dca:	fb01 f202 	mul.w	r2, r1, r2
 8015dce:	6801      	ldr	r1, [r0, #0]
 8015dd0:	f841 e002 	str.w	lr, [r1, r2]
 8015dd4:	3301      	adds	r3, #1
 8015dd6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	459c      	cmp	ip, r3
 8015dde:	d8ec      	bhi.n	8015dba <uxr_init_input_reliable_stream+0x26>
 8015de0:	f04f 33ff 	mov.w	r3, #4294967295
 8015de4:	60c3      	str	r3, [r0, #12]
 8015de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8015dea:	bf00      	nop

08015dec <uxr_reset_input_reliable_stream>:
 8015dec:	8901      	ldrh	r1, [r0, #8]
 8015dee:	b1e9      	cbz	r1, 8015e2c <uxr_reset_input_reliable_stream+0x40>
 8015df0:	f04f 0c00 	mov.w	ip, #0
 8015df4:	b500      	push	{lr}
 8015df6:	4663      	mov	r3, ip
 8015df8:	46e6      	mov	lr, ip
 8015dfa:	fbb3 f2f1 	udiv	r2, r3, r1
 8015dfe:	fb01 3312 	mls	r3, r1, r2, r3
 8015e02:	b29b      	uxth	r3, r3
 8015e04:	6842      	ldr	r2, [r0, #4]
 8015e06:	fbb2 f2f1 	udiv	r2, r2, r1
 8015e0a:	fb03 f202 	mul.w	r2, r3, r2
 8015e0e:	6803      	ldr	r3, [r0, #0]
 8015e10:	f843 e002 	str.w	lr, [r3, r2]
 8015e14:	f10c 0c01 	add.w	ip, ip, #1
 8015e18:	8901      	ldrh	r1, [r0, #8]
 8015e1a:	fa1f f38c 	uxth.w	r3, ip
 8015e1e:	4299      	cmp	r1, r3
 8015e20:	d8eb      	bhi.n	8015dfa <uxr_reset_input_reliable_stream+0xe>
 8015e22:	f04f 33ff 	mov.w	r3, #4294967295
 8015e26:	60c3      	str	r3, [r0, #12]
 8015e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e30:	60c3      	str	r3, [r0, #12]
 8015e32:	4770      	bx	lr

08015e34 <uxr_receive_reliable_message>:
 8015e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e38:	4604      	mov	r4, r0
 8015e3a:	460d      	mov	r5, r1
 8015e3c:	8901      	ldrh	r1, [r0, #8]
 8015e3e:	8980      	ldrh	r0, [r0, #12]
 8015e40:	4690      	mov	r8, r2
 8015e42:	461f      	mov	r7, r3
 8015e44:	f000 fd8a 	bl	801695c <uxr_seq_num_add>
 8015e48:	4629      	mov	r1, r5
 8015e4a:	4606      	mov	r6, r0
 8015e4c:	89a0      	ldrh	r0, [r4, #12]
 8015e4e:	f000 fd8d 	bl	801696c <uxr_seq_num_cmp>
 8015e52:	2800      	cmp	r0, #0
 8015e54:	db0a      	blt.n	8015e6c <uxr_receive_reliable_message+0x38>
 8015e56:	2600      	movs	r6, #0
 8015e58:	89e0      	ldrh	r0, [r4, #14]
 8015e5a:	4629      	mov	r1, r5
 8015e5c:	f000 fd86 	bl	801696c <uxr_seq_num_cmp>
 8015e60:	2800      	cmp	r0, #0
 8015e62:	bfb8      	it	lt
 8015e64:	81e5      	strhlt	r5, [r4, #14]
 8015e66:	4630      	mov	r0, r6
 8015e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e6c:	4630      	mov	r0, r6
 8015e6e:	4629      	mov	r1, r5
 8015e70:	f000 fd7c 	bl	801696c <uxr_seq_num_cmp>
 8015e74:	2800      	cmp	r0, #0
 8015e76:	dbee      	blt.n	8015e56 <uxr_receive_reliable_message+0x22>
 8015e78:	6923      	ldr	r3, [r4, #16]
 8015e7a:	4640      	mov	r0, r8
 8015e7c:	4798      	blx	r3
 8015e7e:	2101      	movs	r1, #1
 8015e80:	4606      	mov	r6, r0
 8015e82:	89a0      	ldrh	r0, [r4, #12]
 8015e84:	f000 fd6a 	bl	801695c <uxr_seq_num_add>
 8015e88:	b90e      	cbnz	r6, 8015e8e <uxr_receive_reliable_message+0x5a>
 8015e8a:	4285      	cmp	r5, r0
 8015e8c:	d046      	beq.n	8015f1c <uxr_receive_reliable_message+0xe8>
 8015e8e:	8921      	ldrh	r1, [r4, #8]
 8015e90:	fbb5 f2f1 	udiv	r2, r5, r1
 8015e94:	fb01 5212 	mls	r2, r1, r2, r5
 8015e98:	b292      	uxth	r2, r2
 8015e9a:	6863      	ldr	r3, [r4, #4]
 8015e9c:	6820      	ldr	r0, [r4, #0]
 8015e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015ea2:	fb02 f303 	mul.w	r3, r2, r3
 8015ea6:	3304      	adds	r3, #4
 8015ea8:	4418      	add	r0, r3
 8015eaa:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d1d1      	bne.n	8015e56 <uxr_receive_reliable_message+0x22>
 8015eb2:	4641      	mov	r1, r8
 8015eb4:	463a      	mov	r2, r7
 8015eb6:	f002 fb08 	bl	80184ca <memcpy>
 8015eba:	8921      	ldrh	r1, [r4, #8]
 8015ebc:	fbb5 f2f1 	udiv	r2, r5, r1
 8015ec0:	fb01 5212 	mls	r2, r1, r2, r5
 8015ec4:	b292      	uxth	r2, r2
 8015ec6:	6863      	ldr	r3, [r4, #4]
 8015ec8:	fbb3 f3f1 	udiv	r3, r3, r1
 8015ecc:	fb02 f303 	mul.w	r3, r2, r3
 8015ed0:	6822      	ldr	r2, [r4, #0]
 8015ed2:	50d7      	str	r7, [r2, r3]
 8015ed4:	9a06      	ldr	r2, [sp, #24]
 8015ed6:	2301      	movs	r3, #1
 8015ed8:	7013      	strb	r3, [r2, #0]
 8015eda:	2e00      	cmp	r6, #0
 8015edc:	d0bb      	beq.n	8015e56 <uxr_receive_reliable_message+0x22>
 8015ede:	89a6      	ldrh	r6, [r4, #12]
 8015ee0:	2101      	movs	r1, #1
 8015ee2:	4630      	mov	r0, r6
 8015ee4:	f000 fd3a 	bl	801695c <uxr_seq_num_add>
 8015ee8:	8921      	ldrh	r1, [r4, #8]
 8015eea:	fbb0 f2f1 	udiv	r2, r0, r1
 8015eee:	fb01 0212 	mls	r2, r1, r2, r0
 8015ef2:	b292      	uxth	r2, r2
 8015ef4:	6863      	ldr	r3, [r4, #4]
 8015ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8015efa:	4606      	mov	r6, r0
 8015efc:	fb02 f303 	mul.w	r3, r2, r3
 8015f00:	6820      	ldr	r0, [r4, #0]
 8015f02:	3304      	adds	r3, #4
 8015f04:	4418      	add	r0, r3
 8015f06:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d0a3      	beq.n	8015e56 <uxr_receive_reliable_message+0x22>
 8015f0e:	6923      	ldr	r3, [r4, #16]
 8015f10:	4798      	blx	r3
 8015f12:	2802      	cmp	r0, #2
 8015f14:	d005      	beq.n	8015f22 <uxr_receive_reliable_message+0xee>
 8015f16:	2801      	cmp	r0, #1
 8015f18:	d0e2      	beq.n	8015ee0 <uxr_receive_reliable_message+0xac>
 8015f1a:	e79c      	b.n	8015e56 <uxr_receive_reliable_message+0x22>
 8015f1c:	9b06      	ldr	r3, [sp, #24]
 8015f1e:	81a5      	strh	r5, [r4, #12]
 8015f20:	701e      	strb	r6, [r3, #0]
 8015f22:	2601      	movs	r6, #1
 8015f24:	e798      	b.n	8015e58 <uxr_receive_reliable_message+0x24>
 8015f26:	bf00      	nop

08015f28 <uxr_next_input_reliable_buffer_available>:
 8015f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f2c:	4604      	mov	r4, r0
 8015f2e:	460f      	mov	r7, r1
 8015f30:	8980      	ldrh	r0, [r0, #12]
 8015f32:	2101      	movs	r1, #1
 8015f34:	4690      	mov	r8, r2
 8015f36:	f000 fd11 	bl	801695c <uxr_seq_num_add>
 8015f3a:	8921      	ldrh	r1, [r4, #8]
 8015f3c:	fbb0 f2f1 	udiv	r2, r0, r1
 8015f40:	fb01 0212 	mls	r2, r1, r2, r0
 8015f44:	b292      	uxth	r2, r2
 8015f46:	6863      	ldr	r3, [r4, #4]
 8015f48:	6826      	ldr	r6, [r4, #0]
 8015f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f4e:	fb02 f303 	mul.w	r3, r2, r3
 8015f52:	3304      	adds	r3, #4
 8015f54:	441e      	add	r6, r3
 8015f56:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8015f5a:	f1b9 0f00 	cmp.w	r9, #0
 8015f5e:	d023      	beq.n	8015fa8 <uxr_next_input_reliable_buffer_available+0x80>
 8015f60:	6923      	ldr	r3, [r4, #16]
 8015f62:	4605      	mov	r5, r0
 8015f64:	4630      	mov	r0, r6
 8015f66:	4798      	blx	r3
 8015f68:	4682      	mov	sl, r0
 8015f6a:	b300      	cbz	r0, 8015fae <uxr_next_input_reliable_buffer_available+0x86>
 8015f6c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8015f70:	2101      	movs	r1, #1
 8015f72:	4650      	mov	r0, sl
 8015f74:	f000 fcf2 	bl	801695c <uxr_seq_num_add>
 8015f78:	8921      	ldrh	r1, [r4, #8]
 8015f7a:	fbb0 f2f1 	udiv	r2, r0, r1
 8015f7e:	4682      	mov	sl, r0
 8015f80:	fb01 0212 	mls	r2, r1, r2, r0
 8015f84:	e9d4 0300 	ldrd	r0, r3, [r4]
 8015f88:	b292      	uxth	r2, r2
 8015f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8015f8e:	fb02 f303 	mul.w	r3, r2, r3
 8015f92:	3304      	adds	r3, #4
 8015f94:	4418      	add	r0, r3
 8015f96:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015f9a:	b12b      	cbz	r3, 8015fa8 <uxr_next_input_reliable_buffer_available+0x80>
 8015f9c:	6923      	ldr	r3, [r4, #16]
 8015f9e:	4798      	blx	r3
 8015fa0:	2802      	cmp	r0, #2
 8015fa2:	d01b      	beq.n	8015fdc <uxr_next_input_reliable_buffer_available+0xb4>
 8015fa4:	2801      	cmp	r0, #1
 8015fa6:	d0e3      	beq.n	8015f70 <uxr_next_input_reliable_buffer_available+0x48>
 8015fa8:	2000      	movs	r0, #0
 8015faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fae:	464a      	mov	r2, r9
 8015fb0:	4631      	mov	r1, r6
 8015fb2:	4638      	mov	r0, r7
 8015fb4:	f7f6 ff72 	bl	800ce9c <ucdr_init_buffer>
 8015fb8:	8921      	ldrh	r1, [r4, #8]
 8015fba:	fbb5 f2f1 	udiv	r2, r5, r1
 8015fbe:	fb01 5212 	mls	r2, r1, r2, r5
 8015fc2:	b292      	uxth	r2, r2
 8015fc4:	6863      	ldr	r3, [r4, #4]
 8015fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8015fca:	fb02 f303 	mul.w	r3, r2, r3
 8015fce:	6822      	ldr	r2, [r4, #0]
 8015fd0:	f842 a003 	str.w	sl, [r2, r3]
 8015fd4:	81a5      	strh	r5, [r4, #12]
 8015fd6:	2001      	movs	r0, #1
 8015fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fdc:	eb06 0108 	add.w	r1, r6, r8
 8015fe0:	8926      	ldrh	r6, [r4, #8]
 8015fe2:	fbb5 f0f6 	udiv	r0, r5, r6
 8015fe6:	fb06 5010 	mls	r0, r6, r0, r5
 8015fea:	b280      	uxth	r0, r0
 8015fec:	6863      	ldr	r3, [r4, #4]
 8015fee:	fbb3 f3f6 	udiv	r3, r3, r6
 8015ff2:	fb00 f303 	mul.w	r3, r0, r3
 8015ff6:	6820      	ldr	r0, [r4, #0]
 8015ff8:	2500      	movs	r5, #0
 8015ffa:	50c5      	str	r5, [r0, r3]
 8015ffc:	eba9 0208 	sub.w	r2, r9, r8
 8016000:	4638      	mov	r0, r7
 8016002:	f7f6 ff4b 	bl	800ce9c <ucdr_init_buffer>
 8016006:	4903      	ldr	r1, [pc, #12]	@ (8016014 <uxr_next_input_reliable_buffer_available+0xec>)
 8016008:	4622      	mov	r2, r4
 801600a:	4638      	mov	r0, r7
 801600c:	f7f6 ff1a 	bl	800ce44 <ucdr_set_on_full_buffer_callback>
 8016010:	4655      	mov	r5, sl
 8016012:	e7df      	b.n	8015fd4 <uxr_next_input_reliable_buffer_available+0xac>
 8016014:	08015d31 	.word	0x08015d31

08016018 <uxr_process_heartbeat>:
 8016018:	b538      	push	{r3, r4, r5, lr}
 801601a:	4611      	mov	r1, r2
 801601c:	4604      	mov	r4, r0
 801601e:	89c0      	ldrh	r0, [r0, #14]
 8016020:	4615      	mov	r5, r2
 8016022:	f000 fca3 	bl	801696c <uxr_seq_num_cmp>
 8016026:	2800      	cmp	r0, #0
 8016028:	bfb8      	it	lt
 801602a:	81e5      	strhlt	r5, [r4, #14]
 801602c:	bd38      	pop	{r3, r4, r5, pc}
 801602e:	bf00      	nop

08016030 <uxr_compute_acknack>:
 8016030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016034:	8903      	ldrh	r3, [r0, #8]
 8016036:	8985      	ldrh	r5, [r0, #12]
 8016038:	4604      	mov	r4, r0
 801603a:	460e      	mov	r6, r1
 801603c:	2b00      	cmp	r3, #0
 801603e:	d048      	beq.n	80160d2 <uxr_compute_acknack+0xa2>
 8016040:	4628      	mov	r0, r5
 8016042:	2701      	movs	r7, #1
 8016044:	e003      	b.n	801604e <uxr_compute_acknack+0x1e>
 8016046:	4567      	cmp	r7, ip
 8016048:	d243      	bcs.n	80160d2 <uxr_compute_acknack+0xa2>
 801604a:	89a0      	ldrh	r0, [r4, #12]
 801604c:	3701      	adds	r7, #1
 801604e:	b2b9      	uxth	r1, r7
 8016050:	f000 fc84 	bl	801695c <uxr_seq_num_add>
 8016054:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016058:	fbb0 f2fc 	udiv	r2, r0, ip
 801605c:	e9d4 1300 	ldrd	r1, r3, [r4]
 8016060:	fb0c 0212 	mls	r2, ip, r2, r0
 8016064:	b292      	uxth	r2, r2
 8016066:	fbb3 f3fc 	udiv	r3, r3, ip
 801606a:	fb02 f303 	mul.w	r3, r2, r3
 801606e:	58cb      	ldr	r3, [r1, r3]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d1e8      	bne.n	8016046 <uxr_compute_acknack+0x16>
 8016074:	8030      	strh	r0, [r6, #0]
 8016076:	2101      	movs	r1, #1
 8016078:	89e5      	ldrh	r5, [r4, #14]
 801607a:	f000 fc73 	bl	8016964 <uxr_seq_num_sub>
 801607e:	4601      	mov	r1, r0
 8016080:	4628      	mov	r0, r5
 8016082:	f000 fc6f 	bl	8016964 <uxr_seq_num_sub>
 8016086:	4605      	mov	r5, r0
 8016088:	4607      	mov	r7, r0
 801608a:	b1f8      	cbz	r0, 80160cc <uxr_compute_acknack+0x9c>
 801608c:	f04f 0900 	mov.w	r9, #0
 8016090:	464d      	mov	r5, r9
 8016092:	f04f 0801 	mov.w	r8, #1
 8016096:	fa1f f189 	uxth.w	r1, r9
 801609a:	8830      	ldrh	r0, [r6, #0]
 801609c:	f000 fc5e 	bl	801695c <uxr_seq_num_add>
 80160a0:	8921      	ldrh	r1, [r4, #8]
 80160a2:	fbb0 f3f1 	udiv	r3, r0, r1
 80160a6:	fb03 0011 	mls	r0, r3, r1, r0
 80160aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80160ae:	b280      	uxth	r0, r0
 80160b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80160b4:	fb00 f303 	mul.w	r3, r0, r3
 80160b8:	fa08 f109 	lsl.w	r1, r8, r9
 80160bc:	58d3      	ldr	r3, [r2, r3]
 80160be:	f109 0901 	add.w	r9, r9, #1
 80160c2:	b90b      	cbnz	r3, 80160c8 <uxr_compute_acknack+0x98>
 80160c4:	4329      	orrs	r1, r5
 80160c6:	b28d      	uxth	r5, r1
 80160c8:	454f      	cmp	r7, r9
 80160ca:	d1e4      	bne.n	8016096 <uxr_compute_acknack+0x66>
 80160cc:	4628      	mov	r0, r5
 80160ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160d2:	4628      	mov	r0, r5
 80160d4:	e7ce      	b.n	8016074 <uxr_compute_acknack+0x44>
 80160d6:	bf00      	nop

080160d8 <uxr_init_output_best_effort_stream>:
 80160d8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80160dc:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80160e0:	6001      	str	r1, [r0, #0]
 80160e2:	7303      	strb	r3, [r0, #12]
 80160e4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80160e8:	4770      	bx	lr
 80160ea:	bf00      	nop

080160ec <uxr_reset_output_best_effort_stream>:
 80160ec:	7b02      	ldrb	r2, [r0, #12]
 80160ee:	6042      	str	r2, [r0, #4]
 80160f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80160f4:	81c3      	strh	r3, [r0, #14]
 80160f6:	4770      	bx	lr

080160f8 <uxr_prepare_best_effort_buffer_to_write>:
 80160f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160fa:	4604      	mov	r4, r0
 80160fc:	b083      	sub	sp, #12
 80160fe:	6840      	ldr	r0, [r0, #4]
 8016100:	460d      	mov	r5, r1
 8016102:	4616      	mov	r6, r2
 8016104:	f7f9 f966 	bl	800f3d4 <uxr_submessage_padding>
 8016108:	6863      	ldr	r3, [r4, #4]
 801610a:	4418      	add	r0, r3
 801610c:	68a3      	ldr	r3, [r4, #8]
 801610e:	1942      	adds	r2, r0, r5
 8016110:	4293      	cmp	r3, r2
 8016112:	bf2c      	ite	cs
 8016114:	2701      	movcs	r7, #1
 8016116:	2700      	movcc	r7, #0
 8016118:	d202      	bcs.n	8016120 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801611a:	4638      	mov	r0, r7
 801611c:	b003      	add	sp, #12
 801611e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016120:	9000      	str	r0, [sp, #0]
 8016122:	6821      	ldr	r1, [r4, #0]
 8016124:	4630      	mov	r0, r6
 8016126:	2300      	movs	r3, #0
 8016128:	f7f6 fea6 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 801612c:	6863      	ldr	r3, [r4, #4]
 801612e:	4638      	mov	r0, r7
 8016130:	442b      	add	r3, r5
 8016132:	6063      	str	r3, [r4, #4]
 8016134:	b003      	add	sp, #12
 8016136:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016138 <uxr_prepare_best_effort_buffer_to_send>:
 8016138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801613c:	4604      	mov	r4, r0
 801613e:	461d      	mov	r5, r3
 8016140:	6840      	ldr	r0, [r0, #4]
 8016142:	7b23      	ldrb	r3, [r4, #12]
 8016144:	4298      	cmp	r0, r3
 8016146:	bf8c      	ite	hi
 8016148:	2601      	movhi	r6, #1
 801614a:	2600      	movls	r6, #0
 801614c:	d802      	bhi.n	8016154 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801614e:	4630      	mov	r0, r6
 8016150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016154:	4688      	mov	r8, r1
 8016156:	89e0      	ldrh	r0, [r4, #14]
 8016158:	2101      	movs	r1, #1
 801615a:	4617      	mov	r7, r2
 801615c:	f000 fbfe 	bl	801695c <uxr_seq_num_add>
 8016160:	6823      	ldr	r3, [r4, #0]
 8016162:	81e0      	strh	r0, [r4, #14]
 8016164:	8028      	strh	r0, [r5, #0]
 8016166:	f8c8 3000 	str.w	r3, [r8]
 801616a:	6863      	ldr	r3, [r4, #4]
 801616c:	603b      	str	r3, [r7, #0]
 801616e:	7b23      	ldrb	r3, [r4, #12]
 8016170:	6063      	str	r3, [r4, #4]
 8016172:	4630      	mov	r0, r6
 8016174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016178 <on_full_output_buffer>:
 8016178:	b538      	push	{r3, r4, r5, lr}
 801617a:	460c      	mov	r4, r1
 801617c:	6803      	ldr	r3, [r0, #0]
 801617e:	6809      	ldr	r1, [r1, #0]
 8016180:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016184:	6862      	ldr	r2, [r4, #4]
 8016186:	fbb2 f2fc 	udiv	r2, r2, ip
 801618a:	1a5b      	subs	r3, r3, r1
 801618c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016190:	3301      	adds	r3, #1
 8016192:	b29b      	uxth	r3, r3
 8016194:	fbb3 fefc 	udiv	lr, r3, ip
 8016198:	fb0c 331e 	mls	r3, ip, lr, r3
 801619c:	b29b      	uxth	r3, r3
 801619e:	fb02 f303 	mul.w	r3, r2, r3
 80161a2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80161a6:	58ca      	ldr	r2, [r1, r3]
 80161a8:	4463      	add	r3, ip
 80161aa:	eba2 020c 	sub.w	r2, r2, ip
 80161ae:	3308      	adds	r3, #8
 80161b0:	4605      	mov	r5, r0
 80161b2:	4419      	add	r1, r3
 80161b4:	3a04      	subs	r2, #4
 80161b6:	6903      	ldr	r3, [r0, #16]
 80161b8:	f7f6 fe68 	bl	800ce8c <ucdr_init_buffer_origin>
 80161bc:	4628      	mov	r0, r5
 80161be:	4903      	ldr	r1, [pc, #12]	@ (80161cc <on_full_output_buffer+0x54>)
 80161c0:	4622      	mov	r2, r4
 80161c2:	f7f6 fe3f 	bl	800ce44 <ucdr_set_on_full_buffer_callback>
 80161c6:	2000      	movs	r0, #0
 80161c8:	bd38      	pop	{r3, r4, r5, pc}
 80161ca:	bf00      	nop
 80161cc:	08016179 	.word	0x08016179

080161d0 <uxr_init_output_reliable_stream>:
 80161d0:	b410      	push	{r4}
 80161d2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80161d6:	8103      	strh	r3, [r0, #8]
 80161d8:	e9c0 1200 	strd	r1, r2, [r0]
 80161dc:	f880 c00c 	strb.w	ip, [r0, #12]
 80161e0:	b1d3      	cbz	r3, 8016218 <uxr_init_output_reliable_stream+0x48>
 80161e2:	f8c1 c000 	str.w	ip, [r1]
 80161e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80161ea:	f1bc 0f01 	cmp.w	ip, #1
 80161ee:	d913      	bls.n	8016218 <uxr_init_output_reliable_stream+0x48>
 80161f0:	2301      	movs	r3, #1
 80161f2:	fbb3 f1fc 	udiv	r1, r3, ip
 80161f6:	fb0c 3111 	mls	r1, ip, r1, r3
 80161fa:	b289      	uxth	r1, r1
 80161fc:	6842      	ldr	r2, [r0, #4]
 80161fe:	6804      	ldr	r4, [r0, #0]
 8016200:	fbb2 f2fc 	udiv	r2, r2, ip
 8016204:	fb01 f202 	mul.w	r2, r1, r2
 8016208:	7b01      	ldrb	r1, [r0, #12]
 801620a:	50a1      	str	r1, [r4, r2]
 801620c:	3301      	adds	r3, #1
 801620e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016212:	b29b      	uxth	r3, r3
 8016214:	459c      	cmp	ip, r3
 8016216:	d8ec      	bhi.n	80161f2 <uxr_init_output_reliable_stream+0x22>
 8016218:	f04f 32ff 	mov.w	r2, #4294967295
 801621c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016220:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016224:	4905      	ldr	r1, [pc, #20]	@ (801623c <uxr_init_output_reliable_stream+0x6c>)
 8016226:	f85d 4b04 	ldr.w	r4, [sp], #4
 801622a:	f8c0 100e 	str.w	r1, [r0, #14]
 801622e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016232:	2300      	movs	r3, #0
 8016234:	8242      	strh	r2, [r0, #18]
 8016236:	8403      	strh	r3, [r0, #32]
 8016238:	4770      	bx	lr
 801623a:	bf00      	nop
 801623c:	ffff0000 	.word	0xffff0000

08016240 <uxr_reset_output_reliable_stream>:
 8016240:	8901      	ldrh	r1, [r0, #8]
 8016242:	b1b1      	cbz	r1, 8016272 <uxr_reset_output_reliable_stream+0x32>
 8016244:	f04f 0c00 	mov.w	ip, #0
 8016248:	4663      	mov	r3, ip
 801624a:	fbb3 f2f1 	udiv	r2, r3, r1
 801624e:	fb01 3312 	mls	r3, r1, r2, r3
 8016252:	b29b      	uxth	r3, r3
 8016254:	6842      	ldr	r2, [r0, #4]
 8016256:	fbb2 f2f1 	udiv	r2, r2, r1
 801625a:	6801      	ldr	r1, [r0, #0]
 801625c:	fb03 f202 	mul.w	r2, r3, r2
 8016260:	7b03      	ldrb	r3, [r0, #12]
 8016262:	508b      	str	r3, [r1, r2]
 8016264:	f10c 0c01 	add.w	ip, ip, #1
 8016268:	8901      	ldrh	r1, [r0, #8]
 801626a:	fa1f f38c 	uxth.w	r3, ip
 801626e:	4299      	cmp	r1, r3
 8016270:	d8eb      	bhi.n	801624a <uxr_reset_output_reliable_stream+0xa>
 8016272:	f04f 32ff 	mov.w	r2, #4294967295
 8016276:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801627a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801627e:	4904      	ldr	r1, [pc, #16]	@ (8016290 <uxr_reset_output_reliable_stream+0x50>)
 8016280:	f8c0 100e 	str.w	r1, [r0, #14]
 8016284:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016288:	2300      	movs	r3, #0
 801628a:	8242      	strh	r2, [r0, #18]
 801628c:	8403      	strh	r3, [r0, #32]
 801628e:	4770      	bx	lr
 8016290:	ffff0000 	.word	0xffff0000

08016294 <uxr_prepare_reliable_buffer_to_write>:
 8016294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016298:	4604      	mov	r4, r0
 801629a:	b091      	sub	sp, #68	@ 0x44
 801629c:	8900      	ldrh	r0, [r0, #8]
 801629e:	89e7      	ldrh	r7, [r4, #14]
 80162a0:	6823      	ldr	r3, [r4, #0]
 80162a2:	9204      	str	r2, [sp, #16]
 80162a4:	fbb7 f2f0 	udiv	r2, r7, r0
 80162a8:	fb00 7212 	mls	r2, r0, r2, r7
 80162ac:	b292      	uxth	r2, r2
 80162ae:	6865      	ldr	r5, [r4, #4]
 80162b0:	fbb5 f5f0 	udiv	r5, r5, r0
 80162b4:	fb05 3202 	mla	r2, r5, r2, r3
 80162b8:	3204      	adds	r2, #4
 80162ba:	f852 ac04 	ldr.w	sl, [r2, #-4]
 80162be:	f894 b00c 	ldrb.w	fp, [r4, #12]
 80162c2:	9203      	str	r2, [sp, #12]
 80162c4:	4688      	mov	r8, r1
 80162c6:	f1a5 0904 	sub.w	r9, r5, #4
 80162ca:	2800      	cmp	r0, #0
 80162cc:	f000 8143 	beq.w	8016556 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 80162d0:	2100      	movs	r1, #0
 80162d2:	460e      	mov	r6, r1
 80162d4:	b28a      	uxth	r2, r1
 80162d6:	fbb2 fcf0 	udiv	ip, r2, r0
 80162da:	fb00 221c 	mls	r2, r0, ip, r2
 80162de:	b292      	uxth	r2, r2
 80162e0:	fb05 f202 	mul.w	r2, r5, r2
 80162e4:	3101      	adds	r1, #1
 80162e6:	589a      	ldr	r2, [r3, r2]
 80162e8:	455a      	cmp	r2, fp
 80162ea:	bf04      	itt	eq
 80162ec:	3601      	addeq	r6, #1
 80162ee:	b2b6      	uxtheq	r6, r6
 80162f0:	4281      	cmp	r1, r0
 80162f2:	d1ef      	bne.n	80162d4 <uxr_prepare_reliable_buffer_to_write+0x40>
 80162f4:	4650      	mov	r0, sl
 80162f6:	2104      	movs	r1, #4
 80162f8:	9605      	str	r6, [sp, #20]
 80162fa:	f7f6 fdd3 	bl	800cea4 <ucdr_alignment>
 80162fe:	4482      	add	sl, r0
 8016300:	eb0a 0208 	add.w	r2, sl, r8
 8016304:	454a      	cmp	r2, r9
 8016306:	f240 80ca 	bls.w	801649e <uxr_prepare_reliable_buffer_to_write+0x20a>
 801630a:	7b22      	ldrb	r2, [r4, #12]
 801630c:	4442      	add	r2, r8
 801630e:	454a      	cmp	r2, r9
 8016310:	f240 80b2 	bls.w	8016478 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 8016314:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 8016318:	32fc      	adds	r2, #252	@ 0xfc
 801631a:	fa1f f389 	uxth.w	r3, r9
 801631e:	441a      	add	r2, r3
 8016320:	b292      	uxth	r2, r2
 8016322:	fb06 fb02 	mul.w	fp, r6, r2
 8016326:	45c3      	cmp	fp, r8
 8016328:	9205      	str	r2, [sp, #20]
 801632a:	9206      	str	r2, [sp, #24]
 801632c:	f0c0 80b3 	bcc.w	8016496 <uxr_prepare_reliable_buffer_to_write+0x202>
 8016330:	f10a 0204 	add.w	r2, sl, #4
 8016334:	454a      	cmp	r2, r9
 8016336:	f080 80db 	bcs.w	80164f0 <uxr_prepare_reliable_buffer_to_write+0x25c>
 801633a:	f1a3 0b04 	sub.w	fp, r3, #4
 801633e:	ebab 0b0a 	sub.w	fp, fp, sl
 8016342:	9b05      	ldr	r3, [sp, #20]
 8016344:	fa1f fb8b 	uxth.w	fp, fp
 8016348:	eba8 080b 	sub.w	r8, r8, fp
 801634c:	fbb8 fcf3 	udiv	ip, r8, r3
 8016350:	fb03 831c 	mls	r3, r3, ip, r8
 8016354:	fa1f fc8c 	uxth.w	ip, ip
 8016358:	2b00      	cmp	r3, #0
 801635a:	f040 80c1 	bne.w	80164e0 <uxr_prepare_reliable_buffer_to_write+0x24c>
 801635e:	45b4      	cmp	ip, r6
 8016360:	f200 8099 	bhi.w	8016496 <uxr_prepare_reliable_buffer_to_write+0x202>
 8016364:	f10d 0820 	add.w	r8, sp, #32
 8016368:	f1bc 0f00 	cmp.w	ip, #0
 801636c:	d040      	beq.n	80163f0 <uxr_prepare_reliable_buffer_to_write+0x15c>
 801636e:	f8cd a01c 	str.w	sl, [sp, #28]
 8016372:	2600      	movs	r6, #0
 8016374:	f8dd a014 	ldr.w	sl, [sp, #20]
 8016378:	9505      	str	r5, [sp, #20]
 801637a:	f10d 0820 	add.w	r8, sp, #32
 801637e:	4665      	mov	r5, ip
 8016380:	e000      	b.n	8016384 <uxr_prepare_reliable_buffer_to_write+0xf0>
 8016382:	46d3      	mov	fp, sl
 8016384:	8921      	ldrh	r1, [r4, #8]
 8016386:	fbb7 f2f1 	udiv	r2, r7, r1
 801638a:	fb01 7212 	mls	r2, r1, r2, r7
 801638e:	b292      	uxth	r2, r2
 8016390:	6863      	ldr	r3, [r4, #4]
 8016392:	fbb3 f3f1 	udiv	r3, r3, r1
 8016396:	6821      	ldr	r1, [r4, #0]
 8016398:	fb02 f303 	mul.w	r3, r2, r3
 801639c:	3304      	adds	r3, #4
 801639e:	4419      	add	r1, r3
 80163a0:	4640      	mov	r0, r8
 80163a2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80163a6:	9200      	str	r2, [sp, #0]
 80163a8:	2300      	movs	r3, #0
 80163aa:	464a      	mov	r2, r9
 80163ac:	f7f6 fd64 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 80163b0:	465a      	mov	r2, fp
 80163b2:	2300      	movs	r3, #0
 80163b4:	210d      	movs	r1, #13
 80163b6:	4640      	mov	r0, r8
 80163b8:	f7f8 ffcc 	bl	800f354 <uxr_buffer_submessage_header>
 80163bc:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80163c0:	fbb7 f2fc 	udiv	r2, r7, ip
 80163c4:	fb0c 7212 	mls	r2, ip, r2, r7
 80163c8:	b292      	uxth	r2, r2
 80163ca:	6863      	ldr	r3, [r4, #4]
 80163cc:	fbb3 f3fc 	udiv	r3, r3, ip
 80163d0:	fb02 f303 	mul.w	r3, r2, r3
 80163d4:	6822      	ldr	r2, [r4, #0]
 80163d6:	4638      	mov	r0, r7
 80163d8:	f842 9003 	str.w	r9, [r2, r3]
 80163dc:	2101      	movs	r1, #1
 80163de:	f000 fabd 	bl	801695c <uxr_seq_num_add>
 80163e2:	3601      	adds	r6, #1
 80163e4:	42ae      	cmp	r6, r5
 80163e6:	4607      	mov	r7, r0
 80163e8:	d1cb      	bne.n	8016382 <uxr_prepare_reliable_buffer_to_write+0xee>
 80163ea:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80163ee:	9d05      	ldr	r5, [sp, #20]
 80163f0:	8920      	ldrh	r0, [r4, #8]
 80163f2:	fbb7 f1f0 	udiv	r1, r7, r0
 80163f6:	fb00 7111 	mls	r1, r0, r1, r7
 80163fa:	b289      	uxth	r1, r1
 80163fc:	6863      	ldr	r3, [r4, #4]
 80163fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8016402:	fb01 f303 	mul.w	r3, r1, r3
 8016406:	6821      	ldr	r1, [r4, #0]
 8016408:	3304      	adds	r3, #4
 801640a:	4419      	add	r1, r3
 801640c:	464a      	mov	r2, r9
 801640e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016412:	9000      	str	r0, [sp, #0]
 8016414:	2300      	movs	r3, #0
 8016416:	4640      	mov	r0, r8
 8016418:	f7f6 fd2e 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 801641c:	4640      	mov	r0, r8
 801641e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016422:	2302      	movs	r3, #2
 8016424:	fa1f f288 	uxth.w	r2, r8
 8016428:	210d      	movs	r1, #13
 801642a:	f7f8 ff93 	bl	800f354 <uxr_buffer_submessage_header>
 801642e:	8926      	ldrh	r6, [r4, #8]
 8016430:	9b03      	ldr	r3, [sp, #12]
 8016432:	7b20      	ldrb	r0, [r4, #12]
 8016434:	f1a5 0208 	sub.w	r2, r5, #8
 8016438:	f10a 0104 	add.w	r1, sl, #4
 801643c:	fbb7 f5f6 	udiv	r5, r7, r6
 8016440:	fb06 7515 	mls	r5, r6, r5, r7
 8016444:	440b      	add	r3, r1
 8016446:	b2ad      	uxth	r5, r5
 8016448:	4619      	mov	r1, r3
 801644a:	3004      	adds	r0, #4
 801644c:	6863      	ldr	r3, [r4, #4]
 801644e:	fbb3 f3f6 	udiv	r3, r3, r6
 8016452:	fb05 f303 	mul.w	r3, r5, r3
 8016456:	6825      	ldr	r5, [r4, #0]
 8016458:	4440      	add	r0, r8
 801645a:	50e8      	str	r0, [r5, r3]
 801645c:	9d04      	ldr	r5, [sp, #16]
 801645e:	eba2 020a 	sub.w	r2, r2, sl
 8016462:	4628      	mov	r0, r5
 8016464:	f7f6 fd1a 	bl	800ce9c <ucdr_init_buffer>
 8016468:	493c      	ldr	r1, [pc, #240]	@ (801655c <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801646a:	4622      	mov	r2, r4
 801646c:	4628      	mov	r0, r5
 801646e:	f7f6 fce9 	bl	800ce44 <ucdr_set_on_full_buffer_callback>
 8016472:	81e7      	strh	r7, [r4, #14]
 8016474:	2001      	movs	r0, #1
 8016476:	e00f      	b.n	8016498 <uxr_prepare_reliable_buffer_to_write+0x204>
 8016478:	2101      	movs	r1, #1
 801647a:	89e0      	ldrh	r0, [r4, #14]
 801647c:	f000 fa6e 	bl	801695c <uxr_seq_num_add>
 8016480:	8921      	ldrh	r1, [r4, #8]
 8016482:	4605      	mov	r5, r0
 8016484:	8a60      	ldrh	r0, [r4, #18]
 8016486:	f000 fa69 	bl	801695c <uxr_seq_num_add>
 801648a:	4601      	mov	r1, r0
 801648c:	4628      	mov	r0, r5
 801648e:	f000 fa6d 	bl	801696c <uxr_seq_num_cmp>
 8016492:	2800      	cmp	r0, #0
 8016494:	dd45      	ble.n	8016522 <uxr_prepare_reliable_buffer_to_write+0x28e>
 8016496:	2000      	movs	r0, #0
 8016498:	b011      	add	sp, #68	@ 0x44
 801649a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801649e:	8921      	ldrh	r1, [r4, #8]
 80164a0:	8a60      	ldrh	r0, [r4, #18]
 80164a2:	9205      	str	r2, [sp, #20]
 80164a4:	f000 fa5a 	bl	801695c <uxr_seq_num_add>
 80164a8:	4601      	mov	r1, r0
 80164aa:	4638      	mov	r0, r7
 80164ac:	f000 fa5e 	bl	801696c <uxr_seq_num_cmp>
 80164b0:	2800      	cmp	r0, #0
 80164b2:	9a05      	ldr	r2, [sp, #20]
 80164b4:	dcef      	bgt.n	8016496 <uxr_prepare_reliable_buffer_to_write+0x202>
 80164b6:	8926      	ldrh	r6, [r4, #8]
 80164b8:	fbb7 f5f6 	udiv	r5, r7, r6
 80164bc:	fb06 7515 	mls	r5, r6, r5, r7
 80164c0:	b2ad      	uxth	r5, r5
 80164c2:	6863      	ldr	r3, [r4, #4]
 80164c4:	6824      	ldr	r4, [r4, #0]
 80164c6:	fbb3 f3f6 	udiv	r3, r3, r6
 80164ca:	fb05 f303 	mul.w	r3, r5, r3
 80164ce:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80164d2:	50e2      	str	r2, [r4, r3]
 80164d4:	2300      	movs	r3, #0
 80164d6:	f8cd a000 	str.w	sl, [sp]
 80164da:	f7f6 fccd 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 80164de:	e7c9      	b.n	8016474 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 80164e0:	f10c 0c01 	add.w	ip, ip, #1
 80164e4:	fa1f fc8c 	uxth.w	ip, ip
 80164e8:	45b4      	cmp	ip, r6
 80164ea:	9306      	str	r3, [sp, #24]
 80164ec:	d8d3      	bhi.n	8016496 <uxr_prepare_reliable_buffer_to_write+0x202>
 80164ee:	e739      	b.n	8016364 <uxr_prepare_reliable_buffer_to_write+0xd0>
 80164f0:	4638      	mov	r0, r7
 80164f2:	2101      	movs	r1, #1
 80164f4:	9307      	str	r3, [sp, #28]
 80164f6:	f000 fa31 	bl	801695c <uxr_seq_num_add>
 80164fa:	8921      	ldrh	r1, [r4, #8]
 80164fc:	6862      	ldr	r2, [r4, #4]
 80164fe:	4607      	mov	r7, r0
 8016500:	fbb0 f0f1 	udiv	r0, r0, r1
 8016504:	fb01 7010 	mls	r0, r1, r0, r7
 8016508:	b280      	uxth	r0, r0
 801650a:	fbb2 f1f1 	udiv	r1, r2, r1
 801650e:	6822      	ldr	r2, [r4, #0]
 8016510:	fb00 f101 	mul.w	r1, r0, r1
 8016514:	3104      	adds	r1, #4
 8016516:	1853      	adds	r3, r2, r1
 8016518:	9303      	str	r3, [sp, #12]
 801651a:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801651e:	9b07      	ldr	r3, [sp, #28]
 8016520:	e70b      	b.n	801633a <uxr_prepare_reliable_buffer_to_write+0xa6>
 8016522:	8921      	ldrh	r1, [r4, #8]
 8016524:	fbb5 f2f1 	udiv	r2, r5, r1
 8016528:	fb01 5212 	mls	r2, r1, r2, r5
 801652c:	b292      	uxth	r2, r2
 801652e:	6863      	ldr	r3, [r4, #4]
 8016530:	fbb3 f3f1 	udiv	r3, r3, r1
 8016534:	6821      	ldr	r1, [r4, #0]
 8016536:	9804      	ldr	r0, [sp, #16]
 8016538:	fb02 f303 	mul.w	r3, r2, r3
 801653c:	3304      	adds	r3, #4
 801653e:	7b22      	ldrb	r2, [r4, #12]
 8016540:	4419      	add	r1, r3
 8016542:	4442      	add	r2, r8
 8016544:	f841 2c04 	str.w	r2, [r1, #-4]
 8016548:	7b23      	ldrb	r3, [r4, #12]
 801654a:	9300      	str	r3, [sp, #0]
 801654c:	2300      	movs	r3, #0
 801654e:	f7f6 fc93 	bl	800ce78 <ucdr_init_buffer_origin_offset>
 8016552:	81e5      	strh	r5, [r4, #14]
 8016554:	e78e      	b.n	8016474 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 8016556:	4606      	mov	r6, r0
 8016558:	e6cc      	b.n	80162f4 <uxr_prepare_reliable_buffer_to_write+0x60>
 801655a:	bf00      	nop
 801655c:	08016179 	.word	0x08016179

08016560 <uxr_prepare_next_reliable_buffer_to_send>:
 8016560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016562:	4604      	mov	r4, r0
 8016564:	460f      	mov	r7, r1
 8016566:	8a00      	ldrh	r0, [r0, #16]
 8016568:	2101      	movs	r1, #1
 801656a:	4615      	mov	r5, r2
 801656c:	461e      	mov	r6, r3
 801656e:	f000 f9f5 	bl	801695c <uxr_seq_num_add>
 8016572:	8030      	strh	r0, [r6, #0]
 8016574:	8922      	ldrh	r2, [r4, #8]
 8016576:	fbb0 f3f2 	udiv	r3, r0, r2
 801657a:	fb02 0c13 	mls	ip, r2, r3, r0
 801657e:	fa1f fc8c 	uxth.w	ip, ip
 8016582:	6863      	ldr	r3, [r4, #4]
 8016584:	fbb3 f3f2 	udiv	r3, r3, r2
 8016588:	fb0c fc03 	mul.w	ip, ip, r3
 801658c:	6823      	ldr	r3, [r4, #0]
 801658e:	89e1      	ldrh	r1, [r4, #14]
 8016590:	f10c 0c04 	add.w	ip, ip, #4
 8016594:	4463      	add	r3, ip
 8016596:	603b      	str	r3, [r7, #0]
 8016598:	6823      	ldr	r3, [r4, #0]
 801659a:	4463      	add	r3, ip
 801659c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80165a0:	602b      	str	r3, [r5, #0]
 80165a2:	f000 f9e3 	bl	801696c <uxr_seq_num_cmp>
 80165a6:	2800      	cmp	r0, #0
 80165a8:	dd01      	ble.n	80165ae <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80165aa:	2000      	movs	r0, #0
 80165ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165ae:	7b23      	ldrb	r3, [r4, #12]
 80165b0:	682a      	ldr	r2, [r5, #0]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d9f9      	bls.n	80165aa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80165b6:	8a61      	ldrh	r1, [r4, #18]
 80165b8:	8a20      	ldrh	r0, [r4, #16]
 80165ba:	f000 f9d3 	bl	8016964 <uxr_seq_num_sub>
 80165be:	8923      	ldrh	r3, [r4, #8]
 80165c0:	4283      	cmp	r3, r0
 80165c2:	d0f2      	beq.n	80165aa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80165c4:	8830      	ldrh	r0, [r6, #0]
 80165c6:	89e3      	ldrh	r3, [r4, #14]
 80165c8:	8220      	strh	r0, [r4, #16]
 80165ca:	4298      	cmp	r0, r3
 80165cc:	d001      	beq.n	80165d2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80165ce:	2001      	movs	r0, #1
 80165d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165d2:	2101      	movs	r1, #1
 80165d4:	f000 f9c2 	bl	801695c <uxr_seq_num_add>
 80165d8:	81e0      	strh	r0, [r4, #14]
 80165da:	e7f8      	b.n	80165ce <uxr_prepare_next_reliable_buffer_to_send+0x6e>

080165dc <uxr_update_output_stream_heartbeat_timestamp>:
 80165dc:	b570      	push	{r4, r5, r6, lr}
 80165de:	8a01      	ldrh	r1, [r0, #16]
 80165e0:	4604      	mov	r4, r0
 80165e2:	8a40      	ldrh	r0, [r0, #18]
 80165e4:	4615      	mov	r5, r2
 80165e6:	461e      	mov	r6, r3
 80165e8:	f000 f9c0 	bl	801696c <uxr_seq_num_cmp>
 80165ec:	2800      	cmp	r0, #0
 80165ee:	db07      	blt.n	8016600 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80165f0:	f04f 35ff 	mov.w	r5, #4294967295
 80165f4:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80165f8:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80165fc:	2000      	movs	r0, #0
 80165fe:	bd70      	pop	{r4, r5, r6, pc}
 8016600:	f894 3020 	ldrb.w	r3, [r4, #32]
 8016604:	b953      	cbnz	r3, 801661c <uxr_update_output_stream_heartbeat_timestamp+0x40>
 8016606:	2301      	movs	r3, #1
 8016608:	f884 3020 	strb.w	r3, [r4, #32]
 801660c:	3564      	adds	r5, #100	@ 0x64
 801660e:	f04f 0000 	mov.w	r0, #0
 8016612:	f146 0600 	adc.w	r6, r6, #0
 8016616:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801661a:	bd70      	pop	{r4, r5, r6, pc}
 801661c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016620:	428d      	cmp	r5, r1
 8016622:	eb76 0202 	sbcs.w	r2, r6, r2
 8016626:	dbf1      	blt.n	801660c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8016628:	3301      	adds	r3, #1
 801662a:	3564      	adds	r5, #100	@ 0x64
 801662c:	f884 3020 	strb.w	r3, [r4, #32]
 8016630:	f04f 0001 	mov.w	r0, #1
 8016634:	f146 0600 	adc.w	r6, r6, #0
 8016638:	e7ed      	b.n	8016616 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801663a:	bf00      	nop

0801663c <uxr_begin_output_nack_buffer_it>:
 801663c:	8a40      	ldrh	r0, [r0, #18]
 801663e:	4770      	bx	lr

08016640 <uxr_next_reliable_nack_buffer_to_send>:
 8016640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016644:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016648:	f1b8 0f00 	cmp.w	r8, #0
 801664c:	d104      	bne.n	8016658 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801664e:	f04f 0800 	mov.w	r8, #0
 8016652:	4640      	mov	r0, r8
 8016654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016658:	4604      	mov	r4, r0
 801665a:	460e      	mov	r6, r1
 801665c:	8818      	ldrh	r0, [r3, #0]
 801665e:	4617      	mov	r7, r2
 8016660:	461d      	mov	r5, r3
 8016662:	e019      	b.n	8016698 <uxr_next_reliable_nack_buffer_to_send+0x58>
 8016664:	8921      	ldrh	r1, [r4, #8]
 8016666:	8828      	ldrh	r0, [r5, #0]
 8016668:	fbb0 fcf1 	udiv	ip, r0, r1
 801666c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8016670:	fb01 0c1c 	mls	ip, r1, ip, r0
 8016674:	fa1f fc8c 	uxth.w	ip, ip
 8016678:	fbb2 f2f1 	udiv	r2, r2, r1
 801667c:	fb02 fc0c 	mul.w	ip, r2, ip
 8016680:	f10c 0c04 	add.w	ip, ip, #4
 8016684:	4463      	add	r3, ip
 8016686:	6033      	str	r3, [r6, #0]
 8016688:	6823      	ldr	r3, [r4, #0]
 801668a:	4463      	add	r3, ip
 801668c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016690:	603b      	str	r3, [r7, #0]
 8016692:	7b22      	ldrb	r2, [r4, #12]
 8016694:	429a      	cmp	r2, r3
 8016696:	d1dc      	bne.n	8016652 <uxr_next_reliable_nack_buffer_to_send+0x12>
 8016698:	2101      	movs	r1, #1
 801669a:	f000 f95f 	bl	801695c <uxr_seq_num_add>
 801669e:	8028      	strh	r0, [r5, #0]
 80166a0:	8a21      	ldrh	r1, [r4, #16]
 80166a2:	f000 f963 	bl	801696c <uxr_seq_num_cmp>
 80166a6:	2800      	cmp	r0, #0
 80166a8:	dddc      	ble.n	8016664 <uxr_next_reliable_nack_buffer_to_send+0x24>
 80166aa:	2300      	movs	r3, #0
 80166ac:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 80166b0:	e7cd      	b.n	801664e <uxr_next_reliable_nack_buffer_to_send+0xe>
 80166b2:	bf00      	nop

080166b4 <uxr_process_acknack>:
 80166b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166b6:	4604      	mov	r4, r0
 80166b8:	460e      	mov	r6, r1
 80166ba:	4610      	mov	r0, r2
 80166bc:	2101      	movs	r1, #1
 80166be:	f000 f951 	bl	8016964 <uxr_seq_num_sub>
 80166c2:	8a61      	ldrh	r1, [r4, #18]
 80166c4:	f000 f94e 	bl	8016964 <uxr_seq_num_sub>
 80166c8:	b1c0      	cbz	r0, 80166fc <uxr_process_acknack+0x48>
 80166ca:	4605      	mov	r5, r0
 80166cc:	2700      	movs	r7, #0
 80166ce:	2101      	movs	r1, #1
 80166d0:	8a60      	ldrh	r0, [r4, #18]
 80166d2:	f000 f943 	bl	801695c <uxr_seq_num_add>
 80166d6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80166da:	fbb0 f1fc 	udiv	r1, r0, ip
 80166de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80166e2:	fb0c 0111 	mls	r1, ip, r1, r0
 80166e6:	b289      	uxth	r1, r1
 80166e8:	3701      	adds	r7, #1
 80166ea:	fbb3 f3fc 	udiv	r3, r3, ip
 80166ee:	fb01 f303 	mul.w	r3, r1, r3
 80166f2:	42bd      	cmp	r5, r7
 80166f4:	7b21      	ldrb	r1, [r4, #12]
 80166f6:	8260      	strh	r0, [r4, #18]
 80166f8:	50d1      	str	r1, [r2, r3]
 80166fa:	d1e8      	bne.n	80166ce <uxr_process_acknack+0x1a>
 80166fc:	3e00      	subs	r6, #0
 80166fe:	f04f 0300 	mov.w	r3, #0
 8016702:	bf18      	it	ne
 8016704:	2601      	movne	r6, #1
 8016706:	f884 3020 	strb.w	r3, [r4, #32]
 801670a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801670e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016710 <uxr_is_output_up_to_date>:
 8016710:	8a01      	ldrh	r1, [r0, #16]
 8016712:	8a40      	ldrh	r0, [r0, #18]
 8016714:	b508      	push	{r3, lr}
 8016716:	f000 f929 	bl	801696c <uxr_seq_num_cmp>
 801671a:	fab0 f080 	clz	r0, r0
 801671e:	0940      	lsrs	r0, r0, #5
 8016720:	bd08      	pop	{r3, pc}
 8016722:	bf00      	nop

08016724 <get_available_free_slots>:
 8016724:	8901      	ldrh	r1, [r0, #8]
 8016726:	b1c1      	cbz	r1, 801675a <get_available_free_slots+0x36>
 8016728:	b530      	push	{r4, r5, lr}
 801672a:	2200      	movs	r2, #0
 801672c:	6843      	ldr	r3, [r0, #4]
 801672e:	6805      	ldr	r5, [r0, #0]
 8016730:	7b04      	ldrb	r4, [r0, #12]
 8016732:	fbb3 fef1 	udiv	lr, r3, r1
 8016736:	4610      	mov	r0, r2
 8016738:	b293      	uxth	r3, r2
 801673a:	fbb3 fcf1 	udiv	ip, r3, r1
 801673e:	fb01 331c 	mls	r3, r1, ip, r3
 8016742:	b29b      	uxth	r3, r3
 8016744:	fb0e f303 	mul.w	r3, lr, r3
 8016748:	3201      	adds	r2, #1
 801674a:	58eb      	ldr	r3, [r5, r3]
 801674c:	429c      	cmp	r4, r3
 801674e:	bf04      	itt	eq
 8016750:	3001      	addeq	r0, #1
 8016752:	b280      	uxtheq	r0, r0
 8016754:	4291      	cmp	r1, r2
 8016756:	d1ef      	bne.n	8016738 <get_available_free_slots+0x14>
 8016758:	bd30      	pop	{r4, r5, pc}
 801675a:	4608      	mov	r0, r1
 801675c:	4770      	bx	lr
 801675e:	bf00      	nop

08016760 <uxr_buffer_cancel_data>:
 8016760:	b510      	push	{r4, lr}
 8016762:	b094      	sub	sp, #80	@ 0x50
 8016764:	2300      	movs	r3, #0
 8016766:	9301      	str	r3, [sp, #4]
 8016768:	9205      	str	r2, [sp, #20]
 801676a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801676e:	2201      	movs	r2, #1
 8016770:	f88d 301e 	strb.w	r3, [sp, #30]
 8016774:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8016778:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801677c:	2308      	movs	r3, #8
 801677e:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8016782:	9300      	str	r3, [sp, #0]
 8016784:	2210      	movs	r2, #16
 8016786:	ab0c      	add	r3, sp, #48	@ 0x30
 8016788:	4604      	mov	r4, r0
 801678a:	f7f7 fef9 	bl	800e580 <uxr_prepare_stream_to_write_submessage>
 801678e:	b918      	cbnz	r0, 8016798 <uxr_buffer_cancel_data+0x38>
 8016790:	4604      	mov	r4, r0
 8016792:	4620      	mov	r0, r4
 8016794:	b014      	add	sp, #80	@ 0x50
 8016796:	bd10      	pop	{r4, pc}
 8016798:	9905      	ldr	r1, [sp, #20]
 801679a:	aa06      	add	r2, sp, #24
 801679c:	4620      	mov	r0, r4
 801679e:	f7f8 f829 	bl	800e7f4 <uxr_init_base_object_request>
 80167a2:	a906      	add	r1, sp, #24
 80167a4:	4604      	mov	r4, r0
 80167a6:	a80c      	add	r0, sp, #48	@ 0x30
 80167a8:	f7f9 fe6c 	bl	8010484 <uxr_serialize_READ_DATA_Payload>
 80167ac:	4620      	mov	r0, r4
 80167ae:	b014      	add	sp, #80	@ 0x50
 80167b0:	bd10      	pop	{r4, pc}
 80167b2:	bf00      	nop

080167b4 <read_submessage_format>:
 80167b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80167b8:	b095      	sub	sp, #84	@ 0x54
 80167ba:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 80167be:	b113      	cbz	r3, 80167c6 <read_submessage_format+0x12>
 80167c0:	b015      	add	sp, #84	@ 0x54
 80167c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167c6:	460c      	mov	r4, r1
 80167c8:	4616      	mov	r6, r2
 80167ca:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80167ce:	461d      	mov	r5, r3
 80167d0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80167d2:	9304      	str	r3, [sp, #16]
 80167d4:	1a52      	subs	r2, r2, r1
 80167d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80167d8:	9305      	str	r3, [sp, #20]
 80167da:	4680      	mov	r8, r0
 80167dc:	a80c      	add	r0, sp, #48	@ 0x30
 80167de:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 80167e2:	f7f6 fb5b 	bl	800ce9c <ucdr_init_buffer>
 80167e6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80167ea:	a80c      	add	r0, sp, #48	@ 0x30
 80167ec:	f7f6 fb2a 	bl	800ce44 <ucdr_set_on_full_buffer_callback>
 80167f0:	69e3      	ldr	r3, [r4, #28]
 80167f2:	b35b      	cbz	r3, 801684c <read_submessage_format+0x98>
 80167f4:	f1b9 0f07 	cmp.w	r9, #7
 80167f8:	751d      	strb	r5, [r3, #20]
 80167fa:	d043      	beq.n	8016884 <read_submessage_format+0xd0>
 80167fc:	f1b9 0f08 	cmp.w	r9, #8
 8016800:	d032      	beq.n	8016868 <read_submessage_format+0xb4>
 8016802:	f1b9 0f06 	cmp.w	r9, #6
 8016806:	d008      	beq.n	801681a <read_submessage_format+0x66>
 8016808:	2201      	movs	r2, #1
 801680a:	751a      	strb	r2, [r3, #20]
 801680c:	4631      	mov	r1, r6
 801680e:	4620      	mov	r0, r4
 8016810:	f7f6 fb94 	bl	800cf3c <ucdr_advance_buffer>
 8016814:	b015      	add	sp, #84	@ 0x54
 8016816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801681a:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801681e:	2d00      	cmp	r5, #0
 8016820:	d0f2      	beq.n	8016808 <read_submessage_format+0x54>
 8016822:	ab0c      	add	r3, sp, #48	@ 0x30
 8016824:	e9cd 3600 	strd	r3, r6, [sp]
 8016828:	2306      	movs	r3, #6
 801682a:	f88d 3016 	strb.w	r3, [sp, #22]
 801682e:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 8016832:	9302      	str	r3, [sp, #8]
 8016834:	463a      	mov	r2, r7
 8016836:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801683a:	4640      	mov	r0, r8
 801683c:	47a8      	blx	r5
 801683e:	69e3      	ldr	r3, [r4, #28]
 8016840:	2201      	movs	r2, #1
 8016842:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 8016846:	2b00      	cmp	r3, #0
 8016848:	d1de      	bne.n	8016808 <read_submessage_format+0x54>
 801684a:	e7df      	b.n	801680c <read_submessage_format+0x58>
 801684c:	f1b9 0f07 	cmp.w	r9, #7
 8016850:	d032      	beq.n	80168b8 <read_submessage_format+0x104>
 8016852:	f1b9 0f08 	cmp.w	r9, #8
 8016856:	d02a      	beq.n	80168ae <read_submessage_format+0xfa>
 8016858:	f1b9 0f06 	cmp.w	r9, #6
 801685c:	d1d6      	bne.n	801680c <read_submessage_format+0x58>
 801685e:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 8016862:	2d00      	cmp	r5, #0
 8016864:	d1dd      	bne.n	8016822 <read_submessage_format+0x6e>
 8016866:	e7d1      	b.n	801680c <read_submessage_format+0x58>
 8016868:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 801686c:	2a00      	cmp	r2, #0
 801686e:	d0cb      	beq.n	8016808 <read_submessage_format+0x54>
 8016870:	a906      	add	r1, sp, #24
 8016872:	a80c      	add	r0, sp, #48	@ 0x30
 8016874:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8016876:	f7f9 fed9 	bl	801062c <uxr_deserialize_SampleIdentity>
 801687a:	bb28      	cbnz	r0, 80168c8 <read_submessage_format+0x114>
 801687c:	69e3      	ldr	r3, [r4, #28]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d1c2      	bne.n	8016808 <read_submessage_format+0x54>
 8016882:	e7c3      	b.n	801680c <read_submessage_format+0x58>
 8016884:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 8016888:	b16a      	cbz	r2, 80168a6 <read_submessage_format+0xf2>
 801688a:	a906      	add	r1, sp, #24
 801688c:	a80c      	add	r0, sp, #48	@ 0x30
 801688e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8016890:	f7f9 fb98 	bl	800ffc4 <uxr_deserialize_BaseObjectRequest>
 8016894:	2800      	cmp	r0, #0
 8016896:	d13a      	bne.n	801690e <read_submessage_format+0x15a>
 8016898:	68a2      	ldr	r2, [r4, #8]
 801689a:	69e3      	ldr	r3, [r4, #28]
 801689c:	4432      	add	r2, r6
 801689e:	60a2      	str	r2, [r4, #8]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d1b1      	bne.n	8016808 <read_submessage_format+0x54>
 80168a4:	e7b2      	b.n	801680c <read_submessage_format+0x58>
 80168a6:	68a2      	ldr	r2, [r4, #8]
 80168a8:	4432      	add	r2, r6
 80168aa:	60a2      	str	r2, [r4, #8]
 80168ac:	e7ac      	b.n	8016808 <read_submessage_format+0x54>
 80168ae:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d1dc      	bne.n	8016870 <read_submessage_format+0xbc>
 80168b6:	e7a9      	b.n	801680c <read_submessage_format+0x58>
 80168b8:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d1e4      	bne.n	801688a <read_submessage_format+0xd6>
 80168c0:	68a3      	ldr	r3, [r4, #8]
 80168c2:	4433      	add	r3, r6
 80168c4:	60a3      	str	r3, [r4, #8]
 80168c6:	e7a1      	b.n	801680c <read_submessage_format+0x58>
 80168c8:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80168cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80168ce:	1a52      	subs	r2, r2, r1
 80168d0:	1aed      	subs	r5, r5, r3
 80168d2:	a80c      	add	r0, sp, #48	@ 0x30
 80168d4:	f7f6 fae2 	bl	800ce9c <ucdr_init_buffer>
 80168d8:	4435      	add	r5, r6
 80168da:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80168de:	a80c      	add	r0, sp, #48	@ 0x30
 80168e0:	f7f6 fab0 	bl	800ce44 <ucdr_set_on_full_buffer_callback>
 80168e4:	b2ad      	uxth	r5, r5
 80168e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80168e8:	9300      	str	r3, [sp, #0]
 80168ea:	9501      	str	r5, [sp, #4]
 80168ec:	2108      	movs	r1, #8
 80168ee:	f88d 1016 	strb.w	r1, [sp, #22]
 80168f2:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 80168f6:	9102      	str	r1, [sp, #8]
 80168f8:	ab06      	add	r3, sp, #24
 80168fa:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 80168fe:	9905      	ldr	r1, [sp, #20]
 8016900:	463a      	mov	r2, r7
 8016902:	4640      	mov	r0, r8
 8016904:	47a8      	blx	r5
 8016906:	2301      	movs	r3, #1
 8016908:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 801690c:	e7b6      	b.n	801687c <read_submessage_format+0xc8>
 801690e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8016912:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016914:	1a52      	subs	r2, r2, r1
 8016916:	1aed      	subs	r5, r5, r3
 8016918:	a80c      	add	r0, sp, #48	@ 0x30
 801691a:	f7f6 fabf 	bl	800ce9c <ucdr_init_buffer>
 801691e:	4435      	add	r5, r6
 8016920:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8016924:	a80c      	add	r0, sp, #48	@ 0x30
 8016926:	f7f6 fa8d 	bl	800ce44 <ucdr_set_on_full_buffer_callback>
 801692a:	b2ad      	uxth	r5, r5
 801692c:	ab0c      	add	r3, sp, #48	@ 0x30
 801692e:	9300      	str	r3, [sp, #0]
 8016930:	9501      	str	r5, [sp, #4]
 8016932:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8016936:	2107      	movs	r1, #7
 8016938:	f88d 1016 	strb.w	r1, [sp, #22]
 801693c:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 8016940:	9102      	str	r1, [sp, #8]
 8016942:	ba5b      	rev16	r3, r3
 8016944:	b29b      	uxth	r3, r3
 8016946:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 801694a:	9905      	ldr	r1, [sp, #20]
 801694c:	463a      	mov	r2, r7
 801694e:	4640      	mov	r0, r8
 8016950:	47a8      	blx	r5
 8016952:	2301      	movs	r3, #1
 8016954:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 8016958:	e79e      	b.n	8016898 <read_submessage_format+0xe4>
 801695a:	bf00      	nop

0801695c <uxr_seq_num_add>:
 801695c:	4408      	add	r0, r1
 801695e:	b280      	uxth	r0, r0
 8016960:	4770      	bx	lr
 8016962:	bf00      	nop

08016964 <uxr_seq_num_sub>:
 8016964:	1a40      	subs	r0, r0, r1
 8016966:	b280      	uxth	r0, r0
 8016968:	4770      	bx	lr
 801696a:	bf00      	nop

0801696c <uxr_seq_num_cmp>:
 801696c:	4288      	cmp	r0, r1
 801696e:	d010      	beq.n	8016992 <uxr_seq_num_cmp+0x26>
 8016970:	d207      	bcs.n	8016982 <uxr_seq_num_cmp+0x16>
 8016972:	1a09      	subs	r1, r1, r0
 8016974:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8016978:	bfb4      	ite	lt
 801697a:	f04f 30ff 	movlt.w	r0, #4294967295
 801697e:	2001      	movge	r0, #1
 8016980:	4770      	bx	lr
 8016982:	1a41      	subs	r1, r0, r1
 8016984:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8016988:	bfcc      	ite	gt
 801698a:	f04f 30ff 	movgt.w	r0, #4294967295
 801698e:	2001      	movle	r0, #1
 8016990:	4770      	bx	lr
 8016992:	2000      	movs	r0, #0
 8016994:	4770      	bx	lr
 8016996:	bf00      	nop

08016998 <rcl_get_automatic_discovery_range>:
 8016998:	b530      	push	{r4, r5, lr}
 801699a:	b083      	sub	sp, #12
 801699c:	2300      	movs	r3, #0
 801699e:	9301      	str	r3, [sp, #4]
 80169a0:	b1c0      	cbz	r0, 80169d4 <rcl_get_automatic_discovery_range+0x3c>
 80169a2:	4604      	mov	r4, r0
 80169a4:	a901      	add	r1, sp, #4
 80169a6:	4818      	ldr	r0, [pc, #96]	@ (8016a08 <rcl_get_automatic_discovery_range+0x70>)
 80169a8:	f7fc ff58 	bl	801385c <rcutils_get_env>
 80169ac:	b110      	cbz	r0, 80169b4 <rcl_get_automatic_discovery_range+0x1c>
 80169ae:	2001      	movs	r0, #1
 80169b0:	b003      	add	sp, #12
 80169b2:	bd30      	pop	{r4, r5, pc}
 80169b4:	9d01      	ldr	r5, [sp, #4]
 80169b6:	782b      	ldrb	r3, [r5, #0]
 80169b8:	b923      	cbnz	r3, 80169c4 <rcl_get_automatic_discovery_range+0x2c>
 80169ba:	2303      	movs	r3, #3
 80169bc:	7023      	strb	r3, [r4, #0]
 80169be:	2000      	movs	r0, #0
 80169c0:	b003      	add	sp, #12
 80169c2:	bd30      	pop	{r4, r5, pc}
 80169c4:	4911      	ldr	r1, [pc, #68]	@ (8016a0c <rcl_get_automatic_discovery_range+0x74>)
 80169c6:	4628      	mov	r0, r5
 80169c8:	f7e9 fc22 	bl	8000210 <strcmp>
 80169cc:	b928      	cbnz	r0, 80169da <rcl_get_automatic_discovery_range+0x42>
 80169ce:	2301      	movs	r3, #1
 80169d0:	7023      	strb	r3, [r4, #0]
 80169d2:	e7f4      	b.n	80169be <rcl_get_automatic_discovery_range+0x26>
 80169d4:	200b      	movs	r0, #11
 80169d6:	b003      	add	sp, #12
 80169d8:	bd30      	pop	{r4, r5, pc}
 80169da:	490d      	ldr	r1, [pc, #52]	@ (8016a10 <rcl_get_automatic_discovery_range+0x78>)
 80169dc:	4628      	mov	r0, r5
 80169de:	f7e9 fc17 	bl	8000210 <strcmp>
 80169e2:	b168      	cbz	r0, 8016a00 <rcl_get_automatic_discovery_range+0x68>
 80169e4:	490b      	ldr	r1, [pc, #44]	@ (8016a14 <rcl_get_automatic_discovery_range+0x7c>)
 80169e6:	4628      	mov	r0, r5
 80169e8:	f7e9 fc12 	bl	8000210 <strcmp>
 80169ec:	2800      	cmp	r0, #0
 80169ee:	d0e4      	beq.n	80169ba <rcl_get_automatic_discovery_range+0x22>
 80169f0:	4909      	ldr	r1, [pc, #36]	@ (8016a18 <rcl_get_automatic_discovery_range+0x80>)
 80169f2:	4628      	mov	r0, r5
 80169f4:	f7e9 fc0c 	bl	8000210 <strcmp>
 80169f8:	b910      	cbnz	r0, 8016a00 <rcl_get_automatic_discovery_range+0x68>
 80169fa:	2304      	movs	r3, #4
 80169fc:	7023      	strb	r3, [r4, #0]
 80169fe:	e7de      	b.n	80169be <rcl_get_automatic_discovery_range+0x26>
 8016a00:	2302      	movs	r3, #2
 8016a02:	7023      	strb	r3, [r4, #0]
 8016a04:	e7db      	b.n	80169be <rcl_get_automatic_discovery_range+0x26>
 8016a06:	bf00      	nop
 8016a08:	0801a410 	.word	0x0801a410
 8016a0c:	0801a430 	.word	0x0801a430
 8016a10:	0801a434 	.word	0x0801a434
 8016a14:	0801a440 	.word	0x0801a440
 8016a18:	0801a448 	.word	0x0801a448

08016a1c <rcl_automatic_discovery_range_to_string>:
 8016a1c:	2804      	cmp	r0, #4
 8016a1e:	bf9a      	itte	ls
 8016a20:	4b02      	ldrls	r3, [pc, #8]	@ (8016a2c <rcl_automatic_discovery_range_to_string+0x10>)
 8016a22:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016a26:	2000      	movhi	r0, #0
 8016a28:	4770      	bx	lr
 8016a2a:	bf00      	nop
 8016a2c:	0801af7c 	.word	0x0801af7c

08016a30 <rcl_get_discovery_static_peers>:
 8016a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a34:	b08c      	sub	sp, #48	@ 0x30
 8016a36:	2300      	movs	r3, #0
 8016a38:	9304      	str	r3, [sp, #16]
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	d04e      	beq.n	8016adc <rcl_get_discovery_static_peers+0xac>
 8016a3e:	460d      	mov	r5, r1
 8016a40:	2900      	cmp	r1, #0
 8016a42:	d04b      	beq.n	8016adc <rcl_get_discovery_static_peers+0xac>
 8016a44:	4604      	mov	r4, r0
 8016a46:	a904      	add	r1, sp, #16
 8016a48:	482d      	ldr	r0, [pc, #180]	@ (8016b00 <rcl_get_discovery_static_peers+0xd0>)
 8016a4a:	f7fc ff07 	bl	801385c <rcutils_get_env>
 8016a4e:	b118      	cbz	r0, 8016a58 <rcl_get_discovery_static_peers+0x28>
 8016a50:	2001      	movs	r0, #1
 8016a52:	b00c      	add	sp, #48	@ 0x30
 8016a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a58:	9b04      	ldr	r3, [sp, #16]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d0f8      	beq.n	8016a50 <rcl_get_discovery_static_peers+0x20>
 8016a5e:	af05      	add	r7, sp, #20
 8016a60:	4638      	mov	r0, r7
 8016a62:	f000 fc7f 	bl	8017364 <rcutils_get_zero_initialized_string_array>
 8016a66:	f105 0308 	add.w	r3, r5, #8
 8016a6a:	9703      	str	r7, [sp, #12]
 8016a6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a70:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016a74:	9804      	ldr	r0, [sp, #16]
 8016a76:	e895 000c 	ldmia.w	r5, {r2, r3}
 8016a7a:	213b      	movs	r1, #59	@ 0x3b
 8016a7c:	f000 fbc2 	bl	8017204 <rcutils_split>
 8016a80:	2800      	cmp	r0, #0
 8016a82:	d1e5      	bne.n	8016a50 <rcl_get_discovery_static_peers+0x20>
 8016a84:	9905      	ldr	r1, [sp, #20]
 8016a86:	462a      	mov	r2, r5
 8016a88:	4620      	mov	r0, r4
 8016a8a:	f000 fcc3 	bl	8017414 <rmw_discovery_options_init>
 8016a8e:	4606      	mov	r6, r0
 8016a90:	bb90      	cbnz	r0, 8016af8 <rcl_get_discovery_static_peers+0xc8>
 8016a92:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016a96:	f1b9 0f00 	cmp.w	r9, #0
 8016a9a:	d026      	beq.n	8016aea <rcl_get_discovery_static_peers+0xba>
 8016a9c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016aa0:	4680      	mov	r8, r0
 8016aa2:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 8016aa6:	4628      	mov	r0, r5
 8016aa8:	f7e9 fc12 	bl	80002d0 <strlen>
 8016aac:	28ff      	cmp	r0, #255	@ 0xff
 8016aae:	4629      	mov	r1, r5
 8016ab0:	ea4f 2506 	mov.w	r5, r6, lsl #8
 8016ab4:	d816      	bhi.n	8016ae4 <rcl_get_discovery_static_peers+0xb4>
 8016ab6:	6860      	ldr	r0, [r4, #4]
 8016ab8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016abc:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 8016ac0:	f001 fc4f 	bl	8018362 <strncpy>
 8016ac4:	6863      	ldr	r3, [r4, #4]
 8016ac6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8016aca:	3601      	adds	r6, #1
 8016acc:	442b      	add	r3, r5
 8016ace:	454e      	cmp	r6, r9
 8016ad0:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 8016ad4:	d209      	bcs.n	8016aea <rcl_get_discovery_static_peers+0xba>
 8016ad6:	f8dd a018 	ldr.w	sl, [sp, #24]
 8016ada:	e7e2      	b.n	8016aa2 <rcl_get_discovery_static_peers+0x72>
 8016adc:	200b      	movs	r0, #11
 8016ade:	b00c      	add	sp, #48	@ 0x30
 8016ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ae4:	3601      	adds	r6, #1
 8016ae6:	454e      	cmp	r6, r9
 8016ae8:	d3db      	bcc.n	8016aa2 <rcl_get_discovery_static_peers+0x72>
 8016aea:	4638      	mov	r0, r7
 8016aec:	f000 fc6c 	bl	80173c8 <rcutils_string_array_fini>
 8016af0:	3800      	subs	r0, #0
 8016af2:	bf18      	it	ne
 8016af4:	2001      	movne	r0, #1
 8016af6:	e7ac      	b.n	8016a52 <rcl_get_discovery_static_peers+0x22>
 8016af8:	f7f9 fff8 	bl	8010aec <rcl_convert_rmw_ret_to_rcl_ret>
 8016afc:	e7a9      	b.n	8016a52 <rcl_get_discovery_static_peers+0x22>
 8016afe:	bf00      	nop
 8016b00:	0801a458 	.word	0x0801a458

08016b04 <rcl_get_default_domain_id>:
 8016b04:	b530      	push	{r4, r5, lr}
 8016b06:	b083      	sub	sp, #12
 8016b08:	2300      	movs	r3, #0
 8016b0a:	9300      	str	r3, [sp, #0]
 8016b0c:	b1f0      	cbz	r0, 8016b4c <rcl_get_default_domain_id+0x48>
 8016b0e:	4604      	mov	r4, r0
 8016b10:	4669      	mov	r1, sp
 8016b12:	4812      	ldr	r0, [pc, #72]	@ (8016b5c <rcl_get_default_domain_id+0x58>)
 8016b14:	f7fc fea2 	bl	801385c <rcutils_get_env>
 8016b18:	4602      	mov	r2, r0
 8016b1a:	b108      	cbz	r0, 8016b20 <rcl_get_default_domain_id+0x1c>
 8016b1c:	2001      	movs	r0, #1
 8016b1e:	e004      	b.n	8016b2a <rcl_get_default_domain_id+0x26>
 8016b20:	9800      	ldr	r0, [sp, #0]
 8016b22:	b108      	cbz	r0, 8016b28 <rcl_get_default_domain_id+0x24>
 8016b24:	7803      	ldrb	r3, [r0, #0]
 8016b26:	b913      	cbnz	r3, 8016b2e <rcl_get_default_domain_id+0x2a>
 8016b28:	2000      	movs	r0, #0
 8016b2a:	b003      	add	sp, #12
 8016b2c:	bd30      	pop	{r4, r5, pc}
 8016b2e:	a901      	add	r1, sp, #4
 8016b30:	9201      	str	r2, [sp, #4]
 8016b32:	f001 f955 	bl	8017de0 <strtoul>
 8016b36:	4605      	mov	r5, r0
 8016b38:	b158      	cbz	r0, 8016b52 <rcl_get_default_domain_id+0x4e>
 8016b3a:	1c43      	adds	r3, r0, #1
 8016b3c:	d104      	bne.n	8016b48 <rcl_get_default_domain_id+0x44>
 8016b3e:	f001 fc8f 	bl	8018460 <__errno>
 8016b42:	6803      	ldr	r3, [r0, #0]
 8016b44:	2b22      	cmp	r3, #34	@ 0x22
 8016b46:	d0e9      	beq.n	8016b1c <rcl_get_default_domain_id+0x18>
 8016b48:	6025      	str	r5, [r4, #0]
 8016b4a:	e7ed      	b.n	8016b28 <rcl_get_default_domain_id+0x24>
 8016b4c:	200b      	movs	r0, #11
 8016b4e:	b003      	add	sp, #12
 8016b50:	bd30      	pop	{r4, r5, pc}
 8016b52:	9b01      	ldr	r3, [sp, #4]
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d0f6      	beq.n	8016b48 <rcl_get_default_domain_id+0x44>
 8016b5a:	e7df      	b.n	8016b1c <rcl_get_default_domain_id+0x18>
 8016b5c:	0801a538 	.word	0x0801a538

08016b60 <rcl_expand_topic_name>:
 8016b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b64:	b08b      	sub	sp, #44	@ 0x2c
 8016b66:	9306      	str	r3, [sp, #24]
 8016b68:	2800      	cmp	r0, #0
 8016b6a:	f000 80ad 	beq.w	8016cc8 <rcl_expand_topic_name+0x168>
 8016b6e:	460e      	mov	r6, r1
 8016b70:	2900      	cmp	r1, #0
 8016b72:	f000 80a9 	beq.w	8016cc8 <rcl_expand_topic_name+0x168>
 8016b76:	4617      	mov	r7, r2
 8016b78:	2a00      	cmp	r2, #0
 8016b7a:	f000 80a5 	beq.w	8016cc8 <rcl_expand_topic_name+0x168>
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	f000 80a2 	beq.w	8016cc8 <rcl_expand_topic_name+0x168>
 8016b84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	f000 809e 	beq.w	8016cc8 <rcl_expand_topic_name+0x168>
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	a909      	add	r1, sp, #36	@ 0x24
 8016b90:	4680      	mov	r8, r0
 8016b92:	f000 fa45 	bl	8017020 <rcl_validate_topic_name>
 8016b96:	4605      	mov	r5, r0
 8016b98:	2800      	cmp	r0, #0
 8016b9a:	f040 8096 	bne.w	8016cca <rcl_expand_topic_name+0x16a>
 8016b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	f040 809a 	bne.w	8016cda <rcl_expand_topic_name+0x17a>
 8016ba6:	4602      	mov	r2, r0
 8016ba8:	a909      	add	r1, sp, #36	@ 0x24
 8016baa:	4630      	mov	r0, r6
 8016bac:	f7fd fa8e 	bl	80140cc <rmw_validate_node_name>
 8016bb0:	2800      	cmp	r0, #0
 8016bb2:	f040 808e 	bne.w	8016cd2 <rcl_expand_topic_name+0x172>
 8016bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016bb8:	2a00      	cmp	r2, #0
 8016bba:	f040 8093 	bne.w	8016ce4 <rcl_expand_topic_name+0x184>
 8016bbe:	a909      	add	r1, sp, #36	@ 0x24
 8016bc0:	4638      	mov	r0, r7
 8016bc2:	f7fd fa65 	bl	8014090 <rmw_validate_namespace>
 8016bc6:	2800      	cmp	r0, #0
 8016bc8:	f040 8083 	bne.w	8016cd2 <rcl_expand_topic_name+0x172>
 8016bcc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8016bce:	2d00      	cmp	r5, #0
 8016bd0:	f040 80f5 	bne.w	8016dbe <rcl_expand_topic_name+0x25e>
 8016bd4:	217b      	movs	r1, #123	@ 0x7b
 8016bd6:	4640      	mov	r0, r8
 8016bd8:	f001 fba4 	bl	8018324 <strchr>
 8016bdc:	f898 3000 	ldrb.w	r3, [r8]
 8016be0:	2b2f      	cmp	r3, #47	@ 0x2f
 8016be2:	4604      	mov	r4, r0
 8016be4:	f000 809f 	beq.w	8016d26 <rcl_expand_topic_name+0x1c6>
 8016be8:	2b7e      	cmp	r3, #126	@ 0x7e
 8016bea:	f040 80ea 	bne.w	8016dc2 <rcl_expand_topic_name+0x262>
 8016bee:	4638      	mov	r0, r7
 8016bf0:	f7e9 fb6e 	bl	80002d0 <strlen>
 8016bf4:	4a86      	ldr	r2, [pc, #536]	@ (8016e10 <rcl_expand_topic_name+0x2b0>)
 8016bf6:	4b87      	ldr	r3, [pc, #540]	@ (8016e14 <rcl_expand_topic_name+0x2b4>)
 8016bf8:	2801      	cmp	r0, #1
 8016bfa:	bf08      	it	eq
 8016bfc:	4613      	moveq	r3, r2
 8016bfe:	9302      	str	r3, [sp, #8]
 8016c00:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016c02:	9300      	str	r3, [sp, #0]
 8016c04:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016c08:	f108 0301 	add.w	r3, r8, #1
 8016c0c:	9305      	str	r3, [sp, #20]
 8016c0e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016c12:	9301      	str	r3, [sp, #4]
 8016c14:	ab14      	add	r3, sp, #80	@ 0x50
 8016c16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016c18:	f7fc fe38 	bl	801388c <rcutils_format_string_limit>
 8016c1c:	4682      	mov	sl, r0
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	f000 80e1 	beq.w	8016de6 <rcl_expand_topic_name+0x286>
 8016c24:	2c00      	cmp	r4, #0
 8016c26:	f000 8085 	beq.w	8016d34 <rcl_expand_topic_name+0x1d4>
 8016c2a:	217b      	movs	r1, #123	@ 0x7b
 8016c2c:	f001 fb7a 	bl	8018324 <strchr>
 8016c30:	46d1      	mov	r9, sl
 8016c32:	4604      	mov	r4, r0
 8016c34:	9507      	str	r5, [sp, #28]
 8016c36:	464d      	mov	r5, r9
 8016c38:	2c00      	cmp	r4, #0
 8016c3a:	f000 80a1 	beq.w	8016d80 <rcl_expand_topic_name+0x220>
 8016c3e:	217d      	movs	r1, #125	@ 0x7d
 8016c40:	4628      	mov	r0, r5
 8016c42:	f001 fb6f 	bl	8018324 <strchr>
 8016c46:	eba0 0904 	sub.w	r9, r0, r4
 8016c4a:	f109 0b01 	add.w	fp, r9, #1
 8016c4e:	4872      	ldr	r0, [pc, #456]	@ (8016e18 <rcl_expand_topic_name+0x2b8>)
 8016c50:	465a      	mov	r2, fp
 8016c52:	4621      	mov	r1, r4
 8016c54:	f001 fb73 	bl	801833e <strncmp>
 8016c58:	2800      	cmp	r0, #0
 8016c5a:	d069      	beq.n	8016d30 <rcl_expand_topic_name+0x1d0>
 8016c5c:	486f      	ldr	r0, [pc, #444]	@ (8016e1c <rcl_expand_topic_name+0x2bc>)
 8016c5e:	465a      	mov	r2, fp
 8016c60:	4621      	mov	r1, r4
 8016c62:	f001 fb6c 	bl	801833e <strncmp>
 8016c66:	b130      	cbz	r0, 8016c76 <rcl_expand_topic_name+0x116>
 8016c68:	486d      	ldr	r0, [pc, #436]	@ (8016e20 <rcl_expand_topic_name+0x2c0>)
 8016c6a:	465a      	mov	r2, fp
 8016c6c:	4621      	mov	r1, r4
 8016c6e:	f001 fb66 	bl	801833e <strncmp>
 8016c72:	2800      	cmp	r0, #0
 8016c74:	d138      	bne.n	8016ce8 <rcl_expand_topic_name+0x188>
 8016c76:	46b9      	mov	r9, r7
 8016c78:	ab16      	add	r3, sp, #88	@ 0x58
 8016c7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016c7e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016c82:	ab14      	add	r3, sp, #80	@ 0x50
 8016c84:	4620      	mov	r0, r4
 8016c86:	cb0c      	ldmia	r3, {r2, r3}
 8016c88:	4659      	mov	r1, fp
 8016c8a:	f7fc ff53 	bl	8013b34 <rcutils_strndup>
 8016c8e:	4604      	mov	r4, r0
 8016c90:	2800      	cmp	r0, #0
 8016c92:	f000 8099 	beq.w	8016dc8 <rcl_expand_topic_name+0x268>
 8016c96:	464a      	mov	r2, r9
 8016c98:	4628      	mov	r0, r5
 8016c9a:	ab14      	add	r3, sp, #80	@ 0x50
 8016c9c:	4621      	mov	r1, r4
 8016c9e:	f7fc fe2f 	bl	8013900 <rcutils_repl_str>
 8016ca2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016ca4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016ca6:	4605      	mov	r5, r0
 8016ca8:	4620      	mov	r0, r4
 8016caa:	4798      	blx	r3
 8016cac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016cae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016cb0:	4650      	mov	r0, sl
 8016cb2:	4798      	blx	r3
 8016cb4:	2d00      	cmp	r5, #0
 8016cb6:	f000 8091 	beq.w	8016ddc <rcl_expand_topic_name+0x27c>
 8016cba:	217b      	movs	r1, #123	@ 0x7b
 8016cbc:	4628      	mov	r0, r5
 8016cbe:	f001 fb31 	bl	8018324 <strchr>
 8016cc2:	46aa      	mov	sl, r5
 8016cc4:	4604      	mov	r4, r0
 8016cc6:	e7b7      	b.n	8016c38 <rcl_expand_topic_name+0xd8>
 8016cc8:	250b      	movs	r5, #11
 8016cca:	4628      	mov	r0, r5
 8016ccc:	b00b      	add	sp, #44	@ 0x2c
 8016cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cd2:	f7f9 ff0b 	bl	8010aec <rcl_convert_rmw_ret_to_rcl_ret>
 8016cd6:	4605      	mov	r5, r0
 8016cd8:	e7f7      	b.n	8016cca <rcl_expand_topic_name+0x16a>
 8016cda:	2567      	movs	r5, #103	@ 0x67
 8016cdc:	4628      	mov	r0, r5
 8016cde:	b00b      	add	sp, #44	@ 0x2c
 8016ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ce4:	25c9      	movs	r5, #201	@ 0xc9
 8016ce6:	e7f0      	b.n	8016cca <rcl_expand_topic_name+0x16a>
 8016ce8:	f109 32ff 	add.w	r2, r9, #4294967295
 8016cec:	9806      	ldr	r0, [sp, #24]
 8016cee:	1c61      	adds	r1, r4, #1
 8016cf0:	f7fd f83c 	bl	8013d6c <rcutils_string_map_getn>
 8016cf4:	4681      	mov	r9, r0
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	d1be      	bne.n	8016c78 <rcl_expand_topic_name+0x118>
 8016cfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016cfc:	ab16      	add	r3, sp, #88	@ 0x58
 8016cfe:	6010      	str	r0, [r2, #0]
 8016d00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016d04:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016d08:	ab14      	add	r3, sp, #80	@ 0x50
 8016d0a:	cb0c      	ldmia	r3, {r2, r3}
 8016d0c:	4659      	mov	r1, fp
 8016d0e:	4620      	mov	r0, r4
 8016d10:	f7fc ff10 	bl	8013b34 <rcutils_strndup>
 8016d14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d16:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d18:	4798      	blx	r3
 8016d1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d1c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d1e:	4650      	mov	r0, sl
 8016d20:	4798      	blx	r3
 8016d22:	2569      	movs	r5, #105	@ 0x69
 8016d24:	e7d1      	b.n	8016cca <rcl_expand_topic_name+0x16a>
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d061      	beq.n	8016dee <rcl_expand_topic_name+0x28e>
 8016d2a:	46c1      	mov	r9, r8
 8016d2c:	46aa      	mov	sl, r5
 8016d2e:	e781      	b.n	8016c34 <rcl_expand_topic_name+0xd4>
 8016d30:	46b1      	mov	r9, r6
 8016d32:	e7a1      	b.n	8016c78 <rcl_expand_topic_name+0x118>
 8016d34:	f89a 3000 	ldrb.w	r3, [sl]
 8016d38:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d3a:	d01d      	beq.n	8016d78 <rcl_expand_topic_name+0x218>
 8016d3c:	4638      	mov	r0, r7
 8016d3e:	f7e9 fac7 	bl	80002d0 <strlen>
 8016d42:	4a38      	ldr	r2, [pc, #224]	@ (8016e24 <rcl_expand_topic_name+0x2c4>)
 8016d44:	4b38      	ldr	r3, [pc, #224]	@ (8016e28 <rcl_expand_topic_name+0x2c8>)
 8016d46:	f8cd a010 	str.w	sl, [sp, #16]
 8016d4a:	2801      	cmp	r0, #1
 8016d4c:	bf18      	it	ne
 8016d4e:	4613      	movne	r3, r2
 8016d50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016d54:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016d58:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016d5a:	9703      	str	r7, [sp, #12]
 8016d5c:	9200      	str	r2, [sp, #0]
 8016d5e:	ab14      	add	r3, sp, #80	@ 0x50
 8016d60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d62:	f7fc fd93 	bl	801388c <rcutils_format_string_limit>
 8016d66:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d68:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d6a:	4604      	mov	r4, r0
 8016d6c:	4650      	mov	r0, sl
 8016d6e:	4798      	blx	r3
 8016d70:	46a2      	mov	sl, r4
 8016d72:	4653      	mov	r3, sl
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d036      	beq.n	8016de6 <rcl_expand_topic_name+0x286>
 8016d78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d7a:	f8c3 a000 	str.w	sl, [r3]
 8016d7e:	e7a4      	b.n	8016cca <rcl_expand_topic_name+0x16a>
 8016d80:	4653      	mov	r3, sl
 8016d82:	9d07      	ldr	r5, [sp, #28]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d1d5      	bne.n	8016d34 <rcl_expand_topic_name+0x1d4>
 8016d88:	f898 3000 	ldrb.w	r3, [r8]
 8016d8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d8e:	d0f3      	beq.n	8016d78 <rcl_expand_topic_name+0x218>
 8016d90:	4638      	mov	r0, r7
 8016d92:	f7e9 fa9d 	bl	80002d0 <strlen>
 8016d96:	4a23      	ldr	r2, [pc, #140]	@ (8016e24 <rcl_expand_topic_name+0x2c4>)
 8016d98:	4b23      	ldr	r3, [pc, #140]	@ (8016e28 <rcl_expand_topic_name+0x2c8>)
 8016d9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8016d9e:	2801      	cmp	r0, #1
 8016da0:	bf18      	it	ne
 8016da2:	4613      	movne	r3, r2
 8016da4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016da8:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016dac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016dae:	9703      	str	r7, [sp, #12]
 8016db0:	9200      	str	r2, [sp, #0]
 8016db2:	ab14      	add	r3, sp, #80	@ 0x50
 8016db4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016db6:	f7fc fd69 	bl	801388c <rcutils_format_string_limit>
 8016dba:	4682      	mov	sl, r0
 8016dbc:	e7d9      	b.n	8016d72 <rcl_expand_topic_name+0x212>
 8016dbe:	25ca      	movs	r5, #202	@ 0xca
 8016dc0:	e783      	b.n	8016cca <rcl_expand_topic_name+0x16a>
 8016dc2:	2800      	cmp	r0, #0
 8016dc4:	d1b1      	bne.n	8016d2a <rcl_expand_topic_name+0x1ca>
 8016dc6:	e7e3      	b.n	8016d90 <rcl_expand_topic_name+0x230>
 8016dc8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016dca:	6018      	str	r0, [r3, #0]
 8016dcc:	f7f3 fa48 	bl	800a260 <rcutils_reset_error>
 8016dd0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016dd2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016dd4:	4650      	mov	r0, sl
 8016dd6:	4798      	blx	r3
 8016dd8:	250a      	movs	r5, #10
 8016dda:	e776      	b.n	8016cca <rcl_expand_topic_name+0x16a>
 8016ddc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016dde:	601d      	str	r5, [r3, #0]
 8016de0:	f7f3 fa3e 	bl	800a260 <rcutils_reset_error>
 8016de4:	e7f8      	b.n	8016dd8 <rcl_expand_topic_name+0x278>
 8016de6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016de8:	2300      	movs	r3, #0
 8016dea:	6013      	str	r3, [r2, #0]
 8016dec:	e7f4      	b.n	8016dd8 <rcl_expand_topic_name+0x278>
 8016dee:	ab17      	add	r3, sp, #92	@ 0x5c
 8016df0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016df4:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016df8:	ab14      	add	r3, sp, #80	@ 0x50
 8016dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016dfc:	4640      	mov	r0, r8
 8016dfe:	f7fc fe63 	bl	8013ac8 <rcutils_strdup>
 8016e02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e04:	6018      	str	r0, [r3, #0]
 8016e06:	2800      	cmp	r0, #0
 8016e08:	f47f af5f 	bne.w	8016cca <rcl_expand_topic_name+0x16a>
 8016e0c:	e7e8      	b.n	8016de0 <rcl_expand_topic_name+0x280>
 8016e0e:	bf00      	nop
 8016e10:	08019e54 	.word	0x08019e54
 8016e14:	0801a548 	.word	0x0801a548
 8016e18:	0801a550 	.word	0x0801a550
 8016e1c:	0801a558 	.word	0x0801a558
 8016e20:	0801a560 	.word	0x0801a560
 8016e24:	0801a05c 	.word	0x0801a05c
 8016e28:	08019e64 	.word	0x08019e64

08016e2c <rcl_get_default_topic_name_substitutions>:
 8016e2c:	2800      	cmp	r0, #0
 8016e2e:	bf0c      	ite	eq
 8016e30:	200b      	moveq	r0, #11
 8016e32:	2000      	movne	r0, #0
 8016e34:	4770      	bx	lr
 8016e36:	bf00      	nop

08016e38 <rcl_get_zero_initialized_guard_condition>:
 8016e38:	4a03      	ldr	r2, [pc, #12]	@ (8016e48 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e40:	e883 0003 	stmia.w	r3, {r0, r1}
 8016e44:	4618      	mov	r0, r3
 8016e46:	4770      	bx	lr
 8016e48:	0801af90 	.word	0x0801af90

08016e4c <rcl_guard_condition_init>:
 8016e4c:	b082      	sub	sp, #8
 8016e4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e50:	b087      	sub	sp, #28
 8016e52:	ac0c      	add	r4, sp, #48	@ 0x30
 8016e54:	e884 000c 	stmia.w	r4, {r2, r3}
 8016e58:	46a6      	mov	lr, r4
 8016e5a:	460d      	mov	r5, r1
 8016e5c:	4604      	mov	r4, r0
 8016e5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e62:	f10d 0c04 	add.w	ip, sp, #4
 8016e66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e6a:	f8de 3000 	ldr.w	r3, [lr]
 8016e6e:	f8cc 3000 	str.w	r3, [ip]
 8016e72:	a801      	add	r0, sp, #4
 8016e74:	f7f3 f9c8 	bl	800a208 <rcutils_allocator_is_valid>
 8016e78:	b338      	cbz	r0, 8016eca <rcl_guard_condition_init+0x7e>
 8016e7a:	b334      	cbz	r4, 8016eca <rcl_guard_condition_init+0x7e>
 8016e7c:	6866      	ldr	r6, [r4, #4]
 8016e7e:	b9ee      	cbnz	r6, 8016ebc <rcl_guard_condition_init+0x70>
 8016e80:	b31d      	cbz	r5, 8016eca <rcl_guard_condition_init+0x7e>
 8016e82:	4628      	mov	r0, r5
 8016e84:	f7f9 fe4c 	bl	8010b20 <rcl_context_is_valid>
 8016e88:	b308      	cbz	r0, 8016ece <rcl_guard_condition_init+0x82>
 8016e8a:	9b01      	ldr	r3, [sp, #4]
 8016e8c:	9905      	ldr	r1, [sp, #20]
 8016e8e:	201c      	movs	r0, #28
 8016e90:	4798      	blx	r3
 8016e92:	4607      	mov	r7, r0
 8016e94:	6060      	str	r0, [r4, #4]
 8016e96:	b310      	cbz	r0, 8016ede <rcl_guard_condition_init+0x92>
 8016e98:	6828      	ldr	r0, [r5, #0]
 8016e9a:	3028      	adds	r0, #40	@ 0x28
 8016e9c:	f000 fc06 	bl	80176ac <rmw_create_guard_condition>
 8016ea0:	6038      	str	r0, [r7, #0]
 8016ea2:	6860      	ldr	r0, [r4, #4]
 8016ea4:	6807      	ldr	r7, [r0, #0]
 8016ea6:	b1a7      	cbz	r7, 8016ed2 <rcl_guard_condition_init+0x86>
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	ac01      	add	r4, sp, #4
 8016eac:	7103      	strb	r3, [r0, #4]
 8016eae:	f100 0708 	add.w	r7, r0, #8
 8016eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016eb4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016eb6:	6823      	ldr	r3, [r4, #0]
 8016eb8:	603b      	str	r3, [r7, #0]
 8016eba:	e000      	b.n	8016ebe <rcl_guard_condition_init+0x72>
 8016ebc:	2664      	movs	r6, #100	@ 0x64
 8016ebe:	4630      	mov	r0, r6
 8016ec0:	b007      	add	sp, #28
 8016ec2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ec6:	b002      	add	sp, #8
 8016ec8:	4770      	bx	lr
 8016eca:	260b      	movs	r6, #11
 8016ecc:	e7f7      	b.n	8016ebe <rcl_guard_condition_init+0x72>
 8016ece:	2665      	movs	r6, #101	@ 0x65
 8016ed0:	e7f5      	b.n	8016ebe <rcl_guard_condition_init+0x72>
 8016ed2:	9b02      	ldr	r3, [sp, #8]
 8016ed4:	9905      	ldr	r1, [sp, #20]
 8016ed6:	4798      	blx	r3
 8016ed8:	2601      	movs	r6, #1
 8016eda:	6067      	str	r7, [r4, #4]
 8016edc:	e7ef      	b.n	8016ebe <rcl_guard_condition_init+0x72>
 8016ede:	260a      	movs	r6, #10
 8016ee0:	e7ed      	b.n	8016ebe <rcl_guard_condition_init+0x72>
 8016ee2:	bf00      	nop

08016ee4 <rcl_guard_condition_init_from_rmw>:
 8016ee4:	b082      	sub	sp, #8
 8016ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eea:	b086      	sub	sp, #24
 8016eec:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016ef0:	4604      	mov	r4, r0
 8016ef2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016ef6:	460e      	mov	r6, r1
 8016ef8:	4617      	mov	r7, r2
 8016efa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016efe:	f10d 0e04 	add.w	lr, sp, #4
 8016f02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016f06:	f8dc 3000 	ldr.w	r3, [ip]
 8016f0a:	f8ce 3000 	str.w	r3, [lr]
 8016f0e:	a801      	add	r0, sp, #4
 8016f10:	f7f3 f97a 	bl	800a208 <rcutils_allocator_is_valid>
 8016f14:	b350      	cbz	r0, 8016f6c <rcl_guard_condition_init_from_rmw+0x88>
 8016f16:	b34c      	cbz	r4, 8016f6c <rcl_guard_condition_init_from_rmw+0x88>
 8016f18:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016f1c:	f1b8 0f00 	cmp.w	r8, #0
 8016f20:	d11e      	bne.n	8016f60 <rcl_guard_condition_init_from_rmw+0x7c>
 8016f22:	b31f      	cbz	r7, 8016f6c <rcl_guard_condition_init_from_rmw+0x88>
 8016f24:	4638      	mov	r0, r7
 8016f26:	f7f9 fdfb 	bl	8010b20 <rcl_context_is_valid>
 8016f2a:	b328      	cbz	r0, 8016f78 <rcl_guard_condition_init_from_rmw+0x94>
 8016f2c:	9b01      	ldr	r3, [sp, #4]
 8016f2e:	9905      	ldr	r1, [sp, #20]
 8016f30:	201c      	movs	r0, #28
 8016f32:	4798      	blx	r3
 8016f34:	4605      	mov	r5, r0
 8016f36:	6060      	str	r0, [r4, #4]
 8016f38:	b358      	cbz	r0, 8016f92 <rcl_guard_condition_init_from_rmw+0xae>
 8016f3a:	b1fe      	cbz	r6, 8016f7c <rcl_guard_condition_init_from_rmw+0x98>
 8016f3c:	6006      	str	r6, [r0, #0]
 8016f3e:	f880 8004 	strb.w	r8, [r0, #4]
 8016f42:	ac01      	add	r4, sp, #4
 8016f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f46:	f105 0c08 	add.w	ip, r5, #8
 8016f4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f4e:	6823      	ldr	r3, [r4, #0]
 8016f50:	f8cc 3000 	str.w	r3, [ip]
 8016f54:	2000      	movs	r0, #0
 8016f56:	b006      	add	sp, #24
 8016f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f5c:	b002      	add	sp, #8
 8016f5e:	4770      	bx	lr
 8016f60:	2064      	movs	r0, #100	@ 0x64
 8016f62:	b006      	add	sp, #24
 8016f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f68:	b002      	add	sp, #8
 8016f6a:	4770      	bx	lr
 8016f6c:	200b      	movs	r0, #11
 8016f6e:	b006      	add	sp, #24
 8016f70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f74:	b002      	add	sp, #8
 8016f76:	4770      	bx	lr
 8016f78:	2065      	movs	r0, #101	@ 0x65
 8016f7a:	e7f2      	b.n	8016f62 <rcl_guard_condition_init_from_rmw+0x7e>
 8016f7c:	6838      	ldr	r0, [r7, #0]
 8016f7e:	3028      	adds	r0, #40	@ 0x28
 8016f80:	f000 fb94 	bl	80176ac <rmw_create_guard_condition>
 8016f84:	6028      	str	r0, [r5, #0]
 8016f86:	6865      	ldr	r5, [r4, #4]
 8016f88:	682e      	ldr	r6, [r5, #0]
 8016f8a:	b126      	cbz	r6, 8016f96 <rcl_guard_condition_init_from_rmw+0xb2>
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	712b      	strb	r3, [r5, #4]
 8016f90:	e7d7      	b.n	8016f42 <rcl_guard_condition_init_from_rmw+0x5e>
 8016f92:	200a      	movs	r0, #10
 8016f94:	e7e5      	b.n	8016f62 <rcl_guard_condition_init_from_rmw+0x7e>
 8016f96:	4628      	mov	r0, r5
 8016f98:	9b02      	ldr	r3, [sp, #8]
 8016f9a:	9905      	ldr	r1, [sp, #20]
 8016f9c:	4798      	blx	r3
 8016f9e:	2001      	movs	r0, #1
 8016fa0:	6066      	str	r6, [r4, #4]
 8016fa2:	e7de      	b.n	8016f62 <rcl_guard_condition_init_from_rmw+0x7e>

08016fa4 <rcl_guard_condition_fini>:
 8016fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fa6:	b1d8      	cbz	r0, 8016fe0 <rcl_guard_condition_fini+0x3c>
 8016fa8:	4604      	mov	r4, r0
 8016faa:	6840      	ldr	r0, [r0, #4]
 8016fac:	b158      	cbz	r0, 8016fc6 <rcl_guard_condition_fini+0x22>
 8016fae:	6803      	ldr	r3, [r0, #0]
 8016fb0:	68c6      	ldr	r6, [r0, #12]
 8016fb2:	6987      	ldr	r7, [r0, #24]
 8016fb4:	b153      	cbz	r3, 8016fcc <rcl_guard_condition_fini+0x28>
 8016fb6:	7905      	ldrb	r5, [r0, #4]
 8016fb8:	b955      	cbnz	r5, 8016fd0 <rcl_guard_condition_fini+0x2c>
 8016fba:	4639      	mov	r1, r7
 8016fbc:	47b0      	blx	r6
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	6063      	str	r3, [r4, #4]
 8016fc2:	4628      	mov	r0, r5
 8016fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fc6:	4605      	mov	r5, r0
 8016fc8:	4628      	mov	r0, r5
 8016fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fcc:	461d      	mov	r5, r3
 8016fce:	e7f4      	b.n	8016fba <rcl_guard_condition_fini+0x16>
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f000 fb7f 	bl	80176d4 <rmw_destroy_guard_condition>
 8016fd6:	1e05      	subs	r5, r0, #0
 8016fd8:	bf18      	it	ne
 8016fda:	2501      	movne	r5, #1
 8016fdc:	6860      	ldr	r0, [r4, #4]
 8016fde:	e7ec      	b.n	8016fba <rcl_guard_condition_fini+0x16>
 8016fe0:	250b      	movs	r5, #11
 8016fe2:	4628      	mov	r0, r5
 8016fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fe6:	bf00      	nop

08016fe8 <rcl_guard_condition_get_default_options>:
 8016fe8:	b510      	push	{r4, lr}
 8016fea:	4604      	mov	r4, r0
 8016fec:	f7f3 f8e0 	bl	800a1b0 <rcutils_get_default_allocator>
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	bd10      	pop	{r4, pc}

08016ff4 <rcl_trigger_guard_condition>:
 8016ff4:	b148      	cbz	r0, 801700a <rcl_trigger_guard_condition+0x16>
 8016ff6:	b508      	push	{r3, lr}
 8016ff8:	6843      	ldr	r3, [r0, #4]
 8016ffa:	b143      	cbz	r3, 801700e <rcl_trigger_guard_condition+0x1a>
 8016ffc:	6818      	ldr	r0, [r3, #0]
 8016ffe:	f000 fb7d 	bl	80176fc <rmw_trigger_guard_condition>
 8017002:	3800      	subs	r0, #0
 8017004:	bf18      	it	ne
 8017006:	2001      	movne	r0, #1
 8017008:	bd08      	pop	{r3, pc}
 801700a:	200b      	movs	r0, #11
 801700c:	4770      	bx	lr
 801700e:	200b      	movs	r0, #11
 8017010:	bd08      	pop	{r3, pc}
 8017012:	bf00      	nop

08017014 <rcl_guard_condition_get_rmw_handle>:
 8017014:	b110      	cbz	r0, 801701c <rcl_guard_condition_get_rmw_handle+0x8>
 8017016:	6840      	ldr	r0, [r0, #4]
 8017018:	b100      	cbz	r0, 801701c <rcl_guard_condition_get_rmw_handle+0x8>
 801701a:	6800      	ldr	r0, [r0, #0]
 801701c:	4770      	bx	lr
 801701e:	bf00      	nop

08017020 <rcl_validate_topic_name>:
 8017020:	2800      	cmp	r0, #0
 8017022:	d06b      	beq.n	80170fc <rcl_validate_topic_name+0xdc>
 8017024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017028:	460d      	mov	r5, r1
 801702a:	2900      	cmp	r1, #0
 801702c:	d06d      	beq.n	801710a <rcl_validate_topic_name+0xea>
 801702e:	4616      	mov	r6, r2
 8017030:	4604      	mov	r4, r0
 8017032:	f7e9 f94d 	bl	80002d0 <strlen>
 8017036:	b190      	cbz	r0, 801705e <rcl_validate_topic_name+0x3e>
 8017038:	7821      	ldrb	r1, [r4, #0]
 801703a:	4a71      	ldr	r2, [pc, #452]	@ (8017200 <rcl_validate_topic_name+0x1e0>)
 801703c:	5c53      	ldrb	r3, [r2, r1]
 801703e:	f013 0304 	ands.w	r3, r3, #4
 8017042:	d15d      	bne.n	8017100 <rcl_validate_topic_name+0xe0>
 8017044:	1e47      	subs	r7, r0, #1
 8017046:	f814 c007 	ldrb.w	ip, [r4, r7]
 801704a:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801704e:	d10d      	bne.n	801706c <rcl_validate_topic_name+0x4c>
 8017050:	2302      	movs	r3, #2
 8017052:	602b      	str	r3, [r5, #0]
 8017054:	b146      	cbz	r6, 8017068 <rcl_validate_topic_name+0x48>
 8017056:	6037      	str	r7, [r6, #0]
 8017058:	2000      	movs	r0, #0
 801705a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801705e:	2301      	movs	r3, #1
 8017060:	602b      	str	r3, [r5, #0]
 8017062:	b10e      	cbz	r6, 8017068 <rcl_validate_topic_name+0x48>
 8017064:	2300      	movs	r3, #0
 8017066:	6033      	str	r3, [r6, #0]
 8017068:	2000      	movs	r0, #0
 801706a:	e7f6      	b.n	801705a <rcl_validate_topic_name+0x3a>
 801706c:	f104 38ff 	add.w	r8, r4, #4294967295
 8017070:	469a      	mov	sl, r3
 8017072:	469e      	mov	lr, r3
 8017074:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 8017078:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801707c:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 8017080:	d85b      	bhi.n	801713a <rcl_validate_topic_name+0x11a>
 8017082:	e8df f00c 	tbb	[pc, ip]
 8017086:	4463      	.short	0x4463
 8017088:	44444444 	.word	0x44444444
 801708c:	44444444 	.word	0x44444444
 8017090:	5a5a5a44 	.word	0x5a5a5a44
 8017094:	5a5a5a5a 	.word	0x5a5a5a5a
 8017098:	44444444 	.word	0x44444444
 801709c:	44444444 	.word	0x44444444
 80170a0:	44444444 	.word	0x44444444
 80170a4:	44444444 	.word	0x44444444
 80170a8:	44444444 	.word	0x44444444
 80170ac:	44444444 	.word	0x44444444
 80170b0:	5a5a4444 	.word	0x5a5a4444
 80170b4:	5a2e5a5a 	.word	0x5a2e5a5a
 80170b8:	44444444 	.word	0x44444444
 80170bc:	44444444 	.word	0x44444444
 80170c0:	44444444 	.word	0x44444444
 80170c4:	44444444 	.word	0x44444444
 80170c8:	44444444 	.word	0x44444444
 80170cc:	44444444 	.word	0x44444444
 80170d0:	5a284444 	.word	0x5a284444
 80170d4:	6b73      	.short	0x6b73
 80170d6:	f1ba 0f00 	cmp.w	sl, #0
 80170da:	d13a      	bne.n	8017152 <rcl_validate_topic_name+0x132>
 80170dc:	4673      	mov	r3, lr
 80170de:	f04f 0a01 	mov.w	sl, #1
 80170e2:	f10e 0e01 	add.w	lr, lr, #1
 80170e6:	4570      	cmp	r0, lr
 80170e8:	d1c4      	bne.n	8017074 <rcl_validate_topic_name+0x54>
 80170ea:	f1ba 0f00 	cmp.w	sl, #0
 80170ee:	d048      	beq.n	8017182 <rcl_validate_topic_name+0x162>
 80170f0:	2205      	movs	r2, #5
 80170f2:	602a      	str	r2, [r5, #0]
 80170f4:	2e00      	cmp	r6, #0
 80170f6:	d0b7      	beq.n	8017068 <rcl_validate_topic_name+0x48>
 80170f8:	6033      	str	r3, [r6, #0]
 80170fa:	e7b5      	b.n	8017068 <rcl_validate_topic_name+0x48>
 80170fc:	200b      	movs	r0, #11
 80170fe:	4770      	bx	lr
 8017100:	2304      	movs	r3, #4
 8017102:	602b      	str	r3, [r5, #0]
 8017104:	2e00      	cmp	r6, #0
 8017106:	d1ad      	bne.n	8017064 <rcl_validate_topic_name+0x44>
 8017108:	e7ae      	b.n	8017068 <rcl_validate_topic_name+0x48>
 801710a:	200b      	movs	r0, #11
 801710c:	e7a5      	b.n	801705a <rcl_validate_topic_name+0x3a>
 801710e:	f812 c009 	ldrb.w	ip, [r2, r9]
 8017112:	f01c 0f04 	tst.w	ip, #4
 8017116:	d0e4      	beq.n	80170e2 <rcl_validate_topic_name+0xc2>
 8017118:	f1ba 0f00 	cmp.w	sl, #0
 801711c:	d0e1      	beq.n	80170e2 <rcl_validate_topic_name+0xc2>
 801711e:	f1be 0f00 	cmp.w	lr, #0
 8017122:	d0de      	beq.n	80170e2 <rcl_validate_topic_name+0xc2>
 8017124:	f10e 3cff 	add.w	ip, lr, #4294967295
 8017128:	4563      	cmp	r3, ip
 801712a:	d1da      	bne.n	80170e2 <rcl_validate_topic_name+0xc2>
 801712c:	2309      	movs	r3, #9
 801712e:	602b      	str	r3, [r5, #0]
 8017130:	2e00      	cmp	r6, #0
 8017132:	d099      	beq.n	8017068 <rcl_validate_topic_name+0x48>
 8017134:	f8c6 e000 	str.w	lr, [r6]
 8017138:	e796      	b.n	8017068 <rcl_validate_topic_name+0x48>
 801713a:	f1ba 0f00 	cmp.w	sl, #0
 801713e:	bf0c      	ite	eq
 8017140:	2303      	moveq	r3, #3
 8017142:	2308      	movne	r3, #8
 8017144:	602b      	str	r3, [r5, #0]
 8017146:	2e00      	cmp	r6, #0
 8017148:	d1f4      	bne.n	8017134 <rcl_validate_topic_name+0x114>
 801714a:	e78d      	b.n	8017068 <rcl_validate_topic_name+0x48>
 801714c:	f1ba 0f00 	cmp.w	sl, #0
 8017150:	d0c7      	beq.n	80170e2 <rcl_validate_topic_name+0xc2>
 8017152:	2308      	movs	r3, #8
 8017154:	602b      	str	r3, [r5, #0]
 8017156:	2e00      	cmp	r6, #0
 8017158:	d1ec      	bne.n	8017134 <rcl_validate_topic_name+0x114>
 801715a:	e785      	b.n	8017068 <rcl_validate_topic_name+0x48>
 801715c:	f1be 0f00 	cmp.w	lr, #0
 8017160:	d0bf      	beq.n	80170e2 <rcl_validate_topic_name+0xc2>
 8017162:	2306      	movs	r3, #6
 8017164:	602b      	str	r3, [r5, #0]
 8017166:	2e00      	cmp	r6, #0
 8017168:	d1e4      	bne.n	8017134 <rcl_validate_topic_name+0x114>
 801716a:	e77d      	b.n	8017068 <rcl_validate_topic_name+0x48>
 801716c:	f1ba 0f00 	cmp.w	sl, #0
 8017170:	d104      	bne.n	801717c <rcl_validate_topic_name+0x15c>
 8017172:	2305      	movs	r3, #5
 8017174:	602b      	str	r3, [r5, #0]
 8017176:	2e00      	cmp	r6, #0
 8017178:	d1dc      	bne.n	8017134 <rcl_validate_topic_name+0x114>
 801717a:	e775      	b.n	8017068 <rcl_validate_topic_name+0x48>
 801717c:	f04f 0a00 	mov.w	sl, #0
 8017180:	e7af      	b.n	80170e2 <rcl_validate_topic_name+0xc2>
 8017182:	297e      	cmp	r1, #126	@ 0x7e
 8017184:	d01d      	beq.n	80171c2 <rcl_validate_topic_name+0x1a2>
 8017186:	2101      	movs	r1, #1
 8017188:	e006      	b.n	8017198 <rcl_validate_topic_name+0x178>
 801718a:	458e      	cmp	lr, r1
 801718c:	f104 0401 	add.w	r4, r4, #1
 8017190:	f101 0301 	add.w	r3, r1, #1
 8017194:	d912      	bls.n	80171bc <rcl_validate_topic_name+0x19c>
 8017196:	4619      	mov	r1, r3
 8017198:	4557      	cmp	r7, sl
 801719a:	f10a 0a01 	add.w	sl, sl, #1
 801719e:	d0f4      	beq.n	801718a <rcl_validate_topic_name+0x16a>
 80171a0:	7823      	ldrb	r3, [r4, #0]
 80171a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80171a4:	d1f1      	bne.n	801718a <rcl_validate_topic_name+0x16a>
 80171a6:	7863      	ldrb	r3, [r4, #1]
 80171a8:	5cd3      	ldrb	r3, [r2, r3]
 80171aa:	075b      	lsls	r3, r3, #29
 80171ac:	d5ed      	bpl.n	801718a <rcl_validate_topic_name+0x16a>
 80171ae:	2304      	movs	r3, #4
 80171b0:	602b      	str	r3, [r5, #0]
 80171b2:	2e00      	cmp	r6, #0
 80171b4:	f43f af58 	beq.w	8017068 <rcl_validate_topic_name+0x48>
 80171b8:	6031      	str	r1, [r6, #0]
 80171ba:	e755      	b.n	8017068 <rcl_validate_topic_name+0x48>
 80171bc:	2300      	movs	r3, #0
 80171be:	602b      	str	r3, [r5, #0]
 80171c0:	e752      	b.n	8017068 <rcl_validate_topic_name+0x48>
 80171c2:	4653      	mov	r3, sl
 80171c4:	2101      	movs	r1, #1
 80171c6:	e00a      	b.n	80171de <rcl_validate_topic_name+0x1be>
 80171c8:	2b01      	cmp	r3, #1
 80171ca:	d012      	beq.n	80171f2 <rcl_validate_topic_name+0x1d2>
 80171cc:	458e      	cmp	lr, r1
 80171ce:	f103 0301 	add.w	r3, r3, #1
 80171d2:	f104 0401 	add.w	r4, r4, #1
 80171d6:	f101 0001 	add.w	r0, r1, #1
 80171da:	d9ef      	bls.n	80171bc <rcl_validate_topic_name+0x19c>
 80171dc:	4601      	mov	r1, r0
 80171de:	429f      	cmp	r7, r3
 80171e0:	d0f4      	beq.n	80171cc <rcl_validate_topic_name+0x1ac>
 80171e2:	7820      	ldrb	r0, [r4, #0]
 80171e4:	282f      	cmp	r0, #47	@ 0x2f
 80171e6:	d1ef      	bne.n	80171c8 <rcl_validate_topic_name+0x1a8>
 80171e8:	7860      	ldrb	r0, [r4, #1]
 80171ea:	5c10      	ldrb	r0, [r2, r0]
 80171ec:	0740      	lsls	r0, r0, #29
 80171ee:	d5ed      	bpl.n	80171cc <rcl_validate_topic_name+0x1ac>
 80171f0:	e7dd      	b.n	80171ae <rcl_validate_topic_name+0x18e>
 80171f2:	2207      	movs	r2, #7
 80171f4:	602a      	str	r2, [r5, #0]
 80171f6:	2e00      	cmp	r6, #0
 80171f8:	f47f af7e 	bne.w	80170f8 <rcl_validate_topic_name+0xd8>
 80171fc:	e734      	b.n	8017068 <rcl_validate_topic_name+0x48>
 80171fe:	bf00      	nop
 8017200:	0801b0b3 	.word	0x0801b0b3

08017204 <rcutils_split>:
 8017204:	b082      	sub	sp, #8
 8017206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801720a:	b08b      	sub	sp, #44	@ 0x2c
 801720c:	ac14      	add	r4, sp, #80	@ 0x50
 801720e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8017210:	e884 000c 	stmia.w	r4, {r2, r3}
 8017214:	2f00      	cmp	r7, #0
 8017216:	f000 8091 	beq.w	801733c <rcutils_split+0x138>
 801721a:	4606      	mov	r6, r0
 801721c:	2800      	cmp	r0, #0
 801721e:	d072      	beq.n	8017306 <rcutils_split+0x102>
 8017220:	7804      	ldrb	r4, [r0, #0]
 8017222:	2c00      	cmp	r4, #0
 8017224:	d06f      	beq.n	8017306 <rcutils_split+0x102>
 8017226:	460d      	mov	r5, r1
 8017228:	f7e9 f852 	bl	80002d0 <strlen>
 801722c:	1833      	adds	r3, r6, r0
 801722e:	1b64      	subs	r4, r4, r5
 8017230:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017234:	4681      	mov	r9, r0
 8017236:	fab4 f484 	clz	r4, r4
 801723a:	0964      	lsrs	r4, r4, #5
 801723c:	42ab      	cmp	r3, r5
 801723e:	bf08      	it	eq
 8017240:	f1a9 0901 	subeq.w	r9, r9, #1
 8017244:	454c      	cmp	r4, r9
 8017246:	d26a      	bcs.n	801731e <rcutils_split+0x11a>
 8017248:	1933      	adds	r3, r6, r4
 801724a:	eb06 0009 	add.w	r0, r6, r9
 801724e:	2101      	movs	r1, #1
 8017250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017254:	42aa      	cmp	r2, r5
 8017256:	bf08      	it	eq
 8017258:	3101      	addeq	r1, #1
 801725a:	4283      	cmp	r3, r0
 801725c:	d1f8      	bne.n	8017250 <rcutils_split+0x4c>
 801725e:	aa14      	add	r2, sp, #80	@ 0x50
 8017260:	4638      	mov	r0, r7
 8017262:	f000 f88f 	bl	8017384 <rcutils_string_array_init>
 8017266:	2800      	cmp	r0, #0
 8017268:	d141      	bne.n	80172ee <rcutils_split+0xea>
 801726a:	687a      	ldr	r2, [r7, #4]
 801726c:	4680      	mov	r8, r0
 801726e:	46a2      	mov	sl, r4
 8017270:	e002      	b.n	8017278 <rcutils_split+0x74>
 8017272:	3401      	adds	r4, #1
 8017274:	454c      	cmp	r4, r9
 8017276:	d222      	bcs.n	80172be <rcutils_split+0xba>
 8017278:	5d33      	ldrb	r3, [r6, r4]
 801727a:	42ab      	cmp	r3, r5
 801727c:	d1f9      	bne.n	8017272 <rcutils_split+0x6e>
 801727e:	4554      	cmp	r4, sl
 8017280:	eba4 0b0a 	sub.w	fp, r4, sl
 8017284:	d038      	beq.n	80172f8 <rcutils_split+0xf4>
 8017286:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017288:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801728a:	9201      	str	r2, [sp, #4]
 801728c:	f10b 0002 	add.w	r0, fp, #2
 8017290:	4798      	blx	r3
 8017292:	9a01      	ldr	r2, [sp, #4]
 8017294:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 8017298:	687a      	ldr	r2, [r7, #4]
 801729a:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 801729e:	eb06 030a 	add.w	r3, r6, sl
 80172a2:	f10b 0101 	add.w	r1, fp, #1
 80172a6:	2800      	cmp	r0, #0
 80172a8:	d04e      	beq.n	8017348 <rcutils_split+0x144>
 80172aa:	4a2d      	ldr	r2, [pc, #180]	@ (8017360 <rcutils_split+0x15c>)
 80172ac:	f000 febe 	bl	801802c <sniprintf>
 80172b0:	687a      	ldr	r2, [r7, #4]
 80172b2:	f108 0801 	add.w	r8, r8, #1
 80172b6:	3401      	adds	r4, #1
 80172b8:	454c      	cmp	r4, r9
 80172ba:	46a2      	mov	sl, r4
 80172bc:	d3dc      	bcc.n	8017278 <rcutils_split+0x74>
 80172be:	4554      	cmp	r4, sl
 80172c0:	d035      	beq.n	801732e <rcutils_split+0x12a>
 80172c2:	eba4 040a 	sub.w	r4, r4, sl
 80172c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80172c8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80172ca:	9201      	str	r2, [sp, #4]
 80172cc:	1ca0      	adds	r0, r4, #2
 80172ce:	4798      	blx	r3
 80172d0:	9a01      	ldr	r2, [sp, #4]
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 80172d8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80172dc:	2800      	cmp	r0, #0
 80172de:	d035      	beq.n	801734c <rcutils_split+0x148>
 80172e0:	4a1f      	ldr	r2, [pc, #124]	@ (8017360 <rcutils_split+0x15c>)
 80172e2:	eb06 030a 	add.w	r3, r6, sl
 80172e6:	1c61      	adds	r1, r4, #1
 80172e8:	f000 fea0 	bl	801802c <sniprintf>
 80172ec:	2000      	movs	r0, #0
 80172ee:	b00b      	add	sp, #44	@ 0x2c
 80172f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172f4:	b002      	add	sp, #8
 80172f6:	4770      	bx	lr
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	3b01      	subs	r3, #1
 80172fc:	2100      	movs	r1, #0
 80172fe:	603b      	str	r3, [r7, #0]
 8017300:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8017304:	e7d7      	b.n	80172b6 <rcutils_split+0xb2>
 8017306:	a802      	add	r0, sp, #8
 8017308:	ac02      	add	r4, sp, #8
 801730a:	f000 f82b 	bl	8017364 <rcutils_get_zero_initialized_string_array>
 801730e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017310:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017312:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017316:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801731a:	2000      	movs	r0, #0
 801731c:	e7e7      	b.n	80172ee <rcutils_split+0xea>
 801731e:	aa14      	add	r2, sp, #80	@ 0x50
 8017320:	2101      	movs	r1, #1
 8017322:	4638      	mov	r0, r7
 8017324:	f000 f82e 	bl	8017384 <rcutils_string_array_init>
 8017328:	2800      	cmp	r0, #0
 801732a:	d1e0      	bne.n	80172ee <rcutils_split+0xea>
 801732c:	687a      	ldr	r2, [r7, #4]
 801732e:	683b      	ldr	r3, [r7, #0]
 8017330:	3b01      	subs	r3, #1
 8017332:	2100      	movs	r1, #0
 8017334:	603b      	str	r3, [r7, #0]
 8017336:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801733a:	e7ee      	b.n	801731a <rcutils_split+0x116>
 801733c:	200b      	movs	r0, #11
 801733e:	b00b      	add	sp, #44	@ 0x2c
 8017340:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017344:	b002      	add	sp, #8
 8017346:	4770      	bx	lr
 8017348:	f8c7 8000 	str.w	r8, [r7]
 801734c:	4638      	mov	r0, r7
 801734e:	f000 f83b 	bl	80173c8 <rcutils_string_array_fini>
 8017352:	b908      	cbnz	r0, 8017358 <rcutils_split+0x154>
 8017354:	200a      	movs	r0, #10
 8017356:	e7ca      	b.n	80172ee <rcutils_split+0xea>
 8017358:	f7f2 ff82 	bl	800a260 <rcutils_reset_error>
 801735c:	e7fa      	b.n	8017354 <rcutils_split+0x150>
 801735e:	bf00      	nop
 8017360:	08019e58 	.word	0x08019e58

08017364 <rcutils_get_zero_initialized_string_array>:
 8017364:	b510      	push	{r4, lr}
 8017366:	4c06      	ldr	r4, [pc, #24]	@ (8017380 <rcutils_get_zero_initialized_string_array+0x1c>)
 8017368:	4686      	mov	lr, r0
 801736a:	4684      	mov	ip, r0
 801736c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801736e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017372:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8017376:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801737a:	4670      	mov	r0, lr
 801737c:	bd10      	pop	{r4, pc}
 801737e:	bf00      	nop
 8017380:	0801af98 	.word	0x0801af98

08017384 <rcutils_string_array_init>:
 8017384:	b1da      	cbz	r2, 80173be <rcutils_string_array_init+0x3a>
 8017386:	b570      	push	{r4, r5, r6, lr}
 8017388:	4605      	mov	r5, r0
 801738a:	b1d0      	cbz	r0, 80173c2 <rcutils_string_array_init+0x3e>
 801738c:	460e      	mov	r6, r1
 801738e:	4614      	mov	r4, r2
 8017390:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 8017394:	6001      	str	r1, [r0, #0]
 8017396:	2104      	movs	r1, #4
 8017398:	4630      	mov	r0, r6
 801739a:	4798      	blx	r3
 801739c:	6068      	str	r0, [r5, #4]
 801739e:	b150      	cbz	r0, 80173b6 <rcutils_string_array_init+0x32>
 80173a0:	46a4      	mov	ip, r4
 80173a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80173a6:	f105 0408 	add.w	r4, r5, #8
 80173aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173ac:	f8dc 3000 	ldr.w	r3, [ip]
 80173b0:	6023      	str	r3, [r4, #0]
 80173b2:	2000      	movs	r0, #0
 80173b4:	bd70      	pop	{r4, r5, r6, pc}
 80173b6:	2e00      	cmp	r6, #0
 80173b8:	d0f2      	beq.n	80173a0 <rcutils_string_array_init+0x1c>
 80173ba:	200a      	movs	r0, #10
 80173bc:	bd70      	pop	{r4, r5, r6, pc}
 80173be:	200b      	movs	r0, #11
 80173c0:	4770      	bx	lr
 80173c2:	200b      	movs	r0, #11
 80173c4:	bd70      	pop	{r4, r5, r6, pc}
 80173c6:	bf00      	nop

080173c8 <rcutils_string_array_fini>:
 80173c8:	b310      	cbz	r0, 8017410 <rcutils_string_array_fini+0x48>
 80173ca:	6843      	ldr	r3, [r0, #4]
 80173cc:	b570      	push	{r4, r5, r6, lr}
 80173ce:	4604      	mov	r4, r0
 80173d0:	b1d3      	cbz	r3, 8017408 <rcutils_string_array_fini+0x40>
 80173d2:	3008      	adds	r0, #8
 80173d4:	f7f2 ff18 	bl	800a208 <rcutils_allocator_is_valid>
 80173d8:	b1c0      	cbz	r0, 801740c <rcutils_string_array_fini+0x44>
 80173da:	e9d4 3000 	ldrd	r3, r0, [r4]
 80173de:	b16b      	cbz	r3, 80173fc <rcutils_string_array_fini+0x34>
 80173e0:	2500      	movs	r5, #0
 80173e2:	462e      	mov	r6, r5
 80173e4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80173e8:	68e3      	ldr	r3, [r4, #12]
 80173ea:	69a1      	ldr	r1, [r4, #24]
 80173ec:	4798      	blx	r3
 80173ee:	e9d4 3000 	ldrd	r3, r0, [r4]
 80173f2:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80173f6:	3501      	adds	r5, #1
 80173f8:	42ab      	cmp	r3, r5
 80173fa:	d8f3      	bhi.n	80173e4 <rcutils_string_array_fini+0x1c>
 80173fc:	68e3      	ldr	r3, [r4, #12]
 80173fe:	69a1      	ldr	r1, [r4, #24]
 8017400:	4798      	blx	r3
 8017402:	2300      	movs	r3, #0
 8017404:	e9c4 3300 	strd	r3, r3, [r4]
 8017408:	2000      	movs	r0, #0
 801740a:	bd70      	pop	{r4, r5, r6, pc}
 801740c:	200b      	movs	r0, #11
 801740e:	bd70      	pop	{r4, r5, r6, pc}
 8017410:	200b      	movs	r0, #11
 8017412:	4770      	bx	lr

08017414 <rmw_discovery_options_init>:
 8017414:	b328      	cbz	r0, 8017462 <rmw_discovery_options_init+0x4e>
 8017416:	b570      	push	{r4, r5, r6, lr}
 8017418:	4604      	mov	r4, r0
 801741a:	4610      	mov	r0, r2
 801741c:	460e      	mov	r6, r1
 801741e:	4615      	mov	r5, r2
 8017420:	f7f2 fef2 	bl	800a208 <rcutils_allocator_is_valid>
 8017424:	b1d8      	cbz	r0, 801745e <rmw_discovery_options_init+0x4a>
 8017426:	68a3      	ldr	r3, [r4, #8]
 8017428:	b9cb      	cbnz	r3, 801745e <rmw_discovery_options_init+0x4a>
 801742a:	6863      	ldr	r3, [r4, #4]
 801742c:	b9bb      	cbnz	r3, 801745e <rmw_discovery_options_init+0x4a>
 801742e:	7823      	ldrb	r3, [r4, #0]
 8017430:	b90b      	cbnz	r3, 8017436 <rmw_discovery_options_init+0x22>
 8017432:	2302      	movs	r3, #2
 8017434:	7023      	strb	r3, [r4, #0]
 8017436:	b186      	cbz	r6, 801745a <rmw_discovery_options_init+0x46>
 8017438:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801743c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017440:	4630      	mov	r0, r6
 8017442:	4798      	blx	r3
 8017444:	6060      	str	r0, [r4, #4]
 8017446:	b170      	cbz	r0, 8017466 <rmw_discovery_options_init+0x52>
 8017448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801744a:	f104 0c0c 	add.w	ip, r4, #12
 801744e:	60a6      	str	r6, [r4, #8]
 8017450:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017454:	682b      	ldr	r3, [r5, #0]
 8017456:	f8cc 3000 	str.w	r3, [ip]
 801745a:	2000      	movs	r0, #0
 801745c:	bd70      	pop	{r4, r5, r6, pc}
 801745e:	200b      	movs	r0, #11
 8017460:	bd70      	pop	{r4, r5, r6, pc}
 8017462:	200b      	movs	r0, #11
 8017464:	4770      	bx	lr
 8017466:	200a      	movs	r0, #10
 8017468:	bd70      	pop	{r4, r5, r6, pc}
 801746a:	bf00      	nop

0801746c <rmw_enclave_options_copy>:
 801746c:	b1e0      	cbz	r0, 80174a8 <rmw_enclave_options_copy+0x3c>
 801746e:	b570      	push	{r4, r5, r6, lr}
 8017470:	4616      	mov	r6, r2
 8017472:	b082      	sub	sp, #8
 8017474:	b1aa      	cbz	r2, 80174a2 <rmw_enclave_options_copy+0x36>
 8017476:	4605      	mov	r5, r0
 8017478:	4608      	mov	r0, r1
 801747a:	460c      	mov	r4, r1
 801747c:	f7f2 fec4 	bl	800a208 <rcutils_allocator_is_valid>
 8017480:	b178      	cbz	r0, 80174a2 <rmw_enclave_options_copy+0x36>
 8017482:	f104 030c 	add.w	r3, r4, #12
 8017486:	e893 0003 	ldmia.w	r3, {r0, r1}
 801748a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801748e:	4628      	mov	r0, r5
 8017490:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017494:	f7fc fb18 	bl	8013ac8 <rcutils_strdup>
 8017498:	b140      	cbz	r0, 80174ac <rmw_enclave_options_copy+0x40>
 801749a:	6030      	str	r0, [r6, #0]
 801749c:	2000      	movs	r0, #0
 801749e:	b002      	add	sp, #8
 80174a0:	bd70      	pop	{r4, r5, r6, pc}
 80174a2:	200b      	movs	r0, #11
 80174a4:	b002      	add	sp, #8
 80174a6:	bd70      	pop	{r4, r5, r6, pc}
 80174a8:	200b      	movs	r0, #11
 80174aa:	4770      	bx	lr
 80174ac:	200a      	movs	r0, #10
 80174ae:	e7f6      	b.n	801749e <rmw_enclave_options_copy+0x32>

080174b0 <rmw_enclave_options_fini>:
 80174b0:	b170      	cbz	r0, 80174d0 <rmw_enclave_options_fini+0x20>
 80174b2:	b538      	push	{r3, r4, r5, lr}
 80174b4:	4605      	mov	r5, r0
 80174b6:	4608      	mov	r0, r1
 80174b8:	460c      	mov	r4, r1
 80174ba:	f7f2 fea5 	bl	800a208 <rcutils_allocator_is_valid>
 80174be:	b128      	cbz	r0, 80174cc <rmw_enclave_options_fini+0x1c>
 80174c0:	4628      	mov	r0, r5
 80174c2:	6863      	ldr	r3, [r4, #4]
 80174c4:	6921      	ldr	r1, [r4, #16]
 80174c6:	4798      	blx	r3
 80174c8:	2000      	movs	r0, #0
 80174ca:	bd38      	pop	{r3, r4, r5, pc}
 80174cc:	200b      	movs	r0, #11
 80174ce:	bd38      	pop	{r3, r4, r5, pc}
 80174d0:	200b      	movs	r0, #11
 80174d2:	4770      	bx	lr

080174d4 <rmw_get_default_security_options>:
 80174d4:	2200      	movs	r2, #0
 80174d6:	7002      	strb	r2, [r0, #0]
 80174d8:	6042      	str	r2, [r0, #4]
 80174da:	4770      	bx	lr

080174dc <on_status>:
 80174dc:	b082      	sub	sp, #8
 80174de:	b002      	add	sp, #8
 80174e0:	4770      	bx	lr
 80174e2:	bf00      	nop

080174e4 <on_topic>:
 80174e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174e8:	4a22      	ldr	r2, [pc, #136]	@ (8017574 <on_topic+0x90>)
 80174ea:	b094      	sub	sp, #80	@ 0x50
 80174ec:	6812      	ldr	r2, [r2, #0]
 80174ee:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80174f0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80174f4:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80174f8:	b3c2      	cbz	r2, 801756c <on_topic+0x88>
 80174fa:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80174fe:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8017502:	e001      	b.n	8017508 <on_topic+0x24>
 8017504:	6852      	ldr	r2, [r2, #4]
 8017506:	b38a      	cbz	r2, 801756c <on_topic+0x88>
 8017508:	6894      	ldr	r4, [r2, #8]
 801750a:	8aa3      	ldrh	r3, [r4, #20]
 801750c:	428b      	cmp	r3, r1
 801750e:	d1f9      	bne.n	8017504 <on_topic+0x20>
 8017510:	7da3      	ldrb	r3, [r4, #22]
 8017512:	4283      	cmp	r3, r0
 8017514:	d1f6      	bne.n	8017504 <on_topic+0x20>
 8017516:	2248      	movs	r2, #72	@ 0x48
 8017518:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801751c:	4668      	mov	r0, sp
 801751e:	f000 ffd4 	bl	80184ca <memcpy>
 8017522:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8017526:	cb0c      	ldmia	r3, {r2, r3}
 8017528:	4620      	mov	r0, r4
 801752a:	f7f3 fb27 	bl	800ab7c <rmw_uxrce_get_static_input_buffer_for_entity>
 801752e:	4607      	mov	r7, r0
 8017530:	b1e0      	cbz	r0, 801756c <on_topic+0x88>
 8017532:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8017536:	4632      	mov	r2, r6
 8017538:	4628      	mov	r0, r5
 801753a:	f108 0110 	add.w	r1, r8, #16
 801753e:	f7f4 f8b1 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 8017542:	b930      	cbnz	r0, 8017552 <on_topic+0x6e>
 8017544:	480c      	ldr	r0, [pc, #48]	@ (8017578 <on_topic+0x94>)
 8017546:	4639      	mov	r1, r7
 8017548:	b014      	add	sp, #80	@ 0x50
 801754a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801754e:	f7fc be25 	b.w	801419c <put_memory>
 8017552:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8017556:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801755a:	f7f3 f90d 	bl	800a778 <rmw_uros_epoch_nanos>
 801755e:	2305      	movs	r3, #5
 8017560:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017564:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017568:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801756c:	b014      	add	sp, #80	@ 0x50
 801756e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017572:	bf00      	nop
 8017574:	2000e180 	.word	0x2000e180
 8017578:	2000d9d0 	.word	0x2000d9d0

0801757c <on_request>:
 801757c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017580:	4823      	ldr	r0, [pc, #140]	@ (8017610 <on_request+0x94>)
 8017582:	b094      	sub	sp, #80	@ 0x50
 8017584:	6800      	ldr	r0, [r0, #0]
 8017586:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017588:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801758c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801758e:	2800      	cmp	r0, #0
 8017590:	d03b      	beq.n	801760a <on_request+0x8e>
 8017592:	461d      	mov	r5, r3
 8017594:	e001      	b.n	801759a <on_request+0x1e>
 8017596:	6840      	ldr	r0, [r0, #4]
 8017598:	b3b8      	cbz	r0, 801760a <on_request+0x8e>
 801759a:	6884      	ldr	r4, [r0, #8]
 801759c:	8b21      	ldrh	r1, [r4, #24]
 801759e:	4291      	cmp	r1, r2
 80175a0:	d1f9      	bne.n	8017596 <on_request+0x1a>
 80175a2:	2248      	movs	r2, #72	@ 0x48
 80175a4:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80175a8:	4668      	mov	r0, sp
 80175aa:	f000 ff8e 	bl	80184ca <memcpy>
 80175ae:	f104 0320 	add.w	r3, r4, #32
 80175b2:	cb0c      	ldmia	r3, {r2, r3}
 80175b4:	4620      	mov	r0, r4
 80175b6:	f7f3 fae1 	bl	800ab7c <rmw_uxrce_get_static_input_buffer_for_entity>
 80175ba:	4680      	mov	r8, r0
 80175bc:	b328      	cbz	r0, 801760a <on_request+0x8e>
 80175be:	4638      	mov	r0, r7
 80175c0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80175c4:	4632      	mov	r2, r6
 80175c6:	f107 0110 	add.w	r1, r7, #16
 80175ca:	f7f4 f86b 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 80175ce:	b930      	cbnz	r0, 80175de <on_request+0x62>
 80175d0:	4810      	ldr	r0, [pc, #64]	@ (8017614 <on_request+0x98>)
 80175d2:	4641      	mov	r1, r8
 80175d4:	b014      	add	sp, #80	@ 0x50
 80175d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175da:	f7fc bddf 	b.w	801419c <put_memory>
 80175de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80175e0:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80175e4:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80175e8:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80175ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80175f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80175f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80175f8:	f7f3 f8be 	bl	800a778 <rmw_uros_epoch_nanos>
 80175fc:	2303      	movs	r3, #3
 80175fe:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017602:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017606:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801760a:	b014      	add	sp, #80	@ 0x50
 801760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017610:	2000dd38 	.word	0x2000dd38
 8017614:	2000d9d0 	.word	0x2000d9d0

08017618 <on_reply>:
 8017618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801761c:	4821      	ldr	r0, [pc, #132]	@ (80176a4 <on_reply+0x8c>)
 801761e:	b094      	sub	sp, #80	@ 0x50
 8017620:	6800      	ldr	r0, [r0, #0]
 8017622:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017624:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017628:	9113      	str	r1, [sp, #76]	@ 0x4c
 801762a:	b3b8      	cbz	r0, 801769c <on_reply+0x84>
 801762c:	461d      	mov	r5, r3
 801762e:	e001      	b.n	8017634 <on_reply+0x1c>
 8017630:	6840      	ldr	r0, [r0, #4]
 8017632:	b398      	cbz	r0, 801769c <on_reply+0x84>
 8017634:	6884      	ldr	r4, [r0, #8]
 8017636:	8b21      	ldrh	r1, [r4, #24]
 8017638:	4291      	cmp	r1, r2
 801763a:	d1f9      	bne.n	8017630 <on_reply+0x18>
 801763c:	2248      	movs	r2, #72	@ 0x48
 801763e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017642:	4668      	mov	r0, sp
 8017644:	f000 ff41 	bl	80184ca <memcpy>
 8017648:	f104 0320 	add.w	r3, r4, #32
 801764c:	cb0c      	ldmia	r3, {r2, r3}
 801764e:	4620      	mov	r0, r4
 8017650:	f7f3 fa94 	bl	800ab7c <rmw_uxrce_get_static_input_buffer_for_entity>
 8017654:	4680      	mov	r8, r0
 8017656:	b308      	cbz	r0, 801769c <on_reply+0x84>
 8017658:	4638      	mov	r0, r7
 801765a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801765e:	4632      	mov	r2, r6
 8017660:	f107 0110 	add.w	r1, r7, #16
 8017664:	f7f4 f81e 	bl	800b6a4 <ucdr_deserialize_array_uint8_t>
 8017668:	b930      	cbnz	r0, 8017678 <on_reply+0x60>
 801766a:	480f      	ldr	r0, [pc, #60]	@ (80176a8 <on_reply+0x90>)
 801766c:	4641      	mov	r1, r8
 801766e:	b014      	add	sp, #80	@ 0x50
 8017670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017674:	f7fc bd92 	b.w	801419c <put_memory>
 8017678:	2200      	movs	r2, #0
 801767a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801767e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017682:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017686:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801768a:	f7f3 f875 	bl	800a778 <rmw_uros_epoch_nanos>
 801768e:	2304      	movs	r3, #4
 8017690:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017694:	e942 0102 	strd	r0, r1, [r2, #-8]
 8017698:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801769c:	b014      	add	sp, #80	@ 0x50
 801769e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176a2:	bf00      	nop
 80176a4:	2000dc60 	.word	0x2000dc60
 80176a8:	2000d9d0 	.word	0x2000d9d0

080176ac <rmw_create_guard_condition>:
 80176ac:	b538      	push	{r3, r4, r5, lr}
 80176ae:	4605      	mov	r5, r0
 80176b0:	4807      	ldr	r0, [pc, #28]	@ (80176d0 <rmw_create_guard_condition+0x24>)
 80176b2:	f7fc fd63 	bl	801417c <get_memory>
 80176b6:	b148      	cbz	r0, 80176cc <rmw_create_guard_condition+0x20>
 80176b8:	6884      	ldr	r4, [r0, #8]
 80176ba:	2300      	movs	r3, #0
 80176bc:	7423      	strb	r3, [r4, #16]
 80176be:	61e5      	str	r5, [r4, #28]
 80176c0:	f7fc fde2 	bl	8014288 <rmw_get_implementation_identifier>
 80176c4:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80176c8:	f104 0014 	add.w	r0, r4, #20
 80176cc:	bd38      	pop	{r3, r4, r5, pc}
 80176ce:	bf00      	nop
 80176d0:	2000b7ac 	.word	0x2000b7ac

080176d4 <rmw_destroy_guard_condition>:
 80176d4:	b508      	push	{r3, lr}
 80176d6:	4b08      	ldr	r3, [pc, #32]	@ (80176f8 <rmw_destroy_guard_condition+0x24>)
 80176d8:	6819      	ldr	r1, [r3, #0]
 80176da:	b911      	cbnz	r1, 80176e2 <rmw_destroy_guard_condition+0xe>
 80176dc:	e00a      	b.n	80176f4 <rmw_destroy_guard_condition+0x20>
 80176de:	6849      	ldr	r1, [r1, #4]
 80176e0:	b141      	cbz	r1, 80176f4 <rmw_destroy_guard_condition+0x20>
 80176e2:	688b      	ldr	r3, [r1, #8]
 80176e4:	3314      	adds	r3, #20
 80176e6:	4298      	cmp	r0, r3
 80176e8:	d1f9      	bne.n	80176de <rmw_destroy_guard_condition+0xa>
 80176ea:	4803      	ldr	r0, [pc, #12]	@ (80176f8 <rmw_destroy_guard_condition+0x24>)
 80176ec:	f7fc fd56 	bl	801419c <put_memory>
 80176f0:	2000      	movs	r0, #0
 80176f2:	bd08      	pop	{r3, pc}
 80176f4:	2001      	movs	r0, #1
 80176f6:	bd08      	pop	{r3, pc}
 80176f8:	2000b7ac 	.word	0x2000b7ac

080176fc <rmw_trigger_guard_condition>:
 80176fc:	b160      	cbz	r0, 8017718 <rmw_trigger_guard_condition+0x1c>
 80176fe:	b510      	push	{r4, lr}
 8017700:	4604      	mov	r4, r0
 8017702:	6800      	ldr	r0, [r0, #0]
 8017704:	f7f3 fbbc 	bl	800ae80 <is_uxrce_rmw_identifier_valid>
 8017708:	b908      	cbnz	r0, 801770e <rmw_trigger_guard_condition+0x12>
 801770a:	2001      	movs	r0, #1
 801770c:	bd10      	pop	{r4, pc}
 801770e:	6863      	ldr	r3, [r4, #4]
 8017710:	2201      	movs	r2, #1
 8017712:	741a      	strb	r2, [r3, #16]
 8017714:	2000      	movs	r0, #0
 8017716:	bd10      	pop	{r4, pc}
 8017718:	2001      	movs	r0, #1
 801771a:	4770      	bx	lr

0801771c <geometry_msgs__msg__Pose__init>:
 801771c:	b1d8      	cbz	r0, 8017756 <geometry_msgs__msg__Pose__init+0x3a>
 801771e:	b538      	push	{r3, r4, r5, lr}
 8017720:	4604      	mov	r4, r0
 8017722:	f000 f913 	bl	801794c <geometry_msgs__msg__Point__init>
 8017726:	b130      	cbz	r0, 8017736 <geometry_msgs__msg__Pose__init+0x1a>
 8017728:	f104 0518 	add.w	r5, r4, #24
 801772c:	4628      	mov	r0, r5
 801772e:	f000 f823 	bl	8017778 <geometry_msgs__msg__Quaternion__init>
 8017732:	b148      	cbz	r0, 8017748 <geometry_msgs__msg__Pose__init+0x2c>
 8017734:	bd38      	pop	{r3, r4, r5, pc}
 8017736:	4620      	mov	r0, r4
 8017738:	f000 f90c 	bl	8017954 <geometry_msgs__msg__Point__fini>
 801773c:	f104 0018 	add.w	r0, r4, #24
 8017740:	f000 f82e 	bl	80177a0 <geometry_msgs__msg__Quaternion__fini>
 8017744:	2000      	movs	r0, #0
 8017746:	bd38      	pop	{r3, r4, r5, pc}
 8017748:	4620      	mov	r0, r4
 801774a:	f000 f903 	bl	8017954 <geometry_msgs__msg__Point__fini>
 801774e:	4628      	mov	r0, r5
 8017750:	f000 f826 	bl	80177a0 <geometry_msgs__msg__Quaternion__fini>
 8017754:	e7f6      	b.n	8017744 <geometry_msgs__msg__Pose__init+0x28>
 8017756:	2000      	movs	r0, #0
 8017758:	4770      	bx	lr
 801775a:	bf00      	nop

0801775c <geometry_msgs__msg__Pose__fini>:
 801775c:	b148      	cbz	r0, 8017772 <geometry_msgs__msg__Pose__fini+0x16>
 801775e:	b510      	push	{r4, lr}
 8017760:	4604      	mov	r4, r0
 8017762:	f000 f8f7 	bl	8017954 <geometry_msgs__msg__Point__fini>
 8017766:	f104 0018 	add.w	r0, r4, #24
 801776a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801776e:	f000 b817 	b.w	80177a0 <geometry_msgs__msg__Quaternion__fini>
 8017772:	4770      	bx	lr
 8017774:	0000      	movs	r0, r0
	...

08017778 <geometry_msgs__msg__Quaternion__init>:
 8017778:	b160      	cbz	r0, 8017794 <geometry_msgs__msg__Quaternion__init+0x1c>
 801777a:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8017798 <geometry_msgs__msg__Quaternion__init+0x20>
 801777e:	2200      	movs	r2, #0
 8017780:	2300      	movs	r3, #0
 8017782:	e9c0 2300 	strd	r2, r3, [r0]
 8017786:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801778a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801778e:	ed80 7b06 	vstr	d7, [r0, #24]
 8017792:	2001      	movs	r0, #1
 8017794:	4770      	bx	lr
 8017796:	bf00      	nop
 8017798:	00000000 	.word	0x00000000
 801779c:	3ff00000 	.word	0x3ff00000

080177a0 <geometry_msgs__msg__Quaternion__fini>:
 80177a0:	4770      	bx	lr
 80177a2:	bf00      	nop

080177a4 <geometry_msgs__msg__Twist__init>:
 80177a4:	b1d8      	cbz	r0, 80177de <geometry_msgs__msg__Twist__init+0x3a>
 80177a6:	b538      	push	{r3, r4, r5, lr}
 80177a8:	4604      	mov	r4, r0
 80177aa:	f000 f827 	bl	80177fc <geometry_msgs__msg__Vector3__init>
 80177ae:	b130      	cbz	r0, 80177be <geometry_msgs__msg__Twist__init+0x1a>
 80177b0:	f104 0518 	add.w	r5, r4, #24
 80177b4:	4628      	mov	r0, r5
 80177b6:	f000 f821 	bl	80177fc <geometry_msgs__msg__Vector3__init>
 80177ba:	b148      	cbz	r0, 80177d0 <geometry_msgs__msg__Twist__init+0x2c>
 80177bc:	bd38      	pop	{r3, r4, r5, pc}
 80177be:	4620      	mov	r0, r4
 80177c0:	f000 f820 	bl	8017804 <geometry_msgs__msg__Vector3__fini>
 80177c4:	f104 0018 	add.w	r0, r4, #24
 80177c8:	f000 f81c 	bl	8017804 <geometry_msgs__msg__Vector3__fini>
 80177cc:	2000      	movs	r0, #0
 80177ce:	bd38      	pop	{r3, r4, r5, pc}
 80177d0:	4620      	mov	r0, r4
 80177d2:	f000 f817 	bl	8017804 <geometry_msgs__msg__Vector3__fini>
 80177d6:	4628      	mov	r0, r5
 80177d8:	f000 f814 	bl	8017804 <geometry_msgs__msg__Vector3__fini>
 80177dc:	e7f6      	b.n	80177cc <geometry_msgs__msg__Twist__init+0x28>
 80177de:	2000      	movs	r0, #0
 80177e0:	4770      	bx	lr
 80177e2:	bf00      	nop

080177e4 <geometry_msgs__msg__Twist__fini>:
 80177e4:	b148      	cbz	r0, 80177fa <geometry_msgs__msg__Twist__fini+0x16>
 80177e6:	b510      	push	{r4, lr}
 80177e8:	4604      	mov	r4, r0
 80177ea:	f000 f80b 	bl	8017804 <geometry_msgs__msg__Vector3__fini>
 80177ee:	f104 0018 	add.w	r0, r4, #24
 80177f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177f6:	f000 b805 	b.w	8017804 <geometry_msgs__msg__Vector3__fini>
 80177fa:	4770      	bx	lr

080177fc <geometry_msgs__msg__Vector3__init>:
 80177fc:	3800      	subs	r0, #0
 80177fe:	bf18      	it	ne
 8017800:	2001      	movne	r0, #1
 8017802:	4770      	bx	lr

08017804 <geometry_msgs__msg__Vector3__fini>:
 8017804:	4770      	bx	lr
 8017806:	bf00      	nop

08017808 <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_init_function>:
 8017808:	f000 b8a0 	b.w	801794c <geometry_msgs__msg__Point__init>

0801780c <geometry_msgs__msg__Point__rosidl_typesupport_introspection_c__Point_fini_function>:
 801780c:	f000 b8a2 	b.w	8017954 <geometry_msgs__msg__Point__fini>

08017810 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8017810:	4b04      	ldr	r3, [pc, #16]	@ (8017824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8017812:	681a      	ldr	r2, [r3, #0]
 8017814:	b10a      	cbz	r2, 801781a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0xa>
 8017816:	4803      	ldr	r0, [pc, #12]	@ (8017824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 8017818:	4770      	bx	lr
 801781a:	4a03      	ldr	r2, [pc, #12]	@ (8017828 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x18>)
 801781c:	4801      	ldr	r0, [pc, #4]	@ (8017824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x14>)
 801781e:	6812      	ldr	r2, [r2, #0]
 8017820:	601a      	str	r2, [r3, #0]
 8017822:	4770      	bx	lr
 8017824:	200021a4 	.word	0x200021a4
 8017828:	20000188 	.word	0x20000188

0801782c <get_serialized_size_geometry_msgs__msg__Point>:
 801782c:	b1b8      	cbz	r0, 801785e <get_serialized_size_geometry_msgs__msg__Point+0x32>
 801782e:	b570      	push	{r4, r5, r6, lr}
 8017830:	460d      	mov	r5, r1
 8017832:	4628      	mov	r0, r5
 8017834:	2108      	movs	r1, #8
 8017836:	f7f5 fb35 	bl	800cea4 <ucdr_alignment>
 801783a:	2108      	movs	r1, #8
 801783c:	186e      	adds	r6, r5, r1
 801783e:	4406      	add	r6, r0
 8017840:	4630      	mov	r0, r6
 8017842:	f7f5 fb2f 	bl	800cea4 <ucdr_alignment>
 8017846:	f100 0408 	add.w	r4, r0, #8
 801784a:	4434      	add	r4, r6
 801784c:	2108      	movs	r1, #8
 801784e:	4620      	mov	r0, r4
 8017850:	f7f5 fb28 	bl	800cea4 <ucdr_alignment>
 8017854:	f1c5 0508 	rsb	r5, r5, #8
 8017858:	4405      	add	r5, r0
 801785a:	1928      	adds	r0, r5, r4
 801785c:	bd70      	pop	{r4, r5, r6, pc}
 801785e:	4770      	bx	lr

08017860 <_Point__cdr_deserialize>:
 8017860:	b538      	push	{r3, r4, r5, lr}
 8017862:	460c      	mov	r4, r1
 8017864:	b171      	cbz	r1, 8017884 <_Point__cdr_deserialize+0x24>
 8017866:	4605      	mov	r5, r0
 8017868:	f7f5 f93e 	bl	800cae8 <ucdr_deserialize_double>
 801786c:	f104 0108 	add.w	r1, r4, #8
 8017870:	4628      	mov	r0, r5
 8017872:	f7f5 f939 	bl	800cae8 <ucdr_deserialize_double>
 8017876:	f104 0110 	add.w	r1, r4, #16
 801787a:	4628      	mov	r0, r5
 801787c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017880:	f7f5 b932 	b.w	800cae8 <ucdr_deserialize_double>
 8017884:	4608      	mov	r0, r1
 8017886:	bd38      	pop	{r3, r4, r5, pc}

08017888 <_Point__cdr_serialize>:
 8017888:	b198      	cbz	r0, 80178b2 <_Point__cdr_serialize+0x2a>
 801788a:	b538      	push	{r3, r4, r5, lr}
 801788c:	ed90 0b00 	vldr	d0, [r0]
 8017890:	460d      	mov	r5, r1
 8017892:	4604      	mov	r4, r0
 8017894:	4608      	mov	r0, r1
 8017896:	f7f4 ff97 	bl	800c7c8 <ucdr_serialize_double>
 801789a:	ed94 0b02 	vldr	d0, [r4, #8]
 801789e:	4628      	mov	r0, r5
 80178a0:	f7f4 ff92 	bl	800c7c8 <ucdr_serialize_double>
 80178a4:	ed94 0b04 	vldr	d0, [r4, #16]
 80178a8:	4628      	mov	r0, r5
 80178aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80178ae:	f7f4 bf8b 	b.w	800c7c8 <ucdr_serialize_double>
 80178b2:	4770      	bx	lr

080178b4 <_Point__get_serialized_size>:
 80178b4:	b1a0      	cbz	r0, 80178e0 <_Point__get_serialized_size+0x2c>
 80178b6:	b538      	push	{r3, r4, r5, lr}
 80178b8:	2108      	movs	r1, #8
 80178ba:	2000      	movs	r0, #0
 80178bc:	f7f5 faf2 	bl	800cea4 <ucdr_alignment>
 80178c0:	f100 0508 	add.w	r5, r0, #8
 80178c4:	2108      	movs	r1, #8
 80178c6:	4628      	mov	r0, r5
 80178c8:	f7f5 faec 	bl	800cea4 <ucdr_alignment>
 80178cc:	f100 0408 	add.w	r4, r0, #8
 80178d0:	442c      	add	r4, r5
 80178d2:	2108      	movs	r1, #8
 80178d4:	4620      	mov	r0, r4
 80178d6:	f7f5 fae5 	bl	800cea4 <ucdr_alignment>
 80178da:	3008      	adds	r0, #8
 80178dc:	4420      	add	r0, r4
 80178de:	bd38      	pop	{r3, r4, r5, pc}
 80178e0:	4770      	bx	lr
 80178e2:	bf00      	nop

080178e4 <_Point__max_serialized_size>:
 80178e4:	b538      	push	{r3, r4, r5, lr}
 80178e6:	2108      	movs	r1, #8
 80178e8:	2000      	movs	r0, #0
 80178ea:	f7f5 fadb 	bl	800cea4 <ucdr_alignment>
 80178ee:	f100 0508 	add.w	r5, r0, #8
 80178f2:	2108      	movs	r1, #8
 80178f4:	4628      	mov	r0, r5
 80178f6:	f7f5 fad5 	bl	800cea4 <ucdr_alignment>
 80178fa:	f100 0408 	add.w	r4, r0, #8
 80178fe:	442c      	add	r4, r5
 8017900:	2108      	movs	r1, #8
 8017902:	4620      	mov	r0, r4
 8017904:	f7f5 face 	bl	800cea4 <ucdr_alignment>
 8017908:	3008      	adds	r0, #8
 801790a:	4420      	add	r0, r4
 801790c:	bd38      	pop	{r3, r4, r5, pc}
 801790e:	bf00      	nop

08017910 <max_serialized_size_geometry_msgs__msg__Point>:
 8017910:	b570      	push	{r4, r5, r6, lr}
 8017912:	2301      	movs	r3, #1
 8017914:	460c      	mov	r4, r1
 8017916:	7003      	strb	r3, [r0, #0]
 8017918:	2108      	movs	r1, #8
 801791a:	4620      	mov	r0, r4
 801791c:	f7f5 fac2 	bl	800cea4 <ucdr_alignment>
 8017920:	2108      	movs	r1, #8
 8017922:	1863      	adds	r3, r4, r1
 8017924:	18c6      	adds	r6, r0, r3
 8017926:	4630      	mov	r0, r6
 8017928:	f7f5 fabc 	bl	800cea4 <ucdr_alignment>
 801792c:	f100 0508 	add.w	r5, r0, #8
 8017930:	4435      	add	r5, r6
 8017932:	2108      	movs	r1, #8
 8017934:	4628      	mov	r0, r5
 8017936:	f7f5 fab5 	bl	800cea4 <ucdr_alignment>
 801793a:	f1c4 0408 	rsb	r4, r4, #8
 801793e:	4420      	add	r0, r4
 8017940:	4428      	add	r0, r5
 8017942:	bd70      	pop	{r4, r5, r6, pc}

08017944 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point>:
 8017944:	4800      	ldr	r0, [pc, #0]	@ (8017948 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Point+0x4>)
 8017946:	4770      	bx	lr
 8017948:	20002270 	.word	0x20002270

0801794c <geometry_msgs__msg__Point__init>:
 801794c:	3800      	subs	r0, #0
 801794e:	bf18      	it	ne
 8017950:	2001      	movne	r0, #1
 8017952:	4770      	bx	lr

08017954 <geometry_msgs__msg__Point__fini>:
 8017954:	4770      	bx	lr
 8017956:	bf00      	nop

08017958 <calloc>:
 8017958:	4b02      	ldr	r3, [pc, #8]	@ (8017964 <calloc+0xc>)
 801795a:	460a      	mov	r2, r1
 801795c:	4601      	mov	r1, r0
 801795e:	6818      	ldr	r0, [r3, #0]
 8017960:	f000 b802 	b.w	8017968 <_calloc_r>
 8017964:	200022b0 	.word	0x200022b0

08017968 <_calloc_r>:
 8017968:	b570      	push	{r4, r5, r6, lr}
 801796a:	fba1 5402 	umull	r5, r4, r1, r2
 801796e:	b934      	cbnz	r4, 801797e <_calloc_r+0x16>
 8017970:	4629      	mov	r1, r5
 8017972:	f000 f899 	bl	8017aa8 <_malloc_r>
 8017976:	4606      	mov	r6, r0
 8017978:	b928      	cbnz	r0, 8017986 <_calloc_r+0x1e>
 801797a:	4630      	mov	r0, r6
 801797c:	bd70      	pop	{r4, r5, r6, pc}
 801797e:	220c      	movs	r2, #12
 8017980:	6002      	str	r2, [r0, #0]
 8017982:	2600      	movs	r6, #0
 8017984:	e7f9      	b.n	801797a <_calloc_r+0x12>
 8017986:	462a      	mov	r2, r5
 8017988:	4621      	mov	r1, r4
 801798a:	f000 fcc3 	bl	8018314 <memset>
 801798e:	e7f4      	b.n	801797a <_calloc_r+0x12>

08017990 <exit>:
 8017990:	b508      	push	{r3, lr}
 8017992:	4b06      	ldr	r3, [pc, #24]	@ (80179ac <exit+0x1c>)
 8017994:	4604      	mov	r4, r0
 8017996:	b113      	cbz	r3, 801799e <exit+0xe>
 8017998:	2100      	movs	r1, #0
 801799a:	f3af 8000 	nop.w
 801799e:	4b04      	ldr	r3, [pc, #16]	@ (80179b0 <exit+0x20>)
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	b103      	cbz	r3, 80179a6 <exit+0x16>
 80179a4:	4798      	blx	r3
 80179a6:	4620      	mov	r0, r4
 80179a8:	f7eb f865 	bl	8002a76 <_exit>
 80179ac:	00000000 	.word	0x00000000
 80179b0:	200106d4 	.word	0x200106d4

080179b4 <getenv>:
 80179b4:	b507      	push	{r0, r1, r2, lr}
 80179b6:	4b04      	ldr	r3, [pc, #16]	@ (80179c8 <getenv+0x14>)
 80179b8:	4601      	mov	r1, r0
 80179ba:	aa01      	add	r2, sp, #4
 80179bc:	6818      	ldr	r0, [r3, #0]
 80179be:	f000 f805 	bl	80179cc <_findenv_r>
 80179c2:	b003      	add	sp, #12
 80179c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80179c8:	200022b0 	.word	0x200022b0

080179cc <_findenv_r>:
 80179cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017a40 <_findenv_r+0x74>
 80179d4:	4606      	mov	r6, r0
 80179d6:	4689      	mov	r9, r1
 80179d8:	4617      	mov	r7, r2
 80179da:	f000 fda3 	bl	8018524 <__env_lock>
 80179de:	f8da 4000 	ldr.w	r4, [sl]
 80179e2:	b134      	cbz	r4, 80179f2 <_findenv_r+0x26>
 80179e4:	464b      	mov	r3, r9
 80179e6:	4698      	mov	r8, r3
 80179e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80179ec:	b13a      	cbz	r2, 80179fe <_findenv_r+0x32>
 80179ee:	2a3d      	cmp	r2, #61	@ 0x3d
 80179f0:	d1f9      	bne.n	80179e6 <_findenv_r+0x1a>
 80179f2:	4630      	mov	r0, r6
 80179f4:	f000 fd9c 	bl	8018530 <__env_unlock>
 80179f8:	2000      	movs	r0, #0
 80179fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179fe:	eba8 0809 	sub.w	r8, r8, r9
 8017a02:	46a3      	mov	fp, r4
 8017a04:	f854 0b04 	ldr.w	r0, [r4], #4
 8017a08:	2800      	cmp	r0, #0
 8017a0a:	d0f2      	beq.n	80179f2 <_findenv_r+0x26>
 8017a0c:	4642      	mov	r2, r8
 8017a0e:	4649      	mov	r1, r9
 8017a10:	f000 fc95 	bl	801833e <strncmp>
 8017a14:	2800      	cmp	r0, #0
 8017a16:	d1f4      	bne.n	8017a02 <_findenv_r+0x36>
 8017a18:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017a1c:	eb03 0508 	add.w	r5, r3, r8
 8017a20:	f813 3008 	ldrb.w	r3, [r3, r8]
 8017a24:	2b3d      	cmp	r3, #61	@ 0x3d
 8017a26:	d1ec      	bne.n	8017a02 <_findenv_r+0x36>
 8017a28:	f8da 3000 	ldr.w	r3, [sl]
 8017a2c:	ebab 0303 	sub.w	r3, fp, r3
 8017a30:	109b      	asrs	r3, r3, #2
 8017a32:	4630      	mov	r0, r6
 8017a34:	603b      	str	r3, [r7, #0]
 8017a36:	f000 fd7b 	bl	8018530 <__env_unlock>
 8017a3a:	1c68      	adds	r0, r5, #1
 8017a3c:	e7dd      	b.n	80179fa <_findenv_r+0x2e>
 8017a3e:	bf00      	nop
 8017a40:	20000000 	.word	0x20000000

08017a44 <malloc>:
 8017a44:	4b02      	ldr	r3, [pc, #8]	@ (8017a50 <malloc+0xc>)
 8017a46:	4601      	mov	r1, r0
 8017a48:	6818      	ldr	r0, [r3, #0]
 8017a4a:	f000 b82d 	b.w	8017aa8 <_malloc_r>
 8017a4e:	bf00      	nop
 8017a50:	200022b0 	.word	0x200022b0

08017a54 <free>:
 8017a54:	4b02      	ldr	r3, [pc, #8]	@ (8017a60 <free+0xc>)
 8017a56:	4601      	mov	r1, r0
 8017a58:	6818      	ldr	r0, [r3, #0]
 8017a5a:	f000 bd6f 	b.w	801853c <_free_r>
 8017a5e:	bf00      	nop
 8017a60:	200022b0 	.word	0x200022b0

08017a64 <sbrk_aligned>:
 8017a64:	b570      	push	{r4, r5, r6, lr}
 8017a66:	4e0f      	ldr	r6, [pc, #60]	@ (8017aa4 <sbrk_aligned+0x40>)
 8017a68:	460c      	mov	r4, r1
 8017a6a:	6831      	ldr	r1, [r6, #0]
 8017a6c:	4605      	mov	r5, r0
 8017a6e:	b911      	cbnz	r1, 8017a76 <sbrk_aligned+0x12>
 8017a70:	f000 fcd4 	bl	801841c <_sbrk_r>
 8017a74:	6030      	str	r0, [r6, #0]
 8017a76:	4621      	mov	r1, r4
 8017a78:	4628      	mov	r0, r5
 8017a7a:	f000 fccf 	bl	801841c <_sbrk_r>
 8017a7e:	1c43      	adds	r3, r0, #1
 8017a80:	d103      	bne.n	8017a8a <sbrk_aligned+0x26>
 8017a82:	f04f 34ff 	mov.w	r4, #4294967295
 8017a86:	4620      	mov	r0, r4
 8017a88:	bd70      	pop	{r4, r5, r6, pc}
 8017a8a:	1cc4      	adds	r4, r0, #3
 8017a8c:	f024 0403 	bic.w	r4, r4, #3
 8017a90:	42a0      	cmp	r0, r4
 8017a92:	d0f8      	beq.n	8017a86 <sbrk_aligned+0x22>
 8017a94:	1a21      	subs	r1, r4, r0
 8017a96:	4628      	mov	r0, r5
 8017a98:	f000 fcc0 	bl	801841c <_sbrk_r>
 8017a9c:	3001      	adds	r0, #1
 8017a9e:	d1f2      	bne.n	8017a86 <sbrk_aligned+0x22>
 8017aa0:	e7ef      	b.n	8017a82 <sbrk_aligned+0x1e>
 8017aa2:	bf00      	nop
 8017aa4:	20010594 	.word	0x20010594

08017aa8 <_malloc_r>:
 8017aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017aac:	1ccd      	adds	r5, r1, #3
 8017aae:	f025 0503 	bic.w	r5, r5, #3
 8017ab2:	3508      	adds	r5, #8
 8017ab4:	2d0c      	cmp	r5, #12
 8017ab6:	bf38      	it	cc
 8017ab8:	250c      	movcc	r5, #12
 8017aba:	2d00      	cmp	r5, #0
 8017abc:	4606      	mov	r6, r0
 8017abe:	db01      	blt.n	8017ac4 <_malloc_r+0x1c>
 8017ac0:	42a9      	cmp	r1, r5
 8017ac2:	d904      	bls.n	8017ace <_malloc_r+0x26>
 8017ac4:	230c      	movs	r3, #12
 8017ac6:	6033      	str	r3, [r6, #0]
 8017ac8:	2000      	movs	r0, #0
 8017aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ace:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017ba4 <_malloc_r+0xfc>
 8017ad2:	f000 f869 	bl	8017ba8 <__malloc_lock>
 8017ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8017ada:	461c      	mov	r4, r3
 8017adc:	bb44      	cbnz	r4, 8017b30 <_malloc_r+0x88>
 8017ade:	4629      	mov	r1, r5
 8017ae0:	4630      	mov	r0, r6
 8017ae2:	f7ff ffbf 	bl	8017a64 <sbrk_aligned>
 8017ae6:	1c43      	adds	r3, r0, #1
 8017ae8:	4604      	mov	r4, r0
 8017aea:	d158      	bne.n	8017b9e <_malloc_r+0xf6>
 8017aec:	f8d8 4000 	ldr.w	r4, [r8]
 8017af0:	4627      	mov	r7, r4
 8017af2:	2f00      	cmp	r7, #0
 8017af4:	d143      	bne.n	8017b7e <_malloc_r+0xd6>
 8017af6:	2c00      	cmp	r4, #0
 8017af8:	d04b      	beq.n	8017b92 <_malloc_r+0xea>
 8017afa:	6823      	ldr	r3, [r4, #0]
 8017afc:	4639      	mov	r1, r7
 8017afe:	4630      	mov	r0, r6
 8017b00:	eb04 0903 	add.w	r9, r4, r3
 8017b04:	f000 fc8a 	bl	801841c <_sbrk_r>
 8017b08:	4581      	cmp	r9, r0
 8017b0a:	d142      	bne.n	8017b92 <_malloc_r+0xea>
 8017b0c:	6821      	ldr	r1, [r4, #0]
 8017b0e:	1a6d      	subs	r5, r5, r1
 8017b10:	4629      	mov	r1, r5
 8017b12:	4630      	mov	r0, r6
 8017b14:	f7ff ffa6 	bl	8017a64 <sbrk_aligned>
 8017b18:	3001      	adds	r0, #1
 8017b1a:	d03a      	beq.n	8017b92 <_malloc_r+0xea>
 8017b1c:	6823      	ldr	r3, [r4, #0]
 8017b1e:	442b      	add	r3, r5
 8017b20:	6023      	str	r3, [r4, #0]
 8017b22:	f8d8 3000 	ldr.w	r3, [r8]
 8017b26:	685a      	ldr	r2, [r3, #4]
 8017b28:	bb62      	cbnz	r2, 8017b84 <_malloc_r+0xdc>
 8017b2a:	f8c8 7000 	str.w	r7, [r8]
 8017b2e:	e00f      	b.n	8017b50 <_malloc_r+0xa8>
 8017b30:	6822      	ldr	r2, [r4, #0]
 8017b32:	1b52      	subs	r2, r2, r5
 8017b34:	d420      	bmi.n	8017b78 <_malloc_r+0xd0>
 8017b36:	2a0b      	cmp	r2, #11
 8017b38:	d917      	bls.n	8017b6a <_malloc_r+0xc2>
 8017b3a:	1961      	adds	r1, r4, r5
 8017b3c:	42a3      	cmp	r3, r4
 8017b3e:	6025      	str	r5, [r4, #0]
 8017b40:	bf18      	it	ne
 8017b42:	6059      	strne	r1, [r3, #4]
 8017b44:	6863      	ldr	r3, [r4, #4]
 8017b46:	bf08      	it	eq
 8017b48:	f8c8 1000 	streq.w	r1, [r8]
 8017b4c:	5162      	str	r2, [r4, r5]
 8017b4e:	604b      	str	r3, [r1, #4]
 8017b50:	4630      	mov	r0, r6
 8017b52:	f000 f82f 	bl	8017bb4 <__malloc_unlock>
 8017b56:	f104 000b 	add.w	r0, r4, #11
 8017b5a:	1d23      	adds	r3, r4, #4
 8017b5c:	f020 0007 	bic.w	r0, r0, #7
 8017b60:	1ac2      	subs	r2, r0, r3
 8017b62:	bf1c      	itt	ne
 8017b64:	1a1b      	subne	r3, r3, r0
 8017b66:	50a3      	strne	r3, [r4, r2]
 8017b68:	e7af      	b.n	8017aca <_malloc_r+0x22>
 8017b6a:	6862      	ldr	r2, [r4, #4]
 8017b6c:	42a3      	cmp	r3, r4
 8017b6e:	bf0c      	ite	eq
 8017b70:	f8c8 2000 	streq.w	r2, [r8]
 8017b74:	605a      	strne	r2, [r3, #4]
 8017b76:	e7eb      	b.n	8017b50 <_malloc_r+0xa8>
 8017b78:	4623      	mov	r3, r4
 8017b7a:	6864      	ldr	r4, [r4, #4]
 8017b7c:	e7ae      	b.n	8017adc <_malloc_r+0x34>
 8017b7e:	463c      	mov	r4, r7
 8017b80:	687f      	ldr	r7, [r7, #4]
 8017b82:	e7b6      	b.n	8017af2 <_malloc_r+0x4a>
 8017b84:	461a      	mov	r2, r3
 8017b86:	685b      	ldr	r3, [r3, #4]
 8017b88:	42a3      	cmp	r3, r4
 8017b8a:	d1fb      	bne.n	8017b84 <_malloc_r+0xdc>
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	6053      	str	r3, [r2, #4]
 8017b90:	e7de      	b.n	8017b50 <_malloc_r+0xa8>
 8017b92:	230c      	movs	r3, #12
 8017b94:	6033      	str	r3, [r6, #0]
 8017b96:	4630      	mov	r0, r6
 8017b98:	f000 f80c 	bl	8017bb4 <__malloc_unlock>
 8017b9c:	e794      	b.n	8017ac8 <_malloc_r+0x20>
 8017b9e:	6005      	str	r5, [r0, #0]
 8017ba0:	e7d6      	b.n	8017b50 <_malloc_r+0xa8>
 8017ba2:	bf00      	nop
 8017ba4:	20010598 	.word	0x20010598

08017ba8 <__malloc_lock>:
 8017ba8:	4801      	ldr	r0, [pc, #4]	@ (8017bb0 <__malloc_lock+0x8>)
 8017baa:	f000 bc84 	b.w	80184b6 <__retarget_lock_acquire_recursive>
 8017bae:	bf00      	nop
 8017bb0:	200106dd 	.word	0x200106dd

08017bb4 <__malloc_unlock>:
 8017bb4:	4801      	ldr	r0, [pc, #4]	@ (8017bbc <__malloc_unlock+0x8>)
 8017bb6:	f000 bc7f 	b.w	80184b8 <__retarget_lock_release_recursive>
 8017bba:	bf00      	nop
 8017bbc:	200106dd 	.word	0x200106dd

08017bc0 <srand>:
 8017bc0:	b538      	push	{r3, r4, r5, lr}
 8017bc2:	4b10      	ldr	r3, [pc, #64]	@ (8017c04 <srand+0x44>)
 8017bc4:	681d      	ldr	r5, [r3, #0]
 8017bc6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017bc8:	4604      	mov	r4, r0
 8017bca:	b9b3      	cbnz	r3, 8017bfa <srand+0x3a>
 8017bcc:	2018      	movs	r0, #24
 8017bce:	f7ff ff39 	bl	8017a44 <malloc>
 8017bd2:	4602      	mov	r2, r0
 8017bd4:	6328      	str	r0, [r5, #48]	@ 0x30
 8017bd6:	b920      	cbnz	r0, 8017be2 <srand+0x22>
 8017bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8017c08 <srand+0x48>)
 8017bda:	480c      	ldr	r0, [pc, #48]	@ (8017c0c <srand+0x4c>)
 8017bdc:	2146      	movs	r1, #70	@ 0x46
 8017bde:	f000 fc83 	bl	80184e8 <__assert_func>
 8017be2:	490b      	ldr	r1, [pc, #44]	@ (8017c10 <srand+0x50>)
 8017be4:	4b0b      	ldr	r3, [pc, #44]	@ (8017c14 <srand+0x54>)
 8017be6:	e9c0 1300 	strd	r1, r3, [r0]
 8017bea:	4b0b      	ldr	r3, [pc, #44]	@ (8017c18 <srand+0x58>)
 8017bec:	6083      	str	r3, [r0, #8]
 8017bee:	230b      	movs	r3, #11
 8017bf0:	8183      	strh	r3, [r0, #12]
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	2001      	movs	r0, #1
 8017bf6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017bfa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	611c      	str	r4, [r3, #16]
 8017c00:	615a      	str	r2, [r3, #20]
 8017c02:	bd38      	pop	{r3, r4, r5, pc}
 8017c04:	200022b0 	.word	0x200022b0
 8017c08:	0801afd4 	.word	0x0801afd4
 8017c0c:	0801afeb 	.word	0x0801afeb
 8017c10:	abcd330e 	.word	0xabcd330e
 8017c14:	e66d1234 	.word	0xe66d1234
 8017c18:	0005deec 	.word	0x0005deec

08017c1c <rand>:
 8017c1c:	4b16      	ldr	r3, [pc, #88]	@ (8017c78 <rand+0x5c>)
 8017c1e:	b510      	push	{r4, lr}
 8017c20:	681c      	ldr	r4, [r3, #0]
 8017c22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017c24:	b9b3      	cbnz	r3, 8017c54 <rand+0x38>
 8017c26:	2018      	movs	r0, #24
 8017c28:	f7ff ff0c 	bl	8017a44 <malloc>
 8017c2c:	4602      	mov	r2, r0
 8017c2e:	6320      	str	r0, [r4, #48]	@ 0x30
 8017c30:	b920      	cbnz	r0, 8017c3c <rand+0x20>
 8017c32:	4b12      	ldr	r3, [pc, #72]	@ (8017c7c <rand+0x60>)
 8017c34:	4812      	ldr	r0, [pc, #72]	@ (8017c80 <rand+0x64>)
 8017c36:	2152      	movs	r1, #82	@ 0x52
 8017c38:	f000 fc56 	bl	80184e8 <__assert_func>
 8017c3c:	4911      	ldr	r1, [pc, #68]	@ (8017c84 <rand+0x68>)
 8017c3e:	4b12      	ldr	r3, [pc, #72]	@ (8017c88 <rand+0x6c>)
 8017c40:	e9c0 1300 	strd	r1, r3, [r0]
 8017c44:	4b11      	ldr	r3, [pc, #68]	@ (8017c8c <rand+0x70>)
 8017c46:	6083      	str	r3, [r0, #8]
 8017c48:	230b      	movs	r3, #11
 8017c4a:	8183      	strh	r3, [r0, #12]
 8017c4c:	2100      	movs	r1, #0
 8017c4e:	2001      	movs	r0, #1
 8017c50:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017c54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017c56:	480e      	ldr	r0, [pc, #56]	@ (8017c90 <rand+0x74>)
 8017c58:	690b      	ldr	r3, [r1, #16]
 8017c5a:	694c      	ldr	r4, [r1, #20]
 8017c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8017c94 <rand+0x78>)
 8017c5e:	4358      	muls	r0, r3
 8017c60:	fb02 0004 	mla	r0, r2, r4, r0
 8017c64:	fba3 3202 	umull	r3, r2, r3, r2
 8017c68:	3301      	adds	r3, #1
 8017c6a:	eb40 0002 	adc.w	r0, r0, r2
 8017c6e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017c72:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8017c76:	bd10      	pop	{r4, pc}
 8017c78:	200022b0 	.word	0x200022b0
 8017c7c:	0801afd4 	.word	0x0801afd4
 8017c80:	0801afeb 	.word	0x0801afeb
 8017c84:	abcd330e 	.word	0xabcd330e
 8017c88:	e66d1234 	.word	0xe66d1234
 8017c8c:	0005deec 	.word	0x0005deec
 8017c90:	5851f42d 	.word	0x5851f42d
 8017c94:	4c957f2d 	.word	0x4c957f2d

08017c98 <realloc>:
 8017c98:	4b02      	ldr	r3, [pc, #8]	@ (8017ca4 <realloc+0xc>)
 8017c9a:	460a      	mov	r2, r1
 8017c9c:	4601      	mov	r1, r0
 8017c9e:	6818      	ldr	r0, [r3, #0]
 8017ca0:	f000 b802 	b.w	8017ca8 <_realloc_r>
 8017ca4:	200022b0 	.word	0x200022b0

08017ca8 <_realloc_r>:
 8017ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cac:	4607      	mov	r7, r0
 8017cae:	4614      	mov	r4, r2
 8017cb0:	460d      	mov	r5, r1
 8017cb2:	b921      	cbnz	r1, 8017cbe <_realloc_r+0x16>
 8017cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb8:	4611      	mov	r1, r2
 8017cba:	f7ff bef5 	b.w	8017aa8 <_malloc_r>
 8017cbe:	b92a      	cbnz	r2, 8017ccc <_realloc_r+0x24>
 8017cc0:	f000 fc3c 	bl	801853c <_free_r>
 8017cc4:	4625      	mov	r5, r4
 8017cc6:	4628      	mov	r0, r5
 8017cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ccc:	f000 fc80 	bl	80185d0 <_malloc_usable_size_r>
 8017cd0:	4284      	cmp	r4, r0
 8017cd2:	4606      	mov	r6, r0
 8017cd4:	d802      	bhi.n	8017cdc <_realloc_r+0x34>
 8017cd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017cda:	d8f4      	bhi.n	8017cc6 <_realloc_r+0x1e>
 8017cdc:	4621      	mov	r1, r4
 8017cde:	4638      	mov	r0, r7
 8017ce0:	f7ff fee2 	bl	8017aa8 <_malloc_r>
 8017ce4:	4680      	mov	r8, r0
 8017ce6:	b908      	cbnz	r0, 8017cec <_realloc_r+0x44>
 8017ce8:	4645      	mov	r5, r8
 8017cea:	e7ec      	b.n	8017cc6 <_realloc_r+0x1e>
 8017cec:	42b4      	cmp	r4, r6
 8017cee:	4622      	mov	r2, r4
 8017cf0:	4629      	mov	r1, r5
 8017cf2:	bf28      	it	cs
 8017cf4:	4632      	movcs	r2, r6
 8017cf6:	f000 fbe8 	bl	80184ca <memcpy>
 8017cfa:	4629      	mov	r1, r5
 8017cfc:	4638      	mov	r0, r7
 8017cfe:	f000 fc1d 	bl	801853c <_free_r>
 8017d02:	e7f1      	b.n	8017ce8 <_realloc_r+0x40>

08017d04 <_strtoul_l.isra.0>:
 8017d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d08:	4e34      	ldr	r6, [pc, #208]	@ (8017ddc <_strtoul_l.isra.0+0xd8>)
 8017d0a:	4686      	mov	lr, r0
 8017d0c:	460d      	mov	r5, r1
 8017d0e:	4628      	mov	r0, r5
 8017d10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d14:	5d37      	ldrb	r7, [r6, r4]
 8017d16:	f017 0708 	ands.w	r7, r7, #8
 8017d1a:	d1f8      	bne.n	8017d0e <_strtoul_l.isra.0+0xa>
 8017d1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8017d1e:	d110      	bne.n	8017d42 <_strtoul_l.isra.0+0x3e>
 8017d20:	782c      	ldrb	r4, [r5, #0]
 8017d22:	2701      	movs	r7, #1
 8017d24:	1c85      	adds	r5, r0, #2
 8017d26:	f033 0010 	bics.w	r0, r3, #16
 8017d2a:	d115      	bne.n	8017d58 <_strtoul_l.isra.0+0x54>
 8017d2c:	2c30      	cmp	r4, #48	@ 0x30
 8017d2e:	d10d      	bne.n	8017d4c <_strtoul_l.isra.0+0x48>
 8017d30:	7828      	ldrb	r0, [r5, #0]
 8017d32:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017d36:	2858      	cmp	r0, #88	@ 0x58
 8017d38:	d108      	bne.n	8017d4c <_strtoul_l.isra.0+0x48>
 8017d3a:	786c      	ldrb	r4, [r5, #1]
 8017d3c:	3502      	adds	r5, #2
 8017d3e:	2310      	movs	r3, #16
 8017d40:	e00a      	b.n	8017d58 <_strtoul_l.isra.0+0x54>
 8017d42:	2c2b      	cmp	r4, #43	@ 0x2b
 8017d44:	bf04      	itt	eq
 8017d46:	782c      	ldrbeq	r4, [r5, #0]
 8017d48:	1c85      	addeq	r5, r0, #2
 8017d4a:	e7ec      	b.n	8017d26 <_strtoul_l.isra.0+0x22>
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d1f6      	bne.n	8017d3e <_strtoul_l.isra.0+0x3a>
 8017d50:	2c30      	cmp	r4, #48	@ 0x30
 8017d52:	bf14      	ite	ne
 8017d54:	230a      	movne	r3, #10
 8017d56:	2308      	moveq	r3, #8
 8017d58:	f04f 38ff 	mov.w	r8, #4294967295
 8017d5c:	2600      	movs	r6, #0
 8017d5e:	fbb8 f8f3 	udiv	r8, r8, r3
 8017d62:	fb03 f908 	mul.w	r9, r3, r8
 8017d66:	ea6f 0909 	mvn.w	r9, r9
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017d70:	f1bc 0f09 	cmp.w	ip, #9
 8017d74:	d810      	bhi.n	8017d98 <_strtoul_l.isra.0+0x94>
 8017d76:	4664      	mov	r4, ip
 8017d78:	42a3      	cmp	r3, r4
 8017d7a:	dd1e      	ble.n	8017dba <_strtoul_l.isra.0+0xb6>
 8017d7c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8017d80:	d007      	beq.n	8017d92 <_strtoul_l.isra.0+0x8e>
 8017d82:	4580      	cmp	r8, r0
 8017d84:	d316      	bcc.n	8017db4 <_strtoul_l.isra.0+0xb0>
 8017d86:	d101      	bne.n	8017d8c <_strtoul_l.isra.0+0x88>
 8017d88:	45a1      	cmp	r9, r4
 8017d8a:	db13      	blt.n	8017db4 <_strtoul_l.isra.0+0xb0>
 8017d8c:	fb00 4003 	mla	r0, r0, r3, r4
 8017d90:	2601      	movs	r6, #1
 8017d92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d96:	e7e9      	b.n	8017d6c <_strtoul_l.isra.0+0x68>
 8017d98:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017d9c:	f1bc 0f19 	cmp.w	ip, #25
 8017da0:	d801      	bhi.n	8017da6 <_strtoul_l.isra.0+0xa2>
 8017da2:	3c37      	subs	r4, #55	@ 0x37
 8017da4:	e7e8      	b.n	8017d78 <_strtoul_l.isra.0+0x74>
 8017da6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017daa:	f1bc 0f19 	cmp.w	ip, #25
 8017dae:	d804      	bhi.n	8017dba <_strtoul_l.isra.0+0xb6>
 8017db0:	3c57      	subs	r4, #87	@ 0x57
 8017db2:	e7e1      	b.n	8017d78 <_strtoul_l.isra.0+0x74>
 8017db4:	f04f 36ff 	mov.w	r6, #4294967295
 8017db8:	e7eb      	b.n	8017d92 <_strtoul_l.isra.0+0x8e>
 8017dba:	1c73      	adds	r3, r6, #1
 8017dbc:	d106      	bne.n	8017dcc <_strtoul_l.isra.0+0xc8>
 8017dbe:	2322      	movs	r3, #34	@ 0x22
 8017dc0:	f8ce 3000 	str.w	r3, [lr]
 8017dc4:	4630      	mov	r0, r6
 8017dc6:	b932      	cbnz	r2, 8017dd6 <_strtoul_l.isra.0+0xd2>
 8017dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dcc:	b107      	cbz	r7, 8017dd0 <_strtoul_l.isra.0+0xcc>
 8017dce:	4240      	negs	r0, r0
 8017dd0:	2a00      	cmp	r2, #0
 8017dd2:	d0f9      	beq.n	8017dc8 <_strtoul_l.isra.0+0xc4>
 8017dd4:	b106      	cbz	r6, 8017dd8 <_strtoul_l.isra.0+0xd4>
 8017dd6:	1e69      	subs	r1, r5, #1
 8017dd8:	6011      	str	r1, [r2, #0]
 8017dda:	e7f5      	b.n	8017dc8 <_strtoul_l.isra.0+0xc4>
 8017ddc:	0801b0b3 	.word	0x0801b0b3

08017de0 <strtoul>:
 8017de0:	4613      	mov	r3, r2
 8017de2:	460a      	mov	r2, r1
 8017de4:	4601      	mov	r1, r0
 8017de6:	4802      	ldr	r0, [pc, #8]	@ (8017df0 <strtoul+0x10>)
 8017de8:	6800      	ldr	r0, [r0, #0]
 8017dea:	f7ff bf8b 	b.w	8017d04 <_strtoul_l.isra.0>
 8017dee:	bf00      	nop
 8017df0:	200022b0 	.word	0x200022b0

08017df4 <std>:
 8017df4:	2300      	movs	r3, #0
 8017df6:	b510      	push	{r4, lr}
 8017df8:	4604      	mov	r4, r0
 8017dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8017dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017e02:	6083      	str	r3, [r0, #8]
 8017e04:	8181      	strh	r1, [r0, #12]
 8017e06:	6643      	str	r3, [r0, #100]	@ 0x64
 8017e08:	81c2      	strh	r2, [r0, #14]
 8017e0a:	6183      	str	r3, [r0, #24]
 8017e0c:	4619      	mov	r1, r3
 8017e0e:	2208      	movs	r2, #8
 8017e10:	305c      	adds	r0, #92	@ 0x5c
 8017e12:	f000 fa7f 	bl	8018314 <memset>
 8017e16:	4b0d      	ldr	r3, [pc, #52]	@ (8017e4c <std+0x58>)
 8017e18:	6263      	str	r3, [r4, #36]	@ 0x24
 8017e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8017e50 <std+0x5c>)
 8017e1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8017e54 <std+0x60>)
 8017e20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017e22:	4b0d      	ldr	r3, [pc, #52]	@ (8017e58 <std+0x64>)
 8017e24:	6323      	str	r3, [r4, #48]	@ 0x30
 8017e26:	4b0d      	ldr	r3, [pc, #52]	@ (8017e5c <std+0x68>)
 8017e28:	6224      	str	r4, [r4, #32]
 8017e2a:	429c      	cmp	r4, r3
 8017e2c:	d006      	beq.n	8017e3c <std+0x48>
 8017e2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017e32:	4294      	cmp	r4, r2
 8017e34:	d002      	beq.n	8017e3c <std+0x48>
 8017e36:	33d0      	adds	r3, #208	@ 0xd0
 8017e38:	429c      	cmp	r4, r3
 8017e3a:	d105      	bne.n	8017e48 <std+0x54>
 8017e3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e44:	f000 bb36 	b.w	80184b4 <__retarget_lock_init_recursive>
 8017e48:	bd10      	pop	{r4, pc}
 8017e4a:	bf00      	nop
 8017e4c:	08018099 	.word	0x08018099
 8017e50:	080180bb 	.word	0x080180bb
 8017e54:	080180f3 	.word	0x080180f3
 8017e58:	08018117 	.word	0x08018117
 8017e5c:	2001059c 	.word	0x2001059c

08017e60 <stdio_exit_handler>:
 8017e60:	4a02      	ldr	r2, [pc, #8]	@ (8017e6c <stdio_exit_handler+0xc>)
 8017e62:	4903      	ldr	r1, [pc, #12]	@ (8017e70 <stdio_exit_handler+0x10>)
 8017e64:	4803      	ldr	r0, [pc, #12]	@ (8017e74 <stdio_exit_handler+0x14>)
 8017e66:	f000 b869 	b.w	8017f3c <_fwalk_sglue>
 8017e6a:	bf00      	nop
 8017e6c:	200022a4 	.word	0x200022a4
 8017e70:	08018cb1 	.word	0x08018cb1
 8017e74:	200022b4 	.word	0x200022b4

08017e78 <cleanup_stdio>:
 8017e78:	6841      	ldr	r1, [r0, #4]
 8017e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8017eac <cleanup_stdio+0x34>)
 8017e7c:	4299      	cmp	r1, r3
 8017e7e:	b510      	push	{r4, lr}
 8017e80:	4604      	mov	r4, r0
 8017e82:	d001      	beq.n	8017e88 <cleanup_stdio+0x10>
 8017e84:	f000 ff14 	bl	8018cb0 <_fflush_r>
 8017e88:	68a1      	ldr	r1, [r4, #8]
 8017e8a:	4b09      	ldr	r3, [pc, #36]	@ (8017eb0 <cleanup_stdio+0x38>)
 8017e8c:	4299      	cmp	r1, r3
 8017e8e:	d002      	beq.n	8017e96 <cleanup_stdio+0x1e>
 8017e90:	4620      	mov	r0, r4
 8017e92:	f000 ff0d 	bl	8018cb0 <_fflush_r>
 8017e96:	68e1      	ldr	r1, [r4, #12]
 8017e98:	4b06      	ldr	r3, [pc, #24]	@ (8017eb4 <cleanup_stdio+0x3c>)
 8017e9a:	4299      	cmp	r1, r3
 8017e9c:	d004      	beq.n	8017ea8 <cleanup_stdio+0x30>
 8017e9e:	4620      	mov	r0, r4
 8017ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ea4:	f000 bf04 	b.w	8018cb0 <_fflush_r>
 8017ea8:	bd10      	pop	{r4, pc}
 8017eaa:	bf00      	nop
 8017eac:	2001059c 	.word	0x2001059c
 8017eb0:	20010604 	.word	0x20010604
 8017eb4:	2001066c 	.word	0x2001066c

08017eb8 <global_stdio_init.part.0>:
 8017eb8:	b510      	push	{r4, lr}
 8017eba:	4b0b      	ldr	r3, [pc, #44]	@ (8017ee8 <global_stdio_init.part.0+0x30>)
 8017ebc:	4c0b      	ldr	r4, [pc, #44]	@ (8017eec <global_stdio_init.part.0+0x34>)
 8017ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8017ef0 <global_stdio_init.part.0+0x38>)
 8017ec0:	601a      	str	r2, [r3, #0]
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	2200      	movs	r2, #0
 8017ec6:	2104      	movs	r1, #4
 8017ec8:	f7ff ff94 	bl	8017df4 <std>
 8017ecc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017ed0:	2201      	movs	r2, #1
 8017ed2:	2109      	movs	r1, #9
 8017ed4:	f7ff ff8e 	bl	8017df4 <std>
 8017ed8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017edc:	2202      	movs	r2, #2
 8017ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ee2:	2112      	movs	r1, #18
 8017ee4:	f7ff bf86 	b.w	8017df4 <std>
 8017ee8:	200106d4 	.word	0x200106d4
 8017eec:	2001059c 	.word	0x2001059c
 8017ef0:	08017e61 	.word	0x08017e61

08017ef4 <__sfp_lock_acquire>:
 8017ef4:	4801      	ldr	r0, [pc, #4]	@ (8017efc <__sfp_lock_acquire+0x8>)
 8017ef6:	f000 bade 	b.w	80184b6 <__retarget_lock_acquire_recursive>
 8017efa:	bf00      	nop
 8017efc:	200106de 	.word	0x200106de

08017f00 <__sfp_lock_release>:
 8017f00:	4801      	ldr	r0, [pc, #4]	@ (8017f08 <__sfp_lock_release+0x8>)
 8017f02:	f000 bad9 	b.w	80184b8 <__retarget_lock_release_recursive>
 8017f06:	bf00      	nop
 8017f08:	200106de 	.word	0x200106de

08017f0c <__sinit>:
 8017f0c:	b510      	push	{r4, lr}
 8017f0e:	4604      	mov	r4, r0
 8017f10:	f7ff fff0 	bl	8017ef4 <__sfp_lock_acquire>
 8017f14:	6a23      	ldr	r3, [r4, #32]
 8017f16:	b11b      	cbz	r3, 8017f20 <__sinit+0x14>
 8017f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f1c:	f7ff bff0 	b.w	8017f00 <__sfp_lock_release>
 8017f20:	4b04      	ldr	r3, [pc, #16]	@ (8017f34 <__sinit+0x28>)
 8017f22:	6223      	str	r3, [r4, #32]
 8017f24:	4b04      	ldr	r3, [pc, #16]	@ (8017f38 <__sinit+0x2c>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d1f5      	bne.n	8017f18 <__sinit+0xc>
 8017f2c:	f7ff ffc4 	bl	8017eb8 <global_stdio_init.part.0>
 8017f30:	e7f2      	b.n	8017f18 <__sinit+0xc>
 8017f32:	bf00      	nop
 8017f34:	08017e79 	.word	0x08017e79
 8017f38:	200106d4 	.word	0x200106d4

08017f3c <_fwalk_sglue>:
 8017f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f40:	4607      	mov	r7, r0
 8017f42:	4688      	mov	r8, r1
 8017f44:	4614      	mov	r4, r2
 8017f46:	2600      	movs	r6, #0
 8017f48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017f4c:	f1b9 0901 	subs.w	r9, r9, #1
 8017f50:	d505      	bpl.n	8017f5e <_fwalk_sglue+0x22>
 8017f52:	6824      	ldr	r4, [r4, #0]
 8017f54:	2c00      	cmp	r4, #0
 8017f56:	d1f7      	bne.n	8017f48 <_fwalk_sglue+0xc>
 8017f58:	4630      	mov	r0, r6
 8017f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f5e:	89ab      	ldrh	r3, [r5, #12]
 8017f60:	2b01      	cmp	r3, #1
 8017f62:	d907      	bls.n	8017f74 <_fwalk_sglue+0x38>
 8017f64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017f68:	3301      	adds	r3, #1
 8017f6a:	d003      	beq.n	8017f74 <_fwalk_sglue+0x38>
 8017f6c:	4629      	mov	r1, r5
 8017f6e:	4638      	mov	r0, r7
 8017f70:	47c0      	blx	r8
 8017f72:	4306      	orrs	r6, r0
 8017f74:	3568      	adds	r5, #104	@ 0x68
 8017f76:	e7e9      	b.n	8017f4c <_fwalk_sglue+0x10>

08017f78 <_fwrite_r>:
 8017f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f7c:	9c08      	ldr	r4, [sp, #32]
 8017f7e:	468a      	mov	sl, r1
 8017f80:	4690      	mov	r8, r2
 8017f82:	fb02 f903 	mul.w	r9, r2, r3
 8017f86:	4606      	mov	r6, r0
 8017f88:	b118      	cbz	r0, 8017f92 <_fwrite_r+0x1a>
 8017f8a:	6a03      	ldr	r3, [r0, #32]
 8017f8c:	b90b      	cbnz	r3, 8017f92 <_fwrite_r+0x1a>
 8017f8e:	f7ff ffbd 	bl	8017f0c <__sinit>
 8017f92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017f94:	07dd      	lsls	r5, r3, #31
 8017f96:	d405      	bmi.n	8017fa4 <_fwrite_r+0x2c>
 8017f98:	89a3      	ldrh	r3, [r4, #12]
 8017f9a:	0598      	lsls	r0, r3, #22
 8017f9c:	d402      	bmi.n	8017fa4 <_fwrite_r+0x2c>
 8017f9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017fa0:	f000 fa89 	bl	80184b6 <__retarget_lock_acquire_recursive>
 8017fa4:	89a3      	ldrh	r3, [r4, #12]
 8017fa6:	0719      	lsls	r1, r3, #28
 8017fa8:	d516      	bpl.n	8017fd8 <_fwrite_r+0x60>
 8017faa:	6923      	ldr	r3, [r4, #16]
 8017fac:	b1a3      	cbz	r3, 8017fd8 <_fwrite_r+0x60>
 8017fae:	2500      	movs	r5, #0
 8017fb0:	454d      	cmp	r5, r9
 8017fb2:	d01f      	beq.n	8017ff4 <_fwrite_r+0x7c>
 8017fb4:	68a7      	ldr	r7, [r4, #8]
 8017fb6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8017fba:	3f01      	subs	r7, #1
 8017fbc:	2f00      	cmp	r7, #0
 8017fbe:	60a7      	str	r7, [r4, #8]
 8017fc0:	da04      	bge.n	8017fcc <_fwrite_r+0x54>
 8017fc2:	69a3      	ldr	r3, [r4, #24]
 8017fc4:	429f      	cmp	r7, r3
 8017fc6:	db0f      	blt.n	8017fe8 <_fwrite_r+0x70>
 8017fc8:	290a      	cmp	r1, #10
 8017fca:	d00d      	beq.n	8017fe8 <_fwrite_r+0x70>
 8017fcc:	6823      	ldr	r3, [r4, #0]
 8017fce:	1c5a      	adds	r2, r3, #1
 8017fd0:	6022      	str	r2, [r4, #0]
 8017fd2:	7019      	strb	r1, [r3, #0]
 8017fd4:	3501      	adds	r5, #1
 8017fd6:	e7eb      	b.n	8017fb0 <_fwrite_r+0x38>
 8017fd8:	4621      	mov	r1, r4
 8017fda:	4630      	mov	r0, r6
 8017fdc:	f000 f91a 	bl	8018214 <__swsetup_r>
 8017fe0:	2800      	cmp	r0, #0
 8017fe2:	d0e4      	beq.n	8017fae <_fwrite_r+0x36>
 8017fe4:	2500      	movs	r5, #0
 8017fe6:	e005      	b.n	8017ff4 <_fwrite_r+0x7c>
 8017fe8:	4622      	mov	r2, r4
 8017fea:	4630      	mov	r0, r6
 8017fec:	f000 f8d4 	bl	8018198 <__swbuf_r>
 8017ff0:	3001      	adds	r0, #1
 8017ff2:	d1ef      	bne.n	8017fd4 <_fwrite_r+0x5c>
 8017ff4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ff6:	07da      	lsls	r2, r3, #31
 8017ff8:	d405      	bmi.n	8018006 <_fwrite_r+0x8e>
 8017ffa:	89a3      	ldrh	r3, [r4, #12]
 8017ffc:	059b      	lsls	r3, r3, #22
 8017ffe:	d402      	bmi.n	8018006 <_fwrite_r+0x8e>
 8018000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018002:	f000 fa59 	bl	80184b8 <__retarget_lock_release_recursive>
 8018006:	fbb5 f0f8 	udiv	r0, r5, r8
 801800a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08018010 <fwrite>:
 8018010:	b507      	push	{r0, r1, r2, lr}
 8018012:	9300      	str	r3, [sp, #0]
 8018014:	4613      	mov	r3, r2
 8018016:	460a      	mov	r2, r1
 8018018:	4601      	mov	r1, r0
 801801a:	4803      	ldr	r0, [pc, #12]	@ (8018028 <fwrite+0x18>)
 801801c:	6800      	ldr	r0, [r0, #0]
 801801e:	f7ff ffab 	bl	8017f78 <_fwrite_r>
 8018022:	b003      	add	sp, #12
 8018024:	f85d fb04 	ldr.w	pc, [sp], #4
 8018028:	200022b0 	.word	0x200022b0

0801802c <sniprintf>:
 801802c:	b40c      	push	{r2, r3}
 801802e:	b530      	push	{r4, r5, lr}
 8018030:	4b18      	ldr	r3, [pc, #96]	@ (8018094 <sniprintf+0x68>)
 8018032:	1e0c      	subs	r4, r1, #0
 8018034:	681d      	ldr	r5, [r3, #0]
 8018036:	b09d      	sub	sp, #116	@ 0x74
 8018038:	da08      	bge.n	801804c <sniprintf+0x20>
 801803a:	238b      	movs	r3, #139	@ 0x8b
 801803c:	602b      	str	r3, [r5, #0]
 801803e:	f04f 30ff 	mov.w	r0, #4294967295
 8018042:	b01d      	add	sp, #116	@ 0x74
 8018044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018048:	b002      	add	sp, #8
 801804a:	4770      	bx	lr
 801804c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8018050:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018054:	f04f 0300 	mov.w	r3, #0
 8018058:	931b      	str	r3, [sp, #108]	@ 0x6c
 801805a:	bf14      	ite	ne
 801805c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8018060:	4623      	moveq	r3, r4
 8018062:	9304      	str	r3, [sp, #16]
 8018064:	9307      	str	r3, [sp, #28]
 8018066:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801806a:	9002      	str	r0, [sp, #8]
 801806c:	9006      	str	r0, [sp, #24]
 801806e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018072:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8018074:	ab21      	add	r3, sp, #132	@ 0x84
 8018076:	a902      	add	r1, sp, #8
 8018078:	4628      	mov	r0, r5
 801807a:	9301      	str	r3, [sp, #4]
 801807c:	f000 fb0c 	bl	8018698 <_svfiprintf_r>
 8018080:	1c43      	adds	r3, r0, #1
 8018082:	bfbc      	itt	lt
 8018084:	238b      	movlt	r3, #139	@ 0x8b
 8018086:	602b      	strlt	r3, [r5, #0]
 8018088:	2c00      	cmp	r4, #0
 801808a:	d0da      	beq.n	8018042 <sniprintf+0x16>
 801808c:	9b02      	ldr	r3, [sp, #8]
 801808e:	2200      	movs	r2, #0
 8018090:	701a      	strb	r2, [r3, #0]
 8018092:	e7d6      	b.n	8018042 <sniprintf+0x16>
 8018094:	200022b0 	.word	0x200022b0

08018098 <__sread>:
 8018098:	b510      	push	{r4, lr}
 801809a:	460c      	mov	r4, r1
 801809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180a0:	f000 f9aa 	bl	80183f8 <_read_r>
 80180a4:	2800      	cmp	r0, #0
 80180a6:	bfab      	itete	ge
 80180a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80180aa:	89a3      	ldrhlt	r3, [r4, #12]
 80180ac:	181b      	addge	r3, r3, r0
 80180ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80180b2:	bfac      	ite	ge
 80180b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80180b6:	81a3      	strhlt	r3, [r4, #12]
 80180b8:	bd10      	pop	{r4, pc}

080180ba <__swrite>:
 80180ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180be:	461f      	mov	r7, r3
 80180c0:	898b      	ldrh	r3, [r1, #12]
 80180c2:	05db      	lsls	r3, r3, #23
 80180c4:	4605      	mov	r5, r0
 80180c6:	460c      	mov	r4, r1
 80180c8:	4616      	mov	r6, r2
 80180ca:	d505      	bpl.n	80180d8 <__swrite+0x1e>
 80180cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180d0:	2302      	movs	r3, #2
 80180d2:	2200      	movs	r2, #0
 80180d4:	f000 f97e 	bl	80183d4 <_lseek_r>
 80180d8:	89a3      	ldrh	r3, [r4, #12]
 80180da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80180e2:	81a3      	strh	r3, [r4, #12]
 80180e4:	4632      	mov	r2, r6
 80180e6:	463b      	mov	r3, r7
 80180e8:	4628      	mov	r0, r5
 80180ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180ee:	f000 b9a5 	b.w	801843c <_write_r>

080180f2 <__sseek>:
 80180f2:	b510      	push	{r4, lr}
 80180f4:	460c      	mov	r4, r1
 80180f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180fa:	f000 f96b 	bl	80183d4 <_lseek_r>
 80180fe:	1c43      	adds	r3, r0, #1
 8018100:	89a3      	ldrh	r3, [r4, #12]
 8018102:	bf15      	itete	ne
 8018104:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018106:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801810a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801810e:	81a3      	strheq	r3, [r4, #12]
 8018110:	bf18      	it	ne
 8018112:	81a3      	strhne	r3, [r4, #12]
 8018114:	bd10      	pop	{r4, pc}

08018116 <__sclose>:
 8018116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801811a:	f000 b94b 	b.w	80183b4 <_close_r>

0801811e <_vsniprintf_r>:
 801811e:	b530      	push	{r4, r5, lr}
 8018120:	4614      	mov	r4, r2
 8018122:	2c00      	cmp	r4, #0
 8018124:	b09b      	sub	sp, #108	@ 0x6c
 8018126:	4605      	mov	r5, r0
 8018128:	461a      	mov	r2, r3
 801812a:	da05      	bge.n	8018138 <_vsniprintf_r+0x1a>
 801812c:	238b      	movs	r3, #139	@ 0x8b
 801812e:	6003      	str	r3, [r0, #0]
 8018130:	f04f 30ff 	mov.w	r0, #4294967295
 8018134:	b01b      	add	sp, #108	@ 0x6c
 8018136:	bd30      	pop	{r4, r5, pc}
 8018138:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801813c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018140:	f04f 0300 	mov.w	r3, #0
 8018144:	9319      	str	r3, [sp, #100]	@ 0x64
 8018146:	bf14      	ite	ne
 8018148:	f104 33ff 	addne.w	r3, r4, #4294967295
 801814c:	4623      	moveq	r3, r4
 801814e:	9302      	str	r3, [sp, #8]
 8018150:	9305      	str	r3, [sp, #20]
 8018152:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018156:	9100      	str	r1, [sp, #0]
 8018158:	9104      	str	r1, [sp, #16]
 801815a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801815e:	4669      	mov	r1, sp
 8018160:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018162:	f000 fa99 	bl	8018698 <_svfiprintf_r>
 8018166:	1c43      	adds	r3, r0, #1
 8018168:	bfbc      	itt	lt
 801816a:	238b      	movlt	r3, #139	@ 0x8b
 801816c:	602b      	strlt	r3, [r5, #0]
 801816e:	2c00      	cmp	r4, #0
 8018170:	d0e0      	beq.n	8018134 <_vsniprintf_r+0x16>
 8018172:	9b00      	ldr	r3, [sp, #0]
 8018174:	2200      	movs	r2, #0
 8018176:	701a      	strb	r2, [r3, #0]
 8018178:	e7dc      	b.n	8018134 <_vsniprintf_r+0x16>
	...

0801817c <vsniprintf>:
 801817c:	b507      	push	{r0, r1, r2, lr}
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	4613      	mov	r3, r2
 8018182:	460a      	mov	r2, r1
 8018184:	4601      	mov	r1, r0
 8018186:	4803      	ldr	r0, [pc, #12]	@ (8018194 <vsniprintf+0x18>)
 8018188:	6800      	ldr	r0, [r0, #0]
 801818a:	f7ff ffc8 	bl	801811e <_vsniprintf_r>
 801818e:	b003      	add	sp, #12
 8018190:	f85d fb04 	ldr.w	pc, [sp], #4
 8018194:	200022b0 	.word	0x200022b0

08018198 <__swbuf_r>:
 8018198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801819a:	460e      	mov	r6, r1
 801819c:	4614      	mov	r4, r2
 801819e:	4605      	mov	r5, r0
 80181a0:	b118      	cbz	r0, 80181aa <__swbuf_r+0x12>
 80181a2:	6a03      	ldr	r3, [r0, #32]
 80181a4:	b90b      	cbnz	r3, 80181aa <__swbuf_r+0x12>
 80181a6:	f7ff feb1 	bl	8017f0c <__sinit>
 80181aa:	69a3      	ldr	r3, [r4, #24]
 80181ac:	60a3      	str	r3, [r4, #8]
 80181ae:	89a3      	ldrh	r3, [r4, #12]
 80181b0:	071a      	lsls	r2, r3, #28
 80181b2:	d501      	bpl.n	80181b8 <__swbuf_r+0x20>
 80181b4:	6923      	ldr	r3, [r4, #16]
 80181b6:	b943      	cbnz	r3, 80181ca <__swbuf_r+0x32>
 80181b8:	4621      	mov	r1, r4
 80181ba:	4628      	mov	r0, r5
 80181bc:	f000 f82a 	bl	8018214 <__swsetup_r>
 80181c0:	b118      	cbz	r0, 80181ca <__swbuf_r+0x32>
 80181c2:	f04f 37ff 	mov.w	r7, #4294967295
 80181c6:	4638      	mov	r0, r7
 80181c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181ca:	6823      	ldr	r3, [r4, #0]
 80181cc:	6922      	ldr	r2, [r4, #16]
 80181ce:	1a98      	subs	r0, r3, r2
 80181d0:	6963      	ldr	r3, [r4, #20]
 80181d2:	b2f6      	uxtb	r6, r6
 80181d4:	4283      	cmp	r3, r0
 80181d6:	4637      	mov	r7, r6
 80181d8:	dc05      	bgt.n	80181e6 <__swbuf_r+0x4e>
 80181da:	4621      	mov	r1, r4
 80181dc:	4628      	mov	r0, r5
 80181de:	f000 fd67 	bl	8018cb0 <_fflush_r>
 80181e2:	2800      	cmp	r0, #0
 80181e4:	d1ed      	bne.n	80181c2 <__swbuf_r+0x2a>
 80181e6:	68a3      	ldr	r3, [r4, #8]
 80181e8:	3b01      	subs	r3, #1
 80181ea:	60a3      	str	r3, [r4, #8]
 80181ec:	6823      	ldr	r3, [r4, #0]
 80181ee:	1c5a      	adds	r2, r3, #1
 80181f0:	6022      	str	r2, [r4, #0]
 80181f2:	701e      	strb	r6, [r3, #0]
 80181f4:	6962      	ldr	r2, [r4, #20]
 80181f6:	1c43      	adds	r3, r0, #1
 80181f8:	429a      	cmp	r2, r3
 80181fa:	d004      	beq.n	8018206 <__swbuf_r+0x6e>
 80181fc:	89a3      	ldrh	r3, [r4, #12]
 80181fe:	07db      	lsls	r3, r3, #31
 8018200:	d5e1      	bpl.n	80181c6 <__swbuf_r+0x2e>
 8018202:	2e0a      	cmp	r6, #10
 8018204:	d1df      	bne.n	80181c6 <__swbuf_r+0x2e>
 8018206:	4621      	mov	r1, r4
 8018208:	4628      	mov	r0, r5
 801820a:	f000 fd51 	bl	8018cb0 <_fflush_r>
 801820e:	2800      	cmp	r0, #0
 8018210:	d0d9      	beq.n	80181c6 <__swbuf_r+0x2e>
 8018212:	e7d6      	b.n	80181c2 <__swbuf_r+0x2a>

08018214 <__swsetup_r>:
 8018214:	b538      	push	{r3, r4, r5, lr}
 8018216:	4b29      	ldr	r3, [pc, #164]	@ (80182bc <__swsetup_r+0xa8>)
 8018218:	4605      	mov	r5, r0
 801821a:	6818      	ldr	r0, [r3, #0]
 801821c:	460c      	mov	r4, r1
 801821e:	b118      	cbz	r0, 8018228 <__swsetup_r+0x14>
 8018220:	6a03      	ldr	r3, [r0, #32]
 8018222:	b90b      	cbnz	r3, 8018228 <__swsetup_r+0x14>
 8018224:	f7ff fe72 	bl	8017f0c <__sinit>
 8018228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801822c:	0719      	lsls	r1, r3, #28
 801822e:	d422      	bmi.n	8018276 <__swsetup_r+0x62>
 8018230:	06da      	lsls	r2, r3, #27
 8018232:	d407      	bmi.n	8018244 <__swsetup_r+0x30>
 8018234:	2209      	movs	r2, #9
 8018236:	602a      	str	r2, [r5, #0]
 8018238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801823c:	81a3      	strh	r3, [r4, #12]
 801823e:	f04f 30ff 	mov.w	r0, #4294967295
 8018242:	e033      	b.n	80182ac <__swsetup_r+0x98>
 8018244:	0758      	lsls	r0, r3, #29
 8018246:	d512      	bpl.n	801826e <__swsetup_r+0x5a>
 8018248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801824a:	b141      	cbz	r1, 801825e <__swsetup_r+0x4a>
 801824c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018250:	4299      	cmp	r1, r3
 8018252:	d002      	beq.n	801825a <__swsetup_r+0x46>
 8018254:	4628      	mov	r0, r5
 8018256:	f000 f971 	bl	801853c <_free_r>
 801825a:	2300      	movs	r3, #0
 801825c:	6363      	str	r3, [r4, #52]	@ 0x34
 801825e:	89a3      	ldrh	r3, [r4, #12]
 8018260:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018264:	81a3      	strh	r3, [r4, #12]
 8018266:	2300      	movs	r3, #0
 8018268:	6063      	str	r3, [r4, #4]
 801826a:	6923      	ldr	r3, [r4, #16]
 801826c:	6023      	str	r3, [r4, #0]
 801826e:	89a3      	ldrh	r3, [r4, #12]
 8018270:	f043 0308 	orr.w	r3, r3, #8
 8018274:	81a3      	strh	r3, [r4, #12]
 8018276:	6923      	ldr	r3, [r4, #16]
 8018278:	b94b      	cbnz	r3, 801828e <__swsetup_r+0x7a>
 801827a:	89a3      	ldrh	r3, [r4, #12]
 801827c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018284:	d003      	beq.n	801828e <__swsetup_r+0x7a>
 8018286:	4621      	mov	r1, r4
 8018288:	4628      	mov	r0, r5
 801828a:	f000 fd71 	bl	8018d70 <__smakebuf_r>
 801828e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018292:	f013 0201 	ands.w	r2, r3, #1
 8018296:	d00a      	beq.n	80182ae <__swsetup_r+0x9a>
 8018298:	2200      	movs	r2, #0
 801829a:	60a2      	str	r2, [r4, #8]
 801829c:	6962      	ldr	r2, [r4, #20]
 801829e:	4252      	negs	r2, r2
 80182a0:	61a2      	str	r2, [r4, #24]
 80182a2:	6922      	ldr	r2, [r4, #16]
 80182a4:	b942      	cbnz	r2, 80182b8 <__swsetup_r+0xa4>
 80182a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80182aa:	d1c5      	bne.n	8018238 <__swsetup_r+0x24>
 80182ac:	bd38      	pop	{r3, r4, r5, pc}
 80182ae:	0799      	lsls	r1, r3, #30
 80182b0:	bf58      	it	pl
 80182b2:	6962      	ldrpl	r2, [r4, #20]
 80182b4:	60a2      	str	r2, [r4, #8]
 80182b6:	e7f4      	b.n	80182a2 <__swsetup_r+0x8e>
 80182b8:	2000      	movs	r0, #0
 80182ba:	e7f7      	b.n	80182ac <__swsetup_r+0x98>
 80182bc:	200022b0 	.word	0x200022b0

080182c0 <memcmp>:
 80182c0:	b510      	push	{r4, lr}
 80182c2:	3901      	subs	r1, #1
 80182c4:	4402      	add	r2, r0
 80182c6:	4290      	cmp	r0, r2
 80182c8:	d101      	bne.n	80182ce <memcmp+0xe>
 80182ca:	2000      	movs	r0, #0
 80182cc:	e005      	b.n	80182da <memcmp+0x1a>
 80182ce:	7803      	ldrb	r3, [r0, #0]
 80182d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80182d4:	42a3      	cmp	r3, r4
 80182d6:	d001      	beq.n	80182dc <memcmp+0x1c>
 80182d8:	1b18      	subs	r0, r3, r4
 80182da:	bd10      	pop	{r4, pc}
 80182dc:	3001      	adds	r0, #1
 80182de:	e7f2      	b.n	80182c6 <memcmp+0x6>

080182e0 <memmove>:
 80182e0:	4288      	cmp	r0, r1
 80182e2:	b510      	push	{r4, lr}
 80182e4:	eb01 0402 	add.w	r4, r1, r2
 80182e8:	d902      	bls.n	80182f0 <memmove+0x10>
 80182ea:	4284      	cmp	r4, r0
 80182ec:	4623      	mov	r3, r4
 80182ee:	d807      	bhi.n	8018300 <memmove+0x20>
 80182f0:	1e43      	subs	r3, r0, #1
 80182f2:	42a1      	cmp	r1, r4
 80182f4:	d008      	beq.n	8018308 <memmove+0x28>
 80182f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80182fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80182fe:	e7f8      	b.n	80182f2 <memmove+0x12>
 8018300:	4402      	add	r2, r0
 8018302:	4601      	mov	r1, r0
 8018304:	428a      	cmp	r2, r1
 8018306:	d100      	bne.n	801830a <memmove+0x2a>
 8018308:	bd10      	pop	{r4, pc}
 801830a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801830e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018312:	e7f7      	b.n	8018304 <memmove+0x24>

08018314 <memset>:
 8018314:	4402      	add	r2, r0
 8018316:	4603      	mov	r3, r0
 8018318:	4293      	cmp	r3, r2
 801831a:	d100      	bne.n	801831e <memset+0xa>
 801831c:	4770      	bx	lr
 801831e:	f803 1b01 	strb.w	r1, [r3], #1
 8018322:	e7f9      	b.n	8018318 <memset+0x4>

08018324 <strchr>:
 8018324:	b2c9      	uxtb	r1, r1
 8018326:	4603      	mov	r3, r0
 8018328:	4618      	mov	r0, r3
 801832a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801832e:	b112      	cbz	r2, 8018336 <strchr+0x12>
 8018330:	428a      	cmp	r2, r1
 8018332:	d1f9      	bne.n	8018328 <strchr+0x4>
 8018334:	4770      	bx	lr
 8018336:	2900      	cmp	r1, #0
 8018338:	bf18      	it	ne
 801833a:	2000      	movne	r0, #0
 801833c:	4770      	bx	lr

0801833e <strncmp>:
 801833e:	b510      	push	{r4, lr}
 8018340:	b16a      	cbz	r2, 801835e <strncmp+0x20>
 8018342:	3901      	subs	r1, #1
 8018344:	1884      	adds	r4, r0, r2
 8018346:	f810 2b01 	ldrb.w	r2, [r0], #1
 801834a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801834e:	429a      	cmp	r2, r3
 8018350:	d103      	bne.n	801835a <strncmp+0x1c>
 8018352:	42a0      	cmp	r0, r4
 8018354:	d001      	beq.n	801835a <strncmp+0x1c>
 8018356:	2a00      	cmp	r2, #0
 8018358:	d1f5      	bne.n	8018346 <strncmp+0x8>
 801835a:	1ad0      	subs	r0, r2, r3
 801835c:	bd10      	pop	{r4, pc}
 801835e:	4610      	mov	r0, r2
 8018360:	e7fc      	b.n	801835c <strncmp+0x1e>

08018362 <strncpy>:
 8018362:	b510      	push	{r4, lr}
 8018364:	3901      	subs	r1, #1
 8018366:	4603      	mov	r3, r0
 8018368:	b132      	cbz	r2, 8018378 <strncpy+0x16>
 801836a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801836e:	f803 4b01 	strb.w	r4, [r3], #1
 8018372:	3a01      	subs	r2, #1
 8018374:	2c00      	cmp	r4, #0
 8018376:	d1f7      	bne.n	8018368 <strncpy+0x6>
 8018378:	441a      	add	r2, r3
 801837a:	2100      	movs	r1, #0
 801837c:	4293      	cmp	r3, r2
 801837e:	d100      	bne.n	8018382 <strncpy+0x20>
 8018380:	bd10      	pop	{r4, pc}
 8018382:	f803 1b01 	strb.w	r1, [r3], #1
 8018386:	e7f9      	b.n	801837c <strncpy+0x1a>

08018388 <strstr>:
 8018388:	780a      	ldrb	r2, [r1, #0]
 801838a:	b570      	push	{r4, r5, r6, lr}
 801838c:	b96a      	cbnz	r2, 80183aa <strstr+0x22>
 801838e:	bd70      	pop	{r4, r5, r6, pc}
 8018390:	429a      	cmp	r2, r3
 8018392:	d109      	bne.n	80183a8 <strstr+0x20>
 8018394:	460c      	mov	r4, r1
 8018396:	4605      	mov	r5, r0
 8018398:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801839c:	2b00      	cmp	r3, #0
 801839e:	d0f6      	beq.n	801838e <strstr+0x6>
 80183a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80183a4:	429e      	cmp	r6, r3
 80183a6:	d0f7      	beq.n	8018398 <strstr+0x10>
 80183a8:	3001      	adds	r0, #1
 80183aa:	7803      	ldrb	r3, [r0, #0]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d1ef      	bne.n	8018390 <strstr+0x8>
 80183b0:	4618      	mov	r0, r3
 80183b2:	e7ec      	b.n	801838e <strstr+0x6>

080183b4 <_close_r>:
 80183b4:	b538      	push	{r3, r4, r5, lr}
 80183b6:	4d06      	ldr	r5, [pc, #24]	@ (80183d0 <_close_r+0x1c>)
 80183b8:	2300      	movs	r3, #0
 80183ba:	4604      	mov	r4, r0
 80183bc:	4608      	mov	r0, r1
 80183be:	602b      	str	r3, [r5, #0]
 80183c0:	f7ea fb9d 	bl	8002afe <_close>
 80183c4:	1c43      	adds	r3, r0, #1
 80183c6:	d102      	bne.n	80183ce <_close_r+0x1a>
 80183c8:	682b      	ldr	r3, [r5, #0]
 80183ca:	b103      	cbz	r3, 80183ce <_close_r+0x1a>
 80183cc:	6023      	str	r3, [r4, #0]
 80183ce:	bd38      	pop	{r3, r4, r5, pc}
 80183d0:	200106d8 	.word	0x200106d8

080183d4 <_lseek_r>:
 80183d4:	b538      	push	{r3, r4, r5, lr}
 80183d6:	4d07      	ldr	r5, [pc, #28]	@ (80183f4 <_lseek_r+0x20>)
 80183d8:	4604      	mov	r4, r0
 80183da:	4608      	mov	r0, r1
 80183dc:	4611      	mov	r1, r2
 80183de:	2200      	movs	r2, #0
 80183e0:	602a      	str	r2, [r5, #0]
 80183e2:	461a      	mov	r2, r3
 80183e4:	f7ea fbb2 	bl	8002b4c <_lseek>
 80183e8:	1c43      	adds	r3, r0, #1
 80183ea:	d102      	bne.n	80183f2 <_lseek_r+0x1e>
 80183ec:	682b      	ldr	r3, [r5, #0]
 80183ee:	b103      	cbz	r3, 80183f2 <_lseek_r+0x1e>
 80183f0:	6023      	str	r3, [r4, #0]
 80183f2:	bd38      	pop	{r3, r4, r5, pc}
 80183f4:	200106d8 	.word	0x200106d8

080183f8 <_read_r>:
 80183f8:	b538      	push	{r3, r4, r5, lr}
 80183fa:	4d07      	ldr	r5, [pc, #28]	@ (8018418 <_read_r+0x20>)
 80183fc:	4604      	mov	r4, r0
 80183fe:	4608      	mov	r0, r1
 8018400:	4611      	mov	r1, r2
 8018402:	2200      	movs	r2, #0
 8018404:	602a      	str	r2, [r5, #0]
 8018406:	461a      	mov	r2, r3
 8018408:	f7ea fb40 	bl	8002a8c <_read>
 801840c:	1c43      	adds	r3, r0, #1
 801840e:	d102      	bne.n	8018416 <_read_r+0x1e>
 8018410:	682b      	ldr	r3, [r5, #0]
 8018412:	b103      	cbz	r3, 8018416 <_read_r+0x1e>
 8018414:	6023      	str	r3, [r4, #0]
 8018416:	bd38      	pop	{r3, r4, r5, pc}
 8018418:	200106d8 	.word	0x200106d8

0801841c <_sbrk_r>:
 801841c:	b538      	push	{r3, r4, r5, lr}
 801841e:	4d06      	ldr	r5, [pc, #24]	@ (8018438 <_sbrk_r+0x1c>)
 8018420:	2300      	movs	r3, #0
 8018422:	4604      	mov	r4, r0
 8018424:	4608      	mov	r0, r1
 8018426:	602b      	str	r3, [r5, #0]
 8018428:	f7ea fb9e 	bl	8002b68 <_sbrk>
 801842c:	1c43      	adds	r3, r0, #1
 801842e:	d102      	bne.n	8018436 <_sbrk_r+0x1a>
 8018430:	682b      	ldr	r3, [r5, #0]
 8018432:	b103      	cbz	r3, 8018436 <_sbrk_r+0x1a>
 8018434:	6023      	str	r3, [r4, #0]
 8018436:	bd38      	pop	{r3, r4, r5, pc}
 8018438:	200106d8 	.word	0x200106d8

0801843c <_write_r>:
 801843c:	b538      	push	{r3, r4, r5, lr}
 801843e:	4d07      	ldr	r5, [pc, #28]	@ (801845c <_write_r+0x20>)
 8018440:	4604      	mov	r4, r0
 8018442:	4608      	mov	r0, r1
 8018444:	4611      	mov	r1, r2
 8018446:	2200      	movs	r2, #0
 8018448:	602a      	str	r2, [r5, #0]
 801844a:	461a      	mov	r2, r3
 801844c:	f7ea fb3b 	bl	8002ac6 <_write>
 8018450:	1c43      	adds	r3, r0, #1
 8018452:	d102      	bne.n	801845a <_write_r+0x1e>
 8018454:	682b      	ldr	r3, [r5, #0]
 8018456:	b103      	cbz	r3, 801845a <_write_r+0x1e>
 8018458:	6023      	str	r3, [r4, #0]
 801845a:	bd38      	pop	{r3, r4, r5, pc}
 801845c:	200106d8 	.word	0x200106d8

08018460 <__errno>:
 8018460:	4b01      	ldr	r3, [pc, #4]	@ (8018468 <__errno+0x8>)
 8018462:	6818      	ldr	r0, [r3, #0]
 8018464:	4770      	bx	lr
 8018466:	bf00      	nop
 8018468:	200022b0 	.word	0x200022b0

0801846c <__libc_init_array>:
 801846c:	b570      	push	{r4, r5, r6, lr}
 801846e:	4d0d      	ldr	r5, [pc, #52]	@ (80184a4 <__libc_init_array+0x38>)
 8018470:	4c0d      	ldr	r4, [pc, #52]	@ (80184a8 <__libc_init_array+0x3c>)
 8018472:	1b64      	subs	r4, r4, r5
 8018474:	10a4      	asrs	r4, r4, #2
 8018476:	2600      	movs	r6, #0
 8018478:	42a6      	cmp	r6, r4
 801847a:	d109      	bne.n	8018490 <__libc_init_array+0x24>
 801847c:	4d0b      	ldr	r5, [pc, #44]	@ (80184ac <__libc_init_array+0x40>)
 801847e:	4c0c      	ldr	r4, [pc, #48]	@ (80184b0 <__libc_init_array+0x44>)
 8018480:	f001 fbd4 	bl	8019c2c <_init>
 8018484:	1b64      	subs	r4, r4, r5
 8018486:	10a4      	asrs	r4, r4, #2
 8018488:	2600      	movs	r6, #0
 801848a:	42a6      	cmp	r6, r4
 801848c:	d105      	bne.n	801849a <__libc_init_array+0x2e>
 801848e:	bd70      	pop	{r4, r5, r6, pc}
 8018490:	f855 3b04 	ldr.w	r3, [r5], #4
 8018494:	4798      	blx	r3
 8018496:	3601      	adds	r6, #1
 8018498:	e7ee      	b.n	8018478 <__libc_init_array+0xc>
 801849a:	f855 3b04 	ldr.w	r3, [r5], #4
 801849e:	4798      	blx	r3
 80184a0:	3601      	adds	r6, #1
 80184a2:	e7f2      	b.n	801848a <__libc_init_array+0x1e>
 80184a4:	0801b58c 	.word	0x0801b58c
 80184a8:	0801b58c 	.word	0x0801b58c
 80184ac:	0801b58c 	.word	0x0801b58c
 80184b0:	0801b594 	.word	0x0801b594

080184b4 <__retarget_lock_init_recursive>:
 80184b4:	4770      	bx	lr

080184b6 <__retarget_lock_acquire_recursive>:
 80184b6:	4770      	bx	lr

080184b8 <__retarget_lock_release_recursive>:
 80184b8:	4770      	bx	lr

080184ba <strcpy>:
 80184ba:	4603      	mov	r3, r0
 80184bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80184c0:	f803 2b01 	strb.w	r2, [r3], #1
 80184c4:	2a00      	cmp	r2, #0
 80184c6:	d1f9      	bne.n	80184bc <strcpy+0x2>
 80184c8:	4770      	bx	lr

080184ca <memcpy>:
 80184ca:	440a      	add	r2, r1
 80184cc:	4291      	cmp	r1, r2
 80184ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80184d2:	d100      	bne.n	80184d6 <memcpy+0xc>
 80184d4:	4770      	bx	lr
 80184d6:	b510      	push	{r4, lr}
 80184d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80184dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80184e0:	4291      	cmp	r1, r2
 80184e2:	d1f9      	bne.n	80184d8 <memcpy+0xe>
 80184e4:	bd10      	pop	{r4, pc}
	...

080184e8 <__assert_func>:
 80184e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184ea:	4614      	mov	r4, r2
 80184ec:	461a      	mov	r2, r3
 80184ee:	4b09      	ldr	r3, [pc, #36]	@ (8018514 <__assert_func+0x2c>)
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	4605      	mov	r5, r0
 80184f4:	68d8      	ldr	r0, [r3, #12]
 80184f6:	b14c      	cbz	r4, 801850c <__assert_func+0x24>
 80184f8:	4b07      	ldr	r3, [pc, #28]	@ (8018518 <__assert_func+0x30>)
 80184fa:	9100      	str	r1, [sp, #0]
 80184fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018500:	4906      	ldr	r1, [pc, #24]	@ (801851c <__assert_func+0x34>)
 8018502:	462b      	mov	r3, r5
 8018504:	f000 fbfc 	bl	8018d00 <fiprintf>
 8018508:	f000 fc90 	bl	8018e2c <abort>
 801850c:	4b04      	ldr	r3, [pc, #16]	@ (8018520 <__assert_func+0x38>)
 801850e:	461c      	mov	r4, r3
 8018510:	e7f3      	b.n	80184fa <__assert_func+0x12>
 8018512:	bf00      	nop
 8018514:	200022b0 	.word	0x200022b0
 8018518:	0801b043 	.word	0x0801b043
 801851c:	0801b050 	.word	0x0801b050
 8018520:	0801b07e 	.word	0x0801b07e

08018524 <__env_lock>:
 8018524:	4801      	ldr	r0, [pc, #4]	@ (801852c <__env_lock+0x8>)
 8018526:	f7ff bfc6 	b.w	80184b6 <__retarget_lock_acquire_recursive>
 801852a:	bf00      	nop
 801852c:	200106dc 	.word	0x200106dc

08018530 <__env_unlock>:
 8018530:	4801      	ldr	r0, [pc, #4]	@ (8018538 <__env_unlock+0x8>)
 8018532:	f7ff bfc1 	b.w	80184b8 <__retarget_lock_release_recursive>
 8018536:	bf00      	nop
 8018538:	200106dc 	.word	0x200106dc

0801853c <_free_r>:
 801853c:	b538      	push	{r3, r4, r5, lr}
 801853e:	4605      	mov	r5, r0
 8018540:	2900      	cmp	r1, #0
 8018542:	d041      	beq.n	80185c8 <_free_r+0x8c>
 8018544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018548:	1f0c      	subs	r4, r1, #4
 801854a:	2b00      	cmp	r3, #0
 801854c:	bfb8      	it	lt
 801854e:	18e4      	addlt	r4, r4, r3
 8018550:	f7ff fb2a 	bl	8017ba8 <__malloc_lock>
 8018554:	4a1d      	ldr	r2, [pc, #116]	@ (80185cc <_free_r+0x90>)
 8018556:	6813      	ldr	r3, [r2, #0]
 8018558:	b933      	cbnz	r3, 8018568 <_free_r+0x2c>
 801855a:	6063      	str	r3, [r4, #4]
 801855c:	6014      	str	r4, [r2, #0]
 801855e:	4628      	mov	r0, r5
 8018560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018564:	f7ff bb26 	b.w	8017bb4 <__malloc_unlock>
 8018568:	42a3      	cmp	r3, r4
 801856a:	d908      	bls.n	801857e <_free_r+0x42>
 801856c:	6820      	ldr	r0, [r4, #0]
 801856e:	1821      	adds	r1, r4, r0
 8018570:	428b      	cmp	r3, r1
 8018572:	bf01      	itttt	eq
 8018574:	6819      	ldreq	r1, [r3, #0]
 8018576:	685b      	ldreq	r3, [r3, #4]
 8018578:	1809      	addeq	r1, r1, r0
 801857a:	6021      	streq	r1, [r4, #0]
 801857c:	e7ed      	b.n	801855a <_free_r+0x1e>
 801857e:	461a      	mov	r2, r3
 8018580:	685b      	ldr	r3, [r3, #4]
 8018582:	b10b      	cbz	r3, 8018588 <_free_r+0x4c>
 8018584:	42a3      	cmp	r3, r4
 8018586:	d9fa      	bls.n	801857e <_free_r+0x42>
 8018588:	6811      	ldr	r1, [r2, #0]
 801858a:	1850      	adds	r0, r2, r1
 801858c:	42a0      	cmp	r0, r4
 801858e:	d10b      	bne.n	80185a8 <_free_r+0x6c>
 8018590:	6820      	ldr	r0, [r4, #0]
 8018592:	4401      	add	r1, r0
 8018594:	1850      	adds	r0, r2, r1
 8018596:	4283      	cmp	r3, r0
 8018598:	6011      	str	r1, [r2, #0]
 801859a:	d1e0      	bne.n	801855e <_free_r+0x22>
 801859c:	6818      	ldr	r0, [r3, #0]
 801859e:	685b      	ldr	r3, [r3, #4]
 80185a0:	6053      	str	r3, [r2, #4]
 80185a2:	4408      	add	r0, r1
 80185a4:	6010      	str	r0, [r2, #0]
 80185a6:	e7da      	b.n	801855e <_free_r+0x22>
 80185a8:	d902      	bls.n	80185b0 <_free_r+0x74>
 80185aa:	230c      	movs	r3, #12
 80185ac:	602b      	str	r3, [r5, #0]
 80185ae:	e7d6      	b.n	801855e <_free_r+0x22>
 80185b0:	6820      	ldr	r0, [r4, #0]
 80185b2:	1821      	adds	r1, r4, r0
 80185b4:	428b      	cmp	r3, r1
 80185b6:	bf04      	itt	eq
 80185b8:	6819      	ldreq	r1, [r3, #0]
 80185ba:	685b      	ldreq	r3, [r3, #4]
 80185bc:	6063      	str	r3, [r4, #4]
 80185be:	bf04      	itt	eq
 80185c0:	1809      	addeq	r1, r1, r0
 80185c2:	6021      	streq	r1, [r4, #0]
 80185c4:	6054      	str	r4, [r2, #4]
 80185c6:	e7ca      	b.n	801855e <_free_r+0x22>
 80185c8:	bd38      	pop	{r3, r4, r5, pc}
 80185ca:	bf00      	nop
 80185cc:	20010598 	.word	0x20010598

080185d0 <_malloc_usable_size_r>:
 80185d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185d4:	1f18      	subs	r0, r3, #4
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	bfbc      	itt	lt
 80185da:	580b      	ldrlt	r3, [r1, r0]
 80185dc:	18c0      	addlt	r0, r0, r3
 80185de:	4770      	bx	lr

080185e0 <__ssputs_r>:
 80185e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185e4:	688e      	ldr	r6, [r1, #8]
 80185e6:	461f      	mov	r7, r3
 80185e8:	42be      	cmp	r6, r7
 80185ea:	680b      	ldr	r3, [r1, #0]
 80185ec:	4682      	mov	sl, r0
 80185ee:	460c      	mov	r4, r1
 80185f0:	4690      	mov	r8, r2
 80185f2:	d82d      	bhi.n	8018650 <__ssputs_r+0x70>
 80185f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80185f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80185fc:	d026      	beq.n	801864c <__ssputs_r+0x6c>
 80185fe:	6965      	ldr	r5, [r4, #20]
 8018600:	6909      	ldr	r1, [r1, #16]
 8018602:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018606:	eba3 0901 	sub.w	r9, r3, r1
 801860a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801860e:	1c7b      	adds	r3, r7, #1
 8018610:	444b      	add	r3, r9
 8018612:	106d      	asrs	r5, r5, #1
 8018614:	429d      	cmp	r5, r3
 8018616:	bf38      	it	cc
 8018618:	461d      	movcc	r5, r3
 801861a:	0553      	lsls	r3, r2, #21
 801861c:	d527      	bpl.n	801866e <__ssputs_r+0x8e>
 801861e:	4629      	mov	r1, r5
 8018620:	f7ff fa42 	bl	8017aa8 <_malloc_r>
 8018624:	4606      	mov	r6, r0
 8018626:	b360      	cbz	r0, 8018682 <__ssputs_r+0xa2>
 8018628:	6921      	ldr	r1, [r4, #16]
 801862a:	464a      	mov	r2, r9
 801862c:	f7ff ff4d 	bl	80184ca <memcpy>
 8018630:	89a3      	ldrh	r3, [r4, #12]
 8018632:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801863a:	81a3      	strh	r3, [r4, #12]
 801863c:	6126      	str	r6, [r4, #16]
 801863e:	6165      	str	r5, [r4, #20]
 8018640:	444e      	add	r6, r9
 8018642:	eba5 0509 	sub.w	r5, r5, r9
 8018646:	6026      	str	r6, [r4, #0]
 8018648:	60a5      	str	r5, [r4, #8]
 801864a:	463e      	mov	r6, r7
 801864c:	42be      	cmp	r6, r7
 801864e:	d900      	bls.n	8018652 <__ssputs_r+0x72>
 8018650:	463e      	mov	r6, r7
 8018652:	6820      	ldr	r0, [r4, #0]
 8018654:	4632      	mov	r2, r6
 8018656:	4641      	mov	r1, r8
 8018658:	f7ff fe42 	bl	80182e0 <memmove>
 801865c:	68a3      	ldr	r3, [r4, #8]
 801865e:	1b9b      	subs	r3, r3, r6
 8018660:	60a3      	str	r3, [r4, #8]
 8018662:	6823      	ldr	r3, [r4, #0]
 8018664:	4433      	add	r3, r6
 8018666:	6023      	str	r3, [r4, #0]
 8018668:	2000      	movs	r0, #0
 801866a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801866e:	462a      	mov	r2, r5
 8018670:	f7ff fb1a 	bl	8017ca8 <_realloc_r>
 8018674:	4606      	mov	r6, r0
 8018676:	2800      	cmp	r0, #0
 8018678:	d1e0      	bne.n	801863c <__ssputs_r+0x5c>
 801867a:	6921      	ldr	r1, [r4, #16]
 801867c:	4650      	mov	r0, sl
 801867e:	f7ff ff5d 	bl	801853c <_free_r>
 8018682:	230c      	movs	r3, #12
 8018684:	f8ca 3000 	str.w	r3, [sl]
 8018688:	89a3      	ldrh	r3, [r4, #12]
 801868a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801868e:	81a3      	strh	r3, [r4, #12]
 8018690:	f04f 30ff 	mov.w	r0, #4294967295
 8018694:	e7e9      	b.n	801866a <__ssputs_r+0x8a>
	...

08018698 <_svfiprintf_r>:
 8018698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801869c:	4698      	mov	r8, r3
 801869e:	898b      	ldrh	r3, [r1, #12]
 80186a0:	061b      	lsls	r3, r3, #24
 80186a2:	b09d      	sub	sp, #116	@ 0x74
 80186a4:	4607      	mov	r7, r0
 80186a6:	460d      	mov	r5, r1
 80186a8:	4614      	mov	r4, r2
 80186aa:	d510      	bpl.n	80186ce <_svfiprintf_r+0x36>
 80186ac:	690b      	ldr	r3, [r1, #16]
 80186ae:	b973      	cbnz	r3, 80186ce <_svfiprintf_r+0x36>
 80186b0:	2140      	movs	r1, #64	@ 0x40
 80186b2:	f7ff f9f9 	bl	8017aa8 <_malloc_r>
 80186b6:	6028      	str	r0, [r5, #0]
 80186b8:	6128      	str	r0, [r5, #16]
 80186ba:	b930      	cbnz	r0, 80186ca <_svfiprintf_r+0x32>
 80186bc:	230c      	movs	r3, #12
 80186be:	603b      	str	r3, [r7, #0]
 80186c0:	f04f 30ff 	mov.w	r0, #4294967295
 80186c4:	b01d      	add	sp, #116	@ 0x74
 80186c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186ca:	2340      	movs	r3, #64	@ 0x40
 80186cc:	616b      	str	r3, [r5, #20]
 80186ce:	2300      	movs	r3, #0
 80186d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80186d2:	2320      	movs	r3, #32
 80186d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80186d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80186dc:	2330      	movs	r3, #48	@ 0x30
 80186de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801887c <_svfiprintf_r+0x1e4>
 80186e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80186e6:	f04f 0901 	mov.w	r9, #1
 80186ea:	4623      	mov	r3, r4
 80186ec:	469a      	mov	sl, r3
 80186ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80186f2:	b10a      	cbz	r2, 80186f8 <_svfiprintf_r+0x60>
 80186f4:	2a25      	cmp	r2, #37	@ 0x25
 80186f6:	d1f9      	bne.n	80186ec <_svfiprintf_r+0x54>
 80186f8:	ebba 0b04 	subs.w	fp, sl, r4
 80186fc:	d00b      	beq.n	8018716 <_svfiprintf_r+0x7e>
 80186fe:	465b      	mov	r3, fp
 8018700:	4622      	mov	r2, r4
 8018702:	4629      	mov	r1, r5
 8018704:	4638      	mov	r0, r7
 8018706:	f7ff ff6b 	bl	80185e0 <__ssputs_r>
 801870a:	3001      	adds	r0, #1
 801870c:	f000 80a7 	beq.w	801885e <_svfiprintf_r+0x1c6>
 8018710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018712:	445a      	add	r2, fp
 8018714:	9209      	str	r2, [sp, #36]	@ 0x24
 8018716:	f89a 3000 	ldrb.w	r3, [sl]
 801871a:	2b00      	cmp	r3, #0
 801871c:	f000 809f 	beq.w	801885e <_svfiprintf_r+0x1c6>
 8018720:	2300      	movs	r3, #0
 8018722:	f04f 32ff 	mov.w	r2, #4294967295
 8018726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801872a:	f10a 0a01 	add.w	sl, sl, #1
 801872e:	9304      	str	r3, [sp, #16]
 8018730:	9307      	str	r3, [sp, #28]
 8018732:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018736:	931a      	str	r3, [sp, #104]	@ 0x68
 8018738:	4654      	mov	r4, sl
 801873a:	2205      	movs	r2, #5
 801873c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018740:	484e      	ldr	r0, [pc, #312]	@ (801887c <_svfiprintf_r+0x1e4>)
 8018742:	f7e7 fd75 	bl	8000230 <memchr>
 8018746:	9a04      	ldr	r2, [sp, #16]
 8018748:	b9d8      	cbnz	r0, 8018782 <_svfiprintf_r+0xea>
 801874a:	06d0      	lsls	r0, r2, #27
 801874c:	bf44      	itt	mi
 801874e:	2320      	movmi	r3, #32
 8018750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018754:	0711      	lsls	r1, r2, #28
 8018756:	bf44      	itt	mi
 8018758:	232b      	movmi	r3, #43	@ 0x2b
 801875a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801875e:	f89a 3000 	ldrb.w	r3, [sl]
 8018762:	2b2a      	cmp	r3, #42	@ 0x2a
 8018764:	d015      	beq.n	8018792 <_svfiprintf_r+0xfa>
 8018766:	9a07      	ldr	r2, [sp, #28]
 8018768:	4654      	mov	r4, sl
 801876a:	2000      	movs	r0, #0
 801876c:	f04f 0c0a 	mov.w	ip, #10
 8018770:	4621      	mov	r1, r4
 8018772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018776:	3b30      	subs	r3, #48	@ 0x30
 8018778:	2b09      	cmp	r3, #9
 801877a:	d94b      	bls.n	8018814 <_svfiprintf_r+0x17c>
 801877c:	b1b0      	cbz	r0, 80187ac <_svfiprintf_r+0x114>
 801877e:	9207      	str	r2, [sp, #28]
 8018780:	e014      	b.n	80187ac <_svfiprintf_r+0x114>
 8018782:	eba0 0308 	sub.w	r3, r0, r8
 8018786:	fa09 f303 	lsl.w	r3, r9, r3
 801878a:	4313      	orrs	r3, r2
 801878c:	9304      	str	r3, [sp, #16]
 801878e:	46a2      	mov	sl, r4
 8018790:	e7d2      	b.n	8018738 <_svfiprintf_r+0xa0>
 8018792:	9b03      	ldr	r3, [sp, #12]
 8018794:	1d19      	adds	r1, r3, #4
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	9103      	str	r1, [sp, #12]
 801879a:	2b00      	cmp	r3, #0
 801879c:	bfbb      	ittet	lt
 801879e:	425b      	neglt	r3, r3
 80187a0:	f042 0202 	orrlt.w	r2, r2, #2
 80187a4:	9307      	strge	r3, [sp, #28]
 80187a6:	9307      	strlt	r3, [sp, #28]
 80187a8:	bfb8      	it	lt
 80187aa:	9204      	strlt	r2, [sp, #16]
 80187ac:	7823      	ldrb	r3, [r4, #0]
 80187ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80187b0:	d10a      	bne.n	80187c8 <_svfiprintf_r+0x130>
 80187b2:	7863      	ldrb	r3, [r4, #1]
 80187b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80187b6:	d132      	bne.n	801881e <_svfiprintf_r+0x186>
 80187b8:	9b03      	ldr	r3, [sp, #12]
 80187ba:	1d1a      	adds	r2, r3, #4
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	9203      	str	r2, [sp, #12]
 80187c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80187c4:	3402      	adds	r4, #2
 80187c6:	9305      	str	r3, [sp, #20]
 80187c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801888c <_svfiprintf_r+0x1f4>
 80187cc:	7821      	ldrb	r1, [r4, #0]
 80187ce:	2203      	movs	r2, #3
 80187d0:	4650      	mov	r0, sl
 80187d2:	f7e7 fd2d 	bl	8000230 <memchr>
 80187d6:	b138      	cbz	r0, 80187e8 <_svfiprintf_r+0x150>
 80187d8:	9b04      	ldr	r3, [sp, #16]
 80187da:	eba0 000a 	sub.w	r0, r0, sl
 80187de:	2240      	movs	r2, #64	@ 0x40
 80187e0:	4082      	lsls	r2, r0
 80187e2:	4313      	orrs	r3, r2
 80187e4:	3401      	adds	r4, #1
 80187e6:	9304      	str	r3, [sp, #16]
 80187e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80187ec:	4824      	ldr	r0, [pc, #144]	@ (8018880 <_svfiprintf_r+0x1e8>)
 80187ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80187f2:	2206      	movs	r2, #6
 80187f4:	f7e7 fd1c 	bl	8000230 <memchr>
 80187f8:	2800      	cmp	r0, #0
 80187fa:	d036      	beq.n	801886a <_svfiprintf_r+0x1d2>
 80187fc:	4b21      	ldr	r3, [pc, #132]	@ (8018884 <_svfiprintf_r+0x1ec>)
 80187fe:	bb1b      	cbnz	r3, 8018848 <_svfiprintf_r+0x1b0>
 8018800:	9b03      	ldr	r3, [sp, #12]
 8018802:	3307      	adds	r3, #7
 8018804:	f023 0307 	bic.w	r3, r3, #7
 8018808:	3308      	adds	r3, #8
 801880a:	9303      	str	r3, [sp, #12]
 801880c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801880e:	4433      	add	r3, r6
 8018810:	9309      	str	r3, [sp, #36]	@ 0x24
 8018812:	e76a      	b.n	80186ea <_svfiprintf_r+0x52>
 8018814:	fb0c 3202 	mla	r2, ip, r2, r3
 8018818:	460c      	mov	r4, r1
 801881a:	2001      	movs	r0, #1
 801881c:	e7a8      	b.n	8018770 <_svfiprintf_r+0xd8>
 801881e:	2300      	movs	r3, #0
 8018820:	3401      	adds	r4, #1
 8018822:	9305      	str	r3, [sp, #20]
 8018824:	4619      	mov	r1, r3
 8018826:	f04f 0c0a 	mov.w	ip, #10
 801882a:	4620      	mov	r0, r4
 801882c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018830:	3a30      	subs	r2, #48	@ 0x30
 8018832:	2a09      	cmp	r2, #9
 8018834:	d903      	bls.n	801883e <_svfiprintf_r+0x1a6>
 8018836:	2b00      	cmp	r3, #0
 8018838:	d0c6      	beq.n	80187c8 <_svfiprintf_r+0x130>
 801883a:	9105      	str	r1, [sp, #20]
 801883c:	e7c4      	b.n	80187c8 <_svfiprintf_r+0x130>
 801883e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018842:	4604      	mov	r4, r0
 8018844:	2301      	movs	r3, #1
 8018846:	e7f0      	b.n	801882a <_svfiprintf_r+0x192>
 8018848:	ab03      	add	r3, sp, #12
 801884a:	9300      	str	r3, [sp, #0]
 801884c:	462a      	mov	r2, r5
 801884e:	4b0e      	ldr	r3, [pc, #56]	@ (8018888 <_svfiprintf_r+0x1f0>)
 8018850:	a904      	add	r1, sp, #16
 8018852:	4638      	mov	r0, r7
 8018854:	f3af 8000 	nop.w
 8018858:	1c42      	adds	r2, r0, #1
 801885a:	4606      	mov	r6, r0
 801885c:	d1d6      	bne.n	801880c <_svfiprintf_r+0x174>
 801885e:	89ab      	ldrh	r3, [r5, #12]
 8018860:	065b      	lsls	r3, r3, #25
 8018862:	f53f af2d 	bmi.w	80186c0 <_svfiprintf_r+0x28>
 8018866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018868:	e72c      	b.n	80186c4 <_svfiprintf_r+0x2c>
 801886a:	ab03      	add	r3, sp, #12
 801886c:	9300      	str	r3, [sp, #0]
 801886e:	462a      	mov	r2, r5
 8018870:	4b05      	ldr	r3, [pc, #20]	@ (8018888 <_svfiprintf_r+0x1f0>)
 8018872:	a904      	add	r1, sp, #16
 8018874:	4638      	mov	r0, r7
 8018876:	f000 f879 	bl	801896c <_printf_i>
 801887a:	e7ed      	b.n	8018858 <_svfiprintf_r+0x1c0>
 801887c:	0801b07f 	.word	0x0801b07f
 8018880:	0801b089 	.word	0x0801b089
 8018884:	00000000 	.word	0x00000000
 8018888:	080185e1 	.word	0x080185e1
 801888c:	0801b085 	.word	0x0801b085

08018890 <_printf_common>:
 8018890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018894:	4616      	mov	r6, r2
 8018896:	4698      	mov	r8, r3
 8018898:	688a      	ldr	r2, [r1, #8]
 801889a:	690b      	ldr	r3, [r1, #16]
 801889c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80188a0:	4293      	cmp	r3, r2
 80188a2:	bfb8      	it	lt
 80188a4:	4613      	movlt	r3, r2
 80188a6:	6033      	str	r3, [r6, #0]
 80188a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80188ac:	4607      	mov	r7, r0
 80188ae:	460c      	mov	r4, r1
 80188b0:	b10a      	cbz	r2, 80188b6 <_printf_common+0x26>
 80188b2:	3301      	adds	r3, #1
 80188b4:	6033      	str	r3, [r6, #0]
 80188b6:	6823      	ldr	r3, [r4, #0]
 80188b8:	0699      	lsls	r1, r3, #26
 80188ba:	bf42      	ittt	mi
 80188bc:	6833      	ldrmi	r3, [r6, #0]
 80188be:	3302      	addmi	r3, #2
 80188c0:	6033      	strmi	r3, [r6, #0]
 80188c2:	6825      	ldr	r5, [r4, #0]
 80188c4:	f015 0506 	ands.w	r5, r5, #6
 80188c8:	d106      	bne.n	80188d8 <_printf_common+0x48>
 80188ca:	f104 0a19 	add.w	sl, r4, #25
 80188ce:	68e3      	ldr	r3, [r4, #12]
 80188d0:	6832      	ldr	r2, [r6, #0]
 80188d2:	1a9b      	subs	r3, r3, r2
 80188d4:	42ab      	cmp	r3, r5
 80188d6:	dc26      	bgt.n	8018926 <_printf_common+0x96>
 80188d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80188dc:	6822      	ldr	r2, [r4, #0]
 80188de:	3b00      	subs	r3, #0
 80188e0:	bf18      	it	ne
 80188e2:	2301      	movne	r3, #1
 80188e4:	0692      	lsls	r2, r2, #26
 80188e6:	d42b      	bmi.n	8018940 <_printf_common+0xb0>
 80188e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80188ec:	4641      	mov	r1, r8
 80188ee:	4638      	mov	r0, r7
 80188f0:	47c8      	blx	r9
 80188f2:	3001      	adds	r0, #1
 80188f4:	d01e      	beq.n	8018934 <_printf_common+0xa4>
 80188f6:	6823      	ldr	r3, [r4, #0]
 80188f8:	6922      	ldr	r2, [r4, #16]
 80188fa:	f003 0306 	and.w	r3, r3, #6
 80188fe:	2b04      	cmp	r3, #4
 8018900:	bf02      	ittt	eq
 8018902:	68e5      	ldreq	r5, [r4, #12]
 8018904:	6833      	ldreq	r3, [r6, #0]
 8018906:	1aed      	subeq	r5, r5, r3
 8018908:	68a3      	ldr	r3, [r4, #8]
 801890a:	bf0c      	ite	eq
 801890c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018910:	2500      	movne	r5, #0
 8018912:	4293      	cmp	r3, r2
 8018914:	bfc4      	itt	gt
 8018916:	1a9b      	subgt	r3, r3, r2
 8018918:	18ed      	addgt	r5, r5, r3
 801891a:	2600      	movs	r6, #0
 801891c:	341a      	adds	r4, #26
 801891e:	42b5      	cmp	r5, r6
 8018920:	d11a      	bne.n	8018958 <_printf_common+0xc8>
 8018922:	2000      	movs	r0, #0
 8018924:	e008      	b.n	8018938 <_printf_common+0xa8>
 8018926:	2301      	movs	r3, #1
 8018928:	4652      	mov	r2, sl
 801892a:	4641      	mov	r1, r8
 801892c:	4638      	mov	r0, r7
 801892e:	47c8      	blx	r9
 8018930:	3001      	adds	r0, #1
 8018932:	d103      	bne.n	801893c <_printf_common+0xac>
 8018934:	f04f 30ff 	mov.w	r0, #4294967295
 8018938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801893c:	3501      	adds	r5, #1
 801893e:	e7c6      	b.n	80188ce <_printf_common+0x3e>
 8018940:	18e1      	adds	r1, r4, r3
 8018942:	1c5a      	adds	r2, r3, #1
 8018944:	2030      	movs	r0, #48	@ 0x30
 8018946:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801894a:	4422      	add	r2, r4
 801894c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018950:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018954:	3302      	adds	r3, #2
 8018956:	e7c7      	b.n	80188e8 <_printf_common+0x58>
 8018958:	2301      	movs	r3, #1
 801895a:	4622      	mov	r2, r4
 801895c:	4641      	mov	r1, r8
 801895e:	4638      	mov	r0, r7
 8018960:	47c8      	blx	r9
 8018962:	3001      	adds	r0, #1
 8018964:	d0e6      	beq.n	8018934 <_printf_common+0xa4>
 8018966:	3601      	adds	r6, #1
 8018968:	e7d9      	b.n	801891e <_printf_common+0x8e>
	...

0801896c <_printf_i>:
 801896c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018970:	7e0f      	ldrb	r7, [r1, #24]
 8018972:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018974:	2f78      	cmp	r7, #120	@ 0x78
 8018976:	4691      	mov	r9, r2
 8018978:	4680      	mov	r8, r0
 801897a:	460c      	mov	r4, r1
 801897c:	469a      	mov	sl, r3
 801897e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018982:	d807      	bhi.n	8018994 <_printf_i+0x28>
 8018984:	2f62      	cmp	r7, #98	@ 0x62
 8018986:	d80a      	bhi.n	801899e <_printf_i+0x32>
 8018988:	2f00      	cmp	r7, #0
 801898a:	f000 80d1 	beq.w	8018b30 <_printf_i+0x1c4>
 801898e:	2f58      	cmp	r7, #88	@ 0x58
 8018990:	f000 80b8 	beq.w	8018b04 <_printf_i+0x198>
 8018994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018998:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801899c:	e03a      	b.n	8018a14 <_printf_i+0xa8>
 801899e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80189a2:	2b15      	cmp	r3, #21
 80189a4:	d8f6      	bhi.n	8018994 <_printf_i+0x28>
 80189a6:	a101      	add	r1, pc, #4	@ (adr r1, 80189ac <_printf_i+0x40>)
 80189a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80189ac:	08018a05 	.word	0x08018a05
 80189b0:	08018a19 	.word	0x08018a19
 80189b4:	08018995 	.word	0x08018995
 80189b8:	08018995 	.word	0x08018995
 80189bc:	08018995 	.word	0x08018995
 80189c0:	08018995 	.word	0x08018995
 80189c4:	08018a19 	.word	0x08018a19
 80189c8:	08018995 	.word	0x08018995
 80189cc:	08018995 	.word	0x08018995
 80189d0:	08018995 	.word	0x08018995
 80189d4:	08018995 	.word	0x08018995
 80189d8:	08018b17 	.word	0x08018b17
 80189dc:	08018a43 	.word	0x08018a43
 80189e0:	08018ad1 	.word	0x08018ad1
 80189e4:	08018995 	.word	0x08018995
 80189e8:	08018995 	.word	0x08018995
 80189ec:	08018b39 	.word	0x08018b39
 80189f0:	08018995 	.word	0x08018995
 80189f4:	08018a43 	.word	0x08018a43
 80189f8:	08018995 	.word	0x08018995
 80189fc:	08018995 	.word	0x08018995
 8018a00:	08018ad9 	.word	0x08018ad9
 8018a04:	6833      	ldr	r3, [r6, #0]
 8018a06:	1d1a      	adds	r2, r3, #4
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	6032      	str	r2, [r6, #0]
 8018a0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018a10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018a14:	2301      	movs	r3, #1
 8018a16:	e09c      	b.n	8018b52 <_printf_i+0x1e6>
 8018a18:	6833      	ldr	r3, [r6, #0]
 8018a1a:	6820      	ldr	r0, [r4, #0]
 8018a1c:	1d19      	adds	r1, r3, #4
 8018a1e:	6031      	str	r1, [r6, #0]
 8018a20:	0606      	lsls	r6, r0, #24
 8018a22:	d501      	bpl.n	8018a28 <_printf_i+0xbc>
 8018a24:	681d      	ldr	r5, [r3, #0]
 8018a26:	e003      	b.n	8018a30 <_printf_i+0xc4>
 8018a28:	0645      	lsls	r5, r0, #25
 8018a2a:	d5fb      	bpl.n	8018a24 <_printf_i+0xb8>
 8018a2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018a30:	2d00      	cmp	r5, #0
 8018a32:	da03      	bge.n	8018a3c <_printf_i+0xd0>
 8018a34:	232d      	movs	r3, #45	@ 0x2d
 8018a36:	426d      	negs	r5, r5
 8018a38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018a3c:	4858      	ldr	r0, [pc, #352]	@ (8018ba0 <_printf_i+0x234>)
 8018a3e:	230a      	movs	r3, #10
 8018a40:	e011      	b.n	8018a66 <_printf_i+0xfa>
 8018a42:	6821      	ldr	r1, [r4, #0]
 8018a44:	6833      	ldr	r3, [r6, #0]
 8018a46:	0608      	lsls	r0, r1, #24
 8018a48:	f853 5b04 	ldr.w	r5, [r3], #4
 8018a4c:	d402      	bmi.n	8018a54 <_printf_i+0xe8>
 8018a4e:	0649      	lsls	r1, r1, #25
 8018a50:	bf48      	it	mi
 8018a52:	b2ad      	uxthmi	r5, r5
 8018a54:	2f6f      	cmp	r7, #111	@ 0x6f
 8018a56:	4852      	ldr	r0, [pc, #328]	@ (8018ba0 <_printf_i+0x234>)
 8018a58:	6033      	str	r3, [r6, #0]
 8018a5a:	bf14      	ite	ne
 8018a5c:	230a      	movne	r3, #10
 8018a5e:	2308      	moveq	r3, #8
 8018a60:	2100      	movs	r1, #0
 8018a62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018a66:	6866      	ldr	r6, [r4, #4]
 8018a68:	60a6      	str	r6, [r4, #8]
 8018a6a:	2e00      	cmp	r6, #0
 8018a6c:	db05      	blt.n	8018a7a <_printf_i+0x10e>
 8018a6e:	6821      	ldr	r1, [r4, #0]
 8018a70:	432e      	orrs	r6, r5
 8018a72:	f021 0104 	bic.w	r1, r1, #4
 8018a76:	6021      	str	r1, [r4, #0]
 8018a78:	d04b      	beq.n	8018b12 <_printf_i+0x1a6>
 8018a7a:	4616      	mov	r6, r2
 8018a7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8018a80:	fb03 5711 	mls	r7, r3, r1, r5
 8018a84:	5dc7      	ldrb	r7, [r0, r7]
 8018a86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018a8a:	462f      	mov	r7, r5
 8018a8c:	42bb      	cmp	r3, r7
 8018a8e:	460d      	mov	r5, r1
 8018a90:	d9f4      	bls.n	8018a7c <_printf_i+0x110>
 8018a92:	2b08      	cmp	r3, #8
 8018a94:	d10b      	bne.n	8018aae <_printf_i+0x142>
 8018a96:	6823      	ldr	r3, [r4, #0]
 8018a98:	07df      	lsls	r7, r3, #31
 8018a9a:	d508      	bpl.n	8018aae <_printf_i+0x142>
 8018a9c:	6923      	ldr	r3, [r4, #16]
 8018a9e:	6861      	ldr	r1, [r4, #4]
 8018aa0:	4299      	cmp	r1, r3
 8018aa2:	bfde      	ittt	le
 8018aa4:	2330      	movle	r3, #48	@ 0x30
 8018aa6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018aaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018aae:	1b92      	subs	r2, r2, r6
 8018ab0:	6122      	str	r2, [r4, #16]
 8018ab2:	f8cd a000 	str.w	sl, [sp]
 8018ab6:	464b      	mov	r3, r9
 8018ab8:	aa03      	add	r2, sp, #12
 8018aba:	4621      	mov	r1, r4
 8018abc:	4640      	mov	r0, r8
 8018abe:	f7ff fee7 	bl	8018890 <_printf_common>
 8018ac2:	3001      	adds	r0, #1
 8018ac4:	d14a      	bne.n	8018b5c <_printf_i+0x1f0>
 8018ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8018aca:	b004      	add	sp, #16
 8018acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ad0:	6823      	ldr	r3, [r4, #0]
 8018ad2:	f043 0320 	orr.w	r3, r3, #32
 8018ad6:	6023      	str	r3, [r4, #0]
 8018ad8:	4832      	ldr	r0, [pc, #200]	@ (8018ba4 <_printf_i+0x238>)
 8018ada:	2778      	movs	r7, #120	@ 0x78
 8018adc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018ae0:	6823      	ldr	r3, [r4, #0]
 8018ae2:	6831      	ldr	r1, [r6, #0]
 8018ae4:	061f      	lsls	r7, r3, #24
 8018ae6:	f851 5b04 	ldr.w	r5, [r1], #4
 8018aea:	d402      	bmi.n	8018af2 <_printf_i+0x186>
 8018aec:	065f      	lsls	r7, r3, #25
 8018aee:	bf48      	it	mi
 8018af0:	b2ad      	uxthmi	r5, r5
 8018af2:	6031      	str	r1, [r6, #0]
 8018af4:	07d9      	lsls	r1, r3, #31
 8018af6:	bf44      	itt	mi
 8018af8:	f043 0320 	orrmi.w	r3, r3, #32
 8018afc:	6023      	strmi	r3, [r4, #0]
 8018afe:	b11d      	cbz	r5, 8018b08 <_printf_i+0x19c>
 8018b00:	2310      	movs	r3, #16
 8018b02:	e7ad      	b.n	8018a60 <_printf_i+0xf4>
 8018b04:	4826      	ldr	r0, [pc, #152]	@ (8018ba0 <_printf_i+0x234>)
 8018b06:	e7e9      	b.n	8018adc <_printf_i+0x170>
 8018b08:	6823      	ldr	r3, [r4, #0]
 8018b0a:	f023 0320 	bic.w	r3, r3, #32
 8018b0e:	6023      	str	r3, [r4, #0]
 8018b10:	e7f6      	b.n	8018b00 <_printf_i+0x194>
 8018b12:	4616      	mov	r6, r2
 8018b14:	e7bd      	b.n	8018a92 <_printf_i+0x126>
 8018b16:	6833      	ldr	r3, [r6, #0]
 8018b18:	6825      	ldr	r5, [r4, #0]
 8018b1a:	6961      	ldr	r1, [r4, #20]
 8018b1c:	1d18      	adds	r0, r3, #4
 8018b1e:	6030      	str	r0, [r6, #0]
 8018b20:	062e      	lsls	r6, r5, #24
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	d501      	bpl.n	8018b2a <_printf_i+0x1be>
 8018b26:	6019      	str	r1, [r3, #0]
 8018b28:	e002      	b.n	8018b30 <_printf_i+0x1c4>
 8018b2a:	0668      	lsls	r0, r5, #25
 8018b2c:	d5fb      	bpl.n	8018b26 <_printf_i+0x1ba>
 8018b2e:	8019      	strh	r1, [r3, #0]
 8018b30:	2300      	movs	r3, #0
 8018b32:	6123      	str	r3, [r4, #16]
 8018b34:	4616      	mov	r6, r2
 8018b36:	e7bc      	b.n	8018ab2 <_printf_i+0x146>
 8018b38:	6833      	ldr	r3, [r6, #0]
 8018b3a:	1d1a      	adds	r2, r3, #4
 8018b3c:	6032      	str	r2, [r6, #0]
 8018b3e:	681e      	ldr	r6, [r3, #0]
 8018b40:	6862      	ldr	r2, [r4, #4]
 8018b42:	2100      	movs	r1, #0
 8018b44:	4630      	mov	r0, r6
 8018b46:	f7e7 fb73 	bl	8000230 <memchr>
 8018b4a:	b108      	cbz	r0, 8018b50 <_printf_i+0x1e4>
 8018b4c:	1b80      	subs	r0, r0, r6
 8018b4e:	6060      	str	r0, [r4, #4]
 8018b50:	6863      	ldr	r3, [r4, #4]
 8018b52:	6123      	str	r3, [r4, #16]
 8018b54:	2300      	movs	r3, #0
 8018b56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018b5a:	e7aa      	b.n	8018ab2 <_printf_i+0x146>
 8018b5c:	6923      	ldr	r3, [r4, #16]
 8018b5e:	4632      	mov	r2, r6
 8018b60:	4649      	mov	r1, r9
 8018b62:	4640      	mov	r0, r8
 8018b64:	47d0      	blx	sl
 8018b66:	3001      	adds	r0, #1
 8018b68:	d0ad      	beq.n	8018ac6 <_printf_i+0x15a>
 8018b6a:	6823      	ldr	r3, [r4, #0]
 8018b6c:	079b      	lsls	r3, r3, #30
 8018b6e:	d413      	bmi.n	8018b98 <_printf_i+0x22c>
 8018b70:	68e0      	ldr	r0, [r4, #12]
 8018b72:	9b03      	ldr	r3, [sp, #12]
 8018b74:	4298      	cmp	r0, r3
 8018b76:	bfb8      	it	lt
 8018b78:	4618      	movlt	r0, r3
 8018b7a:	e7a6      	b.n	8018aca <_printf_i+0x15e>
 8018b7c:	2301      	movs	r3, #1
 8018b7e:	4632      	mov	r2, r6
 8018b80:	4649      	mov	r1, r9
 8018b82:	4640      	mov	r0, r8
 8018b84:	47d0      	blx	sl
 8018b86:	3001      	adds	r0, #1
 8018b88:	d09d      	beq.n	8018ac6 <_printf_i+0x15a>
 8018b8a:	3501      	adds	r5, #1
 8018b8c:	68e3      	ldr	r3, [r4, #12]
 8018b8e:	9903      	ldr	r1, [sp, #12]
 8018b90:	1a5b      	subs	r3, r3, r1
 8018b92:	42ab      	cmp	r3, r5
 8018b94:	dcf2      	bgt.n	8018b7c <_printf_i+0x210>
 8018b96:	e7eb      	b.n	8018b70 <_printf_i+0x204>
 8018b98:	2500      	movs	r5, #0
 8018b9a:	f104 0619 	add.w	r6, r4, #25
 8018b9e:	e7f5      	b.n	8018b8c <_printf_i+0x220>
 8018ba0:	0801b090 	.word	0x0801b090
 8018ba4:	0801b0a1 	.word	0x0801b0a1

08018ba8 <__sflush_r>:
 8018ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bb0:	0716      	lsls	r6, r2, #28
 8018bb2:	4605      	mov	r5, r0
 8018bb4:	460c      	mov	r4, r1
 8018bb6:	d454      	bmi.n	8018c62 <__sflush_r+0xba>
 8018bb8:	684b      	ldr	r3, [r1, #4]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	dc02      	bgt.n	8018bc4 <__sflush_r+0x1c>
 8018bbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	dd48      	ble.n	8018c56 <__sflush_r+0xae>
 8018bc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018bc6:	2e00      	cmp	r6, #0
 8018bc8:	d045      	beq.n	8018c56 <__sflush_r+0xae>
 8018bca:	2300      	movs	r3, #0
 8018bcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018bd0:	682f      	ldr	r7, [r5, #0]
 8018bd2:	6a21      	ldr	r1, [r4, #32]
 8018bd4:	602b      	str	r3, [r5, #0]
 8018bd6:	d030      	beq.n	8018c3a <__sflush_r+0x92>
 8018bd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018bda:	89a3      	ldrh	r3, [r4, #12]
 8018bdc:	0759      	lsls	r1, r3, #29
 8018bde:	d505      	bpl.n	8018bec <__sflush_r+0x44>
 8018be0:	6863      	ldr	r3, [r4, #4]
 8018be2:	1ad2      	subs	r2, r2, r3
 8018be4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018be6:	b10b      	cbz	r3, 8018bec <__sflush_r+0x44>
 8018be8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018bea:	1ad2      	subs	r2, r2, r3
 8018bec:	2300      	movs	r3, #0
 8018bee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018bf0:	6a21      	ldr	r1, [r4, #32]
 8018bf2:	4628      	mov	r0, r5
 8018bf4:	47b0      	blx	r6
 8018bf6:	1c43      	adds	r3, r0, #1
 8018bf8:	89a3      	ldrh	r3, [r4, #12]
 8018bfa:	d106      	bne.n	8018c0a <__sflush_r+0x62>
 8018bfc:	6829      	ldr	r1, [r5, #0]
 8018bfe:	291d      	cmp	r1, #29
 8018c00:	d82b      	bhi.n	8018c5a <__sflush_r+0xb2>
 8018c02:	4a2a      	ldr	r2, [pc, #168]	@ (8018cac <__sflush_r+0x104>)
 8018c04:	40ca      	lsrs	r2, r1
 8018c06:	07d6      	lsls	r6, r2, #31
 8018c08:	d527      	bpl.n	8018c5a <__sflush_r+0xb2>
 8018c0a:	2200      	movs	r2, #0
 8018c0c:	6062      	str	r2, [r4, #4]
 8018c0e:	04d9      	lsls	r1, r3, #19
 8018c10:	6922      	ldr	r2, [r4, #16]
 8018c12:	6022      	str	r2, [r4, #0]
 8018c14:	d504      	bpl.n	8018c20 <__sflush_r+0x78>
 8018c16:	1c42      	adds	r2, r0, #1
 8018c18:	d101      	bne.n	8018c1e <__sflush_r+0x76>
 8018c1a:	682b      	ldr	r3, [r5, #0]
 8018c1c:	b903      	cbnz	r3, 8018c20 <__sflush_r+0x78>
 8018c1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8018c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018c22:	602f      	str	r7, [r5, #0]
 8018c24:	b1b9      	cbz	r1, 8018c56 <__sflush_r+0xae>
 8018c26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018c2a:	4299      	cmp	r1, r3
 8018c2c:	d002      	beq.n	8018c34 <__sflush_r+0x8c>
 8018c2e:	4628      	mov	r0, r5
 8018c30:	f7ff fc84 	bl	801853c <_free_r>
 8018c34:	2300      	movs	r3, #0
 8018c36:	6363      	str	r3, [r4, #52]	@ 0x34
 8018c38:	e00d      	b.n	8018c56 <__sflush_r+0xae>
 8018c3a:	2301      	movs	r3, #1
 8018c3c:	4628      	mov	r0, r5
 8018c3e:	47b0      	blx	r6
 8018c40:	4602      	mov	r2, r0
 8018c42:	1c50      	adds	r0, r2, #1
 8018c44:	d1c9      	bne.n	8018bda <__sflush_r+0x32>
 8018c46:	682b      	ldr	r3, [r5, #0]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d0c6      	beq.n	8018bda <__sflush_r+0x32>
 8018c4c:	2b1d      	cmp	r3, #29
 8018c4e:	d001      	beq.n	8018c54 <__sflush_r+0xac>
 8018c50:	2b16      	cmp	r3, #22
 8018c52:	d11e      	bne.n	8018c92 <__sflush_r+0xea>
 8018c54:	602f      	str	r7, [r5, #0]
 8018c56:	2000      	movs	r0, #0
 8018c58:	e022      	b.n	8018ca0 <__sflush_r+0xf8>
 8018c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c5e:	b21b      	sxth	r3, r3
 8018c60:	e01b      	b.n	8018c9a <__sflush_r+0xf2>
 8018c62:	690f      	ldr	r7, [r1, #16]
 8018c64:	2f00      	cmp	r7, #0
 8018c66:	d0f6      	beq.n	8018c56 <__sflush_r+0xae>
 8018c68:	0793      	lsls	r3, r2, #30
 8018c6a:	680e      	ldr	r6, [r1, #0]
 8018c6c:	bf08      	it	eq
 8018c6e:	694b      	ldreq	r3, [r1, #20]
 8018c70:	600f      	str	r7, [r1, #0]
 8018c72:	bf18      	it	ne
 8018c74:	2300      	movne	r3, #0
 8018c76:	eba6 0807 	sub.w	r8, r6, r7
 8018c7a:	608b      	str	r3, [r1, #8]
 8018c7c:	f1b8 0f00 	cmp.w	r8, #0
 8018c80:	dde9      	ble.n	8018c56 <__sflush_r+0xae>
 8018c82:	6a21      	ldr	r1, [r4, #32]
 8018c84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018c86:	4643      	mov	r3, r8
 8018c88:	463a      	mov	r2, r7
 8018c8a:	4628      	mov	r0, r5
 8018c8c:	47b0      	blx	r6
 8018c8e:	2800      	cmp	r0, #0
 8018c90:	dc08      	bgt.n	8018ca4 <__sflush_r+0xfc>
 8018c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018c9a:	81a3      	strh	r3, [r4, #12]
 8018c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8018ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ca4:	4407      	add	r7, r0
 8018ca6:	eba8 0800 	sub.w	r8, r8, r0
 8018caa:	e7e7      	b.n	8018c7c <__sflush_r+0xd4>
 8018cac:	20400001 	.word	0x20400001

08018cb0 <_fflush_r>:
 8018cb0:	b538      	push	{r3, r4, r5, lr}
 8018cb2:	690b      	ldr	r3, [r1, #16]
 8018cb4:	4605      	mov	r5, r0
 8018cb6:	460c      	mov	r4, r1
 8018cb8:	b913      	cbnz	r3, 8018cc0 <_fflush_r+0x10>
 8018cba:	2500      	movs	r5, #0
 8018cbc:	4628      	mov	r0, r5
 8018cbe:	bd38      	pop	{r3, r4, r5, pc}
 8018cc0:	b118      	cbz	r0, 8018cca <_fflush_r+0x1a>
 8018cc2:	6a03      	ldr	r3, [r0, #32]
 8018cc4:	b90b      	cbnz	r3, 8018cca <_fflush_r+0x1a>
 8018cc6:	f7ff f921 	bl	8017f0c <__sinit>
 8018cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d0f3      	beq.n	8018cba <_fflush_r+0xa>
 8018cd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018cd4:	07d0      	lsls	r0, r2, #31
 8018cd6:	d404      	bmi.n	8018ce2 <_fflush_r+0x32>
 8018cd8:	0599      	lsls	r1, r3, #22
 8018cda:	d402      	bmi.n	8018ce2 <_fflush_r+0x32>
 8018cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018cde:	f7ff fbea 	bl	80184b6 <__retarget_lock_acquire_recursive>
 8018ce2:	4628      	mov	r0, r5
 8018ce4:	4621      	mov	r1, r4
 8018ce6:	f7ff ff5f 	bl	8018ba8 <__sflush_r>
 8018cea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018cec:	07da      	lsls	r2, r3, #31
 8018cee:	4605      	mov	r5, r0
 8018cf0:	d4e4      	bmi.n	8018cbc <_fflush_r+0xc>
 8018cf2:	89a3      	ldrh	r3, [r4, #12]
 8018cf4:	059b      	lsls	r3, r3, #22
 8018cf6:	d4e1      	bmi.n	8018cbc <_fflush_r+0xc>
 8018cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018cfa:	f7ff fbdd 	bl	80184b8 <__retarget_lock_release_recursive>
 8018cfe:	e7dd      	b.n	8018cbc <_fflush_r+0xc>

08018d00 <fiprintf>:
 8018d00:	b40e      	push	{r1, r2, r3}
 8018d02:	b503      	push	{r0, r1, lr}
 8018d04:	4601      	mov	r1, r0
 8018d06:	ab03      	add	r3, sp, #12
 8018d08:	4805      	ldr	r0, [pc, #20]	@ (8018d20 <fiprintf+0x20>)
 8018d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d0e:	6800      	ldr	r0, [r0, #0]
 8018d10:	9301      	str	r3, [sp, #4]
 8018d12:	f000 f8bb 	bl	8018e8c <_vfiprintf_r>
 8018d16:	b002      	add	sp, #8
 8018d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d1c:	b003      	add	sp, #12
 8018d1e:	4770      	bx	lr
 8018d20:	200022b0 	.word	0x200022b0

08018d24 <__swhatbuf_r>:
 8018d24:	b570      	push	{r4, r5, r6, lr}
 8018d26:	460c      	mov	r4, r1
 8018d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d2c:	2900      	cmp	r1, #0
 8018d2e:	b096      	sub	sp, #88	@ 0x58
 8018d30:	4615      	mov	r5, r2
 8018d32:	461e      	mov	r6, r3
 8018d34:	da0d      	bge.n	8018d52 <__swhatbuf_r+0x2e>
 8018d36:	89a3      	ldrh	r3, [r4, #12]
 8018d38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018d3c:	f04f 0100 	mov.w	r1, #0
 8018d40:	bf14      	ite	ne
 8018d42:	2340      	movne	r3, #64	@ 0x40
 8018d44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018d48:	2000      	movs	r0, #0
 8018d4a:	6031      	str	r1, [r6, #0]
 8018d4c:	602b      	str	r3, [r5, #0]
 8018d4e:	b016      	add	sp, #88	@ 0x58
 8018d50:	bd70      	pop	{r4, r5, r6, pc}
 8018d52:	466a      	mov	r2, sp
 8018d54:	f000 f848 	bl	8018de8 <_fstat_r>
 8018d58:	2800      	cmp	r0, #0
 8018d5a:	dbec      	blt.n	8018d36 <__swhatbuf_r+0x12>
 8018d5c:	9901      	ldr	r1, [sp, #4]
 8018d5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018d62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018d66:	4259      	negs	r1, r3
 8018d68:	4159      	adcs	r1, r3
 8018d6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018d6e:	e7eb      	b.n	8018d48 <__swhatbuf_r+0x24>

08018d70 <__smakebuf_r>:
 8018d70:	898b      	ldrh	r3, [r1, #12]
 8018d72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d74:	079d      	lsls	r5, r3, #30
 8018d76:	4606      	mov	r6, r0
 8018d78:	460c      	mov	r4, r1
 8018d7a:	d507      	bpl.n	8018d8c <__smakebuf_r+0x1c>
 8018d7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018d80:	6023      	str	r3, [r4, #0]
 8018d82:	6123      	str	r3, [r4, #16]
 8018d84:	2301      	movs	r3, #1
 8018d86:	6163      	str	r3, [r4, #20]
 8018d88:	b003      	add	sp, #12
 8018d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d8c:	ab01      	add	r3, sp, #4
 8018d8e:	466a      	mov	r2, sp
 8018d90:	f7ff ffc8 	bl	8018d24 <__swhatbuf_r>
 8018d94:	9f00      	ldr	r7, [sp, #0]
 8018d96:	4605      	mov	r5, r0
 8018d98:	4639      	mov	r1, r7
 8018d9a:	4630      	mov	r0, r6
 8018d9c:	f7fe fe84 	bl	8017aa8 <_malloc_r>
 8018da0:	b948      	cbnz	r0, 8018db6 <__smakebuf_r+0x46>
 8018da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018da6:	059a      	lsls	r2, r3, #22
 8018da8:	d4ee      	bmi.n	8018d88 <__smakebuf_r+0x18>
 8018daa:	f023 0303 	bic.w	r3, r3, #3
 8018dae:	f043 0302 	orr.w	r3, r3, #2
 8018db2:	81a3      	strh	r3, [r4, #12]
 8018db4:	e7e2      	b.n	8018d7c <__smakebuf_r+0xc>
 8018db6:	89a3      	ldrh	r3, [r4, #12]
 8018db8:	6020      	str	r0, [r4, #0]
 8018dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018dbe:	81a3      	strh	r3, [r4, #12]
 8018dc0:	9b01      	ldr	r3, [sp, #4]
 8018dc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018dc6:	b15b      	cbz	r3, 8018de0 <__smakebuf_r+0x70>
 8018dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018dcc:	4630      	mov	r0, r6
 8018dce:	f000 f81d 	bl	8018e0c <_isatty_r>
 8018dd2:	b128      	cbz	r0, 8018de0 <__smakebuf_r+0x70>
 8018dd4:	89a3      	ldrh	r3, [r4, #12]
 8018dd6:	f023 0303 	bic.w	r3, r3, #3
 8018dda:	f043 0301 	orr.w	r3, r3, #1
 8018dde:	81a3      	strh	r3, [r4, #12]
 8018de0:	89a3      	ldrh	r3, [r4, #12]
 8018de2:	431d      	orrs	r5, r3
 8018de4:	81a5      	strh	r5, [r4, #12]
 8018de6:	e7cf      	b.n	8018d88 <__smakebuf_r+0x18>

08018de8 <_fstat_r>:
 8018de8:	b538      	push	{r3, r4, r5, lr}
 8018dea:	4d07      	ldr	r5, [pc, #28]	@ (8018e08 <_fstat_r+0x20>)
 8018dec:	2300      	movs	r3, #0
 8018dee:	4604      	mov	r4, r0
 8018df0:	4608      	mov	r0, r1
 8018df2:	4611      	mov	r1, r2
 8018df4:	602b      	str	r3, [r5, #0]
 8018df6:	f7e9 fe8e 	bl	8002b16 <_fstat>
 8018dfa:	1c43      	adds	r3, r0, #1
 8018dfc:	d102      	bne.n	8018e04 <_fstat_r+0x1c>
 8018dfe:	682b      	ldr	r3, [r5, #0]
 8018e00:	b103      	cbz	r3, 8018e04 <_fstat_r+0x1c>
 8018e02:	6023      	str	r3, [r4, #0]
 8018e04:	bd38      	pop	{r3, r4, r5, pc}
 8018e06:	bf00      	nop
 8018e08:	200106d8 	.word	0x200106d8

08018e0c <_isatty_r>:
 8018e0c:	b538      	push	{r3, r4, r5, lr}
 8018e0e:	4d06      	ldr	r5, [pc, #24]	@ (8018e28 <_isatty_r+0x1c>)
 8018e10:	2300      	movs	r3, #0
 8018e12:	4604      	mov	r4, r0
 8018e14:	4608      	mov	r0, r1
 8018e16:	602b      	str	r3, [r5, #0]
 8018e18:	f7e9 fe8d 	bl	8002b36 <_isatty>
 8018e1c:	1c43      	adds	r3, r0, #1
 8018e1e:	d102      	bne.n	8018e26 <_isatty_r+0x1a>
 8018e20:	682b      	ldr	r3, [r5, #0]
 8018e22:	b103      	cbz	r3, 8018e26 <_isatty_r+0x1a>
 8018e24:	6023      	str	r3, [r4, #0]
 8018e26:	bd38      	pop	{r3, r4, r5, pc}
 8018e28:	200106d8 	.word	0x200106d8

08018e2c <abort>:
 8018e2c:	b508      	push	{r3, lr}
 8018e2e:	2006      	movs	r0, #6
 8018e30:	f000 f96c 	bl	801910c <raise>
 8018e34:	2001      	movs	r0, #1
 8018e36:	f7e9 fe1e 	bl	8002a76 <_exit>

08018e3a <__sfputc_r>:
 8018e3a:	6893      	ldr	r3, [r2, #8]
 8018e3c:	3b01      	subs	r3, #1
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	b410      	push	{r4}
 8018e42:	6093      	str	r3, [r2, #8]
 8018e44:	da08      	bge.n	8018e58 <__sfputc_r+0x1e>
 8018e46:	6994      	ldr	r4, [r2, #24]
 8018e48:	42a3      	cmp	r3, r4
 8018e4a:	db01      	blt.n	8018e50 <__sfputc_r+0x16>
 8018e4c:	290a      	cmp	r1, #10
 8018e4e:	d103      	bne.n	8018e58 <__sfputc_r+0x1e>
 8018e50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e54:	f7ff b9a0 	b.w	8018198 <__swbuf_r>
 8018e58:	6813      	ldr	r3, [r2, #0]
 8018e5a:	1c58      	adds	r0, r3, #1
 8018e5c:	6010      	str	r0, [r2, #0]
 8018e5e:	7019      	strb	r1, [r3, #0]
 8018e60:	4608      	mov	r0, r1
 8018e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e66:	4770      	bx	lr

08018e68 <__sfputs_r>:
 8018e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e6a:	4606      	mov	r6, r0
 8018e6c:	460f      	mov	r7, r1
 8018e6e:	4614      	mov	r4, r2
 8018e70:	18d5      	adds	r5, r2, r3
 8018e72:	42ac      	cmp	r4, r5
 8018e74:	d101      	bne.n	8018e7a <__sfputs_r+0x12>
 8018e76:	2000      	movs	r0, #0
 8018e78:	e007      	b.n	8018e8a <__sfputs_r+0x22>
 8018e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e7e:	463a      	mov	r2, r7
 8018e80:	4630      	mov	r0, r6
 8018e82:	f7ff ffda 	bl	8018e3a <__sfputc_r>
 8018e86:	1c43      	adds	r3, r0, #1
 8018e88:	d1f3      	bne.n	8018e72 <__sfputs_r+0xa>
 8018e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018e8c <_vfiprintf_r>:
 8018e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e90:	460d      	mov	r5, r1
 8018e92:	b09d      	sub	sp, #116	@ 0x74
 8018e94:	4614      	mov	r4, r2
 8018e96:	4698      	mov	r8, r3
 8018e98:	4606      	mov	r6, r0
 8018e9a:	b118      	cbz	r0, 8018ea4 <_vfiprintf_r+0x18>
 8018e9c:	6a03      	ldr	r3, [r0, #32]
 8018e9e:	b90b      	cbnz	r3, 8018ea4 <_vfiprintf_r+0x18>
 8018ea0:	f7ff f834 	bl	8017f0c <__sinit>
 8018ea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018ea6:	07d9      	lsls	r1, r3, #31
 8018ea8:	d405      	bmi.n	8018eb6 <_vfiprintf_r+0x2a>
 8018eaa:	89ab      	ldrh	r3, [r5, #12]
 8018eac:	059a      	lsls	r2, r3, #22
 8018eae:	d402      	bmi.n	8018eb6 <_vfiprintf_r+0x2a>
 8018eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018eb2:	f7ff fb00 	bl	80184b6 <__retarget_lock_acquire_recursive>
 8018eb6:	89ab      	ldrh	r3, [r5, #12]
 8018eb8:	071b      	lsls	r3, r3, #28
 8018eba:	d501      	bpl.n	8018ec0 <_vfiprintf_r+0x34>
 8018ebc:	692b      	ldr	r3, [r5, #16]
 8018ebe:	b99b      	cbnz	r3, 8018ee8 <_vfiprintf_r+0x5c>
 8018ec0:	4629      	mov	r1, r5
 8018ec2:	4630      	mov	r0, r6
 8018ec4:	f7ff f9a6 	bl	8018214 <__swsetup_r>
 8018ec8:	b170      	cbz	r0, 8018ee8 <_vfiprintf_r+0x5c>
 8018eca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018ecc:	07dc      	lsls	r4, r3, #31
 8018ece:	d504      	bpl.n	8018eda <_vfiprintf_r+0x4e>
 8018ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ed4:	b01d      	add	sp, #116	@ 0x74
 8018ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eda:	89ab      	ldrh	r3, [r5, #12]
 8018edc:	0598      	lsls	r0, r3, #22
 8018ede:	d4f7      	bmi.n	8018ed0 <_vfiprintf_r+0x44>
 8018ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ee2:	f7ff fae9 	bl	80184b8 <__retarget_lock_release_recursive>
 8018ee6:	e7f3      	b.n	8018ed0 <_vfiprintf_r+0x44>
 8018ee8:	2300      	movs	r3, #0
 8018eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8018eec:	2320      	movs	r3, #32
 8018eee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ef6:	2330      	movs	r3, #48	@ 0x30
 8018ef8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80190a8 <_vfiprintf_r+0x21c>
 8018efc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018f00:	f04f 0901 	mov.w	r9, #1
 8018f04:	4623      	mov	r3, r4
 8018f06:	469a      	mov	sl, r3
 8018f08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f0c:	b10a      	cbz	r2, 8018f12 <_vfiprintf_r+0x86>
 8018f0e:	2a25      	cmp	r2, #37	@ 0x25
 8018f10:	d1f9      	bne.n	8018f06 <_vfiprintf_r+0x7a>
 8018f12:	ebba 0b04 	subs.w	fp, sl, r4
 8018f16:	d00b      	beq.n	8018f30 <_vfiprintf_r+0xa4>
 8018f18:	465b      	mov	r3, fp
 8018f1a:	4622      	mov	r2, r4
 8018f1c:	4629      	mov	r1, r5
 8018f1e:	4630      	mov	r0, r6
 8018f20:	f7ff ffa2 	bl	8018e68 <__sfputs_r>
 8018f24:	3001      	adds	r0, #1
 8018f26:	f000 80a7 	beq.w	8019078 <_vfiprintf_r+0x1ec>
 8018f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018f2c:	445a      	add	r2, fp
 8018f2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018f30:	f89a 3000 	ldrb.w	r3, [sl]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	f000 809f 	beq.w	8019078 <_vfiprintf_r+0x1ec>
 8018f3a:	2300      	movs	r3, #0
 8018f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8018f40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f44:	f10a 0a01 	add.w	sl, sl, #1
 8018f48:	9304      	str	r3, [sp, #16]
 8018f4a:	9307      	str	r3, [sp, #28]
 8018f4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018f50:	931a      	str	r3, [sp, #104]	@ 0x68
 8018f52:	4654      	mov	r4, sl
 8018f54:	2205      	movs	r2, #5
 8018f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f5a:	4853      	ldr	r0, [pc, #332]	@ (80190a8 <_vfiprintf_r+0x21c>)
 8018f5c:	f7e7 f968 	bl	8000230 <memchr>
 8018f60:	9a04      	ldr	r2, [sp, #16]
 8018f62:	b9d8      	cbnz	r0, 8018f9c <_vfiprintf_r+0x110>
 8018f64:	06d1      	lsls	r1, r2, #27
 8018f66:	bf44      	itt	mi
 8018f68:	2320      	movmi	r3, #32
 8018f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018f6e:	0713      	lsls	r3, r2, #28
 8018f70:	bf44      	itt	mi
 8018f72:	232b      	movmi	r3, #43	@ 0x2b
 8018f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018f78:	f89a 3000 	ldrb.w	r3, [sl]
 8018f7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f7e:	d015      	beq.n	8018fac <_vfiprintf_r+0x120>
 8018f80:	9a07      	ldr	r2, [sp, #28]
 8018f82:	4654      	mov	r4, sl
 8018f84:	2000      	movs	r0, #0
 8018f86:	f04f 0c0a 	mov.w	ip, #10
 8018f8a:	4621      	mov	r1, r4
 8018f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f90:	3b30      	subs	r3, #48	@ 0x30
 8018f92:	2b09      	cmp	r3, #9
 8018f94:	d94b      	bls.n	801902e <_vfiprintf_r+0x1a2>
 8018f96:	b1b0      	cbz	r0, 8018fc6 <_vfiprintf_r+0x13a>
 8018f98:	9207      	str	r2, [sp, #28]
 8018f9a:	e014      	b.n	8018fc6 <_vfiprintf_r+0x13a>
 8018f9c:	eba0 0308 	sub.w	r3, r0, r8
 8018fa0:	fa09 f303 	lsl.w	r3, r9, r3
 8018fa4:	4313      	orrs	r3, r2
 8018fa6:	9304      	str	r3, [sp, #16]
 8018fa8:	46a2      	mov	sl, r4
 8018faa:	e7d2      	b.n	8018f52 <_vfiprintf_r+0xc6>
 8018fac:	9b03      	ldr	r3, [sp, #12]
 8018fae:	1d19      	adds	r1, r3, #4
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	9103      	str	r1, [sp, #12]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	bfbb      	ittet	lt
 8018fb8:	425b      	neglt	r3, r3
 8018fba:	f042 0202 	orrlt.w	r2, r2, #2
 8018fbe:	9307      	strge	r3, [sp, #28]
 8018fc0:	9307      	strlt	r3, [sp, #28]
 8018fc2:	bfb8      	it	lt
 8018fc4:	9204      	strlt	r2, [sp, #16]
 8018fc6:	7823      	ldrb	r3, [r4, #0]
 8018fc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8018fca:	d10a      	bne.n	8018fe2 <_vfiprintf_r+0x156>
 8018fcc:	7863      	ldrb	r3, [r4, #1]
 8018fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8018fd0:	d132      	bne.n	8019038 <_vfiprintf_r+0x1ac>
 8018fd2:	9b03      	ldr	r3, [sp, #12]
 8018fd4:	1d1a      	adds	r2, r3, #4
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	9203      	str	r2, [sp, #12]
 8018fda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018fde:	3402      	adds	r4, #2
 8018fe0:	9305      	str	r3, [sp, #20]
 8018fe2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80190b8 <_vfiprintf_r+0x22c>
 8018fe6:	7821      	ldrb	r1, [r4, #0]
 8018fe8:	2203      	movs	r2, #3
 8018fea:	4650      	mov	r0, sl
 8018fec:	f7e7 f920 	bl	8000230 <memchr>
 8018ff0:	b138      	cbz	r0, 8019002 <_vfiprintf_r+0x176>
 8018ff2:	9b04      	ldr	r3, [sp, #16]
 8018ff4:	eba0 000a 	sub.w	r0, r0, sl
 8018ff8:	2240      	movs	r2, #64	@ 0x40
 8018ffa:	4082      	lsls	r2, r0
 8018ffc:	4313      	orrs	r3, r2
 8018ffe:	3401      	adds	r4, #1
 8019000:	9304      	str	r3, [sp, #16]
 8019002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019006:	4829      	ldr	r0, [pc, #164]	@ (80190ac <_vfiprintf_r+0x220>)
 8019008:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801900c:	2206      	movs	r2, #6
 801900e:	f7e7 f90f 	bl	8000230 <memchr>
 8019012:	2800      	cmp	r0, #0
 8019014:	d03f      	beq.n	8019096 <_vfiprintf_r+0x20a>
 8019016:	4b26      	ldr	r3, [pc, #152]	@ (80190b0 <_vfiprintf_r+0x224>)
 8019018:	bb1b      	cbnz	r3, 8019062 <_vfiprintf_r+0x1d6>
 801901a:	9b03      	ldr	r3, [sp, #12]
 801901c:	3307      	adds	r3, #7
 801901e:	f023 0307 	bic.w	r3, r3, #7
 8019022:	3308      	adds	r3, #8
 8019024:	9303      	str	r3, [sp, #12]
 8019026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019028:	443b      	add	r3, r7
 801902a:	9309      	str	r3, [sp, #36]	@ 0x24
 801902c:	e76a      	b.n	8018f04 <_vfiprintf_r+0x78>
 801902e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019032:	460c      	mov	r4, r1
 8019034:	2001      	movs	r0, #1
 8019036:	e7a8      	b.n	8018f8a <_vfiprintf_r+0xfe>
 8019038:	2300      	movs	r3, #0
 801903a:	3401      	adds	r4, #1
 801903c:	9305      	str	r3, [sp, #20]
 801903e:	4619      	mov	r1, r3
 8019040:	f04f 0c0a 	mov.w	ip, #10
 8019044:	4620      	mov	r0, r4
 8019046:	f810 2b01 	ldrb.w	r2, [r0], #1
 801904a:	3a30      	subs	r2, #48	@ 0x30
 801904c:	2a09      	cmp	r2, #9
 801904e:	d903      	bls.n	8019058 <_vfiprintf_r+0x1cc>
 8019050:	2b00      	cmp	r3, #0
 8019052:	d0c6      	beq.n	8018fe2 <_vfiprintf_r+0x156>
 8019054:	9105      	str	r1, [sp, #20]
 8019056:	e7c4      	b.n	8018fe2 <_vfiprintf_r+0x156>
 8019058:	fb0c 2101 	mla	r1, ip, r1, r2
 801905c:	4604      	mov	r4, r0
 801905e:	2301      	movs	r3, #1
 8019060:	e7f0      	b.n	8019044 <_vfiprintf_r+0x1b8>
 8019062:	ab03      	add	r3, sp, #12
 8019064:	9300      	str	r3, [sp, #0]
 8019066:	462a      	mov	r2, r5
 8019068:	4b12      	ldr	r3, [pc, #72]	@ (80190b4 <_vfiprintf_r+0x228>)
 801906a:	a904      	add	r1, sp, #16
 801906c:	4630      	mov	r0, r6
 801906e:	f3af 8000 	nop.w
 8019072:	4607      	mov	r7, r0
 8019074:	1c78      	adds	r0, r7, #1
 8019076:	d1d6      	bne.n	8019026 <_vfiprintf_r+0x19a>
 8019078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801907a:	07d9      	lsls	r1, r3, #31
 801907c:	d405      	bmi.n	801908a <_vfiprintf_r+0x1fe>
 801907e:	89ab      	ldrh	r3, [r5, #12]
 8019080:	059a      	lsls	r2, r3, #22
 8019082:	d402      	bmi.n	801908a <_vfiprintf_r+0x1fe>
 8019084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019086:	f7ff fa17 	bl	80184b8 <__retarget_lock_release_recursive>
 801908a:	89ab      	ldrh	r3, [r5, #12]
 801908c:	065b      	lsls	r3, r3, #25
 801908e:	f53f af1f 	bmi.w	8018ed0 <_vfiprintf_r+0x44>
 8019092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019094:	e71e      	b.n	8018ed4 <_vfiprintf_r+0x48>
 8019096:	ab03      	add	r3, sp, #12
 8019098:	9300      	str	r3, [sp, #0]
 801909a:	462a      	mov	r2, r5
 801909c:	4b05      	ldr	r3, [pc, #20]	@ (80190b4 <_vfiprintf_r+0x228>)
 801909e:	a904      	add	r1, sp, #16
 80190a0:	4630      	mov	r0, r6
 80190a2:	f7ff fc63 	bl	801896c <_printf_i>
 80190a6:	e7e4      	b.n	8019072 <_vfiprintf_r+0x1e6>
 80190a8:	0801b07f 	.word	0x0801b07f
 80190ac:	0801b089 	.word	0x0801b089
 80190b0:	00000000 	.word	0x00000000
 80190b4:	08018e69 	.word	0x08018e69
 80190b8:	0801b085 	.word	0x0801b085

080190bc <_raise_r>:
 80190bc:	291f      	cmp	r1, #31
 80190be:	b538      	push	{r3, r4, r5, lr}
 80190c0:	4605      	mov	r5, r0
 80190c2:	460c      	mov	r4, r1
 80190c4:	d904      	bls.n	80190d0 <_raise_r+0x14>
 80190c6:	2316      	movs	r3, #22
 80190c8:	6003      	str	r3, [r0, #0]
 80190ca:	f04f 30ff 	mov.w	r0, #4294967295
 80190ce:	bd38      	pop	{r3, r4, r5, pc}
 80190d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80190d2:	b112      	cbz	r2, 80190da <_raise_r+0x1e>
 80190d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80190d8:	b94b      	cbnz	r3, 80190ee <_raise_r+0x32>
 80190da:	4628      	mov	r0, r5
 80190dc:	f000 f830 	bl	8019140 <_getpid_r>
 80190e0:	4622      	mov	r2, r4
 80190e2:	4601      	mov	r1, r0
 80190e4:	4628      	mov	r0, r5
 80190e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80190ea:	f000 b817 	b.w	801911c <_kill_r>
 80190ee:	2b01      	cmp	r3, #1
 80190f0:	d00a      	beq.n	8019108 <_raise_r+0x4c>
 80190f2:	1c59      	adds	r1, r3, #1
 80190f4:	d103      	bne.n	80190fe <_raise_r+0x42>
 80190f6:	2316      	movs	r3, #22
 80190f8:	6003      	str	r3, [r0, #0]
 80190fa:	2001      	movs	r0, #1
 80190fc:	e7e7      	b.n	80190ce <_raise_r+0x12>
 80190fe:	2100      	movs	r1, #0
 8019100:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019104:	4620      	mov	r0, r4
 8019106:	4798      	blx	r3
 8019108:	2000      	movs	r0, #0
 801910a:	e7e0      	b.n	80190ce <_raise_r+0x12>

0801910c <raise>:
 801910c:	4b02      	ldr	r3, [pc, #8]	@ (8019118 <raise+0xc>)
 801910e:	4601      	mov	r1, r0
 8019110:	6818      	ldr	r0, [r3, #0]
 8019112:	f7ff bfd3 	b.w	80190bc <_raise_r>
 8019116:	bf00      	nop
 8019118:	200022b0 	.word	0x200022b0

0801911c <_kill_r>:
 801911c:	b538      	push	{r3, r4, r5, lr}
 801911e:	4d07      	ldr	r5, [pc, #28]	@ (801913c <_kill_r+0x20>)
 8019120:	2300      	movs	r3, #0
 8019122:	4604      	mov	r4, r0
 8019124:	4608      	mov	r0, r1
 8019126:	4611      	mov	r1, r2
 8019128:	602b      	str	r3, [r5, #0]
 801912a:	f7e9 fc94 	bl	8002a56 <_kill>
 801912e:	1c43      	adds	r3, r0, #1
 8019130:	d102      	bne.n	8019138 <_kill_r+0x1c>
 8019132:	682b      	ldr	r3, [r5, #0]
 8019134:	b103      	cbz	r3, 8019138 <_kill_r+0x1c>
 8019136:	6023      	str	r3, [r4, #0]
 8019138:	bd38      	pop	{r3, r4, r5, pc}
 801913a:	bf00      	nop
 801913c:	200106d8 	.word	0x200106d8

08019140 <_getpid_r>:
 8019140:	f7e9 bc81 	b.w	8002a46 <_getpid>

08019144 <cosf>:
 8019144:	ee10 3a10 	vmov	r3, s0
 8019148:	b507      	push	{r0, r1, r2, lr}
 801914a:	4a1e      	ldr	r2, [pc, #120]	@ (80191c4 <cosf+0x80>)
 801914c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019150:	4293      	cmp	r3, r2
 8019152:	d806      	bhi.n	8019162 <cosf+0x1e>
 8019154:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80191c8 <cosf+0x84>
 8019158:	b003      	add	sp, #12
 801915a:	f85d eb04 	ldr.w	lr, [sp], #4
 801915e:	f000 b87b 	b.w	8019258 <__kernel_cosf>
 8019162:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019166:	d304      	bcc.n	8019172 <cosf+0x2e>
 8019168:	ee30 0a40 	vsub.f32	s0, s0, s0
 801916c:	b003      	add	sp, #12
 801916e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019172:	4668      	mov	r0, sp
 8019174:	f000 f910 	bl	8019398 <__ieee754_rem_pio2f>
 8019178:	f000 0003 	and.w	r0, r0, #3
 801917c:	2801      	cmp	r0, #1
 801917e:	d009      	beq.n	8019194 <cosf+0x50>
 8019180:	2802      	cmp	r0, #2
 8019182:	d010      	beq.n	80191a6 <cosf+0x62>
 8019184:	b9b0      	cbnz	r0, 80191b4 <cosf+0x70>
 8019186:	eddd 0a01 	vldr	s1, [sp, #4]
 801918a:	ed9d 0a00 	vldr	s0, [sp]
 801918e:	f000 f863 	bl	8019258 <__kernel_cosf>
 8019192:	e7eb      	b.n	801916c <cosf+0x28>
 8019194:	eddd 0a01 	vldr	s1, [sp, #4]
 8019198:	ed9d 0a00 	vldr	s0, [sp]
 801919c:	f000 f8b4 	bl	8019308 <__kernel_sinf>
 80191a0:	eeb1 0a40 	vneg.f32	s0, s0
 80191a4:	e7e2      	b.n	801916c <cosf+0x28>
 80191a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80191aa:	ed9d 0a00 	vldr	s0, [sp]
 80191ae:	f000 f853 	bl	8019258 <__kernel_cosf>
 80191b2:	e7f5      	b.n	80191a0 <cosf+0x5c>
 80191b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80191b8:	ed9d 0a00 	vldr	s0, [sp]
 80191bc:	2001      	movs	r0, #1
 80191be:	f000 f8a3 	bl	8019308 <__kernel_sinf>
 80191c2:	e7d3      	b.n	801916c <cosf+0x28>
 80191c4:	3f490fd8 	.word	0x3f490fd8
 80191c8:	00000000 	.word	0x00000000

080191cc <sinf>:
 80191cc:	ee10 3a10 	vmov	r3, s0
 80191d0:	b507      	push	{r0, r1, r2, lr}
 80191d2:	4a1f      	ldr	r2, [pc, #124]	@ (8019250 <sinf+0x84>)
 80191d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80191d8:	4293      	cmp	r3, r2
 80191da:	d807      	bhi.n	80191ec <sinf+0x20>
 80191dc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8019254 <sinf+0x88>
 80191e0:	2000      	movs	r0, #0
 80191e2:	b003      	add	sp, #12
 80191e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80191e8:	f000 b88e 	b.w	8019308 <__kernel_sinf>
 80191ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80191f0:	d304      	bcc.n	80191fc <sinf+0x30>
 80191f2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80191f6:	b003      	add	sp, #12
 80191f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80191fc:	4668      	mov	r0, sp
 80191fe:	f000 f8cb 	bl	8019398 <__ieee754_rem_pio2f>
 8019202:	f000 0003 	and.w	r0, r0, #3
 8019206:	2801      	cmp	r0, #1
 8019208:	d00a      	beq.n	8019220 <sinf+0x54>
 801920a:	2802      	cmp	r0, #2
 801920c:	d00f      	beq.n	801922e <sinf+0x62>
 801920e:	b9c0      	cbnz	r0, 8019242 <sinf+0x76>
 8019210:	eddd 0a01 	vldr	s1, [sp, #4]
 8019214:	ed9d 0a00 	vldr	s0, [sp]
 8019218:	2001      	movs	r0, #1
 801921a:	f000 f875 	bl	8019308 <__kernel_sinf>
 801921e:	e7ea      	b.n	80191f6 <sinf+0x2a>
 8019220:	eddd 0a01 	vldr	s1, [sp, #4]
 8019224:	ed9d 0a00 	vldr	s0, [sp]
 8019228:	f000 f816 	bl	8019258 <__kernel_cosf>
 801922c:	e7e3      	b.n	80191f6 <sinf+0x2a>
 801922e:	eddd 0a01 	vldr	s1, [sp, #4]
 8019232:	ed9d 0a00 	vldr	s0, [sp]
 8019236:	2001      	movs	r0, #1
 8019238:	f000 f866 	bl	8019308 <__kernel_sinf>
 801923c:	eeb1 0a40 	vneg.f32	s0, s0
 8019240:	e7d9      	b.n	80191f6 <sinf+0x2a>
 8019242:	eddd 0a01 	vldr	s1, [sp, #4]
 8019246:	ed9d 0a00 	vldr	s0, [sp]
 801924a:	f000 f805 	bl	8019258 <__kernel_cosf>
 801924e:	e7f5      	b.n	801923c <sinf+0x70>
 8019250:	3f490fd8 	.word	0x3f490fd8
 8019254:	00000000 	.word	0x00000000

08019258 <__kernel_cosf>:
 8019258:	ee10 3a10 	vmov	r3, s0
 801925c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019260:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019264:	eef0 6a40 	vmov.f32	s13, s0
 8019268:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801926c:	d204      	bcs.n	8019278 <__kernel_cosf+0x20>
 801926e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8019272:	ee17 2a90 	vmov	r2, s15
 8019276:	b342      	cbz	r2, 80192ca <__kernel_cosf+0x72>
 8019278:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801927c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80192e8 <__kernel_cosf+0x90>
 8019280:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80192ec <__kernel_cosf+0x94>
 8019284:	4a1a      	ldr	r2, [pc, #104]	@ (80192f0 <__kernel_cosf+0x98>)
 8019286:	eea7 6a27 	vfma.f32	s12, s14, s15
 801928a:	4293      	cmp	r3, r2
 801928c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80192f4 <__kernel_cosf+0x9c>
 8019290:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019294:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80192f8 <__kernel_cosf+0xa0>
 8019298:	eea7 6a87 	vfma.f32	s12, s15, s14
 801929c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80192fc <__kernel_cosf+0xa4>
 80192a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80192a4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8019300 <__kernel_cosf+0xa8>
 80192a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80192ac:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80192b0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80192b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80192b8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80192bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80192c0:	d804      	bhi.n	80192cc <__kernel_cosf+0x74>
 80192c2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80192c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80192ca:	4770      	bx	lr
 80192cc:	4a0d      	ldr	r2, [pc, #52]	@ (8019304 <__kernel_cosf+0xac>)
 80192ce:	4293      	cmp	r3, r2
 80192d0:	bf9a      	itte	ls
 80192d2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80192d6:	ee07 3a10 	vmovls	s14, r3
 80192da:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80192de:	ee30 0a47 	vsub.f32	s0, s0, s14
 80192e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80192e6:	e7ec      	b.n	80192c2 <__kernel_cosf+0x6a>
 80192e8:	ad47d74e 	.word	0xad47d74e
 80192ec:	310f74f6 	.word	0x310f74f6
 80192f0:	3e999999 	.word	0x3e999999
 80192f4:	b493f27c 	.word	0xb493f27c
 80192f8:	37d00d01 	.word	0x37d00d01
 80192fc:	bab60b61 	.word	0xbab60b61
 8019300:	3d2aaaab 	.word	0x3d2aaaab
 8019304:	3f480000 	.word	0x3f480000

08019308 <__kernel_sinf>:
 8019308:	ee10 3a10 	vmov	r3, s0
 801930c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019310:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019314:	d204      	bcs.n	8019320 <__kernel_sinf+0x18>
 8019316:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801931a:	ee17 3a90 	vmov	r3, s15
 801931e:	b35b      	cbz	r3, 8019378 <__kernel_sinf+0x70>
 8019320:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019324:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801937c <__kernel_sinf+0x74>
 8019328:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8019380 <__kernel_sinf+0x78>
 801932c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019330:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8019384 <__kernel_sinf+0x7c>
 8019334:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019338:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8019388 <__kernel_sinf+0x80>
 801933c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019340:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801938c <__kernel_sinf+0x84>
 8019344:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019348:	eee6 7a07 	vfma.f32	s15, s12, s14
 801934c:	b930      	cbnz	r0, 801935c <__kernel_sinf+0x54>
 801934e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8019390 <__kernel_sinf+0x88>
 8019352:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019356:	eea6 0a26 	vfma.f32	s0, s12, s13
 801935a:	4770      	bx	lr
 801935c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019360:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019364:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019368:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801936c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8019394 <__kernel_sinf+0x8c>
 8019370:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019374:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019378:	4770      	bx	lr
 801937a:	bf00      	nop
 801937c:	2f2ec9d3 	.word	0x2f2ec9d3
 8019380:	b2d72f34 	.word	0xb2d72f34
 8019384:	3638ef1b 	.word	0x3638ef1b
 8019388:	b9500d01 	.word	0xb9500d01
 801938c:	3c088889 	.word	0x3c088889
 8019390:	be2aaaab 	.word	0xbe2aaaab
 8019394:	3e2aaaab 	.word	0x3e2aaaab

08019398 <__ieee754_rem_pio2f>:
 8019398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801939a:	ee10 6a10 	vmov	r6, s0
 801939e:	4b88      	ldr	r3, [pc, #544]	@ (80195c0 <__ieee754_rem_pio2f+0x228>)
 80193a0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80193a4:	429d      	cmp	r5, r3
 80193a6:	b087      	sub	sp, #28
 80193a8:	4604      	mov	r4, r0
 80193aa:	d805      	bhi.n	80193b8 <__ieee754_rem_pio2f+0x20>
 80193ac:	2300      	movs	r3, #0
 80193ae:	ed80 0a00 	vstr	s0, [r0]
 80193b2:	6043      	str	r3, [r0, #4]
 80193b4:	2000      	movs	r0, #0
 80193b6:	e022      	b.n	80193fe <__ieee754_rem_pio2f+0x66>
 80193b8:	4b82      	ldr	r3, [pc, #520]	@ (80195c4 <__ieee754_rem_pio2f+0x22c>)
 80193ba:	429d      	cmp	r5, r3
 80193bc:	d83a      	bhi.n	8019434 <__ieee754_rem_pio2f+0x9c>
 80193be:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80193c2:	2e00      	cmp	r6, #0
 80193c4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80195c8 <__ieee754_rem_pio2f+0x230>
 80193c8:	4a80      	ldr	r2, [pc, #512]	@ (80195cc <__ieee754_rem_pio2f+0x234>)
 80193ca:	f023 030f 	bic.w	r3, r3, #15
 80193ce:	dd18      	ble.n	8019402 <__ieee754_rem_pio2f+0x6a>
 80193d0:	4293      	cmp	r3, r2
 80193d2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80193d6:	bf09      	itett	eq
 80193d8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80195d0 <__ieee754_rem_pio2f+0x238>
 80193dc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80195d4 <__ieee754_rem_pio2f+0x23c>
 80193e0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80195d8 <__ieee754_rem_pio2f+0x240>
 80193e4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80193e8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80193ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80193f0:	ed80 7a00 	vstr	s14, [r0]
 80193f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80193f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80193fc:	2001      	movs	r0, #1
 80193fe:	b007      	add	sp, #28
 8019400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019402:	4293      	cmp	r3, r2
 8019404:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019408:	bf09      	itett	eq
 801940a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80195d0 <__ieee754_rem_pio2f+0x238>
 801940e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80195d4 <__ieee754_rem_pio2f+0x23c>
 8019412:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80195d8 <__ieee754_rem_pio2f+0x240>
 8019416:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801941a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801941e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019422:	ed80 7a00 	vstr	s14, [r0]
 8019426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801942a:	edc0 7a01 	vstr	s15, [r0, #4]
 801942e:	f04f 30ff 	mov.w	r0, #4294967295
 8019432:	e7e4      	b.n	80193fe <__ieee754_rem_pio2f+0x66>
 8019434:	4b69      	ldr	r3, [pc, #420]	@ (80195dc <__ieee754_rem_pio2f+0x244>)
 8019436:	429d      	cmp	r5, r3
 8019438:	d873      	bhi.n	8019522 <__ieee754_rem_pio2f+0x18a>
 801943a:	f000 f8dd 	bl	80195f8 <fabsf>
 801943e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80195e0 <__ieee754_rem_pio2f+0x248>
 8019442:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019446:	eee0 7a07 	vfma.f32	s15, s0, s14
 801944a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801944e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019452:	ee17 0a90 	vmov	r0, s15
 8019456:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80195c8 <__ieee754_rem_pio2f+0x230>
 801945a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801945e:	281f      	cmp	r0, #31
 8019460:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80195d4 <__ieee754_rem_pio2f+0x23c>
 8019464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019468:	eeb1 6a47 	vneg.f32	s12, s14
 801946c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019470:	ee16 1a90 	vmov	r1, s13
 8019474:	dc09      	bgt.n	801948a <__ieee754_rem_pio2f+0xf2>
 8019476:	4a5b      	ldr	r2, [pc, #364]	@ (80195e4 <__ieee754_rem_pio2f+0x24c>)
 8019478:	1e47      	subs	r7, r0, #1
 801947a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801947e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8019482:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8019486:	4293      	cmp	r3, r2
 8019488:	d107      	bne.n	801949a <__ieee754_rem_pio2f+0x102>
 801948a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801948e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8019492:	2a08      	cmp	r2, #8
 8019494:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019498:	dc14      	bgt.n	80194c4 <__ieee754_rem_pio2f+0x12c>
 801949a:	6021      	str	r1, [r4, #0]
 801949c:	ed94 7a00 	vldr	s14, [r4]
 80194a0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80194a4:	2e00      	cmp	r6, #0
 80194a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80194aa:	ed84 0a01 	vstr	s0, [r4, #4]
 80194ae:	daa6      	bge.n	80193fe <__ieee754_rem_pio2f+0x66>
 80194b0:	eeb1 7a47 	vneg.f32	s14, s14
 80194b4:	eeb1 0a40 	vneg.f32	s0, s0
 80194b8:	ed84 7a00 	vstr	s14, [r4]
 80194bc:	ed84 0a01 	vstr	s0, [r4, #4]
 80194c0:	4240      	negs	r0, r0
 80194c2:	e79c      	b.n	80193fe <__ieee754_rem_pio2f+0x66>
 80194c4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80195d0 <__ieee754_rem_pio2f+0x238>
 80194c8:	eef0 6a40 	vmov.f32	s13, s0
 80194cc:	eee6 6a25 	vfma.f32	s13, s12, s11
 80194d0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80194d4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80194d8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80195d8 <__ieee754_rem_pio2f+0x240>
 80194dc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80194e0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80194e4:	ee15 2a90 	vmov	r2, s11
 80194e8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80194ec:	1a5b      	subs	r3, r3, r1
 80194ee:	2b19      	cmp	r3, #25
 80194f0:	dc04      	bgt.n	80194fc <__ieee754_rem_pio2f+0x164>
 80194f2:	edc4 5a00 	vstr	s11, [r4]
 80194f6:	eeb0 0a66 	vmov.f32	s0, s13
 80194fa:	e7cf      	b.n	801949c <__ieee754_rem_pio2f+0x104>
 80194fc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80195e8 <__ieee754_rem_pio2f+0x250>
 8019500:	eeb0 0a66 	vmov.f32	s0, s13
 8019504:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019508:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801950c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80195ec <__ieee754_rem_pio2f+0x254>
 8019510:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019514:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019518:	ee30 7a67 	vsub.f32	s14, s0, s15
 801951c:	ed84 7a00 	vstr	s14, [r4]
 8019520:	e7bc      	b.n	801949c <__ieee754_rem_pio2f+0x104>
 8019522:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8019526:	d306      	bcc.n	8019536 <__ieee754_rem_pio2f+0x19e>
 8019528:	ee70 7a40 	vsub.f32	s15, s0, s0
 801952c:	edc0 7a01 	vstr	s15, [r0, #4]
 8019530:	edc0 7a00 	vstr	s15, [r0]
 8019534:	e73e      	b.n	80193b4 <__ieee754_rem_pio2f+0x1c>
 8019536:	15ea      	asrs	r2, r5, #23
 8019538:	3a86      	subs	r2, #134	@ 0x86
 801953a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801953e:	ee07 3a90 	vmov	s15, r3
 8019542:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019546:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80195f0 <__ieee754_rem_pio2f+0x258>
 801954a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801954e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019552:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019556:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801955a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801955e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019562:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019566:	ed8d 7a04 	vstr	s14, [sp, #16]
 801956a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801956e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019576:	edcd 7a05 	vstr	s15, [sp, #20]
 801957a:	d11e      	bne.n	80195ba <__ieee754_rem_pio2f+0x222>
 801957c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019584:	bf0c      	ite	eq
 8019586:	2301      	moveq	r3, #1
 8019588:	2302      	movne	r3, #2
 801958a:	491a      	ldr	r1, [pc, #104]	@ (80195f4 <__ieee754_rem_pio2f+0x25c>)
 801958c:	9101      	str	r1, [sp, #4]
 801958e:	2102      	movs	r1, #2
 8019590:	9100      	str	r1, [sp, #0]
 8019592:	a803      	add	r0, sp, #12
 8019594:	4621      	mov	r1, r4
 8019596:	f000 f837 	bl	8019608 <__kernel_rem_pio2f>
 801959a:	2e00      	cmp	r6, #0
 801959c:	f6bf af2f 	bge.w	80193fe <__ieee754_rem_pio2f+0x66>
 80195a0:	edd4 7a00 	vldr	s15, [r4]
 80195a4:	eef1 7a67 	vneg.f32	s15, s15
 80195a8:	edc4 7a00 	vstr	s15, [r4]
 80195ac:	edd4 7a01 	vldr	s15, [r4, #4]
 80195b0:	eef1 7a67 	vneg.f32	s15, s15
 80195b4:	edc4 7a01 	vstr	s15, [r4, #4]
 80195b8:	e782      	b.n	80194c0 <__ieee754_rem_pio2f+0x128>
 80195ba:	2303      	movs	r3, #3
 80195bc:	e7e5      	b.n	801958a <__ieee754_rem_pio2f+0x1f2>
 80195be:	bf00      	nop
 80195c0:	3f490fd8 	.word	0x3f490fd8
 80195c4:	4016cbe3 	.word	0x4016cbe3
 80195c8:	3fc90f80 	.word	0x3fc90f80
 80195cc:	3fc90fd0 	.word	0x3fc90fd0
 80195d0:	37354400 	.word	0x37354400
 80195d4:	37354443 	.word	0x37354443
 80195d8:	2e85a308 	.word	0x2e85a308
 80195dc:	43490f80 	.word	0x43490f80
 80195e0:	3f22f984 	.word	0x3f22f984
 80195e4:	0801b1b4 	.word	0x0801b1b4
 80195e8:	2e85a300 	.word	0x2e85a300
 80195ec:	248d3132 	.word	0x248d3132
 80195f0:	43800000 	.word	0x43800000
 80195f4:	0801b234 	.word	0x0801b234

080195f8 <fabsf>:
 80195f8:	ee10 3a10 	vmov	r3, s0
 80195fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019600:	ee00 3a10 	vmov	s0, r3
 8019604:	4770      	bx	lr
	...

08019608 <__kernel_rem_pio2f>:
 8019608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801960c:	ed2d 8b04 	vpush	{d8-d9}
 8019610:	b0d9      	sub	sp, #356	@ 0x164
 8019612:	4690      	mov	r8, r2
 8019614:	9001      	str	r0, [sp, #4]
 8019616:	4ab6      	ldr	r2, [pc, #728]	@ (80198f0 <__kernel_rem_pio2f+0x2e8>)
 8019618:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801961a:	f118 0f04 	cmn.w	r8, #4
 801961e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8019622:	460f      	mov	r7, r1
 8019624:	f103 3bff 	add.w	fp, r3, #4294967295
 8019628:	db26      	blt.n	8019678 <__kernel_rem_pio2f+0x70>
 801962a:	f1b8 0203 	subs.w	r2, r8, #3
 801962e:	bf48      	it	mi
 8019630:	f108 0204 	addmi.w	r2, r8, #4
 8019634:	10d2      	asrs	r2, r2, #3
 8019636:	1c55      	adds	r5, r2, #1
 8019638:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801963a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8019900 <__kernel_rem_pio2f+0x2f8>
 801963e:	00e8      	lsls	r0, r5, #3
 8019640:	eba2 060b 	sub.w	r6, r2, fp
 8019644:	9002      	str	r0, [sp, #8]
 8019646:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801964a:	eb0a 0c0b 	add.w	ip, sl, fp
 801964e:	ac1c      	add	r4, sp, #112	@ 0x70
 8019650:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019654:	2000      	movs	r0, #0
 8019656:	4560      	cmp	r0, ip
 8019658:	dd10      	ble.n	801967c <__kernel_rem_pio2f+0x74>
 801965a:	a91c      	add	r1, sp, #112	@ 0x70
 801965c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019660:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019664:	2600      	movs	r6, #0
 8019666:	4556      	cmp	r6, sl
 8019668:	dc24      	bgt.n	80196b4 <__kernel_rem_pio2f+0xac>
 801966a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801966e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8019900 <__kernel_rem_pio2f+0x2f8>
 8019672:	4684      	mov	ip, r0
 8019674:	2400      	movs	r4, #0
 8019676:	e016      	b.n	80196a6 <__kernel_rem_pio2f+0x9e>
 8019678:	2200      	movs	r2, #0
 801967a:	e7dc      	b.n	8019636 <__kernel_rem_pio2f+0x2e>
 801967c:	42c6      	cmn	r6, r0
 801967e:	bf5d      	ittte	pl
 8019680:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8019684:	ee07 1a90 	vmovpl	s15, r1
 8019688:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801968c:	eef0 7a47 	vmovmi.f32	s15, s14
 8019690:	ece4 7a01 	vstmia	r4!, {s15}
 8019694:	3001      	adds	r0, #1
 8019696:	e7de      	b.n	8019656 <__kernel_rem_pio2f+0x4e>
 8019698:	ecfe 6a01 	vldmia	lr!, {s13}
 801969c:	ed3c 7a01 	vldmdb	ip!, {s14}
 80196a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80196a4:	3401      	adds	r4, #1
 80196a6:	455c      	cmp	r4, fp
 80196a8:	ddf6      	ble.n	8019698 <__kernel_rem_pio2f+0x90>
 80196aa:	ece9 7a01 	vstmia	r9!, {s15}
 80196ae:	3601      	adds	r6, #1
 80196b0:	3004      	adds	r0, #4
 80196b2:	e7d8      	b.n	8019666 <__kernel_rem_pio2f+0x5e>
 80196b4:	a908      	add	r1, sp, #32
 80196b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80196ba:	9104      	str	r1, [sp, #16]
 80196bc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80196be:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80198fc <__kernel_rem_pio2f+0x2f4>
 80196c2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80198f8 <__kernel_rem_pio2f+0x2f0>
 80196c6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80196ca:	9203      	str	r2, [sp, #12]
 80196cc:	4654      	mov	r4, sl
 80196ce:	00a2      	lsls	r2, r4, #2
 80196d0:	9205      	str	r2, [sp, #20]
 80196d2:	aa58      	add	r2, sp, #352	@ 0x160
 80196d4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80196d8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80196dc:	a944      	add	r1, sp, #272	@ 0x110
 80196de:	aa08      	add	r2, sp, #32
 80196e0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80196e4:	4694      	mov	ip, r2
 80196e6:	4626      	mov	r6, r4
 80196e8:	2e00      	cmp	r6, #0
 80196ea:	dc4c      	bgt.n	8019786 <__kernel_rem_pio2f+0x17e>
 80196ec:	4628      	mov	r0, r5
 80196ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80196f2:	f000 f9f1 	bl	8019ad8 <scalbnf>
 80196f6:	eeb0 8a40 	vmov.f32	s16, s0
 80196fa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80196fe:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019702:	f000 fa4f 	bl	8019ba4 <floorf>
 8019706:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801970a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801970e:	2d00      	cmp	r5, #0
 8019710:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019714:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019718:	ee17 9a90 	vmov	r9, s15
 801971c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019720:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019724:	dd41      	ble.n	80197aa <__kernel_rem_pio2f+0x1a2>
 8019726:	f104 3cff 	add.w	ip, r4, #4294967295
 801972a:	a908      	add	r1, sp, #32
 801972c:	f1c5 0e08 	rsb	lr, r5, #8
 8019730:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8019734:	fa46 f00e 	asr.w	r0, r6, lr
 8019738:	4481      	add	r9, r0
 801973a:	fa00 f00e 	lsl.w	r0, r0, lr
 801973e:	1a36      	subs	r6, r6, r0
 8019740:	f1c5 0007 	rsb	r0, r5, #7
 8019744:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8019748:	4106      	asrs	r6, r0
 801974a:	2e00      	cmp	r6, #0
 801974c:	dd3c      	ble.n	80197c8 <__kernel_rem_pio2f+0x1c0>
 801974e:	f04f 0e00 	mov.w	lr, #0
 8019752:	f109 0901 	add.w	r9, r9, #1
 8019756:	4670      	mov	r0, lr
 8019758:	4574      	cmp	r4, lr
 801975a:	dc68      	bgt.n	801982e <__kernel_rem_pio2f+0x226>
 801975c:	2d00      	cmp	r5, #0
 801975e:	dd03      	ble.n	8019768 <__kernel_rem_pio2f+0x160>
 8019760:	2d01      	cmp	r5, #1
 8019762:	d074      	beq.n	801984e <__kernel_rem_pio2f+0x246>
 8019764:	2d02      	cmp	r5, #2
 8019766:	d07d      	beq.n	8019864 <__kernel_rem_pio2f+0x25c>
 8019768:	2e02      	cmp	r6, #2
 801976a:	d12d      	bne.n	80197c8 <__kernel_rem_pio2f+0x1c0>
 801976c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019770:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019774:	b340      	cbz	r0, 80197c8 <__kernel_rem_pio2f+0x1c0>
 8019776:	4628      	mov	r0, r5
 8019778:	9306      	str	r3, [sp, #24]
 801977a:	f000 f9ad 	bl	8019ad8 <scalbnf>
 801977e:	9b06      	ldr	r3, [sp, #24]
 8019780:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019784:	e020      	b.n	80197c8 <__kernel_rem_pio2f+0x1c0>
 8019786:	ee60 7a28 	vmul.f32	s15, s0, s17
 801978a:	3e01      	subs	r6, #1
 801978c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019794:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019798:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801979c:	ecac 0a01 	vstmia	ip!, {s0}
 80197a0:	ed30 0a01 	vldmdb	r0!, {s0}
 80197a4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80197a8:	e79e      	b.n	80196e8 <__kernel_rem_pio2f+0xe0>
 80197aa:	d105      	bne.n	80197b8 <__kernel_rem_pio2f+0x1b0>
 80197ac:	1e60      	subs	r0, r4, #1
 80197ae:	a908      	add	r1, sp, #32
 80197b0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80197b4:	11f6      	asrs	r6, r6, #7
 80197b6:	e7c8      	b.n	801974a <__kernel_rem_pio2f+0x142>
 80197b8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80197bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80197c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197c4:	da31      	bge.n	801982a <__kernel_rem_pio2f+0x222>
 80197c6:	2600      	movs	r6, #0
 80197c8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80197cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197d0:	f040 8098 	bne.w	8019904 <__kernel_rem_pio2f+0x2fc>
 80197d4:	1e60      	subs	r0, r4, #1
 80197d6:	2200      	movs	r2, #0
 80197d8:	4550      	cmp	r0, sl
 80197da:	da4b      	bge.n	8019874 <__kernel_rem_pio2f+0x26c>
 80197dc:	2a00      	cmp	r2, #0
 80197de:	d065      	beq.n	80198ac <__kernel_rem_pio2f+0x2a4>
 80197e0:	3c01      	subs	r4, #1
 80197e2:	ab08      	add	r3, sp, #32
 80197e4:	3d08      	subs	r5, #8
 80197e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d0f8      	beq.n	80197e0 <__kernel_rem_pio2f+0x1d8>
 80197ee:	4628      	mov	r0, r5
 80197f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80197f4:	f000 f970 	bl	8019ad8 <scalbnf>
 80197f8:	1c63      	adds	r3, r4, #1
 80197fa:	aa44      	add	r2, sp, #272	@ 0x110
 80197fc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80198fc <__kernel_rem_pio2f+0x2f4>
 8019800:	0099      	lsls	r1, r3, #2
 8019802:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019806:	4623      	mov	r3, r4
 8019808:	2b00      	cmp	r3, #0
 801980a:	f280 80a9 	bge.w	8019960 <__kernel_rem_pio2f+0x358>
 801980e:	4623      	mov	r3, r4
 8019810:	2b00      	cmp	r3, #0
 8019812:	f2c0 80c7 	blt.w	80199a4 <__kernel_rem_pio2f+0x39c>
 8019816:	aa44      	add	r2, sp, #272	@ 0x110
 8019818:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801981c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80198f4 <__kernel_rem_pio2f+0x2ec>
 8019820:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8019900 <__kernel_rem_pio2f+0x2f8>
 8019824:	2000      	movs	r0, #0
 8019826:	1ae2      	subs	r2, r4, r3
 8019828:	e0b1      	b.n	801998e <__kernel_rem_pio2f+0x386>
 801982a:	2602      	movs	r6, #2
 801982c:	e78f      	b.n	801974e <__kernel_rem_pio2f+0x146>
 801982e:	f852 1b04 	ldr.w	r1, [r2], #4
 8019832:	b948      	cbnz	r0, 8019848 <__kernel_rem_pio2f+0x240>
 8019834:	b121      	cbz	r1, 8019840 <__kernel_rem_pio2f+0x238>
 8019836:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801983a:	f842 1c04 	str.w	r1, [r2, #-4]
 801983e:	2101      	movs	r1, #1
 8019840:	f10e 0e01 	add.w	lr, lr, #1
 8019844:	4608      	mov	r0, r1
 8019846:	e787      	b.n	8019758 <__kernel_rem_pio2f+0x150>
 8019848:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801984c:	e7f5      	b.n	801983a <__kernel_rem_pio2f+0x232>
 801984e:	f104 3cff 	add.w	ip, r4, #4294967295
 8019852:	aa08      	add	r2, sp, #32
 8019854:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019858:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801985c:	a908      	add	r1, sp, #32
 801985e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019862:	e781      	b.n	8019768 <__kernel_rem_pio2f+0x160>
 8019864:	f104 3cff 	add.w	ip, r4, #4294967295
 8019868:	aa08      	add	r2, sp, #32
 801986a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801986e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019872:	e7f3      	b.n	801985c <__kernel_rem_pio2f+0x254>
 8019874:	a908      	add	r1, sp, #32
 8019876:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801987a:	3801      	subs	r0, #1
 801987c:	430a      	orrs	r2, r1
 801987e:	e7ab      	b.n	80197d8 <__kernel_rem_pio2f+0x1d0>
 8019880:	3201      	adds	r2, #1
 8019882:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8019886:	2e00      	cmp	r6, #0
 8019888:	d0fa      	beq.n	8019880 <__kernel_rem_pio2f+0x278>
 801988a:	9905      	ldr	r1, [sp, #20]
 801988c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8019890:	eb0d 0001 	add.w	r0, sp, r1
 8019894:	18e6      	adds	r6, r4, r3
 8019896:	a91c      	add	r1, sp, #112	@ 0x70
 8019898:	f104 0c01 	add.w	ip, r4, #1
 801989c:	384c      	subs	r0, #76	@ 0x4c
 801989e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80198a2:	4422      	add	r2, r4
 80198a4:	4562      	cmp	r2, ip
 80198a6:	da04      	bge.n	80198b2 <__kernel_rem_pio2f+0x2aa>
 80198a8:	4614      	mov	r4, r2
 80198aa:	e710      	b.n	80196ce <__kernel_rem_pio2f+0xc6>
 80198ac:	9804      	ldr	r0, [sp, #16]
 80198ae:	2201      	movs	r2, #1
 80198b0:	e7e7      	b.n	8019882 <__kernel_rem_pio2f+0x27a>
 80198b2:	9903      	ldr	r1, [sp, #12]
 80198b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80198b8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80198bc:	9105      	str	r1, [sp, #20]
 80198be:	ee07 1a90 	vmov	s15, r1
 80198c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80198c6:	2400      	movs	r4, #0
 80198c8:	ece6 7a01 	vstmia	r6!, {s15}
 80198cc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019900 <__kernel_rem_pio2f+0x2f8>
 80198d0:	46b1      	mov	r9, r6
 80198d2:	455c      	cmp	r4, fp
 80198d4:	dd04      	ble.n	80198e0 <__kernel_rem_pio2f+0x2d8>
 80198d6:	ece0 7a01 	vstmia	r0!, {s15}
 80198da:	f10c 0c01 	add.w	ip, ip, #1
 80198de:	e7e1      	b.n	80198a4 <__kernel_rem_pio2f+0x29c>
 80198e0:	ecfe 6a01 	vldmia	lr!, {s13}
 80198e4:	ed39 7a01 	vldmdb	r9!, {s14}
 80198e8:	3401      	adds	r4, #1
 80198ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80198ee:	e7f0      	b.n	80198d2 <__kernel_rem_pio2f+0x2ca>
 80198f0:	0801b578 	.word	0x0801b578
 80198f4:	0801b54c 	.word	0x0801b54c
 80198f8:	43800000 	.word	0x43800000
 80198fc:	3b800000 	.word	0x3b800000
 8019900:	00000000 	.word	0x00000000
 8019904:	9b02      	ldr	r3, [sp, #8]
 8019906:	eeb0 0a48 	vmov.f32	s0, s16
 801990a:	eba3 0008 	sub.w	r0, r3, r8
 801990e:	f000 f8e3 	bl	8019ad8 <scalbnf>
 8019912:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80198f8 <__kernel_rem_pio2f+0x2f0>
 8019916:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801991a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801991e:	db19      	blt.n	8019954 <__kernel_rem_pio2f+0x34c>
 8019920:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80198fc <__kernel_rem_pio2f+0x2f4>
 8019924:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019928:	aa08      	add	r2, sp, #32
 801992a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801992e:	3508      	adds	r5, #8
 8019930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019934:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801993c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019940:	ee10 3a10 	vmov	r3, s0
 8019944:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019948:	ee17 3a90 	vmov	r3, s15
 801994c:	3401      	adds	r4, #1
 801994e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019952:	e74c      	b.n	80197ee <__kernel_rem_pio2f+0x1e6>
 8019954:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019958:	aa08      	add	r2, sp, #32
 801995a:	ee10 3a10 	vmov	r3, s0
 801995e:	e7f6      	b.n	801994e <__kernel_rem_pio2f+0x346>
 8019960:	a808      	add	r0, sp, #32
 8019962:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019966:	9001      	str	r0, [sp, #4]
 8019968:	ee07 0a90 	vmov	s15, r0
 801996c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019970:	3b01      	subs	r3, #1
 8019972:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019976:	ee20 0a07 	vmul.f32	s0, s0, s14
 801997a:	ed62 7a01 	vstmdb	r2!, {s15}
 801997e:	e743      	b.n	8019808 <__kernel_rem_pio2f+0x200>
 8019980:	ecfc 6a01 	vldmia	ip!, {s13}
 8019984:	ecb5 7a01 	vldmia	r5!, {s14}
 8019988:	eee6 7a87 	vfma.f32	s15, s13, s14
 801998c:	3001      	adds	r0, #1
 801998e:	4550      	cmp	r0, sl
 8019990:	dc01      	bgt.n	8019996 <__kernel_rem_pio2f+0x38e>
 8019992:	4290      	cmp	r0, r2
 8019994:	ddf4      	ble.n	8019980 <__kernel_rem_pio2f+0x378>
 8019996:	a858      	add	r0, sp, #352	@ 0x160
 8019998:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801999c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80199a0:	3b01      	subs	r3, #1
 80199a2:	e735      	b.n	8019810 <__kernel_rem_pio2f+0x208>
 80199a4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80199a6:	2b02      	cmp	r3, #2
 80199a8:	dc09      	bgt.n	80199be <__kernel_rem_pio2f+0x3b6>
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	dc27      	bgt.n	80199fe <__kernel_rem_pio2f+0x3f6>
 80199ae:	d040      	beq.n	8019a32 <__kernel_rem_pio2f+0x42a>
 80199b0:	f009 0007 	and.w	r0, r9, #7
 80199b4:	b059      	add	sp, #356	@ 0x164
 80199b6:	ecbd 8b04 	vpop	{d8-d9}
 80199ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199be:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80199c0:	2b03      	cmp	r3, #3
 80199c2:	d1f5      	bne.n	80199b0 <__kernel_rem_pio2f+0x3a8>
 80199c4:	aa30      	add	r2, sp, #192	@ 0xc0
 80199c6:	1f0b      	subs	r3, r1, #4
 80199c8:	4413      	add	r3, r2
 80199ca:	461a      	mov	r2, r3
 80199cc:	4620      	mov	r0, r4
 80199ce:	2800      	cmp	r0, #0
 80199d0:	dc50      	bgt.n	8019a74 <__kernel_rem_pio2f+0x46c>
 80199d2:	4622      	mov	r2, r4
 80199d4:	2a01      	cmp	r2, #1
 80199d6:	dc5d      	bgt.n	8019a94 <__kernel_rem_pio2f+0x48c>
 80199d8:	ab30      	add	r3, sp, #192	@ 0xc0
 80199da:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8019900 <__kernel_rem_pio2f+0x2f8>
 80199de:	440b      	add	r3, r1
 80199e0:	2c01      	cmp	r4, #1
 80199e2:	dc67      	bgt.n	8019ab4 <__kernel_rem_pio2f+0x4ac>
 80199e4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80199e8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80199ec:	2e00      	cmp	r6, #0
 80199ee:	d167      	bne.n	8019ac0 <__kernel_rem_pio2f+0x4b8>
 80199f0:	edc7 6a00 	vstr	s13, [r7]
 80199f4:	ed87 7a01 	vstr	s14, [r7, #4]
 80199f8:	edc7 7a02 	vstr	s15, [r7, #8]
 80199fc:	e7d8      	b.n	80199b0 <__kernel_rem_pio2f+0x3a8>
 80199fe:	ab30      	add	r3, sp, #192	@ 0xc0
 8019a00:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8019900 <__kernel_rem_pio2f+0x2f8>
 8019a04:	440b      	add	r3, r1
 8019a06:	4622      	mov	r2, r4
 8019a08:	2a00      	cmp	r2, #0
 8019a0a:	da24      	bge.n	8019a56 <__kernel_rem_pio2f+0x44e>
 8019a0c:	b34e      	cbz	r6, 8019a62 <__kernel_rem_pio2f+0x45a>
 8019a0e:	eef1 7a47 	vneg.f32	s15, s14
 8019a12:	edc7 7a00 	vstr	s15, [r7]
 8019a16:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8019a1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a1e:	aa31      	add	r2, sp, #196	@ 0xc4
 8019a20:	2301      	movs	r3, #1
 8019a22:	429c      	cmp	r4, r3
 8019a24:	da20      	bge.n	8019a68 <__kernel_rem_pio2f+0x460>
 8019a26:	b10e      	cbz	r6, 8019a2c <__kernel_rem_pio2f+0x424>
 8019a28:	eef1 7a67 	vneg.f32	s15, s15
 8019a2c:	edc7 7a01 	vstr	s15, [r7, #4]
 8019a30:	e7be      	b.n	80199b0 <__kernel_rem_pio2f+0x3a8>
 8019a32:	ab30      	add	r3, sp, #192	@ 0xc0
 8019a34:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8019900 <__kernel_rem_pio2f+0x2f8>
 8019a38:	440b      	add	r3, r1
 8019a3a:	2c00      	cmp	r4, #0
 8019a3c:	da05      	bge.n	8019a4a <__kernel_rem_pio2f+0x442>
 8019a3e:	b10e      	cbz	r6, 8019a44 <__kernel_rem_pio2f+0x43c>
 8019a40:	eef1 7a67 	vneg.f32	s15, s15
 8019a44:	edc7 7a00 	vstr	s15, [r7]
 8019a48:	e7b2      	b.n	80199b0 <__kernel_rem_pio2f+0x3a8>
 8019a4a:	ed33 7a01 	vldmdb	r3!, {s14}
 8019a4e:	3c01      	subs	r4, #1
 8019a50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019a54:	e7f1      	b.n	8019a3a <__kernel_rem_pio2f+0x432>
 8019a56:	ed73 7a01 	vldmdb	r3!, {s15}
 8019a5a:	3a01      	subs	r2, #1
 8019a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a60:	e7d2      	b.n	8019a08 <__kernel_rem_pio2f+0x400>
 8019a62:	eef0 7a47 	vmov.f32	s15, s14
 8019a66:	e7d4      	b.n	8019a12 <__kernel_rem_pio2f+0x40a>
 8019a68:	ecb2 7a01 	vldmia	r2!, {s14}
 8019a6c:	3301      	adds	r3, #1
 8019a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019a72:	e7d6      	b.n	8019a22 <__kernel_rem_pio2f+0x41a>
 8019a74:	ed72 7a01 	vldmdb	r2!, {s15}
 8019a78:	edd2 6a01 	vldr	s13, [r2, #4]
 8019a7c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019a80:	3801      	subs	r0, #1
 8019a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a86:	ed82 7a00 	vstr	s14, [r2]
 8019a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019a8e:	edc2 7a01 	vstr	s15, [r2, #4]
 8019a92:	e79c      	b.n	80199ce <__kernel_rem_pio2f+0x3c6>
 8019a94:	ed73 7a01 	vldmdb	r3!, {s15}
 8019a98:	edd3 6a01 	vldr	s13, [r3, #4]
 8019a9c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019aa0:	3a01      	subs	r2, #1
 8019aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019aa6:	ed83 7a00 	vstr	s14, [r3]
 8019aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019aae:	edc3 7a01 	vstr	s15, [r3, #4]
 8019ab2:	e78f      	b.n	80199d4 <__kernel_rem_pio2f+0x3cc>
 8019ab4:	ed33 7a01 	vldmdb	r3!, {s14}
 8019ab8:	3c01      	subs	r4, #1
 8019aba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019abe:	e78f      	b.n	80199e0 <__kernel_rem_pio2f+0x3d8>
 8019ac0:	eef1 6a66 	vneg.f32	s13, s13
 8019ac4:	eeb1 7a47 	vneg.f32	s14, s14
 8019ac8:	edc7 6a00 	vstr	s13, [r7]
 8019acc:	ed87 7a01 	vstr	s14, [r7, #4]
 8019ad0:	eef1 7a67 	vneg.f32	s15, s15
 8019ad4:	e790      	b.n	80199f8 <__kernel_rem_pio2f+0x3f0>
 8019ad6:	bf00      	nop

08019ad8 <scalbnf>:
 8019ad8:	ee10 3a10 	vmov	r3, s0
 8019adc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8019ae0:	d02b      	beq.n	8019b3a <scalbnf+0x62>
 8019ae2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8019ae6:	d302      	bcc.n	8019aee <scalbnf+0x16>
 8019ae8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019aec:	4770      	bx	lr
 8019aee:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8019af2:	d123      	bne.n	8019b3c <scalbnf+0x64>
 8019af4:	4b24      	ldr	r3, [pc, #144]	@ (8019b88 <scalbnf+0xb0>)
 8019af6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8019b8c <scalbnf+0xb4>
 8019afa:	4298      	cmp	r0, r3
 8019afc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019b00:	db17      	blt.n	8019b32 <scalbnf+0x5a>
 8019b02:	ee10 3a10 	vmov	r3, s0
 8019b06:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019b0a:	3a19      	subs	r2, #25
 8019b0c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8019b10:	4288      	cmp	r0, r1
 8019b12:	dd15      	ble.n	8019b40 <scalbnf+0x68>
 8019b14:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8019b90 <scalbnf+0xb8>
 8019b18:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8019b94 <scalbnf+0xbc>
 8019b1c:	ee10 3a10 	vmov	r3, s0
 8019b20:	eeb0 7a67 	vmov.f32	s14, s15
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	bfb8      	it	lt
 8019b28:	eef0 7a66 	vmovlt.f32	s15, s13
 8019b2c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019b30:	4770      	bx	lr
 8019b32:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019b98 <scalbnf+0xc0>
 8019b36:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019b3a:	4770      	bx	lr
 8019b3c:	0dd2      	lsrs	r2, r2, #23
 8019b3e:	e7e5      	b.n	8019b0c <scalbnf+0x34>
 8019b40:	4410      	add	r0, r2
 8019b42:	28fe      	cmp	r0, #254	@ 0xfe
 8019b44:	dce6      	bgt.n	8019b14 <scalbnf+0x3c>
 8019b46:	2800      	cmp	r0, #0
 8019b48:	dd06      	ble.n	8019b58 <scalbnf+0x80>
 8019b4a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019b4e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019b52:	ee00 3a10 	vmov	s0, r3
 8019b56:	4770      	bx	lr
 8019b58:	f110 0f16 	cmn.w	r0, #22
 8019b5c:	da09      	bge.n	8019b72 <scalbnf+0x9a>
 8019b5e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8019b98 <scalbnf+0xc0>
 8019b62:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8019b9c <scalbnf+0xc4>
 8019b66:	ee10 3a10 	vmov	r3, s0
 8019b6a:	eeb0 7a67 	vmov.f32	s14, s15
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	e7d9      	b.n	8019b26 <scalbnf+0x4e>
 8019b72:	3019      	adds	r0, #25
 8019b74:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019b78:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019b7c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8019ba0 <scalbnf+0xc8>
 8019b80:	ee07 3a90 	vmov	s15, r3
 8019b84:	e7d7      	b.n	8019b36 <scalbnf+0x5e>
 8019b86:	bf00      	nop
 8019b88:	ffff3cb0 	.word	0xffff3cb0
 8019b8c:	4c000000 	.word	0x4c000000
 8019b90:	7149f2ca 	.word	0x7149f2ca
 8019b94:	f149f2ca 	.word	0xf149f2ca
 8019b98:	0da24260 	.word	0x0da24260
 8019b9c:	8da24260 	.word	0x8da24260
 8019ba0:	33000000 	.word	0x33000000

08019ba4 <floorf>:
 8019ba4:	ee10 3a10 	vmov	r3, s0
 8019ba8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019bac:	3a7f      	subs	r2, #127	@ 0x7f
 8019bae:	2a16      	cmp	r2, #22
 8019bb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019bb4:	dc2b      	bgt.n	8019c0e <floorf+0x6a>
 8019bb6:	2a00      	cmp	r2, #0
 8019bb8:	da12      	bge.n	8019be0 <floorf+0x3c>
 8019bba:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019c20 <floorf+0x7c>
 8019bbe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019bc2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bca:	dd06      	ble.n	8019bda <floorf+0x36>
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	da24      	bge.n	8019c1a <floorf+0x76>
 8019bd0:	2900      	cmp	r1, #0
 8019bd2:	4b14      	ldr	r3, [pc, #80]	@ (8019c24 <floorf+0x80>)
 8019bd4:	bf08      	it	eq
 8019bd6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8019bda:	ee00 3a10 	vmov	s0, r3
 8019bde:	4770      	bx	lr
 8019be0:	4911      	ldr	r1, [pc, #68]	@ (8019c28 <floorf+0x84>)
 8019be2:	4111      	asrs	r1, r2
 8019be4:	420b      	tst	r3, r1
 8019be6:	d0fa      	beq.n	8019bde <floorf+0x3a>
 8019be8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8019c20 <floorf+0x7c>
 8019bec:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019bf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bf8:	ddef      	ble.n	8019bda <floorf+0x36>
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	bfbe      	ittt	lt
 8019bfe:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019c02:	fa40 f202 	asrlt.w	r2, r0, r2
 8019c06:	189b      	addlt	r3, r3, r2
 8019c08:	ea23 0301 	bic.w	r3, r3, r1
 8019c0c:	e7e5      	b.n	8019bda <floorf+0x36>
 8019c0e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019c12:	d3e4      	bcc.n	8019bde <floorf+0x3a>
 8019c14:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019c18:	4770      	bx	lr
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	e7dd      	b.n	8019bda <floorf+0x36>
 8019c1e:	bf00      	nop
 8019c20:	7149f2ca 	.word	0x7149f2ca
 8019c24:	bf800000 	.word	0xbf800000
 8019c28:	007fffff 	.word	0x007fffff

08019c2c <_init>:
 8019c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c2e:	bf00      	nop
 8019c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c32:	bc08      	pop	{r3}
 8019c34:	469e      	mov	lr, r3
 8019c36:	4770      	bx	lr

08019c38 <_fini>:
 8019c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c3a:	bf00      	nop
 8019c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c3e:	bc08      	pop	{r3}
 8019c40:	469e      	mov	lr, r3
 8019c42:	4770      	bx	lr
