
NexusRobot_ROS2_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cd20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001de0  0801cef0  0801cef0  0001def0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ecd0  0801ecd0  0002434c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ecd0  0801ecd0  0001fcd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ecd8  0801ecd8  0002434c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  0801ecd8  0801ecd8  0001fcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ecf4  0801ecf4  0001fcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000434c  20000000  0801ecf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e6f8  20004350  08023044  00024350  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20012a48  08023044  00024a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002434c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215e7  00000000  00000000  0002437c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049b9  00000000  00000000  00045963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  0004a320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001456  00000000  00000000  0004bd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a9e1  00000000  00000000  0004d1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022dc3  00000000  00000000  00077b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe167  00000000  00000000  0009a962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000069  00000000  00000000  00198ac9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cb0  00000000  00000000  00198b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001a07e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20004350 	.word	0x20004350
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ced8 	.word	0x0801ced8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20004354 	.word	0x20004354
 800020c:	0801ced8 	.word	0x0801ced8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_ldivmod>:
 8000acc:	b97b      	cbnz	r3, 8000aee <__aeabi_ldivmod+0x22>
 8000ace:	b972      	cbnz	r2, 8000aee <__aeabi_ldivmod+0x22>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bfbe      	ittt	lt
 8000ad4:	2000      	movlt	r0, #0
 8000ad6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ada:	e006      	blt.n	8000aea <__aeabi_ldivmod+0x1e>
 8000adc:	bf08      	it	eq
 8000ade:	2800      	cmpeq	r0, #0
 8000ae0:	bf1c      	itt	ne
 8000ae2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ae6:	f04f 30ff 	movne.w	r0, #4294967295
 8000aea:	f000 b9d3 	b.w	8000e94 <__aeabi_idiv0>
 8000aee:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af6:	2900      	cmp	r1, #0
 8000af8:	db09      	blt.n	8000b0e <__aeabi_ldivmod+0x42>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db1a      	blt.n	8000b34 <__aeabi_ldivmod+0x68>
 8000afe:	f000 f84d 	bl	8000b9c <__udivmoddi4>
 8000b02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4770      	bx	lr
 8000b0e:	4240      	negs	r0, r0
 8000b10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db1b      	blt.n	8000b50 <__aeabi_ldivmod+0x84>
 8000b18:	f000 f840 	bl	8000b9c <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4240      	negs	r0, r0
 8000b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b32:	4770      	bx	lr
 8000b34:	4252      	negs	r2, r2
 8000b36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b3a:	f000 f82f 	bl	8000b9c <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4240      	negs	r0, r0
 8000b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4e:	4770      	bx	lr
 8000b50:	4252      	negs	r2, r2
 8000b52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b56:	f000 f821 	bl	8000b9c <__udivmoddi4>
 8000b5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b62:	b004      	add	sp, #16
 8000b64:	4252      	negs	r2, r2
 8000b66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b988 	b.w	8000e94 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	468e      	mov	lr, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d962      	bls.n	8000c78 <__udivmoddi4+0xdc>
 8000bb2:	fab2 f682 	clz	r6, r2
 8000bb6:	b14e      	cbz	r6, 8000bcc <__udivmoddi4+0x30>
 8000bb8:	f1c6 0320 	rsb	r3, r6, #32
 8000bbc:	fa01 f806 	lsl.w	r8, r1, r6
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	40b7      	lsls	r7, r6
 8000bc6:	ea43 0808 	orr.w	r8, r3, r8
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd8:	0c23      	lsrs	r3, r4, #16
 8000bda:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be2:	fb01 f20c 	mul.w	r2, r1, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf0:	f080 80ea 	bcs.w	8000dc8 <__udivmoddi4+0x22c>
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f240 80e7 	bls.w	8000dc8 <__udivmoddi4+0x22c>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	443b      	add	r3, r7
 8000bfe:	1a9a      	subs	r2, r3, r2
 8000c00:	b2a3      	uxth	r3, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	459c      	cmp	ip, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x8e>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1c:	f080 80d6 	bcs.w	8000dcc <__udivmoddi4+0x230>
 8000c20:	459c      	cmp	ip, r3
 8000c22:	f240 80d3 	bls.w	8000dcc <__udivmoddi4+0x230>
 8000c26:	443b      	add	r3, r7
 8000c28:	3802      	subs	r0, #2
 8000c2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2e:	eba3 030c 	sub.w	r3, r3, ip
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11d      	cbz	r5, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40f3      	lsrs	r3, r6
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d905      	bls.n	8000c52 <__udivmoddi4+0xb6>
 8000c46:	b10d      	cbz	r5, 8000c4c <__udivmoddi4+0xb0>
 8000c48:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e7f5      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c52:	fab3 f183 	clz	r1, r3
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d146      	bne.n	8000ce8 <__udivmoddi4+0x14c>
 8000c5a:	4573      	cmp	r3, lr
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xc8>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 8105 	bhi.w	8000e6e <__udivmoddi4+0x2d2>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0e5      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c72:	e9c5 4800 	strd	r4, r8, [r5]
 8000c76:	e7e2      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f000 8090 	beq.w	8000d9e <__udivmoddi4+0x202>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f040 80a4 	bne.w	8000dd0 <__udivmoddi4+0x234>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	b2bc      	uxth	r4, r7
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x11e>
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x11c>
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	f200 80e0 	bhi.w	8000e78 <__udivmoddi4+0x2dc>
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc8:	fb02 f404 	mul.w	r4, r2, r4
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x144>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x142>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f200 80ca 	bhi.w	8000e72 <__udivmoddi4+0x2d6>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0620 	rsb	r6, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf2:	431f      	orrs	r7, r3
 8000cf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	fa1f fc87 	uxth.w	ip, r7
 8000d0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d2e:	f080 809c 	bcs.w	8000e6a <__udivmoddi4+0x2ce>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f240 8099 	bls.w	8000e6a <__udivmoddi4+0x2ce>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 040e 	sub.w	r4, r4, lr
 8000d40:	fa1f fe83 	uxth.w	lr, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d54:	45a4      	cmp	ip, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1ce>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d5e:	f080 8082 	bcs.w	8000e66 <__udivmoddi4+0x2ca>
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d97f      	bls.n	8000e66 <__udivmoddi4+0x2ca>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d76:	4564      	cmp	r4, ip
 8000d78:	4673      	mov	r3, lr
 8000d7a:	46e1      	mov	r9, ip
 8000d7c:	d362      	bcc.n	8000e44 <__udivmoddi4+0x2a8>
 8000d7e:	d05f      	beq.n	8000e40 <__udivmoddi4+0x2a4>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x1fe>
 8000d82:	ebb8 0203 	subs.w	r2, r8, r3
 8000d86:	eb64 0409 	sbc.w	r4, r4, r9
 8000d8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d92:	431e      	orrs	r6, r3
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e74f      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000da2:	0c01      	lsrs	r1, r0, #16
 8000da4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da8:	b280      	uxth	r0, r0
 8000daa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dae:	463b      	mov	r3, r7
 8000db0:	4638      	mov	r0, r7
 8000db2:	463c      	mov	r4, r7
 8000db4:	46b8      	mov	r8, r7
 8000db6:	46be      	mov	lr, r7
 8000db8:	2620      	movs	r6, #32
 8000dba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dbe:	eba2 0208 	sub.w	r2, r2, r8
 8000dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dc6:	e766      	b.n	8000c96 <__udivmoddi4+0xfa>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	e718      	b.n	8000bfe <__udivmoddi4+0x62>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	e72c      	b.n	8000c2a <__udivmoddi4+0x8e>
 8000dd0:	f1c6 0220 	rsb	r2, r6, #32
 8000dd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd8:	40b7      	lsls	r7, r6
 8000dda:	40b1      	lsls	r1, r6
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	430a      	orrs	r2, r1
 8000de6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dea:	b2bc      	uxth	r4, r7
 8000dec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb08 f904 	mul.w	r9, r8, r4
 8000dfa:	40b0      	lsls	r0, r6
 8000dfc:	4589      	cmp	r9, r1
 8000dfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e02:	b280      	uxth	r0, r0
 8000e04:	d93e      	bls.n	8000e84 <__udivmoddi4+0x2e8>
 8000e06:	1879      	adds	r1, r7, r1
 8000e08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e0c:	d201      	bcs.n	8000e12 <__udivmoddi4+0x276>
 8000e0e:	4589      	cmp	r9, r1
 8000e10:	d81f      	bhi.n	8000e52 <__udivmoddi4+0x2b6>
 8000e12:	eba1 0109 	sub.w	r1, r1, r9
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	b292      	uxth	r2, r2
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	4542      	cmp	r2, r8
 8000e2a:	d229      	bcs.n	8000e80 <__udivmoddi4+0x2e4>
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e32:	d2c4      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e34:	4542      	cmp	r2, r8
 8000e36:	d2c2      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e38:	f1a9 0102 	sub.w	r1, r9, #2
 8000e3c:	443a      	add	r2, r7
 8000e3e:	e7be      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e40:	45f0      	cmp	r8, lr
 8000e42:	d29d      	bcs.n	8000d80 <__udivmoddi4+0x1e4>
 8000e44:	ebbe 0302 	subs.w	r3, lr, r2
 8000e48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	46e1      	mov	r9, ip
 8000e50:	e796      	b.n	8000d80 <__udivmoddi4+0x1e4>
 8000e52:	eba7 0909 	sub.w	r9, r7, r9
 8000e56:	4449      	add	r1, r9
 8000e58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e60:	fb09 f804 	mul.w	r8, r9, r4
 8000e64:	e7db      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e66:	4673      	mov	r3, lr
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1ce>
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	e766      	b.n	8000d3c <__udivmoddi4+0x1a0>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e6fd      	b.n	8000c6e <__udivmoddi4+0xd2>
 8000e72:	443b      	add	r3, r7
 8000e74:	3a02      	subs	r2, #2
 8000e76:	e733      	b.n	8000ce0 <__udivmoddi4+0x144>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	e71c      	b.n	8000cba <__udivmoddi4+0x11e>
 8000e80:	4649      	mov	r1, r9
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e84:	eba1 0109 	sub.w	r1, r1, r9
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fb09 f804 	mul.w	r8, r9, r4
 8000e92:	e7c4      	b.n	8000e1e <__udivmoddi4+0x282>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <ctrlparams_set_steps>:
volatile float g_v_step_mmps   = 20.0f;  // start conservative
volatile float g_wz_step_radps = 0.10f;
volatile int32_t g_ccr_applied[4] = {0, 0, 0, 0};

void ctrlparams_set_steps(float v_step_mmps, float wz_step_radps)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ea2:	edc7 0a00 	vstr	s1, [r7]
    if (v_step_mmps  > 0.0f) g_v_step_mmps   = v_step_mmps;
 8000ea6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb2:	dd02      	ble.n	8000eba <ctrlparams_set_steps+0x22>
 8000eb4:	4a09      	ldr	r2, [pc, #36]	@ (8000edc <ctrlparams_set_steps+0x44>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
    if (wz_step_radps > 0.0f) g_wz_step_radps = wz_step_radps;
 8000eba:	edd7 7a00 	vldr	s15, [r7]
 8000ebe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec6:	dc00      	bgt.n	8000eca <ctrlparams_set_steps+0x32>
}
 8000ec8:	e002      	b.n	8000ed0 <ctrlparams_set_steps+0x38>
    if (wz_step_radps > 0.0f) g_wz_step_radps = wz_step_radps;
 8000eca:	4a05      	ldr	r2, [pc, #20]	@ (8000ee0 <ctrlparams_set_steps+0x48>)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <clamp>:
static inline void setMotorDir(GPIO_TypeDef* INxA_Port, uint16_t INxA_Pin, GPIO_TypeDef* INxB_Port, uint16_t INxB_Pin, float speed);

// ----------------------------------------------------------------------------------
// ----------- Motor control helpers  -----------------------------------------------
// ----------------------------------------------------------------------------------
static inline float clamp(float v, float lo, float hi){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eee:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ef2:	ed87 1a01 	vstr	s2, [r7, #4]
    if (v < lo) 		return lo;
 8000ef6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8000efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f06:	d501      	bpl.n	8000f0c <clamp+0x28>
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	e00b      	b.n	8000f24 <clamp+0x40>
    else if (v > hi) 	return hi;
 8000f0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	dd01      	ble.n	8000f22 <clamp+0x3e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	e000      	b.n	8000f24 <clamp+0x40>
    else 				return v;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <ramp_step>:

static inline float ramp_step(float target, float current, float step)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f40:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f44:	ed87 1a01 	vstr	s2, [r7, #4]
    if (target > current + step) 		 return current + step;
 8000f48:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f54:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	dd06      	ble.n	8000f70 <ramp_step+0x3a>
 8000f62:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6e:	e015      	b.n	8000f9c <ramp_step+0x66>
    else if (target < current - step) 	 return current - step;
 8000f70:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f88:	d506      	bpl.n	8000f98 <ramp_step+0x62>
 8000f8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f96:	e001      	b.n	8000f9c <ramp_step+0x66>
    else 								 return target;
 8000f98:	edd7 7a03 	vldr	s15, [r7, #12]
}
 8000f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <setMotorDir>:


static inline void setMotorDir(GPIO_TypeDef* INxA_Port, uint16_t INxA_Pin, GPIO_TypeDef* INxB_Port, uint16_t INxB_Pin, float speed) {
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b084      	sub	sp, #16
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	ed87 0a00 	vstr	s0, [r7]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	817b      	strh	r3, [r7, #10]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	813b      	strh	r3, [r7, #8]

	if (speed > 0.0f) { // Forward
 8000fc2:	edd7 7a00 	vldr	s15, [r7]
 8000fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	dd0c      	ble.n	8000fea <setMotorDir+0x40>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
 8000fd0:	893b      	ldrh	r3, [r7, #8]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f003 fde8 	bl	8004bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_SET);
 8000fdc:	897b      	ldrh	r3, [r7, #10]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f003 fde2 	bl	8004bac <HAL_GPIO_WritePin>

	} else { // Stop / Brake
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
	}
}
 8000fe8:	e01f      	b.n	800102a <setMotorDir+0x80>
	} else if (speed < 0.0f) { // Reverse
 8000fea:	edd7 7a00 	vldr	s15, [r7]
 8000fee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff6:	d50c      	bpl.n	8001012 <setMotorDir+0x68>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
 8000ff8:	897b      	ldrh	r3, [r7, #10]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f003 fdd4 	bl	8004bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_SET);
 8001004:	893b      	ldrh	r3, [r7, #8]
 8001006:	2201      	movs	r2, #1
 8001008:	4619      	mov	r1, r3
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f003 fdce 	bl	8004bac <HAL_GPIO_WritePin>
}
 8001010:	e00b      	b.n	800102a <setMotorDir+0x80>
		HAL_GPIO_WritePin(INxA_Port, INxA_Pin, GPIO_PIN_RESET);
 8001012:	897b      	ldrh	r3, [r7, #10]
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f003 fdc7 	bl	8004bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(INxB_Port, INxB_Pin, GPIO_PIN_RESET);
 800101e:	893b      	ldrh	r3, [r7, #8]
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f003 fdc1 	bl	8004bac <HAL_GPIO_WritePin>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <init_motors>:

// ----------------------------------------------------------------------------------
// ----------- Motors control functions definitions  ---------------------------------
// ----------------------------------------------------------------------------------
void init_motors(void){
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

	// Set the direction to Forward (INA = 1) & (INB = 0)
	// Rear Left
	HAL_GPIO_WritePin(RL_INB_GPO_GPIO_Port, RL_INB_GPO_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2104      	movs	r1, #4
 800103e:	4838      	ldr	r0, [pc, #224]	@ (8001120 <init_motors+0xec>)
 8001040:	f003 fdb4 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RL_INA_GPO_GPIO_Port, RL_INA_GPO_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	2108      	movs	r1, #8
 8001048:	4835      	ldr	r0, [pc, #212]	@ (8001120 <init_motors+0xec>)
 800104a:	f003 fdaf 	bl	8004bac <HAL_GPIO_WritePin>
	// Front Left
	HAL_GPIO_WritePin(FL_INB_GPO_GPIO_Port, FL_INB_GPO_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	2102      	movs	r1, #2
 8001052:	4833      	ldr	r0, [pc, #204]	@ (8001120 <init_motors+0xec>)
 8001054:	f003 fdaa 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL_INA_GPO_GPIO_Port, FL_INA_GPO_Pin, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2101      	movs	r1, #1
 800105c:	4830      	ldr	r0, [pc, #192]	@ (8001120 <init_motors+0xec>)
 800105e:	f003 fda5 	bl	8004bac <HAL_GPIO_WritePin>
	// Rear Right
	HAL_GPIO_WritePin(RR_INB_GPO_GPIO_Port, RR_INB_GPO_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2110      	movs	r1, #16
 8001066:	482e      	ldr	r0, [pc, #184]	@ (8001120 <init_motors+0xec>)
 8001068:	f003 fda0 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_INA_GPO_GPIO_Port, RR_INA_GPO_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001072:	482c      	ldr	r0, [pc, #176]	@ (8001124 <init_motors+0xf0>)
 8001074:	f003 fd9a 	bl	8004bac <HAL_GPIO_WritePin>
	// Front Right
	HAL_GPIO_WritePin(FR_INB_GPO_GPIO_Port, FR_INB_GPO_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2120      	movs	r1, #32
 800107c:	4829      	ldr	r0, [pc, #164]	@ (8001124 <init_motors+0xf0>)
 800107e:	f003 fd95 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001088:	4827      	ldr	r0, [pc, #156]	@ (8001128 <init_motors+0xf4>)
 800108a:	f003 fd8f 	bl	8004bac <HAL_GPIO_WritePin>

	// Enable the full bridges of the motor drivers (VDD)
	HAL_GPIO_WritePin(RL_VDD_GPO_GPIO_Port, RL_VDD_GPO_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001094:	4822      	ldr	r0, [pc, #136]	@ (8001120 <init_motors+0xec>)
 8001096:	f003 fd89 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FR_VDD_GPO_GPIO_Port, FR_VDD_GPO_Pin, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a0:	481f      	ldr	r0, [pc, #124]	@ (8001120 <init_motors+0xec>)
 80010a2:	f003 fd83 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RR_VDD_GPO_GPIO_Port, RR_VDD_GPO_Pin, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ac:	481c      	ldr	r0, [pc, #112]	@ (8001120 <init_motors+0xec>)
 80010ae:	f003 fd7d 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FL_VDD_GPO_GPIO_Port, FL_VDD_GPO_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010b8:	4819      	ldr	r0, [pc, #100]	@ (8001120 <init_motors+0xec>)
 80010ba:	f003 fd77 	bl	8004bac <HAL_GPIO_WritePin>

	// Start the PWM signals
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// RL Motor
 80010be:	2100      	movs	r1, #0
 80010c0:	481a      	ldr	r0, [pc, #104]	@ (800112c <init_motors+0xf8>)
 80010c2:	f004 fcc1 	bl	8005a48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	// FL Motor
 80010c6:	2104      	movs	r1, #4
 80010c8:	4818      	ldr	r0, [pc, #96]	@ (800112c <init_motors+0xf8>)
 80010ca:	f004 fcbd 	bl	8005a48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	// FR Motor
 80010ce:	2108      	movs	r1, #8
 80010d0:	4816      	ldr	r0, [pc, #88]	@ (800112c <init_motors+0xf8>)
 80010d2:	f004 fcb9 	bl	8005a48 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);	// RR Motor
 80010d6:	210c      	movs	r1, #12
 80010d8:	4814      	ldr	r0, [pc, #80]	@ (800112c <init_motors+0xf8>)
 80010da:	f004 fcb5 	bl	8005a48 <HAL_TIM_PWM_Start>

	// Set RL, FL, FR and RR motors to initial speed. For example 0 PWM = 0 CCR = 0% Duty Cycle => t_on = 0 µs
	for(int i = 0; i <= 0; i++){
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	e015      	b.n	8001110 <init_motors+0xdc>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);	// RL Motor
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <init_motors+0xf8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, i);	// FL Motor
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <init_motors+0xf8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, i);	// FR Motor
 80010f4:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <init_motors+0xf8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);	// RR Motor
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <init_motors+0xf8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	641a      	str	r2, [r3, #64]	@ 0x40
	  	HAL_Delay(5);
 8001104:	2005      	movs	r0, #5
 8001106:	f002 fd87 	bl	8003c18 <HAL_Delay>
	for(int i = 0; i <= 0; i++){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3301      	adds	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	dde6      	ble.n	80010e4 <init_motors+0xb0>
	  }
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40020800 	.word	0x40020800
 8001124:	40020400 	.word	0x40020400
 8001128:	40020000 	.word	0x40020000
 800112c:	20008898 	.word	0x20008898

08001130 <Mecanum_Control>:


void Mecanum_Control(float vx_target, float vy_target, float w_target) {
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b095      	sub	sp, #84	@ 0x54
 8001134:	af00      	add	r7, sp, #0
 8001136:	ed87 0a03 	vstr	s0, [r7, #12]
 800113a:	edc7 0a02 	vstr	s1, [r7, #8]
 800113e:	ed87 1a01 	vstr	s2, [r7, #4]

	// Current velocities
	static float vx = 0, vy = 0, wz = 0;

	// Increment current velocities to the targets using fixed steps (prevent rapid changes for motor safety)
	vx = ramp_step(vx_target, vx, g_v_step_mmps);
 8001142:	4bbd      	ldr	r3, [pc, #756]	@ (8001438 <Mecanum_Control+0x308>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	4bbc      	ldr	r3, [pc, #752]	@ (800143c <Mecanum_Control+0x30c>)
 800114a:	ed93 7a00 	vldr	s14, [r3]
 800114e:	eeb0 1a47 	vmov.f32	s2, s14
 8001152:	eef0 0a67 	vmov.f32	s1, s15
 8001156:	ed97 0a03 	vldr	s0, [r7, #12]
 800115a:	f7ff feec 	bl	8000f36 <ramp_step>
 800115e:	eef0 7a40 	vmov.f32	s15, s0
 8001162:	4bb5      	ldr	r3, [pc, #724]	@ (8001438 <Mecanum_Control+0x308>)
 8001164:	edc3 7a00 	vstr	s15, [r3]
	vy = ramp_step(vy_target, vy, g_v_step_mmps);
 8001168:	4bb5      	ldr	r3, [pc, #724]	@ (8001440 <Mecanum_Control+0x310>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	4bb3      	ldr	r3, [pc, #716]	@ (800143c <Mecanum_Control+0x30c>)
 8001170:	ed93 7a00 	vldr	s14, [r3]
 8001174:	eeb0 1a47 	vmov.f32	s2, s14
 8001178:	eef0 0a67 	vmov.f32	s1, s15
 800117c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001180:	f7ff fed9 	bl	8000f36 <ramp_step>
 8001184:	eef0 7a40 	vmov.f32	s15, s0
 8001188:	4bad      	ldr	r3, [pc, #692]	@ (8001440 <Mecanum_Control+0x310>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
	wz = ramp_step(w_target,  wz, g_wz_step_radps);
 800118e:	4bad      	ldr	r3, [pc, #692]	@ (8001444 <Mecanum_Control+0x314>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	4bac      	ldr	r3, [pc, #688]	@ (8001448 <Mecanum_Control+0x318>)
 8001196:	ed93 7a00 	vldr	s14, [r3]
 800119a:	eeb0 1a47 	vmov.f32	s2, s14
 800119e:	eef0 0a67 	vmov.f32	s1, s15
 80011a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80011a6:	f7ff fec6 	bl	8000f36 <ramp_step>
 80011aa:	eef0 7a40 	vmov.f32	s15, s0
 80011ae:	4ba5      	ldr	r3, [pc, #660]	@ (8001444 <Mecanum_Control+0x314>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]


	float V[4];
	V[0] = +vx + vy - (A_SUM * wz);  // RL
 80011b4:	4ba0      	ldr	r3, [pc, #640]	@ (8001438 <Mecanum_Control+0x308>)
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001440 <Mecanum_Control+0x310>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011c4:	4b9f      	ldr	r3, [pc, #636]	@ (8001444 <Mecanum_Control+0x314>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 800144c <Mecanum_Control+0x31c>
 80011ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	V[1] = +vx - vy - (A_SUM * wz);  // FL
 80011da:	4b97      	ldr	r3, [pc, #604]	@ (8001438 <Mecanum_Control+0x308>)
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	4b97      	ldr	r3, [pc, #604]	@ (8001440 <Mecanum_Control+0x310>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ea:	4b96      	ldr	r3, [pc, #600]	@ (8001444 <Mecanum_Control+0x314>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	eddf 6a96 	vldr	s13, [pc, #600]	@ 800144c <Mecanum_Control+0x31c>
 80011f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	V[2] = +vx + vy + (A_SUM * wz);  // FR
 8001200:	4b8d      	ldr	r3, [pc, #564]	@ (8001438 <Mecanum_Control+0x308>)
 8001202:	ed93 7a00 	vldr	s14, [r3]
 8001206:	4b8e      	ldr	r3, [pc, #568]	@ (8001440 <Mecanum_Control+0x310>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001210:	4b8c      	ldr	r3, [pc, #560]	@ (8001444 <Mecanum_Control+0x314>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800144c <Mecanum_Control+0x31c>
 800121a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001222:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	V[3] = +vx - vy + (A_SUM * wz);  // RR
 8001226:	4b84      	ldr	r3, [pc, #528]	@ (8001438 <Mecanum_Control+0x308>)
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	4b84      	ldr	r3, [pc, #528]	@ (8001440 <Mecanum_Control+0x310>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001236:	4b83      	ldr	r3, [pc, #524]	@ (8001444 <Mecanum_Control+0x314>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	eddf 6a83 	vldr	s13, [pc, #524]	@ 800144c <Mecanum_Control+0x31c>
 8001240:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001248:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// Clamp velocities to the allowed limits
	 for (int i = 0; i < 4; i++) {
 800124c:	2300      	movs	r3, #0
 800124e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001250:	e01a      	b.n	8001288 <Mecanum_Control+0x158>
		 V[i] = clamp(V[i], MIN_WHEEL_LINEAR_V_MMPS, MAX_WHEEL_LINEAR_V_MMPS);
 8001252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	3350      	adds	r3, #80	@ 0x50
 8001258:	443b      	add	r3, r7
 800125a:	3b1c      	subs	r3, #28
 800125c:	edd3 7a00 	vldr	s15, [r3]
 8001260:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 8001450 <Mecanum_Control+0x320>
 8001264:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8001454 <Mecanum_Control+0x324>
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	f7ff fe3a 	bl	8000ee4 <clamp>
 8001270:	eef0 7a40 	vmov.f32	s15, s0
 8001274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	3350      	adds	r3, #80	@ 0x50
 800127a:	443b      	add	r3, r7
 800127c:	3b1c      	subs	r3, #28
 800127e:	edc3 7a00 	vstr	s15, [r3]
	 for (int i = 0; i < 4; i++) {
 8001282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001284:	3301      	adds	r3, #1
 8001286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800128a:	2b03      	cmp	r3, #3
 800128c:	dde1      	ble.n	8001252 <Mecanum_Control+0x122>
	 }

	 // PWM Conversion and CCR clamping
	 int CCR[4];

	 for (int i = 0; i < 4; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001292:	e043      	b.n	800131c <Mecanum_Control+0x1ec>
	 {
		 CCR[i] = (int)((fabsf(V[i]) / MAX_WHEEL_LINEAR_V_MMPS) * CCR_MAX);
 8001294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	3350      	adds	r3, #80	@ 0x50
 800129a:	443b      	add	r3, r7
 800129c:	3b1c      	subs	r3, #28
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	eef0 7ae7 	vabs.f32	s15, s15
 80012a6:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001450 <Mecanum_Control+0x320>
 80012aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012ae:	ee16 0a90 	vmov	r0, s13
 80012b2:	f7ff f979 	bl	80005a8 <__aeabi_f2d>
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b67      	ldr	r3, [pc, #412]	@ (8001458 <Mecanum_Control+0x328>)
 80012bc:	f7ff f9cc 	bl	8000658 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fbd8 	bl	8000a7c <__aeabi_d2iz>
 80012cc:	4602      	mov	r2, r0
 80012ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	3350      	adds	r3, #80	@ 0x50
 80012d4:	443b      	add	r3, r7
 80012d6:	f843 2c2c 	str.w	r2, [r3, #-44]
		 CCR[i] = (int)clamp((float)CCR[i], 0.0f, CCR_MAX);
 80012da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3350      	adds	r3, #80	@ 0x50
 80012e0:	443b      	add	r3, r7
 80012e2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80012e6:	ee07 3a90 	vmov	s15, r3
 80012ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ee:	ed9f 1a5b 	vldr	s2, [pc, #364]	@ 800145c <Mecanum_Control+0x32c>
 80012f2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001460 <Mecanum_Control+0x330>
 80012f6:	eeb0 0a67 	vmov.f32	s0, s15
 80012fa:	f7ff fdf3 	bl	8000ee4 <clamp>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
 8001302:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001306:	ee17 2a90 	vmov	r2, s15
 800130a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	3350      	adds	r3, #80	@ 0x50
 8001310:	443b      	add	r3, r7
 8001312:	f843 2c2c 	str.w	r2, [r3, #-44]
	 for (int i = 0; i < 4; i++)
 8001316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001318:	3301      	adds	r3, #1
 800131a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800131c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800131e:	2b03      	cmp	r3, #3
 8001320:	ddb8      	ble.n	8001294 <Mecanum_Control+0x164>
	 }

	setMotorDir(RL_INA_GPO_GPIO_Port, RL_INA_GPO_Pin,
 8001322:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001326:	eeb0 0a67 	vmov.f32	s0, s15
 800132a:	2304      	movs	r3, #4
 800132c:	4a4d      	ldr	r2, [pc, #308]	@ (8001464 <Mecanum_Control+0x334>)
 800132e:	2108      	movs	r1, #8
 8001330:	484c      	ldr	r0, [pc, #304]	@ (8001464 <Mecanum_Control+0x334>)
 8001332:	f7ff fe3a 	bl	8000faa <setMotorDir>
				RL_INB_GPO_GPIO_Port, RL_INB_GPO_Pin, V[0]);

	setMotorDir(FL_INA_GPO_GPIO_Port, FL_INA_GPO_Pin,
 8001336:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	2302      	movs	r3, #2
 8001340:	4a48      	ldr	r2, [pc, #288]	@ (8001464 <Mecanum_Control+0x334>)
 8001342:	2101      	movs	r1, #1
 8001344:	4847      	ldr	r0, [pc, #284]	@ (8001464 <Mecanum_Control+0x334>)
 8001346:	f7ff fe30 	bl	8000faa <setMotorDir>
	            FL_INB_GPO_GPIO_Port, FL_INB_GPO_Pin, V[1]);

	setMotorDir(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin,
 800134a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	2320      	movs	r3, #32
 8001354:	4a44      	ldr	r2, [pc, #272]	@ (8001468 <Mecanum_Control+0x338>)
 8001356:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800135a:	4844      	ldr	r0, [pc, #272]	@ (800146c <Mecanum_Control+0x33c>)
 800135c:	f7ff fe25 	bl	8000faa <setMotorDir>
				FR_INB_GPO_GPIO_Port, FR_INB_GPO_Pin, V[2]);

	setMotorDir(RR_INA_GPO_GPIO_Port, RR_INA_GPO_Pin,
 8001360:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001364:	eeb0 0a67 	vmov.f32	s0, s15
 8001368:	2310      	movs	r3, #16
 800136a:	4a3e      	ldr	r2, [pc, #248]	@ (8001464 <Mecanum_Control+0x334>)
 800136c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001370:	483d      	ldr	r0, [pc, #244]	@ (8001468 <Mecanum_Control+0x338>)
 8001372:	f7ff fe1a 	bl	8000faa <setMotorDir>
				RR_INB_GPO_GPIO_Port, RR_INB_GPO_Pin, V[3]);

	uint32_t TIM_CHANNELS[4] = {
 8001376:	4b3e      	ldr	r3, [pc, #248]	@ (8001470 <Mecanum_Control+0x340>)
 8001378:	f107 0414 	add.w	r4, r7, #20
 800137c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800137e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        TIM_CHANNEL_2, // FL
	        TIM_CHANNEL_3, // FR
	        TIM_CHANNEL_4  // RR
	};

	for (int i = 0; i < 4; i++){
 8001382:	2300      	movs	r3, #0
 8001384:	647b      	str	r3, [r7, #68]	@ 0x44
 8001386:	e04e      	b.n	8001426 <Mecanum_Control+0x2f6>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNELS[i], CCR[i]);
 8001388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	3350      	adds	r3, #80	@ 0x50
 800138e:	443b      	add	r3, r7
 8001390:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d109      	bne.n	80013ac <Mecanum_Control+0x27c>
 8001398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	3350      	adds	r3, #80	@ 0x50
 800139e:	443b      	add	r3, r7
 80013a0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80013a4:	4b33      	ldr	r3, [pc, #204]	@ (8001474 <Mecanum_Control+0x344>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013aa:	e02f      	b.n	800140c <Mecanum_Control+0x2dc>
 80013ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	3350      	adds	r3, #80	@ 0x50
 80013b2:	443b      	add	r3, r7
 80013b4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d10a      	bne.n	80013d2 <Mecanum_Control+0x2a2>
 80013bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	3350      	adds	r3, #80	@ 0x50
 80013c2:	443b      	add	r3, r7
 80013c4:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 80013c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <Mecanum_Control+0x344>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	460b      	mov	r3, r1
 80013ce:	6393      	str	r3, [r2, #56]	@ 0x38
 80013d0:	e01c      	b.n	800140c <Mecanum_Control+0x2dc>
 80013d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	3350      	adds	r3, #80	@ 0x50
 80013d8:	443b      	add	r3, r7
 80013da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d10a      	bne.n	80013f8 <Mecanum_Control+0x2c8>
 80013e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	3350      	adds	r3, #80	@ 0x50
 80013e8:	443b      	add	r3, r7
 80013ea:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <Mecanum_Control+0x344>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	460b      	mov	r3, r1
 80013f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80013f6:	e009      	b.n	800140c <Mecanum_Control+0x2dc>
 80013f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	3350      	adds	r3, #80	@ 0x50
 80013fe:	443b      	add	r3, r7
 8001400:	f853 1c2c 	ldr.w	r1, [r3, #-44]
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <Mecanum_Control+0x344>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	460b      	mov	r3, r1
 800140a:	6413      	str	r3, [r2, #64]	@ 0x40
        g_ccr_applied[i] = CCR[i];
 800140c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	3350      	adds	r3, #80	@ 0x50
 8001412:	443b      	add	r3, r7
 8001414:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8001418:	4917      	ldr	r1, [pc, #92]	@ (8001478 <Mecanum_Control+0x348>)
 800141a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800141c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++){
 8001420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001422:	3301      	adds	r3, #1
 8001424:	647b      	str	r3, [r7, #68]	@ 0x44
 8001426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001428:	2b03      	cmp	r3, #3
 800142a:	ddad      	ble.n	8001388 <Mecanum_Control+0x258>
	}
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3754      	adds	r7, #84	@ 0x54
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	2000437c 	.word	0x2000437c
 800143c:	20000000 	.word	0x20000000
 8001440:	20004380 	.word	0x20004380
 8001444:	20004384 	.word	0x20004384
 8001448:	20000004 	.word	0x20000004
 800144c:	43960000 	.word	0x43960000
 8001450:	44250000 	.word	0x44250000
 8001454:	c4250000 	.word	0xc4250000
 8001458:	407f4000 	.word	0x407f4000
 800145c:	43fa0000 	.word	0x43fa0000
 8001460:	00000000 	.word	0x00000000
 8001464:	40020800 	.word	0x40020800
 8001468:	40020400 	.word	0x40020400
 800146c:	40020000 	.word	0x40020000
 8001470:	0801cef0 	.word	0x0801cef0
 8001474:	20008898 	.word	0x20008898
 8001478:	2000436c 	.word	0x2000436c

0800147c <Emergency_Stop>:

void Emergency_Stop(void) {
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);	// RL Motor
 8001480:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <Emergency_Stop+0x30>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);	// FL Motor
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <Emergency_Stop+0x30>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);	// FR Motor
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <Emergency_Stop+0x30>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);	// RR Motor
 8001498:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <Emergency_Stop+0x30>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20008898 	.word	0x20008898

080014b0 <RS485_SetRX>:

// ----------------------------------------------------------------------------------
// ----------- Sonar (Dual Ultrasonic Sensor (DUS))  --------------------------------
// ----------------------------------------------------------------------------------
static void RS485_SetTX(void) { HAL_GPIO_WritePin(SONAR_DE_RE_GPIO_Port, SONAR_DE_RE_Pin, GPIO_PIN_SET); }
static void RS485_SetRX(void) { HAL_GPIO_WritePin(SONAR_DE_RE_GPIO_Port, SONAR_DE_RE_Pin, GPIO_PIN_RESET); }
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	2200      	movs	r2, #0
 80014b6:	2120      	movs	r1, #32
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <RS485_SetRX+0x14>)
 80014ba:	f003 fb77 	bl	8004bac <HAL_GPIO_WritePin>
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40020800 	.word	0x40020800

080014c8 <SONAR_Init>:
	uint16_t sum = 0;
	for (uint8_t i = 0; i < len; i++) sum += data[i];
	return (uint8_t)(sum & 0xFF);
}

void SONAR_Init(SONAR_HandleTypeDef *hsonar, UART_HandleTypeDef *huart, uint8_t addr) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	4613      	mov	r3, r2
 80014d4:	71fb      	strb	r3, [r7, #7]
	hsonar->huart = huart;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	601a      	str	r2, [r3, #0]
	hsonar->addr = addr;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	79fa      	ldrb	r2, [r7, #7]
 80014e0:	711a      	strb	r2, [r3, #4]
	memset(hsonar->rxBuf, 0, SONAR_RX_BUF_SIZE);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3305      	adds	r3, #5
 80014e6:	2210      	movs	r2, #16
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f01a fddc 	bl	801c0a8 <memset>
	RS485_SetRX();
 80014f0:	f7ff ffde 	bl	80014b0 <RS485_SetRX>
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001508:	f007 fed2 	bl	80092b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800150c:	4b5a      	ldr	r3, [pc, #360]	@ (8001678 <pvPortMallocMicroROS+0x17c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001514:	f000 f986 	bl	8001824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001518:	4b58      	ldr	r3, [pc, #352]	@ (800167c <pvPortMallocMicroROS+0x180>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	f040 8090 	bne.w	8001646 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d01e      	beq.n	800156a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800152c:	2208      	movs	r2, #8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	2b00      	cmp	r3, #0
 800153c:	d015      	beq.n	800156a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f023 0307 	bic.w	r3, r3, #7
 8001544:	3308      	adds	r3, #8
 8001546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00b      	beq.n	800156a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	e7fd      	b.n	8001566 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d06a      	beq.n	8001646 <pvPortMallocMicroROS+0x14a>
 8001570:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <pvPortMallocMicroROS+0x184>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d865      	bhi.n	8001646 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800157a:	4b42      	ldr	r3, [pc, #264]	@ (8001684 <pvPortMallocMicroROS+0x188>)
 800157c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800157e:	4b41      	ldr	r3, [pc, #260]	@ (8001684 <pvPortMallocMicroROS+0x188>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001584:	e004      	b.n	8001590 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800158a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	d903      	bls.n	80015a2 <pvPortMallocMicroROS+0xa6>
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1f1      	bne.n	8001586 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80015a2:	4b35      	ldr	r3, [pc, #212]	@ (8001678 <pvPortMallocMicroROS+0x17c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d04c      	beq.n	8001646 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80015ac:	6a3b      	ldr	r3, [r7, #32]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2208      	movs	r2, #8
 80015b2:	4413      	add	r3, r2
 80015b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80015b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80015be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	1ad2      	subs	r2, r2, r3
 80015c6:	2308      	movs	r3, #8
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d920      	bls.n	8001610 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80015ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4413      	add	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00b      	beq.n	80015f8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80015e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015e4:	f383 8811 	msr	BASEPRI, r3
 80015e8:	f3bf 8f6f 	isb	sy
 80015ec:	f3bf 8f4f 	dsb	sy
 80015f0:	613b      	str	r3, [r7, #16]
}
 80015f2:	bf00      	nop
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	1ad2      	subs	r2, r2, r3
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800160a:	69b8      	ldr	r0, [r7, #24]
 800160c:	f000 f96c 	bl	80018e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <pvPortMallocMicroROS+0x184>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <pvPortMallocMicroROS+0x184>)
 800161c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <pvPortMallocMicroROS+0x184>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <pvPortMallocMicroROS+0x18c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d203      	bcs.n	8001632 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <pvPortMallocMicroROS+0x184>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a16      	ldr	r2, [pc, #88]	@ (8001688 <pvPortMallocMicroROS+0x18c>)
 8001630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <pvPortMallocMicroROS+0x180>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	431a      	orrs	r2, r3
 800163c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001646:	f007 fe41 	bl	80092cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00b      	beq.n	800166c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001658:	f383 8811 	msr	BASEPRI, r3
 800165c:	f3bf 8f6f 	isb	sy
 8001660:	f3bf 8f4f 	dsb	sy
 8001664:	60fb      	str	r3, [r7, #12]
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800166c:	69fb      	ldr	r3, [r7, #28]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20007f90 	.word	0x20007f90
 800167c:	20007f9c 	.word	0x20007f9c
 8001680:	20007f94 	.word	0x20007f94
 8001684:	20007f88 	.word	0x20007f88
 8001688:	20007f98 	.word	0x20007f98

0800168c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d04a      	beq.n	8001734 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800169e:	2308      	movs	r3, #8
 80016a0:	425b      	negs	r3, r3
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4413      	add	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	4b22      	ldr	r3, [pc, #136]	@ (800173c <vPortFreeMicroROS+0xb0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10b      	bne.n	80016d2 <vPortFreeMicroROS+0x46>
	__asm volatile
 80016ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016be:	f383 8811 	msr	BASEPRI, r3
 80016c2:	f3bf 8f6f 	isb	sy
 80016c6:	f3bf 8f4f 	dsb	sy
 80016ca:	60fb      	str	r3, [r7, #12]
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	e7fd      	b.n	80016ce <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <vPortFreeMicroROS+0x66>
	__asm volatile
 80016da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016de:	f383 8811 	msr	BASEPRI, r3
 80016e2:	f3bf 8f6f 	isb	sy
 80016e6:	f3bf 8f4f 	dsb	sy
 80016ea:	60bb      	str	r3, [r7, #8]
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	e7fd      	b.n	80016ee <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	4b11      	ldr	r3, [pc, #68]	@ (800173c <vPortFreeMicroROS+0xb0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d019      	beq.n	8001734 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d115      	bne.n	8001734 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <vPortFreeMicroROS+0xb0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	43db      	mvns	r3, r3
 8001712:	401a      	ands	r2, r3
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001718:	f007 fdca 	bl	80092b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <vPortFreeMicroROS+0xb4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4413      	add	r3, r2
 8001726:	4a06      	ldr	r2, [pc, #24]	@ (8001740 <vPortFreeMicroROS+0xb4>)
 8001728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800172a:	6938      	ldr	r0, [r7, #16]
 800172c:	f000 f8dc 	bl	80018e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001730:	f007 fdcc 	bl	80092cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20007f9c 	.word	0x20007f9c
 8001740:	20007f94 	.word	0x20007f94

08001744 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001750:	2308      	movs	r3, #8
 8001752:	425b      	negs	r3, r3
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	4413      	add	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <getBlockSize+0x38>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	43db      	mvns	r3, r3
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

	return count;
 800176c:	68fb      	ldr	r3, [r7, #12]
}
 800176e:	4618      	mov	r0, r3
 8001770:	371c      	adds	r7, #28
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20007f9c 	.word	0x20007f9c

08001780 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800178a:	f007 fd91 	bl	80092b0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800178e:	6838      	ldr	r0, [r7, #0]
 8001790:	f7ff feb4 	bl	80014fc <pvPortMallocMicroROS>
 8001794:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d017      	beq.n	80017cc <pvPortReallocMicroROS+0x4c>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d014      	beq.n	80017cc <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffce 	bl	8001744 <getBlockSize>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2208      	movs	r2, #8
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d201      	bcs.n	80017bc <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	68b8      	ldr	r0, [r7, #8]
 80017c2:	f01a fd4c 	bl	801c25e <memcpy>

		vPortFreeMicroROS(pv);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff60 	bl	800168c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80017cc:	f007 fd7e 	bl	80092cc <xTaskResumeAll>

	return newmem;
 80017d0:	68bb      	ldr	r3, [r7, #8]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80017e4:	f007 fd64 	bl	80092b0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff fe82 	bl	80014fc <pvPortMallocMicroROS>
 80017f8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	613b      	str	r3, [r7, #16]

  	while(count--)
 80017fe:	e004      	b.n	800180a <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	613a      	str	r2, [r7, #16]
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	1e5a      	subs	r2, r3, #1
 800180e:	617a      	str	r2, [r7, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f5      	bne.n	8001800 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001814:	f007 fd5a 	bl	80092cc <xTaskResumeAll>
  	return mem;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800182a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800182e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001830:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <prvHeapInit+0xac>)
 8001832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00c      	beq.n	8001858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3307      	adds	r3, #7
 8001842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f023 0307 	bic.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	4a1f      	ldr	r2, [pc, #124]	@ (80018d0 <prvHeapInit+0xac>)
 8001854:	4413      	add	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800185c:	4a1d      	ldr	r2, [pc, #116]	@ (80018d4 <prvHeapInit+0xb0>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001862:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <prvHeapInit+0xb0>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	4413      	add	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001870:	2208      	movs	r2, #8
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f023 0307 	bic.w	r3, r3, #7
 800187e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4a15      	ldr	r2, [pc, #84]	@ (80018d8 <prvHeapInit+0xb4>)
 8001884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <prvHeapInit+0xb4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2200      	movs	r2, #0
 800188c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800188e:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <prvHeapInit+0xb4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	1ad2      	subs	r2, r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <prvHeapInit+0xb4>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <prvHeapInit+0xb8>)
 80018b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a09      	ldr	r2, [pc, #36]	@ (80018e0 <prvHeapInit+0xbc>)
 80018ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80018bc:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <prvHeapInit+0xc0>)
 80018be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80018c2:	601a      	str	r2, [r3, #0]
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	20004388 	.word	0x20004388
 80018d4:	20007f88 	.word	0x20007f88
 80018d8:	20007f90 	.word	0x20007f90
 80018dc:	20007f98 	.word	0x20007f98
 80018e0:	20007f94 	.word	0x20007f94
 80018e4:	20007f9c 	.word	0x20007f9c

080018e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80018f0:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <prvInsertBlockIntoFreeList+0xac>)
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e002      	b.n	80018fc <prvInsertBlockIntoFreeList+0x14>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	d8f7      	bhi.n	80018f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	4413      	add	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	429a      	cmp	r2, r3
 8001916:	d108      	bne.n	800192a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	441a      	add	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	441a      	add	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d118      	bne.n	8001970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <prvInsertBlockIntoFreeList+0xb0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	429a      	cmp	r2, r3
 8001948:	d00d      	beq.n	8001966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	441a      	add	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e008      	b.n	8001978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <prvInsertBlockIntoFreeList+0xb0>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e003      	b.n	8001978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	d002      	beq.n	8001986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20007f88 	.word	0x20007f88
 8001998:	20007f90 	.word	0x20007f90

0800199c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80019aa:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80019ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019b0:	4904      	ldr	r1, [pc, #16]	@ (80019c4 <cubemx_transport_open+0x28>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f005 f958 	bl	8006c68 <HAL_UART_Receive_DMA>
    return true;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20007fa0 	.word	0x20007fa0

080019c8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80019d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f005 f96a 	bl	8006cb2 <HAL_UART_DMAStop>
    return true;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80019fc:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	d11c      	bne.n	8001a44 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f005 f8ac 	bl	8006b70 <HAL_UART_Transmit_DMA>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a1c:	e002      	b.n	8001a24 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f006 fc04 	bl	800822c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a24:	7cfb      	ldrb	r3, [r7, #19]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d105      	bne.n	8001a36 <cubemx_transport_write+0x4e>
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d1f3      	bne.n	8001a1e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001a36:	7cfb      	ldrb	r3, [r7, #19]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <cubemx_transport_write+0x58>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	e002      	b.n	8001a46 <cubemx_transport_write+0x5e>
 8001a40:	2300      	movs	r3, #0
 8001a42:	e000      	b.n	8001a46 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001a44:	2300      	movs	r3, #0
    }
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001a64:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6a:	b672      	cpsid	i
}
 8001a6c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <cubemx_transport_read+0x9c>)
 8001a7c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a7e:	b662      	cpsie	i
}
 8001a80:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f006 fbcf 	bl	800822c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001a8e:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <cubemx_transport_read+0xa0>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <cubemx_transport_read+0x9c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d103      	bne.n	8001aa2 <cubemx_transport_read+0x52>
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	dbe3      	blt.n	8001a6a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001aa6:	e011      	b.n	8001acc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <cubemx_transport_read+0xa0>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	440b      	add	r3, r1
 8001ab2:	4910      	ldr	r1, [pc, #64]	@ (8001af4 <cubemx_transport_read+0xa4>)
 8001ab4:	5c8a      	ldrb	r2, [r1, r2]
 8001ab6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <cubemx_transport_read+0xa0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8001af0 <cubemx_transport_read+0xa0>)
 8001ac4:	6013      	str	r3, [r2, #0]
        wrote++;
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <cubemx_transport_read+0xa0>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <cubemx_transport_read+0x9c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d003      	beq.n	8001ae0 <cubemx_transport_read+0x90>
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d3e3      	bcc.n	8001aa8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200087a4 	.word	0x200087a4
 8001af0:	200087a0 	.word	0x200087a0
 8001af4:	20007fa0 	.word	0x20007fa0

08001af8 <nexus_bringup>:
void nexus_bringup(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void nexus_bringup(void){
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start_IT(&htim6);
 8001afc:	4815      	ldr	r0, [pc, #84]	@ (8001b54 <nexus_bringup+0x5c>)
 8001afe:	f003 fed9 	bl	80058b4 <HAL_TIM_Base_Start_IT>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b02:	213c      	movs	r1, #60	@ 0x3c
 8001b04:	4814      	ldr	r0, [pc, #80]	@ (8001b58 <nexus_bringup+0x60>)
 8001b06:	f004 f90d 	bl	8005d24 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b0a:	213c      	movs	r1, #60	@ 0x3c
 8001b0c:	4813      	ldr	r0, [pc, #76]	@ (8001b5c <nexus_bringup+0x64>)
 8001b0e:	f004 f909 	bl	8005d24 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001b12:	213c      	movs	r1, #60	@ 0x3c
 8001b14:	4812      	ldr	r0, [pc, #72]	@ (8001b60 <nexus_bringup+0x68>)
 8001b16:	f004 f905 	bl	8005d24 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001b1a:	213c      	movs	r1, #60	@ 0x3c
 8001b1c:	4811      	ldr	r0, [pc, #68]	@ (8001b64 <nexus_bringup+0x6c>)
 8001b1e:	f004 f901 	bl	8005d24 <HAL_TIM_Encoder_Start>

	SONAR_Init(&sonar1, &huart5, 0x11);
 8001b22:	2211      	movs	r2, #17
 8001b24:	4910      	ldr	r1, [pc, #64]	@ (8001b68 <nexus_bringup+0x70>)
 8001b26:	4811      	ldr	r0, [pc, #68]	@ (8001b6c <nexus_bringup+0x74>)
 8001b28:	f7ff fcce 	bl	80014c8 <SONAR_Init>
	SONAR_Init(&sonar2, &huart5, 0x12);
 8001b2c:	2212      	movs	r2, #18
 8001b2e:	490e      	ldr	r1, [pc, #56]	@ (8001b68 <nexus_bringup+0x70>)
 8001b30:	480f      	ldr	r0, [pc, #60]	@ (8001b70 <nexus_bringup+0x78>)
 8001b32:	f7ff fcc9 	bl	80014c8 <SONAR_Init>
	SONAR_Init(&sonar3, &huart5, 0x13);
 8001b36:	2213      	movs	r2, #19
 8001b38:	490b      	ldr	r1, [pc, #44]	@ (8001b68 <nexus_bringup+0x70>)
 8001b3a:	480e      	ldr	r0, [pc, #56]	@ (8001b74 <nexus_bringup+0x7c>)
 8001b3c:	f7ff fcc4 	bl	80014c8 <SONAR_Init>
	SONAR_Init(&sonar4, &huart5, 0x14);
 8001b40:	2214      	movs	r2, #20
 8001b42:	4909      	ldr	r1, [pc, #36]	@ (8001b68 <nexus_bringup+0x70>)
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <nexus_bringup+0x80>)
 8001b46:	f7ff fcbf 	bl	80014c8 <SONAR_Init>

	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, NUM_WHEELS);

	//mpu_init();

	init_motors();
 8001b4a:	f7ff fa73 	bl	8001034 <init_motors>
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20008970 	.word	0x20008970
 8001b58:	20008850 	.word	0x20008850
 8001b5c:	200088e0 	.word	0x200088e0
 8001b60:	20008928 	.word	0x20008928
 8001b64:	200089b8 	.word	0x200089b8
 8001b68:	20008a00 	.word	0x20008a00
 8001b6c:	20008df0 	.word	0x20008df0
 8001b70:	20008e08 	.word	0x20008e08
 8001b74:	20008e20 	.word	0x20008e20
 8001b78:	20008e38 	.word	0x20008e38

08001b7c <init_int_multiarray_4>:

// Initializes an Int32MultiArray message with 4 fixed elements backed by a provided buffer
static void init_int_multiarray_4(std_msgs__msg__Int32MultiArray* m, int32_t* backing)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  std_msgs__msg__Int32MultiArray__init(m);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f00b fe14 	bl	800d7b4 <std_msgs__msg__Int32MultiArray__init>
  m->layout.dim.data = NULL; m->layout.dim.size = 0; m->layout.dim.capacity = 0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  m->layout.data_offset = 0;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	60da      	str	r2, [r3, #12]
  m->data.data = backing; m->data.size = 4; m->data.capacity = 4;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2204      	movs	r2, #4
 8001bae:	615a      	str	r2, [r3, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	619a      	str	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <init_float_multiarray_fixed>:

// Initializes a Float32MultiArray message with a fixed number (n) of elements backed by a provided buffer
static void init_float_multiarray_fixed(std_msgs__msg__Float32MultiArray* m, float* backing, size_t n)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	60f8      	str	r0, [r7, #12]
 8001bc6:	60b9      	str	r1, [r7, #8]
 8001bc8:	607a      	str	r2, [r7, #4]
  std_msgs__msg__Float32MultiArray__init(m);
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f00b fdc6 	bl	800d75c <std_msgs__msg__Float32MultiArray__init>
  m->layout.dim.data = NULL; m->layout.dim.size = 0; m->layout.dim.capacity = 0;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  m->layout.data_offset = 0;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
  m->data.data = backing; m->data.size = n; m->data.capacity = n;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	611a      	str	r2, [r3, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	615a      	str	r2, [r3, #20]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	619a      	str	r2, [r3, #24]
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <now_nanos>:

// Returns the current time in nanoseconds
// Uses synchronized micro-ROS epoch time if available, otherwise falls back to local HAL tick count
static inline uint64_t now_nanos(void)
{
 8001c02:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
  // Use Agent-synced time if available; fallback to local
  uint64_t t = rmw_uros_epoch_nanos();
 8001c0a:	f00a fae5 	bl	800c1d8 <rmw_uros_epoch_nanos>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (t == 0) {
 8001c16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	d141      	bne.n	8001ca2 <now_nanos+0xa0>
    // fallback: convert HAL_GetTick() ms to ns
    t = (uint64_t)HAL_GetTick() * 1000000ULL;
 8001c1e:	f001 ffef 	bl	8003c00 <HAL_GetTick>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2200      	movs	r2, #0
 8001c26:	469a      	mov	sl, r3
 8001c28:	4693      	mov	fp, r2
 8001c2a:	4652      	mov	r2, sl
 8001c2c:	465b      	mov	r3, fp
 8001c2e:	f04f 0000 	mov.w	r0, #0
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	0159      	lsls	r1, r3, #5
 8001c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3c:	0150      	lsls	r0, r2, #5
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	ebb2 040a 	subs.w	r4, r2, sl
 8001c46:	eb63 050b 	sbc.w	r5, r3, fp
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	026b      	lsls	r3, r5, #9
 8001c54:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001c58:	0262      	lsls	r2, r4, #9
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	eb14 080a 	adds.w	r8, r4, sl
 8001c62:	eb45 090b 	adc.w	r9, r5, fp
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c7a:	ebb2 0108 	subs.w	r1, r2, r8
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	eb63 0309 	sbc.w	r3, r3, r9
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	eb13 030a 	adds.w	r3, r3, sl
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	4613      	mov	r3, r2
 8001c94:	eb43 030b 	adc.w	r3, r3, fp
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c9e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }
  return t;
 8001ca2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cb8:	f001 ff6c 	bl	8003b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cbc:	f000 f82e 	bl	8001d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc0:	f000 fb50 	bl	8002364 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cc4:	f000 fb10 	bl	80022e8 <MX_DMA_Init>
  MX_TIM1_Init();
 8001cc8:	f000 f896 	bl	8001df8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001ccc:	f000 f982 	bl	8001fd4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001cd0:	f000 f9d4 	bl	800207c <MX_TIM4_Init>
  MX_TIM8_Init();
 8001cd4:	f000 fa5c 	bl	8002190 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8001cd8:	f000 fadc 	bl	8002294 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001cdc:	f000 f8e4 	bl	8001ea8 <MX_TIM2_Init>
  MX_UART5_Init();
 8001ce0:	f000 faae 	bl	8002240 <MX_UART5_Init>
  //MX_ADC1_Init();
  MX_TIM6_Init();
 8001ce4:	f000 fa1e 	bl	8002124 <MX_TIM6_Init>
  //MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  nexus_bringup();
 8001ce8:	f7ff ff06 	bl	8001af8 <nexus_bringup>
  HAL_Delay(2000);
 8001cec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001cf0:	f001 ff92 	bl	8003c18 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cf4:	f006 f9be 	bl	8008074 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001cf8:	4a05      	ldr	r2, [pc, #20]	@ (8001d10 <main+0x5c>)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <main+0x60>)
 8001cfe:	f006 fa03 	bl	8008108 <osThreadNew>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <main+0x64>)
 8001d06:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d08:	f006 f9d8 	bl	80080bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <main+0x58>
 8001d10:	0801d0b8 	.word	0x0801d0b8
 8001d14:	080028c9 	.word	0x080028c9
 8001d18:	20008b50 	.word	0x20008b50

08001d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b094      	sub	sp, #80	@ 0x50
 8001d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	2234      	movs	r2, #52	@ 0x34
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f01a f9bc 	bl	801c0a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d30:	f107 0308 	add.w	r3, r7, #8
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	4b2a      	ldr	r3, [pc, #168]	@ (8001df0 <SystemClock_Config+0xd4>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	4a29      	ldr	r2, [pc, #164]	@ (8001df0 <SystemClock_Config+0xd4>)
 8001d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <SystemClock_Config+0xd4>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <SystemClock_Config+0xd8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d68:	4a22      	ldr	r2, [pc, #136]	@ (8001df4 <SystemClock_Config+0xd8>)
 8001d6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <SystemClock_Config+0xd8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d80:	2301      	movs	r3, #1
 8001d82:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d84:	2310      	movs	r3, #16
 8001d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001d90:	2310      	movs	r3, #16
 8001d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d94:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d98:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001da2:	2302      	movs	r3, #2
 8001da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 fa94 	bl	80052d8 <HAL_RCC_OscConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001db6:	f001 f815 	bl	8002de4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dba:	230f      	movs	r3, #15
 8001dbc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dd0:	f107 0308 	add.w	r3, r7, #8
 8001dd4:	2102      	movs	r1, #2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f002 ff02 	bl	8004be0 <HAL_RCC_ClockConfig>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001de2:	f000 ffff 	bl	8002de4 <Error_Handler>
  }
}
 8001de6:	bf00      	nop
 8001de8:	3750      	adds	r7, #80	@ 0x50
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40007000 	.word	0x40007000

08001df8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	@ 0x30
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	2224      	movs	r2, #36	@ 0x24
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f01a f94e 	bl	801c0a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e14:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <MX_TIM1_Init+0xa8>)
 8001e16:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <MX_TIM1_Init+0xac>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <MX_TIM1_Init+0xa8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <MX_TIM1_Init+0xa8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e26:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <MX_TIM1_Init+0xa8>)
 8001e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <MX_TIM1_Init+0xa8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <MX_TIM1_Init+0xa8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <MX_TIM1_Init+0xa8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e40:	2303      	movs	r3, #3
 8001e42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <MX_TIM1_Init+0xa8>)
 8001e6c:	f003 feb4 	bl	8005bd8 <HAL_TIM_Encoder_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001e76:	f000 ffb5 	bl	8002de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4806      	ldr	r0, [pc, #24]	@ (8001ea0 <MX_TIM1_Init+0xa8>)
 8001e88:	f004 fd92 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001e92:	f000 ffa7 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	3730      	adds	r7, #48	@ 0x30
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20008850 	.word	0x20008850
 8001ea4:	40010000 	.word	0x40010000

08001ea8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	@ 0x38
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebc:	f107 0320 	add.w	r3, r7, #32
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	615a      	str	r2, [r3, #20]
 8001ed6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001eda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ede:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001eec:	4b38      	ldr	r3, [pc, #224]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001eee:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001ef2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef4:	4b36      	ldr	r3, [pc, #216]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001efa:	4b35      	ldr	r3, [pc, #212]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001efc:	2280      	movs	r2, #128	@ 0x80
 8001efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f00:	4833      	ldr	r0, [pc, #204]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001f02:	f003 fc87 	bl	8005814 <HAL_TIM_Base_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f0c:	f000 ff6a 	bl	8002de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	482c      	ldr	r0, [pc, #176]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001f1e:	f004 f941 	bl	80061a4 <HAL_TIM_ConfigClockSource>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f28:	f000 ff5c 	bl	8002de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f2c:	4828      	ldr	r0, [pc, #160]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001f2e:	f003 fd31 	bl	8005994 <HAL_TIM_PWM_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f38:	f000 ff54 	bl	8002de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f44:	f107 0320 	add.w	r3, r7, #32
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4821      	ldr	r0, [pc, #132]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001f4c:	f004 fd30 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f56:	f000 ff45 	bl	8002de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5a:	2360      	movs	r3, #96	@ 0x60
 8001f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4817      	ldr	r0, [pc, #92]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001f72:	f004 f855 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f7c:	f000 ff32 	bl	8002de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	2204      	movs	r2, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	4812      	ldr	r0, [pc, #72]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001f88:	f004 f84a 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001f92:	f000 ff27 	bl	8002de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	2208      	movs	r2, #8
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001f9e:	f004 f83f 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001fa8:	f000 ff1c 	bl	8002de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	220c      	movs	r2, #12
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4807      	ldr	r0, [pc, #28]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001fb4:	f004 f834 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001fbe:	f000 ff11 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fc2:	4803      	ldr	r0, [pc, #12]	@ (8001fd0 <MX_TIM2_Init+0x128>)
 8001fc4:	f001 fa20 	bl	8003408 <HAL_TIM_MspPostInit>

}
 8001fc8:	bf00      	nop
 8001fca:	3738      	adds	r7, #56	@ 0x38
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20008898 	.word	0x20008898

08001fd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	@ 0x30
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fda:	f107 030c 	add.w	r3, r7, #12
 8001fde:	2224      	movs	r2, #36	@ 0x24
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f01a f860 	bl	801c0a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ff0:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <MX_TIM3_Init+0xa0>)
 8001ff2:	4a21      	ldr	r2, [pc, #132]	@ (8002078 <MX_TIM3_Init+0xa4>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <MX_TIM3_Init+0xa0>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8002074 <MX_TIM3_Init+0xa0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002002:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <MX_TIM3_Init+0xa0>)
 8002004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002008:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200a:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <MX_TIM3_Init+0xa0>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002010:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <MX_TIM3_Init+0xa0>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002016:	2303      	movs	r3, #3
 8002018:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800201e:	2301      	movs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800202a:	2300      	movs	r3, #0
 800202c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800202e:	2301      	movs	r3, #1
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800203a:	f107 030c 	add.w	r3, r7, #12
 800203e:	4619      	mov	r1, r3
 8002040:	480c      	ldr	r0, [pc, #48]	@ (8002074 <MX_TIM3_Init+0xa0>)
 8002042:	f003 fdc9 	bl	8005bd8 <HAL_TIM_Encoder_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800204c:	f000 feca 	bl	8002de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4805      	ldr	r0, [pc, #20]	@ (8002074 <MX_TIM3_Init+0xa0>)
 800205e:	f004 fca7 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002068:	f000 febc 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	3730      	adds	r7, #48	@ 0x30
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200088e0 	.word	0x200088e0
 8002078:	40000400 	.word	0x40000400

0800207c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	@ 0x30
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002082:	f107 030c 	add.w	r3, r7, #12
 8002086:	2224      	movs	r2, #36	@ 0x24
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f01a f80c 	bl	801c0a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002098:	4b20      	ldr	r3, [pc, #128]	@ (800211c <MX_TIM4_Init+0xa0>)
 800209a:	4a21      	ldr	r2, [pc, #132]	@ (8002120 <MX_TIM4_Init+0xa4>)
 800209c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800209e:	4b1f      	ldr	r3, [pc, #124]	@ (800211c <MX_TIM4_Init+0xa0>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a4:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <MX_TIM4_Init+0xa0>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020aa:	4b1c      	ldr	r3, [pc, #112]	@ (800211c <MX_TIM4_Init+0xa0>)
 80020ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <MX_TIM4_Init+0xa0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b18      	ldr	r3, [pc, #96]	@ (800211c <MX_TIM4_Init+0xa0>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020be:	2303      	movs	r3, #3
 80020c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020c6:	2301      	movs	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020d6:	2301      	movs	r3, #1
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	4619      	mov	r1, r3
 80020e8:	480c      	ldr	r0, [pc, #48]	@ (800211c <MX_TIM4_Init+0xa0>)
 80020ea:	f003 fd75 	bl	8005bd8 <HAL_TIM_Encoder_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80020f4:	f000 fe76 	bl	8002de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	@ (800211c <MX_TIM4_Init+0xa0>)
 8002106:	f004 fc53 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002110:	f000 fe68 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */

}
 8002114:	bf00      	nop
 8002116:	3730      	adds	r7, #48	@ 0x30
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20008928 	.word	0x20008928
 8002120:	40000800 	.word	0x40000800

08002124 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212a:	463b      	mov	r3, r7
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <MX_TIM6_Init+0x64>)
 8002134:	4a15      	ldr	r2, [pc, #84]	@ (800218c <MX_TIM6_Init+0x68>)
 8002136:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8002138:	4b13      	ldr	r3, [pc, #76]	@ (8002188 <MX_TIM6_Init+0x64>)
 800213a:	2253      	movs	r2, #83	@ 0x53
 800213c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213e:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <MX_TIM6_Init+0x64>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002144:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <MX_TIM6_Init+0x64>)
 8002146:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800214a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214c:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <MX_TIM6_Init+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002152:	480d      	ldr	r0, [pc, #52]	@ (8002188 <MX_TIM6_Init+0x64>)
 8002154:	f003 fb5e 	bl	8005814 <HAL_TIM_Base_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800215e:	f000 fe41 	bl	8002de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800216a:	463b      	mov	r3, r7
 800216c:	4619      	mov	r1, r3
 800216e:	4806      	ldr	r0, [pc, #24]	@ (8002188 <MX_TIM6_Init+0x64>)
 8002170:	f004 fc1e 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800217a:	f000 fe33 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20008970 	.word	0x20008970
 800218c:	40001000 	.word	0x40001000

08002190 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08c      	sub	sp, #48	@ 0x30
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	2224      	movs	r2, #36	@ 0x24
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f019 ff82 	bl	801c0a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021ac:	4b22      	ldr	r3, [pc, #136]	@ (8002238 <MX_TIM8_Init+0xa8>)
 80021ae:	4a23      	ldr	r2, [pc, #140]	@ (800223c <MX_TIM8_Init+0xac>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80021b2:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <MX_TIM8_Init+0xa8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <MX_TIM8_Init+0xa8>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <MX_TIM8_Init+0xa8>)
 80021c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021c4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002238 <MX_TIM8_Init+0xa8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <MX_TIM8_Init+0xa8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d2:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <MX_TIM8_Init+0xa8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021d8:	2303      	movs	r3, #3
 80021da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021e0:	2301      	movs	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80021fc:	f107 030c 	add.w	r3, r7, #12
 8002200:	4619      	mov	r1, r3
 8002202:	480d      	ldr	r0, [pc, #52]	@ (8002238 <MX_TIM8_Init+0xa8>)
 8002204:	f003 fce8 	bl	8005bd8 <HAL_TIM_Encoder_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800220e:	f000 fde9 	bl	8002de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4806      	ldr	r0, [pc, #24]	@ (8002238 <MX_TIM8_Init+0xa8>)
 8002220:	f004 fbc6 	bl	80069b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800222a:	f000 fddb 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800222e:	bf00      	nop
 8002230:	3730      	adds	r7, #48	@ 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200089b8 	.word	0x200089b8
 800223c:	40010400 	.word	0x40010400

08002240 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <MX_UART5_Init+0x4c>)
 8002246:	4a12      	ldr	r2, [pc, #72]	@ (8002290 <MX_UART5_Init+0x50>)
 8002248:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <MX_UART5_Init+0x4c>)
 800224c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002250:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <MX_UART5_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <MX_UART5_Init+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800225e:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <MX_UART5_Init+0x4c>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b09      	ldr	r3, [pc, #36]	@ (800228c <MX_UART5_Init+0x4c>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b08      	ldr	r3, [pc, #32]	@ (800228c <MX_UART5_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <MX_UART5_Init+0x4c>)
 8002272:	2200      	movs	r2, #0
 8002274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002276:	4805      	ldr	r0, [pc, #20]	@ (800228c <MX_UART5_Init+0x4c>)
 8002278:	f004 fc2a 	bl	8006ad0 <HAL_UART_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002282:	f000 fdaf 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20008a00 	.word	0x20008a00
 8002290:	40005000 	.word	0x40005000

08002294 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 800229a:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <MX_USART2_UART_Init+0x50>)
 800229c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022a0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80022a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b09      	ldr	r3, [pc, #36]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	@ (80022e0 <MX_USART2_UART_Init+0x4c>)
 80022cc:	f004 fc00 	bl	8006ad0 <HAL_UART_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022d6:	f000 fd85 	bl	8002de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20008a48 	.word	0x20008a48
 80022e4:	40004400 	.word	0x40004400

080022e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <MX_DMA_Init+0x78>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002360 <MX_DMA_Init+0x78>)
 80022f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <MX_DMA_Init+0x78>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <MX_DMA_Init+0x78>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	4a13      	ldr	r2, [pc, #76]	@ (8002360 <MX_DMA_Init+0x78>)
 8002314:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002318:	6313      	str	r3, [r2, #48]	@ 0x30
 800231a:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <MX_DMA_Init+0x78>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2105      	movs	r1, #5
 800232a:	2010      	movs	r0, #16
 800232c:	f001 fe7e 	bl	800402c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002330:	2010      	movs	r0, #16
 8002332:	f001 fe97 	bl	8004064 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2105      	movs	r1, #5
 800233a:	2011      	movs	r0, #17
 800233c:	f001 fe76 	bl	800402c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002340:	2011      	movs	r0, #17
 8002342:	f001 fe8f 	bl	8004064 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2105      	movs	r1, #5
 800234a:	2038      	movs	r0, #56	@ 0x38
 800234c:	f001 fe6e 	bl	800402c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002350:	2038      	movs	r0, #56	@ 0x38
 8002352:	f001 fe87 	bl	8004064 <HAL_NVIC_EnableIRQ>

}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	@ 0x28
 8002368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]
 8002376:	60da      	str	r2, [r3, #12]
 8002378:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	4b3f      	ldr	r3, [pc, #252]	@ (800247c <MX_GPIO_Init+0x118>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4a3e      	ldr	r2, [pc, #248]	@ (800247c <MX_GPIO_Init+0x118>)
 8002384:	f043 0304 	orr.w	r3, r3, #4
 8002388:	6313      	str	r3, [r2, #48]	@ 0x30
 800238a:	4b3c      	ldr	r3, [pc, #240]	@ (800247c <MX_GPIO_Init+0x118>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	4b38      	ldr	r3, [pc, #224]	@ (800247c <MX_GPIO_Init+0x118>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a37      	ldr	r2, [pc, #220]	@ (800247c <MX_GPIO_Init+0x118>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b35      	ldr	r3, [pc, #212]	@ (800247c <MX_GPIO_Init+0x118>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	4b31      	ldr	r3, [pc, #196]	@ (800247c <MX_GPIO_Init+0x118>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4a30      	ldr	r2, [pc, #192]	@ (800247c <MX_GPIO_Init+0x118>)
 80023bc:	f043 0302 	orr.w	r3, r3, #2
 80023c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c2:	4b2e      	ldr	r3, [pc, #184]	@ (800247c <MX_GPIO_Init+0x118>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <MX_GPIO_Init+0x118>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a29      	ldr	r2, [pc, #164]	@ (800247c <MX_GPIO_Init+0x118>)
 80023d8:	f043 0308 	orr.w	r3, r3, #8
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b27      	ldr	r3, [pc, #156]	@ (800247c <MX_GPIO_Init+0x118>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 80023ea:	2200      	movs	r2, #0
 80023ec:	f640 413f 	movw	r1, #3135	@ 0xc3f
 80023f0:	4823      	ldr	r0, [pc, #140]	@ (8002480 <MX_GPIO_Init+0x11c>)
 80023f2:	f002 fbdb 	bl	8004bac <HAL_GPIO_WritePin>
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RL_VDD_GPO_Pin|FL_VDD_GPO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RR_INA_GPO_Pin|FR_INB_GPO_Pin, GPIO_PIN_RESET);
 80023f6:	2200      	movs	r2, #0
 80023f8:	f242 0120 	movw	r1, #8224	@ 0x2020
 80023fc:	4821      	ldr	r0, [pc, #132]	@ (8002484 <MX_GPIO_Init+0x120>)
 80023fe:	f002 fbd5 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RR_VDD_GPO_Pin|FR_VDD_GPO_Pin, GPIO_PIN_SET);
 8002402:	2201      	movs	r2, #1
 8002404:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002408:	481d      	ldr	r0, [pc, #116]	@ (8002480 <MX_GPIO_Init+0x11c>)
 800240a:	f002 fbcf 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FR_INA_GPO_GPIO_Port, FR_INA_GPO_Pin, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002414:	481c      	ldr	r0, [pc, #112]	@ (8002488 <MX_GPIO_Init+0x124>)
 8002416:	f002 fbc9 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FL_INA_GPO_Pin FL_INB_GPO_Pin RL_INB_GPO_Pin RL_INA_GPO_Pin
                           RR_INB_GPO_Pin Ultrasonic_DE_RE_Pin RR_VDD_GPO_Pin FR_VDD_GPO_Pin
                           RL_VDD_GPO_Pin FL_VDD_GPO_Pin */
  GPIO_InitStruct.Pin = FL_INA_GPO_Pin|FL_INB_GPO_Pin|RL_INB_GPO_Pin|RL_INA_GPO_Pin
 800241a:	f640 733f 	movw	r3, #3903	@ 0xf3f
 800241e:	617b      	str	r3, [r7, #20]
                          |RR_INB_GPO_Pin|Ultrasonic_DE_RE_Pin|RR_VDD_GPO_Pin|FR_VDD_GPO_Pin
                          |RL_VDD_GPO_Pin|FL_VDD_GPO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	2301      	movs	r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	4813      	ldr	r0, [pc, #76]	@ (8002480 <MX_GPIO_Init+0x11c>)
 8002434:	f002 fa26 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_INA_GPO_Pin FR_INB_GPO_Pin */
  GPIO_InitStruct.Pin = RR_INA_GPO_Pin|FR_INB_GPO_Pin;
 8002438:	f242 0320 	movw	r3, #8224	@ 0x2020
 800243c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243e:	2301      	movs	r3, #1
 8002440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <MX_GPIO_Init+0x120>)
 8002452:	f002 fa17 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : FR_INA_GPO_Pin */
  GPIO_InitStruct.Pin = FR_INA_GPO_Pin;
 8002456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800245a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800245c:	2301      	movs	r3, #1
 800245e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FR_INA_GPO_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	4806      	ldr	r0, [pc, #24]	@ (8002488 <MX_GPIO_Init+0x124>)
 8002470:	f002 fa08 	bl	8004884 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002474:	bf00      	nop
 8002476:	3728      	adds	r7, #40	@ 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	40020800 	.word	0x40020800
 8002484:	40020400 	.word	0x40020400
 8002488:	40020000 	.word	0x40020000

0800248c <publish_motor_currents_and_faults>:
  m->data.data = backing; m->data.size = 4; m->data.capacity = 4;
}
*/

static void publish_motor_currents_and_faults(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
  for (int i=0;i<NUM_MOTORS;i++) {
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
 8002496:	e017      	b.n	80024c8 <publish_motor_currents_and_faults+0x3c>
    motor_currents_msg.data.data[i] = g_motor_current_A[i];
 8002498:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <publish_motor_currents_and_faults+0x60>)
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	4413      	add	r3, r2
 80024a2:	4913      	ldr	r1, [pc, #76]	@ (80024f0 <publish_motor_currents_and_faults+0x64>)
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	440a      	add	r2, r1
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	601a      	str	r2, [r3, #0]
    motor_faults_msg.data.data[i]   = g_motor_fault_flag[i];
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <publish_motor_currents_and_faults+0x68>)
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	490f      	ldr	r1, [pc, #60]	@ (80024f8 <publish_motor_currents_and_faults+0x6c>)
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80024c0:	601a      	str	r2, [r3, #0]
  for (int i=0;i<NUM_MOTORS;i++) {
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3301      	adds	r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	dde4      	ble.n	8002498 <publish_motor_currents_and_faults+0xc>
  }
  rcl_publish(&pub_motor_current, &motor_currents_msg, NULL);
 80024ce:	2200      	movs	r2, #0
 80024d0:	4906      	ldr	r1, [pc, #24]	@ (80024ec <publish_motor_currents_and_faults+0x60>)
 80024d2:	480a      	ldr	r0, [pc, #40]	@ (80024fc <publish_motor_currents_and_faults+0x70>)
 80024d4:	f008 fc3e 	bl	800ad54 <rcl_publish>
  rcl_publish(&pub_motor_fault,   &motor_faults_msg,   NULL);
 80024d8:	2200      	movs	r2, #0
 80024da:	4906      	ldr	r1, [pc, #24]	@ (80024f4 <publish_motor_currents_and_faults+0x68>)
 80024dc:	4808      	ldr	r0, [pc, #32]	@ (8002500 <publish_motor_currents_and_faults+0x74>)
 80024de:	f008 fc39 	bl	800ad54 <rcl_publish>
}
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000904c 	.word	0x2000904c
 80024f0:	20008e6c 	.word	0x20008e6c
 80024f4:	20009068 	.word	0x20009068
 80024f8:	20008e7c 	.word	0x20008e7c
 80024fc:	20008eb0 	.word	0x20008eb0
 8002500:	20008eb4 	.word	0x20008eb4
 8002504:	00000000 	.word	0x00000000

08002508 <publish_joint_state_from_encoders>:
*/

const float TICK_TO_RAD = (2.0 * M_PI) / (double)TICKS_PER_REV;

static void publish_joint_state_from_encoders(void)
{
 8002508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800250c:	b088      	sub	sp, #32
 800250e:	af00      	add	r7, sp, #0
  // Snapshot encoder deltas atomically
  int16_t delta[NUM_WHEELS];

  //__disable_irq();
	  delta[0] = __HAL_TIM_GET_COUNTER(&htim4);
 8002510:	4b59      	ldr	r3, [pc, #356]	@ (8002678 <publish_joint_state_from_encoders+0x170>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	b21b      	sxth	r3, r3
 8002518:	803b      	strh	r3, [r7, #0]
	  delta[1] = __HAL_TIM_GET_COUNTER(&htim1);
 800251a:	4b58      	ldr	r3, [pc, #352]	@ (800267c <publish_joint_state_from_encoders+0x174>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	b21b      	sxth	r3, r3
 8002522:	807b      	strh	r3, [r7, #2]
	  delta[2] = __HAL_TIM_GET_COUNTER(&htim3);
 8002524:	4b56      	ldr	r3, [pc, #344]	@ (8002680 <publish_joint_state_from_encoders+0x178>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	b21b      	sxth	r3, r3
 800252c:	80bb      	strh	r3, [r7, #4]
	  delta[3] = __HAL_TIM_GET_COUNTER(&htim8);
 800252e:	4b55      	ldr	r3, [pc, #340]	@ (8002684 <publish_joint_state_from_encoders+0x17c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	b21b      	sxth	r3, r3
 8002536:	80fb      	strh	r3, [r7, #6]
  //__enable_irq();

  // velocity in rad/s, position in rad (integrated)
  for (int i=0;i<NUM_WHEELS;i++) {
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
 800253c:	e06e      	b.n	800261c <publish_joint_state_from_encoders+0x114>
    double vel = ((double)delta[i]) * TICK_TO_RAD / (double)ENC_DT_S;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	3320      	adds	r3, #32
 8002544:	443b      	add	r3, r7
 8002546:	f933 3c20 	ldrsh.w	r3, [r3, #-32]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe f81a 	bl	8000584 <__aeabi_i2d>
 8002550:	4604      	mov	r4, r0
 8002552:	460d      	mov	r5, r1
 8002554:	4b4c      	ldr	r3, [pc, #304]	@ (8002688 <publish_joint_state_from_encoders+0x180>)
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe f826 	bl	80005a8 <__aeabi_f2d>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4620      	mov	r0, r4
 8002562:	4629      	mov	r1, r5
 8002564:	f7fe f878 	bl	8000658 <__aeabi_dmul>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	a33d      	add	r3, pc, #244	@ (adr r3, 8002668 <publish_joint_state_from_encoders+0x160>)
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f7fe f999 	bl	80008ac <__aeabi_ddiv>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    joint_msg.velocity.data[i] = vel;
 8002582:	4b42      	ldr	r3, [pc, #264]	@ (800268c <publish_joint_state_from_encoders+0x184>)
 8002584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	18d1      	adds	r1, r2, r3
 800258c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002590:	e9c1 2300 	strd	r2, r3, [r1]

    wheel_pos_rad[i] += ((double)delta[i]) * TICK_TO_RAD;
 8002594:	4a3e      	ldr	r2, [pc, #248]	@ (8002690 <publish_joint_state_from_encoders+0x188>)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	3320      	adds	r3, #32
 80025a6:	443b      	add	r3, r7
 80025a8:	f933 3c20 	ldrsh.w	r3, [r3, #-32]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ffe9 	bl	8000584 <__aeabi_i2d>
 80025b2:	4680      	mov	r8, r0
 80025b4:	4689      	mov	r9, r1
 80025b6:	4b34      	ldr	r3, [pc, #208]	@ (8002688 <publish_joint_state_from_encoders+0x180>)
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd fff5 	bl	80005a8 <__aeabi_f2d>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4640      	mov	r0, r8
 80025c4:	4649      	mov	r1, r9
 80025c6:	f7fe f847 	bl	8000658 <__aeabi_dmul>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4620      	mov	r0, r4
 80025d0:	4629      	mov	r1, r5
 80025d2:	f7fd fe8b 	bl	80002ec <__adddf3>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	482d      	ldr	r0, [pc, #180]	@ (8002690 <publish_joint_state_from_encoders+0x188>)
 80025dc:	69f9      	ldr	r1, [r7, #28]
 80025de:	00c9      	lsls	r1, r1, #3
 80025e0:	4401      	add	r1, r0
 80025e2:	e9c1 2300 	strd	r2, r3, [r1]
    joint_msg.position.data[i] = wheel_pos_rad[i];
 80025e6:	4b29      	ldr	r3, [pc, #164]	@ (800268c <publish_joint_state_from_encoders+0x184>)
 80025e8:	6a1a      	ldr	r2, [r3, #32]
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	18d1      	adds	r1, r2, r3
 80025f0:	4a27      	ldr	r2, [pc, #156]	@ (8002690 <publish_joint_state_from_encoders+0x188>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fc:	e9c1 2300 	strd	r2, r3, [r1]

    joint_msg.effort.data[i] = 0.0;
 8002600:	4b22      	ldr	r3, [pc, #136]	@ (800268c <publish_joint_state_from_encoders+0x184>)
 8002602:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	18d1      	adds	r1, r2, r3
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	e9c1 2300 	strd	r2, r3, [r1]
  for (int i=0;i<NUM_WHEELS;i++) {
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3301      	adds	r3, #1
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b03      	cmp	r3, #3
 8002620:	dd8d      	ble.n	800253e <publish_joint_state_from_encoders+0x36>
  }

  uint64_t t = now_nanos();
 8002622:	f7ff faee 	bl	8001c02 <now_nanos>
 8002626:	e9c7 0104 	strd	r0, r1, [r7, #16]
  joint_msg.header.stamp.sec     = (int32_t)(t / 1000000000ULL);
 800262a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800262e:	a310      	add	r3, pc, #64	@ (adr r3, 8002670 <publish_joint_state_from_encoders+0x168>)
 8002630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002634:	f7fe fa9a 	bl	8000b6c <__aeabi_uldivmod>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <publish_joint_state_from_encoders+0x184>)
 800263e:	601a      	str	r2, [r3, #0]
  joint_msg.header.stamp.nanosec = (uint32_t)(t % 1000000000ULL);
 8002640:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002644:	a30a      	add	r3, pc, #40	@ (adr r3, 8002670 <publish_joint_state_from_encoders+0x168>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fe fa8f 	bl	8000b6c <__aeabi_uldivmod>
 800264e:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <publish_joint_state_from_encoders+0x184>)
 8002650:	605a      	str	r2, [r3, #4]
  // frame_id is typically empty for JointState; leave default

  rcl_publish(&pub_joint, &joint_msg, NULL);
 8002652:	2200      	movs	r2, #0
 8002654:	490d      	ldr	r1, [pc, #52]	@ (800268c <publish_joint_state_from_encoders+0x184>)
 8002656:	480f      	ldr	r0, [pc, #60]	@ (8002694 <publish_joint_state_from_encoders+0x18c>)
 8002658:	f008 fb7c 	bl	800ad54 <rcl_publish>
}
 800265c:	bf00      	nop
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002666:	bf00      	nop
 8002668:	e0000000 	.word	0xe0000000
 800266c:	3f50624d 	.word	0x3f50624d
 8002670:	3b9aca00 	.word	0x3b9aca00
 8002674:	00000000 	.word	0x00000000
 8002678:	20008928 	.word	0x20008928
 800267c:	20008850 	.word	0x20008850
 8002680:	200088e0 	.word	0x200088e0
 8002684:	200089b8 	.word	0x200089b8
 8002688:	3b060a92 	.word	0x3b060a92
 800268c:	20009008 	.word	0x20009008
 8002690:	20009088 	.word	0x20009088
 8002694:	20008eac 	.word	0x20008eac

08002698 <wheel_cmd_cb>:
  return m->accum;
}
*/

// Commands: [vx_mmps, vy_mmps, wz_radps]
static void wheel_cmd_cb(const void * msgin) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  const std_msgs__msg__Float32MultiArray *m = msgin;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	60fb      	str	r3, [r7, #12]

  // Enforce exactly 3 values; ignore partial/empty messages
  if (m->data.size != 3) {
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d116      	bne.n	80026da <wheel_cmd_cb+0x42>
    // Optional: record a diagnostic counter here
    return;
  }

  last_cmd[0] = m->data.data[0];
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a0c      	ldr	r2, [pc, #48]	@ (80026e4 <wheel_cmd_cb+0x4c>)
 80026b4:	6013      	str	r3, [r2, #0]
  last_cmd[1] = m->data.data[1];
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <wheel_cmd_cb+0x4c>)
 80026be:	6053      	str	r3, [r2, #4]
  last_cmd[2] = m->data.data[2];
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4a07      	ldr	r2, [pc, #28]	@ (80026e4 <wheel_cmd_cb+0x4c>)
 80026c8:	6093      	str	r3, [r2, #8]
  last_cmd_stamp_ns = now_nanos();
 80026ca:	f7ff fa9a 	bl	8001c02 <now_nanos>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4905      	ldr	r1, [pc, #20]	@ (80026e8 <wheel_cmd_cb+0x50>)
 80026d4:	e9c1 2300 	strd	r2, r3, [r1]
 80026d8:	e000      	b.n	80026dc <wheel_cmd_cb+0x44>
    return;
 80026da:	bf00      	nop

}
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20008c18 	.word	0x20008c18
 80026e8:	20008c28 	.word	0x20008c28

080026ec <cfg_cb>:

// Ramp config: [v_step_mmps, wz_step_radps]
static void cfg_cb(const void * msgin)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__Float32MultiArray *m =
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	617b      	str	r3, [r7, #20]
      (const std_msgs__msg__Float32MultiArray *)msgin;

  float vstep  = (m->data.size >= 1) ? m->data.data[0] : g_v_step_mmps;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <cfg_cb+0x1c>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	e001      	b.n	800270c <cfg_cb+0x20>
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <cfg_cb+0x4c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	613b      	str	r3, [r7, #16]
  float wzstep = (m->data.size >= 2) ? m->data.data[1] : g_wz_step_radps;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d903      	bls.n	800271e <cfg_cb+0x32>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	e001      	b.n	8002722 <cfg_cb+0x36>
 800271e:	4b07      	ldr	r3, [pc, #28]	@ (800273c <cfg_cb+0x50>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]
  ctrlparams_set_steps(vstep, wzstep);
 8002724:	edd7 0a03 	vldr	s1, [r7, #12]
 8002728:	ed97 0a04 	vldr	s0, [r7, #16]
 800272c:	f7fe fbb4 	bl	8000e98 <ctrlparams_set_steps>
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <timer_cb>:

// 100 Hz executor timer
static void timer_cb(rcl_timer_t * t, int64_t) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	e9c7 2300 	strd	r2, r3, [r7]
  /*
  const uint64_t now = now_nanos();
  const uint64_t CMD_TIMEOUT_NS = 200ULL * 1000ULL * 1000ULL; // 200 ms
*/

  float vx = last_cmd[0], vy = last_cmd[1], wz = last_cmd[2];
 800274c:	4b17      	ldr	r3, [pc, #92]	@ (80027ac <timer_cb+0x6c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	4b16      	ldr	r3, [pc, #88]	@ (80027ac <timer_cb+0x6c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <timer_cb+0x6c>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	613b      	str	r3, [r7, #16]
  //if (!cmd_is_fresh(now, CMD_TIMEOUT_NS)) {
     //vx = vy = wz = 0.0f;
  //}
   */

  Mecanum_Control(vx, vy, wz);
 800275e:	ed97 1a04 	vldr	s2, [r7, #16]
 8002762:	edd7 0a05 	vldr	s1, [r7, #20]
 8002766:	ed97 0a06 	vldr	s0, [r7, #24]
 800276a:	f7fe fce1 	bl	8001130 <Mecanum_Control>

  for (int i = 0; i < 4; ++i) ccr_data[i] = g_ccr_applied[i];
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e00a      	b.n	800278a <timer_cb+0x4a>
 8002774:	4a0e      	ldr	r2, [pc, #56]	@ (80027b0 <timer_cb+0x70>)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800277c:	490d      	ldr	r1, [pc, #52]	@ (80027b4 <timer_cb+0x74>)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	3301      	adds	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	2b03      	cmp	r3, #3
 800278e:	ddf1      	ble.n	8002774 <timer_cb+0x34>
  (void)rcl_publish(&pub_ccr, &msg_ccr, NULL);
 8002790:	2200      	movs	r2, #0
 8002792:	4909      	ldr	r1, [pc, #36]	@ (80027b8 <timer_cb+0x78>)
 8002794:	4809      	ldr	r0, [pc, #36]	@ (80027bc <timer_cb+0x7c>)
 8002796:	f008 fadd 	bl	800ad54 <rcl_publish>

  //sonar_service_and_publish();
  publish_motor_currents_and_faults();
 800279a:	f7ff fe77 	bl	800248c <publish_motor_currents_and_faults>
  publish_joint_state_from_encoders();
 800279e:	f7ff feb3 	bl	8002508 <publish_joint_state_from_encoders>
}
 80027a2:	bf00      	nop
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20008c18 	.word	0x20008c18
 80027b0:	2000436c 	.word	0x2000436c
 80027b4:	20008c70 	.word	0x20008c70
 80027b8:	20008c54 	.word	0x20008c54
 80027bc:	20008c50 	.word	0x20008c50

080027c0 <HAL_ADC_ConvCpltCallback>:

// ----------------- Nexus Part -----------------

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a04      	ldr	r2, [pc, #16]	@ (80027e0 <HAL_ADC_ConvCpltCallback+0x20>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_ConvCpltCallback+0x16>
    {
        Process_Motor_Currents();
 80027d2:	f000 f807 	bl	80027e4 <Process_Motor_Currents>
    }
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40012000 	.word	0x40012000

080027e4 <Process_Motor_Currents>:

void Process_Motor_Currents(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
	  for (int i = 0; i < NUM_MOTORS; i++) {
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e052      	b.n	8002896 <Process_Motor_Currents+0xb2>

		float vADC = (adcBuffer[i] / ADC_RESOLUTION) * ADC_REF_VOLTAGE;
 80027f0:	4a2d      	ldr	r2, [pc, #180]	@ (80028a8 <Process_Motor_Currents+0xc4>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f8:	ee07 3a90 	vmov	s15, r3
 80027fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002800:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80028ac <Process_Motor_Currents+0xc8>
 8002804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002808:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80028b0 <Process_Motor_Currents+0xcc>
 800280c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002810:	edc7 7a04 	vstr	s15, [r7, #16]
		float vCS  = vADC * VOLTAGE_DIVIDER_GAIN;
 8002814:	edd7 7a04 	vldr	s15, [r7, #16]
 8002818:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 800281c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002820:	edc7 7a03 	vstr	s15, [r7, #12]
		float iSense = vCS / R_SENSE;
 8002824:	ed97 7a03 	vldr	s14, [r7, #12]
 8002828:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80028b4 <Process_Motor_Currents+0xd0>
 800282c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002830:	edc7 7a02 	vstr	s15, [r7, #8]
		float iMotor = iSense * K_SENSE;
 8002834:	edd7 7a02 	vldr	s15, [r7, #8]
 8002838:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80028b8 <Process_Motor_Currents+0xd4>
 800283c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002840:	edc7 7a01 	vstr	s15, [r7, #4]

		g_motor_current_A[i] = iMotor;               // <-- store for ROS timer
 8002844:	4a1d      	ldr	r2, [pc, #116]	@ (80028bc <Process_Motor_Currents+0xd8>)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	601a      	str	r2, [r3, #0]
		if (iMotor > STALL_CURRENT) {
 8002850:	edd7 7a01 	vldr	s15, [r7, #4]
 8002854:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	dd0c      	ble.n	800287c <Process_Motor_Currents+0x98>
		  motorFaultFlags[i] = 1;
 8002862:	4a17      	ldr	r2, [pc, #92]	@ (80028c0 <Process_Motor_Currents+0xdc>)
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	4413      	add	r3, r2
 8002868:	2201      	movs	r2, #1
 800286a:	701a      	strb	r2, [r3, #0]
		  g_motor_fault_flag[i] = 1;                 // mirror for ROS
 800286c:	4a15      	ldr	r2, [pc, #84]	@ (80028c4 <Process_Motor_Currents+0xe0>)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2101      	movs	r1, #1
 8002872:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  Emergency_Stop();
 8002876:	f7fe fe01 	bl	800147c <Emergency_Stop>
 800287a:	e009      	b.n	8002890 <Process_Motor_Currents+0xac>
		} else {
		  motorFaultFlags[i] = 0;
 800287c:	4a10      	ldr	r2, [pc, #64]	@ (80028c0 <Process_Motor_Currents+0xdc>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	4413      	add	r3, r2
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
		  g_motor_fault_flag[i] = 0;
 8002886:	4a0f      	ldr	r2, [pc, #60]	@ (80028c4 <Process_Motor_Currents+0xe0>)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2100      	movs	r1, #0
 800288c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (int i = 0; i < NUM_MOTORS; i++) {
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3301      	adds	r3, #1
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b03      	cmp	r3, #3
 800289a:	dda9      	ble.n	80027f0 <Process_Motor_Currents+0xc>
		}
	  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	3718      	adds	r7, #24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20008e50 	.word	0x20008e50
 80028ac:	457ff000 	.word	0x457ff000
 80028b0:	40533333 	.word	0x40533333
 80028b4:	447a0000 	.word	0x447a0000
 80028b8:	45dac000 	.word	0x45dac000
 80028bc:	20008e6c 	.word	0x20008e6c
 80028c0:	20008e60 	.word	0x20008e60
 80028c4:	20008e7c 	.word	0x20008e7c

080028c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b0d5      	sub	sp, #340	@ 0x154
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80028d6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

	/* -------- transport -------- */
	  rmw_uros_set_custom_transport(
 80028d8:	4b99      	ldr	r3, [pc, #612]	@ (8002b40 <StartDefaultTask+0x278>)
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	4b99      	ldr	r3, [pc, #612]	@ (8002b44 <StartDefaultTask+0x27c>)
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4b99      	ldr	r3, [pc, #612]	@ (8002b48 <StartDefaultTask+0x280>)
 80028e2:	4a9a      	ldr	r2, [pc, #616]	@ (8002b4c <StartDefaultTask+0x284>)
 80028e4:	499a      	ldr	r1, [pc, #616]	@ (8002b50 <StartDefaultTask+0x288>)
 80028e6:	2001      	movs	r0, #1
 80028e8:	f009 fa5e 	bl	800bda8 <rmw_uros_set_custom_transport>
	      true, (void *)&huart2,
	      cubemx_transport_open, cubemx_transport_close,
	      cubemx_transport_write, cubemx_transport_read);

	  /* -------- allocators -------- */
	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80028ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028f0:	4618      	mov	r0, r3
 80028f2:	f009 f97f 	bl	800bbf4 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate      = microros_allocate;
 80028f6:	4b97      	ldr	r3, [pc, #604]	@ (8002b54 <StartDefaultTask+0x28c>)
 80028f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	  freeRTOS_allocator.deallocate    = microros_deallocate;
 80028fc:	4b96      	ldr	r3, [pc, #600]	@ (8002b58 <StartDefaultTask+0x290>)
 80028fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	  freeRTOS_allocator.reallocate    = microros_reallocate;
 8002902:	4b96      	ldr	r3, [pc, #600]	@ (8002b5c <StartDefaultTask+0x294>)
 8002904:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8002908:	4b95      	ldr	r3, [pc, #596]	@ (8002b60 <StartDefaultTask+0x298>)
 800290a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	  rcl_ret_t rc4 =  rcutils_set_default_allocator(&freeRTOS_allocator);
 800290e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002912:	4618      	mov	r0, r3
 8002914:	f009 f98a 	bl	800bc2c <rcutils_set_default_allocator>
 8002918:	4603      	mov	r3, r0
 800291a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	  if (rc4 != RCL_RET_OK) { /* Error handle */ }

	  /* -------- wait for agent (~5 s) -------- */
	  for (int i = 0; i < 50; ++i) {
 800291e:	2300      	movs	r3, #0
 8002920:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002924:	e00e      	b.n	8002944 <StartDefaultTask+0x7c>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 8002926:	2101      	movs	r1, #1
 8002928:	2064      	movs	r0, #100	@ 0x64
 800292a:	f009 fa53 	bl	800bdd4 <rmw_uros_ping_agent>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00c      	beq.n	800294e <StartDefaultTask+0x86>
	    osDelay(100);
 8002934:	2064      	movs	r0, #100	@ 0x64
 8002936:	f005 fc79 	bl	800822c <osDelay>
	  for (int i = 0; i < 50; ++i) {
 800293a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800293e:	3301      	adds	r3, #1
 8002940:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002944:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8002948:	2b31      	cmp	r3, #49	@ 0x31
 800294a:	ddec      	ble.n	8002926 <StartDefaultTask+0x5e>
 800294c:	e000      	b.n	8002950 <StartDefaultTask+0x88>
	    if (rmw_uros_ping_agent(100, 1) == RMW_RET_OK) break;
 800294e:	bf00      	nop
	  }

	  /* -------- micro-ROS graph -------- */
	  rclc_support_t support;
	  rcl_allocator_t allocator = rcl_get_default_allocator();
 8002950:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002954:	4618      	mov	r0, r3
 8002956:	f009 f95b 	bl	800bc10 <rcutils_get_default_allocator>
	  rclc_support_init(&support, 0, NULL, &allocator);
 800295a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800295e:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	f009 f81d 	bl	800b9a4 <rclc_support_init>

	  rcl_node_t node_base_controller;
	  rclc_node_init_default(&node_base_controller, "base_controller", "", &support);
 800296a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800296e:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8002972:	4a7c      	ldr	r2, [pc, #496]	@ (8002b64 <StartDefaultTask+0x29c>)
 8002974:	497c      	ldr	r1, [pc, #496]	@ (8002b68 <StartDefaultTask+0x2a0>)
 8002976:	f009 f85f 	bl	800ba38 <rclc_node_init_default>

	  rcl_node_t node;
	  rclc_node_init_default(&node, "mpu6050_node", "", &support);
 800297a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800297e:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8002982:	4a78      	ldr	r2, [pc, #480]	@ (8002b64 <StartDefaultTask+0x29c>)
 8002984:	4979      	ldr	r1, [pc, #484]	@ (8002b6c <StartDefaultTask+0x2a4>)
 8002986:	f009 f857 	bl	800ba38 <rclc_node_init_default>

	  /* -------- publishers -------- */
	  rclc_publisher_init_default(
 800298a:	f00a f991 	bl	800ccb0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>
 800298e:	4602      	mov	r2, r0
 8002990:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8002994:	4b76      	ldr	r3, [pc, #472]	@ (8002b70 <StartDefaultTask+0x2a8>)
 8002996:	4877      	ldr	r0, [pc, #476]	@ (8002b74 <StartDefaultTask+0x2ac>)
 8002998:	f009 f88a 	bl	800bab0 <rclc_publisher_init_default>
	      &pub_imu, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Imu),
	      "imu/data_raw");

	  rclc_publisher_init_default(
 800299c:	f00a f9d0 	bl	800cd40 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80029a6:	4b74      	ldr	r3, [pc, #464]	@ (8002b78 <StartDefaultTask+0x2b0>)
 80029a8:	4874      	ldr	r0, [pc, #464]	@ (8002b7c <StartDefaultTask+0x2b4>)
 80029aa:	f009 f881 	bl	800bab0 <rclc_publisher_init_default>
	      &pub_temp, &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Temperature),
	      "imu/temperature");

	  // Use sensor_data QoS for fast sensors
	  rcl_publisher_options_t qos_sensor = rcl_publisher_get_default_options();
 80029ae:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029b2:	4618      	mov	r0, r3
 80029b4:	f008 f9a6 	bl	800ad04 <rcl_publisher_get_default_options>
	  qos_sensor.qos = rmw_qos_profile_sensor_data;
 80029b8:	4a71      	ldr	r2, [pc, #452]	@ (8002b80 <StartDefaultTask+0x2b8>)
 80029ba:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029be:	4611      	mov	r1, r2
 80029c0:	2250      	movs	r2, #80	@ 0x50
 80029c2:	4618      	mov	r0, r3
 80029c4:	f019 fc4b 	bl	801c25e <memcpy>

	  // ---- SONAR publishers (4x range + 4x temp) ----
	  for (int i=0; i<NUM_SONARS; ++i) {
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80029ce:	e03c      	b.n	8002a4a <StartDefaultTask+0x182>
	    char topic_rng[32];  snprintf(topic_rng, sizeof(topic_rng), "sonar/%d/range", i+1);
 80029d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80029d4:	3301      	adds	r3, #1
 80029d6:	f107 0008 	add.w	r0, r7, #8
 80029da:	4a6a      	ldr	r2, [pc, #424]	@ (8002b84 <StartDefaultTask+0x2bc>)
 80029dc:	2120      	movs	r1, #32
 80029de:	f019 f9ef 	bl	801bdc0 <sniprintf>
	    rcl_publisher_init(&pub_sonar_range[i], &node_base_controller,
 80029e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4a67      	ldr	r2, [pc, #412]	@ (8002b88 <StartDefaultTask+0x2c0>)
 80029ea:	189c      	adds	r4, r3, r2
 80029ec:	f00a f990 	bl	800cd10 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range>
 80029f0:	f107 0208 	add.w	r2, r7, #8
 80029f4:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80029f8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	4602      	mov	r2, r0
 8002a02:	4620      	mov	r0, r4
 8002a04:	f008 f8e6 	bl	800abd4 <rcl_publisher_init>
	        ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Range), topic_rng, &qos_sensor);

	    char topic_tmp[40];  snprintf(topic_tmp, sizeof(topic_tmp), "sonar/%d/temperature", i+1);
 8002a08:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002a12:	4a5e      	ldr	r2, [pc, #376]	@ (8002b8c <StartDefaultTask+0x2c4>)
 8002a14:	2128      	movs	r1, #40	@ 0x28
 8002a16:	f019 f9d3 	bl	801bdc0 <sniprintf>
	    rcl_publisher_init(&pub_sonar_temp[i], &node_base_controller,
 8002a1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4a5b      	ldr	r2, [pc, #364]	@ (8002b90 <StartDefaultTask+0x2c8>)
 8002a22:	189c      	adds	r4, r3, r2
 8002a24:	f00a f98c 	bl	800cd40 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>
 8002a28:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002a2c:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8002a30:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f008 f8ca 	bl	800abd4 <rcl_publisher_init>
	  for (int i=0; i<NUM_SONARS; ++i) {
 8002a40:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002a44:	3301      	adds	r3, #1
 8002a46:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002a4a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	ddbe      	ble.n	80029d0 <StartDefaultTask+0x108>
	        ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Temperature), topic_tmp, &qos_sensor);
	  }

	  // Pre-fill constant fields & frame_ids
	  for (int i=0; i<NUM_SONARS; ++i) {
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002a58:	e05b      	b.n	8002b12 <StartDefaultTask+0x24a>
	    sensor_msgs__msg__Range *m = &sonar_range_msg[i];
 8002a5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002a5e:	222c      	movs	r2, #44	@ 0x2c
 8002a60:	fb02 f303 	mul.w	r3, r2, r3
 8002a64:	4a4b      	ldr	r2, [pc, #300]	@ (8002b94 <StartDefaultTask+0x2cc>)
 8002a66:	4413      	add	r3, r2
 8002a68:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	    memset(m, 0, sizeof(*m));
 8002a6c:	222c      	movs	r2, #44	@ 0x2c
 8002a6e:	2100      	movs	r1, #0
 8002a70:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8002a74:	f019 fb18 	bl	801c0a8 <memset>
	    m->radiation_type = sensor_msgs__msg__Range__ULTRASOUND;
 8002a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	751a      	strb	r2, [r3, #20]
	    m->field_of_view  = SONAR_FOV_RAD;
 8002a80:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a84:	4a44      	ldr	r2, [pc, #272]	@ (8002b98 <StartDefaultTask+0x2d0>)
 8002a86:	619a      	str	r2, [r3, #24]
	    m->min_range      = SONAR_MIN_RANGE_M;
 8002a88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a8c:	4a43      	ldr	r2, [pc, #268]	@ (8002b9c <StartDefaultTask+0x2d4>)
 8002a8e:	61da      	str	r2, [r3, #28]
	    m->max_range      = SONAR_MAX_RANGE_M;
 8002a90:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a94:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002a98:	621a      	str	r2, [r3, #32]
	    rosidl_runtime_c__String__init(&m->header.frame_id);
 8002a9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f009 ffc1 	bl	800ca28 <rosidl_runtime_c__String__init>
	    char fid[32]; snprintf(fid, sizeof(fid), "sonar_%d_link", i+1);
 8002aa6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002ab0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba0 <StartDefaultTask+0x2d8>)
 8002ab2:	2120      	movs	r1, #32
 8002ab4:	f019 f984 	bl	801bdc0 <sniprintf>
	    rosidl_runtime_c__String__assign(&m->header.frame_id, fid);
 8002ab8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002abc:	3308      	adds	r3, #8
 8002abe:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f00a f811 	bl	800caec <rosidl_runtime_c__String__assign>

	    sensor_msgs__msg__Temperature *t = &sonar_temp_msg_[i];
 8002aca:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4a33      	ldr	r2, [pc, #204]	@ (8002ba4 <StartDefaultTask+0x2dc>)
 8002ad8:	4413      	add	r3, r2
 8002ada:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	    memset(t, 0, sizeof(*t));
 8002ade:	2228      	movs	r2, #40	@ 0x28
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8002ae6:	f019 fadf 	bl	801c0a8 <memset>
	    rosidl_runtime_c__String__init(&t->header.frame_id);
 8002aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002aee:	3308      	adds	r3, #8
 8002af0:	4618      	mov	r0, r3
 8002af2:	f009 ff99 	bl	800ca28 <rosidl_runtime_c__String__init>
	    rosidl_runtime_c__String__assign(&t->header.frame_id, fid);
 8002af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002afa:	3308      	adds	r3, #8
 8002afc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f009 fff2 	bl	800caec <rosidl_runtime_c__String__assign>
	  for (int i=0; i<NUM_SONARS; ++i) {
 8002b08:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002b12:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	dd9f      	ble.n	8002a5a <StartDefaultTask+0x192>
	  }

	  // ---- JointState publisher ----
	  rcl_publisher_init(
 8002b1a:	f00a f8e1 	bl	800cce0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8002b24:	2300      	movs	r3, #0
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba8 <StartDefaultTask+0x2e0>)
 8002b2a:	4820      	ldr	r0, [pc, #128]	@ (8002bac <StartDefaultTask+0x2e4>)
 8002b2c:	f008 f852 	bl	800abd4 <rcl_publisher_init>
	    &pub_joint, &node_base_controller,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, JointState),
	    "joint_states", NULL /*default QoS*/);

	  // JointState sequences (names/position/velocity/effort)
	  rosidl_runtime_c__String__Sequence__init(&joint_msg.name, NUM_WHEELS);
 8002b30:	2104      	movs	r1, #4
 8002b32:	481f      	ldr	r0, [pc, #124]	@ (8002bb0 <StartDefaultTask+0x2e8>)
 8002b34:	f00a f808 	bl	800cb48 <rosidl_runtime_c__String__Sequence__init>
	  for (int i=0;i<NUM_WHEELS;++i)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002b3e:	e050      	b.n	8002be2 <StartDefaultTask+0x31a>
 8002b40:	08001a51 	.word	0x08001a51
 8002b44:	080019e9 	.word	0x080019e9
 8002b48:	080019c9 	.word	0x080019c9
 8002b4c:	0800199d 	.word	0x0800199d
 8002b50:	20008a48 	.word	0x20008a48
 8002b54:	08002df1 	.word	0x08002df1
 8002b58:	08002e35 	.word	0x08002e35
 8002b5c:	08002e6d 	.word	0x08002e6d
 8002b60:	08002ed9 	.word	0x08002ed9
 8002b64:	0801cf3c 	.word	0x0801cf3c
 8002b68:	0801cf40 	.word	0x0801cf40
 8002b6c:	0801cf50 	.word	0x0801cf50
 8002b70:	0801cf60 	.word	0x0801cf60
 8002b74:	20008c80 	.word	0x20008c80
 8002b78:	0801cf70 	.word	0x0801cf70
 8002b7c:	20008c84 	.word	0x20008c84
 8002b80:	0801d068 	.word	0x0801d068
 8002b84:	0801cf80 	.word	0x0801cf80
 8002b88:	20008e8c 	.word	0x20008e8c
 8002b8c:	0801cf90 	.word	0x0801cf90
 8002b90:	20008e9c 	.word	0x20008e9c
 8002b94:	20008eb8 	.word	0x20008eb8
 8002b98:	3f051eb8 	.word	0x3f051eb8
 8002b9c:	3ca3d70a 	.word	0x3ca3d70a
 8002ba0:	0801cfa8 	.word	0x0801cfa8
 8002ba4:	20008f68 	.word	0x20008f68
 8002ba8:	0801cfb8 	.word	0x0801cfb8
 8002bac:	20008eac 	.word	0x20008eac
 8002bb0:	2000901c 	.word	0x2000901c
	    rosidl_runtime_c__String__assign(&joint_msg.name.data[i], WHEEL_NAMES[i]);
 8002bb4:	4b60      	ldr	r3, [pc, #384]	@ (8002d38 <StartDefaultTask+0x470>)
 8002bb6:	6959      	ldr	r1, [r3, #20]
 8002bb8:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	18ca      	adds	r2, r1, r3
 8002bc6:	495d      	ldr	r1, [pc, #372]	@ (8002d3c <StartDefaultTask+0x474>)
 8002bc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002bcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f009 ff8a 	bl	800caec <rosidl_runtime_c__String__assign>
	  for (int i=0;i<NUM_WHEELS;++i)
 8002bd8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002be2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	dde4      	ble.n	8002bb4 <StartDefaultTask+0x2ec>

	  rosidl_runtime_c__double__Sequence__init(&joint_msg.position, NUM_WHEELS);
 8002bea:	2104      	movs	r1, #4
 8002bec:	4854      	ldr	r0, [pc, #336]	@ (8002d40 <StartDefaultTask+0x478>)
 8002bee:	f009 febf 	bl	800c970 <rosidl_runtime_c__double__Sequence__init>
	  rosidl_runtime_c__double__Sequence__init(&joint_msg.velocity, NUM_WHEELS);
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	4853      	ldr	r0, [pc, #332]	@ (8002d44 <StartDefaultTask+0x47c>)
 8002bf6:	f009 febb 	bl	800c970 <rosidl_runtime_c__double__Sequence__init>
	  rosidl_runtime_c__double__Sequence__init(&joint_msg.effort,   NUM_WHEELS);
 8002bfa:	2104      	movs	r1, #4
 8002bfc:	4852      	ldr	r0, [pc, #328]	@ (8002d48 <StartDefaultTask+0x480>)
 8002bfe:	f009 feb7 	bl	800c970 <rosidl_runtime_c__double__Sequence__init>

	  // ---- Motor currents publishers ----
	  rcl_publisher_init(&pub_motor_current, &node_base_controller,
 8002c02:	f00a fe17 	bl	800d834 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 8002c06:	4602      	mov	r2, r0
 8002c08:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8002c0c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	4b4e      	ldr	r3, [pc, #312]	@ (8002d4c <StartDefaultTask+0x484>)
 8002c14:	484e      	ldr	r0, [pc, #312]	@ (8002d50 <StartDefaultTask+0x488>)
 8002c16:	f007 ffdd 	bl	800abd4 <rcl_publisher_init>
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
	    "motors/current_amps", &qos_sensor);

	  rcl_publisher_init(&pub_motor_fault, &node_base_controller,
 8002c1a:	f00a fe23 	bl	800d864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8002c24:	2300      	movs	r3, #0
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4b4a      	ldr	r3, [pc, #296]	@ (8002d54 <StartDefaultTask+0x48c>)
 8002c2a:	484b      	ldr	r0, [pc, #300]	@ (8002d58 <StartDefaultTask+0x490>)
 8002c2c:	f007 ffd2 	bl	800abd4 <rcl_publisher_init>
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	    "motors/fault_flags", NULL);

	  // Init fixed-length arrays
	  rosidl_runtime_c__float__Sequence__init(&motor_currents_msg.data, NUM_MOTORS);
 8002c30:	2104      	movs	r1, #4
 8002c32:	484a      	ldr	r0, [pc, #296]	@ (8002d5c <StartDefaultTask+0x494>)
 8002c34:	f009 fe6e 	bl	800c914 <rosidl_runtime_c__float__Sequence__init>
	  rosidl_runtime_c__int32__Sequence__init(&motor_faults_msg.data, NUM_MOTORS);
 8002c38:	2104      	movs	r1, #4
 8002c3a:	4849      	ldr	r0, [pc, #292]	@ (8002d60 <StartDefaultTask+0x498>)
 8002c3c:	f009 fec6 	bl	800c9cc <rosidl_runtime_c__int32__Sequence__init>
	  // rclc_publisher_init_default(&pub_cmd_echo, &node, ...);
	  // rclc_publisher_init_default(&pub_encoders, &node, ...);
	  */

	  /* -------- message buffers you already use -------- */
	  init_float_multiarray_fixed(&msg_cmd_rx, rx_data, 3);
 8002c40:	2203      	movs	r2, #3
 8002c42:	4948      	ldr	r1, [pc, #288]	@ (8002d64 <StartDefaultTask+0x49c>)
 8002c44:	4848      	ldr	r0, [pc, #288]	@ (8002d68 <StartDefaultTask+0x4a0>)
 8002c46:	f7fe ffba 	bl	8001bbe <init_float_multiarray_fixed>

	  rclc_subscription_init_default(
 8002c4a:	f00a fdf3 	bl	800d834 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8002c54:	4b45      	ldr	r3, [pc, #276]	@ (8002d6c <StartDefaultTask+0x4a4>)
 8002c56:	4846      	ldr	r0, [pc, #280]	@ (8002d70 <StartDefaultTask+0x4a8>)
 8002c58:	f008 ff5e 	bl	800bb18 <rclc_subscription_init_default>
	      &sub_cmd, &node_base_controller,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
	      "twist_nexus");

	  init_float_multiarray_fixed(&msg_cfg_rx, cfg_buf, 2);
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	4945      	ldr	r1, [pc, #276]	@ (8002d74 <StartDefaultTask+0x4ac>)
 8002c60:	4845      	ldr	r0, [pc, #276]	@ (8002d78 <StartDefaultTask+0x4b0>)
 8002c62:	f7fe ffac 	bl	8001bbe <init_float_multiarray_fixed>

	  rclc_subscription_init_default(
 8002c66:	f00a fde5 	bl	800d834 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8002c70:	4b42      	ldr	r3, [pc, #264]	@ (8002d7c <StartDefaultTask+0x4b4>)
 8002c72:	4843      	ldr	r0, [pc, #268]	@ (8002d80 <StartDefaultTask+0x4b8>)
 8002c74:	f008 ff50 	bl	800bb18 <rclc_subscription_init_default>
	      &sub_cfg, &node_base_controller,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray),
	      "nexus_ctrl/config");

	  init_int_multiarray_4(&msg_ccr, ccr_data);
 8002c78:	4942      	ldr	r1, [pc, #264]	@ (8002d84 <StartDefaultTask+0x4bc>)
 8002c7a:	4843      	ldr	r0, [pc, #268]	@ (8002d88 <StartDefaultTask+0x4c0>)
 8002c7c:	f7fe ff7e 	bl	8001b7c <init_int_multiarray_4>

	  rclc_publisher_init_default(
 8002c80:	f00a fdf0 	bl	800d864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8002c8a:	4b40      	ldr	r3, [pc, #256]	@ (8002d8c <StartDefaultTask+0x4c4>)
 8002c8c:	4840      	ldr	r0, [pc, #256]	@ (8002d90 <StartDefaultTask+0x4c8>)
 8002c8e:	f008 ff0f 	bl	800bab0 <rclc_publisher_init_default>
	      &pub_ccr, &node_base_controller,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32MultiArray),
	      "wheel_status/ccr");

	  /* -------- fixed frame_id for IMU & temp -------- */
	  memset(&imu_msg, 0, sizeof(imu_msg));
 8002c92:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002c96:	2100      	movs	r1, #0
 8002c98:	483e      	ldr	r0, [pc, #248]	@ (8002d94 <StartDefaultTask+0x4cc>)
 8002c9a:	f019 fa05 	bl	801c0a8 <memset>
	  rosidl_runtime_c__String__init(&imu_msg.header.frame_id);
 8002c9e:	483e      	ldr	r0, [pc, #248]	@ (8002d98 <StartDefaultTask+0x4d0>)
 8002ca0:	f009 fec2 	bl	800ca28 <rosidl_runtime_c__String__init>
	  rosidl_runtime_c__String__assign(&imu_msg.header.frame_id, "imu_link");
 8002ca4:	493d      	ldr	r1, [pc, #244]	@ (8002d9c <StartDefaultTask+0x4d4>)
 8002ca6:	483c      	ldr	r0, [pc, #240]	@ (8002d98 <StartDefaultTask+0x4d0>)
 8002ca8:	f009 ff20 	bl	800caec <rosidl_runtime_c__String__assign>

	  memset(&temp_msg, 0, sizeof(temp_msg));
 8002cac:	2228      	movs	r2, #40	@ 0x28
 8002cae:	2100      	movs	r1, #0
 8002cb0:	483b      	ldr	r0, [pc, #236]	@ (8002da0 <StartDefaultTask+0x4d8>)
 8002cb2:	f019 f9f9 	bl	801c0a8 <memset>
	  rosidl_runtime_c__String__init(&temp_msg.header.frame_id);
 8002cb6:	483b      	ldr	r0, [pc, #236]	@ (8002da4 <StartDefaultTask+0x4dc>)
 8002cb8:	f009 feb6 	bl	800ca28 <rosidl_runtime_c__String__init>
	  rosidl_runtime_c__String__assign(&temp_msg.header.frame_id, "imu_link");
 8002cbc:	4937      	ldr	r1, [pc, #220]	@ (8002d9c <StartDefaultTask+0x4d4>)
 8002cbe:	4839      	ldr	r0, [pc, #228]	@ (8002da4 <StartDefaultTask+0x4dc>)
 8002cc0:	f009 ff14 	bl	800caec <rosidl_runtime_c__String__assign>

	  /* (optional) try to sync time with Agent */
	  (void) rmw_uros_sync_session(1000);
 8002cc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cc8:	f009 fa94 	bl	800c1f4 <rmw_uros_sync_session>

	  /* -------- timers -------- */
	  // Your existing 100 Hz timer
	  rclc_timer_init_default2(&timer, &support, RCL_MS_TO_NS(10), timer_cb, true);
 8002ccc:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	4b34      	ldr	r3, [pc, #208]	@ (8002da8 <StartDefaultTask+0x4e0>)
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	4a34      	ldr	r2, [pc, #208]	@ (8002dac <StartDefaultTask+0x4e4>)
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	4834      	ldr	r0, [pc, #208]	@ (8002db0 <StartDefaultTask+0x4e8>)
 8002ce0:	f008 ff4e 	bl	800bb80 <rclc_timer_init_default2>
	  // New 200 Hz IMU timer
	  //rcl_timer_t timer_imu;
	  //rclc_timer_init_default2(&timer_imu, &support, RCL_MS_TO_NS(5), imu_timer_cb, true);

	  /* -------- executor (ONE instance) -------- */
	  rclc_executor_init(&executor, &support.context, /*handles*/ 4, &allocator);
 8002ce4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8002ce8:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8002cec:	2204      	movs	r2, #4
 8002cee:	4831      	ldr	r0, [pc, #196]	@ (8002db4 <StartDefaultTask+0x4ec>)
 8002cf0:	f008 fbde 	bl	800b4b0 <rclc_executor_init>
	  rclc_executor_add_subscription(&executor, &sub_cmd, &msg_cmd_rx, &wheel_cmd_cb, ON_NEW_DATA);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8002db8 <StartDefaultTask+0x4f0>)
 8002cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8002d68 <StartDefaultTask+0x4a0>)
 8002cfc:	491c      	ldr	r1, [pc, #112]	@ (8002d70 <StartDefaultTask+0x4a8>)
 8002cfe:	482d      	ldr	r0, [pc, #180]	@ (8002db4 <StartDefaultTask+0x4ec>)
 8002d00:	f008 fc42 	bl	800b588 <rclc_executor_add_subscription>
	  rclc_executor_add_subscription(&executor, &sub_cfg, &msg_cfg_rx, &cfg_cb,     ON_NEW_DATA);
 8002d04:	2300      	movs	r3, #0
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4b2c      	ldr	r3, [pc, #176]	@ (8002dbc <StartDefaultTask+0x4f4>)
 8002d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8002d78 <StartDefaultTask+0x4b0>)
 8002d0c:	491c      	ldr	r1, [pc, #112]	@ (8002d80 <StartDefaultTask+0x4b8>)
 8002d0e:	4829      	ldr	r0, [pc, #164]	@ (8002db4 <StartDefaultTask+0x4ec>)
 8002d10:	f008 fc3a 	bl	800b588 <rclc_executor_add_subscription>
	  rclc_executor_add_timer(&executor, &timer);
 8002d14:	4926      	ldr	r1, [pc, #152]	@ (8002db0 <StartDefaultTask+0x4e8>)
 8002d16:	4827      	ldr	r0, [pc, #156]	@ (8002db4 <StartDefaultTask+0x4ec>)
 8002d18:	f008 fc6a 	bl	800b5f0 <rclc_executor_add_timer>
	  //rclc_executor_add_timer(&executor, &timer_imu);

	  /* -------- main loop -------- */
	  for (;;) {
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(5));
 8002d1c:	a304      	add	r3, pc, #16	@ (adr r3, 8002d30 <StartDefaultTask+0x468>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	4824      	ldr	r0, [pc, #144]	@ (8002db4 <StartDefaultTask+0x4ec>)
 8002d24:	f008 fcd8 	bl	800b6d8 <rclc_executor_spin_some>
 8002d28:	e7f8      	b.n	8002d1c <StartDefaultTask+0x454>
 8002d2a:	bf00      	nop
 8002d2c:	f3af 8000 	nop.w
 8002d30:	004c4b40 	.word	0x004c4b40
 8002d34:	00000000 	.word	0x00000000
 8002d38:	20009008 	.word	0x20009008
 8002d3c:	20000010 	.word	0x20000010
 8002d40:	20009028 	.word	0x20009028
 8002d44:	20009034 	.word	0x20009034
 8002d48:	20009040 	.word	0x20009040
 8002d4c:	0801cfc8 	.word	0x0801cfc8
 8002d50:	20008eb0 	.word	0x20008eb0
 8002d54:	0801cfdc 	.word	0x0801cfdc
 8002d58:	20008eb4 	.word	0x20008eb4
 8002d5c:	2000905c 	.word	0x2000905c
 8002d60:	20009078 	.word	0x20009078
 8002d64:	20008c0c 	.word	0x20008c0c
 8002d68:	20008bf0 	.word	0x20008bf0
 8002d6c:	0801cff0 	.word	0x0801cff0
 8002d70:	20008bec 	.word	0x20008bec
 8002d74:	20000008 	.word	0x20000008
 8002d78:	20008c34 	.word	0x20008c34
 8002d7c:	0801cffc 	.word	0x0801cffc
 8002d80:	20008c30 	.word	0x20008c30
 8002d84:	20008c70 	.word	0x20008c70
 8002d88:	20008c54 	.word	0x20008c54
 8002d8c:	0801d010 	.word	0x0801d010
 8002d90:	20008c50 	.word	0x20008c50
 8002d94:	20008c88 	.word	0x20008c88
 8002d98:	20008c90 	.word	0x20008c90
 8002d9c:	0801d024 	.word	0x0801d024
 8002da0:	20008dc8 	.word	0x20008dc8
 8002da4:	20008dd0 	.word	0x20008dd0
 8002da8:	08002741 	.word	0x08002741
 8002dac:	00989680 	.word	0x00989680
 8002db0:	20008be8 	.word	0x20008be8
 8002db4:	20008b58 	.word	0x20008b58
 8002db8:	08002699 	.word	0x08002699
 8002dbc:	080026ed 	.word	0x080026ed

08002dc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
		  pastcurrCount[i] = currCount[i];
	  }
	}
*/
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a04      	ldr	r2, [pc, #16]	@ (8002de0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d101      	bne.n	8002dd6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002dd2:	f000 ff01 	bl	8003bd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40001400 	.word	0x40001400

08002de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002de8:	b672      	cpsid	i
}
 8002dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dec:	bf00      	nop
 8002dee:	e7fd      	b.n	8002dec <Error_Handler+0x8>

08002df0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <microros_allocate+0x3c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <microros_allocate+0x3c>)
 8002e08:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002e0a:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <microros_allocate+0x40>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4413      	add	r3, r2
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <microros_allocate+0x40>)
 8002e18:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe fb6e 	bl	80014fc <pvPortMallocMicroROS>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200090a8 	.word	0x200090a8
 8002e30:	200090ac 	.word	0x200090ac

08002e34 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fe fc7d 	bl	8001744 <getBlockSize>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4a06      	ldr	r2, [pc, #24]	@ (8002e68 <microros_deallocate+0x34>)
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b04      	ldr	r3, [pc, #16]	@ (8002e68 <microros_deallocate+0x34>)
 8002e56:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7fe fc17 	bl	800168c <vPortFreeMicroROS>
  }
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200090ac 	.word	0x200090ac

08002e6c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002e78:	4b15      	ldr	r3, [pc, #84]	@ (8002ed0 <microros_reallocate+0x64>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4413      	add	r3, r2
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b12      	ldr	r3, [pc, #72]	@ (8002ed0 <microros_reallocate+0x64>)
 8002e86:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002e88:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <microros_reallocate+0x68>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4413      	add	r3, r2
 8002e92:	461a      	mov	r2, r3
 8002e94:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <microros_reallocate+0x68>)
 8002e96:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002e9e:	68b8      	ldr	r0, [r7, #8]
 8002ea0:	f7fe fb2c 	bl	80014fc <pvPortMallocMicroROS>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	e00e      	b.n	8002ec6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7fe fc4b 	bl	8001744 <getBlockSize>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4a08      	ldr	r2, [pc, #32]	@ (8002ed4 <microros_reallocate+0x68>)
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <microros_reallocate+0x68>)
 8002eba:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7fe fc5e 	bl	8001780 <pvPortReallocMicroROS>
 8002ec4:	4603      	mov	r3, r0
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200090a8 	.word	0x200090a8
 8002ed4:	200090ac 	.word	0x200090ac

08002ed8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	fb02 f303 	mul.w	r3, r2, r3
 8002eec:	4a0c      	ldr	r2, [pc, #48]	@ (8002f20 <microros_zero_allocate+0x48>)
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <microros_zero_allocate+0x48>)
 8002ef6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	4a08      	ldr	r2, [pc, #32]	@ (8002f24 <microros_zero_allocate+0x4c>)
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	4413      	add	r3, r2
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <microros_zero_allocate+0x4c>)
 8002f0a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f7fe fc63 	bl	80017da <pvPortCallocMicroROS>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	200090a8 	.word	0x200090a8
 8002f24:	200090ac 	.word	0x200090ac

08002f28 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002f28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f3e:	a320      	add	r3, pc, #128	@ (adr r3, 8002fc0 <UTILS_NanosecondsToTimespec+0x98>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fdc2 	bl	8000acc <__aeabi_ldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f56:	a31a      	add	r3, pc, #104	@ (adr r3, 8002fc0 <UTILS_NanosecondsToTimespec+0x98>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f7fd fdb6 	bl	8000acc <__aeabi_ldivmod>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	da20      	bge.n	8002fae <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a11      	ldr	r2, [pc, #68]	@ (8002fb8 <UTILS_NanosecondsToTimespec+0x90>)
 8002f72:	fb82 1203 	smull	r1, r2, r2, r3
 8002f76:	1712      	asrs	r2, r2, #28
 8002f78:	17db      	asrs	r3, r3, #31
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	6979      	ldr	r1, [r7, #20]
 8002f88:	17c8      	asrs	r0, r1, #31
 8002f8a:	460c      	mov	r4, r1
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	ebb2 0804 	subs.w	r8, r2, r4
 8002f92:	eb63 0905 	sbc.w	r9, r3, r5
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	4906      	ldr	r1, [pc, #24]	@ (8002fbc <UTILS_NanosecondsToTimespec+0x94>)
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	441a      	add	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	609a      	str	r2, [r3, #8]
    }
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fb8:	44b82fa1 	.word	0x44b82fa1
 8002fbc:	3b9aca00 	.word	0x3b9aca00
 8002fc0:	3b9aca00 	.word	0x3b9aca00
 8002fc4:	00000000 	.word	0x00000000

08002fc8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fcc:	b08e      	sub	sp, #56	@ 0x38
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6278      	str	r0, [r7, #36]	@ 0x24
 8002fd2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002fd4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002fd8:	2300      	movs	r3, #0
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002fea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f006 fbe8 	bl	80097c4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff6:	17da      	asrs	r2, r3, #31
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	61fa      	str	r2, [r7, #28]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	69b9      	ldr	r1, [r7, #24]
 8003006:	000b      	movs	r3, r1
 8003008:	2200      	movs	r2, #0
 800300a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800300e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003010:	2200      	movs	r2, #0
 8003012:	461c      	mov	r4, r3
 8003014:	4615      	mov	r5, r2
 8003016:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800301a:	1911      	adds	r1, r2, r4
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	416b      	adcs	r3, r5
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003026:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800302a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	f04f 0400 	mov.w	r4, #0
 8003036:	f04f 0500 	mov.w	r5, #0
 800303a:	015d      	lsls	r5, r3, #5
 800303c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003040:	0154      	lsls	r4, r2, #5
 8003042:	4622      	mov	r2, r4
 8003044:	462b      	mov	r3, r5
 8003046:	ebb2 0800 	subs.w	r8, r2, r0
 800304a:	eb63 0901 	sbc.w	r9, r3, r1
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800305a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800305e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003062:	4690      	mov	r8, r2
 8003064:	4699      	mov	r9, r3
 8003066:	eb18 0a00 	adds.w	sl, r8, r0
 800306a:	eb49 0b01 	adc.w	fp, r9, r1
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800307a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800307e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003082:	ebb2 040a 	subs.w	r4, r2, sl
 8003086:	603c      	str	r4, [r7, #0]
 8003088:	eb63 030b 	sbc.w	r3, r3, fp
 800308c:	607b      	str	r3, [r7, #4]
 800308e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003092:	4623      	mov	r3, r4
 8003094:	181b      	adds	r3, r3, r0
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	462b      	mov	r3, r5
 800309a:	eb41 0303 	adc.w	r3, r1, r3
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030a6:	f7ff ff3f 	bl	8002f28 <UTILS_NanosecondsToTimespec>

    return 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	3738      	adds	r7, #56	@ 0x38
 80030b0:	46bd      	mov	sp, r7
 80030b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080030b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	4b12      	ldr	r3, [pc, #72]	@ (800310c <HAL_MspInit+0x54>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	4a11      	ldr	r2, [pc, #68]	@ (800310c <HAL_MspInit+0x54>)
 80030c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ce:	4b0f      	ldr	r3, [pc, #60]	@ (800310c <HAL_MspInit+0x54>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d6:	607b      	str	r3, [r7, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	603b      	str	r3, [r7, #0]
 80030de:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <HAL_MspInit+0x54>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	4a0a      	ldr	r2, [pc, #40]	@ (800310c <HAL_MspInit+0x54>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ea:	4b08      	ldr	r3, [pc, #32]	@ (800310c <HAL_MspInit+0x54>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030f6:	2200      	movs	r2, #0
 80030f8:	210f      	movs	r1, #15
 80030fa:	f06f 0001 	mvn.w	r0, #1
 80030fe:	f000 ff95 	bl	800402c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800

08003110 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b090      	sub	sp, #64	@ 0x40
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a8c      	ldr	r2, [pc, #560]	@ (8003360 <HAL_TIM_Encoder_MspInit+0x250>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d14d      	bne.n	80031ce <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003136:	4b8b      	ldr	r3, [pc, #556]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313a:	4a8a      	ldr	r2, [pc, #552]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6453      	str	r3, [r2, #68]	@ 0x44
 8003142:	4b88      	ldr	r3, [pc, #544]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800314c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
 8003152:	4b84      	ldr	r3, [pc, #528]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	4a83      	ldr	r2, [pc, #524]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6313      	str	r3, [r2, #48]	@ 0x30
 800315e:	4b81      	ldr	r3, [pc, #516]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FL_ENC_B_T1C1_Pin|FL_ENC_A_T1C2_Pin;
 800316a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800316e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003170:	2302      	movs	r3, #2
 8003172:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800317c:	2301      	movs	r3, #1
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003180:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003184:	4619      	mov	r1, r3
 8003186:	4878      	ldr	r0, [pc, #480]	@ (8003368 <HAL_TIM_Encoder_MspInit+0x258>)
 8003188:	f001 fb7c 	bl	8004884 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800318c:	2200      	movs	r2, #0
 800318e:	2105      	movs	r1, #5
 8003190:	2018      	movs	r0, #24
 8003192:	f000 ff4b 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003196:	2018      	movs	r0, #24
 8003198:	f000 ff64 	bl	8004064 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2105      	movs	r1, #5
 80031a0:	2019      	movs	r0, #25
 80031a2:	f000 ff43 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80031a6:	2019      	movs	r0, #25
 80031a8:	f000 ff5c 	bl	8004064 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80031ac:	2200      	movs	r2, #0
 80031ae:	2105      	movs	r1, #5
 80031b0:	201a      	movs	r0, #26
 80031b2:	f000 ff3b 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80031b6:	201a      	movs	r0, #26
 80031b8:	f000 ff54 	bl	8004064 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	2105      	movs	r1, #5
 80031c0:	201b      	movs	r0, #27
 80031c2:	f000 ff33 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031c6:	201b      	movs	r0, #27
 80031c8:	f000 ff4c 	bl	8004064 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80031cc:	e0c4      	b.n	8003358 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM3)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a66      	ldr	r2, [pc, #408]	@ (800336c <HAL_TIM_Encoder_MspInit+0x25c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d134      	bne.n	8003242 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031d8:	2300      	movs	r3, #0
 80031da:	623b      	str	r3, [r7, #32]
 80031dc:	4b61      	ldr	r3, [pc, #388]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	4a60      	ldr	r2, [pc, #384]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80031e2:	f043 0302 	orr.w	r3, r3, #2
 80031e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	623b      	str	r3, [r7, #32]
 80031f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	4a59      	ldr	r2, [pc, #356]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6313      	str	r3, [r2, #48]	@ 0x30
 8003204:	4b57      	ldr	r3, [pc, #348]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FR_ENC_A_T3C1_Pin|FR_ENC_B_T3C2_Pin;
 8003210:	23c0      	movs	r3, #192	@ 0xc0
 8003212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003214:	2302      	movs	r3, #2
 8003216:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003218:	2300      	movs	r3, #0
 800321a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321c:	2300      	movs	r3, #0
 800321e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003220:	2302      	movs	r3, #2
 8003222:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003228:	4619      	mov	r1, r3
 800322a:	484f      	ldr	r0, [pc, #316]	@ (8003368 <HAL_TIM_Encoder_MspInit+0x258>)
 800322c:	f001 fb2a 	bl	8004884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003230:	2200      	movs	r2, #0
 8003232:	2105      	movs	r1, #5
 8003234:	201d      	movs	r0, #29
 8003236:	f000 fef9 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800323a:	201d      	movs	r0, #29
 800323c:	f000 ff12 	bl	8004064 <HAL_NVIC_EnableIRQ>
}
 8003240:	e08a      	b.n	8003358 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM4)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a4a      	ldr	r2, [pc, #296]	@ (8003370 <HAL_TIM_Encoder_MspInit+0x260>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d134      	bne.n	80032b6 <HAL_TIM_Encoder_MspInit+0x1a6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
 8003250:	4b44      	ldr	r3, [pc, #272]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	4a43      	ldr	r2, [pc, #268]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6413      	str	r3, [r2, #64]	@ 0x40
 800325c:	4b41      	ldr	r3, [pc, #260]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	4b3d      	ldr	r3, [pc, #244]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003270:	4a3c      	ldr	r2, [pc, #240]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 8003272:	f043 0302 	orr.w	r3, r3, #2
 8003276:	6313      	str	r3, [r2, #48]	@ 0x30
 8003278:	4b3a      	ldr	r3, [pc, #232]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = RL_ENC_B_T4C1_Pin|RL_ENC_A_T4C2_Pin;
 8003284:	23c0      	movs	r3, #192	@ 0xc0
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328c:	2300      	movs	r3, #0
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003290:	2300      	movs	r3, #0
 8003292:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003294:	2302      	movs	r3, #2
 8003296:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003298:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800329c:	4619      	mov	r1, r3
 800329e:	4835      	ldr	r0, [pc, #212]	@ (8003374 <HAL_TIM_Encoder_MspInit+0x264>)
 80032a0:	f001 faf0 	bl	8004884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80032a4:	2200      	movs	r2, #0
 80032a6:	2105      	movs	r1, #5
 80032a8:	201e      	movs	r0, #30
 80032aa:	f000 febf 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032ae:	201e      	movs	r0, #30
 80032b0:	f000 fed8 	bl	8004064 <HAL_NVIC_EnableIRQ>
}
 80032b4:	e050      	b.n	8003358 <HAL_TIM_Encoder_MspInit+0x248>
  else if(htim_encoder->Instance==TIM8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003378 <HAL_TIM_Encoder_MspInit+0x268>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d14b      	bne.n	8003358 <HAL_TIM_Encoder_MspInit+0x248>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80032c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c8:	4a26      	ldr	r2, [pc, #152]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80032d0:	4b24      	ldr	r3, [pc, #144]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80032d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	4b20      	ldr	r3, [pc, #128]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <HAL_TIM_Encoder_MspInit+0x254>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RR_ENC_A_T8C1_Pin|RR_ENC_B_T8C2_Pin;
 80032f8:	23c0      	movs	r3, #192	@ 0xc0
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fc:	2302      	movs	r3, #2
 80032fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003304:	2300      	movs	r3, #0
 8003306:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003308:	2303      	movs	r3, #3
 800330a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800330c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003310:	4619      	mov	r1, r3
 8003312:	481a      	ldr	r0, [pc, #104]	@ (800337c <HAL_TIM_Encoder_MspInit+0x26c>)
 8003314:	f001 fab6 	bl	8004884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8003318:	2200      	movs	r2, #0
 800331a:	2105      	movs	r1, #5
 800331c:	202b      	movs	r0, #43	@ 0x2b
 800331e:	f000 fe85 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003322:	202b      	movs	r0, #43	@ 0x2b
 8003324:	f000 fe9e 	bl	8004064 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8003328:	2200      	movs	r2, #0
 800332a:	2105      	movs	r1, #5
 800332c:	202c      	movs	r0, #44	@ 0x2c
 800332e:	f000 fe7d 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003332:	202c      	movs	r0, #44	@ 0x2c
 8003334:	f000 fe96 	bl	8004064 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8003338:	2200      	movs	r2, #0
 800333a:	2105      	movs	r1, #5
 800333c:	202d      	movs	r0, #45	@ 0x2d
 800333e:	f000 fe75 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003342:	202d      	movs	r0, #45	@ 0x2d
 8003344:	f000 fe8e 	bl	8004064 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8003348:	2200      	movs	r2, #0
 800334a:	2105      	movs	r1, #5
 800334c:	202e      	movs	r0, #46	@ 0x2e
 800334e:	f000 fe6d 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003352:	202e      	movs	r0, #46	@ 0x2e
 8003354:	f000 fe86 	bl	8004064 <HAL_NVIC_EnableIRQ>
}
 8003358:	bf00      	nop
 800335a:	3740      	adds	r7, #64	@ 0x40
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40010000 	.word	0x40010000
 8003364:	40023800 	.word	0x40023800
 8003368:	40020000 	.word	0x40020000
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800
 8003374:	40020400 	.word	0x40020400
 8003378:	40010400 	.word	0x40010400
 800337c:	40020800 	.word	0x40020800

08003380 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003390:	d116      	bne.n	80033c0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <HAL_TIM_Base_MspInit+0x80>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	4a19      	ldr	r2, [pc, #100]	@ (8003400 <HAL_TIM_Base_MspInit+0x80>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033a2:	4b17      	ldr	r3, [pc, #92]	@ (8003400 <HAL_TIM_Base_MspInit+0x80>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80033ae:	2200      	movs	r2, #0
 80033b0:	2105      	movs	r1, #5
 80033b2:	201c      	movs	r0, #28
 80033b4:	f000 fe3a 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033b8:	201c      	movs	r0, #28
 80033ba:	f000 fe53 	bl	8004064 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 80033be:	e01a      	b.n	80033f6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003404 <HAL_TIM_Base_MspInit+0x84>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d115      	bne.n	80033f6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <HAL_TIM_Base_MspInit+0x80>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	4a0b      	ldr	r2, [pc, #44]	@ (8003400 <HAL_TIM_Base_MspInit+0x80>)
 80033d4:	f043 0310 	orr.w	r3, r3, #16
 80033d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033da:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <HAL_TIM_Base_MspInit+0x80>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	2105      	movs	r1, #5
 80033ea:	2036      	movs	r0, #54	@ 0x36
 80033ec:	f000 fe1e 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033f0:	2036      	movs	r0, #54	@ 0x36
 80033f2:	f000 fe37 	bl	8004064 <HAL_NVIC_EnableIRQ>
}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	40001000 	.word	0x40001000

08003408 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	@ 0x28
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 0314 	add.w	r3, r7, #20
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003428:	d13c      	bne.n	80034a4 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	4b1f      	ldr	r3, [pc, #124]	@ (80034ac <HAL_TIM_MspPostInit+0xa4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	4a1e      	ldr	r2, [pc, #120]	@ (80034ac <HAL_TIM_MspPostInit+0xa4>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	6313      	str	r3, [r2, #48]	@ 0x30
 800343a:	4b1c      	ldr	r3, [pc, #112]	@ (80034ac <HAL_TIM_MspPostInit+0xa4>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	4b18      	ldr	r3, [pc, #96]	@ (80034ac <HAL_TIM_MspPostInit+0xa4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	4a17      	ldr	r2, [pc, #92]	@ (80034ac <HAL_TIM_MspPostInit+0xa4>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6313      	str	r3, [r2, #48]	@ 0x30
 8003456:	4b15      	ldr	r3, [pc, #84]	@ (80034ac <HAL_TIM_MspPostInit+0xa4>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = RL_PWM_T2C1_Pin|FL_PWM_T2C2_Pin;
 8003462:	2303      	movs	r3, #3
 8003464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800346a:	2300      	movs	r3, #0
 800346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003472:	2301      	movs	r3, #1
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	f107 0314 	add.w	r3, r7, #20
 800347a:	4619      	mov	r1, r3
 800347c:	480c      	ldr	r0, [pc, #48]	@ (80034b0 <HAL_TIM_MspPostInit+0xa8>)
 800347e:	f001 fa01 	bl	8004884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_PWM_T2C4_Pin|FR_PWM_T2C3_Pin;
 8003482:	f240 4304 	movw	r3, #1028	@ 0x404
 8003486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003488:	2302      	movs	r3, #2
 800348a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2300      	movs	r3, #0
 8003492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003494:	2301      	movs	r3, #1
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003498:	f107 0314 	add.w	r3, r7, #20
 800349c:	4619      	mov	r1, r3
 800349e:	4805      	ldr	r0, [pc, #20]	@ (80034b4 <HAL_TIM_MspPostInit+0xac>)
 80034a0:	f001 f9f0 	bl	8004884 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034a4:	bf00      	nop
 80034a6:	3728      	adds	r7, #40	@ 0x28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40020000 	.word	0x40020000
 80034b4:	40020400 	.word	0x40020400

080034b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	@ 0x30
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a79      	ldr	r2, [pc, #484]	@ (80036bc <HAL_UART_MspInit+0x204>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d153      	bne.n	8003582 <HAL_UART_MspInit+0xca>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	4b78      	ldr	r3, [pc, #480]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e2:	4a77      	ldr	r2, [pc, #476]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 80034e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ea:	4b75      	ldr	r3, [pc, #468]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	4b71      	ldr	r3, [pc, #452]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	4a70      	ldr	r2, [pc, #448]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	6313      	str	r3, [r2, #48]	@ 0x30
 8003506:	4b6e      	ldr	r3, [pc, #440]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	4b6a      	ldr	r3, [pc, #424]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	4a69      	ldr	r2, [pc, #420]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 800351c:	f043 0308 	orr.w	r3, r3, #8
 8003520:	6313      	str	r3, [r2, #48]	@ 0x30
 8003522:	4b67      	ldr	r3, [pc, #412]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800352e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003534:	2302      	movs	r3, #2
 8003536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353c:	2303      	movs	r3, #3
 800353e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003540:	2308      	movs	r3, #8
 8003542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003544:	f107 031c 	add.w	r3, r7, #28
 8003548:	4619      	mov	r1, r3
 800354a:	485e      	ldr	r0, [pc, #376]	@ (80036c4 <HAL_UART_MspInit+0x20c>)
 800354c:	f001 f99a 	bl	8004884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003550:	2304      	movs	r3, #4
 8003552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355c:	2303      	movs	r3, #3
 800355e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003560:	2308      	movs	r3, #8
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	4619      	mov	r1, r3
 800356a:	4857      	ldr	r0, [pc, #348]	@ (80036c8 <HAL_UART_MspInit+0x210>)
 800356c:	f001 f98a 	bl	8004884 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003570:	2200      	movs	r2, #0
 8003572:	2105      	movs	r1, #5
 8003574:	2035      	movs	r0, #53	@ 0x35
 8003576:	f000 fd59 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800357a:	2035      	movs	r0, #53	@ 0x35
 800357c:	f000 fd72 	bl	8004064 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003580:	e098      	b.n	80036b4 <HAL_UART_MspInit+0x1fc>
  else if(huart->Instance==USART2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a51      	ldr	r2, [pc, #324]	@ (80036cc <HAL_UART_MspInit+0x214>)
 8003588:	4293      	cmp	r3, r2
 800358a:	f040 8093 	bne.w	80036b4 <HAL_UART_MspInit+0x1fc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	4b4b      	ldr	r3, [pc, #300]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	4a4a      	ldr	r2, [pc, #296]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 8003598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800359c:	6413      	str	r3, [r2, #64]	@ 0x40
 800359e:	4b48      	ldr	r3, [pc, #288]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60bb      	str	r3, [r7, #8]
 80035ae:	4b44      	ldr	r3, [pc, #272]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	4a43      	ldr	r2, [pc, #268]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ba:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <HAL_UART_MspInit+0x208>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035c6:	230c      	movs	r3, #12
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d2:	2303      	movs	r3, #3
 80035d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035d6:	2307      	movs	r3, #7
 80035d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	f107 031c 	add.w	r3, r7, #28
 80035de:	4619      	mov	r1, r3
 80035e0:	483b      	ldr	r0, [pc, #236]	@ (80036d0 <HAL_UART_MspInit+0x218>)
 80035e2:	f001 f94f 	bl	8004884 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80035e6:	4b3b      	ldr	r3, [pc, #236]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 80035e8:	4a3b      	ldr	r2, [pc, #236]	@ (80036d8 <HAL_UART_MspInit+0x220>)
 80035ea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80035ec:	4b39      	ldr	r3, [pc, #228]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 80035ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80035f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035f4:	4b37      	ldr	r3, [pc, #220]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035fa:	4b36      	ldr	r3, [pc, #216]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003600:	4b34      	ldr	r3, [pc, #208]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 8003602:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003606:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003608:	4b32      	ldr	r3, [pc, #200]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 800360a:	2200      	movs	r2, #0
 800360c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800360e:	4b31      	ldr	r3, [pc, #196]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 8003610:	2200      	movs	r2, #0
 8003612:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003614:	4b2f      	ldr	r3, [pc, #188]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 8003616:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800361a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800361c:	4b2d      	ldr	r3, [pc, #180]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 800361e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003622:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003624:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 8003626:	2200      	movs	r2, #0
 8003628:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800362a:	482a      	ldr	r0, [pc, #168]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 800362c:	f000 fd28 	bl	8004080 <HAL_DMA_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_UART_MspInit+0x182>
      Error_Handler();
 8003636:	f7ff fbd5 	bl	8002de4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a25      	ldr	r2, [pc, #148]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 800363e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003640:	4a24      	ldr	r2, [pc, #144]	@ (80036d4 <HAL_UART_MspInit+0x21c>)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003646:	4b25      	ldr	r3, [pc, #148]	@ (80036dc <HAL_UART_MspInit+0x224>)
 8003648:	4a25      	ldr	r2, [pc, #148]	@ (80036e0 <HAL_UART_MspInit+0x228>)
 800364a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800364c:	4b23      	ldr	r3, [pc, #140]	@ (80036dc <HAL_UART_MspInit+0x224>)
 800364e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003652:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003654:	4b21      	ldr	r3, [pc, #132]	@ (80036dc <HAL_UART_MspInit+0x224>)
 8003656:	2240      	movs	r2, #64	@ 0x40
 8003658:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800365a:	4b20      	ldr	r3, [pc, #128]	@ (80036dc <HAL_UART_MspInit+0x224>)
 800365c:	2200      	movs	r2, #0
 800365e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003660:	4b1e      	ldr	r3, [pc, #120]	@ (80036dc <HAL_UART_MspInit+0x224>)
 8003662:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003666:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003668:	4b1c      	ldr	r3, [pc, #112]	@ (80036dc <HAL_UART_MspInit+0x224>)
 800366a:	2200      	movs	r2, #0
 800366c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800366e:	4b1b      	ldr	r3, [pc, #108]	@ (80036dc <HAL_UART_MspInit+0x224>)
 8003670:	2200      	movs	r2, #0
 8003672:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003674:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <HAL_UART_MspInit+0x224>)
 8003676:	2200      	movs	r2, #0
 8003678:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800367a:	4b18      	ldr	r3, [pc, #96]	@ (80036dc <HAL_UART_MspInit+0x224>)
 800367c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003680:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003682:	4b16      	ldr	r3, [pc, #88]	@ (80036dc <HAL_UART_MspInit+0x224>)
 8003684:	2200      	movs	r2, #0
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003688:	4814      	ldr	r0, [pc, #80]	@ (80036dc <HAL_UART_MspInit+0x224>)
 800368a:	f000 fcf9 	bl	8004080 <HAL_DMA_Init>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8003694:	f7ff fba6 	bl	8002de4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a10      	ldr	r2, [pc, #64]	@ (80036dc <HAL_UART_MspInit+0x224>)
 800369c:	639a      	str	r2, [r3, #56]	@ 0x38
 800369e:	4a0f      	ldr	r2, [pc, #60]	@ (80036dc <HAL_UART_MspInit+0x224>)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80036a4:	2200      	movs	r2, #0
 80036a6:	2105      	movs	r1, #5
 80036a8:	2026      	movs	r0, #38	@ 0x26
 80036aa:	f000 fcbf 	bl	800402c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036ae:	2026      	movs	r0, #38	@ 0x26
 80036b0:	f000 fcd8 	bl	8004064 <HAL_NVIC_EnableIRQ>
}
 80036b4:	bf00      	nop
 80036b6:	3730      	adds	r7, #48	@ 0x30
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40005000 	.word	0x40005000
 80036c0:	40023800 	.word	0x40023800
 80036c4:	40020800 	.word	0x40020800
 80036c8:	40020c00 	.word	0x40020c00
 80036cc:	40004400 	.word	0x40004400
 80036d0:	40020000 	.word	0x40020000
 80036d4:	20008a90 	.word	0x20008a90
 80036d8:	40026088 	.word	0x40026088
 80036dc:	20008af0 	.word	0x20008af0
 80036e0:	400260a0 	.word	0x400260a0

080036e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08e      	sub	sp, #56	@ 0x38
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	4b33      	ldr	r3, [pc, #204]	@ (80037c8 <HAL_InitTick+0xe4>)
 80036fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fc:	4a32      	ldr	r2, [pc, #200]	@ (80037c8 <HAL_InitTick+0xe4>)
 80036fe:	f043 0320 	orr.w	r3, r3, #32
 8003702:	6413      	str	r3, [r2, #64]	@ 0x40
 8003704:	4b30      	ldr	r3, [pc, #192]	@ (80037c8 <HAL_InitTick+0xe4>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	60fb      	str	r3, [r7, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003710:	f107 0210 	add.w	r2, r7, #16
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f001 fb7a 	bl	8004e14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800372a:	f001 fb4b 	bl	8004dc4 <HAL_RCC_GetPCLK1Freq>
 800372e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003730:	e004      	b.n	800373c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003732:	f001 fb47 	bl	8004dc4 <HAL_RCC_GetPCLK1Freq>
 8003736:	4603      	mov	r3, r0
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800373c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373e:	4a23      	ldr	r2, [pc, #140]	@ (80037cc <HAL_InitTick+0xe8>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	0c9b      	lsrs	r3, r3, #18
 8003746:	3b01      	subs	r3, #1
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800374a:	4b21      	ldr	r3, [pc, #132]	@ (80037d0 <HAL_InitTick+0xec>)
 800374c:	4a21      	ldr	r2, [pc, #132]	@ (80037d4 <HAL_InitTick+0xf0>)
 800374e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003750:	4b1f      	ldr	r3, [pc, #124]	@ (80037d0 <HAL_InitTick+0xec>)
 8003752:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003756:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003758:	4a1d      	ldr	r2, [pc, #116]	@ (80037d0 <HAL_InitTick+0xec>)
 800375a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800375e:	4b1c      	ldr	r3, [pc, #112]	@ (80037d0 <HAL_InitTick+0xec>)
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003764:	4b1a      	ldr	r3, [pc, #104]	@ (80037d0 <HAL_InitTick+0xec>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800376a:	4b19      	ldr	r3, [pc, #100]	@ (80037d0 <HAL_InitTick+0xec>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8003770:	4817      	ldr	r0, [pc, #92]	@ (80037d0 <HAL_InitTick+0xec>)
 8003772:	f002 f84f 	bl	8005814 <HAL_TIM_Base_Init>
 8003776:	4603      	mov	r3, r0
 8003778:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800377c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11b      	bne.n	80037bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8003784:	4812      	ldr	r0, [pc, #72]	@ (80037d0 <HAL_InitTick+0xec>)
 8003786:	f002 f895 	bl	80058b4 <HAL_TIM_Base_Start_IT>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003790:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003794:	2b00      	cmp	r3, #0
 8003796:	d111      	bne.n	80037bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003798:	2037      	movs	r0, #55	@ 0x37
 800379a:	f000 fc63 	bl	8004064 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b0f      	cmp	r3, #15
 80037a2:	d808      	bhi.n	80037b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80037a4:	2200      	movs	r2, #0
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	2037      	movs	r0, #55	@ 0x37
 80037aa:	f000 fc3f 	bl	800402c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037ae:	4a0a      	ldr	r2, [pc, #40]	@ (80037d8 <HAL_InitTick+0xf4>)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	e002      	b.n	80037bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80037bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3738      	adds	r7, #56	@ 0x38
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40023800 	.word	0x40023800
 80037cc:	431bde83 	.word	0x431bde83
 80037d0:	200090b0 	.word	0x200090b0
 80037d4:	40001400 	.word	0x40001400
 80037d8:	20000028 	.word	0x20000028

080037dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <NMI_Handler+0x4>

080037e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <HardFault_Handler+0x4>

080037ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <MemManage_Handler+0x4>

080037f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037f8:	bf00      	nop
 80037fa:	e7fd      	b.n	80037f8 <BusFault_Handler+0x4>

080037fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <UsageFault_Handler+0x4>

08003804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003818:	4802      	ldr	r0, [pc, #8]	@ (8003824 <DMA1_Stream5_IRQHandler+0x10>)
 800381a:	f000 fdc9 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20008a90 	.word	0x20008a90

08003828 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800382c:	4802      	ldr	r0, [pc, #8]	@ (8003838 <DMA1_Stream6_IRQHandler+0x10>)
 800382e:	f000 fdbf 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20008af0 	.word	0x20008af0

0800383c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003840:	4802      	ldr	r0, [pc, #8]	@ (800384c <ADC_IRQHandler+0x10>)
 8003842:	f000 fa0d 	bl	8003c60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200087a8 	.word	0x200087a8

08003850 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003854:	4802      	ldr	r0, [pc, #8]	@ (8003860 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003856:	f002 faf3 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20008850 	.word	0x20008850

08003864 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003868:	4802      	ldr	r0, [pc, #8]	@ (8003874 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800386a:	f002 fae9 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20008850 	.word	0x20008850

08003878 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800387c:	4802      	ldr	r0, [pc, #8]	@ (8003888 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800387e:	f002 fadf 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20008850 	.word	0x20008850

0800388c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003890:	4802      	ldr	r0, [pc, #8]	@ (800389c <TIM1_CC_IRQHandler+0x10>)
 8003892:	f002 fad5 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20008850 	.word	0x20008850

080038a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038a4:	4802      	ldr	r0, [pc, #8]	@ (80038b0 <TIM2_IRQHandler+0x10>)
 80038a6:	f002 facb 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20008898 	.word	0x20008898

080038b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038b8:	4802      	ldr	r0, [pc, #8]	@ (80038c4 <TIM3_IRQHandler+0x10>)
 80038ba:	f002 fac1 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200088e0 	.word	0x200088e0

080038c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038cc:	4802      	ldr	r0, [pc, #8]	@ (80038d8 <TIM4_IRQHandler+0x10>)
 80038ce:	f002 fab7 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20008928 	.word	0x20008928

080038dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038e0:	4802      	ldr	r0, [pc, #8]	@ (80038ec <USART2_IRQHandler+0x10>)
 80038e2:	f003 fa65 	bl	8006db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20008a48 	.word	0x20008a48

080038f0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80038f4:	4802      	ldr	r0, [pc, #8]	@ (8003900 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80038f6:	f002 faa3 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200089b8 	.word	0x200089b8

08003904 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003908:	4802      	ldr	r0, [pc, #8]	@ (8003914 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800390a:	f002 fa99 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	200089b8 	.word	0x200089b8

08003918 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800391c:	4802      	ldr	r0, [pc, #8]	@ (8003928 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800391e:	f002 fa8f 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	200089b8 	.word	0x200089b8

0800392c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003930:	4802      	ldr	r0, [pc, #8]	@ (800393c <TIM8_CC_IRQHandler+0x10>)
 8003932:	f002 fa85 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200089b8 	.word	0x200089b8

08003940 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003944:	4802      	ldr	r0, [pc, #8]	@ (8003950 <UART5_IRQHandler+0x10>)
 8003946:	f003 fa33 	bl	8006db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20008a00 	.word	0x20008a00

08003954 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003958:	4802      	ldr	r0, [pc, #8]	@ (8003964 <TIM6_DAC_IRQHandler+0x10>)
 800395a:	f002 fa71 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20008970 	.word	0x20008970

08003968 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800396c:	4802      	ldr	r0, [pc, #8]	@ (8003978 <TIM7_IRQHandler+0x10>)
 800396e:	f002 fa67 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200090b0 	.word	0x200090b0

0800397c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003980:	4802      	ldr	r0, [pc, #8]	@ (800398c <DMA2_Stream0_IRQHandler+0x10>)
 8003982:	f000 fd15 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	200087f0 	.word	0x200087f0

08003990 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return 1;
 8003994:	2301      	movs	r3, #1
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <_kill>:

int _kill(int pid, int sig)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039aa:	f018 fc23 	bl	801c1f4 <__errno>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2216      	movs	r2, #22
 80039b2:	601a      	str	r2, [r3, #0]
  return -1;
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <_exit>:

void _exit (int status)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039c8:	f04f 31ff 	mov.w	r1, #4294967295
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ffe7 	bl	80039a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80039d2:	bf00      	nop
 80039d4:	e7fd      	b.n	80039d2 <_exit+0x12>

080039d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e2:	2300      	movs	r3, #0
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	e00a      	b.n	80039fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039e8:	f3af 8000 	nop.w
 80039ec:	4601      	mov	r1, r0
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	60ba      	str	r2, [r7, #8]
 80039f4:	b2ca      	uxtb	r2, r1
 80039f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	3301      	adds	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	dbf0      	blt.n	80039e8 <_read+0x12>
  }

  return len;
 8003a06:	687b      	ldr	r3, [r7, #4]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e009      	b.n	8003a36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	60ba      	str	r2, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3301      	adds	r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	dbf1      	blt.n	8003a22 <_write+0x12>
  }
  return len;
 8003a3e:	687b      	ldr	r3, [r7, #4]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <_close>:

int _close(int file)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a70:	605a      	str	r2, [r3, #4]
  return 0;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <_isatty>:

int _isatty(int file)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a88:	2301      	movs	r3, #1
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ab8:	4a14      	ldr	r2, [pc, #80]	@ (8003b0c <_sbrk+0x5c>)
 8003aba:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <_sbrk+0x60>)
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ac4:	4b13      	ldr	r3, [pc, #76]	@ (8003b14 <_sbrk+0x64>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003acc:	4b11      	ldr	r3, [pc, #68]	@ (8003b14 <_sbrk+0x64>)
 8003ace:	4a12      	ldr	r2, [pc, #72]	@ (8003b18 <_sbrk+0x68>)
 8003ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ad2:	4b10      	ldr	r3, [pc, #64]	@ (8003b14 <_sbrk+0x64>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d207      	bcs.n	8003af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ae0:	f018 fb88 	bl	801c1f4 <__errno>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
 8003aee:	e009      	b.n	8003b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003af0:	4b08      	ldr	r3, [pc, #32]	@ (8003b14 <_sbrk+0x64>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003af6:	4b07      	ldr	r3, [pc, #28]	@ (8003b14 <_sbrk+0x64>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	4a05      	ldr	r2, [pc, #20]	@ (8003b14 <_sbrk+0x64>)
 8003b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20020000 	.word	0x20020000
 8003b10:	00000400 	.word	0x00000400
 8003b14:	200090fc 	.word	0x200090fc
 8003b18:	20012a48 	.word	0x20012a48

08003b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b20:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <SystemInit+0x20>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b26:	4a05      	ldr	r2, [pc, #20]	@ (8003b3c <SystemInit+0x20>)
 8003b28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b44:	f7ff ffea 	bl	8003b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b48:	480c      	ldr	r0, [pc, #48]	@ (8003b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b4a:	490d      	ldr	r1, [pc, #52]	@ (8003b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b50:	e002      	b.n	8003b58 <LoopCopyDataInit>

08003b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b56:	3304      	adds	r3, #4

08003b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b5c:	d3f9      	bcc.n	8003b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b60:	4c0a      	ldr	r4, [pc, #40]	@ (8003b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b64:	e001      	b.n	8003b6a <LoopFillZerobss>

08003b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b68:	3204      	adds	r2, #4

08003b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b6c:	d3fb      	bcc.n	8003b66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003b6e:	f018 fb47 	bl	801c200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b72:	f7fe f89f 	bl	8001cb4 <main>
  bx  lr    
 8003b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b80:	2000434c 	.word	0x2000434c
  ldr r2, =_sidata
 8003b84:	0801ecf8 	.word	0x0801ecf8
  ldr r2, =_sbss
 8003b88:	20004350 	.word	0x20004350
  ldr r4, =_ebss
 8003b8c:	20012a48 	.word	0x20012a48

08003b90 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b90:	e7fe      	b.n	8003b90 <CAN1_RX0_IRQHandler>
	...

08003b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b98:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <HAL_Init+0x40>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <HAL_Init+0x40>)
 8003b9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd4 <HAL_Init+0x40>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd4 <HAL_Init+0x40>)
 8003baa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bb0:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <HAL_Init+0x40>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a07      	ldr	r2, [pc, #28]	@ (8003bd4 <HAL_Init+0x40>)
 8003bb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bbc:	2003      	movs	r0, #3
 8003bbe:	f000 fa2a 	bl	8004016 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bc2:	200f      	movs	r0, #15
 8003bc4:	f7ff fd8e 	bl	80036e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc8:	f7ff fa76 	bl	80030b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00

08003bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bdc:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_IncTick+0x20>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_IncTick+0x24>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4413      	add	r3, r2
 8003be8:	4a04      	ldr	r2, [pc, #16]	@ (8003bfc <HAL_IncTick+0x24>)
 8003bea:	6013      	str	r3, [r2, #0]
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	2000002c 	.word	0x2000002c
 8003bfc:	20009100 	.word	0x20009100

08003c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return uwTick;
 8003c04:	4b03      	ldr	r3, [pc, #12]	@ (8003c14 <HAL_GetTick+0x14>)
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20009100 	.word	0x20009100

08003c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c20:	f7ff ffee 	bl	8003c00 <HAL_GetTick>
 8003c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d005      	beq.n	8003c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c32:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <HAL_Delay+0x44>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c3e:	bf00      	nop
 8003c40:	f7ff ffde 	bl	8003c00 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d8f7      	bhi.n	8003c40 <HAL_Delay+0x28>
  {
  }
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	2000002c 	.word	0x2000002c

08003c60 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d049      	beq.n	8003d2a <HAL_ADC_IRQHandler+0xca>
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d046      	beq.n	8003d2a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d105      	bne.n	8003cb4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d12b      	bne.n	8003d1a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d127      	bne.n	8003d1a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d006      	beq.n	8003ce6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d119      	bne.n	8003d1a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0220 	bic.w	r2, r2, #32
 8003cf4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	f043 0201 	orr.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fe fd50 	bl	80027c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0212 	mvn.w	r2, #18
 8003d28:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d38:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d057      	beq.n	8003df0 <HAL_ADC_IRQHandler+0x190>
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d054      	beq.n	8003df0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d139      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d72:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d006      	beq.n	8003d88 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d12b      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d124      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d11d      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d119      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd8:	f043 0201 	orr.w	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f861 	bl	8003ea8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f06f 020c 	mvn.w	r2, #12
 8003dee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfe:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d017      	beq.n	8003e36 <HAL_ADC_IRQHandler+0x1d6>
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d014      	beq.n	8003e36 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d10d      	bne.n	8003e36 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f82a 	bl	8003e80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0201 	mvn.w	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e44:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d015      	beq.n	8003e78 <HAL_ADC_IRQHandler+0x218>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d012      	beq.n	8003e78 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	f043 0202 	orr.w	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f06f 0220 	mvn.w	r2, #32
 8003e66:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f813 	bl	8003e94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f06f 0220 	mvn.w	r2, #32
 8003e76:	601a      	str	r2, [r3, #0]
  }
}
 8003e78:	bf00      	nop
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eee:	4a04      	ldr	r2, [pc, #16]	@ (8003f00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	60d3      	str	r3, [r2, #12]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f08:	4b04      	ldr	r3, [pc, #16]	@ (8003f1c <__NVIC_GetPriorityGrouping+0x18>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	f003 0307 	and.w	r3, r3, #7
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	db0b      	blt.n	8003f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	f003 021f 	and.w	r2, r3, #31
 8003f38:	4907      	ldr	r1, [pc, #28]	@ (8003f58 <__NVIC_EnableIRQ+0x38>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	2001      	movs	r0, #1
 8003f42:	fa00 f202 	lsl.w	r2, r0, r2
 8003f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	e000e100 	.word	0xe000e100

08003f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db0a      	blt.n	8003f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	490c      	ldr	r1, [pc, #48]	@ (8003fa8 <__NVIC_SetPriority+0x4c>)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	0112      	lsls	r2, r2, #4
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	440b      	add	r3, r1
 8003f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f84:	e00a      	b.n	8003f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	4908      	ldr	r1, [pc, #32]	@ (8003fac <__NVIC_SetPriority+0x50>)
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	3b04      	subs	r3, #4
 8003f94:	0112      	lsls	r2, r2, #4
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	440b      	add	r3, r1
 8003f9a:	761a      	strb	r2, [r3, #24]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000e100 	.word	0xe000e100
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	@ 0x24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f1c3 0307 	rsb	r3, r3, #7
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	bf28      	it	cs
 8003fce:	2304      	movcs	r3, #4
 8003fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d902      	bls.n	8003fe0 <NVIC_EncodePriority+0x30>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3b03      	subs	r3, #3
 8003fde:	e000      	b.n	8003fe2 <NVIC_EncodePriority+0x32>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43d9      	mvns	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004008:	4313      	orrs	r3, r2
         );
}
 800400a:	4618      	mov	r0, r3
 800400c:	3724      	adds	r7, #36	@ 0x24
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff ff4c 	bl	8003ebc <__NVIC_SetPriorityGrouping>
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800403e:	f7ff ff61 	bl	8003f04 <__NVIC_GetPriorityGrouping>
 8004042:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	6978      	ldr	r0, [r7, #20]
 800404a:	f7ff ffb1 	bl	8003fb0 <NVIC_EncodePriority>
 800404e:	4602      	mov	r2, r0
 8004050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ff80 	bl	8003f5c <__NVIC_SetPriority>
}
 800405c:	bf00      	nop
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800406e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff ff54 	bl	8003f20 <__NVIC_EnableIRQ>
}
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800408c:	f7ff fdb8 	bl	8003c00 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e099      	b.n	80041d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040bc:	e00f      	b.n	80040de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040be:	f7ff fd9f 	bl	8003c00 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d908      	bls.n	80040de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2203      	movs	r2, #3
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e078      	b.n	80041d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e8      	bne.n	80040be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4b38      	ldr	r3, [pc, #224]	@ (80041d8 <HAL_DMA_Init+0x158>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800410a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	2b04      	cmp	r3, #4
 8004136:	d107      	bne.n	8004148 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004140:	4313      	orrs	r3, r2
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0307 	bic.w	r3, r3, #7
 800415e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	2b04      	cmp	r3, #4
 8004170:	d117      	bne.n	80041a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fb01 	bl	800478c <DMA_CheckFifoParam>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d008      	beq.n	80041a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2240      	movs	r2, #64	@ 0x40
 8004194:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800419e:	2301      	movs	r3, #1
 80041a0:	e016      	b.n	80041d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fab8 	bl	8004720 <DMA_CalcBaseAndBitshift>
 80041b0:	4603      	mov	r3, r0
 80041b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b8:	223f      	movs	r2, #63	@ 0x3f
 80041ba:	409a      	lsls	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	f010803f 	.word	0xf010803f

080041dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
 80041e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_DMA_Start_IT+0x26>
 80041fe:	2302      	movs	r3, #2
 8004200:	e040      	b.n	8004284 <HAL_DMA_Start_IT+0xa8>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d12f      	bne.n	8004276 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fa4a 	bl	80046c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004234:	223f      	movs	r2, #63	@ 0x3f
 8004236:	409a      	lsls	r2, r3
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0216 	orr.w	r2, r2, #22
 800424a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d007      	beq.n	8004264 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0208 	orr.w	r2, r2, #8
 8004262:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e005      	b.n	8004282 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800427e:	2302      	movs	r3, #2
 8004280:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004282:	7dfb      	ldrb	r3, [r7, #23]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004298:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800429a:	f7ff fcb1 	bl	8003c00 <HAL_GetTick>
 800429e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d008      	beq.n	80042be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2280      	movs	r2, #128	@ 0x80
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e052      	b.n	8004364 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0216 	bic.w	r2, r2, #22
 80042cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695a      	ldr	r2, [r3, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <HAL_DMA_Abort+0x62>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0208 	bic.w	r2, r2, #8
 80042fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800430e:	e013      	b.n	8004338 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004310:	f7ff fc76 	bl	8003c00 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b05      	cmp	r3, #5
 800431c:	d90c      	bls.n	8004338 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2203      	movs	r2, #3
 8004328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e015      	b.n	8004364 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e4      	bne.n	8004310 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434a:	223f      	movs	r2, #63	@ 0x3f
 800434c:	409a      	lsls	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d004      	beq.n	800438a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2280      	movs	r2, #128	@ 0x80
 8004384:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e00c      	b.n	80043a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2205      	movs	r2, #5
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0201 	bic.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043bc:	4b8e      	ldr	r3, [pc, #568]	@ (80045f8 <HAL_DMA_IRQHandler+0x248>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a8e      	ldr	r2, [pc, #568]	@ (80045fc <HAL_DMA_IRQHandler+0x24c>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043da:	2208      	movs	r2, #8
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01a      	beq.n	800441c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0204 	bic.w	r2, r2, #4
 8004402:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004408:	2208      	movs	r2, #8
 800440a:	409a      	lsls	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004420:	2201      	movs	r2, #1
 8004422:	409a      	lsls	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800443e:	2201      	movs	r2, #1
 8004440:	409a      	lsls	r2, r3
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444a:	f043 0202 	orr.w	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004456:	2204      	movs	r2, #4
 8004458:	409a      	lsls	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d012      	beq.n	8004488 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	2204      	movs	r2, #4
 8004476:	409a      	lsls	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004480:	f043 0204 	orr.w	r2, r3, #4
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448c:	2210      	movs	r2, #16
 800448e:	409a      	lsls	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d043      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03c      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044aa:	2210      	movs	r2, #16
 80044ac:	409a      	lsls	r2, r3
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d018      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d108      	bne.n	80044e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d024      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4798      	blx	r3
 80044de:	e01f      	b.n	8004520 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
 80044f0:	e016      	b.n	8004520 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0208 	bic.w	r2, r2, #8
 800450e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004524:	2220      	movs	r2, #32
 8004526:	409a      	lsls	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 808f 	beq.w	8004650 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8087 	beq.w	8004650 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004546:	2220      	movs	r2, #32
 8004548:	409a      	lsls	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b05      	cmp	r3, #5
 8004558:	d136      	bne.n	80045c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0216 	bic.w	r2, r2, #22
 8004568:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004578:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_DMA_IRQHandler+0x1da>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0208 	bic.w	r2, r2, #8
 8004598:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459e:	223f      	movs	r2, #63	@ 0x3f
 80045a0:	409a      	lsls	r2, r3
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d07e      	beq.n	80046bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
        }
        return;
 80045c6:	e079      	b.n	80046bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01d      	beq.n	8004612 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10d      	bne.n	8004600 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d031      	beq.n	8004650 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
 80045f4:	e02c      	b.n	8004650 <HAL_DMA_IRQHandler+0x2a0>
 80045f6:	bf00      	nop
 80045f8:	20000024 	.word	0x20000024
 80045fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d023      	beq.n	8004650 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
 8004610:	e01e      	b.n	8004650 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10f      	bne.n	8004640 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0210 	bic.w	r2, r2, #16
 800462e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004654:	2b00      	cmp	r3, #0
 8004656:	d032      	beq.n	80046be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d022      	beq.n	80046aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2205      	movs	r2, #5
 8004668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0201 	bic.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	3301      	adds	r3, #1
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	429a      	cmp	r2, r3
 8004686:	d307      	bcc.n	8004698 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f2      	bne.n	800467c <HAL_DMA_IRQHandler+0x2cc>
 8004696:	e000      	b.n	800469a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004698:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
 80046ba:	e000      	b.n	80046be <HAL_DMA_IRQHandler+0x30e>
        return;
 80046bc:	bf00      	nop
    }
  }
}
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b40      	cmp	r3, #64	@ 0x40
 80046f0:	d108      	bne.n	8004704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004702:	e007      	b.n	8004714 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	3b10      	subs	r3, #16
 8004730:	4a14      	ldr	r2, [pc, #80]	@ (8004784 <DMA_CalcBaseAndBitshift+0x64>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800473a:	4a13      	ldr	r2, [pc, #76]	@ (8004788 <DMA_CalcBaseAndBitshift+0x68>)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d909      	bls.n	8004762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	1d1a      	adds	r2, r3, #4
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004760:	e007      	b.n	8004772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	aaaaaaab 	.word	0xaaaaaaab
 8004788:	0801d0f4 	.word	0x0801d0f4

0800478c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d11f      	bne.n	80047e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d856      	bhi.n	800485a <DMA_CheckFifoParam+0xce>
 80047ac:	a201      	add	r2, pc, #4	@ (adr r2, 80047b4 <DMA_CheckFifoParam+0x28>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047c5 	.word	0x080047c5
 80047b8:	080047d7 	.word	0x080047d7
 80047bc:	080047c5 	.word	0x080047c5
 80047c0:	0800485b 	.word	0x0800485b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d046      	beq.n	800485e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d4:	e043      	b.n	800485e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047de:	d140      	bne.n	8004862 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e4:	e03d      	b.n	8004862 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ee:	d121      	bne.n	8004834 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d837      	bhi.n	8004866 <DMA_CheckFifoParam+0xda>
 80047f6:	a201      	add	r2, pc, #4	@ (adr r2, 80047fc <DMA_CheckFifoParam+0x70>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	08004813 	.word	0x08004813
 8004804:	0800480d 	.word	0x0800480d
 8004808:	08004825 	.word	0x08004825
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      break;
 8004810:	e030      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d025      	beq.n	800486a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004822:	e022      	b.n	800486a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800482c:	d11f      	bne.n	800486e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004832:	e01c      	b.n	800486e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d903      	bls.n	8004842 <DMA_CheckFifoParam+0xb6>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d003      	beq.n	8004848 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004840:	e018      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
      break;
 8004846:	e015      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      break;
 8004858:	e00b      	b.n	8004872 <DMA_CheckFifoParam+0xe6>
      break;
 800485a:	bf00      	nop
 800485c:	e00a      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 800485e:	bf00      	nop
 8004860:	e008      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 8004862:	bf00      	nop
 8004864:	e006      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 8004866:	bf00      	nop
 8004868:	e004      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;   
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 8004872:	bf00      	nop
    }
  } 
  
  return status; 
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop

08004884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	@ 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004896:	2300      	movs	r3, #0
 8004898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	e165      	b.n	8004b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048a0:	2201      	movs	r2, #1
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	f040 8154 	bne.w	8004b66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d005      	beq.n	80048d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d130      	bne.n	8004938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	2203      	movs	r2, #3
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800490c:	2201      	movs	r2, #1
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 0201 	and.w	r2, r3, #1
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b03      	cmp	r3, #3
 8004942:	d017      	beq.n	8004974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d123      	bne.n	80049c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	08da      	lsrs	r2, r3, #3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3208      	adds	r2, #8
 8004988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	220f      	movs	r2, #15
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	08da      	lsrs	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3208      	adds	r2, #8
 80049c2:	69b9      	ldr	r1, [r7, #24]
 80049c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	2203      	movs	r2, #3
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	43db      	mvns	r3, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4013      	ands	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 0203 	and.w	r2, r3, #3
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80ae 	beq.w	8004b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8004b84 <HAL_GPIO_Init+0x300>)
 8004a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a12:	4a5c      	ldr	r2, [pc, #368]	@ (8004b84 <HAL_GPIO_Init+0x300>)
 8004a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a1a:	4b5a      	ldr	r3, [pc, #360]	@ (8004b84 <HAL_GPIO_Init+0x300>)
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a26:	4a58      	ldr	r2, [pc, #352]	@ (8004b88 <HAL_GPIO_Init+0x304>)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	220f      	movs	r2, #15
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8004b8c <HAL_GPIO_Init+0x308>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d025      	beq.n	8004a9e <HAL_GPIO_Init+0x21a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a4e      	ldr	r2, [pc, #312]	@ (8004b90 <HAL_GPIO_Init+0x30c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01f      	beq.n	8004a9a <HAL_GPIO_Init+0x216>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8004b94 <HAL_GPIO_Init+0x310>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d019      	beq.n	8004a96 <HAL_GPIO_Init+0x212>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a4c      	ldr	r2, [pc, #304]	@ (8004b98 <HAL_GPIO_Init+0x314>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_GPIO_Init+0x20e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b9c <HAL_GPIO_Init+0x318>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00d      	beq.n	8004a8e <HAL_GPIO_Init+0x20a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a4a      	ldr	r2, [pc, #296]	@ (8004ba0 <HAL_GPIO_Init+0x31c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <HAL_GPIO_Init+0x206>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a49      	ldr	r2, [pc, #292]	@ (8004ba4 <HAL_GPIO_Init+0x320>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d101      	bne.n	8004a86 <HAL_GPIO_Init+0x202>
 8004a82:	2306      	movs	r3, #6
 8004a84:	e00c      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a86:	2307      	movs	r3, #7
 8004a88:	e00a      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a8a:	2305      	movs	r3, #5
 8004a8c:	e008      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a8e:	2304      	movs	r3, #4
 8004a90:	e006      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a92:	2303      	movs	r3, #3
 8004a94:	e004      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e002      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	f002 0203 	and.w	r2, r2, #3
 8004aa6:	0092      	lsls	r2, r2, #2
 8004aa8:	4093      	lsls	r3, r2
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ab0:	4935      	ldr	r1, [pc, #212]	@ (8004b88 <HAL_GPIO_Init+0x304>)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	089b      	lsrs	r3, r3, #2
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004abe:	4b3a      	ldr	r3, [pc, #232]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ae2:	4a31      	ldr	r2, [pc, #196]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b0c:	4a26      	ldr	r2, [pc, #152]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b12:	4b25      	ldr	r3, [pc, #148]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b36:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b60:	4a11      	ldr	r2, [pc, #68]	@ (8004ba8 <HAL_GPIO_Init+0x324>)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b0f      	cmp	r3, #15
 8004b70:	f67f ae96 	bls.w	80048a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	3724      	adds	r7, #36	@ 0x24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40013800 	.word	0x40013800
 8004b8c:	40020000 	.word	0x40020000
 8004b90:	40020400 	.word	0x40020400
 8004b94:	40020800 	.word	0x40020800
 8004b98:	40020c00 	.word	0x40020c00
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40021400 	.word	0x40021400
 8004ba4:	40021800 	.word	0x40021800
 8004ba8:	40013c00 	.word	0x40013c00

08004bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bbc:	787b      	ldrb	r3, [r7, #1]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bc2:	887a      	ldrh	r2, [r7, #2]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bc8:	e003      	b.n	8004bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	041a      	lsls	r2, r3, #16
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	619a      	str	r2, [r3, #24]
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0cc      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bf4:	4b68      	ldr	r3, [pc, #416]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d90c      	bls.n	8004c1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c02:	4b65      	ldr	r3, [pc, #404]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0a:	4b63      	ldr	r3, [pc, #396]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0b8      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d020      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c34:	4b59      	ldr	r3, [pc, #356]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	4a58      	ldr	r2, [pc, #352]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c4c:	4b53      	ldr	r3, [pc, #332]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4a52      	ldr	r2, [pc, #328]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c58:	4b50      	ldr	r3, [pc, #320]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	494d      	ldr	r1, [pc, #308]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d044      	beq.n	8004d00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7e:	4b47      	ldr	r3, [pc, #284]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d119      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e07f      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d003      	beq.n	8004c9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d107      	bne.n	8004cae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e06f      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cae:	4b3b      	ldr	r3, [pc, #236]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e067      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cbe:	4b37      	ldr	r3, [pc, #220]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f023 0203 	bic.w	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	4934      	ldr	r1, [pc, #208]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cd0:	f7fe ff96 	bl	8003c00 <HAL_GetTick>
 8004cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd6:	e00a      	b.n	8004cee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd8:	f7fe ff92 	bl	8003c00 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e04f      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cee:	4b2b      	ldr	r3, [pc, #172]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f003 020c 	and.w	r2, r3, #12
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d1eb      	bne.n	8004cd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d00:	4b25      	ldr	r3, [pc, #148]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d20c      	bcs.n	8004d28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d0e:	4b22      	ldr	r3, [pc, #136]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b20      	ldr	r3, [pc, #128]	@ (8004d98 <HAL_RCC_ClockConfig+0x1b8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e032      	b.n	8004d8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d008      	beq.n	8004d46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d34:	4b19      	ldr	r3, [pc, #100]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	4916      	ldr	r1, [pc, #88]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d009      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d52:	4b12      	ldr	r3, [pc, #72]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	490e      	ldr	r1, [pc, #56]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d66:	f000 f887 	bl	8004e78 <HAL_RCC_GetSysClockFreq>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	490a      	ldr	r1, [pc, #40]	@ (8004da0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d78:	5ccb      	ldrb	r3, [r1, r3]
 8004d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7e:	4a09      	ldr	r2, [pc, #36]	@ (8004da4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d82:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe fcac 	bl	80036e4 <HAL_InitTick>

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40023c00 	.word	0x40023c00
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	0801d0dc 	.word	0x0801d0dc
 8004da4:	20000024 	.word	0x20000024
 8004da8:	20000028 	.word	0x20000028

08004dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db0:	4b03      	ldr	r3, [pc, #12]	@ (8004dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004db2:	681b      	ldr	r3, [r3, #0]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000024 	.word	0x20000024

08004dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004dc8:	f7ff fff0 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b05      	ldr	r3, [pc, #20]	@ (8004de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	0a9b      	lsrs	r3, r3, #10
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	4903      	ldr	r1, [pc, #12]	@ (8004de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dda:	5ccb      	ldrb	r3, [r1, r3]
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40023800 	.word	0x40023800
 8004de8:	0801d0ec 	.word	0x0801d0ec

08004dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004df0:	f7ff ffdc 	bl	8004dac <HAL_RCC_GetHCLKFreq>
 8004df4:	4602      	mov	r2, r0
 8004df6:	4b05      	ldr	r3, [pc, #20]	@ (8004e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	0b5b      	lsrs	r3, r3, #13
 8004dfc:	f003 0307 	and.w	r3, r3, #7
 8004e00:	4903      	ldr	r1, [pc, #12]	@ (8004e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e02:	5ccb      	ldrb	r3, [r1, r3]
 8004e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	0801d0ec 	.word	0x0801d0ec

08004e14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	220f      	movs	r2, #15
 8004e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e24:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <HAL_RCC_GetClockConfig+0x5c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0203 	and.w	r2, r3, #3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e30:	4b0f      	ldr	r3, [pc, #60]	@ (8004e70 <HAL_RCC_GetClockConfig+0x5c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e70 <HAL_RCC_GetClockConfig+0x5c>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e48:	4b09      	ldr	r3, [pc, #36]	@ (8004e70 <HAL_RCC_GetClockConfig+0x5c>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	08db      	lsrs	r3, r3, #3
 8004e4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e56:	4b07      	ldr	r3, [pc, #28]	@ (8004e74 <HAL_RCC_GetClockConfig+0x60>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 020f 	and.w	r2, r3, #15
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	601a      	str	r2, [r3, #0]
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40023800 	.word	0x40023800
 8004e74:	40023c00 	.word	0x40023c00

08004e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e7c:	b0ae      	sub	sp, #184	@ 0xb8
 8004e7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e9e:	4bcb      	ldr	r3, [pc, #812]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	f200 8206 	bhi.w	80052b8 <HAL_RCC_GetSysClockFreq+0x440>
 8004eac:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ee9 	.word	0x08004ee9
 8004eb8:	080052b9 	.word	0x080052b9
 8004ebc:	080052b9 	.word	0x080052b9
 8004ec0:	080052b9 	.word	0x080052b9
 8004ec4:	08004ef1 	.word	0x08004ef1
 8004ec8:	080052b9 	.word	0x080052b9
 8004ecc:	080052b9 	.word	0x080052b9
 8004ed0:	080052b9 	.word	0x080052b9
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	080052b9 	.word	0x080052b9
 8004edc:	080052b9 	.word	0x080052b9
 8004ee0:	080052b9 	.word	0x080052b9
 8004ee4:	080050e9 	.word	0x080050e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ee8:	4bb9      	ldr	r3, [pc, #740]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004eee:	e1e7      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ef0:	4bb8      	ldr	r3, [pc, #736]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ef6:	e1e3      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ef8:	4bb4      	ldr	r3, [pc, #720]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f04:	4bb1      	ldr	r3, [pc, #708]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d071      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f10:	4bae      	ldr	r3, [pc, #696]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	099b      	lsrs	r3, r3, #6
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f1c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	f04f 0000 	mov.w	r0, #0
 8004f3e:	f04f 0100 	mov.w	r1, #0
 8004f42:	0159      	lsls	r1, r3, #5
 8004f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f48:	0150      	lsls	r0, r2, #5
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4621      	mov	r1, r4
 8004f50:	1a51      	subs	r1, r2, r1
 8004f52:	6439      	str	r1, [r7, #64]	@ 0x40
 8004f54:	4629      	mov	r1, r5
 8004f56:	eb63 0301 	sbc.w	r3, r3, r1
 8004f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004f68:	4649      	mov	r1, r9
 8004f6a:	018b      	lsls	r3, r1, #6
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f72:	4641      	mov	r1, r8
 8004f74:	018a      	lsls	r2, r1, #6
 8004f76:	4641      	mov	r1, r8
 8004f78:	1a51      	subs	r1, r2, r1
 8004f7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004f90:	4649      	mov	r1, r9
 8004f92:	00cb      	lsls	r3, r1, #3
 8004f94:	4641      	mov	r1, r8
 8004f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f9a:	4641      	mov	r1, r8
 8004f9c:	00ca      	lsls	r2, r1, #3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	189b      	adds	r3, r3, r2
 8004fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004faa:	462b      	mov	r3, r5
 8004fac:	460a      	mov	r2, r1
 8004fae:	eb42 0303 	adc.w	r3, r2, r3
 8004fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	024b      	lsls	r3, r1, #9
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fca:	4621      	mov	r1, r4
 8004fcc:	024a      	lsls	r2, r1, #9
 8004fce:	4610      	mov	r0, r2
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fe0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004fe4:	f7fb fdc2 	bl	8000b6c <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4613      	mov	r3, r2
 8004fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ff2:	e067      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff4:	4b75      	ldr	r3, [pc, #468]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x354>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	099b      	lsrs	r3, r3, #6
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005000:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005004:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800500c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800500e:	2300      	movs	r3, #0
 8005010:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005012:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005016:	4622      	mov	r2, r4
 8005018:	462b      	mov	r3, r5
 800501a:	f04f 0000 	mov.w	r0, #0
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	0159      	lsls	r1, r3, #5
 8005024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005028:	0150      	lsls	r0, r2, #5
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4621      	mov	r1, r4
 8005030:	1a51      	subs	r1, r2, r1
 8005032:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005034:	4629      	mov	r1, r5
 8005036:	eb63 0301 	sbc.w	r3, r3, r1
 800503a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005048:	4649      	mov	r1, r9
 800504a:	018b      	lsls	r3, r1, #6
 800504c:	4641      	mov	r1, r8
 800504e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005052:	4641      	mov	r1, r8
 8005054:	018a      	lsls	r2, r1, #6
 8005056:	4641      	mov	r1, r8
 8005058:	ebb2 0a01 	subs.w	sl, r2, r1
 800505c:	4649      	mov	r1, r9
 800505e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800506e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005076:	4692      	mov	sl, r2
 8005078:	469b      	mov	fp, r3
 800507a:	4623      	mov	r3, r4
 800507c:	eb1a 0303 	adds.w	r3, sl, r3
 8005080:	623b      	str	r3, [r7, #32]
 8005082:	462b      	mov	r3, r5
 8005084:	eb4b 0303 	adc.w	r3, fp, r3
 8005088:	627b      	str	r3, [r7, #36]	@ 0x24
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005096:	4629      	mov	r1, r5
 8005098:	028b      	lsls	r3, r1, #10
 800509a:	4621      	mov	r1, r4
 800509c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050a0:	4621      	mov	r1, r4
 80050a2:	028a      	lsls	r2, r1, #10
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050ac:	2200      	movs	r2, #0
 80050ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80050b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80050b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80050b6:	f7fb fd59 	bl	8000b6c <__aeabi_uldivmod>
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	4613      	mov	r3, r2
 80050c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050c4:	4b41      	ldr	r3, [pc, #260]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x354>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	0c1b      	lsrs	r3, r3, #16
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	3301      	adds	r3, #1
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80050d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80050e6:	e0eb      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e8:	4b38      	ldr	r3, [pc, #224]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x354>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050f4:	4b35      	ldr	r3, [pc, #212]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x354>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d06b      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005100:	4b32      	ldr	r3, [pc, #200]	@ (80051cc <HAL_RCC_GetSysClockFreq+0x354>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	2200      	movs	r2, #0
 8005108:	66bb      	str	r3, [r7, #104]	@ 0x68
 800510a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800510c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800510e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005112:	663b      	str	r3, [r7, #96]	@ 0x60
 8005114:	2300      	movs	r3, #0
 8005116:	667b      	str	r3, [r7, #100]	@ 0x64
 8005118:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800511c:	4622      	mov	r2, r4
 800511e:	462b      	mov	r3, r5
 8005120:	f04f 0000 	mov.w	r0, #0
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	0159      	lsls	r1, r3, #5
 800512a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800512e:	0150      	lsls	r0, r2, #5
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4621      	mov	r1, r4
 8005136:	1a51      	subs	r1, r2, r1
 8005138:	61b9      	str	r1, [r7, #24]
 800513a:	4629      	mov	r1, r5
 800513c:	eb63 0301 	sbc.w	r3, r3, r1
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800514e:	4659      	mov	r1, fp
 8005150:	018b      	lsls	r3, r1, #6
 8005152:	4651      	mov	r1, sl
 8005154:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005158:	4651      	mov	r1, sl
 800515a:	018a      	lsls	r2, r1, #6
 800515c:	4651      	mov	r1, sl
 800515e:	ebb2 0801 	subs.w	r8, r2, r1
 8005162:	4659      	mov	r1, fp
 8005164:	eb63 0901 	sbc.w	r9, r3, r1
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005174:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005178:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800517c:	4690      	mov	r8, r2
 800517e:	4699      	mov	r9, r3
 8005180:	4623      	mov	r3, r4
 8005182:	eb18 0303 	adds.w	r3, r8, r3
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	462b      	mov	r3, r5
 800518a:	eb49 0303 	adc.w	r3, r9, r3
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800519c:	4629      	mov	r1, r5
 800519e:	024b      	lsls	r3, r1, #9
 80051a0:	4621      	mov	r1, r4
 80051a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051a6:	4621      	mov	r1, r4
 80051a8:	024a      	lsls	r2, r1, #9
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80051b2:	2200      	movs	r2, #0
 80051b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80051b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051bc:	f7fb fcd6 	bl	8000b6c <__aeabi_uldivmod>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4613      	mov	r3, r2
 80051c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051ca:	e065      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x420>
 80051cc:	40023800 	.word	0x40023800
 80051d0:	00f42400 	.word	0x00f42400
 80051d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051d8:	4b3d      	ldr	r3, [pc, #244]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	099b      	lsrs	r3, r3, #6
 80051de:	2200      	movs	r2, #0
 80051e0:	4618      	mov	r0, r3
 80051e2:	4611      	mov	r1, r2
 80051e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80051ea:	2300      	movs	r3, #0
 80051ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80051f2:	4642      	mov	r2, r8
 80051f4:	464b      	mov	r3, r9
 80051f6:	f04f 0000 	mov.w	r0, #0
 80051fa:	f04f 0100 	mov.w	r1, #0
 80051fe:	0159      	lsls	r1, r3, #5
 8005200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005204:	0150      	lsls	r0, r2, #5
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4641      	mov	r1, r8
 800520c:	1a51      	subs	r1, r2, r1
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	4649      	mov	r1, r9
 8005212:	eb63 0301 	sbc.w	r3, r3, r1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005224:	4659      	mov	r1, fp
 8005226:	018b      	lsls	r3, r1, #6
 8005228:	4651      	mov	r1, sl
 800522a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800522e:	4651      	mov	r1, sl
 8005230:	018a      	lsls	r2, r1, #6
 8005232:	4651      	mov	r1, sl
 8005234:	1a54      	subs	r4, r2, r1
 8005236:	4659      	mov	r1, fp
 8005238:	eb63 0501 	sbc.w	r5, r3, r1
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	00eb      	lsls	r3, r5, #3
 8005246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800524a:	00e2      	lsls	r2, r4, #3
 800524c:	4614      	mov	r4, r2
 800524e:	461d      	mov	r5, r3
 8005250:	4643      	mov	r3, r8
 8005252:	18e3      	adds	r3, r4, r3
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	464b      	mov	r3, r9
 8005258:	eb45 0303 	adc.w	r3, r5, r3
 800525c:	607b      	str	r3, [r7, #4]
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800526a:	4629      	mov	r1, r5
 800526c:	028b      	lsls	r3, r1, #10
 800526e:	4621      	mov	r1, r4
 8005270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005274:	4621      	mov	r1, r4
 8005276:	028a      	lsls	r2, r1, #10
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005280:	2200      	movs	r2, #0
 8005282:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005284:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005286:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800528a:	f7fb fc6f 	bl	8000b6c <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4613      	mov	r3, r2
 8005294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005298:	4b0d      	ldr	r3, [pc, #52]	@ (80052d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	0f1b      	lsrs	r3, r3, #28
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80052a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052b6:	e003      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052b8:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80052ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80052be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	37b8      	adds	r7, #184	@ 0xb8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ce:	bf00      	nop
 80052d0:	40023800 	.word	0x40023800
 80052d4:	00f42400 	.word	0x00f42400

080052d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e28d      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8083 	beq.w	80053fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052f8:	4b94      	ldr	r3, [pc, #592]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 030c 	and.w	r3, r3, #12
 8005300:	2b04      	cmp	r3, #4
 8005302:	d019      	beq.n	8005338 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005304:	4b91      	ldr	r3, [pc, #580]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 030c 	and.w	r3, r3, #12
        || \
 800530c:	2b08      	cmp	r3, #8
 800530e:	d106      	bne.n	800531e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005310:	4b8e      	ldr	r3, [pc, #568]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005318:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800531c:	d00c      	beq.n	8005338 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800531e:	4b8b      	ldr	r3, [pc, #556]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d112      	bne.n	8005350 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800532a:	4b88      	ldr	r3, [pc, #544]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005336:	d10b      	bne.n	8005350 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005338:	4b84      	ldr	r3, [pc, #528]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d05b      	beq.n	80053fc <HAL_RCC_OscConfig+0x124>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d157      	bne.n	80053fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e25a      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005358:	d106      	bne.n	8005368 <HAL_RCC_OscConfig+0x90>
 800535a:	4b7c      	ldr	r3, [pc, #496]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a7b      	ldr	r2, [pc, #492]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e01d      	b.n	80053a4 <HAL_RCC_OscConfig+0xcc>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005370:	d10c      	bne.n	800538c <HAL_RCC_OscConfig+0xb4>
 8005372:	4b76      	ldr	r3, [pc, #472]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a75      	ldr	r2, [pc, #468]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	4b73      	ldr	r3, [pc, #460]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a72      	ldr	r2, [pc, #456]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	e00b      	b.n	80053a4 <HAL_RCC_OscConfig+0xcc>
 800538c:	4b6f      	ldr	r3, [pc, #444]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a6e      	ldr	r2, [pc, #440]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	4b6c      	ldr	r3, [pc, #432]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a6b      	ldr	r2, [pc, #428]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800539e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d013      	beq.n	80053d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fe fc28 	bl	8003c00 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b4:	f7fe fc24 	bl	8003c00 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b64      	cmp	r3, #100	@ 0x64
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e21f      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c6:	4b61      	ldr	r3, [pc, #388]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f0      	beq.n	80053b4 <HAL_RCC_OscConfig+0xdc>
 80053d2:	e014      	b.n	80053fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fe fc14 	bl	8003c00 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053dc:	f7fe fc10 	bl	8003c00 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b64      	cmp	r3, #100	@ 0x64
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e20b      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ee:	4b57      	ldr	r3, [pc, #348]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x104>
 80053fa:	e000      	b.n	80053fe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d06f      	beq.n	80054ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800540a:	4b50      	ldr	r3, [pc, #320]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	2b00      	cmp	r3, #0
 8005414:	d017      	beq.n	8005446 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005416:	4b4d      	ldr	r3, [pc, #308]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 030c 	and.w	r3, r3, #12
        || \
 800541e:	2b08      	cmp	r3, #8
 8005420:	d105      	bne.n	800542e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005422:	4b4a      	ldr	r3, [pc, #296]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00b      	beq.n	8005446 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800542e:	4b47      	ldr	r3, [pc, #284]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005436:	2b0c      	cmp	r3, #12
 8005438:	d11c      	bne.n	8005474 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800543a:	4b44      	ldr	r3, [pc, #272]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d116      	bne.n	8005474 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005446:	4b41      	ldr	r3, [pc, #260]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_RCC_OscConfig+0x186>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d001      	beq.n	800545e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e1d3      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545e:	4b3b      	ldr	r3, [pc, #236]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4937      	ldr	r1, [pc, #220]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800546e:	4313      	orrs	r3, r2
 8005470:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005472:	e03a      	b.n	80054ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d020      	beq.n	80054be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800547c:	4b34      	ldr	r3, [pc, #208]	@ (8005550 <HAL_RCC_OscConfig+0x278>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005482:	f7fe fbbd 	bl	8003c00 <HAL_GetTick>
 8005486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800548a:	f7fe fbb9 	bl	8003c00 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e1b4      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549c:	4b2b      	ldr	r3, [pc, #172]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0f0      	beq.n	800548a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a8:	4b28      	ldr	r3, [pc, #160]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	4925      	ldr	r1, [pc, #148]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	600b      	str	r3, [r1, #0]
 80054bc:	e015      	b.n	80054ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054be:	4b24      	ldr	r3, [pc, #144]	@ (8005550 <HAL_RCC_OscConfig+0x278>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fe fb9c 	bl	8003c00 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054cc:	f7fe fb98 	bl	8003c00 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e193      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054de:	4b1b      	ldr	r3, [pc, #108]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1f0      	bne.n	80054cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d036      	beq.n	8005564 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d016      	beq.n	800552c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054fe:	4b15      	ldr	r3, [pc, #84]	@ (8005554 <HAL_RCC_OscConfig+0x27c>)
 8005500:	2201      	movs	r2, #1
 8005502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fe fb7c 	bl	8003c00 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800550c:	f7fe fb78 	bl	8003c00 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e173      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551e:	4b0b      	ldr	r3, [pc, #44]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0x234>
 800552a:	e01b      	b.n	8005564 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800552c:	4b09      	ldr	r3, [pc, #36]	@ (8005554 <HAL_RCC_OscConfig+0x27c>)
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005532:	f7fe fb65 	bl	8003c00 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005538:	e00e      	b.n	8005558 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800553a:	f7fe fb61 	bl	8003c00 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d907      	bls.n	8005558 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e15c      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
 800554c:	40023800 	.word	0x40023800
 8005550:	42470000 	.word	0x42470000
 8005554:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005558:	4b8a      	ldr	r3, [pc, #552]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 800555a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1ea      	bne.n	800553a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8097 	beq.w	80056a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005572:	2300      	movs	r3, #0
 8005574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005576:	4b83      	ldr	r3, [pc, #524]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10f      	bne.n	80055a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	4b7f      	ldr	r3, [pc, #508]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	4a7e      	ldr	r2, [pc, #504]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 800558c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005590:	6413      	str	r3, [r2, #64]	@ 0x40
 8005592:	4b7c      	ldr	r3, [pc, #496]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800559a:	60bb      	str	r3, [r7, #8]
 800559c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800559e:	2301      	movs	r3, #1
 80055a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a2:	4b79      	ldr	r3, [pc, #484]	@ (8005788 <HAL_RCC_OscConfig+0x4b0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d118      	bne.n	80055e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ae:	4b76      	ldr	r3, [pc, #472]	@ (8005788 <HAL_RCC_OscConfig+0x4b0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a75      	ldr	r2, [pc, #468]	@ (8005788 <HAL_RCC_OscConfig+0x4b0>)
 80055b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ba:	f7fe fb21 	bl	8003c00 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c2:	f7fe fb1d 	bl	8003c00 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e118      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005788 <HAL_RCC_OscConfig+0x4b0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d106      	bne.n	80055f6 <HAL_RCC_OscConfig+0x31e>
 80055e8:	4b66      	ldr	r3, [pc, #408]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ec:	4a65      	ldr	r2, [pc, #404]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80055f4:	e01c      	b.n	8005630 <HAL_RCC_OscConfig+0x358>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b05      	cmp	r3, #5
 80055fc:	d10c      	bne.n	8005618 <HAL_RCC_OscConfig+0x340>
 80055fe:	4b61      	ldr	r3, [pc, #388]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005602:	4a60      	ldr	r2, [pc, #384]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005604:	f043 0304 	orr.w	r3, r3, #4
 8005608:	6713      	str	r3, [r2, #112]	@ 0x70
 800560a:	4b5e      	ldr	r3, [pc, #376]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560e:	4a5d      	ldr	r2, [pc, #372]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005610:	f043 0301 	orr.w	r3, r3, #1
 8005614:	6713      	str	r3, [r2, #112]	@ 0x70
 8005616:	e00b      	b.n	8005630 <HAL_RCC_OscConfig+0x358>
 8005618:	4b5a      	ldr	r3, [pc, #360]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 800561a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561c:	4a59      	ldr	r2, [pc, #356]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	6713      	str	r3, [r2, #112]	@ 0x70
 8005624:	4b57      	ldr	r3, [pc, #348]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005628:	4a56      	ldr	r2, [pc, #344]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 800562a:	f023 0304 	bic.w	r3, r3, #4
 800562e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d015      	beq.n	8005664 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005638:	f7fe fae2 	bl	8003c00 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800563e:	e00a      	b.n	8005656 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005640:	f7fe fade 	bl	8003c00 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800564e:	4293      	cmp	r3, r2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e0d7      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005656:	4b4b      	ldr	r3, [pc, #300]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0ee      	beq.n	8005640 <HAL_RCC_OscConfig+0x368>
 8005662:	e014      	b.n	800568e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005664:	f7fe facc 	bl	8003c00 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566a:	e00a      	b.n	8005682 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566c:	f7fe fac8 	bl	8003c00 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800567a:	4293      	cmp	r3, r2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0c1      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005682:	4b40      	ldr	r3, [pc, #256]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1ee      	bne.n	800566c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800568e:	7dfb      	ldrb	r3, [r7, #23]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d105      	bne.n	80056a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005694:	4b3b      	ldr	r3, [pc, #236]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005698:	4a3a      	ldr	r2, [pc, #232]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 800569a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800569e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 80ad 	beq.w	8005804 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056aa:	4b36      	ldr	r3, [pc, #216]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 030c 	and.w	r3, r3, #12
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d060      	beq.n	8005778 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d145      	bne.n	800574a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056be:	4b33      	ldr	r3, [pc, #204]	@ (800578c <HAL_RCC_OscConfig+0x4b4>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fe fa9c 	bl	8003c00 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fe fa98 	bl	8003c00 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e093      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056de:	4b29      	ldr	r3, [pc, #164]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	69da      	ldr	r2, [r3, #28]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f8:	019b      	lsls	r3, r3, #6
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	3b01      	subs	r3, #1
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570c:	061b      	lsls	r3, r3, #24
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	491b      	ldr	r1, [pc, #108]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 8005718:	4313      	orrs	r3, r2
 800571a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800571c:	4b1b      	ldr	r3, [pc, #108]	@ (800578c <HAL_RCC_OscConfig+0x4b4>)
 800571e:	2201      	movs	r2, #1
 8005720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005722:	f7fe fa6d 	bl	8003c00 <HAL_GetTick>
 8005726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800572a:	f7fe fa69 	bl	8003c00 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e064      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800573c:	4b11      	ldr	r3, [pc, #68]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d0f0      	beq.n	800572a <HAL_RCC_OscConfig+0x452>
 8005748:	e05c      	b.n	8005804 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800574a:	4b10      	ldr	r3, [pc, #64]	@ (800578c <HAL_RCC_OscConfig+0x4b4>)
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005750:	f7fe fa56 	bl	8003c00 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005758:	f7fe fa52 	bl	8003c00 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e04d      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576a:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <HAL_RCC_OscConfig+0x4ac>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1f0      	bne.n	8005758 <HAL_RCC_OscConfig+0x480>
 8005776:	e045      	b.n	8005804 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d107      	bne.n	8005790 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e040      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
 8005784:	40023800 	.word	0x40023800
 8005788:	40007000 	.word	0x40007000
 800578c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005790:	4b1f      	ldr	r3, [pc, #124]	@ (8005810 <HAL_RCC_OscConfig+0x538>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d030      	beq.n	8005800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d129      	bne.n	8005800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d122      	bne.n	8005800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057c0:	4013      	ands	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d119      	bne.n	8005800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	3b01      	subs	r3, #1
 80057da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057dc:	429a      	cmp	r2, r3
 80057de:	d10f      	bne.n	8005800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d107      	bne.n	8005800 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40023800 	.word	0x40023800

08005814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e041      	b.n	80058aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fd fda0 	bl	8003380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3304      	adds	r3, #4
 8005850:	4619      	mov	r1, r3
 8005852:	4610      	mov	r0, r2
 8005854:	f000 fd96 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
	...

080058b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d001      	beq.n	80058cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e04e      	b.n	800596a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a23      	ldr	r2, [pc, #140]	@ (8005978 <HAL_TIM_Base_Start_IT+0xc4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d022      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x80>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058f6:	d01d      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x80>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1f      	ldr	r2, [pc, #124]	@ (800597c <HAL_TIM_Base_Start_IT+0xc8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d018      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x80>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1e      	ldr	r2, [pc, #120]	@ (8005980 <HAL_TIM_Base_Start_IT+0xcc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x80>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1c      	ldr	r2, [pc, #112]	@ (8005984 <HAL_TIM_Base_Start_IT+0xd0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00e      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x80>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1b      	ldr	r2, [pc, #108]	@ (8005988 <HAL_TIM_Base_Start_IT+0xd4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d009      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x80>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a19      	ldr	r2, [pc, #100]	@ (800598c <HAL_TIM_Base_Start_IT+0xd8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x80>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a18      	ldr	r2, [pc, #96]	@ (8005990 <HAL_TIM_Base_Start_IT+0xdc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d111      	bne.n	8005958 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b06      	cmp	r3, #6
 8005944:	d010      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005956:	e007      	b.n	8005968 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00
 8005988:	40010400 	.word	0x40010400
 800598c:	40014000 	.word	0x40014000
 8005990:	40001800 	.word	0x40001800

08005994 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e041      	b.n	8005a2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f839 	bl	8005a32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f000 fcd6 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d109      	bne.n	8005a6c <HAL_TIM_PWM_Start+0x24>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	bf14      	ite	ne
 8005a64:	2301      	movne	r3, #1
 8005a66:	2300      	moveq	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e022      	b.n	8005ab2 <HAL_TIM_PWM_Start+0x6a>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b04      	cmp	r3, #4
 8005a70:	d109      	bne.n	8005a86 <HAL_TIM_PWM_Start+0x3e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	bf14      	ite	ne
 8005a7e:	2301      	movne	r3, #1
 8005a80:	2300      	moveq	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	e015      	b.n	8005ab2 <HAL_TIM_PWM_Start+0x6a>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d109      	bne.n	8005aa0 <HAL_TIM_PWM_Start+0x58>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e008      	b.n	8005ab2 <HAL_TIM_PWM_Start+0x6a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	bf14      	ite	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	2300      	moveq	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e07c      	b.n	8005bb4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_PWM_Start+0x82>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ac8:	e013      	b.n	8005af2 <HAL_TIM_PWM_Start+0xaa>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_PWM_Start+0x92>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ad8:	e00b      	b.n	8005af2 <HAL_TIM_PWM_Start+0xaa>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_PWM_Start+0xa2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ae8:	e003      	b.n	8005af2 <HAL_TIM_PWM_Start+0xaa>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2201      	movs	r2, #1
 8005af8:	6839      	ldr	r1, [r7, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 ff32 	bl	8006964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a2d      	ldr	r2, [pc, #180]	@ (8005bbc <HAL_TIM_PWM_Start+0x174>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d004      	beq.n	8005b14 <HAL_TIM_PWM_Start+0xcc>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc0 <HAL_TIM_PWM_Start+0x178>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d101      	bne.n	8005b18 <HAL_TIM_PWM_Start+0xd0>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <HAL_TIM_PWM_Start+0xd2>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d007      	beq.n	8005b2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a22      	ldr	r2, [pc, #136]	@ (8005bbc <HAL_TIM_PWM_Start+0x174>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d022      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x136>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b40:	d01d      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x136>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc4 <HAL_TIM_PWM_Start+0x17c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d018      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x136>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc8 <HAL_TIM_PWM_Start+0x180>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x136>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bcc <HAL_TIM_PWM_Start+0x184>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00e      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x136>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a16      	ldr	r2, [pc, #88]	@ (8005bc0 <HAL_TIM_PWM_Start+0x178>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x136>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a18      	ldr	r2, [pc, #96]	@ (8005bd0 <HAL_TIM_PWM_Start+0x188>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x136>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a16      	ldr	r2, [pc, #88]	@ (8005bd4 <HAL_TIM_PWM_Start+0x18c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d111      	bne.n	8005ba2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	d010      	beq.n	8005bb2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0201 	orr.w	r2, r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba0:	e007      	b.n	8005bb2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0201 	orr.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40010400 	.word	0x40010400
 8005bc4:	40000400 	.word	0x40000400
 8005bc8:	40000800 	.word	0x40000800
 8005bcc:	40000c00 	.word	0x40000c00
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40001800 	.word	0x40001800

08005bd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e097      	b.n	8005d1c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7fd fa85 	bl	8003110 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c1c:	f023 0307 	bic.w	r3, r3, #7
 8005c20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	f000 fba9 	bl	8006384 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c5a:	f023 0303 	bic.w	r3, r3, #3
 8005c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005c78:	f023 030c 	bic.w	r3, r3, #12
 8005c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	4313      	orrs	r3, r2
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	011a      	lsls	r2, r3, #4
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	031b      	lsls	r3, r3, #12
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d110      	bne.n	8005d76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d102      	bne.n	8005d60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d5a:	7b7b      	ldrb	r3, [r7, #13]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d001      	beq.n	8005d64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e069      	b.n	8005e38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d74:	e031      	b.n	8005dda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d110      	bne.n	8005d9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d7c:	7bbb      	ldrb	r3, [r7, #14]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d102      	bne.n	8005d88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d82:	7b3b      	ldrb	r3, [r7, #12]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d001      	beq.n	8005d8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e055      	b.n	8005e38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d9c:	e01d      	b.n	8005dda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d108      	bne.n	8005db6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005da4:	7bbb      	ldrb	r3, [r7, #14]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d105      	bne.n	8005db6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005daa:	7b7b      	ldrb	r3, [r7, #13]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d102      	bne.n	8005db6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005db0:	7b3b      	ldrb	r3, [r7, #12]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d001      	beq.n	8005dba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e03e      	b.n	8005e38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <HAL_TIM_Encoder_Start+0xc4>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d008      	beq.n	8005df8 <HAL_TIM_Encoder_Start+0xd4>
 8005de6:	e00f      	b.n	8005e08 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2201      	movs	r2, #1
 8005dee:	2100      	movs	r1, #0
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fdb7 	bl	8006964 <TIM_CCxChannelCmd>
      break;
 8005df6:	e016      	b.n	8005e26 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	2104      	movs	r1, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fdaf 	bl	8006964 <TIM_CCxChannelCmd>
      break;
 8005e06:	e00e      	b.n	8005e26 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fda7 	bl	8006964 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	2104      	movs	r1, #4
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fda0 	bl	8006964 <TIM_CCxChannelCmd>
      break;
 8005e24:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d020      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01b      	beq.n	8005ea4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0202 	mvn.w	r2, #2
 8005e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa5b 	bl	8006346 <HAL_TIM_IC_CaptureCallback>
 8005e90:	e005      	b.n	8005e9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa4d 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fa5e 	bl	800635a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d020      	beq.n	8005ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01b      	beq.n	8005ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0204 	mvn.w	r2, #4
 8005ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa35 	bl	8006346 <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fa27 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fa38 	bl	800635a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d020      	beq.n	8005f3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01b      	beq.n	8005f3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f06f 0208 	mvn.w	r2, #8
 8005f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2204      	movs	r2, #4
 8005f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fa0f 	bl	8006346 <HAL_TIM_IC_CaptureCallback>
 8005f28:	e005      	b.n	8005f36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa01 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fa12 	bl	800635a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d020      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f003 0310 	and.w	r3, r3, #16
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0210 	mvn.w	r2, #16
 8005f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2208      	movs	r2, #8
 8005f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f9e9 	bl	8006346 <HAL_TIM_IC_CaptureCallback>
 8005f74:	e005      	b.n	8005f82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f9db 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f9ec 	bl	800635a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f003 0301 	and.w	r3, r3, #1
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f003 0301 	and.w	r3, r3, #1
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0201 	mvn.w	r2, #1
 8005fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fc ff0a 	bl	8002dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fd76 	bl	8006abc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9bd 	bl	800636e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f003 0320 	and.w	r3, r3, #32
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00c      	beq.n	8006018 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0220 	mvn.w	r2, #32
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fd48 	bl	8006aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800603a:	2302      	movs	r3, #2
 800603c:	e0ae      	b.n	800619c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b0c      	cmp	r3, #12
 800604a:	f200 809f 	bhi.w	800618c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800604e:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	08006089 	.word	0x08006089
 8006058:	0800618d 	.word	0x0800618d
 800605c:	0800618d 	.word	0x0800618d
 8006060:	0800618d 	.word	0x0800618d
 8006064:	080060c9 	.word	0x080060c9
 8006068:	0800618d 	.word	0x0800618d
 800606c:	0800618d 	.word	0x0800618d
 8006070:	0800618d 	.word	0x0800618d
 8006074:	0800610b 	.word	0x0800610b
 8006078:	0800618d 	.word	0x0800618d
 800607c:	0800618d 	.word	0x0800618d
 8006080:	0800618d 	.word	0x0800618d
 8006084:	0800614b 	.word	0x0800614b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fa1e 	bl	80064d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0208 	orr.w	r2, r2, #8
 80060a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0204 	bic.w	r2, r2, #4
 80060b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6999      	ldr	r1, [r3, #24]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	619a      	str	r2, [r3, #24]
      break;
 80060c6:	e064      	b.n	8006192 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fa6e 	bl	80065b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6999      	ldr	r1, [r3, #24]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	021a      	lsls	r2, r3, #8
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	619a      	str	r2, [r3, #24]
      break;
 8006108:	e043      	b.n	8006192 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fac3 	bl	800669c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0208 	orr.w	r2, r2, #8
 8006124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0204 	bic.w	r2, r2, #4
 8006134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69d9      	ldr	r1, [r3, #28]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	691a      	ldr	r2, [r3, #16]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	61da      	str	r2, [r3, #28]
      break;
 8006148:	e023      	b.n	8006192 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fb17 	bl	8006784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69d9      	ldr	r1, [r3, #28]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	021a      	lsls	r2, r3, #8
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	61da      	str	r2, [r3, #28]
      break;
 800618a:	e002      	b.n	8006192 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]
      break;
 8006190:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_TIM_ConfigClockSource+0x1c>
 80061bc:	2302      	movs	r3, #2
 80061be:	e0b4      	b.n	800632a <HAL_TIM_ConfigClockSource+0x186>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f8:	d03e      	beq.n	8006278 <HAL_TIM_ConfigClockSource+0xd4>
 80061fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061fe:	f200 8087 	bhi.w	8006310 <HAL_TIM_ConfigClockSource+0x16c>
 8006202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006206:	f000 8086 	beq.w	8006316 <HAL_TIM_ConfigClockSource+0x172>
 800620a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800620e:	d87f      	bhi.n	8006310 <HAL_TIM_ConfigClockSource+0x16c>
 8006210:	2b70      	cmp	r3, #112	@ 0x70
 8006212:	d01a      	beq.n	800624a <HAL_TIM_ConfigClockSource+0xa6>
 8006214:	2b70      	cmp	r3, #112	@ 0x70
 8006216:	d87b      	bhi.n	8006310 <HAL_TIM_ConfigClockSource+0x16c>
 8006218:	2b60      	cmp	r3, #96	@ 0x60
 800621a:	d050      	beq.n	80062be <HAL_TIM_ConfigClockSource+0x11a>
 800621c:	2b60      	cmp	r3, #96	@ 0x60
 800621e:	d877      	bhi.n	8006310 <HAL_TIM_ConfigClockSource+0x16c>
 8006220:	2b50      	cmp	r3, #80	@ 0x50
 8006222:	d03c      	beq.n	800629e <HAL_TIM_ConfigClockSource+0xfa>
 8006224:	2b50      	cmp	r3, #80	@ 0x50
 8006226:	d873      	bhi.n	8006310 <HAL_TIM_ConfigClockSource+0x16c>
 8006228:	2b40      	cmp	r3, #64	@ 0x40
 800622a:	d058      	beq.n	80062de <HAL_TIM_ConfigClockSource+0x13a>
 800622c:	2b40      	cmp	r3, #64	@ 0x40
 800622e:	d86f      	bhi.n	8006310 <HAL_TIM_ConfigClockSource+0x16c>
 8006230:	2b30      	cmp	r3, #48	@ 0x30
 8006232:	d064      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0x15a>
 8006234:	2b30      	cmp	r3, #48	@ 0x30
 8006236:	d86b      	bhi.n	8006310 <HAL_TIM_ConfigClockSource+0x16c>
 8006238:	2b20      	cmp	r3, #32
 800623a:	d060      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0x15a>
 800623c:	2b20      	cmp	r3, #32
 800623e:	d867      	bhi.n	8006310 <HAL_TIM_ConfigClockSource+0x16c>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d05c      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0x15a>
 8006244:	2b10      	cmp	r3, #16
 8006246:	d05a      	beq.n	80062fe <HAL_TIM_ConfigClockSource+0x15a>
 8006248:	e062      	b.n	8006310 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800625a:	f000 fb63 	bl	8006924 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800626c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	609a      	str	r2, [r3, #8]
      break;
 8006276:	e04f      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006288:	f000 fb4c 	bl	8006924 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800629a:	609a      	str	r2, [r3, #8]
      break;
 800629c:	e03c      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062aa:	461a      	mov	r2, r3
 80062ac:	f000 fac0 	bl	8006830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2150      	movs	r1, #80	@ 0x50
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fb19 	bl	80068ee <TIM_ITRx_SetConfig>
      break;
 80062bc:	e02c      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ca:	461a      	mov	r2, r3
 80062cc:	f000 fadf 	bl	800688e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2160      	movs	r1, #96	@ 0x60
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fb09 	bl	80068ee <TIM_ITRx_SetConfig>
      break;
 80062dc:	e01c      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ea:	461a      	mov	r2, r3
 80062ec:	f000 faa0 	bl	8006830 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2140      	movs	r1, #64	@ 0x40
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 faf9 	bl	80068ee <TIM_ITRx_SetConfig>
      break;
 80062fc:	e00c      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f000 faf0 	bl	80068ee <TIM_ITRx_SetConfig>
      break;
 800630e:	e003      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      break;
 8006314:	e000      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006316:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006328:	7bfb      	ldrb	r3, [r7, #15]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
	...

08006384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a43      	ldr	r2, [pc, #268]	@ (80064a4 <TIM_Base_SetConfig+0x120>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d013      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a2:	d00f      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a40      	ldr	r2, [pc, #256]	@ (80064a8 <TIM_Base_SetConfig+0x124>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00b      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a3f      	ldr	r2, [pc, #252]	@ (80064ac <TIM_Base_SetConfig+0x128>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d007      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a3e      	ldr	r2, [pc, #248]	@ (80064b0 <TIM_Base_SetConfig+0x12c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3d      	ldr	r2, [pc, #244]	@ (80064b4 <TIM_Base_SetConfig+0x130>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d108      	bne.n	80063d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a32      	ldr	r2, [pc, #200]	@ (80064a4 <TIM_Base_SetConfig+0x120>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d02b      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e4:	d027      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2f      	ldr	r2, [pc, #188]	@ (80064a8 <TIM_Base_SetConfig+0x124>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d023      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2e      	ldr	r2, [pc, #184]	@ (80064ac <TIM_Base_SetConfig+0x128>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01f      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2d      	ldr	r2, [pc, #180]	@ (80064b0 <TIM_Base_SetConfig+0x12c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d01b      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a2c      	ldr	r2, [pc, #176]	@ (80064b4 <TIM_Base_SetConfig+0x130>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d017      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a2b      	ldr	r2, [pc, #172]	@ (80064b8 <TIM_Base_SetConfig+0x134>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a2a      	ldr	r2, [pc, #168]	@ (80064bc <TIM_Base_SetConfig+0x138>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00f      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a29      	ldr	r2, [pc, #164]	@ (80064c0 <TIM_Base_SetConfig+0x13c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00b      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a28      	ldr	r2, [pc, #160]	@ (80064c4 <TIM_Base_SetConfig+0x140>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d007      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a27      	ldr	r2, [pc, #156]	@ (80064c8 <TIM_Base_SetConfig+0x144>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_Base_SetConfig+0xb2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a26      	ldr	r2, [pc, #152]	@ (80064cc <TIM_Base_SetConfig+0x148>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d108      	bne.n	8006448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800643c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a0e      	ldr	r2, [pc, #56]	@ (80064a4 <TIM_Base_SetConfig+0x120>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d003      	beq.n	8006476 <TIM_Base_SetConfig+0xf2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a10      	ldr	r2, [pc, #64]	@ (80064b4 <TIM_Base_SetConfig+0x130>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d103      	bne.n	800647e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f043 0204 	orr.w	r2, r3, #4
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	601a      	str	r2, [r3, #0]
}
 8006496:	bf00      	nop
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40000800 	.word	0x40000800
 80064b0:	40000c00 	.word	0x40000c00
 80064b4:	40010400 	.word	0x40010400
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40014400 	.word	0x40014400
 80064c0:	40014800 	.word	0x40014800
 80064c4:	40001800 	.word	0x40001800
 80064c8:	40001c00 	.word	0x40001c00
 80064cc:	40002000 	.word	0x40002000

080064d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	f023 0201 	bic.w	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0303 	bic.w	r3, r3, #3
 8006506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 0302 	bic.w	r3, r3, #2
 8006518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a20      	ldr	r2, [pc, #128]	@ (80065a8 <TIM_OC1_SetConfig+0xd8>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_OC1_SetConfig+0x64>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a1f      	ldr	r2, [pc, #124]	@ (80065ac <TIM_OC1_SetConfig+0xdc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10c      	bne.n	800654e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	f023 0308 	bic.w	r3, r3, #8
 800653a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f023 0304 	bic.w	r3, r3, #4
 800654c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a15      	ldr	r2, [pc, #84]	@ (80065a8 <TIM_OC1_SetConfig+0xd8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_OC1_SetConfig+0x8e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <TIM_OC1_SetConfig+0xdc>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d111      	bne.n	8006582 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800656c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4313      	orrs	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4313      	orrs	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	621a      	str	r2, [r3, #32]
}
 800659c:	bf00      	nop
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	40010000 	.word	0x40010000
 80065ac:	40010400 	.word	0x40010400

080065b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f023 0210 	bic.w	r2, r3, #16
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f023 0320 	bic.w	r3, r3, #32
 80065fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a22      	ldr	r2, [pc, #136]	@ (8006694 <TIM_OC2_SetConfig+0xe4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_OC2_SetConfig+0x68>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a21      	ldr	r2, [pc, #132]	@ (8006698 <TIM_OC2_SetConfig+0xe8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10d      	bne.n	8006634 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800661e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006632:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a17      	ldr	r2, [pc, #92]	@ (8006694 <TIM_OC2_SetConfig+0xe4>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC2_SetConfig+0x94>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a16      	ldr	r2, [pc, #88]	@ (8006698 <TIM_OC2_SetConfig+0xe8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d113      	bne.n	800666c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800664a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40010000 	.word	0x40010000
 8006698:	40010400 	.word	0x40010400

0800669c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a21      	ldr	r2, [pc, #132]	@ (800677c <TIM_OC3_SetConfig+0xe0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_OC3_SetConfig+0x66>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a20      	ldr	r2, [pc, #128]	@ (8006780 <TIM_OC3_SetConfig+0xe4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d10d      	bne.n	800671e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800671c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a16      	ldr	r2, [pc, #88]	@ (800677c <TIM_OC3_SetConfig+0xe0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_OC3_SetConfig+0x92>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a15      	ldr	r2, [pc, #84]	@ (8006780 <TIM_OC3_SetConfig+0xe4>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d113      	bne.n	8006756 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800673c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	4313      	orrs	r3, r2
 8006748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	621a      	str	r2, [r3, #32]
}
 8006770:	bf00      	nop
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	40010000 	.word	0x40010000
 8006780:	40010400 	.word	0x40010400

08006784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	031b      	lsls	r3, r3, #12
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a12      	ldr	r2, [pc, #72]	@ (8006828 <TIM_OC4_SetConfig+0xa4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_OC4_SetConfig+0x68>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a11      	ldr	r2, [pc, #68]	@ (800682c <TIM_OC4_SetConfig+0xa8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d109      	bne.n	8006800 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	019b      	lsls	r3, r3, #6
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	f023 0201 	bic.w	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800685a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4313      	orrs	r3, r2
 8006864:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f023 030a 	bic.w	r3, r3, #10
 800686c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	621a      	str	r2, [r3, #32]
}
 8006882:	bf00      	nop
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800688e:	b480      	push	{r7}
 8006890:	b087      	sub	sp, #28
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f023 0210 	bic.w	r2, r3, #16
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	031b      	lsls	r3, r3, #12
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006904:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	f043 0307 	orr.w	r3, r3, #7
 8006910:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	609a      	str	r2, [r3, #8]
}
 8006918:	bf00      	nop
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800693e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	021a      	lsls	r2, r3, #8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	431a      	orrs	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4313      	orrs	r3, r2
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	609a      	str	r2, [r3, #8]
}
 8006958:	bf00      	nop
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	2201      	movs	r2, #1
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1a      	ldr	r2, [r3, #32]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	43db      	mvns	r3, r3
 8006986:	401a      	ands	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	fa01 f303 	lsl.w	r3, r1, r3
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e05a      	b.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a21      	ldr	r2, [pc, #132]	@ (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d022      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a14:	d01d      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d018      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1b      	ldr	r2, [pc, #108]	@ (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d013      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00e      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a18      	ldr	r2, [pc, #96]	@ (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d009      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a17      	ldr	r2, [pc, #92]	@ (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d004      	beq.n	8006a52 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a15      	ldr	r2, [pc, #84]	@ (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d10c      	bne.n	8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40000c00 	.word	0x40000c00
 8006a9c:	40010400 	.word	0x40010400
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	40001800 	.word	0x40001800

08006aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e042      	b.n	8006b68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fc fcde 	bl	80034b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2224      	movs	r2, #36	@ 0x24
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fff5 	bl	8007b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	695a      	ldr	r2, [r3, #20]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08c      	sub	sp, #48	@ 0x30
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d162      	bne.n	8006c50 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <HAL_UART_Transmit_DMA+0x26>
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e05b      	b.n	8006c52 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	88fa      	ldrh	r2, [r7, #6]
 8006ba4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	88fa      	ldrh	r2, [r7, #6]
 8006baa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2221      	movs	r2, #33	@ 0x21
 8006bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbe:	4a27      	ldr	r2, [pc, #156]	@ (8006c5c <HAL_UART_Transmit_DMA+0xec>)
 8006bc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc6:	4a26      	ldr	r2, [pc, #152]	@ (8006c60 <HAL_UART_Transmit_DMA+0xf0>)
 8006bc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bce:	4a25      	ldr	r2, [pc, #148]	@ (8006c64 <HAL_UART_Transmit_DMA+0xf4>)
 8006bd0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006bda:	f107 0308 	add.w	r3, r7, #8
 8006bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be6:	6819      	ldr	r1, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	3304      	adds	r3, #4
 8006bee:	461a      	mov	r2, r3
 8006bf0:	88fb      	ldrh	r3, [r7, #6]
 8006bf2:	f7fd faf3 	bl	80041dc <HAL_DMA_Start_IT>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e021      	b.n	8006c52 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c16:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3314      	adds	r3, #20
 8006c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	e853 3f00 	ldrex	r3, [r3]
 8006c26:	617b      	str	r3, [r7, #20]
   return(result);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c38:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6a39      	ldr	r1, [r7, #32]
 8006c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e5      	bne.n	8006c18 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3730      	adds	r7, #48	@ 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	08007381 	.word	0x08007381
 8006c60:	0800741b 	.word	0x0800741b
 8006c64:	0800759f 	.word	0x0800759f

08006c68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d112      	bne.n	8006ca8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d002      	beq.n	8006c8e <HAL_UART_Receive_DMA+0x26>
 8006c88:	88fb      	ldrh	r3, [r7, #6]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e00b      	b.n	8006caa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006c98:	88fb      	ldrh	r3, [r7, #6]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fcc8 	bl	8007634 <UART_Start_Receive_DMA>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	e000      	b.n	8006caa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ca8:	2302      	movs	r3, #2
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b090      	sub	sp, #64	@ 0x40
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc8:	2b80      	cmp	r3, #128	@ 0x80
 8006cca:	bf0c      	ite	eq
 8006ccc:	2301      	moveq	r3, #1
 8006cce:	2300      	movne	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b21      	cmp	r3, #33	@ 0x21
 8006cde:	d128      	bne.n	8006d32 <HAL_UART_DMAStop+0x80>
 8006ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d025      	beq.n	8006d32 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3314      	adds	r3, #20
 8006cec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	623b      	str	r3, [r7, #32]
   return(result);
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3314      	adds	r3, #20
 8006d04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d06:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e5      	bne.n	8006ce6 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fd fab0 	bl	800428c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fd27 	bl	8007780 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3c:	2b40      	cmp	r3, #64	@ 0x40
 8006d3e:	bf0c      	ite	eq
 8006d40:	2301      	moveq	r3, #1
 8006d42:	2300      	movne	r3, #0
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b22      	cmp	r3, #34	@ 0x22
 8006d52:	d128      	bne.n	8006da6 <HAL_UART_DMAStop+0xf4>
 8006d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d025      	beq.n	8006da6 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3314      	adds	r3, #20
 8006d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	e853 3f00 	ldrex	r3, [r3]
 8006d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3314      	adds	r3, #20
 8006d78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d7a:	61fa      	str	r2, [r7, #28]
 8006d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	69b9      	ldr	r1, [r7, #24]
 8006d80:	69fa      	ldr	r2, [r7, #28]
 8006d82:	e841 2300 	strex	r3, r2, [r1]
 8006d86:	617b      	str	r3, [r7, #20]
   return(result);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1e5      	bne.n	8006d5a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fd fa76 	bl	800428c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fd15 	bl	80077d0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3740      	adds	r7, #64	@ 0x40
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b0ba      	sub	sp, #232	@ 0xe8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10f      	bne.n	8006e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d009      	beq.n	8006e16 <HAL_UART_IRQHandler+0x66>
 8006e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fdba 	bl	8007988 <UART_Receive_IT>
      return;
 8006e14:	e273      	b.n	80072fe <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80de 	beq.w	8006fdc <HAL_UART_IRQHandler+0x22c>
 8006e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 80d1 	beq.w	8006fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00b      	beq.n	8006e5e <HAL_UART_IRQHandler+0xae>
 8006e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e56:	f043 0201 	orr.w	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <HAL_UART_IRQHandler+0xd2>
 8006e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7a:	f043 0202 	orr.w	r2, r3, #2
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <HAL_UART_IRQHandler+0xf6>
 8006e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9e:	f043 0204 	orr.w	r2, r3, #4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d011      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x126>
 8006eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d105      	bne.n	8006eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d005      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ece:	f043 0208 	orr.w	r2, r3, #8
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 820a 	beq.w	80072f4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <HAL_UART_IRQHandler+0x14e>
 8006eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ef0:	f003 0320 	and.w	r3, r3, #32
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fd45 	bl	8007988 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f08:	2b40      	cmp	r3, #64	@ 0x40
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2301      	moveq	r3, #1
 8006f0e:	2300      	movne	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <HAL_UART_IRQHandler+0x17a>
 8006f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d04f      	beq.n	8006fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fc50 	bl	80077d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3a:	2b40      	cmp	r3, #64	@ 0x40
 8006f3c:	d141      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3314      	adds	r3, #20
 8006f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3314      	adds	r3, #20
 8006f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1d9      	bne.n	8006f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d013      	beq.n	8006fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f96:	4a8a      	ldr	r2, [pc, #552]	@ (80071c0 <HAL_UART_IRQHandler+0x410>)
 8006f98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fd f9e4 	bl	800436c <HAL_DMA_Abort_IT>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d016      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb8:	e00e      	b.n	8006fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f9ca 	bl	8007354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc0:	e00a      	b.n	8006fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f9c6 	bl	8007354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc8:	e006      	b.n	8006fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f9c2 	bl	8007354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006fd6:	e18d      	b.n	80072f4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	bf00      	nop
    return;
 8006fda:	e18b      	b.n	80072f4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	f040 8167 	bne.w	80072b4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 8160 	beq.w	80072b4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 8159 	beq.w	80072b4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007002:	2300      	movs	r3, #0
 8007004:	60bb      	str	r3, [r7, #8]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	60bb      	str	r3, [r7, #8]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	60bb      	str	r3, [r7, #8]
 8007016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007022:	2b40      	cmp	r3, #64	@ 0x40
 8007024:	f040 80ce 	bne.w	80071c4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 80a9 	beq.w	8007190 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007046:	429a      	cmp	r2, r3
 8007048:	f080 80a2 	bcs.w	8007190 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007052:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800705e:	f000 8088 	beq.w	8007172 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007070:	e853 3f00 	ldrex	r3, [r3]
 8007074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007078:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800707c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800708e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800709a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1d9      	bne.n	8007062 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3314      	adds	r3, #20
 80070b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070c0:	f023 0301 	bic.w	r3, r3, #1
 80070c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3314      	adds	r3, #20
 80070ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e1      	bne.n	80070ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3314      	adds	r3, #20
 80070f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3314      	adds	r3, #20
 800710a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800710e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007110:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007114:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800711c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e3      	bne.n	80070ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007142:	f023 0310 	bic.w	r3, r3, #16
 8007146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007154:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007156:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800715a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e3      	bne.n	8007130 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716c:	4618      	mov	r0, r3
 800716e:	f7fd f88d 	bl	800428c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2202      	movs	r2, #2
 8007176:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007180:	b29b      	uxth	r3, r3
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	b29b      	uxth	r3, r3
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f8ed 	bl	8007368 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800718e:	e0b3      	b.n	80072f8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007194:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007198:	429a      	cmp	r2, r3
 800719a:	f040 80ad 	bne.w	80072f8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a8:	f040 80a6 	bne.w	80072f8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f8d5 	bl	8007368 <HAL_UARTEx_RxEventCallback>
      return;
 80071be:	e09b      	b.n	80072f8 <HAL_UART_IRQHandler+0x548>
 80071c0:	08007897 	.word	0x08007897
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 808e 	beq.w	80072fc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80071e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8089 	beq.w	80072fc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	330c      	adds	r3, #12
 80071f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	330c      	adds	r3, #12
 800720a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800720e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007210:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800721c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e3      	bne.n	80071ea <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3314      	adds	r3, #20
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	623b      	str	r3, [r7, #32]
   return(result);
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3314      	adds	r3, #20
 8007242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007246:	633a      	str	r2, [r7, #48]	@ 0x30
 8007248:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800724c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800724e:	e841 2300 	strex	r3, r2, [r1]
 8007252:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e3      	bne.n	8007222 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	e853 3f00 	ldrex	r3, [r3]
 8007276:	60fb      	str	r3, [r7, #12]
   return(result);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0310 	bic.w	r3, r3, #16
 800727e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800728c:	61fa      	str	r2, [r7, #28]
 800728e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007290:	69b9      	ldr	r1, [r7, #24]
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	e841 2300 	strex	r3, r2, [r1]
 8007298:	617b      	str	r3, [r7, #20]
   return(result);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1e3      	bne.n	8007268 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f85b 	bl	8007368 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80072b2:	e023      	b.n	80072fc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80072b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <HAL_UART_IRQHandler+0x524>
 80072c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 faf3 	bl	80078b8 <UART_Transmit_IT>
    return;
 80072d2:	e014      	b.n	80072fe <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00e      	beq.n	80072fe <HAL_UART_IRQHandler+0x54e>
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fb33 	bl	8007958 <UART_EndTransmit_IT>
    return;
 80072f2:	e004      	b.n	80072fe <HAL_UART_IRQHandler+0x54e>
    return;
 80072f4:	bf00      	nop
 80072f6:	e002      	b.n	80072fe <HAL_UART_IRQHandler+0x54e>
      return;
 80072f8:	bf00      	nop
 80072fa:	e000      	b.n	80072fe <HAL_UART_IRQHandler+0x54e>
      return;
 80072fc:	bf00      	nop
  }
}
 80072fe:	37e8      	adds	r7, #232	@ 0xe8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b090      	sub	sp, #64	@ 0x40
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007398:	2b00      	cmp	r3, #0
 800739a:	d137      	bne.n	800740c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800739c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800739e:	2200      	movs	r2, #0
 80073a0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3314      	adds	r3, #20
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	623b      	str	r3, [r7, #32]
   return(result);
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3314      	adds	r3, #20
 80073c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80073c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e5      	bne.n	80073a2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	330c      	adds	r3, #12
 80073dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	330c      	adds	r3, #12
 80073f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073f6:	61fa      	str	r2, [r7, #28]
 80073f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	69b9      	ldr	r1, [r7, #24]
 80073fc:	69fa      	ldr	r2, [r7, #28]
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	617b      	str	r3, [r7, #20]
   return(result);
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e5      	bne.n	80073d6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800740a:	e002      	b.n	8007412 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800740c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800740e:	f7ff ff79 	bl	8007304 <HAL_UART_TxCpltCallback>
}
 8007412:	bf00      	nop
 8007414:	3740      	adds	r7, #64	@ 0x40
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007426:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f7ff ff75 	bl	8007318 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800742e:	bf00      	nop
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}

08007436 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b09c      	sub	sp, #112	@ 0x70
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007442:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800744e:	2b00      	cmp	r3, #0
 8007450:	d172      	bne.n	8007538 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007454:	2200      	movs	r2, #0
 8007456:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007458:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	330c      	adds	r3, #12
 800745e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007462:	e853 3f00 	ldrex	r3, [r3]
 8007466:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800746a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800746e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	330c      	adds	r3, #12
 8007476:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007478:	65ba      	str	r2, [r7, #88]	@ 0x58
 800747a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800747e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e5      	bne.n	8007458 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800748c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3314      	adds	r3, #20
 8007492:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800749c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749e:	f023 0301 	bic.w	r3, r3, #1
 80074a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80074a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3314      	adds	r3, #20
 80074aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074ac:	647a      	str	r2, [r7, #68]	@ 0x44
 80074ae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e5      	bne.n	800748c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	3314      	adds	r3, #20
 80074c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	623b      	str	r3, [r7, #32]
   return(result);
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80074d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	3314      	adds	r3, #20
 80074de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80074e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80074e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e5      	bne.n	80074c0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074f6:	2220      	movs	r2, #32
 80074f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007500:	2b01      	cmp	r3, #1
 8007502:	d119      	bne.n	8007538 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	330c      	adds	r3, #12
 800750a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	60fb      	str	r3, [r7, #12]
   return(result);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0310 	bic.w	r3, r3, #16
 800751a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800751c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	330c      	adds	r3, #12
 8007522:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007524:	61fa      	str	r2, [r7, #28]
 8007526:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	69b9      	ldr	r1, [r7, #24]
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	617b      	str	r3, [r7, #20]
   return(result);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e5      	bne.n	8007504 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800753a:	2200      	movs	r2, #0
 800753c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	2b01      	cmp	r3, #1
 8007544:	d106      	bne.n	8007554 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007548:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800754a:	4619      	mov	r1, r3
 800754c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800754e:	f7ff ff0b 	bl	8007368 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007552:	e002      	b.n	800755a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007554:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007556:	f7ff fee9 	bl	800732c <HAL_UART_RxCpltCallback>
}
 800755a:	bf00      	nop
 800755c:	3770      	adds	r7, #112	@ 0x70
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800756e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2201      	movs	r2, #1
 8007574:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757a:	2b01      	cmp	r3, #1
 800757c:	d108      	bne.n	8007590 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007582:	085b      	lsrs	r3, r3, #1
 8007584:	b29b      	uxth	r3, r3
 8007586:	4619      	mov	r1, r3
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff feed 	bl	8007368 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800758e:	e002      	b.n	8007596 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff fed5 	bl	8007340 <HAL_UART_RxHalfCpltCallback>
}
 8007596:	bf00      	nop
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b084      	sub	sp, #16
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ba:	2b80      	cmp	r3, #128	@ 0x80
 80075bc:	bf0c      	ite	eq
 80075be:	2301      	moveq	r3, #1
 80075c0:	2300      	movne	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b21      	cmp	r3, #33	@ 0x21
 80075d0:	d108      	bne.n	80075e4 <UART_DMAError+0x46>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2200      	movs	r2, #0
 80075dc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80075de:	68b8      	ldr	r0, [r7, #8]
 80075e0:	f000 f8ce 	bl	8007780 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ee:	2b40      	cmp	r3, #64	@ 0x40
 80075f0:	bf0c      	ite	eq
 80075f2:	2301      	moveq	r3, #1
 80075f4:	2300      	movne	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b22      	cmp	r3, #34	@ 0x22
 8007604:	d108      	bne.n	8007618 <UART_DMAError+0x7a>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2200      	movs	r2, #0
 8007610:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007612:	68b8      	ldr	r0, [r7, #8]
 8007614:	f000 f8dc 	bl	80077d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800761c:	f043 0210 	orr.w	r2, r3, #16
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007624:	68b8      	ldr	r0, [r7, #8]
 8007626:	f7ff fe95 	bl	8007354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b098      	sub	sp, #96	@ 0x60
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	88fa      	ldrh	r2, [r7, #6]
 800764c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2222      	movs	r2, #34	@ 0x22
 8007658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007660:	4a44      	ldr	r2, [pc, #272]	@ (8007774 <UART_Start_Receive_DMA+0x140>)
 8007662:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007668:	4a43      	ldr	r2, [pc, #268]	@ (8007778 <UART_Start_Receive_DMA+0x144>)
 800766a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007670:	4a42      	ldr	r2, [pc, #264]	@ (800777c <UART_Start_Receive_DMA+0x148>)
 8007672:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007678:	2200      	movs	r2, #0
 800767a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800767c:	f107 0308 	add.w	r3, r7, #8
 8007680:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	3304      	adds	r3, #4
 800768c:	4619      	mov	r1, r3
 800768e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	88fb      	ldrh	r3, [r7, #6]
 8007694:	f7fc fda2 	bl	80041dc <HAL_DMA_Start_IT>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d008      	beq.n	80076b0 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2210      	movs	r2, #16
 80076a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e05d      	b.n	800776c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80076b0:	2300      	movs	r3, #0
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	613b      	str	r3, [r7, #16]
 80076c4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d019      	beq.n	8007702 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	330c      	adds	r3, #12
 80076d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	330c      	adds	r3, #12
 80076ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076ee:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80076f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80076f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80076fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e5      	bne.n	80076ce <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3314      	adds	r3, #20
 8007708:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007714:	f043 0301 	orr.w	r3, r3, #1
 8007718:	657b      	str	r3, [r7, #84]	@ 0x54
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3314      	adds	r3, #20
 8007720:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007722:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007724:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007728:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e5      	bne.n	8007702 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3314      	adds	r3, #20
 800773c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	617b      	str	r3, [r7, #20]
   return(result);
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800774c:	653b      	str	r3, [r7, #80]	@ 0x50
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	3314      	adds	r3, #20
 8007754:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007756:	627a      	str	r2, [r7, #36]	@ 0x24
 8007758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	6a39      	ldr	r1, [r7, #32]
 800775c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	61fb      	str	r3, [r7, #28]
   return(result);
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e5      	bne.n	8007736 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3760      	adds	r7, #96	@ 0x60
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	08007437 	.word	0x08007437
 8007778:	08007563 	.word	0x08007563
 800777c:	0800759f 	.word	0x0800759f

08007780 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007780:	b480      	push	{r7}
 8007782:	b089      	sub	sp, #36	@ 0x24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	330c      	adds	r3, #12
 800778e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	60bb      	str	r3, [r7, #8]
   return(result);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800779e:	61fb      	str	r3, [r7, #28]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	330c      	adds	r3, #12
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	61ba      	str	r2, [r7, #24]
 80077aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6979      	ldr	r1, [r7, #20]
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	613b      	str	r3, [r7, #16]
   return(result);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e5      	bne.n	8007788 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80077c4:	bf00      	nop
 80077c6:	3724      	adds	r7, #36	@ 0x24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b095      	sub	sp, #84	@ 0x54
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	330c      	adds	r3, #12
 80077de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	330c      	adds	r3, #12
 80077f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80077f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80077fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e5      	bne.n	80077d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3314      	adds	r3, #20
 8007812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	61fb      	str	r3, [r7, #28]
   return(result);
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f023 0301 	bic.w	r3, r3, #1
 8007822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3314      	adds	r3, #20
 800782a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800782c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800782e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007844:	2b01      	cmp	r3, #1
 8007846:	d119      	bne.n	800787c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	330c      	adds	r3, #12
 800784e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	60bb      	str	r3, [r7, #8]
   return(result);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	f023 0310 	bic.w	r3, r3, #16
 800785e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	330c      	adds	r3, #12
 8007866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007868:	61ba      	str	r2, [r7, #24]
 800786a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6979      	ldr	r1, [r7, #20]
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	613b      	str	r3, [r7, #16]
   return(result);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e5      	bne.n	8007848 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800788a:	bf00      	nop
 800788c:	3754      	adds	r7, #84	@ 0x54
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr

08007896 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b084      	sub	sp, #16
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7ff fd52 	bl	8007354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b21      	cmp	r3, #33	@ 0x21
 80078ca:	d13e      	bne.n	800794a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d4:	d114      	bne.n	8007900 <UART_Transmit_IT+0x48>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d110      	bne.n	8007900 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	881b      	ldrh	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	621a      	str	r2, [r3, #32]
 80078fe:	e008      	b.n	8007912 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	1c59      	adds	r1, r3, #1
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6211      	str	r1, [r2, #32]
 800790a:	781a      	ldrb	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29b      	uxth	r3, r3
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	4619      	mov	r1, r3
 8007920:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10f      	bne.n	8007946 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68da      	ldr	r2, [r3, #12]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007934:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007944:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	e000      	b.n	800794c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800794a:	2302      	movs	r3, #2
  }
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800796e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7ff fcc3 	bl	8007304 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08c      	sub	sp, #48	@ 0x30
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007994:	2300      	movs	r3, #0
 8007996:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b22      	cmp	r3, #34	@ 0x22
 80079a2:	f040 80aa 	bne.w	8007afa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ae:	d115      	bne.n	80079dc <UART_Receive_IT+0x54>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d111      	bne.n	80079dc <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d4:	1c9a      	adds	r2, r3, #2
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80079da:	e024      	b.n	8007a26 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ea:	d007      	beq.n	80079fc <UART_Receive_IT+0x74>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10a      	bne.n	8007a0a <UART_Receive_IT+0x82>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a06:	701a      	strb	r2, [r3, #0]
 8007a08:	e008      	b.n	8007a1c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	4619      	mov	r1, r3
 8007a34:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d15d      	bne.n	8007af6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f022 0220 	bic.w	r2, r2, #32
 8007a48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	695a      	ldr	r2, [r3, #20]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 0201 	bic.w	r2, r2, #1
 8007a68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d135      	bne.n	8007aec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	330c      	adds	r3, #12
 8007a8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	e853 3f00 	ldrex	r3, [r3]
 8007a94:	613b      	str	r3, [r7, #16]
   return(result);
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f023 0310 	bic.w	r3, r3, #16
 8007a9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	330c      	adds	r3, #12
 8007aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa6:	623a      	str	r2, [r7, #32]
 8007aa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	69f9      	ldr	r1, [r7, #28]
 8007aac:	6a3a      	ldr	r2, [r7, #32]
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e5      	bne.n	8007a86 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0310 	and.w	r3, r3, #16
 8007ac4:	2b10      	cmp	r3, #16
 8007ac6:	d10a      	bne.n	8007ade <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fc3f 	bl	8007368 <HAL_UARTEx_RxEventCallback>
 8007aea:	e002      	b.n	8007af2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff fc1d 	bl	800732c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e002      	b.n	8007afc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e000      	b.n	8007afc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007afa:	2302      	movs	r3, #2
  }
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3730      	adds	r7, #48	@ 0x30
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b08:	b0c0      	sub	sp, #256	@ 0x100
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b20:	68d9      	ldr	r1, [r3, #12]
 8007b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	ea40 0301 	orr.w	r3, r0, r1
 8007b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	431a      	orrs	r2, r3
 8007b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b5c:	f021 010c 	bic.w	r1, r1, #12
 8007b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b7e:	6999      	ldr	r1, [r3, #24]
 8007b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	ea40 0301 	orr.w	r3, r0, r1
 8007b8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4b8f      	ldr	r3, [pc, #572]	@ (8007dd0 <UART_SetConfig+0x2cc>)
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d005      	beq.n	8007ba4 <UART_SetConfig+0xa0>
 8007b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8007dd4 <UART_SetConfig+0x2d0>)
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d104      	bne.n	8007bae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ba4:	f7fd f922 	bl	8004dec <HAL_RCC_GetPCLK2Freq>
 8007ba8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007bac:	e003      	b.n	8007bb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bae:	f7fd f909 	bl	8004dc4 <HAL_RCC_GetPCLK1Freq>
 8007bb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bc0:	f040 810c 	bne.w	8007ddc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007bce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007bd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007bd6:	4622      	mov	r2, r4
 8007bd8:	462b      	mov	r3, r5
 8007bda:	1891      	adds	r1, r2, r2
 8007bdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007bde:	415b      	adcs	r3, r3
 8007be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007be6:	4621      	mov	r1, r4
 8007be8:	eb12 0801 	adds.w	r8, r2, r1
 8007bec:	4629      	mov	r1, r5
 8007bee:	eb43 0901 	adc.w	r9, r3, r1
 8007bf2:	f04f 0200 	mov.w	r2, #0
 8007bf6:	f04f 0300 	mov.w	r3, #0
 8007bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c06:	4690      	mov	r8, r2
 8007c08:	4699      	mov	r9, r3
 8007c0a:	4623      	mov	r3, r4
 8007c0c:	eb18 0303 	adds.w	r3, r8, r3
 8007c10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c14:	462b      	mov	r3, r5
 8007c16:	eb49 0303 	adc.w	r3, r9, r3
 8007c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c32:	460b      	mov	r3, r1
 8007c34:	18db      	adds	r3, r3, r3
 8007c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c38:	4613      	mov	r3, r2
 8007c3a:	eb42 0303 	adc.w	r3, r2, r3
 8007c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007c44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007c48:	f7f8 ff90 	bl	8000b6c <__aeabi_uldivmod>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4b61      	ldr	r3, [pc, #388]	@ (8007dd8 <UART_SetConfig+0x2d4>)
 8007c52:	fba3 2302 	umull	r2, r3, r3, r2
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	011c      	lsls	r4, r3, #4
 8007c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	464b      	mov	r3, r9
 8007c70:	1891      	adds	r1, r2, r2
 8007c72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c74:	415b      	adcs	r3, r3
 8007c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c7c:	4641      	mov	r1, r8
 8007c7e:	eb12 0a01 	adds.w	sl, r2, r1
 8007c82:	4649      	mov	r1, r9
 8007c84:	eb43 0b01 	adc.w	fp, r3, r1
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	f04f 0300 	mov.w	r3, #0
 8007c90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c9c:	4692      	mov	sl, r2
 8007c9e:	469b      	mov	fp, r3
 8007ca0:	4643      	mov	r3, r8
 8007ca2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007caa:	464b      	mov	r3, r9
 8007cac:	eb4b 0303 	adc.w	r3, fp, r3
 8007cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007cc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	18db      	adds	r3, r3, r3
 8007ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cce:	4613      	mov	r3, r2
 8007cd0:	eb42 0303 	adc.w	r3, r2, r3
 8007cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007cda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007cde:	f7f8 ff45 	bl	8000b6c <__aeabi_uldivmod>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8007dd8 <UART_SetConfig+0x2d4>)
 8007cea:	fba3 2301 	umull	r2, r3, r3, r1
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	2264      	movs	r2, #100	@ 0x64
 8007cf2:	fb02 f303 	mul.w	r3, r2, r3
 8007cf6:	1acb      	subs	r3, r1, r3
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007cfe:	4b36      	ldr	r3, [pc, #216]	@ (8007dd8 <UART_SetConfig+0x2d4>)
 8007d00:	fba3 2302 	umull	r2, r3, r3, r2
 8007d04:	095b      	lsrs	r3, r3, #5
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d0c:	441c      	add	r4, r3
 8007d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d20:	4642      	mov	r2, r8
 8007d22:	464b      	mov	r3, r9
 8007d24:	1891      	adds	r1, r2, r2
 8007d26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d28:	415b      	adcs	r3, r3
 8007d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d30:	4641      	mov	r1, r8
 8007d32:	1851      	adds	r1, r2, r1
 8007d34:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d36:	4649      	mov	r1, r9
 8007d38:	414b      	adcs	r3, r1
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	f04f 0300 	mov.w	r3, #0
 8007d44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007d48:	4659      	mov	r1, fp
 8007d4a:	00cb      	lsls	r3, r1, #3
 8007d4c:	4651      	mov	r1, sl
 8007d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d52:	4651      	mov	r1, sl
 8007d54:	00ca      	lsls	r2, r1, #3
 8007d56:	4610      	mov	r0, r2
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	189b      	adds	r3, r3, r2
 8007d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d64:	464b      	mov	r3, r9
 8007d66:	460a      	mov	r2, r1
 8007d68:	eb42 0303 	adc.w	r3, r2, r3
 8007d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d84:	460b      	mov	r3, r1
 8007d86:	18db      	adds	r3, r3, r3
 8007d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	eb42 0303 	adc.w	r3, r2, r3
 8007d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007d9a:	f7f8 fee7 	bl	8000b6c <__aeabi_uldivmod>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <UART_SetConfig+0x2d4>)
 8007da4:	fba3 1302 	umull	r1, r3, r3, r2
 8007da8:	095b      	lsrs	r3, r3, #5
 8007daa:	2164      	movs	r1, #100	@ 0x64
 8007dac:	fb01 f303 	mul.w	r3, r1, r3
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	3332      	adds	r3, #50	@ 0x32
 8007db6:	4a08      	ldr	r2, [pc, #32]	@ (8007dd8 <UART_SetConfig+0x2d4>)
 8007db8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	f003 0207 	and.w	r2, r3, #7
 8007dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4422      	add	r2, r4
 8007dca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007dcc:	e106      	b.n	8007fdc <UART_SetConfig+0x4d8>
 8007dce:	bf00      	nop
 8007dd0:	40011000 	.word	0x40011000
 8007dd4:	40011400 	.word	0x40011400
 8007dd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007de0:	2200      	movs	r2, #0
 8007de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007de6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007dea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007dee:	4642      	mov	r2, r8
 8007df0:	464b      	mov	r3, r9
 8007df2:	1891      	adds	r1, r2, r2
 8007df4:	6239      	str	r1, [r7, #32]
 8007df6:	415b      	adcs	r3, r3
 8007df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dfe:	4641      	mov	r1, r8
 8007e00:	1854      	adds	r4, r2, r1
 8007e02:	4649      	mov	r1, r9
 8007e04:	eb43 0501 	adc.w	r5, r3, r1
 8007e08:	f04f 0200 	mov.w	r2, #0
 8007e0c:	f04f 0300 	mov.w	r3, #0
 8007e10:	00eb      	lsls	r3, r5, #3
 8007e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e16:	00e2      	lsls	r2, r4, #3
 8007e18:	4614      	mov	r4, r2
 8007e1a:	461d      	mov	r5, r3
 8007e1c:	4643      	mov	r3, r8
 8007e1e:	18e3      	adds	r3, r4, r3
 8007e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e24:	464b      	mov	r3, r9
 8007e26:	eb45 0303 	adc.w	r3, r5, r3
 8007e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e3e:	f04f 0200 	mov.w	r2, #0
 8007e42:	f04f 0300 	mov.w	r3, #0
 8007e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	008b      	lsls	r3, r1, #2
 8007e4e:	4621      	mov	r1, r4
 8007e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e54:	4621      	mov	r1, r4
 8007e56:	008a      	lsls	r2, r1, #2
 8007e58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e5c:	f7f8 fe86 	bl	8000b6c <__aeabi_uldivmod>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4b60      	ldr	r3, [pc, #384]	@ (8007fe8 <UART_SetConfig+0x4e4>)
 8007e66:	fba3 2302 	umull	r2, r3, r3, r2
 8007e6a:	095b      	lsrs	r3, r3, #5
 8007e6c:	011c      	lsls	r4, r3, #4
 8007e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e80:	4642      	mov	r2, r8
 8007e82:	464b      	mov	r3, r9
 8007e84:	1891      	adds	r1, r2, r2
 8007e86:	61b9      	str	r1, [r7, #24]
 8007e88:	415b      	adcs	r3, r3
 8007e8a:	61fb      	str	r3, [r7, #28]
 8007e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e90:	4641      	mov	r1, r8
 8007e92:	1851      	adds	r1, r2, r1
 8007e94:	6139      	str	r1, [r7, #16]
 8007e96:	4649      	mov	r1, r9
 8007e98:	414b      	adcs	r3, r1
 8007e9a:	617b      	str	r3, [r7, #20]
 8007e9c:	f04f 0200 	mov.w	r2, #0
 8007ea0:	f04f 0300 	mov.w	r3, #0
 8007ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ea8:	4659      	mov	r1, fp
 8007eaa:	00cb      	lsls	r3, r1, #3
 8007eac:	4651      	mov	r1, sl
 8007eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007eb2:	4651      	mov	r1, sl
 8007eb4:	00ca      	lsls	r2, r1, #3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	189b      	adds	r3, r3, r2
 8007ec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	460a      	mov	r2, r1
 8007ec8:	eb42 0303 	adc.w	r3, r2, r3
 8007ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007eda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007edc:	f04f 0200 	mov.w	r2, #0
 8007ee0:	f04f 0300 	mov.w	r3, #0
 8007ee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ee8:	4649      	mov	r1, r9
 8007eea:	008b      	lsls	r3, r1, #2
 8007eec:	4641      	mov	r1, r8
 8007eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ef2:	4641      	mov	r1, r8
 8007ef4:	008a      	lsls	r2, r1, #2
 8007ef6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007efa:	f7f8 fe37 	bl	8000b6c <__aeabi_uldivmod>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	4611      	mov	r1, r2
 8007f04:	4b38      	ldr	r3, [pc, #224]	@ (8007fe8 <UART_SetConfig+0x4e4>)
 8007f06:	fba3 2301 	umull	r2, r3, r3, r1
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	2264      	movs	r2, #100	@ 0x64
 8007f0e:	fb02 f303 	mul.w	r3, r2, r3
 8007f12:	1acb      	subs	r3, r1, r3
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	3332      	adds	r3, #50	@ 0x32
 8007f18:	4a33      	ldr	r2, [pc, #204]	@ (8007fe8 <UART_SetConfig+0x4e4>)
 8007f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f24:	441c      	add	r4, r3
 8007f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f34:	4642      	mov	r2, r8
 8007f36:	464b      	mov	r3, r9
 8007f38:	1891      	adds	r1, r2, r2
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	415b      	adcs	r3, r3
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f44:	4641      	mov	r1, r8
 8007f46:	1851      	adds	r1, r2, r1
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	414b      	adcs	r3, r1
 8007f4e:	607b      	str	r3, [r7, #4]
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f5c:	4659      	mov	r1, fp
 8007f5e:	00cb      	lsls	r3, r1, #3
 8007f60:	4651      	mov	r1, sl
 8007f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f66:	4651      	mov	r1, sl
 8007f68:	00ca      	lsls	r2, r1, #3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4642      	mov	r2, r8
 8007f72:	189b      	adds	r3, r3, r2
 8007f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f76:	464b      	mov	r3, r9
 8007f78:	460a      	mov	r2, r1
 8007f7a:	eb42 0303 	adc.w	r3, r2, r3
 8007f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	f04f 0300 	mov.w	r3, #0
 8007f94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007f98:	4649      	mov	r1, r9
 8007f9a:	008b      	lsls	r3, r1, #2
 8007f9c:	4641      	mov	r1, r8
 8007f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	008a      	lsls	r2, r1, #2
 8007fa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007faa:	f7f8 fddf 	bl	8000b6c <__aeabi_uldivmod>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe8 <UART_SetConfig+0x4e4>)
 8007fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fb8:	095b      	lsrs	r3, r3, #5
 8007fba:	2164      	movs	r1, #100	@ 0x64
 8007fbc:	fb01 f303 	mul.w	r3, r1, r3
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	011b      	lsls	r3, r3, #4
 8007fc4:	3332      	adds	r3, #50	@ 0x32
 8007fc6:	4a08      	ldr	r2, [pc, #32]	@ (8007fe8 <UART_SetConfig+0x4e4>)
 8007fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	f003 020f 	and.w	r2, r3, #15
 8007fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4422      	add	r2, r4
 8007fda:	609a      	str	r2, [r3, #8]
}
 8007fdc:	bf00      	nop
 8007fde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fe8:	51eb851f 	.word	0x51eb851f

08007fec <__NVIC_SetPriority>:
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	6039      	str	r1, [r7, #0]
 8007ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	db0a      	blt.n	8008016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	b2da      	uxtb	r2, r3
 8008004:	490c      	ldr	r1, [pc, #48]	@ (8008038 <__NVIC_SetPriority+0x4c>)
 8008006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800800a:	0112      	lsls	r2, r2, #4
 800800c:	b2d2      	uxtb	r2, r2
 800800e:	440b      	add	r3, r1
 8008010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008014:	e00a      	b.n	800802c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	b2da      	uxtb	r2, r3
 800801a:	4908      	ldr	r1, [pc, #32]	@ (800803c <__NVIC_SetPriority+0x50>)
 800801c:	79fb      	ldrb	r3, [r7, #7]
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	3b04      	subs	r3, #4
 8008024:	0112      	lsls	r2, r2, #4
 8008026:	b2d2      	uxtb	r2, r2
 8008028:	440b      	add	r3, r1
 800802a:	761a      	strb	r2, [r3, #24]
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	e000e100 	.word	0xe000e100
 800803c:	e000ed00 	.word	0xe000ed00

08008040 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008044:	4b05      	ldr	r3, [pc, #20]	@ (800805c <SysTick_Handler+0x1c>)
 8008046:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008048:	f001 fd40 	bl	8009acc <xTaskGetSchedulerState>
 800804c:	4603      	mov	r3, r0
 800804e:	2b01      	cmp	r3, #1
 8008050:	d001      	beq.n	8008056 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008052:	f002 fb39 	bl	800a6c8 <xPortSysTickHandler>
  }
}
 8008056:	bf00      	nop
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	e000e010 	.word	0xe000e010

08008060 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008060:	b580      	push	{r7, lr}
 8008062:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008064:	2100      	movs	r1, #0
 8008066:	f06f 0004 	mvn.w	r0, #4
 800806a:	f7ff ffbf 	bl	8007fec <__NVIC_SetPriority>
#endif
}
 800806e:	bf00      	nop
 8008070:	bd80      	pop	{r7, pc}
	...

08008074 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800807a:	f3ef 8305 	mrs	r3, IPSR
 800807e:	603b      	str	r3, [r7, #0]
  return(result);
 8008080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008086:	f06f 0305 	mvn.w	r3, #5
 800808a:	607b      	str	r3, [r7, #4]
 800808c:	e00c      	b.n	80080a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800808e:	4b0a      	ldr	r3, [pc, #40]	@ (80080b8 <osKernelInitialize+0x44>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d105      	bne.n	80080a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008096:	4b08      	ldr	r3, [pc, #32]	@ (80080b8 <osKernelInitialize+0x44>)
 8008098:	2201      	movs	r2, #1
 800809a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800809c:	2300      	movs	r3, #0
 800809e:	607b      	str	r3, [r7, #4]
 80080a0:	e002      	b.n	80080a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80080a2:	f04f 33ff 	mov.w	r3, #4294967295
 80080a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080a8:	687b      	ldr	r3, [r7, #4]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	20009104 	.word	0x20009104

080080bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080c2:	f3ef 8305 	mrs	r3, IPSR
 80080c6:	603b      	str	r3, [r7, #0]
  return(result);
 80080c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80080ce:	f06f 0305 	mvn.w	r3, #5
 80080d2:	607b      	str	r3, [r7, #4]
 80080d4:	e010      	b.n	80080f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80080d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008104 <osKernelStart+0x48>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d109      	bne.n	80080f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80080de:	f7ff ffbf 	bl	8008060 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80080e2:	4b08      	ldr	r3, [pc, #32]	@ (8008104 <osKernelStart+0x48>)
 80080e4:	2202      	movs	r2, #2
 80080e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80080e8:	f001 f87a 	bl	80091e0 <vTaskStartScheduler>
      stat = osOK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	e002      	b.n	80080f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80080f2:	f04f 33ff 	mov.w	r3, #4294967295
 80080f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080f8:	687b      	ldr	r3, [r7, #4]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20009104 	.word	0x20009104

08008108 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b08e      	sub	sp, #56	@ 0x38
 800810c:	af04      	add	r7, sp, #16
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008114:	2300      	movs	r3, #0
 8008116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008118:	f3ef 8305 	mrs	r3, IPSR
 800811c:	617b      	str	r3, [r7, #20]
  return(result);
 800811e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008120:	2b00      	cmp	r3, #0
 8008122:	d17e      	bne.n	8008222 <osThreadNew+0x11a>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d07b      	beq.n	8008222 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800812a:	2380      	movs	r3, #128	@ 0x80
 800812c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800812e:	2318      	movs	r3, #24
 8008130:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008132:	2300      	movs	r3, #0
 8008134:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008136:	f04f 33ff 	mov.w	r3, #4294967295
 800813a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d045      	beq.n	80081ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <osThreadNew+0x48>
        name = attr->name;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <osThreadNew+0x6e>
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	2b38      	cmp	r3, #56	@ 0x38
 8008168:	d805      	bhi.n	8008176 <osThreadNew+0x6e>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <osThreadNew+0x72>
        return (NULL);
 8008176:	2300      	movs	r3, #0
 8008178:	e054      	b.n	8008224 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	089b      	lsrs	r3, r3, #2
 8008188:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00e      	beq.n	80081b0 <osThreadNew+0xa8>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	2b5b      	cmp	r3, #91	@ 0x5b
 8008198:	d90a      	bls.n	80081b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d006      	beq.n	80081b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <osThreadNew+0xa8>
        mem = 1;
 80081aa:	2301      	movs	r3, #1
 80081ac:	61bb      	str	r3, [r7, #24]
 80081ae:	e010      	b.n	80081d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10c      	bne.n	80081d2 <osThreadNew+0xca>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d108      	bne.n	80081d2 <osThreadNew+0xca>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d104      	bne.n	80081d2 <osThreadNew+0xca>
          mem = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	61bb      	str	r3, [r7, #24]
 80081cc:	e001      	b.n	80081d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80081ce:	2300      	movs	r3, #0
 80081d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d110      	bne.n	80081fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081e0:	9202      	str	r2, [sp, #8]
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	6a3a      	ldr	r2, [r7, #32]
 80081ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 fe1a 	bl	8008e28 <xTaskCreateStatic>
 80081f4:	4603      	mov	r3, r0
 80081f6:	613b      	str	r3, [r7, #16]
 80081f8:	e013      	b.n	8008222 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d110      	bne.n	8008222 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	b29a      	uxth	r2, r3
 8008204:	f107 0310 	add.w	r3, r7, #16
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	f000 fe68 	bl	8008ee8 <xTaskCreate>
 8008218:	4603      	mov	r3, r0
 800821a:	2b01      	cmp	r3, #1
 800821c:	d001      	beq.n	8008222 <osThreadNew+0x11a>
            hTask = NULL;
 800821e:	2300      	movs	r3, #0
 8008220:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008222:	693b      	ldr	r3, [r7, #16]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3728      	adds	r7, #40	@ 0x28
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008234:	f3ef 8305 	mrs	r3, IPSR
 8008238:	60bb      	str	r3, [r7, #8]
  return(result);
 800823a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <osDelay+0x1c>
    stat = osErrorISR;
 8008240:	f06f 0305 	mvn.w	r3, #5
 8008244:	60fb      	str	r3, [r7, #12]
 8008246:	e007      	b.n	8008258 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 ff8e 	bl	8009174 <vTaskDelay>
    }
  }

  return (stat);
 8008258:	68fb      	ldr	r3, [r7, #12]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4a07      	ldr	r2, [pc, #28]	@ (8008290 <vApplicationGetIdleTaskMemory+0x2c>)
 8008274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	4a06      	ldr	r2, [pc, #24]	@ (8008294 <vApplicationGetIdleTaskMemory+0x30>)
 800827a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2280      	movs	r2, #128	@ 0x80
 8008280:	601a      	str	r2, [r3, #0]
}
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20009108 	.word	0x20009108
 8008294:	20009164 	.word	0x20009164

08008298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4a07      	ldr	r2, [pc, #28]	@ (80082c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80082a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	4a06      	ldr	r2, [pc, #24]	@ (80082c8 <vApplicationGetTimerTaskMemory+0x30>)
 80082ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082b6:	601a      	str	r2, [r3, #0]
}
 80082b8:	bf00      	nop
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	20009364 	.word	0x20009364
 80082c8:	200093c0 	.word	0x200093c0

080082cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f103 0208 	add.w	r2, r3, #8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f04f 32ff 	mov.w	r2, #4294967295
 80082e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f103 0208 	add.w	r2, r3, #8
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f103 0208 	add.w	r2, r3, #8
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	683a      	ldr	r2, [r7, #0]
 8008350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	1c5a      	adds	r2, r3, #1
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	601a      	str	r2, [r3, #0]
}
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800836e:	b480      	push	{r7}
 8008370:	b085      	sub	sp, #20
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008384:	d103      	bne.n	800838e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	60fb      	str	r3, [r7, #12]
 800838c:	e00c      	b.n	80083a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3308      	adds	r3, #8
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	e002      	b.n	800839c <vListInsert+0x2e>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d2f6      	bcs.n	8008396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
}
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6892      	ldr	r2, [r2, #8]
 80083f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	6852      	ldr	r2, [r2, #4]
 8008400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	429a      	cmp	r2, r3
 800840a:	d103      	bne.n	8008414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689a      	ldr	r2, [r3, #8]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	1e5a      	subs	r2, r3, #1
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3714      	adds	r7, #20
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10b      	bne.n	8008460 <xQueueGenericReset+0x2c>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	60bb      	str	r3, [r7, #8]
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	e7fd      	b.n	800845c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008460:	f002 f8a2 	bl	800a5a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846c:	68f9      	ldr	r1, [r7, #12]
 800846e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008470:	fb01 f303 	mul.w	r3, r1, r3
 8008474:	441a      	add	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008490:	3b01      	subs	r3, #1
 8008492:	68f9      	ldr	r1, [r7, #12]
 8008494:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008496:	fb01 f303 	mul.w	r3, r1, r3
 800849a:	441a      	add	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	22ff      	movs	r2, #255	@ 0xff
 80084a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	22ff      	movs	r2, #255	@ 0xff
 80084ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d114      	bne.n	80084e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d01a      	beq.n	80084f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3310      	adds	r3, #16
 80084c2:	4618      	mov	r0, r3
 80084c4:	f001 f91a 	bl	80096fc <xTaskRemoveFromEventList>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d012      	beq.n	80084f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80084ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008504 <xQueueGenericReset+0xd0>)
 80084d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	e009      	b.n	80084f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3310      	adds	r3, #16
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7ff fef1 	bl	80082cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3324      	adds	r3, #36	@ 0x24
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7ff feec 	bl	80082cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80084f4:	f002 f88a 	bl	800a60c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80084f8:	2301      	movs	r3, #1
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	e000ed04 	.word	0xe000ed04

08008508 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08e      	sub	sp, #56	@ 0x38
 800850c:	af02      	add	r7, sp, #8
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	e7fd      	b.n	8008530 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10b      	bne.n	8008552 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800854c:	bf00      	nop
 800854e:	bf00      	nop
 8008550:	e7fd      	b.n	800854e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <xQueueGenericCreateStatic+0x56>
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <xQueueGenericCreateStatic+0x5a>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <xQueueGenericCreateStatic+0x5c>
 8008562:	2300      	movs	r3, #0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10b      	bne.n	8008580 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	623b      	str	r3, [r7, #32]
}
 800857a:	bf00      	nop
 800857c:	bf00      	nop
 800857e:	e7fd      	b.n	800857c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d102      	bne.n	800858c <xQueueGenericCreateStatic+0x84>
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <xQueueGenericCreateStatic+0x88>
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <xQueueGenericCreateStatic+0x8a>
 8008590:	2300      	movs	r3, #0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10b      	bne.n	80085ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	61fb      	str	r3, [r7, #28]
}
 80085a8:	bf00      	nop
 80085aa:	bf00      	nop
 80085ac:	e7fd      	b.n	80085aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085ae:	2350      	movs	r3, #80	@ 0x50
 80085b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b50      	cmp	r3, #80	@ 0x50
 80085b6:	d00b      	beq.n	80085d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	61bb      	str	r3, [r7, #24]
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	e7fd      	b.n	80085cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80085d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80085d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00d      	beq.n	80085f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80085dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80085e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	4613      	mov	r3, r2
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	68b9      	ldr	r1, [r7, #8]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 f805 	bl	8008602 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3730      	adds	r7, #48	@ 0x30
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b084      	sub	sp, #16
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d103      	bne.n	800861e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	e002      	b.n	8008624 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008630:	2101      	movs	r1, #1
 8008632:	69b8      	ldr	r0, [r7, #24]
 8008634:	f7ff fefe 	bl	8008434 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	78fa      	ldrb	r2, [r7, #3]
 800863c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008640:	bf00      	nop
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08e      	sub	sp, #56	@ 0x38
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008656:	2300      	movs	r3, #0
 8008658:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800865e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10b      	bne.n	800867c <xQueueGenericSend+0x34>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008676:	bf00      	nop
 8008678:	bf00      	nop
 800867a:	e7fd      	b.n	8008678 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d103      	bne.n	800868a <xQueueGenericSend+0x42>
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <xQueueGenericSend+0x46>
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <xQueueGenericSend+0x48>
 800868e:	2300      	movs	r3, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <xQueueGenericSend+0x64>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	e7fd      	b.n	80086a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d103      	bne.n	80086ba <xQueueGenericSend+0x72>
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d101      	bne.n	80086be <xQueueGenericSend+0x76>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <xQueueGenericSend+0x78>
 80086be:	2300      	movs	r3, #0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10b      	bne.n	80086dc <xQueueGenericSend+0x94>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	623b      	str	r3, [r7, #32]
}
 80086d6:	bf00      	nop
 80086d8:	bf00      	nop
 80086da:	e7fd      	b.n	80086d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086dc:	f001 f9f6 	bl	8009acc <xTaskGetSchedulerState>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d102      	bne.n	80086ec <xQueueGenericSend+0xa4>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <xQueueGenericSend+0xa8>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <xQueueGenericSend+0xaa>
 80086f0:	2300      	movs	r3, #0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <xQueueGenericSend+0xc6>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	61fb      	str	r3, [r7, #28]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800870e:	f001 ff4b 	bl	800a5a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800871a:	429a      	cmp	r2, r3
 800871c:	d302      	bcc.n	8008724 <xQueueGenericSend+0xdc>
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2b02      	cmp	r3, #2
 8008722:	d129      	bne.n	8008778 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	68b9      	ldr	r1, [r7, #8]
 8008728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800872a:	f000 fa0f 	bl	8008b4c <prvCopyDataToQueue>
 800872e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008734:	2b00      	cmp	r3, #0
 8008736:	d010      	beq.n	800875a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873a:	3324      	adds	r3, #36	@ 0x24
 800873c:	4618      	mov	r0, r3
 800873e:	f000 ffdd 	bl	80096fc <xTaskRemoveFromEventList>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d013      	beq.n	8008770 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008748:	4b3f      	ldr	r3, [pc, #252]	@ (8008848 <xQueueGenericSend+0x200>)
 800874a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	e00a      	b.n	8008770 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800875a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d007      	beq.n	8008770 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008760:	4b39      	ldr	r3, [pc, #228]	@ (8008848 <xQueueGenericSend+0x200>)
 8008762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008770:	f001 ff4c 	bl	800a60c <vPortExitCritical>
				return pdPASS;
 8008774:	2301      	movs	r3, #1
 8008776:	e063      	b.n	8008840 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d103      	bne.n	8008786 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800877e:	f001 ff45 	bl	800a60c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008782:	2300      	movs	r3, #0
 8008784:	e05c      	b.n	8008840 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008788:	2b00      	cmp	r3, #0
 800878a:	d106      	bne.n	800879a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800878c:	f107 0314 	add.w	r3, r7, #20
 8008790:	4618      	mov	r0, r3
 8008792:	f001 f83f 	bl	8009814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008796:	2301      	movs	r3, #1
 8008798:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800879a:	f001 ff37 	bl	800a60c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800879e:	f000 fd87 	bl	80092b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087a2:	f001 ff01 	bl	800a5a8 <vPortEnterCritical>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087ac:	b25b      	sxtb	r3, r3
 80087ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b2:	d103      	bne.n	80087bc <xQueueGenericSend+0x174>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087c2:	b25b      	sxtb	r3, r3
 80087c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c8:	d103      	bne.n	80087d2 <xQueueGenericSend+0x18a>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087d2:	f001 ff1b 	bl	800a60c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087d6:	1d3a      	adds	r2, r7, #4
 80087d8:	f107 0314 	add.w	r3, r7, #20
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f001 f82e 	bl	8009840 <xTaskCheckForTimeOut>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d124      	bne.n	8008834 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087ec:	f000 faa6 	bl	8008d3c <prvIsQueueFull>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d018      	beq.n	8008828 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	3310      	adds	r3, #16
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	4611      	mov	r1, r2
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 ff2a 	bl	8009658 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008806:	f000 fa31 	bl	8008c6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800880a:	f000 fd5f 	bl	80092cc <xTaskResumeAll>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	f47f af7c 	bne.w	800870e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008816:	4b0c      	ldr	r3, [pc, #48]	@ (8008848 <xQueueGenericSend+0x200>)
 8008818:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	e772      	b.n	800870e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008828:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800882a:	f000 fa1f 	bl	8008c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800882e:	f000 fd4d 	bl	80092cc <xTaskResumeAll>
 8008832:	e76c      	b.n	800870e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008834:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008836:	f000 fa19 	bl	8008c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800883a:	f000 fd47 	bl	80092cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800883e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008840:	4618      	mov	r0, r3
 8008842:	3738      	adds	r7, #56	@ 0x38
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b090      	sub	sp, #64	@ 0x40
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800885e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10b      	bne.n	800887c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	e7fd      	b.n	8008878 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <xQueueGenericSendFromISR+0x3e>
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <xQueueGenericSendFromISR+0x42>
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <xQueueGenericSendFromISR+0x44>
 800888e:	2300      	movs	r3, #0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10b      	bne.n	80088ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088a6:	bf00      	nop
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d103      	bne.n	80088ba <xQueueGenericSendFromISR+0x6e>
 80088b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <xQueueGenericSendFromISR+0x72>
 80088ba:	2301      	movs	r3, #1
 80088bc:	e000      	b.n	80088c0 <xQueueGenericSendFromISR+0x74>
 80088be:	2300      	movs	r3, #0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10b      	bne.n	80088dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	623b      	str	r3, [r7, #32]
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088dc:	f001 ff44 	bl	800a768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088e0:	f3ef 8211 	mrs	r2, BASEPRI
 80088e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	61fa      	str	r2, [r7, #28]
 80088f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008904:	429a      	cmp	r2, r3
 8008906:	d302      	bcc.n	800890e <xQueueGenericSendFromISR+0xc2>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2b02      	cmp	r3, #2
 800890c:	d12f      	bne.n	800896e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800890e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008910:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008914:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	68b9      	ldr	r1, [r7, #8]
 8008922:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008924:	f000 f912 	bl	8008b4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008928:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800892c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008930:	d112      	bne.n	8008958 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008936:	2b00      	cmp	r3, #0
 8008938:	d016      	beq.n	8008968 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800893a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893c:	3324      	adds	r3, #36	@ 0x24
 800893e:	4618      	mov	r0, r3
 8008940:	f000 fedc 	bl	80096fc <xTaskRemoveFromEventList>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00e      	beq.n	8008968 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00b      	beq.n	8008968 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	e007      	b.n	8008968 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008958:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800895c:	3301      	adds	r3, #1
 800895e:	b2db      	uxtb	r3, r3
 8008960:	b25a      	sxtb	r2, r3
 8008962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008968:	2301      	movs	r3, #1
 800896a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800896c:	e001      	b.n	8008972 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800896e:	2300      	movs	r3, #0
 8008970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008974:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800897c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800897e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008980:	4618      	mov	r0, r3
 8008982:	3740      	adds	r7, #64	@ 0x40
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08c      	sub	sp, #48	@ 0x30
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008994:	2300      	movs	r3, #0
 8008996:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800899c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10b      	bne.n	80089ba <xQueueReceive+0x32>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	623b      	str	r3, [r7, #32]
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	e7fd      	b.n	80089b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d103      	bne.n	80089c8 <xQueueReceive+0x40>
 80089c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <xQueueReceive+0x44>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e000      	b.n	80089ce <xQueueReceive+0x46>
 80089cc:	2300      	movs	r3, #0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10b      	bne.n	80089ea <xQueueReceive+0x62>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	61fb      	str	r3, [r7, #28]
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop
 80089e8:	e7fd      	b.n	80089e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089ea:	f001 f86f 	bl	8009acc <xTaskGetSchedulerState>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d102      	bne.n	80089fa <xQueueReceive+0x72>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <xQueueReceive+0x76>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <xQueueReceive+0x78>
 80089fe:	2300      	movs	r3, #0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10b      	bne.n	8008a1c <xQueueReceive+0x94>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	61bb      	str	r3, [r7, #24]
}
 8008a16:	bf00      	nop
 8008a18:	bf00      	nop
 8008a1a:	e7fd      	b.n	8008a18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a1c:	f001 fdc4 	bl	800a5a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01f      	beq.n	8008a6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a2c:	68b9      	ldr	r1, [r7, #8]
 8008a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a30:	f000 f8f6 	bl	8008c20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	1e5a      	subs	r2, r3, #1
 8008a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00f      	beq.n	8008a64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a46:	3310      	adds	r3, #16
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fe57 	bl	80096fc <xTaskRemoveFromEventList>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d007      	beq.n	8008a64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a54:	4b3c      	ldr	r3, [pc, #240]	@ (8008b48 <xQueueReceive+0x1c0>)
 8008a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a5a:	601a      	str	r2, [r3, #0]
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a64:	f001 fdd2 	bl	800a60c <vPortExitCritical>
				return pdPASS;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e069      	b.n	8008b40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d103      	bne.n	8008a7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a72:	f001 fdcb 	bl	800a60c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e062      	b.n	8008b40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d106      	bne.n	8008a8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a80:	f107 0310 	add.w	r3, r7, #16
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fec5 	bl	8009814 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a8e:	f001 fdbd 	bl	800a60c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a92:	f000 fc0d 	bl	80092b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a96:	f001 fd87 	bl	800a5a8 <vPortEnterCritical>
 8008a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008aa0:	b25b      	sxtb	r3, r3
 8008aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa6:	d103      	bne.n	8008ab0 <xQueueReceive+0x128>
 8008aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ab6:	b25b      	sxtb	r3, r3
 8008ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008abc:	d103      	bne.n	8008ac6 <xQueueReceive+0x13e>
 8008abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ac6:	f001 fda1 	bl	800a60c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008aca:	1d3a      	adds	r2, r7, #4
 8008acc:	f107 0310 	add.w	r3, r7, #16
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f000 feb4 	bl	8009840 <xTaskCheckForTimeOut>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d123      	bne.n	8008b26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ae0:	f000 f916 	bl	8008d10 <prvIsQueueEmpty>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d017      	beq.n	8008b1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aec:	3324      	adds	r3, #36	@ 0x24
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	4611      	mov	r1, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 fdb0 	bl	8009658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008af8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008afa:	f000 f8b7 	bl	8008c6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008afe:	f000 fbe5 	bl	80092cc <xTaskResumeAll>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d189      	bne.n	8008a1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008b08:	4b0f      	ldr	r3, [pc, #60]	@ (8008b48 <xQueueReceive+0x1c0>)
 8008b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	e780      	b.n	8008a1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b1c:	f000 f8a6 	bl	8008c6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b20:	f000 fbd4 	bl	80092cc <xTaskResumeAll>
 8008b24:	e77a      	b.n	8008a1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b28:	f000 f8a0 	bl	8008c6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b2c:	f000 fbce 	bl	80092cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b32:	f000 f8ed 	bl	8008d10 <prvIsQueueEmpty>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f43f af6f 	beq.w	8008a1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3730      	adds	r7, #48	@ 0x30
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d10d      	bne.n	8008b86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d14d      	bne.n	8008c0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 ffc6 	bl	8009b08 <xTaskPriorityDisinherit>
 8008b7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	609a      	str	r2, [r3, #8]
 8008b84:	e043      	b.n	8008c0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d119      	bne.n	8008bc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6858      	ldr	r0, [r3, #4]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b94:	461a      	mov	r2, r3
 8008b96:	68b9      	ldr	r1, [r7, #8]
 8008b98:	f013 fb61 	bl	801c25e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba4:	441a      	add	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	685a      	ldr	r2, [r3, #4]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d32b      	bcc.n	8008c0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	605a      	str	r2, [r3, #4]
 8008bbe:	e026      	b.n	8008c0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	68d8      	ldr	r0, [r3, #12]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc8:	461a      	mov	r2, r3
 8008bca:	68b9      	ldr	r1, [r7, #8]
 8008bcc:	f013 fb47 	bl	801c25e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd8:	425b      	negs	r3, r3
 8008bda:	441a      	add	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d207      	bcs.n	8008bfc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf4:	425b      	negs	r3, r3
 8008bf6:	441a      	add	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d105      	bne.n	8008c0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1c5a      	adds	r2, r3, #1
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008c16:	697b      	ldr	r3, [r7, #20]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d018      	beq.n	8008c64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c3a:	441a      	add	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d303      	bcc.n	8008c54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68d9      	ldr	r1, [r3, #12]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	6838      	ldr	r0, [r7, #0]
 8008c60:	f013 fafd 	bl	801c25e <memcpy>
	}
}
 8008c64:	bf00      	nop
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c74:	f001 fc98 	bl	800a5a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c80:	e011      	b.n	8008ca6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d012      	beq.n	8008cb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3324      	adds	r3, #36	@ 0x24
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fd34 	bl	80096fc <xTaskRemoveFromEventList>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c9a:	f000 fe35 	bl	8009908 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dce9      	bgt.n	8008c82 <prvUnlockQueue+0x16>
 8008cae:	e000      	b.n	8008cb2 <prvUnlockQueue+0x46>
					break;
 8008cb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	22ff      	movs	r2, #255	@ 0xff
 8008cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008cba:	f001 fca7 	bl	800a60c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cbe:	f001 fc73 	bl	800a5a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cca:	e011      	b.n	8008cf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d012      	beq.n	8008cfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3310      	adds	r3, #16
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fd0f 	bl	80096fc <xTaskRemoveFromEventList>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ce4:	f000 fe10 	bl	8009908 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	dce9      	bgt.n	8008ccc <prvUnlockQueue+0x60>
 8008cf8:	e000      	b.n	8008cfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008cfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	22ff      	movs	r2, #255	@ 0xff
 8008d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008d04:	f001 fc82 	bl	800a60c <vPortExitCritical>
}
 8008d08:	bf00      	nop
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d18:	f001 fc46 	bl	800a5a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d24:	2301      	movs	r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	e001      	b.n	8008d2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d2e:	f001 fc6d 	bl	800a60c <vPortExitCritical>

	return xReturn;
 8008d32:	68fb      	ldr	r3, [r7, #12]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d44:	f001 fc30 	bl	800a5a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d102      	bne.n	8008d5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d54:	2301      	movs	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	e001      	b.n	8008d5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d5e:	f001 fc55 	bl	800a60c <vPortExitCritical>

	return xReturn;
 8008d62:	68fb      	ldr	r3, [r7, #12]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	e014      	b.n	8008da6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8008dbc <vQueueAddToRegistry+0x50>)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d88:	490c      	ldr	r1, [pc, #48]	@ (8008dbc <vQueueAddToRegistry+0x50>)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d92:	4a0a      	ldr	r2, [pc, #40]	@ (8008dbc <vQueueAddToRegistry+0x50>)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	00db      	lsls	r3, r3, #3
 8008d98:	4413      	add	r3, r2
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d9e:	e006      	b.n	8008dae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3301      	adds	r3, #1
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b07      	cmp	r3, #7
 8008daa:	d9e7      	bls.n	8008d7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008dac:	bf00      	nop
 8008dae:	bf00      	nop
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	200097c0 	.word	0x200097c0

08008dc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008dd0:	f001 fbea 	bl	800a5a8 <vPortEnterCritical>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008dda:	b25b      	sxtb	r3, r3
 8008ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de0:	d103      	bne.n	8008dea <vQueueWaitForMessageRestricted+0x2a>
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008df0:	b25b      	sxtb	r3, r3
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d103      	bne.n	8008e00 <vQueueWaitForMessageRestricted+0x40>
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e00:	f001 fc04 	bl	800a60c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d106      	bne.n	8008e1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	3324      	adds	r3, #36	@ 0x24
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	68b9      	ldr	r1, [r7, #8]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fc45 	bl	80096a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f7ff ff26 	bl	8008c6c <prvUnlockQueue>
	}
 8008e20:	bf00      	nop
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08e      	sub	sp, #56	@ 0x38
 8008e2c:	af04      	add	r7, sp, #16
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10b      	bne.n	8008e54 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	623b      	str	r3, [r7, #32]
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	e7fd      	b.n	8008e50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10b      	bne.n	8008e72 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	61fb      	str	r3, [r7, #28]
}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	e7fd      	b.n	8008e6e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e72:	235c      	movs	r3, #92	@ 0x5c
 8008e74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e7a:	d00b      	beq.n	8008e94 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	61bb      	str	r3, [r7, #24]
}
 8008e8e:	bf00      	nop
 8008e90:	bf00      	nop
 8008e92:	e7fd      	b.n	8008e90 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01e      	beq.n	8008eda <xTaskCreateStatic+0xb2>
 8008e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d01b      	beq.n	8008eda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eaa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eae:	2202      	movs	r2, #2
 8008eb0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9303      	str	r3, [sp, #12]
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	f107 0314 	add.w	r3, r7, #20
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	68b9      	ldr	r1, [r7, #8]
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 f850 	bl	8008f72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ed2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ed4:	f000 f8de 	bl	8009094 <prvAddNewTaskToReadyList>
 8008ed8:	e001      	b.n	8008ede <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008eda:	2300      	movs	r3, #0
 8008edc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ede:	697b      	ldr	r3, [r7, #20]
	}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3728      	adds	r7, #40	@ 0x28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08c      	sub	sp, #48	@ 0x30
 8008eec:	af04      	add	r7, sp, #16
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ef8:	88fb      	ldrh	r3, [r7, #6]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 fc75 	bl	800a7ec <pvPortMalloc>
 8008f02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00e      	beq.n	8008f28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f0a:	205c      	movs	r0, #92	@ 0x5c
 8008f0c:	f001 fc6e 	bl	800a7ec <pvPortMalloc>
 8008f10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008f1e:	e005      	b.n	8008f2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f20:	6978      	ldr	r0, [r7, #20]
 8008f22:	f001 fd31 	bl	800a988 <vPortFree>
 8008f26:	e001      	b.n	8008f2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d017      	beq.n	8008f62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f3a:	88fa      	ldrh	r2, [r7, #6]
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9303      	str	r3, [sp, #12]
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	9302      	str	r3, [sp, #8]
 8008f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 f80e 	bl	8008f72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f56:	69f8      	ldr	r0, [r7, #28]
 8008f58:	f000 f89c 	bl	8009094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	61bb      	str	r3, [r7, #24]
 8008f60:	e002      	b.n	8008f68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f62:	f04f 33ff 	mov.w	r3, #4294967295
 8008f66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f68:	69bb      	ldr	r3, [r7, #24]
	}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b088      	sub	sp, #32
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	607a      	str	r2, [r7, #4]
 8008f7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	461a      	mov	r2, r3
 8008f8a:	21a5      	movs	r1, #165	@ 0xa5
 8008f8c:	f013 f88c 	bl	801c0a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	f023 0307 	bic.w	r3, r3, #7
 8008fa8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	f003 0307 	and.w	r3, r3, #7
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00b      	beq.n	8008fcc <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb8:	f383 8811 	msr	BASEPRI, r3
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f3bf 8f4f 	dsb	sy
 8008fc4:	617b      	str	r3, [r7, #20]
}
 8008fc6:	bf00      	nop
 8008fc8:	bf00      	nop
 8008fca:	e7fd      	b.n	8008fc8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01f      	beq.n	8009012 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61fb      	str	r3, [r7, #28]
 8008fd6:	e012      	b.n	8008ffe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	4413      	add	r3, r2
 8008fde:	7819      	ldrb	r1, [r3, #0]
 8008fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	3334      	adds	r3, #52	@ 0x34
 8008fe8:	460a      	mov	r2, r1
 8008fea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d006      	beq.n	8009006 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	2b0f      	cmp	r3, #15
 8009002:	d9e9      	bls.n	8008fd8 <prvInitialiseNewTask+0x66>
 8009004:	e000      	b.n	8009008 <prvInitialiseNewTask+0x96>
			{
				break;
 8009006:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009010:	e003      	b.n	800901a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800901a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901c:	2b37      	cmp	r3, #55	@ 0x37
 800901e:	d901      	bls.n	8009024 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009020:	2337      	movs	r3, #55	@ 0x37
 8009022:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009028:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800902e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	2200      	movs	r2, #0
 8009034:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	3304      	adds	r3, #4
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff f966 	bl	800830c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009042:	3318      	adds	r3, #24
 8009044:	4618      	mov	r0, r3
 8009046:	f7ff f961 	bl	800830c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800904e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009052:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009058:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800905a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800905e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009062:	2200      	movs	r2, #0
 8009064:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	68f9      	ldr	r1, [r7, #12]
 8009072:	69b8      	ldr	r0, [r7, #24]
 8009074:	f001 f966 	bl	800a344 <pxPortInitialiseStack>
 8009078:	4602      	mov	r2, r0
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800907e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800908a:	bf00      	nop
 800908c:	3720      	adds	r7, #32
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800909c:	f001 fa84 	bl	800a5a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090a0:	4b2d      	ldr	r3, [pc, #180]	@ (8009158 <prvAddNewTaskToReadyList+0xc4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3301      	adds	r3, #1
 80090a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009158 <prvAddNewTaskToReadyList+0xc4>)
 80090a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090aa:	4b2c      	ldr	r3, [pc, #176]	@ (800915c <prvAddNewTaskToReadyList+0xc8>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d109      	bne.n	80090c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090b2:	4a2a      	ldr	r2, [pc, #168]	@ (800915c <prvAddNewTaskToReadyList+0xc8>)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090b8:	4b27      	ldr	r3, [pc, #156]	@ (8009158 <prvAddNewTaskToReadyList+0xc4>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d110      	bne.n	80090e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090c0:	f000 fc46 	bl	8009950 <prvInitialiseTaskLists>
 80090c4:	e00d      	b.n	80090e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090c6:	4b26      	ldr	r3, [pc, #152]	@ (8009160 <prvAddNewTaskToReadyList+0xcc>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090ce:	4b23      	ldr	r3, [pc, #140]	@ (800915c <prvAddNewTaskToReadyList+0xc8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d8:	429a      	cmp	r2, r3
 80090da:	d802      	bhi.n	80090e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090dc:	4a1f      	ldr	r2, [pc, #124]	@ (800915c <prvAddNewTaskToReadyList+0xc8>)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090e2:	4b20      	ldr	r3, [pc, #128]	@ (8009164 <prvAddNewTaskToReadyList+0xd0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3301      	adds	r3, #1
 80090e8:	4a1e      	ldr	r2, [pc, #120]	@ (8009164 <prvAddNewTaskToReadyList+0xd0>)
 80090ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009164 <prvAddNewTaskToReadyList+0xd0>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009168 <prvAddNewTaskToReadyList+0xd4>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d903      	bls.n	8009108 <prvAddNewTaskToReadyList+0x74>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009104:	4a18      	ldr	r2, [pc, #96]	@ (8009168 <prvAddNewTaskToReadyList+0xd4>)
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800910c:	4613      	mov	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4a15      	ldr	r2, [pc, #84]	@ (800916c <prvAddNewTaskToReadyList+0xd8>)
 8009116:	441a      	add	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3304      	adds	r3, #4
 800911c:	4619      	mov	r1, r3
 800911e:	4610      	mov	r0, r2
 8009120:	f7ff f901 	bl	8008326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009124:	f001 fa72 	bl	800a60c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009128:	4b0d      	ldr	r3, [pc, #52]	@ (8009160 <prvAddNewTaskToReadyList+0xcc>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00e      	beq.n	800914e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009130:	4b0a      	ldr	r3, [pc, #40]	@ (800915c <prvAddNewTaskToReadyList+0xc8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800913a:	429a      	cmp	r2, r3
 800913c:	d207      	bcs.n	800914e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800913e:	4b0c      	ldr	r3, [pc, #48]	@ (8009170 <prvAddNewTaskToReadyList+0xdc>)
 8009140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800914e:	bf00      	nop
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20009cd4 	.word	0x20009cd4
 800915c:	20009800 	.word	0x20009800
 8009160:	20009ce0 	.word	0x20009ce0
 8009164:	20009cf0 	.word	0x20009cf0
 8009168:	20009cdc 	.word	0x20009cdc
 800916c:	20009804 	.word	0x20009804
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800917c:	2300      	movs	r3, #0
 800917e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d018      	beq.n	80091b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009186:	4b14      	ldr	r3, [pc, #80]	@ (80091d8 <vTaskDelay+0x64>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00b      	beq.n	80091a6 <vTaskDelay+0x32>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	60bb      	str	r3, [r7, #8]
}
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
 80091a4:	e7fd      	b.n	80091a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80091a6:	f000 f883 	bl	80092b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091aa:	2100      	movs	r1, #0
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fd1b 	bl	8009be8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091b2:	f000 f88b 	bl	80092cc <xTaskResumeAll>
 80091b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d107      	bne.n	80091ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80091be:	4b07      	ldr	r3, [pc, #28]	@ (80091dc <vTaskDelay+0x68>)
 80091c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20009cfc 	.word	0x20009cfc
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08a      	sub	sp, #40	@ 0x28
 80091e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091ee:	463a      	mov	r2, r7
 80091f0:	1d39      	adds	r1, r7, #4
 80091f2:	f107 0308 	add.w	r3, r7, #8
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff f834 	bl	8008264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	9202      	str	r2, [sp, #8]
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	2300      	movs	r3, #0
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	2300      	movs	r3, #0
 800920c:	460a      	mov	r2, r1
 800920e:	4922      	ldr	r1, [pc, #136]	@ (8009298 <vTaskStartScheduler+0xb8>)
 8009210:	4822      	ldr	r0, [pc, #136]	@ (800929c <vTaskStartScheduler+0xbc>)
 8009212:	f7ff fe09 	bl	8008e28 <xTaskCreateStatic>
 8009216:	4603      	mov	r3, r0
 8009218:	4a21      	ldr	r2, [pc, #132]	@ (80092a0 <vTaskStartScheduler+0xc0>)
 800921a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800921c:	4b20      	ldr	r3, [pc, #128]	@ (80092a0 <vTaskStartScheduler+0xc0>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009224:	2301      	movs	r3, #1
 8009226:	617b      	str	r3, [r7, #20]
 8009228:	e001      	b.n	800922e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800922a:	2300      	movs	r3, #0
 800922c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d102      	bne.n	800923a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009234:	f000 fd2c 	bl	8009c90 <xTimerCreateTimerTask>
 8009238:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d116      	bne.n	800926e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	613b      	str	r3, [r7, #16]
}
 8009252:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009254:	4b13      	ldr	r3, [pc, #76]	@ (80092a4 <vTaskStartScheduler+0xc4>)
 8009256:	f04f 32ff 	mov.w	r2, #4294967295
 800925a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800925c:	4b12      	ldr	r3, [pc, #72]	@ (80092a8 <vTaskStartScheduler+0xc8>)
 800925e:	2201      	movs	r2, #1
 8009260:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009262:	4b12      	ldr	r3, [pc, #72]	@ (80092ac <vTaskStartScheduler+0xcc>)
 8009264:	2200      	movs	r2, #0
 8009266:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009268:	f001 f8fa 	bl	800a460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800926c:	e00f      	b.n	800928e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009274:	d10b      	bne.n	800928e <vTaskStartScheduler+0xae>
	__asm volatile
 8009276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	60fb      	str	r3, [r7, #12]
}
 8009288:	bf00      	nop
 800928a:	bf00      	nop
 800928c:	e7fd      	b.n	800928a <vTaskStartScheduler+0xaa>
}
 800928e:	bf00      	nop
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	0801d030 	.word	0x0801d030
 800929c:	08009921 	.word	0x08009921
 80092a0:	20009cf8 	.word	0x20009cf8
 80092a4:	20009cf4 	.word	0x20009cf4
 80092a8:	20009ce0 	.word	0x20009ce0
 80092ac:	20009cd8 	.word	0x20009cd8

080092b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092b0:	b480      	push	{r7}
 80092b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80092b4:	4b04      	ldr	r3, [pc, #16]	@ (80092c8 <vTaskSuspendAll+0x18>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3301      	adds	r3, #1
 80092ba:	4a03      	ldr	r2, [pc, #12]	@ (80092c8 <vTaskSuspendAll+0x18>)
 80092bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092be:	bf00      	nop
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	20009cfc 	.word	0x20009cfc

080092cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092da:	4b42      	ldr	r3, [pc, #264]	@ (80093e4 <xTaskResumeAll+0x118>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d10b      	bne.n	80092fa <xTaskResumeAll+0x2e>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	603b      	str	r3, [r7, #0]
}
 80092f4:	bf00      	nop
 80092f6:	bf00      	nop
 80092f8:	e7fd      	b.n	80092f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092fa:	f001 f955 	bl	800a5a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092fe:	4b39      	ldr	r3, [pc, #228]	@ (80093e4 <xTaskResumeAll+0x118>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3b01      	subs	r3, #1
 8009304:	4a37      	ldr	r2, [pc, #220]	@ (80093e4 <xTaskResumeAll+0x118>)
 8009306:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009308:	4b36      	ldr	r3, [pc, #216]	@ (80093e4 <xTaskResumeAll+0x118>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d162      	bne.n	80093d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009310:	4b35      	ldr	r3, [pc, #212]	@ (80093e8 <xTaskResumeAll+0x11c>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d05e      	beq.n	80093d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009318:	e02f      	b.n	800937a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931a:	4b34      	ldr	r3, [pc, #208]	@ (80093ec <xTaskResumeAll+0x120>)
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3318      	adds	r3, #24
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff f85a 	bl	80083e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3304      	adds	r3, #4
 8009330:	4618      	mov	r0, r3
 8009332:	f7ff f855 	bl	80083e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800933a:	4b2d      	ldr	r3, [pc, #180]	@ (80093f0 <xTaskResumeAll+0x124>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	429a      	cmp	r2, r3
 8009340:	d903      	bls.n	800934a <xTaskResumeAll+0x7e>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009346:	4a2a      	ldr	r2, [pc, #168]	@ (80093f0 <xTaskResumeAll+0x124>)
 8009348:	6013      	str	r3, [r2, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800934e:	4613      	mov	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4a27      	ldr	r2, [pc, #156]	@ (80093f4 <xTaskResumeAll+0x128>)
 8009358:	441a      	add	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3304      	adds	r3, #4
 800935e:	4619      	mov	r1, r3
 8009360:	4610      	mov	r0, r2
 8009362:	f7fe ffe0 	bl	8008326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800936a:	4b23      	ldr	r3, [pc, #140]	@ (80093f8 <xTaskResumeAll+0x12c>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009370:	429a      	cmp	r2, r3
 8009372:	d302      	bcc.n	800937a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009374:	4b21      	ldr	r3, [pc, #132]	@ (80093fc <xTaskResumeAll+0x130>)
 8009376:	2201      	movs	r2, #1
 8009378:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800937a:	4b1c      	ldr	r3, [pc, #112]	@ (80093ec <xTaskResumeAll+0x120>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1cb      	bne.n	800931a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009388:	f000 fb80 	bl	8009a8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800938c:	4b1c      	ldr	r3, [pc, #112]	@ (8009400 <xTaskResumeAll+0x134>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d010      	beq.n	80093ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009398:	f000 f846 	bl	8009428 <xTaskIncrementTick>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80093a2:	4b16      	ldr	r3, [pc, #88]	@ (80093fc <xTaskResumeAll+0x130>)
 80093a4:	2201      	movs	r2, #1
 80093a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1f1      	bne.n	8009398 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80093b4:	4b12      	ldr	r3, [pc, #72]	@ (8009400 <xTaskResumeAll+0x134>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093ba:	4b10      	ldr	r3, [pc, #64]	@ (80093fc <xTaskResumeAll+0x130>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093c2:	2301      	movs	r3, #1
 80093c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009404 <xTaskResumeAll+0x138>)
 80093c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093d6:	f001 f919 	bl	800a60c <vPortExitCritical>

	return xAlreadyYielded;
 80093da:	68bb      	ldr	r3, [r7, #8]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	20009cfc 	.word	0x20009cfc
 80093e8:	20009cd4 	.word	0x20009cd4
 80093ec:	20009c94 	.word	0x20009c94
 80093f0:	20009cdc 	.word	0x20009cdc
 80093f4:	20009804 	.word	0x20009804
 80093f8:	20009800 	.word	0x20009800
 80093fc:	20009ce8 	.word	0x20009ce8
 8009400:	20009ce4 	.word	0x20009ce4
 8009404:	e000ed04 	.word	0xe000ed04

08009408 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800940e:	4b05      	ldr	r3, [pc, #20]	@ (8009424 <xTaskGetTickCount+0x1c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009414:	687b      	ldr	r3, [r7, #4]
}
 8009416:	4618      	mov	r0, r3
 8009418:	370c      	adds	r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	20009cd8 	.word	0x20009cd8

08009428 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800942e:	2300      	movs	r3, #0
 8009430:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009432:	4b4f      	ldr	r3, [pc, #316]	@ (8009570 <xTaskIncrementTick+0x148>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	f040 8090 	bne.w	800955c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800943c:	4b4d      	ldr	r3, [pc, #308]	@ (8009574 <xTaskIncrementTick+0x14c>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3301      	adds	r3, #1
 8009442:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009444:	4a4b      	ldr	r2, [pc, #300]	@ (8009574 <xTaskIncrementTick+0x14c>)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d121      	bne.n	8009494 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009450:	4b49      	ldr	r3, [pc, #292]	@ (8009578 <xTaskIncrementTick+0x150>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00b      	beq.n	8009472 <xTaskIncrementTick+0x4a>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	603b      	str	r3, [r7, #0]
}
 800946c:	bf00      	nop
 800946e:	bf00      	nop
 8009470:	e7fd      	b.n	800946e <xTaskIncrementTick+0x46>
 8009472:	4b41      	ldr	r3, [pc, #260]	@ (8009578 <xTaskIncrementTick+0x150>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]
 8009478:	4b40      	ldr	r3, [pc, #256]	@ (800957c <xTaskIncrementTick+0x154>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a3e      	ldr	r2, [pc, #248]	@ (8009578 <xTaskIncrementTick+0x150>)
 800947e:	6013      	str	r3, [r2, #0]
 8009480:	4a3e      	ldr	r2, [pc, #248]	@ (800957c <xTaskIncrementTick+0x154>)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	4b3e      	ldr	r3, [pc, #248]	@ (8009580 <xTaskIncrementTick+0x158>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3301      	adds	r3, #1
 800948c:	4a3c      	ldr	r2, [pc, #240]	@ (8009580 <xTaskIncrementTick+0x158>)
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	f000 fafc 	bl	8009a8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009494:	4b3b      	ldr	r3, [pc, #236]	@ (8009584 <xTaskIncrementTick+0x15c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	429a      	cmp	r2, r3
 800949c:	d349      	bcc.n	8009532 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800949e:	4b36      	ldr	r3, [pc, #216]	@ (8009578 <xTaskIncrementTick+0x150>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d104      	bne.n	80094b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a8:	4b36      	ldr	r3, [pc, #216]	@ (8009584 <xTaskIncrementTick+0x15c>)
 80094aa:	f04f 32ff 	mov.w	r2, #4294967295
 80094ae:	601a      	str	r2, [r3, #0]
					break;
 80094b0:	e03f      	b.n	8009532 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b2:	4b31      	ldr	r3, [pc, #196]	@ (8009578 <xTaskIncrementTick+0x150>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094c2:	693a      	ldr	r2, [r7, #16]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d203      	bcs.n	80094d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094ca:	4a2e      	ldr	r2, [pc, #184]	@ (8009584 <xTaskIncrementTick+0x15c>)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094d0:	e02f      	b.n	8009532 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	3304      	adds	r3, #4
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe ff82 	bl	80083e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d004      	beq.n	80094ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	3318      	adds	r3, #24
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe ff79 	bl	80083e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f2:	4b25      	ldr	r3, [pc, #148]	@ (8009588 <xTaskIncrementTick+0x160>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d903      	bls.n	8009502 <xTaskIncrementTick+0xda>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094fe:	4a22      	ldr	r2, [pc, #136]	@ (8009588 <xTaskIncrementTick+0x160>)
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4a1f      	ldr	r2, [pc, #124]	@ (800958c <xTaskIncrementTick+0x164>)
 8009510:	441a      	add	r2, r3
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	3304      	adds	r3, #4
 8009516:	4619      	mov	r1, r3
 8009518:	4610      	mov	r0, r2
 800951a:	f7fe ff04 	bl	8008326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009522:	4b1b      	ldr	r3, [pc, #108]	@ (8009590 <xTaskIncrementTick+0x168>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009528:	429a      	cmp	r2, r3
 800952a:	d3b8      	bcc.n	800949e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800952c:	2301      	movs	r3, #1
 800952e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009530:	e7b5      	b.n	800949e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009532:	4b17      	ldr	r3, [pc, #92]	@ (8009590 <xTaskIncrementTick+0x168>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009538:	4914      	ldr	r1, [pc, #80]	@ (800958c <xTaskIncrementTick+0x164>)
 800953a:	4613      	mov	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	440b      	add	r3, r1
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d901      	bls.n	800954e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800954a:	2301      	movs	r3, #1
 800954c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800954e:	4b11      	ldr	r3, [pc, #68]	@ (8009594 <xTaskIncrementTick+0x16c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d007      	beq.n	8009566 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009556:	2301      	movs	r3, #1
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	e004      	b.n	8009566 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800955c:	4b0e      	ldr	r3, [pc, #56]	@ (8009598 <xTaskIncrementTick+0x170>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3301      	adds	r3, #1
 8009562:	4a0d      	ldr	r2, [pc, #52]	@ (8009598 <xTaskIncrementTick+0x170>)
 8009564:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009566:	697b      	ldr	r3, [r7, #20]
}
 8009568:	4618      	mov	r0, r3
 800956a:	3718      	adds	r7, #24
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20009cfc 	.word	0x20009cfc
 8009574:	20009cd8 	.word	0x20009cd8
 8009578:	20009c8c 	.word	0x20009c8c
 800957c:	20009c90 	.word	0x20009c90
 8009580:	20009cec 	.word	0x20009cec
 8009584:	20009cf4 	.word	0x20009cf4
 8009588:	20009cdc 	.word	0x20009cdc
 800958c:	20009804 	.word	0x20009804
 8009590:	20009800 	.word	0x20009800
 8009594:	20009ce8 	.word	0x20009ce8
 8009598:	20009ce4 	.word	0x20009ce4

0800959c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800959c:	b480      	push	{r7}
 800959e:	b085      	sub	sp, #20
 80095a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095a2:	4b28      	ldr	r3, [pc, #160]	@ (8009644 <vTaskSwitchContext+0xa8>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095aa:	4b27      	ldr	r3, [pc, #156]	@ (8009648 <vTaskSwitchContext+0xac>)
 80095ac:	2201      	movs	r2, #1
 80095ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095b0:	e042      	b.n	8009638 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80095b2:	4b25      	ldr	r3, [pc, #148]	@ (8009648 <vTaskSwitchContext+0xac>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095b8:	4b24      	ldr	r3, [pc, #144]	@ (800964c <vTaskSwitchContext+0xb0>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e011      	b.n	80095e4 <vTaskSwitchContext+0x48>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10b      	bne.n	80095de <vTaskSwitchContext+0x42>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	607b      	str	r3, [r7, #4]
}
 80095d8:	bf00      	nop
 80095da:	bf00      	nop
 80095dc:	e7fd      	b.n	80095da <vTaskSwitchContext+0x3e>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	491a      	ldr	r1, [pc, #104]	@ (8009650 <vTaskSwitchContext+0xb4>)
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	440b      	add	r3, r1
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d0e3      	beq.n	80095c0 <vTaskSwitchContext+0x24>
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4a13      	ldr	r2, [pc, #76]	@ (8009650 <vTaskSwitchContext+0xb4>)
 8009604:	4413      	add	r3, r2
 8009606:	60bb      	str	r3, [r7, #8]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	605a      	str	r2, [r3, #4]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	3308      	adds	r3, #8
 800961a:	429a      	cmp	r2, r3
 800961c:	d104      	bne.n	8009628 <vTaskSwitchContext+0x8c>
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	685a      	ldr	r2, [r3, #4]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	605a      	str	r2, [r3, #4]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	4a09      	ldr	r2, [pc, #36]	@ (8009654 <vTaskSwitchContext+0xb8>)
 8009630:	6013      	str	r3, [r2, #0]
 8009632:	4a06      	ldr	r2, [pc, #24]	@ (800964c <vTaskSwitchContext+0xb0>)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6013      	str	r3, [r2, #0]
}
 8009638:	bf00      	nop
 800963a:	3714      	adds	r7, #20
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	20009cfc 	.word	0x20009cfc
 8009648:	20009ce8 	.word	0x20009ce8
 800964c:	20009cdc 	.word	0x20009cdc
 8009650:	20009804 	.word	0x20009804
 8009654:	20009800 	.word	0x20009800

08009658 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10b      	bne.n	8009680 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	60fb      	str	r3, [r7, #12]
}
 800967a:	bf00      	nop
 800967c:	bf00      	nop
 800967e:	e7fd      	b.n	800967c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009680:	4b07      	ldr	r3, [pc, #28]	@ (80096a0 <vTaskPlaceOnEventList+0x48>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	3318      	adds	r3, #24
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7fe fe70 	bl	800836e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800968e:	2101      	movs	r1, #1
 8009690:	6838      	ldr	r0, [r7, #0]
 8009692:	f000 faa9 	bl	8009be8 <prvAddCurrentTaskToDelayedList>
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20009800 	.word	0x20009800

080096a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10b      	bne.n	80096ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	617b      	str	r3, [r7, #20]
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	e7fd      	b.n	80096ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096ce:	4b0a      	ldr	r3, [pc, #40]	@ (80096f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3318      	adds	r3, #24
 80096d4:	4619      	mov	r1, r3
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7fe fe25 	bl	8008326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80096e2:	f04f 33ff 	mov.w	r3, #4294967295
 80096e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	68b8      	ldr	r0, [r7, #8]
 80096ec:	f000 fa7c 	bl	8009be8 <prvAddCurrentTaskToDelayedList>
	}
 80096f0:	bf00      	nop
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20009800 	.word	0x20009800

080096fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10b      	bne.n	800972a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	60fb      	str	r3, [r7, #12]
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	e7fd      	b.n	8009726 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	3318      	adds	r3, #24
 800972e:	4618      	mov	r0, r3
 8009730:	f7fe fe56 	bl	80083e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009734:	4b1d      	ldr	r3, [pc, #116]	@ (80097ac <xTaskRemoveFromEventList+0xb0>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d11d      	bne.n	8009778 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	3304      	adds	r3, #4
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe fe4d 	bl	80083e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800974a:	4b19      	ldr	r3, [pc, #100]	@ (80097b0 <xTaskRemoveFromEventList+0xb4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	429a      	cmp	r2, r3
 8009750:	d903      	bls.n	800975a <xTaskRemoveFromEventList+0x5e>
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009756:	4a16      	ldr	r2, [pc, #88]	@ (80097b0 <xTaskRemoveFromEventList+0xb4>)
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800975e:	4613      	mov	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	4a13      	ldr	r2, [pc, #76]	@ (80097b4 <xTaskRemoveFromEventList+0xb8>)
 8009768:	441a      	add	r2, r3
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	3304      	adds	r3, #4
 800976e:	4619      	mov	r1, r3
 8009770:	4610      	mov	r0, r2
 8009772:	f7fe fdd8 	bl	8008326 <vListInsertEnd>
 8009776:	e005      	b.n	8009784 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	3318      	adds	r3, #24
 800977c:	4619      	mov	r1, r3
 800977e:	480e      	ldr	r0, [pc, #56]	@ (80097b8 <xTaskRemoveFromEventList+0xbc>)
 8009780:	f7fe fdd1 	bl	8008326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009788:	4b0c      	ldr	r3, [pc, #48]	@ (80097bc <xTaskRemoveFromEventList+0xc0>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978e:	429a      	cmp	r2, r3
 8009790:	d905      	bls.n	800979e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009792:	2301      	movs	r3, #1
 8009794:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009796:	4b0a      	ldr	r3, [pc, #40]	@ (80097c0 <xTaskRemoveFromEventList+0xc4>)
 8009798:	2201      	movs	r2, #1
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	e001      	b.n	80097a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800979e:	2300      	movs	r3, #0
 80097a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097a2:	697b      	ldr	r3, [r7, #20]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20009cfc 	.word	0x20009cfc
 80097b0:	20009cdc 	.word	0x20009cdc
 80097b4:	20009804 	.word	0x20009804
 80097b8:	20009c94 	.word	0x20009c94
 80097bc:	20009800 	.word	0x20009800
 80097c0:	20009ce8 	.word	0x20009ce8

080097c4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b084      	sub	sp, #16
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10b      	bne.n	80097ea <vTaskSetTimeOutState+0x26>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	60fb      	str	r3, [r7, #12]
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop
 80097e8:	e7fd      	b.n	80097e6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80097ea:	f000 fedd 	bl	800a5a8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097ee:	4b07      	ldr	r3, [pc, #28]	@ (800980c <vTaskSetTimeOutState+0x48>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80097f6:	4b06      	ldr	r3, [pc, #24]	@ (8009810 <vTaskSetTimeOutState+0x4c>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80097fe:	f000 ff05 	bl	800a60c <vPortExitCritical>
}
 8009802:	bf00      	nop
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20009cec 	.word	0x20009cec
 8009810:	20009cd8 	.word	0x20009cd8

08009814 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800981c:	4b06      	ldr	r3, [pc, #24]	@ (8009838 <vTaskInternalSetTimeOutState+0x24>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009824:	4b05      	ldr	r3, [pc, #20]	@ (800983c <vTaskInternalSetTimeOutState+0x28>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	605a      	str	r2, [r3, #4]
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	20009cec 	.word	0x20009cec
 800983c:	20009cd8 	.word	0x20009cd8

08009840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b088      	sub	sp, #32
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10b      	bne.n	8009868 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	613b      	str	r3, [r7, #16]
}
 8009862:	bf00      	nop
 8009864:	bf00      	nop
 8009866:	e7fd      	b.n	8009864 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10b      	bne.n	8009886 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	60fb      	str	r3, [r7, #12]
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	e7fd      	b.n	8009882 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009886:	f000 fe8f 	bl	800a5a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800988a:	4b1d      	ldr	r3, [pc, #116]	@ (8009900 <xTaskCheckForTimeOut+0xc0>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a2:	d102      	bne.n	80098aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098a4:	2300      	movs	r3, #0
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	e023      	b.n	80098f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	4b15      	ldr	r3, [pc, #84]	@ (8009904 <xTaskCheckForTimeOut+0xc4>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d007      	beq.n	80098c6 <xTaskCheckForTimeOut+0x86>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	69ba      	ldr	r2, [r7, #24]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d302      	bcc.n	80098c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098c0:	2301      	movs	r3, #1
 80098c2:	61fb      	str	r3, [r7, #28]
 80098c4:	e015      	b.n	80098f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d20b      	bcs.n	80098e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	1ad2      	subs	r2, r2, r3
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7ff ff99 	bl	8009814 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	61fb      	str	r3, [r7, #28]
 80098e6:	e004      	b.n	80098f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098ee:	2301      	movs	r3, #1
 80098f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098f2:	f000 fe8b 	bl	800a60c <vPortExitCritical>

	return xReturn;
 80098f6:	69fb      	ldr	r3, [r7, #28]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3720      	adds	r7, #32
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	20009cd8 	.word	0x20009cd8
 8009904:	20009cec 	.word	0x20009cec

08009908 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009908:	b480      	push	{r7}
 800990a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800990c:	4b03      	ldr	r3, [pc, #12]	@ (800991c <vTaskMissedYield+0x14>)
 800990e:	2201      	movs	r2, #1
 8009910:	601a      	str	r2, [r3, #0]
}
 8009912:	bf00      	nop
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	20009ce8 	.word	0x20009ce8

08009920 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009928:	f000 f852 	bl	80099d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800992c:	4b06      	ldr	r3, [pc, #24]	@ (8009948 <prvIdleTask+0x28>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d9f9      	bls.n	8009928 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009934:	4b05      	ldr	r3, [pc, #20]	@ (800994c <prvIdleTask+0x2c>)
 8009936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009944:	e7f0      	b.n	8009928 <prvIdleTask+0x8>
 8009946:	bf00      	nop
 8009948:	20009804 	.word	0x20009804
 800994c:	e000ed04 	.word	0xe000ed04

08009950 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009956:	2300      	movs	r3, #0
 8009958:	607b      	str	r3, [r7, #4]
 800995a:	e00c      	b.n	8009976 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4a12      	ldr	r2, [pc, #72]	@ (80099b0 <prvInitialiseTaskLists+0x60>)
 8009968:	4413      	add	r3, r2
 800996a:	4618      	mov	r0, r3
 800996c:	f7fe fcae 	bl	80082cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3301      	adds	r3, #1
 8009974:	607b      	str	r3, [r7, #4]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2b37      	cmp	r3, #55	@ 0x37
 800997a:	d9ef      	bls.n	800995c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800997c:	480d      	ldr	r0, [pc, #52]	@ (80099b4 <prvInitialiseTaskLists+0x64>)
 800997e:	f7fe fca5 	bl	80082cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009982:	480d      	ldr	r0, [pc, #52]	@ (80099b8 <prvInitialiseTaskLists+0x68>)
 8009984:	f7fe fca2 	bl	80082cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009988:	480c      	ldr	r0, [pc, #48]	@ (80099bc <prvInitialiseTaskLists+0x6c>)
 800998a:	f7fe fc9f 	bl	80082cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800998e:	480c      	ldr	r0, [pc, #48]	@ (80099c0 <prvInitialiseTaskLists+0x70>)
 8009990:	f7fe fc9c 	bl	80082cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009994:	480b      	ldr	r0, [pc, #44]	@ (80099c4 <prvInitialiseTaskLists+0x74>)
 8009996:	f7fe fc99 	bl	80082cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800999a:	4b0b      	ldr	r3, [pc, #44]	@ (80099c8 <prvInitialiseTaskLists+0x78>)
 800999c:	4a05      	ldr	r2, [pc, #20]	@ (80099b4 <prvInitialiseTaskLists+0x64>)
 800999e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099a0:	4b0a      	ldr	r3, [pc, #40]	@ (80099cc <prvInitialiseTaskLists+0x7c>)
 80099a2:	4a05      	ldr	r2, [pc, #20]	@ (80099b8 <prvInitialiseTaskLists+0x68>)
 80099a4:	601a      	str	r2, [r3, #0]
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20009804 	.word	0x20009804
 80099b4:	20009c64 	.word	0x20009c64
 80099b8:	20009c78 	.word	0x20009c78
 80099bc:	20009c94 	.word	0x20009c94
 80099c0:	20009ca8 	.word	0x20009ca8
 80099c4:	20009cc0 	.word	0x20009cc0
 80099c8:	20009c8c 	.word	0x20009c8c
 80099cc:	20009c90 	.word	0x20009c90

080099d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099d6:	e019      	b.n	8009a0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099d8:	f000 fde6 	bl	800a5a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099dc:	4b10      	ldr	r3, [pc, #64]	@ (8009a20 <prvCheckTasksWaitingTermination+0x50>)
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3304      	adds	r3, #4
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fe fcf9 	bl	80083e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009a24 <prvCheckTasksWaitingTermination+0x54>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009a24 <prvCheckTasksWaitingTermination+0x54>)
 80099f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009a28 <prvCheckTasksWaitingTermination+0x58>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3b01      	subs	r3, #1
 80099fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009a28 <prvCheckTasksWaitingTermination+0x58>)
 8009a00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a02:	f000 fe03 	bl	800a60c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f810 	bl	8009a2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a0c:	4b06      	ldr	r3, [pc, #24]	@ (8009a28 <prvCheckTasksWaitingTermination+0x58>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e1      	bne.n	80099d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a14:	bf00      	nop
 8009a16:	bf00      	nop
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20009ca8 	.word	0x20009ca8
 8009a24:	20009cd4 	.word	0x20009cd4
 8009a28:	20009cbc 	.word	0x20009cbc

08009a2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d108      	bne.n	8009a50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a42:	4618      	mov	r0, r3
 8009a44:	f000 ffa0 	bl	800a988 <vPortFree>
				vPortFree( pxTCB );
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 ff9d 	bl	800a988 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a4e:	e019      	b.n	8009a84 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d103      	bne.n	8009a62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 ff94 	bl	800a988 <vPortFree>
	}
 8009a60:	e010      	b.n	8009a84 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d00b      	beq.n	8009a84 <prvDeleteTCB+0x58>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	60fb      	str	r3, [r7, #12]
}
 8009a7e:	bf00      	nop
 8009a80:	bf00      	nop
 8009a82:	e7fd      	b.n	8009a80 <prvDeleteTCB+0x54>
	}
 8009a84:	bf00      	nop
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a92:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac4 <prvResetNextTaskUnblockTime+0x38>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d104      	bne.n	8009aa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8009a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009aa4:	e008      	b.n	8009ab8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa6:	4b07      	ldr	r3, [pc, #28]	@ (8009ac4 <prvResetNextTaskUnblockTime+0x38>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	4a04      	ldr	r2, [pc, #16]	@ (8009ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ab6:	6013      	str	r3, [r2, #0]
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	20009c8c 	.word	0x20009c8c
 8009ac8:	20009cf4 	.word	0x20009cf4

08009acc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8009b00 <xTaskGetSchedulerState+0x34>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d102      	bne.n	8009ae0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ada:	2301      	movs	r3, #1
 8009adc:	607b      	str	r3, [r7, #4]
 8009ade:	e008      	b.n	8009af2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ae0:	4b08      	ldr	r3, [pc, #32]	@ (8009b04 <xTaskGetSchedulerState+0x38>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ae8:	2302      	movs	r3, #2
 8009aea:	607b      	str	r3, [r7, #4]
 8009aec:	e001      	b.n	8009af2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009aee:	2300      	movs	r3, #0
 8009af0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009af2:	687b      	ldr	r3, [r7, #4]
	}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	20009ce0 	.word	0x20009ce0
 8009b04:	20009cfc 	.word	0x20009cfc

08009b08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b14:	2300      	movs	r3, #0
 8009b16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d058      	beq.n	8009bd0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8009bdc <xTaskPriorityDisinherit+0xd4>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d00b      	beq.n	8009b40 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	60fb      	str	r3, [r7, #12]
}
 8009b3a:	bf00      	nop
 8009b3c:	bf00      	nop
 8009b3e:	e7fd      	b.n	8009b3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10b      	bne.n	8009b60 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	60bb      	str	r3, [r7, #8]
}
 8009b5a:	bf00      	nop
 8009b5c:	bf00      	nop
 8009b5e:	e7fd      	b.n	8009b5c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b64:	1e5a      	subs	r2, r3, #1
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d02c      	beq.n	8009bd0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d128      	bne.n	8009bd0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fe fc2c 	bl	80083e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8009be0 <xTaskPriorityDisinherit+0xd8>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d903      	bls.n	8009bb0 <xTaskPriorityDisinherit+0xa8>
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bac:	4a0c      	ldr	r2, [pc, #48]	@ (8009be0 <xTaskPriorityDisinherit+0xd8>)
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4413      	add	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4a09      	ldr	r2, [pc, #36]	@ (8009be4 <xTaskPriorityDisinherit+0xdc>)
 8009bbe:	441a      	add	r2, r3
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	f7fe fbad 	bl	8008326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bd0:	697b      	ldr	r3, [r7, #20]
	}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20009800 	.word	0x20009800
 8009be0:	20009cdc 	.word	0x20009cdc
 8009be4:	20009804 	.word	0x20009804

08009be8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bf2:	4b21      	ldr	r3, [pc, #132]	@ (8009c78 <prvAddCurrentTaskToDelayedList+0x90>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bf8:	4b20      	ldr	r3, [pc, #128]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fe fbee 	bl	80083e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0a:	d10a      	bne.n	8009c22 <prvAddCurrentTaskToDelayedList+0x3a>
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d007      	beq.n	8009c22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c12:	4b1a      	ldr	r3, [pc, #104]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3304      	adds	r3, #4
 8009c18:	4619      	mov	r1, r3
 8009c1a:	4819      	ldr	r0, [pc, #100]	@ (8009c80 <prvAddCurrentTaskToDelayedList+0x98>)
 8009c1c:	f7fe fb83 	bl	8008326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c20:	e026      	b.n	8009c70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4413      	add	r3, r2
 8009c28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c2a:	4b14      	ldr	r3, [pc, #80]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d209      	bcs.n	8009c4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c3a:	4b12      	ldr	r3, [pc, #72]	@ (8009c84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	3304      	adds	r3, #4
 8009c44:	4619      	mov	r1, r3
 8009c46:	4610      	mov	r0, r2
 8009c48:	f7fe fb91 	bl	800836e <vListInsert>
}
 8009c4c:	e010      	b.n	8009c70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009c88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3304      	adds	r3, #4
 8009c58:	4619      	mov	r1, r3
 8009c5a:	4610      	mov	r0, r2
 8009c5c:	f7fe fb87 	bl	800836e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c60:	4b0a      	ldr	r3, [pc, #40]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d202      	bcs.n	8009c70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c6a:	4a08      	ldr	r2, [pc, #32]	@ (8009c8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	6013      	str	r3, [r2, #0]
}
 8009c70:	bf00      	nop
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20009cd8 	.word	0x20009cd8
 8009c7c:	20009800 	.word	0x20009800
 8009c80:	20009cc0 	.word	0x20009cc0
 8009c84:	20009c90 	.word	0x20009c90
 8009c88:	20009c8c 	.word	0x20009c8c
 8009c8c:	20009cf4 	.word	0x20009cf4

08009c90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08a      	sub	sp, #40	@ 0x28
 8009c94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c96:	2300      	movs	r3, #0
 8009c98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c9a:	f000 fb13 	bl	800a2c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8009d14 <xTimerCreateTimerTask+0x84>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d021      	beq.n	8009cea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009cae:	1d3a      	adds	r2, r7, #4
 8009cb0:	f107 0108 	add.w	r1, r7, #8
 8009cb4:	f107 030c 	add.w	r3, r7, #12
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe faed 	bl	8008298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	9202      	str	r2, [sp, #8]
 8009cc6:	9301      	str	r3, [sp, #4]
 8009cc8:	2302      	movs	r3, #2
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	460a      	mov	r2, r1
 8009cd0:	4911      	ldr	r1, [pc, #68]	@ (8009d18 <xTimerCreateTimerTask+0x88>)
 8009cd2:	4812      	ldr	r0, [pc, #72]	@ (8009d1c <xTimerCreateTimerTask+0x8c>)
 8009cd4:	f7ff f8a8 	bl	8008e28 <xTaskCreateStatic>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	4a11      	ldr	r2, [pc, #68]	@ (8009d20 <xTimerCreateTimerTask+0x90>)
 8009cdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009cde:	4b10      	ldr	r3, [pc, #64]	@ (8009d20 <xTimerCreateTimerTask+0x90>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10b      	bne.n	8009d08 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	613b      	str	r3, [r7, #16]
}
 8009d02:	bf00      	nop
 8009d04:	bf00      	nop
 8009d06:	e7fd      	b.n	8009d04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d08:	697b      	ldr	r3, [r7, #20]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20009d30 	.word	0x20009d30
 8009d18:	0801d038 	.word	0x0801d038
 8009d1c:	08009e5d 	.word	0x08009e5d
 8009d20:	20009d34 	.word	0x20009d34

08009d24 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08a      	sub	sp, #40	@ 0x28
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
 8009d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10b      	bne.n	8009d54 <xTimerGenericCommand+0x30>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d40:	f383 8811 	msr	BASEPRI, r3
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	623b      	str	r3, [r7, #32]
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	e7fd      	b.n	8009d50 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d54:	4b19      	ldr	r3, [pc, #100]	@ (8009dbc <xTimerGenericCommand+0x98>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d02a      	beq.n	8009db2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b05      	cmp	r3, #5
 8009d6c:	dc18      	bgt.n	8009da0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d6e:	f7ff fead 	bl	8009acc <xTaskGetSchedulerState>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d109      	bne.n	8009d8c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d78:	4b10      	ldr	r3, [pc, #64]	@ (8009dbc <xTimerGenericCommand+0x98>)
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	f107 0110 	add.w	r1, r7, #16
 8009d80:	2300      	movs	r3, #0
 8009d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d84:	f7fe fc60 	bl	8008648 <xQueueGenericSend>
 8009d88:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d8a:	e012      	b.n	8009db2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009dbc <xTimerGenericCommand+0x98>)
 8009d8e:	6818      	ldr	r0, [r3, #0]
 8009d90:	f107 0110 	add.w	r1, r7, #16
 8009d94:	2300      	movs	r3, #0
 8009d96:	2200      	movs	r2, #0
 8009d98:	f7fe fc56 	bl	8008648 <xQueueGenericSend>
 8009d9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009d9e:	e008      	b.n	8009db2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009da0:	4b06      	ldr	r3, [pc, #24]	@ (8009dbc <xTimerGenericCommand+0x98>)
 8009da2:	6818      	ldr	r0, [r3, #0]
 8009da4:	f107 0110 	add.w	r1, r7, #16
 8009da8:	2300      	movs	r3, #0
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	f7fe fd4e 	bl	800884c <xQueueGenericSendFromISR>
 8009db0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	@ 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20009d30 	.word	0x20009d30

08009dc0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af02      	add	r7, sp, #8
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dca:	4b23      	ldr	r3, [pc, #140]	@ (8009e58 <prvProcessExpiredTimer+0x98>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe fb01 	bl	80083e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d023      	beq.n	8009e34 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	699a      	ldr	r2, [r3, #24]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	18d1      	adds	r1, r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	6978      	ldr	r0, [r7, #20]
 8009dfa:	f000 f8d5 	bl	8009fa8 <prvInsertTimerInActiveList>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d020      	beq.n	8009e46 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e04:	2300      	movs	r3, #0
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	6978      	ldr	r0, [r7, #20]
 8009e10:	f7ff ff88 	bl	8009d24 <xTimerGenericCommand>
 8009e14:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d114      	bne.n	8009e46 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e20:	f383 8811 	msr	BASEPRI, r3
 8009e24:	f3bf 8f6f 	isb	sy
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	60fb      	str	r3, [r7, #12]
}
 8009e2e:	bf00      	nop
 8009e30:	bf00      	nop
 8009e32:	e7fd      	b.n	8009e30 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e3a:	f023 0301 	bic.w	r3, r3, #1
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	6978      	ldr	r0, [r7, #20]
 8009e4c:	4798      	blx	r3
}
 8009e4e:	bf00      	nop
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20009d28 	.word	0x20009d28

08009e5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e64:	f107 0308 	add.w	r3, r7, #8
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 f859 	bl	8009f20 <prvGetNextExpireTime>
 8009e6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	4619      	mov	r1, r3
 8009e74:	68f8      	ldr	r0, [r7, #12]
 8009e76:	f000 f805 	bl	8009e84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e7a:	f000 f8d7 	bl	800a02c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e7e:	bf00      	nop
 8009e80:	e7f0      	b.n	8009e64 <prvTimerTask+0x8>
	...

08009e84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e8e:	f7ff fa0f 	bl	80092b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e92:	f107 0308 	add.w	r3, r7, #8
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 f866 	bl	8009f68 <prvSampleTimeNow>
 8009e9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d130      	bne.n	8009f06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10a      	bne.n	8009ec0 <prvProcessTimerOrBlockTask+0x3c>
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d806      	bhi.n	8009ec0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009eb2:	f7ff fa0b 	bl	80092cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009eb6:	68f9      	ldr	r1, [r7, #12]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7ff ff81 	bl	8009dc0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ebe:	e024      	b.n	8009f0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d008      	beq.n	8009ed8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ec6:	4b13      	ldr	r3, [pc, #76]	@ (8009f14 <prvProcessTimerOrBlockTask+0x90>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <prvProcessTimerOrBlockTask+0x50>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e000      	b.n	8009ed6 <prvProcessTimerOrBlockTask+0x52>
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8009f18 <prvProcessTimerOrBlockTask+0x94>)
 8009eda:	6818      	ldr	r0, [r3, #0]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	f7fe ff6b 	bl	8008dc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009eea:	f7ff f9ef 	bl	80092cc <xTaskResumeAll>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ef4:	4b09      	ldr	r3, [pc, #36]	@ (8009f1c <prvProcessTimerOrBlockTask+0x98>)
 8009ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	f3bf 8f6f 	isb	sy
}
 8009f04:	e001      	b.n	8009f0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f06:	f7ff f9e1 	bl	80092cc <xTaskResumeAll>
}
 8009f0a:	bf00      	nop
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20009d2c 	.word	0x20009d2c
 8009f18:	20009d30 	.word	0x20009d30
 8009f1c:	e000ed04 	.word	0xe000ed04

08009f20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009f28:	4b0e      	ldr	r3, [pc, #56]	@ (8009f64 <prvGetNextExpireTime+0x44>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d101      	bne.n	8009f36 <prvGetNextExpireTime+0x16>
 8009f32:	2201      	movs	r2, #1
 8009f34:	e000      	b.n	8009f38 <prvGetNextExpireTime+0x18>
 8009f36:	2200      	movs	r2, #0
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d105      	bne.n	8009f50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f44:	4b07      	ldr	r3, [pc, #28]	@ (8009f64 <prvGetNextExpireTime+0x44>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	e001      	b.n	8009f54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f54:	68fb      	ldr	r3, [r7, #12]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	20009d28 	.word	0x20009d28

08009f68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f70:	f7ff fa4a 	bl	8009408 <xTaskGetTickCount>
 8009f74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f76:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa4 <prvSampleTimeNow+0x3c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d205      	bcs.n	8009f8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f80:	f000 f93a 	bl	800a1f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	e002      	b.n	8009f92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f92:	4a04      	ldr	r2, [pc, #16]	@ (8009fa4 <prvSampleTimeNow+0x3c>)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f98:	68fb      	ldr	r3, [r7, #12]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	20009d38 	.word	0x20009d38

08009fa8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d812      	bhi.n	8009ff4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	1ad2      	subs	r2, r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d302      	bcc.n	8009fe2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	e01b      	b.n	800a01a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009fe2:	4b10      	ldr	r3, [pc, #64]	@ (800a024 <prvInsertTimerInActiveList+0x7c>)
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f7fe f9be 	bl	800836e <vListInsert>
 8009ff2:	e012      	b.n	800a01a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d206      	bcs.n	800a00a <prvInsertTimerInActiveList+0x62>
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	429a      	cmp	r2, r3
 800a002:	d302      	bcc.n	800a00a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a004:	2301      	movs	r3, #1
 800a006:	617b      	str	r3, [r7, #20]
 800a008:	e007      	b.n	800a01a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a00a:	4b07      	ldr	r3, [pc, #28]	@ (800a028 <prvInsertTimerInActiveList+0x80>)
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3304      	adds	r3, #4
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f7fe f9aa 	bl	800836e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a01a:	697b      	ldr	r3, [r7, #20]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20009d2c 	.word	0x20009d2c
 800a028:	20009d28 	.word	0x20009d28

0800a02c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b08e      	sub	sp, #56	@ 0x38
 800a030:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a032:	e0ce      	b.n	800a1d2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	da19      	bge.n	800a06e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a03a:	1d3b      	adds	r3, r7, #4
 800a03c:	3304      	adds	r3, #4
 800a03e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	61fb      	str	r3, [r7, #28]
}
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	e7fd      	b.n	800a05a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a064:	6850      	ldr	r0, [r2, #4]
 800a066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a068:	6892      	ldr	r2, [r2, #8]
 800a06a:	4611      	mov	r1, r2
 800a06c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	f2c0 80ae 	blt.w	800a1d2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d004      	beq.n	800a08c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a084:	3304      	adds	r3, #4
 800a086:	4618      	mov	r0, r3
 800a088:	f7fe f9aa 	bl	80083e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a08c:	463b      	mov	r3, r7
 800a08e:	4618      	mov	r0, r3
 800a090:	f7ff ff6a 	bl	8009f68 <prvSampleTimeNow>
 800a094:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b09      	cmp	r3, #9
 800a09a:	f200 8097 	bhi.w	800a1cc <prvProcessReceivedCommands+0x1a0>
 800a09e:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a4 <prvProcessReceivedCommands+0x78>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a0cd 	.word	0x0800a0cd
 800a0a8:	0800a0cd 	.word	0x0800a0cd
 800a0ac:	0800a0cd 	.word	0x0800a0cd
 800a0b0:	0800a143 	.word	0x0800a143
 800a0b4:	0800a157 	.word	0x0800a157
 800a0b8:	0800a1a3 	.word	0x0800a1a3
 800a0bc:	0800a0cd 	.word	0x0800a0cd
 800a0c0:	0800a0cd 	.word	0x0800a0cd
 800a0c4:	0800a143 	.word	0x0800a143
 800a0c8:	0800a157 	.word	0x0800a157
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0d2:	f043 0301 	orr.w	r3, r3, #1
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	18d1      	adds	r1, r2, r3
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0ec:	f7ff ff5c 	bl	8009fa8 <prvInsertTimerInActiveList>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d06c      	beq.n	800a1d0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a100:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d061      	beq.n	800a1d0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a110:	699b      	ldr	r3, [r3, #24]
 800a112:	441a      	add	r2, r3
 800a114:	2300      	movs	r3, #0
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	2300      	movs	r3, #0
 800a11a:	2100      	movs	r1, #0
 800a11c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a11e:	f7ff fe01 	bl	8009d24 <xTimerGenericCommand>
 800a122:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d152      	bne.n	800a1d0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	61bb      	str	r3, [r7, #24]
}
 800a13c:	bf00      	nop
 800a13e:	bf00      	nop
 800a140:	e7fd      	b.n	800a13e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a148:	f023 0301 	bic.w	r3, r3, #1
 800a14c:	b2da      	uxtb	r2, r3
 800a14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a150:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a154:	e03d      	b.n	800a1d2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a15c:	f043 0301 	orr.w	r3, r3, #1
 800a160:	b2da      	uxtb	r2, r3
 800a162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a164:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a16e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d10b      	bne.n	800a18e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	617b      	str	r3, [r7, #20]
}
 800a188:	bf00      	nop
 800a18a:	bf00      	nop
 800a18c:	e7fd      	b.n	800a18a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a190:	699a      	ldr	r2, [r3, #24]
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	18d1      	adds	r1, r2, r3
 800a196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a19a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a19c:	f7ff ff04 	bl	8009fa8 <prvInsertTimerInActiveList>
					break;
 800a1a0:	e017      	b.n	800a1d2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1a8:	f003 0302 	and.w	r3, r3, #2
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d103      	bne.n	800a1b8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a1b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1b2:	f000 fbe9 	bl	800a988 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a1b6:	e00c      	b.n	800a1d2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1be:	f023 0301 	bic.w	r3, r3, #1
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a1ca:	e002      	b.n	800a1d2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a1cc:	bf00      	nop
 800a1ce:	e000      	b.n	800a1d2 <prvProcessReceivedCommands+0x1a6>
					break;
 800a1d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1d2:	4b08      	ldr	r3, [pc, #32]	@ (800a1f4 <prvProcessReceivedCommands+0x1c8>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	1d39      	adds	r1, r7, #4
 800a1d8:	2200      	movs	r2, #0
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fe fbd4 	bl	8008988 <xQueueReceive>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f47f af26 	bne.w	800a034 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	3730      	adds	r7, #48	@ 0x30
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20009d30 	.word	0x20009d30

0800a1f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a1fe:	e049      	b.n	800a294 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a200:	4b2e      	ldr	r3, [pc, #184]	@ (800a2bc <prvSwitchTimerLists+0xc4>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a20a:	4b2c      	ldr	r3, [pc, #176]	@ (800a2bc <prvSwitchTimerLists+0xc4>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3304      	adds	r3, #4
 800a218:	4618      	mov	r0, r3
 800a21a:	f7fe f8e1 	bl	80083e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a22c:	f003 0304 	and.w	r3, r3, #4
 800a230:	2b00      	cmp	r3, #0
 800a232:	d02f      	beq.n	800a294 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	4413      	add	r3, r2
 800a23c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	429a      	cmp	r2, r3
 800a244:	d90e      	bls.n	800a264 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a252:	4b1a      	ldr	r3, [pc, #104]	@ (800a2bc <prvSwitchTimerLists+0xc4>)
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3304      	adds	r3, #4
 800a25a:	4619      	mov	r1, r3
 800a25c:	4610      	mov	r0, r2
 800a25e:	f7fe f886 	bl	800836e <vListInsert>
 800a262:	e017      	b.n	800a294 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a264:	2300      	movs	r3, #0
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	2300      	movs	r3, #0
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	2100      	movs	r1, #0
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f7ff fd58 	bl	8009d24 <xTimerGenericCommand>
 800a274:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10b      	bne.n	800a294 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	603b      	str	r3, [r7, #0]
}
 800a28e:	bf00      	nop
 800a290:	bf00      	nop
 800a292:	e7fd      	b.n	800a290 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a294:	4b09      	ldr	r3, [pc, #36]	@ (800a2bc <prvSwitchTimerLists+0xc4>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1b0      	bne.n	800a200 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a29e:	4b07      	ldr	r3, [pc, #28]	@ (800a2bc <prvSwitchTimerLists+0xc4>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a2a4:	4b06      	ldr	r3, [pc, #24]	@ (800a2c0 <prvSwitchTimerLists+0xc8>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a04      	ldr	r2, [pc, #16]	@ (800a2bc <prvSwitchTimerLists+0xc4>)
 800a2aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a2ac:	4a04      	ldr	r2, [pc, #16]	@ (800a2c0 <prvSwitchTimerLists+0xc8>)
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	6013      	str	r3, [r2, #0]
}
 800a2b2:	bf00      	nop
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20009d28 	.word	0x20009d28
 800a2c0:	20009d2c 	.word	0x20009d2c

0800a2c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a2ca:	f000 f96d 	bl	800a5a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a2ce:	4b15      	ldr	r3, [pc, #84]	@ (800a324 <prvCheckForValidListAndQueue+0x60>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d120      	bne.n	800a318 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a2d6:	4814      	ldr	r0, [pc, #80]	@ (800a328 <prvCheckForValidListAndQueue+0x64>)
 800a2d8:	f7fd fff8 	bl	80082cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a2dc:	4813      	ldr	r0, [pc, #76]	@ (800a32c <prvCheckForValidListAndQueue+0x68>)
 800a2de:	f7fd fff5 	bl	80082cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a2e2:	4b13      	ldr	r3, [pc, #76]	@ (800a330 <prvCheckForValidListAndQueue+0x6c>)
 800a2e4:	4a10      	ldr	r2, [pc, #64]	@ (800a328 <prvCheckForValidListAndQueue+0x64>)
 800a2e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a2e8:	4b12      	ldr	r3, [pc, #72]	@ (800a334 <prvCheckForValidListAndQueue+0x70>)
 800a2ea:	4a10      	ldr	r2, [pc, #64]	@ (800a32c <prvCheckForValidListAndQueue+0x68>)
 800a2ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	9300      	str	r3, [sp, #0]
 800a2f2:	4b11      	ldr	r3, [pc, #68]	@ (800a338 <prvCheckForValidListAndQueue+0x74>)
 800a2f4:	4a11      	ldr	r2, [pc, #68]	@ (800a33c <prvCheckForValidListAndQueue+0x78>)
 800a2f6:	2110      	movs	r1, #16
 800a2f8:	200a      	movs	r0, #10
 800a2fa:	f7fe f905 	bl	8008508 <xQueueGenericCreateStatic>
 800a2fe:	4603      	mov	r3, r0
 800a300:	4a08      	ldr	r2, [pc, #32]	@ (800a324 <prvCheckForValidListAndQueue+0x60>)
 800a302:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a304:	4b07      	ldr	r3, [pc, #28]	@ (800a324 <prvCheckForValidListAndQueue+0x60>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d005      	beq.n	800a318 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a30c:	4b05      	ldr	r3, [pc, #20]	@ (800a324 <prvCheckForValidListAndQueue+0x60>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	490b      	ldr	r1, [pc, #44]	@ (800a340 <prvCheckForValidListAndQueue+0x7c>)
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe fd2a 	bl	8008d6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a318:	f000 f978 	bl	800a60c <vPortExitCritical>
}
 800a31c:	bf00      	nop
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	20009d30 	.word	0x20009d30
 800a328:	20009d00 	.word	0x20009d00
 800a32c:	20009d14 	.word	0x20009d14
 800a330:	20009d28 	.word	0x20009d28
 800a334:	20009d2c 	.word	0x20009d2c
 800a338:	20009ddc 	.word	0x20009ddc
 800a33c:	20009d3c 	.word	0x20009d3c
 800a340:	0801d040 	.word	0x0801d040

0800a344 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	3b04      	subs	r3, #4
 800a354:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a35c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3b04      	subs	r3, #4
 800a362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	f023 0201 	bic.w	r2, r3, #1
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3b04      	subs	r3, #4
 800a372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a374:	4a0c      	ldr	r2, [pc, #48]	@ (800a3a8 <pxPortInitialiseStack+0x64>)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3b14      	subs	r3, #20
 800a37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3b04      	subs	r3, #4
 800a38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f06f 0202 	mvn.w	r2, #2
 800a392:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3b20      	subs	r3, #32
 800a398:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a39a:	68fb      	ldr	r3, [r7, #12]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	0800a3ad 	.word	0x0800a3ad

0800a3ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3b6:	4b13      	ldr	r3, [pc, #76]	@ (800a404 <prvTaskExitError+0x58>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3be:	d00b      	beq.n	800a3d8 <prvTaskExitError+0x2c>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c4:	f383 8811 	msr	BASEPRI, r3
 800a3c8:	f3bf 8f6f 	isb	sy
 800a3cc:	f3bf 8f4f 	dsb	sy
 800a3d0:	60fb      	str	r3, [r7, #12]
}
 800a3d2:	bf00      	nop
 800a3d4:	bf00      	nop
 800a3d6:	e7fd      	b.n	800a3d4 <prvTaskExitError+0x28>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	60bb      	str	r3, [r7, #8]
}
 800a3ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3ec:	bf00      	nop
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d0fc      	beq.n	800a3ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	20000030 	.word	0x20000030
	...

0800a410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a410:	4b07      	ldr	r3, [pc, #28]	@ (800a430 <pxCurrentTCBConst2>)
 800a412:	6819      	ldr	r1, [r3, #0]
 800a414:	6808      	ldr	r0, [r1, #0]
 800a416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41a:	f380 8809 	msr	PSP, r0
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f04f 0000 	mov.w	r0, #0
 800a426:	f380 8811 	msr	BASEPRI, r0
 800a42a:	4770      	bx	lr
 800a42c:	f3af 8000 	nop.w

0800a430 <pxCurrentTCBConst2>:
 800a430:	20009800 	.word	0x20009800
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop

0800a438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a438:	4808      	ldr	r0, [pc, #32]	@ (800a45c <prvPortStartFirstTask+0x24>)
 800a43a:	6800      	ldr	r0, [r0, #0]
 800a43c:	6800      	ldr	r0, [r0, #0]
 800a43e:	f380 8808 	msr	MSP, r0
 800a442:	f04f 0000 	mov.w	r0, #0
 800a446:	f380 8814 	msr	CONTROL, r0
 800a44a:	b662      	cpsie	i
 800a44c:	b661      	cpsie	f
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	f3bf 8f6f 	isb	sy
 800a456:	df00      	svc	0
 800a458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a45a:	bf00      	nop
 800a45c:	e000ed08 	.word	0xe000ed08

0800a460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a466:	4b47      	ldr	r3, [pc, #284]	@ (800a584 <xPortStartScheduler+0x124>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a47      	ldr	r2, [pc, #284]	@ (800a588 <xPortStartScheduler+0x128>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d10b      	bne.n	800a488 <xPortStartScheduler+0x28>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	60fb      	str	r3, [r7, #12]
}
 800a482:	bf00      	nop
 800a484:	bf00      	nop
 800a486:	e7fd      	b.n	800a484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a488:	4b3e      	ldr	r3, [pc, #248]	@ (800a584 <xPortStartScheduler+0x124>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a3f      	ldr	r2, [pc, #252]	@ (800a58c <xPortStartScheduler+0x12c>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d10b      	bne.n	800a4aa <xPortStartScheduler+0x4a>
	__asm volatile
 800a492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	613b      	str	r3, [r7, #16]
}
 800a4a4:	bf00      	nop
 800a4a6:	bf00      	nop
 800a4a8:	e7fd      	b.n	800a4a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a4aa:	4b39      	ldr	r3, [pc, #228]	@ (800a590 <xPortStartScheduler+0x130>)
 800a4ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	22ff      	movs	r2, #255	@ 0xff
 800a4ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	b2db      	uxtb	r3, r3
 800a4c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4c4:	78fb      	ldrb	r3, [r7, #3]
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	4b31      	ldr	r3, [pc, #196]	@ (800a594 <xPortStartScheduler+0x134>)
 800a4d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4d2:	4b31      	ldr	r3, [pc, #196]	@ (800a598 <xPortStartScheduler+0x138>)
 800a4d4:	2207      	movs	r2, #7
 800a4d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4d8:	e009      	b.n	800a4ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a4da:	4b2f      	ldr	r3, [pc, #188]	@ (800a598 <xPortStartScheduler+0x138>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	4a2d      	ldr	r2, [pc, #180]	@ (800a598 <xPortStartScheduler+0x138>)
 800a4e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4e4:	78fb      	ldrb	r3, [r7, #3]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	005b      	lsls	r3, r3, #1
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4ee:	78fb      	ldrb	r3, [r7, #3]
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4f6:	2b80      	cmp	r3, #128	@ 0x80
 800a4f8:	d0ef      	beq.n	800a4da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4fa:	4b27      	ldr	r3, [pc, #156]	@ (800a598 <xPortStartScheduler+0x138>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f1c3 0307 	rsb	r3, r3, #7
 800a502:	2b04      	cmp	r3, #4
 800a504:	d00b      	beq.n	800a51e <xPortStartScheduler+0xbe>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60bb      	str	r3, [r7, #8]
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	e7fd      	b.n	800a51a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a51e:	4b1e      	ldr	r3, [pc, #120]	@ (800a598 <xPortStartScheduler+0x138>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	021b      	lsls	r3, r3, #8
 800a524:	4a1c      	ldr	r2, [pc, #112]	@ (800a598 <xPortStartScheduler+0x138>)
 800a526:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a528:	4b1b      	ldr	r3, [pc, #108]	@ (800a598 <xPortStartScheduler+0x138>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a530:	4a19      	ldr	r2, [pc, #100]	@ (800a598 <xPortStartScheduler+0x138>)
 800a532:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	b2da      	uxtb	r2, r3
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a53c:	4b17      	ldr	r3, [pc, #92]	@ (800a59c <xPortStartScheduler+0x13c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a16      	ldr	r2, [pc, #88]	@ (800a59c <xPortStartScheduler+0x13c>)
 800a542:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a546:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a548:	4b14      	ldr	r3, [pc, #80]	@ (800a59c <xPortStartScheduler+0x13c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a13      	ldr	r2, [pc, #76]	@ (800a59c <xPortStartScheduler+0x13c>)
 800a54e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a552:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a554:	f000 f8da 	bl	800a70c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a558:	4b11      	ldr	r3, [pc, #68]	@ (800a5a0 <xPortStartScheduler+0x140>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a55e:	f000 f8f9 	bl	800a754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a562:	4b10      	ldr	r3, [pc, #64]	@ (800a5a4 <xPortStartScheduler+0x144>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a0f      	ldr	r2, [pc, #60]	@ (800a5a4 <xPortStartScheduler+0x144>)
 800a568:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a56c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a56e:	f7ff ff63 	bl	800a438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a572:	f7ff f813 	bl	800959c <vTaskSwitchContext>
	prvTaskExitError();
 800a576:	f7ff ff19 	bl	800a3ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a57a:	2300      	movs	r3, #0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3718      	adds	r7, #24
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	e000ed00 	.word	0xe000ed00
 800a588:	410fc271 	.word	0x410fc271
 800a58c:	410fc270 	.word	0x410fc270
 800a590:	e000e400 	.word	0xe000e400
 800a594:	20009e2c 	.word	0x20009e2c
 800a598:	20009e30 	.word	0x20009e30
 800a59c:	e000ed20 	.word	0xe000ed20
 800a5a0:	20000030 	.word	0x20000030
 800a5a4:	e000ef34 	.word	0xe000ef34

0800a5a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	607b      	str	r3, [r7, #4]
}
 800a5c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5c2:	4b10      	ldr	r3, [pc, #64]	@ (800a604 <vPortEnterCritical+0x5c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	4a0e      	ldr	r2, [pc, #56]	@ (800a604 <vPortEnterCritical+0x5c>)
 800a5ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5cc:	4b0d      	ldr	r3, [pc, #52]	@ (800a604 <vPortEnterCritical+0x5c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d110      	bne.n	800a5f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a608 <vPortEnterCritical+0x60>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00b      	beq.n	800a5f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	603b      	str	r3, [r7, #0]
}
 800a5f0:	bf00      	nop
 800a5f2:	bf00      	nop
 800a5f4:	e7fd      	b.n	800a5f2 <vPortEnterCritical+0x4a>
	}
}
 800a5f6:	bf00      	nop
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	20000030 	.word	0x20000030
 800a608:	e000ed04 	.word	0xe000ed04

0800a60c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a612:	4b12      	ldr	r3, [pc, #72]	@ (800a65c <vPortExitCritical+0x50>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10b      	bne.n	800a632 <vPortExitCritical+0x26>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	607b      	str	r3, [r7, #4]
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	e7fd      	b.n	800a62e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a632:	4b0a      	ldr	r3, [pc, #40]	@ (800a65c <vPortExitCritical+0x50>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	3b01      	subs	r3, #1
 800a638:	4a08      	ldr	r2, [pc, #32]	@ (800a65c <vPortExitCritical+0x50>)
 800a63a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a63c:	4b07      	ldr	r3, [pc, #28]	@ (800a65c <vPortExitCritical+0x50>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d105      	bne.n	800a650 <vPortExitCritical+0x44>
 800a644:	2300      	movs	r3, #0
 800a646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	f383 8811 	msr	BASEPRI, r3
}
 800a64e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	20000030 	.word	0x20000030

0800a660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a660:	f3ef 8009 	mrs	r0, PSP
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	4b15      	ldr	r3, [pc, #84]	@ (800a6c0 <pxCurrentTCBConst>)
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	f01e 0f10 	tst.w	lr, #16
 800a670:	bf08      	it	eq
 800a672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67a:	6010      	str	r0, [r2, #0]
 800a67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a680:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a684:	f380 8811 	msr	BASEPRI, r0
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f7fe ff84 	bl	800959c <vTaskSwitchContext>
 800a694:	f04f 0000 	mov.w	r0, #0
 800a698:	f380 8811 	msr	BASEPRI, r0
 800a69c:	bc09      	pop	{r0, r3}
 800a69e:	6819      	ldr	r1, [r3, #0]
 800a6a0:	6808      	ldr	r0, [r1, #0]
 800a6a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a6:	f01e 0f10 	tst.w	lr, #16
 800a6aa:	bf08      	it	eq
 800a6ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6b0:	f380 8809 	msr	PSP, r0
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	f3af 8000 	nop.w

0800a6c0 <pxCurrentTCBConst>:
 800a6c0:	20009800 	.word	0x20009800
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop

0800a6c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	607b      	str	r3, [r7, #4]
}
 800a6e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6e2:	f7fe fea1 	bl	8009428 <xTaskIncrementTick>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6ec:	4b06      	ldr	r3, [pc, #24]	@ (800a708 <xPortSysTickHandler+0x40>)
 800a6ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	f383 8811 	msr	BASEPRI, r3
}
 800a6fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a700:	bf00      	nop
 800a702:	3708      	adds	r7, #8
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	e000ed04 	.word	0xe000ed04

0800a70c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a710:	4b0b      	ldr	r3, [pc, #44]	@ (800a740 <vPortSetupTimerInterrupt+0x34>)
 800a712:	2200      	movs	r2, #0
 800a714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a716:	4b0b      	ldr	r3, [pc, #44]	@ (800a744 <vPortSetupTimerInterrupt+0x38>)
 800a718:	2200      	movs	r2, #0
 800a71a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a71c:	4b0a      	ldr	r3, [pc, #40]	@ (800a748 <vPortSetupTimerInterrupt+0x3c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a0a      	ldr	r2, [pc, #40]	@ (800a74c <vPortSetupTimerInterrupt+0x40>)
 800a722:	fba2 2303 	umull	r2, r3, r2, r3
 800a726:	099b      	lsrs	r3, r3, #6
 800a728:	4a09      	ldr	r2, [pc, #36]	@ (800a750 <vPortSetupTimerInterrupt+0x44>)
 800a72a:	3b01      	subs	r3, #1
 800a72c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a72e:	4b04      	ldr	r3, [pc, #16]	@ (800a740 <vPortSetupTimerInterrupt+0x34>)
 800a730:	2207      	movs	r2, #7
 800a732:	601a      	str	r2, [r3, #0]
}
 800a734:	bf00      	nop
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	e000e010 	.word	0xe000e010
 800a744:	e000e018 	.word	0xe000e018
 800a748:	20000024 	.word	0x20000024
 800a74c:	10624dd3 	.word	0x10624dd3
 800a750:	e000e014 	.word	0xe000e014

0800a754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a754:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a764 <vPortEnableVFP+0x10>
 800a758:	6801      	ldr	r1, [r0, #0]
 800a75a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a75e:	6001      	str	r1, [r0, #0]
 800a760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a762:	bf00      	nop
 800a764:	e000ed88 	.word	0xe000ed88

0800a768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a76e:	f3ef 8305 	mrs	r3, IPSR
 800a772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b0f      	cmp	r3, #15
 800a778:	d915      	bls.n	800a7a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a77a:	4a18      	ldr	r2, [pc, #96]	@ (800a7dc <vPortValidateInterruptPriority+0x74>)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	4413      	add	r3, r2
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a784:	4b16      	ldr	r3, [pc, #88]	@ (800a7e0 <vPortValidateInterruptPriority+0x78>)
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	7afa      	ldrb	r2, [r7, #11]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d20b      	bcs.n	800a7a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	607b      	str	r3, [r7, #4]
}
 800a7a0:	bf00      	nop
 800a7a2:	bf00      	nop
 800a7a4:	e7fd      	b.n	800a7a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a7e4 <vPortValidateInterruptPriority+0x7c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a7ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a7e8 <vPortValidateInterruptPriority+0x80>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d90b      	bls.n	800a7ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a7b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ba:	f383 8811 	msr	BASEPRI, r3
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	603b      	str	r3, [r7, #0]
}
 800a7c8:	bf00      	nop
 800a7ca:	bf00      	nop
 800a7cc:	e7fd      	b.n	800a7ca <vPortValidateInterruptPriority+0x62>
	}
 800a7ce:	bf00      	nop
 800a7d0:	3714      	adds	r7, #20
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	e000e3f0 	.word	0xe000e3f0
 800a7e0:	20009e2c 	.word	0x20009e2c
 800a7e4:	e000ed0c 	.word	0xe000ed0c
 800a7e8:	20009e30 	.word	0x20009e30

0800a7ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08a      	sub	sp, #40	@ 0x28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7f8:	f7fe fd5a 	bl	80092b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7fc:	4b5c      	ldr	r3, [pc, #368]	@ (800a970 <pvPortMalloc+0x184>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a804:	f000 f924 	bl	800aa50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a808:	4b5a      	ldr	r3, [pc, #360]	@ (800a974 <pvPortMalloc+0x188>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4013      	ands	r3, r2
 800a810:	2b00      	cmp	r3, #0
 800a812:	f040 8095 	bne.w	800a940 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d01e      	beq.n	800a85a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a81c:	2208      	movs	r2, #8
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4413      	add	r3, r2
 800a822:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d015      	beq.n	800a85a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f023 0307 	bic.w	r3, r3, #7
 800a834:	3308      	adds	r3, #8
 800a836:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f003 0307 	and.w	r3, r3, #7
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00b      	beq.n	800a85a <pvPortMalloc+0x6e>
	__asm volatile
 800a842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a846:	f383 8811 	msr	BASEPRI, r3
 800a84a:	f3bf 8f6f 	isb	sy
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	617b      	str	r3, [r7, #20]
}
 800a854:	bf00      	nop
 800a856:	bf00      	nop
 800a858:	e7fd      	b.n	800a856 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d06f      	beq.n	800a940 <pvPortMalloc+0x154>
 800a860:	4b45      	ldr	r3, [pc, #276]	@ (800a978 <pvPortMalloc+0x18c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	429a      	cmp	r2, r3
 800a868:	d86a      	bhi.n	800a940 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a86a:	4b44      	ldr	r3, [pc, #272]	@ (800a97c <pvPortMalloc+0x190>)
 800a86c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a86e:	4b43      	ldr	r3, [pc, #268]	@ (800a97c <pvPortMalloc+0x190>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a874:	e004      	b.n	800a880 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a878:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	429a      	cmp	r2, r3
 800a888:	d903      	bls.n	800a892 <pvPortMalloc+0xa6>
 800a88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1f1      	bne.n	800a876 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a892:	4b37      	ldr	r3, [pc, #220]	@ (800a970 <pvPortMalloc+0x184>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a898:	429a      	cmp	r2, r3
 800a89a:	d051      	beq.n	800a940 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2208      	movs	r2, #8
 800a8a2:	4413      	add	r3, r2
 800a8a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b0:	685a      	ldr	r2, [r3, #4]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	1ad2      	subs	r2, r2, r3
 800a8b6:	2308      	movs	r3, #8
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d920      	bls.n	800a900 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8c6:	69bb      	ldr	r3, [r7, #24]
 800a8c8:	f003 0307 	and.w	r3, r3, #7
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00b      	beq.n	800a8e8 <pvPortMalloc+0xfc>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	613b      	str	r3, [r7, #16]
}
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
 800a8e6:	e7fd      	b.n	800a8e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	685a      	ldr	r2, [r3, #4]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	1ad2      	subs	r2, r2, r3
 800a8f0:	69bb      	ldr	r3, [r7, #24]
 800a8f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8fa:	69b8      	ldr	r0, [r7, #24]
 800a8fc:	f000 f90a 	bl	800ab14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a900:	4b1d      	ldr	r3, [pc, #116]	@ (800a978 <pvPortMalloc+0x18c>)
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	4a1b      	ldr	r2, [pc, #108]	@ (800a978 <pvPortMalloc+0x18c>)
 800a90c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a90e:	4b1a      	ldr	r3, [pc, #104]	@ (800a978 <pvPortMalloc+0x18c>)
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	4b1b      	ldr	r3, [pc, #108]	@ (800a980 <pvPortMalloc+0x194>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	429a      	cmp	r2, r3
 800a918:	d203      	bcs.n	800a922 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a91a:	4b17      	ldr	r3, [pc, #92]	@ (800a978 <pvPortMalloc+0x18c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a18      	ldr	r2, [pc, #96]	@ (800a980 <pvPortMalloc+0x194>)
 800a920:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	4b13      	ldr	r3, [pc, #76]	@ (800a974 <pvPortMalloc+0x188>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	431a      	orrs	r2, r3
 800a92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a932:	2200      	movs	r2, #0
 800a934:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a936:	4b13      	ldr	r3, [pc, #76]	@ (800a984 <pvPortMalloc+0x198>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	3301      	adds	r3, #1
 800a93c:	4a11      	ldr	r2, [pc, #68]	@ (800a984 <pvPortMalloc+0x198>)
 800a93e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a940:	f7fe fcc4 	bl	80092cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	f003 0307 	and.w	r3, r3, #7
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00b      	beq.n	800a966 <pvPortMalloc+0x17a>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	60fb      	str	r3, [r7, #12]
}
 800a960:	bf00      	nop
 800a962:	bf00      	nop
 800a964:	e7fd      	b.n	800a962 <pvPortMalloc+0x176>
	return pvReturn;
 800a966:	69fb      	ldr	r3, [r7, #28]
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3728      	adds	r7, #40	@ 0x28
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	2000da3c 	.word	0x2000da3c
 800a974:	2000da50 	.word	0x2000da50
 800a978:	2000da40 	.word	0x2000da40
 800a97c:	2000da34 	.word	0x2000da34
 800a980:	2000da44 	.word	0x2000da44
 800a984:	2000da48 	.word	0x2000da48

0800a988 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b086      	sub	sp, #24
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d04f      	beq.n	800aa3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a99a:	2308      	movs	r3, #8
 800a99c:	425b      	negs	r3, r3
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	4b25      	ldr	r3, [pc, #148]	@ (800aa44 <vPortFree+0xbc>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10b      	bne.n	800a9ce <vPortFree+0x46>
	__asm volatile
 800a9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ba:	f383 8811 	msr	BASEPRI, r3
 800a9be:	f3bf 8f6f 	isb	sy
 800a9c2:	f3bf 8f4f 	dsb	sy
 800a9c6:	60fb      	str	r3, [r7, #12]
}
 800a9c8:	bf00      	nop
 800a9ca:	bf00      	nop
 800a9cc:	e7fd      	b.n	800a9ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00b      	beq.n	800a9ee <vPortFree+0x66>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	60bb      	str	r3, [r7, #8]
}
 800a9e8:	bf00      	nop
 800a9ea:	bf00      	nop
 800a9ec:	e7fd      	b.n	800a9ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	4b14      	ldr	r3, [pc, #80]	@ (800aa44 <vPortFree+0xbc>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d01e      	beq.n	800aa3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d11a      	bne.n	800aa3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	685a      	ldr	r2, [r3, #4]
 800aa08:	4b0e      	ldr	r3, [pc, #56]	@ (800aa44 <vPortFree+0xbc>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	43db      	mvns	r3, r3
 800aa0e:	401a      	ands	r2, r3
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa14:	f7fe fc4c 	bl	80092b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa48 <vPortFree+0xc0>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4413      	add	r3, r2
 800aa22:	4a09      	ldr	r2, [pc, #36]	@ (800aa48 <vPortFree+0xc0>)
 800aa24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa26:	6938      	ldr	r0, [r7, #16]
 800aa28:	f000 f874 	bl	800ab14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa2c:	4b07      	ldr	r3, [pc, #28]	@ (800aa4c <vPortFree+0xc4>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3301      	adds	r3, #1
 800aa32:	4a06      	ldr	r2, [pc, #24]	@ (800aa4c <vPortFree+0xc4>)
 800aa34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa36:	f7fe fc49 	bl	80092cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa3a:	bf00      	nop
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	2000da50 	.word	0x2000da50
 800aa48:	2000da40 	.word	0x2000da40
 800aa4c:	2000da4c 	.word	0x2000da4c

0800aa50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800aa5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa5c:	4b27      	ldr	r3, [pc, #156]	@ (800aafc <prvHeapInit+0xac>)
 800aa5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00c      	beq.n	800aa84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	3307      	adds	r3, #7
 800aa6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f023 0307 	bic.w	r3, r3, #7
 800aa76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	4a1f      	ldr	r2, [pc, #124]	@ (800aafc <prvHeapInit+0xac>)
 800aa80:	4413      	add	r3, r2
 800aa82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa88:	4a1d      	ldr	r2, [pc, #116]	@ (800ab00 <prvHeapInit+0xb0>)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa8e:	4b1c      	ldr	r3, [pc, #112]	@ (800ab00 <prvHeapInit+0xb0>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	68ba      	ldr	r2, [r7, #8]
 800aa98:	4413      	add	r3, r2
 800aa9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa9c:	2208      	movs	r2, #8
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	1a9b      	subs	r3, r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f023 0307 	bic.w	r3, r3, #7
 800aaaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4a15      	ldr	r2, [pc, #84]	@ (800ab04 <prvHeapInit+0xb4>)
 800aab0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aab2:	4b14      	ldr	r3, [pc, #80]	@ (800ab04 <prvHeapInit+0xb4>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2200      	movs	r2, #0
 800aab8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aaba:	4b12      	ldr	r3, [pc, #72]	@ (800ab04 <prvHeapInit+0xb4>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	1ad2      	subs	r2, r2, r3
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aad0:	4b0c      	ldr	r3, [pc, #48]	@ (800ab04 <prvHeapInit+0xb4>)
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	4a0a      	ldr	r2, [pc, #40]	@ (800ab08 <prvHeapInit+0xb8>)
 800aade:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	4a09      	ldr	r2, [pc, #36]	@ (800ab0c <prvHeapInit+0xbc>)
 800aae6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aae8:	4b09      	ldr	r3, [pc, #36]	@ (800ab10 <prvHeapInit+0xc0>)
 800aaea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800aaee:	601a      	str	r2, [r3, #0]
}
 800aaf0:	bf00      	nop
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	20009e34 	.word	0x20009e34
 800ab00:	2000da34 	.word	0x2000da34
 800ab04:	2000da3c 	.word	0x2000da3c
 800ab08:	2000da44 	.word	0x2000da44
 800ab0c:	2000da40 	.word	0x2000da40
 800ab10:	2000da50 	.word	0x2000da50

0800ab14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab1c:	4b28      	ldr	r3, [pc, #160]	@ (800abc0 <prvInsertBlockIntoFreeList+0xac>)
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	e002      	b.n	800ab28 <prvInsertBlockIntoFreeList+0x14>
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	60fb      	str	r3, [r7, #12]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d8f7      	bhi.n	800ab22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d108      	bne.n	800ab56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	685a      	ldr	r2, [r3, #4]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	441a      	add	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	441a      	add	r2, r3
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d118      	bne.n	800ab9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	4b15      	ldr	r3, [pc, #84]	@ (800abc4 <prvInsertBlockIntoFreeList+0xb0>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d00d      	beq.n	800ab92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	685a      	ldr	r2, [r3, #4]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	441a      	add	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	e008      	b.n	800aba4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab92:	4b0c      	ldr	r3, [pc, #48]	@ (800abc4 <prvInsertBlockIntoFreeList+0xb0>)
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	e003      	b.n	800aba4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d002      	beq.n	800abb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abb2:	bf00      	nop
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	2000da34 	.word	0x2000da34
 800abc4:	2000da3c 	.word	0x2000da3c

0800abc8 <rcl_get_zero_initialized_publisher>:
 800abc8:	4b01      	ldr	r3, [pc, #4]	@ (800abd0 <rcl_get_zero_initialized_publisher+0x8>)
 800abca:	6818      	ldr	r0, [r3, #0]
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	0801d0fc 	.word	0x0801d0fc

0800abd4 <rcl_publisher_init>:
 800abd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd8:	b088      	sub	sp, #32
 800abda:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800abdc:	2d00      	cmp	r5, #0
 800abde:	d06a      	beq.n	800acb6 <rcl_publisher_init+0xe2>
 800abe0:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800abe4:	4604      	mov	r4, r0
 800abe6:	4648      	mov	r0, r9
 800abe8:	460e      	mov	r6, r1
 800abea:	4690      	mov	r8, r2
 800abec:	461f      	mov	r7, r3
 800abee:	f001 f83b 	bl	800bc68 <rcutils_allocator_is_valid>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	d05f      	beq.n	800acb6 <rcl_publisher_init+0xe2>
 800abf6:	2c00      	cmp	r4, #0
 800abf8:	d05d      	beq.n	800acb6 <rcl_publisher_init+0xe2>
 800abfa:	f8d4 a000 	ldr.w	sl, [r4]
 800abfe:	f1ba 0f00 	cmp.w	sl, #0
 800ac02:	d004      	beq.n	800ac0e <rcl_publisher_init+0x3a>
 800ac04:	2764      	movs	r7, #100	@ 0x64
 800ac06:	4638      	mov	r0, r7
 800ac08:	b008      	add	sp, #32
 800ac0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f00a f824 	bl	8014c5c <rcl_node_is_valid>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d053      	beq.n	800acc0 <rcl_publisher_init+0xec>
 800ac18:	f1b8 0f00 	cmp.w	r8, #0
 800ac1c:	d04b      	beq.n	800acb6 <rcl_publisher_init+0xe2>
 800ac1e:	2f00      	cmp	r7, #0
 800ac20:	d049      	beq.n	800acb6 <rcl_publisher_init+0xe2>
 800ac22:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800ac26:	aa07      	add	r2, sp, #28
 800ac28:	9205      	str	r2, [sp, #20]
 800ac2a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800ac2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac32:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ac36:	f8cd a01c 	str.w	sl, [sp, #28]
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ac40:	4630      	mov	r0, r6
 800ac42:	f00a f89b 	bl	8014d7c <rcl_node_resolve_name>
 800ac46:	4607      	mov	r7, r0
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d150      	bne.n	800acee <rcl_publisher_init+0x11a>
 800ac4c:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	@ 0x5c
 800ac50:	21c8      	movs	r1, #200	@ 0xc8
 800ac52:	2001      	movs	r0, #1
 800ac54:	4798      	blx	r3
 800ac56:	6020      	str	r0, [r4, #0]
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d04e      	beq.n	800acfa <rcl_publisher_init+0x126>
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f00a f81f 	bl	8014ca0 <rcl_node_get_rmw_handle>
 800ac62:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	9a07      	ldr	r2, [sp, #28]
 800ac6a:	6827      	ldr	r7, [r4, #0]
 800ac6c:	462b      	mov	r3, r5
 800ac6e:	4641      	mov	r1, r8
 800ac70:	f001 f95e 	bl	800bf30 <rmw_create_publisher>
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800ac7a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ac7e:	b370      	cbz	r0, 800acde <rcl_publisher_init+0x10a>
 800ac80:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ac84:	f001 fa30 	bl	800c0e8 <rmw_publisher_get_actual_qos>
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	b9d0      	cbnz	r0, 800acc4 <rcl_publisher_init+0xf0>
 800ac8e:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800ac92:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800ac96:	4629      	mov	r1, r5
 800ac98:	2270      	movs	r2, #112	@ 0x70
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f011 fadf 	bl	801c25e <memcpy>
 800aca0:	6832      	ldr	r2, [r6, #0]
 800aca2:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800aca6:	9807      	ldr	r0, [sp, #28]
 800aca8:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800acaa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800acac:	4798      	blx	r3
 800acae:	4638      	mov	r0, r7
 800acb0:	b008      	add	sp, #32
 800acb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb6:	270b      	movs	r7, #11
 800acb8:	4638      	mov	r0, r7
 800acba:	b008      	add	sp, #32
 800acbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc0:	27c8      	movs	r7, #200	@ 0xc8
 800acc2:	e7a0      	b.n	800ac06 <rcl_publisher_init+0x32>
 800acc4:	b18b      	cbz	r3, 800acea <rcl_publisher_init+0x116>
 800acc6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800acca:	b142      	cbz	r2, 800acde <rcl_publisher_init+0x10a>
 800accc:	4630      	mov	r0, r6
 800acce:	f009 ffe7 	bl	8014ca0 <rcl_node_get_rmw_handle>
 800acd2:	6823      	ldr	r3, [r4, #0]
 800acd4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800acd8:	f001 fa14 	bl	800c104 <rmw_destroy_publisher>
 800acdc:	6823      	ldr	r3, [r4, #0]
 800acde:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ace0:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ace2:	4618      	mov	r0, r3
 800ace4:	4790      	blx	r2
 800ace6:	2300      	movs	r3, #0
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	2701      	movs	r7, #1
 800acec:	e7db      	b.n	800aca6 <rcl_publisher_init+0xd2>
 800acee:	2867      	cmp	r0, #103	@ 0x67
 800acf0:	d0d9      	beq.n	800aca6 <rcl_publisher_init+0xd2>
 800acf2:	2869      	cmp	r0, #105	@ 0x69
 800acf4:	d003      	beq.n	800acfe <rcl_publisher_init+0x12a>
 800acf6:	280a      	cmp	r0, #10
 800acf8:	d1f7      	bne.n	800acea <rcl_publisher_init+0x116>
 800acfa:	270a      	movs	r7, #10
 800acfc:	e7d3      	b.n	800aca6 <rcl_publisher_init+0xd2>
 800acfe:	2767      	movs	r7, #103	@ 0x67
 800ad00:	e7d1      	b.n	800aca6 <rcl_publisher_init+0xd2>
 800ad02:	bf00      	nop

0800ad04 <rcl_publisher_get_default_options>:
 800ad04:	b530      	push	{r4, r5, lr}
 800ad06:	4912      	ldr	r1, [pc, #72]	@ (800ad50 <rcl_publisher_get_default_options+0x4c>)
 800ad08:	b083      	sub	sp, #12
 800ad0a:	2250      	movs	r2, #80	@ 0x50
 800ad0c:	4604      	mov	r4, r0
 800ad0e:	f011 faa6 	bl	801c25e <memcpy>
 800ad12:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ad16:	f000 ff7b 	bl	800bc10 <rcutils_get_default_allocator>
 800ad1a:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800ad1e:	f001 f83f 	bl	800bda0 <rmw_get_default_publisher_options>
 800ad22:	2500      	movs	r5, #0
 800ad24:	f10d 0007 	add.w	r0, sp, #7
 800ad28:	f88d 5007 	strb.w	r5, [sp, #7]
 800ad2c:	f009 ffbe 	bl	8014cac <rcl_get_disable_loaned_message>
 800ad30:	b930      	cbnz	r0, 800ad40 <rcl_publisher_get_default_options+0x3c>
 800ad32:	f89d 5007 	ldrb.w	r5, [sp, #7]
 800ad36:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	b003      	add	sp, #12
 800ad3e:	bd30      	pop	{r4, r5, pc}
 800ad40:	f000 ffbe 	bl	800bcc0 <rcutils_reset_error>
 800ad44:	4620      	mov	r0, r4
 800ad46:	f884 506c 	strb.w	r5, [r4, #108]	@ 0x6c
 800ad4a:	b003      	add	sp, #12
 800ad4c:	bd30      	pop	{r4, r5, pc}
 800ad4e:	bf00      	nop
 800ad50:	0801d100 	.word	0x0801d100

0800ad54 <rcl_publish>:
 800ad54:	b308      	cbz	r0, 800ad9a <rcl_publish+0x46>
 800ad56:	6803      	ldr	r3, [r0, #0]
 800ad58:	b570      	push	{r4, r5, r6, lr}
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	b1c3      	cbz	r3, 800ad90 <rcl_publish+0x3c>
 800ad5e:	4616      	mov	r6, r2
 800ad60:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ad64:	b1a2      	cbz	r2, 800ad90 <rcl_publish+0x3c>
 800ad66:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ad6a:	460d      	mov	r5, r1
 800ad6c:	f009 fbc8 	bl	8014500 <rcl_context_is_valid>
 800ad70:	b160      	cbz	r0, 800ad8c <rcl_publish+0x38>
 800ad72:	6823      	ldr	r3, [r4, #0]
 800ad74:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ad78:	b150      	cbz	r0, 800ad90 <rcl_publish+0x3c>
 800ad7a:	b165      	cbz	r5, 800ad96 <rcl_publish+0x42>
 800ad7c:	4632      	mov	r2, r6
 800ad7e:	4629      	mov	r1, r5
 800ad80:	f001 f876 	bl	800be70 <rmw_publish>
 800ad84:	3800      	subs	r0, #0
 800ad86:	bf18      	it	ne
 800ad88:	2001      	movne	r0, #1
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	f000 ff7a 	bl	800bc84 <rcutils_error_is_set>
 800ad90:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
 800ad96:	200b      	movs	r0, #11
 800ad98:	bd70      	pop	{r4, r5, r6, pc}
 800ad9a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ad9e:	4770      	bx	lr

0800ada0 <rcl_publisher_is_valid>:
 800ada0:	b1b0      	cbz	r0, 800add0 <rcl_publisher_is_valid+0x30>
 800ada2:	6803      	ldr	r3, [r0, #0]
 800ada4:	b510      	push	{r4, lr}
 800ada6:	4604      	mov	r4, r0
 800ada8:	b183      	cbz	r3, 800adcc <rcl_publisher_is_valid+0x2c>
 800adaa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800adae:	b16a      	cbz	r2, 800adcc <rcl_publisher_is_valid+0x2c>
 800adb0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800adb4:	f009 fba4 	bl	8014500 <rcl_context_is_valid>
 800adb8:	b130      	cbz	r0, 800adc8 <rcl_publisher_is_valid+0x28>
 800adba:	6823      	ldr	r3, [r4, #0]
 800adbc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800adc0:	3800      	subs	r0, #0
 800adc2:	bf18      	it	ne
 800adc4:	2001      	movne	r0, #1
 800adc6:	bd10      	pop	{r4, pc}
 800adc8:	f000 ff5c 	bl	800bc84 <rcutils_error_is_set>
 800adcc:	2000      	movs	r0, #0
 800adce:	bd10      	pop	{r4, pc}
 800add0:	2000      	movs	r0, #0
 800add2:	4770      	bx	lr

0800add4 <rcl_publisher_is_valid_except_context>:
 800add4:	b130      	cbz	r0, 800ade4 <rcl_publisher_is_valid_except_context+0x10>
 800add6:	6800      	ldr	r0, [r0, #0]
 800add8:	b120      	cbz	r0, 800ade4 <rcl_publisher_is_valid_except_context+0x10>
 800adda:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800adde:	3800      	subs	r0, #0
 800ade0:	bf18      	it	ne
 800ade2:	2001      	movne	r0, #1
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop

0800ade8 <_rclc_check_for_new_data>:
 800ade8:	2800      	cmp	r0, #0
 800adea:	d046      	beq.n	800ae7a <_rclc_check_for_new_data+0x92>
 800adec:	b510      	push	{r4, lr}
 800adee:	7802      	ldrb	r2, [r0, #0]
 800adf0:	b084      	sub	sp, #16
 800adf2:	4603      	mov	r3, r0
 800adf4:	2a0a      	cmp	r2, #10
 800adf6:	d842      	bhi.n	800ae7e <_rclc_check_for_new_data+0x96>
 800adf8:	e8df f002 	tbb	[pc, r2]
 800adfc:	14181212 	.word	0x14181212
 800ae00:	06060614 	.word	0x06060614
 800ae04:	2e1a      	.short	0x2e1a
 800ae06:	16          	.byte	0x16
 800ae07:	00          	.byte	0x00
 800ae08:	6a0a      	ldr	r2, [r1, #32]
 800ae0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ae0c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ae10:	3a00      	subs	r2, #0
 800ae12:	bf18      	it	ne
 800ae14:	2201      	movne	r2, #1
 800ae16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	b004      	add	sp, #16
 800ae1e:	bd10      	pop	{r4, pc}
 800ae20:	680a      	ldr	r2, [r1, #0]
 800ae22:	e7f2      	b.n	800ae0a <_rclc_check_for_new_data+0x22>
 800ae24:	698a      	ldr	r2, [r1, #24]
 800ae26:	e7f0      	b.n	800ae0a <_rclc_check_for_new_data+0x22>
 800ae28:	688a      	ldr	r2, [r1, #8]
 800ae2a:	e7ee      	b.n	800ae0a <_rclc_check_for_new_data+0x22>
 800ae2c:	690a      	ldr	r2, [r1, #16]
 800ae2e:	e7ec      	b.n	800ae0a <_rclc_check_for_new_data+0x22>
 800ae30:	685c      	ldr	r4, [r3, #4]
 800ae32:	4608      	mov	r0, r1
 800ae34:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800ae38:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800ae3c:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800ae40:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800ae4a:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800ae4e:	f104 0110 	add.w	r1, r4, #16
 800ae52:	f00b fe39 	bl	8016ac8 <rcl_action_client_wait_set_get_entities_ready>
 800ae56:	e7e1      	b.n	800ae1c <_rclc_check_for_new_data+0x34>
 800ae58:	685c      	ldr	r4, [r3, #4]
 800ae5a:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800ae5e:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800ae62:	e9cd 3200 	strd	r3, r2, [sp]
 800ae66:	4608      	mov	r0, r1
 800ae68:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ae6c:	f104 0220 	add.w	r2, r4, #32
 800ae70:	f104 0110 	add.w	r1, r4, #16
 800ae74:	f00c f82a 	bl	8016ecc <rcl_action_server_wait_set_get_entities_ready>
 800ae78:	e7d0      	b.n	800ae1c <_rclc_check_for_new_data+0x34>
 800ae7a:	200b      	movs	r0, #11
 800ae7c:	4770      	bx	lr
 800ae7e:	2001      	movs	r0, #1
 800ae80:	e7cc      	b.n	800ae1c <_rclc_check_for_new_data+0x34>
 800ae82:	bf00      	nop

0800ae84 <_rclc_take_new_data>:
 800ae84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae86:	b099      	sub	sp, #100	@ 0x64
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	f000 8082 	beq.w	800af92 <_rclc_take_new_data+0x10e>
 800ae8e:	7803      	ldrb	r3, [r0, #0]
 800ae90:	4604      	mov	r4, r0
 800ae92:	2b0a      	cmp	r3, #10
 800ae94:	f200 815d 	bhi.w	800b152 <_rclc_take_new_data+0x2ce>
 800ae98:	e8df f003 	tbb	[pc, r3]
 800ae9c:	31531f1f 	.word	0x31531f1f
 800aea0:	06060631 	.word	0x06060631
 800aea4:	4555      	.short	0x4555
 800aea6:	53          	.byte	0x53
 800aea7:	00          	.byte	0x00
 800aea8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aeaa:	6a0b      	ldr	r3, [r1, #32]
 800aeac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d046      	beq.n	800af42 <_rclc_take_new_data+0xbe>
 800aeb4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800aeb8:	f104 0110 	add.w	r1, r4, #16
 800aebc:	f00a f80c 	bl	8014ed8 <rcl_take_request>
 800aec0:	4605      	mov	r5, r0
 800aec2:	2800      	cmp	r0, #0
 800aec4:	d03d      	beq.n	800af42 <_rclc_take_new_data+0xbe>
 800aec6:	f240 2359 	movw	r3, #601	@ 0x259
 800aeca:	4298      	cmp	r0, r3
 800aecc:	d128      	bne.n	800af20 <_rclc_take_new_data+0x9c>
 800aece:	2300      	movs	r3, #0
 800aed0:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800aed4:	4628      	mov	r0, r5
 800aed6:	b019      	add	sp, #100	@ 0x64
 800aed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeda:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aedc:	680b      	ldr	r3, [r1, #0]
 800aede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee2:	b373      	cbz	r3, 800af42 <_rclc_take_new_data+0xbe>
 800aee4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800aee8:	2300      	movs	r3, #0
 800aeea:	aa0a      	add	r2, sp, #40	@ 0x28
 800aeec:	f00a f9c8 	bl	8015280 <rcl_take>
 800aef0:	4605      	mov	r5, r0
 800aef2:	b330      	cbz	r0, 800af42 <_rclc_take_new_data+0xbe>
 800aef4:	f240 1391 	movw	r3, #401	@ 0x191
 800aef8:	4298      	cmp	r0, r3
 800aefa:	d0e8      	beq.n	800aece <_rclc_take_new_data+0x4a>
 800aefc:	e010      	b.n	800af20 <_rclc_take_new_data+0x9c>
 800aefe:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800af00:	698b      	ldr	r3, [r1, #24]
 800af02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af06:	b1e3      	cbz	r3, 800af42 <_rclc_take_new_data+0xbe>
 800af08:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800af0c:	f104 0110 	add.w	r1, r4, #16
 800af10:	f009 fa66 	bl	80143e0 <rcl_take_response>
 800af14:	4605      	mov	r5, r0
 800af16:	b1a0      	cbz	r0, 800af42 <_rclc_take_new_data+0xbe>
 800af18:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800af1c:	4298      	cmp	r0, r3
 800af1e:	d0d9      	beq.n	800aed4 <_rclc_take_new_data+0x50>
 800af20:	f000 fece 	bl	800bcc0 <rcutils_reset_error>
 800af24:	e7d6      	b.n	800aed4 <_rclc_take_new_data+0x50>
 800af26:	6840      	ldr	r0, [r0, #4]
 800af28:	f890 3020 	ldrb.w	r3, [r0, #32]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d15f      	bne.n	800aff0 <_rclc_take_new_data+0x16c>
 800af30:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800af34:	2b00      	cmp	r3, #0
 800af36:	d179      	bne.n	800b02c <_rclc_take_new_data+0x1a8>
 800af38:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f040 8096 	bne.w	800b06e <_rclc_take_new_data+0x1ea>
 800af42:	2500      	movs	r5, #0
 800af44:	e7c6      	b.n	800aed4 <_rclc_take_new_data+0x50>
 800af46:	6840      	ldr	r0, [r0, #4]
 800af48:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d138      	bne.n	800afc2 <_rclc_take_new_data+0x13e>
 800af50:	69c3      	ldr	r3, [r0, #28]
 800af52:	b113      	cbz	r3, 800af5a <_rclc_take_new_data+0xd6>
 800af54:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800af58:	b9fb      	cbnz	r3, 800af9a <_rclc_take_new_data+0x116>
 800af5a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f040 80a8 	bne.w	800b0b4 <_rclc_take_new_data+0x230>
 800af64:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d0ea      	beq.n	800af42 <_rclc_take_new_data+0xbe>
 800af6c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800af6e:	a90a      	add	r1, sp, #40	@ 0x28
 800af70:	3010      	adds	r0, #16
 800af72:	f00b fc8d 	bl	8016890 <rcl_action_take_result_response>
 800af76:	4605      	mov	r5, r0
 800af78:	2800      	cmp	r0, #0
 800af7a:	d1d1      	bne.n	800af20 <_rclc_take_new_data+0x9c>
 800af7c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af80:	6860      	ldr	r0, [r4, #4]
 800af82:	f00c f8cd 	bl	8017120 <rclc_action_find_handle_by_result_request_sequence_number>
 800af86:	2800      	cmp	r0, #0
 800af88:	d0db      	beq.n	800af42 <_rclc_take_new_data+0xbe>
 800af8a:	2301      	movs	r3, #1
 800af8c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800af90:	e7d7      	b.n	800af42 <_rclc_take_new_data+0xbe>
 800af92:	250b      	movs	r5, #11
 800af94:	4628      	mov	r0, r5
 800af96:	b019      	add	sp, #100	@ 0x64
 800af98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af9a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800af9c:	3010      	adds	r0, #16
 800af9e:	f00b fcf3 	bl	8016988 <rcl_action_take_feedback>
 800afa2:	4605      	mov	r5, r0
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d1bb      	bne.n	800af20 <_rclc_take_new_data+0x9c>
 800afa8:	6860      	ldr	r0, [r4, #4]
 800afaa:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800afac:	f00c f876 	bl	801709c <rclc_action_find_goal_handle_by_uuid>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2800      	cmp	r0, #0
 800afb4:	f000 80c4 	beq.w	800b140 <_rclc_take_new_data+0x2bc>
 800afb8:	2201      	movs	r2, #1
 800afba:	6860      	ldr	r0, [r4, #4]
 800afbc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800afc0:	e7cb      	b.n	800af5a <_rclc_take_new_data+0xd6>
 800afc2:	aa04      	add	r2, sp, #16
 800afc4:	a90a      	add	r1, sp, #40	@ 0x28
 800afc6:	3010      	adds	r0, #16
 800afc8:	f00b fbf2 	bl	80167b0 <rcl_action_take_goal_response>
 800afcc:	4605      	mov	r5, r0
 800afce:	2800      	cmp	r0, #0
 800afd0:	d1a6      	bne.n	800af20 <_rclc_take_new_data+0x9c>
 800afd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800afd6:	6860      	ldr	r0, [r4, #4]
 800afd8:	f00c f890 	bl	80170fc <rclc_action_find_handle_by_goal_request_sequence_number>
 800afdc:	b130      	cbz	r0, 800afec <_rclc_take_new_data+0x168>
 800afde:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800afe2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800afe6:	2201      	movs	r2, #1
 800afe8:	f880 2020 	strb.w	r2, [r0, #32]
 800afec:	6860      	ldr	r0, [r4, #4]
 800afee:	e7af      	b.n	800af50 <_rclc_take_new_data+0xcc>
 800aff0:	f00c f82e 	bl	8017050 <rclc_action_take_goal_handle>
 800aff4:	4606      	mov	r6, r0
 800aff6:	6860      	ldr	r0, [r4, #4]
 800aff8:	2e00      	cmp	r6, #0
 800affa:	d099      	beq.n	800af30 <_rclc_take_new_data+0xac>
 800affc:	6070      	str	r0, [r6, #4]
 800affe:	69f2      	ldr	r2, [r6, #28]
 800b000:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800b004:	3010      	adds	r0, #16
 800b006:	f00b fdef 	bl	8016be8 <rcl_action_take_goal_request>
 800b00a:	4605      	mov	r5, r0
 800b00c:	2800      	cmp	r0, #0
 800b00e:	f040 8099 	bne.w	800b144 <_rclc_take_new_data+0x2c0>
 800b012:	69f7      	ldr	r7, [r6, #28]
 800b014:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b016:	7235      	strb	r5, [r6, #8]
 800b018:	f8c6 0009 	str.w	r0, [r6, #9]
 800b01c:	f8c6 100d 	str.w	r1, [r6, #13]
 800b020:	6860      	ldr	r0, [r4, #4]
 800b022:	f8c6 2011 	str.w	r2, [r6, #17]
 800b026:	f8c6 3015 	str.w	r3, [r6, #21]
 800b02a:	e781      	b.n	800af30 <_rclc_take_new_data+0xac>
 800b02c:	aa04      	add	r2, sp, #16
 800b02e:	3010      	adds	r0, #16
 800b030:	a90a      	add	r1, sp, #40	@ 0x28
 800b032:	f00b fe49 	bl	8016cc8 <rcl_action_take_result_request>
 800b036:	4605      	mov	r5, r0
 800b038:	2800      	cmp	r0, #0
 800b03a:	f47f af71 	bne.w	800af20 <_rclc_take_new_data+0x9c>
 800b03e:	6860      	ldr	r0, [r4, #4]
 800b040:	a904      	add	r1, sp, #16
 800b042:	f00c f82b 	bl	801709c <rclc_action_find_goal_handle_by_uuid>
 800b046:	4607      	mov	r7, r0
 800b048:	b160      	cbz	r0, 800b064 <_rclc_take_new_data+0x1e0>
 800b04a:	ad0a      	add	r5, sp, #40	@ 0x28
 800b04c:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800b050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b052:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b054:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b058:	f04f 0c02 	mov.w	ip, #2
 800b05c:	e886 0003 	stmia.w	r6, {r0, r1}
 800b060:	f887 c008 	strb.w	ip, [r7, #8]
 800b064:	6860      	ldr	r0, [r4, #4]
 800b066:	2300      	movs	r3, #0
 800b068:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800b06c:	e764      	b.n	800af38 <_rclc_take_new_data+0xb4>
 800b06e:	ae04      	add	r6, sp, #16
 800b070:	aa0a      	add	r2, sp, #40	@ 0x28
 800b072:	3010      	adds	r0, #16
 800b074:	4631      	mov	r1, r6
 800b076:	f00b fe65 	bl	8016d44 <rcl_action_take_cancel_request>
 800b07a:	4605      	mov	r5, r0
 800b07c:	2800      	cmp	r0, #0
 800b07e:	f47f af4f 	bne.w	800af20 <_rclc_take_new_data+0x9c>
 800b082:	6860      	ldr	r0, [r4, #4]
 800b084:	a90a      	add	r1, sp, #40	@ 0x28
 800b086:	f00c f809 	bl	801709c <rclc_action_find_goal_handle_by_uuid>
 800b08a:	4605      	mov	r5, r0
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d04c      	beq.n	800b12a <_rclc_take_new_data+0x2a6>
 800b090:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800b094:	2101      	movs	r1, #1
 800b096:	f00b ff89 	bl	8016fac <rcl_action_transition_goal_state>
 800b09a:	2803      	cmp	r0, #3
 800b09c:	4607      	mov	r7, r0
 800b09e:	d139      	bne.n	800b114 <_rclc_take_new_data+0x290>
 800b0a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800b0a2:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 800b0a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0a8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b0ac:	e884 0003 	stmia.w	r4, {r0, r1}
 800b0b0:	722f      	strb	r7, [r5, #8]
 800b0b2:	e746      	b.n	800af42 <_rclc_take_new_data+0xbe>
 800b0b4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800b0b8:	a90a      	add	r1, sp, #40	@ 0x28
 800b0ba:	3010      	adds	r0, #16
 800b0bc:	f00b fc26 	bl	801690c <rcl_action_take_cancel_response>
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f47f af2c 	bne.w	800af20 <_rclc_take_new_data+0x9c>
 800b0c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b0cc:	6860      	ldr	r0, [r4, #4]
 800b0ce:	f00c f839 	bl	8017144 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800b0d2:	4606      	mov	r6, r0
 800b0d4:	6860      	ldr	r0, [r4, #4]
 800b0d6:	2e00      	cmp	r6, #0
 800b0d8:	f43f af44 	beq.w	800af64 <_rclc_take_new_data+0xe0>
 800b0dc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b0de:	2701      	movs	r7, #1
 800b0e0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f43f af3e 	beq.w	800af64 <_rclc_take_new_data+0xe0>
 800b0e8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800b0ea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800b0ee:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b0f2:	f00b ffd3 	bl	801709c <rclc_action_find_goal_handle_by_uuid>
 800b0f6:	b138      	cbz	r0, 800b108 <_rclc_take_new_data+0x284>
 800b0f8:	6860      	ldr	r0, [r4, #4]
 800b0fa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b0fc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800b100:	3501      	adds	r5, #1
 800b102:	42ab      	cmp	r3, r5
 800b104:	d8f0      	bhi.n	800b0e8 <_rclc_take_new_data+0x264>
 800b106:	e72d      	b.n	800af64 <_rclc_take_new_data+0xe0>
 800b108:	6860      	ldr	r0, [r4, #4]
 800b10a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b10c:	3501      	adds	r5, #1
 800b10e:	42ab      	cmp	r3, r5
 800b110:	d8ea      	bhi.n	800b0e8 <_rclc_take_new_data+0x264>
 800b112:	e727      	b.n	800af64 <_rclc_take_new_data+0xe0>
 800b114:	ab06      	add	r3, sp, #24
 800b116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b118:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b11c:	2103      	movs	r1, #3
 800b11e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b122:	6860      	ldr	r0, [r4, #4]
 800b124:	f00c f884 	bl	8017230 <rclc_action_server_goal_cancel_reject>
 800b128:	e70b      	b.n	800af42 <_rclc_take_new_data+0xbe>
 800b12a:	ab06      	add	r3, sp, #24
 800b12c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b12e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b132:	2102      	movs	r1, #2
 800b134:	e896 000c 	ldmia.w	r6, {r2, r3}
 800b138:	6860      	ldr	r0, [r4, #4]
 800b13a:	f00c f879 	bl	8017230 <rclc_action_server_goal_cancel_reject>
 800b13e:	e700      	b.n	800af42 <_rclc_take_new_data+0xbe>
 800b140:	6860      	ldr	r0, [r4, #4]
 800b142:	e70a      	b.n	800af5a <_rclc_take_new_data+0xd6>
 800b144:	6860      	ldr	r0, [r4, #4]
 800b146:	4631      	mov	r1, r6
 800b148:	f00b ff92 	bl	8017070 <rclc_action_remove_used_goal_handle>
 800b14c:	f000 fdb8 	bl	800bcc0 <rcutils_reset_error>
 800b150:	e6c0      	b.n	800aed4 <_rclc_take_new_data+0x50>
 800b152:	2501      	movs	r5, #1
 800b154:	e6be      	b.n	800aed4 <_rclc_take_new_data+0x50>
 800b156:	bf00      	nop

0800b158 <rclc_executor_trigger_any>:
 800b158:	4603      	mov	r3, r0
 800b15a:	b370      	cbz	r0, 800b1ba <rclc_executor_trigger_any+0x62>
 800b15c:	b379      	cbz	r1, 800b1be <rclc_executor_trigger_any+0x66>
 800b15e:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800b162:	2200      	movs	r2, #0
 800b164:	b350      	cbz	r0, 800b1bc <rclc_executor_trigger_any+0x64>
 800b166:	b430      	push	{r4, r5}
 800b168:	f893 c000 	ldrb.w	ip, [r3]
 800b16c:	f1bc 0f08 	cmp.w	ip, #8
 800b170:	d017      	beq.n	800b1a2 <rclc_executor_trigger_any+0x4a>
 800b172:	f1bc 0f09 	cmp.w	ip, #9
 800b176:	d00d      	beq.n	800b194 <rclc_executor_trigger_any+0x3c>
 800b178:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800b17c:	b940      	cbnz	r0, 800b190 <rclc_executor_trigger_any+0x38>
 800b17e:	3201      	adds	r2, #1
 800b180:	4291      	cmp	r1, r2
 800b182:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b186:	d003      	beq.n	800b190 <rclc_executor_trigger_any+0x38>
 800b188:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d1eb      	bne.n	800b168 <rclc_executor_trigger_any+0x10>
 800b190:	bc30      	pop	{r4, r5}
 800b192:	4770      	bx	lr
 800b194:	685c      	ldr	r4, [r3, #4]
 800b196:	6a25      	ldr	r5, [r4, #32]
 800b198:	2d00      	cmp	r5, #0
 800b19a:	d1f9      	bne.n	800b190 <rclc_executor_trigger_any+0x38>
 800b19c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800b1a0:	e7ec      	b.n	800b17c <rclc_executor_trigger_any+0x24>
 800b1a2:	685c      	ldr	r4, [r3, #4]
 800b1a4:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800b1a6:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800b1aa:	d1f1      	bne.n	800b190 <rclc_executor_trigger_any+0x38>
 800b1ac:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d1ed      	bne.n	800b190 <rclc_executor_trigger_any+0x38>
 800b1b4:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800b1b8:	e7e0      	b.n	800b17c <rclc_executor_trigger_any+0x24>
 800b1ba:	4770      	bx	lr
 800b1bc:	4770      	bx	lr
 800b1be:	4608      	mov	r0, r1
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop

0800b1c4 <_rclc_execute>:
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	f000 80dc 	beq.w	800b382 <_rclc_execute+0x1be>
 800b1ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1cc:	7843      	ldrb	r3, [r0, #1]
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	b123      	cbz	r3, 800b1de <_rclc_execute+0x1a>
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d01c      	beq.n	800b212 <_rclc_execute+0x4e>
 800b1d8:	2000      	movs	r0, #0
 800b1da:	b007      	add	sp, #28
 800b1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1de:	7803      	ldrb	r3, [r0, #0]
 800b1e0:	2b08      	cmp	r3, #8
 800b1e2:	f000 80a0 	beq.w	800b326 <_rclc_execute+0x162>
 800b1e6:	2b09      	cmp	r3, #9
 800b1e8:	d024      	beq.n	800b234 <_rclc_execute+0x70>
 800b1ea:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d0f2      	beq.n	800b1d8 <_rclc_execute+0x14>
 800b1f2:	2b0a      	cmp	r3, #10
 800b1f4:	f200 815a 	bhi.w	800b4ac <_rclc_execute+0x2e8>
 800b1f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b1fc:	008e006f 	.word	0x008e006f
 800b200:	006f007c 	.word	0x006f007c
 800b204:	00590073 	.word	0x00590073
 800b208:	00590059 	.word	0x00590059
 800b20c:	01580158 	.word	0x01580158
 800b210:	0079      	.short	0x0079
 800b212:	7803      	ldrb	r3, [r0, #0]
 800b214:	2b0a      	cmp	r3, #10
 800b216:	f200 8149 	bhi.w	800b4ac <_rclc_execute+0x2e8>
 800b21a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b21e:	00f9      	.short	0x00f9
 800b220:	006b007b 	.word	0x006b007b
 800b224:	0062005e 	.word	0x0062005e
 800b228:	00480048 	.word	0x00480048
 800b22c:	01000048 	.word	0x01000048
 800b230:	00680102 	.word	0x00680102
 800b234:	6840      	ldr	r0, [r0, #4]
 800b236:	6a02      	ldr	r2, [r0, #32]
 800b238:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800b23c:	2a00      	cmp	r2, #0
 800b23e:	f040 80f3 	bne.w	800b428 <_rclc_execute+0x264>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0c8      	beq.n	800b1d8 <_rclc_execute+0x14>
 800b246:	e003      	b.n	800b250 <_rclc_execute+0x8c>
 800b248:	6858      	ldr	r0, [r3, #4]
 800b24a:	f00b ff11 	bl	8017070 <rclc_action_remove_used_goal_handle>
 800b24e:	6860      	ldr	r0, [r4, #4]
 800b250:	f00b ff48 	bl	80170e4 <rclc_action_find_first_terminated_handle>
 800b254:	4603      	mov	r3, r0
 800b256:	4601      	mov	r1, r0
 800b258:	2800      	cmp	r0, #0
 800b25a:	d1f5      	bne.n	800b248 <_rclc_execute+0x84>
 800b25c:	6860      	ldr	r0, [r4, #4]
 800b25e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 800b262:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b266:	2b00      	cmp	r3, #0
 800b268:	f000 80eb 	beq.w	800b442 <_rclc_execute+0x27e>
 800b26c:	f241 0604 	movw	r6, #4100	@ 0x1004
 800b270:	2701      	movs	r7, #1
 800b272:	e007      	b.n	800b284 <_rclc_execute+0xc0>
 800b274:	4628      	mov	r0, r5
 800b276:	f00b ff8f 	bl	8017198 <rclc_action_server_response_goal_request>
 800b27a:	6860      	ldr	r0, [r4, #4]
 800b27c:	4629      	mov	r1, r5
 800b27e:	f00b fef7 	bl	8017070 <rclc_action_remove_used_goal_handle>
 800b282:	6860      	ldr	r0, [r4, #4]
 800b284:	2100      	movs	r1, #0
 800b286:	f00b ff21 	bl	80170cc <rclc_action_find_first_handle_by_status>
 800b28a:	4605      	mov	r5, r0
 800b28c:	2800      	cmp	r0, #0
 800b28e:	f000 80d5 	beq.w	800b43c <_rclc_execute+0x278>
 800b292:	6863      	ldr	r3, [r4, #4]
 800b294:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b296:	699b      	ldr	r3, [r3, #24]
 800b298:	4798      	blx	r3
 800b29a:	42b0      	cmp	r0, r6
 800b29c:	f04f 0100 	mov.w	r1, #0
 800b2a0:	d1e8      	bne.n	800b274 <_rclc_execute+0xb0>
 800b2a2:	2101      	movs	r1, #1
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	f00b ff77 	bl	8017198 <rclc_action_server_response_goal_request>
 800b2aa:	722f      	strb	r7, [r5, #8]
 800b2ac:	e7e9      	b.n	800b282 <_rclc_execute+0xbe>
 800b2ae:	2b06      	cmp	r3, #6
 800b2b0:	68a0      	ldr	r0, [r4, #8]
 800b2b2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800b2b4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800b2b6:	f000 80bb 	beq.w	800b430 <_rclc_execute+0x26c>
 800b2ba:	2b07      	cmp	r3, #7
 800b2bc:	f000 80f1 	beq.w	800b4a2 <_rclc_execute+0x2de>
 800b2c0:	47b0      	blx	r6
 800b2c2:	f104 0510 	add.w	r5, r4, #16
 800b2c6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b2c8:	6860      	ldr	r0, [r4, #4]
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	f009 fe54 	bl	8014f78 <rcl_send_response>
 800b2d0:	2802      	cmp	r0, #2
 800b2d2:	d117      	bne.n	800b304 <_rclc_execute+0x140>
 800b2d4:	f000 fcf4 	bl	800bcc0 <rcutils_reset_error>
 800b2d8:	e77e      	b.n	800b1d8 <_rclc_execute+0x14>
 800b2da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b2dc:	68a0      	ldr	r0, [r4, #8]
 800b2de:	4798      	blx	r3
 800b2e0:	e77a      	b.n	800b1d8 <_rclc_execute+0x14>
 800b2e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b2e4:	68a0      	ldr	r0, [r4, #8]
 800b2e6:	f104 0110 	add.w	r1, r4, #16
 800b2ea:	4798      	blx	r3
 800b2ec:	e774      	b.n	800b1d8 <_rclc_execute+0x14>
 800b2ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b2f0:	4798      	blx	r3
 800b2f2:	e771      	b.n	800b1d8 <_rclc_execute+0x14>
 800b2f4:	6860      	ldr	r0, [r4, #4]
 800b2f6:	f00a fb07 	bl	8015908 <rcl_timer_call>
 800b2fa:	f240 3321 	movw	r3, #801	@ 0x321
 800b2fe:	4298      	cmp	r0, r3
 800b300:	f43f af6a 	beq.w	800b1d8 <_rclc_execute+0x14>
 800b304:	2800      	cmp	r0, #0
 800b306:	f43f af68 	beq.w	800b1da <_rclc_execute+0x16>
 800b30a:	9005      	str	r0, [sp, #20]
 800b30c:	f000 fcd8 	bl	800bcc0 <rcutils_reset_error>
 800b310:	9805      	ldr	r0, [sp, #20]
 800b312:	e762      	b.n	800b1da <_rclc_execute+0x16>
 800b314:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800b318:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d0e4      	beq.n	800b2ea <_rclc_execute+0x126>
 800b320:	68a0      	ldr	r0, [r4, #8]
 800b322:	4798      	blx	r3
 800b324:	e758      	b.n	800b1d8 <_rclc_execute+0x14>
 800b326:	6840      	ldr	r0, [r0, #4]
 800b328:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b32a:	f033 437f 	bics.w	r3, r3, #4278190080	@ 0xff000000
 800b32e:	d107      	bne.n	800b340 <_rclc_execute+0x17c>
 800b330:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b334:	b923      	cbnz	r3, 800b340 <_rclc_execute+0x17c>
 800b336:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f43f af4c 	beq.w	800b1d8 <_rclc_execute+0x14>
 800b340:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800b344:	b303      	cbz	r3, 800b388 <_rclc_execute+0x1c4>
 800b346:	2600      	movs	r6, #0
 800b348:	2701      	movs	r7, #1
 800b34a:	e004      	b.n	800b356 <_rclc_execute+0x192>
 800b34c:	f00b fe5a 	bl	8017004 <rclc_action_send_result_request>
 800b350:	b990      	cbnz	r0, 800b378 <_rclc_execute+0x1b4>
 800b352:	722f      	strb	r7, [r5, #8]
 800b354:	6860      	ldr	r0, [r4, #4]
 800b356:	f00b ff07 	bl	8017168 <rclc_action_find_first_handle_with_goal_response>
 800b35a:	4605      	mov	r5, r0
 800b35c:	b198      	cbz	r0, 800b386 <_rclc_execute+0x1c2>
 800b35e:	6863      	ldr	r3, [r4, #4]
 800b360:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800b368:	f885 6020 	strb.w	r6, [r5, #32]
 800b36c:	4798      	blx	r3
 800b36e:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800b372:	4628      	mov	r0, r5
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e9      	bne.n	800b34c <_rclc_execute+0x188>
 800b378:	6860      	ldr	r0, [r4, #4]
 800b37a:	4629      	mov	r1, r5
 800b37c:	f00b fe78 	bl	8017070 <rclc_action_remove_used_goal_handle>
 800b380:	e7e8      	b.n	800b354 <_rclc_execute+0x190>
 800b382:	200b      	movs	r0, #11
 800b384:	4770      	bx	lr
 800b386:	6860      	ldr	r0, [r4, #4]
 800b388:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b38c:	b18b      	cbz	r3, 800b3b2 <_rclc_execute+0x1ee>
 800b38e:	68c5      	ldr	r5, [r0, #12]
 800b390:	b32d      	cbz	r5, 800b3de <_rclc_execute+0x21a>
 800b392:	2600      	movs	r6, #0
 800b394:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800b398:	b143      	cbz	r3, 800b3ac <_rclc_execute+0x1e8>
 800b39a:	69c3      	ldr	r3, [r0, #28]
 800b39c:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800b3a0:	b123      	cbz	r3, 800b3ac <_rclc_execute+0x1e8>
 800b3a2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b3a4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	4798      	blx	r3
 800b3aa:	6860      	ldr	r0, [r4, #4]
 800b3ac:	682d      	ldr	r5, [r5, #0]
 800b3ae:	2d00      	cmp	r5, #0
 800b3b0:	d1f0      	bne.n	800b394 <_rclc_execute+0x1d0>
 800b3b2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b3b6:	b193      	cbz	r3, 800b3de <_rclc_execute+0x21a>
 800b3b8:	68c5      	ldr	r5, [r0, #12]
 800b3ba:	b185      	cbz	r5, 800b3de <_rclc_execute+0x21a>
 800b3bc:	2600      	movs	r6, #0
 800b3be:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800b3c2:	b14b      	cbz	r3, 800b3d8 <_rclc_execute+0x214>
 800b3c4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b3c6:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800b3ca:	b12b      	cbz	r3, 800b3d8 <_rclc_execute+0x214>
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b3d0:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800b3d4:	4798      	blx	r3
 800b3d6:	6860      	ldr	r0, [r4, #4]
 800b3d8:	682d      	ldr	r5, [r5, #0]
 800b3da:	2d00      	cmp	r5, #0
 800b3dc:	d1ef      	bne.n	800b3be <_rclc_execute+0x1fa>
 800b3de:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f43f aef8 	beq.w	800b1d8 <_rclc_execute+0x14>
 800b3e8:	2700      	movs	r7, #0
 800b3ea:	e00b      	b.n	800b404 <_rclc_execute+0x240>
 800b3ec:	6863      	ldr	r3, [r4, #4]
 800b3ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b3f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b3f2:	6a1e      	ldr	r6, [r3, #32]
 800b3f4:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800b3f8:	47b0      	blx	r6
 800b3fa:	6860      	ldr	r0, [r4, #4]
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	f00b fe37 	bl	8017070 <rclc_action_remove_used_goal_handle>
 800b402:	6860      	ldr	r0, [r4, #4]
 800b404:	f00b febc 	bl	8017180 <rclc_action_find_first_handle_with_result_response>
 800b408:	4605      	mov	r5, r0
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d1ee      	bne.n	800b3ec <_rclc_execute+0x228>
 800b40e:	e6e3      	b.n	800b1d8 <_rclc_execute+0x14>
 800b410:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800b414:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800b416:	2800      	cmp	r0, #0
 800b418:	f43f af61 	beq.w	800b2de <_rclc_execute+0x11a>
 800b41c:	e75e      	b.n	800b2dc <_rclc_execute+0x118>
 800b41e:	6840      	ldr	r0, [r0, #4]
 800b420:	e78e      	b.n	800b340 <_rclc_execute+0x17c>
 800b422:	6840      	ldr	r0, [r0, #4]
 800b424:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f43f af1a 	beq.w	800b262 <_rclc_execute+0x9e>
 800b42e:	e70f      	b.n	800b250 <_rclc_execute+0x8c>
 800b430:	f104 0510 	add.w	r5, r4, #16
 800b434:	460a      	mov	r2, r1
 800b436:	4629      	mov	r1, r5
 800b438:	47b0      	blx	r6
 800b43a:	e744      	b.n	800b2c6 <_rclc_execute+0x102>
 800b43c:	6860      	ldr	r0, [r4, #4]
 800b43e:	f880 5020 	strb.w	r5, [r0, #32]
 800b442:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800b446:	2b00      	cmp	r3, #0
 800b448:	f43f aec6 	beq.w	800b1d8 <_rclc_execute+0x14>
 800b44c:	68c5      	ldr	r5, [r0, #12]
 800b44e:	b325      	cbz	r5, 800b49a <_rclc_execute+0x2d6>
 800b450:	2602      	movs	r6, #2
 800b452:	e001      	b.n	800b458 <_rclc_execute+0x294>
 800b454:	682d      	ldr	r5, [r5, #0]
 800b456:	b305      	cbz	r5, 800b49a <_rclc_execute+0x2d6>
 800b458:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d1f9      	bne.n	800b454 <_rclc_execute+0x290>
 800b460:	69c3      	ldr	r3, [r0, #28]
 800b462:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b464:	4628      	mov	r0, r5
 800b466:	4798      	blx	r3
 800b468:	4603      	mov	r3, r0
 800b46a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800b46e:	4628      	mov	r0, r5
 800b470:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800b474:	b11b      	cbz	r3, 800b47e <_rclc_execute+0x2ba>
 800b476:	f00b feaf 	bl	80171d8 <rclc_action_server_goal_cancel_accept>
 800b47a:	6860      	ldr	r0, [r4, #4]
 800b47c:	e7ea      	b.n	800b454 <_rclc_execute+0x290>
 800b47e:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b480:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b484:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800b488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b48c:	6860      	ldr	r0, [r4, #4]
 800b48e:	2101      	movs	r1, #1
 800b490:	f00b fece 	bl	8017230 <rclc_action_server_goal_cancel_reject>
 800b494:	722e      	strb	r6, [r5, #8]
 800b496:	6860      	ldr	r0, [r4, #4]
 800b498:	e7dc      	b.n	800b454 <_rclc_execute+0x290>
 800b49a:	2300      	movs	r3, #0
 800b49c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800b4a0:	e69a      	b.n	800b1d8 <_rclc_execute+0x14>
 800b4a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b4a4:	47b0      	blx	r6
 800b4a6:	f104 0510 	add.w	r5, r4, #16
 800b4aa:	e70c      	b.n	800b2c6 <_rclc_execute+0x102>
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	e694      	b.n	800b1da <_rclc_execute+0x16>

0800b4b0 <rclc_executor_init>:
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d05a      	beq.n	800b56a <rclc_executor_init+0xba>
 800b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	b0b2      	sub	sp, #200	@ 0xc8
 800b4bc:	2900      	cmp	r1, #0
 800b4be:	d050      	beq.n	800b562 <rclc_executor_init+0xb2>
 800b4c0:	4604      	mov	r4, r0
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	4616      	mov	r6, r2
 800b4c6:	461f      	mov	r7, r3
 800b4c8:	f000 fbce 	bl	800bc68 <rcutils_allocator_is_valid>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d048      	beq.n	800b562 <rclc_executor_init+0xb2>
 800b4d0:	2e00      	cmp	r6, #0
 800b4d2:	d046      	beq.n	800b562 <rclc_executor_init+0xb2>
 800b4d4:	492a      	ldr	r1, [pc, #168]	@ (800b580 <rclc_executor_init+0xd0>)
 800b4d6:	2290      	movs	r2, #144	@ 0x90
 800b4d8:	a80e      	add	r0, sp, #56	@ 0x38
 800b4da:	f010 fec0 	bl	801c25e <memcpy>
 800b4de:	a90e      	add	r1, sp, #56	@ 0x38
 800b4e0:	2290      	movs	r2, #144	@ 0x90
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f010 febb 	bl	801c25e <memcpy>
 800b4e8:	6065      	str	r5, [r4, #4]
 800b4ea:	4668      	mov	r0, sp
 800b4ec:	60e6      	str	r6, [r4, #12]
 800b4ee:	466d      	mov	r5, sp
 800b4f0:	f00a fafc 	bl	8015aec <rcl_get_zero_initialized_wait_set>
 800b4f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4f6:	f104 0c18 	add.w	ip, r4, #24
 800b4fa:	f8d7 8000 	ldr.w	r8, [r7]
 800b4fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b50a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b50e:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800b578 <rclc_executor_init+0xc8>
 800b512:	682b      	ldr	r3, [r5, #0]
 800b514:	f8cc 3000 	str.w	r3, [ip]
 800b518:	6939      	ldr	r1, [r7, #16]
 800b51a:	6167      	str	r7, [r4, #20]
 800b51c:	ed84 7b1c 	vstr	d7, [r4, #112]	@ 0x70
 800b520:	01b0      	lsls	r0, r6, #6
 800b522:	47c0      	blx	r8
 800b524:	60a0      	str	r0, [r4, #8]
 800b526:	b310      	cbz	r0, 800b56e <rclc_executor_init+0xbe>
 800b528:	2500      	movs	r5, #0
 800b52a:	e000      	b.n	800b52e <rclc_executor_init+0x7e>
 800b52c:	68a0      	ldr	r0, [r4, #8]
 800b52e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 800b532:	4631      	mov	r1, r6
 800b534:	3501      	adds	r5, #1
 800b536:	f000 fa25 	bl	800b984 <rclc_executor_handle_init>
 800b53a:	42ae      	cmp	r6, r5
 800b53c:	d1f6      	bne.n	800b52c <rclc_executor_init+0x7c>
 800b53e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 800b542:	f000 fa15 	bl	800b970 <rclc_executor_handle_counters_zero_init>
 800b546:	490f      	ldr	r1, [pc, #60]	@ (800b584 <rclc_executor_init+0xd4>)
 800b548:	68a2      	ldr	r2, [r4, #8]
 800b54a:	2300      	movs	r3, #0
 800b54c:	e9c4 1320 	strd	r1, r3, [r4, #128]	@ 0x80
 800b550:	b12a      	cbz	r2, 800b55e <rclc_executor_init+0xae>
 800b552:	6962      	ldr	r2, [r4, #20]
 800b554:	b11a      	cbz	r2, 800b55e <rclc_executor_init+0xae>
 800b556:	68e2      	ldr	r2, [r4, #12]
 800b558:	b10a      	cbz	r2, 800b55e <rclc_executor_init+0xae>
 800b55a:	f884 3088 	strb.w	r3, [r4, #136]	@ 0x88
 800b55e:	2000      	movs	r0, #0
 800b560:	e000      	b.n	800b564 <rclc_executor_init+0xb4>
 800b562:	200b      	movs	r0, #11
 800b564:	b032      	add	sp, #200	@ 0xc8
 800b566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b56a:	200b      	movs	r0, #11
 800b56c:	4770      	bx	lr
 800b56e:	200a      	movs	r0, #10
 800b570:	e7f8      	b.n	800b564 <rclc_executor_init+0xb4>
 800b572:	bf00      	nop
 800b574:	f3af 8000 	nop.w
 800b578:	3b9aca00 	.word	0x3b9aca00
 800b57c:	00000000 	.word	0x00000000
 800b580:	0801d150 	.word	0x0801d150
 800b584:	0800b159 	.word	0x0800b159

0800b588 <rclc_executor_add_subscription>:
 800b588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800b58e:	b338      	cbz	r0, 800b5e0 <rclc_executor_add_subscription+0x58>
 800b590:	b331      	cbz	r1, 800b5e0 <rclc_executor_add_subscription+0x58>
 800b592:	b32a      	cbz	r2, 800b5e0 <rclc_executor_add_subscription+0x58>
 800b594:	b323      	cbz	r3, 800b5e0 <rclc_executor_add_subscription+0x58>
 800b596:	4604      	mov	r4, r0
 800b598:	e9d0 5003 	ldrd	r5, r0, [r0, #12]
 800b59c:	42a8      	cmp	r0, r5
 800b59e:	d301      	bcc.n	800b5a4 <rclc_executor_add_subscription+0x1c>
 800b5a0:	2001      	movs	r0, #1
 800b5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5a4:	68a6      	ldr	r6, [r4, #8]
 800b5a6:	0187      	lsls	r7, r0, #6
 800b5a8:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800b5ac:	2500      	movs	r5, #0
 800b5ae:	55f5      	strb	r5, [r6, r7]
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b5b6:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	f104 0518 	add.w	r5, r4, #24
 800b5c0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b5c4:	f88c e001 	strb.w	lr, [ip, #1]
 800b5c8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800b5cc:	6120      	str	r0, [r4, #16]
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f00a faa0 	bl	8015b14 <rcl_wait_set_is_valid>
 800b5d4:	b930      	cbnz	r0, 800b5e4 <rclc_executor_add_subscription+0x5c>
 800b5d6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b5d8:	3301      	adds	r3, #1
 800b5da:	2000      	movs	r0, #0
 800b5dc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800b5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e0:	200b      	movs	r0, #11
 800b5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	f00a fa9b 	bl	8015b20 <rcl_wait_set_fini>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d0f3      	beq.n	800b5d6 <rclc_executor_add_subscription+0x4e>
 800b5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5f0 <rclc_executor_add_timer>:
 800b5f0:	b300      	cbz	r0, 800b634 <rclc_executor_add_timer+0x44>
 800b5f2:	b1f9      	cbz	r1, 800b634 <rclc_executor_add_timer+0x44>
 800b5f4:	b538      	push	{r3, r4, r5, lr}
 800b5f6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	d301      	bcc.n	800b604 <rclc_executor_add_timer+0x14>
 800b600:	2001      	movs	r0, #1
 800b602:	bd38      	pop	{r3, r4, r5, pc}
 800b604:	6880      	ldr	r0, [r0, #8]
 800b606:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800b60a:	019d      	lsls	r5, r3, #6
 800b60c:	6051      	str	r1, [r2, #4]
 800b60e:	2102      	movs	r1, #2
 800b610:	5341      	strh	r1, [r0, r5]
 800b612:	3301      	adds	r3, #1
 800b614:	2000      	movs	r0, #0
 800b616:	2101      	movs	r1, #1
 800b618:	f104 0518 	add.w	r5, r4, #24
 800b61c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800b61e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800b620:	4628      	mov	r0, r5
 800b622:	6123      	str	r3, [r4, #16]
 800b624:	f00a fa76 	bl	8015b14 <rcl_wait_set_is_valid>
 800b628:	b930      	cbnz	r0, 800b638 <rclc_executor_add_timer+0x48>
 800b62a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800b62c:	3301      	adds	r3, #1
 800b62e:	2000      	movs	r0, #0
 800b630:	6523      	str	r3, [r4, #80]	@ 0x50
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	200b      	movs	r0, #11
 800b636:	4770      	bx	lr
 800b638:	4628      	mov	r0, r5
 800b63a:	f00a fa71 	bl	8015b20 <rcl_wait_set_fini>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d0f3      	beq.n	800b62a <rclc_executor_add_timer+0x3a>
 800b642:	bd38      	pop	{r3, r4, r5, pc}

0800b644 <rclc_executor_prepare>:
 800b644:	2800      	cmp	r0, #0
 800b646:	d044      	beq.n	800b6d2 <rclc_executor_prepare+0x8e>
 800b648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b64a:	f100 0518 	add.w	r5, r0, #24
 800b64e:	b09b      	sub	sp, #108	@ 0x6c
 800b650:	4604      	mov	r4, r0
 800b652:	4628      	mov	r0, r5
 800b654:	f00a fa5e 	bl	8015b14 <rcl_wait_set_is_valid>
 800b658:	b110      	cbz	r0, 800b660 <rclc_executor_prepare+0x1c>
 800b65a:	2000      	movs	r0, #0
 800b65c:	b01b      	add	sp, #108	@ 0x6c
 800b65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b660:	4628      	mov	r0, r5
 800b662:	f00a fa5d 	bl	8015b20 <rcl_wait_set_fini>
 800b666:	2800      	cmp	r0, #0
 800b668:	d130      	bne.n	800b6cc <rclc_executor_prepare+0x88>
 800b66a:	a80c      	add	r0, sp, #48	@ 0x30
 800b66c:	f00a fa3e 	bl	8015aec <rcl_get_zero_initialized_wait_set>
 800b670:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b674:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b678:	46ae      	mov	lr, r5
 800b67a:	6967      	ldr	r7, [r4, #20]
 800b67c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b680:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b684:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b688:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b68c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b690:	f8dc 3000 	ldr.w	r3, [ip]
 800b694:	f8ce 3000 	str.w	r3, [lr]
 800b698:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b69a:	ae04      	add	r6, sp, #16
 800b69c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	6862      	ldr	r2, [r4, #4]
 800b6a2:	6033      	str	r3, [r6, #0]
 800b6a4:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800b6a6:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 800b6a8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b6ac:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800b6b0:	e9cd 2100 	strd	r2, r1, [sp]
 800b6b4:	4628      	mov	r0, r5
 800b6b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6b8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800b6ba:	f00a fd61 	bl	8016180 <rcl_wait_set_init>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d0cc      	beq.n	800b65c <rclc_executor_prepare+0x18>
 800b6c2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b6c4:	f000 fafc 	bl	800bcc0 <rcutils_reset_error>
 800b6c8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b6ca:	e7c7      	b.n	800b65c <rclc_executor_prepare+0x18>
 800b6cc:	f000 faf8 	bl	800bcc0 <rcutils_reset_error>
 800b6d0:	e7cb      	b.n	800b66a <rclc_executor_prepare+0x26>
 800b6d2:	200b      	movs	r0, #11
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop

0800b6d8 <rclc_executor_spin_some>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	b083      	sub	sp, #12
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	f000 8091 	beq.w	800b806 <rclc_executor_spin_some+0x12e>
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	6840      	ldr	r0, [r0, #4]
 800b6e8:	4690      	mov	r8, r2
 800b6ea:	4699      	mov	r9, r3
 800b6ec:	f008 ff08 	bl	8014500 <rcl_context_is_valid>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d037      	beq.n	800b764 <rclc_executor_spin_some+0x8c>
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	f104 0718 	add.w	r7, r4, #24
 800b6fa:	f7ff ffa3 	bl	800b644 <rclc_executor_prepare>
 800b6fe:	4638      	mov	r0, r7
 800b700:	f00a faf2 	bl	8015ce8 <rcl_wait_set_clear>
 800b704:	4606      	mov	r6, r0
 800b706:	2800      	cmp	r0, #0
 800b708:	d177      	bne.n	800b7fa <rclc_executor_spin_some+0x122>
 800b70a:	68e3      	ldr	r3, [r4, #12]
 800b70c:	4605      	mov	r5, r0
 800b70e:	b1eb      	cbz	r3, 800b74c <rclc_executor_spin_some+0x74>
 800b710:	68a1      	ldr	r1, [r4, #8]
 800b712:	eb01 1c85 	add.w	ip, r1, r5, lsl #6
 800b716:	01aa      	lsls	r2, r5, #6
 800b718:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b71c:	b1b3      	cbz	r3, 800b74c <rclc_executor_spin_some+0x74>
 800b71e:	5c8b      	ldrb	r3, [r1, r2]
 800b720:	2b0a      	cmp	r3, #10
 800b722:	d81f      	bhi.n	800b764 <rclc_executor_spin_some+0x8c>
 800b724:	e8df f003 	tbb	[pc, r3]
 800b728:	253e3434 	.word	0x253e3434
 800b72c:	06060625 	.word	0x06060625
 800b730:	525d      	.short	0x525d
 800b732:	48          	.byte	0x48
 800b733:	00          	.byte	0x00
 800b734:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b738:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b73c:	4638      	mov	r0, r7
 800b73e:	f00a fe29 	bl	8016394 <rcl_wait_set_add_service>
 800b742:	b9f8      	cbnz	r0, 800b784 <rclc_executor_spin_some+0xac>
 800b744:	68e3      	ldr	r3, [r4, #12]
 800b746:	3501      	adds	r5, #1
 800b748:	42ab      	cmp	r3, r5
 800b74a:	d8e1      	bhi.n	800b710 <rclc_executor_spin_some+0x38>
 800b74c:	4642      	mov	r2, r8
 800b74e:	464b      	mov	r3, r9
 800b750:	4638      	mov	r0, r7
 800b752:	f00a fe4d 	bl	80163f0 <rcl_wait>
 800b756:	f894 5088 	ldrb.w	r5, [r4, #136]	@ 0x88
 800b75a:	2d00      	cmp	r5, #0
 800b75c:	f000 80ab 	beq.w	800b8b6 <rclc_executor_spin_some+0x1de>
 800b760:	2d01      	cmp	r5, #1
 800b762:	d055      	beq.n	800b810 <rclc_executor_spin_some+0x138>
 800b764:	f000 faac 	bl	800bcc0 <rcutils_reset_error>
 800b768:	2601      	movs	r6, #1
 800b76a:	4630      	mov	r0, r6
 800b76c:	b003      	add	sp, #12
 800b76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b772:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b776:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b77a:	4638      	mov	r0, r7
 800b77c:	f00a fdde 	bl	801633c <rcl_wait_set_add_client>
 800b780:	2800      	cmp	r0, #0
 800b782:	d0df      	beq.n	800b744 <rclc_executor_spin_some+0x6c>
 800b784:	9001      	str	r0, [sp, #4]
 800b786:	f000 fa9b 	bl	800bcc0 <rcutils_reset_error>
 800b78a:	9801      	ldr	r0, [sp, #4]
 800b78c:	4606      	mov	r6, r0
 800b78e:	e7ec      	b.n	800b76a <rclc_executor_spin_some+0x92>
 800b790:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b794:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b798:	4638      	mov	r0, r7
 800b79a:	f00a fa79 	bl	8015c90 <rcl_wait_set_add_subscription>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d0d0      	beq.n	800b744 <rclc_executor_spin_some+0x6c>
 800b7a2:	e7ef      	b.n	800b784 <rclc_executor_spin_some+0xac>
 800b7a4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b7a8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	f00a fd95 	bl	80162dc <rcl_wait_set_add_timer>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d0c6      	beq.n	800b744 <rclc_executor_spin_some+0x6c>
 800b7b6:	e7e5      	b.n	800b784 <rclc_executor_spin_some+0xac>
 800b7b8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b7bc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f00a fd5f 	bl	8016284 <rcl_wait_set_add_guard_condition>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d0bc      	beq.n	800b744 <rclc_executor_spin_some+0x6c>
 800b7ca:	e7db      	b.n	800b784 <rclc_executor_spin_some+0xac>
 800b7cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b7d0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b7d4:	3110      	adds	r1, #16
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	f00b fb28 	bl	8016e2c <rcl_action_wait_set_add_action_server>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d0b1      	beq.n	800b744 <rclc_executor_spin_some+0x6c>
 800b7e0:	e7d0      	b.n	800b784 <rclc_executor_spin_some+0xac>
 800b7e2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b7ec:	3110      	adds	r1, #16
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	f00b f90a 	bl	8016a08 <rcl_action_wait_set_add_action_client>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d0a5      	beq.n	800b744 <rclc_executor_spin_some+0x6c>
 800b7f8:	e7c4      	b.n	800b784 <rclc_executor_spin_some+0xac>
 800b7fa:	f000 fa61 	bl	800bcc0 <rcutils_reset_error>
 800b7fe:	4630      	mov	r0, r6
 800b800:	b003      	add	sp, #12
 800b802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b806:	260b      	movs	r6, #11
 800b808:	4630      	mov	r0, r6
 800b80a:	b003      	add	sp, #12
 800b80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b810:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800b814:	4663      	mov	r3, ip
 800b816:	4615      	mov	r5, r2
 800b818:	b1ca      	cbz	r2, 800b84e <rclc_executor_spin_some+0x176>
 800b81a:	2500      	movs	r5, #0
 800b81c:	46a8      	mov	r8, r5
 800b81e:	f240 1991 	movw	r9, #401	@ 0x191
 800b822:	e00c      	b.n	800b83e <rclc_executor_spin_some+0x166>
 800b824:	f7ff fae0 	bl	800ade8 <_rclc_check_for_new_data>
 800b828:	f108 0801 	add.w	r8, r8, #1
 800b82c:	4605      	mov	r5, r0
 800b82e:	b108      	cbz	r0, 800b834 <rclc_executor_spin_some+0x15c>
 800b830:	4548      	cmp	r0, r9
 800b832:	d13e      	bne.n	800b8b2 <rclc_executor_spin_some+0x1da>
 800b834:	68e2      	ldr	r2, [r4, #12]
 800b836:	4590      	cmp	r8, r2
 800b838:	f080 808b 	bcs.w	800b952 <rclc_executor_spin_some+0x27a>
 800b83c:	68a3      	ldr	r3, [r4, #8]
 800b83e:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800b842:	469c      	mov	ip, r3
 800b844:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b848:	4639      	mov	r1, r7
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1ea      	bne.n	800b824 <rclc_executor_spin_some+0x14c>
 800b84e:	4611      	mov	r1, r2
 800b850:	4660      	mov	r0, ip
 800b852:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800b856:	4798      	blx	r3
 800b858:	b358      	cbz	r0, 800b8b2 <rclc_executor_spin_some+0x1da>
 800b85a:	68e3      	ldr	r3, [r4, #12]
 800b85c:	b34b      	cbz	r3, 800b8b2 <rclc_executor_spin_some+0x1da>
 800b85e:	f04f 0800 	mov.w	r8, #0
 800b862:	f240 1991 	movw	r9, #401	@ 0x191
 800b866:	e00a      	b.n	800b87e <rclc_executor_spin_some+0x1a6>
 800b868:	f7ff fb0c 	bl	800ae84 <_rclc_take_new_data>
 800b86c:	f108 0801 	add.w	r8, r8, #1
 800b870:	4605      	mov	r5, r0
 800b872:	b108      	cbz	r0, 800b878 <rclc_executor_spin_some+0x1a0>
 800b874:	4548      	cmp	r0, r9
 800b876:	d11c      	bne.n	800b8b2 <rclc_executor_spin_some+0x1da>
 800b878:	68e3      	ldr	r3, [r4, #12]
 800b87a:	4598      	cmp	r8, r3
 800b87c:	d26f      	bcs.n	800b95e <rclc_executor_spin_some+0x286>
 800b87e:	68a3      	ldr	r3, [r4, #8]
 800b880:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800b884:	4639      	mov	r1, r7
 800b886:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b88a:	2a00      	cmp	r2, #0
 800b88c:	d1ec      	bne.n	800b868 <rclc_executor_spin_some+0x190>
 800b88e:	2700      	movs	r7, #0
 800b890:	e009      	b.n	800b8a6 <rclc_executor_spin_some+0x1ce>
 800b892:	f7ff fc97 	bl	800b1c4 <_rclc_execute>
 800b896:	3701      	adds	r7, #1
 800b898:	4605      	mov	r5, r0
 800b89a:	b950      	cbnz	r0, 800b8b2 <rclc_executor_spin_some+0x1da>
 800b89c:	68e3      	ldr	r3, [r4, #12]
 800b89e:	429f      	cmp	r7, r3
 800b8a0:	f4bf af63 	bcs.w	800b76a <rclc_executor_spin_some+0x92>
 800b8a4:	68a3      	ldr	r3, [r4, #8]
 800b8a6:	eb03 1087 	add.w	r0, r3, r7, lsl #6
 800b8aa:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1ef      	bne.n	800b892 <rclc_executor_spin_some+0x1ba>
 800b8b2:	462e      	mov	r6, r5
 800b8b4:	e759      	b.n	800b76a <rclc_executor_spin_some+0x92>
 800b8b6:	e9d4 c202 	ldrd	ip, r2, [r4, #8]
 800b8ba:	4663      	mov	r3, ip
 800b8bc:	2a00      	cmp	r2, #0
 800b8be:	d054      	beq.n	800b96a <rclc_executor_spin_some+0x292>
 800b8c0:	46a8      	mov	r8, r5
 800b8c2:	f240 1991 	movw	r9, #401	@ 0x191
 800b8c6:	e00b      	b.n	800b8e0 <rclc_executor_spin_some+0x208>
 800b8c8:	f7ff fa8e 	bl	800ade8 <_rclc_check_for_new_data>
 800b8cc:	f108 0801 	add.w	r8, r8, #1
 800b8d0:	4605      	mov	r5, r0
 800b8d2:	b108      	cbz	r0, 800b8d8 <rclc_executor_spin_some+0x200>
 800b8d4:	4548      	cmp	r0, r9
 800b8d6:	d1ec      	bne.n	800b8b2 <rclc_executor_spin_some+0x1da>
 800b8d8:	68e2      	ldr	r2, [r4, #12]
 800b8da:	4590      	cmp	r8, r2
 800b8dc:	d23c      	bcs.n	800b958 <rclc_executor_spin_some+0x280>
 800b8de:	68a3      	ldr	r3, [r4, #8]
 800b8e0:	eb03 1088 	add.w	r0, r3, r8, lsl #6
 800b8e4:	469c      	mov	ip, r3
 800b8e6:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1eb      	bne.n	800b8c8 <rclc_executor_spin_some+0x1f0>
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4660      	mov	r0, ip
 800b8f4:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	@ 0x80
 800b8f8:	4798      	blx	r3
 800b8fa:	2800      	cmp	r0, #0
 800b8fc:	d0d9      	beq.n	800b8b2 <rclc_executor_spin_some+0x1da>
 800b8fe:	68e3      	ldr	r3, [r4, #12]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d0d6      	beq.n	800b8b2 <rclc_executor_spin_some+0x1da>
 800b904:	f04f 0a00 	mov.w	sl, #0
 800b908:	f240 1891 	movw	r8, #401	@ 0x191
 800b90c:	f240 2959 	movw	r9, #601	@ 0x259
 800b910:	e013      	b.n	800b93a <rclc_executor_spin_some+0x262>
 800b912:	f7ff fab7 	bl	800ae84 <_rclc_take_new_data>
 800b916:	b118      	cbz	r0, 800b920 <rclc_executor_spin_some+0x248>
 800b918:	4540      	cmp	r0, r8
 800b91a:	d001      	beq.n	800b920 <rclc_executor_spin_some+0x248>
 800b91c:	4548      	cmp	r0, r9
 800b91e:	d122      	bne.n	800b966 <rclc_executor_spin_some+0x28e>
 800b920:	68a0      	ldr	r0, [r4, #8]
 800b922:	4458      	add	r0, fp
 800b924:	f7ff fc4e 	bl	800b1c4 <_rclc_execute>
 800b928:	f10a 0a01 	add.w	sl, sl, #1
 800b92c:	4605      	mov	r5, r0
 800b92e:	2800      	cmp	r0, #0
 800b930:	d1bf      	bne.n	800b8b2 <rclc_executor_spin_some+0x1da>
 800b932:	68e3      	ldr	r3, [r4, #12]
 800b934:	459a      	cmp	sl, r3
 800b936:	f4bf af18 	bcs.w	800b76a <rclc_executor_spin_some+0x92>
 800b93a:	68a0      	ldr	r0, [r4, #8]
 800b93c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800b940:	4639      	mov	r1, r7
 800b942:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b946:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1e1      	bne.n	800b912 <rclc_executor_spin_some+0x23a>
 800b94e:	462e      	mov	r6, r5
 800b950:	e70b      	b.n	800b76a <rclc_executor_spin_some+0x92>
 800b952:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800b956:	e77a      	b.n	800b84e <rclc_executor_spin_some+0x176>
 800b958:	f8d4 c008 	ldr.w	ip, [r4, #8]
 800b95c:	e7c8      	b.n	800b8f0 <rclc_executor_spin_some+0x218>
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d0a7      	beq.n	800b8b2 <rclc_executor_spin_some+0x1da>
 800b962:	68a3      	ldr	r3, [r4, #8]
 800b964:	e793      	b.n	800b88e <rclc_executor_spin_some+0x1b6>
 800b966:	4606      	mov	r6, r0
 800b968:	e6ff      	b.n	800b76a <rclc_executor_spin_some+0x92>
 800b96a:	4615      	mov	r5, r2
 800b96c:	e7c0      	b.n	800b8f0 <rclc_executor_spin_some+0x218>
 800b96e:	bf00      	nop

0800b970 <rclc_executor_handle_counters_zero_init>:
 800b970:	b130      	cbz	r0, 800b980 <rclc_executor_handle_counters_zero_init+0x10>
 800b972:	b508      	push	{r3, lr}
 800b974:	2220      	movs	r2, #32
 800b976:	2100      	movs	r1, #0
 800b978:	f010 fb96 	bl	801c0a8 <memset>
 800b97c:	2000      	movs	r0, #0
 800b97e:	bd08      	pop	{r3, pc}
 800b980:	200b      	movs	r0, #11
 800b982:	4770      	bx	lr

0800b984 <rclc_executor_handle_init>:
 800b984:	b158      	cbz	r0, 800b99e <rclc_executor_handle_init+0x1a>
 800b986:	2300      	movs	r3, #0
 800b988:	220b      	movs	r2, #11
 800b98a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b98e:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 800b992:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b996:	8002      	strh	r2, [r0, #0]
 800b998:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b99a:	4618      	mov	r0, r3
 800b99c:	4770      	bx	lr
 800b99e:	200b      	movs	r0, #11
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop

0800b9a4 <rclc_support_init>:
 800b9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9a8:	b086      	sub	sp, #24
 800b9aa:	b3b8      	cbz	r0, 800ba1c <rclc_support_init+0x78>
 800b9ac:	461c      	mov	r4, r3
 800b9ae:	b3ab      	cbz	r3, 800ba1c <rclc_support_init+0x78>
 800b9b0:	460f      	mov	r7, r1
 800b9b2:	4690      	mov	r8, r2
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	f008 ff0d 	bl	80147d4 <rcl_get_zero_initialized_init_options>
 800b9ba:	f104 030c 	add.w	r3, r4, #12
 800b9be:	9005      	str	r0, [sp, #20]
 800b9c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b9c4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b9c8:	a805      	add	r0, sp, #20
 800b9ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b9ce:	f008 ff03 	bl	80147d8 <rcl_init_options_init>
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	b9e0      	cbnz	r0, 800ba10 <rclc_support_init+0x6c>
 800b9d6:	ad02      	add	r5, sp, #8
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f008 fd8d 	bl	80144f8 <rcl_get_zero_initialized_context>
 800b9de:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b9e2:	4633      	mov	r3, r6
 800b9e4:	e886 0003 	stmia.w	r6, {r0, r1}
 800b9e8:	aa05      	add	r2, sp, #20
 800b9ea:	4641      	mov	r1, r8
 800b9ec:	4638      	mov	r0, r7
 800b9ee:	f008 fded 	bl	80145cc <rcl_init>
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	b9b8      	cbnz	r0, 800ba26 <rclc_support_init+0x82>
 800b9f6:	60b4      	str	r4, [r6, #8]
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	f106 010c 	add.w	r1, r6, #12
 800b9fe:	2003      	movs	r0, #3
 800ba00:	f009 fcca 	bl	8015398 <rcl_clock_init>
 800ba04:	4605      	mov	r5, r0
 800ba06:	b970      	cbnz	r0, 800ba26 <rclc_support_init+0x82>
 800ba08:	a805      	add	r0, sp, #20
 800ba0a:	f008 ff41 	bl	8014890 <rcl_init_options_fini>
 800ba0e:	b108      	cbz	r0, 800ba14 <rclc_support_init+0x70>
 800ba10:	f000 f956 	bl	800bcc0 <rcutils_reset_error>
 800ba14:	4628      	mov	r0, r5
 800ba16:	b006      	add	sp, #24
 800ba18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba1c:	250b      	movs	r5, #11
 800ba1e:	4628      	mov	r0, r5
 800ba20:	b006      	add	sp, #24
 800ba22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba26:	f000 f94b 	bl	800bcc0 <rcutils_reset_error>
 800ba2a:	a805      	add	r0, sp, #20
 800ba2c:	f008 ff30 	bl	8014890 <rcl_init_options_fini>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d0ef      	beq.n	800ba14 <rclc_support_init+0x70>
 800ba34:	e7ec      	b.n	800ba10 <rclc_support_init+0x6c>
 800ba36:	bf00      	nop

0800ba38 <rclc_node_init_default>:
 800ba38:	b3b8      	cbz	r0, 800baaa <rclc_node_init_default+0x72>
 800ba3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba3e:	460d      	mov	r5, r1
 800ba40:	b0a1      	sub	sp, #132	@ 0x84
 800ba42:	b329      	cbz	r1, 800ba90 <rclc_node_init_default+0x58>
 800ba44:	4616      	mov	r6, r2
 800ba46:	b31a      	cbz	r2, 800ba90 <rclc_node_init_default+0x58>
 800ba48:	461f      	mov	r7, r3
 800ba4a:	b30b      	cbz	r3, 800ba90 <rclc_node_init_default+0x58>
 800ba4c:	f10d 0810 	add.w	r8, sp, #16
 800ba50:	4604      	mov	r4, r0
 800ba52:	4640      	mov	r0, r8
 800ba54:	f008 ffa2 	bl	801499c <rcl_get_zero_initialized_node>
 800ba58:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ba5c:	f10d 0918 	add.w	r9, sp, #24
 800ba60:	e884 0003 	stmia.w	r4, {r0, r1}
 800ba64:	4648      	mov	r0, r9
 800ba66:	f009 f941 	bl	8014cec <rcl_node_get_default_options>
 800ba6a:	4640      	mov	r0, r8
 800ba6c:	f008 ff96 	bl	801499c <rcl_get_zero_initialized_node>
 800ba70:	f8cd 9000 	str.w	r9, [sp]
 800ba74:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ba78:	463b      	mov	r3, r7
 800ba7a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ba7e:	4632      	mov	r2, r6
 800ba80:	4629      	mov	r1, r5
 800ba82:	4620      	mov	r0, r4
 800ba84:	f008 ff94 	bl	80149b0 <rcl_node_init>
 800ba88:	b930      	cbnz	r0, 800ba98 <rclc_node_init_default+0x60>
 800ba8a:	b021      	add	sp, #132	@ 0x84
 800ba8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba90:	200b      	movs	r0, #11
 800ba92:	b021      	add	sp, #132	@ 0x84
 800ba94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba98:	9003      	str	r0, [sp, #12]
 800ba9a:	f000 f911 	bl	800bcc0 <rcutils_reset_error>
 800ba9e:	f000 f90f 	bl	800bcc0 <rcutils_reset_error>
 800baa2:	9803      	ldr	r0, [sp, #12]
 800baa4:	b021      	add	sp, #132	@ 0x84
 800baa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baaa:	200b      	movs	r0, #11
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop

0800bab0 <rclc_publisher_init_default>:
 800bab0:	b368      	cbz	r0, 800bb0e <rclc_publisher_init_default+0x5e>
 800bab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab6:	460d      	mov	r5, r1
 800bab8:	b0a0      	sub	sp, #128	@ 0x80
 800baba:	b321      	cbz	r1, 800bb06 <rclc_publisher_init_default+0x56>
 800babc:	4616      	mov	r6, r2
 800babe:	b312      	cbz	r2, 800bb06 <rclc_publisher_init_default+0x56>
 800bac0:	461f      	mov	r7, r3
 800bac2:	b303      	cbz	r3, 800bb06 <rclc_publisher_init_default+0x56>
 800bac4:	4604      	mov	r4, r0
 800bac6:	f7ff f87f 	bl	800abc8 <rcl_get_zero_initialized_publisher>
 800baca:	f10d 0810 	add.w	r8, sp, #16
 800bace:	6020      	str	r0, [r4, #0]
 800bad0:	4640      	mov	r0, r8
 800bad2:	f7ff f917 	bl	800ad04 <rcl_publisher_get_default_options>
 800bad6:	490f      	ldr	r1, [pc, #60]	@ (800bb14 <rclc_publisher_init_default+0x64>)
 800bad8:	2250      	movs	r2, #80	@ 0x50
 800bada:	4640      	mov	r0, r8
 800badc:	f010 fbbf 	bl	801c25e <memcpy>
 800bae0:	f8cd 8000 	str.w	r8, [sp]
 800bae4:	463b      	mov	r3, r7
 800bae6:	4632      	mov	r2, r6
 800bae8:	4629      	mov	r1, r5
 800baea:	4620      	mov	r0, r4
 800baec:	f7ff f872 	bl	800abd4 <rcl_publisher_init>
 800baf0:	b910      	cbnz	r0, 800baf8 <rclc_publisher_init_default+0x48>
 800baf2:	b020      	add	sp, #128	@ 0x80
 800baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf8:	9003      	str	r0, [sp, #12]
 800bafa:	f000 f8e1 	bl	800bcc0 <rcutils_reset_error>
 800bafe:	9803      	ldr	r0, [sp, #12]
 800bb00:	b020      	add	sp, #128	@ 0x80
 800bb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb06:	200b      	movs	r0, #11
 800bb08:	b020      	add	sp, #128	@ 0x80
 800bb0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb0e:	200b      	movs	r0, #11
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	0801d1e0 	.word	0x0801d1e0

0800bb18 <rclc_subscription_init_default>:
 800bb18:	b368      	cbz	r0, 800bb76 <rclc_subscription_init_default+0x5e>
 800bb1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1e:	460d      	mov	r5, r1
 800bb20:	b0a2      	sub	sp, #136	@ 0x88
 800bb22:	b321      	cbz	r1, 800bb6e <rclc_subscription_init_default+0x56>
 800bb24:	4616      	mov	r6, r2
 800bb26:	b312      	cbz	r2, 800bb6e <rclc_subscription_init_default+0x56>
 800bb28:	461f      	mov	r7, r3
 800bb2a:	b303      	cbz	r3, 800bb6e <rclc_subscription_init_default+0x56>
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	f009 fae7 	bl	8015100 <rcl_get_zero_initialized_subscription>
 800bb32:	f10d 0810 	add.w	r8, sp, #16
 800bb36:	6020      	str	r0, [r4, #0]
 800bb38:	4640      	mov	r0, r8
 800bb3a:	f009 fb8f 	bl	801525c <rcl_subscription_get_default_options>
 800bb3e:	490f      	ldr	r1, [pc, #60]	@ (800bb7c <rclc_subscription_init_default+0x64>)
 800bb40:	2250      	movs	r2, #80	@ 0x50
 800bb42:	4640      	mov	r0, r8
 800bb44:	f010 fb8b 	bl	801c25e <memcpy>
 800bb48:	f8cd 8000 	str.w	r8, [sp]
 800bb4c:	463b      	mov	r3, r7
 800bb4e:	4632      	mov	r2, r6
 800bb50:	4629      	mov	r1, r5
 800bb52:	4620      	mov	r0, r4
 800bb54:	f009 fada 	bl	801510c <rcl_subscription_init>
 800bb58:	b910      	cbnz	r0, 800bb60 <rclc_subscription_init_default+0x48>
 800bb5a:	b022      	add	sp, #136	@ 0x88
 800bb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb60:	9003      	str	r0, [sp, #12]
 800bb62:	f000 f8ad 	bl	800bcc0 <rcutils_reset_error>
 800bb66:	9803      	ldr	r0, [sp, #12]
 800bb68:	b022      	add	sp, #136	@ 0x88
 800bb6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb6e:	200b      	movs	r0, #11
 800bb70:	b022      	add	sp, #136	@ 0x88
 800bb72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb76:	200b      	movs	r0, #11
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	0801d230 	.word	0x0801d230

0800bb80 <rclc_timer_init_default2>:
 800bb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb84:	b08c      	sub	sp, #48	@ 0x30
 800bb86:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 800bb8a:	b330      	cbz	r0, 800bbda <rclc_timer_init_default2+0x5a>
 800bb8c:	460e      	mov	r6, r1
 800bb8e:	b321      	cbz	r1, 800bbda <rclc_timer_init_default2+0x5a>
 800bb90:	4690      	mov	r8, r2
 800bb92:	461f      	mov	r7, r3
 800bb94:	4605      	mov	r5, r0
 800bb96:	f009 fddf 	bl	8015758 <rcl_get_zero_initialized_timer>
 800bb9a:	9408      	str	r4, [sp, #32]
 800bb9c:	68b4      	ldr	r4, [r6, #8]
 800bb9e:	6028      	str	r0, [r5, #0]
 800bba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bba2:	f10d 0c0c 	add.w	ip, sp, #12
 800bba6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	f8cc 3000 	str.w	r3, [ip]
 800bbb0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbb2:	9302      	str	r3, [sp, #8]
 800bbb4:	e9cd 8700 	strd	r8, r7, [sp]
 800bbb8:	4628      	mov	r0, r5
 800bbba:	4632      	mov	r2, r6
 800bbbc:	f106 010c 	add.w	r1, r6, #12
 800bbc0:	f009 fdd2 	bl	8015768 <rcl_timer_init2>
 800bbc4:	b910      	cbnz	r0, 800bbcc <rclc_timer_init_default2+0x4c>
 800bbc6:	b00c      	add	sp, #48	@ 0x30
 800bbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbcc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bbce:	f000 f877 	bl	800bcc0 <rcutils_reset_error>
 800bbd2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800bbd4:	b00c      	add	sp, #48	@ 0x30
 800bbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbda:	200b      	movs	r0, #11
 800bbdc:	b00c      	add	sp, #48	@ 0x30
 800bbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbe2:	bf00      	nop

0800bbe4 <__default_zero_allocate>:
 800bbe4:	f00f bd82 	b.w	801b6ec <calloc>

0800bbe8 <__default_reallocate>:
 800bbe8:	f00f bf20 	b.w	801ba2c <realloc>

0800bbec <__default_deallocate>:
 800bbec:	f00f bdfc 	b.w	801b7e8 <free>

0800bbf0 <__default_allocate>:
 800bbf0:	f00f bdf2 	b.w	801b7d8 <malloc>

0800bbf4 <rcutils_get_zero_initialized_allocator>:
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	4c05      	ldr	r4, [pc, #20]	@ (800bc0c <rcutils_get_zero_initialized_allocator+0x18>)
 800bbf8:	4686      	mov	lr, r0
 800bbfa:	4684      	mov	ip, r0
 800bbfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bbfe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	f8cc 3000 	str.w	r3, [ip]
 800bc08:	4670      	mov	r0, lr
 800bc0a:	bd10      	pop	{r4, pc}
 800bc0c:	0801d280 	.word	0x0801d280

0800bc10 <rcutils_get_default_allocator>:
 800bc10:	b510      	push	{r4, lr}
 800bc12:	4c05      	ldr	r4, [pc, #20]	@ (800bc28 <rcutils_get_default_allocator+0x18>)
 800bc14:	4686      	mov	lr, r0
 800bc16:	4684      	mov	ip, r0
 800bc18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc1e:	6823      	ldr	r3, [r4, #0]
 800bc20:	f8cc 3000 	str.w	r3, [ip]
 800bc24:	4670      	mov	r0, lr
 800bc26:	bd10      	pop	{r4, pc}
 800bc28:	20000034 	.word	0x20000034

0800bc2c <rcutils_set_default_allocator>:
 800bc2c:	b1a8      	cbz	r0, 800bc5a <rcutils_set_default_allocator+0x2e>
 800bc2e:	6802      	ldr	r2, [r0, #0]
 800bc30:	b1a2      	cbz	r2, 800bc5c <rcutils_set_default_allocator+0x30>
 800bc32:	6841      	ldr	r1, [r0, #4]
 800bc34:	b1a1      	cbz	r1, 800bc60 <rcutils_set_default_allocator+0x34>
 800bc36:	b410      	push	{r4}
 800bc38:	68c4      	ldr	r4, [r0, #12]
 800bc3a:	b164      	cbz	r4, 800bc56 <rcutils_set_default_allocator+0x2a>
 800bc3c:	6880      	ldr	r0, [r0, #8]
 800bc3e:	b138      	cbz	r0, 800bc50 <rcutils_set_default_allocator+0x24>
 800bc40:	4b08      	ldr	r3, [pc, #32]	@ (800bc64 <rcutils_set_default_allocator+0x38>)
 800bc42:	601a      	str	r2, [r3, #0]
 800bc44:	2200      	movs	r2, #0
 800bc46:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800bc4a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800bc4e:	2001      	movs	r0, #1
 800bc50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	4620      	mov	r0, r4
 800bc58:	e7fa      	b.n	800bc50 <rcutils_set_default_allocator+0x24>
 800bc5a:	4770      	bx	lr
 800bc5c:	4610      	mov	r0, r2
 800bc5e:	4770      	bx	lr
 800bc60:	4608      	mov	r0, r1
 800bc62:	4770      	bx	lr
 800bc64:	20000034 	.word	0x20000034

0800bc68 <rcutils_allocator_is_valid>:
 800bc68:	b158      	cbz	r0, 800bc82 <rcutils_allocator_is_valid+0x1a>
 800bc6a:	6803      	ldr	r3, [r0, #0]
 800bc6c:	b143      	cbz	r3, 800bc80 <rcutils_allocator_is_valid+0x18>
 800bc6e:	6843      	ldr	r3, [r0, #4]
 800bc70:	b133      	cbz	r3, 800bc80 <rcutils_allocator_is_valid+0x18>
 800bc72:	68c3      	ldr	r3, [r0, #12]
 800bc74:	b123      	cbz	r3, 800bc80 <rcutils_allocator_is_valid+0x18>
 800bc76:	6880      	ldr	r0, [r0, #8]
 800bc78:	3800      	subs	r0, #0
 800bc7a:	bf18      	it	ne
 800bc7c:	2001      	movne	r0, #1
 800bc7e:	4770      	bx	lr
 800bc80:	4618      	mov	r0, r3
 800bc82:	4770      	bx	lr

0800bc84 <rcutils_error_is_set>:
 800bc84:	4b01      	ldr	r3, [pc, #4]	@ (800bc8c <rcutils_error_is_set+0x8>)
 800bc86:	7818      	ldrb	r0, [r3, #0]
 800bc88:	4770      	bx	lr
 800bc8a:	bf00      	nop
 800bc8c:	2000da54 	.word	0x2000da54

0800bc90 <rcutils_get_error_string>:
 800bc90:	4b06      	ldr	r3, [pc, #24]	@ (800bcac <rcutils_get_error_string+0x1c>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	b13b      	cbz	r3, 800bca6 <rcutils_get_error_string+0x16>
 800bc96:	4b06      	ldr	r3, [pc, #24]	@ (800bcb0 <rcutils_get_error_string+0x20>)
 800bc98:	781a      	ldrb	r2, [r3, #0]
 800bc9a:	b90a      	cbnz	r2, 800bca0 <rcutils_get_error_string+0x10>
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	4b04      	ldr	r3, [pc, #16]	@ (800bcb4 <rcutils_get_error_string+0x24>)
 800bca2:	7818      	ldrb	r0, [r3, #0]
 800bca4:	4770      	bx	lr
 800bca6:	4b04      	ldr	r3, [pc, #16]	@ (800bcb8 <rcutils_get_error_string+0x28>)
 800bca8:	7818      	ldrb	r0, [r3, #0]
 800bcaa:	4770      	bx	lr
 800bcac:	2000da54 	.word	0x2000da54
 800bcb0:	2000da59 	.word	0x2000da59
 800bcb4:	2000da58 	.word	0x2000da58
 800bcb8:	0801d7d8 	.word	0x0801d7d8
 800bcbc:	00000000 	.word	0x00000000

0800bcc0 <rcutils_reset_error>:
 800bcc0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800bce0 <rcutils_reset_error+0x20>
 800bcc4:	4a08      	ldr	r2, [pc, #32]	@ (800bce8 <rcutils_reset_error+0x28>)
 800bcc6:	4809      	ldr	r0, [pc, #36]	@ (800bcec <rcutils_reset_error+0x2c>)
 800bcc8:	4909      	ldr	r1, [pc, #36]	@ (800bcf0 <rcutils_reset_error+0x30>)
 800bcca:	2300      	movs	r3, #0
 800bccc:	8013      	strh	r3, [r2, #0]
 800bcce:	ed82 7b02 	vstr	d7, [r2, #8]
 800bcd2:	4a08      	ldr	r2, [pc, #32]	@ (800bcf4 <rcutils_reset_error+0x34>)
 800bcd4:	7003      	strb	r3, [r0, #0]
 800bcd6:	700b      	strb	r3, [r1, #0]
 800bcd8:	7013      	strb	r3, [r2, #0]
 800bcda:	4770      	bx	lr
 800bcdc:	f3af 8000 	nop.w
	...
 800bce8:	2000da60 	.word	0x2000da60
 800bcec:	2000da59 	.word	0x2000da59
 800bcf0:	2000da58 	.word	0x2000da58
 800bcf4:	2000da54 	.word	0x2000da54

0800bcf8 <rcutils_system_time_now>:
 800bcf8:	b318      	cbz	r0, 800bd42 <rcutils_system_time_now+0x4a>
 800bcfa:	b570      	push	{r4, r5, r6, lr}
 800bcfc:	b084      	sub	sp, #16
 800bcfe:	4604      	mov	r4, r0
 800bd00:	4669      	mov	r1, sp
 800bd02:	2001      	movs	r0, #1
 800bd04:	f7f7 f960 	bl	8002fc8 <clock_gettime>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	db17      	blt.n	800bd3c <rcutils_system_time_now+0x44>
 800bd0c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bd10:	2900      	cmp	r1, #0
 800bd12:	db13      	blt.n	800bd3c <rcutils_system_time_now+0x44>
 800bd14:	9d02      	ldr	r5, [sp, #8]
 800bd16:	2d00      	cmp	r5, #0
 800bd18:	db0d      	blt.n	800bd36 <rcutils_system_time_now+0x3e>
 800bd1a:	4e0b      	ldr	r6, [pc, #44]	@ (800bd48 <rcutils_system_time_now+0x50>)
 800bd1c:	fba3 3206 	umull	r3, r2, r3, r6
 800bd20:	195b      	adds	r3, r3, r5
 800bd22:	fb06 2201 	mla	r2, r6, r1, r2
 800bd26:	f04f 0000 	mov.w	r0, #0
 800bd2a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800bd2e:	e9c4 3200 	strd	r3, r2, [r4]
 800bd32:	b004      	add	sp, #16
 800bd34:	bd70      	pop	{r4, r5, r6, pc}
 800bd36:	ea53 0201 	orrs.w	r2, r3, r1
 800bd3a:	d1ee      	bne.n	800bd1a <rcutils_system_time_now+0x22>
 800bd3c:	2002      	movs	r0, #2
 800bd3e:	b004      	add	sp, #16
 800bd40:	bd70      	pop	{r4, r5, r6, pc}
 800bd42:	200b      	movs	r0, #11
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	3b9aca00 	.word	0x3b9aca00

0800bd4c <rcutils_steady_time_now>:
 800bd4c:	b318      	cbz	r0, 800bd96 <rcutils_steady_time_now+0x4a>
 800bd4e:	b570      	push	{r4, r5, r6, lr}
 800bd50:	b084      	sub	sp, #16
 800bd52:	4604      	mov	r4, r0
 800bd54:	4669      	mov	r1, sp
 800bd56:	2000      	movs	r0, #0
 800bd58:	f7f7 f936 	bl	8002fc8 <clock_gettime>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	db17      	blt.n	800bd90 <rcutils_steady_time_now+0x44>
 800bd60:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bd64:	2900      	cmp	r1, #0
 800bd66:	db13      	blt.n	800bd90 <rcutils_steady_time_now+0x44>
 800bd68:	9d02      	ldr	r5, [sp, #8]
 800bd6a:	2d00      	cmp	r5, #0
 800bd6c:	db0d      	blt.n	800bd8a <rcutils_steady_time_now+0x3e>
 800bd6e:	4e0b      	ldr	r6, [pc, #44]	@ (800bd9c <rcutils_steady_time_now+0x50>)
 800bd70:	fba3 3206 	umull	r3, r2, r3, r6
 800bd74:	195b      	adds	r3, r3, r5
 800bd76:	fb06 2201 	mla	r2, r6, r1, r2
 800bd7a:	f04f 0000 	mov.w	r0, #0
 800bd7e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800bd82:	e9c4 3200 	strd	r3, r2, [r4]
 800bd86:	b004      	add	sp, #16
 800bd88:	bd70      	pop	{r4, r5, r6, pc}
 800bd8a:	ea53 0201 	orrs.w	r2, r3, r1
 800bd8e:	d1ee      	bne.n	800bd6e <rcutils_steady_time_now+0x22>
 800bd90:	2002      	movs	r0, #2
 800bd92:	b004      	add	sp, #16
 800bd94:	bd70      	pop	{r4, r5, r6, pc}
 800bd96:	200b      	movs	r0, #11
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	3b9aca00 	.word	0x3b9aca00

0800bda0 <rmw_get_default_publisher_options>:
 800bda0:	2200      	movs	r2, #0
 800bda2:	6002      	str	r2, [r0, #0]
 800bda4:	7102      	strb	r2, [r0, #4]
 800bda6:	4770      	bx	lr

0800bda8 <rmw_uros_set_custom_transport>:
 800bda8:	b470      	push	{r4, r5, r6}
 800bdaa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800bdae:	b162      	cbz	r2, 800bdca <rmw_uros_set_custom_transport+0x22>
 800bdb0:	b15b      	cbz	r3, 800bdca <rmw_uros_set_custom_transport+0x22>
 800bdb2:	b155      	cbz	r5, 800bdca <rmw_uros_set_custom_transport+0x22>
 800bdb4:	b14e      	cbz	r6, 800bdca <rmw_uros_set_custom_transport+0x22>
 800bdb6:	4c06      	ldr	r4, [pc, #24]	@ (800bdd0 <rmw_uros_set_custom_transport+0x28>)
 800bdb8:	7020      	strb	r0, [r4, #0]
 800bdba:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bdbe:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bdc2:	6166      	str	r6, [r4, #20]
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	bc70      	pop	{r4, r5, r6}
 800bdc8:	4770      	bx	lr
 800bdca:	200b      	movs	r0, #11
 800bdcc:	bc70      	pop	{r4, r5, r6}
 800bdce:	4770      	bx	lr
 800bdd0:	2000da70 	.word	0x2000da70

0800bdd4 <rmw_uros_ping_agent>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	4b22      	ldr	r3, [pc, #136]	@ (800be60 <rmw_uros_ping_agent+0x8c>)
 800bdd8:	7b1a      	ldrb	r2, [r3, #12]
 800bdda:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800bdde:	4605      	mov	r5, r0
 800bde0:	460e      	mov	r6, r1
 800bde2:	b10a      	cbz	r2, 800bde8 <rmw_uros_ping_agent+0x14>
 800bde4:	681c      	ldr	r4, [r3, #0]
 800bde6:	b9bc      	cbnz	r4, 800be18 <rmw_uros_ping_agent+0x44>
 800bde8:	4b1e      	ldr	r3, [pc, #120]	@ (800be64 <rmw_uros_ping_agent+0x90>)
 800bdea:	781a      	ldrb	r2, [r3, #0]
 800bdec:	6918      	ldr	r0, [r3, #16]
 800bdee:	f88d 2200 	strb.w	r2, [sp, #512]	@ 0x200
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	92a3      	str	r2, [sp, #652]	@ 0x28c
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	68da      	ldr	r2, [r3, #12]
 800bdfa:	909c      	str	r0, [sp, #624]	@ 0x270
 800bdfc:	6958      	ldr	r0, [r3, #20]
 800bdfe:	929b      	str	r2, [sp, #620]	@ 0x26c
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	909d      	str	r0, [sp, #628]	@ 0x274
 800be04:	466a      	mov	r2, sp
 800be06:	4608      	mov	r0, r1
 800be08:	939a      	str	r3, [sp, #616]	@ 0x268
 800be0a:	f000 f9cd 	bl	800c1a8 <rmw_uxrce_transport_init>
 800be0e:	b198      	cbz	r0, 800be38 <rmw_uros_ping_agent+0x64>
 800be10:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800be14:	bd70      	pop	{r4, r5, r6, pc}
 800be16:	b9f0      	cbnz	r0, 800be56 <rmw_uros_ping_agent+0x82>
 800be18:	68a0      	ldr	r0, [r4, #8]
 800be1a:	4632      	mov	r2, r6
 800be1c:	4629      	mov	r1, r5
 800be1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be22:	f005 f8a1 	bl	8010f68 <uxr_ping_agent_session>
 800be26:	6864      	ldr	r4, [r4, #4]
 800be28:	2c00      	cmp	r4, #0
 800be2a:	d1f4      	bne.n	800be16 <rmw_uros_ping_agent+0x42>
 800be2c:	f080 0001 	eor.w	r0, r0, #1
 800be30:	b2c0      	uxtb	r0, r0
 800be32:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800be36:	bd70      	pop	{r4, r5, r6, pc}
 800be38:	4632      	mov	r2, r6
 800be3a:	4629      	mov	r1, r5
 800be3c:	a89e      	add	r0, sp, #632	@ 0x278
 800be3e:	f005 f8e3 	bl	8011008 <uxr_ping_agent_attempts>
 800be42:	4604      	mov	r4, r0
 800be44:	4668      	mov	r0, sp
 800be46:	f005 f85d 	bl	8010f04 <uxr_close_custom_transport>
 800be4a:	f084 0001 	eor.w	r0, r4, #1
 800be4e:	b2c0      	uxtb	r0, r0
 800be50:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800be54:	bd70      	pop	{r4, r5, r6, pc}
 800be56:	2000      	movs	r0, #0
 800be58:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800be5c:	bd70      	pop	{r4, r5, r6, pc}
 800be5e:	bf00      	nop
 800be60:	200123d0 	.word	0x200123d0
 800be64:	2000da70 	.word	0x2000da70

0800be68 <flush_session>:
 800be68:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800be6a:	f005 be1d 	b.w	8011aa8 <uxr_run_session_until_confirm_delivery>
 800be6e:	bf00      	nop

0800be70 <rmw_publish>:
 800be70:	2800      	cmp	r0, #0
 800be72:	d053      	beq.n	800bf1c <rmw_publish+0xac>
 800be74:	b570      	push	{r4, r5, r6, lr}
 800be76:	460d      	mov	r5, r1
 800be78:	b08e      	sub	sp, #56	@ 0x38
 800be7a:	2900      	cmp	r1, #0
 800be7c:	d04b      	beq.n	800bf16 <rmw_publish+0xa6>
 800be7e:	4604      	mov	r4, r0
 800be80:	6800      	ldr	r0, [r0, #0]
 800be82:	f000 fd2d 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 800be86:	2800      	cmp	r0, #0
 800be88:	d045      	beq.n	800bf16 <rmw_publish+0xa6>
 800be8a:	6866      	ldr	r6, [r4, #4]
 800be8c:	2e00      	cmp	r6, #0
 800be8e:	d042      	beq.n	800bf16 <rmw_publish+0xa6>
 800be90:	69b4      	ldr	r4, [r6, #24]
 800be92:	4628      	mov	r0, r5
 800be94:	6923      	ldr	r3, [r4, #16]
 800be96:	4798      	blx	r3
 800be98:	69f3      	ldr	r3, [r6, #28]
 800be9a:	9005      	str	r0, [sp, #20]
 800be9c:	b113      	cbz	r3, 800bea4 <rmw_publish+0x34>
 800be9e:	a805      	add	r0, sp, #20
 800bea0:	4798      	blx	r3
 800bea2:	9805      	ldr	r0, [sp, #20]
 800bea4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	9000      	str	r0, [sp, #0]
 800beac:	6972      	ldr	r2, [r6, #20]
 800beae:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800beb0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800beb4:	ab06      	add	r3, sp, #24
 800beb6:	f007 f8b7 	bl	8013028 <uxr_prepare_output_stream>
 800beba:	b1d8      	cbz	r0, 800bef4 <rmw_publish+0x84>
 800bebc:	68a3      	ldr	r3, [r4, #8]
 800bebe:	a906      	add	r1, sp, #24
 800bec0:	4628      	mov	r0, r5
 800bec2:	4798      	blx	r3
 800bec4:	6a33      	ldr	r3, [r6, #32]
 800bec6:	4604      	mov	r4, r0
 800bec8:	b10b      	cbz	r3, 800bece <rmw_publish+0x5e>
 800beca:	a806      	add	r0, sp, #24
 800becc:	4798      	blx	r3
 800bece:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800bed2:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	6910      	ldr	r0, [r2, #16]
 800beda:	d021      	beq.n	800bf20 <rmw_publish+0xb0>
 800bedc:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800bede:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bee2:	f005 fde1 	bl	8011aa8 <uxr_run_session_until_confirm_delivery>
 800bee6:	4004      	ands	r4, r0
 800bee8:	b2e4      	uxtb	r4, r4
 800beea:	f084 0001 	eor.w	r0, r4, #1
 800beee:	b2c0      	uxtb	r0, r0
 800bef0:	b00e      	add	sp, #56	@ 0x38
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800bef8:	6918      	ldr	r0, [r3, #16]
 800befa:	4b0c      	ldr	r3, [pc, #48]	@ (800bf2c <rmw_publish+0xbc>)
 800befc:	9301      	str	r3, [sp, #4]
 800befe:	9b05      	ldr	r3, [sp, #20]
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	9602      	str	r6, [sp, #8]
 800bf04:	6972      	ldr	r2, [r6, #20]
 800bf06:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800bf08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf0c:	ab06      	add	r3, sp, #24
 800bf0e:	f007 f8bb 	bl	8013088 <uxr_prepare_output_stream_fragmented>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d1d2      	bne.n	800bebc <rmw_publish+0x4c>
 800bf16:	2001      	movs	r0, #1
 800bf18:	b00e      	add	sp, #56	@ 0x38
 800bf1a:	bd70      	pop	{r4, r5, r6, pc}
 800bf1c:	2001      	movs	r0, #1
 800bf1e:	4770      	bx	lr
 800bf20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf24:	f005 fa28 	bl	8011378 <uxr_flash_output_streams>
 800bf28:	e7df      	b.n	800beea <rmw_publish+0x7a>
 800bf2a:	bf00      	nop
 800bf2c:	0800be69 	.word	0x0800be69

0800bf30 <rmw_create_publisher>:
 800bf30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	b087      	sub	sp, #28
 800bf36:	2800      	cmp	r0, #0
 800bf38:	f000 80c9 	beq.w	800c0ce <rmw_create_publisher+0x19e>
 800bf3c:	460f      	mov	r7, r1
 800bf3e:	2900      	cmp	r1, #0
 800bf40:	f000 80c5 	beq.w	800c0ce <rmw_create_publisher+0x19e>
 800bf44:	4604      	mov	r4, r0
 800bf46:	6800      	ldr	r0, [r0, #0]
 800bf48:	4615      	mov	r5, r2
 800bf4a:	461e      	mov	r6, r3
 800bf4c:	f000 fcc8 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	f000 80bc 	beq.w	800c0ce <rmw_create_publisher+0x19e>
 800bf56:	2d00      	cmp	r5, #0
 800bf58:	f000 80b9 	beq.w	800c0ce <rmw_create_publisher+0x19e>
 800bf5c:	782b      	ldrb	r3, [r5, #0]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f000 80b5 	beq.w	800c0ce <rmw_create_publisher+0x19e>
 800bf64:	2e00      	cmp	r6, #0
 800bf66:	f000 80b2 	beq.w	800c0ce <rmw_create_publisher+0x19e>
 800bf6a:	485c      	ldr	r0, [pc, #368]	@ (800c0dc <rmw_create_publisher+0x1ac>)
 800bf6c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800bf70:	f00b fed4 	bl	8017d1c <get_memory>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	f000 80aa 	beq.w	800c0ce <rmw_create_publisher+0x19e>
 800bf7a:	6884      	ldr	r4, [r0, #8]
 800bf7c:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800bf80:	f00b ff52 	bl	8017e28 <rmw_get_implementation_identifier>
 800bf84:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800bf88:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800bf8c:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800bf90:	4628      	mov	r0, r5
 800bf92:	f7f4 f99d 	bl	80002d0 <strlen>
 800bf96:	3001      	adds	r0, #1
 800bf98:	283c      	cmp	r0, #60	@ 0x3c
 800bf9a:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800bf9e:	f200 808f 	bhi.w	800c0c0 <rmw_create_publisher+0x190>
 800bfa2:	4a4f      	ldr	r2, [pc, #316]	@ (800c0e0 <rmw_create_publisher+0x1b0>)
 800bfa4:	462b      	mov	r3, r5
 800bfa6:	213c      	movs	r1, #60	@ 0x3c
 800bfa8:	4650      	mov	r0, sl
 800bfaa:	f00f ff09 	bl	801bdc0 <sniprintf>
 800bfae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bfb2:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800bfb4:	4631      	mov	r1, r6
 800bfb6:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800bfba:	2250      	movs	r2, #80	@ 0x50
 800bfbc:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800bfc0:	f010 f94d 	bl	801c25e <memcpy>
 800bfc4:	7a33      	ldrb	r3, [r6, #8]
 800bfc6:	4947      	ldr	r1, [pc, #284]	@ (800c0e4 <rmw_create_publisher+0x1b4>)
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfce:	bf0c      	ite	eq
 800bfd0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800bfd4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800bfd8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	f000 fc8b 	bl	800c8fc <get_message_typesupport_handle>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	d06a      	beq.n	800c0c0 <rmw_create_publisher+0x190>
 800bfea:	6842      	ldr	r2, [r0, #4]
 800bfec:	61a2      	str	r2, [r4, #24]
 800bfee:	2a00      	cmp	r2, #0
 800bff0:	d066      	beq.n	800c0c0 <rmw_create_publisher+0x190>
 800bff2:	4629      	mov	r1, r5
 800bff4:	4633      	mov	r3, r6
 800bff6:	4648      	mov	r0, r9
 800bff8:	f00c f972 	bl	80182e0 <create_topic>
 800bffc:	6260      	str	r0, [r4, #36]	@ 0x24
 800bffe:	2800      	cmp	r0, #0
 800c000:	d062      	beq.n	800c0c8 <rmw_create_publisher+0x198>
 800c002:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c006:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c00a:	2103      	movs	r1, #3
 800c00c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800c010:	1c42      	adds	r2, r0, #1
 800c012:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800c016:	f004 ff79 	bl	8010f0c <uxr_object_id>
 800c01a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c01e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c022:	6120      	str	r0, [r4, #16]
 800c024:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c028:	6910      	ldr	r0, [r2, #16]
 800c02a:	2506      	movs	r5, #6
 800c02c:	9500      	str	r5, [sp, #0]
 800c02e:	6819      	ldr	r1, [r3, #0]
 800c030:	6922      	ldr	r2, [r4, #16]
 800c032:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c036:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c03a:	f004 fd7d 	bl	8010b38 <uxr_buffer_create_publisher_bin>
 800c03e:	4602      	mov	r2, r0
 800c040:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c044:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c048:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c04c:	f000 fbc2 	bl	800c7d4 <run_xrce_session>
 800c050:	b3b0      	cbz	r0, 800c0c0 <rmw_create_publisher+0x190>
 800c052:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c05a:	2105      	movs	r1, #5
 800c05c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800c060:	1c42      	adds	r2, r0, #1
 800c062:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800c066:	f004 ff51 	bl	8010f0c <uxr_object_id>
 800c06a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c06e:	6160      	str	r0, [r4, #20]
 800c070:	4631      	mov	r1, r6
 800c072:	af04      	add	r7, sp, #16
 800c074:	691e      	ldr	r6, [r3, #16]
 800c076:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c07a:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c07e:	f8d3 a384 	ldr.w	sl, [r3, #900]	@ 0x384
 800c082:	4638      	mov	r0, r7
 800c084:	f000 fbc6 	bl	800c814 <convert_qos_profile>
 800c088:	9503      	str	r5, [sp, #12]
 800c08a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c08e:	9001      	str	r0, [sp, #4]
 800c090:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c094:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c098:	9300      	str	r3, [sp, #0]
 800c09a:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800c09e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c0a2:	f8da 1000 	ldr.w	r1, [sl]
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f004 fda4 	bl	8010bf4 <uxr_buffer_create_datawriter_bin>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c0b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c0b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c0ba:	f000 fb8b 	bl	800c7d4 <run_xrce_session>
 800c0be:	b940      	cbnz	r0, 800c0d2 <rmw_create_publisher+0x1a2>
 800c0c0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c0c2:	b108      	cbz	r0, 800c0c8 <rmw_create_publisher+0x198>
 800c0c4:	f000 fa7e 	bl	800c5c4 <rmw_uxrce_fini_topic_memory>
 800c0c8:	4640      	mov	r0, r8
 800c0ca:	f000 fa23 	bl	800c514 <rmw_uxrce_fini_publisher_memory>
 800c0ce:	f04f 0800 	mov.w	r8, #0
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	b007      	add	sp, #28
 800c0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0da:	bf00      	nop
 800c0dc:	20010d60 	.word	0x20010d60
 800c0e0:	0801d2c8 	.word	0x0801d2c8
 800c0e4:	0801d294 	.word	0x0801d294

0800c0e8 <rmw_publisher_get_actual_qos>:
 800c0e8:	b508      	push	{r3, lr}
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	b140      	cbz	r0, 800c100 <rmw_publisher_get_actual_qos+0x18>
 800c0ee:	4608      	mov	r0, r1
 800c0f0:	b131      	cbz	r1, 800c100 <rmw_publisher_get_actual_qos+0x18>
 800c0f2:	6859      	ldr	r1, [r3, #4]
 800c0f4:	2250      	movs	r2, #80	@ 0x50
 800c0f6:	3128      	adds	r1, #40	@ 0x28
 800c0f8:	f010 f8b1 	bl	801c25e <memcpy>
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	bd08      	pop	{r3, pc}
 800c100:	200b      	movs	r0, #11
 800c102:	bd08      	pop	{r3, pc}

0800c104 <rmw_destroy_publisher>:
 800c104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c108:	b128      	cbz	r0, 800c116 <rmw_destroy_publisher+0x12>
 800c10a:	4604      	mov	r4, r0
 800c10c:	6800      	ldr	r0, [r0, #0]
 800c10e:	460d      	mov	r5, r1
 800c110:	f000 fbe6 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 800c114:	b918      	cbnz	r0, 800c11e <rmw_destroy_publisher+0x1a>
 800c116:	2401      	movs	r4, #1
 800c118:	4620      	mov	r0, r4
 800c11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c11e:	6863      	ldr	r3, [r4, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d0f8      	beq.n	800c116 <rmw_destroy_publisher+0x12>
 800c124:	2d00      	cmp	r5, #0
 800c126:	d0f6      	beq.n	800c116 <rmw_destroy_publisher+0x12>
 800c128:	6828      	ldr	r0, [r5, #0]
 800c12a:	f000 fbd9 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 800c12e:	2800      	cmp	r0, #0
 800c130:	d0f1      	beq.n	800c116 <rmw_destroy_publisher+0x12>
 800c132:	686c      	ldr	r4, [r5, #4]
 800c134:	2c00      	cmp	r4, #0
 800c136:	d0ee      	beq.n	800c116 <rmw_destroy_publisher+0x12>
 800c138:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c13a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800c13e:	f00c f923 	bl	8018388 <destroy_topic>
 800c142:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c146:	6962      	ldr	r2, [r4, #20]
 800c148:	6918      	ldr	r0, [r3, #16]
 800c14a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c14e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c152:	6819      	ldr	r1, [r3, #0]
 800c154:	f004 fc40 	bl	80109d8 <uxr_buffer_delete_entity>
 800c158:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c15c:	6922      	ldr	r2, [r4, #16]
 800c15e:	4680      	mov	r8, r0
 800c160:	6918      	ldr	r0, [r3, #16]
 800c162:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c166:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c16a:	6819      	ldr	r1, [r3, #0]
 800c16c:	f004 fc34 	bl	80109d8 <uxr_buffer_delete_entity>
 800c170:	4606      	mov	r6, r0
 800c172:	6938      	ldr	r0, [r7, #16]
 800c174:	4642      	mov	r2, r8
 800c176:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c17a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c17e:	f000 fb29 	bl	800c7d4 <run_xrce_session>
 800c182:	4604      	mov	r4, r0
 800c184:	6938      	ldr	r0, [r7, #16]
 800c186:	4632      	mov	r2, r6
 800c188:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c18c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c190:	f000 fb20 	bl	800c7d4 <run_xrce_session>
 800c194:	4004      	ands	r4, r0
 800c196:	f084 0401 	eor.w	r4, r4, #1
 800c19a:	b2e4      	uxtb	r4, r4
 800c19c:	4628      	mov	r0, r5
 800c19e:	0064      	lsls	r4, r4, #1
 800c1a0:	f000 f9b8 	bl	800c514 <rmw_uxrce_fini_publisher_memory>
 800c1a4:	e7b8      	b.n	800c118 <rmw_destroy_publisher+0x14>
 800c1a6:	bf00      	nop

0800c1a8 <rmw_uxrce_transport_init>:
 800c1a8:	b508      	push	{r3, lr}
 800c1aa:	b108      	cbz	r0, 800c1b0 <rmw_uxrce_transport_init+0x8>
 800c1ac:	f100 0210 	add.w	r2, r0, #16
 800c1b0:	b139      	cbz	r1, 800c1c2 <rmw_uxrce_transport_init+0x1a>
 800c1b2:	6949      	ldr	r1, [r1, #20]
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	f004 fe71 	bl	8010e9c <uxr_init_custom_transport>
 800c1ba:	f080 0001 	eor.w	r0, r0, #1
 800c1be:	b2c0      	uxtb	r0, r0
 800c1c0:	bd08      	pop	{r3, pc}
 800c1c2:	4b04      	ldr	r3, [pc, #16]	@ (800c1d4 <rmw_uxrce_transport_init+0x2c>)
 800c1c4:	4610      	mov	r0, r2
 800c1c6:	6859      	ldr	r1, [r3, #4]
 800c1c8:	f004 fe68 	bl	8010e9c <uxr_init_custom_transport>
 800c1cc:	f080 0001 	eor.w	r0, r0, #1
 800c1d0:	b2c0      	uxtb	r0, r0
 800c1d2:	bd08      	pop	{r3, pc}
 800c1d4:	2000da70 	.word	0x2000da70

0800c1d8 <rmw_uros_epoch_nanos>:
 800c1d8:	4b05      	ldr	r3, [pc, #20]	@ (800c1f0 <rmw_uros_epoch_nanos+0x18>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	b123      	cbz	r3, 800c1e8 <rmw_uros_epoch_nanos+0x10>
 800c1de:	6898      	ldr	r0, [r3, #8]
 800c1e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c1e4:	f005 b8be 	b.w	8011364 <uxr_epoch_nanos>
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	200123d0 	.word	0x200123d0

0800c1f4 <rmw_uros_sync_session>:
 800c1f4:	b508      	push	{r3, lr}
 800c1f6:	4b07      	ldr	r3, [pc, #28]	@ (800c214 <rmw_uros_sync_session+0x20>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	b14b      	cbz	r3, 800c210 <rmw_uros_sync_session+0x1c>
 800c1fc:	4601      	mov	r1, r0
 800c1fe:	6898      	ldr	r0, [r3, #8]
 800c200:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c204:	f005 fccc 	bl	8011ba0 <uxr_sync_session>
 800c208:	f080 0001 	eor.w	r0, r0, #1
 800c20c:	b2c0      	uxtb	r0, r0
 800c20e:	bd08      	pop	{r3, pc}
 800c210:	2001      	movs	r0, #1
 800c212:	bd08      	pop	{r3, pc}
 800c214:	200123d0 	.word	0x200123d0

0800c218 <rmw_uxrce_init_service_memory>:
 800c218:	b1e2      	cbz	r2, 800c254 <rmw_uxrce_init_service_memory+0x3c>
 800c21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c21e:	7b05      	ldrb	r5, [r0, #12]
 800c220:	4606      	mov	r6, r0
 800c222:	b9ad      	cbnz	r5, 800c250 <rmw_uxrce_init_service_memory+0x38>
 800c224:	23c8      	movs	r3, #200	@ 0xc8
 800c226:	e9c0 5500 	strd	r5, r5, [r0]
 800c22a:	6083      	str	r3, [r0, #8]
 800c22c:	f240 1301 	movw	r3, #257	@ 0x101
 800c230:	4617      	mov	r7, r2
 800c232:	8183      	strh	r3, [r0, #12]
 800c234:	460c      	mov	r4, r1
 800c236:	46a8      	mov	r8, r5
 800c238:	4621      	mov	r1, r4
 800c23a:	4630      	mov	r0, r6
 800c23c:	3501      	adds	r5, #1
 800c23e:	f00b fd7d 	bl	8017d3c <put_memory>
 800c242:	42af      	cmp	r7, r5
 800c244:	60a4      	str	r4, [r4, #8]
 800c246:	f884 800c 	strb.w	r8, [r4, #12]
 800c24a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c24e:	d1f3      	bne.n	800c238 <rmw_uxrce_init_service_memory+0x20>
 800c250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop

0800c258 <rmw_uxrce_init_client_memory>:
 800c258:	b1e2      	cbz	r2, 800c294 <rmw_uxrce_init_client_memory+0x3c>
 800c25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c25e:	7b05      	ldrb	r5, [r0, #12]
 800c260:	4606      	mov	r6, r0
 800c262:	b9ad      	cbnz	r5, 800c290 <rmw_uxrce_init_client_memory+0x38>
 800c264:	23c8      	movs	r3, #200	@ 0xc8
 800c266:	e9c0 5500 	strd	r5, r5, [r0]
 800c26a:	6083      	str	r3, [r0, #8]
 800c26c:	f240 1301 	movw	r3, #257	@ 0x101
 800c270:	4617      	mov	r7, r2
 800c272:	8183      	strh	r3, [r0, #12]
 800c274:	460c      	mov	r4, r1
 800c276:	46a8      	mov	r8, r5
 800c278:	4621      	mov	r1, r4
 800c27a:	4630      	mov	r0, r6
 800c27c:	3501      	adds	r5, #1
 800c27e:	f00b fd5d 	bl	8017d3c <put_memory>
 800c282:	42af      	cmp	r7, r5
 800c284:	60a4      	str	r4, [r4, #8]
 800c286:	f884 800c 	strb.w	r8, [r4, #12]
 800c28a:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c28e:	d1f3      	bne.n	800c278 <rmw_uxrce_init_client_memory+0x20>
 800c290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop

0800c298 <rmw_uxrce_init_publisher_memory>:
 800c298:	b1e2      	cbz	r2, 800c2d4 <rmw_uxrce_init_publisher_memory+0x3c>
 800c29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29e:	7b05      	ldrb	r5, [r0, #12]
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	b9ad      	cbnz	r5, 800c2d0 <rmw_uxrce_init_publisher_memory+0x38>
 800c2a4:	23d8      	movs	r3, #216	@ 0xd8
 800c2a6:	e9c0 5500 	strd	r5, r5, [r0]
 800c2aa:	6083      	str	r3, [r0, #8]
 800c2ac:	f240 1301 	movw	r3, #257	@ 0x101
 800c2b0:	4617      	mov	r7, r2
 800c2b2:	8183      	strh	r3, [r0, #12]
 800c2b4:	460c      	mov	r4, r1
 800c2b6:	46a8      	mov	r8, r5
 800c2b8:	4621      	mov	r1, r4
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	3501      	adds	r5, #1
 800c2be:	f00b fd3d 	bl	8017d3c <put_memory>
 800c2c2:	42af      	cmp	r7, r5
 800c2c4:	60a4      	str	r4, [r4, #8]
 800c2c6:	f884 800c 	strb.w	r8, [r4, #12]
 800c2ca:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c2ce:	d1f3      	bne.n	800c2b8 <rmw_uxrce_init_publisher_memory+0x20>
 800c2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop

0800c2d8 <rmw_uxrce_init_subscription_memory>:
 800c2d8:	b1e2      	cbz	r2, 800c314 <rmw_uxrce_init_subscription_memory+0x3c>
 800c2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2de:	7b05      	ldrb	r5, [r0, #12]
 800c2e0:	4606      	mov	r6, r0
 800c2e2:	b9ad      	cbnz	r5, 800c310 <rmw_uxrce_init_subscription_memory+0x38>
 800c2e4:	23d8      	movs	r3, #216	@ 0xd8
 800c2e6:	e9c0 5500 	strd	r5, r5, [r0]
 800c2ea:	6083      	str	r3, [r0, #8]
 800c2ec:	f240 1301 	movw	r3, #257	@ 0x101
 800c2f0:	4617      	mov	r7, r2
 800c2f2:	8183      	strh	r3, [r0, #12]
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	46a8      	mov	r8, r5
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	3501      	adds	r5, #1
 800c2fe:	f00b fd1d 	bl	8017d3c <put_memory>
 800c302:	42af      	cmp	r7, r5
 800c304:	60a4      	str	r4, [r4, #8]
 800c306:	f884 800c 	strb.w	r8, [r4, #12]
 800c30a:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c30e:	d1f3      	bne.n	800c2f8 <rmw_uxrce_init_subscription_memory+0x20>
 800c310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c314:	4770      	bx	lr
 800c316:	bf00      	nop

0800c318 <rmw_uxrce_init_node_memory>:
 800c318:	b1e2      	cbz	r2, 800c354 <rmw_uxrce_init_node_memory+0x3c>
 800c31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c31e:	7b05      	ldrb	r5, [r0, #12]
 800c320:	4606      	mov	r6, r0
 800c322:	b9ad      	cbnz	r5, 800c350 <rmw_uxrce_init_node_memory+0x38>
 800c324:	23a4      	movs	r3, #164	@ 0xa4
 800c326:	e9c0 5500 	strd	r5, r5, [r0]
 800c32a:	6083      	str	r3, [r0, #8]
 800c32c:	f240 1301 	movw	r3, #257	@ 0x101
 800c330:	4617      	mov	r7, r2
 800c332:	8183      	strh	r3, [r0, #12]
 800c334:	460c      	mov	r4, r1
 800c336:	46a8      	mov	r8, r5
 800c338:	4621      	mov	r1, r4
 800c33a:	4630      	mov	r0, r6
 800c33c:	3501      	adds	r5, #1
 800c33e:	f00b fcfd 	bl	8017d3c <put_memory>
 800c342:	42af      	cmp	r7, r5
 800c344:	60a4      	str	r4, [r4, #8]
 800c346:	f884 800c 	strb.w	r8, [r4, #12]
 800c34a:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c34e:	d1f3      	bne.n	800c338 <rmw_uxrce_init_node_memory+0x20>
 800c350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop

0800c358 <rmw_uxrce_init_session_memory>:
 800c358:	b1ea      	cbz	r2, 800c396 <rmw_uxrce_init_session_memory+0x3e>
 800c35a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c35e:	7b05      	ldrb	r5, [r0, #12]
 800c360:	4606      	mov	r6, r0
 800c362:	b9b5      	cbnz	r5, 800c392 <rmw_uxrce_init_session_memory+0x3a>
 800c364:	e9c0 5500 	strd	r5, r5, [r0]
 800c368:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c36c:	f240 1301 	movw	r3, #257	@ 0x101
 800c370:	4617      	mov	r7, r2
 800c372:	f8c0 8008 	str.w	r8, [r0, #8]
 800c376:	460c      	mov	r4, r1
 800c378:	8183      	strh	r3, [r0, #12]
 800c37a:	46a9      	mov	r9, r5
 800c37c:	4621      	mov	r1, r4
 800c37e:	4630      	mov	r0, r6
 800c380:	3501      	adds	r5, #1
 800c382:	f00b fcdb 	bl	8017d3c <put_memory>
 800c386:	42af      	cmp	r7, r5
 800c388:	60a4      	str	r4, [r4, #8]
 800c38a:	f884 900c 	strb.w	r9, [r4, #12]
 800c38e:	4444      	add	r4, r8
 800c390:	d1f4      	bne.n	800c37c <rmw_uxrce_init_session_memory+0x24>
 800c392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c396:	4770      	bx	lr

0800c398 <rmw_uxrce_init_topic_memory>:
 800c398:	b1e2      	cbz	r2, 800c3d4 <rmw_uxrce_init_topic_memory+0x3c>
 800c39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c39e:	7b05      	ldrb	r5, [r0, #12]
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	b9ad      	cbnz	r5, 800c3d0 <rmw_uxrce_init_topic_memory+0x38>
 800c3a4:	231c      	movs	r3, #28
 800c3a6:	e9c0 5500 	strd	r5, r5, [r0]
 800c3aa:	6083      	str	r3, [r0, #8]
 800c3ac:	f240 1301 	movw	r3, #257	@ 0x101
 800c3b0:	4617      	mov	r7, r2
 800c3b2:	8183      	strh	r3, [r0, #12]
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	46a8      	mov	r8, r5
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	4630      	mov	r0, r6
 800c3bc:	3501      	adds	r5, #1
 800c3be:	f00b fcbd 	bl	8017d3c <put_memory>
 800c3c2:	42af      	cmp	r7, r5
 800c3c4:	60a4      	str	r4, [r4, #8]
 800c3c6:	f884 800c 	strb.w	r8, [r4, #12]
 800c3ca:	f104 041c 	add.w	r4, r4, #28
 800c3ce:	d1f3      	bne.n	800c3b8 <rmw_uxrce_init_topic_memory+0x20>
 800c3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop

0800c3d8 <rmw_uxrce_init_static_input_buffer_memory>:
 800c3d8:	b1ea      	cbz	r2, 800c416 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3de:	7b05      	ldrb	r5, [r0, #12]
 800c3e0:	4606      	mov	r6, r0
 800c3e2:	b9b5      	cbnz	r5, 800c412 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c3e4:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c3e8:	e9c0 5500 	strd	r5, r5, [r0]
 800c3ec:	6083      	str	r3, [r0, #8]
 800c3ee:	f240 1301 	movw	r3, #257	@ 0x101
 800c3f2:	4617      	mov	r7, r2
 800c3f4:	8183      	strh	r3, [r0, #12]
 800c3f6:	460c      	mov	r4, r1
 800c3f8:	46a8      	mov	r8, r5
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	3501      	adds	r5, #1
 800c400:	f00b fc9c 	bl	8017d3c <put_memory>
 800c404:	42af      	cmp	r7, r5
 800c406:	60a4      	str	r4, [r4, #8]
 800c408:	f884 800c 	strb.w	r8, [r4, #12]
 800c40c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c410:	d1f3      	bne.n	800c3fa <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c416:	4770      	bx	lr

0800c418 <rmw_uxrce_init_init_options_impl_memory>:
 800c418:	b1e2      	cbz	r2, 800c454 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c41e:	7b05      	ldrb	r5, [r0, #12]
 800c420:	4606      	mov	r6, r0
 800c422:	b9ad      	cbnz	r5, 800c450 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c424:	232c      	movs	r3, #44	@ 0x2c
 800c426:	e9c0 5500 	strd	r5, r5, [r0]
 800c42a:	6083      	str	r3, [r0, #8]
 800c42c:	f240 1301 	movw	r3, #257	@ 0x101
 800c430:	4617      	mov	r7, r2
 800c432:	8183      	strh	r3, [r0, #12]
 800c434:	460c      	mov	r4, r1
 800c436:	46a8      	mov	r8, r5
 800c438:	4621      	mov	r1, r4
 800c43a:	4630      	mov	r0, r6
 800c43c:	3501      	adds	r5, #1
 800c43e:	f00b fc7d 	bl	8017d3c <put_memory>
 800c442:	42af      	cmp	r7, r5
 800c444:	60a4      	str	r4, [r4, #8]
 800c446:	f884 800c 	strb.w	r8, [r4, #12]
 800c44a:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800c44e:	d1f3      	bne.n	800c438 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop

0800c458 <rmw_uxrce_init_wait_set_memory>:
 800c458:	b1e2      	cbz	r2, 800c494 <rmw_uxrce_init_wait_set_memory+0x3c>
 800c45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c45e:	7b05      	ldrb	r5, [r0, #12]
 800c460:	4606      	mov	r6, r0
 800c462:	b9ad      	cbnz	r5, 800c490 <rmw_uxrce_init_wait_set_memory+0x38>
 800c464:	231c      	movs	r3, #28
 800c466:	e9c0 5500 	strd	r5, r5, [r0]
 800c46a:	6083      	str	r3, [r0, #8]
 800c46c:	f240 1301 	movw	r3, #257	@ 0x101
 800c470:	4617      	mov	r7, r2
 800c472:	8183      	strh	r3, [r0, #12]
 800c474:	460c      	mov	r4, r1
 800c476:	46a8      	mov	r8, r5
 800c478:	4621      	mov	r1, r4
 800c47a:	4630      	mov	r0, r6
 800c47c:	3501      	adds	r5, #1
 800c47e:	f00b fc5d 	bl	8017d3c <put_memory>
 800c482:	42af      	cmp	r7, r5
 800c484:	60a4      	str	r4, [r4, #8]
 800c486:	f884 800c 	strb.w	r8, [r4, #12]
 800c48a:	f104 041c 	add.w	r4, r4, #28
 800c48e:	d1f3      	bne.n	800c478 <rmw_uxrce_init_wait_set_memory+0x20>
 800c490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop

0800c498 <rmw_uxrce_init_guard_condition_memory>:
 800c498:	b1e2      	cbz	r2, 800c4d4 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c49a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c49e:	7b05      	ldrb	r5, [r0, #12]
 800c4a0:	4606      	mov	r6, r0
 800c4a2:	b9ad      	cbnz	r5, 800c4d0 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c4a4:	2320      	movs	r3, #32
 800c4a6:	e9c0 5500 	strd	r5, r5, [r0]
 800c4aa:	6083      	str	r3, [r0, #8]
 800c4ac:	f240 1301 	movw	r3, #257	@ 0x101
 800c4b0:	4617      	mov	r7, r2
 800c4b2:	8183      	strh	r3, [r0, #12]
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	46a8      	mov	r8, r5
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	3501      	adds	r5, #1
 800c4be:	f00b fc3d 	bl	8017d3c <put_memory>
 800c4c2:	42af      	cmp	r7, r5
 800c4c4:	60a4      	str	r4, [r4, #8]
 800c4c6:	f884 800c 	strb.w	r8, [r4, #12]
 800c4ca:	f104 0420 	add.w	r4, r4, #32
 800c4ce:	d1f3      	bne.n	800c4b8 <rmw_uxrce_init_guard_condition_memory+0x20>
 800c4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop

0800c4d8 <rmw_uxrce_fini_session_memory>:
 800c4d8:	4601      	mov	r1, r0
 800c4da:	4801      	ldr	r0, [pc, #4]	@ (800c4e0 <rmw_uxrce_fini_session_memory+0x8>)
 800c4dc:	f00b bc2e 	b.w	8017d3c <put_memory>
 800c4e0:	200123d0 	.word	0x200123d0

0800c4e4 <rmw_uxrce_fini_node_memory>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	6800      	ldr	r0, [r0, #0]
 800c4ea:	b128      	cbz	r0, 800c4f8 <rmw_uxrce_fini_node_memory+0x14>
 800c4ec:	4b07      	ldr	r3, [pc, #28]	@ (800c50c <rmw_uxrce_fini_node_memory+0x28>)
 800c4ee:	6819      	ldr	r1, [r3, #0]
 800c4f0:	f7f3 fe8e 	bl	8000210 <strcmp>
 800c4f4:	b940      	cbnz	r0, 800c508 <rmw_uxrce_fini_node_memory+0x24>
 800c4f6:	6020      	str	r0, [r4, #0]
 800c4f8:	6861      	ldr	r1, [r4, #4]
 800c4fa:	b129      	cbz	r1, 800c508 <rmw_uxrce_fini_node_memory+0x24>
 800c4fc:	2500      	movs	r5, #0
 800c4fe:	4804      	ldr	r0, [pc, #16]	@ (800c510 <rmw_uxrce_fini_node_memory+0x2c>)
 800c500:	610d      	str	r5, [r1, #16]
 800c502:	f00b fc1b 	bl	8017d3c <put_memory>
 800c506:	6065      	str	r5, [r4, #4]
 800c508:	bd38      	pop	{r3, r4, r5, pc}
 800c50a:	bf00      	nop
 800c50c:	0801e6a4 	.word	0x0801e6a4
 800c510:	20010e14 	.word	0x20010e14

0800c514 <rmw_uxrce_fini_publisher_memory>:
 800c514:	b510      	push	{r4, lr}
 800c516:	4604      	mov	r4, r0
 800c518:	6800      	ldr	r0, [r0, #0]
 800c51a:	b128      	cbz	r0, 800c528 <rmw_uxrce_fini_publisher_memory+0x14>
 800c51c:	4b06      	ldr	r3, [pc, #24]	@ (800c538 <rmw_uxrce_fini_publisher_memory+0x24>)
 800c51e:	6819      	ldr	r1, [r3, #0]
 800c520:	f7f3 fe76 	bl	8000210 <strcmp>
 800c524:	b938      	cbnz	r0, 800c536 <rmw_uxrce_fini_publisher_memory+0x22>
 800c526:	6020      	str	r0, [r4, #0]
 800c528:	6861      	ldr	r1, [r4, #4]
 800c52a:	b121      	cbz	r1, 800c536 <rmw_uxrce_fini_publisher_memory+0x22>
 800c52c:	4803      	ldr	r0, [pc, #12]	@ (800c53c <rmw_uxrce_fini_publisher_memory+0x28>)
 800c52e:	f00b fc05 	bl	8017d3c <put_memory>
 800c532:	2300      	movs	r3, #0
 800c534:	6063      	str	r3, [r4, #4]
 800c536:	bd10      	pop	{r4, pc}
 800c538:	0801e6a4 	.word	0x0801e6a4
 800c53c:	20010d60 	.word	0x20010d60

0800c540 <rmw_uxrce_fini_subscription_memory>:
 800c540:	b510      	push	{r4, lr}
 800c542:	4604      	mov	r4, r0
 800c544:	6800      	ldr	r0, [r0, #0]
 800c546:	b128      	cbz	r0, 800c554 <rmw_uxrce_fini_subscription_memory+0x14>
 800c548:	4b06      	ldr	r3, [pc, #24]	@ (800c564 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c54a:	6819      	ldr	r1, [r3, #0]
 800c54c:	f7f3 fe60 	bl	8000210 <strcmp>
 800c550:	b938      	cbnz	r0, 800c562 <rmw_uxrce_fini_subscription_memory+0x22>
 800c552:	6020      	str	r0, [r4, #0]
 800c554:	6861      	ldr	r1, [r4, #4]
 800c556:	b121      	cbz	r1, 800c562 <rmw_uxrce_fini_subscription_memory+0x22>
 800c558:	4803      	ldr	r0, [pc, #12]	@ (800c568 <rmw_uxrce_fini_subscription_memory+0x28>)
 800c55a:	f00b fbef 	bl	8017d3c <put_memory>
 800c55e:	2300      	movs	r3, #0
 800c560:	6063      	str	r3, [r4, #4]
 800c562:	bd10      	pop	{r4, pc}
 800c564:	0801e6a4 	.word	0x0801e6a4
 800c568:	200104e0 	.word	0x200104e0

0800c56c <rmw_uxrce_fini_service_memory>:
 800c56c:	b510      	push	{r4, lr}
 800c56e:	4604      	mov	r4, r0
 800c570:	6800      	ldr	r0, [r0, #0]
 800c572:	b128      	cbz	r0, 800c580 <rmw_uxrce_fini_service_memory+0x14>
 800c574:	4b06      	ldr	r3, [pc, #24]	@ (800c590 <rmw_uxrce_fini_service_memory+0x24>)
 800c576:	6819      	ldr	r1, [r3, #0]
 800c578:	f7f3 fe4a 	bl	8000210 <strcmp>
 800c57c:	b938      	cbnz	r0, 800c58e <rmw_uxrce_fini_service_memory+0x22>
 800c57e:	6020      	str	r0, [r4, #0]
 800c580:	6861      	ldr	r1, [r4, #4]
 800c582:	b121      	cbz	r1, 800c58e <rmw_uxrce_fini_service_memory+0x22>
 800c584:	4803      	ldr	r0, [pc, #12]	@ (800c594 <rmw_uxrce_fini_service_memory+0x28>)
 800c586:	f00b fbd9 	bl	8017d3c <put_memory>
 800c58a:	2300      	movs	r3, #0
 800c58c:	6063      	str	r3, [r4, #4]
 800c58e:	bd10      	pop	{r4, pc}
 800c590:	0801e6a4 	.word	0x0801e6a4
 800c594:	20010098 	.word	0x20010098

0800c598 <rmw_uxrce_fini_client_memory>:
 800c598:	b510      	push	{r4, lr}
 800c59a:	4604      	mov	r4, r0
 800c59c:	6800      	ldr	r0, [r0, #0]
 800c59e:	b128      	cbz	r0, 800c5ac <rmw_uxrce_fini_client_memory+0x14>
 800c5a0:	4b06      	ldr	r3, [pc, #24]	@ (800c5bc <rmw_uxrce_fini_client_memory+0x24>)
 800c5a2:	6819      	ldr	r1, [r3, #0]
 800c5a4:	f7f3 fe34 	bl	8000210 <strcmp>
 800c5a8:	b938      	cbnz	r0, 800c5ba <rmw_uxrce_fini_client_memory+0x22>
 800c5aa:	6020      	str	r0, [r4, #0]
 800c5ac:	6861      	ldr	r1, [r4, #4]
 800c5ae:	b121      	cbz	r1, 800c5ba <rmw_uxrce_fini_client_memory+0x22>
 800c5b0:	4803      	ldr	r0, [pc, #12]	@ (800c5c0 <rmw_uxrce_fini_client_memory+0x28>)
 800c5b2:	f00b fbc3 	bl	8017d3c <put_memory>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	6063      	str	r3, [r4, #4]
 800c5ba:	bd10      	pop	{r4, pc}
 800c5bc:	0801e6a4 	.word	0x0801e6a4
 800c5c0:	2000ffc0 	.word	0x2000ffc0

0800c5c4 <rmw_uxrce_fini_topic_memory>:
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	4803      	ldr	r0, [pc, #12]	@ (800c5d8 <rmw_uxrce_fini_topic_memory+0x14>)
 800c5cc:	f00b fbb6 	bl	8017d3c <put_memory>
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	61a3      	str	r3, [r4, #24]
 800c5d4:	bd10      	pop	{r4, pc}
 800c5d6:	bf00      	nop
 800c5d8:	2000fee4 	.word	0x2000fee4

0800c5dc <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c5dc:	b082      	sub	sp, #8
 800c5de:	b530      	push	{r4, r5, lr}
 800c5e0:	4929      	ldr	r1, [pc, #164]	@ (800c688 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800c5e2:	ac03      	add	r4, sp, #12
 800c5e4:	e884 000c 	stmia.w	r4, {r2, r3}
 800c5e8:	680c      	ldr	r4, [r1, #0]
 800c5ea:	461d      	mov	r5, r3
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	2c00      	cmp	r4, #0
 800c5f0:	d043      	beq.n	800c67a <rmw_uxrce_get_static_input_buffer_for_entity+0x9e>
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	6883      	ldr	r3, [r0, #8]
 800c5f8:	6840      	ldr	r0, [r0, #4]
 800c5fa:	f8d3 3814 	ldr.w	r3, [r3, #2068]	@ 0x814
 800c5fe:	429a      	cmp	r2, r3
 800c600:	bf08      	it	eq
 800c602:	3101      	addeq	r1, #1
 800c604:	2800      	cmp	r0, #0
 800c606:	d1f6      	bne.n	800c5f6 <rmw_uxrce_get_static_input_buffer_for_entity+0x1a>
 800c608:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c60c:	2b02      	cmp	r3, #2
 800c60e:	d027      	beq.n	800c660 <rmw_uxrce_get_static_input_buffer_for_entity+0x84>
 800c610:	d906      	bls.n	800c620 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c612:	2b03      	cmp	r3, #3
 800c614:	d004      	beq.n	800c620 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c616:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c61a:	2000      	movs	r0, #0
 800c61c:	b002      	add	sp, #8
 800c61e:	4770      	bx	lr
 800c620:	b1fd      	cbz	r5, 800c662 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c622:	428d      	cmp	r5, r1
 800c624:	d81d      	bhi.n	800c662 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c626:	2c00      	cmp	r4, #0
 800c628:	d0f5      	beq.n	800c616 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c62a:	2000      	movs	r0, #0
 800c62c:	f04f 3cff 	mov.w	ip, #4294967295
 800c630:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800c634:	e001      	b.n	800c63a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800c636:	6864      	ldr	r4, [r4, #4]
 800c638:	b1dc      	cbz	r4, 800c672 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800c63a:	68a3      	ldr	r3, [r4, #8]
 800c63c:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 800c640:	428a      	cmp	r2, r1
 800c642:	d1f8      	bne.n	800c636 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c644:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 800c648:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800c64c:	4561      	cmp	r1, ip
 800c64e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c652:	eb73 0e05 	sbcs.w	lr, r3, r5
 800c656:	daee      	bge.n	800c636 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c658:	468c      	mov	ip, r1
 800c65a:	461d      	mov	r5, r3
 800c65c:	4620      	mov	r0, r4
 800c65e:	e7ea      	b.n	800c636 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c660:	b92d      	cbnz	r5, 800c66e <rmw_uxrce_get_static_input_buffer_for_entity+0x92>
 800c662:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c666:	4808      	ldr	r0, [pc, #32]	@ (800c688 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>)
 800c668:	b002      	add	sp, #8
 800c66a:	f00b bb57 	b.w	8017d1c <get_memory>
 800c66e:	428d      	cmp	r5, r1
 800c670:	d8f7      	bhi.n	800c662 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c672:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c676:	b002      	add	sp, #8
 800c678:	4770      	bx	lr
 800c67a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d0ef      	beq.n	800c662 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c682:	d9ee      	bls.n	800c662 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c684:	4621      	mov	r1, r4
 800c686:	e7c4      	b.n	800c612 <rmw_uxrce_get_static_input_buffer_for_entity+0x36>
 800c688:	2000fd30 	.word	0x2000fd30

0800c68c <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c68c:	4b11      	ldr	r3, [pc, #68]	@ (800c6d4 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	b1eb      	cbz	r3, 800c6ce <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c692:	b530      	push	{r4, r5, lr}
 800c694:	4684      	mov	ip, r0
 800c696:	f04f 34ff 	mov.w	r4, #4294967295
 800c69a:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800c69e:	2000      	movs	r0, #0
 800c6a0:	e001      	b.n	800c6a6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	b193      	cbz	r3, 800c6cc <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800c6a6:	689a      	ldr	r2, [r3, #8]
 800c6a8:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c6ac:	458c      	cmp	ip, r1
 800c6ae:	d1f8      	bne.n	800c6a2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800c6b0:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800c6b4:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800c6b8:	42a1      	cmp	r1, r4
 800c6ba:	eb72 050e 	sbcs.w	r5, r2, lr
 800c6be:	daf0      	bge.n	800c6a2 <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	4696      	mov	lr, r2
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1ec      	bne.n	800c6a6 <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800c6cc:	bd30      	pop	{r4, r5, pc}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	2000fd30 	.word	0x2000fd30

0800c6d8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6dc:	4b3c      	ldr	r3, [pc, #240]	@ (800c7d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c6de:	ed2d 8b06 	vpush	{d8-d10}
 800c6e2:	f8d3 8000 	ldr.w	r8, [r3]
 800c6e6:	b08d      	sub	sp, #52	@ 0x34
 800c6e8:	f7ff fd76 	bl	800c1d8 <rmw_uros_epoch_nanos>
 800c6ec:	f1b8 0f00 	cmp.w	r8, #0
 800c6f0:	d05c      	beq.n	800c7ac <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800c6f2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c6f6:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c6fa:	2b04      	cmp	r3, #4
 800c6fc:	ed9f 8b2e 	vldr	d8, [pc, #184]	@ 800c7b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c700:	ed9f ab2f 	vldr	d10, [pc, #188]	@ 800c7c0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c704:	ed9f 9b30 	vldr	d9, [pc, #192]	@ 800c7c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c708:	4683      	mov	fp, r0
 800c70a:	ac04      	add	r4, sp, #16
 800c70c:	468a      	mov	sl, r1
 800c70e:	d03f      	beq.n	800c790 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800c710:	2b05      	cmp	r3, #5
 800c712:	d044      	beq.n	800c79e <rmw_uxrce_clean_expired_static_input_buffer+0xc6>
 800c714:	2b03      	cmp	r3, #3
 800c716:	d03b      	beq.n	800c790 <rmw_uxrce_clean_expired_static_input_buffer+0xb8>
 800c718:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c71c:	ed8d ab06 	vstr	d10, [sp, #24]
 800c720:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c724:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800c728:	ab08      	add	r3, sp, #32
 800c72a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c72c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c730:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c734:	f00b f928 	bl	8017988 <rmw_time_equal>
 800c738:	b118      	cbz	r0, 800c742 <rmw_uxrce_clean_expired_static_input_buffer+0x6a>
 800c73a:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c73e:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c742:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c746:	f8d5 7818 	ldr.w	r7, [r5, #2072]	@ 0x818
 800c74a:	f8d5 681c 	ldr.w	r6, [r5, #2076]	@ 0x81c
 800c74e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800c752:	f00b f96d 	bl	8017a30 <rmw_time_total_nsec>
 800c756:	183f      	adds	r7, r7, r0
 800c758:	eb46 0601 	adc.w	r6, r6, r1
 800c75c:	455f      	cmp	r7, fp
 800c75e:	eb76 060a 	sbcs.w	r6, r6, sl
 800c762:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800c766:	db05      	blt.n	800c774 <rmw_uxrce_clean_expired_static_input_buffer+0x9c>
 800c768:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c76c:	4593      	cmp	fp, r2
 800c76e:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c772:	da03      	bge.n	800c77c <rmw_uxrce_clean_expired_static_input_buffer+0xa4>
 800c774:	4816      	ldr	r0, [pc, #88]	@ (800c7d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c776:	4641      	mov	r1, r8
 800c778:	f00b fae0 	bl	8017d3c <put_memory>
 800c77c:	f1b9 0f00 	cmp.w	r9, #0
 800c780:	d014      	beq.n	800c7ac <rmw_uxrce_clean_expired_static_input_buffer+0xd4>
 800c782:	46c8      	mov	r8, r9
 800c784:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c788:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c78c:	2b04      	cmp	r3, #4
 800c78e:	d1bf      	bne.n	800c710 <rmw_uxrce_clean_expired_static_input_buffer+0x38>
 800c790:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c794:	3340      	adds	r3, #64	@ 0x40
 800c796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c79c:	e7c0      	b.n	800c720 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800c79e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c7a2:	3348      	adds	r3, #72	@ 0x48
 800c7a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c7a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c7aa:	e7b9      	b.n	800c720 <rmw_uxrce_clean_expired_static_input_buffer+0x48>
 800c7ac:	b00d      	add	sp, #52	@ 0x34
 800c7ae:	ecbd 8b06 	vpop	{d8-d10}
 800c7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b6:	bf00      	nop
	...
 800c7c0:	00000001 	.word	0x00000001
 800c7c4:	00000000 	.word	0x00000000
 800c7c8:	0000001e 	.word	0x0000001e
 800c7cc:	00000000 	.word	0x00000000
 800c7d0:	2000fd30 	.word	0x2000fd30

0800c7d4 <run_xrce_session>:
 800c7d4:	b500      	push	{lr}
 800c7d6:	f891 c002 	ldrb.w	ip, [r1, #2]
 800c7da:	b087      	sub	sp, #28
 800c7dc:	f1bc 0f01 	cmp.w	ip, #1
 800c7e0:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c7e4:	d00f      	beq.n	800c806 <run_xrce_session+0x32>
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	f10d 020e 	add.w	r2, sp, #14
 800c7f0:	f10d 0317 	add.w	r3, sp, #23
 800c7f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c7f8:	f005 f97c 	bl	8011af4 <uxr_run_session_until_all_status>
 800c7fc:	b100      	cbz	r0, 800c800 <run_xrce_session+0x2c>
 800c7fe:	2001      	movs	r0, #1
 800c800:	b007      	add	sp, #28
 800c802:	f85d fb04 	ldr.w	pc, [sp], #4
 800c806:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c80a:	f004 fdb5 	bl	8011378 <uxr_flash_output_streams>
 800c80e:	2001      	movs	r0, #1
 800c810:	e7f6      	b.n	800c800 <run_xrce_session+0x2c>
 800c812:	bf00      	nop

0800c814 <convert_qos_profile>:
 800c814:	780a      	ldrb	r2, [r1, #0]
 800c816:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c81a:	f1a2 0202 	sub.w	r2, r2, #2
 800c81e:	fab2 f282 	clz	r2, r2
 800c822:	0952      	lsrs	r2, r2, #5
 800c824:	7082      	strb	r2, [r0, #2]
 800c826:	7a4a      	ldrb	r2, [r1, #9]
 800c828:	8889      	ldrh	r1, [r1, #4]
 800c82a:	8081      	strh	r1, [r0, #4]
 800c82c:	f1a2 0202 	sub.w	r2, r2, #2
 800c830:	f1ac 0c02 	sub.w	ip, ip, #2
 800c834:	fab2 f282 	clz	r2, r2
 800c838:	fabc fc8c 	clz	ip, ip
 800c83c:	0952      	lsrs	r2, r2, #5
 800c83e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c842:	0052      	lsls	r2, r2, #1
 800c844:	f880 c001 	strb.w	ip, [r0, #1]
 800c848:	7002      	strb	r2, [r0, #0]
 800c84a:	4770      	bx	lr

0800c84c <generate_type_name>:
 800c84c:	b530      	push	{r4, r5, lr}
 800c84e:	2300      	movs	r3, #0
 800c850:	700b      	strb	r3, [r1, #0]
 800c852:	6803      	ldr	r3, [r0, #0]
 800c854:	b087      	sub	sp, #28
 800c856:	4614      	mov	r4, r2
 800c858:	b1d3      	cbz	r3, 800c890 <generate_type_name+0x44>
 800c85a:	4a0f      	ldr	r2, [pc, #60]	@ (800c898 <generate_type_name+0x4c>)
 800c85c:	4615      	mov	r5, r2
 800c85e:	9203      	str	r2, [sp, #12]
 800c860:	9500      	str	r5, [sp, #0]
 800c862:	6842      	ldr	r2, [r0, #4]
 800c864:	480d      	ldr	r0, [pc, #52]	@ (800c89c <generate_type_name+0x50>)
 800c866:	9001      	str	r0, [sp, #4]
 800c868:	4608      	mov	r0, r1
 800c86a:	490d      	ldr	r1, [pc, #52]	@ (800c8a0 <generate_type_name+0x54>)
 800c86c:	9204      	str	r2, [sp, #16]
 800c86e:	9105      	str	r1, [sp, #20]
 800c870:	9102      	str	r1, [sp, #8]
 800c872:	4a0c      	ldr	r2, [pc, #48]	@ (800c8a4 <generate_type_name+0x58>)
 800c874:	4621      	mov	r1, r4
 800c876:	f00f faa3 	bl	801bdc0 <sniprintf>
 800c87a:	2800      	cmp	r0, #0
 800c87c:	db05      	blt.n	800c88a <generate_type_name+0x3e>
 800c87e:	4284      	cmp	r4, r0
 800c880:	bfd4      	ite	le
 800c882:	2000      	movle	r0, #0
 800c884:	2001      	movgt	r0, #1
 800c886:	b007      	add	sp, #28
 800c888:	bd30      	pop	{r4, r5, pc}
 800c88a:	2000      	movs	r0, #0
 800c88c:	b007      	add	sp, #28
 800c88e:	bd30      	pop	{r4, r5, pc}
 800c890:	4b05      	ldr	r3, [pc, #20]	@ (800c8a8 <generate_type_name+0x5c>)
 800c892:	4a01      	ldr	r2, [pc, #4]	@ (800c898 <generate_type_name+0x4c>)
 800c894:	461d      	mov	r5, r3
 800c896:	e7e2      	b.n	800c85e <generate_type_name+0x12>
 800c898:	0801d2b8 	.word	0x0801d2b8
 800c89c:	0801d2d0 	.word	0x0801d2d0
 800c8a0:	0801d2cc 	.word	0x0801d2cc
 800c8a4:	0801d2bc 	.word	0x0801d2bc
 800c8a8:	0801d328 	.word	0x0801d328

0800c8ac <generate_topic_name>:
 800c8ac:	b510      	push	{r4, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	9000      	str	r0, [sp, #0]
 800c8b4:	4b08      	ldr	r3, [pc, #32]	@ (800c8d8 <generate_topic_name+0x2c>)
 800c8b6:	4a09      	ldr	r2, [pc, #36]	@ (800c8dc <generate_topic_name+0x30>)
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	4621      	mov	r1, r4
 800c8bc:	f00f fa80 	bl	801bdc0 <sniprintf>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	db05      	blt.n	800c8d0 <generate_topic_name+0x24>
 800c8c4:	4284      	cmp	r4, r0
 800c8c6:	bfd4      	ite	le
 800c8c8:	2000      	movle	r0, #0
 800c8ca:	2001      	movgt	r0, #1
 800c8cc:	b002      	add	sp, #8
 800c8ce:	bd10      	pop	{r4, pc}
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	b002      	add	sp, #8
 800c8d4:	bd10      	pop	{r4, pc}
 800c8d6:	bf00      	nop
 800c8d8:	0801dfe8 	.word	0x0801dfe8
 800c8dc:	0801d2d4 	.word	0x0801d2d4

0800c8e0 <is_uxrce_rmw_identifier_valid>:
 800c8e0:	b510      	push	{r4, lr}
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	b140      	cbz	r0, 800c8f8 <is_uxrce_rmw_identifier_valid+0x18>
 800c8e6:	f00b fa9f 	bl	8017e28 <rmw_get_implementation_identifier>
 800c8ea:	4601      	mov	r1, r0
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f7f3 fc8f 	bl	8000210 <strcmp>
 800c8f2:	fab0 f080 	clz	r0, r0
 800c8f6:	0940      	lsrs	r0, r0, #5
 800c8f8:	bd10      	pop	{r4, pc}
 800c8fa:	bf00      	nop

0800c8fc <get_message_typesupport_handle>:
 800c8fc:	6883      	ldr	r3, [r0, #8]
 800c8fe:	4718      	bx	r3

0800c900 <get_message_typesupport_handle_function>:
 800c900:	b510      	push	{r4, lr}
 800c902:	4604      	mov	r4, r0
 800c904:	6800      	ldr	r0, [r0, #0]
 800c906:	f7f3 fc83 	bl	8000210 <strcmp>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	bf0c      	ite	eq
 800c90e:	4620      	moveq	r0, r4
 800c910:	2000      	movne	r0, #0
 800c912:	bd10      	pop	{r4, pc}

0800c914 <rosidl_runtime_c__float__Sequence__init>:
 800c914:	b1b0      	cbz	r0, 800c944 <rosidl_runtime_c__float__Sequence__init+0x30>
 800c916:	b530      	push	{r4, r5, lr}
 800c918:	460d      	mov	r5, r1
 800c91a:	b087      	sub	sp, #28
 800c91c:	4604      	mov	r4, r0
 800c91e:	b931      	cbnz	r1, 800c92e <rosidl_runtime_c__float__Sequence__init+0x1a>
 800c920:	4608      	mov	r0, r1
 800c922:	e9c4 0500 	strd	r0, r5, [r4]
 800c926:	60a5      	str	r5, [r4, #8]
 800c928:	2001      	movs	r0, #1
 800c92a:	b007      	add	sp, #28
 800c92c:	bd30      	pop	{r4, r5, pc}
 800c92e:	a801      	add	r0, sp, #4
 800c930:	f7ff f96e 	bl	800bc10 <rcutils_get_default_allocator>
 800c934:	9b01      	ldr	r3, [sp, #4]
 800c936:	9905      	ldr	r1, [sp, #20]
 800c938:	00a8      	lsls	r0, r5, #2
 800c93a:	4798      	blx	r3
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d1f0      	bne.n	800c922 <rosidl_runtime_c__float__Sequence__init+0xe>
 800c940:	2000      	movs	r0, #0
 800c942:	e7f2      	b.n	800c92a <rosidl_runtime_c__float__Sequence__init+0x16>
 800c944:	2000      	movs	r0, #0
 800c946:	4770      	bx	lr

0800c948 <rosidl_runtime_c__float__Sequence__fini>:
 800c948:	b188      	cbz	r0, 800c96e <rosidl_runtime_c__float__Sequence__fini+0x26>
 800c94a:	b510      	push	{r4, lr}
 800c94c:	6803      	ldr	r3, [r0, #0]
 800c94e:	b086      	sub	sp, #24
 800c950:	4604      	mov	r4, r0
 800c952:	b153      	cbz	r3, 800c96a <rosidl_runtime_c__float__Sequence__fini+0x22>
 800c954:	a801      	add	r0, sp, #4
 800c956:	f7ff f95b 	bl	800bc10 <rcutils_get_default_allocator>
 800c95a:	9b02      	ldr	r3, [sp, #8]
 800c95c:	9905      	ldr	r1, [sp, #20]
 800c95e:	6820      	ldr	r0, [r4, #0]
 800c960:	4798      	blx	r3
 800c962:	2300      	movs	r3, #0
 800c964:	e9c4 3300 	strd	r3, r3, [r4]
 800c968:	60a3      	str	r3, [r4, #8]
 800c96a:	b006      	add	sp, #24
 800c96c:	bd10      	pop	{r4, pc}
 800c96e:	4770      	bx	lr

0800c970 <rosidl_runtime_c__double__Sequence__init>:
 800c970:	b1b0      	cbz	r0, 800c9a0 <rosidl_runtime_c__double__Sequence__init+0x30>
 800c972:	b530      	push	{r4, r5, lr}
 800c974:	460d      	mov	r5, r1
 800c976:	b087      	sub	sp, #28
 800c978:	4604      	mov	r4, r0
 800c97a:	b931      	cbnz	r1, 800c98a <rosidl_runtime_c__double__Sequence__init+0x1a>
 800c97c:	4608      	mov	r0, r1
 800c97e:	e9c4 0500 	strd	r0, r5, [r4]
 800c982:	60a5      	str	r5, [r4, #8]
 800c984:	2001      	movs	r0, #1
 800c986:	b007      	add	sp, #28
 800c988:	bd30      	pop	{r4, r5, pc}
 800c98a:	a801      	add	r0, sp, #4
 800c98c:	f7ff f940 	bl	800bc10 <rcutils_get_default_allocator>
 800c990:	9b01      	ldr	r3, [sp, #4]
 800c992:	9905      	ldr	r1, [sp, #20]
 800c994:	00e8      	lsls	r0, r5, #3
 800c996:	4798      	blx	r3
 800c998:	2800      	cmp	r0, #0
 800c99a:	d1f0      	bne.n	800c97e <rosidl_runtime_c__double__Sequence__init+0xe>
 800c99c:	2000      	movs	r0, #0
 800c99e:	e7f2      	b.n	800c986 <rosidl_runtime_c__double__Sequence__init+0x16>
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	4770      	bx	lr

0800c9a4 <rosidl_runtime_c__double__Sequence__fini>:
 800c9a4:	b188      	cbz	r0, 800c9ca <rosidl_runtime_c__double__Sequence__fini+0x26>
 800c9a6:	b510      	push	{r4, lr}
 800c9a8:	6803      	ldr	r3, [r0, #0]
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	4604      	mov	r4, r0
 800c9ae:	b153      	cbz	r3, 800c9c6 <rosidl_runtime_c__double__Sequence__fini+0x22>
 800c9b0:	a801      	add	r0, sp, #4
 800c9b2:	f7ff f92d 	bl	800bc10 <rcutils_get_default_allocator>
 800c9b6:	9b02      	ldr	r3, [sp, #8]
 800c9b8:	9905      	ldr	r1, [sp, #20]
 800c9ba:	6820      	ldr	r0, [r4, #0]
 800c9bc:	4798      	blx	r3
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e9c4 3300 	strd	r3, r3, [r4]
 800c9c4:	60a3      	str	r3, [r4, #8]
 800c9c6:	b006      	add	sp, #24
 800c9c8:	bd10      	pop	{r4, pc}
 800c9ca:	4770      	bx	lr

0800c9cc <rosidl_runtime_c__int32__Sequence__init>:
 800c9cc:	b1b0      	cbz	r0, 800c9fc <rosidl_runtime_c__int32__Sequence__init+0x30>
 800c9ce:	b530      	push	{r4, r5, lr}
 800c9d0:	460d      	mov	r5, r1
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	b931      	cbnz	r1, 800c9e6 <rosidl_runtime_c__int32__Sequence__init+0x1a>
 800c9d8:	4608      	mov	r0, r1
 800c9da:	e9c4 0500 	strd	r0, r5, [r4]
 800c9de:	60a5      	str	r5, [r4, #8]
 800c9e0:	2001      	movs	r0, #1
 800c9e2:	b007      	add	sp, #28
 800c9e4:	bd30      	pop	{r4, r5, pc}
 800c9e6:	a801      	add	r0, sp, #4
 800c9e8:	f7ff f912 	bl	800bc10 <rcutils_get_default_allocator>
 800c9ec:	9b01      	ldr	r3, [sp, #4]
 800c9ee:	9905      	ldr	r1, [sp, #20]
 800c9f0:	00a8      	lsls	r0, r5, #2
 800c9f2:	4798      	blx	r3
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d1f0      	bne.n	800c9da <rosidl_runtime_c__int32__Sequence__init+0xe>
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	e7f2      	b.n	800c9e2 <rosidl_runtime_c__int32__Sequence__init+0x16>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	4770      	bx	lr

0800ca00 <rosidl_runtime_c__int32__Sequence__fini>:
 800ca00:	b188      	cbz	r0, 800ca26 <rosidl_runtime_c__int32__Sequence__fini+0x26>
 800ca02:	b510      	push	{r4, lr}
 800ca04:	6803      	ldr	r3, [r0, #0]
 800ca06:	b086      	sub	sp, #24
 800ca08:	4604      	mov	r4, r0
 800ca0a:	b153      	cbz	r3, 800ca22 <rosidl_runtime_c__int32__Sequence__fini+0x22>
 800ca0c:	a801      	add	r0, sp, #4
 800ca0e:	f7ff f8ff 	bl	800bc10 <rcutils_get_default_allocator>
 800ca12:	9b02      	ldr	r3, [sp, #8]
 800ca14:	9905      	ldr	r1, [sp, #20]
 800ca16:	6820      	ldr	r0, [r4, #0]
 800ca18:	4798      	blx	r3
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	e9c4 3300 	strd	r3, r3, [r4]
 800ca20:	60a3      	str	r3, [r4, #8]
 800ca22:	b006      	add	sp, #24
 800ca24:	bd10      	pop	{r4, pc}
 800ca26:	4770      	bx	lr

0800ca28 <rosidl_runtime_c__String__init>:
 800ca28:	b1b0      	cbz	r0, 800ca58 <rosidl_runtime_c__String__init+0x30>
 800ca2a:	b510      	push	{r4, lr}
 800ca2c:	b086      	sub	sp, #24
 800ca2e:	4604      	mov	r4, r0
 800ca30:	a801      	add	r0, sp, #4
 800ca32:	f7ff f8ed 	bl	800bc10 <rcutils_get_default_allocator>
 800ca36:	9b01      	ldr	r3, [sp, #4]
 800ca38:	9905      	ldr	r1, [sp, #20]
 800ca3a:	2001      	movs	r0, #1
 800ca3c:	4798      	blx	r3
 800ca3e:	6020      	str	r0, [r4, #0]
 800ca40:	b138      	cbz	r0, 800ca52 <rosidl_runtime_c__String__init+0x2a>
 800ca42:	2200      	movs	r2, #0
 800ca44:	2301      	movs	r3, #1
 800ca46:	7002      	strb	r2, [r0, #0]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800ca4e:	b006      	add	sp, #24
 800ca50:	bd10      	pop	{r4, pc}
 800ca52:	2000      	movs	r0, #0
 800ca54:	b006      	add	sp, #24
 800ca56:	bd10      	pop	{r4, pc}
 800ca58:	2000      	movs	r0, #0
 800ca5a:	4770      	bx	lr

0800ca5c <rosidl_runtime_c__String__fini>:
 800ca5c:	b320      	cbz	r0, 800caa8 <rosidl_runtime_c__String__fini+0x4c>
 800ca5e:	b510      	push	{r4, lr}
 800ca60:	6803      	ldr	r3, [r0, #0]
 800ca62:	b086      	sub	sp, #24
 800ca64:	4604      	mov	r4, r0
 800ca66:	b173      	cbz	r3, 800ca86 <rosidl_runtime_c__String__fini+0x2a>
 800ca68:	6883      	ldr	r3, [r0, #8]
 800ca6a:	b1f3      	cbz	r3, 800caaa <rosidl_runtime_c__String__fini+0x4e>
 800ca6c:	a801      	add	r0, sp, #4
 800ca6e:	f7ff f8cf 	bl	800bc10 <rcutils_get_default_allocator>
 800ca72:	9b02      	ldr	r3, [sp, #8]
 800ca74:	9905      	ldr	r1, [sp, #20]
 800ca76:	6820      	ldr	r0, [r4, #0]
 800ca78:	4798      	blx	r3
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e9c4 3300 	strd	r3, r3, [r4]
 800ca80:	60a3      	str	r3, [r4, #8]
 800ca82:	b006      	add	sp, #24
 800ca84:	bd10      	pop	{r4, pc}
 800ca86:	6843      	ldr	r3, [r0, #4]
 800ca88:	b9db      	cbnz	r3, 800cac2 <rosidl_runtime_c__String__fini+0x66>
 800ca8a:	6883      	ldr	r3, [r0, #8]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d0f8      	beq.n	800ca82 <rosidl_runtime_c__String__fini+0x26>
 800ca90:	4b12      	ldr	r3, [pc, #72]	@ (800cadc <rosidl_runtime_c__String__fini+0x80>)
 800ca92:	4813      	ldr	r0, [pc, #76]	@ (800cae0 <rosidl_runtime_c__String__fini+0x84>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	2251      	movs	r2, #81	@ 0x51
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	f00f f982 	bl	801bda4 <fwrite>
 800caa0:	f04f 30ff 	mov.w	r0, #4294967295
 800caa4:	f00e fe3e 	bl	801b724 <exit>
 800caa8:	4770      	bx	lr
 800caaa:	4b0c      	ldr	r3, [pc, #48]	@ (800cadc <rosidl_runtime_c__String__fini+0x80>)
 800caac:	480d      	ldr	r0, [pc, #52]	@ (800cae4 <rosidl_runtime_c__String__fini+0x88>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	224c      	movs	r2, #76	@ 0x4c
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	2101      	movs	r1, #1
 800cab6:	f00f f975 	bl	801bda4 <fwrite>
 800caba:	f04f 30ff 	mov.w	r0, #4294967295
 800cabe:	f00e fe31 	bl	801b724 <exit>
 800cac2:	4b06      	ldr	r3, [pc, #24]	@ (800cadc <rosidl_runtime_c__String__fini+0x80>)
 800cac4:	4808      	ldr	r0, [pc, #32]	@ (800cae8 <rosidl_runtime_c__String__fini+0x8c>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	224e      	movs	r2, #78	@ 0x4e
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	2101      	movs	r1, #1
 800cace:	f00f f969 	bl	801bda4 <fwrite>
 800cad2:	f04f 30ff 	mov.w	r0, #4294967295
 800cad6:	f00e fe25 	bl	801b724 <exit>
 800cada:	bf00      	nop
 800cadc:	200042fc 	.word	0x200042fc
 800cae0:	0801d37c 	.word	0x0801d37c
 800cae4:	0801d2dc 	.word	0x0801d2dc
 800cae8:	0801d32c 	.word	0x0801d32c

0800caec <rosidl_runtime_c__String__assign>:
 800caec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf0:	460c      	mov	r4, r1
 800caf2:	b086      	sub	sp, #24
 800caf4:	b319      	cbz	r1, 800cb3e <rosidl_runtime_c__String__assign+0x52>
 800caf6:	4605      	mov	r5, r0
 800caf8:	4608      	mov	r0, r1
 800cafa:	f7f3 fbe9 	bl	80002d0 <strlen>
 800cafe:	4606      	mov	r6, r0
 800cb00:	b1cd      	cbz	r5, 800cb36 <rosidl_runtime_c__String__assign+0x4a>
 800cb02:	a801      	add	r0, sp, #4
 800cb04:	f106 0801 	add.w	r8, r6, #1
 800cb08:	f7ff f882 	bl	800bc10 <rcutils_get_default_allocator>
 800cb0c:	9b03      	ldr	r3, [sp, #12]
 800cb0e:	9a05      	ldr	r2, [sp, #20]
 800cb10:	6828      	ldr	r0, [r5, #0]
 800cb12:	4641      	mov	r1, r8
 800cb14:	4798      	blx	r3
 800cb16:	4607      	mov	r7, r0
 800cb18:	b168      	cbz	r0, 800cb36 <rosidl_runtime_c__String__assign+0x4a>
 800cb1a:	4621      	mov	r1, r4
 800cb1c:	4632      	mov	r2, r6
 800cb1e:	f00f fb9e 	bl	801c25e <memcpy>
 800cb22:	2300      	movs	r3, #0
 800cb24:	2001      	movs	r0, #1
 800cb26:	55bb      	strb	r3, [r7, r6]
 800cb28:	e9c5 7600 	strd	r7, r6, [r5]
 800cb2c:	f8c5 8008 	str.w	r8, [r5, #8]
 800cb30:	b006      	add	sp, #24
 800cb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb36:	2000      	movs	r0, #0
 800cb38:	b006      	add	sp, #24
 800cb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3e:	4608      	mov	r0, r1
 800cb40:	b006      	add	sp, #24
 800cb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb46:	bf00      	nop

0800cb48 <rosidl_runtime_c__String__Sequence__init>:
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d047      	beq.n	800cbdc <rosidl_runtime_c__String__Sequence__init+0x94>
 800cb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb50:	468a      	mov	sl, r1
 800cb52:	b08b      	sub	sp, #44	@ 0x2c
 800cb54:	4606      	mov	r6, r0
 800cb56:	b941      	cbnz	r1, 800cb6a <rosidl_runtime_c__String__Sequence__init+0x22>
 800cb58:	460f      	mov	r7, r1
 800cb5a:	2001      	movs	r0, #1
 800cb5c:	e9c6 7a00 	strd	r7, sl, [r6]
 800cb60:	f8c6 a008 	str.w	sl, [r6, #8]
 800cb64:	b00b      	add	sp, #44	@ 0x2c
 800cb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb6a:	4668      	mov	r0, sp
 800cb6c:	f7ff f850 	bl	800bc10 <rcutils_get_default_allocator>
 800cb70:	e9dd 3903 	ldrd	r3, r9, [sp, #12]
 800cb74:	210c      	movs	r1, #12
 800cb76:	464a      	mov	r2, r9
 800cb78:	4650      	mov	r0, sl
 800cb7a:	4798      	blx	r3
 800cb7c:	4607      	mov	r7, r0
 800cb7e:	b348      	cbz	r0, 800cbd4 <rosidl_runtime_c__String__Sequence__init+0x8c>
 800cb80:	2400      	movs	r4, #0
 800cb82:	1d05      	adds	r5, r0, #4
 800cb84:	f04f 0801 	mov.w	r8, #1
 800cb88:	46a3      	mov	fp, r4
 800cb8a:	e007      	b.n	800cb9c <rosidl_runtime_c__String__Sequence__init+0x54>
 800cb8c:	3401      	adds	r4, #1
 800cb8e:	350c      	adds	r5, #12
 800cb90:	45a2      	cmp	sl, r4
 800cb92:	f880 b000 	strb.w	fp, [r0]
 800cb96:	e945 b803 	strd	fp, r8, [r5, #-12]
 800cb9a:	d0de      	beq.n	800cb5a <rosidl_runtime_c__String__Sequence__init+0x12>
 800cb9c:	a805      	add	r0, sp, #20
 800cb9e:	f7ff f837 	bl	800bc10 <rcutils_get_default_allocator>
 800cba2:	9b05      	ldr	r3, [sp, #20]
 800cba4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cba6:	2001      	movs	r0, #1
 800cba8:	4798      	blx	r3
 800cbaa:	f845 0c04 	str.w	r0, [r5, #-4]
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d1ec      	bne.n	800cb8c <rosidl_runtime_c__String__Sequence__init+0x44>
 800cbb2:	b15c      	cbz	r4, 800cbcc <rosidl_runtime_c__String__Sequence__init+0x84>
 800cbb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800cbb8:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800cbbc:	3c0c      	subs	r4, #12
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f7ff ff4c 	bl	800ca5c <rosidl_runtime_c__String__fini>
 800cbc4:	42bc      	cmp	r4, r7
 800cbc6:	f1a4 040c 	sub.w	r4, r4, #12
 800cbca:	d1f8      	bne.n	800cbbe <rosidl_runtime_c__String__Sequence__init+0x76>
 800cbcc:	9b01      	ldr	r3, [sp, #4]
 800cbce:	4649      	mov	r1, r9
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	4798      	blx	r3
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	b00b      	add	sp, #44	@ 0x2c
 800cbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbdc:	2000      	movs	r0, #0
 800cbde:	4770      	bx	lr

0800cbe0 <rosidl_runtime_c__String__Sequence__fini>:
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d044      	beq.n	800cc6e <rosidl_runtime_c__String__Sequence__fini+0x8e>
 800cbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbe6:	6803      	ldr	r3, [r0, #0]
 800cbe8:	b087      	sub	sp, #28
 800cbea:	4606      	mov	r6, r0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d03c      	beq.n	800cc6a <rosidl_runtime_c__String__Sequence__fini+0x8a>
 800cbf0:	6881      	ldr	r1, [r0, #8]
 800cbf2:	2900      	cmp	r1, #0
 800cbf4:	d02e      	beq.n	800cc54 <rosidl_runtime_c__String__Sequence__fini+0x74>
 800cbf6:	2400      	movs	r4, #0
 800cbf8:	4627      	mov	r7, r4
 800cbfa:	e011      	b.n	800cc20 <rosidl_runtime_c__String__Sequence__fini+0x40>
 800cbfc:	68ab      	ldr	r3, [r5, #8]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d036      	beq.n	800cc70 <rosidl_runtime_c__String__Sequence__fini+0x90>
 800cc02:	a801      	add	r0, sp, #4
 800cc04:	f7ff f804 	bl	800bc10 <rcutils_get_default_allocator>
 800cc08:	9905      	ldr	r1, [sp, #20]
 800cc0a:	9b02      	ldr	r3, [sp, #8]
 800cc0c:	6828      	ldr	r0, [r5, #0]
 800cc0e:	4798      	blx	r3
 800cc10:	e9c5 7701 	strd	r7, r7, [r5, #4]
 800cc14:	68b1      	ldr	r1, [r6, #8]
 800cc16:	602f      	str	r7, [r5, #0]
 800cc18:	3401      	adds	r4, #1
 800cc1a:	428c      	cmp	r4, r1
 800cc1c:	d21a      	bcs.n	800cc54 <rosidl_runtime_c__String__Sequence__fini+0x74>
 800cc1e:	6833      	ldr	r3, [r6, #0]
 800cc20:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800cc24:	eb13 0582 	adds.w	r5, r3, r2, lsl #2
 800cc28:	d0f6      	beq.n	800cc18 <rosidl_runtime_c__String__Sequence__fini+0x38>
 800cc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d1e4      	bne.n	800cbfc <rosidl_runtime_c__String__Sequence__fini+0x1c>
 800cc32:	686b      	ldr	r3, [r5, #4]
 800cc34:	bb43      	cbnz	r3, 800cc88 <rosidl_runtime_c__String__Sequence__fini+0xa8>
 800cc36:	68ab      	ldr	r3, [r5, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d0ed      	beq.n	800cc18 <rosidl_runtime_c__String__Sequence__fini+0x38>
 800cc3c:	4b18      	ldr	r3, [pc, #96]	@ (800cca0 <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 800cc3e:	4819      	ldr	r0, [pc, #100]	@ (800cca4 <rosidl_runtime_c__String__Sequence__fini+0xc4>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2251      	movs	r2, #81	@ 0x51
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	2101      	movs	r1, #1
 800cc48:	f00f f8ac 	bl	801bda4 <fwrite>
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	f00e fd68 	bl	801b724 <exit>
 800cc54:	a801      	add	r0, sp, #4
 800cc56:	f7fe ffdb 	bl	800bc10 <rcutils_get_default_allocator>
 800cc5a:	9b02      	ldr	r3, [sp, #8]
 800cc5c:	9905      	ldr	r1, [sp, #20]
 800cc5e:	6830      	ldr	r0, [r6, #0]
 800cc60:	4798      	blx	r3
 800cc62:	2300      	movs	r3, #0
 800cc64:	e9c6 3300 	strd	r3, r3, [r6]
 800cc68:	60b3      	str	r3, [r6, #8]
 800cc6a:	b007      	add	sp, #28
 800cc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc6e:	4770      	bx	lr
 800cc70:	4b0b      	ldr	r3, [pc, #44]	@ (800cca0 <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 800cc72:	480d      	ldr	r0, [pc, #52]	@ (800cca8 <rosidl_runtime_c__String__Sequence__fini+0xc8>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	224c      	movs	r2, #76	@ 0x4c
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	f00f f892 	bl	801bda4 <fwrite>
 800cc80:	f04f 30ff 	mov.w	r0, #4294967295
 800cc84:	f00e fd4e 	bl	801b724 <exit>
 800cc88:	4b05      	ldr	r3, [pc, #20]	@ (800cca0 <rosidl_runtime_c__String__Sequence__fini+0xc0>)
 800cc8a:	4808      	ldr	r0, [pc, #32]	@ (800ccac <rosidl_runtime_c__String__Sequence__fini+0xcc>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	224e      	movs	r2, #78	@ 0x4e
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	2101      	movs	r1, #1
 800cc94:	f00f f886 	bl	801bda4 <fwrite>
 800cc98:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9c:	f00e fd42 	bl	801b724 <exit>
 800cca0:	200042fc 	.word	0x200042fc
 800cca4:	0801d37c 	.word	0x0801d37c
 800cca8:	0801d2dc 	.word	0x0801d2dc
 800ccac:	0801d32c 	.word	0x0801d32c

0800ccb0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ccb0:	4b04      	ldr	r3, [pc, #16]	@ (800ccc4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	b10a      	cbz	r2, 800ccba <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xa>
 800ccb6:	4803      	ldr	r0, [pc, #12]	@ (800ccc4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ccb8:	4770      	bx	lr
 800ccba:	4a03      	ldr	r2, [pc, #12]	@ (800ccc8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x18>)
 800ccbc:	4801      	ldr	r0, [pc, #4]	@ (800ccc4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x14>)
 800ccbe:	6812      	ldr	r2, [r2, #0]
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	4770      	bx	lr
 800ccc4:	20000048 	.word	0x20000048
 800ccc8:	20000d70 	.word	0x20000d70

0800cccc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800cccc:	4a02      	ldr	r2, [pc, #8]	@ (800ccd8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0xc>)
 800ccce:	4b03      	ldr	r3, [pc, #12]	@ (800ccdc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x10>)
 800ccd0:	6812      	ldr	r2, [r2, #0]
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	4770      	bx	lr
 800ccd6:	bf00      	nop
 800ccd8:	20000d70 	.word	0x20000d70
 800ccdc:	20000048 	.word	0x20000048

0800cce0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800cce0:	4b04      	ldr	r3, [pc, #16]	@ (800ccf4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>)
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	b10a      	cbz	r2, 800ccea <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0xa>
 800cce6:	4803      	ldr	r0, [pc, #12]	@ (800ccf4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>)
 800cce8:	4770      	bx	lr
 800ccea:	4a03      	ldr	r2, [pc, #12]	@ (800ccf8 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x18>)
 800ccec:	4801      	ldr	r0, [pc, #4]	@ (800ccf4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>)
 800ccee:	6812      	ldr	r2, [r2, #0]
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	4770      	bx	lr
 800ccf4:	20000068 	.word	0x20000068
 800ccf8:	20000d70 	.word	0x20000d70

0800ccfc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800ccfc:	4a02      	ldr	r2, [pc, #8]	@ (800cd08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0xc>)
 800ccfe:	4b03      	ldr	r3, [pc, #12]	@ (800cd0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x10>)
 800cd00:	6812      	ldr	r2, [r2, #0]
 800cd02:	601a      	str	r2, [r3, #0]
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	20000d70 	.word	0x20000d70
 800cd0c:	20000068 	.word	0x20000068

0800cd10 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range>:
 800cd10:	4b04      	ldr	r3, [pc, #16]	@ (800cd24 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x14>)
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	b10a      	cbz	r2, 800cd1a <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range+0xa>
 800cd16:	4803      	ldr	r0, [pc, #12]	@ (800cd24 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x14>)
 800cd18:	4770      	bx	lr
 800cd1a:	4a03      	ldr	r2, [pc, #12]	@ (800cd28 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x18>)
 800cd1c:	4801      	ldr	r0, [pc, #4]	@ (800cd24 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x14>)
 800cd1e:	6812      	ldr	r2, [r2, #0]
 800cd20:	601a      	str	r2, [r3, #0]
 800cd22:	4770      	bx	lr
 800cd24:	20000088 	.word	0x20000088
 800cd28:	20000d70 	.word	0x20000d70

0800cd2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range>:
 800cd2c:	4a02      	ldr	r2, [pc, #8]	@ (800cd38 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range+0xc>)
 800cd2e:	4b03      	ldr	r3, [pc, #12]	@ (800cd3c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x10>)
 800cd30:	6812      	ldr	r2, [r2, #0]
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	20000d70 	.word	0x20000d70
 800cd3c:	20000088 	.word	0x20000088

0800cd40 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 800cd40:	4b04      	ldr	r3, [pc, #16]	@ (800cd54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	b10a      	cbz	r2, 800cd4a <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xa>
 800cd46:	4803      	ldr	r0, [pc, #12]	@ (800cd54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 800cd48:	4770      	bx	lr
 800cd4a:	4a03      	ldr	r2, [pc, #12]	@ (800cd58 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x18>)
 800cd4c:	4801      	ldr	r0, [pc, #4]	@ (800cd54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 800cd4e:	6812      	ldr	r2, [r2, #0]
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	4770      	bx	lr
 800cd54:	200000a8 	.word	0x200000a8
 800cd58:	20000d70 	.word	0x20000d70

0800cd5c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 800cd5c:	4a02      	ldr	r2, [pc, #8]	@ (800cd68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xc>)
 800cd5e:	4b03      	ldr	r3, [pc, #12]	@ (800cd6c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x10>)
 800cd60:	6812      	ldr	r2, [r2, #0]
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	20000d70 	.word	0x20000d70
 800cd6c:	200000a8 	.word	0x200000a8

0800cd70 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__orientation_covariance>:
 800cd70:	2009      	movs	r0, #9
 800cd72:	4770      	bx	lr

0800cd74 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__orientation_covariance>:
 800cd74:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop

0800cd7c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__orientation_covariance>:
 800cd7c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cd80:	e9d0 0100 	ldrd	r0, r1, [r0]
 800cd84:	e9c2 0100 	strd	r0, r1, [r2]
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop

0800cd8c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__orientation_covariance>:
 800cd8c:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cd90:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cd94:	e9c0 2300 	strd	r2, r3, [r0]
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop

0800cd9c <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_init_function>:
 800cd9c:	f00c b9b4 	b.w	8019108 <sensor_msgs__msg__Imu__init>

0800cda0 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__Imu_fini_function>:
 800cda0:	f00c b9fe 	b.w	80191a0 <sensor_msgs__msg__Imu__fini>

0800cda4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__angular_velocity_covariance>:
 800cda4:	2009      	movs	r0, #9
 800cda6:	4770      	bx	lr

0800cda8 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__size_function__Imu__linear_acceleration_covariance>:
 800cda8:	2009      	movs	r0, #9
 800cdaa:	4770      	bx	lr

0800cdac <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__orientation_covariance>:
 800cdac:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cdb0:	4770      	bx	lr
 800cdb2:	bf00      	nop

0800cdb4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__linear_acceleration_covariance>:
 800cdb4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop

0800cdbc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__linear_acceleration_covariance>:
 800cdbc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop

0800cdc4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_const_function__Imu__angular_velocity_covariance>:
 800cdc4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop

0800cdcc <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__get_function__Imu__angular_velocity_covariance>:
 800cdcc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop

0800cdd4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__linear_acceleration_covariance>:
 800cdd4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cdd8:	e9d0 0100 	ldrd	r0, r1, [r0]
 800cddc:	e9c2 0100 	strd	r0, r1, [r2]
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop

0800cde4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__linear_acceleration_covariance>:
 800cde4:	e9d2 2300 	ldrd	r2, r3, [r2]
 800cde8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cdec:	e9c0 2300 	strd	r2, r3, [r0]
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop

0800cdf4 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__fetch_function__Imu__angular_velocity_covariance>:
 800cdf4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cdf8:	e9d0 0100 	ldrd	r0, r1, [r0]
 800cdfc:	e9c2 0100 	strd	r0, r1, [r2]
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop

0800ce04 <sensor_msgs__msg__Imu__rosidl_typesupport_introspection_c__assign_function__Imu__angular_velocity_covariance>:
 800ce04:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ce08:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ce0c:	e9c0 2300 	strd	r2, r3, [r0]
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop

0800ce14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800ce14:	b510      	push	{r4, lr}
 800ce16:	f000 fd7d 	bl	800d914 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800ce1a:	4c0b      	ldr	r4, [pc, #44]	@ (800ce48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x34>)
 800ce1c:	60e0      	str	r0, [r4, #12]
 800ce1e:	f001 f8f7 	bl	800e010 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800ce22:	64a0      	str	r0, [r4, #72]	@ 0x48
 800ce24:	f001 f906 	bl	800e034 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ce28:	f8c4 00c0 	str.w	r0, [r4, #192]	@ 0xc0
 800ce2c:	f001 f902 	bl	800e034 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ce30:	4b06      	ldr	r3, [pc, #24]	@ (800ce4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ce32:	f8c4 0138 	str.w	r0, [r4, #312]	@ 0x138
 800ce36:	681a      	ldr	r2, [r3, #0]
 800ce38:	b10a      	cbz	r2, 800ce3e <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x2a>
 800ce3a:	4804      	ldr	r0, [pc, #16]	@ (800ce4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ce3c:	bd10      	pop	{r4, pc}
 800ce3e:	4a04      	ldr	r2, [pc, #16]	@ (800ce50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x3c>)
 800ce40:	4802      	ldr	r0, [pc, #8]	@ (800ce4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x38>)
 800ce42:	6812      	ldr	r2, [r2, #0]
 800ce44:	601a      	str	r2, [r3, #0]
 800ce46:	bd10      	pop	{r4, pc}
 800ce48:	200000e0 	.word	0x200000e0
 800ce4c:	200000c8 	.word	0x200000c8
 800ce50:	20000d74 	.word	0x20000d74

0800ce54 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__name>:
 800ce54:	6840      	ldr	r0, [r0, #4]
 800ce56:	4770      	bx	lr

0800ce58 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__name>:
 800ce58:	6800      	ldr	r0, [r0, #0]
 800ce5a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ce5e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ce62:	4770      	bx	lr

0800ce64 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__name>:
 800ce64:	6803      	ldr	r3, [r0, #0]
 800ce66:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ce6a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800ce6e:	4613      	mov	r3, r2
 800ce70:	c907      	ldmia	r1, {r0, r1, r2}
 800ce72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ce76:	4770      	bx	lr

0800ce78 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__name>:
 800ce78:	4603      	mov	r3, r0
 800ce7a:	468c      	mov	ip, r1
 800ce7c:	ca07      	ldmia	r2, {r0, r1, r2}
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800ce84:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800ce88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop

0800ce90 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__position>:
 800ce90:	6840      	ldr	r0, [r0, #4]
 800ce92:	4770      	bx	lr

0800ce94 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__position>:
 800ce94:	6800      	ldr	r0, [r0, #0]
 800ce96:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800ce9a:	4770      	bx	lr

0800ce9c <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__position>:
 800ce9c:	6803      	ldr	r3, [r0, #0]
 800ce9e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cea2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cea6:	e9c2 0100 	strd	r0, r1, [r2]
 800ceaa:	4770      	bx	lr

0800ceac <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__position>:
 800ceac:	6803      	ldr	r3, [r0, #0]
 800ceae:	ed92 7b00 	vldr	d7, [r2]
 800ceb2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ceb6:	ed83 7b00 	vstr	d7, [r3]
 800ceba:	4770      	bx	lr

0800cebc <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__JointState_init_function>:
 800cebc:	f00c b9e0 	b.w	8019280 <sensor_msgs__msg__JointState__init>

0800cec0 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__JointState_fini_function>:
 800cec0:	f00c ba4a 	b.w	8019358 <sensor_msgs__msg__JointState__fini>

0800cec4 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__name>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4604      	mov	r4, r0
 800cec8:	460d      	mov	r5, r1
 800ceca:	f7ff fe89 	bl	800cbe0 <rosidl_runtime_c__String__Sequence__fini>
 800cece:	4629      	mov	r1, r5
 800ced0:	4620      	mov	r0, r4
 800ced2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ced6:	f7ff be37 	b.w	800cb48 <rosidl_runtime_c__String__Sequence__init>
 800ceda:	bf00      	nop

0800cedc <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__position>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4604      	mov	r4, r0
 800cee0:	460d      	mov	r5, r1
 800cee2:	f7ff fd5f 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 800cee6:	4629      	mov	r1, r5
 800cee8:	4620      	mov	r0, r4
 800ceea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceee:	f7ff bd3f 	b.w	800c970 <rosidl_runtime_c__double__Sequence__init>
 800cef2:	bf00      	nop

0800cef4 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__effort>:
 800cef4:	6840      	ldr	r0, [r0, #4]
 800cef6:	4770      	bx	lr

0800cef8 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__size_function__JointState__velocity>:
 800cef8:	6840      	ldr	r0, [r0, #4]
 800cefa:	4770      	bx	lr

0800cefc <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__effort>:
 800cefc:	6800      	ldr	r0, [r0, #0]
 800cefe:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cf02:	4770      	bx	lr

0800cf04 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__effort>:
 800cf04:	6800      	ldr	r0, [r0, #0]
 800cf06:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cf0a:	4770      	bx	lr

0800cf0c <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_const_function__JointState__velocity>:
 800cf0c:	6800      	ldr	r0, [r0, #0]
 800cf0e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cf12:	4770      	bx	lr

0800cf14 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__name>:
 800cf14:	6800      	ldr	r0, [r0, #0]
 800cf16:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cf1a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cf1e:	4770      	bx	lr

0800cf20 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__position>:
 800cf20:	6800      	ldr	r0, [r0, #0]
 800cf22:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cf26:	4770      	bx	lr

0800cf28 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__get_function__JointState__velocity>:
 800cf28:	6800      	ldr	r0, [r0, #0]
 800cf2a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800cf2e:	4770      	bx	lr

0800cf30 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__effort>:
 800cf30:	6803      	ldr	r3, [r0, #0]
 800cf32:	ed92 7b00 	vldr	d7, [r2]
 800cf36:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cf3a:	ed83 7b00 	vstr	d7, [r3]
 800cf3e:	4770      	bx	lr

0800cf40 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__effort>:
 800cf40:	6803      	ldr	r3, [r0, #0]
 800cf42:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cf46:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf4a:	e9c2 0100 	strd	r0, r1, [r2]
 800cf4e:	4770      	bx	lr

0800cf50 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__fetch_function__JointState__velocity>:
 800cf50:	6803      	ldr	r3, [r0, #0]
 800cf52:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cf56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cf5a:	e9c2 0100 	strd	r0, r1, [r2]
 800cf5e:	4770      	bx	lr

0800cf60 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__assign_function__JointState__velocity>:
 800cf60:	6803      	ldr	r3, [r0, #0]
 800cf62:	ed92 7b00 	vldr	d7, [r2]
 800cf66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cf6a:	ed83 7b00 	vstr	d7, [r3]
 800cf6e:	4770      	bx	lr

0800cf70 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__effort>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	4604      	mov	r4, r0
 800cf74:	460d      	mov	r5, r1
 800cf76:	f7ff fd15 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf82:	f7ff bcf5 	b.w	800c970 <rosidl_runtime_c__double__Sequence__init>
 800cf86:	bf00      	nop

0800cf88 <sensor_msgs__msg__JointState__rosidl_typesupport_introspection_c__resize_function__JointState__velocity>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	460d      	mov	r5, r1
 800cf8e:	f7ff fd09 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 800cf92:	4629      	mov	r1, r5
 800cf94:	4620      	mov	r0, r4
 800cf96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf9a:	f7ff bce9 	b.w	800c970 <rosidl_runtime_c__double__Sequence__init>
 800cf9e:	bf00      	nop

0800cfa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800cfa0:	b508      	push	{r3, lr}
 800cfa2:	f000 fcb7 	bl	800d914 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cfa6:	4b06      	ldr	r3, [pc, #24]	@ (800cfc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x20>)
 800cfa8:	4906      	ldr	r1, [pc, #24]	@ (800cfc4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x24>)
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	60c8      	str	r0, [r1, #12]
 800cfae:	b10a      	cbz	r2, 800cfb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x14>
 800cfb0:	4803      	ldr	r0, [pc, #12]	@ (800cfc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x20>)
 800cfb2:	bd08      	pop	{r3, pc}
 800cfb4:	4a04      	ldr	r2, [pc, #16]	@ (800cfc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x28>)
 800cfb6:	4802      	ldr	r0, [pc, #8]	@ (800cfc0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x20>)
 800cfb8:	6812      	ldr	r2, [r2, #0]
 800cfba:	601a      	str	r2, [r3, #0]
 800cfbc:	bd08      	pop	{r3, pc}
 800cfbe:	bf00      	nop
 800cfc0:	20000284 	.word	0x20000284
 800cfc4:	2000029c 	.word	0x2000029c
 800cfc8:	20000d74 	.word	0x20000d74

0800cfcc <sensor_msgs__msg__Range__rosidl_typesupport_introspection_c__Range_init_function>:
 800cfcc:	f00c ba38 	b.w	8019440 <sensor_msgs__msg__Range__init>

0800cfd0 <sensor_msgs__msg__Range__rosidl_typesupport_introspection_c__Range_fini_function>:
 800cfd0:	f00c ba44 	b.w	801945c <sensor_msgs__msg__Range__fini>

0800cfd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range>:
 800cfd4:	b508      	push	{r3, lr}
 800cfd6:	f000 fc9d 	bl	800d914 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800cfda:	4b06      	ldr	r3, [pc, #24]	@ (800cff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x20>)
 800cfdc:	4906      	ldr	r1, [pc, #24]	@ (800cff8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x24>)
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	60c8      	str	r0, [r1, #12]
 800cfe2:	b10a      	cbz	r2, 800cfe8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x14>
 800cfe4:	4803      	ldr	r0, [pc, #12]	@ (800cff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x20>)
 800cfe6:	bd08      	pop	{r3, pc}
 800cfe8:	4a04      	ldr	r2, [pc, #16]	@ (800cffc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x28>)
 800cfea:	4802      	ldr	r0, [pc, #8]	@ (800cff4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x20>)
 800cfec:	6812      	ldr	r2, [r2, #0]
 800cfee:	601a      	str	r2, [r3, #0]
 800cff0:	bd08      	pop	{r3, pc}
 800cff2:	bf00      	nop
 800cff4:	200003c8 	.word	0x200003c8
 800cff8:	200003e0 	.word	0x200003e0
 800cffc:	20000d74 	.word	0x20000d74

0800d000 <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_init_function>:
 800d000:	f00c ba8c 	b.w	801951c <sensor_msgs__msg__Temperature__init>

0800d004 <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_fini_function>:
 800d004:	f00c ba98 	b.w	8019538 <sensor_msgs__msg__Temperature__fini>

0800d008 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 800d008:	b508      	push	{r3, lr}
 800d00a:	f000 fc83 	bl	800d914 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d00e:	4b06      	ldr	r3, [pc, #24]	@ (800d028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 800d010:	4906      	ldr	r1, [pc, #24]	@ (800d02c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x24>)
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	60c8      	str	r0, [r1, #12]
 800d016:	b10a      	cbz	r2, 800d01c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>
 800d018:	4803      	ldr	r0, [pc, #12]	@ (800d028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 800d01a:	bd08      	pop	{r3, pc}
 800d01c:	4a04      	ldr	r2, [pc, #16]	@ (800d030 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x28>)
 800d01e:	4802      	ldr	r0, [pc, #8]	@ (800d028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 800d020:	6812      	ldr	r2, [r2, #0]
 800d022:	601a      	str	r2, [r3, #0]
 800d024:	bd08      	pop	{r3, pc}
 800d026:	bf00      	nop
 800d028:	20000584 	.word	0x20000584
 800d02c:	2000059c 	.word	0x2000059c
 800d030:	20000d74 	.word	0x20000d74

0800d034 <get_serialized_size_sensor_msgs__msg__Imu.part.0>:
 800d034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d036:	4607      	mov	r7, r0
 800d038:	460e      	mov	r6, r1
 800d03a:	f000 fdb1 	bl	800dba0 <get_serialized_size_std_msgs__msg__Header>
 800d03e:	1834      	adds	r4, r6, r0
 800d040:	4621      	mov	r1, r4
 800d042:	f107 0018 	add.w	r0, r7, #24
 800d046:	f001 f803 	bl	800e050 <get_serialized_size_geometry_msgs__msg__Quaternion>
 800d04a:	4404      	add	r4, r0
 800d04c:	2108      	movs	r1, #8
 800d04e:	4620      	mov	r0, r4
 800d050:	f003 fb70 	bl	8010734 <ucdr_alignment>
 800d054:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800d058:	4425      	add	r5, r4
 800d05a:	4629      	mov	r1, r5
 800d05c:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 800d060:	f001 f8ae 	bl	800e1c0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d064:	4405      	add	r5, r0
 800d066:	2108      	movs	r1, #8
 800d068:	4628      	mov	r0, r5
 800d06a:	f003 fb63 	bl	8010734 <ucdr_alignment>
 800d06e:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800d072:	442c      	add	r4, r5
 800d074:	4621      	mov	r1, r4
 800d076:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 800d07a:	f001 f8a1 	bl	800e1c0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800d07e:	4404      	add	r4, r0
 800d080:	2108      	movs	r1, #8
 800d082:	4620      	mov	r0, r4
 800d084:	f003 fb56 	bl	8010734 <ucdr_alignment>
 800d088:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 800d08c:	4430      	add	r0, r6
 800d08e:	4420      	add	r0, r4
 800d090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d092:	bf00      	nop

0800d094 <get_serialized_size_sensor_msgs__msg__Imu>:
 800d094:	b108      	cbz	r0, 800d09a <get_serialized_size_sensor_msgs__msg__Imu+0x6>
 800d096:	f7ff bfcd 	b.w	800d034 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d09a:	4770      	bx	lr

0800d09c <_Imu__get_serialized_size>:
 800d09c:	b110      	cbz	r0, 800d0a4 <_Imu__get_serialized_size+0x8>
 800d09e:	2100      	movs	r1, #0
 800d0a0:	f7ff bfc8 	b.w	800d034 <get_serialized_size_sensor_msgs__msg__Imu.part.0>
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop

0800d0a8 <_Imu__cdr_deserialize>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	b399      	cbz	r1, 800d116 <_Imu__cdr_deserialize+0x6e>
 800d0ae:	4605      	mov	r5, r0
 800d0b0:	f000 fdf8 	bl	800dca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d0b4:	6843      	ldr	r3, [r0, #4]
 800d0b6:	4621      	mov	r1, r4
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	4798      	blx	r3
 800d0be:	f001 f87b 	bl	800e1b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d0c2:	6843      	ldr	r3, [r0, #4]
 800d0c4:	f104 0118 	add.w	r1, r4, #24
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	4798      	blx	r3
 800d0ce:	2209      	movs	r2, #9
 800d0d0:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f001 fc2d 	bl	800e934 <ucdr_deserialize_array_double>
 800d0da:	f001 f8fd 	bl	800e2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d0de:	6843      	ldr	r3, [r0, #4]
 800d0e0:	f104 0180 	add.w	r1, r4, #128	@ 0x80
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	4798      	blx	r3
 800d0ea:	2209      	movs	r2, #9
 800d0ec:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	f001 fc1f 	bl	800e934 <ucdr_deserialize_array_double>
 800d0f6:	f001 f8ef 	bl	800e2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d0fa:	6843      	ldr	r3, [r0, #4]
 800d0fc:	f104 01e0 	add.w	r1, r4, #224	@ 0xe0
 800d100:	68db      	ldr	r3, [r3, #12]
 800d102:	4628      	mov	r0, r5
 800d104:	4798      	blx	r3
 800d106:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800d10a:	4628      	mov	r0, r5
 800d10c:	2209      	movs	r2, #9
 800d10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d112:	f001 bc0f 	b.w	800e934 <ucdr_deserialize_array_double>
 800d116:	4608      	mov	r0, r1
 800d118:	bd38      	pop	{r3, r4, r5, pc}
 800d11a:	bf00      	nop

0800d11c <_Imu__cdr_serialize>:
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d035      	beq.n	800d18c <_Imu__cdr_serialize+0x70>
 800d120:	b538      	push	{r3, r4, r5, lr}
 800d122:	4604      	mov	r4, r0
 800d124:	460d      	mov	r5, r1
 800d126:	f000 fdbd 	bl	800dca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d12a:	6843      	ldr	r3, [r0, #4]
 800d12c:	4629      	mov	r1, r5
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	4620      	mov	r0, r4
 800d132:	4798      	blx	r3
 800d134:	f001 f840 	bl	800e1b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>
 800d138:	6843      	ldr	r3, [r0, #4]
 800d13a:	4629      	mov	r1, r5
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f104 0018 	add.w	r0, r4, #24
 800d142:	4798      	blx	r3
 800d144:	2209      	movs	r2, #9
 800d146:	f104 0138 	add.w	r1, r4, #56	@ 0x38
 800d14a:	4628      	mov	r0, r5
 800d14c:	f001 fb4a 	bl	800e7e4 <ucdr_serialize_array_double>
 800d150:	f001 f8c2 	bl	800e2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d154:	6843      	ldr	r3, [r0, #4]
 800d156:	4629      	mov	r1, r5
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 800d15e:	4798      	blx	r3
 800d160:	2209      	movs	r2, #9
 800d162:	f104 0198 	add.w	r1, r4, #152	@ 0x98
 800d166:	4628      	mov	r0, r5
 800d168:	f001 fb3c 	bl	800e7e4 <ucdr_serialize_array_double>
 800d16c:	f001 f8b4 	bl	800e2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800d170:	6843      	ldr	r3, [r0, #4]
 800d172:	4629      	mov	r1, r5
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800d17a:	4798      	blx	r3
 800d17c:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 800d180:	4628      	mov	r0, r5
 800d182:	2209      	movs	r2, #9
 800d184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d188:	f001 bb2c 	b.w	800e7e4 <ucdr_serialize_array_double>
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop

0800d190 <max_serialized_size_sensor_msgs__msg__Imu>:
 800d190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d192:	2301      	movs	r3, #1
 800d194:	7003      	strb	r3, [r0, #0]
 800d196:	4607      	mov	r7, r0
 800d198:	460e      	mov	r6, r1
 800d19a:	f000 fd79 	bl	800dc90 <max_serialized_size_std_msgs__msg__Header>
 800d19e:	1834      	adds	r4, r6, r0
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	4638      	mov	r0, r7
 800d1a4:	f000 ffe6 	bl	800e174 <max_serialized_size_geometry_msgs__msg__Quaternion>
 800d1a8:	4404      	add	r4, r0
 800d1aa:	2108      	movs	r1, #8
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f003 fac1 	bl	8010734 <ucdr_alignment>
 800d1b2:	f100 0548 	add.w	r5, r0, #72	@ 0x48
 800d1b6:	4425      	add	r5, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	4638      	mov	r0, r7
 800d1bc:	f001 f872 	bl	800e2a4 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d1c0:	4405      	add	r5, r0
 800d1c2:	2108      	movs	r1, #8
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	f003 fab5 	bl	8010734 <ucdr_alignment>
 800d1ca:	f100 0448 	add.w	r4, r0, #72	@ 0x48
 800d1ce:	442c      	add	r4, r5
 800d1d0:	4621      	mov	r1, r4
 800d1d2:	4638      	mov	r0, r7
 800d1d4:	f001 f866 	bl	800e2a4 <max_serialized_size_geometry_msgs__msg__Vector3>
 800d1d8:	4404      	add	r4, r0
 800d1da:	2108      	movs	r1, #8
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f003 faa9 	bl	8010734 <ucdr_alignment>
 800d1e2:	f1c6 0648 	rsb	r6, r6, #72	@ 0x48
 800d1e6:	4430      	add	r0, r6
 800d1e8:	4420      	add	r0, r4
 800d1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1ec <_Imu__max_serialized_size>:
 800d1ec:	b500      	push	{lr}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	f10d 0007 	add.w	r0, sp, #7
 800d1f6:	f7ff ffcb 	bl	800d190 <max_serialized_size_sensor_msgs__msg__Imu>
 800d1fa:	b003      	add	sp, #12
 800d1fc:	f85d fb04 	ldr.w	pc, [sp], #4

0800d200 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu>:
 800d200:	4800      	ldr	r0, [pc, #0]	@ (800d204 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Imu+0x4>)
 800d202:	4770      	bx	lr
 800d204:	20000650 	.word	0x20000650

0800d208 <_JointState__max_serialized_size>:
 800d208:	b500      	push	{lr}
 800d20a:	b083      	sub	sp, #12
 800d20c:	2301      	movs	r3, #1
 800d20e:	2100      	movs	r1, #0
 800d210:	f10d 0007 	add.w	r0, sp, #7
 800d214:	f88d 3007 	strb.w	r3, [sp, #7]
 800d218:	f000 fd3a 	bl	800dc90 <max_serialized_size_std_msgs__msg__Header>
 800d21c:	b003      	add	sp, #12
 800d21e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d222:	bf00      	nop

0800d224 <_JointState__cdr_deserialize>:
 800d224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d228:	b083      	sub	sp, #12
 800d22a:	2900      	cmp	r1, #0
 800d22c:	d060      	beq.n	800d2f0 <_JointState__cdr_deserialize+0xcc>
 800d22e:	4606      	mov	r6, r0
 800d230:	460c      	mov	r4, r1
 800d232:	f000 fd37 	bl	800dca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d236:	6843      	ldr	r3, [r0, #4]
 800d238:	4621      	mov	r1, r4
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	4630      	mov	r0, r6
 800d23e:	4798      	blx	r3
 800d240:	4669      	mov	r1, sp
 800d242:	4630      	mov	r0, r6
 800d244:	f001 ff96 	bl	800f174 <ucdr_deserialize_uint32_t>
 800d248:	9900      	ldr	r1, [sp, #0]
 800d24a:	69e3      	ldr	r3, [r4, #28]
 800d24c:	428b      	cmp	r3, r1
 800d24e:	d34f      	bcc.n	800d2f0 <_JointState__cdr_deserialize+0xcc>
 800d250:	61a1      	str	r1, [r4, #24]
 800d252:	f10d 0804 	add.w	r8, sp, #4
 800d256:	b330      	cbz	r0, 800d2a6 <_JointState__cdr_deserialize+0x82>
 800d258:	2500      	movs	r5, #0
 800d25a:	f10d 0804 	add.w	r8, sp, #4
 800d25e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800d262:	42a9      	cmp	r1, r5
 800d264:	4643      	mov	r3, r8
 800d266:	4630      	mov	r0, r6
 800d268:	ea4f 0782 	mov.w	r7, r2, lsl #2
 800d26c:	d91b      	bls.n	800d2a6 <_JointState__cdr_deserialize+0x82>
 800d26e:	6961      	ldr	r1, [r4, #20]
 800d270:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800d274:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800d278:	f8dc 9008 	ldr.w	r9, [ip, #8]
 800d27c:	464a      	mov	r2, r9
 800d27e:	f003 fad7 	bl	8010830 <ucdr_deserialize_sequence_char>
 800d282:	2800      	cmp	r0, #0
 800d284:	d039      	beq.n	800d2fa <_JointState__cdr_deserialize+0xd6>
 800d286:	9a01      	ldr	r2, [sp, #4]
 800d288:	3501      	adds	r5, #1
 800d28a:	b102      	cbz	r2, 800d28e <_JointState__cdr_deserialize+0x6a>
 800d28c:	3a01      	subs	r2, #1
 800d28e:	6963      	ldr	r3, [r4, #20]
 800d290:	9900      	ldr	r1, [sp, #0]
 800d292:	443b      	add	r3, r7
 800d294:	42a9      	cmp	r1, r5
 800d296:	605a      	str	r2, [r3, #4]
 800d298:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800d29c:	4643      	mov	r3, r8
 800d29e:	4630      	mov	r0, r6
 800d2a0:	ea4f 0782 	mov.w	r7, r2, lsl #2
 800d2a4:	d8e3      	bhi.n	800d26e <_JointState__cdr_deserialize+0x4a>
 800d2a6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800d2a8:	6a21      	ldr	r1, [r4, #32]
 800d2aa:	4643      	mov	r3, r8
 800d2ac:	462a      	mov	r2, r5
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f003 fb76 	bl	80109a0 <ucdr_deserialize_sequence_double>
 800d2b4:	9b01      	ldr	r3, [sp, #4]
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d050      	beq.n	800d35c <_JointState__cdr_deserialize+0x138>
 800d2ba:	6263      	str	r3, [r4, #36]	@ 0x24
 800d2bc:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800d2be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d2c0:	4643      	mov	r3, r8
 800d2c2:	462a      	mov	r2, r5
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f003 fb6b 	bl	80109a0 <ucdr_deserialize_sequence_double>
 800d2ca:	9b01      	ldr	r3, [sp, #4]
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	d035      	beq.n	800d33c <_JointState__cdr_deserialize+0x118>
 800d2d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800d2d2:	6c27      	ldr	r7, [r4, #64]	@ 0x40
 800d2d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d2d6:	4643      	mov	r3, r8
 800d2d8:	463a      	mov	r2, r7
 800d2da:	4630      	mov	r0, r6
 800d2dc:	f003 fb60 	bl	80109a0 <ucdr_deserialize_sequence_double>
 800d2e0:	9b01      	ldr	r3, [sp, #4]
 800d2e2:	4605      	mov	r5, r0
 800d2e4:	b1d0      	cbz	r0, 800d31c <_JointState__cdr_deserialize+0xf8>
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800d2ea:	b003      	add	sp, #12
 800d2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2f0:	2500      	movs	r5, #0
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	b003      	add	sp, #12
 800d2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2fa:	9b01      	ldr	r3, [sp, #4]
 800d2fc:	454b      	cmp	r3, r9
 800d2fe:	d9d2      	bls.n	800d2a6 <_JointState__cdr_deserialize+0x82>
 800d300:	2101      	movs	r1, #1
 800d302:	7571      	strb	r1, [r6, #21]
 800d304:	6963      	ldr	r3, [r4, #20]
 800d306:	75b0      	strb	r0, [r6, #22]
 800d308:	443b      	add	r3, r7
 800d30a:	6058      	str	r0, [r3, #4]
 800d30c:	4630      	mov	r0, r6
 800d30e:	f003 fa27 	bl	8010760 <ucdr_align_to>
 800d312:	9901      	ldr	r1, [sp, #4]
 800d314:	4630      	mov	r0, r6
 800d316:	f003 fa59 	bl	80107cc <ucdr_advance_buffer>
 800d31a:	e7c4      	b.n	800d2a6 <_JointState__cdr_deserialize+0x82>
 800d31c:	42bb      	cmp	r3, r7
 800d31e:	d9e8      	bls.n	800d2f2 <_JointState__cdr_deserialize+0xce>
 800d320:	2301      	movs	r3, #1
 800d322:	75b0      	strb	r0, [r6, #22]
 800d324:	7573      	strb	r3, [r6, #21]
 800d326:	2108      	movs	r1, #8
 800d328:	63e0      	str	r0, [r4, #60]	@ 0x3c
 800d32a:	4630      	mov	r0, r6
 800d32c:	f003 fa18 	bl	8010760 <ucdr_align_to>
 800d330:	9901      	ldr	r1, [sp, #4]
 800d332:	4630      	mov	r0, r6
 800d334:	00c9      	lsls	r1, r1, #3
 800d336:	f003 fa49 	bl	80107cc <ucdr_advance_buffer>
 800d33a:	e7da      	b.n	800d2f2 <_JointState__cdr_deserialize+0xce>
 800d33c:	42ab      	cmp	r3, r5
 800d33e:	d9c8      	bls.n	800d2d2 <_JointState__cdr_deserialize+0xae>
 800d340:	2301      	movs	r3, #1
 800d342:	75b0      	strb	r0, [r6, #22]
 800d344:	7573      	strb	r3, [r6, #21]
 800d346:	2108      	movs	r1, #8
 800d348:	6320      	str	r0, [r4, #48]	@ 0x30
 800d34a:	4630      	mov	r0, r6
 800d34c:	f003 fa08 	bl	8010760 <ucdr_align_to>
 800d350:	9901      	ldr	r1, [sp, #4]
 800d352:	4630      	mov	r0, r6
 800d354:	00c9      	lsls	r1, r1, #3
 800d356:	f003 fa39 	bl	80107cc <ucdr_advance_buffer>
 800d35a:	e7ba      	b.n	800d2d2 <_JointState__cdr_deserialize+0xae>
 800d35c:	42ab      	cmp	r3, r5
 800d35e:	d9ad      	bls.n	800d2bc <_JointState__cdr_deserialize+0x98>
 800d360:	2301      	movs	r3, #1
 800d362:	75b0      	strb	r0, [r6, #22]
 800d364:	7573      	strb	r3, [r6, #21]
 800d366:	2108      	movs	r1, #8
 800d368:	6260      	str	r0, [r4, #36]	@ 0x24
 800d36a:	4630      	mov	r0, r6
 800d36c:	f003 f9f8 	bl	8010760 <ucdr_align_to>
 800d370:	9901      	ldr	r1, [sp, #4]
 800d372:	4630      	mov	r0, r6
 800d374:	00c9      	lsls	r1, r1, #3
 800d376:	f003 fa29 	bl	80107cc <ucdr_advance_buffer>
 800d37a:	e79f      	b.n	800d2bc <_JointState__cdr_deserialize+0x98>

0800d37c <get_serialized_size_sensor_msgs__msg__JointState.part.0>:
 800d37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d380:	4688      	mov	r8, r1
 800d382:	4606      	mov	r6, r0
 800d384:	f000 fc0c 	bl	800dba0 <get_serialized_size_std_msgs__msg__Header>
 800d388:	eb08 0500 	add.w	r5, r8, r0
 800d38c:	2104      	movs	r1, #4
 800d38e:	4628      	mov	r0, r5
 800d390:	69b7      	ldr	r7, [r6, #24]
 800d392:	f003 f9cf 	bl	8010734 <ucdr_alignment>
 800d396:	1d04      	adds	r4, r0, #4
 800d398:	442c      	add	r4, r5
 800d39a:	b187      	cbz	r7, 800d3be <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x42>
 800d39c:	2500      	movs	r5, #0
 800d39e:	4620      	mov	r0, r4
 800d3a0:	2104      	movs	r1, #4
 800d3a2:	f003 f9c7 	bl	8010734 <ucdr_alignment>
 800d3a6:	6973      	ldr	r3, [r6, #20]
 800d3a8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800d3ac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800d3b0:	3501      	adds	r5, #1
 800d3b2:	1903      	adds	r3, r0, r4
 800d3b4:	6854      	ldr	r4, [r2, #4]
 800d3b6:	3305      	adds	r3, #5
 800d3b8:	42af      	cmp	r7, r5
 800d3ba:	441c      	add	r4, r3
 800d3bc:	d1ef      	bne.n	800d39e <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x22>
 800d3be:	4620      	mov	r0, r4
 800d3c0:	2104      	movs	r1, #4
 800d3c2:	6a75      	ldr	r5, [r6, #36]	@ 0x24
 800d3c4:	f003 f9b6 	bl	8010734 <ucdr_alignment>
 800d3c8:	4404      	add	r4, r0
 800d3ca:	3404      	adds	r4, #4
 800d3cc:	b99d      	cbnz	r5, 800d3f6 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x7a>
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	2104      	movs	r1, #4
 800d3d2:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 800d3d4:	f003 f9ae 	bl	8010734 <ucdr_alignment>
 800d3d8:	4404      	add	r4, r0
 800d3da:	3404      	adds	r4, #4
 800d3dc:	b9f5      	cbnz	r5, 800d41c <get_serialized_size_sensor_msgs__msg__JointState.part.0+0xa0>
 800d3de:	4620      	mov	r0, r4
 800d3e0:	2104      	movs	r1, #4
 800d3e2:	6bf5      	ldr	r5, [r6, #60]	@ 0x3c
 800d3e4:	f003 f9a6 	bl	8010734 <ucdr_alignment>
 800d3e8:	4404      	add	r4, r0
 800d3ea:	3404      	adds	r4, #4
 800d3ec:	b95d      	cbnz	r5, 800d406 <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x8a>
 800d3ee:	eba4 0008 	sub.w	r0, r4, r8
 800d3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	2108      	movs	r1, #8
 800d3fa:	f003 f99b 	bl	8010734 <ucdr_alignment>
 800d3fe:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d402:	4404      	add	r4, r0
 800d404:	e7e3      	b.n	800d3ce <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x52>
 800d406:	2108      	movs	r1, #8
 800d408:	4620      	mov	r0, r4
 800d40a:	f003 f993 	bl	8010734 <ucdr_alignment>
 800d40e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d412:	4404      	add	r4, r0
 800d414:	eba4 0008 	sub.w	r0, r4, r8
 800d418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d41c:	4620      	mov	r0, r4
 800d41e:	2108      	movs	r1, #8
 800d420:	f003 f988 	bl	8010734 <ucdr_alignment>
 800d424:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d428:	4404      	add	r4, r0
 800d42a:	e7d8      	b.n	800d3de <get_serialized_size_sensor_msgs__msg__JointState.part.0+0x62>

0800d42c <get_serialized_size_sensor_msgs__msg__JointState>:
 800d42c:	b108      	cbz	r0, 800d432 <get_serialized_size_sensor_msgs__msg__JointState+0x6>
 800d42e:	f7ff bfa5 	b.w	800d37c <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800d432:	4770      	bx	lr

0800d434 <_JointState__get_serialized_size>:
 800d434:	b110      	cbz	r0, 800d43c <_JointState__get_serialized_size+0x8>
 800d436:	2100      	movs	r1, #0
 800d438:	f7ff bfa0 	b.w	800d37c <get_serialized_size_sensor_msgs__msg__JointState.part.0>
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop

0800d440 <_JointState__cdr_serialize>:
 800d440:	2800      	cmp	r0, #0
 800d442:	d040      	beq.n	800d4c6 <_JointState__cdr_serialize+0x86>
 800d444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d448:	460f      	mov	r7, r1
 800d44a:	4606      	mov	r6, r0
 800d44c:	f000 fc2a 	bl	800dca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d450:	6843      	ldr	r3, [r0, #4]
 800d452:	4639      	mov	r1, r7
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	4630      	mov	r0, r6
 800d458:	4798      	blx	r3
 800d45a:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800d45e:	4638      	mov	r0, r7
 800d460:	4641      	mov	r1, r8
 800d462:	f001 fd5d 	bl	800ef20 <ucdr_serialize_uint32_t>
 800d466:	b1e8      	cbz	r0, 800d4a4 <_JointState__cdr_serialize+0x64>
 800d468:	f1b8 0f00 	cmp.w	r8, #0
 800d46c:	d01a      	beq.n	800d4a4 <_JointState__cdr_serialize+0x64>
 800d46e:	2400      	movs	r4, #0
 800d470:	e00c      	b.n	800d48c <_JointState__cdr_serialize+0x4c>
 800d472:	f7f2 ff2d 	bl	80002d0 <strlen>
 800d476:	1c42      	adds	r2, r0, #1
 800d478:	f8c9 0004 	str.w	r0, [r9, #4]
 800d47c:	4629      	mov	r1, r5
 800d47e:	4638      	mov	r0, r7
 800d480:	f003 f9c4 	bl	801080c <ucdr_serialize_sequence_char>
 800d484:	3401      	adds	r4, #1
 800d486:	b168      	cbz	r0, 800d4a4 <_JointState__cdr_serialize+0x64>
 800d488:	45a0      	cmp	r8, r4
 800d48a:	d00b      	beq.n	800d4a4 <_JointState__cdr_serialize+0x64>
 800d48c:	6973      	ldr	r3, [r6, #20]
 800d48e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800d492:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 800d496:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800d49a:	4628      	mov	r0, r5
 800d49c:	2d00      	cmp	r5, #0
 800d49e:	d1e8      	bne.n	800d472 <_JointState__cdr_serialize+0x32>
 800d4a0:	462a      	mov	r2, r5
 800d4a2:	e7e9      	b.n	800d478 <_JointState__cdr_serialize+0x38>
 800d4a4:	e9d6 1208 	ldrd	r1, r2, [r6, #32]
 800d4a8:	4638      	mov	r0, r7
 800d4aa:	f003 fa67 	bl	801097c <ucdr_serialize_sequence_double>
 800d4ae:	e9d6 120b 	ldrd	r1, r2, [r6, #44]	@ 0x2c
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	f003 fa62 	bl	801097c <ucdr_serialize_sequence_double>
 800d4b8:	e9d6 120e 	ldrd	r1, r2, [r6, #56]	@ 0x38
 800d4bc:	4638      	mov	r0, r7
 800d4be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4c2:	f003 ba5b 	b.w	801097c <ucdr_serialize_sequence_double>
 800d4c6:	4770      	bx	lr

0800d4c8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState>:
 800d4c8:	4800      	ldr	r0, [pc, #0]	@ (800d4cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__JointState+0x4>)
 800d4ca:	4770      	bx	lr
 800d4cc:	20000684 	.word	0x20000684

0800d4d0 <get_serialized_size_sensor_msgs__msg__Range.part.0>:
 800d4d0:	b570      	push	{r4, r5, r6, lr}
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	f000 fb64 	bl	800dba0 <get_serialized_size_std_msgs__msg__Header>
 800d4d8:	1826      	adds	r6, r4, r0
 800d4da:	2101      	movs	r1, #1
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f003 f929 	bl	8010734 <ucdr_alignment>
 800d4e2:	1c45      	adds	r5, r0, #1
 800d4e4:	4435      	add	r5, r6
 800d4e6:	2104      	movs	r1, #4
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	f003 f923 	bl	8010734 <ucdr_alignment>
 800d4ee:	1d06      	adds	r6, r0, #4
 800d4f0:	442e      	add	r6, r5
 800d4f2:	2104      	movs	r1, #4
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	f003 f91d 	bl	8010734 <ucdr_alignment>
 800d4fa:	1d05      	adds	r5, r0, #4
 800d4fc:	4435      	add	r5, r6
 800d4fe:	2104      	movs	r1, #4
 800d500:	4628      	mov	r0, r5
 800d502:	f003 f917 	bl	8010734 <ucdr_alignment>
 800d506:	1d06      	adds	r6, r0, #4
 800d508:	442e      	add	r6, r5
 800d50a:	2104      	movs	r1, #4
 800d50c:	4630      	mov	r0, r6
 800d50e:	f003 f911 	bl	8010734 <ucdr_alignment>
 800d512:	1d05      	adds	r5, r0, #4
 800d514:	4435      	add	r5, r6
 800d516:	2104      	movs	r1, #4
 800d518:	4628      	mov	r0, r5
 800d51a:	f003 f90b 	bl	8010734 <ucdr_alignment>
 800d51e:	f1c4 0404 	rsb	r4, r4, #4
 800d522:	4420      	add	r0, r4
 800d524:	4428      	add	r0, r5
 800d526:	bd70      	pop	{r4, r5, r6, pc}

0800d528 <get_serialized_size_sensor_msgs__msg__Range>:
 800d528:	b108      	cbz	r0, 800d52e <get_serialized_size_sensor_msgs__msg__Range+0x6>
 800d52a:	f7ff bfd1 	b.w	800d4d0 <get_serialized_size_sensor_msgs__msg__Range.part.0>
 800d52e:	4770      	bx	lr

0800d530 <_Range__get_serialized_size>:
 800d530:	b110      	cbz	r0, 800d538 <_Range__get_serialized_size+0x8>
 800d532:	2100      	movs	r1, #0
 800d534:	f7ff bfcc 	b.w	800d4d0 <get_serialized_size_sensor_msgs__msg__Range.part.0>
 800d538:	4770      	bx	lr
 800d53a:	bf00      	nop

0800d53c <_Range__cdr_deserialize>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	460c      	mov	r4, r1
 800d540:	b339      	cbz	r1, 800d592 <_Range__cdr_deserialize+0x56>
 800d542:	4605      	mov	r5, r0
 800d544:	f000 fbae 	bl	800dca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d548:	6843      	ldr	r3, [r0, #4]
 800d54a:	4621      	mov	r1, r4
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	4628      	mov	r0, r5
 800d550:	4798      	blx	r3
 800d552:	f104 0114 	add.w	r1, r4, #20
 800d556:	4628      	mov	r0, r5
 800d558:	f001 fadc 	bl	800eb14 <ucdr_deserialize_uint8_t>
 800d55c:	f104 0118 	add.w	r1, r4, #24
 800d560:	4628      	mov	r0, r5
 800d562:	f002 fc5f 	bl	800fe24 <ucdr_deserialize_float>
 800d566:	f104 011c 	add.w	r1, r4, #28
 800d56a:	4628      	mov	r0, r5
 800d56c:	f002 fc5a 	bl	800fe24 <ucdr_deserialize_float>
 800d570:	f104 0120 	add.w	r1, r4, #32
 800d574:	4628      	mov	r0, r5
 800d576:	f002 fc55 	bl	800fe24 <ucdr_deserialize_float>
 800d57a:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 800d57e:	4628      	mov	r0, r5
 800d580:	f002 fc50 	bl	800fe24 <ucdr_deserialize_float>
 800d584:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800d588:	4628      	mov	r0, r5
 800d58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d58e:	f002 bc49 	b.w	800fe24 <ucdr_deserialize_float>
 800d592:	4608      	mov	r0, r1
 800d594:	bd38      	pop	{r3, r4, r5, pc}
 800d596:	bf00      	nop

0800d598 <_Range__cdr_serialize>:
 800d598:	b340      	cbz	r0, 800d5ec <_Range__cdr_serialize+0x54>
 800d59a:	b538      	push	{r3, r4, r5, lr}
 800d59c:	460d      	mov	r5, r1
 800d59e:	4604      	mov	r4, r0
 800d5a0:	f000 fb80 	bl	800dca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d5a4:	6843      	ldr	r3, [r0, #4]
 800d5a6:	4629      	mov	r1, r5
 800d5a8:	689b      	ldr	r3, [r3, #8]
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	4798      	blx	r3
 800d5ae:	7d21      	ldrb	r1, [r4, #20]
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f001 fa99 	bl	800eae8 <ucdr_serialize_uint8_t>
 800d5b6:	ed94 0a06 	vldr	s0, [r4, #24]
 800d5ba:	4628      	mov	r0, r5
 800d5bc:	f002 fb06 	bl	800fbcc <ucdr_serialize_float>
 800d5c0:	ed94 0a07 	vldr	s0, [r4, #28]
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	f002 fb01 	bl	800fbcc <ucdr_serialize_float>
 800d5ca:	ed94 0a08 	vldr	s0, [r4, #32]
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	f002 fafc 	bl	800fbcc <ucdr_serialize_float>
 800d5d4:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 800d5d8:	4628      	mov	r0, r5
 800d5da:	f002 faf7 	bl	800fbcc <ucdr_serialize_float>
 800d5de:	ed94 0a0a 	vldr	s0, [r4, #40]	@ 0x28
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5e8:	f002 baf0 	b.w	800fbcc <ucdr_serialize_float>
 800d5ec:	4770      	bx	lr
 800d5ee:	bf00      	nop

0800d5f0 <max_serialized_size_sensor_msgs__msg__Range>:
 800d5f0:	b570      	push	{r4, r5, r6, lr}
 800d5f2:	2501      	movs	r5, #1
 800d5f4:	7005      	strb	r5, [r0, #0]
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	f000 fb4a 	bl	800dc90 <max_serialized_size_std_msgs__msg__Header>
 800d5fc:	1826      	adds	r6, r4, r0
 800d5fe:	4629      	mov	r1, r5
 800d600:	4630      	mov	r0, r6
 800d602:	f003 f897 	bl	8010734 <ucdr_alignment>
 800d606:	1945      	adds	r5, r0, r5
 800d608:	4435      	add	r5, r6
 800d60a:	2104      	movs	r1, #4
 800d60c:	4628      	mov	r0, r5
 800d60e:	f003 f891 	bl	8010734 <ucdr_alignment>
 800d612:	1d06      	adds	r6, r0, #4
 800d614:	442e      	add	r6, r5
 800d616:	2104      	movs	r1, #4
 800d618:	4630      	mov	r0, r6
 800d61a:	f003 f88b 	bl	8010734 <ucdr_alignment>
 800d61e:	1d05      	adds	r5, r0, #4
 800d620:	4435      	add	r5, r6
 800d622:	2104      	movs	r1, #4
 800d624:	4628      	mov	r0, r5
 800d626:	f003 f885 	bl	8010734 <ucdr_alignment>
 800d62a:	1d06      	adds	r6, r0, #4
 800d62c:	442e      	add	r6, r5
 800d62e:	2104      	movs	r1, #4
 800d630:	4630      	mov	r0, r6
 800d632:	f003 f87f 	bl	8010734 <ucdr_alignment>
 800d636:	1d05      	adds	r5, r0, #4
 800d638:	4435      	add	r5, r6
 800d63a:	2104      	movs	r1, #4
 800d63c:	4628      	mov	r0, r5
 800d63e:	f003 f879 	bl	8010734 <ucdr_alignment>
 800d642:	f1c4 0404 	rsb	r4, r4, #4
 800d646:	4420      	add	r0, r4
 800d648:	4428      	add	r0, r5
 800d64a:	bd70      	pop	{r4, r5, r6, pc}

0800d64c <_Range__max_serialized_size>:
 800d64c:	b500      	push	{lr}
 800d64e:	b083      	sub	sp, #12
 800d650:	2100      	movs	r1, #0
 800d652:	f10d 0007 	add.w	r0, sp, #7
 800d656:	f7ff ffcb 	bl	800d5f0 <max_serialized_size_sensor_msgs__msg__Range>
 800d65a:	b003      	add	sp, #12
 800d65c:	f85d fb04 	ldr.w	pc, [sp], #4

0800d660 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range>:
 800d660:	4800      	ldr	r0, [pc, #0]	@ (800d664 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Range+0x4>)
 800d662:	4770      	bx	lr
 800d664:	200006b8 	.word	0x200006b8

0800d668 <get_serialized_size_sensor_msgs__msg__Temperature>:
 800d668:	b1a0      	cbz	r0, 800d694 <get_serialized_size_sensor_msgs__msg__Temperature+0x2c>
 800d66a:	b570      	push	{r4, r5, r6, lr}
 800d66c:	460d      	mov	r5, r1
 800d66e:	f000 fa97 	bl	800dba0 <get_serialized_size_std_msgs__msg__Header>
 800d672:	182e      	adds	r6, r5, r0
 800d674:	2108      	movs	r1, #8
 800d676:	4630      	mov	r0, r6
 800d678:	f003 f85c 	bl	8010734 <ucdr_alignment>
 800d67c:	f100 0408 	add.w	r4, r0, #8
 800d680:	4434      	add	r4, r6
 800d682:	2108      	movs	r1, #8
 800d684:	4620      	mov	r0, r4
 800d686:	f003 f855 	bl	8010734 <ucdr_alignment>
 800d68a:	f1c5 0508 	rsb	r5, r5, #8
 800d68e:	4405      	add	r5, r0
 800d690:	1928      	adds	r0, r5, r4
 800d692:	bd70      	pop	{r4, r5, r6, pc}
 800d694:	4770      	bx	lr
 800d696:	bf00      	nop

0800d698 <_Temperature__cdr_deserialize>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	460c      	mov	r4, r1
 800d69c:	b199      	cbz	r1, 800d6c6 <_Temperature__cdr_deserialize+0x2e>
 800d69e:	4605      	mov	r5, r0
 800d6a0:	f000 fb00 	bl	800dca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d6a4:	6843      	ldr	r3, [r0, #4]
 800d6a6:	4621      	mov	r1, r4
 800d6a8:	68db      	ldr	r3, [r3, #12]
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	4798      	blx	r3
 800d6ae:	f104 0118 	add.w	r1, r4, #24
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f002 fe60 	bl	8010378 <ucdr_deserialize_double>
 800d6b8:	f104 0120 	add.w	r1, r4, #32
 800d6bc:	4628      	mov	r0, r5
 800d6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6c2:	f002 be59 	b.w	8010378 <ucdr_deserialize_double>
 800d6c6:	4608      	mov	r0, r1
 800d6c8:	bd38      	pop	{r3, r4, r5, pc}
 800d6ca:	bf00      	nop

0800d6cc <_Temperature__cdr_serialize>:
 800d6cc:	b1a8      	cbz	r0, 800d6fa <_Temperature__cdr_serialize+0x2e>
 800d6ce:	b538      	push	{r3, r4, r5, lr}
 800d6d0:	460d      	mov	r5, r1
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	f000 fae6 	bl	800dca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 800d6d8:	6843      	ldr	r3, [r0, #4]
 800d6da:	4629      	mov	r1, r5
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	4620      	mov	r0, r4
 800d6e0:	4798      	blx	r3
 800d6e2:	ed94 0b06 	vldr	d0, [r4, #24]
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	f002 fcb6 	bl	8010058 <ucdr_serialize_double>
 800d6ec:	ed94 0b08 	vldr	d0, [r4, #32]
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6f6:	f002 bcaf 	b.w	8010058 <ucdr_serialize_double>
 800d6fa:	4770      	bx	lr

0800d6fc <_Temperature__get_serialized_size>:
 800d6fc:	b180      	cbz	r0, 800d720 <_Temperature__get_serialized_size+0x24>
 800d6fe:	b510      	push	{r4, lr}
 800d700:	2100      	movs	r1, #0
 800d702:	f000 fa4d 	bl	800dba0 <get_serialized_size_std_msgs__msg__Header>
 800d706:	2108      	movs	r1, #8
 800d708:	4604      	mov	r4, r0
 800d70a:	f003 f813 	bl	8010734 <ucdr_alignment>
 800d70e:	2108      	movs	r1, #8
 800d710:	4404      	add	r4, r0
 800d712:	440c      	add	r4, r1
 800d714:	4620      	mov	r0, r4
 800d716:	f003 f80d 	bl	8010734 <ucdr_alignment>
 800d71a:	3008      	adds	r0, #8
 800d71c:	4420      	add	r0, r4
 800d71e:	bd10      	pop	{r4, pc}
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop

0800d724 <_Temperature__max_serialized_size>:
 800d724:	b510      	push	{r4, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	2301      	movs	r3, #1
 800d72a:	2100      	movs	r1, #0
 800d72c:	f10d 0007 	add.w	r0, sp, #7
 800d730:	f88d 3007 	strb.w	r3, [sp, #7]
 800d734:	f000 faac 	bl	800dc90 <max_serialized_size_std_msgs__msg__Header>
 800d738:	2108      	movs	r1, #8
 800d73a:	4604      	mov	r4, r0
 800d73c:	f002 fffa 	bl	8010734 <ucdr_alignment>
 800d740:	2108      	movs	r1, #8
 800d742:	4404      	add	r4, r0
 800d744:	440c      	add	r4, r1
 800d746:	4620      	mov	r0, r4
 800d748:	f002 fff4 	bl	8010734 <ucdr_alignment>
 800d74c:	3008      	adds	r0, #8
 800d74e:	4420      	add	r0, r4
 800d750:	b002      	add	sp, #8
 800d752:	bd10      	pop	{r4, pc}

0800d754 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 800d754:	4800      	ldr	r0, [pc, #0]	@ (800d758 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x4>)
 800d756:	4770      	bx	lr
 800d758:	200006ec 	.word	0x200006ec

0800d75c <std_msgs__msg__Float32MultiArray__init>:
 800d75c:	b1e0      	cbz	r0, 800d798 <std_msgs__msg__Float32MultiArray__init+0x3c>
 800d75e:	b538      	push	{r3, r4, r5, lr}
 800d760:	4604      	mov	r4, r0
 800d762:	f000 f853 	bl	800d80c <std_msgs__msg__MultiArrayLayout__init>
 800d766:	b138      	cbz	r0, 800d778 <std_msgs__msg__Float32MultiArray__init+0x1c>
 800d768:	f104 0510 	add.w	r5, r4, #16
 800d76c:	2100      	movs	r1, #0
 800d76e:	4628      	mov	r0, r5
 800d770:	f7ff f8d0 	bl	800c914 <rosidl_runtime_c__float__Sequence__init>
 800d774:	b148      	cbz	r0, 800d78a <std_msgs__msg__Float32MultiArray__init+0x2e>
 800d776:	bd38      	pop	{r3, r4, r5, pc}
 800d778:	4620      	mov	r0, r4
 800d77a:	f000 f857 	bl	800d82c <std_msgs__msg__MultiArrayLayout__fini>
 800d77e:	f104 0010 	add.w	r0, r4, #16
 800d782:	f7ff f8e1 	bl	800c948 <rosidl_runtime_c__float__Sequence__fini>
 800d786:	2000      	movs	r0, #0
 800d788:	bd38      	pop	{r3, r4, r5, pc}
 800d78a:	4620      	mov	r0, r4
 800d78c:	f000 f84e 	bl	800d82c <std_msgs__msg__MultiArrayLayout__fini>
 800d790:	4628      	mov	r0, r5
 800d792:	f7ff f8d9 	bl	800c948 <rosidl_runtime_c__float__Sequence__fini>
 800d796:	e7f6      	b.n	800d786 <std_msgs__msg__Float32MultiArray__init+0x2a>
 800d798:	2000      	movs	r0, #0
 800d79a:	4770      	bx	lr

0800d79c <std_msgs__msg__Float32MultiArray__fini>:
 800d79c:	b148      	cbz	r0, 800d7b2 <std_msgs__msg__Float32MultiArray__fini+0x16>
 800d79e:	b510      	push	{r4, lr}
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	f000 f843 	bl	800d82c <std_msgs__msg__MultiArrayLayout__fini>
 800d7a6:	f104 0010 	add.w	r0, r4, #16
 800d7aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7ae:	f7ff b8cb 	b.w	800c948 <rosidl_runtime_c__float__Sequence__fini>
 800d7b2:	4770      	bx	lr

0800d7b4 <std_msgs__msg__Int32MultiArray__init>:
 800d7b4:	b1e0      	cbz	r0, 800d7f0 <std_msgs__msg__Int32MultiArray__init+0x3c>
 800d7b6:	b538      	push	{r3, r4, r5, lr}
 800d7b8:	4604      	mov	r4, r0
 800d7ba:	f000 f827 	bl	800d80c <std_msgs__msg__MultiArrayLayout__init>
 800d7be:	b138      	cbz	r0, 800d7d0 <std_msgs__msg__Int32MultiArray__init+0x1c>
 800d7c0:	f104 0510 	add.w	r5, r4, #16
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f7ff f900 	bl	800c9cc <rosidl_runtime_c__int32__Sequence__init>
 800d7cc:	b148      	cbz	r0, 800d7e2 <std_msgs__msg__Int32MultiArray__init+0x2e>
 800d7ce:	bd38      	pop	{r3, r4, r5, pc}
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f000 f82b 	bl	800d82c <std_msgs__msg__MultiArrayLayout__fini>
 800d7d6:	f104 0010 	add.w	r0, r4, #16
 800d7da:	f7ff f911 	bl	800ca00 <rosidl_runtime_c__int32__Sequence__fini>
 800d7de:	2000      	movs	r0, #0
 800d7e0:	bd38      	pop	{r3, r4, r5, pc}
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f000 f822 	bl	800d82c <std_msgs__msg__MultiArrayLayout__fini>
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	f7ff f909 	bl	800ca00 <rosidl_runtime_c__int32__Sequence__fini>
 800d7ee:	e7f6      	b.n	800d7de <std_msgs__msg__Int32MultiArray__init+0x2a>
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	4770      	bx	lr

0800d7f4 <std_msgs__msg__Int32MultiArray__fini>:
 800d7f4:	b148      	cbz	r0, 800d80a <std_msgs__msg__Int32MultiArray__fini+0x16>
 800d7f6:	b510      	push	{r4, lr}
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	f000 f817 	bl	800d82c <std_msgs__msg__MultiArrayLayout__fini>
 800d7fe:	f104 0010 	add.w	r0, r4, #16
 800d802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d806:	f7ff b8fb 	b.w	800ca00 <rosidl_runtime_c__int32__Sequence__fini>
 800d80a:	4770      	bx	lr

0800d80c <std_msgs__msg__MultiArrayLayout__init>:
 800d80c:	b158      	cbz	r0, 800d826 <std_msgs__msg__MultiArrayLayout__init+0x1a>
 800d80e:	b510      	push	{r4, lr}
 800d810:	2100      	movs	r1, #0
 800d812:	4604      	mov	r4, r0
 800d814:	f00c f802 	bl	801981c <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800d818:	b100      	cbz	r0, 800d81c <std_msgs__msg__MultiArrayLayout__init+0x10>
 800d81a:	bd10      	pop	{r4, pc}
 800d81c:	4620      	mov	r0, r4
 800d81e:	f00c f841 	bl	80198a4 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800d822:	2000      	movs	r0, #0
 800d824:	bd10      	pop	{r4, pc}
 800d826:	2000      	movs	r0, #0
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop

0800d82c <std_msgs__msg__MultiArrayLayout__fini>:
 800d82c:	b108      	cbz	r0, 800d832 <std_msgs__msg__MultiArrayLayout__fini+0x6>
 800d82e:	f00c b839 	b.w	80198a4 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800d832:	4770      	bx	lr

0800d834 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d834:	4b04      	ldr	r3, [pc, #16]	@ (800d848 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800d836:	681a      	ldr	r2, [r3, #0]
 800d838:	b10a      	cbz	r2, 800d83e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xa>
 800d83a:	4803      	ldr	r0, [pc, #12]	@ (800d848 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800d83c:	4770      	bx	lr
 800d83e:	4a03      	ldr	r2, [pc, #12]	@ (800d84c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x18>)
 800d840:	4801      	ldr	r0, [pc, #4]	@ (800d848 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 800d842:	6812      	ldr	r2, [r2, #0]
 800d844:	601a      	str	r2, [r3, #0]
 800d846:	4770      	bx	lr
 800d848:	20000720 	.word	0x20000720
 800d84c:	20000d70 	.word	0x20000d70

0800d850 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d850:	4a02      	ldr	r2, [pc, #8]	@ (800d85c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xc>)
 800d852:	4b03      	ldr	r3, [pc, #12]	@ (800d860 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x10>)
 800d854:	6812      	ldr	r2, [r2, #0]
 800d856:	601a      	str	r2, [r3, #0]
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	20000d70 	.word	0x20000d70
 800d860:	20000720 	.word	0x20000720

0800d864 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800d864:	4b04      	ldr	r3, [pc, #16]	@ (800d878 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	b10a      	cbz	r2, 800d86e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xa>
 800d86a:	4803      	ldr	r0, [pc, #12]	@ (800d878 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800d86c:	4770      	bx	lr
 800d86e:	4a03      	ldr	r2, [pc, #12]	@ (800d87c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x18>)
 800d870:	4801      	ldr	r0, [pc, #4]	@ (800d878 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>)
 800d872:	6812      	ldr	r2, [r2, #0]
 800d874:	601a      	str	r2, [r3, #0]
 800d876:	4770      	bx	lr
 800d878:	20000740 	.word	0x20000740
 800d87c:	20000d70 	.word	0x20000d70

0800d880 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800d880:	4a02      	ldr	r2, [pc, #8]	@ (800d88c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0xc>)
 800d882:	4b03      	ldr	r3, [pc, #12]	@ (800d890 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x10>)
 800d884:	6812      	ldr	r2, [r2, #0]
 800d886:	601a      	str	r2, [r3, #0]
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	20000d70 	.word	0x20000d70
 800d890:	20000740 	.word	0x20000740

0800d894 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__size_function__Float32MultiArray__data>:
 800d894:	6840      	ldr	r0, [r0, #4]
 800d896:	4770      	bx	lr

0800d898 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float32MultiArray__data>:
 800d898:	6800      	ldr	r0, [r0, #0]
 800d89a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d89e:	4770      	bx	lr

0800d8a0 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float32MultiArray__data>:
 800d8a0:	6803      	ldr	r3, [r0, #0]
 800d8a2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	6013      	str	r3, [r2, #0]
 800d8aa:	4770      	bx	lr

0800d8ac <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__assign_function__Float32MultiArray__data>:
 800d8ac:	6803      	ldr	r3, [r0, #0]
 800d8ae:	6812      	ldr	r2, [r2, #0]
 800d8b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	4770      	bx	lr

0800d8b8 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_init_function>:
 800d8b8:	f7ff bf50 	b.w	800d75c <std_msgs__msg__Float32MultiArray__init>

0800d8bc <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_fini_function>:
 800d8bc:	f7ff bf6e 	b.w	800d79c <std_msgs__msg__Float32MultiArray__fini>

0800d8c0 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__resize_function__Float32MultiArray__data>:
 800d8c0:	b538      	push	{r3, r4, r5, lr}
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	460d      	mov	r5, r1
 800d8c6:	f7ff f83f 	bl	800c948 <rosidl_runtime_c__float__Sequence__fini>
 800d8ca:	4629      	mov	r1, r5
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8d2:	f7ff b81f 	b.w	800c914 <rosidl_runtime_c__float__Sequence__init>
 800d8d6:	bf00      	nop

0800d8d8 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_function__Float32MultiArray__data>:
 800d8d8:	6800      	ldr	r0, [r0, #0]
 800d8da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d8de:	4770      	bx	lr

0800d8e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800d8e0:	b508      	push	{r3, lr}
 800d8e2:	f000 f8ab 	bl	800da3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d8e6:	4b06      	ldr	r3, [pc, #24]	@ (800d900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800d8e8:	4906      	ldr	r1, [pc, #24]	@ (800d904 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x24>)
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	60c8      	str	r0, [r1, #12]
 800d8ee:	b10a      	cbz	r2, 800d8f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>
 800d8f0:	4803      	ldr	r0, [pc, #12]	@ (800d900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800d8f2:	bd08      	pop	{r3, pc}
 800d8f4:	4a04      	ldr	r2, [pc, #16]	@ (800d908 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x28>)
 800d8f6:	4802      	ldr	r0, [pc, #8]	@ (800d900 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 800d8f8:	6812      	ldr	r2, [r2, #0]
 800d8fa:	601a      	str	r2, [r3, #0]
 800d8fc:	bd08      	pop	{r3, pc}
 800d8fe:	bf00      	nop
 800d900:	20000760 	.word	0x20000760
 800d904:	20000778 	.word	0x20000778
 800d908:	20000d74 	.word	0x20000d74

0800d90c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 800d90c:	f00b bebc 	b.w	8019688 <std_msgs__msg__Header__init>

0800d910 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 800d910:	f00b beda 	b.w	80196c8 <std_msgs__msg__Header__fini>

0800d914 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800d914:	b508      	push	{r3, lr}
 800d916:	f000 fb01 	bl	800df1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d91a:	4b06      	ldr	r3, [pc, #24]	@ (800d934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d91c:	4906      	ldr	r1, [pc, #24]	@ (800d938 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	60c8      	str	r0, [r1, #12]
 800d922:	b10a      	cbz	r2, 800d928 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 800d924:	4803      	ldr	r0, [pc, #12]	@ (800d934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d926:	bd08      	pop	{r3, pc}
 800d928:	4a04      	ldr	r2, [pc, #16]	@ (800d93c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 800d92a:	4802      	ldr	r0, [pc, #8]	@ (800d934 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 800d92c:	6812      	ldr	r2, [r2, #0]
 800d92e:	601a      	str	r2, [r3, #0]
 800d930:	bd08      	pop	{r3, pc}
 800d932:	bf00      	nop
 800d934:	200007f0 	.word	0x200007f0
 800d938:	20000808 	.word	0x20000808
 800d93c:	20000d74 	.word	0x20000d74

0800d940 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__size_function__Int32MultiArray__data>:
 800d940:	6840      	ldr	r0, [r0, #4]
 800d942:	4770      	bx	lr

0800d944 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Int32MultiArray__data>:
 800d944:	6800      	ldr	r0, [r0, #0]
 800d946:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d94a:	4770      	bx	lr

0800d94c <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Int32MultiArray__data>:
 800d94c:	6803      	ldr	r3, [r0, #0]
 800d94e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d952:	6013      	str	r3, [r2, #0]
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop

0800d958 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__assign_function__Int32MultiArray__data>:
 800d958:	6803      	ldr	r3, [r0, #0]
 800d95a:	6812      	ldr	r2, [r2, #0]
 800d95c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop

0800d964 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_init_function>:
 800d964:	f7ff bf26 	b.w	800d7b4 <std_msgs__msg__Int32MultiArray__init>

0800d968 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__Int32MultiArray_fini_function>:
 800d968:	f7ff bf44 	b.w	800d7f4 <std_msgs__msg__Int32MultiArray__fini>

0800d96c <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__resize_function__Int32MultiArray__data>:
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4604      	mov	r4, r0
 800d970:	460d      	mov	r5, r1
 800d972:	f7ff f845 	bl	800ca00 <rosidl_runtime_c__int32__Sequence__fini>
 800d976:	4629      	mov	r1, r5
 800d978:	4620      	mov	r0, r4
 800d97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d97e:	f7ff b825 	b.w	800c9cc <rosidl_runtime_c__int32__Sequence__init>
 800d982:	bf00      	nop

0800d984 <std_msgs__msg__Int32MultiArray__rosidl_typesupport_introspection_c__get_function__Int32MultiArray__data>:
 800d984:	6800      	ldr	r0, [r0, #0]
 800d986:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d98a:	4770      	bx	lr

0800d98c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800d98c:	b508      	push	{r3, lr}
 800d98e:	f000 f855 	bl	800da3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800d992:	4b06      	ldr	r3, [pc, #24]	@ (800d9ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800d994:	4906      	ldr	r1, [pc, #24]	@ (800d9b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x24>)
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	60c8      	str	r0, [r1, #12]
 800d99a:	b10a      	cbz	r2, 800d9a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x14>
 800d99c:	4803      	ldr	r0, [pc, #12]	@ (800d9ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800d99e:	bd08      	pop	{r3, pc}
 800d9a0:	4a04      	ldr	r2, [pc, #16]	@ (800d9b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x28>)
 800d9a2:	4802      	ldr	r0, [pc, #8]	@ (800d9ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x20>)
 800d9a4:	6812      	ldr	r2, [r2, #0]
 800d9a6:	601a      	str	r2, [r3, #0]
 800d9a8:	bd08      	pop	{r3, pc}
 800d9aa:	bf00      	nop
 800d9ac:	20000880 	.word	0x20000880
 800d9b0:	20000898 	.word	0x20000898
 800d9b4:	20000d74 	.word	0x20000d74

0800d9b8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800d9b8:	6840      	ldr	r0, [r0, #4]
 800d9ba:	4770      	bx	lr

0800d9bc <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800d9bc:	6800      	ldr	r0, [r0, #0]
 800d9be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d9c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d9c6:	4770      	bx	lr

0800d9c8 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800d9c8:	6803      	ldr	r3, [r0, #0]
 800d9ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d9ce:	b500      	push	{lr}
 800d9d0:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800d9d4:	4694      	mov	ip, r2
 800d9d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d9da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9de:	f8de 3000 	ldr.w	r3, [lr]
 800d9e2:	f8cc 3000 	str.w	r3, [ip]
 800d9e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d9ea:	bf00      	nop

0800d9ec <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800d9ec:	6803      	ldr	r3, [r0, #0]
 800d9ee:	b500      	push	{lr}
 800d9f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d9f4:	4696      	mov	lr, r2
 800d9f6:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800d9fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d9fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800da02:	f8de 3000 	ldr.w	r3, [lr]
 800da06:	f8cc 3000 	str.w	r3, [ip]
 800da0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800da0e:	bf00      	nop

0800da10 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800da10:	f7ff befc 	b.w	800d80c <std_msgs__msg__MultiArrayLayout__init>

0800da14 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800da14:	f7ff bf0a 	b.w	800d82c <std_msgs__msg__MultiArrayLayout__fini>

0800da18 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800da18:	b538      	push	{r3, r4, r5, lr}
 800da1a:	4604      	mov	r4, r0
 800da1c:	460d      	mov	r5, r1
 800da1e:	f00b ff41 	bl	80198a4 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800da22:	4629      	mov	r1, r5
 800da24:	4620      	mov	r0, r4
 800da26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da2a:	f00b bef7 	b.w	801981c <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800da2e:	bf00      	nop

0800da30 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800da30:	6800      	ldr	r0, [r0, #0]
 800da32:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800da36:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800da3a:	4770      	bx	lr

0800da3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800da3c:	b508      	push	{r3, lr}
 800da3e:	f00b ffa5 	bl	801998c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800da42:	4b06      	ldr	r3, [pc, #24]	@ (800da5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800da44:	4906      	ldr	r1, [pc, #24]	@ (800da60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	60c8      	str	r0, [r1, #12]
 800da4a:	b10a      	cbz	r2, 800da50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800da4c:	4803      	ldr	r0, [pc, #12]	@ (800da5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800da4e:	bd08      	pop	{r3, pc}
 800da50:	4a04      	ldr	r2, [pc, #16]	@ (800da64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800da52:	4802      	ldr	r0, [pc, #8]	@ (800da5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800da54:	6812      	ldr	r2, [r2, #0]
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	bd08      	pop	{r3, pc}
 800da5a:	bf00      	nop
 800da5c:	20000910 	.word	0x20000910
 800da60:	20000928 	.word	0x20000928
 800da64:	20000d74 	.word	0x20000d74

0800da68 <_Float32MultiArray__max_serialized_size>:
 800da68:	b500      	push	{lr}
 800da6a:	b083      	sub	sp, #12
 800da6c:	2301      	movs	r3, #1
 800da6e:	2100      	movs	r1, #0
 800da70:	f10d 0007 	add.w	r0, sp, #7
 800da74:	f88d 3007 	strb.w	r3, [sp, #7]
 800da78:	f000 fa3e 	bl	800def8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800da7c:	b003      	add	sp, #12
 800da7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800da82:	bf00      	nop

0800da84 <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 800da84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da86:	4604      	mov	r4, r0
 800da88:	b160      	cbz	r0, 800daa4 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>
 800da8a:	460d      	mov	r5, r1
 800da8c:	f000 fa06 	bl	800de9c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800da90:	182e      	adds	r6, r5, r0
 800da92:	2104      	movs	r1, #4
 800da94:	4630      	mov	r0, r6
 800da96:	6967      	ldr	r7, [r4, #20]
 800da98:	f002 fe4c 	bl	8010734 <ucdr_alignment>
 800da9c:	1d04      	adds	r4, r0, #4
 800da9e:	4434      	add	r4, r6
 800daa0:	b90f      	cbnz	r7, 800daa6 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x22>
 800daa2:	1b60      	subs	r0, r4, r5
 800daa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daa6:	4620      	mov	r0, r4
 800daa8:	2104      	movs	r1, #4
 800daaa:	f002 fe43 	bl	8010734 <ucdr_alignment>
 800daae:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800dab2:	4404      	add	r4, r0
 800dab4:	1b60      	subs	r0, r4, r5
 800dab6:	e7f5      	b.n	800daa4 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>

0800dab8 <_Float32MultiArray__cdr_deserialize>:
 800dab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daba:	460c      	mov	r4, r1
 800dabc:	b083      	sub	sp, #12
 800dabe:	b1d1      	cbz	r1, 800daf6 <_Float32MultiArray__cdr_deserialize+0x3e>
 800dac0:	4606      	mov	r6, r0
 800dac2:	f000 fa23 	bl	800df0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800dac6:	6843      	ldr	r3, [r0, #4]
 800dac8:	4621      	mov	r1, r4
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	4630      	mov	r0, r6
 800dace:	4798      	blx	r3
 800dad0:	69a7      	ldr	r7, [r4, #24]
 800dad2:	6921      	ldr	r1, [r4, #16]
 800dad4:	ab01      	add	r3, sp, #4
 800dad6:	463a      	mov	r2, r7
 800dad8:	4630      	mov	r0, r6
 800dada:	f002 ff33 	bl	8010944 <ucdr_deserialize_sequence_float>
 800dade:	9b01      	ldr	r3, [sp, #4]
 800dae0:	4605      	mov	r5, r0
 800dae2:	b920      	cbnz	r0, 800daee <_Float32MultiArray__cdr_deserialize+0x36>
 800dae4:	429f      	cmp	r7, r3
 800dae6:	d30a      	bcc.n	800dafe <_Float32MultiArray__cdr_deserialize+0x46>
 800dae8:	4628      	mov	r0, r5
 800daea:	b003      	add	sp, #12
 800daec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daee:	4628      	mov	r0, r5
 800daf0:	6163      	str	r3, [r4, #20]
 800daf2:	b003      	add	sp, #12
 800daf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daf6:	460d      	mov	r5, r1
 800daf8:	4628      	mov	r0, r5
 800dafa:	b003      	add	sp, #12
 800dafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dafe:	2301      	movs	r3, #1
 800db00:	75b0      	strb	r0, [r6, #22]
 800db02:	7573      	strb	r3, [r6, #21]
 800db04:	2104      	movs	r1, #4
 800db06:	6160      	str	r0, [r4, #20]
 800db08:	4630      	mov	r0, r6
 800db0a:	f002 fe29 	bl	8010760 <ucdr_align_to>
 800db0e:	9901      	ldr	r1, [sp, #4]
 800db10:	4630      	mov	r0, r6
 800db12:	0089      	lsls	r1, r1, #2
 800db14:	f002 fe5a 	bl	80107cc <ucdr_advance_buffer>
 800db18:	4628      	mov	r0, r5
 800db1a:	b003      	add	sp, #12
 800db1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db1e:	bf00      	nop

0800db20 <_Float32MultiArray__cdr_serialize>:
 800db20:	b180      	cbz	r0, 800db44 <_Float32MultiArray__cdr_serialize+0x24>
 800db22:	b538      	push	{r3, r4, r5, lr}
 800db24:	460d      	mov	r5, r1
 800db26:	4604      	mov	r4, r0
 800db28:	f000 f9f0 	bl	800df0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800db2c:	6843      	ldr	r3, [r0, #4]
 800db2e:	4629      	mov	r1, r5
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	4620      	mov	r0, r4
 800db34:	4798      	blx	r3
 800db36:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800db3a:	4628      	mov	r0, r5
 800db3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db40:	f002 beee 	b.w	8010920 <ucdr_serialize_sequence_float>
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop

0800db48 <_Float32MultiArray__get_serialized_size>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4604      	mov	r4, r0
 800db4c:	b150      	cbz	r0, 800db64 <_Float32MultiArray__get_serialized_size+0x1c>
 800db4e:	2100      	movs	r1, #0
 800db50:	f000 f9a4 	bl	800de9c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800db54:	2104      	movs	r1, #4
 800db56:	6965      	ldr	r5, [r4, #20]
 800db58:	4604      	mov	r4, r0
 800db5a:	f002 fdeb 	bl	8010734 <ucdr_alignment>
 800db5e:	4404      	add	r4, r0
 800db60:	3404      	adds	r4, #4
 800db62:	b90d      	cbnz	r5, 800db68 <_Float32MultiArray__get_serialized_size+0x20>
 800db64:	4620      	mov	r0, r4
 800db66:	bd38      	pop	{r3, r4, r5, pc}
 800db68:	2104      	movs	r1, #4
 800db6a:	4620      	mov	r0, r4
 800db6c:	f002 fde2 	bl	8010734 <ucdr_alignment>
 800db70:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800db74:	4404      	add	r4, r0
 800db76:	4620      	mov	r0, r4
 800db78:	bd38      	pop	{r3, r4, r5, pc}
 800db7a:	bf00      	nop

0800db7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 800db7c:	4800      	ldr	r0, [pc, #0]	@ (800db80 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 800db7e:	4770      	bx	lr
 800db80:	200009a0 	.word	0x200009a0

0800db84 <_Header__max_serialized_size>:
 800db84:	b500      	push	{lr}
 800db86:	b083      	sub	sp, #12
 800db88:	2301      	movs	r3, #1
 800db8a:	2100      	movs	r1, #0
 800db8c:	f10d 0007 	add.w	r0, sp, #7
 800db90:	f88d 3007 	strb.w	r3, [sp, #7]
 800db94:	f000 fa20 	bl	800dfd8 <max_serialized_size_builtin_interfaces__msg__Time>
 800db98:	b003      	add	sp, #12
 800db9a:	f85d fb04 	ldr.w	pc, [sp], #4
 800db9e:	bf00      	nop

0800dba0 <get_serialized_size_std_msgs__msg__Header>:
 800dba0:	b570      	push	{r4, r5, r6, lr}
 800dba2:	4605      	mov	r5, r0
 800dba4:	b168      	cbz	r0, 800dbc2 <get_serialized_size_std_msgs__msg__Header+0x22>
 800dba6:	460c      	mov	r4, r1
 800dba8:	f000 f9c6 	bl	800df38 <get_serialized_size_builtin_interfaces__msg__Time>
 800dbac:	1826      	adds	r6, r4, r0
 800dbae:	2104      	movs	r1, #4
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	f002 fdbf 	bl	8010734 <ucdr_alignment>
 800dbb6:	68eb      	ldr	r3, [r5, #12]
 800dbb8:	f1c4 0405 	rsb	r4, r4, #5
 800dbbc:	441c      	add	r4, r3
 800dbbe:	4404      	add	r4, r0
 800dbc0:	19a0      	adds	r0, r4, r6
 800dbc2:	bd70      	pop	{r4, r5, r6, pc}

0800dbc4 <_Header__cdr_deserialize>:
 800dbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	b083      	sub	sp, #12
 800dbca:	b1e1      	cbz	r1, 800dc06 <_Header__cdr_deserialize+0x42>
 800dbcc:	4606      	mov	r6, r0
 800dbce:	f000 fa17 	bl	800e000 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dbd2:	6843      	ldr	r3, [r0, #4]
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	4630      	mov	r0, r6
 800dbda:	4798      	blx	r3
 800dbdc:	6927      	ldr	r7, [r4, #16]
 800dbde:	68a1      	ldr	r1, [r4, #8]
 800dbe0:	ab01      	add	r3, sp, #4
 800dbe2:	463a      	mov	r2, r7
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	f002 fe23 	bl	8010830 <ucdr_deserialize_sequence_char>
 800dbea:	9b01      	ldr	r3, [sp, #4]
 800dbec:	4605      	mov	r5, r0
 800dbee:	b920      	cbnz	r0, 800dbfa <_Header__cdr_deserialize+0x36>
 800dbf0:	429f      	cmp	r7, r3
 800dbf2:	d30c      	bcc.n	800dc0e <_Header__cdr_deserialize+0x4a>
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	b003      	add	sp, #12
 800dbf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbfa:	b103      	cbz	r3, 800dbfe <_Header__cdr_deserialize+0x3a>
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	4628      	mov	r0, r5
 800dc00:	60e3      	str	r3, [r4, #12]
 800dc02:	b003      	add	sp, #12
 800dc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc06:	460d      	mov	r5, r1
 800dc08:	4628      	mov	r0, r5
 800dc0a:	b003      	add	sp, #12
 800dc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc0e:	2101      	movs	r1, #1
 800dc10:	75b0      	strb	r0, [r6, #22]
 800dc12:	7571      	strb	r1, [r6, #21]
 800dc14:	60e0      	str	r0, [r4, #12]
 800dc16:	4630      	mov	r0, r6
 800dc18:	f002 fda2 	bl	8010760 <ucdr_align_to>
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	9901      	ldr	r1, [sp, #4]
 800dc20:	f002 fdd4 	bl	80107cc <ucdr_advance_buffer>
 800dc24:	4628      	mov	r0, r5
 800dc26:	b003      	add	sp, #12
 800dc28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc2a:	bf00      	nop

0800dc2c <_Header__cdr_serialize>:
 800dc2c:	b1f8      	cbz	r0, 800dc6e <_Header__cdr_serialize+0x42>
 800dc2e:	b570      	push	{r4, r5, r6, lr}
 800dc30:	4604      	mov	r4, r0
 800dc32:	460d      	mov	r5, r1
 800dc34:	f000 f9e4 	bl	800e000 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800dc38:	6843      	ldr	r3, [r0, #4]
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	4620      	mov	r0, r4
 800dc40:	4798      	blx	r3
 800dc42:	68a6      	ldr	r6, [r4, #8]
 800dc44:	b156      	cbz	r6, 800dc5c <_Header__cdr_serialize+0x30>
 800dc46:	4630      	mov	r0, r6
 800dc48:	f7f2 fb42 	bl	80002d0 <strlen>
 800dc4c:	4631      	mov	r1, r6
 800dc4e:	60e0      	str	r0, [r4, #12]
 800dc50:	1c42      	adds	r2, r0, #1
 800dc52:	4628      	mov	r0, r5
 800dc54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc58:	f002 bdd8 	b.w	801080c <ucdr_serialize_sequence_char>
 800dc5c:	4630      	mov	r0, r6
 800dc5e:	60e0      	str	r0, [r4, #12]
 800dc60:	4632      	mov	r2, r6
 800dc62:	4631      	mov	r1, r6
 800dc64:	4628      	mov	r0, r5
 800dc66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc6a:	f002 bdcf 	b.w	801080c <ucdr_serialize_sequence_char>
 800dc6e:	4770      	bx	lr

0800dc70 <_Header__get_serialized_size>:
 800dc70:	b538      	push	{r3, r4, r5, lr}
 800dc72:	4604      	mov	r4, r0
 800dc74:	b150      	cbz	r0, 800dc8c <_Header__get_serialized_size+0x1c>
 800dc76:	2100      	movs	r1, #0
 800dc78:	f000 f95e 	bl	800df38 <get_serialized_size_builtin_interfaces__msg__Time>
 800dc7c:	2104      	movs	r1, #4
 800dc7e:	4605      	mov	r5, r0
 800dc80:	f002 fd58 	bl	8010734 <ucdr_alignment>
 800dc84:	68e4      	ldr	r4, [r4, #12]
 800dc86:	3405      	adds	r4, #5
 800dc88:	442c      	add	r4, r5
 800dc8a:	4420      	add	r0, r4
 800dc8c:	bd38      	pop	{r3, r4, r5, pc}
 800dc8e:	bf00      	nop

0800dc90 <max_serialized_size_std_msgs__msg__Header>:
 800dc90:	b510      	push	{r4, lr}
 800dc92:	2301      	movs	r3, #1
 800dc94:	4604      	mov	r4, r0
 800dc96:	7003      	strb	r3, [r0, #0]
 800dc98:	f000 f99e 	bl	800dfd8 <max_serialized_size_builtin_interfaces__msg__Time>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	7023      	strb	r3, [r4, #0]
 800dca0:	bd10      	pop	{r4, pc}
 800dca2:	bf00      	nop

0800dca4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 800dca4:	4800      	ldr	r0, [pc, #0]	@ (800dca8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 800dca6:	4770      	bx	lr
 800dca8:	200009d4 	.word	0x200009d4

0800dcac <_Int32MultiArray__max_serialized_size>:
 800dcac:	b500      	push	{lr}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	2100      	movs	r1, #0
 800dcb4:	f10d 0007 	add.w	r0, sp, #7
 800dcb8:	f88d 3007 	strb.w	r3, [sp, #7]
 800dcbc:	f000 f91c 	bl	800def8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800dcc0:	b003      	add	sp, #12
 800dcc2:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcc6:	bf00      	nop

0800dcc8 <get_serialized_size_std_msgs__msg__Int32MultiArray>:
 800dcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcca:	4604      	mov	r4, r0
 800dccc:	b160      	cbz	r0, 800dce8 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>
 800dcce:	460d      	mov	r5, r1
 800dcd0:	f000 f8e4 	bl	800de9c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800dcd4:	182e      	adds	r6, r5, r0
 800dcd6:	2104      	movs	r1, #4
 800dcd8:	4630      	mov	r0, r6
 800dcda:	6967      	ldr	r7, [r4, #20]
 800dcdc:	f002 fd2a 	bl	8010734 <ucdr_alignment>
 800dce0:	1d04      	adds	r4, r0, #4
 800dce2:	4434      	add	r4, r6
 800dce4:	b90f      	cbnz	r7, 800dcea <get_serialized_size_std_msgs__msg__Int32MultiArray+0x22>
 800dce6:	1b60      	subs	r0, r4, r5
 800dce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcea:	4620      	mov	r0, r4
 800dcec:	2104      	movs	r1, #4
 800dcee:	f002 fd21 	bl	8010734 <ucdr_alignment>
 800dcf2:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800dcf6:	4404      	add	r4, r0
 800dcf8:	1b60      	subs	r0, r4, r5
 800dcfa:	e7f5      	b.n	800dce8 <get_serialized_size_std_msgs__msg__Int32MultiArray+0x20>

0800dcfc <_Int32MultiArray__cdr_deserialize>:
 800dcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcfe:	460c      	mov	r4, r1
 800dd00:	b083      	sub	sp, #12
 800dd02:	b1d1      	cbz	r1, 800dd3a <_Int32MultiArray__cdr_deserialize+0x3e>
 800dd04:	4606      	mov	r6, r0
 800dd06:	f000 f901 	bl	800df0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800dd0a:	6843      	ldr	r3, [r0, #4]
 800dd0c:	4621      	mov	r1, r4
 800dd0e:	68db      	ldr	r3, [r3, #12]
 800dd10:	4630      	mov	r0, r6
 800dd12:	4798      	blx	r3
 800dd14:	69a7      	ldr	r7, [r4, #24]
 800dd16:	6921      	ldr	r1, [r4, #16]
 800dd18:	ab01      	add	r3, sp, #4
 800dd1a:	463a      	mov	r2, r7
 800dd1c:	4630      	mov	r0, r6
 800dd1e:	f002 fde3 	bl	80108e8 <ucdr_deserialize_sequence_int32_t>
 800dd22:	9b01      	ldr	r3, [sp, #4]
 800dd24:	4605      	mov	r5, r0
 800dd26:	b920      	cbnz	r0, 800dd32 <_Int32MultiArray__cdr_deserialize+0x36>
 800dd28:	429f      	cmp	r7, r3
 800dd2a:	d30a      	bcc.n	800dd42 <_Int32MultiArray__cdr_deserialize+0x46>
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	b003      	add	sp, #12
 800dd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd32:	4628      	mov	r0, r5
 800dd34:	6163      	str	r3, [r4, #20]
 800dd36:	b003      	add	sp, #12
 800dd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd3a:	460d      	mov	r5, r1
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	b003      	add	sp, #12
 800dd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd42:	2301      	movs	r3, #1
 800dd44:	75b0      	strb	r0, [r6, #22]
 800dd46:	7573      	strb	r3, [r6, #21]
 800dd48:	2104      	movs	r1, #4
 800dd4a:	6160      	str	r0, [r4, #20]
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	f002 fd07 	bl	8010760 <ucdr_align_to>
 800dd52:	9901      	ldr	r1, [sp, #4]
 800dd54:	4630      	mov	r0, r6
 800dd56:	0089      	lsls	r1, r1, #2
 800dd58:	f002 fd38 	bl	80107cc <ucdr_advance_buffer>
 800dd5c:	4628      	mov	r0, r5
 800dd5e:	b003      	add	sp, #12
 800dd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd62:	bf00      	nop

0800dd64 <_Int32MultiArray__cdr_serialize>:
 800dd64:	b180      	cbz	r0, 800dd88 <_Int32MultiArray__cdr_serialize+0x24>
 800dd66:	b538      	push	{r3, r4, r5, lr}
 800dd68:	460d      	mov	r5, r1
 800dd6a:	4604      	mov	r4, r0
 800dd6c:	f000 f8ce 	bl	800df0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800dd70:	6843      	ldr	r3, [r0, #4]
 800dd72:	4629      	mov	r1, r5
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	4620      	mov	r0, r4
 800dd78:	4798      	blx	r3
 800dd7a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800dd7e:	4628      	mov	r0, r5
 800dd80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd84:	f002 bd9e 	b.w	80108c4 <ucdr_serialize_sequence_int32_t>
 800dd88:	4770      	bx	lr
 800dd8a:	bf00      	nop

0800dd8c <_Int32MultiArray__get_serialized_size>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4604      	mov	r4, r0
 800dd90:	b150      	cbz	r0, 800dda8 <_Int32MultiArray__get_serialized_size+0x1c>
 800dd92:	2100      	movs	r1, #0
 800dd94:	f000 f882 	bl	800de9c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800dd98:	2104      	movs	r1, #4
 800dd9a:	6965      	ldr	r5, [r4, #20]
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	f002 fcc9 	bl	8010734 <ucdr_alignment>
 800dda2:	4404      	add	r4, r0
 800dda4:	3404      	adds	r4, #4
 800dda6:	b90d      	cbnz	r5, 800ddac <_Int32MultiArray__get_serialized_size+0x20>
 800dda8:	4620      	mov	r0, r4
 800ddaa:	bd38      	pop	{r3, r4, r5, pc}
 800ddac:	2104      	movs	r1, #4
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f002 fcc0 	bl	8010734 <ucdr_alignment>
 800ddb4:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800ddb8:	4404      	add	r4, r0
 800ddba:	4620      	mov	r0, r4
 800ddbc:	bd38      	pop	{r3, r4, r5, pc}
 800ddbe:	bf00      	nop

0800ddc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray>:
 800ddc0:	4800      	ldr	r0, [pc, #0]	@ (800ddc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32MultiArray+0x4>)
 800ddc2:	4770      	bx	lr
 800ddc4:	20000a08 	.word	0x20000a08

0800ddc8 <_MultiArrayLayout__max_serialized_size>:
 800ddc8:	b508      	push	{r3, lr}
 800ddca:	2104      	movs	r1, #4
 800ddcc:	2000      	movs	r0, #0
 800ddce:	f002 fcb1 	bl	8010734 <ucdr_alignment>
 800ddd2:	3004      	adds	r0, #4
 800ddd4:	bd08      	pop	{r3, pc}
 800ddd6:	bf00      	nop

0800ddd8 <_MultiArrayLayout__cdr_deserialize>:
 800ddd8:	b351      	cbz	r1, 800de30 <_MultiArrayLayout__cdr_deserialize+0x58>
 800ddda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dddc:	460e      	mov	r6, r1
 800ddde:	b083      	sub	sp, #12
 800dde0:	a901      	add	r1, sp, #4
 800dde2:	4607      	mov	r7, r0
 800dde4:	f001 f9c6 	bl	800f174 <ucdr_deserialize_uint32_t>
 800dde8:	9b01      	ldr	r3, [sp, #4]
 800ddea:	68b2      	ldr	r2, [r6, #8]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d31c      	bcc.n	800de2a <_MultiArrayLayout__cdr_deserialize+0x52>
 800ddf0:	6073      	str	r3, [r6, #4]
 800ddf2:	b193      	cbz	r3, 800de1a <_MultiArrayLayout__cdr_deserialize+0x42>
 800ddf4:	2400      	movs	r4, #0
 800ddf6:	4625      	mov	r5, r4
 800ddf8:	e005      	b.n	800de06 <_MultiArrayLayout__cdr_deserialize+0x2e>
 800ddfa:	9b01      	ldr	r3, [sp, #4]
 800ddfc:	3501      	adds	r5, #1
 800ddfe:	42ab      	cmp	r3, r5
 800de00:	f104 0414 	add.w	r4, r4, #20
 800de04:	d909      	bls.n	800de1a <_MultiArrayLayout__cdr_deserialize+0x42>
 800de06:	f00b fe5f 	bl	8019ac8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800de0a:	6831      	ldr	r1, [r6, #0]
 800de0c:	6843      	ldr	r3, [r0, #4]
 800de0e:	4421      	add	r1, r4
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	4638      	mov	r0, r7
 800de14:	4798      	blx	r3
 800de16:	2800      	cmp	r0, #0
 800de18:	d1ef      	bne.n	800ddfa <_MultiArrayLayout__cdr_deserialize+0x22>
 800de1a:	f106 010c 	add.w	r1, r6, #12
 800de1e:	4638      	mov	r0, r7
 800de20:	b003      	add	sp, #12
 800de22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de26:	f001 b9a5 	b.w	800f174 <ucdr_deserialize_uint32_t>
 800de2a:	2000      	movs	r0, #0
 800de2c:	b003      	add	sp, #12
 800de2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de30:	2000      	movs	r0, #0
 800de32:	4770      	bx	lr

0800de34 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800de34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de38:	4689      	mov	r9, r1
 800de3a:	4607      	mov	r7, r0
 800de3c:	2104      	movs	r1, #4
 800de3e:	4648      	mov	r0, r9
 800de40:	f8d7 8004 	ldr.w	r8, [r7, #4]
 800de44:	f002 fc76 	bl	8010734 <ucdr_alignment>
 800de48:	f109 0304 	add.w	r3, r9, #4
 800de4c:	18c6      	adds	r6, r0, r3
 800de4e:	f1b8 0f00 	cmp.w	r8, #0
 800de52:	d019      	beq.n	800de88 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x54>
 800de54:	2500      	movs	r5, #0
 800de56:	f00b fe37 	bl	8019ac8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800de5a:	683a      	ldr	r2, [r7, #0]
 800de5c:	6843      	ldr	r3, [r0, #4]
 800de5e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800de62:	4631      	mov	r1, r6
 800de64:	695b      	ldr	r3, [r3, #20]
 800de66:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800de6a:	4798      	blx	r3
 800de6c:	2804      	cmp	r0, #4
 800de6e:	4601      	mov	r1, r0
 800de70:	4604      	mov	r4, r0
 800de72:	bf28      	it	cs
 800de74:	2104      	movcs	r1, #4
 800de76:	4630      	mov	r0, r6
 800de78:	f002 fc5c 	bl	8010734 <ucdr_alignment>
 800de7c:	3501      	adds	r5, #1
 800de7e:	4434      	add	r4, r6
 800de80:	45a8      	cmp	r8, r5
 800de82:	eb00 0604 	add.w	r6, r0, r4
 800de86:	d1e6      	bne.n	800de56 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800de88:	2104      	movs	r1, #4
 800de8a:	4630      	mov	r0, r6
 800de8c:	f002 fc52 	bl	8010734 <ucdr_alignment>
 800de90:	f1c9 0904 	rsb	r9, r9, #4
 800de94:	44b1      	add	r9, r6
 800de96:	4448      	add	r0, r9
 800de98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800de9c <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800de9c:	b108      	cbz	r0, 800dea2 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800de9e:	f7ff bfc9 	b.w	800de34 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800dea2:	4770      	bx	lr

0800dea4 <_MultiArrayLayout__get_serialized_size>:
 800dea4:	b110      	cbz	r0, 800deac <_MultiArrayLayout__get_serialized_size+0x8>
 800dea6:	2100      	movs	r1, #0
 800dea8:	f7ff bfc4 	b.w	800de34 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop

0800deb0 <_MultiArrayLayout__cdr_serialize>:
 800deb0:	b308      	cbz	r0, 800def6 <_MultiArrayLayout__cdr_serialize+0x46>
 800deb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb4:	6847      	ldr	r7, [r0, #4]
 800deb6:	460e      	mov	r6, r1
 800deb8:	4605      	mov	r5, r0
 800deba:	4608      	mov	r0, r1
 800debc:	4639      	mov	r1, r7
 800debe:	f001 f82f 	bl	800ef20 <ucdr_serialize_uint32_t>
 800dec2:	b190      	cbz	r0, 800deea <_MultiArrayLayout__cdr_serialize+0x3a>
 800dec4:	b18f      	cbz	r7, 800deea <_MultiArrayLayout__cdr_serialize+0x3a>
 800dec6:	2400      	movs	r4, #0
 800dec8:	e002      	b.n	800ded0 <_MultiArrayLayout__cdr_serialize+0x20>
 800deca:	3401      	adds	r4, #1
 800decc:	42a7      	cmp	r7, r4
 800dece:	d00c      	beq.n	800deea <_MultiArrayLayout__cdr_serialize+0x3a>
 800ded0:	f00b fdfa 	bl	8019ac8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800ded4:	6841      	ldr	r1, [r0, #4]
 800ded6:	6828      	ldr	r0, [r5, #0]
 800ded8:	688a      	ldr	r2, [r1, #8]
 800deda:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800dede:	4631      	mov	r1, r6
 800dee0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800dee4:	4790      	blx	r2
 800dee6:	2800      	cmp	r0, #0
 800dee8:	d1ef      	bne.n	800deca <_MultiArrayLayout__cdr_serialize+0x1a>
 800deea:	68e9      	ldr	r1, [r5, #12]
 800deec:	4630      	mov	r0, r6
 800deee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800def2:	f001 b815 	b.w	800ef20 <ucdr_serialize_uint32_t>
 800def6:	4770      	bx	lr

0800def8 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800def8:	b508      	push	{r3, lr}
 800defa:	4603      	mov	r3, r0
 800defc:	2200      	movs	r2, #0
 800defe:	4608      	mov	r0, r1
 800df00:	701a      	strb	r2, [r3, #0]
 800df02:	2104      	movs	r1, #4
 800df04:	f002 fc16 	bl	8010734 <ucdr_alignment>
 800df08:	3004      	adds	r0, #4
 800df0a:	bd08      	pop	{r3, pc}

0800df0c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800df0c:	4800      	ldr	r0, [pc, #0]	@ (800df10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800df0e:	4770      	bx	lr
 800df10:	20000a3c 	.word	0x20000a3c

0800df14 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800df14:	f00b be0c 	b.w	8019b30 <builtin_interfaces__msg__Time__init>

0800df18 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800df18:	f00b be0e 	b.w	8019b38 <builtin_interfaces__msg__Time__fini>

0800df1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800df1c:	4b04      	ldr	r3, [pc, #16]	@ (800df30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	b10a      	cbz	r2, 800df26 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800df22:	4803      	ldr	r0, [pc, #12]	@ (800df30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800df24:	4770      	bx	lr
 800df26:	4a03      	ldr	r2, [pc, #12]	@ (800df34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800df28:	4801      	ldr	r0, [pc, #4]	@ (800df30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800df2a:	6812      	ldr	r2, [r2, #0]
 800df2c:	601a      	str	r2, [r3, #0]
 800df2e:	4770      	bx	lr
 800df30:	20000a70 	.word	0x20000a70
 800df34:	20000d74 	.word	0x20000d74

0800df38 <get_serialized_size_builtin_interfaces__msg__Time>:
 800df38:	b180      	cbz	r0, 800df5c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800df3a:	b538      	push	{r3, r4, r5, lr}
 800df3c:	460d      	mov	r5, r1
 800df3e:	4628      	mov	r0, r5
 800df40:	2104      	movs	r1, #4
 800df42:	f002 fbf7 	bl	8010734 <ucdr_alignment>
 800df46:	2104      	movs	r1, #4
 800df48:	186c      	adds	r4, r5, r1
 800df4a:	4404      	add	r4, r0
 800df4c:	4620      	mov	r0, r4
 800df4e:	f002 fbf1 	bl	8010734 <ucdr_alignment>
 800df52:	f1c5 0504 	rsb	r5, r5, #4
 800df56:	4405      	add	r5, r0
 800df58:	1928      	adds	r0, r5, r4
 800df5a:	bd38      	pop	{r3, r4, r5, pc}
 800df5c:	4770      	bx	lr
 800df5e:	bf00      	nop

0800df60 <_Time__cdr_deserialize>:
 800df60:	b538      	push	{r3, r4, r5, lr}
 800df62:	460c      	mov	r4, r1
 800df64:	b141      	cbz	r1, 800df78 <_Time__cdr_deserialize+0x18>
 800df66:	4605      	mov	r5, r0
 800df68:	f001 fd16 	bl	800f998 <ucdr_deserialize_int32_t>
 800df6c:	1d21      	adds	r1, r4, #4
 800df6e:	4628      	mov	r0, r5
 800df70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df74:	f001 b8fe 	b.w	800f174 <ucdr_deserialize_uint32_t>
 800df78:	4608      	mov	r0, r1
 800df7a:	bd38      	pop	{r3, r4, r5, pc}

0800df7c <_Time__cdr_serialize>:
 800df7c:	b160      	cbz	r0, 800df98 <_Time__cdr_serialize+0x1c>
 800df7e:	b538      	push	{r3, r4, r5, lr}
 800df80:	460d      	mov	r5, r1
 800df82:	4604      	mov	r4, r0
 800df84:	6801      	ldr	r1, [r0, #0]
 800df86:	4628      	mov	r0, r5
 800df88:	f001 fbdc 	bl	800f744 <ucdr_serialize_int32_t>
 800df8c:	6861      	ldr	r1, [r4, #4]
 800df8e:	4628      	mov	r0, r5
 800df90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df94:	f000 bfc4 	b.w	800ef20 <ucdr_serialize_uint32_t>
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop

0800df9c <_Time__get_serialized_size>:
 800df9c:	b160      	cbz	r0, 800dfb8 <_Time__get_serialized_size+0x1c>
 800df9e:	b510      	push	{r4, lr}
 800dfa0:	2104      	movs	r1, #4
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	f002 fbc6 	bl	8010734 <ucdr_alignment>
 800dfa8:	1d04      	adds	r4, r0, #4
 800dfaa:	2104      	movs	r1, #4
 800dfac:	4620      	mov	r0, r4
 800dfae:	f002 fbc1 	bl	8010734 <ucdr_alignment>
 800dfb2:	3004      	adds	r0, #4
 800dfb4:	4420      	add	r0, r4
 800dfb6:	bd10      	pop	{r4, pc}
 800dfb8:	4770      	bx	lr
 800dfba:	bf00      	nop

0800dfbc <_Time__max_serialized_size>:
 800dfbc:	b510      	push	{r4, lr}
 800dfbe:	2104      	movs	r1, #4
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	f002 fbb7 	bl	8010734 <ucdr_alignment>
 800dfc6:	1d04      	adds	r4, r0, #4
 800dfc8:	2104      	movs	r1, #4
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f002 fbb2 	bl	8010734 <ucdr_alignment>
 800dfd0:	3004      	adds	r0, #4
 800dfd2:	4420      	add	r0, r4
 800dfd4:	bd10      	pop	{r4, pc}
 800dfd6:	bf00      	nop

0800dfd8 <max_serialized_size_builtin_interfaces__msg__Time>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	460c      	mov	r4, r1
 800dfdc:	2301      	movs	r3, #1
 800dfde:	7003      	strb	r3, [r0, #0]
 800dfe0:	2104      	movs	r1, #4
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f002 fba6 	bl	8010734 <ucdr_alignment>
 800dfe8:	2104      	movs	r1, #4
 800dfea:	1863      	adds	r3, r4, r1
 800dfec:	18c5      	adds	r5, r0, r3
 800dfee:	4628      	mov	r0, r5
 800dff0:	f002 fba0 	bl	8010734 <ucdr_alignment>
 800dff4:	f1c4 0404 	rsb	r4, r4, #4
 800dff8:	4420      	add	r0, r4
 800dffa:	4428      	add	r0, r5
 800dffc:	bd38      	pop	{r3, r4, r5, pc}
 800dffe:	bf00      	nop

0800e000 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800e000:	4800      	ldr	r0, [pc, #0]	@ (800e004 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800e002:	4770      	bx	lr
 800e004:	20000b00 	.word	0x20000b00

0800e008 <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_init_function>:
 800e008:	f00b bdca 	b.w	8019ba0 <geometry_msgs__msg__Quaternion__init>

0800e00c <geometry_msgs__msg__Quaternion__rosidl_typesupport_introspection_c__Quaternion_fini_function>:
 800e00c:	f00b bddc 	b.w	8019bc8 <geometry_msgs__msg__Quaternion__fini>

0800e010 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800e010:	4b04      	ldr	r3, [pc, #16]	@ (800e024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	b10a      	cbz	r2, 800e01a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0xa>
 800e016:	4803      	ldr	r0, [pc, #12]	@ (800e024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800e018:	4770      	bx	lr
 800e01a:	4a03      	ldr	r2, [pc, #12]	@ (800e028 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x18>)
 800e01c:	4801      	ldr	r0, [pc, #4]	@ (800e024 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x14>)
 800e01e:	6812      	ldr	r2, [r2, #0]
 800e020:	601a      	str	r2, [r3, #0]
 800e022:	4770      	bx	lr
 800e024:	20000b34 	.word	0x20000b34
 800e028:	20000d74 	.word	0x20000d74

0800e02c <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800e02c:	f00b bdfe 	b.w	8019c2c <geometry_msgs__msg__Vector3__init>

0800e030 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800e030:	f00b be00 	b.w	8019c34 <geometry_msgs__msg__Vector3__fini>

0800e034 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800e034:	4b04      	ldr	r3, [pc, #16]	@ (800e048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	b10a      	cbz	r2, 800e03e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800e03a:	4803      	ldr	r0, [pc, #12]	@ (800e048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e03c:	4770      	bx	lr
 800e03e:	4a03      	ldr	r2, [pc, #12]	@ (800e04c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800e040:	4801      	ldr	r0, [pc, #4]	@ (800e048 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800e042:	6812      	ldr	r2, [r2, #0]
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	4770      	bx	lr
 800e048:	20000c3c 	.word	0x20000c3c
 800e04c:	20000d74 	.word	0x20000d74

0800e050 <get_serialized_size_geometry_msgs__msg__Quaternion>:
 800e050:	b1f0      	cbz	r0, 800e090 <get_serialized_size_geometry_msgs__msg__Quaternion+0x40>
 800e052:	b570      	push	{r4, r5, r6, lr}
 800e054:	460d      	mov	r5, r1
 800e056:	4628      	mov	r0, r5
 800e058:	2108      	movs	r1, #8
 800e05a:	f002 fb6b 	bl	8010734 <ucdr_alignment>
 800e05e:	2108      	movs	r1, #8
 800e060:	186c      	adds	r4, r5, r1
 800e062:	4404      	add	r4, r0
 800e064:	4620      	mov	r0, r4
 800e066:	f002 fb65 	bl	8010734 <ucdr_alignment>
 800e06a:	f100 0608 	add.w	r6, r0, #8
 800e06e:	4426      	add	r6, r4
 800e070:	2108      	movs	r1, #8
 800e072:	4630      	mov	r0, r6
 800e074:	f002 fb5e 	bl	8010734 <ucdr_alignment>
 800e078:	f100 0408 	add.w	r4, r0, #8
 800e07c:	4434      	add	r4, r6
 800e07e:	2108      	movs	r1, #8
 800e080:	4620      	mov	r0, r4
 800e082:	f002 fb57 	bl	8010734 <ucdr_alignment>
 800e086:	f1c5 0508 	rsb	r5, r5, #8
 800e08a:	4405      	add	r5, r0
 800e08c:	1928      	adds	r0, r5, r4
 800e08e:	bd70      	pop	{r4, r5, r6, pc}
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop

0800e094 <_Quaternion__cdr_deserialize>:
 800e094:	b538      	push	{r3, r4, r5, lr}
 800e096:	460c      	mov	r4, r1
 800e098:	b199      	cbz	r1, 800e0c2 <_Quaternion__cdr_deserialize+0x2e>
 800e09a:	4605      	mov	r5, r0
 800e09c:	f002 f96c 	bl	8010378 <ucdr_deserialize_double>
 800e0a0:	f104 0108 	add.w	r1, r4, #8
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	f002 f967 	bl	8010378 <ucdr_deserialize_double>
 800e0aa:	f104 0110 	add.w	r1, r4, #16
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	f002 f962 	bl	8010378 <ucdr_deserialize_double>
 800e0b4:	f104 0118 	add.w	r1, r4, #24
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0be:	f002 b95b 	b.w	8010378 <ucdr_deserialize_double>
 800e0c2:	4608      	mov	r0, r1
 800e0c4:	bd38      	pop	{r3, r4, r5, pc}
 800e0c6:	bf00      	nop

0800e0c8 <_Quaternion__cdr_serialize>:
 800e0c8:	b1c0      	cbz	r0, 800e0fc <_Quaternion__cdr_serialize+0x34>
 800e0ca:	b538      	push	{r3, r4, r5, lr}
 800e0cc:	ed90 0b00 	vldr	d0, [r0]
 800e0d0:	460d      	mov	r5, r1
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	4608      	mov	r0, r1
 800e0d6:	f001 ffbf 	bl	8010058 <ucdr_serialize_double>
 800e0da:	ed94 0b02 	vldr	d0, [r4, #8]
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f001 ffba 	bl	8010058 <ucdr_serialize_double>
 800e0e4:	ed94 0b04 	vldr	d0, [r4, #16]
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	f001 ffb5 	bl	8010058 <ucdr_serialize_double>
 800e0ee:	ed94 0b06 	vldr	d0, [r4, #24]
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0f8:	f001 bfae 	b.w	8010058 <ucdr_serialize_double>
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop

0800e100 <_Quaternion__get_serialized_size>:
 800e100:	b1d8      	cbz	r0, 800e13a <_Quaternion__get_serialized_size+0x3a>
 800e102:	b538      	push	{r3, r4, r5, lr}
 800e104:	2108      	movs	r1, #8
 800e106:	2000      	movs	r0, #0
 800e108:	f002 fb14 	bl	8010734 <ucdr_alignment>
 800e10c:	f100 0408 	add.w	r4, r0, #8
 800e110:	2108      	movs	r1, #8
 800e112:	4620      	mov	r0, r4
 800e114:	f002 fb0e 	bl	8010734 <ucdr_alignment>
 800e118:	f100 0508 	add.w	r5, r0, #8
 800e11c:	4425      	add	r5, r4
 800e11e:	2108      	movs	r1, #8
 800e120:	4628      	mov	r0, r5
 800e122:	f002 fb07 	bl	8010734 <ucdr_alignment>
 800e126:	f100 0408 	add.w	r4, r0, #8
 800e12a:	442c      	add	r4, r5
 800e12c:	2108      	movs	r1, #8
 800e12e:	4620      	mov	r0, r4
 800e130:	f002 fb00 	bl	8010734 <ucdr_alignment>
 800e134:	3008      	adds	r0, #8
 800e136:	4420      	add	r0, r4
 800e138:	bd38      	pop	{r3, r4, r5, pc}
 800e13a:	4770      	bx	lr

0800e13c <_Quaternion__max_serialized_size>:
 800e13c:	b538      	push	{r3, r4, r5, lr}
 800e13e:	2108      	movs	r1, #8
 800e140:	2000      	movs	r0, #0
 800e142:	f002 faf7 	bl	8010734 <ucdr_alignment>
 800e146:	f100 0408 	add.w	r4, r0, #8
 800e14a:	2108      	movs	r1, #8
 800e14c:	4620      	mov	r0, r4
 800e14e:	f002 faf1 	bl	8010734 <ucdr_alignment>
 800e152:	f100 0508 	add.w	r5, r0, #8
 800e156:	4425      	add	r5, r4
 800e158:	2108      	movs	r1, #8
 800e15a:	4628      	mov	r0, r5
 800e15c:	f002 faea 	bl	8010734 <ucdr_alignment>
 800e160:	f100 0408 	add.w	r4, r0, #8
 800e164:	442c      	add	r4, r5
 800e166:	2108      	movs	r1, #8
 800e168:	4620      	mov	r0, r4
 800e16a:	f002 fae3 	bl	8010734 <ucdr_alignment>
 800e16e:	3008      	adds	r0, #8
 800e170:	4420      	add	r0, r4
 800e172:	bd38      	pop	{r3, r4, r5, pc}

0800e174 <max_serialized_size_geometry_msgs__msg__Quaternion>:
 800e174:	b570      	push	{r4, r5, r6, lr}
 800e176:	2301      	movs	r3, #1
 800e178:	460c      	mov	r4, r1
 800e17a:	7003      	strb	r3, [r0, #0]
 800e17c:	2108      	movs	r1, #8
 800e17e:	4620      	mov	r0, r4
 800e180:	f002 fad8 	bl	8010734 <ucdr_alignment>
 800e184:	2108      	movs	r1, #8
 800e186:	1863      	adds	r3, r4, r1
 800e188:	18c5      	adds	r5, r0, r3
 800e18a:	4628      	mov	r0, r5
 800e18c:	f002 fad2 	bl	8010734 <ucdr_alignment>
 800e190:	f100 0608 	add.w	r6, r0, #8
 800e194:	442e      	add	r6, r5
 800e196:	2108      	movs	r1, #8
 800e198:	4630      	mov	r0, r6
 800e19a:	f002 facb 	bl	8010734 <ucdr_alignment>
 800e19e:	f100 0508 	add.w	r5, r0, #8
 800e1a2:	4435      	add	r5, r6
 800e1a4:	2108      	movs	r1, #8
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f002 fac4 	bl	8010734 <ucdr_alignment>
 800e1ac:	f1c4 0408 	rsb	r4, r4, #8
 800e1b0:	4420      	add	r0, r4
 800e1b2:	4428      	add	r0, r5
 800e1b4:	bd70      	pop	{r4, r5, r6, pc}
 800e1b6:	bf00      	nop

0800e1b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion>:
 800e1b8:	4800      	ldr	r0, [pc, #0]	@ (800e1bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Quaternion+0x4>)
 800e1ba:	4770      	bx	lr
 800e1bc:	20000d08 	.word	0x20000d08

0800e1c0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800e1c0:	b1b8      	cbz	r0, 800e1f2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800e1c2:	b570      	push	{r4, r5, r6, lr}
 800e1c4:	460d      	mov	r5, r1
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	2108      	movs	r1, #8
 800e1ca:	f002 fab3 	bl	8010734 <ucdr_alignment>
 800e1ce:	2108      	movs	r1, #8
 800e1d0:	186e      	adds	r6, r5, r1
 800e1d2:	4406      	add	r6, r0
 800e1d4:	4630      	mov	r0, r6
 800e1d6:	f002 faad 	bl	8010734 <ucdr_alignment>
 800e1da:	f100 0408 	add.w	r4, r0, #8
 800e1de:	4434      	add	r4, r6
 800e1e0:	2108      	movs	r1, #8
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f002 faa6 	bl	8010734 <ucdr_alignment>
 800e1e8:	f1c5 0508 	rsb	r5, r5, #8
 800e1ec:	4405      	add	r5, r0
 800e1ee:	1928      	adds	r0, r5, r4
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	4770      	bx	lr

0800e1f4 <_Vector3__cdr_deserialize>:
 800e1f4:	b538      	push	{r3, r4, r5, lr}
 800e1f6:	460c      	mov	r4, r1
 800e1f8:	b171      	cbz	r1, 800e218 <_Vector3__cdr_deserialize+0x24>
 800e1fa:	4605      	mov	r5, r0
 800e1fc:	f002 f8bc 	bl	8010378 <ucdr_deserialize_double>
 800e200:	f104 0108 	add.w	r1, r4, #8
 800e204:	4628      	mov	r0, r5
 800e206:	f002 f8b7 	bl	8010378 <ucdr_deserialize_double>
 800e20a:	f104 0110 	add.w	r1, r4, #16
 800e20e:	4628      	mov	r0, r5
 800e210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e214:	f002 b8b0 	b.w	8010378 <ucdr_deserialize_double>
 800e218:	4608      	mov	r0, r1
 800e21a:	bd38      	pop	{r3, r4, r5, pc}

0800e21c <_Vector3__cdr_serialize>:
 800e21c:	b198      	cbz	r0, 800e246 <_Vector3__cdr_serialize+0x2a>
 800e21e:	b538      	push	{r3, r4, r5, lr}
 800e220:	ed90 0b00 	vldr	d0, [r0]
 800e224:	460d      	mov	r5, r1
 800e226:	4604      	mov	r4, r0
 800e228:	4608      	mov	r0, r1
 800e22a:	f001 ff15 	bl	8010058 <ucdr_serialize_double>
 800e22e:	ed94 0b02 	vldr	d0, [r4, #8]
 800e232:	4628      	mov	r0, r5
 800e234:	f001 ff10 	bl	8010058 <ucdr_serialize_double>
 800e238:	ed94 0b04 	vldr	d0, [r4, #16]
 800e23c:	4628      	mov	r0, r5
 800e23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e242:	f001 bf09 	b.w	8010058 <ucdr_serialize_double>
 800e246:	4770      	bx	lr

0800e248 <_Vector3__get_serialized_size>:
 800e248:	b1a0      	cbz	r0, 800e274 <_Vector3__get_serialized_size+0x2c>
 800e24a:	b538      	push	{r3, r4, r5, lr}
 800e24c:	2108      	movs	r1, #8
 800e24e:	2000      	movs	r0, #0
 800e250:	f002 fa70 	bl	8010734 <ucdr_alignment>
 800e254:	f100 0508 	add.w	r5, r0, #8
 800e258:	2108      	movs	r1, #8
 800e25a:	4628      	mov	r0, r5
 800e25c:	f002 fa6a 	bl	8010734 <ucdr_alignment>
 800e260:	f100 0408 	add.w	r4, r0, #8
 800e264:	442c      	add	r4, r5
 800e266:	2108      	movs	r1, #8
 800e268:	4620      	mov	r0, r4
 800e26a:	f002 fa63 	bl	8010734 <ucdr_alignment>
 800e26e:	3008      	adds	r0, #8
 800e270:	4420      	add	r0, r4
 800e272:	bd38      	pop	{r3, r4, r5, pc}
 800e274:	4770      	bx	lr
 800e276:	bf00      	nop

0800e278 <_Vector3__max_serialized_size>:
 800e278:	b538      	push	{r3, r4, r5, lr}
 800e27a:	2108      	movs	r1, #8
 800e27c:	2000      	movs	r0, #0
 800e27e:	f002 fa59 	bl	8010734 <ucdr_alignment>
 800e282:	f100 0508 	add.w	r5, r0, #8
 800e286:	2108      	movs	r1, #8
 800e288:	4628      	mov	r0, r5
 800e28a:	f002 fa53 	bl	8010734 <ucdr_alignment>
 800e28e:	f100 0408 	add.w	r4, r0, #8
 800e292:	442c      	add	r4, r5
 800e294:	2108      	movs	r1, #8
 800e296:	4620      	mov	r0, r4
 800e298:	f002 fa4c 	bl	8010734 <ucdr_alignment>
 800e29c:	3008      	adds	r0, #8
 800e29e:	4420      	add	r0, r4
 800e2a0:	bd38      	pop	{r3, r4, r5, pc}
 800e2a2:	bf00      	nop

0800e2a4 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800e2a4:	b570      	push	{r4, r5, r6, lr}
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	460c      	mov	r4, r1
 800e2aa:	7003      	strb	r3, [r0, #0]
 800e2ac:	2108      	movs	r1, #8
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f002 fa40 	bl	8010734 <ucdr_alignment>
 800e2b4:	2108      	movs	r1, #8
 800e2b6:	1863      	adds	r3, r4, r1
 800e2b8:	18c6      	adds	r6, r0, r3
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	f002 fa3a 	bl	8010734 <ucdr_alignment>
 800e2c0:	f100 0508 	add.w	r5, r0, #8
 800e2c4:	4435      	add	r5, r6
 800e2c6:	2108      	movs	r1, #8
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	f002 fa33 	bl	8010734 <ucdr_alignment>
 800e2ce:	f1c4 0408 	rsb	r4, r4, #8
 800e2d2:	4420      	add	r0, r4
 800e2d4:	4428      	add	r0, r5
 800e2d6:	bd70      	pop	{r4, r5, r6, pc}

0800e2d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800e2d8:	4800      	ldr	r0, [pc, #0]	@ (800e2dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800e2da:	4770      	bx	lr
 800e2dc:	20000d3c 	.word	0x20000d3c

0800e2e0 <ucdr_serialize_endian_array_char>:
 800e2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	461f      	mov	r7, r3
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	4690      	mov	r8, r2
 800e2ec:	f002 f9ca 	bl	8010684 <ucdr_check_buffer_available_for>
 800e2f0:	b9e0      	cbnz	r0, 800e32c <ucdr_serialize_endian_array_char+0x4c>
 800e2f2:	463e      	mov	r6, r7
 800e2f4:	e009      	b.n	800e30a <ucdr_serialize_endian_array_char+0x2a>
 800e2f6:	68a8      	ldr	r0, [r5, #8]
 800e2f8:	f00d ffb1 	bl	801c25e <memcpy>
 800e2fc:	68ab      	ldr	r3, [r5, #8]
 800e2fe:	6928      	ldr	r0, [r5, #16]
 800e300:	4423      	add	r3, r4
 800e302:	4420      	add	r0, r4
 800e304:	1b36      	subs	r6, r6, r4
 800e306:	60ab      	str	r3, [r5, #8]
 800e308:	6128      	str	r0, [r5, #16]
 800e30a:	2201      	movs	r2, #1
 800e30c:	4631      	mov	r1, r6
 800e30e:	4628      	mov	r0, r5
 800e310:	f002 fa40 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e314:	1bb9      	subs	r1, r7, r6
 800e316:	4604      	mov	r4, r0
 800e318:	4602      	mov	r2, r0
 800e31a:	4441      	add	r1, r8
 800e31c:	2800      	cmp	r0, #0
 800e31e:	d1ea      	bne.n	800e2f6 <ucdr_serialize_endian_array_char+0x16>
 800e320:	2301      	movs	r3, #1
 800e322:	7da8      	ldrb	r0, [r5, #22]
 800e324:	756b      	strb	r3, [r5, #21]
 800e326:	4058      	eors	r0, r3
 800e328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e32c:	463a      	mov	r2, r7
 800e32e:	68a8      	ldr	r0, [r5, #8]
 800e330:	4641      	mov	r1, r8
 800e332:	f00d ff94 	bl	801c25e <memcpy>
 800e336:	68aa      	ldr	r2, [r5, #8]
 800e338:	692b      	ldr	r3, [r5, #16]
 800e33a:	443a      	add	r2, r7
 800e33c:	443b      	add	r3, r7
 800e33e:	60aa      	str	r2, [r5, #8]
 800e340:	612b      	str	r3, [r5, #16]
 800e342:	e7ed      	b.n	800e320 <ucdr_serialize_endian_array_char+0x40>

0800e344 <ucdr_deserialize_endian_array_char>:
 800e344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e348:	4619      	mov	r1, r3
 800e34a:	461f      	mov	r7, r3
 800e34c:	4605      	mov	r5, r0
 800e34e:	4690      	mov	r8, r2
 800e350:	f002 f998 	bl	8010684 <ucdr_check_buffer_available_for>
 800e354:	b9e0      	cbnz	r0, 800e390 <ucdr_deserialize_endian_array_char+0x4c>
 800e356:	463e      	mov	r6, r7
 800e358:	e009      	b.n	800e36e <ucdr_deserialize_endian_array_char+0x2a>
 800e35a:	68a9      	ldr	r1, [r5, #8]
 800e35c:	f00d ff7f 	bl	801c25e <memcpy>
 800e360:	68aa      	ldr	r2, [r5, #8]
 800e362:	692b      	ldr	r3, [r5, #16]
 800e364:	4422      	add	r2, r4
 800e366:	4423      	add	r3, r4
 800e368:	1b36      	subs	r6, r6, r4
 800e36a:	60aa      	str	r2, [r5, #8]
 800e36c:	612b      	str	r3, [r5, #16]
 800e36e:	2201      	movs	r2, #1
 800e370:	4631      	mov	r1, r6
 800e372:	4628      	mov	r0, r5
 800e374:	f002 fa0e 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e378:	4604      	mov	r4, r0
 800e37a:	1bb8      	subs	r0, r7, r6
 800e37c:	4622      	mov	r2, r4
 800e37e:	4440      	add	r0, r8
 800e380:	2c00      	cmp	r4, #0
 800e382:	d1ea      	bne.n	800e35a <ucdr_deserialize_endian_array_char+0x16>
 800e384:	2301      	movs	r3, #1
 800e386:	7da8      	ldrb	r0, [r5, #22]
 800e388:	756b      	strb	r3, [r5, #21]
 800e38a:	4058      	eors	r0, r3
 800e38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e390:	463a      	mov	r2, r7
 800e392:	68a9      	ldr	r1, [r5, #8]
 800e394:	4640      	mov	r0, r8
 800e396:	f00d ff62 	bl	801c25e <memcpy>
 800e39a:	68aa      	ldr	r2, [r5, #8]
 800e39c:	692b      	ldr	r3, [r5, #16]
 800e39e:	443a      	add	r2, r7
 800e3a0:	443b      	add	r3, r7
 800e3a2:	60aa      	str	r2, [r5, #8]
 800e3a4:	612b      	str	r3, [r5, #16]
 800e3a6:	e7ed      	b.n	800e384 <ucdr_deserialize_endian_array_char+0x40>

0800e3a8 <ucdr_serialize_array_uint8_t>:
 800e3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ac:	4688      	mov	r8, r1
 800e3ae:	4611      	mov	r1, r2
 800e3b0:	4617      	mov	r7, r2
 800e3b2:	4605      	mov	r5, r0
 800e3b4:	f002 f966 	bl	8010684 <ucdr_check_buffer_available_for>
 800e3b8:	b9e0      	cbnz	r0, 800e3f4 <ucdr_serialize_array_uint8_t+0x4c>
 800e3ba:	463e      	mov	r6, r7
 800e3bc:	e009      	b.n	800e3d2 <ucdr_serialize_array_uint8_t+0x2a>
 800e3be:	68a8      	ldr	r0, [r5, #8]
 800e3c0:	f00d ff4d 	bl	801c25e <memcpy>
 800e3c4:	68aa      	ldr	r2, [r5, #8]
 800e3c6:	692b      	ldr	r3, [r5, #16]
 800e3c8:	4422      	add	r2, r4
 800e3ca:	4423      	add	r3, r4
 800e3cc:	1b36      	subs	r6, r6, r4
 800e3ce:	60aa      	str	r2, [r5, #8]
 800e3d0:	612b      	str	r3, [r5, #16]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	f002 f9dc 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e3dc:	1bb9      	subs	r1, r7, r6
 800e3de:	4604      	mov	r4, r0
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	4441      	add	r1, r8
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	d1ea      	bne.n	800e3be <ucdr_serialize_array_uint8_t+0x16>
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	7da8      	ldrb	r0, [r5, #22]
 800e3ec:	756b      	strb	r3, [r5, #21]
 800e3ee:	4058      	eors	r0, r3
 800e3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f4:	463a      	mov	r2, r7
 800e3f6:	68a8      	ldr	r0, [r5, #8]
 800e3f8:	4641      	mov	r1, r8
 800e3fa:	f00d ff30 	bl	801c25e <memcpy>
 800e3fe:	68aa      	ldr	r2, [r5, #8]
 800e400:	692b      	ldr	r3, [r5, #16]
 800e402:	443a      	add	r2, r7
 800e404:	443b      	add	r3, r7
 800e406:	60aa      	str	r2, [r5, #8]
 800e408:	612b      	str	r3, [r5, #16]
 800e40a:	e7ed      	b.n	800e3e8 <ucdr_serialize_array_uint8_t+0x40>

0800e40c <ucdr_serialize_endian_array_uint8_t>:
 800e40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e410:	4619      	mov	r1, r3
 800e412:	461f      	mov	r7, r3
 800e414:	4605      	mov	r5, r0
 800e416:	4690      	mov	r8, r2
 800e418:	f002 f934 	bl	8010684 <ucdr_check_buffer_available_for>
 800e41c:	b9e0      	cbnz	r0, 800e458 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800e41e:	463e      	mov	r6, r7
 800e420:	e009      	b.n	800e436 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800e422:	68a8      	ldr	r0, [r5, #8]
 800e424:	f00d ff1b 	bl	801c25e <memcpy>
 800e428:	68ab      	ldr	r3, [r5, #8]
 800e42a:	6928      	ldr	r0, [r5, #16]
 800e42c:	4423      	add	r3, r4
 800e42e:	4420      	add	r0, r4
 800e430:	1b36      	subs	r6, r6, r4
 800e432:	60ab      	str	r3, [r5, #8]
 800e434:	6128      	str	r0, [r5, #16]
 800e436:	2201      	movs	r2, #1
 800e438:	4631      	mov	r1, r6
 800e43a:	4628      	mov	r0, r5
 800e43c:	f002 f9aa 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e440:	1bb9      	subs	r1, r7, r6
 800e442:	4604      	mov	r4, r0
 800e444:	4602      	mov	r2, r0
 800e446:	4441      	add	r1, r8
 800e448:	2800      	cmp	r0, #0
 800e44a:	d1ea      	bne.n	800e422 <ucdr_serialize_endian_array_uint8_t+0x16>
 800e44c:	2301      	movs	r3, #1
 800e44e:	7da8      	ldrb	r0, [r5, #22]
 800e450:	756b      	strb	r3, [r5, #21]
 800e452:	4058      	eors	r0, r3
 800e454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e458:	463a      	mov	r2, r7
 800e45a:	68a8      	ldr	r0, [r5, #8]
 800e45c:	4641      	mov	r1, r8
 800e45e:	f00d fefe 	bl	801c25e <memcpy>
 800e462:	68aa      	ldr	r2, [r5, #8]
 800e464:	692b      	ldr	r3, [r5, #16]
 800e466:	443a      	add	r2, r7
 800e468:	443b      	add	r3, r7
 800e46a:	60aa      	str	r2, [r5, #8]
 800e46c:	612b      	str	r3, [r5, #16]
 800e46e:	e7ed      	b.n	800e44c <ucdr_serialize_endian_array_uint8_t+0x40>

0800e470 <ucdr_deserialize_array_uint8_t>:
 800e470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e474:	4688      	mov	r8, r1
 800e476:	4611      	mov	r1, r2
 800e478:	4617      	mov	r7, r2
 800e47a:	4605      	mov	r5, r0
 800e47c:	f002 f902 	bl	8010684 <ucdr_check_buffer_available_for>
 800e480:	b9e0      	cbnz	r0, 800e4bc <ucdr_deserialize_array_uint8_t+0x4c>
 800e482:	463e      	mov	r6, r7
 800e484:	e009      	b.n	800e49a <ucdr_deserialize_array_uint8_t+0x2a>
 800e486:	68a9      	ldr	r1, [r5, #8]
 800e488:	f00d fee9 	bl	801c25e <memcpy>
 800e48c:	68aa      	ldr	r2, [r5, #8]
 800e48e:	692b      	ldr	r3, [r5, #16]
 800e490:	4422      	add	r2, r4
 800e492:	4423      	add	r3, r4
 800e494:	1b36      	subs	r6, r6, r4
 800e496:	60aa      	str	r2, [r5, #8]
 800e498:	612b      	str	r3, [r5, #16]
 800e49a:	2201      	movs	r2, #1
 800e49c:	4631      	mov	r1, r6
 800e49e:	4628      	mov	r0, r5
 800e4a0:	f002 f978 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	1bb8      	subs	r0, r7, r6
 800e4a8:	4622      	mov	r2, r4
 800e4aa:	4440      	add	r0, r8
 800e4ac:	2c00      	cmp	r4, #0
 800e4ae:	d1ea      	bne.n	800e486 <ucdr_deserialize_array_uint8_t+0x16>
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	7da8      	ldrb	r0, [r5, #22]
 800e4b4:	756b      	strb	r3, [r5, #21]
 800e4b6:	4058      	eors	r0, r3
 800e4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4bc:	463a      	mov	r2, r7
 800e4be:	68a9      	ldr	r1, [r5, #8]
 800e4c0:	4640      	mov	r0, r8
 800e4c2:	f00d fecc 	bl	801c25e <memcpy>
 800e4c6:	68aa      	ldr	r2, [r5, #8]
 800e4c8:	692b      	ldr	r3, [r5, #16]
 800e4ca:	443a      	add	r2, r7
 800e4cc:	443b      	add	r3, r7
 800e4ce:	60aa      	str	r2, [r5, #8]
 800e4d0:	612b      	str	r3, [r5, #16]
 800e4d2:	e7ed      	b.n	800e4b0 <ucdr_deserialize_array_uint8_t+0x40>

0800e4d4 <ucdr_deserialize_endian_array_uint8_t>:
 800e4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d8:	4619      	mov	r1, r3
 800e4da:	461f      	mov	r7, r3
 800e4dc:	4605      	mov	r5, r0
 800e4de:	4690      	mov	r8, r2
 800e4e0:	f002 f8d0 	bl	8010684 <ucdr_check_buffer_available_for>
 800e4e4:	b9e0      	cbnz	r0, 800e520 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e4e6:	463e      	mov	r6, r7
 800e4e8:	e009      	b.n	800e4fe <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800e4ea:	68a9      	ldr	r1, [r5, #8]
 800e4ec:	f00d feb7 	bl	801c25e <memcpy>
 800e4f0:	68aa      	ldr	r2, [r5, #8]
 800e4f2:	692b      	ldr	r3, [r5, #16]
 800e4f4:	4422      	add	r2, r4
 800e4f6:	4423      	add	r3, r4
 800e4f8:	1b36      	subs	r6, r6, r4
 800e4fa:	60aa      	str	r2, [r5, #8]
 800e4fc:	612b      	str	r3, [r5, #16]
 800e4fe:	2201      	movs	r2, #1
 800e500:	4631      	mov	r1, r6
 800e502:	4628      	mov	r0, r5
 800e504:	f002 f946 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e508:	4604      	mov	r4, r0
 800e50a:	1bb8      	subs	r0, r7, r6
 800e50c:	4622      	mov	r2, r4
 800e50e:	4440      	add	r0, r8
 800e510:	2c00      	cmp	r4, #0
 800e512:	d1ea      	bne.n	800e4ea <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e514:	2301      	movs	r3, #1
 800e516:	7da8      	ldrb	r0, [r5, #22]
 800e518:	756b      	strb	r3, [r5, #21]
 800e51a:	4058      	eors	r0, r3
 800e51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e520:	463a      	mov	r2, r7
 800e522:	68a9      	ldr	r1, [r5, #8]
 800e524:	4640      	mov	r0, r8
 800e526:	f00d fe9a 	bl	801c25e <memcpy>
 800e52a:	68aa      	ldr	r2, [r5, #8]
 800e52c:	692b      	ldr	r3, [r5, #16]
 800e52e:	443a      	add	r2, r7
 800e530:	443b      	add	r3, r7
 800e532:	60aa      	str	r2, [r5, #8]
 800e534:	612b      	str	r3, [r5, #16]
 800e536:	e7ed      	b.n	800e514 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800e538 <ucdr_serialize_endian_array_int32_t>:
 800e538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e53c:	4688      	mov	r8, r1
 800e53e:	2104      	movs	r1, #4
 800e540:	4604      	mov	r4, r0
 800e542:	4616      	mov	r6, r2
 800e544:	461f      	mov	r7, r3
 800e546:	f002 f8fd 	bl	8010744 <ucdr_buffer_alignment>
 800e54a:	4601      	mov	r1, r0
 800e54c:	4620      	mov	r0, r4
 800e54e:	7d65      	ldrb	r5, [r4, #21]
 800e550:	f002 f93c 	bl	80107cc <ucdr_advance_buffer>
 800e554:	f1b8 0f01 	cmp.w	r8, #1
 800e558:	7565      	strb	r5, [r4, #21]
 800e55a:	d010      	beq.n	800e57e <ucdr_serialize_endian_array_int32_t+0x46>
 800e55c:	b157      	cbz	r7, 800e574 <ucdr_serialize_endian_array_int32_t+0x3c>
 800e55e:	3e04      	subs	r6, #4
 800e560:	2500      	movs	r5, #0
 800e562:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800e566:	4641      	mov	r1, r8
 800e568:	4620      	mov	r0, r4
 800e56a:	3501      	adds	r5, #1
 800e56c:	f001 f984 	bl	800f878 <ucdr_serialize_endian_int32_t>
 800e570:	42af      	cmp	r7, r5
 800e572:	d1f6      	bne.n	800e562 <ucdr_serialize_endian_array_int32_t+0x2a>
 800e574:	7da0      	ldrb	r0, [r4, #22]
 800e576:	f080 0001 	eor.w	r0, r0, #1
 800e57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e57e:	00bf      	lsls	r7, r7, #2
 800e580:	4639      	mov	r1, r7
 800e582:	4620      	mov	r0, r4
 800e584:	f002 f87e 	bl	8010684 <ucdr_check_buffer_available_for>
 800e588:	b9f8      	cbnz	r0, 800e5ca <ucdr_serialize_endian_array_int32_t+0x92>
 800e58a:	46b8      	mov	r8, r7
 800e58c:	e00a      	b.n	800e5a4 <ucdr_serialize_endian_array_int32_t+0x6c>
 800e58e:	68a0      	ldr	r0, [r4, #8]
 800e590:	f00d fe65 	bl	801c25e <memcpy>
 800e594:	68a2      	ldr	r2, [r4, #8]
 800e596:	6923      	ldr	r3, [r4, #16]
 800e598:	442a      	add	r2, r5
 800e59a:	442b      	add	r3, r5
 800e59c:	eba8 0805 	sub.w	r8, r8, r5
 800e5a0:	60a2      	str	r2, [r4, #8]
 800e5a2:	6123      	str	r3, [r4, #16]
 800e5a4:	2204      	movs	r2, #4
 800e5a6:	4641      	mov	r1, r8
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f002 f8f3 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e5ae:	eba7 0108 	sub.w	r1, r7, r8
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	4431      	add	r1, r6
 800e5b8:	2800      	cmp	r0, #0
 800e5ba:	d1e8      	bne.n	800e58e <ucdr_serialize_endian_array_int32_t+0x56>
 800e5bc:	7da0      	ldrb	r0, [r4, #22]
 800e5be:	2304      	movs	r3, #4
 800e5c0:	7563      	strb	r3, [r4, #21]
 800e5c2:	f080 0001 	eor.w	r0, r0, #1
 800e5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ca:	463a      	mov	r2, r7
 800e5cc:	68a0      	ldr	r0, [r4, #8]
 800e5ce:	4631      	mov	r1, r6
 800e5d0:	f00d fe45 	bl	801c25e <memcpy>
 800e5d4:	68a2      	ldr	r2, [r4, #8]
 800e5d6:	6923      	ldr	r3, [r4, #16]
 800e5d8:	443a      	add	r2, r7
 800e5da:	443b      	add	r3, r7
 800e5dc:	60a2      	str	r2, [r4, #8]
 800e5de:	6123      	str	r3, [r4, #16]
 800e5e0:	e7ec      	b.n	800e5bc <ucdr_serialize_endian_array_int32_t+0x84>
 800e5e2:	bf00      	nop

0800e5e4 <ucdr_deserialize_endian_array_int32_t>:
 800e5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e8:	4688      	mov	r8, r1
 800e5ea:	2104      	movs	r1, #4
 800e5ec:	4605      	mov	r5, r0
 800e5ee:	4614      	mov	r4, r2
 800e5f0:	461f      	mov	r7, r3
 800e5f2:	f002 f8a7 	bl	8010744 <ucdr_buffer_alignment>
 800e5f6:	4601      	mov	r1, r0
 800e5f8:	4628      	mov	r0, r5
 800e5fa:	7d6e      	ldrb	r6, [r5, #21]
 800e5fc:	f002 f8e6 	bl	80107cc <ucdr_advance_buffer>
 800e600:	f1b8 0f01 	cmp.w	r8, #1
 800e604:	756e      	strb	r6, [r5, #21]
 800e606:	d010      	beq.n	800e62a <ucdr_deserialize_endian_array_int32_t+0x46>
 800e608:	2600      	movs	r6, #0
 800e60a:	b14f      	cbz	r7, 800e620 <ucdr_deserialize_endian_array_int32_t+0x3c>
 800e60c:	4622      	mov	r2, r4
 800e60e:	4641      	mov	r1, r8
 800e610:	4628      	mov	r0, r5
 800e612:	3601      	adds	r6, #1
 800e614:	f001 fa4e 	bl	800fab4 <ucdr_deserialize_endian_int32_t>
 800e618:	42b7      	cmp	r7, r6
 800e61a:	f104 0404 	add.w	r4, r4, #4
 800e61e:	d1f5      	bne.n	800e60c <ucdr_deserialize_endian_array_int32_t+0x28>
 800e620:	7da8      	ldrb	r0, [r5, #22]
 800e622:	f080 0001 	eor.w	r0, r0, #1
 800e626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e62a:	00bf      	lsls	r7, r7, #2
 800e62c:	4639      	mov	r1, r7
 800e62e:	4628      	mov	r0, r5
 800e630:	f002 f828 	bl	8010684 <ucdr_check_buffer_available_for>
 800e634:	b9f8      	cbnz	r0, 800e676 <ucdr_deserialize_endian_array_int32_t+0x92>
 800e636:	46b8      	mov	r8, r7
 800e638:	e00a      	b.n	800e650 <ucdr_deserialize_endian_array_int32_t+0x6c>
 800e63a:	68a9      	ldr	r1, [r5, #8]
 800e63c:	f00d fe0f 	bl	801c25e <memcpy>
 800e640:	68aa      	ldr	r2, [r5, #8]
 800e642:	692b      	ldr	r3, [r5, #16]
 800e644:	4432      	add	r2, r6
 800e646:	4433      	add	r3, r6
 800e648:	eba8 0806 	sub.w	r8, r8, r6
 800e64c:	60aa      	str	r2, [r5, #8]
 800e64e:	612b      	str	r3, [r5, #16]
 800e650:	2204      	movs	r2, #4
 800e652:	4641      	mov	r1, r8
 800e654:	4628      	mov	r0, r5
 800e656:	f002 f89d 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e65a:	4606      	mov	r6, r0
 800e65c:	eba7 0008 	sub.w	r0, r7, r8
 800e660:	4632      	mov	r2, r6
 800e662:	4420      	add	r0, r4
 800e664:	2e00      	cmp	r6, #0
 800e666:	d1e8      	bne.n	800e63a <ucdr_deserialize_endian_array_int32_t+0x56>
 800e668:	7da8      	ldrb	r0, [r5, #22]
 800e66a:	2304      	movs	r3, #4
 800e66c:	756b      	strb	r3, [r5, #21]
 800e66e:	f080 0001 	eor.w	r0, r0, #1
 800e672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e676:	463a      	mov	r2, r7
 800e678:	68a9      	ldr	r1, [r5, #8]
 800e67a:	4620      	mov	r0, r4
 800e67c:	f00d fdef 	bl	801c25e <memcpy>
 800e680:	68aa      	ldr	r2, [r5, #8]
 800e682:	692b      	ldr	r3, [r5, #16]
 800e684:	443a      	add	r2, r7
 800e686:	443b      	add	r3, r7
 800e688:	60aa      	str	r2, [r5, #8]
 800e68a:	612b      	str	r3, [r5, #16]
 800e68c:	e7ec      	b.n	800e668 <ucdr_deserialize_endian_array_int32_t+0x84>
 800e68e:	bf00      	nop

0800e690 <ucdr_serialize_endian_array_float>:
 800e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e694:	4688      	mov	r8, r1
 800e696:	2104      	movs	r1, #4
 800e698:	4604      	mov	r4, r0
 800e69a:	4616      	mov	r6, r2
 800e69c:	461f      	mov	r7, r3
 800e69e:	f002 f851 	bl	8010744 <ucdr_buffer_alignment>
 800e6a2:	4601      	mov	r1, r0
 800e6a4:	4620      	mov	r0, r4
 800e6a6:	7d65      	ldrb	r5, [r4, #21]
 800e6a8:	f002 f890 	bl	80107cc <ucdr_advance_buffer>
 800e6ac:	f1b8 0f01 	cmp.w	r8, #1
 800e6b0:	7565      	strb	r5, [r4, #21]
 800e6b2:	d00f      	beq.n	800e6d4 <ucdr_serialize_endian_array_float+0x44>
 800e6b4:	2500      	movs	r5, #0
 800e6b6:	b147      	cbz	r7, 800e6ca <ucdr_serialize_endian_array_float+0x3a>
 800e6b8:	ecb6 0a01 	vldmia	r6!, {s0}
 800e6bc:	4641      	mov	r1, r8
 800e6be:	4620      	mov	r0, r4
 800e6c0:	3501      	adds	r5, #1
 800e6c2:	f001 fb1d 	bl	800fd00 <ucdr_serialize_endian_float>
 800e6c6:	42af      	cmp	r7, r5
 800e6c8:	d1f6      	bne.n	800e6b8 <ucdr_serialize_endian_array_float+0x28>
 800e6ca:	7da0      	ldrb	r0, [r4, #22]
 800e6cc:	f080 0001 	eor.w	r0, r0, #1
 800e6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d4:	00bf      	lsls	r7, r7, #2
 800e6d6:	4639      	mov	r1, r7
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f001 ffd3 	bl	8010684 <ucdr_check_buffer_available_for>
 800e6de:	b9f8      	cbnz	r0, 800e720 <ucdr_serialize_endian_array_float+0x90>
 800e6e0:	46b8      	mov	r8, r7
 800e6e2:	e00a      	b.n	800e6fa <ucdr_serialize_endian_array_float+0x6a>
 800e6e4:	68a0      	ldr	r0, [r4, #8]
 800e6e6:	f00d fdba 	bl	801c25e <memcpy>
 800e6ea:	68a2      	ldr	r2, [r4, #8]
 800e6ec:	6923      	ldr	r3, [r4, #16]
 800e6ee:	442a      	add	r2, r5
 800e6f0:	442b      	add	r3, r5
 800e6f2:	eba8 0805 	sub.w	r8, r8, r5
 800e6f6:	60a2      	str	r2, [r4, #8]
 800e6f8:	6123      	str	r3, [r4, #16]
 800e6fa:	2204      	movs	r2, #4
 800e6fc:	4641      	mov	r1, r8
 800e6fe:	4620      	mov	r0, r4
 800e700:	f002 f848 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e704:	eba7 0108 	sub.w	r1, r7, r8
 800e708:	4605      	mov	r5, r0
 800e70a:	4602      	mov	r2, r0
 800e70c:	4431      	add	r1, r6
 800e70e:	2800      	cmp	r0, #0
 800e710:	d1e8      	bne.n	800e6e4 <ucdr_serialize_endian_array_float+0x54>
 800e712:	7da0      	ldrb	r0, [r4, #22]
 800e714:	2304      	movs	r3, #4
 800e716:	7563      	strb	r3, [r4, #21]
 800e718:	f080 0001 	eor.w	r0, r0, #1
 800e71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e720:	463a      	mov	r2, r7
 800e722:	68a0      	ldr	r0, [r4, #8]
 800e724:	4631      	mov	r1, r6
 800e726:	f00d fd9a 	bl	801c25e <memcpy>
 800e72a:	68a2      	ldr	r2, [r4, #8]
 800e72c:	6923      	ldr	r3, [r4, #16]
 800e72e:	443a      	add	r2, r7
 800e730:	443b      	add	r3, r7
 800e732:	60a2      	str	r2, [r4, #8]
 800e734:	6123      	str	r3, [r4, #16]
 800e736:	e7ec      	b.n	800e712 <ucdr_serialize_endian_array_float+0x82>

0800e738 <ucdr_deserialize_endian_array_float>:
 800e738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e73c:	4688      	mov	r8, r1
 800e73e:	2104      	movs	r1, #4
 800e740:	4605      	mov	r5, r0
 800e742:	4614      	mov	r4, r2
 800e744:	461f      	mov	r7, r3
 800e746:	f001 fffd 	bl	8010744 <ucdr_buffer_alignment>
 800e74a:	4601      	mov	r1, r0
 800e74c:	4628      	mov	r0, r5
 800e74e:	7d6e      	ldrb	r6, [r5, #21]
 800e750:	f002 f83c 	bl	80107cc <ucdr_advance_buffer>
 800e754:	f1b8 0f01 	cmp.w	r8, #1
 800e758:	756e      	strb	r6, [r5, #21]
 800e75a:	d010      	beq.n	800e77e <ucdr_deserialize_endian_array_float+0x46>
 800e75c:	2600      	movs	r6, #0
 800e75e:	b14f      	cbz	r7, 800e774 <ucdr_deserialize_endian_array_float+0x3c>
 800e760:	4622      	mov	r2, r4
 800e762:	4641      	mov	r1, r8
 800e764:	4628      	mov	r0, r5
 800e766:	3601      	adds	r6, #1
 800e768:	f001 fbea 	bl	800ff40 <ucdr_deserialize_endian_float>
 800e76c:	42b7      	cmp	r7, r6
 800e76e:	f104 0404 	add.w	r4, r4, #4
 800e772:	d1f5      	bne.n	800e760 <ucdr_deserialize_endian_array_float+0x28>
 800e774:	7da8      	ldrb	r0, [r5, #22]
 800e776:	f080 0001 	eor.w	r0, r0, #1
 800e77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e77e:	00bf      	lsls	r7, r7, #2
 800e780:	4639      	mov	r1, r7
 800e782:	4628      	mov	r0, r5
 800e784:	f001 ff7e 	bl	8010684 <ucdr_check_buffer_available_for>
 800e788:	b9f8      	cbnz	r0, 800e7ca <ucdr_deserialize_endian_array_float+0x92>
 800e78a:	46b8      	mov	r8, r7
 800e78c:	e00a      	b.n	800e7a4 <ucdr_deserialize_endian_array_float+0x6c>
 800e78e:	68a9      	ldr	r1, [r5, #8]
 800e790:	f00d fd65 	bl	801c25e <memcpy>
 800e794:	68aa      	ldr	r2, [r5, #8]
 800e796:	692b      	ldr	r3, [r5, #16]
 800e798:	4432      	add	r2, r6
 800e79a:	4433      	add	r3, r6
 800e79c:	eba8 0806 	sub.w	r8, r8, r6
 800e7a0:	60aa      	str	r2, [r5, #8]
 800e7a2:	612b      	str	r3, [r5, #16]
 800e7a4:	2204      	movs	r2, #4
 800e7a6:	4641      	mov	r1, r8
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	f001 fff3 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e7ae:	4606      	mov	r6, r0
 800e7b0:	eba7 0008 	sub.w	r0, r7, r8
 800e7b4:	4632      	mov	r2, r6
 800e7b6:	4420      	add	r0, r4
 800e7b8:	2e00      	cmp	r6, #0
 800e7ba:	d1e8      	bne.n	800e78e <ucdr_deserialize_endian_array_float+0x56>
 800e7bc:	7da8      	ldrb	r0, [r5, #22]
 800e7be:	2304      	movs	r3, #4
 800e7c0:	756b      	strb	r3, [r5, #21]
 800e7c2:	f080 0001 	eor.w	r0, r0, #1
 800e7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ca:	463a      	mov	r2, r7
 800e7cc:	68a9      	ldr	r1, [r5, #8]
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f00d fd45 	bl	801c25e <memcpy>
 800e7d4:	68aa      	ldr	r2, [r5, #8]
 800e7d6:	692b      	ldr	r3, [r5, #16]
 800e7d8:	443a      	add	r2, r7
 800e7da:	443b      	add	r3, r7
 800e7dc:	60aa      	str	r2, [r5, #8]
 800e7de:	612b      	str	r3, [r5, #16]
 800e7e0:	e7ec      	b.n	800e7bc <ucdr_deserialize_endian_array_float+0x84>
 800e7e2:	bf00      	nop

0800e7e4 <ucdr_serialize_array_double>:
 800e7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e8:	460e      	mov	r6, r1
 800e7ea:	2108      	movs	r1, #8
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	4617      	mov	r7, r2
 800e7f0:	f001 ffa8 	bl	8010744 <ucdr_buffer_alignment>
 800e7f4:	4601      	mov	r1, r0
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	7d65      	ldrb	r5, [r4, #21]
 800e7fa:	f001 ffe7 	bl	80107cc <ucdr_advance_buffer>
 800e7fe:	7d21      	ldrb	r1, [r4, #20]
 800e800:	7565      	strb	r5, [r4, #21]
 800e802:	2901      	cmp	r1, #1
 800e804:	d010      	beq.n	800e828 <ucdr_serialize_array_double+0x44>
 800e806:	b157      	cbz	r7, 800e81e <ucdr_serialize_array_double+0x3a>
 800e808:	2500      	movs	r5, #0
 800e80a:	e000      	b.n	800e80e <ucdr_serialize_array_double+0x2a>
 800e80c:	7d21      	ldrb	r1, [r4, #20]
 800e80e:	ecb6 0b02 	vldmia	r6!, {d0}
 800e812:	4620      	mov	r0, r4
 800e814:	3501      	adds	r5, #1
 800e816:	f001 fce7 	bl	80101e8 <ucdr_serialize_endian_double>
 800e81a:	42af      	cmp	r7, r5
 800e81c:	d1f6      	bne.n	800e80c <ucdr_serialize_array_double+0x28>
 800e81e:	7da0      	ldrb	r0, [r4, #22]
 800e820:	f080 0001 	eor.w	r0, r0, #1
 800e824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e828:	00ff      	lsls	r7, r7, #3
 800e82a:	4639      	mov	r1, r7
 800e82c:	4620      	mov	r0, r4
 800e82e:	f001 ff29 	bl	8010684 <ucdr_check_buffer_available_for>
 800e832:	b9f8      	cbnz	r0, 800e874 <ucdr_serialize_array_double+0x90>
 800e834:	46b8      	mov	r8, r7
 800e836:	e00a      	b.n	800e84e <ucdr_serialize_array_double+0x6a>
 800e838:	68a0      	ldr	r0, [r4, #8]
 800e83a:	f00d fd10 	bl	801c25e <memcpy>
 800e83e:	68a2      	ldr	r2, [r4, #8]
 800e840:	6923      	ldr	r3, [r4, #16]
 800e842:	442a      	add	r2, r5
 800e844:	442b      	add	r3, r5
 800e846:	eba8 0805 	sub.w	r8, r8, r5
 800e84a:	60a2      	str	r2, [r4, #8]
 800e84c:	6123      	str	r3, [r4, #16]
 800e84e:	2208      	movs	r2, #8
 800e850:	4641      	mov	r1, r8
 800e852:	4620      	mov	r0, r4
 800e854:	f001 ff9e 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e858:	eba7 0108 	sub.w	r1, r7, r8
 800e85c:	4605      	mov	r5, r0
 800e85e:	4602      	mov	r2, r0
 800e860:	4431      	add	r1, r6
 800e862:	2800      	cmp	r0, #0
 800e864:	d1e8      	bne.n	800e838 <ucdr_serialize_array_double+0x54>
 800e866:	7da0      	ldrb	r0, [r4, #22]
 800e868:	2308      	movs	r3, #8
 800e86a:	7563      	strb	r3, [r4, #21]
 800e86c:	f080 0001 	eor.w	r0, r0, #1
 800e870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e874:	463a      	mov	r2, r7
 800e876:	68a0      	ldr	r0, [r4, #8]
 800e878:	4631      	mov	r1, r6
 800e87a:	f00d fcf0 	bl	801c25e <memcpy>
 800e87e:	68a2      	ldr	r2, [r4, #8]
 800e880:	6923      	ldr	r3, [r4, #16]
 800e882:	443a      	add	r2, r7
 800e884:	443b      	add	r3, r7
 800e886:	60a2      	str	r2, [r4, #8]
 800e888:	6123      	str	r3, [r4, #16]
 800e88a:	e7ec      	b.n	800e866 <ucdr_serialize_array_double+0x82>

0800e88c <ucdr_serialize_endian_array_double>:
 800e88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e890:	4688      	mov	r8, r1
 800e892:	2108      	movs	r1, #8
 800e894:	4604      	mov	r4, r0
 800e896:	4616      	mov	r6, r2
 800e898:	461f      	mov	r7, r3
 800e89a:	f001 ff53 	bl	8010744 <ucdr_buffer_alignment>
 800e89e:	4601      	mov	r1, r0
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	7d65      	ldrb	r5, [r4, #21]
 800e8a4:	f001 ff92 	bl	80107cc <ucdr_advance_buffer>
 800e8a8:	f1b8 0f01 	cmp.w	r8, #1
 800e8ac:	7565      	strb	r5, [r4, #21]
 800e8ae:	d00f      	beq.n	800e8d0 <ucdr_serialize_endian_array_double+0x44>
 800e8b0:	2500      	movs	r5, #0
 800e8b2:	b147      	cbz	r7, 800e8c6 <ucdr_serialize_endian_array_double+0x3a>
 800e8b4:	ecb6 0b02 	vldmia	r6!, {d0}
 800e8b8:	4641      	mov	r1, r8
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	3501      	adds	r5, #1
 800e8be:	f001 fc93 	bl	80101e8 <ucdr_serialize_endian_double>
 800e8c2:	42af      	cmp	r7, r5
 800e8c4:	d1f6      	bne.n	800e8b4 <ucdr_serialize_endian_array_double+0x28>
 800e8c6:	7da0      	ldrb	r0, [r4, #22]
 800e8c8:	f080 0001 	eor.w	r0, r0, #1
 800e8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d0:	00ff      	lsls	r7, r7, #3
 800e8d2:	4639      	mov	r1, r7
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f001 fed5 	bl	8010684 <ucdr_check_buffer_available_for>
 800e8da:	b9f8      	cbnz	r0, 800e91c <ucdr_serialize_endian_array_double+0x90>
 800e8dc:	46b8      	mov	r8, r7
 800e8de:	e00a      	b.n	800e8f6 <ucdr_serialize_endian_array_double+0x6a>
 800e8e0:	68a0      	ldr	r0, [r4, #8]
 800e8e2:	f00d fcbc 	bl	801c25e <memcpy>
 800e8e6:	68a2      	ldr	r2, [r4, #8]
 800e8e8:	6923      	ldr	r3, [r4, #16]
 800e8ea:	442a      	add	r2, r5
 800e8ec:	442b      	add	r3, r5
 800e8ee:	eba8 0805 	sub.w	r8, r8, r5
 800e8f2:	60a2      	str	r2, [r4, #8]
 800e8f4:	6123      	str	r3, [r4, #16]
 800e8f6:	2208      	movs	r2, #8
 800e8f8:	4641      	mov	r1, r8
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	f001 ff4a 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e900:	eba7 0108 	sub.w	r1, r7, r8
 800e904:	4605      	mov	r5, r0
 800e906:	4602      	mov	r2, r0
 800e908:	4431      	add	r1, r6
 800e90a:	2800      	cmp	r0, #0
 800e90c:	d1e8      	bne.n	800e8e0 <ucdr_serialize_endian_array_double+0x54>
 800e90e:	7da0      	ldrb	r0, [r4, #22]
 800e910:	2308      	movs	r3, #8
 800e912:	7563      	strb	r3, [r4, #21]
 800e914:	f080 0001 	eor.w	r0, r0, #1
 800e918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e91c:	463a      	mov	r2, r7
 800e91e:	68a0      	ldr	r0, [r4, #8]
 800e920:	4631      	mov	r1, r6
 800e922:	f00d fc9c 	bl	801c25e <memcpy>
 800e926:	68a2      	ldr	r2, [r4, #8]
 800e928:	6923      	ldr	r3, [r4, #16]
 800e92a:	443a      	add	r2, r7
 800e92c:	443b      	add	r3, r7
 800e92e:	60a2      	str	r2, [r4, #8]
 800e930:	6123      	str	r3, [r4, #16]
 800e932:	e7ec      	b.n	800e90e <ucdr_serialize_endian_array_double+0x82>

0800e934 <ucdr_deserialize_array_double>:
 800e934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e938:	460e      	mov	r6, r1
 800e93a:	2108      	movs	r1, #8
 800e93c:	4604      	mov	r4, r0
 800e93e:	4617      	mov	r7, r2
 800e940:	f001 ff00 	bl	8010744 <ucdr_buffer_alignment>
 800e944:	4601      	mov	r1, r0
 800e946:	4620      	mov	r0, r4
 800e948:	7d65      	ldrb	r5, [r4, #21]
 800e94a:	f001 ff3f 	bl	80107cc <ucdr_advance_buffer>
 800e94e:	7d21      	ldrb	r1, [r4, #20]
 800e950:	7565      	strb	r5, [r4, #21]
 800e952:	2901      	cmp	r1, #1
 800e954:	d011      	beq.n	800e97a <ucdr_deserialize_array_double+0x46>
 800e956:	b15f      	cbz	r7, 800e970 <ucdr_deserialize_array_double+0x3c>
 800e958:	2500      	movs	r5, #0
 800e95a:	e000      	b.n	800e95e <ucdr_deserialize_array_double+0x2a>
 800e95c:	7d21      	ldrb	r1, [r4, #20]
 800e95e:	4632      	mov	r2, r6
 800e960:	4620      	mov	r0, r4
 800e962:	3501      	adds	r5, #1
 800e964:	f001 fdc6 	bl	80104f4 <ucdr_deserialize_endian_double>
 800e968:	42af      	cmp	r7, r5
 800e96a:	f106 0608 	add.w	r6, r6, #8
 800e96e:	d1f5      	bne.n	800e95c <ucdr_deserialize_array_double+0x28>
 800e970:	7da0      	ldrb	r0, [r4, #22]
 800e972:	f080 0001 	eor.w	r0, r0, #1
 800e976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e97a:	00ff      	lsls	r7, r7, #3
 800e97c:	4639      	mov	r1, r7
 800e97e:	4620      	mov	r0, r4
 800e980:	f001 fe80 	bl	8010684 <ucdr_check_buffer_available_for>
 800e984:	b9f8      	cbnz	r0, 800e9c6 <ucdr_deserialize_array_double+0x92>
 800e986:	46b8      	mov	r8, r7
 800e988:	e00a      	b.n	800e9a0 <ucdr_deserialize_array_double+0x6c>
 800e98a:	68a1      	ldr	r1, [r4, #8]
 800e98c:	f00d fc67 	bl	801c25e <memcpy>
 800e990:	68a2      	ldr	r2, [r4, #8]
 800e992:	6923      	ldr	r3, [r4, #16]
 800e994:	442a      	add	r2, r5
 800e996:	442b      	add	r3, r5
 800e998:	eba8 0805 	sub.w	r8, r8, r5
 800e99c:	60a2      	str	r2, [r4, #8]
 800e99e:	6123      	str	r3, [r4, #16]
 800e9a0:	2208      	movs	r2, #8
 800e9a2:	4641      	mov	r1, r8
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	f001 fef5 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	eba7 0008 	sub.w	r0, r7, r8
 800e9b0:	462a      	mov	r2, r5
 800e9b2:	4430      	add	r0, r6
 800e9b4:	2d00      	cmp	r5, #0
 800e9b6:	d1e8      	bne.n	800e98a <ucdr_deserialize_array_double+0x56>
 800e9b8:	7da0      	ldrb	r0, [r4, #22]
 800e9ba:	2308      	movs	r3, #8
 800e9bc:	7563      	strb	r3, [r4, #21]
 800e9be:	f080 0001 	eor.w	r0, r0, #1
 800e9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c6:	463a      	mov	r2, r7
 800e9c8:	68a1      	ldr	r1, [r4, #8]
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f00d fc47 	bl	801c25e <memcpy>
 800e9d0:	68a2      	ldr	r2, [r4, #8]
 800e9d2:	6923      	ldr	r3, [r4, #16]
 800e9d4:	443a      	add	r2, r7
 800e9d6:	443b      	add	r3, r7
 800e9d8:	60a2      	str	r2, [r4, #8]
 800e9da:	6123      	str	r3, [r4, #16]
 800e9dc:	e7ec      	b.n	800e9b8 <ucdr_deserialize_array_double+0x84>
 800e9de:	bf00      	nop

0800e9e0 <ucdr_deserialize_endian_array_double>:
 800e9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e4:	4688      	mov	r8, r1
 800e9e6:	2108      	movs	r1, #8
 800e9e8:	4605      	mov	r5, r0
 800e9ea:	4614      	mov	r4, r2
 800e9ec:	461f      	mov	r7, r3
 800e9ee:	f001 fea9 	bl	8010744 <ucdr_buffer_alignment>
 800e9f2:	4601      	mov	r1, r0
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	7d6e      	ldrb	r6, [r5, #21]
 800e9f8:	f001 fee8 	bl	80107cc <ucdr_advance_buffer>
 800e9fc:	f1b8 0f01 	cmp.w	r8, #1
 800ea00:	756e      	strb	r6, [r5, #21]
 800ea02:	d010      	beq.n	800ea26 <ucdr_deserialize_endian_array_double+0x46>
 800ea04:	2600      	movs	r6, #0
 800ea06:	b14f      	cbz	r7, 800ea1c <ucdr_deserialize_endian_array_double+0x3c>
 800ea08:	4622      	mov	r2, r4
 800ea0a:	4641      	mov	r1, r8
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	3601      	adds	r6, #1
 800ea10:	f001 fd70 	bl	80104f4 <ucdr_deserialize_endian_double>
 800ea14:	42b7      	cmp	r7, r6
 800ea16:	f104 0408 	add.w	r4, r4, #8
 800ea1a:	d1f5      	bne.n	800ea08 <ucdr_deserialize_endian_array_double+0x28>
 800ea1c:	7da8      	ldrb	r0, [r5, #22]
 800ea1e:	f080 0001 	eor.w	r0, r0, #1
 800ea22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea26:	00ff      	lsls	r7, r7, #3
 800ea28:	4639      	mov	r1, r7
 800ea2a:	4628      	mov	r0, r5
 800ea2c:	f001 fe2a 	bl	8010684 <ucdr_check_buffer_available_for>
 800ea30:	b9f8      	cbnz	r0, 800ea72 <ucdr_deserialize_endian_array_double+0x92>
 800ea32:	46b8      	mov	r8, r7
 800ea34:	e00a      	b.n	800ea4c <ucdr_deserialize_endian_array_double+0x6c>
 800ea36:	68a9      	ldr	r1, [r5, #8]
 800ea38:	f00d fc11 	bl	801c25e <memcpy>
 800ea3c:	68aa      	ldr	r2, [r5, #8]
 800ea3e:	692b      	ldr	r3, [r5, #16]
 800ea40:	4432      	add	r2, r6
 800ea42:	4433      	add	r3, r6
 800ea44:	eba8 0806 	sub.w	r8, r8, r6
 800ea48:	60aa      	str	r2, [r5, #8]
 800ea4a:	612b      	str	r3, [r5, #16]
 800ea4c:	2208      	movs	r2, #8
 800ea4e:	4641      	mov	r1, r8
 800ea50:	4628      	mov	r0, r5
 800ea52:	f001 fe9f 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 800ea56:	4606      	mov	r6, r0
 800ea58:	eba7 0008 	sub.w	r0, r7, r8
 800ea5c:	4632      	mov	r2, r6
 800ea5e:	4420      	add	r0, r4
 800ea60:	2e00      	cmp	r6, #0
 800ea62:	d1e8      	bne.n	800ea36 <ucdr_deserialize_endian_array_double+0x56>
 800ea64:	7da8      	ldrb	r0, [r5, #22]
 800ea66:	2308      	movs	r3, #8
 800ea68:	756b      	strb	r3, [r5, #21]
 800ea6a:	f080 0001 	eor.w	r0, r0, #1
 800ea6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea72:	463a      	mov	r2, r7
 800ea74:	68a9      	ldr	r1, [r5, #8]
 800ea76:	4620      	mov	r0, r4
 800ea78:	f00d fbf1 	bl	801c25e <memcpy>
 800ea7c:	68aa      	ldr	r2, [r5, #8]
 800ea7e:	692b      	ldr	r3, [r5, #16]
 800ea80:	443a      	add	r2, r7
 800ea82:	443b      	add	r3, r7
 800ea84:	60aa      	str	r2, [r5, #8]
 800ea86:	612b      	str	r3, [r5, #16]
 800ea88:	e7ec      	b.n	800ea64 <ucdr_deserialize_endian_array_double+0x84>
 800ea8a:	bf00      	nop

0800ea8c <ucdr_serialize_bool>:
 800ea8c:	b538      	push	{r3, r4, r5, lr}
 800ea8e:	460d      	mov	r5, r1
 800ea90:	2101      	movs	r1, #1
 800ea92:	4604      	mov	r4, r0
 800ea94:	f001 fe02 	bl	801069c <ucdr_check_final_buffer_behavior>
 800ea98:	b148      	cbz	r0, 800eaae <ucdr_serialize_bool+0x22>
 800ea9a:	68a3      	ldr	r3, [r4, #8]
 800ea9c:	701d      	strb	r5, [r3, #0]
 800ea9e:	68a2      	ldr	r2, [r4, #8]
 800eaa0:	6923      	ldr	r3, [r4, #16]
 800eaa2:	2101      	movs	r1, #1
 800eaa4:	440a      	add	r2, r1
 800eaa6:	440b      	add	r3, r1
 800eaa8:	60a2      	str	r2, [r4, #8]
 800eaaa:	6123      	str	r3, [r4, #16]
 800eaac:	7561      	strb	r1, [r4, #21]
 800eaae:	7da0      	ldrb	r0, [r4, #22]
 800eab0:	f080 0001 	eor.w	r0, r0, #1
 800eab4:	bd38      	pop	{r3, r4, r5, pc}
 800eab6:	bf00      	nop

0800eab8 <ucdr_deserialize_bool>:
 800eab8:	b538      	push	{r3, r4, r5, lr}
 800eaba:	460d      	mov	r5, r1
 800eabc:	2101      	movs	r1, #1
 800eabe:	4604      	mov	r4, r0
 800eac0:	f001 fdec 	bl	801069c <ucdr_check_final_buffer_behavior>
 800eac4:	b160      	cbz	r0, 800eae0 <ucdr_deserialize_bool+0x28>
 800eac6:	68a2      	ldr	r2, [r4, #8]
 800eac8:	6923      	ldr	r3, [r4, #16]
 800eaca:	f812 1b01 	ldrb.w	r1, [r2], #1
 800eace:	3900      	subs	r1, #0
 800ead0:	bf18      	it	ne
 800ead2:	2101      	movne	r1, #1
 800ead4:	7029      	strb	r1, [r5, #0]
 800ead6:	3301      	adds	r3, #1
 800ead8:	2101      	movs	r1, #1
 800eada:	60a2      	str	r2, [r4, #8]
 800eadc:	6123      	str	r3, [r4, #16]
 800eade:	7561      	strb	r1, [r4, #21]
 800eae0:	7da0      	ldrb	r0, [r4, #22]
 800eae2:	f080 0001 	eor.w	r0, r0, #1
 800eae6:	bd38      	pop	{r3, r4, r5, pc}

0800eae8 <ucdr_serialize_uint8_t>:
 800eae8:	b538      	push	{r3, r4, r5, lr}
 800eaea:	460d      	mov	r5, r1
 800eaec:	2101      	movs	r1, #1
 800eaee:	4604      	mov	r4, r0
 800eaf0:	f001 fdd4 	bl	801069c <ucdr_check_final_buffer_behavior>
 800eaf4:	b148      	cbz	r0, 800eb0a <ucdr_serialize_uint8_t+0x22>
 800eaf6:	68a3      	ldr	r3, [r4, #8]
 800eaf8:	701d      	strb	r5, [r3, #0]
 800eafa:	68a2      	ldr	r2, [r4, #8]
 800eafc:	6923      	ldr	r3, [r4, #16]
 800eafe:	2101      	movs	r1, #1
 800eb00:	440a      	add	r2, r1
 800eb02:	440b      	add	r3, r1
 800eb04:	60a2      	str	r2, [r4, #8]
 800eb06:	6123      	str	r3, [r4, #16]
 800eb08:	7561      	strb	r1, [r4, #21]
 800eb0a:	7da0      	ldrb	r0, [r4, #22]
 800eb0c:	f080 0001 	eor.w	r0, r0, #1
 800eb10:	bd38      	pop	{r3, r4, r5, pc}
 800eb12:	bf00      	nop

0800eb14 <ucdr_deserialize_uint8_t>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	460d      	mov	r5, r1
 800eb18:	2101      	movs	r1, #1
 800eb1a:	4604      	mov	r4, r0
 800eb1c:	f001 fdbe 	bl	801069c <ucdr_check_final_buffer_behavior>
 800eb20:	b150      	cbz	r0, 800eb38 <ucdr_deserialize_uint8_t+0x24>
 800eb22:	68a3      	ldr	r3, [r4, #8]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	702b      	strb	r3, [r5, #0]
 800eb28:	68a2      	ldr	r2, [r4, #8]
 800eb2a:	6923      	ldr	r3, [r4, #16]
 800eb2c:	2101      	movs	r1, #1
 800eb2e:	440a      	add	r2, r1
 800eb30:	440b      	add	r3, r1
 800eb32:	60a2      	str	r2, [r4, #8]
 800eb34:	6123      	str	r3, [r4, #16]
 800eb36:	7561      	strb	r1, [r4, #21]
 800eb38:	7da0      	ldrb	r0, [r4, #22]
 800eb3a:	f080 0001 	eor.w	r0, r0, #1
 800eb3e:	bd38      	pop	{r3, r4, r5, pc}

0800eb40 <ucdr_serialize_uint16_t>:
 800eb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb44:	b082      	sub	sp, #8
 800eb46:	460b      	mov	r3, r1
 800eb48:	2102      	movs	r1, #2
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eb50:	f001 fdf8 	bl	8010744 <ucdr_buffer_alignment>
 800eb54:	4601      	mov	r1, r0
 800eb56:	4620      	mov	r0, r4
 800eb58:	7d67      	ldrb	r7, [r4, #21]
 800eb5a:	f001 fe37 	bl	80107cc <ucdr_advance_buffer>
 800eb5e:	2102      	movs	r1, #2
 800eb60:	4620      	mov	r0, r4
 800eb62:	f001 fd8f 	bl	8010684 <ucdr_check_buffer_available_for>
 800eb66:	b1c0      	cbz	r0, 800eb9a <ucdr_serialize_uint16_t+0x5a>
 800eb68:	7d22      	ldrb	r2, [r4, #20]
 800eb6a:	68a3      	ldr	r3, [r4, #8]
 800eb6c:	2a01      	cmp	r2, #1
 800eb6e:	d04e      	beq.n	800ec0e <ucdr_serialize_uint16_t+0xce>
 800eb70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800eb74:	701a      	strb	r2, [r3, #0]
 800eb76:	68a3      	ldr	r3, [r4, #8]
 800eb78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb7c:	705a      	strb	r2, [r3, #1]
 800eb7e:	68a2      	ldr	r2, [r4, #8]
 800eb80:	6923      	ldr	r3, [r4, #16]
 800eb82:	3202      	adds	r2, #2
 800eb84:	3302      	adds	r3, #2
 800eb86:	2102      	movs	r1, #2
 800eb88:	60a2      	str	r2, [r4, #8]
 800eb8a:	6123      	str	r3, [r4, #16]
 800eb8c:	7561      	strb	r1, [r4, #21]
 800eb8e:	7da0      	ldrb	r0, [r4, #22]
 800eb90:	f080 0001 	eor.w	r0, r0, #1
 800eb94:	b002      	add	sp, #8
 800eb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb9a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800eb9e:	42ab      	cmp	r3, r5
 800eba0:	d923      	bls.n	800ebea <ucdr_serialize_uint16_t+0xaa>
 800eba2:	1b5e      	subs	r6, r3, r5
 800eba4:	60a3      	str	r3, [r4, #8]
 800eba6:	6923      	ldr	r3, [r4, #16]
 800eba8:	f1c6 0802 	rsb	r8, r6, #2
 800ebac:	4433      	add	r3, r6
 800ebae:	6123      	str	r3, [r4, #16]
 800ebb0:	4641      	mov	r1, r8
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f001 fd72 	bl	801069c <ucdr_check_final_buffer_behavior>
 800ebb8:	b368      	cbz	r0, 800ec16 <ucdr_serialize_uint16_t+0xd6>
 800ebba:	7d23      	ldrb	r3, [r4, #20]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d03b      	beq.n	800ec38 <ucdr_serialize_uint16_t+0xf8>
 800ebc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ebc4:	702b      	strb	r3, [r5, #0]
 800ebc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ebca:	706b      	strb	r3, [r5, #1]
 800ebcc:	6923      	ldr	r3, [r4, #16]
 800ebce:	68a2      	ldr	r2, [r4, #8]
 800ebd0:	7da0      	ldrb	r0, [r4, #22]
 800ebd2:	3302      	adds	r3, #2
 800ebd4:	4442      	add	r2, r8
 800ebd6:	1b9b      	subs	r3, r3, r6
 800ebd8:	2102      	movs	r1, #2
 800ebda:	f080 0001 	eor.w	r0, r0, #1
 800ebde:	60a2      	str	r2, [r4, #8]
 800ebe0:	6123      	str	r3, [r4, #16]
 800ebe2:	7561      	strb	r1, [r4, #21]
 800ebe4:	b002      	add	sp, #8
 800ebe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebea:	2102      	movs	r1, #2
 800ebec:	4620      	mov	r0, r4
 800ebee:	f001 fd55 	bl	801069c <ucdr_check_final_buffer_behavior>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d0cb      	beq.n	800eb8e <ucdr_serialize_uint16_t+0x4e>
 800ebf6:	7d23      	ldrb	r3, [r4, #20]
 800ebf8:	68a2      	ldr	r2, [r4, #8]
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d018      	beq.n	800ec30 <ucdr_serialize_uint16_t+0xf0>
 800ebfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec02:	7013      	strb	r3, [r2, #0]
 800ec04:	68a3      	ldr	r3, [r4, #8]
 800ec06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec0a:	705a      	strb	r2, [r3, #1]
 800ec0c:	e7b7      	b.n	800eb7e <ucdr_serialize_uint16_t+0x3e>
 800ec0e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec12:	801a      	strh	r2, [r3, #0]
 800ec14:	e7b3      	b.n	800eb7e <ucdr_serialize_uint16_t+0x3e>
 800ec16:	68a2      	ldr	r2, [r4, #8]
 800ec18:	6923      	ldr	r3, [r4, #16]
 800ec1a:	7da0      	ldrb	r0, [r4, #22]
 800ec1c:	7567      	strb	r7, [r4, #21]
 800ec1e:	1b92      	subs	r2, r2, r6
 800ec20:	1b9b      	subs	r3, r3, r6
 800ec22:	f080 0001 	eor.w	r0, r0, #1
 800ec26:	60a2      	str	r2, [r4, #8]
 800ec28:	6123      	str	r3, [r4, #16]
 800ec2a:	b002      	add	sp, #8
 800ec2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ec34:	8013      	strh	r3, [r2, #0]
 800ec36:	e7a2      	b.n	800eb7e <ucdr_serialize_uint16_t+0x3e>
 800ec38:	4628      	mov	r0, r5
 800ec3a:	f10d 0506 	add.w	r5, sp, #6
 800ec3e:	4632      	mov	r2, r6
 800ec40:	4629      	mov	r1, r5
 800ec42:	f00d fb0c 	bl	801c25e <memcpy>
 800ec46:	68a0      	ldr	r0, [r4, #8]
 800ec48:	4642      	mov	r2, r8
 800ec4a:	19a9      	adds	r1, r5, r6
 800ec4c:	f00d fb07 	bl	801c25e <memcpy>
 800ec50:	e7bc      	b.n	800ebcc <ucdr_serialize_uint16_t+0x8c>
 800ec52:	bf00      	nop

0800ec54 <ucdr_serialize_endian_uint16_t>:
 800ec54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec58:	b083      	sub	sp, #12
 800ec5a:	460d      	mov	r5, r1
 800ec5c:	2102      	movs	r1, #2
 800ec5e:	4604      	mov	r4, r0
 800ec60:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ec64:	f001 fd6e 	bl	8010744 <ucdr_buffer_alignment>
 800ec68:	4601      	mov	r1, r0
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec70:	f001 fdac 	bl	80107cc <ucdr_advance_buffer>
 800ec74:	2102      	movs	r1, #2
 800ec76:	4620      	mov	r0, r4
 800ec78:	f001 fd04 	bl	8010684 <ucdr_check_buffer_available_for>
 800ec7c:	bb60      	cbnz	r0, 800ecd8 <ucdr_serialize_endian_uint16_t+0x84>
 800ec7e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ec82:	42be      	cmp	r6, r7
 800ec84:	d923      	bls.n	800ecce <ucdr_serialize_endian_uint16_t+0x7a>
 800ec86:	6923      	ldr	r3, [r4, #16]
 800ec88:	60a6      	str	r6, [r4, #8]
 800ec8a:	1bf6      	subs	r6, r6, r7
 800ec8c:	4433      	add	r3, r6
 800ec8e:	f1c6 0902 	rsb	r9, r6, #2
 800ec92:	6123      	str	r3, [r4, #16]
 800ec94:	4649      	mov	r1, r9
 800ec96:	4620      	mov	r0, r4
 800ec98:	f001 fd00 	bl	801069c <ucdr_check_final_buffer_behavior>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d037      	beq.n	800ed10 <ucdr_serialize_endian_uint16_t+0xbc>
 800eca0:	2d01      	cmp	r5, #1
 800eca2:	d043      	beq.n	800ed2c <ucdr_serialize_endian_uint16_t+0xd8>
 800eca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eca8:	703b      	strb	r3, [r7, #0]
 800ecaa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ecae:	707b      	strb	r3, [r7, #1]
 800ecb0:	6923      	ldr	r3, [r4, #16]
 800ecb2:	68a2      	ldr	r2, [r4, #8]
 800ecb4:	7da0      	ldrb	r0, [r4, #22]
 800ecb6:	3302      	adds	r3, #2
 800ecb8:	444a      	add	r2, r9
 800ecba:	1b9b      	subs	r3, r3, r6
 800ecbc:	2102      	movs	r1, #2
 800ecbe:	f080 0001 	eor.w	r0, r0, #1
 800ecc2:	60a2      	str	r2, [r4, #8]
 800ecc4:	6123      	str	r3, [r4, #16]
 800ecc6:	7561      	strb	r1, [r4, #21]
 800ecc8:	b003      	add	sp, #12
 800ecca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecce:	2102      	movs	r1, #2
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f001 fce3 	bl	801069c <ucdr_check_final_buffer_behavior>
 800ecd6:	b188      	cbz	r0, 800ecfc <ucdr_serialize_endian_uint16_t+0xa8>
 800ecd8:	2d01      	cmp	r5, #1
 800ecda:	68a3      	ldr	r3, [r4, #8]
 800ecdc:	d014      	beq.n	800ed08 <ucdr_serialize_endian_uint16_t+0xb4>
 800ecde:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ece2:	701a      	strb	r2, [r3, #0]
 800ece4:	68a3      	ldr	r3, [r4, #8]
 800ece6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ecea:	705a      	strb	r2, [r3, #1]
 800ecec:	68a2      	ldr	r2, [r4, #8]
 800ecee:	6923      	ldr	r3, [r4, #16]
 800ecf0:	3202      	adds	r2, #2
 800ecf2:	3302      	adds	r3, #2
 800ecf4:	2102      	movs	r1, #2
 800ecf6:	60a2      	str	r2, [r4, #8]
 800ecf8:	6123      	str	r3, [r4, #16]
 800ecfa:	7561      	strb	r1, [r4, #21]
 800ecfc:	7da0      	ldrb	r0, [r4, #22]
 800ecfe:	f080 0001 	eor.w	r0, r0, #1
 800ed02:	b003      	add	sp, #12
 800ed04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed08:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ed0c:	801a      	strh	r2, [r3, #0]
 800ed0e:	e7ed      	b.n	800ecec <ucdr_serialize_endian_uint16_t+0x98>
 800ed10:	68a2      	ldr	r2, [r4, #8]
 800ed12:	6923      	ldr	r3, [r4, #16]
 800ed14:	7da0      	ldrb	r0, [r4, #22]
 800ed16:	f884 8015 	strb.w	r8, [r4, #21]
 800ed1a:	1b92      	subs	r2, r2, r6
 800ed1c:	1b9b      	subs	r3, r3, r6
 800ed1e:	f080 0001 	eor.w	r0, r0, #1
 800ed22:	60a2      	str	r2, [r4, #8]
 800ed24:	6123      	str	r3, [r4, #16]
 800ed26:	b003      	add	sp, #12
 800ed28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed2c:	f10d 0506 	add.w	r5, sp, #6
 800ed30:	4632      	mov	r2, r6
 800ed32:	4629      	mov	r1, r5
 800ed34:	4638      	mov	r0, r7
 800ed36:	f00d fa92 	bl	801c25e <memcpy>
 800ed3a:	68a0      	ldr	r0, [r4, #8]
 800ed3c:	464a      	mov	r2, r9
 800ed3e:	19a9      	adds	r1, r5, r6
 800ed40:	f00d fa8d 	bl	801c25e <memcpy>
 800ed44:	e7b4      	b.n	800ecb0 <ucdr_serialize_endian_uint16_t+0x5c>
 800ed46:	bf00      	nop

0800ed48 <ucdr_deserialize_uint16_t>:
 800ed48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed4c:	460d      	mov	r5, r1
 800ed4e:	2102      	movs	r1, #2
 800ed50:	4604      	mov	r4, r0
 800ed52:	f001 fcf7 	bl	8010744 <ucdr_buffer_alignment>
 800ed56:	4601      	mov	r1, r0
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ed5e:	f001 fd35 	bl	80107cc <ucdr_advance_buffer>
 800ed62:	2102      	movs	r1, #2
 800ed64:	4620      	mov	r0, r4
 800ed66:	f001 fc8d 	bl	8010684 <ucdr_check_buffer_available_for>
 800ed6a:	b1a8      	cbz	r0, 800ed98 <ucdr_deserialize_uint16_t+0x50>
 800ed6c:	7d22      	ldrb	r2, [r4, #20]
 800ed6e:	68a3      	ldr	r3, [r4, #8]
 800ed70:	2a01      	cmp	r2, #1
 800ed72:	d046      	beq.n	800ee02 <ucdr_deserialize_uint16_t+0xba>
 800ed74:	785b      	ldrb	r3, [r3, #1]
 800ed76:	702b      	strb	r3, [r5, #0]
 800ed78:	68a3      	ldr	r3, [r4, #8]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	706b      	strb	r3, [r5, #1]
 800ed7e:	68a2      	ldr	r2, [r4, #8]
 800ed80:	6923      	ldr	r3, [r4, #16]
 800ed82:	3202      	adds	r2, #2
 800ed84:	3302      	adds	r3, #2
 800ed86:	2102      	movs	r1, #2
 800ed88:	60a2      	str	r2, [r4, #8]
 800ed8a:	6123      	str	r3, [r4, #16]
 800ed8c:	7561      	strb	r1, [r4, #21]
 800ed8e:	7da0      	ldrb	r0, [r4, #22]
 800ed90:	f080 0001 	eor.w	r0, r0, #1
 800ed94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed98:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ed9c:	42be      	cmp	r6, r7
 800ed9e:	d920      	bls.n	800ede2 <ucdr_deserialize_uint16_t+0x9a>
 800eda0:	6923      	ldr	r3, [r4, #16]
 800eda2:	60a6      	str	r6, [r4, #8]
 800eda4:	1bf6      	subs	r6, r6, r7
 800eda6:	4433      	add	r3, r6
 800eda8:	f1c6 0902 	rsb	r9, r6, #2
 800edac:	6123      	str	r3, [r4, #16]
 800edae:	4649      	mov	r1, r9
 800edb0:	4620      	mov	r0, r4
 800edb2:	f001 fc73 	bl	801069c <ucdr_check_final_buffer_behavior>
 800edb6:	b338      	cbz	r0, 800ee08 <ucdr_deserialize_uint16_t+0xc0>
 800edb8:	7d23      	ldrb	r3, [r4, #20]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d034      	beq.n	800ee28 <ucdr_deserialize_uint16_t+0xe0>
 800edbe:	787b      	ldrb	r3, [r7, #1]
 800edc0:	702b      	strb	r3, [r5, #0]
 800edc2:	783b      	ldrb	r3, [r7, #0]
 800edc4:	706b      	strb	r3, [r5, #1]
 800edc6:	6923      	ldr	r3, [r4, #16]
 800edc8:	68a2      	ldr	r2, [r4, #8]
 800edca:	7da0      	ldrb	r0, [r4, #22]
 800edcc:	2102      	movs	r1, #2
 800edce:	3302      	adds	r3, #2
 800edd0:	444a      	add	r2, r9
 800edd2:	1b9b      	subs	r3, r3, r6
 800edd4:	7561      	strb	r1, [r4, #21]
 800edd6:	60a2      	str	r2, [r4, #8]
 800edd8:	6123      	str	r3, [r4, #16]
 800edda:	f080 0001 	eor.w	r0, r0, #1
 800edde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ede2:	2102      	movs	r1, #2
 800ede4:	4620      	mov	r0, r4
 800ede6:	f001 fc59 	bl	801069c <ucdr_check_final_buffer_behavior>
 800edea:	2800      	cmp	r0, #0
 800edec:	d0cf      	beq.n	800ed8e <ucdr_deserialize_uint16_t+0x46>
 800edee:	7d23      	ldrb	r3, [r4, #20]
 800edf0:	68a2      	ldr	r2, [r4, #8]
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d015      	beq.n	800ee22 <ucdr_deserialize_uint16_t+0xda>
 800edf6:	7853      	ldrb	r3, [r2, #1]
 800edf8:	702b      	strb	r3, [r5, #0]
 800edfa:	68a3      	ldr	r3, [r4, #8]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	706b      	strb	r3, [r5, #1]
 800ee00:	e7bd      	b.n	800ed7e <ucdr_deserialize_uint16_t+0x36>
 800ee02:	881b      	ldrh	r3, [r3, #0]
 800ee04:	802b      	strh	r3, [r5, #0]
 800ee06:	e7ba      	b.n	800ed7e <ucdr_deserialize_uint16_t+0x36>
 800ee08:	68a2      	ldr	r2, [r4, #8]
 800ee0a:	6923      	ldr	r3, [r4, #16]
 800ee0c:	7da0      	ldrb	r0, [r4, #22]
 800ee0e:	f884 8015 	strb.w	r8, [r4, #21]
 800ee12:	1b92      	subs	r2, r2, r6
 800ee14:	1b9b      	subs	r3, r3, r6
 800ee16:	60a2      	str	r2, [r4, #8]
 800ee18:	6123      	str	r3, [r4, #16]
 800ee1a:	f080 0001 	eor.w	r0, r0, #1
 800ee1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee22:	8813      	ldrh	r3, [r2, #0]
 800ee24:	802b      	strh	r3, [r5, #0]
 800ee26:	e7aa      	b.n	800ed7e <ucdr_deserialize_uint16_t+0x36>
 800ee28:	4639      	mov	r1, r7
 800ee2a:	4632      	mov	r2, r6
 800ee2c:	4628      	mov	r0, r5
 800ee2e:	f00d fa16 	bl	801c25e <memcpy>
 800ee32:	68a1      	ldr	r1, [r4, #8]
 800ee34:	464a      	mov	r2, r9
 800ee36:	19a8      	adds	r0, r5, r6
 800ee38:	f00d fa11 	bl	801c25e <memcpy>
 800ee3c:	e7c3      	b.n	800edc6 <ucdr_deserialize_uint16_t+0x7e>
 800ee3e:	bf00      	nop

0800ee40 <ucdr_deserialize_endian_uint16_t>:
 800ee40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee44:	460e      	mov	r6, r1
 800ee46:	2102      	movs	r1, #2
 800ee48:	4604      	mov	r4, r0
 800ee4a:	4615      	mov	r5, r2
 800ee4c:	f001 fc7a 	bl	8010744 <ucdr_buffer_alignment>
 800ee50:	4601      	mov	r1, r0
 800ee52:	4620      	mov	r0, r4
 800ee54:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ee58:	f001 fcb8 	bl	80107cc <ucdr_advance_buffer>
 800ee5c:	2102      	movs	r1, #2
 800ee5e:	4620      	mov	r0, r4
 800ee60:	f001 fc10 	bl	8010684 <ucdr_check_buffer_available_for>
 800ee64:	bb60      	cbnz	r0, 800eec0 <ucdr_deserialize_endian_uint16_t+0x80>
 800ee66:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800ee6a:	4547      	cmp	r7, r8
 800ee6c:	d923      	bls.n	800eeb6 <ucdr_deserialize_endian_uint16_t+0x76>
 800ee6e:	6923      	ldr	r3, [r4, #16]
 800ee70:	60a7      	str	r7, [r4, #8]
 800ee72:	eba7 0708 	sub.w	r7, r7, r8
 800ee76:	443b      	add	r3, r7
 800ee78:	f1c7 0a02 	rsb	sl, r7, #2
 800ee7c:	6123      	str	r3, [r4, #16]
 800ee7e:	4651      	mov	r1, sl
 800ee80:	4620      	mov	r0, r4
 800ee82:	f001 fc0b 	bl	801069c <ucdr_check_final_buffer_behavior>
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d032      	beq.n	800eef0 <ucdr_deserialize_endian_uint16_t+0xb0>
 800ee8a:	2e01      	cmp	r6, #1
 800ee8c:	d03d      	beq.n	800ef0a <ucdr_deserialize_endian_uint16_t+0xca>
 800ee8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ee92:	702b      	strb	r3, [r5, #0]
 800ee94:	f898 3000 	ldrb.w	r3, [r8]
 800ee98:	706b      	strb	r3, [r5, #1]
 800ee9a:	6923      	ldr	r3, [r4, #16]
 800ee9c:	68a2      	ldr	r2, [r4, #8]
 800ee9e:	7da0      	ldrb	r0, [r4, #22]
 800eea0:	2102      	movs	r1, #2
 800eea2:	3302      	adds	r3, #2
 800eea4:	4452      	add	r2, sl
 800eea6:	1bdb      	subs	r3, r3, r7
 800eea8:	7561      	strb	r1, [r4, #21]
 800eeaa:	60a2      	str	r2, [r4, #8]
 800eeac:	6123      	str	r3, [r4, #16]
 800eeae:	f080 0001 	eor.w	r0, r0, #1
 800eeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb6:	2102      	movs	r1, #2
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f001 fbef 	bl	801069c <ucdr_check_final_buffer_behavior>
 800eebe:	b178      	cbz	r0, 800eee0 <ucdr_deserialize_endian_uint16_t+0xa0>
 800eec0:	2e01      	cmp	r6, #1
 800eec2:	68a3      	ldr	r3, [r4, #8]
 800eec4:	d011      	beq.n	800eeea <ucdr_deserialize_endian_uint16_t+0xaa>
 800eec6:	785b      	ldrb	r3, [r3, #1]
 800eec8:	702b      	strb	r3, [r5, #0]
 800eeca:	68a3      	ldr	r3, [r4, #8]
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	706b      	strb	r3, [r5, #1]
 800eed0:	68a2      	ldr	r2, [r4, #8]
 800eed2:	6923      	ldr	r3, [r4, #16]
 800eed4:	3202      	adds	r2, #2
 800eed6:	3302      	adds	r3, #2
 800eed8:	2102      	movs	r1, #2
 800eeda:	60a2      	str	r2, [r4, #8]
 800eedc:	6123      	str	r3, [r4, #16]
 800eede:	7561      	strb	r1, [r4, #21]
 800eee0:	7da0      	ldrb	r0, [r4, #22]
 800eee2:	f080 0001 	eor.w	r0, r0, #1
 800eee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeea:	881b      	ldrh	r3, [r3, #0]
 800eeec:	802b      	strh	r3, [r5, #0]
 800eeee:	e7ef      	b.n	800eed0 <ucdr_deserialize_endian_uint16_t+0x90>
 800eef0:	68a2      	ldr	r2, [r4, #8]
 800eef2:	6923      	ldr	r3, [r4, #16]
 800eef4:	7da0      	ldrb	r0, [r4, #22]
 800eef6:	f884 9015 	strb.w	r9, [r4, #21]
 800eefa:	1bd2      	subs	r2, r2, r7
 800eefc:	1bdb      	subs	r3, r3, r7
 800eefe:	60a2      	str	r2, [r4, #8]
 800ef00:	6123      	str	r3, [r4, #16]
 800ef02:	f080 0001 	eor.w	r0, r0, #1
 800ef06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef0a:	4641      	mov	r1, r8
 800ef0c:	463a      	mov	r2, r7
 800ef0e:	4628      	mov	r0, r5
 800ef10:	f00d f9a5 	bl	801c25e <memcpy>
 800ef14:	68a1      	ldr	r1, [r4, #8]
 800ef16:	4652      	mov	r2, sl
 800ef18:	19e8      	adds	r0, r5, r7
 800ef1a:	f00d f9a0 	bl	801c25e <memcpy>
 800ef1e:	e7bc      	b.n	800ee9a <ucdr_deserialize_endian_uint16_t+0x5a>

0800ef20 <ucdr_serialize_uint32_t>:
 800ef20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef24:	b082      	sub	sp, #8
 800ef26:	4604      	mov	r4, r0
 800ef28:	9101      	str	r1, [sp, #4]
 800ef2a:	2104      	movs	r1, #4
 800ef2c:	f001 fc0a 	bl	8010744 <ucdr_buffer_alignment>
 800ef30:	4601      	mov	r1, r0
 800ef32:	4620      	mov	r0, r4
 800ef34:	7d67      	ldrb	r7, [r4, #21]
 800ef36:	f001 fc49 	bl	80107cc <ucdr_advance_buffer>
 800ef3a:	2104      	movs	r1, #4
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	f001 fba1 	bl	8010684 <ucdr_check_buffer_available_for>
 800ef42:	b300      	cbz	r0, 800ef86 <ucdr_serialize_uint32_t+0x66>
 800ef44:	7d22      	ldrb	r2, [r4, #20]
 800ef46:	68a3      	ldr	r3, [r4, #8]
 800ef48:	2a01      	cmp	r2, #1
 800ef4a:	d05d      	beq.n	800f008 <ucdr_serialize_uint32_t+0xe8>
 800ef4c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ef50:	701a      	strb	r2, [r3, #0]
 800ef52:	68a3      	ldr	r3, [r4, #8]
 800ef54:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ef58:	705a      	strb	r2, [r3, #1]
 800ef5a:	68a3      	ldr	r3, [r4, #8]
 800ef5c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ef60:	709a      	strb	r2, [r3, #2]
 800ef62:	68a3      	ldr	r3, [r4, #8]
 800ef64:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ef68:	70da      	strb	r2, [r3, #3]
 800ef6a:	68a2      	ldr	r2, [r4, #8]
 800ef6c:	6923      	ldr	r3, [r4, #16]
 800ef6e:	3204      	adds	r2, #4
 800ef70:	3304      	adds	r3, #4
 800ef72:	2104      	movs	r1, #4
 800ef74:	60a2      	str	r2, [r4, #8]
 800ef76:	6123      	str	r3, [r4, #16]
 800ef78:	7561      	strb	r1, [r4, #21]
 800ef7a:	7da0      	ldrb	r0, [r4, #22]
 800ef7c:	f080 0001 	eor.w	r0, r0, #1
 800ef80:	b002      	add	sp, #8
 800ef82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef86:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ef8a:	42ab      	cmp	r3, r5
 800ef8c:	d92e      	bls.n	800efec <ucdr_serialize_uint32_t+0xcc>
 800ef8e:	1b5e      	subs	r6, r3, r5
 800ef90:	60a3      	str	r3, [r4, #8]
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	f1c6 0804 	rsb	r8, r6, #4
 800ef98:	4433      	add	r3, r6
 800ef9a:	6123      	str	r3, [r4, #16]
 800ef9c:	4641      	mov	r1, r8
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f001 fb7c 	bl	801069c <ucdr_check_final_buffer_behavior>
 800efa4:	b398      	cbz	r0, 800f00e <ucdr_serialize_uint32_t+0xee>
 800efa6:	7d23      	ldrb	r3, [r4, #20]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d046      	beq.n	800f03a <ucdr_serialize_uint32_t+0x11a>
 800efac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800efb0:	702b      	strb	r3, [r5, #0]
 800efb2:	2e01      	cmp	r6, #1
 800efb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800efb8:	706b      	strb	r3, [r5, #1]
 800efba:	d035      	beq.n	800f028 <ucdr_serialize_uint32_t+0x108>
 800efbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800efc0:	70ab      	strb	r3, [r5, #2]
 800efc2:	2e02      	cmp	r6, #2
 800efc4:	d034      	beq.n	800f030 <ucdr_serialize_uint32_t+0x110>
 800efc6:	3503      	adds	r5, #3
 800efc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800efcc:	702b      	strb	r3, [r5, #0]
 800efce:	6923      	ldr	r3, [r4, #16]
 800efd0:	68a2      	ldr	r2, [r4, #8]
 800efd2:	7da0      	ldrb	r0, [r4, #22]
 800efd4:	3304      	adds	r3, #4
 800efd6:	4442      	add	r2, r8
 800efd8:	1b9b      	subs	r3, r3, r6
 800efda:	2104      	movs	r1, #4
 800efdc:	f080 0001 	eor.w	r0, r0, #1
 800efe0:	60a2      	str	r2, [r4, #8]
 800efe2:	6123      	str	r3, [r4, #16]
 800efe4:	7561      	strb	r1, [r4, #21]
 800efe6:	b002      	add	sp, #8
 800efe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efec:	2104      	movs	r1, #4
 800efee:	4620      	mov	r0, r4
 800eff0:	f001 fb54 	bl	801069c <ucdr_check_final_buffer_behavior>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d0c0      	beq.n	800ef7a <ucdr_serialize_uint32_t+0x5a>
 800eff8:	7d23      	ldrb	r3, [r4, #20]
 800effa:	68a2      	ldr	r2, [r4, #8]
 800effc:	2b01      	cmp	r3, #1
 800effe:	d019      	beq.n	800f034 <ucdr_serialize_uint32_t+0x114>
 800f000:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f004:	7013      	strb	r3, [r2, #0]
 800f006:	e7a4      	b.n	800ef52 <ucdr_serialize_uint32_t+0x32>
 800f008:	9a01      	ldr	r2, [sp, #4]
 800f00a:	601a      	str	r2, [r3, #0]
 800f00c:	e7ad      	b.n	800ef6a <ucdr_serialize_uint32_t+0x4a>
 800f00e:	68a2      	ldr	r2, [r4, #8]
 800f010:	6923      	ldr	r3, [r4, #16]
 800f012:	7da0      	ldrb	r0, [r4, #22]
 800f014:	7567      	strb	r7, [r4, #21]
 800f016:	1b92      	subs	r2, r2, r6
 800f018:	1b9b      	subs	r3, r3, r6
 800f01a:	f080 0001 	eor.w	r0, r0, #1
 800f01e:	60a2      	str	r2, [r4, #8]
 800f020:	6123      	str	r3, [r4, #16]
 800f022:	b002      	add	sp, #8
 800f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f028:	68a3      	ldr	r3, [r4, #8]
 800f02a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f02e:	701a      	strb	r2, [r3, #0]
 800f030:	68a5      	ldr	r5, [r4, #8]
 800f032:	e7c9      	b.n	800efc8 <ucdr_serialize_uint32_t+0xa8>
 800f034:	9b01      	ldr	r3, [sp, #4]
 800f036:	6013      	str	r3, [r2, #0]
 800f038:	e797      	b.n	800ef6a <ucdr_serialize_uint32_t+0x4a>
 800f03a:	4628      	mov	r0, r5
 800f03c:	ad01      	add	r5, sp, #4
 800f03e:	4632      	mov	r2, r6
 800f040:	4629      	mov	r1, r5
 800f042:	f00d f90c 	bl	801c25e <memcpy>
 800f046:	68a0      	ldr	r0, [r4, #8]
 800f048:	4642      	mov	r2, r8
 800f04a:	19a9      	adds	r1, r5, r6
 800f04c:	f00d f907 	bl	801c25e <memcpy>
 800f050:	e7bd      	b.n	800efce <ucdr_serialize_uint32_t+0xae>
 800f052:	bf00      	nop

0800f054 <ucdr_serialize_endian_uint32_t>:
 800f054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f058:	b083      	sub	sp, #12
 800f05a:	460d      	mov	r5, r1
 800f05c:	2104      	movs	r1, #4
 800f05e:	4604      	mov	r4, r0
 800f060:	9201      	str	r2, [sp, #4]
 800f062:	f001 fb6f 	bl	8010744 <ucdr_buffer_alignment>
 800f066:	4601      	mov	r1, r0
 800f068:	4620      	mov	r0, r4
 800f06a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f06e:	f001 fbad 	bl	80107cc <ucdr_advance_buffer>
 800f072:	2104      	movs	r1, #4
 800f074:	4620      	mov	r0, r4
 800f076:	f001 fb05 	bl	8010684 <ucdr_check_buffer_available_for>
 800f07a:	2800      	cmp	r0, #0
 800f07c:	d137      	bne.n	800f0ee <ucdr_serialize_endian_uint32_t+0x9a>
 800f07e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f082:	42b7      	cmp	r7, r6
 800f084:	d92e      	bls.n	800f0e4 <ucdr_serialize_endian_uint32_t+0x90>
 800f086:	6923      	ldr	r3, [r4, #16]
 800f088:	60a7      	str	r7, [r4, #8]
 800f08a:	1bbf      	subs	r7, r7, r6
 800f08c:	443b      	add	r3, r7
 800f08e:	f1c7 0904 	rsb	r9, r7, #4
 800f092:	6123      	str	r3, [r4, #16]
 800f094:	4649      	mov	r1, r9
 800f096:	4620      	mov	r0, r4
 800f098:	f001 fb00 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d049      	beq.n	800f134 <ucdr_serialize_endian_uint32_t+0xe0>
 800f0a0:	2d01      	cmp	r5, #1
 800f0a2:	d05b      	beq.n	800f15c <ucdr_serialize_endian_uint32_t+0x108>
 800f0a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f0a8:	7033      	strb	r3, [r6, #0]
 800f0aa:	2f01      	cmp	r7, #1
 800f0ac:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f0b0:	7073      	strb	r3, [r6, #1]
 800f0b2:	d04d      	beq.n	800f150 <ucdr_serialize_endian_uint32_t+0xfc>
 800f0b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f0b8:	70b3      	strb	r3, [r6, #2]
 800f0ba:	2f02      	cmp	r7, #2
 800f0bc:	d04c      	beq.n	800f158 <ucdr_serialize_endian_uint32_t+0x104>
 800f0be:	3603      	adds	r6, #3
 800f0c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f0c4:	7033      	strb	r3, [r6, #0]
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	68a2      	ldr	r2, [r4, #8]
 800f0ca:	7da0      	ldrb	r0, [r4, #22]
 800f0cc:	3304      	adds	r3, #4
 800f0ce:	444a      	add	r2, r9
 800f0d0:	1bdb      	subs	r3, r3, r7
 800f0d2:	2104      	movs	r1, #4
 800f0d4:	f080 0001 	eor.w	r0, r0, #1
 800f0d8:	60a2      	str	r2, [r4, #8]
 800f0da:	6123      	str	r3, [r4, #16]
 800f0dc:	7561      	strb	r1, [r4, #21]
 800f0de:	b003      	add	sp, #12
 800f0e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0e4:	2104      	movs	r1, #4
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f001 fad8 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f0ec:	b1c8      	cbz	r0, 800f122 <ucdr_serialize_endian_uint32_t+0xce>
 800f0ee:	2d01      	cmp	r5, #1
 800f0f0:	68a3      	ldr	r3, [r4, #8]
 800f0f2:	d01c      	beq.n	800f12e <ucdr_serialize_endian_uint32_t+0xda>
 800f0f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f0f8:	701a      	strb	r2, [r3, #0]
 800f0fa:	68a3      	ldr	r3, [r4, #8]
 800f0fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f100:	705a      	strb	r2, [r3, #1]
 800f102:	68a3      	ldr	r3, [r4, #8]
 800f104:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f108:	709a      	strb	r2, [r3, #2]
 800f10a:	68a3      	ldr	r3, [r4, #8]
 800f10c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f110:	70da      	strb	r2, [r3, #3]
 800f112:	68a2      	ldr	r2, [r4, #8]
 800f114:	6923      	ldr	r3, [r4, #16]
 800f116:	3204      	adds	r2, #4
 800f118:	3304      	adds	r3, #4
 800f11a:	2104      	movs	r1, #4
 800f11c:	60a2      	str	r2, [r4, #8]
 800f11e:	6123      	str	r3, [r4, #16]
 800f120:	7561      	strb	r1, [r4, #21]
 800f122:	7da0      	ldrb	r0, [r4, #22]
 800f124:	f080 0001 	eor.w	r0, r0, #1
 800f128:	b003      	add	sp, #12
 800f12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f12e:	9a01      	ldr	r2, [sp, #4]
 800f130:	601a      	str	r2, [r3, #0]
 800f132:	e7ee      	b.n	800f112 <ucdr_serialize_endian_uint32_t+0xbe>
 800f134:	68a2      	ldr	r2, [r4, #8]
 800f136:	6923      	ldr	r3, [r4, #16]
 800f138:	7da0      	ldrb	r0, [r4, #22]
 800f13a:	f884 8015 	strb.w	r8, [r4, #21]
 800f13e:	1bd2      	subs	r2, r2, r7
 800f140:	1bdb      	subs	r3, r3, r7
 800f142:	f080 0001 	eor.w	r0, r0, #1
 800f146:	60a2      	str	r2, [r4, #8]
 800f148:	6123      	str	r3, [r4, #16]
 800f14a:	b003      	add	sp, #12
 800f14c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f150:	68a3      	ldr	r3, [r4, #8]
 800f152:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f156:	701a      	strb	r2, [r3, #0]
 800f158:	68a6      	ldr	r6, [r4, #8]
 800f15a:	e7b1      	b.n	800f0c0 <ucdr_serialize_endian_uint32_t+0x6c>
 800f15c:	ad01      	add	r5, sp, #4
 800f15e:	463a      	mov	r2, r7
 800f160:	4629      	mov	r1, r5
 800f162:	4630      	mov	r0, r6
 800f164:	f00d f87b 	bl	801c25e <memcpy>
 800f168:	68a0      	ldr	r0, [r4, #8]
 800f16a:	464a      	mov	r2, r9
 800f16c:	19e9      	adds	r1, r5, r7
 800f16e:	f00d f876 	bl	801c25e <memcpy>
 800f172:	e7a8      	b.n	800f0c6 <ucdr_serialize_endian_uint32_t+0x72>

0800f174 <ucdr_deserialize_uint32_t>:
 800f174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f178:	460d      	mov	r5, r1
 800f17a:	2104      	movs	r1, #4
 800f17c:	4604      	mov	r4, r0
 800f17e:	f001 fae1 	bl	8010744 <ucdr_buffer_alignment>
 800f182:	4601      	mov	r1, r0
 800f184:	4620      	mov	r0, r4
 800f186:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f18a:	f001 fb1f 	bl	80107cc <ucdr_advance_buffer>
 800f18e:	2104      	movs	r1, #4
 800f190:	4620      	mov	r0, r4
 800f192:	f001 fa77 	bl	8010684 <ucdr_check_buffer_available_for>
 800f196:	b1d8      	cbz	r0, 800f1d0 <ucdr_deserialize_uint32_t+0x5c>
 800f198:	7d22      	ldrb	r2, [r4, #20]
 800f19a:	68a3      	ldr	r3, [r4, #8]
 800f19c:	2a01      	cmp	r2, #1
 800f19e:	d052      	beq.n	800f246 <ucdr_deserialize_uint32_t+0xd2>
 800f1a0:	78db      	ldrb	r3, [r3, #3]
 800f1a2:	702b      	strb	r3, [r5, #0]
 800f1a4:	68a3      	ldr	r3, [r4, #8]
 800f1a6:	789b      	ldrb	r3, [r3, #2]
 800f1a8:	706b      	strb	r3, [r5, #1]
 800f1aa:	68a3      	ldr	r3, [r4, #8]
 800f1ac:	785b      	ldrb	r3, [r3, #1]
 800f1ae:	70ab      	strb	r3, [r5, #2]
 800f1b0:	68a3      	ldr	r3, [r4, #8]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	70eb      	strb	r3, [r5, #3]
 800f1b6:	68a2      	ldr	r2, [r4, #8]
 800f1b8:	6923      	ldr	r3, [r4, #16]
 800f1ba:	3204      	adds	r2, #4
 800f1bc:	3304      	adds	r3, #4
 800f1be:	2104      	movs	r1, #4
 800f1c0:	60a2      	str	r2, [r4, #8]
 800f1c2:	6123      	str	r3, [r4, #16]
 800f1c4:	7561      	strb	r1, [r4, #21]
 800f1c6:	7da0      	ldrb	r0, [r4, #22]
 800f1c8:	f080 0001 	eor.w	r0, r0, #1
 800f1cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1d0:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f1d4:	42b7      	cmp	r7, r6
 800f1d6:	d92a      	bls.n	800f22e <ucdr_deserialize_uint32_t+0xba>
 800f1d8:	6923      	ldr	r3, [r4, #16]
 800f1da:	60a7      	str	r7, [r4, #8]
 800f1dc:	1bbf      	subs	r7, r7, r6
 800f1de:	443b      	add	r3, r7
 800f1e0:	f1c7 0904 	rsb	r9, r7, #4
 800f1e4:	6123      	str	r3, [r4, #16]
 800f1e6:	4649      	mov	r1, r9
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f001 fa57 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f1ee:	b368      	cbz	r0, 800f24c <ucdr_deserialize_uint32_t+0xd8>
 800f1f0:	7d23      	ldrb	r3, [r4, #20]
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d040      	beq.n	800f278 <ucdr_deserialize_uint32_t+0x104>
 800f1f6:	78f3      	ldrb	r3, [r6, #3]
 800f1f8:	702b      	strb	r3, [r5, #0]
 800f1fa:	78b3      	ldrb	r3, [r6, #2]
 800f1fc:	706b      	strb	r3, [r5, #1]
 800f1fe:	2f01      	cmp	r7, #1
 800f200:	d031      	beq.n	800f266 <ucdr_deserialize_uint32_t+0xf2>
 800f202:	7873      	ldrb	r3, [r6, #1]
 800f204:	70ab      	strb	r3, [r5, #2]
 800f206:	2f02      	cmp	r7, #2
 800f208:	f105 0503 	add.w	r5, r5, #3
 800f20c:	d02f      	beq.n	800f26e <ucdr_deserialize_uint32_t+0xfa>
 800f20e:	7833      	ldrb	r3, [r6, #0]
 800f210:	702b      	strb	r3, [r5, #0]
 800f212:	6923      	ldr	r3, [r4, #16]
 800f214:	68a2      	ldr	r2, [r4, #8]
 800f216:	7da0      	ldrb	r0, [r4, #22]
 800f218:	2104      	movs	r1, #4
 800f21a:	3304      	adds	r3, #4
 800f21c:	444a      	add	r2, r9
 800f21e:	1bdb      	subs	r3, r3, r7
 800f220:	7561      	strb	r1, [r4, #21]
 800f222:	60a2      	str	r2, [r4, #8]
 800f224:	6123      	str	r3, [r4, #16]
 800f226:	f080 0001 	eor.w	r0, r0, #1
 800f22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f22e:	2104      	movs	r1, #4
 800f230:	4620      	mov	r0, r4
 800f232:	f001 fa33 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f236:	2800      	cmp	r0, #0
 800f238:	d0c5      	beq.n	800f1c6 <ucdr_deserialize_uint32_t+0x52>
 800f23a:	7d23      	ldrb	r3, [r4, #20]
 800f23c:	68a2      	ldr	r2, [r4, #8]
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d017      	beq.n	800f272 <ucdr_deserialize_uint32_t+0xfe>
 800f242:	78d3      	ldrb	r3, [r2, #3]
 800f244:	e7ad      	b.n	800f1a2 <ucdr_deserialize_uint32_t+0x2e>
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	602b      	str	r3, [r5, #0]
 800f24a:	e7b4      	b.n	800f1b6 <ucdr_deserialize_uint32_t+0x42>
 800f24c:	68a2      	ldr	r2, [r4, #8]
 800f24e:	6923      	ldr	r3, [r4, #16]
 800f250:	7da0      	ldrb	r0, [r4, #22]
 800f252:	f884 8015 	strb.w	r8, [r4, #21]
 800f256:	1bd2      	subs	r2, r2, r7
 800f258:	1bdb      	subs	r3, r3, r7
 800f25a:	60a2      	str	r2, [r4, #8]
 800f25c:	6123      	str	r3, [r4, #16]
 800f25e:	f080 0001 	eor.w	r0, r0, #1
 800f262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f266:	68a3      	ldr	r3, [r4, #8]
 800f268:	785b      	ldrb	r3, [r3, #1]
 800f26a:	70ab      	strb	r3, [r5, #2]
 800f26c:	3503      	adds	r5, #3
 800f26e:	68a6      	ldr	r6, [r4, #8]
 800f270:	e7cd      	b.n	800f20e <ucdr_deserialize_uint32_t+0x9a>
 800f272:	6813      	ldr	r3, [r2, #0]
 800f274:	602b      	str	r3, [r5, #0]
 800f276:	e79e      	b.n	800f1b6 <ucdr_deserialize_uint32_t+0x42>
 800f278:	4631      	mov	r1, r6
 800f27a:	463a      	mov	r2, r7
 800f27c:	4628      	mov	r0, r5
 800f27e:	f00c ffee 	bl	801c25e <memcpy>
 800f282:	68a1      	ldr	r1, [r4, #8]
 800f284:	464a      	mov	r2, r9
 800f286:	19e8      	adds	r0, r5, r7
 800f288:	f00c ffe9 	bl	801c25e <memcpy>
 800f28c:	e7c1      	b.n	800f212 <ucdr_deserialize_uint32_t+0x9e>
 800f28e:	bf00      	nop

0800f290 <ucdr_deserialize_endian_uint32_t>:
 800f290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f294:	460e      	mov	r6, r1
 800f296:	2104      	movs	r1, #4
 800f298:	4604      	mov	r4, r0
 800f29a:	4615      	mov	r5, r2
 800f29c:	f001 fa52 	bl	8010744 <ucdr_buffer_alignment>
 800f2a0:	4601      	mov	r1, r0
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f2a8:	f001 fa90 	bl	80107cc <ucdr_advance_buffer>
 800f2ac:	2104      	movs	r1, #4
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f001 f9e8 	bl	8010684 <ucdr_check_buffer_available_for>
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	d137      	bne.n	800f328 <ucdr_deserialize_endian_uint32_t+0x98>
 800f2b8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f2bc:	42bb      	cmp	r3, r7
 800f2be:	d92e      	bls.n	800f31e <ucdr_deserialize_endian_uint32_t+0x8e>
 800f2c0:	eba3 0807 	sub.w	r8, r3, r7
 800f2c4:	60a3      	str	r3, [r4, #8]
 800f2c6:	6923      	ldr	r3, [r4, #16]
 800f2c8:	f1c8 0a04 	rsb	sl, r8, #4
 800f2cc:	4443      	add	r3, r8
 800f2ce:	6123      	str	r3, [r4, #16]
 800f2d0:	4651      	mov	r1, sl
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f001 f9e2 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	d043      	beq.n	800f364 <ucdr_deserialize_endian_uint32_t+0xd4>
 800f2dc:	2e01      	cmp	r6, #1
 800f2de:	d056      	beq.n	800f38e <ucdr_deserialize_endian_uint32_t+0xfe>
 800f2e0:	78fb      	ldrb	r3, [r7, #3]
 800f2e2:	702b      	strb	r3, [r5, #0]
 800f2e4:	78bb      	ldrb	r3, [r7, #2]
 800f2e6:	706b      	strb	r3, [r5, #1]
 800f2e8:	f1b8 0f01 	cmp.w	r8, #1
 800f2ec:	d049      	beq.n	800f382 <ucdr_deserialize_endian_uint32_t+0xf2>
 800f2ee:	787b      	ldrb	r3, [r7, #1]
 800f2f0:	70ab      	strb	r3, [r5, #2]
 800f2f2:	f1b8 0f02 	cmp.w	r8, #2
 800f2f6:	f105 0503 	add.w	r5, r5, #3
 800f2fa:	d046      	beq.n	800f38a <ucdr_deserialize_endian_uint32_t+0xfa>
 800f2fc:	783b      	ldrb	r3, [r7, #0]
 800f2fe:	702b      	strb	r3, [r5, #0]
 800f300:	6923      	ldr	r3, [r4, #16]
 800f302:	68a2      	ldr	r2, [r4, #8]
 800f304:	7da0      	ldrb	r0, [r4, #22]
 800f306:	2104      	movs	r1, #4
 800f308:	3304      	adds	r3, #4
 800f30a:	4452      	add	r2, sl
 800f30c:	eba3 0308 	sub.w	r3, r3, r8
 800f310:	7561      	strb	r1, [r4, #21]
 800f312:	60a2      	str	r2, [r4, #8]
 800f314:	6123      	str	r3, [r4, #16]
 800f316:	f080 0001 	eor.w	r0, r0, #1
 800f31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f31e:	2104      	movs	r1, #4
 800f320:	4620      	mov	r0, r4
 800f322:	f001 f9bb 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f326:	b1a8      	cbz	r0, 800f354 <ucdr_deserialize_endian_uint32_t+0xc4>
 800f328:	2e01      	cmp	r6, #1
 800f32a:	68a3      	ldr	r3, [r4, #8]
 800f32c:	d017      	beq.n	800f35e <ucdr_deserialize_endian_uint32_t+0xce>
 800f32e:	78db      	ldrb	r3, [r3, #3]
 800f330:	702b      	strb	r3, [r5, #0]
 800f332:	68a3      	ldr	r3, [r4, #8]
 800f334:	789b      	ldrb	r3, [r3, #2]
 800f336:	706b      	strb	r3, [r5, #1]
 800f338:	68a3      	ldr	r3, [r4, #8]
 800f33a:	785b      	ldrb	r3, [r3, #1]
 800f33c:	70ab      	strb	r3, [r5, #2]
 800f33e:	68a3      	ldr	r3, [r4, #8]
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	70eb      	strb	r3, [r5, #3]
 800f344:	68a2      	ldr	r2, [r4, #8]
 800f346:	6923      	ldr	r3, [r4, #16]
 800f348:	3204      	adds	r2, #4
 800f34a:	3304      	adds	r3, #4
 800f34c:	2104      	movs	r1, #4
 800f34e:	60a2      	str	r2, [r4, #8]
 800f350:	6123      	str	r3, [r4, #16]
 800f352:	7561      	strb	r1, [r4, #21]
 800f354:	7da0      	ldrb	r0, [r4, #22]
 800f356:	f080 0001 	eor.w	r0, r0, #1
 800f35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	602b      	str	r3, [r5, #0]
 800f362:	e7ef      	b.n	800f344 <ucdr_deserialize_endian_uint32_t+0xb4>
 800f364:	68a2      	ldr	r2, [r4, #8]
 800f366:	6923      	ldr	r3, [r4, #16]
 800f368:	7da0      	ldrb	r0, [r4, #22]
 800f36a:	f884 9015 	strb.w	r9, [r4, #21]
 800f36e:	eba2 0208 	sub.w	r2, r2, r8
 800f372:	eba3 0308 	sub.w	r3, r3, r8
 800f376:	60a2      	str	r2, [r4, #8]
 800f378:	6123      	str	r3, [r4, #16]
 800f37a:	f080 0001 	eor.w	r0, r0, #1
 800f37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f382:	68a3      	ldr	r3, [r4, #8]
 800f384:	785b      	ldrb	r3, [r3, #1]
 800f386:	70ab      	strb	r3, [r5, #2]
 800f388:	3503      	adds	r5, #3
 800f38a:	68a7      	ldr	r7, [r4, #8]
 800f38c:	e7b6      	b.n	800f2fc <ucdr_deserialize_endian_uint32_t+0x6c>
 800f38e:	4639      	mov	r1, r7
 800f390:	4642      	mov	r2, r8
 800f392:	4628      	mov	r0, r5
 800f394:	f00c ff63 	bl	801c25e <memcpy>
 800f398:	68a1      	ldr	r1, [r4, #8]
 800f39a:	4652      	mov	r2, sl
 800f39c:	eb05 0008 	add.w	r0, r5, r8
 800f3a0:	f00c ff5d 	bl	801c25e <memcpy>
 800f3a4:	e7ac      	b.n	800f300 <ucdr_deserialize_endian_uint32_t+0x70>
 800f3a6:	bf00      	nop

0800f3a8 <ucdr_serialize_uint64_t>:
 800f3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ac:	2108      	movs	r1, #8
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	e9cd 2300 	strd	r2, r3, [sp]
 800f3b6:	f001 f9c5 	bl	8010744 <ucdr_buffer_alignment>
 800f3ba:	4601      	mov	r1, r0
 800f3bc:	4620      	mov	r0, r4
 800f3be:	7d67      	ldrb	r7, [r4, #21]
 800f3c0:	f001 fa04 	bl	80107cc <ucdr_advance_buffer>
 800f3c4:	2108      	movs	r1, #8
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	f001 f95c 	bl	8010684 <ucdr_check_buffer_available_for>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d14d      	bne.n	800f46c <ucdr_serialize_uint64_t+0xc4>
 800f3d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f3d4:	42ab      	cmp	r3, r5
 800f3d6:	d944      	bls.n	800f462 <ucdr_serialize_uint64_t+0xba>
 800f3d8:	1b5e      	subs	r6, r3, r5
 800f3da:	60a3      	str	r3, [r4, #8]
 800f3dc:	6923      	ldr	r3, [r4, #16]
 800f3de:	f1c6 0808 	rsb	r8, r6, #8
 800f3e2:	4433      	add	r3, r6
 800f3e4:	6123      	str	r3, [r4, #16]
 800f3e6:	4641      	mov	r1, r8
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f001 f957 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	d072      	beq.n	800f4d8 <ucdr_serialize_uint64_t+0x130>
 800f3f2:	7d23      	ldrb	r3, [r4, #20]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	f000 8092 	beq.w	800f51e <ucdr_serialize_uint64_t+0x176>
 800f3fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f3fe:	702b      	strb	r3, [r5, #0]
 800f400:	2e01      	cmp	r6, #1
 800f402:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f406:	706b      	strb	r3, [r5, #1]
 800f408:	d073      	beq.n	800f4f2 <ucdr_serialize_uint64_t+0x14a>
 800f40a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f40e:	70ab      	strb	r3, [r5, #2]
 800f410:	2e02      	cmp	r6, #2
 800f412:	d072      	beq.n	800f4fa <ucdr_serialize_uint64_t+0x152>
 800f414:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f418:	70eb      	strb	r3, [r5, #3]
 800f41a:	2e03      	cmp	r6, #3
 800f41c:	d071      	beq.n	800f502 <ucdr_serialize_uint64_t+0x15a>
 800f41e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f422:	712b      	strb	r3, [r5, #4]
 800f424:	2e04      	cmp	r6, #4
 800f426:	d070      	beq.n	800f50a <ucdr_serialize_uint64_t+0x162>
 800f428:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f42c:	716b      	strb	r3, [r5, #5]
 800f42e:	2e05      	cmp	r6, #5
 800f430:	d06f      	beq.n	800f512 <ucdr_serialize_uint64_t+0x16a>
 800f432:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f436:	71ab      	strb	r3, [r5, #6]
 800f438:	2e06      	cmp	r6, #6
 800f43a:	d06e      	beq.n	800f51a <ucdr_serialize_uint64_t+0x172>
 800f43c:	3507      	adds	r5, #7
 800f43e:	f89d 3000 	ldrb.w	r3, [sp]
 800f442:	702b      	strb	r3, [r5, #0]
 800f444:	6923      	ldr	r3, [r4, #16]
 800f446:	68a2      	ldr	r2, [r4, #8]
 800f448:	7da0      	ldrb	r0, [r4, #22]
 800f44a:	3308      	adds	r3, #8
 800f44c:	4442      	add	r2, r8
 800f44e:	1b9b      	subs	r3, r3, r6
 800f450:	2108      	movs	r1, #8
 800f452:	f080 0001 	eor.w	r0, r0, #1
 800f456:	60a2      	str	r2, [r4, #8]
 800f458:	6123      	str	r3, [r4, #16]
 800f45a:	7561      	strb	r1, [r4, #21]
 800f45c:	b002      	add	sp, #8
 800f45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f462:	2108      	movs	r1, #8
 800f464:	4620      	mov	r0, r4
 800f466:	f001 f919 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f46a:	b350      	cbz	r0, 800f4c2 <ucdr_serialize_uint64_t+0x11a>
 800f46c:	7d22      	ldrb	r2, [r4, #20]
 800f46e:	68a3      	ldr	r3, [r4, #8]
 800f470:	2a01      	cmp	r2, #1
 800f472:	d02c      	beq.n	800f4ce <ucdr_serialize_uint64_t+0x126>
 800f474:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f478:	701a      	strb	r2, [r3, #0]
 800f47a:	68a3      	ldr	r3, [r4, #8]
 800f47c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f480:	705a      	strb	r2, [r3, #1]
 800f482:	68a3      	ldr	r3, [r4, #8]
 800f484:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f488:	709a      	strb	r2, [r3, #2]
 800f48a:	68a3      	ldr	r3, [r4, #8]
 800f48c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f490:	70da      	strb	r2, [r3, #3]
 800f492:	68a3      	ldr	r3, [r4, #8]
 800f494:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f498:	711a      	strb	r2, [r3, #4]
 800f49a:	68a3      	ldr	r3, [r4, #8]
 800f49c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f4a0:	715a      	strb	r2, [r3, #5]
 800f4a2:	68a3      	ldr	r3, [r4, #8]
 800f4a4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f4a8:	719a      	strb	r2, [r3, #6]
 800f4aa:	68a3      	ldr	r3, [r4, #8]
 800f4ac:	f89d 2000 	ldrb.w	r2, [sp]
 800f4b0:	71da      	strb	r2, [r3, #7]
 800f4b2:	68a2      	ldr	r2, [r4, #8]
 800f4b4:	6923      	ldr	r3, [r4, #16]
 800f4b6:	3208      	adds	r2, #8
 800f4b8:	3308      	adds	r3, #8
 800f4ba:	2108      	movs	r1, #8
 800f4bc:	60a2      	str	r2, [r4, #8]
 800f4be:	6123      	str	r3, [r4, #16]
 800f4c0:	7561      	strb	r1, [r4, #21]
 800f4c2:	7da0      	ldrb	r0, [r4, #22]
 800f4c4:	f080 0001 	eor.w	r0, r0, #1
 800f4c8:	b002      	add	sp, #8
 800f4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f4d2:	6019      	str	r1, [r3, #0]
 800f4d4:	605a      	str	r2, [r3, #4]
 800f4d6:	e7ec      	b.n	800f4b2 <ucdr_serialize_uint64_t+0x10a>
 800f4d8:	68a2      	ldr	r2, [r4, #8]
 800f4da:	6923      	ldr	r3, [r4, #16]
 800f4dc:	7da0      	ldrb	r0, [r4, #22]
 800f4de:	7567      	strb	r7, [r4, #21]
 800f4e0:	1b92      	subs	r2, r2, r6
 800f4e2:	1b9b      	subs	r3, r3, r6
 800f4e4:	f080 0001 	eor.w	r0, r0, #1
 800f4e8:	60a2      	str	r2, [r4, #8]
 800f4ea:	6123      	str	r3, [r4, #16]
 800f4ec:	b002      	add	sp, #8
 800f4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4f2:	68a3      	ldr	r3, [r4, #8]
 800f4f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f4f8:	701a      	strb	r2, [r3, #0]
 800f4fa:	68a3      	ldr	r3, [r4, #8]
 800f4fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f500:	701a      	strb	r2, [r3, #0]
 800f502:	68a3      	ldr	r3, [r4, #8]
 800f504:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f508:	701a      	strb	r2, [r3, #0]
 800f50a:	68a3      	ldr	r3, [r4, #8]
 800f50c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f510:	701a      	strb	r2, [r3, #0]
 800f512:	68a3      	ldr	r3, [r4, #8]
 800f514:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f518:	701a      	strb	r2, [r3, #0]
 800f51a:	68a5      	ldr	r5, [r4, #8]
 800f51c:	e78f      	b.n	800f43e <ucdr_serialize_uint64_t+0x96>
 800f51e:	4628      	mov	r0, r5
 800f520:	466d      	mov	r5, sp
 800f522:	4632      	mov	r2, r6
 800f524:	4629      	mov	r1, r5
 800f526:	f00c fe9a 	bl	801c25e <memcpy>
 800f52a:	68a0      	ldr	r0, [r4, #8]
 800f52c:	4642      	mov	r2, r8
 800f52e:	19a9      	adds	r1, r5, r6
 800f530:	f00c fe95 	bl	801c25e <memcpy>
 800f534:	e786      	b.n	800f444 <ucdr_serialize_uint64_t+0x9c>
 800f536:	bf00      	nop

0800f538 <ucdr_serialize_int16_t>:
 800f538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f53c:	b082      	sub	sp, #8
 800f53e:	460b      	mov	r3, r1
 800f540:	2102      	movs	r1, #2
 800f542:	4604      	mov	r4, r0
 800f544:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f548:	f001 f8fc 	bl	8010744 <ucdr_buffer_alignment>
 800f54c:	4601      	mov	r1, r0
 800f54e:	4620      	mov	r0, r4
 800f550:	7d67      	ldrb	r7, [r4, #21]
 800f552:	f001 f93b 	bl	80107cc <ucdr_advance_buffer>
 800f556:	2102      	movs	r1, #2
 800f558:	4620      	mov	r0, r4
 800f55a:	f001 f893 	bl	8010684 <ucdr_check_buffer_available_for>
 800f55e:	b1c0      	cbz	r0, 800f592 <ucdr_serialize_int16_t+0x5a>
 800f560:	7d22      	ldrb	r2, [r4, #20]
 800f562:	68a3      	ldr	r3, [r4, #8]
 800f564:	2a01      	cmp	r2, #1
 800f566:	d04e      	beq.n	800f606 <ucdr_serialize_int16_t+0xce>
 800f568:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f56c:	701a      	strb	r2, [r3, #0]
 800f56e:	68a3      	ldr	r3, [r4, #8]
 800f570:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f574:	705a      	strb	r2, [r3, #1]
 800f576:	68a2      	ldr	r2, [r4, #8]
 800f578:	6923      	ldr	r3, [r4, #16]
 800f57a:	3202      	adds	r2, #2
 800f57c:	3302      	adds	r3, #2
 800f57e:	2102      	movs	r1, #2
 800f580:	60a2      	str	r2, [r4, #8]
 800f582:	6123      	str	r3, [r4, #16]
 800f584:	7561      	strb	r1, [r4, #21]
 800f586:	7da0      	ldrb	r0, [r4, #22]
 800f588:	f080 0001 	eor.w	r0, r0, #1
 800f58c:	b002      	add	sp, #8
 800f58e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f592:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f596:	42ab      	cmp	r3, r5
 800f598:	d923      	bls.n	800f5e2 <ucdr_serialize_int16_t+0xaa>
 800f59a:	1b5e      	subs	r6, r3, r5
 800f59c:	60a3      	str	r3, [r4, #8]
 800f59e:	6923      	ldr	r3, [r4, #16]
 800f5a0:	f1c6 0802 	rsb	r8, r6, #2
 800f5a4:	4433      	add	r3, r6
 800f5a6:	6123      	str	r3, [r4, #16]
 800f5a8:	4641      	mov	r1, r8
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f001 f876 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f5b0:	b368      	cbz	r0, 800f60e <ucdr_serialize_int16_t+0xd6>
 800f5b2:	7d23      	ldrb	r3, [r4, #20]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d03b      	beq.n	800f630 <ucdr_serialize_int16_t+0xf8>
 800f5b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5bc:	702b      	strb	r3, [r5, #0]
 800f5be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f5c2:	706b      	strb	r3, [r5, #1]
 800f5c4:	6923      	ldr	r3, [r4, #16]
 800f5c6:	68a2      	ldr	r2, [r4, #8]
 800f5c8:	7da0      	ldrb	r0, [r4, #22]
 800f5ca:	3302      	adds	r3, #2
 800f5cc:	4442      	add	r2, r8
 800f5ce:	1b9b      	subs	r3, r3, r6
 800f5d0:	2102      	movs	r1, #2
 800f5d2:	f080 0001 	eor.w	r0, r0, #1
 800f5d6:	60a2      	str	r2, [r4, #8]
 800f5d8:	6123      	str	r3, [r4, #16]
 800f5da:	7561      	strb	r1, [r4, #21]
 800f5dc:	b002      	add	sp, #8
 800f5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e2:	2102      	movs	r1, #2
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	f001 f859 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d0cb      	beq.n	800f586 <ucdr_serialize_int16_t+0x4e>
 800f5ee:	7d23      	ldrb	r3, [r4, #20]
 800f5f0:	68a2      	ldr	r2, [r4, #8]
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	d018      	beq.n	800f628 <ucdr_serialize_int16_t+0xf0>
 800f5f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5fa:	7013      	strb	r3, [r2, #0]
 800f5fc:	68a3      	ldr	r3, [r4, #8]
 800f5fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f602:	705a      	strb	r2, [r3, #1]
 800f604:	e7b7      	b.n	800f576 <ucdr_serialize_int16_t+0x3e>
 800f606:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f60a:	801a      	strh	r2, [r3, #0]
 800f60c:	e7b3      	b.n	800f576 <ucdr_serialize_int16_t+0x3e>
 800f60e:	68a2      	ldr	r2, [r4, #8]
 800f610:	6923      	ldr	r3, [r4, #16]
 800f612:	7da0      	ldrb	r0, [r4, #22]
 800f614:	7567      	strb	r7, [r4, #21]
 800f616:	1b92      	subs	r2, r2, r6
 800f618:	1b9b      	subs	r3, r3, r6
 800f61a:	f080 0001 	eor.w	r0, r0, #1
 800f61e:	60a2      	str	r2, [r4, #8]
 800f620:	6123      	str	r3, [r4, #16]
 800f622:	b002      	add	sp, #8
 800f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f628:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800f62c:	8013      	strh	r3, [r2, #0]
 800f62e:	e7a2      	b.n	800f576 <ucdr_serialize_int16_t+0x3e>
 800f630:	4628      	mov	r0, r5
 800f632:	f10d 0506 	add.w	r5, sp, #6
 800f636:	4632      	mov	r2, r6
 800f638:	4629      	mov	r1, r5
 800f63a:	f00c fe10 	bl	801c25e <memcpy>
 800f63e:	68a0      	ldr	r0, [r4, #8]
 800f640:	4642      	mov	r2, r8
 800f642:	19a9      	adds	r1, r5, r6
 800f644:	f00c fe0b 	bl	801c25e <memcpy>
 800f648:	e7bc      	b.n	800f5c4 <ucdr_serialize_int16_t+0x8c>
 800f64a:	bf00      	nop

0800f64c <ucdr_deserialize_int16_t>:
 800f64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f650:	460d      	mov	r5, r1
 800f652:	2102      	movs	r1, #2
 800f654:	4604      	mov	r4, r0
 800f656:	f001 f875 	bl	8010744 <ucdr_buffer_alignment>
 800f65a:	4601      	mov	r1, r0
 800f65c:	4620      	mov	r0, r4
 800f65e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f662:	f001 f8b3 	bl	80107cc <ucdr_advance_buffer>
 800f666:	2102      	movs	r1, #2
 800f668:	4620      	mov	r0, r4
 800f66a:	f001 f80b 	bl	8010684 <ucdr_check_buffer_available_for>
 800f66e:	b1a8      	cbz	r0, 800f69c <ucdr_deserialize_int16_t+0x50>
 800f670:	7d22      	ldrb	r2, [r4, #20]
 800f672:	68a3      	ldr	r3, [r4, #8]
 800f674:	2a01      	cmp	r2, #1
 800f676:	d046      	beq.n	800f706 <ucdr_deserialize_int16_t+0xba>
 800f678:	785b      	ldrb	r3, [r3, #1]
 800f67a:	702b      	strb	r3, [r5, #0]
 800f67c:	68a3      	ldr	r3, [r4, #8]
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	706b      	strb	r3, [r5, #1]
 800f682:	68a2      	ldr	r2, [r4, #8]
 800f684:	6923      	ldr	r3, [r4, #16]
 800f686:	3202      	adds	r2, #2
 800f688:	3302      	adds	r3, #2
 800f68a:	2102      	movs	r1, #2
 800f68c:	60a2      	str	r2, [r4, #8]
 800f68e:	6123      	str	r3, [r4, #16]
 800f690:	7561      	strb	r1, [r4, #21]
 800f692:	7da0      	ldrb	r0, [r4, #22]
 800f694:	f080 0001 	eor.w	r0, r0, #1
 800f698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f69c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f6a0:	42be      	cmp	r6, r7
 800f6a2:	d920      	bls.n	800f6e6 <ucdr_deserialize_int16_t+0x9a>
 800f6a4:	6923      	ldr	r3, [r4, #16]
 800f6a6:	60a6      	str	r6, [r4, #8]
 800f6a8:	1bf6      	subs	r6, r6, r7
 800f6aa:	4433      	add	r3, r6
 800f6ac:	f1c6 0902 	rsb	r9, r6, #2
 800f6b0:	6123      	str	r3, [r4, #16]
 800f6b2:	4649      	mov	r1, r9
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	f000 fff1 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f6ba:	b338      	cbz	r0, 800f70c <ucdr_deserialize_int16_t+0xc0>
 800f6bc:	7d23      	ldrb	r3, [r4, #20]
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d034      	beq.n	800f72c <ucdr_deserialize_int16_t+0xe0>
 800f6c2:	787b      	ldrb	r3, [r7, #1]
 800f6c4:	702b      	strb	r3, [r5, #0]
 800f6c6:	783b      	ldrb	r3, [r7, #0]
 800f6c8:	706b      	strb	r3, [r5, #1]
 800f6ca:	6923      	ldr	r3, [r4, #16]
 800f6cc:	68a2      	ldr	r2, [r4, #8]
 800f6ce:	7da0      	ldrb	r0, [r4, #22]
 800f6d0:	2102      	movs	r1, #2
 800f6d2:	3302      	adds	r3, #2
 800f6d4:	444a      	add	r2, r9
 800f6d6:	1b9b      	subs	r3, r3, r6
 800f6d8:	7561      	strb	r1, [r4, #21]
 800f6da:	60a2      	str	r2, [r4, #8]
 800f6dc:	6123      	str	r3, [r4, #16]
 800f6de:	f080 0001 	eor.w	r0, r0, #1
 800f6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6e6:	2102      	movs	r1, #2
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f000 ffd7 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f6ee:	2800      	cmp	r0, #0
 800f6f0:	d0cf      	beq.n	800f692 <ucdr_deserialize_int16_t+0x46>
 800f6f2:	7d23      	ldrb	r3, [r4, #20]
 800f6f4:	68a2      	ldr	r2, [r4, #8]
 800f6f6:	2b01      	cmp	r3, #1
 800f6f8:	d015      	beq.n	800f726 <ucdr_deserialize_int16_t+0xda>
 800f6fa:	7853      	ldrb	r3, [r2, #1]
 800f6fc:	702b      	strb	r3, [r5, #0]
 800f6fe:	68a3      	ldr	r3, [r4, #8]
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	706b      	strb	r3, [r5, #1]
 800f704:	e7bd      	b.n	800f682 <ucdr_deserialize_int16_t+0x36>
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	802b      	strh	r3, [r5, #0]
 800f70a:	e7ba      	b.n	800f682 <ucdr_deserialize_int16_t+0x36>
 800f70c:	68a2      	ldr	r2, [r4, #8]
 800f70e:	6923      	ldr	r3, [r4, #16]
 800f710:	7da0      	ldrb	r0, [r4, #22]
 800f712:	f884 8015 	strb.w	r8, [r4, #21]
 800f716:	1b92      	subs	r2, r2, r6
 800f718:	1b9b      	subs	r3, r3, r6
 800f71a:	60a2      	str	r2, [r4, #8]
 800f71c:	6123      	str	r3, [r4, #16]
 800f71e:	f080 0001 	eor.w	r0, r0, #1
 800f722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f726:	8813      	ldrh	r3, [r2, #0]
 800f728:	802b      	strh	r3, [r5, #0]
 800f72a:	e7aa      	b.n	800f682 <ucdr_deserialize_int16_t+0x36>
 800f72c:	4639      	mov	r1, r7
 800f72e:	4632      	mov	r2, r6
 800f730:	4628      	mov	r0, r5
 800f732:	f00c fd94 	bl	801c25e <memcpy>
 800f736:	68a1      	ldr	r1, [r4, #8]
 800f738:	464a      	mov	r2, r9
 800f73a:	19a8      	adds	r0, r5, r6
 800f73c:	f00c fd8f 	bl	801c25e <memcpy>
 800f740:	e7c3      	b.n	800f6ca <ucdr_deserialize_int16_t+0x7e>
 800f742:	bf00      	nop

0800f744 <ucdr_serialize_int32_t>:
 800f744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f748:	b082      	sub	sp, #8
 800f74a:	4604      	mov	r4, r0
 800f74c:	9101      	str	r1, [sp, #4]
 800f74e:	2104      	movs	r1, #4
 800f750:	f000 fff8 	bl	8010744 <ucdr_buffer_alignment>
 800f754:	4601      	mov	r1, r0
 800f756:	4620      	mov	r0, r4
 800f758:	7d67      	ldrb	r7, [r4, #21]
 800f75a:	f001 f837 	bl	80107cc <ucdr_advance_buffer>
 800f75e:	2104      	movs	r1, #4
 800f760:	4620      	mov	r0, r4
 800f762:	f000 ff8f 	bl	8010684 <ucdr_check_buffer_available_for>
 800f766:	b300      	cbz	r0, 800f7aa <ucdr_serialize_int32_t+0x66>
 800f768:	7d22      	ldrb	r2, [r4, #20]
 800f76a:	68a3      	ldr	r3, [r4, #8]
 800f76c:	2a01      	cmp	r2, #1
 800f76e:	d05d      	beq.n	800f82c <ucdr_serialize_int32_t+0xe8>
 800f770:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f774:	701a      	strb	r2, [r3, #0]
 800f776:	68a3      	ldr	r3, [r4, #8]
 800f778:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f77c:	705a      	strb	r2, [r3, #1]
 800f77e:	68a3      	ldr	r3, [r4, #8]
 800f780:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f784:	709a      	strb	r2, [r3, #2]
 800f786:	68a3      	ldr	r3, [r4, #8]
 800f788:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f78c:	70da      	strb	r2, [r3, #3]
 800f78e:	68a2      	ldr	r2, [r4, #8]
 800f790:	6923      	ldr	r3, [r4, #16]
 800f792:	3204      	adds	r2, #4
 800f794:	3304      	adds	r3, #4
 800f796:	2104      	movs	r1, #4
 800f798:	60a2      	str	r2, [r4, #8]
 800f79a:	6123      	str	r3, [r4, #16]
 800f79c:	7561      	strb	r1, [r4, #21]
 800f79e:	7da0      	ldrb	r0, [r4, #22]
 800f7a0:	f080 0001 	eor.w	r0, r0, #1
 800f7a4:	b002      	add	sp, #8
 800f7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7aa:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f7ae:	42ab      	cmp	r3, r5
 800f7b0:	d92e      	bls.n	800f810 <ucdr_serialize_int32_t+0xcc>
 800f7b2:	1b5e      	subs	r6, r3, r5
 800f7b4:	60a3      	str	r3, [r4, #8]
 800f7b6:	6923      	ldr	r3, [r4, #16]
 800f7b8:	f1c6 0804 	rsb	r8, r6, #4
 800f7bc:	4433      	add	r3, r6
 800f7be:	6123      	str	r3, [r4, #16]
 800f7c0:	4641      	mov	r1, r8
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	f000 ff6a 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f7c8:	b398      	cbz	r0, 800f832 <ucdr_serialize_int32_t+0xee>
 800f7ca:	7d23      	ldrb	r3, [r4, #20]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d046      	beq.n	800f85e <ucdr_serialize_int32_t+0x11a>
 800f7d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f7d4:	702b      	strb	r3, [r5, #0]
 800f7d6:	2e01      	cmp	r6, #1
 800f7d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f7dc:	706b      	strb	r3, [r5, #1]
 800f7de:	d035      	beq.n	800f84c <ucdr_serialize_int32_t+0x108>
 800f7e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f7e4:	70ab      	strb	r3, [r5, #2]
 800f7e6:	2e02      	cmp	r6, #2
 800f7e8:	d034      	beq.n	800f854 <ucdr_serialize_int32_t+0x110>
 800f7ea:	3503      	adds	r5, #3
 800f7ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f7f0:	702b      	strb	r3, [r5, #0]
 800f7f2:	6923      	ldr	r3, [r4, #16]
 800f7f4:	68a2      	ldr	r2, [r4, #8]
 800f7f6:	7da0      	ldrb	r0, [r4, #22]
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	4442      	add	r2, r8
 800f7fc:	1b9b      	subs	r3, r3, r6
 800f7fe:	2104      	movs	r1, #4
 800f800:	f080 0001 	eor.w	r0, r0, #1
 800f804:	60a2      	str	r2, [r4, #8]
 800f806:	6123      	str	r3, [r4, #16]
 800f808:	7561      	strb	r1, [r4, #21]
 800f80a:	b002      	add	sp, #8
 800f80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f810:	2104      	movs	r1, #4
 800f812:	4620      	mov	r0, r4
 800f814:	f000 ff42 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f818:	2800      	cmp	r0, #0
 800f81a:	d0c0      	beq.n	800f79e <ucdr_serialize_int32_t+0x5a>
 800f81c:	7d23      	ldrb	r3, [r4, #20]
 800f81e:	68a2      	ldr	r2, [r4, #8]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d019      	beq.n	800f858 <ucdr_serialize_int32_t+0x114>
 800f824:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f828:	7013      	strb	r3, [r2, #0]
 800f82a:	e7a4      	b.n	800f776 <ucdr_serialize_int32_t+0x32>
 800f82c:	9a01      	ldr	r2, [sp, #4]
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	e7ad      	b.n	800f78e <ucdr_serialize_int32_t+0x4a>
 800f832:	68a2      	ldr	r2, [r4, #8]
 800f834:	6923      	ldr	r3, [r4, #16]
 800f836:	7da0      	ldrb	r0, [r4, #22]
 800f838:	7567      	strb	r7, [r4, #21]
 800f83a:	1b92      	subs	r2, r2, r6
 800f83c:	1b9b      	subs	r3, r3, r6
 800f83e:	f080 0001 	eor.w	r0, r0, #1
 800f842:	60a2      	str	r2, [r4, #8]
 800f844:	6123      	str	r3, [r4, #16]
 800f846:	b002      	add	sp, #8
 800f848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f84c:	68a3      	ldr	r3, [r4, #8]
 800f84e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f852:	701a      	strb	r2, [r3, #0]
 800f854:	68a5      	ldr	r5, [r4, #8]
 800f856:	e7c9      	b.n	800f7ec <ucdr_serialize_int32_t+0xa8>
 800f858:	9b01      	ldr	r3, [sp, #4]
 800f85a:	6013      	str	r3, [r2, #0]
 800f85c:	e797      	b.n	800f78e <ucdr_serialize_int32_t+0x4a>
 800f85e:	4628      	mov	r0, r5
 800f860:	ad01      	add	r5, sp, #4
 800f862:	4632      	mov	r2, r6
 800f864:	4629      	mov	r1, r5
 800f866:	f00c fcfa 	bl	801c25e <memcpy>
 800f86a:	68a0      	ldr	r0, [r4, #8]
 800f86c:	4642      	mov	r2, r8
 800f86e:	19a9      	adds	r1, r5, r6
 800f870:	f00c fcf5 	bl	801c25e <memcpy>
 800f874:	e7bd      	b.n	800f7f2 <ucdr_serialize_int32_t+0xae>
 800f876:	bf00      	nop

0800f878 <ucdr_serialize_endian_int32_t>:
 800f878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f87c:	b083      	sub	sp, #12
 800f87e:	460d      	mov	r5, r1
 800f880:	2104      	movs	r1, #4
 800f882:	4604      	mov	r4, r0
 800f884:	9201      	str	r2, [sp, #4]
 800f886:	f000 ff5d 	bl	8010744 <ucdr_buffer_alignment>
 800f88a:	4601      	mov	r1, r0
 800f88c:	4620      	mov	r0, r4
 800f88e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f892:	f000 ff9b 	bl	80107cc <ucdr_advance_buffer>
 800f896:	2104      	movs	r1, #4
 800f898:	4620      	mov	r0, r4
 800f89a:	f000 fef3 	bl	8010684 <ucdr_check_buffer_available_for>
 800f89e:	2800      	cmp	r0, #0
 800f8a0:	d137      	bne.n	800f912 <ucdr_serialize_endian_int32_t+0x9a>
 800f8a2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f8a6:	42b7      	cmp	r7, r6
 800f8a8:	d92e      	bls.n	800f908 <ucdr_serialize_endian_int32_t+0x90>
 800f8aa:	6923      	ldr	r3, [r4, #16]
 800f8ac:	60a7      	str	r7, [r4, #8]
 800f8ae:	1bbf      	subs	r7, r7, r6
 800f8b0:	443b      	add	r3, r7
 800f8b2:	f1c7 0904 	rsb	r9, r7, #4
 800f8b6:	6123      	str	r3, [r4, #16]
 800f8b8:	4649      	mov	r1, r9
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f000 feee 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d049      	beq.n	800f958 <ucdr_serialize_endian_int32_t+0xe0>
 800f8c4:	2d01      	cmp	r5, #1
 800f8c6:	d05b      	beq.n	800f980 <ucdr_serialize_endian_int32_t+0x108>
 800f8c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f8cc:	7033      	strb	r3, [r6, #0]
 800f8ce:	2f01      	cmp	r7, #1
 800f8d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8d4:	7073      	strb	r3, [r6, #1]
 800f8d6:	d04d      	beq.n	800f974 <ucdr_serialize_endian_int32_t+0xfc>
 800f8d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f8dc:	70b3      	strb	r3, [r6, #2]
 800f8de:	2f02      	cmp	r7, #2
 800f8e0:	d04c      	beq.n	800f97c <ucdr_serialize_endian_int32_t+0x104>
 800f8e2:	3603      	adds	r6, #3
 800f8e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f8e8:	7033      	strb	r3, [r6, #0]
 800f8ea:	6923      	ldr	r3, [r4, #16]
 800f8ec:	68a2      	ldr	r2, [r4, #8]
 800f8ee:	7da0      	ldrb	r0, [r4, #22]
 800f8f0:	3304      	adds	r3, #4
 800f8f2:	444a      	add	r2, r9
 800f8f4:	1bdb      	subs	r3, r3, r7
 800f8f6:	2104      	movs	r1, #4
 800f8f8:	f080 0001 	eor.w	r0, r0, #1
 800f8fc:	60a2      	str	r2, [r4, #8]
 800f8fe:	6123      	str	r3, [r4, #16]
 800f900:	7561      	strb	r1, [r4, #21]
 800f902:	b003      	add	sp, #12
 800f904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f908:	2104      	movs	r1, #4
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 fec6 	bl	801069c <ucdr_check_final_buffer_behavior>
 800f910:	b1c8      	cbz	r0, 800f946 <ucdr_serialize_endian_int32_t+0xce>
 800f912:	2d01      	cmp	r5, #1
 800f914:	68a3      	ldr	r3, [r4, #8]
 800f916:	d01c      	beq.n	800f952 <ucdr_serialize_endian_int32_t+0xda>
 800f918:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f91c:	701a      	strb	r2, [r3, #0]
 800f91e:	68a3      	ldr	r3, [r4, #8]
 800f920:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f924:	705a      	strb	r2, [r3, #1]
 800f926:	68a3      	ldr	r3, [r4, #8]
 800f928:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f92c:	709a      	strb	r2, [r3, #2]
 800f92e:	68a3      	ldr	r3, [r4, #8]
 800f930:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f934:	70da      	strb	r2, [r3, #3]
 800f936:	68a2      	ldr	r2, [r4, #8]
 800f938:	6923      	ldr	r3, [r4, #16]
 800f93a:	3204      	adds	r2, #4
 800f93c:	3304      	adds	r3, #4
 800f93e:	2104      	movs	r1, #4
 800f940:	60a2      	str	r2, [r4, #8]
 800f942:	6123      	str	r3, [r4, #16]
 800f944:	7561      	strb	r1, [r4, #21]
 800f946:	7da0      	ldrb	r0, [r4, #22]
 800f948:	f080 0001 	eor.w	r0, r0, #1
 800f94c:	b003      	add	sp, #12
 800f94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f952:	9a01      	ldr	r2, [sp, #4]
 800f954:	601a      	str	r2, [r3, #0]
 800f956:	e7ee      	b.n	800f936 <ucdr_serialize_endian_int32_t+0xbe>
 800f958:	68a2      	ldr	r2, [r4, #8]
 800f95a:	6923      	ldr	r3, [r4, #16]
 800f95c:	7da0      	ldrb	r0, [r4, #22]
 800f95e:	f884 8015 	strb.w	r8, [r4, #21]
 800f962:	1bd2      	subs	r2, r2, r7
 800f964:	1bdb      	subs	r3, r3, r7
 800f966:	f080 0001 	eor.w	r0, r0, #1
 800f96a:	60a2      	str	r2, [r4, #8]
 800f96c:	6123      	str	r3, [r4, #16]
 800f96e:	b003      	add	sp, #12
 800f970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f974:	68a3      	ldr	r3, [r4, #8]
 800f976:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f97a:	701a      	strb	r2, [r3, #0]
 800f97c:	68a6      	ldr	r6, [r4, #8]
 800f97e:	e7b1      	b.n	800f8e4 <ucdr_serialize_endian_int32_t+0x6c>
 800f980:	ad01      	add	r5, sp, #4
 800f982:	463a      	mov	r2, r7
 800f984:	4629      	mov	r1, r5
 800f986:	4630      	mov	r0, r6
 800f988:	f00c fc69 	bl	801c25e <memcpy>
 800f98c:	68a0      	ldr	r0, [r4, #8]
 800f98e:	464a      	mov	r2, r9
 800f990:	19e9      	adds	r1, r5, r7
 800f992:	f00c fc64 	bl	801c25e <memcpy>
 800f996:	e7a8      	b.n	800f8ea <ucdr_serialize_endian_int32_t+0x72>

0800f998 <ucdr_deserialize_int32_t>:
 800f998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f99c:	460d      	mov	r5, r1
 800f99e:	2104      	movs	r1, #4
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	f000 fecf 	bl	8010744 <ucdr_buffer_alignment>
 800f9a6:	4601      	mov	r1, r0
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f9ae:	f000 ff0d 	bl	80107cc <ucdr_advance_buffer>
 800f9b2:	2104      	movs	r1, #4
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	f000 fe65 	bl	8010684 <ucdr_check_buffer_available_for>
 800f9ba:	b1d8      	cbz	r0, 800f9f4 <ucdr_deserialize_int32_t+0x5c>
 800f9bc:	7d22      	ldrb	r2, [r4, #20]
 800f9be:	68a3      	ldr	r3, [r4, #8]
 800f9c0:	2a01      	cmp	r2, #1
 800f9c2:	d052      	beq.n	800fa6a <ucdr_deserialize_int32_t+0xd2>
 800f9c4:	78db      	ldrb	r3, [r3, #3]
 800f9c6:	702b      	strb	r3, [r5, #0]
 800f9c8:	68a3      	ldr	r3, [r4, #8]
 800f9ca:	789b      	ldrb	r3, [r3, #2]
 800f9cc:	706b      	strb	r3, [r5, #1]
 800f9ce:	68a3      	ldr	r3, [r4, #8]
 800f9d0:	785b      	ldrb	r3, [r3, #1]
 800f9d2:	70ab      	strb	r3, [r5, #2]
 800f9d4:	68a3      	ldr	r3, [r4, #8]
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	70eb      	strb	r3, [r5, #3]
 800f9da:	68a2      	ldr	r2, [r4, #8]
 800f9dc:	6923      	ldr	r3, [r4, #16]
 800f9de:	3204      	adds	r2, #4
 800f9e0:	3304      	adds	r3, #4
 800f9e2:	2104      	movs	r1, #4
 800f9e4:	60a2      	str	r2, [r4, #8]
 800f9e6:	6123      	str	r3, [r4, #16]
 800f9e8:	7561      	strb	r1, [r4, #21]
 800f9ea:	7da0      	ldrb	r0, [r4, #22]
 800f9ec:	f080 0001 	eor.w	r0, r0, #1
 800f9f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9f4:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f9f8:	42b7      	cmp	r7, r6
 800f9fa:	d92a      	bls.n	800fa52 <ucdr_deserialize_int32_t+0xba>
 800f9fc:	6923      	ldr	r3, [r4, #16]
 800f9fe:	60a7      	str	r7, [r4, #8]
 800fa00:	1bbf      	subs	r7, r7, r6
 800fa02:	443b      	add	r3, r7
 800fa04:	f1c7 0904 	rsb	r9, r7, #4
 800fa08:	6123      	str	r3, [r4, #16]
 800fa0a:	4649      	mov	r1, r9
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	f000 fe45 	bl	801069c <ucdr_check_final_buffer_behavior>
 800fa12:	b368      	cbz	r0, 800fa70 <ucdr_deserialize_int32_t+0xd8>
 800fa14:	7d23      	ldrb	r3, [r4, #20]
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d040      	beq.n	800fa9c <ucdr_deserialize_int32_t+0x104>
 800fa1a:	78f3      	ldrb	r3, [r6, #3]
 800fa1c:	702b      	strb	r3, [r5, #0]
 800fa1e:	78b3      	ldrb	r3, [r6, #2]
 800fa20:	706b      	strb	r3, [r5, #1]
 800fa22:	2f01      	cmp	r7, #1
 800fa24:	d031      	beq.n	800fa8a <ucdr_deserialize_int32_t+0xf2>
 800fa26:	7873      	ldrb	r3, [r6, #1]
 800fa28:	70ab      	strb	r3, [r5, #2]
 800fa2a:	2f02      	cmp	r7, #2
 800fa2c:	f105 0503 	add.w	r5, r5, #3
 800fa30:	d02f      	beq.n	800fa92 <ucdr_deserialize_int32_t+0xfa>
 800fa32:	7833      	ldrb	r3, [r6, #0]
 800fa34:	702b      	strb	r3, [r5, #0]
 800fa36:	6923      	ldr	r3, [r4, #16]
 800fa38:	68a2      	ldr	r2, [r4, #8]
 800fa3a:	7da0      	ldrb	r0, [r4, #22]
 800fa3c:	2104      	movs	r1, #4
 800fa3e:	3304      	adds	r3, #4
 800fa40:	444a      	add	r2, r9
 800fa42:	1bdb      	subs	r3, r3, r7
 800fa44:	7561      	strb	r1, [r4, #21]
 800fa46:	60a2      	str	r2, [r4, #8]
 800fa48:	6123      	str	r3, [r4, #16]
 800fa4a:	f080 0001 	eor.w	r0, r0, #1
 800fa4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa52:	2104      	movs	r1, #4
 800fa54:	4620      	mov	r0, r4
 800fa56:	f000 fe21 	bl	801069c <ucdr_check_final_buffer_behavior>
 800fa5a:	2800      	cmp	r0, #0
 800fa5c:	d0c5      	beq.n	800f9ea <ucdr_deserialize_int32_t+0x52>
 800fa5e:	7d23      	ldrb	r3, [r4, #20]
 800fa60:	68a2      	ldr	r2, [r4, #8]
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d017      	beq.n	800fa96 <ucdr_deserialize_int32_t+0xfe>
 800fa66:	78d3      	ldrb	r3, [r2, #3]
 800fa68:	e7ad      	b.n	800f9c6 <ucdr_deserialize_int32_t+0x2e>
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	602b      	str	r3, [r5, #0]
 800fa6e:	e7b4      	b.n	800f9da <ucdr_deserialize_int32_t+0x42>
 800fa70:	68a2      	ldr	r2, [r4, #8]
 800fa72:	6923      	ldr	r3, [r4, #16]
 800fa74:	7da0      	ldrb	r0, [r4, #22]
 800fa76:	f884 8015 	strb.w	r8, [r4, #21]
 800fa7a:	1bd2      	subs	r2, r2, r7
 800fa7c:	1bdb      	subs	r3, r3, r7
 800fa7e:	60a2      	str	r2, [r4, #8]
 800fa80:	6123      	str	r3, [r4, #16]
 800fa82:	f080 0001 	eor.w	r0, r0, #1
 800fa86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa8a:	68a3      	ldr	r3, [r4, #8]
 800fa8c:	785b      	ldrb	r3, [r3, #1]
 800fa8e:	70ab      	strb	r3, [r5, #2]
 800fa90:	3503      	adds	r5, #3
 800fa92:	68a6      	ldr	r6, [r4, #8]
 800fa94:	e7cd      	b.n	800fa32 <ucdr_deserialize_int32_t+0x9a>
 800fa96:	6813      	ldr	r3, [r2, #0]
 800fa98:	602b      	str	r3, [r5, #0]
 800fa9a:	e79e      	b.n	800f9da <ucdr_deserialize_int32_t+0x42>
 800fa9c:	4631      	mov	r1, r6
 800fa9e:	463a      	mov	r2, r7
 800faa0:	4628      	mov	r0, r5
 800faa2:	f00c fbdc 	bl	801c25e <memcpy>
 800faa6:	68a1      	ldr	r1, [r4, #8]
 800faa8:	464a      	mov	r2, r9
 800faaa:	19e8      	adds	r0, r5, r7
 800faac:	f00c fbd7 	bl	801c25e <memcpy>
 800fab0:	e7c1      	b.n	800fa36 <ucdr_deserialize_int32_t+0x9e>
 800fab2:	bf00      	nop

0800fab4 <ucdr_deserialize_endian_int32_t>:
 800fab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fab8:	460e      	mov	r6, r1
 800faba:	2104      	movs	r1, #4
 800fabc:	4604      	mov	r4, r0
 800fabe:	4615      	mov	r5, r2
 800fac0:	f000 fe40 	bl	8010744 <ucdr_buffer_alignment>
 800fac4:	4601      	mov	r1, r0
 800fac6:	4620      	mov	r0, r4
 800fac8:	f894 9015 	ldrb.w	r9, [r4, #21]
 800facc:	f000 fe7e 	bl	80107cc <ucdr_advance_buffer>
 800fad0:	2104      	movs	r1, #4
 800fad2:	4620      	mov	r0, r4
 800fad4:	f000 fdd6 	bl	8010684 <ucdr_check_buffer_available_for>
 800fad8:	2800      	cmp	r0, #0
 800fada:	d137      	bne.n	800fb4c <ucdr_deserialize_endian_int32_t+0x98>
 800fadc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fae0:	42bb      	cmp	r3, r7
 800fae2:	d92e      	bls.n	800fb42 <ucdr_deserialize_endian_int32_t+0x8e>
 800fae4:	eba3 0807 	sub.w	r8, r3, r7
 800fae8:	60a3      	str	r3, [r4, #8]
 800faea:	6923      	ldr	r3, [r4, #16]
 800faec:	f1c8 0a04 	rsb	sl, r8, #4
 800faf0:	4443      	add	r3, r8
 800faf2:	6123      	str	r3, [r4, #16]
 800faf4:	4651      	mov	r1, sl
 800faf6:	4620      	mov	r0, r4
 800faf8:	f000 fdd0 	bl	801069c <ucdr_check_final_buffer_behavior>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d043      	beq.n	800fb88 <ucdr_deserialize_endian_int32_t+0xd4>
 800fb00:	2e01      	cmp	r6, #1
 800fb02:	d056      	beq.n	800fbb2 <ucdr_deserialize_endian_int32_t+0xfe>
 800fb04:	78fb      	ldrb	r3, [r7, #3]
 800fb06:	702b      	strb	r3, [r5, #0]
 800fb08:	78bb      	ldrb	r3, [r7, #2]
 800fb0a:	706b      	strb	r3, [r5, #1]
 800fb0c:	f1b8 0f01 	cmp.w	r8, #1
 800fb10:	d049      	beq.n	800fba6 <ucdr_deserialize_endian_int32_t+0xf2>
 800fb12:	787b      	ldrb	r3, [r7, #1]
 800fb14:	70ab      	strb	r3, [r5, #2]
 800fb16:	f1b8 0f02 	cmp.w	r8, #2
 800fb1a:	f105 0503 	add.w	r5, r5, #3
 800fb1e:	d046      	beq.n	800fbae <ucdr_deserialize_endian_int32_t+0xfa>
 800fb20:	783b      	ldrb	r3, [r7, #0]
 800fb22:	702b      	strb	r3, [r5, #0]
 800fb24:	6923      	ldr	r3, [r4, #16]
 800fb26:	68a2      	ldr	r2, [r4, #8]
 800fb28:	7da0      	ldrb	r0, [r4, #22]
 800fb2a:	2104      	movs	r1, #4
 800fb2c:	3304      	adds	r3, #4
 800fb2e:	4452      	add	r2, sl
 800fb30:	eba3 0308 	sub.w	r3, r3, r8
 800fb34:	7561      	strb	r1, [r4, #21]
 800fb36:	60a2      	str	r2, [r4, #8]
 800fb38:	6123      	str	r3, [r4, #16]
 800fb3a:	f080 0001 	eor.w	r0, r0, #1
 800fb3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb42:	2104      	movs	r1, #4
 800fb44:	4620      	mov	r0, r4
 800fb46:	f000 fda9 	bl	801069c <ucdr_check_final_buffer_behavior>
 800fb4a:	b1a8      	cbz	r0, 800fb78 <ucdr_deserialize_endian_int32_t+0xc4>
 800fb4c:	2e01      	cmp	r6, #1
 800fb4e:	68a3      	ldr	r3, [r4, #8]
 800fb50:	d017      	beq.n	800fb82 <ucdr_deserialize_endian_int32_t+0xce>
 800fb52:	78db      	ldrb	r3, [r3, #3]
 800fb54:	702b      	strb	r3, [r5, #0]
 800fb56:	68a3      	ldr	r3, [r4, #8]
 800fb58:	789b      	ldrb	r3, [r3, #2]
 800fb5a:	706b      	strb	r3, [r5, #1]
 800fb5c:	68a3      	ldr	r3, [r4, #8]
 800fb5e:	785b      	ldrb	r3, [r3, #1]
 800fb60:	70ab      	strb	r3, [r5, #2]
 800fb62:	68a3      	ldr	r3, [r4, #8]
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	70eb      	strb	r3, [r5, #3]
 800fb68:	68a2      	ldr	r2, [r4, #8]
 800fb6a:	6923      	ldr	r3, [r4, #16]
 800fb6c:	3204      	adds	r2, #4
 800fb6e:	3304      	adds	r3, #4
 800fb70:	2104      	movs	r1, #4
 800fb72:	60a2      	str	r2, [r4, #8]
 800fb74:	6123      	str	r3, [r4, #16]
 800fb76:	7561      	strb	r1, [r4, #21]
 800fb78:	7da0      	ldrb	r0, [r4, #22]
 800fb7a:	f080 0001 	eor.w	r0, r0, #1
 800fb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	602b      	str	r3, [r5, #0]
 800fb86:	e7ef      	b.n	800fb68 <ucdr_deserialize_endian_int32_t+0xb4>
 800fb88:	68a2      	ldr	r2, [r4, #8]
 800fb8a:	6923      	ldr	r3, [r4, #16]
 800fb8c:	7da0      	ldrb	r0, [r4, #22]
 800fb8e:	f884 9015 	strb.w	r9, [r4, #21]
 800fb92:	eba2 0208 	sub.w	r2, r2, r8
 800fb96:	eba3 0308 	sub.w	r3, r3, r8
 800fb9a:	60a2      	str	r2, [r4, #8]
 800fb9c:	6123      	str	r3, [r4, #16]
 800fb9e:	f080 0001 	eor.w	r0, r0, #1
 800fba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fba6:	68a3      	ldr	r3, [r4, #8]
 800fba8:	785b      	ldrb	r3, [r3, #1]
 800fbaa:	70ab      	strb	r3, [r5, #2]
 800fbac:	3503      	adds	r5, #3
 800fbae:	68a7      	ldr	r7, [r4, #8]
 800fbb0:	e7b6      	b.n	800fb20 <ucdr_deserialize_endian_int32_t+0x6c>
 800fbb2:	4639      	mov	r1, r7
 800fbb4:	4642      	mov	r2, r8
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f00c fb51 	bl	801c25e <memcpy>
 800fbbc:	68a1      	ldr	r1, [r4, #8]
 800fbbe:	4652      	mov	r2, sl
 800fbc0:	eb05 0008 	add.w	r0, r5, r8
 800fbc4:	f00c fb4b 	bl	801c25e <memcpy>
 800fbc8:	e7ac      	b.n	800fb24 <ucdr_deserialize_endian_int32_t+0x70>
 800fbca:	bf00      	nop

0800fbcc <ucdr_serialize_float>:
 800fbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd0:	2104      	movs	r1, #4
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	4604      	mov	r4, r0
 800fbd6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fbda:	f000 fdb3 	bl	8010744 <ucdr_buffer_alignment>
 800fbde:	4601      	mov	r1, r0
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	7d67      	ldrb	r7, [r4, #21]
 800fbe4:	f000 fdf2 	bl	80107cc <ucdr_advance_buffer>
 800fbe8:	2104      	movs	r1, #4
 800fbea:	4620      	mov	r0, r4
 800fbec:	f000 fd4a 	bl	8010684 <ucdr_check_buffer_available_for>
 800fbf0:	b300      	cbz	r0, 800fc34 <ucdr_serialize_float+0x68>
 800fbf2:	7d22      	ldrb	r2, [r4, #20]
 800fbf4:	68a3      	ldr	r3, [r4, #8]
 800fbf6:	2a01      	cmp	r2, #1
 800fbf8:	d05d      	beq.n	800fcb6 <ucdr_serialize_float+0xea>
 800fbfa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fbfe:	701a      	strb	r2, [r3, #0]
 800fc00:	68a3      	ldr	r3, [r4, #8]
 800fc02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc06:	705a      	strb	r2, [r3, #1]
 800fc08:	68a3      	ldr	r3, [r4, #8]
 800fc0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fc0e:	709a      	strb	r2, [r3, #2]
 800fc10:	68a3      	ldr	r3, [r4, #8]
 800fc12:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fc16:	70da      	strb	r2, [r3, #3]
 800fc18:	68a2      	ldr	r2, [r4, #8]
 800fc1a:	6923      	ldr	r3, [r4, #16]
 800fc1c:	3204      	adds	r2, #4
 800fc1e:	3304      	adds	r3, #4
 800fc20:	2104      	movs	r1, #4
 800fc22:	60a2      	str	r2, [r4, #8]
 800fc24:	6123      	str	r3, [r4, #16]
 800fc26:	7561      	strb	r1, [r4, #21]
 800fc28:	7da0      	ldrb	r0, [r4, #22]
 800fc2a:	f080 0001 	eor.w	r0, r0, #1
 800fc2e:	b002      	add	sp, #8
 800fc30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc34:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fc38:	42ab      	cmp	r3, r5
 800fc3a:	d92e      	bls.n	800fc9a <ucdr_serialize_float+0xce>
 800fc3c:	1b5e      	subs	r6, r3, r5
 800fc3e:	60a3      	str	r3, [r4, #8]
 800fc40:	6923      	ldr	r3, [r4, #16]
 800fc42:	f1c6 0804 	rsb	r8, r6, #4
 800fc46:	4433      	add	r3, r6
 800fc48:	6123      	str	r3, [r4, #16]
 800fc4a:	4641      	mov	r1, r8
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	f000 fd25 	bl	801069c <ucdr_check_final_buffer_behavior>
 800fc52:	b398      	cbz	r0, 800fcbc <ucdr_serialize_float+0xf0>
 800fc54:	7d23      	ldrb	r3, [r4, #20]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d046      	beq.n	800fce8 <ucdr_serialize_float+0x11c>
 800fc5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc5e:	702b      	strb	r3, [r5, #0]
 800fc60:	2e01      	cmp	r6, #1
 800fc62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fc66:	706b      	strb	r3, [r5, #1]
 800fc68:	d035      	beq.n	800fcd6 <ucdr_serialize_float+0x10a>
 800fc6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fc6e:	70ab      	strb	r3, [r5, #2]
 800fc70:	2e02      	cmp	r6, #2
 800fc72:	d034      	beq.n	800fcde <ucdr_serialize_float+0x112>
 800fc74:	3503      	adds	r5, #3
 800fc76:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fc7a:	702b      	strb	r3, [r5, #0]
 800fc7c:	6923      	ldr	r3, [r4, #16]
 800fc7e:	68a2      	ldr	r2, [r4, #8]
 800fc80:	7da0      	ldrb	r0, [r4, #22]
 800fc82:	3304      	adds	r3, #4
 800fc84:	4442      	add	r2, r8
 800fc86:	1b9b      	subs	r3, r3, r6
 800fc88:	2104      	movs	r1, #4
 800fc8a:	f080 0001 	eor.w	r0, r0, #1
 800fc8e:	60a2      	str	r2, [r4, #8]
 800fc90:	6123      	str	r3, [r4, #16]
 800fc92:	7561      	strb	r1, [r4, #21]
 800fc94:	b002      	add	sp, #8
 800fc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc9a:	2104      	movs	r1, #4
 800fc9c:	4620      	mov	r0, r4
 800fc9e:	f000 fcfd 	bl	801069c <ucdr_check_final_buffer_behavior>
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d0c0      	beq.n	800fc28 <ucdr_serialize_float+0x5c>
 800fca6:	7d23      	ldrb	r3, [r4, #20]
 800fca8:	68a2      	ldr	r2, [r4, #8]
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d019      	beq.n	800fce2 <ucdr_serialize_float+0x116>
 800fcae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fcb2:	7013      	strb	r3, [r2, #0]
 800fcb4:	e7a4      	b.n	800fc00 <ucdr_serialize_float+0x34>
 800fcb6:	9a01      	ldr	r2, [sp, #4]
 800fcb8:	601a      	str	r2, [r3, #0]
 800fcba:	e7ad      	b.n	800fc18 <ucdr_serialize_float+0x4c>
 800fcbc:	68a2      	ldr	r2, [r4, #8]
 800fcbe:	6923      	ldr	r3, [r4, #16]
 800fcc0:	7da0      	ldrb	r0, [r4, #22]
 800fcc2:	7567      	strb	r7, [r4, #21]
 800fcc4:	1b92      	subs	r2, r2, r6
 800fcc6:	1b9b      	subs	r3, r3, r6
 800fcc8:	f080 0001 	eor.w	r0, r0, #1
 800fccc:	60a2      	str	r2, [r4, #8]
 800fcce:	6123      	str	r3, [r4, #16]
 800fcd0:	b002      	add	sp, #8
 800fcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcd6:	68a3      	ldr	r3, [r4, #8]
 800fcd8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fcdc:	701a      	strb	r2, [r3, #0]
 800fcde:	68a5      	ldr	r5, [r4, #8]
 800fce0:	e7c9      	b.n	800fc76 <ucdr_serialize_float+0xaa>
 800fce2:	9b01      	ldr	r3, [sp, #4]
 800fce4:	6013      	str	r3, [r2, #0]
 800fce6:	e797      	b.n	800fc18 <ucdr_serialize_float+0x4c>
 800fce8:	4628      	mov	r0, r5
 800fcea:	ad01      	add	r5, sp, #4
 800fcec:	4632      	mov	r2, r6
 800fcee:	4629      	mov	r1, r5
 800fcf0:	f00c fab5 	bl	801c25e <memcpy>
 800fcf4:	68a0      	ldr	r0, [r4, #8]
 800fcf6:	4642      	mov	r2, r8
 800fcf8:	19a9      	adds	r1, r5, r6
 800fcfa:	f00c fab0 	bl	801c25e <memcpy>
 800fcfe:	e7bd      	b.n	800fc7c <ucdr_serialize_float+0xb0>

0800fd00 <ucdr_serialize_endian_float>:
 800fd00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fd04:	460d      	mov	r5, r1
 800fd06:	b083      	sub	sp, #12
 800fd08:	2104      	movs	r1, #4
 800fd0a:	4604      	mov	r4, r0
 800fd0c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fd10:	f000 fd18 	bl	8010744 <ucdr_buffer_alignment>
 800fd14:	4601      	mov	r1, r0
 800fd16:	4620      	mov	r0, r4
 800fd18:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fd1c:	f000 fd56 	bl	80107cc <ucdr_advance_buffer>
 800fd20:	2104      	movs	r1, #4
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 fcae 	bl	8010684 <ucdr_check_buffer_available_for>
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	d137      	bne.n	800fd9c <ucdr_serialize_endian_float+0x9c>
 800fd2c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fd30:	42b7      	cmp	r7, r6
 800fd32:	d92e      	bls.n	800fd92 <ucdr_serialize_endian_float+0x92>
 800fd34:	6923      	ldr	r3, [r4, #16]
 800fd36:	60a7      	str	r7, [r4, #8]
 800fd38:	1bbf      	subs	r7, r7, r6
 800fd3a:	443b      	add	r3, r7
 800fd3c:	f1c7 0904 	rsb	r9, r7, #4
 800fd40:	6123      	str	r3, [r4, #16]
 800fd42:	4649      	mov	r1, r9
 800fd44:	4620      	mov	r0, r4
 800fd46:	f000 fca9 	bl	801069c <ucdr_check_final_buffer_behavior>
 800fd4a:	2800      	cmp	r0, #0
 800fd4c:	d049      	beq.n	800fde2 <ucdr_serialize_endian_float+0xe2>
 800fd4e:	2d01      	cmp	r5, #1
 800fd50:	d05b      	beq.n	800fe0a <ucdr_serialize_endian_float+0x10a>
 800fd52:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fd56:	7033      	strb	r3, [r6, #0]
 800fd58:	2f01      	cmp	r7, #1
 800fd5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fd5e:	7073      	strb	r3, [r6, #1]
 800fd60:	d04d      	beq.n	800fdfe <ucdr_serialize_endian_float+0xfe>
 800fd62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fd66:	70b3      	strb	r3, [r6, #2]
 800fd68:	2f02      	cmp	r7, #2
 800fd6a:	d04c      	beq.n	800fe06 <ucdr_serialize_endian_float+0x106>
 800fd6c:	3603      	adds	r6, #3
 800fd6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fd72:	7033      	strb	r3, [r6, #0]
 800fd74:	6923      	ldr	r3, [r4, #16]
 800fd76:	68a2      	ldr	r2, [r4, #8]
 800fd78:	7da0      	ldrb	r0, [r4, #22]
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	444a      	add	r2, r9
 800fd7e:	1bdb      	subs	r3, r3, r7
 800fd80:	2104      	movs	r1, #4
 800fd82:	f080 0001 	eor.w	r0, r0, #1
 800fd86:	60a2      	str	r2, [r4, #8]
 800fd88:	6123      	str	r3, [r4, #16]
 800fd8a:	7561      	strb	r1, [r4, #21]
 800fd8c:	b003      	add	sp, #12
 800fd8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd92:	2104      	movs	r1, #4
 800fd94:	4620      	mov	r0, r4
 800fd96:	f000 fc81 	bl	801069c <ucdr_check_final_buffer_behavior>
 800fd9a:	b1c8      	cbz	r0, 800fdd0 <ucdr_serialize_endian_float+0xd0>
 800fd9c:	2d01      	cmp	r5, #1
 800fd9e:	68a3      	ldr	r3, [r4, #8]
 800fda0:	d01c      	beq.n	800fddc <ucdr_serialize_endian_float+0xdc>
 800fda2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fda6:	701a      	strb	r2, [r3, #0]
 800fda8:	68a3      	ldr	r3, [r4, #8]
 800fdaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fdae:	705a      	strb	r2, [r3, #1]
 800fdb0:	68a3      	ldr	r3, [r4, #8]
 800fdb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fdb6:	709a      	strb	r2, [r3, #2]
 800fdb8:	68a3      	ldr	r3, [r4, #8]
 800fdba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fdbe:	70da      	strb	r2, [r3, #3]
 800fdc0:	68a2      	ldr	r2, [r4, #8]
 800fdc2:	6923      	ldr	r3, [r4, #16]
 800fdc4:	3204      	adds	r2, #4
 800fdc6:	3304      	adds	r3, #4
 800fdc8:	2104      	movs	r1, #4
 800fdca:	60a2      	str	r2, [r4, #8]
 800fdcc:	6123      	str	r3, [r4, #16]
 800fdce:	7561      	strb	r1, [r4, #21]
 800fdd0:	7da0      	ldrb	r0, [r4, #22]
 800fdd2:	f080 0001 	eor.w	r0, r0, #1
 800fdd6:	b003      	add	sp, #12
 800fdd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fddc:	9a01      	ldr	r2, [sp, #4]
 800fdde:	601a      	str	r2, [r3, #0]
 800fde0:	e7ee      	b.n	800fdc0 <ucdr_serialize_endian_float+0xc0>
 800fde2:	68a2      	ldr	r2, [r4, #8]
 800fde4:	6923      	ldr	r3, [r4, #16]
 800fde6:	7da0      	ldrb	r0, [r4, #22]
 800fde8:	f884 8015 	strb.w	r8, [r4, #21]
 800fdec:	1bd2      	subs	r2, r2, r7
 800fdee:	1bdb      	subs	r3, r3, r7
 800fdf0:	f080 0001 	eor.w	r0, r0, #1
 800fdf4:	60a2      	str	r2, [r4, #8]
 800fdf6:	6123      	str	r3, [r4, #16]
 800fdf8:	b003      	add	sp, #12
 800fdfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdfe:	68a3      	ldr	r3, [r4, #8]
 800fe00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fe04:	701a      	strb	r2, [r3, #0]
 800fe06:	68a6      	ldr	r6, [r4, #8]
 800fe08:	e7b1      	b.n	800fd6e <ucdr_serialize_endian_float+0x6e>
 800fe0a:	ad01      	add	r5, sp, #4
 800fe0c:	463a      	mov	r2, r7
 800fe0e:	4629      	mov	r1, r5
 800fe10:	4630      	mov	r0, r6
 800fe12:	f00c fa24 	bl	801c25e <memcpy>
 800fe16:	68a0      	ldr	r0, [r4, #8]
 800fe18:	464a      	mov	r2, r9
 800fe1a:	19e9      	adds	r1, r5, r7
 800fe1c:	f00c fa1f 	bl	801c25e <memcpy>
 800fe20:	e7a8      	b.n	800fd74 <ucdr_serialize_endian_float+0x74>
 800fe22:	bf00      	nop

0800fe24 <ucdr_deserialize_float>:
 800fe24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe28:	460d      	mov	r5, r1
 800fe2a:	2104      	movs	r1, #4
 800fe2c:	4604      	mov	r4, r0
 800fe2e:	f000 fc89 	bl	8010744 <ucdr_buffer_alignment>
 800fe32:	4601      	mov	r1, r0
 800fe34:	4620      	mov	r0, r4
 800fe36:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fe3a:	f000 fcc7 	bl	80107cc <ucdr_advance_buffer>
 800fe3e:	2104      	movs	r1, #4
 800fe40:	4620      	mov	r0, r4
 800fe42:	f000 fc1f 	bl	8010684 <ucdr_check_buffer_available_for>
 800fe46:	b1d8      	cbz	r0, 800fe80 <ucdr_deserialize_float+0x5c>
 800fe48:	7d22      	ldrb	r2, [r4, #20]
 800fe4a:	68a3      	ldr	r3, [r4, #8]
 800fe4c:	2a01      	cmp	r2, #1
 800fe4e:	d052      	beq.n	800fef6 <ucdr_deserialize_float+0xd2>
 800fe50:	78db      	ldrb	r3, [r3, #3]
 800fe52:	702b      	strb	r3, [r5, #0]
 800fe54:	68a3      	ldr	r3, [r4, #8]
 800fe56:	789b      	ldrb	r3, [r3, #2]
 800fe58:	706b      	strb	r3, [r5, #1]
 800fe5a:	68a3      	ldr	r3, [r4, #8]
 800fe5c:	785b      	ldrb	r3, [r3, #1]
 800fe5e:	70ab      	strb	r3, [r5, #2]
 800fe60:	68a3      	ldr	r3, [r4, #8]
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	70eb      	strb	r3, [r5, #3]
 800fe66:	68a2      	ldr	r2, [r4, #8]
 800fe68:	6923      	ldr	r3, [r4, #16]
 800fe6a:	3204      	adds	r2, #4
 800fe6c:	3304      	adds	r3, #4
 800fe6e:	2104      	movs	r1, #4
 800fe70:	60a2      	str	r2, [r4, #8]
 800fe72:	6123      	str	r3, [r4, #16]
 800fe74:	7561      	strb	r1, [r4, #21]
 800fe76:	7da0      	ldrb	r0, [r4, #22]
 800fe78:	f080 0001 	eor.w	r0, r0, #1
 800fe7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe80:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fe84:	42b7      	cmp	r7, r6
 800fe86:	d92a      	bls.n	800fede <ucdr_deserialize_float+0xba>
 800fe88:	6923      	ldr	r3, [r4, #16]
 800fe8a:	60a7      	str	r7, [r4, #8]
 800fe8c:	1bbf      	subs	r7, r7, r6
 800fe8e:	443b      	add	r3, r7
 800fe90:	f1c7 0904 	rsb	r9, r7, #4
 800fe94:	6123      	str	r3, [r4, #16]
 800fe96:	4649      	mov	r1, r9
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f000 fbff 	bl	801069c <ucdr_check_final_buffer_behavior>
 800fe9e:	b368      	cbz	r0, 800fefc <ucdr_deserialize_float+0xd8>
 800fea0:	7d23      	ldrb	r3, [r4, #20]
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d040      	beq.n	800ff28 <ucdr_deserialize_float+0x104>
 800fea6:	78f3      	ldrb	r3, [r6, #3]
 800fea8:	702b      	strb	r3, [r5, #0]
 800feaa:	78b3      	ldrb	r3, [r6, #2]
 800feac:	706b      	strb	r3, [r5, #1]
 800feae:	2f01      	cmp	r7, #1
 800feb0:	d031      	beq.n	800ff16 <ucdr_deserialize_float+0xf2>
 800feb2:	7873      	ldrb	r3, [r6, #1]
 800feb4:	70ab      	strb	r3, [r5, #2]
 800feb6:	2f02      	cmp	r7, #2
 800feb8:	f105 0503 	add.w	r5, r5, #3
 800febc:	d02f      	beq.n	800ff1e <ucdr_deserialize_float+0xfa>
 800febe:	7833      	ldrb	r3, [r6, #0]
 800fec0:	702b      	strb	r3, [r5, #0]
 800fec2:	6923      	ldr	r3, [r4, #16]
 800fec4:	68a2      	ldr	r2, [r4, #8]
 800fec6:	7da0      	ldrb	r0, [r4, #22]
 800fec8:	2104      	movs	r1, #4
 800feca:	3304      	adds	r3, #4
 800fecc:	444a      	add	r2, r9
 800fece:	1bdb      	subs	r3, r3, r7
 800fed0:	7561      	strb	r1, [r4, #21]
 800fed2:	60a2      	str	r2, [r4, #8]
 800fed4:	6123      	str	r3, [r4, #16]
 800fed6:	f080 0001 	eor.w	r0, r0, #1
 800feda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fede:	2104      	movs	r1, #4
 800fee0:	4620      	mov	r0, r4
 800fee2:	f000 fbdb 	bl	801069c <ucdr_check_final_buffer_behavior>
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d0c5      	beq.n	800fe76 <ucdr_deserialize_float+0x52>
 800feea:	7d23      	ldrb	r3, [r4, #20]
 800feec:	68a2      	ldr	r2, [r4, #8]
 800feee:	2b01      	cmp	r3, #1
 800fef0:	d017      	beq.n	800ff22 <ucdr_deserialize_float+0xfe>
 800fef2:	78d3      	ldrb	r3, [r2, #3]
 800fef4:	e7ad      	b.n	800fe52 <ucdr_deserialize_float+0x2e>
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	602b      	str	r3, [r5, #0]
 800fefa:	e7b4      	b.n	800fe66 <ucdr_deserialize_float+0x42>
 800fefc:	68a2      	ldr	r2, [r4, #8]
 800fefe:	6923      	ldr	r3, [r4, #16]
 800ff00:	7da0      	ldrb	r0, [r4, #22]
 800ff02:	f884 8015 	strb.w	r8, [r4, #21]
 800ff06:	1bd2      	subs	r2, r2, r7
 800ff08:	1bdb      	subs	r3, r3, r7
 800ff0a:	60a2      	str	r2, [r4, #8]
 800ff0c:	6123      	str	r3, [r4, #16]
 800ff0e:	f080 0001 	eor.w	r0, r0, #1
 800ff12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff16:	68a3      	ldr	r3, [r4, #8]
 800ff18:	785b      	ldrb	r3, [r3, #1]
 800ff1a:	70ab      	strb	r3, [r5, #2]
 800ff1c:	3503      	adds	r5, #3
 800ff1e:	68a6      	ldr	r6, [r4, #8]
 800ff20:	e7cd      	b.n	800febe <ucdr_deserialize_float+0x9a>
 800ff22:	6813      	ldr	r3, [r2, #0]
 800ff24:	602b      	str	r3, [r5, #0]
 800ff26:	e79e      	b.n	800fe66 <ucdr_deserialize_float+0x42>
 800ff28:	4631      	mov	r1, r6
 800ff2a:	463a      	mov	r2, r7
 800ff2c:	4628      	mov	r0, r5
 800ff2e:	f00c f996 	bl	801c25e <memcpy>
 800ff32:	68a1      	ldr	r1, [r4, #8]
 800ff34:	464a      	mov	r2, r9
 800ff36:	19e8      	adds	r0, r5, r7
 800ff38:	f00c f991 	bl	801c25e <memcpy>
 800ff3c:	e7c1      	b.n	800fec2 <ucdr_deserialize_float+0x9e>
 800ff3e:	bf00      	nop

0800ff40 <ucdr_deserialize_endian_float>:
 800ff40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff44:	460e      	mov	r6, r1
 800ff46:	2104      	movs	r1, #4
 800ff48:	4604      	mov	r4, r0
 800ff4a:	4615      	mov	r5, r2
 800ff4c:	f000 fbfa 	bl	8010744 <ucdr_buffer_alignment>
 800ff50:	4601      	mov	r1, r0
 800ff52:	4620      	mov	r0, r4
 800ff54:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ff58:	f000 fc38 	bl	80107cc <ucdr_advance_buffer>
 800ff5c:	2104      	movs	r1, #4
 800ff5e:	4620      	mov	r0, r4
 800ff60:	f000 fb90 	bl	8010684 <ucdr_check_buffer_available_for>
 800ff64:	2800      	cmp	r0, #0
 800ff66:	d137      	bne.n	800ffd8 <ucdr_deserialize_endian_float+0x98>
 800ff68:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ff6c:	42bb      	cmp	r3, r7
 800ff6e:	d92e      	bls.n	800ffce <ucdr_deserialize_endian_float+0x8e>
 800ff70:	eba3 0807 	sub.w	r8, r3, r7
 800ff74:	60a3      	str	r3, [r4, #8]
 800ff76:	6923      	ldr	r3, [r4, #16]
 800ff78:	f1c8 0a04 	rsb	sl, r8, #4
 800ff7c:	4443      	add	r3, r8
 800ff7e:	6123      	str	r3, [r4, #16]
 800ff80:	4651      	mov	r1, sl
 800ff82:	4620      	mov	r0, r4
 800ff84:	f000 fb8a 	bl	801069c <ucdr_check_final_buffer_behavior>
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d043      	beq.n	8010014 <ucdr_deserialize_endian_float+0xd4>
 800ff8c:	2e01      	cmp	r6, #1
 800ff8e:	d056      	beq.n	801003e <ucdr_deserialize_endian_float+0xfe>
 800ff90:	78fb      	ldrb	r3, [r7, #3]
 800ff92:	702b      	strb	r3, [r5, #0]
 800ff94:	78bb      	ldrb	r3, [r7, #2]
 800ff96:	706b      	strb	r3, [r5, #1]
 800ff98:	f1b8 0f01 	cmp.w	r8, #1
 800ff9c:	d049      	beq.n	8010032 <ucdr_deserialize_endian_float+0xf2>
 800ff9e:	787b      	ldrb	r3, [r7, #1]
 800ffa0:	70ab      	strb	r3, [r5, #2]
 800ffa2:	f1b8 0f02 	cmp.w	r8, #2
 800ffa6:	f105 0503 	add.w	r5, r5, #3
 800ffaa:	d046      	beq.n	801003a <ucdr_deserialize_endian_float+0xfa>
 800ffac:	783b      	ldrb	r3, [r7, #0]
 800ffae:	702b      	strb	r3, [r5, #0]
 800ffb0:	6923      	ldr	r3, [r4, #16]
 800ffb2:	68a2      	ldr	r2, [r4, #8]
 800ffb4:	7da0      	ldrb	r0, [r4, #22]
 800ffb6:	2104      	movs	r1, #4
 800ffb8:	3304      	adds	r3, #4
 800ffba:	4452      	add	r2, sl
 800ffbc:	eba3 0308 	sub.w	r3, r3, r8
 800ffc0:	7561      	strb	r1, [r4, #21]
 800ffc2:	60a2      	str	r2, [r4, #8]
 800ffc4:	6123      	str	r3, [r4, #16]
 800ffc6:	f080 0001 	eor.w	r0, r0, #1
 800ffca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffce:	2104      	movs	r1, #4
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	f000 fb63 	bl	801069c <ucdr_check_final_buffer_behavior>
 800ffd6:	b1a8      	cbz	r0, 8010004 <ucdr_deserialize_endian_float+0xc4>
 800ffd8:	2e01      	cmp	r6, #1
 800ffda:	68a3      	ldr	r3, [r4, #8]
 800ffdc:	d017      	beq.n	801000e <ucdr_deserialize_endian_float+0xce>
 800ffde:	78db      	ldrb	r3, [r3, #3]
 800ffe0:	702b      	strb	r3, [r5, #0]
 800ffe2:	68a3      	ldr	r3, [r4, #8]
 800ffe4:	789b      	ldrb	r3, [r3, #2]
 800ffe6:	706b      	strb	r3, [r5, #1]
 800ffe8:	68a3      	ldr	r3, [r4, #8]
 800ffea:	785b      	ldrb	r3, [r3, #1]
 800ffec:	70ab      	strb	r3, [r5, #2]
 800ffee:	68a3      	ldr	r3, [r4, #8]
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	70eb      	strb	r3, [r5, #3]
 800fff4:	68a2      	ldr	r2, [r4, #8]
 800fff6:	6923      	ldr	r3, [r4, #16]
 800fff8:	3204      	adds	r2, #4
 800fffa:	3304      	adds	r3, #4
 800fffc:	2104      	movs	r1, #4
 800fffe:	60a2      	str	r2, [r4, #8]
 8010000:	6123      	str	r3, [r4, #16]
 8010002:	7561      	strb	r1, [r4, #21]
 8010004:	7da0      	ldrb	r0, [r4, #22]
 8010006:	f080 0001 	eor.w	r0, r0, #1
 801000a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	602b      	str	r3, [r5, #0]
 8010012:	e7ef      	b.n	800fff4 <ucdr_deserialize_endian_float+0xb4>
 8010014:	68a2      	ldr	r2, [r4, #8]
 8010016:	6923      	ldr	r3, [r4, #16]
 8010018:	7da0      	ldrb	r0, [r4, #22]
 801001a:	f884 9015 	strb.w	r9, [r4, #21]
 801001e:	eba2 0208 	sub.w	r2, r2, r8
 8010022:	eba3 0308 	sub.w	r3, r3, r8
 8010026:	60a2      	str	r2, [r4, #8]
 8010028:	6123      	str	r3, [r4, #16]
 801002a:	f080 0001 	eor.w	r0, r0, #1
 801002e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010032:	68a3      	ldr	r3, [r4, #8]
 8010034:	785b      	ldrb	r3, [r3, #1]
 8010036:	70ab      	strb	r3, [r5, #2]
 8010038:	3503      	adds	r5, #3
 801003a:	68a7      	ldr	r7, [r4, #8]
 801003c:	e7b6      	b.n	800ffac <ucdr_deserialize_endian_float+0x6c>
 801003e:	4639      	mov	r1, r7
 8010040:	4642      	mov	r2, r8
 8010042:	4628      	mov	r0, r5
 8010044:	f00c f90b 	bl	801c25e <memcpy>
 8010048:	68a1      	ldr	r1, [r4, #8]
 801004a:	4652      	mov	r2, sl
 801004c:	eb05 0008 	add.w	r0, r5, r8
 8010050:	f00c f905 	bl	801c25e <memcpy>
 8010054:	e7ac      	b.n	800ffb0 <ucdr_deserialize_endian_float+0x70>
 8010056:	bf00      	nop

08010058 <ucdr_serialize_double>:
 8010058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005c:	2108      	movs	r1, #8
 801005e:	b082      	sub	sp, #8
 8010060:	4604      	mov	r4, r0
 8010062:	ed8d 0b00 	vstr	d0, [sp]
 8010066:	f000 fb6d 	bl	8010744 <ucdr_buffer_alignment>
 801006a:	4601      	mov	r1, r0
 801006c:	4620      	mov	r0, r4
 801006e:	7d67      	ldrb	r7, [r4, #21]
 8010070:	f000 fbac 	bl	80107cc <ucdr_advance_buffer>
 8010074:	2108      	movs	r1, #8
 8010076:	4620      	mov	r0, r4
 8010078:	f000 fb04 	bl	8010684 <ucdr_check_buffer_available_for>
 801007c:	2800      	cmp	r0, #0
 801007e:	d14d      	bne.n	801011c <ucdr_serialize_double+0xc4>
 8010080:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010084:	42ab      	cmp	r3, r5
 8010086:	d944      	bls.n	8010112 <ucdr_serialize_double+0xba>
 8010088:	1b5e      	subs	r6, r3, r5
 801008a:	60a3      	str	r3, [r4, #8]
 801008c:	6923      	ldr	r3, [r4, #16]
 801008e:	f1c6 0808 	rsb	r8, r6, #8
 8010092:	4433      	add	r3, r6
 8010094:	6123      	str	r3, [r4, #16]
 8010096:	4641      	mov	r1, r8
 8010098:	4620      	mov	r0, r4
 801009a:	f000 faff 	bl	801069c <ucdr_check_final_buffer_behavior>
 801009e:	2800      	cmp	r0, #0
 80100a0:	d072      	beq.n	8010188 <ucdr_serialize_double+0x130>
 80100a2:	7d23      	ldrb	r3, [r4, #20]
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	f000 8092 	beq.w	80101ce <ucdr_serialize_double+0x176>
 80100aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80100ae:	702b      	strb	r3, [r5, #0]
 80100b0:	2e01      	cmp	r6, #1
 80100b2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80100b6:	706b      	strb	r3, [r5, #1]
 80100b8:	d073      	beq.n	80101a2 <ucdr_serialize_double+0x14a>
 80100ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80100be:	70ab      	strb	r3, [r5, #2]
 80100c0:	2e02      	cmp	r6, #2
 80100c2:	d072      	beq.n	80101aa <ucdr_serialize_double+0x152>
 80100c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80100c8:	70eb      	strb	r3, [r5, #3]
 80100ca:	2e03      	cmp	r6, #3
 80100cc:	d071      	beq.n	80101b2 <ucdr_serialize_double+0x15a>
 80100ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80100d2:	712b      	strb	r3, [r5, #4]
 80100d4:	2e04      	cmp	r6, #4
 80100d6:	d070      	beq.n	80101ba <ucdr_serialize_double+0x162>
 80100d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80100dc:	716b      	strb	r3, [r5, #5]
 80100de:	2e05      	cmp	r6, #5
 80100e0:	d06f      	beq.n	80101c2 <ucdr_serialize_double+0x16a>
 80100e2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80100e6:	71ab      	strb	r3, [r5, #6]
 80100e8:	2e06      	cmp	r6, #6
 80100ea:	d06e      	beq.n	80101ca <ucdr_serialize_double+0x172>
 80100ec:	3507      	adds	r5, #7
 80100ee:	f89d 3000 	ldrb.w	r3, [sp]
 80100f2:	702b      	strb	r3, [r5, #0]
 80100f4:	6923      	ldr	r3, [r4, #16]
 80100f6:	68a2      	ldr	r2, [r4, #8]
 80100f8:	7da0      	ldrb	r0, [r4, #22]
 80100fa:	3308      	adds	r3, #8
 80100fc:	4442      	add	r2, r8
 80100fe:	1b9b      	subs	r3, r3, r6
 8010100:	2108      	movs	r1, #8
 8010102:	f080 0001 	eor.w	r0, r0, #1
 8010106:	60a2      	str	r2, [r4, #8]
 8010108:	6123      	str	r3, [r4, #16]
 801010a:	7561      	strb	r1, [r4, #21]
 801010c:	b002      	add	sp, #8
 801010e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010112:	2108      	movs	r1, #8
 8010114:	4620      	mov	r0, r4
 8010116:	f000 fac1 	bl	801069c <ucdr_check_final_buffer_behavior>
 801011a:	b350      	cbz	r0, 8010172 <ucdr_serialize_double+0x11a>
 801011c:	7d22      	ldrb	r2, [r4, #20]
 801011e:	68a3      	ldr	r3, [r4, #8]
 8010120:	2a01      	cmp	r2, #1
 8010122:	d02c      	beq.n	801017e <ucdr_serialize_double+0x126>
 8010124:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010128:	701a      	strb	r2, [r3, #0]
 801012a:	68a3      	ldr	r3, [r4, #8]
 801012c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010130:	705a      	strb	r2, [r3, #1]
 8010132:	68a3      	ldr	r3, [r4, #8]
 8010134:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010138:	709a      	strb	r2, [r3, #2]
 801013a:	68a3      	ldr	r3, [r4, #8]
 801013c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010140:	70da      	strb	r2, [r3, #3]
 8010142:	68a3      	ldr	r3, [r4, #8]
 8010144:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010148:	711a      	strb	r2, [r3, #4]
 801014a:	68a3      	ldr	r3, [r4, #8]
 801014c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010150:	715a      	strb	r2, [r3, #5]
 8010152:	68a3      	ldr	r3, [r4, #8]
 8010154:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010158:	719a      	strb	r2, [r3, #6]
 801015a:	68a3      	ldr	r3, [r4, #8]
 801015c:	f89d 2000 	ldrb.w	r2, [sp]
 8010160:	71da      	strb	r2, [r3, #7]
 8010162:	68a2      	ldr	r2, [r4, #8]
 8010164:	6923      	ldr	r3, [r4, #16]
 8010166:	3208      	adds	r2, #8
 8010168:	3308      	adds	r3, #8
 801016a:	2108      	movs	r1, #8
 801016c:	60a2      	str	r2, [r4, #8]
 801016e:	6123      	str	r3, [r4, #16]
 8010170:	7561      	strb	r1, [r4, #21]
 8010172:	7da0      	ldrb	r0, [r4, #22]
 8010174:	f080 0001 	eor.w	r0, r0, #1
 8010178:	b002      	add	sp, #8
 801017a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801017e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010182:	6019      	str	r1, [r3, #0]
 8010184:	605a      	str	r2, [r3, #4]
 8010186:	e7ec      	b.n	8010162 <ucdr_serialize_double+0x10a>
 8010188:	68a2      	ldr	r2, [r4, #8]
 801018a:	6923      	ldr	r3, [r4, #16]
 801018c:	7da0      	ldrb	r0, [r4, #22]
 801018e:	7567      	strb	r7, [r4, #21]
 8010190:	1b92      	subs	r2, r2, r6
 8010192:	1b9b      	subs	r3, r3, r6
 8010194:	f080 0001 	eor.w	r0, r0, #1
 8010198:	60a2      	str	r2, [r4, #8]
 801019a:	6123      	str	r3, [r4, #16]
 801019c:	b002      	add	sp, #8
 801019e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101a2:	68a3      	ldr	r3, [r4, #8]
 80101a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80101a8:	701a      	strb	r2, [r3, #0]
 80101aa:	68a3      	ldr	r3, [r4, #8]
 80101ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80101b0:	701a      	strb	r2, [r3, #0]
 80101b2:	68a3      	ldr	r3, [r4, #8]
 80101b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80101b8:	701a      	strb	r2, [r3, #0]
 80101ba:	68a3      	ldr	r3, [r4, #8]
 80101bc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80101c0:	701a      	strb	r2, [r3, #0]
 80101c2:	68a3      	ldr	r3, [r4, #8]
 80101c4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80101c8:	701a      	strb	r2, [r3, #0]
 80101ca:	68a5      	ldr	r5, [r4, #8]
 80101cc:	e78f      	b.n	80100ee <ucdr_serialize_double+0x96>
 80101ce:	4628      	mov	r0, r5
 80101d0:	466d      	mov	r5, sp
 80101d2:	4632      	mov	r2, r6
 80101d4:	4629      	mov	r1, r5
 80101d6:	f00c f842 	bl	801c25e <memcpy>
 80101da:	68a0      	ldr	r0, [r4, #8]
 80101dc:	4642      	mov	r2, r8
 80101de:	19a9      	adds	r1, r5, r6
 80101e0:	f00c f83d 	bl	801c25e <memcpy>
 80101e4:	e786      	b.n	80100f4 <ucdr_serialize_double+0x9c>
 80101e6:	bf00      	nop

080101e8 <ucdr_serialize_endian_double>:
 80101e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101ec:	460e      	mov	r6, r1
 80101ee:	b083      	sub	sp, #12
 80101f0:	2108      	movs	r1, #8
 80101f2:	4604      	mov	r4, r0
 80101f4:	ed8d 0b00 	vstr	d0, [sp]
 80101f8:	f000 faa4 	bl	8010744 <ucdr_buffer_alignment>
 80101fc:	4601      	mov	r1, r0
 80101fe:	4620      	mov	r0, r4
 8010200:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010204:	f000 fae2 	bl	80107cc <ucdr_advance_buffer>
 8010208:	2108      	movs	r1, #8
 801020a:	4620      	mov	r0, r4
 801020c:	f000 fa3a 	bl	8010684 <ucdr_check_buffer_available_for>
 8010210:	2800      	cmp	r0, #0
 8010212:	d14c      	bne.n	80102ae <ucdr_serialize_endian_double+0xc6>
 8010214:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 8010218:	42bd      	cmp	r5, r7
 801021a:	d943      	bls.n	80102a4 <ucdr_serialize_endian_double+0xbc>
 801021c:	6923      	ldr	r3, [r4, #16]
 801021e:	60a5      	str	r5, [r4, #8]
 8010220:	1bed      	subs	r5, r5, r7
 8010222:	442b      	add	r3, r5
 8010224:	f1c5 0908 	rsb	r9, r5, #8
 8010228:	6123      	str	r3, [r4, #16]
 801022a:	4649      	mov	r1, r9
 801022c:	4620      	mov	r0, r4
 801022e:	f000 fa35 	bl	801069c <ucdr_check_final_buffer_behavior>
 8010232:	2800      	cmp	r0, #0
 8010234:	d070      	beq.n	8010318 <ucdr_serialize_endian_double+0x130>
 8010236:	2e01      	cmp	r6, #1
 8010238:	f000 8092 	beq.w	8010360 <ucdr_serialize_endian_double+0x178>
 801023c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010240:	703b      	strb	r3, [r7, #0]
 8010242:	2d01      	cmp	r5, #1
 8010244:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010248:	707b      	strb	r3, [r7, #1]
 801024a:	d073      	beq.n	8010334 <ucdr_serialize_endian_double+0x14c>
 801024c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010250:	70bb      	strb	r3, [r7, #2]
 8010252:	2d02      	cmp	r5, #2
 8010254:	d072      	beq.n	801033c <ucdr_serialize_endian_double+0x154>
 8010256:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801025a:	70fb      	strb	r3, [r7, #3]
 801025c:	2d03      	cmp	r5, #3
 801025e:	d071      	beq.n	8010344 <ucdr_serialize_endian_double+0x15c>
 8010260:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010264:	713b      	strb	r3, [r7, #4]
 8010266:	2d04      	cmp	r5, #4
 8010268:	d070      	beq.n	801034c <ucdr_serialize_endian_double+0x164>
 801026a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801026e:	717b      	strb	r3, [r7, #5]
 8010270:	2d05      	cmp	r5, #5
 8010272:	d06f      	beq.n	8010354 <ucdr_serialize_endian_double+0x16c>
 8010274:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010278:	71bb      	strb	r3, [r7, #6]
 801027a:	2d06      	cmp	r5, #6
 801027c:	d06e      	beq.n	801035c <ucdr_serialize_endian_double+0x174>
 801027e:	3707      	adds	r7, #7
 8010280:	f89d 3000 	ldrb.w	r3, [sp]
 8010284:	703b      	strb	r3, [r7, #0]
 8010286:	6923      	ldr	r3, [r4, #16]
 8010288:	68a2      	ldr	r2, [r4, #8]
 801028a:	7da0      	ldrb	r0, [r4, #22]
 801028c:	3308      	adds	r3, #8
 801028e:	444a      	add	r2, r9
 8010290:	1b5b      	subs	r3, r3, r5
 8010292:	2108      	movs	r1, #8
 8010294:	f080 0001 	eor.w	r0, r0, #1
 8010298:	60a2      	str	r2, [r4, #8]
 801029a:	6123      	str	r3, [r4, #16]
 801029c:	7561      	strb	r1, [r4, #21]
 801029e:	b003      	add	sp, #12
 80102a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102a4:	2108      	movs	r1, #8
 80102a6:	4620      	mov	r0, r4
 80102a8:	f000 f9f8 	bl	801069c <ucdr_check_final_buffer_behavior>
 80102ac:	b348      	cbz	r0, 8010302 <ucdr_serialize_endian_double+0x11a>
 80102ae:	2e01      	cmp	r6, #1
 80102b0:	68a3      	ldr	r3, [r4, #8]
 80102b2:	d02c      	beq.n	801030e <ucdr_serialize_endian_double+0x126>
 80102b4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80102b8:	701a      	strb	r2, [r3, #0]
 80102ba:	68a3      	ldr	r3, [r4, #8]
 80102bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102c0:	705a      	strb	r2, [r3, #1]
 80102c2:	68a3      	ldr	r3, [r4, #8]
 80102c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80102c8:	709a      	strb	r2, [r3, #2]
 80102ca:	68a3      	ldr	r3, [r4, #8]
 80102cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80102d0:	70da      	strb	r2, [r3, #3]
 80102d2:	68a3      	ldr	r3, [r4, #8]
 80102d4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80102d8:	711a      	strb	r2, [r3, #4]
 80102da:	68a3      	ldr	r3, [r4, #8]
 80102dc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80102e0:	715a      	strb	r2, [r3, #5]
 80102e2:	68a3      	ldr	r3, [r4, #8]
 80102e4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80102e8:	719a      	strb	r2, [r3, #6]
 80102ea:	68a3      	ldr	r3, [r4, #8]
 80102ec:	f89d 2000 	ldrb.w	r2, [sp]
 80102f0:	71da      	strb	r2, [r3, #7]
 80102f2:	68a2      	ldr	r2, [r4, #8]
 80102f4:	6923      	ldr	r3, [r4, #16]
 80102f6:	3208      	adds	r2, #8
 80102f8:	3308      	adds	r3, #8
 80102fa:	2108      	movs	r1, #8
 80102fc:	60a2      	str	r2, [r4, #8]
 80102fe:	6123      	str	r3, [r4, #16]
 8010300:	7561      	strb	r1, [r4, #21]
 8010302:	7da0      	ldrb	r0, [r4, #22]
 8010304:	f080 0001 	eor.w	r0, r0, #1
 8010308:	b003      	add	sp, #12
 801030a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801030e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010312:	6019      	str	r1, [r3, #0]
 8010314:	605a      	str	r2, [r3, #4]
 8010316:	e7ec      	b.n	80102f2 <ucdr_serialize_endian_double+0x10a>
 8010318:	68a2      	ldr	r2, [r4, #8]
 801031a:	6923      	ldr	r3, [r4, #16]
 801031c:	7da0      	ldrb	r0, [r4, #22]
 801031e:	f884 8015 	strb.w	r8, [r4, #21]
 8010322:	1b52      	subs	r2, r2, r5
 8010324:	1b5b      	subs	r3, r3, r5
 8010326:	f080 0001 	eor.w	r0, r0, #1
 801032a:	60a2      	str	r2, [r4, #8]
 801032c:	6123      	str	r3, [r4, #16]
 801032e:	b003      	add	sp, #12
 8010330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010334:	68a3      	ldr	r3, [r4, #8]
 8010336:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801033a:	701a      	strb	r2, [r3, #0]
 801033c:	68a3      	ldr	r3, [r4, #8]
 801033e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010342:	701a      	strb	r2, [r3, #0]
 8010344:	68a3      	ldr	r3, [r4, #8]
 8010346:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801034a:	701a      	strb	r2, [r3, #0]
 801034c:	68a3      	ldr	r3, [r4, #8]
 801034e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010352:	701a      	strb	r2, [r3, #0]
 8010354:	68a3      	ldr	r3, [r4, #8]
 8010356:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801035a:	701a      	strb	r2, [r3, #0]
 801035c:	68a7      	ldr	r7, [r4, #8]
 801035e:	e78f      	b.n	8010280 <ucdr_serialize_endian_double+0x98>
 8010360:	466e      	mov	r6, sp
 8010362:	462a      	mov	r2, r5
 8010364:	4631      	mov	r1, r6
 8010366:	4638      	mov	r0, r7
 8010368:	f00b ff79 	bl	801c25e <memcpy>
 801036c:	68a0      	ldr	r0, [r4, #8]
 801036e:	464a      	mov	r2, r9
 8010370:	1971      	adds	r1, r6, r5
 8010372:	f00b ff74 	bl	801c25e <memcpy>
 8010376:	e786      	b.n	8010286 <ucdr_serialize_endian_double+0x9e>

08010378 <ucdr_deserialize_double>:
 8010378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801037c:	460d      	mov	r5, r1
 801037e:	2108      	movs	r1, #8
 8010380:	4604      	mov	r4, r0
 8010382:	f000 f9df 	bl	8010744 <ucdr_buffer_alignment>
 8010386:	4601      	mov	r1, r0
 8010388:	4620      	mov	r0, r4
 801038a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801038e:	f000 fa1d 	bl	80107cc <ucdr_advance_buffer>
 8010392:	2108      	movs	r1, #8
 8010394:	4620      	mov	r0, r4
 8010396:	f000 f975 	bl	8010684 <ucdr_check_buffer_available_for>
 801039a:	2800      	cmp	r0, #0
 801039c:	d147      	bne.n	801042e <ucdr_deserialize_double+0xb6>
 801039e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80103a2:	42be      	cmp	r6, r7
 80103a4:	d93e      	bls.n	8010424 <ucdr_deserialize_double+0xac>
 80103a6:	6923      	ldr	r3, [r4, #16]
 80103a8:	60a6      	str	r6, [r4, #8]
 80103aa:	1bf6      	subs	r6, r6, r7
 80103ac:	4433      	add	r3, r6
 80103ae:	f1c6 0908 	rsb	r9, r6, #8
 80103b2:	6123      	str	r3, [r4, #16]
 80103b4:	4649      	mov	r1, r9
 80103b6:	4620      	mov	r0, r4
 80103b8:	f000 f970 	bl	801069c <ucdr_check_final_buffer_behavior>
 80103bc:	2800      	cmp	r0, #0
 80103be:	d063      	beq.n	8010488 <ucdr_deserialize_double+0x110>
 80103c0:	7d23      	ldrb	r3, [r4, #20]
 80103c2:	2b01      	cmp	r3, #1
 80103c4:	f000 8083 	beq.w	80104ce <ucdr_deserialize_double+0x156>
 80103c8:	79fb      	ldrb	r3, [r7, #7]
 80103ca:	702b      	strb	r3, [r5, #0]
 80103cc:	79bb      	ldrb	r3, [r7, #6]
 80103ce:	706b      	strb	r3, [r5, #1]
 80103d0:	2e01      	cmp	r6, #1
 80103d2:	d066      	beq.n	80104a2 <ucdr_deserialize_double+0x12a>
 80103d4:	797b      	ldrb	r3, [r7, #5]
 80103d6:	70ab      	strb	r3, [r5, #2]
 80103d8:	2e02      	cmp	r6, #2
 80103da:	f000 8089 	beq.w	80104f0 <ucdr_deserialize_double+0x178>
 80103de:	793b      	ldrb	r3, [r7, #4]
 80103e0:	70eb      	strb	r3, [r5, #3]
 80103e2:	2e03      	cmp	r6, #3
 80103e4:	f000 8082 	beq.w	80104ec <ucdr_deserialize_double+0x174>
 80103e8:	78fb      	ldrb	r3, [r7, #3]
 80103ea:	712b      	strb	r3, [r5, #4]
 80103ec:	2e04      	cmp	r6, #4
 80103ee:	d07b      	beq.n	80104e8 <ucdr_deserialize_double+0x170>
 80103f0:	78bb      	ldrb	r3, [r7, #2]
 80103f2:	716b      	strb	r3, [r5, #5]
 80103f4:	2e05      	cmp	r6, #5
 80103f6:	d075      	beq.n	80104e4 <ucdr_deserialize_double+0x16c>
 80103f8:	787b      	ldrb	r3, [r7, #1]
 80103fa:	71ab      	strb	r3, [r5, #6]
 80103fc:	2e06      	cmp	r6, #6
 80103fe:	f105 0507 	add.w	r5, r5, #7
 8010402:	d062      	beq.n	80104ca <ucdr_deserialize_double+0x152>
 8010404:	783b      	ldrb	r3, [r7, #0]
 8010406:	702b      	strb	r3, [r5, #0]
 8010408:	6923      	ldr	r3, [r4, #16]
 801040a:	68a2      	ldr	r2, [r4, #8]
 801040c:	7da0      	ldrb	r0, [r4, #22]
 801040e:	2108      	movs	r1, #8
 8010410:	3308      	adds	r3, #8
 8010412:	444a      	add	r2, r9
 8010414:	1b9b      	subs	r3, r3, r6
 8010416:	7561      	strb	r1, [r4, #21]
 8010418:	60a2      	str	r2, [r4, #8]
 801041a:	6123      	str	r3, [r4, #16]
 801041c:	f080 0001 	eor.w	r0, r0, #1
 8010420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010424:	2108      	movs	r1, #8
 8010426:	4620      	mov	r0, r4
 8010428:	f000 f938 	bl	801069c <ucdr_check_final_buffer_behavior>
 801042c:	b310      	cbz	r0, 8010474 <ucdr_deserialize_double+0xfc>
 801042e:	7d22      	ldrb	r2, [r4, #20]
 8010430:	68a3      	ldr	r3, [r4, #8]
 8010432:	2a01      	cmp	r2, #1
 8010434:	d023      	beq.n	801047e <ucdr_deserialize_double+0x106>
 8010436:	79db      	ldrb	r3, [r3, #7]
 8010438:	702b      	strb	r3, [r5, #0]
 801043a:	68a3      	ldr	r3, [r4, #8]
 801043c:	799b      	ldrb	r3, [r3, #6]
 801043e:	706b      	strb	r3, [r5, #1]
 8010440:	68a3      	ldr	r3, [r4, #8]
 8010442:	795b      	ldrb	r3, [r3, #5]
 8010444:	70ab      	strb	r3, [r5, #2]
 8010446:	68a3      	ldr	r3, [r4, #8]
 8010448:	791b      	ldrb	r3, [r3, #4]
 801044a:	70eb      	strb	r3, [r5, #3]
 801044c:	68a3      	ldr	r3, [r4, #8]
 801044e:	78db      	ldrb	r3, [r3, #3]
 8010450:	712b      	strb	r3, [r5, #4]
 8010452:	68a3      	ldr	r3, [r4, #8]
 8010454:	789b      	ldrb	r3, [r3, #2]
 8010456:	716b      	strb	r3, [r5, #5]
 8010458:	68a3      	ldr	r3, [r4, #8]
 801045a:	785b      	ldrb	r3, [r3, #1]
 801045c:	71ab      	strb	r3, [r5, #6]
 801045e:	68a3      	ldr	r3, [r4, #8]
 8010460:	781b      	ldrb	r3, [r3, #0]
 8010462:	71eb      	strb	r3, [r5, #7]
 8010464:	68a2      	ldr	r2, [r4, #8]
 8010466:	6923      	ldr	r3, [r4, #16]
 8010468:	3208      	adds	r2, #8
 801046a:	3308      	adds	r3, #8
 801046c:	2108      	movs	r1, #8
 801046e:	60a2      	str	r2, [r4, #8]
 8010470:	6123      	str	r3, [r4, #16]
 8010472:	7561      	strb	r1, [r4, #21]
 8010474:	7da0      	ldrb	r0, [r4, #22]
 8010476:	f080 0001 	eor.w	r0, r0, #1
 801047a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	606b      	str	r3, [r5, #4]
 8010484:	602a      	str	r2, [r5, #0]
 8010486:	e7ed      	b.n	8010464 <ucdr_deserialize_double+0xec>
 8010488:	68a2      	ldr	r2, [r4, #8]
 801048a:	6923      	ldr	r3, [r4, #16]
 801048c:	7da0      	ldrb	r0, [r4, #22]
 801048e:	f884 8015 	strb.w	r8, [r4, #21]
 8010492:	1b92      	subs	r2, r2, r6
 8010494:	1b9b      	subs	r3, r3, r6
 8010496:	60a2      	str	r2, [r4, #8]
 8010498:	6123      	str	r3, [r4, #16]
 801049a:	f080 0001 	eor.w	r0, r0, #1
 801049e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104a2:	68a3      	ldr	r3, [r4, #8]
 80104a4:	795b      	ldrb	r3, [r3, #5]
 80104a6:	70ab      	strb	r3, [r5, #2]
 80104a8:	3503      	adds	r5, #3
 80104aa:	68a3      	ldr	r3, [r4, #8]
 80104ac:	791b      	ldrb	r3, [r3, #4]
 80104ae:	f805 3b01 	strb.w	r3, [r5], #1
 80104b2:	68a3      	ldr	r3, [r4, #8]
 80104b4:	78db      	ldrb	r3, [r3, #3]
 80104b6:	f805 3b01 	strb.w	r3, [r5], #1
 80104ba:	68a3      	ldr	r3, [r4, #8]
 80104bc:	789b      	ldrb	r3, [r3, #2]
 80104be:	f805 3b01 	strb.w	r3, [r5], #1
 80104c2:	68a3      	ldr	r3, [r4, #8]
 80104c4:	785b      	ldrb	r3, [r3, #1]
 80104c6:	f805 3b01 	strb.w	r3, [r5], #1
 80104ca:	68a7      	ldr	r7, [r4, #8]
 80104cc:	e79a      	b.n	8010404 <ucdr_deserialize_double+0x8c>
 80104ce:	4639      	mov	r1, r7
 80104d0:	4632      	mov	r2, r6
 80104d2:	4628      	mov	r0, r5
 80104d4:	f00b fec3 	bl	801c25e <memcpy>
 80104d8:	68a1      	ldr	r1, [r4, #8]
 80104da:	464a      	mov	r2, r9
 80104dc:	19a8      	adds	r0, r5, r6
 80104de:	f00b febe 	bl	801c25e <memcpy>
 80104e2:	e791      	b.n	8010408 <ucdr_deserialize_double+0x90>
 80104e4:	3506      	adds	r5, #6
 80104e6:	e7ec      	b.n	80104c2 <ucdr_deserialize_double+0x14a>
 80104e8:	3505      	adds	r5, #5
 80104ea:	e7e6      	b.n	80104ba <ucdr_deserialize_double+0x142>
 80104ec:	3504      	adds	r5, #4
 80104ee:	e7e0      	b.n	80104b2 <ucdr_deserialize_double+0x13a>
 80104f0:	3503      	adds	r5, #3
 80104f2:	e7da      	b.n	80104aa <ucdr_deserialize_double+0x132>

080104f4 <ucdr_deserialize_endian_double>:
 80104f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104f8:	460f      	mov	r7, r1
 80104fa:	2108      	movs	r1, #8
 80104fc:	4604      	mov	r4, r0
 80104fe:	4615      	mov	r5, r2
 8010500:	f000 f920 	bl	8010744 <ucdr_buffer_alignment>
 8010504:	4601      	mov	r1, r0
 8010506:	4620      	mov	r0, r4
 8010508:	f894 9015 	ldrb.w	r9, [r4, #21]
 801050c:	f000 f95e 	bl	80107cc <ucdr_advance_buffer>
 8010510:	2108      	movs	r1, #8
 8010512:	4620      	mov	r0, r4
 8010514:	f000 f8b6 	bl	8010684 <ucdr_check_buffer_available_for>
 8010518:	2800      	cmp	r0, #0
 801051a:	d14f      	bne.n	80105bc <ucdr_deserialize_endian_double+0xc8>
 801051c:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 8010520:	4546      	cmp	r6, r8
 8010522:	d946      	bls.n	80105b2 <ucdr_deserialize_endian_double+0xbe>
 8010524:	6923      	ldr	r3, [r4, #16]
 8010526:	60a6      	str	r6, [r4, #8]
 8010528:	eba6 0608 	sub.w	r6, r6, r8
 801052c:	4433      	add	r3, r6
 801052e:	f1c6 0a08 	rsb	sl, r6, #8
 8010532:	6123      	str	r3, [r4, #16]
 8010534:	4651      	mov	r1, sl
 8010536:	4620      	mov	r0, r4
 8010538:	f000 f8b0 	bl	801069c <ucdr_check_final_buffer_behavior>
 801053c:	2800      	cmp	r0, #0
 801053e:	d069      	beq.n	8010614 <ucdr_deserialize_endian_double+0x120>
 8010540:	2f01      	cmp	r7, #1
 8010542:	f000 808b 	beq.w	801065c <ucdr_deserialize_endian_double+0x168>
 8010546:	f898 3007 	ldrb.w	r3, [r8, #7]
 801054a:	702b      	strb	r3, [r5, #0]
 801054c:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010550:	706b      	strb	r3, [r5, #1]
 8010552:	2e01      	cmp	r6, #1
 8010554:	d06b      	beq.n	801062e <ucdr_deserialize_endian_double+0x13a>
 8010556:	f898 3005 	ldrb.w	r3, [r8, #5]
 801055a:	70ab      	strb	r3, [r5, #2]
 801055c:	2e02      	cmp	r6, #2
 801055e:	f000 808e 	beq.w	801067e <ucdr_deserialize_endian_double+0x18a>
 8010562:	f898 3004 	ldrb.w	r3, [r8, #4]
 8010566:	70eb      	strb	r3, [r5, #3]
 8010568:	2e03      	cmp	r6, #3
 801056a:	f000 8086 	beq.w	801067a <ucdr_deserialize_endian_double+0x186>
 801056e:	f898 3003 	ldrb.w	r3, [r8, #3]
 8010572:	712b      	strb	r3, [r5, #4]
 8010574:	2e04      	cmp	r6, #4
 8010576:	d07e      	beq.n	8010676 <ucdr_deserialize_endian_double+0x182>
 8010578:	f898 3002 	ldrb.w	r3, [r8, #2]
 801057c:	716b      	strb	r3, [r5, #5]
 801057e:	2e05      	cmp	r6, #5
 8010580:	d077      	beq.n	8010672 <ucdr_deserialize_endian_double+0x17e>
 8010582:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010586:	71ab      	strb	r3, [r5, #6]
 8010588:	2e06      	cmp	r6, #6
 801058a:	f105 0507 	add.w	r5, r5, #7
 801058e:	d062      	beq.n	8010656 <ucdr_deserialize_endian_double+0x162>
 8010590:	f898 3000 	ldrb.w	r3, [r8]
 8010594:	702b      	strb	r3, [r5, #0]
 8010596:	6923      	ldr	r3, [r4, #16]
 8010598:	68a2      	ldr	r2, [r4, #8]
 801059a:	7da0      	ldrb	r0, [r4, #22]
 801059c:	2108      	movs	r1, #8
 801059e:	3308      	adds	r3, #8
 80105a0:	4452      	add	r2, sl
 80105a2:	1b9b      	subs	r3, r3, r6
 80105a4:	7561      	strb	r1, [r4, #21]
 80105a6:	60a2      	str	r2, [r4, #8]
 80105a8:	6123      	str	r3, [r4, #16]
 80105aa:	f080 0001 	eor.w	r0, r0, #1
 80105ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105b2:	2108      	movs	r1, #8
 80105b4:	4620      	mov	r0, r4
 80105b6:	f000 f871 	bl	801069c <ucdr_check_final_buffer_behavior>
 80105ba:	b308      	cbz	r0, 8010600 <ucdr_deserialize_endian_double+0x10c>
 80105bc:	2f01      	cmp	r7, #1
 80105be:	68a3      	ldr	r3, [r4, #8]
 80105c0:	d023      	beq.n	801060a <ucdr_deserialize_endian_double+0x116>
 80105c2:	79db      	ldrb	r3, [r3, #7]
 80105c4:	702b      	strb	r3, [r5, #0]
 80105c6:	68a3      	ldr	r3, [r4, #8]
 80105c8:	799b      	ldrb	r3, [r3, #6]
 80105ca:	706b      	strb	r3, [r5, #1]
 80105cc:	68a3      	ldr	r3, [r4, #8]
 80105ce:	795b      	ldrb	r3, [r3, #5]
 80105d0:	70ab      	strb	r3, [r5, #2]
 80105d2:	68a3      	ldr	r3, [r4, #8]
 80105d4:	791b      	ldrb	r3, [r3, #4]
 80105d6:	70eb      	strb	r3, [r5, #3]
 80105d8:	68a3      	ldr	r3, [r4, #8]
 80105da:	78db      	ldrb	r3, [r3, #3]
 80105dc:	712b      	strb	r3, [r5, #4]
 80105de:	68a3      	ldr	r3, [r4, #8]
 80105e0:	789b      	ldrb	r3, [r3, #2]
 80105e2:	716b      	strb	r3, [r5, #5]
 80105e4:	68a3      	ldr	r3, [r4, #8]
 80105e6:	785b      	ldrb	r3, [r3, #1]
 80105e8:	71ab      	strb	r3, [r5, #6]
 80105ea:	68a3      	ldr	r3, [r4, #8]
 80105ec:	781b      	ldrb	r3, [r3, #0]
 80105ee:	71eb      	strb	r3, [r5, #7]
 80105f0:	68a2      	ldr	r2, [r4, #8]
 80105f2:	6923      	ldr	r3, [r4, #16]
 80105f4:	3208      	adds	r2, #8
 80105f6:	3308      	adds	r3, #8
 80105f8:	2108      	movs	r1, #8
 80105fa:	60a2      	str	r2, [r4, #8]
 80105fc:	6123      	str	r3, [r4, #16]
 80105fe:	7561      	strb	r1, [r4, #21]
 8010600:	7da0      	ldrb	r0, [r4, #22]
 8010602:	f080 0001 	eor.w	r0, r0, #1
 8010606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	606b      	str	r3, [r5, #4]
 8010610:	602a      	str	r2, [r5, #0]
 8010612:	e7ed      	b.n	80105f0 <ucdr_deserialize_endian_double+0xfc>
 8010614:	68a2      	ldr	r2, [r4, #8]
 8010616:	6923      	ldr	r3, [r4, #16]
 8010618:	7da0      	ldrb	r0, [r4, #22]
 801061a:	f884 9015 	strb.w	r9, [r4, #21]
 801061e:	1b92      	subs	r2, r2, r6
 8010620:	1b9b      	subs	r3, r3, r6
 8010622:	60a2      	str	r2, [r4, #8]
 8010624:	6123      	str	r3, [r4, #16]
 8010626:	f080 0001 	eor.w	r0, r0, #1
 801062a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801062e:	68a3      	ldr	r3, [r4, #8]
 8010630:	795b      	ldrb	r3, [r3, #5]
 8010632:	70ab      	strb	r3, [r5, #2]
 8010634:	3503      	adds	r5, #3
 8010636:	68a3      	ldr	r3, [r4, #8]
 8010638:	791b      	ldrb	r3, [r3, #4]
 801063a:	f805 3b01 	strb.w	r3, [r5], #1
 801063e:	68a3      	ldr	r3, [r4, #8]
 8010640:	78db      	ldrb	r3, [r3, #3]
 8010642:	f805 3b01 	strb.w	r3, [r5], #1
 8010646:	68a3      	ldr	r3, [r4, #8]
 8010648:	789b      	ldrb	r3, [r3, #2]
 801064a:	f805 3b01 	strb.w	r3, [r5], #1
 801064e:	68a3      	ldr	r3, [r4, #8]
 8010650:	785b      	ldrb	r3, [r3, #1]
 8010652:	f805 3b01 	strb.w	r3, [r5], #1
 8010656:	f8d4 8008 	ldr.w	r8, [r4, #8]
 801065a:	e799      	b.n	8010590 <ucdr_deserialize_endian_double+0x9c>
 801065c:	4641      	mov	r1, r8
 801065e:	4632      	mov	r2, r6
 8010660:	4628      	mov	r0, r5
 8010662:	f00b fdfc 	bl	801c25e <memcpy>
 8010666:	68a1      	ldr	r1, [r4, #8]
 8010668:	4652      	mov	r2, sl
 801066a:	19a8      	adds	r0, r5, r6
 801066c:	f00b fdf7 	bl	801c25e <memcpy>
 8010670:	e791      	b.n	8010596 <ucdr_deserialize_endian_double+0xa2>
 8010672:	3506      	adds	r5, #6
 8010674:	e7eb      	b.n	801064e <ucdr_deserialize_endian_double+0x15a>
 8010676:	3505      	adds	r5, #5
 8010678:	e7e5      	b.n	8010646 <ucdr_deserialize_endian_double+0x152>
 801067a:	3504      	adds	r5, #4
 801067c:	e7df      	b.n	801063e <ucdr_deserialize_endian_double+0x14a>
 801067e:	3503      	adds	r5, #3
 8010680:	e7d9      	b.n	8010636 <ucdr_deserialize_endian_double+0x142>
 8010682:	bf00      	nop

08010684 <ucdr_check_buffer_available_for>:
 8010684:	7d83      	ldrb	r3, [r0, #22]
 8010686:	b93b      	cbnz	r3, 8010698 <ucdr_check_buffer_available_for+0x14>
 8010688:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801068c:	440b      	add	r3, r1
 801068e:	4298      	cmp	r0, r3
 8010690:	bf34      	ite	cc
 8010692:	2000      	movcc	r0, #0
 8010694:	2001      	movcs	r0, #1
 8010696:	4770      	bx	lr
 8010698:	2000      	movs	r0, #0
 801069a:	4770      	bx	lr

0801069c <ucdr_check_final_buffer_behavior>:
 801069c:	7d83      	ldrb	r3, [r0, #22]
 801069e:	b943      	cbnz	r3, 80106b2 <ucdr_check_final_buffer_behavior+0x16>
 80106a0:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80106a4:	4291      	cmp	r1, r2
 80106a6:	b510      	push	{r4, lr}
 80106a8:	4604      	mov	r4, r0
 80106aa:	d205      	bcs.n	80106b8 <ucdr_check_final_buffer_behavior+0x1c>
 80106ac:	2301      	movs	r3, #1
 80106ae:	4618      	mov	r0, r3
 80106b0:	bd10      	pop	{r4, pc}
 80106b2:	2300      	movs	r3, #0
 80106b4:	4618      	mov	r0, r3
 80106b6:	4770      	bx	lr
 80106b8:	6982      	ldr	r2, [r0, #24]
 80106ba:	b13a      	cbz	r2, 80106cc <ucdr_check_final_buffer_behavior+0x30>
 80106bc:	69c1      	ldr	r1, [r0, #28]
 80106be:	4790      	blx	r2
 80106c0:	f080 0301 	eor.w	r3, r0, #1
 80106c4:	b2db      	uxtb	r3, r3
 80106c6:	75a0      	strb	r0, [r4, #22]
 80106c8:	4618      	mov	r0, r3
 80106ca:	bd10      	pop	{r4, pc}
 80106cc:	2001      	movs	r0, #1
 80106ce:	75a0      	strb	r0, [r4, #22]
 80106d0:	e7fa      	b.n	80106c8 <ucdr_check_final_buffer_behavior+0x2c>
 80106d2:	bf00      	nop

080106d4 <ucdr_set_on_full_buffer_callback>:
 80106d4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80106d8:	4770      	bx	lr
 80106da:	bf00      	nop

080106dc <ucdr_init_buffer_origin_offset_endian>:
 80106dc:	b410      	push	{r4}
 80106de:	9c01      	ldr	r4, [sp, #4]
 80106e0:	6001      	str	r1, [r0, #0]
 80106e2:	440a      	add	r2, r1
 80106e4:	6042      	str	r2, [r0, #4]
 80106e6:	190a      	adds	r2, r1, r4
 80106e8:	441c      	add	r4, r3
 80106ea:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80106ee:	6082      	str	r2, [r0, #8]
 80106f0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80106f4:	7503      	strb	r3, [r0, #20]
 80106f6:	2200      	movs	r2, #0
 80106f8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80106fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010700:	7542      	strb	r2, [r0, #21]
 8010702:	7582      	strb	r2, [r0, #22]
 8010704:	4770      	bx	lr
 8010706:	bf00      	nop

08010708 <ucdr_init_buffer_origin_offset>:
 8010708:	b510      	push	{r4, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	9c04      	ldr	r4, [sp, #16]
 801070e:	9400      	str	r4, [sp, #0]
 8010710:	2401      	movs	r4, #1
 8010712:	9401      	str	r4, [sp, #4]
 8010714:	f7ff ffe2 	bl	80106dc <ucdr_init_buffer_origin_offset_endian>
 8010718:	b002      	add	sp, #8
 801071a:	bd10      	pop	{r4, pc}

0801071c <ucdr_init_buffer_origin>:
 801071c:	b510      	push	{r4, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	2400      	movs	r4, #0
 8010722:	9400      	str	r4, [sp, #0]
 8010724:	f7ff fff0 	bl	8010708 <ucdr_init_buffer_origin_offset>
 8010728:	b002      	add	sp, #8
 801072a:	bd10      	pop	{r4, pc}

0801072c <ucdr_init_buffer>:
 801072c:	2300      	movs	r3, #0
 801072e:	f7ff bff5 	b.w	801071c <ucdr_init_buffer_origin>
 8010732:	bf00      	nop

08010734 <ucdr_alignment>:
 8010734:	fbb0 f3f1 	udiv	r3, r0, r1
 8010738:	fb03 0011 	mls	r0, r3, r1, r0
 801073c:	1a08      	subs	r0, r1, r0
 801073e:	3901      	subs	r1, #1
 8010740:	4008      	ands	r0, r1
 8010742:	4770      	bx	lr

08010744 <ucdr_buffer_alignment>:
 8010744:	7d43      	ldrb	r3, [r0, #21]
 8010746:	428b      	cmp	r3, r1
 8010748:	d208      	bcs.n	801075c <ucdr_buffer_alignment+0x18>
 801074a:	6900      	ldr	r0, [r0, #16]
 801074c:	fbb0 f3f1 	udiv	r3, r0, r1
 8010750:	fb01 0013 	mls	r0, r1, r3, r0
 8010754:	1a08      	subs	r0, r1, r0
 8010756:	3901      	subs	r1, #1
 8010758:	4008      	ands	r0, r1
 801075a:	4770      	bx	lr
 801075c:	2000      	movs	r0, #0
 801075e:	4770      	bx	lr

08010760 <ucdr_align_to>:
 8010760:	b538      	push	{r3, r4, r5, lr}
 8010762:	4604      	mov	r4, r0
 8010764:	460d      	mov	r5, r1
 8010766:	f7ff ffed 	bl	8010744 <ucdr_buffer_alignment>
 801076a:	68a3      	ldr	r3, [r4, #8]
 801076c:	6861      	ldr	r1, [r4, #4]
 801076e:	6922      	ldr	r2, [r4, #16]
 8010770:	7565      	strb	r5, [r4, #21]
 8010772:	4403      	add	r3, r0
 8010774:	428b      	cmp	r3, r1
 8010776:	bf28      	it	cs
 8010778:	460b      	movcs	r3, r1
 801077a:	4402      	add	r2, r0
 801077c:	60a3      	str	r3, [r4, #8]
 801077e:	6122      	str	r2, [r4, #16]
 8010780:	bd38      	pop	{r3, r4, r5, pc}
 8010782:	bf00      	nop

08010784 <ucdr_buffer_length>:
 8010784:	6882      	ldr	r2, [r0, #8]
 8010786:	6800      	ldr	r0, [r0, #0]
 8010788:	1a10      	subs	r0, r2, r0
 801078a:	4770      	bx	lr

0801078c <ucdr_buffer_remaining>:
 801078c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010790:	1a10      	subs	r0, r2, r0
 8010792:	4770      	bx	lr

08010794 <ucdr_check_final_buffer_behavior_array>:
 8010794:	b538      	push	{r3, r4, r5, lr}
 8010796:	7d83      	ldrb	r3, [r0, #22]
 8010798:	b963      	cbnz	r3, 80107b4 <ucdr_check_final_buffer_behavior_array+0x20>
 801079a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801079e:	429a      	cmp	r2, r3
 80107a0:	4604      	mov	r4, r0
 80107a2:	460d      	mov	r5, r1
 80107a4:	d308      	bcc.n	80107b8 <ucdr_check_final_buffer_behavior_array+0x24>
 80107a6:	b139      	cbz	r1, 80107b8 <ucdr_check_final_buffer_behavior_array+0x24>
 80107a8:	6983      	ldr	r3, [r0, #24]
 80107aa:	b163      	cbz	r3, 80107c6 <ucdr_check_final_buffer_behavior_array+0x32>
 80107ac:	69c1      	ldr	r1, [r0, #28]
 80107ae:	4798      	blx	r3
 80107b0:	75a0      	strb	r0, [r4, #22]
 80107b2:	b108      	cbz	r0, 80107b8 <ucdr_check_final_buffer_behavior_array+0x24>
 80107b4:	2000      	movs	r0, #0
 80107b6:	bd38      	pop	{r3, r4, r5, pc}
 80107b8:	4620      	mov	r0, r4
 80107ba:	f7ff ffe7 	bl	801078c <ucdr_buffer_remaining>
 80107be:	42a8      	cmp	r0, r5
 80107c0:	bf28      	it	cs
 80107c2:	4628      	movcs	r0, r5
 80107c4:	bd38      	pop	{r3, r4, r5, pc}
 80107c6:	2301      	movs	r3, #1
 80107c8:	7583      	strb	r3, [r0, #22]
 80107ca:	e7f3      	b.n	80107b4 <ucdr_check_final_buffer_behavior_array+0x20>

080107cc <ucdr_advance_buffer>:
 80107cc:	b538      	push	{r3, r4, r5, lr}
 80107ce:	4604      	mov	r4, r0
 80107d0:	460d      	mov	r5, r1
 80107d2:	f7ff ff57 	bl	8010684 <ucdr_check_buffer_available_for>
 80107d6:	b178      	cbz	r0, 80107f8 <ucdr_advance_buffer+0x2c>
 80107d8:	6923      	ldr	r3, [r4, #16]
 80107da:	68a2      	ldr	r2, [r4, #8]
 80107dc:	442b      	add	r3, r5
 80107de:	6123      	str	r3, [r4, #16]
 80107e0:	2301      	movs	r3, #1
 80107e2:	442a      	add	r2, r5
 80107e4:	7563      	strb	r3, [r4, #21]
 80107e6:	60a2      	str	r2, [r4, #8]
 80107e8:	bd38      	pop	{r3, r4, r5, pc}
 80107ea:	68a2      	ldr	r2, [r4, #8]
 80107ec:	6923      	ldr	r3, [r4, #16]
 80107ee:	4402      	add	r2, r0
 80107f0:	4403      	add	r3, r0
 80107f2:	1a2d      	subs	r5, r5, r0
 80107f4:	60a2      	str	r2, [r4, #8]
 80107f6:	6123      	str	r3, [r4, #16]
 80107f8:	2201      	movs	r2, #1
 80107fa:	4629      	mov	r1, r5
 80107fc:	4620      	mov	r0, r4
 80107fe:	f7ff ffc9 	bl	8010794 <ucdr_check_final_buffer_behavior_array>
 8010802:	2800      	cmp	r0, #0
 8010804:	d1f1      	bne.n	80107ea <ucdr_advance_buffer+0x1e>
 8010806:	2301      	movs	r3, #1
 8010808:	7563      	strb	r3, [r4, #21]
 801080a:	bd38      	pop	{r3, r4, r5, pc}

0801080c <ucdr_serialize_sequence_char>:
 801080c:	b570      	push	{r4, r5, r6, lr}
 801080e:	460e      	mov	r6, r1
 8010810:	4615      	mov	r5, r2
 8010812:	7d01      	ldrb	r1, [r0, #20]
 8010814:	4604      	mov	r4, r0
 8010816:	f7fe fc1d 	bl	800f054 <ucdr_serialize_endian_uint32_t>
 801081a:	b90d      	cbnz	r5, 8010820 <ucdr_serialize_sequence_char+0x14>
 801081c:	2001      	movs	r0, #1
 801081e:	bd70      	pop	{r4, r5, r6, pc}
 8010820:	7d21      	ldrb	r1, [r4, #20]
 8010822:	462b      	mov	r3, r5
 8010824:	4632      	mov	r2, r6
 8010826:	4620      	mov	r0, r4
 8010828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801082c:	f7fd bd58 	b.w	800e2e0 <ucdr_serialize_endian_array_char>

08010830 <ucdr_deserialize_sequence_char>:
 8010830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010834:	461d      	mov	r5, r3
 8010836:	4616      	mov	r6, r2
 8010838:	460f      	mov	r7, r1
 801083a:	461a      	mov	r2, r3
 801083c:	7d01      	ldrb	r1, [r0, #20]
 801083e:	4604      	mov	r4, r0
 8010840:	f7fe fd26 	bl	800f290 <ucdr_deserialize_endian_uint32_t>
 8010844:	682b      	ldr	r3, [r5, #0]
 8010846:	429e      	cmp	r6, r3
 8010848:	d208      	bcs.n	801085c <ucdr_deserialize_sequence_char+0x2c>
 801084a:	2201      	movs	r2, #1
 801084c:	75a2      	strb	r2, [r4, #22]
 801084e:	7d21      	ldrb	r1, [r4, #20]
 8010850:	463a      	mov	r2, r7
 8010852:	4620      	mov	r0, r4
 8010854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010858:	f7fd bd74 	b.w	800e344 <ucdr_deserialize_endian_array_char>
 801085c:	2b00      	cmp	r3, #0
 801085e:	d1f6      	bne.n	801084e <ucdr_deserialize_sequence_char+0x1e>
 8010860:	2001      	movs	r0, #1
 8010862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010866:	bf00      	nop

08010868 <ucdr_serialize_sequence_uint8_t>:
 8010868:	b570      	push	{r4, r5, r6, lr}
 801086a:	460e      	mov	r6, r1
 801086c:	4615      	mov	r5, r2
 801086e:	7d01      	ldrb	r1, [r0, #20]
 8010870:	4604      	mov	r4, r0
 8010872:	f7fe fbef 	bl	800f054 <ucdr_serialize_endian_uint32_t>
 8010876:	b90d      	cbnz	r5, 801087c <ucdr_serialize_sequence_uint8_t+0x14>
 8010878:	2001      	movs	r0, #1
 801087a:	bd70      	pop	{r4, r5, r6, pc}
 801087c:	7d21      	ldrb	r1, [r4, #20]
 801087e:	462b      	mov	r3, r5
 8010880:	4632      	mov	r2, r6
 8010882:	4620      	mov	r0, r4
 8010884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010888:	f7fd bdc0 	b.w	800e40c <ucdr_serialize_endian_array_uint8_t>

0801088c <ucdr_deserialize_sequence_uint8_t>:
 801088c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010890:	461d      	mov	r5, r3
 8010892:	4616      	mov	r6, r2
 8010894:	460f      	mov	r7, r1
 8010896:	461a      	mov	r2, r3
 8010898:	7d01      	ldrb	r1, [r0, #20]
 801089a:	4604      	mov	r4, r0
 801089c:	f7fe fcf8 	bl	800f290 <ucdr_deserialize_endian_uint32_t>
 80108a0:	682b      	ldr	r3, [r5, #0]
 80108a2:	429e      	cmp	r6, r3
 80108a4:	d208      	bcs.n	80108b8 <ucdr_deserialize_sequence_uint8_t+0x2c>
 80108a6:	2201      	movs	r2, #1
 80108a8:	75a2      	strb	r2, [r4, #22]
 80108aa:	7d21      	ldrb	r1, [r4, #20]
 80108ac:	463a      	mov	r2, r7
 80108ae:	4620      	mov	r0, r4
 80108b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108b4:	f7fd be0e 	b.w	800e4d4 <ucdr_deserialize_endian_array_uint8_t>
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d1f6      	bne.n	80108aa <ucdr_deserialize_sequence_uint8_t+0x1e>
 80108bc:	2001      	movs	r0, #1
 80108be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c2:	bf00      	nop

080108c4 <ucdr_serialize_sequence_int32_t>:
 80108c4:	b570      	push	{r4, r5, r6, lr}
 80108c6:	460e      	mov	r6, r1
 80108c8:	4615      	mov	r5, r2
 80108ca:	7d01      	ldrb	r1, [r0, #20]
 80108cc:	4604      	mov	r4, r0
 80108ce:	f7fe fbc1 	bl	800f054 <ucdr_serialize_endian_uint32_t>
 80108d2:	b90d      	cbnz	r5, 80108d8 <ucdr_serialize_sequence_int32_t+0x14>
 80108d4:	2001      	movs	r0, #1
 80108d6:	bd70      	pop	{r4, r5, r6, pc}
 80108d8:	7d21      	ldrb	r1, [r4, #20]
 80108da:	462b      	mov	r3, r5
 80108dc:	4632      	mov	r2, r6
 80108de:	4620      	mov	r0, r4
 80108e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80108e4:	f7fd be28 	b.w	800e538 <ucdr_serialize_endian_array_int32_t>

080108e8 <ucdr_deserialize_sequence_int32_t>:
 80108e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ec:	461d      	mov	r5, r3
 80108ee:	4616      	mov	r6, r2
 80108f0:	460f      	mov	r7, r1
 80108f2:	461a      	mov	r2, r3
 80108f4:	7d01      	ldrb	r1, [r0, #20]
 80108f6:	4604      	mov	r4, r0
 80108f8:	f7fe fcca 	bl	800f290 <ucdr_deserialize_endian_uint32_t>
 80108fc:	682b      	ldr	r3, [r5, #0]
 80108fe:	429e      	cmp	r6, r3
 8010900:	d208      	bcs.n	8010914 <ucdr_deserialize_sequence_int32_t+0x2c>
 8010902:	2201      	movs	r2, #1
 8010904:	75a2      	strb	r2, [r4, #22]
 8010906:	7d21      	ldrb	r1, [r4, #20]
 8010908:	463a      	mov	r2, r7
 801090a:	4620      	mov	r0, r4
 801090c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010910:	f7fd be68 	b.w	800e5e4 <ucdr_deserialize_endian_array_int32_t>
 8010914:	2b00      	cmp	r3, #0
 8010916:	d1f6      	bne.n	8010906 <ucdr_deserialize_sequence_int32_t+0x1e>
 8010918:	2001      	movs	r0, #1
 801091a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801091e:	bf00      	nop

08010920 <ucdr_serialize_sequence_float>:
 8010920:	b570      	push	{r4, r5, r6, lr}
 8010922:	460e      	mov	r6, r1
 8010924:	4615      	mov	r5, r2
 8010926:	7d01      	ldrb	r1, [r0, #20]
 8010928:	4604      	mov	r4, r0
 801092a:	f7fe fb93 	bl	800f054 <ucdr_serialize_endian_uint32_t>
 801092e:	b90d      	cbnz	r5, 8010934 <ucdr_serialize_sequence_float+0x14>
 8010930:	2001      	movs	r0, #1
 8010932:	bd70      	pop	{r4, r5, r6, pc}
 8010934:	7d21      	ldrb	r1, [r4, #20]
 8010936:	462b      	mov	r3, r5
 8010938:	4632      	mov	r2, r6
 801093a:	4620      	mov	r0, r4
 801093c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010940:	f7fd bea6 	b.w	800e690 <ucdr_serialize_endian_array_float>

08010944 <ucdr_deserialize_sequence_float>:
 8010944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010948:	461d      	mov	r5, r3
 801094a:	4616      	mov	r6, r2
 801094c:	460f      	mov	r7, r1
 801094e:	461a      	mov	r2, r3
 8010950:	7d01      	ldrb	r1, [r0, #20]
 8010952:	4604      	mov	r4, r0
 8010954:	f7fe fc9c 	bl	800f290 <ucdr_deserialize_endian_uint32_t>
 8010958:	682b      	ldr	r3, [r5, #0]
 801095a:	429e      	cmp	r6, r3
 801095c:	d208      	bcs.n	8010970 <ucdr_deserialize_sequence_float+0x2c>
 801095e:	2201      	movs	r2, #1
 8010960:	75a2      	strb	r2, [r4, #22]
 8010962:	7d21      	ldrb	r1, [r4, #20]
 8010964:	463a      	mov	r2, r7
 8010966:	4620      	mov	r0, r4
 8010968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801096c:	f7fd bee4 	b.w	800e738 <ucdr_deserialize_endian_array_float>
 8010970:	2b00      	cmp	r3, #0
 8010972:	d1f6      	bne.n	8010962 <ucdr_deserialize_sequence_float+0x1e>
 8010974:	2001      	movs	r0, #1
 8010976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801097a:	bf00      	nop

0801097c <ucdr_serialize_sequence_double>:
 801097c:	b570      	push	{r4, r5, r6, lr}
 801097e:	460e      	mov	r6, r1
 8010980:	4615      	mov	r5, r2
 8010982:	7d01      	ldrb	r1, [r0, #20]
 8010984:	4604      	mov	r4, r0
 8010986:	f7fe fb65 	bl	800f054 <ucdr_serialize_endian_uint32_t>
 801098a:	b90d      	cbnz	r5, 8010990 <ucdr_serialize_sequence_double+0x14>
 801098c:	2001      	movs	r0, #1
 801098e:	bd70      	pop	{r4, r5, r6, pc}
 8010990:	7d21      	ldrb	r1, [r4, #20]
 8010992:	462b      	mov	r3, r5
 8010994:	4632      	mov	r2, r6
 8010996:	4620      	mov	r0, r4
 8010998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801099c:	f7fd bf76 	b.w	800e88c <ucdr_serialize_endian_array_double>

080109a0 <ucdr_deserialize_sequence_double>:
 80109a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109a4:	461d      	mov	r5, r3
 80109a6:	4616      	mov	r6, r2
 80109a8:	460f      	mov	r7, r1
 80109aa:	461a      	mov	r2, r3
 80109ac:	7d01      	ldrb	r1, [r0, #20]
 80109ae:	4604      	mov	r4, r0
 80109b0:	f7fe fc6e 	bl	800f290 <ucdr_deserialize_endian_uint32_t>
 80109b4:	682b      	ldr	r3, [r5, #0]
 80109b6:	429e      	cmp	r6, r3
 80109b8:	d208      	bcs.n	80109cc <ucdr_deserialize_sequence_double+0x2c>
 80109ba:	2201      	movs	r2, #1
 80109bc:	75a2      	strb	r2, [r4, #22]
 80109be:	7d21      	ldrb	r1, [r4, #20]
 80109c0:	463a      	mov	r2, r7
 80109c2:	4620      	mov	r0, r4
 80109c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109c8:	f7fe b80a 	b.w	800e9e0 <ucdr_deserialize_endian_array_double>
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d1f6      	bne.n	80109be <ucdr_deserialize_sequence_double+0x1e>
 80109d0:	2001      	movs	r0, #1
 80109d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d6:	bf00      	nop

080109d8 <uxr_buffer_delete_entity>:
 80109d8:	b510      	push	{r4, lr}
 80109da:	2300      	movs	r3, #0
 80109dc:	b08e      	sub	sp, #56	@ 0x38
 80109de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80109e2:	2303      	movs	r3, #3
 80109e4:	9300      	str	r3, [sp, #0]
 80109e6:	2204      	movs	r2, #4
 80109e8:	ab06      	add	r3, sp, #24
 80109ea:	4604      	mov	r4, r0
 80109ec:	f001 fb30 	bl	8012050 <uxr_prepare_stream_to_write_submessage>
 80109f0:	b918      	cbnz	r0, 80109fa <uxr_buffer_delete_entity+0x22>
 80109f2:	4604      	mov	r4, r0
 80109f4:	4620      	mov	r0, r4
 80109f6:	b00e      	add	sp, #56	@ 0x38
 80109f8:	bd10      	pop	{r4, pc}
 80109fa:	9902      	ldr	r1, [sp, #8]
 80109fc:	aa05      	add	r2, sp, #20
 80109fe:	4620      	mov	r0, r4
 8010a00:	f001 fc60 	bl	80122c4 <uxr_init_base_object_request>
 8010a04:	a905      	add	r1, sp, #20
 8010a06:	4604      	mov	r4, r0
 8010a08:	a806      	add	r0, sp, #24
 8010a0a:	f003 fae7 	bl	8013fdc <uxr_serialize_DELETE_Payload>
 8010a0e:	4620      	mov	r0, r4
 8010a10:	b00e      	add	sp, #56	@ 0x38
 8010a12:	bd10      	pop	{r4, pc}

08010a14 <uxr_common_create_entity>:
 8010a14:	b510      	push	{r4, lr}
 8010a16:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010a1a:	b08c      	sub	sp, #48	@ 0x30
 8010a1c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010a20:	f1bc 0f01 	cmp.w	ip, #1
 8010a24:	bf08      	it	eq
 8010a26:	f003 0201 	andeq.w	r2, r3, #1
 8010a2a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010a2e:	bf18      	it	ne
 8010a30:	2200      	movne	r2, #0
 8010a32:	330e      	adds	r3, #14
 8010a34:	441a      	add	r2, r3
 8010a36:	2301      	movs	r3, #1
 8010a38:	e9cd 3100 	strd	r3, r1, [sp]
 8010a3c:	b292      	uxth	r2, r2
 8010a3e:	9903      	ldr	r1, [sp, #12]
 8010a40:	ab04      	add	r3, sp, #16
 8010a42:	4604      	mov	r4, r0
 8010a44:	f001 fb04 	bl	8012050 <uxr_prepare_stream_to_write_submessage>
 8010a48:	b918      	cbnz	r0, 8010a52 <uxr_common_create_entity+0x3e>
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	b00c      	add	sp, #48	@ 0x30
 8010a50:	bd10      	pop	{r4, pc}
 8010a52:	9902      	ldr	r1, [sp, #8]
 8010a54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010a56:	4620      	mov	r0, r4
 8010a58:	f001 fc34 	bl	80122c4 <uxr_init_base_object_request>
 8010a5c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010a5e:	4604      	mov	r4, r0
 8010a60:	a804      	add	r0, sp, #16
 8010a62:	f003 fa05 	bl	8013e70 <uxr_serialize_CREATE_Payload>
 8010a66:	4620      	mov	r0, r4
 8010a68:	b00c      	add	sp, #48	@ 0x30
 8010a6a:	bd10      	pop	{r4, pc}

08010a6c <uxr_buffer_create_participant_bin>:
 8010a6c:	b570      	push	{r4, r5, r6, lr}
 8010a6e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010a72:	ac11      	add	r4, sp, #68	@ 0x44
 8010a74:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010a78:	2303      	movs	r3, #3
 8010a7a:	7223      	strb	r3, [r4, #8]
 8010a7c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010a7e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010a82:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010a86:	2201      	movs	r2, #1
 8010a88:	2100      	movs	r1, #0
 8010a8a:	4605      	mov	r5, r0
 8010a8c:	7122      	strb	r2, [r4, #4]
 8010a8e:	f88d 1014 	strb.w	r1, [sp, #20]
 8010a92:	b1cb      	cbz	r3, 8010ac8 <uxr_buffer_create_participant_bin+0x5c>
 8010a94:	f88d 201c 	strb.w	r2, [sp, #28]
 8010a98:	9308      	str	r3, [sp, #32]
 8010a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a9e:	a915      	add	r1, sp, #84	@ 0x54
 8010aa0:	a809      	add	r0, sp, #36	@ 0x24
 8010aa2:	f7ff fe43 	bl	801072c <ucdr_init_buffer>
 8010aa6:	a905      	add	r1, sp, #20
 8010aa8:	a809      	add	r0, sp, #36	@ 0x24
 8010aaa:	f002 fde9 	bl	8013680 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ab0:	9600      	str	r6, [sp, #0]
 8010ab2:	9401      	str	r4, [sp, #4]
 8010ab4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010ab8:	60e3      	str	r3, [r4, #12]
 8010aba:	4628      	mov	r0, r5
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	f7ff ffa9 	bl	8010a14 <uxr_common_create_entity>
 8010ac2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010ac6:	bd70      	pop	{r4, r5, r6, pc}
 8010ac8:	f88d 301c 	strb.w	r3, [sp, #28]
 8010acc:	e7e5      	b.n	8010a9a <uxr_buffer_create_participant_bin+0x2e>
 8010ace:	bf00      	nop

08010ad0 <uxr_buffer_create_topic_bin>:
 8010ad0:	b570      	push	{r4, r5, r6, lr}
 8010ad2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010ad6:	4605      	mov	r5, r0
 8010ad8:	9105      	str	r1, [sp, #20]
 8010ada:	4618      	mov	r0, r3
 8010adc:	a997      	add	r1, sp, #604	@ 0x25c
 8010ade:	2302      	movs	r3, #2
 8010ae0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010ae4:	9204      	str	r2, [sp, #16]
 8010ae6:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010aea:	f000 fa31 	bl	8010f50 <uxr_object_id_to_raw>
 8010aee:	2303      	movs	r3, #3
 8010af0:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010af4:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010af6:	9306      	str	r3, [sp, #24]
 8010af8:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010afa:	930a      	str	r3, [sp, #40]	@ 0x28
 8010afc:	2301      	movs	r3, #1
 8010afe:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b06:	2300      	movs	r3, #0
 8010b08:	a917      	add	r1, sp, #92	@ 0x5c
 8010b0a:	a80b      	add	r0, sp, #44	@ 0x2c
 8010b0c:	f88d 301c 	strb.w	r3, [sp, #28]
 8010b10:	f7ff fe0c 	bl	801072c <ucdr_init_buffer>
 8010b14:	a906      	add	r1, sp, #24
 8010b16:	a80b      	add	r0, sp, #44	@ 0x2c
 8010b18:	f002 fdd4 	bl	80136c4 <uxr_serialize_OBJK_Topic_Binary>
 8010b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b1e:	9316      	str	r3, [sp, #88]	@ 0x58
 8010b20:	ac13      	add	r4, sp, #76	@ 0x4c
 8010b22:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010b26:	9600      	str	r6, [sp, #0]
 8010b28:	9401      	str	r4, [sp, #4]
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	f7ff ff71 	bl	8010a14 <uxr_common_create_entity>
 8010b32:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010b36:	bd70      	pop	{r4, r5, r6, pc}

08010b38 <uxr_buffer_create_publisher_bin>:
 8010b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b3a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010b3e:	4605      	mov	r5, r0
 8010b40:	9105      	str	r1, [sp, #20]
 8010b42:	4618      	mov	r0, r3
 8010b44:	2603      	movs	r6, #3
 8010b46:	a992      	add	r1, sp, #584	@ 0x248
 8010b48:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010b4c:	9204      	str	r2, [sp, #16]
 8010b4e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010b52:	f000 f9fd 	bl	8010f50 <uxr_object_id_to_raw>
 8010b56:	2300      	movs	r3, #0
 8010b58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b5c:	a912      	add	r1, sp, #72	@ 0x48
 8010b5e:	a806      	add	r0, sp, #24
 8010b60:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010b64:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010b68:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010b6c:	f7ff fdde 	bl	801072c <ucdr_init_buffer>
 8010b70:	a993      	add	r1, sp, #588	@ 0x24c
 8010b72:	a806      	add	r0, sp, #24
 8010b74:	f002 fe5c 	bl	8013830 <uxr_serialize_OBJK_Publisher_Binary>
 8010b78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b7a:	9311      	str	r3, [sp, #68]	@ 0x44
 8010b7c:	ac0e      	add	r4, sp, #56	@ 0x38
 8010b7e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010b82:	9700      	str	r7, [sp, #0]
 8010b84:	9401      	str	r4, [sp, #4]
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	4628      	mov	r0, r5
 8010b8a:	f7ff ff43 	bl	8010a14 <uxr_common_create_entity>
 8010b8e:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b94 <uxr_buffer_create_subscriber_bin>:
 8010b94:	b570      	push	{r4, r5, r6, lr}
 8010b96:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 8010b9a:	4605      	mov	r5, r0
 8010b9c:	9105      	str	r1, [sp, #20]
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	a992      	add	r1, sp, #584	@ 0x248
 8010ba2:	2304      	movs	r3, #4
 8010ba4:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8010ba8:	9204      	str	r2, [sp, #16]
 8010baa:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8010bae:	f000 f9cf 	bl	8010f50 <uxr_object_id_to_raw>
 8010bb2:	2203      	movs	r2, #3
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	f88d 2040 	strb.w	r2, [sp, #64]	@ 0x40
 8010bba:	a912      	add	r1, sp, #72	@ 0x48
 8010bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010bc0:	a806      	add	r0, sp, #24
 8010bc2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010bc6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010bca:	f7ff fdaf 	bl	801072c <ucdr_init_buffer>
 8010bce:	a993      	add	r1, sp, #588	@ 0x24c
 8010bd0:	a806      	add	r0, sp, #24
 8010bd2:	f002 fedf 	bl	8013994 <uxr_serialize_OBJK_Subscriber_Binary>
 8010bd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010bda:	ac0e      	add	r4, sp, #56	@ 0x38
 8010bdc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010be0:	9600      	str	r6, [sp, #0]
 8010be2:	9401      	str	r4, [sp, #4]
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	4628      	mov	r0, r5
 8010be8:	f7ff ff14 	bl	8010a14 <uxr_common_create_entity>
 8010bec:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 8010bf0:	bd70      	pop	{r4, r5, r6, pc}
 8010bf2:	bf00      	nop

08010bf4 <uxr_buffer_create_datawriter_bin>:
 8010bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bf6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8010bfa:	ac1d      	add	r4, sp, #116	@ 0x74
 8010bfc:	9105      	str	r1, [sp, #20]
 8010bfe:	4605      	mov	r5, r0
 8010c00:	a9a1      	add	r1, sp, #644	@ 0x284
 8010c02:	4618      	mov	r0, r3
 8010c04:	2305      	movs	r3, #5
 8010c06:	f8bd 72a8 	ldrh.w	r7, [sp, #680]	@ 0x2a8
 8010c0a:	9204      	str	r2, [sp, #16]
 8010c0c:	7123      	strb	r3, [r4, #4]
 8010c0e:	f89d 62ac 	ldrb.w	r6, [sp, #684]	@ 0x2ac
 8010c12:	f000 f99d 	bl	8010f50 <uxr_object_id_to_raw>
 8010c16:	2303      	movs	r3, #3
 8010c18:	a90e      	add	r1, sp, #56	@ 0x38
 8010c1a:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010c1c:	7223      	strb	r3, [r4, #8]
 8010c1e:	f000 f997 	bl	8010f50 <uxr_object_id_to_raw>
 8010c22:	f89d 32a5 	ldrb.w	r3, [sp, #677]	@ 0x2a5
 8010c26:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	3f00      	subs	r7, #0
 8010c2e:	fab3 f383 	clz	r3, r3
 8010c32:	f89d 12a6 	ldrb.w	r1, [sp, #678]	@ 0x2a6
 8010c36:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8010c3a:	bf18      	it	ne
 8010c3c:	2701      	movne	r7, #1
 8010c3e:	095b      	lsrs	r3, r3, #5
 8010c40:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8010c44:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8010c48:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8010c4c:	2201      	movs	r2, #1
 8010c4e:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8010c52:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010c56:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8010c5a:	b919      	cbnz	r1, 8010c64 <uxr_buffer_create_datawriter_bin+0x70>
 8010c5c:	f043 0302 	orr.w	r3, r3, #2
 8010c60:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010c64:	f89d 22a4 	ldrb.w	r2, [sp, #676]	@ 0x2a4
 8010c68:	2a01      	cmp	r2, #1
 8010c6a:	d022      	beq.n	8010cb2 <uxr_buffer_create_datawriter_bin+0xbe>
 8010c6c:	2a03      	cmp	r2, #3
 8010c6e:	d01b      	beq.n	8010ca8 <uxr_buffer_create_datawriter_bin+0xb4>
 8010c70:	b91a      	cbnz	r2, 8010c7a <uxr_buffer_create_datawriter_bin+0x86>
 8010c72:	f043 0308 	orr.w	r3, r3, #8
 8010c76:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c7e:	a921      	add	r1, sp, #132	@ 0x84
 8010c80:	a806      	add	r0, sp, #24
 8010c82:	f7ff fd53 	bl	801072c <ucdr_init_buffer>
 8010c86:	a90e      	add	r1, sp, #56	@ 0x38
 8010c88:	a806      	add	r0, sp, #24
 8010c8a:	f002 ff25 	bl	8013ad8 <uxr_serialize_OBJK_DataWriter_Binary>
 8010c8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c90:	9600      	str	r6, [sp, #0]
 8010c92:	9401      	str	r4, [sp, #4]
 8010c94:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010c98:	60e3      	str	r3, [r4, #12]
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	f7ff feb9 	bl	8010a14 <uxr_common_create_entity>
 8010ca2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8010ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ca8:	f043 0320 	orr.w	r3, r3, #32
 8010cac:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010cb0:	e7e3      	b.n	8010c7a <uxr_buffer_create_datawriter_bin+0x86>
 8010cb2:	f043 0310 	orr.w	r3, r3, #16
 8010cb6:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010cba:	e7de      	b.n	8010c7a <uxr_buffer_create_datawriter_bin+0x86>

08010cbc <uxr_buffer_create_datareader_bin>:
 8010cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cbe:	f5ad 7d25 	sub.w	sp, sp, #660	@ 0x294
 8010cc2:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010cc4:	9105      	str	r1, [sp, #20]
 8010cc6:	4605      	mov	r5, r0
 8010cc8:	a9a3      	add	r1, sp, #652	@ 0x28c
 8010cca:	4618      	mov	r0, r3
 8010ccc:	2306      	movs	r3, #6
 8010cce:	f8bd 72b0 	ldrh.w	r7, [sp, #688]	@ 0x2b0
 8010cd2:	9204      	str	r2, [sp, #16]
 8010cd4:	7123      	strb	r3, [r4, #4]
 8010cd6:	f89d 62b4 	ldrb.w	r6, [sp, #692]	@ 0x2b4
 8010cda:	f000 f939 	bl	8010f50 <uxr_object_id_to_raw>
 8010cde:	2303      	movs	r3, #3
 8010ce0:	a90e      	add	r1, sp, #56	@ 0x38
 8010ce2:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8010ce4:	7223      	strb	r3, [r4, #8]
 8010ce6:	f000 f933 	bl	8010f50 <uxr_object_id_to_raw>
 8010cea:	f89d 32ad 	ldrb.w	r3, [sp, #685]	@ 0x2ad
 8010cee:	f8ad 7044 	strh.w	r7, [sp, #68]	@ 0x44
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	3f00      	subs	r7, #0
 8010cf6:	fab3 f383 	clz	r3, r3
 8010cfa:	f89d 12ae 	ldrb.w	r1, [sp, #686]	@ 0x2ae
 8010cfe:	f88d 2070 	strb.w	r2, [sp, #112]	@ 0x70
 8010d02:	bf18      	it	ne
 8010d04:	2701      	movne	r7, #1
 8010d06:	095b      	lsrs	r3, r3, #5
 8010d08:	f88d 2064 	strb.w	r2, [sp, #100]	@ 0x64
 8010d0c:	f88d 2046 	strb.w	r2, [sp, #70]	@ 0x46
 8010d10:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
 8010d14:	f88d 2054 	strb.w	r2, [sp, #84]	@ 0x54
 8010d18:	2201      	movs	r2, #1
 8010d1a:	f88d 7042 	strb.w	r7, [sp, #66]	@ 0x42
 8010d1e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010d22:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8010d26:	b919      	cbnz	r1, 8010d30 <uxr_buffer_create_datareader_bin+0x74>
 8010d28:	f043 0302 	orr.w	r3, r3, #2
 8010d2c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010d30:	f89d 22ac 	ldrb.w	r2, [sp, #684]	@ 0x2ac
 8010d34:	2a01      	cmp	r2, #1
 8010d36:	d022      	beq.n	8010d7e <uxr_buffer_create_datareader_bin+0xc2>
 8010d38:	2a03      	cmp	r2, #3
 8010d3a:	d01b      	beq.n	8010d74 <uxr_buffer_create_datareader_bin+0xb8>
 8010d3c:	b91a      	cbnz	r2, 8010d46 <uxr_buffer_create_datareader_bin+0x8a>
 8010d3e:	f043 0308 	orr.w	r3, r3, #8
 8010d42:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010d46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d4a:	a923      	add	r1, sp, #140	@ 0x8c
 8010d4c:	a806      	add	r0, sp, #24
 8010d4e:	f7ff fced 	bl	801072c <ucdr_init_buffer>
 8010d52:	a90e      	add	r1, sp, #56	@ 0x38
 8010d54:	a806      	add	r0, sp, #24
 8010d56:	f002 fe83 	bl	8013a60 <uxr_serialize_OBJK_DataReader_Binary>
 8010d5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d5c:	9600      	str	r6, [sp, #0]
 8010d5e:	9401      	str	r4, [sp, #4]
 8010d60:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010d64:	60e3      	str	r3, [r4, #12]
 8010d66:	4628      	mov	r0, r5
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	f7ff fe53 	bl	8010a14 <uxr_common_create_entity>
 8010d6e:	f50d 7d25 	add.w	sp, sp, #660	@ 0x294
 8010d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d74:	f043 0320 	orr.w	r3, r3, #32
 8010d78:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010d7c:	e7e3      	b.n	8010d46 <uxr_buffer_create_datareader_bin+0x8a>
 8010d7e:	f043 0310 	orr.w	r3, r3, #16
 8010d82:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010d86:	e7de      	b.n	8010d46 <uxr_buffer_create_datareader_bin+0x8a>

08010d88 <get_custom_error>:
 8010d88:	4b01      	ldr	r3, [pc, #4]	@ (8010d90 <get_custom_error+0x8>)
 8010d8a:	7818      	ldrb	r0, [r3, #0]
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	200123e0 	.word	0x200123e0

08010d94 <recv_custom_msg>:
 8010d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d98:	b089      	sub	sp, #36	@ 0x24
 8010d9a:	4693      	mov	fp, r2
 8010d9c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010da0:	9104      	str	r1, [sp, #16]
 8010da2:	2100      	movs	r1, #0
 8010da4:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8010da8:	9305      	str	r3, [sp, #20]
 8010daa:	4604      	mov	r4, r0
 8010dac:	f88d 101e 	strb.w	r1, [sp, #30]
 8010db0:	b332      	cbz	r2, 8010e00 <recv_custom_msg+0x6c>
 8010db2:	f200 2a02 	addw	sl, r0, #514	@ 0x202
 8010db6:	f10d 091f 	add.w	r9, sp, #31
 8010dba:	f10d 0814 	add.w	r8, sp, #20
 8010dbe:	f10d 071e 	add.w	r7, sp, #30
 8010dc2:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8010dc6:	e004      	b.n	8010dd2 <recv_custom_msg+0x3e>
 8010dc8:	9b05      	ldr	r3, [sp, #20]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	dd10      	ble.n	8010df0 <recv_custom_msg+0x5c>
 8010dce:	f8d4 5274 	ldr.w	r5, [r4, #628]	@ 0x274
 8010dd2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010dd6:	e9cd 6700 	strd	r6, r7, [sp]
 8010dda:	4623      	mov	r3, r4
 8010ddc:	4622      	mov	r2, r4
 8010dde:	4629      	mov	r1, r5
 8010de0:	4650      	mov	r0, sl
 8010de2:	f001 fc81 	bl	80126e8 <uxr_read_framed_msg>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	d0ee      	beq.n	8010dc8 <recv_custom_msg+0x34>
 8010dea:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010dee:	b1a3      	cbz	r3, 8010e1a <recv_custom_msg+0x86>
 8010df0:	4b0e      	ldr	r3, [pc, #56]	@ (8010e2c <recv_custom_msg+0x98>)
 8010df2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010df6:	701a      	strb	r2, [r3, #0]
 8010df8:	2000      	movs	r0, #0
 8010dfa:	b009      	add	sp, #36	@ 0x24
 8010dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e00:	f10d 021f 	add.w	r2, sp, #31
 8010e04:	9200      	str	r2, [sp, #0]
 8010e06:	4601      	mov	r1, r0
 8010e08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e0c:	47a8      	blx	r5
 8010e0e:	2800      	cmp	r0, #0
 8010e10:	d0ee      	beq.n	8010df0 <recv_custom_msg+0x5c>
 8010e12:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d1ea      	bne.n	8010df0 <recv_custom_msg+0x5c>
 8010e1a:	9b04      	ldr	r3, [sp, #16]
 8010e1c:	f8cb 0000 	str.w	r0, [fp]
 8010e20:	2001      	movs	r0, #1
 8010e22:	601c      	str	r4, [r3, #0]
 8010e24:	b009      	add	sp, #36	@ 0x24
 8010e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e2a:	bf00      	nop
 8010e2c:	200123e0 	.word	0x200123e0

08010e30 <send_custom_msg>:
 8010e30:	b570      	push	{r4, r5, r6, lr}
 8010e32:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8010e36:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010e3a:	b086      	sub	sp, #24
 8010e3c:	4616      	mov	r6, r2
 8010e3e:	b965      	cbnz	r5, 8010e5a <send_custom_msg+0x2a>
 8010e40:	f10d 0317 	add.w	r3, sp, #23
 8010e44:	47a0      	blx	r4
 8010e46:	b108      	cbz	r0, 8010e4c <send_custom_msg+0x1c>
 8010e48:	42b0      	cmp	r0, r6
 8010e4a:	d014      	beq.n	8010e76 <send_custom_msg+0x46>
 8010e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8010e7c <send_custom_msg+0x4c>)
 8010e4e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010e52:	701a      	strb	r2, [r3, #0]
 8010e54:	2000      	movs	r0, #0
 8010e56:	b006      	add	sp, #24
 8010e58:	bd70      	pop	{r4, r5, r6, pc}
 8010e5a:	f10d 0217 	add.w	r2, sp, #23
 8010e5e:	9202      	str	r2, [sp, #8]
 8010e60:	2200      	movs	r2, #0
 8010e62:	e9cd 6200 	strd	r6, r2, [sp]
 8010e66:	460b      	mov	r3, r1
 8010e68:	4602      	mov	r2, r0
 8010e6a:	4621      	mov	r1, r4
 8010e6c:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010e70:	f001 fa5c 	bl	801232c <uxr_write_framed_msg>
 8010e74:	e7e7      	b.n	8010e46 <send_custom_msg+0x16>
 8010e76:	2001      	movs	r0, #1
 8010e78:	b006      	add	sp, #24
 8010e7a:	bd70      	pop	{r4, r5, r6, pc}
 8010e7c:	200123e0 	.word	0x200123e0

08010e80 <uxr_set_custom_transport_callbacks>:
 8010e80:	b410      	push	{r4}
 8010e82:	9c01      	ldr	r4, [sp, #4]
 8010e84:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010e88:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010e8c:	9b02      	ldr	r3, [sp, #8]
 8010e8e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8010e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e96:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010e9a:	4770      	bx	lr

08010e9c <uxr_init_custom_transport>:
 8010e9c:	b538      	push	{r3, r4, r5, lr}
 8010e9e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8010ea2:	b303      	cbz	r3, 8010ee6 <uxr_init_custom_transport+0x4a>
 8010ea4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010ea8:	4604      	mov	r4, r0
 8010eaa:	b1e2      	cbz	r2, 8010ee6 <uxr_init_custom_transport+0x4a>
 8010eac:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010eb0:	b1ca      	cbz	r2, 8010ee6 <uxr_init_custom_transport+0x4a>
 8010eb2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8010eb6:	b1b2      	cbz	r2, 8010ee6 <uxr_init_custom_transport+0x4a>
 8010eb8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010ebc:	4798      	blx	r3
 8010ebe:	4605      	mov	r5, r0
 8010ec0:	b188      	cbz	r0, 8010ee6 <uxr_init_custom_transport+0x4a>
 8010ec2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8010ec6:	b98b      	cbnz	r3, 8010eec <uxr_init_custom_transport+0x50>
 8010ec8:	490b      	ldr	r1, [pc, #44]	@ (8010ef8 <uxr_init_custom_transport+0x5c>)
 8010eca:	4b0c      	ldr	r3, [pc, #48]	@ (8010efc <uxr_init_custom_transport+0x60>)
 8010ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8010f00 <uxr_init_custom_transport+0x64>)
 8010ece:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8010ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010ed6:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010eda:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010ede:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	bd38      	pop	{r3, r4, r5, pc}
 8010ee6:	2500      	movs	r5, #0
 8010ee8:	4628      	mov	r0, r5
 8010eea:	bd38      	pop	{r3, r4, r5, pc}
 8010eec:	2100      	movs	r1, #0
 8010eee:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8010ef2:	f001 fa15 	bl	8012320 <uxr_init_framing_io>
 8010ef6:	e7e7      	b.n	8010ec8 <uxr_init_custom_transport+0x2c>
 8010ef8:	08010e31 	.word	0x08010e31
 8010efc:	08010d95 	.word	0x08010d95
 8010f00:	08010d89 	.word	0x08010d89

08010f04 <uxr_close_custom_transport>:
 8010f04:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010f08:	4718      	bx	r3
 8010f0a:	bf00      	nop

08010f0c <uxr_object_id>:
 8010f0c:	b082      	sub	sp, #8
 8010f0e:	2300      	movs	r3, #0
 8010f10:	f88d 1006 	strb.w	r1, [sp, #6]
 8010f14:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010f18:	f360 030f 	bfi	r3, r0, #0, #16
 8010f1c:	f362 431f 	bfi	r3, r2, #16, #16
 8010f20:	4618      	mov	r0, r3
 8010f22:	b002      	add	sp, #8
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop

08010f28 <uxr_object_id_from_raw>:
 8010f28:	7843      	ldrb	r3, [r0, #1]
 8010f2a:	7801      	ldrb	r1, [r0, #0]
 8010f2c:	b082      	sub	sp, #8
 8010f2e:	f003 020f 	and.w	r2, r3, #15
 8010f32:	f88d 2006 	strb.w	r2, [sp, #6]
 8010f36:	091b      	lsrs	r3, r3, #4
 8010f38:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010f3c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010f40:	2000      	movs	r0, #0
 8010f42:	f363 000f 	bfi	r0, r3, #0, #16
 8010f46:	f362 401f 	bfi	r0, r2, #16, #16
 8010f4a:	b002      	add	sp, #8
 8010f4c:	4770      	bx	lr
 8010f4e:	bf00      	nop

08010f50 <uxr_object_id_to_raw>:
 8010f50:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010f54:	b082      	sub	sp, #8
 8010f56:	f3c0 120b 	ubfx	r2, r0, #4, #12
 8010f5a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8010f5e:	700a      	strb	r2, [r1, #0]
 8010f60:	704b      	strb	r3, [r1, #1]
 8010f62:	b002      	add	sp, #8
 8010f64:	4770      	bx	lr
 8010f66:	bf00      	nop

08010f68 <uxr_ping_agent_session>:
 8010f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f6c:	4616      	mov	r6, r2
 8010f6e:	b091      	sub	sp, #68	@ 0x44
 8010f70:	2210      	movs	r2, #16
 8010f72:	4605      	mov	r5, r0
 8010f74:	460f      	mov	r7, r1
 8010f76:	a808      	add	r0, sp, #32
 8010f78:	eb0d 0102 	add.w	r1, sp, r2
 8010f7c:	f7ff fbd6 	bl	801072c <ucdr_init_buffer>
 8010f80:	4b20      	ldr	r3, [pc, #128]	@ (8011004 <uxr_ping_agent_session+0x9c>)
 8010f82:	2400      	movs	r4, #0
 8010f84:	881b      	ldrh	r3, [r3, #0]
 8010f86:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010f8a:	9400      	str	r4, [sp, #0]
 8010f8c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8010f90:	f04f 0802 	mov.w	r8, #2
 8010f94:	7829      	ldrb	r1, [r5, #0]
 8010f96:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010f9a:	4622      	mov	r2, r4
 8010f9c:	4623      	mov	r3, r4
 8010f9e:	a808      	add	r0, sp, #32
 8010fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fa4:	f002 f93c 	bl	8013220 <uxr_serialize_message_header>
 8010fa8:	4641      	mov	r1, r8
 8010faa:	4623      	mov	r3, r4
 8010fac:	2208      	movs	r2, #8
 8010fae:	a808      	add	r0, sp, #32
 8010fb0:	f001 ff38 	bl	8012e24 <uxr_buffer_submessage_header>
 8010fb4:	a902      	add	r1, sp, #8
 8010fb6:	4680      	mov	r8, r0
 8010fb8:	a808      	add	r0, sp, #32
 8010fba:	f002 ffe7 	bl	8013f8c <uxr_serialize_GET_INFO_Payload>
 8010fbe:	f1b8 0f00 	cmp.w	r8, #0
 8010fc2:	d000      	beq.n	8010fc6 <uxr_ping_agent_session+0x5e>
 8010fc4:	b918      	cbnz	r0, 8010fce <uxr_ping_agent_session+0x66>
 8010fc6:	2000      	movs	r0, #0
 8010fc8:	b011      	add	sp, #68	@ 0x44
 8010fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fce:	a808      	add	r0, sp, #32
 8010fd0:	f7ff fbd8 	bl	8010784 <ucdr_buffer_length>
 8010fd4:	4680      	mov	r8, r0
 8010fd6:	2e00      	cmp	r6, #0
 8010fd8:	d0f5      	beq.n	8010fc6 <uxr_ping_agent_session+0x5e>
 8010fda:	46a1      	mov	r9, r4
 8010fdc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010fde:	4642      	mov	r2, r8
 8010fe0:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010fe4:	a904      	add	r1, sp, #16
 8010fe6:	47a0      	blx	r4
 8010fe8:	4639      	mov	r1, r7
 8010fea:	4604      	mov	r4, r0
 8010fec:	4628      	mov	r0, r5
 8010fee:	f000 fe23 	bl	8011c38 <uxr_run_session_until_pong>
 8010ff2:	4020      	ands	r0, r4
 8010ff4:	f010 00ff 	ands.w	r0, r0, #255	@ 0xff
 8010ff8:	f109 0901 	add.w	r9, r9, #1
 8010ffc:	d1e4      	bne.n	8010fc8 <uxr_ping_agent_session+0x60>
 8010ffe:	454e      	cmp	r6, r9
 8011000:	d1ec      	bne.n	8010fdc <uxr_ping_agent_session+0x74>
 8011002:	e7e0      	b.n	8010fc6 <uxr_ping_agent_session+0x5e>
 8011004:	0801d048 	.word	0x0801d048

08011008 <uxr_ping_agent_attempts>:
 8011008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801100c:	b0d3      	sub	sp, #332	@ 0x14c
 801100e:	4606      	mov	r6, r0
 8011010:	4688      	mov	r8, r1
 8011012:	a810      	add	r0, sp, #64	@ 0x40
 8011014:	a90c      	add	r1, sp, #48	@ 0x30
 8011016:	4692      	mov	sl, r2
 8011018:	2210      	movs	r2, #16
 801101a:	f7ff fb87 	bl	801072c <ucdr_init_buffer>
 801101e:	4b56      	ldr	r3, [pc, #344]	@ (8011178 <uxr_ping_agent_attempts+0x170>)
 8011020:	881b      	ldrh	r3, [r3, #0]
 8011022:	f8ad 3082 	strh.w	r3, [sp, #130]	@ 0x82
 8011026:	2400      	movs	r4, #0
 8011028:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 801102c:	2502      	movs	r5, #2
 801102e:	f8ad 3080 	strh.w	r3, [sp, #128]	@ 0x80
 8011032:	4622      	mov	r2, r4
 8011034:	4623      	mov	r3, r4
 8011036:	2180      	movs	r1, #128	@ 0x80
 8011038:	a810      	add	r0, sp, #64	@ 0x40
 801103a:	9400      	str	r4, [sp, #0]
 801103c:	9521      	str	r5, [sp, #132]	@ 0x84
 801103e:	f002 f8ef 	bl	8013220 <uxr_serialize_message_header>
 8011042:	4629      	mov	r1, r5
 8011044:	4623      	mov	r3, r4
 8011046:	2208      	movs	r2, #8
 8011048:	a810      	add	r0, sp, #64	@ 0x40
 801104a:	f001 feeb 	bl	8012e24 <uxr_buffer_submessage_header>
 801104e:	a920      	add	r1, sp, #128	@ 0x80
 8011050:	4605      	mov	r5, r0
 8011052:	a810      	add	r0, sp, #64	@ 0x40
 8011054:	f002 ff9a 	bl	8013f8c <uxr_serialize_GET_INFO_Payload>
 8011058:	4005      	ands	r5, r0
 801105a:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 801105e:	d104      	bne.n	801106a <uxr_ping_agent_attempts+0x62>
 8011060:	2500      	movs	r5, #0
 8011062:	4628      	mov	r0, r5
 8011064:	b053      	add	sp, #332	@ 0x14c
 8011066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106a:	a810      	add	r0, sp, #64	@ 0x40
 801106c:	f7ff fb8a 	bl	8010784 <ucdr_buffer_length>
 8011070:	9004      	str	r0, [sp, #16]
 8011072:	f1ba 0f00 	cmp.w	sl, #0
 8011076:	d0f3      	beq.n	8011060 <uxr_ping_agent_attempts+0x58>
 8011078:	9505      	str	r5, [sp, #20]
 801107a:	46a1      	mov	r9, r4
 801107c:	4627      	mov	r7, r4
 801107e:	4655      	mov	r5, sl
 8011080:	e9d6 0300 	ldrd	r0, r3, [r6]
 8011084:	9a04      	ldr	r2, [sp, #16]
 8011086:	a90c      	add	r1, sp, #48	@ 0x30
 8011088:	4798      	blx	r3
 801108a:	f001 ff11 	bl	8012eb0 <uxr_millis>
 801108e:	46c2      	mov	sl, r8
 8011090:	4604      	mov	r4, r0
 8011092:	9503      	str	r5, [sp, #12]
 8011094:	6830      	ldr	r0, [r6, #0]
 8011096:	68b5      	ldr	r5, [r6, #8]
 8011098:	9708      	str	r7, [sp, #32]
 801109a:	4643      	mov	r3, r8
 801109c:	aa09      	add	r2, sp, #36	@ 0x24
 801109e:	a908      	add	r1, sp, #32
 80110a0:	47a8      	blx	r5
 80110a2:	4683      	mov	fp, r0
 80110a4:	b998      	cbnz	r0, 80110ce <uxr_ping_agent_attempts+0xc6>
 80110a6:	f001 ff03 	bl	8012eb0 <uxr_millis>
 80110aa:	1b00      	subs	r0, r0, r4
 80110ac:	ebaa 0a00 	sub.w	sl, sl, r0
 80110b0:	f001 fefe 	bl	8012eb0 <uxr_millis>
 80110b4:	f1ba 0f00 	cmp.w	sl, #0
 80110b8:	4604      	mov	r4, r0
 80110ba:	dceb      	bgt.n	8011094 <uxr_ping_agent_attempts+0x8c>
 80110bc:	9d03      	ldr	r5, [sp, #12]
 80110be:	f109 0901 	add.w	r9, r9, #1
 80110c2:	f1bb 0f00 	cmp.w	fp, #0
 80110c6:	d12a      	bne.n	801111e <uxr_ping_agent_attempts+0x116>
 80110c8:	45a9      	cmp	r9, r5
 80110ca:	d1d9      	bne.n	8011080 <uxr_ping_agent_attempts+0x78>
 80110cc:	e7c8      	b.n	8011060 <uxr_ping_agent_attempts+0x58>
 80110ce:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80110d2:	a818      	add	r0, sp, #96	@ 0x60
 80110d4:	f7ff fb2a 	bl	801072c <ucdr_init_buffer>
 80110d8:	ab07      	add	r3, sp, #28
 80110da:	f10d 0219 	add.w	r2, sp, #25
 80110de:	a918      	add	r1, sp, #96	@ 0x60
 80110e0:	a80a      	add	r0, sp, #40	@ 0x28
 80110e2:	e9cd 770a 	strd	r7, r7, [sp, #40]	@ 0x28
 80110e6:	f001 f8a7 	bl	8012238 <uxr_read_session_header>
 80110ea:	22c8      	movs	r2, #200	@ 0xc8
 80110ec:	2100      	movs	r1, #0
 80110ee:	a820      	add	r0, sp, #128	@ 0x80
 80110f0:	f00a ffda 	bl	801c0a8 <memset>
 80110f4:	a818      	add	r0, sp, #96	@ 0x60
 80110f6:	f7ff fb49 	bl	801078c <ucdr_buffer_remaining>
 80110fa:	2804      	cmp	r0, #4
 80110fc:	d814      	bhi.n	8011128 <uxr_ping_agent_attempts+0x120>
 80110fe:	f89d b135 	ldrb.w	fp, [sp, #309]	@ 0x135
 8011102:	f001 fed5 	bl	8012eb0 <uxr_millis>
 8011106:	1b00      	subs	r0, r0, r4
 8011108:	ebaa 0a00 	sub.w	sl, sl, r0
 801110c:	f001 fed0 	bl	8012eb0 <uxr_millis>
 8011110:	f1ba 0f00 	cmp.w	sl, #0
 8011114:	4604      	mov	r4, r0
 8011116:	dd28      	ble.n	801116a <uxr_ping_agent_attempts+0x162>
 8011118:	f1bb 0f00 	cmp.w	fp, #0
 801111c:	d0ba      	beq.n	8011094 <uxr_ping_agent_attempts+0x8c>
 801111e:	9d05      	ldr	r5, [sp, #20]
 8011120:	4628      	mov	r0, r5
 8011122:	b053      	add	sp, #332	@ 0x14c
 8011124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011128:	f10d 031e 	add.w	r3, sp, #30
 801112c:	f10d 021b 	add.w	r2, sp, #27
 8011130:	f10d 011a 	add.w	r1, sp, #26
 8011134:	a818      	add	r0, sp, #96	@ 0x60
 8011136:	f88d 701a 	strb.w	r7, [sp, #26]
 801113a:	f88d 701b 	strb.w	r7, [sp, #27]
 801113e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8011142:	f002 f8bd 	bl	80132c0 <uxr_deserialize_submessage_header>
 8011146:	a818      	add	r0, sp, #96	@ 0x60
 8011148:	f7ff fb20 	bl	801078c <ucdr_buffer_remaining>
 801114c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011150:	4298      	cmp	r0, r3
 8011152:	d3d4      	bcc.n	80110fe <uxr_ping_agent_attempts+0xf6>
 8011154:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8011158:	2b06      	cmp	r3, #6
 801115a:	d1d0      	bne.n	80110fe <uxr_ping_agent_attempts+0xf6>
 801115c:	a918      	add	r1, sp, #96	@ 0x60
 801115e:	a820      	add	r0, sp, #128	@ 0x80
 8011160:	f88d 7135 	strb.w	r7, [sp, #309]	@ 0x135
 8011164:	f000 f974 	bl	8011450 <read_submessage_info>
 8011168:	e7c9      	b.n	80110fe <uxr_ping_agent_attempts+0xf6>
 801116a:	f1bb 0b00 	subs.w	fp, fp, #0
 801116e:	9d03      	ldr	r5, [sp, #12]
 8011170:	bf18      	it	ne
 8011172:	f04f 0b01 	movne.w	fp, #1
 8011176:	e7a2      	b.n	80110be <uxr_ping_agent_attempts+0xb6>
 8011178:	0801d048 	.word	0x0801d048

0801117c <on_get_fragmentation_info>:
 801117c:	b500      	push	{lr}
 801117e:	b08b      	sub	sp, #44	@ 0x2c
 8011180:	4601      	mov	r1, r0
 8011182:	2204      	movs	r2, #4
 8011184:	a802      	add	r0, sp, #8
 8011186:	f7ff fad1 	bl	801072c <ucdr_init_buffer>
 801118a:	f10d 0305 	add.w	r3, sp, #5
 801118e:	f10d 0206 	add.w	r2, sp, #6
 8011192:	a901      	add	r1, sp, #4
 8011194:	a802      	add	r0, sp, #8
 8011196:	f001 fe5f 	bl	8012e58 <uxr_read_submessage_header>
 801119a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801119e:	2b0d      	cmp	r3, #13
 80111a0:	d003      	beq.n	80111aa <on_get_fragmentation_info+0x2e>
 80111a2:	2000      	movs	r0, #0
 80111a4:	b00b      	add	sp, #44	@ 0x2c
 80111a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80111aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80111ae:	f013 0f02 	tst.w	r3, #2
 80111b2:	bf0c      	ite	eq
 80111b4:	2001      	moveq	r0, #1
 80111b6:	2002      	movne	r0, #2
 80111b8:	b00b      	add	sp, #44	@ 0x2c
 80111ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80111be:	bf00      	nop

080111c0 <read_submessage_get_info>:
 80111c0:	b570      	push	{r4, r5, r6, lr}
 80111c2:	2500      	movs	r5, #0
 80111c4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 80111c8:	4604      	mov	r4, r0
 80111ca:	f44f 7224 	mov.w	r2, #656	@ 0x290
 80111ce:	460e      	mov	r6, r1
 80111d0:	a810      	add	r0, sp, #64	@ 0x40
 80111d2:	4629      	mov	r1, r5
 80111d4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80111d8:	f00a ff66 	bl	801c0a8 <memset>
 80111dc:	a903      	add	r1, sp, #12
 80111de:	4630      	mov	r0, r6
 80111e0:	f002 fee8 	bl	8013fb4 <uxr_deserialize_GET_INFO_Payload>
 80111e4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80111e8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80111ec:	4620      	mov	r0, r4
 80111ee:	f001 f861 	bl	80122b4 <uxr_session_header_offset>
 80111f2:	462b      	mov	r3, r5
 80111f4:	9000      	str	r0, [sp, #0]
 80111f6:	220c      	movs	r2, #12
 80111f8:	a905      	add	r1, sp, #20
 80111fa:	a808      	add	r0, sp, #32
 80111fc:	f7ff fa84 	bl	8010708 <ucdr_init_buffer_origin_offset>
 8011200:	a910      	add	r1, sp, #64	@ 0x40
 8011202:	a808      	add	r0, sp, #32
 8011204:	f002 ff48 	bl	8014098 <uxr_serialize_INFO_Payload>
 8011208:	9b08      	ldr	r3, [sp, #32]
 801120a:	462a      	mov	r2, r5
 801120c:	4629      	mov	r1, r5
 801120e:	4620      	mov	r0, r4
 8011210:	f000 fffc 	bl	801220c <uxr_stamp_session_header>
 8011214:	a808      	add	r0, sp, #32
 8011216:	f7ff fab5 	bl	8010784 <ucdr_buffer_length>
 801121a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801121c:	4602      	mov	r2, r0
 801121e:	a905      	add	r1, sp, #20
 8011220:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011224:	47a0      	blx	r4
 8011226:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801122a:	bd70      	pop	{r4, r5, r6, pc}

0801122c <write_submessage_acknack.isra.0>:
 801122c:	b570      	push	{r4, r5, r6, lr}
 801122e:	b092      	sub	sp, #72	@ 0x48
 8011230:	4605      	mov	r5, r0
 8011232:	460e      	mov	r6, r1
 8011234:	4614      	mov	r4, r2
 8011236:	f001 f83d 	bl	80122b4 <uxr_session_header_offset>
 801123a:	a905      	add	r1, sp, #20
 801123c:	9000      	str	r0, [sp, #0]
 801123e:	2300      	movs	r3, #0
 8011240:	a80a      	add	r0, sp, #40	@ 0x28
 8011242:	2211      	movs	r2, #17
 8011244:	f7ff fa60 	bl	8010708 <ucdr_init_buffer_origin_offset>
 8011248:	2318      	movs	r3, #24
 801124a:	fb03 5404 	mla	r4, r3, r4, r5
 801124e:	2205      	movs	r2, #5
 8011250:	2300      	movs	r3, #0
 8011252:	3450      	adds	r4, #80	@ 0x50
 8011254:	210a      	movs	r1, #10
 8011256:	a80a      	add	r0, sp, #40	@ 0x28
 8011258:	f001 fde4 	bl	8012e24 <uxr_buffer_submessage_header>
 801125c:	a903      	add	r1, sp, #12
 801125e:	4620      	mov	r0, r4
 8011260:	f008 fe96 	bl	8019f90 <uxr_compute_acknack>
 8011264:	ba40      	rev16	r0, r0
 8011266:	f8ad 000e 	strh.w	r0, [sp, #14]
 801126a:	a903      	add	r1, sp, #12
 801126c:	a80a      	add	r0, sp, #40	@ 0x28
 801126e:	f88d 6010 	strb.w	r6, [sp, #16]
 8011272:	f002 ff81 	bl	8014178 <uxr_serialize_ACKNACK_Payload>
 8011276:	2200      	movs	r2, #0
 8011278:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801127a:	4611      	mov	r1, r2
 801127c:	4628      	mov	r0, r5
 801127e:	f000 ffc5 	bl	801220c <uxr_stamp_session_header>
 8011282:	a80a      	add	r0, sp, #40	@ 0x28
 8011284:	f7ff fa7e 	bl	8010784 <ucdr_buffer_length>
 8011288:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801128a:	4602      	mov	r2, r0
 801128c:	a905      	add	r1, sp, #20
 801128e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011292:	47a0      	blx	r4
 8011294:	b012      	add	sp, #72	@ 0x48
 8011296:	bd70      	pop	{r4, r5, r6, pc}

08011298 <uxr_init_session>:
 8011298:	b510      	push	{r4, lr}
 801129a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80112d0 <uxr_init_session+0x38>
 801129e:	2300      	movs	r3, #0
 80112a0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80112a4:	4604      	mov	r4, r0
 80112a6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80112aa:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80112ae:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80112b2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80112b6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80112ba:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80112be:	2181      	movs	r1, #129	@ 0x81
 80112c0:	f000 ff08 	bl	80120d4 <uxr_init_session_info>
 80112c4:	f104 0008 	add.w	r0, r4, #8
 80112c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112cc:	f001 bcc6 	b.w	8012c5c <uxr_init_stream_storage>
	...

080112d8 <uxr_set_status_callback>:
 80112d8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80112dc:	4770      	bx	lr
 80112de:	bf00      	nop

080112e0 <uxr_set_topic_callback>:
 80112e0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80112e4:	4770      	bx	lr
 80112e6:	bf00      	nop

080112e8 <uxr_set_request_callback>:
 80112e8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop

080112f0 <uxr_set_reply_callback>:
 80112f0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80112f4:	4770      	bx	lr
 80112f6:	bf00      	nop

080112f8 <uxr_create_output_best_effort_stream>:
 80112f8:	b570      	push	{r4, r5, r6, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	4604      	mov	r4, r0
 80112fe:	460d      	mov	r5, r1
 8011300:	4616      	mov	r6, r2
 8011302:	f000 ffd7 	bl	80122b4 <uxr_session_header_offset>
 8011306:	4632      	mov	r2, r6
 8011308:	4603      	mov	r3, r0
 801130a:	4629      	mov	r1, r5
 801130c:	f104 0008 	add.w	r0, r4, #8
 8011310:	b002      	add	sp, #8
 8011312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011316:	f001 bceb 	b.w	8012cf0 <uxr_add_output_best_effort_buffer>
 801131a:	bf00      	nop

0801131c <uxr_create_output_reliable_stream>:
 801131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801131e:	b085      	sub	sp, #20
 8011320:	4604      	mov	r4, r0
 8011322:	460d      	mov	r5, r1
 8011324:	4616      	mov	r6, r2
 8011326:	461f      	mov	r7, r3
 8011328:	f000 ffc4 	bl	80122b4 <uxr_session_header_offset>
 801132c:	463b      	mov	r3, r7
 801132e:	9000      	str	r0, [sp, #0]
 8011330:	4632      	mov	r2, r6
 8011332:	4629      	mov	r1, r5
 8011334:	f104 0008 	add.w	r0, r4, #8
 8011338:	f001 fcee 	bl	8012d18 <uxr_add_output_reliable_buffer>
 801133c:	b005      	add	sp, #20
 801133e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011340 <uxr_create_input_best_effort_stream>:
 8011340:	b082      	sub	sp, #8
 8011342:	3008      	adds	r0, #8
 8011344:	b002      	add	sp, #8
 8011346:	f001 bd01 	b.w	8012d4c <uxr_add_input_best_effort_buffer>
 801134a:	bf00      	nop

0801134c <uxr_create_input_reliable_stream>:
 801134c:	b510      	push	{r4, lr}
 801134e:	b084      	sub	sp, #16
 8011350:	4c03      	ldr	r4, [pc, #12]	@ (8011360 <uxr_create_input_reliable_stream+0x14>)
 8011352:	9400      	str	r4, [sp, #0]
 8011354:	3008      	adds	r0, #8
 8011356:	f001 fd0f 	bl	8012d78 <uxr_add_input_reliable_buffer>
 801135a:	b004      	add	sp, #16
 801135c:	bd10      	pop	{r4, pc}
 801135e:	bf00      	nop
 8011360:	0801117d 	.word	0x0801117d

08011364 <uxr_epoch_nanos>:
 8011364:	b510      	push	{r4, lr}
 8011366:	4604      	mov	r4, r0
 8011368:	f001 fdbc 	bl	8012ee4 <uxr_nanos>
 801136c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8011370:	1ac0      	subs	r0, r0, r3
 8011372:	eb61 0102 	sbc.w	r1, r1, r2
 8011376:	bd10      	pop	{r4, pc}

08011378 <uxr_flash_output_streams>:
 8011378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801137c:	7e03      	ldrb	r3, [r0, #24]
 801137e:	b084      	sub	sp, #16
 8011380:	4604      	mov	r4, r0
 8011382:	b373      	cbz	r3, 80113e2 <uxr_flash_output_streams+0x6a>
 8011384:	2500      	movs	r5, #0
 8011386:	f100 0908 	add.w	r9, r0, #8
 801138a:	f10d 0802 	add.w	r8, sp, #2
 801138e:	4628      	mov	r0, r5
 8011390:	af03      	add	r7, sp, #12
 8011392:	ae02      	add	r6, sp, #8
 8011394:	e006      	b.n	80113a4 <uxr_flash_output_streams+0x2c>
 8011396:	7e23      	ldrb	r3, [r4, #24]
 8011398:	3501      	adds	r5, #1
 801139a:	b2e8      	uxtb	r0, r5
 801139c:	4283      	cmp	r3, r0
 801139e:	f109 0910 	add.w	r9, r9, #16
 80113a2:	d91e      	bls.n	80113e2 <uxr_flash_output_streams+0x6a>
 80113a4:	2201      	movs	r2, #1
 80113a6:	4611      	mov	r1, r2
 80113a8:	f001 fc20 	bl	8012bec <uxr_stream_id>
 80113ac:	4643      	mov	r3, r8
 80113ae:	4684      	mov	ip, r0
 80113b0:	463a      	mov	r2, r7
 80113b2:	4631      	mov	r1, r6
 80113b4:	4648      	mov	r0, r9
 80113b6:	f8cd c004 	str.w	ip, [sp, #4]
 80113ba:	f008 fe6d 	bl	801a098 <uxr_prepare_best_effort_buffer_to_send>
 80113be:	2800      	cmp	r0, #0
 80113c0:	d0e9      	beq.n	8011396 <uxr_flash_output_streams+0x1e>
 80113c2:	9b02      	ldr	r3, [sp, #8]
 80113c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80113c8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80113cc:	4620      	mov	r0, r4
 80113ce:	f000 ff1d 	bl	801220c <uxr_stamp_session_header>
 80113d2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80113d4:	9a03      	ldr	r2, [sp, #12]
 80113d6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80113da:	9902      	ldr	r1, [sp, #8]
 80113dc:	6818      	ldr	r0, [r3, #0]
 80113de:	47d0      	blx	sl
 80113e0:	e7d9      	b.n	8011396 <uxr_flash_output_streams+0x1e>
 80113e2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80113e6:	b37b      	cbz	r3, 8011448 <uxr_flash_output_streams+0xd0>
 80113e8:	f04f 0900 	mov.w	r9, #0
 80113ec:	f104 0520 	add.w	r5, r4, #32
 80113f0:	f10d 0802 	add.w	r8, sp, #2
 80113f4:	af03      	add	r7, sp, #12
 80113f6:	ae02      	add	r6, sp, #8
 80113f8:	4648      	mov	r0, r9
 80113fa:	2201      	movs	r2, #1
 80113fc:	2102      	movs	r1, #2
 80113fe:	f001 fbf5 	bl	8012bec <uxr_stream_id>
 8011402:	9001      	str	r0, [sp, #4]
 8011404:	e00e      	b.n	8011424 <uxr_flash_output_streams+0xac>
 8011406:	9b02      	ldr	r3, [sp, #8]
 8011408:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801140c:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011410:	4620      	mov	r0, r4
 8011412:	f000 fefb 	bl	801220c <uxr_stamp_session_header>
 8011416:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011418:	9a03      	ldr	r2, [sp, #12]
 801141a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801141e:	9902      	ldr	r1, [sp, #8]
 8011420:	6818      	ldr	r0, [r3, #0]
 8011422:	47d0      	blx	sl
 8011424:	4643      	mov	r3, r8
 8011426:	463a      	mov	r2, r7
 8011428:	4631      	mov	r1, r6
 801142a:	4628      	mov	r0, r5
 801142c:	f009 f848 	bl	801a4c0 <uxr_prepare_next_reliable_buffer_to_send>
 8011430:	2800      	cmp	r0, #0
 8011432:	d1e8      	bne.n	8011406 <uxr_flash_output_streams+0x8e>
 8011434:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011438:	f109 0901 	add.w	r9, r9, #1
 801143c:	fa5f f089 	uxtb.w	r0, r9
 8011440:	4283      	cmp	r3, r0
 8011442:	f105 0528 	add.w	r5, r5, #40	@ 0x28
 8011446:	d8d8      	bhi.n	80113fa <uxr_flash_output_streams+0x82>
 8011448:	b004      	add	sp, #16
 801144a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801144e:	bf00      	nop

08011450 <read_submessage_info>:
 8011450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011454:	460d      	mov	r5, r1
 8011456:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801145a:	4669      	mov	r1, sp
 801145c:	4607      	mov	r7, r0
 801145e:	4628      	mov	r0, r5
 8011460:	f002 fca4 	bl	8013dac <uxr_deserialize_BaseObjectReply>
 8011464:	a902      	add	r1, sp, #8
 8011466:	4604      	mov	r4, r0
 8011468:	4628      	mov	r0, r5
 801146a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801146e:	f7fd fb23 	bl	800eab8 <ucdr_deserialize_bool>
 8011472:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011476:	4004      	ands	r4, r0
 8011478:	b2e4      	uxtb	r4, r4
 801147a:	b95b      	cbnz	r3, 8011494 <read_submessage_info+0x44>
 801147c:	a987      	add	r1, sp, #540	@ 0x21c
 801147e:	4628      	mov	r0, r5
 8011480:	f7fd fb1a 	bl	800eab8 <ucdr_deserialize_bool>
 8011484:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8011488:	4606      	mov	r6, r0
 801148a:	b94b      	cbnz	r3, 80114a0 <read_submessage_info+0x50>
 801148c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011494:	a903      	add	r1, sp, #12
 8011496:	4628      	mov	r0, r5
 8011498:	f002 fb4a 	bl	8013b30 <uxr_deserialize_ObjectVariant>
 801149c:	4004      	ands	r4, r0
 801149e:	e7ed      	b.n	801147c <read_submessage_info+0x2c>
 80114a0:	a988      	add	r1, sp, #544	@ 0x220
 80114a2:	4628      	mov	r0, r5
 80114a4:	f7fd fb36 	bl	800eb14 <ucdr_deserialize_uint8_t>
 80114a8:	4234      	tst	r4, r6
 80114aa:	d0ef      	beq.n	801148c <read_submessage_info+0x3c>
 80114ac:	2800      	cmp	r0, #0
 80114ae:	d0ed      	beq.n	801148c <read_submessage_info+0x3c>
 80114b0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80114b4:	2b0d      	cmp	r3, #13
 80114b6:	d1e9      	bne.n	801148c <read_submessage_info+0x3c>
 80114b8:	a98a      	add	r1, sp, #552	@ 0x228
 80114ba:	4628      	mov	r0, r5
 80114bc:	f7fe f8c6 	bl	800f64c <ucdr_deserialize_int16_t>
 80114c0:	b140      	cbz	r0, 80114d4 <read_submessage_info+0x84>
 80114c2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	dd07      	ble.n	80114da <read_submessage_info+0x8a>
 80114ca:	f1b8 0f00 	cmp.w	r8, #0
 80114ce:	bf0c      	ite	eq
 80114d0:	2002      	moveq	r0, #2
 80114d2:	2001      	movne	r0, #1
 80114d4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80114d8:	e7d8      	b.n	801148c <read_submessage_info+0x3c>
 80114da:	2000      	movs	r0, #0
 80114dc:	e7fa      	b.n	80114d4 <read_submessage_info+0x84>
 80114de:	bf00      	nop

080114e0 <read_submessage_list>:
 80114e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114e4:	b097      	sub	sp, #92	@ 0x5c
 80114e6:	4604      	mov	r4, r0
 80114e8:	460d      	mov	r5, r1
 80114ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80114ec:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80114f0:	aa0c      	add	r2, sp, #48	@ 0x30
 80114f2:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80114f6:	4628      	mov	r0, r5
 80114f8:	f001 fcae 	bl	8012e58 <uxr_read_submessage_header>
 80114fc:	2800      	cmp	r0, #0
 80114fe:	f000 812c 	beq.w	801175a <read_submessage_list+0x27a>
 8011502:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
 8011506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011508:	f8bd 6030 	ldrh.w	r6, [sp, #48]	@ 0x30
 801150c:	f89d 702f 	ldrb.w	r7, [sp, #47]	@ 0x2f
 8011510:	3902      	subs	r1, #2
 8011512:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011516:	290d      	cmp	r1, #13
 8011518:	d8e8      	bhi.n	80114ec <read_submessage_list+0xc>
 801151a:	a201      	add	r2, pc, #4	@ (adr r2, 8011520 <read_submessage_list+0x40>)
 801151c:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8011520:	08011751 	.word	0x08011751
 8011524:	080114ed 	.word	0x080114ed
 8011528:	08011741 	.word	0x08011741
 801152c:	080116e3 	.word	0x080116e3
 8011530:	080116d9 	.word	0x080116d9
 8011534:	080114ed 	.word	0x080114ed
 8011538:	080114ed 	.word	0x080114ed
 801153c:	0801165d 	.word	0x0801165d
 8011540:	080115f5 	.word	0x080115f5
 8011544:	080115b5 	.word	0x080115b5
 8011548:	080114ed 	.word	0x080114ed
 801154c:	080114ed 	.word	0x080114ed
 8011550:	080114ed 	.word	0x080114ed
 8011554:	08011559 	.word	0x08011559
 8011558:	a910      	add	r1, sp, #64	@ 0x40
 801155a:	4628      	mov	r0, r5
 801155c:	f002 fe6a 	bl	8014234 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011560:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8011564:	2e00      	cmp	r6, #0
 8011566:	f000 8100 	beq.w	801176a <read_submessage_list+0x28a>
 801156a:	f001 fcbb 	bl	8012ee4 <uxr_nanos>
 801156e:	f04f 0800 	mov.w	r8, #0
 8011572:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8011574:	4602      	mov	r2, r0
 8011576:	460b      	mov	r3, r1
 8011578:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801157a:	4990      	ldr	r1, [pc, #576]	@ (80117bc <read_submessage_list+0x2dc>)
 801157c:	46c4      	mov	ip, r8
 801157e:	fbc0 7c01 	smlal	r7, ip, r0, r1
 8011582:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011586:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011588:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801158a:	46c6      	mov	lr, r8
 801158c:	fbc0 7e01 	smlal	r7, lr, r0, r1
 8011590:	46bc      	mov	ip, r7
 8011592:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8011596:	fbc0 7801 	smlal	r7, r8, r0, r1
 801159a:	e9cd ce02 	strd	ip, lr, [sp, #8]
 801159e:	e9cd 7800 	strd	r7, r8, [sp]
 80115a2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80115a6:	9106      	str	r1, [sp, #24]
 80115a8:	4620      	mov	r0, r4
 80115aa:	47b0      	blx	r6
 80115ac:	2301      	movs	r3, #1
 80115ae:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80115b2:	e79b      	b.n	80114ec <read_submessage_list+0xc>
 80115b4:	a910      	add	r1, sp, #64	@ 0x40
 80115b6:	4628      	mov	r0, r5
 80115b8:	f002 fe1c 	bl	80141f4 <uxr_deserialize_HEARTBEAT_Payload>
 80115bc:	2100      	movs	r1, #0
 80115be:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80115c2:	f001 fb2f 	bl	8012c24 <uxr_stream_id_from_raw>
 80115c6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80115ca:	900f      	str	r0, [sp, #60]	@ 0x3c
 80115cc:	4631      	mov	r1, r6
 80115ce:	f104 0008 	add.w	r0, r4, #8
 80115d2:	f001 fc07 	bl	8012de4 <uxr_get_input_reliable_stream>
 80115d6:	2800      	cmp	r0, #0
 80115d8:	d088      	beq.n	80114ec <read_submessage_list+0xc>
 80115da:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80115de:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80115e2:	f008 fcc9 	bl	8019f78 <uxr_process_heartbeat>
 80115e6:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80115ea:	4632      	mov	r2, r6
 80115ec:	4620      	mov	r0, r4
 80115ee:	f7ff fe1d 	bl	801122c <write_submessage_acknack.isra.0>
 80115f2:	e77b      	b.n	80114ec <read_submessage_list+0xc>
 80115f4:	a910      	add	r1, sp, #64	@ 0x40
 80115f6:	4628      	mov	r0, r5
 80115f8:	f002 fdd4 	bl	80141a4 <uxr_deserialize_ACKNACK_Payload>
 80115fc:	2100      	movs	r1, #0
 80115fe:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011602:	f001 fb0f 	bl	8012c24 <uxr_stream_id_from_raw>
 8011606:	900d      	str	r0, [sp, #52]	@ 0x34
 8011608:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801160c:	f104 0008 	add.w	r0, r4, #8
 8011610:	f001 fbd4 	bl	8012dbc <uxr_get_output_reliable_stream>
 8011614:	4606      	mov	r6, r0
 8011616:	2800      	cmp	r0, #0
 8011618:	f43f af68 	beq.w	80114ec <read_submessage_list+0xc>
 801161c:	f8bd 1042 	ldrh.w	r1, [sp, #66]	@ 0x42
 8011620:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011624:	ba49      	rev16	r1, r1
 8011626:	b289      	uxth	r1, r1
 8011628:	f008 fff4 	bl	801a614 <uxr_process_acknack>
 801162c:	4630      	mov	r0, r6
 801162e:	f008 ffb5 	bl	801a59c <uxr_begin_output_nack_buffer_it>
 8011632:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8011636:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801163a:	e005      	b.n	8011648 <read_submessage_list+0x168>
 801163c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801163e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011640:	685f      	ldr	r7, [r3, #4]
 8011642:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011644:	6818      	ldr	r0, [r3, #0]
 8011646:	47b8      	blx	r7
 8011648:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801164c:	aa0f      	add	r2, sp, #60	@ 0x3c
 801164e:	4641      	mov	r1, r8
 8011650:	4630      	mov	r0, r6
 8011652:	f008 ffa5 	bl	801a5a0 <uxr_next_reliable_nack_buffer_to_send>
 8011656:	2800      	cmp	r0, #0
 8011658:	d1f0      	bne.n	801163c <read_submessage_list+0x15c>
 801165a:	e747      	b.n	80114ec <read_submessage_list+0xc>
 801165c:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8011660:	4641      	mov	r1, r8
 8011662:	900d      	str	r0, [sp, #52]	@ 0x34
 8011664:	4628      	mov	r0, r5
 8011666:	f002 fb03 	bl	8013c70 <uxr_deserialize_BaseObjectRequest>
 801166a:	3e04      	subs	r6, #4
 801166c:	4640      	mov	r0, r8
 801166e:	a90f      	add	r1, sp, #60	@ 0x3c
 8011670:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8011674:	f000 fe44 	bl	8012300 <uxr_parse_base_object_request>
 8011678:	fa1f f886 	uxth.w	r8, r6
 801167c:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 8011680:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011682:	f8bd 9032 	ldrh.w	r9, [sp, #50]	@ 0x32
 8011686:	9110      	str	r1, [sp, #64]	@ 0x40
 8011688:	f007 070e 	and.w	r7, r7, #14
 801168c:	b136      	cbz	r6, 801169c <read_submessage_list+0x1bc>
 801168e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011692:	9300      	str	r3, [sp, #0]
 8011694:	464a      	mov	r2, r9
 8011696:	2300      	movs	r3, #0
 8011698:	4620      	mov	r0, r4
 801169a:	47b0      	blx	r6
 801169c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 801169e:	b16b      	cbz	r3, 80116bc <read_submessage_list+0x1dc>
 80116a0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80116a2:	2100      	movs	r1, #0
 80116a4:	3802      	subs	r0, #2
 80116a6:	e002      	b.n	80116ae <read_submessage_list+0x1ce>
 80116a8:	3101      	adds	r1, #1
 80116aa:	428b      	cmp	r3, r1
 80116ac:	d006      	beq.n	80116bc <read_submessage_list+0x1dc>
 80116ae:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 80116b2:	454e      	cmp	r6, r9
 80116b4:	d1f8      	bne.n	80116a8 <read_submessage_list+0x1c8>
 80116b6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80116b8:	2200      	movs	r2, #0
 80116ba:	545a      	strb	r2, [r3, r1]
 80116bc:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80116c0:	9102      	str	r1, [sp, #8]
 80116c2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80116c4:	9101      	str	r1, [sp, #4]
 80116c6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80116c8:	9100      	str	r1, [sp, #0]
 80116ca:	463b      	mov	r3, r7
 80116cc:	4642      	mov	r2, r8
 80116ce:	4629      	mov	r1, r5
 80116d0:	4620      	mov	r0, r4
 80116d2:	f009 f857 	bl	801a784 <read_submessage_format>
 80116d6:	e709      	b.n	80114ec <read_submessage_list+0xc>
 80116d8:	4629      	mov	r1, r5
 80116da:	4620      	mov	r0, r4
 80116dc:	f7ff feb8 	bl	8011450 <read_submessage_info>
 80116e0:	e704      	b.n	80114ec <read_submessage_list+0xc>
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d03c      	beq.n	8011760 <read_submessage_list+0x280>
 80116e6:	a910      	add	r1, sp, #64	@ 0x40
 80116e8:	4628      	mov	r0, r5
 80116ea:	f002 fcb7 	bl	801405c <uxr_deserialize_STATUS_Payload>
 80116ee:	a90e      	add	r1, sp, #56	@ 0x38
 80116f0:	a810      	add	r0, sp, #64	@ 0x40
 80116f2:	aa0d      	add	r2, sp, #52	@ 0x34
 80116f4:	f000 fe04 	bl	8012300 <uxr_parse_base_object_request>
 80116f8:	f8d4 6080 	ldr.w	r6, [r4, #128]	@ 0x80
 80116fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80116fe:	f89d 8044 	ldrb.w	r8, [sp, #68]	@ 0x44
 8011702:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011706:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011708:	b136      	cbz	r6, 8011718 <read_submessage_list+0x238>
 801170a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801170e:	9300      	str	r3, [sp, #0]
 8011710:	463a      	mov	r2, r7
 8011712:	4643      	mov	r3, r8
 8011714:	4620      	mov	r0, r4
 8011716:	47b0      	blx	r6
 8011718:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 801171a:	2a00      	cmp	r2, #0
 801171c:	f43f aee6 	beq.w	80114ec <read_submessage_list+0xc>
 8011720:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011722:	2100      	movs	r1, #0
 8011724:	3802      	subs	r0, #2
 8011726:	e003      	b.n	8011730 <read_submessage_list+0x250>
 8011728:	3101      	adds	r1, #1
 801172a:	4291      	cmp	r1, r2
 801172c:	f43f aede 	beq.w	80114ec <read_submessage_list+0xc>
 8011730:	f830 6f02 	ldrh.w	r6, [r0, #2]!
 8011734:	42be      	cmp	r6, r7
 8011736:	d1f7      	bne.n	8011728 <read_submessage_list+0x248>
 8011738:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801173a:	f803 8001 	strb.w	r8, [r3, r1]
 801173e:	e6d5      	b.n	80114ec <read_submessage_list+0xc>
 8011740:	2b00      	cmp	r3, #0
 8011742:	f47f aed3 	bne.w	80114ec <read_submessage_list+0xc>
 8011746:	4629      	mov	r1, r5
 8011748:	4620      	mov	r0, r4
 801174a:	f000 fd21 	bl	8012190 <uxr_read_create_session_status>
 801174e:	e6cd      	b.n	80114ec <read_submessage_list+0xc>
 8011750:	4629      	mov	r1, r5
 8011752:	4620      	mov	r0, r4
 8011754:	f7ff fd34 	bl	80111c0 <read_submessage_get_info>
 8011758:	e6c8      	b.n	80114ec <read_submessage_list+0xc>
 801175a:	b017      	add	sp, #92	@ 0x5c
 801175c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011760:	4629      	mov	r1, r5
 8011762:	4620      	mov	r0, r4
 8011764:	f000 fd22 	bl	80121ac <uxr_read_delete_session_status>
 8011768:	e6c0      	b.n	80114ec <read_submessage_list+0xc>
 801176a:	f001 fbbb 	bl	8012ee4 <uxr_nanos>
 801176e:	e9dd 7214 	ldrd	r7, r2, [sp, #80]	@ 0x50
 8011772:	f8df c048 	ldr.w	ip, [pc, #72]	@ 80117bc <read_submessage_list+0x2dc>
 8011776:	4633      	mov	r3, r6
 8011778:	fbc7 230c 	smlal	r2, r3, r7, ip
 801177c:	1810      	adds	r0, r2, r0
 801177e:	eb43 0301 	adc.w	r3, r3, r1
 8011782:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	@ 0x48
 8011786:	46b6      	mov	lr, r6
 8011788:	fbc1 2e0c 	smlal	r2, lr, r1, ip
 801178c:	e9dd 1710 	ldrd	r1, r7, [sp, #64]	@ 0x40
 8011790:	fbc1 760c 	smlal	r7, r6, r1, ip
 8011794:	19d2      	adds	r2, r2, r7
 8011796:	eb4e 0106 	adc.w	r1, lr, r6
 801179a:	1a80      	subs	r0, r0, r2
 801179c:	eb63 0301 	sbc.w	r3, r3, r1
 80117a0:	0fda      	lsrs	r2, r3, #31
 80117a2:	1812      	adds	r2, r2, r0
 80117a4:	f143 0300 	adc.w	r3, r3, #0
 80117a8:	0852      	lsrs	r2, r2, #1
 80117aa:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80117ae:	105b      	asrs	r3, r3, #1
 80117b0:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80117b4:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80117b8:	e6f8      	b.n	80115ac <read_submessage_list+0xcc>
 80117ba:	bf00      	nop
 80117bc:	3b9aca00 	.word	0x3b9aca00

080117c0 <listen_message_reliably>:
 80117c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117c4:	f1b1 0b00 	subs.w	fp, r1, #0
 80117c8:	b09f      	sub	sp, #124	@ 0x7c
 80117ca:	4606      	mov	r6, r0
 80117cc:	bfb8      	it	lt
 80117ce:	f06f 4b00 	mvnlt.w	fp, #2147483648	@ 0x80000000
 80117d2:	f001 fb6d 	bl	8012eb0 <uxr_millis>
 80117d6:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80117da:	9003      	str	r0, [sp, #12]
 80117dc:	9104      	str	r1, [sp, #16]
 80117de:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80117e2:	f10d 0a24 	add.w	sl, sp, #36	@ 0x24
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	f000 80a4 	beq.w	8011934 <listen_message_reliably+0x174>
 80117ec:	2500      	movs	r5, #0
 80117ee:	e9cd b806 	strd	fp, r8, [sp, #24]
 80117f2:	f106 0420 	add.w	r4, r6, #32
 80117f6:	f04f 37ff 	mov.w	r7, #4294967295
 80117fa:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
 80117fe:	4628      	mov	r0, r5
 8011800:	e011      	b.n	8011826 <listen_message_reliably+0x66>
 8011802:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8011806:	42ba      	cmp	r2, r7
 8011808:	eb73 0109 	sbcs.w	r1, r3, r9
 801180c:	bfb8      	it	lt
 801180e:	4699      	movlt	r9, r3
 8011810:	f105 0501 	add.w	r5, r5, #1
 8011814:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011818:	b2e8      	uxtb	r0, r5
 801181a:	bfb8      	it	lt
 801181c:	4617      	movlt	r7, r2
 801181e:	4283      	cmp	r3, r0
 8011820:	f104 0428 	add.w	r4, r4, #40	@ 0x28
 8011824:	d94a      	bls.n	80118bc <listen_message_reliably+0xfc>
 8011826:	2201      	movs	r2, #1
 8011828:	2102      	movs	r1, #2
 801182a:	f001 f9df 	bl	8012bec <uxr_stream_id>
 801182e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8011832:	4601      	mov	r1, r0
 8011834:	4620      	mov	r0, r4
 8011836:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011838:	f008 fe80 	bl	801a53c <uxr_update_output_stream_heartbeat_timestamp>
 801183c:	2800      	cmp	r0, #0
 801183e:	d0e0      	beq.n	8011802 <listen_message_reliably+0x42>
 8011840:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 8011844:	f89d b02d 	ldrb.w	fp, [sp, #45]	@ 0x2d
 8011848:	9305      	str	r3, [sp, #20]
 801184a:	4630      	mov	r0, r6
 801184c:	f000 fd32 	bl	80122b4 <uxr_session_header_offset>
 8011850:	f10d 0858 	add.w	r8, sp, #88	@ 0x58
 8011854:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8011858:	9000      	str	r0, [sp, #0]
 801185a:	a90e      	add	r1, sp, #56	@ 0x38
 801185c:	4640      	mov	r0, r8
 801185e:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
 8011862:	2300      	movs	r3, #0
 8011864:	2211      	movs	r2, #17
 8011866:	f7fe ff4f 	bl	8010708 <ucdr_init_buffer_origin_offset>
 801186a:	2300      	movs	r3, #0
 801186c:	2205      	movs	r2, #5
 801186e:	210b      	movs	r1, #11
 8011870:	4640      	mov	r0, r8
 8011872:	f001 fad7 	bl	8012e24 <uxr_buffer_submessage_header>
 8011876:	f8bb 0032 	ldrh.w	r0, [fp, #50]	@ 0x32
 801187a:	2101      	movs	r1, #1
 801187c:	f009 f856 	bl	801a92c <uxr_seq_num_add>
 8011880:	f8bb 3030 	ldrh.w	r3, [fp, #48]	@ 0x30
 8011884:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8011888:	4602      	mov	r2, r0
 801188a:	9b05      	ldr	r3, [sp, #20]
 801188c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8011890:	a90c      	add	r1, sp, #48	@ 0x30
 8011892:	4640      	mov	r0, r8
 8011894:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8011898:	f002 fc98 	bl	80141cc <uxr_serialize_HEARTBEAT_Payload>
 801189c:	2200      	movs	r2, #0
 801189e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80118a0:	4611      	mov	r1, r2
 80118a2:	4630      	mov	r0, r6
 80118a4:	f000 fcb2 	bl	801220c <uxr_stamp_session_header>
 80118a8:	4640      	mov	r0, r8
 80118aa:	f7fe ff6b 	bl	8010784 <ucdr_buffer_length>
 80118ae:	4602      	mov	r2, r0
 80118b0:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 80118b2:	a90e      	add	r1, sp, #56	@ 0x38
 80118b4:	e9d0 0300 	ldrd	r0, r3, [r0]
 80118b8:	4798      	blx	r3
 80118ba:	e7a2      	b.n	8011802 <listen_message_reliably+0x42>
 80118bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80118c0:	4599      	cmp	r9, r3
 80118c2:	bf08      	it	eq
 80118c4:	f1b7 3fff 	cmpeq.w	r7, #4294967295
 80118c8:	e9dd b806 	ldrd	fp, r8, [sp, #24]
 80118cc:	d032      	beq.n	8011934 <listen_message_reliably+0x174>
 80118ce:	9b03      	ldr	r3, [sp, #12]
 80118d0:	1aff      	subs	r7, r7, r3
 80118d2:	2f00      	cmp	r7, #0
 80118d4:	bf08      	it	eq
 80118d6:	2701      	moveq	r7, #1
 80118d8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80118da:	455f      	cmp	r7, fp
 80118dc:	bfa8      	it	ge
 80118de:	465f      	movge	r7, fp
 80118e0:	689c      	ldr	r4, [r3, #8]
 80118e2:	6818      	ldr	r0, [r3, #0]
 80118e4:	4642      	mov	r2, r8
 80118e6:	463b      	mov	r3, r7
 80118e8:	4651      	mov	r1, sl
 80118ea:	47a0      	blx	r4
 80118ec:	ebab 0b07 	sub.w	fp, fp, r7
 80118f0:	b958      	cbnz	r0, 801190a <listen_message_reliably+0x14a>
 80118f2:	f1bb 0f00 	cmp.w	fp, #0
 80118f6:	dd44      	ble.n	8011982 <listen_message_reliably+0x1c2>
 80118f8:	f001 fada 	bl	8012eb0 <uxr_millis>
 80118fc:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011900:	2b00      	cmp	r3, #0
 8011902:	d03c      	beq.n	801197e <listen_message_reliably+0x1be>
 8011904:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8011908:	e770      	b.n	80117ec <listen_message_reliably+0x2c>
 801190a:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 801190e:	4604      	mov	r4, r0
 8011910:	a80e      	add	r0, sp, #56	@ 0x38
 8011912:	f7fe ff0b 	bl	801072c <ucdr_init_buffer>
 8011916:	2500      	movs	r5, #0
 8011918:	f10d 0322 	add.w	r3, sp, #34	@ 0x22
 801191c:	aa08      	add	r2, sp, #32
 801191e:	a90e      	add	r1, sp, #56	@ 0x38
 8011920:	4630      	mov	r0, r6
 8011922:	f88d 5020 	strb.w	r5, [sp, #32]
 8011926:	f000 fc87 	bl	8012238 <uxr_read_session_header>
 801192a:	b928      	cbnz	r0, 8011938 <listen_message_reliably+0x178>
 801192c:	4620      	mov	r0, r4
 801192e:	b01f      	add	sp, #124	@ 0x7c
 8011930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011934:	465f      	mov	r7, fp
 8011936:	e7cc      	b.n	80118d2 <listen_message_reliably+0x112>
 8011938:	4629      	mov	r1, r5
 801193a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 801193e:	f001 f971 	bl	8012c24 <uxr_stream_id_from_raw>
 8011942:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011946:	2f01      	cmp	r7, #1
 8011948:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 801194c:	f8bd a022 	ldrh.w	sl, [sp, #34]	@ 0x22
 8011950:	fa5f f880 	uxtb.w	r8, r0
 8011954:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011958:	d050      	beq.n	80119fc <listen_message_reliably+0x23c>
 801195a:	2f02      	cmp	r7, #2
 801195c:	d016      	beq.n	801198c <listen_message_reliably+0x1cc>
 801195e:	2f00      	cmp	r7, #0
 8011960:	d1e4      	bne.n	801192c <listen_message_reliably+0x16c>
 8011962:	4639      	mov	r1, r7
 8011964:	4638      	mov	r0, r7
 8011966:	f001 f95d 	bl	8012c24 <uxr_stream_id_from_raw>
 801196a:	a90e      	add	r1, sp, #56	@ 0x38
 801196c:	4602      	mov	r2, r0
 801196e:	4630      	mov	r0, r6
 8011970:	920c      	str	r2, [sp, #48]	@ 0x30
 8011972:	f7ff fdb5 	bl	80114e0 <read_submessage_list>
 8011976:	4620      	mov	r0, r4
 8011978:	b01f      	add	sp, #124	@ 0x7c
 801197a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801197e:	465f      	mov	r7, fp
 8011980:	e7aa      	b.n	80118d8 <listen_message_reliably+0x118>
 8011982:	4604      	mov	r4, r0
 8011984:	4620      	mov	r0, r4
 8011986:	b01f      	add	sp, #124	@ 0x7c
 8011988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801198c:	4629      	mov	r1, r5
 801198e:	f106 0008 	add.w	r0, r6, #8
 8011992:	f001 fa27 	bl	8012de4 <uxr_get_input_reliable_stream>
 8011996:	4681      	mov	r9, r0
 8011998:	b338      	cbz	r0, 80119ea <listen_message_reliably+0x22a>
 801199a:	a80e      	add	r0, sp, #56	@ 0x38
 801199c:	f8dd b040 	ldr.w	fp, [sp, #64]	@ 0x40
 80119a0:	f7fe fef4 	bl	801078c <ucdr_buffer_remaining>
 80119a4:	4603      	mov	r3, r0
 80119a6:	f10d 0021 	add.w	r0, sp, #33	@ 0x21
 80119aa:	9000      	str	r0, [sp, #0]
 80119ac:	465a      	mov	r2, fp
 80119ae:	4651      	mov	r1, sl
 80119b0:	4648      	mov	r0, r9
 80119b2:	f008 f9ef 	bl	8019d94 <uxr_receive_reliable_message>
 80119b6:	b1c0      	cbz	r0, 80119ea <listen_message_reliably+0x22a>
 80119b8:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 80119bc:	b393      	cbz	r3, 8011a24 <listen_message_reliably+0x264>
 80119be:	af16      	add	r7, sp, #88	@ 0x58
 80119c0:	f04f 0a02 	mov.w	sl, #2
 80119c4:	e00a      	b.n	80119dc <listen_message_reliably+0x21c>
 80119c6:	f88d 8030 	strb.w	r8, [sp, #48]	@ 0x30
 80119ca:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
 80119ce:	f88d a032 	strb.w	sl, [sp, #50]	@ 0x32
 80119d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80119d4:	4639      	mov	r1, r7
 80119d6:	4630      	mov	r0, r6
 80119d8:	f7ff fd82 	bl	80114e0 <read_submessage_list>
 80119dc:	2204      	movs	r2, #4
 80119de:	4639      	mov	r1, r7
 80119e0:	4648      	mov	r0, r9
 80119e2:	f008 fa51 	bl	8019e88 <uxr_next_input_reliable_buffer_available>
 80119e6:	2800      	cmp	r0, #0
 80119e8:	d1ed      	bne.n	80119c6 <listen_message_reliably+0x206>
 80119ea:	4630      	mov	r0, r6
 80119ec:	462a      	mov	r2, r5
 80119ee:	4641      	mov	r1, r8
 80119f0:	f7ff fc1c 	bl	801122c <write_submessage_acknack.isra.0>
 80119f4:	4620      	mov	r0, r4
 80119f6:	b01f      	add	sp, #124	@ 0x7c
 80119f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fc:	4629      	mov	r1, r5
 80119fe:	f106 0008 	add.w	r0, r6, #8
 8011a02:	f001 f9e5 	bl	8012dd0 <uxr_get_input_best_effort_stream>
 8011a06:	2800      	cmp	r0, #0
 8011a08:	d090      	beq.n	801192c <listen_message_reliably+0x16c>
 8011a0a:	4651      	mov	r1, sl
 8011a0c:	f008 f932 	bl	8019c74 <uxr_receive_best_effort_message>
 8011a10:	2800      	cmp	r0, #0
 8011a12:	d08b      	beq.n	801192c <listen_message_reliably+0x16c>
 8011a14:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8011a18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011a1a:	a90e      	add	r1, sp, #56	@ 0x38
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	f7ff fd5f 	bl	80114e0 <read_submessage_list>
 8011a22:	e783      	b.n	801192c <listen_message_reliably+0x16c>
 8011a24:	f88d 7032 	strb.w	r7, [sp, #50]	@ 0x32
 8011a28:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8011a2a:	a90e      	add	r1, sp, #56	@ 0x38
 8011a2c:	4630      	mov	r0, r6
 8011a2e:	f7ff fd57 	bl	80114e0 <read_submessage_list>
 8011a32:	e7c4      	b.n	80119be <listen_message_reliably+0x1fe>

08011a34 <uxr_run_session_timeout>:
 8011a34:	b570      	push	{r4, r5, r6, lr}
 8011a36:	4604      	mov	r4, r0
 8011a38:	460d      	mov	r5, r1
 8011a3a:	f001 fa39 	bl	8012eb0 <uxr_millis>
 8011a3e:	4606      	mov	r6, r0
 8011a40:	4620      	mov	r0, r4
 8011a42:	f7ff fc99 	bl	8011378 <uxr_flash_output_streams>
 8011a46:	4629      	mov	r1, r5
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f7ff feb9 	bl	80117c0 <listen_message_reliably>
 8011a4e:	f001 fa2f 	bl	8012eb0 <uxr_millis>
 8011a52:	1b81      	subs	r1, r0, r6
 8011a54:	1a69      	subs	r1, r5, r1
 8011a56:	2900      	cmp	r1, #0
 8011a58:	dcf6      	bgt.n	8011a48 <uxr_run_session_timeout+0x14>
 8011a5a:	f104 0008 	add.w	r0, r4, #8
 8011a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a62:	f001 b9c9 	b.w	8012df8 <uxr_output_streams_confirmed>
 8011a66:	bf00      	nop

08011a68 <uxr_run_session_until_data>:
 8011a68:	b570      	push	{r4, r5, r6, lr}
 8011a6a:	4604      	mov	r4, r0
 8011a6c:	460d      	mov	r5, r1
 8011a6e:	f001 fa1f 	bl	8012eb0 <uxr_millis>
 8011a72:	4606      	mov	r6, r0
 8011a74:	4620      	mov	r0, r4
 8011a76:	f7ff fc7f 	bl	8011378 <uxr_flash_output_streams>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011a80:	4629      	mov	r1, r5
 8011a82:	e005      	b.n	8011a90 <uxr_run_session_until_data+0x28>
 8011a84:	f001 fa14 	bl	8012eb0 <uxr_millis>
 8011a88:	1b81      	subs	r1, r0, r6
 8011a8a:	1a69      	subs	r1, r5, r1
 8011a8c:	2900      	cmp	r1, #0
 8011a8e:	dd07      	ble.n	8011aa0 <uxr_run_session_until_data+0x38>
 8011a90:	4620      	mov	r0, r4
 8011a92:	f7ff fe95 	bl	80117c0 <listen_message_reliably>
 8011a96:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011a9a:	2800      	cmp	r0, #0
 8011a9c:	d0f2      	beq.n	8011a84 <uxr_run_session_until_data+0x1c>
 8011a9e:	bd70      	pop	{r4, r5, r6, pc}
 8011aa0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011aa4:	bd70      	pop	{r4, r5, r6, pc}
 8011aa6:	bf00      	nop

08011aa8 <uxr_run_session_until_confirm_delivery>:
 8011aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aac:	4606      	mov	r6, r0
 8011aae:	460d      	mov	r5, r1
 8011ab0:	f001 f9fe 	bl	8012eb0 <uxr_millis>
 8011ab4:	4607      	mov	r7, r0
 8011ab6:	4630      	mov	r0, r6
 8011ab8:	f7ff fc5e 	bl	8011378 <uxr_flash_output_streams>
 8011abc:	2d00      	cmp	r5, #0
 8011abe:	db16      	blt.n	8011aee <uxr_run_session_until_confirm_delivery+0x46>
 8011ac0:	462c      	mov	r4, r5
 8011ac2:	f106 0808 	add.w	r8, r6, #8
 8011ac6:	e008      	b.n	8011ada <uxr_run_session_until_confirm_delivery+0x32>
 8011ac8:	4621      	mov	r1, r4
 8011aca:	4630      	mov	r0, r6
 8011acc:	f7ff fe78 	bl	80117c0 <listen_message_reliably>
 8011ad0:	f001 f9ee 	bl	8012eb0 <uxr_millis>
 8011ad4:	1bc1      	subs	r1, r0, r7
 8011ad6:	1a6c      	subs	r4, r5, r1
 8011ad8:	d404      	bmi.n	8011ae4 <uxr_run_session_until_confirm_delivery+0x3c>
 8011ada:	4640      	mov	r0, r8
 8011adc:	f001 f98c 	bl	8012df8 <uxr_output_streams_confirmed>
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	d0f1      	beq.n	8011ac8 <uxr_run_session_until_confirm_delivery+0x20>
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011aea:	f001 b985 	b.w	8012df8 <uxr_output_streams_confirmed>
 8011aee:	f106 0808 	add.w	r8, r6, #8
 8011af2:	e7f7      	b.n	8011ae4 <uxr_run_session_until_confirm_delivery+0x3c>

08011af4 <uxr_run_session_until_all_status>:
 8011af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011af8:	9c08      	ldr	r4, [sp, #32]
 8011afa:	4605      	mov	r5, r0
 8011afc:	460f      	mov	r7, r1
 8011afe:	4690      	mov	r8, r2
 8011b00:	461e      	mov	r6, r3
 8011b02:	f7ff fc39 	bl	8011378 <uxr_flash_output_streams>
 8011b06:	b124      	cbz	r4, 8011b12 <uxr_run_session_until_all_status+0x1e>
 8011b08:	4622      	mov	r2, r4
 8011b0a:	21ff      	movs	r1, #255	@ 0xff
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	f00a facb 	bl	801c0a8 <memset>
 8011b12:	e9c5 861d 	strd	r8, r6, [r5, #116]	@ 0x74
 8011b16:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8011b18:	f001 f9ca 	bl	8012eb0 <uxr_millis>
 8011b1c:	4639      	mov	r1, r7
 8011b1e:	4681      	mov	r9, r0
 8011b20:	4628      	mov	r0, r5
 8011b22:	f7ff fe4d 	bl	80117c0 <listen_message_reliably>
 8011b26:	f001 f9c3 	bl	8012eb0 <uxr_millis>
 8011b2a:	eba0 0109 	sub.w	r1, r0, r9
 8011b2e:	1a79      	subs	r1, r7, r1
 8011b30:	b36c      	cbz	r4, 8011b8e <uxr_run_session_until_all_status+0x9a>
 8011b32:	1e70      	subs	r0, r6, #1
 8011b34:	46c6      	mov	lr, r8
 8011b36:	1902      	adds	r2, r0, r4
 8011b38:	4684      	mov	ip, r0
 8011b3a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8011b3e:	2bff      	cmp	r3, #255	@ 0xff
 8011b40:	d007      	beq.n	8011b52 <uxr_run_session_until_all_status+0x5e>
 8011b42:	4594      	cmp	ip, r2
 8011b44:	d00f      	beq.n	8011b66 <uxr_run_session_until_all_status+0x72>
 8011b46:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8011b4a:	2bff      	cmp	r3, #255	@ 0xff
 8011b4c:	f10e 0e02 	add.w	lr, lr, #2
 8011b50:	d1f7      	bne.n	8011b42 <uxr_run_session_until_all_status+0x4e>
 8011b52:	4594      	cmp	ip, r2
 8011b54:	f8be 3000 	ldrh.w	r3, [lr]
 8011b58:	d014      	beq.n	8011b84 <uxr_run_session_until_all_status+0x90>
 8011b5a:	f10e 0e02 	add.w	lr, lr, #2
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d0eb      	beq.n	8011b3a <uxr_run_session_until_all_status+0x46>
 8011b62:	2900      	cmp	r1, #0
 8011b64:	dcdc      	bgt.n	8011b20 <uxr_run_session_until_all_status+0x2c>
 8011b66:	2300      	movs	r3, #0
 8011b68:	67eb      	str	r3, [r5, #124]	@ 0x7c
 8011b6a:	e001      	b.n	8011b70 <uxr_run_session_until_all_status+0x7c>
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d812      	bhi.n	8011b96 <uxr_run_session_until_all_status+0xa2>
 8011b70:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011b74:	4290      	cmp	r0, r2
 8011b76:	d1f9      	bne.n	8011b6c <uxr_run_session_until_all_status+0x78>
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	bf8c      	ite	hi
 8011b7c:	2000      	movhi	r0, #0
 8011b7e:	2001      	movls	r0, #1
 8011b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b84:	2900      	cmp	r1, #0
 8011b86:	ddee      	ble.n	8011b66 <uxr_run_session_until_all_status+0x72>
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d1c9      	bne.n	8011b20 <uxr_run_session_until_all_status+0x2c>
 8011b8c:	e7eb      	b.n	8011b66 <uxr_run_session_until_all_status+0x72>
 8011b8e:	67ec      	str	r4, [r5, #124]	@ 0x7c
 8011b90:	2001      	movs	r0, #1
 8011b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b96:	2000      	movs	r0, #0
 8011b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b9c:	0000      	movs	r0, r0
	...

08011ba0 <uxr_sync_session>:
 8011ba0:	b570      	push	{r4, r5, r6, lr}
 8011ba2:	b092      	sub	sp, #72	@ 0x48
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	460d      	mov	r5, r1
 8011ba8:	f000 fb84 	bl	80122b4 <uxr_session_header_offset>
 8011bac:	2214      	movs	r2, #20
 8011bae:	eb0d 0102 	add.w	r1, sp, r2
 8011bb2:	9000      	str	r0, [sp, #0]
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	a80a      	add	r0, sp, #40	@ 0x28
 8011bb8:	f7fe fda6 	bl	8010708 <ucdr_init_buffer_origin_offset>
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	2208      	movs	r2, #8
 8011bc0:	210e      	movs	r1, #14
 8011bc2:	a80a      	add	r0, sp, #40	@ 0x28
 8011bc4:	f001 f92e 	bl	8012e24 <uxr_buffer_submessage_header>
 8011bc8:	f001 f98c 	bl	8012ee4 <uxr_nanos>
 8011bcc:	a318      	add	r3, pc, #96	@ (adr r3, 8011c30 <uxr_sync_session+0x90>)
 8011bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd2:	f7ee ff7b 	bl	8000acc <__aeabi_ldivmod>
 8011bd6:	a903      	add	r1, sp, #12
 8011bd8:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8011bdc:	a80a      	add	r0, sp, #40	@ 0x28
 8011bde:	f002 fb1b 	bl	8014218 <uxr_serialize_TIMESTAMP_Payload>
 8011be2:	2200      	movs	r2, #0
 8011be4:	4611      	mov	r1, r2
 8011be6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011be8:	4620      	mov	r0, r4
 8011bea:	f000 fb0f 	bl	801220c <uxr_stamp_session_header>
 8011bee:	a80a      	add	r0, sp, #40	@ 0x28
 8011bf0:	f7fe fdc8 	bl	8010784 <ucdr_buffer_length>
 8011bf4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	a905      	add	r1, sp, #20
 8011bfa:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011bfe:	47b0      	blx	r6
 8011c00:	f001 f956 	bl	8012eb0 <uxr_millis>
 8011c04:	2300      	movs	r3, #0
 8011c06:	4606      	mov	r6, r0
 8011c08:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8011c0c:	4629      	mov	r1, r5
 8011c0e:	e000      	b.n	8011c12 <uxr_sync_session+0x72>
 8011c10:	b950      	cbnz	r0, 8011c28 <uxr_sync_session+0x88>
 8011c12:	4620      	mov	r0, r4
 8011c14:	f7ff fdd4 	bl	80117c0 <listen_message_reliably>
 8011c18:	f001 f94a 	bl	8012eb0 <uxr_millis>
 8011c1c:	1b81      	subs	r1, r0, r6
 8011c1e:	1a69      	subs	r1, r5, r1
 8011c20:	2900      	cmp	r1, #0
 8011c22:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8011c26:	dcf3      	bgt.n	8011c10 <uxr_sync_session+0x70>
 8011c28:	b012      	add	sp, #72	@ 0x48
 8011c2a:	bd70      	pop	{r4, r5, r6, pc}
 8011c2c:	f3af 8000 	nop.w
 8011c30:	3b9aca00 	.word	0x3b9aca00
 8011c34:	00000000 	.word	0x00000000

08011c38 <uxr_run_session_until_pong>:
 8011c38:	b570      	push	{r4, r5, r6, lr}
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	460d      	mov	r5, r1
 8011c3e:	f001 f937 	bl	8012eb0 <uxr_millis>
 8011c42:	4606      	mov	r6, r0
 8011c44:	4620      	mov	r0, r4
 8011c46:	f7ff fb97 	bl	8011378 <uxr_flash_output_streams>
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	f884 30b5 	strb.w	r3, [r4, #181]	@ 0xb5
 8011c50:	4629      	mov	r1, r5
 8011c52:	e005      	b.n	8011c60 <uxr_run_session_until_pong+0x28>
 8011c54:	f001 f92c 	bl	8012eb0 <uxr_millis>
 8011c58:	1b81      	subs	r1, r0, r6
 8011c5a:	1a69      	subs	r1, r5, r1
 8011c5c:	2900      	cmp	r1, #0
 8011c5e:	dd0c      	ble.n	8011c7a <uxr_run_session_until_pong+0x42>
 8011c60:	4620      	mov	r0, r4
 8011c62:	f7ff fdad 	bl	80117c0 <listen_message_reliably>
 8011c66:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8011c6a:	2800      	cmp	r0, #0
 8011c6c:	d0f2      	beq.n	8011c54 <uxr_run_session_until_pong+0x1c>
 8011c6e:	f1a0 0001 	sub.w	r0, r0, #1
 8011c72:	fab0 f080 	clz	r0, r0
 8011c76:	0940      	lsrs	r0, r0, #5
 8011c78:	bd70      	pop	{r4, r5, r6, pc}
 8011c7a:	f894 00b5 	ldrb.w	r0, [r4, #181]	@ 0xb5
 8011c7e:	f1a0 0001 	sub.w	r0, r0, #1
 8011c82:	fab0 f080 	clz	r0, r0
 8011c86:	0940      	lsrs	r0, r0, #5
 8011c88:	bd70      	pop	{r4, r5, r6, pc}
 8011c8a:	bf00      	nop

08011c8c <wait_session_status>:
 8011c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c90:	4604      	mov	r4, r0
 8011c92:	20ff      	movs	r0, #255	@ 0xff
 8011c94:	b09f      	sub	sp, #124	@ 0x7c
 8011c96:	7160      	strb	r0, [r4, #5]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	f000 80bb 	beq.w	8011e14 <wait_session_status+0x188>
 8011c9e:	4692      	mov	sl, r2
 8011ca0:	469b      	mov	fp, r3
 8011ca2:	f04f 0800 	mov.w	r8, #0
 8011ca6:	9105      	str	r1, [sp, #20]
 8011ca8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011caa:	9905      	ldr	r1, [sp, #20]
 8011cac:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011cb0:	4652      	mov	r2, sl
 8011cb2:	47a8      	blx	r5
 8011cb4:	f001 f8fc 	bl	8012eb0 <uxr_millis>
 8011cb8:	2700      	movs	r7, #0
 8011cba:	4605      	mov	r5, r0
 8011cbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011cc0:	e009      	b.n	8011cd6 <wait_session_status+0x4a>
 8011cc2:	f001 f8f5 	bl	8012eb0 <uxr_millis>
 8011cc6:	1b43      	subs	r3, r0, r5
 8011cc8:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	7962      	ldrb	r2, [r4, #5]
 8011cd0:	dd3d      	ble.n	8011d4e <wait_session_status+0xc2>
 8011cd2:	2aff      	cmp	r2, #255	@ 0xff
 8011cd4:	d13b      	bne.n	8011d4e <wait_session_status+0xc2>
 8011cd6:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011cd8:	a90a      	add	r1, sp, #40	@ 0x28
 8011cda:	6896      	ldr	r6, [r2, #8]
 8011cdc:	6810      	ldr	r0, [r2, #0]
 8011cde:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011ce0:	47b0      	blx	r6
 8011ce2:	2800      	cmp	r0, #0
 8011ce4:	d0ed      	beq.n	8011cc2 <wait_session_status+0x36>
 8011ce6:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8011cea:	a80e      	add	r0, sp, #56	@ 0x38
 8011cec:	f7fe fd1e 	bl	801072c <ucdr_init_buffer>
 8011cf0:	f10d 0326 	add.w	r3, sp, #38	@ 0x26
 8011cf4:	aa09      	add	r2, sp, #36	@ 0x24
 8011cf6:	a90e      	add	r1, sp, #56	@ 0x38
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	f88d 7024 	strb.w	r7, [sp, #36]	@ 0x24
 8011cfe:	f000 fa9b 	bl	8012238 <uxr_read_session_header>
 8011d02:	2800      	cmp	r0, #0
 8011d04:	d0dd      	beq.n	8011cc2 <wait_session_status+0x36>
 8011d06:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8011d0a:	2100      	movs	r1, #0
 8011d0c:	f000 ff8a 	bl	8012c24 <uxr_stream_id_from_raw>
 8011d10:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 8011d14:	9304      	str	r3, [sp, #16]
 8011d16:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8011d1a:	b2c3      	uxtb	r3, r0
 8011d1c:	f1b9 0f01 	cmp.w	r9, #1
 8011d20:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8011d24:	9303      	str	r3, [sp, #12]
 8011d26:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011d2a:	d05d      	beq.n	8011de8 <wait_session_status+0x15c>
 8011d2c:	f1b9 0f02 	cmp.w	r9, #2
 8011d30:	d01a      	beq.n	8011d68 <wait_session_status+0xdc>
 8011d32:	f1b9 0f00 	cmp.w	r9, #0
 8011d36:	d1c4      	bne.n	8011cc2 <wait_session_status+0x36>
 8011d38:	4649      	mov	r1, r9
 8011d3a:	4648      	mov	r0, r9
 8011d3c:	f000 ff72 	bl	8012c24 <uxr_stream_id_from_raw>
 8011d40:	a90e      	add	r1, sp, #56	@ 0x38
 8011d42:	4602      	mov	r2, r0
 8011d44:	900d      	str	r0, [sp, #52]	@ 0x34
 8011d46:	4620      	mov	r0, r4
 8011d48:	f7ff fbca 	bl	80114e0 <read_submessage_list>
 8011d4c:	e7b9      	b.n	8011cc2 <wait_session_status+0x36>
 8011d4e:	f108 0801 	add.w	r8, r8, #1
 8011d52:	45c3      	cmp	fp, r8
 8011d54:	d001      	beq.n	8011d5a <wait_session_status+0xce>
 8011d56:	2aff      	cmp	r2, #255	@ 0xff
 8011d58:	d0a6      	beq.n	8011ca8 <wait_session_status+0x1c>
 8011d5a:	f1b2 00ff 	subs.w	r0, r2, #255	@ 0xff
 8011d5e:	bf18      	it	ne
 8011d60:	2001      	movne	r0, #1
 8011d62:	b01f      	add	sp, #124	@ 0x7c
 8011d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d68:	4631      	mov	r1, r6
 8011d6a:	f104 0008 	add.w	r0, r4, #8
 8011d6e:	f001 f839 	bl	8012de4 <uxr_get_input_reliable_stream>
 8011d72:	9006      	str	r0, [sp, #24]
 8011d74:	2800      	cmp	r0, #0
 8011d76:	d031      	beq.n	8011ddc <wait_session_status+0x150>
 8011d78:	aa0e      	add	r2, sp, #56	@ 0x38
 8011d7a:	4610      	mov	r0, r2
 8011d7c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011d7e:	9207      	str	r2, [sp, #28]
 8011d80:	f7fe fd04 	bl	801078c <ucdr_buffer_remaining>
 8011d84:	4603      	mov	r3, r0
 8011d86:	f10d 0025 	add.w	r0, sp, #37	@ 0x25
 8011d8a:	9000      	str	r0, [sp, #0]
 8011d8c:	9a07      	ldr	r2, [sp, #28]
 8011d8e:	9904      	ldr	r1, [sp, #16]
 8011d90:	9806      	ldr	r0, [sp, #24]
 8011d92:	f007 ffff 	bl	8019d94 <uxr_receive_reliable_message>
 8011d96:	b308      	cbz	r0, 8011ddc <wait_session_status+0x150>
 8011d98:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d041      	beq.n	8011e24 <wait_session_status+0x198>
 8011da0:	f8cd 8010 	str.w	r8, [sp, #16]
 8011da4:	9507      	str	r5, [sp, #28]
 8011da6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011daa:	9d06      	ldr	r5, [sp, #24]
 8011dac:	f04f 0902 	mov.w	r9, #2
 8011db0:	e00a      	b.n	8011dc8 <wait_session_status+0x13c>
 8011db2:	f88d 8034 	strb.w	r8, [sp, #52]	@ 0x34
 8011db6:	f88d 6035 	strb.w	r6, [sp, #53]	@ 0x35
 8011dba:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8011dbe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011dc0:	a916      	add	r1, sp, #88	@ 0x58
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f7ff fb8c 	bl	80114e0 <read_submessage_list>
 8011dc8:	2204      	movs	r2, #4
 8011dca:	a916      	add	r1, sp, #88	@ 0x58
 8011dcc:	4628      	mov	r0, r5
 8011dce:	f008 f85b 	bl	8019e88 <uxr_next_input_reliable_buffer_available>
 8011dd2:	2800      	cmp	r0, #0
 8011dd4:	d1ed      	bne.n	8011db2 <wait_session_status+0x126>
 8011dd6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011dda:	9d07      	ldr	r5, [sp, #28]
 8011ddc:	9903      	ldr	r1, [sp, #12]
 8011dde:	4632      	mov	r2, r6
 8011de0:	4620      	mov	r0, r4
 8011de2:	f7ff fa23 	bl	801122c <write_submessage_acknack.isra.0>
 8011de6:	e76c      	b.n	8011cc2 <wait_session_status+0x36>
 8011de8:	4631      	mov	r1, r6
 8011dea:	f104 0008 	add.w	r0, r4, #8
 8011dee:	f000 ffef 	bl	8012dd0 <uxr_get_input_best_effort_stream>
 8011df2:	2800      	cmp	r0, #0
 8011df4:	f43f af65 	beq.w	8011cc2 <wait_session_status+0x36>
 8011df8:	9904      	ldr	r1, [sp, #16]
 8011dfa:	f007 ff3b 	bl	8019c74 <uxr_receive_best_effort_message>
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	f43f af5f 	beq.w	8011cc2 <wait_session_status+0x36>
 8011e04:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8011e08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011e0a:	a90e      	add	r1, sp, #56	@ 0x38
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	f7ff fb67 	bl	80114e0 <read_submessage_list>
 8011e12:	e756      	b.n	8011cc2 <wait_session_status+0x36>
 8011e14:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011e16:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011e1a:	47a0      	blx	r4
 8011e1c:	2001      	movs	r0, #1
 8011e1e:	b01f      	add	sp, #124	@ 0x7c
 8011e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e24:	f88d 9036 	strb.w	r9, [sp, #54]	@ 0x36
 8011e28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011e2a:	a90e      	add	r1, sp, #56	@ 0x38
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	f7ff fb57 	bl	80114e0 <read_submessage_list>
 8011e32:	e7b5      	b.n	8011da0 <wait_session_status+0x114>

08011e34 <uxr_delete_session_retries>:
 8011e34:	b530      	push	{r4, r5, lr}
 8011e36:	b08f      	sub	sp, #60	@ 0x3c
 8011e38:	4604      	mov	r4, r0
 8011e3a:	460d      	mov	r5, r1
 8011e3c:	f000 fa3a 	bl	80122b4 <uxr_session_header_offset>
 8011e40:	2300      	movs	r3, #0
 8011e42:	2210      	movs	r2, #16
 8011e44:	9000      	str	r0, [sp, #0]
 8011e46:	a902      	add	r1, sp, #8
 8011e48:	a806      	add	r0, sp, #24
 8011e4a:	f7fe fc5d 	bl	8010708 <ucdr_init_buffer_origin_offset>
 8011e4e:	a906      	add	r1, sp, #24
 8011e50:	4620      	mov	r0, r4
 8011e52:	f000 f981 	bl	8012158 <uxr_buffer_delete_session>
 8011e56:	2200      	movs	r2, #0
 8011e58:	4611      	mov	r1, r2
 8011e5a:	9b06      	ldr	r3, [sp, #24]
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f000 f9d5 	bl	801220c <uxr_stamp_session_header>
 8011e62:	a806      	add	r0, sp, #24
 8011e64:	f7fe fc8e 	bl	8010784 <ucdr_buffer_length>
 8011e68:	462b      	mov	r3, r5
 8011e6a:	4602      	mov	r2, r0
 8011e6c:	a902      	add	r1, sp, #8
 8011e6e:	4620      	mov	r0, r4
 8011e70:	f7ff ff0c 	bl	8011c8c <wait_session_status>
 8011e74:	b118      	cbz	r0, 8011e7e <uxr_delete_session_retries+0x4a>
 8011e76:	7960      	ldrb	r0, [r4, #5]
 8011e78:	fab0 f080 	clz	r0, r0
 8011e7c:	0940      	lsrs	r0, r0, #5
 8011e7e:	b00f      	add	sp, #60	@ 0x3c
 8011e80:	bd30      	pop	{r4, r5, pc}
 8011e82:	bf00      	nop

08011e84 <uxr_create_session>:
 8011e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e88:	f100 0308 	add.w	r3, r0, #8
 8011e8c:	b0ab      	sub	sp, #172	@ 0xac
 8011e8e:	4604      	mov	r4, r0
 8011e90:	4618      	mov	r0, r3
 8011e92:	9303      	str	r3, [sp, #12]
 8011e94:	f000 feec 	bl	8012c70 <uxr_reset_stream_storage>
 8011e98:	4620      	mov	r0, r4
 8011e9a:	f000 fa0b 	bl	80122b4 <uxr_session_header_offset>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	9000      	str	r0, [sp, #0]
 8011ea2:	221c      	movs	r2, #28
 8011ea4:	a90b      	add	r1, sp, #44	@ 0x2c
 8011ea6:	a812      	add	r0, sp, #72	@ 0x48
 8011ea8:	f7fe fc2e 	bl	8010708 <ucdr_init_buffer_origin_offset>
 8011eac:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011eae:	8a1a      	ldrh	r2, [r3, #16]
 8011eb0:	3a04      	subs	r2, #4
 8011eb2:	b292      	uxth	r2, r2
 8011eb4:	a912      	add	r1, sp, #72	@ 0x48
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f000 f924 	bl	8012104 <uxr_buffer_create_session>
 8011ebc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	f000 f990 	bl	80121e4 <uxr_stamp_create_session_header>
 8011ec4:	a812      	add	r0, sp, #72	@ 0x48
 8011ec6:	f7fe fc5d 	bl	8010784 <ucdr_buffer_length>
 8011eca:	23ff      	movs	r3, #255	@ 0xff
 8011ecc:	4683      	mov	fp, r0
 8011ece:	7163      	strb	r3, [r4, #5]
 8011ed0:	f04f 080a 	mov.w	r8, #10
 8011ed4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011ed6:	465a      	mov	r2, fp
 8011ed8:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011edc:	a90b      	add	r1, sp, #44	@ 0x2c
 8011ede:	47a8      	blx	r5
 8011ee0:	f000 ffe6 	bl	8012eb0 <uxr_millis>
 8011ee4:	2700      	movs	r7, #0
 8011ee6:	4605      	mov	r5, r0
 8011ee8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011eec:	e009      	b.n	8011f02 <uxr_create_session+0x7e>
 8011eee:	f000 ffdf 	bl	8012eb0 <uxr_millis>
 8011ef2:	1b43      	subs	r3, r0, r5
 8011ef4:	f5c3 737a 	rsb	r3, r3, #1000	@ 0x3e8
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	7962      	ldrb	r2, [r4, #5]
 8011efc:	dd3d      	ble.n	8011f7a <uxr_create_session+0xf6>
 8011efe:	2aff      	cmp	r2, #255	@ 0xff
 8011f00:	d13b      	bne.n	8011f7a <uxr_create_session+0xf6>
 8011f02:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011f04:	a907      	add	r1, sp, #28
 8011f06:	6896      	ldr	r6, [r2, #8]
 8011f08:	6810      	ldr	r0, [r2, #0]
 8011f0a:	aa08      	add	r2, sp, #32
 8011f0c:	47b0      	blx	r6
 8011f0e:	2800      	cmp	r0, #0
 8011f10:	d0ed      	beq.n	8011eee <uxr_create_session+0x6a>
 8011f12:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011f16:	a81a      	add	r0, sp, #104	@ 0x68
 8011f18:	f7fe fc08 	bl	801072c <ucdr_init_buffer>
 8011f1c:	f10d 031a 	add.w	r3, sp, #26
 8011f20:	aa06      	add	r2, sp, #24
 8011f22:	a91a      	add	r1, sp, #104	@ 0x68
 8011f24:	4620      	mov	r0, r4
 8011f26:	f88d 7018 	strb.w	r7, [sp, #24]
 8011f2a:	f000 f985 	bl	8012238 <uxr_read_session_header>
 8011f2e:	2800      	cmp	r0, #0
 8011f30:	d0dd      	beq.n	8011eee <uxr_create_session+0x6a>
 8011f32:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011f36:	2100      	movs	r1, #0
 8011f38:	f000 fe74 	bl	8012c24 <uxr_stream_id_from_raw>
 8011f3c:	f3c0 4907 	ubfx	r9, r0, #16, #8
 8011f40:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8011f44:	9302      	str	r3, [sp, #8]
 8011f46:	f1b9 0f01 	cmp.w	r9, #1
 8011f4a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011f4e:	fa5f fa80 	uxtb.w	sl, r0
 8011f52:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011f56:	d056      	beq.n	8012006 <uxr_create_session+0x182>
 8011f58:	f1b9 0f02 	cmp.w	r9, #2
 8011f5c:	d018      	beq.n	8011f90 <uxr_create_session+0x10c>
 8011f5e:	f1b9 0f00 	cmp.w	r9, #0
 8011f62:	d1c4      	bne.n	8011eee <uxr_create_session+0x6a>
 8011f64:	4649      	mov	r1, r9
 8011f66:	4648      	mov	r0, r9
 8011f68:	f000 fe5c 	bl	8012c24 <uxr_stream_id_from_raw>
 8011f6c:	a91a      	add	r1, sp, #104	@ 0x68
 8011f6e:	4602      	mov	r2, r0
 8011f70:	900a      	str	r0, [sp, #40]	@ 0x28
 8011f72:	4620      	mov	r0, r4
 8011f74:	f7ff fab4 	bl	80114e0 <read_submessage_list>
 8011f78:	e7b9      	b.n	8011eee <uxr_create_session+0x6a>
 8011f7a:	f1b8 0801 	subs.w	r8, r8, #1
 8011f7e:	d001      	beq.n	8011f84 <uxr_create_session+0x100>
 8011f80:	2aff      	cmp	r2, #255	@ 0xff
 8011f82:	d0a7      	beq.n	8011ed4 <uxr_create_session+0x50>
 8011f84:	2a00      	cmp	r2, #0
 8011f86:	d05b      	beq.n	8012040 <uxr_create_session+0x1bc>
 8011f88:	2000      	movs	r0, #0
 8011f8a:	b02b      	add	sp, #172	@ 0xac
 8011f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f90:	9803      	ldr	r0, [sp, #12]
 8011f92:	4631      	mov	r1, r6
 8011f94:	f000 ff26 	bl	8012de4 <uxr_get_input_reliable_stream>
 8011f98:	9004      	str	r0, [sp, #16]
 8011f9a:	b370      	cbz	r0, 8011ffa <uxr_create_session+0x176>
 8011f9c:	aa1a      	add	r2, sp, #104	@ 0x68
 8011f9e:	4610      	mov	r0, r2
 8011fa0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011fa2:	9205      	str	r2, [sp, #20]
 8011fa4:	f7fe fbf2 	bl	801078c <ucdr_buffer_remaining>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	f10d 0019 	add.w	r0, sp, #25
 8011fae:	9000      	str	r0, [sp, #0]
 8011fb0:	9a05      	ldr	r2, [sp, #20]
 8011fb2:	9902      	ldr	r1, [sp, #8]
 8011fb4:	9804      	ldr	r0, [sp, #16]
 8011fb6:	f007 feed 	bl	8019d94 <uxr_receive_reliable_message>
 8011fba:	b1f0      	cbz	r0, 8011ffa <uxr_create_session+0x176>
 8011fbc:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d035      	beq.n	8012030 <uxr_create_session+0x1ac>
 8011fc4:	f8cd b008 	str.w	fp, [sp, #8]
 8011fc8:	f04f 0902 	mov.w	r9, #2
 8011fcc:	f8dd b010 	ldr.w	fp, [sp, #16]
 8011fd0:	e00a      	b.n	8011fe8 <uxr_create_session+0x164>
 8011fd2:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8011fd6:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8011fda:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8011fde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011fe0:	a922      	add	r1, sp, #136	@ 0x88
 8011fe2:	4620      	mov	r0, r4
 8011fe4:	f7ff fa7c 	bl	80114e0 <read_submessage_list>
 8011fe8:	2204      	movs	r2, #4
 8011fea:	a922      	add	r1, sp, #136	@ 0x88
 8011fec:	4658      	mov	r0, fp
 8011fee:	f007 ff4b 	bl	8019e88 <uxr_next_input_reliable_buffer_available>
 8011ff2:	2800      	cmp	r0, #0
 8011ff4:	d1ed      	bne.n	8011fd2 <uxr_create_session+0x14e>
 8011ff6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8011ffa:	4632      	mov	r2, r6
 8011ffc:	4651      	mov	r1, sl
 8011ffe:	4620      	mov	r0, r4
 8012000:	f7ff f914 	bl	801122c <write_submessage_acknack.isra.0>
 8012004:	e773      	b.n	8011eee <uxr_create_session+0x6a>
 8012006:	9803      	ldr	r0, [sp, #12]
 8012008:	4631      	mov	r1, r6
 801200a:	f000 fee1 	bl	8012dd0 <uxr_get_input_best_effort_stream>
 801200e:	2800      	cmp	r0, #0
 8012010:	f43f af6d 	beq.w	8011eee <uxr_create_session+0x6a>
 8012014:	9902      	ldr	r1, [sp, #8]
 8012016:	f007 fe2d 	bl	8019c74 <uxr_receive_best_effort_message>
 801201a:	2800      	cmp	r0, #0
 801201c:	f43f af67 	beq.w	8011eee <uxr_create_session+0x6a>
 8012020:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8012024:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012026:	a91a      	add	r1, sp, #104	@ 0x68
 8012028:	4620      	mov	r0, r4
 801202a:	f7ff fa59 	bl	80114e0 <read_submessage_list>
 801202e:	e75e      	b.n	8011eee <uxr_create_session+0x6a>
 8012030:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8012034:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012036:	a91a      	add	r1, sp, #104	@ 0x68
 8012038:	4620      	mov	r0, r4
 801203a:	f7ff fa51 	bl	80114e0 <read_submessage_list>
 801203e:	e7c1      	b.n	8011fc4 <uxr_create_session+0x140>
 8012040:	9803      	ldr	r0, [sp, #12]
 8012042:	f000 fe15 	bl	8012c70 <uxr_reset_stream_storage>
 8012046:	2001      	movs	r0, #1
 8012048:	b02b      	add	sp, #172	@ 0xac
 801204a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801204e:	bf00      	nop

08012050 <uxr_prepare_stream_to_write_submessage>:
 8012050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012054:	b082      	sub	sp, #8
 8012056:	4606      	mov	r6, r0
 8012058:	4610      	mov	r0, r2
 801205a:	4614      	mov	r4, r2
 801205c:	9101      	str	r1, [sp, #4]
 801205e:	461f      	mov	r7, r3
 8012060:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8012064:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 8012068:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801206c:	f000 ff1a 	bl	8012ea4 <uxr_submessage_padding>
 8012070:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012074:	1d21      	adds	r1, r4, #4
 8012076:	2b01      	cmp	r3, #1
 8012078:	eb01 0a00 	add.w	sl, r1, r0
 801207c:	d012      	beq.n	80120a4 <uxr_prepare_stream_to_write_submessage+0x54>
 801207e:	2b02      	cmp	r3, #2
 8012080:	d003      	beq.n	801208a <uxr_prepare_stream_to_write_submessage+0x3a>
 8012082:	2000      	movs	r0, #0
 8012084:	b002      	add	sp, #8
 8012086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801208a:	4629      	mov	r1, r5
 801208c:	f106 0008 	add.w	r0, r6, #8
 8012090:	f000 fe94 	bl	8012dbc <uxr_get_output_reliable_stream>
 8012094:	2800      	cmp	r0, #0
 8012096:	d0f4      	beq.n	8012082 <uxr_prepare_stream_to_write_submessage+0x32>
 8012098:	4651      	mov	r1, sl
 801209a:	463a      	mov	r2, r7
 801209c:	f008 f8aa 	bl	801a1f4 <uxr_prepare_reliable_buffer_to_write>
 80120a0:	b968      	cbnz	r0, 80120be <uxr_prepare_stream_to_write_submessage+0x6e>
 80120a2:	e7ee      	b.n	8012082 <uxr_prepare_stream_to_write_submessage+0x32>
 80120a4:	4629      	mov	r1, r5
 80120a6:	f106 0008 	add.w	r0, r6, #8
 80120aa:	f000 fe7f 	bl	8012dac <uxr_get_output_best_effort_stream>
 80120ae:	2800      	cmp	r0, #0
 80120b0:	d0e7      	beq.n	8012082 <uxr_prepare_stream_to_write_submessage+0x32>
 80120b2:	4651      	mov	r1, sl
 80120b4:	463a      	mov	r2, r7
 80120b6:	f007 ffcf 	bl	801a058 <uxr_prepare_best_effort_buffer_to_write>
 80120ba:	2800      	cmp	r0, #0
 80120bc:	d0e1      	beq.n	8012082 <uxr_prepare_stream_to_write_submessage+0x32>
 80120be:	464b      	mov	r3, r9
 80120c0:	b2a2      	uxth	r2, r4
 80120c2:	4641      	mov	r1, r8
 80120c4:	4638      	mov	r0, r7
 80120c6:	f000 fead 	bl	8012e24 <uxr_buffer_submessage_header>
 80120ca:	2001      	movs	r0, #1
 80120cc:	b002      	add	sp, #8
 80120ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120d2:	bf00      	nop

080120d4 <uxr_init_session_info>:
 80120d4:	2300      	movs	r3, #0
 80120d6:	f361 0307 	bfi	r3, r1, #0, #8
 80120da:	0e11      	lsrs	r1, r2, #24
 80120dc:	f361 230f 	bfi	r3, r1, #8, #8
 80120e0:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80120e4:	f361 4317 	bfi	r3, r1, #16, #8
 80120e8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80120ec:	f361 631f 	bfi	r3, r1, #24, #8
 80120f0:	f04f 0c09 	mov.w	ip, #9
 80120f4:	21ff      	movs	r1, #255	@ 0xff
 80120f6:	6003      	str	r3, [r0, #0]
 80120f8:	7102      	strb	r2, [r0, #4]
 80120fa:	f8a0 c006 	strh.w	ip, [r0, #6]
 80120fe:	7141      	strb	r1, [r0, #5]
 8012100:	4770      	bx	lr
 8012102:	bf00      	nop

08012104 <uxr_buffer_create_session>:
 8012104:	b530      	push	{r4, r5, lr}
 8012106:	4d13      	ldr	r5, [pc, #76]	@ (8012154 <uxr_buffer_create_session+0x50>)
 8012108:	b089      	sub	sp, #36	@ 0x24
 801210a:	2300      	movs	r3, #0
 801210c:	9307      	str	r3, [sp, #28]
 801210e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012112:	682a      	ldr	r2, [r5, #0]
 8012114:	9200      	str	r2, [sp, #0]
 8012116:	460c      	mov	r4, r1
 8012118:	2201      	movs	r2, #1
 801211a:	88a9      	ldrh	r1, [r5, #4]
 801211c:	9301      	str	r3, [sp, #4]
 801211e:	80c2      	strh	r2, [r0, #6]
 8012120:	f8ad 1006 	strh.w	r1, [sp, #6]
 8012124:	f8d0 1001 	ldr.w	r1, [r0, #1]
 8012128:	7800      	ldrb	r0, [r0, #0]
 801212a:	9303      	str	r3, [sp, #12]
 801212c:	f88d 2004 	strb.w	r2, [sp, #4]
 8012130:	9102      	str	r1, [sp, #8]
 8012132:	2210      	movs	r2, #16
 8012134:	4619      	mov	r1, r3
 8012136:	f88d 000c 	strb.w	r0, [sp, #12]
 801213a:	4620      	mov	r0, r4
 801213c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012140:	9306      	str	r3, [sp, #24]
 8012142:	f000 fe6f 	bl	8012e24 <uxr_buffer_submessage_header>
 8012146:	4669      	mov	r1, sp
 8012148:	4620      	mov	r0, r4
 801214a:	f001 fe8f 	bl	8013e6c <uxr_serialize_CREATE_CLIENT_Payload>
 801214e:	b009      	add	sp, #36	@ 0x24
 8012150:	bd30      	pop	{r4, r5, pc}
 8012152:	bf00      	nop
 8012154:	0801d04c 	.word	0x0801d04c

08012158 <uxr_buffer_delete_session>:
 8012158:	b510      	push	{r4, lr}
 801215a:	4a0c      	ldr	r2, [pc, #48]	@ (801218c <uxr_buffer_delete_session+0x34>)
 801215c:	b082      	sub	sp, #8
 801215e:	460c      	mov	r4, r1
 8012160:	2302      	movs	r3, #2
 8012162:	8911      	ldrh	r1, [r2, #8]
 8012164:	80c3      	strh	r3, [r0, #6]
 8012166:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 801216a:	2300      	movs	r3, #0
 801216c:	2204      	movs	r2, #4
 801216e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8012172:	4620      	mov	r0, r4
 8012174:	2103      	movs	r1, #3
 8012176:	f8ad c004 	strh.w	ip, [sp, #4]
 801217a:	f000 fe53 	bl	8012e24 <uxr_buffer_submessage_header>
 801217e:	a901      	add	r1, sp, #4
 8012180:	4620      	mov	r0, r4
 8012182:	f001 ff2b 	bl	8013fdc <uxr_serialize_DELETE_Payload>
 8012186:	b002      	add	sp, #8
 8012188:	bd10      	pop	{r4, pc}
 801218a:	bf00      	nop
 801218c:	0801d04c 	.word	0x0801d04c

08012190 <uxr_read_create_session_status>:
 8012190:	b510      	push	{r4, lr}
 8012192:	460b      	mov	r3, r1
 8012194:	b088      	sub	sp, #32
 8012196:	4604      	mov	r4, r0
 8012198:	a901      	add	r1, sp, #4
 801219a:	4618      	mov	r0, r3
 801219c:	f001 ff2e 	bl	8013ffc <uxr_deserialize_STATUS_AGENT_Payload>
 80121a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80121a4:	7163      	strb	r3, [r4, #5]
 80121a6:	b008      	add	sp, #32
 80121a8:	bd10      	pop	{r4, pc}
 80121aa:	bf00      	nop

080121ac <uxr_read_delete_session_status>:
 80121ac:	b510      	push	{r4, lr}
 80121ae:	460b      	mov	r3, r1
 80121b0:	b082      	sub	sp, #8
 80121b2:	4604      	mov	r4, r0
 80121b4:	4669      	mov	r1, sp
 80121b6:	4618      	mov	r0, r3
 80121b8:	f001 ff50 	bl	801405c <uxr_deserialize_STATUS_Payload>
 80121bc:	88e3      	ldrh	r3, [r4, #6]
 80121be:	2b02      	cmp	r3, #2
 80121c0:	d001      	beq.n	80121c6 <uxr_read_delete_session_status+0x1a>
 80121c2:	b002      	add	sp, #8
 80121c4:	bd10      	pop	{r4, pc}
 80121c6:	f10d 0002 	add.w	r0, sp, #2
 80121ca:	f7fe fead 	bl	8010f28 <uxr_object_id_from_raw>
 80121ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80121d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80121d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80121da:	bf08      	it	eq
 80121dc:	7162      	strbeq	r2, [r4, #5]
 80121de:	b002      	add	sp, #8
 80121e0:	bd10      	pop	{r4, pc}
 80121e2:	bf00      	nop

080121e4 <uxr_stamp_create_session_header>:
 80121e4:	b510      	push	{r4, lr}
 80121e6:	2208      	movs	r2, #8
 80121e8:	b08a      	sub	sp, #40	@ 0x28
 80121ea:	4604      	mov	r4, r0
 80121ec:	eb0d 0002 	add.w	r0, sp, r2
 80121f0:	f7fe fa9c 	bl	801072c <ucdr_init_buffer>
 80121f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121f8:	9400      	str	r4, [sp, #0]
 80121fa:	2300      	movs	r3, #0
 80121fc:	461a      	mov	r2, r3
 80121fe:	a802      	add	r0, sp, #8
 8012200:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8012204:	f001 f80c 	bl	8013220 <uxr_serialize_message_header>
 8012208:	b00a      	add	sp, #40	@ 0x28
 801220a:	bd10      	pop	{r4, pc}

0801220c <uxr_stamp_session_header>:
 801220c:	b570      	push	{r4, r5, r6, lr}
 801220e:	4604      	mov	r4, r0
 8012210:	b08a      	sub	sp, #40	@ 0x28
 8012212:	4616      	mov	r6, r2
 8012214:	2208      	movs	r2, #8
 8012216:	eb0d 0002 	add.w	r0, sp, r2
 801221a:	460d      	mov	r5, r1
 801221c:	4619      	mov	r1, r3
 801221e:	f7fe fa85 	bl	801072c <ucdr_init_buffer>
 8012222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012226:	9400      	str	r4, [sp, #0]
 8012228:	4633      	mov	r3, r6
 801222a:	462a      	mov	r2, r5
 801222c:	a802      	add	r0, sp, #8
 801222e:	f000 fff7 	bl	8013220 <uxr_serialize_message_header>
 8012232:	b00a      	add	sp, #40	@ 0x28
 8012234:	bd70      	pop	{r4, r5, r6, pc}
 8012236:	bf00      	nop

08012238 <uxr_read_session_header>:
 8012238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801223a:	4607      	mov	r7, r0
 801223c:	b085      	sub	sp, #20
 801223e:	4608      	mov	r0, r1
 8012240:	460c      	mov	r4, r1
 8012242:	4615      	mov	r5, r2
 8012244:	461e      	mov	r6, r3
 8012246:	f7fe faa1 	bl	801078c <ucdr_buffer_remaining>
 801224a:	2808      	cmp	r0, #8
 801224c:	d802      	bhi.n	8012254 <uxr_read_session_header+0x1c>
 801224e:	2000      	movs	r0, #0
 8012250:	b005      	add	sp, #20
 8012252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012254:	ab03      	add	r3, sp, #12
 8012256:	9300      	str	r3, [sp, #0]
 8012258:	462a      	mov	r2, r5
 801225a:	4633      	mov	r3, r6
 801225c:	f10d 010b 	add.w	r1, sp, #11
 8012260:	4620      	mov	r0, r4
 8012262:	f000 fffb 	bl	801325c <uxr_deserialize_message_header>
 8012266:	783a      	ldrb	r2, [r7, #0]
 8012268:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801226c:	4293      	cmp	r3, r2
 801226e:	d1ee      	bne.n	801224e <uxr_read_session_header+0x16>
 8012270:	061b      	lsls	r3, r3, #24
 8012272:	d41c      	bmi.n	80122ae <uxr_read_session_header+0x76>
 8012274:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8012278:	787b      	ldrb	r3, [r7, #1]
 801227a:	429a      	cmp	r2, r3
 801227c:	d003      	beq.n	8012286 <uxr_read_session_header+0x4e>
 801227e:	2001      	movs	r0, #1
 8012280:	f080 0001 	eor.w	r0, r0, #1
 8012284:	e7e4      	b.n	8012250 <uxr_read_session_header+0x18>
 8012286:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801228a:	78bb      	ldrb	r3, [r7, #2]
 801228c:	429a      	cmp	r2, r3
 801228e:	f107 0102 	add.w	r1, r7, #2
 8012292:	d1f4      	bne.n	801227e <uxr_read_session_header+0x46>
 8012294:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012298:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801229c:	429a      	cmp	r2, r3
 801229e:	d1ee      	bne.n	801227e <uxr_read_session_header+0x46>
 80122a0:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80122a4:	784b      	ldrb	r3, [r1, #1]
 80122a6:	429a      	cmp	r2, r3
 80122a8:	d1e9      	bne.n	801227e <uxr_read_session_header+0x46>
 80122aa:	2000      	movs	r0, #0
 80122ac:	e7e8      	b.n	8012280 <uxr_read_session_header+0x48>
 80122ae:	2001      	movs	r0, #1
 80122b0:	e7ce      	b.n	8012250 <uxr_read_session_header+0x18>
 80122b2:	bf00      	nop

080122b4 <uxr_session_header_offset>:
 80122b4:	f990 3000 	ldrsb.w	r3, [r0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	bfb4      	ite	lt
 80122bc:	2004      	movlt	r0, #4
 80122be:	2008      	movge	r0, #8
 80122c0:	4770      	bx	lr
 80122c2:	bf00      	nop

080122c4 <uxr_init_base_object_request>:
 80122c4:	b510      	push	{r4, lr}
 80122c6:	88c3      	ldrh	r3, [r0, #6]
 80122c8:	b082      	sub	sp, #8
 80122ca:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80122ce:	9101      	str	r1, [sp, #4]
 80122d0:	f1a3 010a 	sub.w	r1, r3, #10
 80122d4:	b289      	uxth	r1, r1
 80122d6:	42a1      	cmp	r1, r4
 80122d8:	d80e      	bhi.n	80122f8 <uxr_init_base_object_request+0x34>
 80122da:	3301      	adds	r3, #1
 80122dc:	b29c      	uxth	r4, r3
 80122de:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	80c4      	strh	r4, [r0, #6]
 80122e6:	9801      	ldr	r0, [sp, #4]
 80122e8:	7011      	strb	r1, [r2, #0]
 80122ea:	7053      	strb	r3, [r2, #1]
 80122ec:	1c91      	adds	r1, r2, #2
 80122ee:	f7fe fe2f 	bl	8010f50 <uxr_object_id_to_raw>
 80122f2:	4620      	mov	r0, r4
 80122f4:	b002      	add	sp, #8
 80122f6:	bd10      	pop	{r4, pc}
 80122f8:	230a      	movs	r3, #10
 80122fa:	2100      	movs	r1, #0
 80122fc:	461c      	mov	r4, r3
 80122fe:	e7f1      	b.n	80122e4 <uxr_init_base_object_request+0x20>

08012300 <uxr_parse_base_object_request>:
 8012300:	b570      	push	{r4, r5, r6, lr}
 8012302:	4604      	mov	r4, r0
 8012304:	3002      	adds	r0, #2
 8012306:	460d      	mov	r5, r1
 8012308:	4616      	mov	r6, r2
 801230a:	f7fe fe0d 	bl	8010f28 <uxr_object_id_from_raw>
 801230e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012312:	8028      	strh	r0, [r5, #0]
 8012314:	806b      	strh	r3, [r5, #2]
 8012316:	8823      	ldrh	r3, [r4, #0]
 8012318:	ba5b      	rev16	r3, r3
 801231a:	8033      	strh	r3, [r6, #0]
 801231c:	bd70      	pop	{r4, r5, r6, pc}
 801231e:	bf00      	nop

08012320 <uxr_init_framing_io>:
 8012320:	2300      	movs	r3, #0
 8012322:	7041      	strb	r1, [r0, #1]
 8012324:	7003      	strb	r3, [r0, #0]
 8012326:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop

0801232c <uxr_write_framed_msg>:
 801232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012330:	f890 c001 	ldrb.w	ip, [r0, #1]
 8012334:	4617      	mov	r7, r2
 8012336:	227e      	movs	r2, #126	@ 0x7e
 8012338:	b085      	sub	sp, #20
 801233a:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
 801233e:	f1ac 027d 	sub.w	r2, ip, #125	@ 0x7d
 8012342:	2a01      	cmp	r2, #1
 8012344:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8012348:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 801234c:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8012350:	4604      	mov	r4, r0
 8012352:	460e      	mov	r6, r1
 8012354:	469a      	mov	sl, r3
 8012356:	f240 812e 	bls.w	80125b6 <uxr_write_framed_msg+0x28a>
 801235a:	2003      	movs	r0, #3
 801235c:	2102      	movs	r1, #2
 801235e:	f04f 0905 	mov.w	r9, #5
 8012362:	2204      	movs	r2, #4
 8012364:	4686      	mov	lr, r0
 8012366:	460b      	mov	r3, r1
 8012368:	f884 c039 	strb.w	ip, [r4, #57]	@ 0x39
 801236c:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8012370:	f1bc 0f01 	cmp.w	ip, #1
 8012374:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012378:	4421      	add	r1, r4
 801237a:	f240 8110 	bls.w	801259e <uxr_write_framed_msg+0x272>
 801237e:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8012382:	fa5f fc8b 	uxtb.w	ip, fp
 8012386:	f3cb 2107 	ubfx	r1, fp, #8, #8
 801238a:	f1ac 0e7d 	sub.w	lr, ip, #125	@ 0x7d
 801238e:	f1a1 057d 	sub.w	r5, r1, #125	@ 0x7d
 8012392:	f1be 0f01 	cmp.w	lr, #1
 8012396:	f884 0062 	strb.w	r0, [r4, #98]	@ 0x62
 801239a:	b2ed      	uxtb	r5, r5
 801239c:	d94c      	bls.n	8012438 <uxr_write_framed_msg+0x10c>
 801239e:	4420      	add	r0, r4
 80123a0:	2d01      	cmp	r5, #1
 80123a2:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80123a6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80123aa:	d95d      	bls.n	8012468 <uxr_write_framed_msg+0x13c>
 80123ac:	18a0      	adds	r0, r4, r2
 80123ae:	3201      	adds	r2, #1
 80123b0:	b2d2      	uxtb	r2, r2
 80123b2:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80123b6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80123ba:	f1bb 0f00 	cmp.w	fp, #0
 80123be:	f000 8108 	beq.w	80125d2 <uxr_write_framed_msg+0x2a6>
 80123c2:	f04f 0c00 	mov.w	ip, #0
 80123c6:	4661      	mov	r1, ip
 80123c8:	46de      	mov	lr, fp
 80123ca:	46e3      	mov	fp, ip
 80123cc:	46d4      	mov	ip, sl
 80123ce:	468a      	mov	sl, r1
 80123d0:	f8df 9208 	ldr.w	r9, [pc, #520]	@ 80125dc <uxr_write_framed_msg+0x2b0>
 80123d4:	f81c 300a 	ldrb.w	r3, [ip, sl]
 80123d8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80123dc:	2901      	cmp	r1, #1
 80123de:	d91b      	bls.n	8012418 <uxr_write_framed_msg+0xec>
 80123e0:	2a29      	cmp	r2, #41	@ 0x29
 80123e2:	d84e      	bhi.n	8012482 <uxr_write_framed_msg+0x156>
 80123e4:	18a1      	adds	r1, r4, r2
 80123e6:	3201      	adds	r2, #1
 80123e8:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80123ec:	b2d2      	uxtb	r2, r2
 80123ee:	ea8b 0303 	eor.w	r3, fp, r3
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80123f8:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 80123fc:	f10a 0a01 	add.w	sl, sl, #1
 8012400:	ea83 2b1b 	eor.w	fp, r3, fp, lsr #8
 8012404:	45d6      	cmp	lr, sl
 8012406:	d95a      	bls.n	80124be <uxr_write_framed_msg+0x192>
 8012408:	f81c 300a 	ldrb.w	r3, [ip, sl]
 801240c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012410:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012414:	2901      	cmp	r1, #1
 8012416:	d8e3      	bhi.n	80123e0 <uxr_write_framed_msg+0xb4>
 8012418:	1c51      	adds	r1, r2, #1
 801241a:	b2c9      	uxtb	r1, r1
 801241c:	2929      	cmp	r1, #41	@ 0x29
 801241e:	d830      	bhi.n	8012482 <uxr_write_framed_msg+0x156>
 8012420:	18a1      	adds	r1, r4, r2
 8012422:	f04f 007d 	mov.w	r0, #125	@ 0x7d
 8012426:	3202      	adds	r2, #2
 8012428:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801242c:	f083 0020 	eor.w	r0, r3, #32
 8012430:	b2d2      	uxtb	r2, r2
 8012432:	f881 0039 	strb.w	r0, [r1, #57]	@ 0x39
 8012436:	e7da      	b.n	80123ee <uxr_write_framed_msg+0xc2>
 8012438:	eb04 0e00 	add.w	lr, r4, r0
 801243c:	f08c 0c20 	eor.w	ip, ip, #32
 8012440:	1c82      	adds	r2, r0, #2
 8012442:	f88e c039 	strb.w	ip, [lr, #57]	@ 0x39
 8012446:	b2d2      	uxtb	r2, r2
 8012448:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801244c:	2d01      	cmp	r5, #1
 801244e:	f88e c038 	strb.w	ip, [lr, #56]	@ 0x38
 8012452:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012456:	d907      	bls.n	8012468 <uxr_write_framed_msg+0x13c>
 8012458:	4422      	add	r2, r4
 801245a:	3003      	adds	r0, #3
 801245c:	f882 1038 	strb.w	r1, [r2, #56]	@ 0x38
 8012460:	b2c2      	uxtb	r2, r0
 8012462:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012466:	e7ac      	b.n	80123c2 <uxr_write_framed_msg+0x96>
 8012468:	18a0      	adds	r0, r4, r2
 801246a:	f081 0120 	eor.w	r1, r1, #32
 801246e:	3202      	adds	r2, #2
 8012470:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8012474:	b2d2      	uxtb	r2, r2
 8012476:	217d      	movs	r1, #125	@ 0x7d
 8012478:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801247c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012480:	e79f      	b.n	80123c2 <uxr_write_framed_msg+0x96>
 8012482:	e9cd ba00 	strd	fp, sl, [sp]
 8012486:	2500      	movs	r5, #0
 8012488:	46e2      	mov	sl, ip
 801248a:	46f3      	mov	fp, lr
 801248c:	e000      	b.n	8012490 <uxr_write_framed_msg+0x164>
 801248e:	b190      	cbz	r0, 80124b6 <uxr_write_framed_msg+0x18a>
 8012490:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012494:	1b52      	subs	r2, r2, r5
 8012496:	4643      	mov	r3, r8
 8012498:	4421      	add	r1, r4
 801249a:	4638      	mov	r0, r7
 801249c:	47b0      	blx	r6
 801249e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80124a2:	4405      	add	r5, r0
 80124a4:	4295      	cmp	r5, r2
 80124a6:	d3f2      	bcc.n	801248e <uxr_write_framed_msg+0x162>
 80124a8:	46d4      	mov	ip, sl
 80124aa:	46de      	mov	lr, fp
 80124ac:	f8dd a004 	ldr.w	sl, [sp, #4]
 80124b0:	f8dd b000 	ldr.w	fp, [sp]
 80124b4:	d06f      	beq.n	8012596 <uxr_write_framed_msg+0x26a>
 80124b6:	2000      	movs	r0, #0
 80124b8:	b005      	add	sp, #20
 80124ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124be:	46dc      	mov	ip, fp
 80124c0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80124c4:	f8ad c00c 	strh.w	ip, [sp, #12]
 80124c8:	46f3      	mov	fp, lr
 80124ca:	fa5f fc8c 	uxtb.w	ip, ip
 80124ce:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 80124d2:	2b01      	cmp	r3, #1
 80124d4:	f04f 0900 	mov.w	r9, #0
 80124d8:	f04f 0a7d 	mov.w	sl, #125	@ 0x7d
 80124dc:	d930      	bls.n	8012540 <uxr_write_framed_msg+0x214>
 80124de:	2a29      	cmp	r2, #41	@ 0x29
 80124e0:	d91c      	bls.n	801251c <uxr_write_framed_msg+0x1f0>
 80124e2:	2500      	movs	r5, #0
 80124e4:	e001      	b.n	80124ea <uxr_write_framed_msg+0x1be>
 80124e6:	2800      	cmp	r0, #0
 80124e8:	d0e5      	beq.n	80124b6 <uxr_write_framed_msg+0x18a>
 80124ea:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80124ee:	1b52      	subs	r2, r2, r5
 80124f0:	4643      	mov	r3, r8
 80124f2:	4421      	add	r1, r4
 80124f4:	4638      	mov	r0, r7
 80124f6:	47b0      	blx	r6
 80124f8:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80124fc:	4405      	add	r5, r0
 80124fe:	4295      	cmp	r5, r2
 8012500:	d3f1      	bcc.n	80124e6 <uxr_write_framed_msg+0x1ba>
 8012502:	d1d8      	bne.n	80124b6 <uxr_write_framed_msg+0x18a>
 8012504:	f109 0310 	add.w	r3, r9, #16
 8012508:	446b      	add	r3, sp
 801250a:	2200      	movs	r2, #0
 801250c:	f813 cc04 	ldrb.w	ip, [r3, #-4]
 8012510:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012514:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8012518:	2b01      	cmp	r3, #1
 801251a:	d911      	bls.n	8012540 <uxr_write_framed_msg+0x214>
 801251c:	18a3      	adds	r3, r4, r2
 801251e:	3201      	adds	r2, #1
 8012520:	b2d2      	uxtb	r2, r2
 8012522:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8012526:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801252a:	f1b9 0f00 	cmp.w	r9, #0
 801252e:	d119      	bne.n	8012564 <uxr_write_framed_msg+0x238>
 8012530:	f89d c00d 	ldrb.w	ip, [sp, #13]
 8012534:	f1ac 037d 	sub.w	r3, ip, #125	@ 0x7d
 8012538:	2b01      	cmp	r3, #1
 801253a:	f04f 0901 	mov.w	r9, #1
 801253e:	d8ce      	bhi.n	80124de <uxr_write_framed_msg+0x1b2>
 8012540:	1c53      	adds	r3, r2, #1
 8012542:	b2db      	uxtb	r3, r3
 8012544:	2b29      	cmp	r3, #41	@ 0x29
 8012546:	d8cc      	bhi.n	80124e2 <uxr_write_framed_msg+0x1b6>
 8012548:	18a3      	adds	r3, r4, r2
 801254a:	3202      	adds	r2, #2
 801254c:	f08c 0c20 	eor.w	ip, ip, #32
 8012550:	b2d2      	uxtb	r2, r2
 8012552:	f883 c039 	strb.w	ip, [r3, #57]	@ 0x39
 8012556:	f883 a038 	strb.w	sl, [r3, #56]	@ 0x38
 801255a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801255e:	f1b9 0f00 	cmp.w	r9, #0
 8012562:	d0e5      	beq.n	8012530 <uxr_write_framed_msg+0x204>
 8012564:	2500      	movs	r5, #0
 8012566:	e001      	b.n	801256c <uxr_write_framed_msg+0x240>
 8012568:	2800      	cmp	r0, #0
 801256a:	d0a4      	beq.n	80124b6 <uxr_write_framed_msg+0x18a>
 801256c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012570:	1b52      	subs	r2, r2, r5
 8012572:	4643      	mov	r3, r8
 8012574:	4421      	add	r1, r4
 8012576:	4638      	mov	r0, r7
 8012578:	47b0      	blx	r6
 801257a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801257e:	4405      	add	r5, r0
 8012580:	4295      	cmp	r5, r2
 8012582:	d3f1      	bcc.n	8012568 <uxr_write_framed_msg+0x23c>
 8012584:	d197      	bne.n	80124b6 <uxr_write_framed_msg+0x18a>
 8012586:	2300      	movs	r3, #0
 8012588:	fa1f f08b 	uxth.w	r0, fp
 801258c:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012590:	b005      	add	sp, #20
 8012592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012596:	2300      	movs	r3, #0
 8012598:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801259c:	e732      	b.n	8012404 <uxr_write_framed_msg+0xd8>
 801259e:	44a6      	add	lr, r4
 80125a0:	f085 0520 	eor.w	r5, r5, #32
 80125a4:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80125a8:	4610      	mov	r0, r2
 80125aa:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 80125ae:	464a      	mov	r2, r9
 80125b0:	f88e 5038 	strb.w	r5, [lr, #56]	@ 0x38
 80125b4:	e6e5      	b.n	8012382 <uxr_write_framed_msg+0x56>
 80125b6:	f08c 0c20 	eor.w	ip, ip, #32
 80125ba:	f880 c03a 	strb.w	ip, [r0, #58]	@ 0x3a
 80125be:	2103      	movs	r1, #3
 80125c0:	2004      	movs	r0, #4
 80125c2:	f04f 0906 	mov.w	r9, #6
 80125c6:	2205      	movs	r2, #5
 80125c8:	4686      	mov	lr, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80125d0:	e6ca      	b.n	8012368 <uxr_write_framed_msg+0x3c>
 80125d2:	f8ad b00c 	strh.w	fp, [sp, #12]
 80125d6:	46dc      	mov	ip, fp
 80125d8:	e779      	b.n	80124ce <uxr_write_framed_msg+0x1a2>
 80125da:	bf00      	nop
 80125dc:	0801e224 	.word	0x0801e224

080125e0 <uxr_framing_read_transport>:
 80125e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125e4:	4604      	mov	r4, r0
 80125e6:	b083      	sub	sp, #12
 80125e8:	461f      	mov	r7, r3
 80125ea:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80125ee:	4689      	mov	r9, r1
 80125f0:	4692      	mov	sl, r2
 80125f2:	f000 fc5d 	bl	8012eb0 <uxr_millis>
 80125f6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80125fa:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80125fe:	42b3      	cmp	r3, r6
 8012600:	4680      	mov	r8, r0
 8012602:	d062      	beq.n	80126ca <uxr_framing_read_transport+0xea>
 8012604:	d81c      	bhi.n	8012640 <uxr_framing_read_transport+0x60>
 8012606:	1e75      	subs	r5, r6, #1
 8012608:	1aed      	subs	r5, r5, r3
 801260a:	b2ed      	uxtb	r5, r5
 801260c:	2600      	movs	r6, #0
 801260e:	455d      	cmp	r5, fp
 8012610:	d81f      	bhi.n	8012652 <uxr_framing_read_transport+0x72>
 8012612:	19ab      	adds	r3, r5, r6
 8012614:	455b      	cmp	r3, fp
 8012616:	bf84      	itt	hi
 8012618:	ebab 0b05 	subhi.w	fp, fp, r5
 801261c:	fa5f f68b 	uxtbhi.w	r6, fp
 8012620:	b9e5      	cbnz	r5, 801265c <uxr_framing_read_transport+0x7c>
 8012622:	f04f 0b00 	mov.w	fp, #0
 8012626:	f000 fc43 	bl	8012eb0 <uxr_millis>
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	eba0 0108 	sub.w	r1, r0, r8
 8012630:	1a5b      	subs	r3, r3, r1
 8012632:	4658      	mov	r0, fp
 8012634:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012638:	603b      	str	r3, [r7, #0]
 801263a:	b003      	add	sp, #12
 801263c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012640:	2e00      	cmp	r6, #0
 8012642:	d04a      	beq.n	80126da <uxr_framing_read_transport+0xfa>
 8012644:	f1c3 032a 	rsb	r3, r3, #42	@ 0x2a
 8012648:	b2dd      	uxtb	r5, r3
 801264a:	3e01      	subs	r6, #1
 801264c:	455d      	cmp	r5, fp
 801264e:	b2f6      	uxtb	r6, r6
 8012650:	d9df      	bls.n	8012612 <uxr_framing_read_transport+0x32>
 8012652:	fa5f f58b 	uxtb.w	r5, fp
 8012656:	2600      	movs	r6, #0
 8012658:	2d00      	cmp	r5, #0
 801265a:	d0e2      	beq.n	8012622 <uxr_framing_read_transport+0x42>
 801265c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012660:	3102      	adds	r1, #2
 8012662:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012664:	9300      	str	r3, [sp, #0]
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	4421      	add	r1, r4
 801266a:	462a      	mov	r2, r5
 801266c:	4650      	mov	r0, sl
 801266e:	47c8      	blx	r9
 8012670:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012674:	4a1b      	ldr	r2, [pc, #108]	@ (80126e4 <uxr_framing_read_transport+0x104>)
 8012676:	4403      	add	r3, r0
 8012678:	0859      	lsrs	r1, r3, #1
 801267a:	4683      	mov	fp, r0
 801267c:	fba2 0101 	umull	r0, r1, r2, r1
 8012680:	0889      	lsrs	r1, r1, #2
 8012682:	222a      	movs	r2, #42	@ 0x2a
 8012684:	fb02 3111 	mls	r1, r2, r1, r3
 8012688:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801268c:	f1bb 0f00 	cmp.w	fp, #0
 8012690:	d0c7      	beq.n	8012622 <uxr_framing_read_transport+0x42>
 8012692:	45ab      	cmp	fp, r5
 8012694:	d1c7      	bne.n	8012626 <uxr_framing_read_transport+0x46>
 8012696:	2e00      	cmp	r6, #0
 8012698:	d0c5      	beq.n	8012626 <uxr_framing_read_transport+0x46>
 801269a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801269c:	9300      	str	r3, [sp, #0]
 801269e:	3102      	adds	r1, #2
 80126a0:	4632      	mov	r2, r6
 80126a2:	4421      	add	r1, r4
 80126a4:	2300      	movs	r3, #0
 80126a6:	4650      	mov	r0, sl
 80126a8:	47c8      	blx	r9
 80126aa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80126ae:	4a0d      	ldr	r2, [pc, #52]	@ (80126e4 <uxr_framing_read_transport+0x104>)
 80126b0:	4403      	add	r3, r0
 80126b2:	0859      	lsrs	r1, r3, #1
 80126b4:	fba2 2101 	umull	r2, r1, r2, r1
 80126b8:	0889      	lsrs	r1, r1, #2
 80126ba:	222a      	movs	r2, #42	@ 0x2a
 80126bc:	fb02 3311 	mls	r3, r2, r1, r3
 80126c0:	eb00 0b05 	add.w	fp, r0, r5
 80126c4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 80126c8:	e7ad      	b.n	8012626 <uxr_framing_read_transport+0x46>
 80126ca:	2600      	movs	r6, #0
 80126cc:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 80126d0:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 80126d2:	d9be      	bls.n	8012652 <uxr_framing_read_transport+0x72>
 80126d4:	2529      	movs	r5, #41	@ 0x29
 80126d6:	2102      	movs	r1, #2
 80126d8:	e7c3      	b.n	8012662 <uxr_framing_read_transport+0x82>
 80126da:	f1c3 0329 	rsb	r3, r3, #41	@ 0x29
 80126de:	b2dd      	uxtb	r5, r3
 80126e0:	e795      	b.n	801260e <uxr_framing_read_transport+0x2e>
 80126e2:	bf00      	nop
 80126e4:	30c30c31 	.word	0x30c30c31

080126e8 <uxr_read_framed_msg>:
 80126e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ec:	461d      	mov	r5, r3
 80126ee:	f890 c02c 	ldrb.w	ip, [r0, #44]	@ 0x2c
 80126f2:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 80126f6:	b085      	sub	sp, #20
 80126f8:	459c      	cmp	ip, r3
 80126fa:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 80126fe:	4604      	mov	r4, r0
 8012700:	460f      	mov	r7, r1
 8012702:	4616      	mov	r6, r2
 8012704:	f000 81ae 	beq.w	8012a64 <uxr_read_framed_msg+0x37c>
 8012708:	2000      	movs	r0, #0
 801270a:	4639      	mov	r1, r7
 801270c:	2800      	cmp	r0, #0
 801270e:	d138      	bne.n	8012782 <uxr_read_framed_msg+0x9a>
 8012710:	468a      	mov	sl, r1
 8012712:	7823      	ldrb	r3, [r4, #0]
 8012714:	2b07      	cmp	r3, #7
 8012716:	d8fd      	bhi.n	8012714 <uxr_read_framed_msg+0x2c>
 8012718:	e8df f013 	tbh	[pc, r3, lsl #1]
 801271c:	0116013b 	.word	0x0116013b
 8012720:	00cd00f0 	.word	0x00cd00f0
 8012724:	005a00a0 	.word	0x005a00a0
 8012728:	00080037 	.word	0x00080037
 801272c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012730:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012734:	4290      	cmp	r0, r2
 8012736:	f000 8167 	beq.w	8012a08 <uxr_read_framed_msg+0x320>
 801273a:	18a3      	adds	r3, r4, r2
 801273c:	1c57      	adds	r7, r2, #1
 801273e:	49c7      	ldr	r1, [pc, #796]	@ (8012a5c <uxr_read_framed_msg+0x374>)
 8012740:	f893 c002 	ldrb.w	ip, [r3, #2]
 8012744:	087b      	lsrs	r3, r7, #1
 8012746:	fba1 8303 	umull	r8, r3, r1, r3
 801274a:	089b      	lsrs	r3, r3, #2
 801274c:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8012750:	fb08 7313 	mls	r3, r8, r3, r7
 8012754:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012758:	b2df      	uxtb	r7, r3
 801275a:	f000 81b2 	beq.w	8012ac2 <uxr_read_framed_msg+0x3da>
 801275e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012762:	f884 702d 	strb.w	r7, [r4, #45]	@ 0x2d
 8012766:	f000 8220 	beq.w	8012baa <uxr_read_framed_msg+0x4c2>
 801276a:	4661      	mov	r1, ip
 801276c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801276e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8012770:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012774:	b29b      	uxth	r3, r3
 8012776:	2100      	movs	r1, #0
 8012778:	429a      	cmp	r2, r3
 801277a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801277c:	7021      	strb	r1, [r4, #0]
 801277e:	f000 8198 	beq.w	8012ab2 <uxr_read_framed_msg+0x3ca>
 8012782:	2000      	movs	r0, #0
 8012784:	b005      	add	sp, #20
 8012786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801278a:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 801278e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012792:	4297      	cmp	r7, r2
 8012794:	f000 8148 	beq.w	8012a28 <uxr_read_framed_msg+0x340>
 8012798:	18a3      	adds	r3, r4, r2
 801279a:	f102 0c01 	add.w	ip, r2, #1
 801279e:	49af      	ldr	r1, [pc, #700]	@ (8012a5c <uxr_read_framed_msg+0x374>)
 80127a0:	7898      	ldrb	r0, [r3, #2]
 80127a2:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80127a6:	fba1 8303 	umull	r8, r3, r1, r3
 80127aa:	089b      	lsrs	r3, r3, #2
 80127ac:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80127b0:	fb08 c313 	mls	r3, r8, r3, ip
 80127b4:	287d      	cmp	r0, #125	@ 0x7d
 80127b6:	fa5f fc83 	uxtb.w	ip, r3
 80127ba:	f000 8194 	beq.w	8012ae6 <uxr_read_framed_msg+0x3fe>
 80127be:	287e      	cmp	r0, #126	@ 0x7e
 80127c0:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80127c4:	f000 8200 	beq.w	8012bc8 <uxr_read_framed_msg+0x4e0>
 80127c8:	2307      	movs	r3, #7
 80127ca:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80127cc:	7023      	strb	r3, [r4, #0]
 80127ce:	e7a0      	b.n	8012712 <uxr_read_framed_msg+0x2a>
 80127d0:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 80127d2:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 80127d4:	429f      	cmp	r7, r3
 80127d6:	f240 8164 	bls.w	8012aa2 <uxr_read_framed_msg+0x3ba>
 80127da:	f8df 9280 	ldr.w	r9, [pc, #640]	@ 8012a5c <uxr_read_framed_msg+0x374>
 80127de:	f8cd a00c 	str.w	sl, [sp, #12]
 80127e2:	212a      	movs	r1, #42	@ 0x2a
 80127e4:	e01f      	b.n	8012826 <uxr_read_framed_msg+0x13e>
 80127e6:	f89a e002 	ldrb.w	lr, [sl, #2]
 80127ea:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 80127ee:	f000 80ea 	beq.w	80129c6 <uxr_read_framed_msg+0x2de>
 80127f2:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80127f6:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80127fa:	f000 8142 	beq.w	8012a82 <uxr_read_framed_msg+0x39a>
 80127fe:	f805 e003 	strb.w	lr, [r5, r3]
 8012802:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8012804:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012806:	4f96      	ldr	r7, [pc, #600]	@ (8012a60 <uxr_read_framed_msg+0x378>)
 8012808:	ea80 020e 	eor.w	r2, r0, lr
 801280c:	b2d2      	uxtb	r2, r2
 801280e:	3301      	adds	r3, #1
 8012810:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8012814:	8e27      	ldrh	r7, [r4, #48]	@ 0x30
 8012816:	b29b      	uxth	r3, r3
 8012818:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801281c:	42bb      	cmp	r3, r7
 801281e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012820:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012822:	f080 80e7 	bcs.w	80129f4 <uxr_read_framed_msg+0x30c>
 8012826:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801282a:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 801282e:	f100 0c01 	add.w	ip, r0, #1
 8012832:	ea4f 0e5c 	mov.w	lr, ip, lsr #1
 8012836:	fba9 e20e 	umull	lr, r2, r9, lr
 801283a:	0892      	lsrs	r2, r2, #2
 801283c:	fb01 c212 	mls	r2, r1, r2, ip
 8012840:	4580      	cmp	r8, r0
 8012842:	eb04 0a00 	add.w	sl, r4, r0
 8012846:	fa5f fc82 	uxtb.w	ip, r2
 801284a:	d1cc      	bne.n	80127e6 <uxr_read_framed_msg+0xfe>
 801284c:	42bb      	cmp	r3, r7
 801284e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8012852:	f040 8128 	bne.w	8012aa6 <uxr_read_framed_msg+0x3be>
 8012856:	2306      	movs	r3, #6
 8012858:	7023      	strb	r3, [r4, #0]
 801285a:	e75a      	b.n	8012712 <uxr_read_framed_msg+0x2a>
 801285c:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8012860:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012864:	4297      	cmp	r7, r2
 8012866:	f000 80cf 	beq.w	8012a08 <uxr_read_framed_msg+0x320>
 801286a:	18a3      	adds	r3, r4, r2
 801286c:	f102 0c01 	add.w	ip, r2, #1
 8012870:	497a      	ldr	r1, [pc, #488]	@ (8012a5c <uxr_read_framed_msg+0x374>)
 8012872:	7898      	ldrb	r0, [r3, #2]
 8012874:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8012878:	fba1 8303 	umull	r8, r3, r1, r3
 801287c:	089b      	lsrs	r3, r3, #2
 801287e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8012882:	fb08 c313 	mls	r3, r8, r3, ip
 8012886:	287d      	cmp	r0, #125	@ 0x7d
 8012888:	fa5f fc83 	uxtb.w	ip, r3
 801288c:	f000 813d 	beq.w	8012b0a <uxr_read_framed_msg+0x422>
 8012890:	287e      	cmp	r0, #126	@ 0x7e
 8012892:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8012896:	f000 8188 	beq.w	8012baa <uxr_read_framed_msg+0x4c2>
 801289a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801289c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801289e:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	2200      	movs	r2, #0
 80128a6:	428b      	cmp	r3, r1
 80128a8:	8623      	strh	r3, [r4, #48]	@ 0x30
 80128aa:	8662      	strh	r2, [r4, #50]	@ 0x32
 80128ac:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80128ae:	f240 80f5 	bls.w	8012a9c <uxr_read_framed_msg+0x3b4>
 80128b2:	7022      	strb	r2, [r4, #0]
 80128b4:	e765      	b.n	8012782 <uxr_read_framed_msg+0x9a>
 80128b6:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 80128ba:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80128be:	4297      	cmp	r7, r2
 80128c0:	f000 80b2 	beq.w	8012a28 <uxr_read_framed_msg+0x340>
 80128c4:	18a3      	adds	r3, r4, r2
 80128c6:	f102 0c01 	add.w	ip, r2, #1
 80128ca:	4964      	ldr	r1, [pc, #400]	@ (8012a5c <uxr_read_framed_msg+0x374>)
 80128cc:	7898      	ldrb	r0, [r3, #2]
 80128ce:	ea4f 035c 	mov.w	r3, ip, lsr #1
 80128d2:	fba1 8303 	umull	r8, r3, r1, r3
 80128d6:	089b      	lsrs	r3, r3, #2
 80128d8:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 80128dc:	fb08 c313 	mls	r3, r8, r3, ip
 80128e0:	287d      	cmp	r0, #125	@ 0x7d
 80128e2:	fa5f fc83 	uxtb.w	ip, r3
 80128e6:	f000 813b 	beq.w	8012b60 <uxr_read_framed_msg+0x478>
 80128ea:	287e      	cmp	r0, #126	@ 0x7e
 80128ec:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 80128f0:	f000 816a 	beq.w	8012bc8 <uxr_read_framed_msg+0x4e0>
 80128f4:	2304      	movs	r3, #4
 80128f6:	8620      	strh	r0, [r4, #48]	@ 0x30
 80128f8:	7023      	strb	r3, [r4, #0]
 80128fa:	e70a      	b.n	8012712 <uxr_read_framed_msg+0x2a>
 80128fc:	f894 702c 	ldrb.w	r7, [r4, #44]	@ 0x2c
 8012900:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012904:	4297      	cmp	r7, r2
 8012906:	f000 80c4 	beq.w	8012a92 <uxr_read_framed_msg+0x3aa>
 801290a:	18a3      	adds	r3, r4, r2
 801290c:	f102 0c01 	add.w	ip, r2, #1
 8012910:	4952      	ldr	r1, [pc, #328]	@ (8012a5c <uxr_read_framed_msg+0x374>)
 8012912:	7898      	ldrb	r0, [r3, #2]
 8012914:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8012918:	fba1 8303 	umull	r8, r3, r1, r3
 801291c:	089b      	lsrs	r3, r3, #2
 801291e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8012922:	fb08 c313 	mls	r3, r8, r3, ip
 8012926:	287d      	cmp	r0, #125	@ 0x7d
 8012928:	fa5f fc83 	uxtb.w	ip, r3
 801292c:	f000 812b 	beq.w	8012b86 <uxr_read_framed_msg+0x49e>
 8012930:	287e      	cmp	r0, #126	@ 0x7e
 8012932:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8012936:	f000 8155 	beq.w	8012be4 <uxr_read_framed_msg+0x4fc>
 801293a:	7863      	ldrb	r3, [r4, #1]
 801293c:	4283      	cmp	r3, r0
 801293e:	bf0c      	ite	eq
 8012940:	2303      	moveq	r3, #3
 8012942:	2300      	movne	r3, #0
 8012944:	7023      	strb	r3, [r4, #0]
 8012946:	e6e4      	b.n	8012712 <uxr_read_framed_msg+0x2a>
 8012948:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801294c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012950:	2300      	movs	r3, #0
 8012952:	4290      	cmp	r0, r2
 8012954:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8012958:	d06b      	beq.n	8012a32 <uxr_read_framed_msg+0x34a>
 801295a:	18a3      	adds	r3, r4, r2
 801295c:	f102 0c01 	add.w	ip, r2, #1
 8012960:	493e      	ldr	r1, [pc, #248]	@ (8012a5c <uxr_read_framed_msg+0x374>)
 8012962:	789f      	ldrb	r7, [r3, #2]
 8012964:	ea4f 035c 	mov.w	r3, ip, lsr #1
 8012968:	fba1 8303 	umull	r8, r3, r1, r3
 801296c:	089b      	lsrs	r3, r3, #2
 801296e:	f04f 082a 	mov.w	r8, #42	@ 0x2a
 8012972:	fb08 c313 	mls	r3, r8, r3, ip
 8012976:	2f7d      	cmp	r7, #125	@ 0x7d
 8012978:	fa5f fc83 	uxtb.w	ip, r3
 801297c:	f000 80d8 	beq.w	8012b30 <uxr_read_framed_msg+0x448>
 8012980:	2f7e      	cmp	r7, #126	@ 0x7e
 8012982:	f884 c02d 	strb.w	ip, [r4, #45]	@ 0x2d
 8012986:	f884 702e 	strb.w	r7, [r4, #46]	@ 0x2e
 801298a:	d052      	beq.n	8012a32 <uxr_read_framed_msg+0x34a>
 801298c:	2302      	movs	r3, #2
 801298e:	7023      	strb	r3, [r4, #0]
 8012990:	e6bf      	b.n	8012712 <uxr_read_framed_msg+0x2a>
 8012992:	f894 802c 	ldrb.w	r8, [r4, #44]	@ 0x2c
 8012996:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801299a:	4930      	ldr	r1, [pc, #192]	@ (8012a5c <uxr_read_framed_msg+0x374>)
 801299c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80129a0:	e004      	b.n	80129ac <uxr_read_framed_msg+0x2c4>
 80129a2:	78bb      	ldrb	r3, [r7, #2]
 80129a4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80129a8:	2b7e      	cmp	r3, #126	@ 0x7e
 80129aa:	d02a      	beq.n	8012a02 <uxr_read_framed_msg+0x31a>
 80129ac:	1c50      	adds	r0, r2, #1
 80129ae:	0843      	lsrs	r3, r0, #1
 80129b0:	fba1 e303 	umull	lr, r3, r1, r3
 80129b4:	089b      	lsrs	r3, r3, #2
 80129b6:	fb0c 0013 	mls	r0, ip, r3, r0
 80129ba:	4590      	cmp	r8, r2
 80129bc:	eb04 0702 	add.w	r7, r4, r2
 80129c0:	b2c2      	uxtb	r2, r0
 80129c2:	d1ee      	bne.n	80129a2 <uxr_read_framed_msg+0x2ba>
 80129c4:	e6dd      	b.n	8012782 <uxr_read_framed_msg+0x9a>
 80129c6:	3002      	adds	r0, #2
 80129c8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80129cc:	eb04 0a02 	add.w	sl, r4, r2
 80129d0:	fba9 e20e 	umull	lr, r2, r9, lr
 80129d4:	0892      	lsrs	r2, r2, #2
 80129d6:	45e0      	cmp	r8, ip
 80129d8:	fb01 0012 	mls	r0, r1, r2, r0
 80129dc:	f43f af36 	beq.w	801284c <uxr_read_framed_msg+0x164>
 80129e0:	f89a e002 	ldrb.w	lr, [sl, #2]
 80129e4:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 80129e8:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80129ec:	d049      	beq.n	8012a82 <uxr_read_framed_msg+0x39a>
 80129ee:	f08e 0e20 	eor.w	lr, lr, #32
 80129f2:	e704      	b.n	80127fe <uxr_read_framed_msg+0x116>
 80129f4:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80129f8:	f43f af2d 	beq.w	8012856 <uxr_read_framed_msg+0x16e>
 80129fc:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8012a00:	d151      	bne.n	8012aa6 <uxr_read_framed_msg+0x3be>
 8012a02:	2301      	movs	r3, #1
 8012a04:	7023      	strb	r3, [r4, #0]
 8012a06:	e684      	b.n	8012712 <uxr_read_framed_msg+0x2a>
 8012a08:	4651      	mov	r1, sl
 8012a0a:	f8cd b000 	str.w	fp, [sp]
 8012a0e:	2301      	movs	r3, #1
 8012a10:	9301      	str	r3, [sp, #4]
 8012a12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012a14:	9103      	str	r1, [sp, #12]
 8012a16:	4632      	mov	r2, r6
 8012a18:	4620      	mov	r0, r4
 8012a1a:	f7ff fde1 	bl	80125e0 <uxr_framing_read_transport>
 8012a1e:	fab0 f080 	clz	r0, r0
 8012a22:	9903      	ldr	r1, [sp, #12]
 8012a24:	0940      	lsrs	r0, r0, #5
 8012a26:	e671      	b.n	801270c <uxr_read_framed_msg+0x24>
 8012a28:	4651      	mov	r1, sl
 8012a2a:	f8cd b000 	str.w	fp, [sp]
 8012a2e:	2302      	movs	r3, #2
 8012a30:	e7ee      	b.n	8012a10 <uxr_read_framed_msg+0x328>
 8012a32:	2304      	movs	r3, #4
 8012a34:	9301      	str	r3, [sp, #4]
 8012a36:	f8cd b000 	str.w	fp, [sp]
 8012a3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012a3c:	4632      	mov	r2, r6
 8012a3e:	4651      	mov	r1, sl
 8012a40:	4620      	mov	r0, r4
 8012a42:	f7ff fdcd 	bl	80125e0 <uxr_framing_read_transport>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	f47f ae63 	bne.w	8012712 <uxr_read_framed_msg+0x2a>
 8012a4c:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 8012a50:	387e      	subs	r0, #126	@ 0x7e
 8012a52:	4651      	mov	r1, sl
 8012a54:	bf18      	it	ne
 8012a56:	2001      	movne	r0, #1
 8012a58:	e658      	b.n	801270c <uxr_read_framed_msg+0x24>
 8012a5a:	bf00      	nop
 8012a5c:	30c30c31 	.word	0x30c30c31
 8012a60:	0801e224 	.word	0x0801e224
 8012a64:	2305      	movs	r3, #5
 8012a66:	9301      	str	r3, [sp, #4]
 8012a68:	f8cd b000 	str.w	fp, [sp]
 8012a6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012a6e:	f7ff fdb7 	bl	80125e0 <uxr_framing_read_transport>
 8012a72:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8012a76:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	f43f ae81 	beq.w	8012782 <uxr_read_framed_msg+0x9a>
 8012a80:	e642      	b.n	8012708 <uxr_read_framed_msg+0x20>
 8012a82:	42bb      	cmp	r3, r7
 8012a84:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8012a88:	f43f aee5 	beq.w	8012856 <uxr_read_framed_msg+0x16e>
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	7023      	strb	r3, [r4, #0]
 8012a90:	e63f      	b.n	8012712 <uxr_read_framed_msg+0x2a>
 8012a92:	4651      	mov	r1, sl
 8012a94:	f8cd b000 	str.w	fp, [sp]
 8012a98:	2303      	movs	r3, #3
 8012a9a:	e7b9      	b.n	8012a10 <uxr_read_framed_msg+0x328>
 8012a9c:	2305      	movs	r3, #5
 8012a9e:	7023      	strb	r3, [r4, #0]
 8012aa0:	e637      	b.n	8012712 <uxr_read_framed_msg+0x2a>
 8012aa2:	f43f aed8 	beq.w	8012856 <uxr_read_framed_msg+0x16e>
 8012aa6:	1afb      	subs	r3, r7, r3
 8012aa8:	3302      	adds	r3, #2
 8012aaa:	e9cd b300 	strd	fp, r3, [sp]
 8012aae:	4651      	mov	r1, sl
 8012ab0:	e7af      	b.n	8012a12 <uxr_read_framed_msg+0x32a>
 8012ab2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012ab4:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012ab8:	7013      	strb	r3, [r2, #0]
 8012aba:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012abc:	b005      	add	sp, #20
 8012abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ac2:	4287      	cmp	r7, r0
 8012ac4:	d0a0      	beq.n	8012a08 <uxr_read_framed_msg+0x320>
 8012ac6:	4423      	add	r3, r4
 8012ac8:	3202      	adds	r2, #2
 8012aca:	7898      	ldrb	r0, [r3, #2]
 8012acc:	0853      	lsrs	r3, r2, #1
 8012ace:	fba1 e303 	umull	lr, r3, r1, r3
 8012ad2:	089b      	lsrs	r3, r3, #2
 8012ad4:	fb08 2213 	mls	r2, r8, r3, r2
 8012ad8:	287e      	cmp	r0, #126	@ 0x7e
 8012ada:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012ade:	d064      	beq.n	8012baa <uxr_read_framed_msg+0x4c2>
 8012ae0:	f080 0120 	eor.w	r1, r0, #32
 8012ae4:	e642      	b.n	801276c <uxr_read_framed_msg+0x84>
 8012ae6:	45bc      	cmp	ip, r7
 8012ae8:	d09e      	beq.n	8012a28 <uxr_read_framed_msg+0x340>
 8012aea:	4423      	add	r3, r4
 8012aec:	3202      	adds	r2, #2
 8012aee:	7898      	ldrb	r0, [r3, #2]
 8012af0:	0853      	lsrs	r3, r2, #1
 8012af2:	fba1 e303 	umull	lr, r3, r1, r3
 8012af6:	089b      	lsrs	r3, r3, #2
 8012af8:	fb08 2213 	mls	r2, r8, r3, r2
 8012afc:	287e      	cmp	r0, #126	@ 0x7e
 8012afe:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012b02:	d061      	beq.n	8012bc8 <uxr_read_framed_msg+0x4e0>
 8012b04:	f080 0020 	eor.w	r0, r0, #32
 8012b08:	e65e      	b.n	80127c8 <uxr_read_framed_msg+0xe0>
 8012b0a:	4567      	cmp	r7, ip
 8012b0c:	f43f af7c 	beq.w	8012a08 <uxr_read_framed_msg+0x320>
 8012b10:	4423      	add	r3, r4
 8012b12:	3202      	adds	r2, #2
 8012b14:	7898      	ldrb	r0, [r3, #2]
 8012b16:	0853      	lsrs	r3, r2, #1
 8012b18:	fba1 e303 	umull	lr, r3, r1, r3
 8012b1c:	089b      	lsrs	r3, r3, #2
 8012b1e:	fb08 2213 	mls	r2, r8, r3, r2
 8012b22:	287e      	cmp	r0, #126	@ 0x7e
 8012b24:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012b28:	d03f      	beq.n	8012baa <uxr_read_framed_msg+0x4c2>
 8012b2a:	f080 0020 	eor.w	r0, r0, #32
 8012b2e:	e6b4      	b.n	801289a <uxr_read_framed_msg+0x1b2>
 8012b30:	4560      	cmp	r0, ip
 8012b32:	f43f af7e 	beq.w	8012a32 <uxr_read_framed_msg+0x34a>
 8012b36:	4423      	add	r3, r4
 8012b38:	3202      	adds	r2, #2
 8012b3a:	7898      	ldrb	r0, [r3, #2]
 8012b3c:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012b40:	0853      	lsrs	r3, r2, #1
 8012b42:	fba1 e303 	umull	lr, r3, r1, r3
 8012b46:	089b      	lsrs	r3, r3, #2
 8012b48:	fb08 2213 	mls	r2, r8, r3, r2
 8012b4c:	287e      	cmp	r0, #126	@ 0x7e
 8012b4e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012b52:	f43f af6e 	beq.w	8012a32 <uxr_read_framed_msg+0x34a>
 8012b56:	f080 0020 	eor.w	r0, r0, #32
 8012b5a:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012b5e:	e715      	b.n	801298c <uxr_read_framed_msg+0x2a4>
 8012b60:	4567      	cmp	r7, ip
 8012b62:	f43f af61 	beq.w	8012a28 <uxr_read_framed_msg+0x340>
 8012b66:	4423      	add	r3, r4
 8012b68:	3202      	adds	r2, #2
 8012b6a:	7898      	ldrb	r0, [r3, #2]
 8012b6c:	0853      	lsrs	r3, r2, #1
 8012b6e:	fba1 e303 	umull	lr, r3, r1, r3
 8012b72:	089b      	lsrs	r3, r3, #2
 8012b74:	fb08 2213 	mls	r2, r8, r3, r2
 8012b78:	287e      	cmp	r0, #126	@ 0x7e
 8012b7a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012b7e:	d023      	beq.n	8012bc8 <uxr_read_framed_msg+0x4e0>
 8012b80:	f080 0020 	eor.w	r0, r0, #32
 8012b84:	e6b6      	b.n	80128f4 <uxr_read_framed_msg+0x20c>
 8012b86:	45bc      	cmp	ip, r7
 8012b88:	d083      	beq.n	8012a92 <uxr_read_framed_msg+0x3aa>
 8012b8a:	4423      	add	r3, r4
 8012b8c:	3202      	adds	r2, #2
 8012b8e:	7898      	ldrb	r0, [r3, #2]
 8012b90:	0853      	lsrs	r3, r2, #1
 8012b92:	fba1 e303 	umull	lr, r3, r1, r3
 8012b96:	089b      	lsrs	r3, r3, #2
 8012b98:	fb08 2213 	mls	r2, r8, r3, r2
 8012b9c:	287e      	cmp	r0, #126	@ 0x7e
 8012b9e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012ba2:	d01f      	beq.n	8012be4 <uxr_read_framed_msg+0x4fc>
 8012ba4:	f080 0020 	eor.w	r0, r0, #32
 8012ba8:	e6c7      	b.n	801293a <uxr_read_framed_msg+0x252>
 8012baa:	2701      	movs	r7, #1
 8012bac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012bae:	f8cd b000 	str.w	fp, [sp]
 8012bb2:	9701      	str	r7, [sp, #4]
 8012bb4:	4632      	mov	r2, r6
 8012bb6:	4651      	mov	r1, sl
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f7ff fd11 	bl	80125e0 <uxr_framing_read_transport>
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	f47f ada7 	bne.w	8012712 <uxr_read_framed_msg+0x2a>
 8012bc4:	7027      	strb	r7, [r4, #0]
 8012bc6:	e5a4      	b.n	8012712 <uxr_read_framed_msg+0x2a>
 8012bc8:	f8cd b000 	str.w	fp, [sp]
 8012bcc:	2302      	movs	r3, #2
 8012bce:	9301      	str	r3, [sp, #4]
 8012bd0:	4632      	mov	r2, r6
 8012bd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012bd4:	4651      	mov	r1, sl
 8012bd6:	4620      	mov	r0, r4
 8012bd8:	f7ff fd02 	bl	80125e0 <uxr_framing_read_transport>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	f47f ad98 	bne.w	8012712 <uxr_read_framed_msg+0x2a>
 8012be2:	e70e      	b.n	8012a02 <uxr_read_framed_msg+0x31a>
 8012be4:	f8cd b000 	str.w	fp, [sp]
 8012be8:	2303      	movs	r3, #3
 8012bea:	e7f0      	b.n	8012bce <uxr_read_framed_msg+0x4e6>

08012bec <uxr_stream_id>:
 8012bec:	2901      	cmp	r1, #1
 8012bee:	b082      	sub	sp, #8
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	d011      	beq.n	8012c18 <uxr_stream_id+0x2c>
 8012bf4:	2902      	cmp	r1, #2
 8012bf6:	f04f 0c00 	mov.w	ip, #0
 8012bfa:	d00a      	beq.n	8012c12 <uxr_stream_id+0x26>
 8012bfc:	2000      	movs	r0, #0
 8012bfe:	f36c 0007 	bfi	r0, ip, #0, #8
 8012c02:	f363 200f 	bfi	r0, r3, #8, #8
 8012c06:	f361 4017 	bfi	r0, r1, #16, #8
 8012c0a:	f362 601f 	bfi	r0, r2, #24, #8
 8012c0e:	b002      	add	sp, #8
 8012c10:	4770      	bx	lr
 8012c12:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8012c16:	e7f1      	b.n	8012bfc <uxr_stream_id+0x10>
 8012c18:	f100 0c01 	add.w	ip, r0, #1
 8012c1c:	fa5f fc8c 	uxtb.w	ip, ip
 8012c20:	e7ec      	b.n	8012bfc <uxr_stream_id+0x10>
 8012c22:	bf00      	nop

08012c24 <uxr_stream_id_from_raw>:
 8012c24:	b082      	sub	sp, #8
 8012c26:	4603      	mov	r3, r0
 8012c28:	b130      	cbz	r0, 8012c38 <uxr_stream_id_from_raw+0x14>
 8012c2a:	0602      	lsls	r2, r0, #24
 8012c2c:	d411      	bmi.n	8012c52 <uxr_stream_id_from_raw+0x2e>
 8012c2e:	1e42      	subs	r2, r0, #1
 8012c30:	b2d2      	uxtb	r2, r2
 8012c32:	f04f 0c01 	mov.w	ip, #1
 8012c36:	e001      	b.n	8012c3c <uxr_stream_id_from_raw+0x18>
 8012c38:	4684      	mov	ip, r0
 8012c3a:	4602      	mov	r2, r0
 8012c3c:	2000      	movs	r0, #0
 8012c3e:	f363 0007 	bfi	r0, r3, #0, #8
 8012c42:	f362 200f 	bfi	r0, r2, #8, #8
 8012c46:	f36c 4017 	bfi	r0, ip, #16, #8
 8012c4a:	f361 601f 	bfi	r0, r1, #24, #8
 8012c4e:	b002      	add	sp, #8
 8012c50:	4770      	bx	lr
 8012c52:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012c56:	f04f 0c02 	mov.w	ip, #2
 8012c5a:	e7ef      	b.n	8012c3c <uxr_stream_id_from_raw+0x18>

08012c5c <uxr_init_stream_storage>:
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	7403      	strb	r3, [r0, #16]
 8012c60:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012c64:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012c68:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012c6c:	4770      	bx	lr
 8012c6e:	bf00      	nop

08012c70 <uxr_reset_stream_storage>:
 8012c70:	b570      	push	{r4, r5, r6, lr}
 8012c72:	7c03      	ldrb	r3, [r0, #16]
 8012c74:	4604      	mov	r4, r0
 8012c76:	b153      	cbz	r3, 8012c8e <uxr_reset_stream_storage+0x1e>
 8012c78:	4606      	mov	r6, r0
 8012c7a:	2500      	movs	r5, #0
 8012c7c:	4630      	mov	r0, r6
 8012c7e:	f007 f9e5 	bl	801a04c <uxr_reset_output_best_effort_stream>
 8012c82:	7c23      	ldrb	r3, [r4, #16]
 8012c84:	3501      	adds	r5, #1
 8012c86:	42ab      	cmp	r3, r5
 8012c88:	f106 0610 	add.w	r6, r6, #16
 8012c8c:	d8f6      	bhi.n	8012c7c <uxr_reset_stream_storage+0xc>
 8012c8e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012c92:	b163      	cbz	r3, 8012cae <uxr_reset_stream_storage+0x3e>
 8012c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012c98:	2500      	movs	r5, #0
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f006 ffe6 	bl	8019c6c <uxr_reset_input_best_effort_stream>
 8012ca0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012ca4:	3501      	adds	r5, #1
 8012ca6:	42ab      	cmp	r3, r5
 8012ca8:	f106 0602 	add.w	r6, r6, #2
 8012cac:	d8f5      	bhi.n	8012c9a <uxr_reset_stream_storage+0x2a>
 8012cae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012cb2:	b163      	cbz	r3, 8012cce <uxr_reset_stream_storage+0x5e>
 8012cb4:	f104 0618 	add.w	r6, r4, #24
 8012cb8:	2500      	movs	r5, #0
 8012cba:	4630      	mov	r0, r6
 8012cbc:	f007 fa70 	bl	801a1a0 <uxr_reset_output_reliable_stream>
 8012cc0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012cc4:	3501      	adds	r5, #1
 8012cc6:	42ab      	cmp	r3, r5
 8012cc8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012ccc:	d8f5      	bhi.n	8012cba <uxr_reset_stream_storage+0x4a>
 8012cce:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012cd2:	b163      	cbz	r3, 8012cee <uxr_reset_stream_storage+0x7e>
 8012cd4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012cd8:	2500      	movs	r5, #0
 8012cda:	4630      	mov	r0, r6
 8012cdc:	f007 f836 	bl	8019d4c <uxr_reset_input_reliable_stream>
 8012ce0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012ce4:	3501      	adds	r5, #1
 8012ce6:	42ab      	cmp	r3, r5
 8012ce8:	f106 0618 	add.w	r6, r6, #24
 8012cec:	d8f5      	bhi.n	8012cda <uxr_reset_stream_storage+0x6a>
 8012cee:	bd70      	pop	{r4, r5, r6, pc}

08012cf0 <uxr_add_output_best_effort_buffer>:
 8012cf0:	b510      	push	{r4, lr}
 8012cf2:	7c04      	ldrb	r4, [r0, #16]
 8012cf4:	f104 0c01 	add.w	ip, r4, #1
 8012cf8:	b082      	sub	sp, #8
 8012cfa:	f880 c010 	strb.w	ip, [r0, #16]
 8012cfe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012d02:	f007 f999 	bl	801a038 <uxr_init_output_best_effort_stream>
 8012d06:	2201      	movs	r2, #1
 8012d08:	4611      	mov	r1, r2
 8012d0a:	4620      	mov	r0, r4
 8012d0c:	b002      	add	sp, #8
 8012d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d12:	f7ff bf6b 	b.w	8012bec <uxr_stream_id>
 8012d16:	bf00      	nop

08012d18 <uxr_add_output_reliable_buffer>:
 8012d18:	b510      	push	{r4, lr}
 8012d1a:	b084      	sub	sp, #16
 8012d1c:	4684      	mov	ip, r0
 8012d1e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012d22:	9000      	str	r0, [sp, #0]
 8012d24:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8012d28:	2028      	movs	r0, #40	@ 0x28
 8012d2a:	fb00 c004 	mla	r0, r0, r4, ip
 8012d2e:	f104 0e01 	add.w	lr, r4, #1
 8012d32:	3018      	adds	r0, #24
 8012d34:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8012d38:	f007 f9fa 	bl	801a130 <uxr_init_output_reliable_stream>
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	2102      	movs	r1, #2
 8012d40:	4620      	mov	r0, r4
 8012d42:	b004      	add	sp, #16
 8012d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d48:	f7ff bf50 	b.w	8012bec <uxr_stream_id>

08012d4c <uxr_add_input_best_effort_buffer>:
 8012d4c:	b510      	push	{r4, lr}
 8012d4e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8012d52:	1c62      	adds	r2, r4, #1
 8012d54:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8012d58:	b082      	sub	sp, #8
 8012d5a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8012d5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012d62:	f006 ff7f 	bl	8019c64 <uxr_init_input_best_effort_stream>
 8012d66:	2200      	movs	r2, #0
 8012d68:	2101      	movs	r1, #1
 8012d6a:	4620      	mov	r0, r4
 8012d6c:	b002      	add	sp, #8
 8012d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012d72:	f7ff bf3b 	b.w	8012bec <uxr_stream_id>
 8012d76:	bf00      	nop

08012d78 <uxr_add_input_reliable_buffer>:
 8012d78:	b510      	push	{r4, lr}
 8012d7a:	b084      	sub	sp, #16
 8012d7c:	4684      	mov	ip, r0
 8012d7e:	9806      	ldr	r0, [sp, #24]
 8012d80:	9000      	str	r0, [sp, #0]
 8012d82:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8012d86:	2018      	movs	r0, #24
 8012d88:	fb00 c004 	mla	r0, r0, r4, ip
 8012d8c:	f104 0e01 	add.w	lr, r4, #1
 8012d90:	3048      	adds	r0, #72	@ 0x48
 8012d92:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8012d96:	f006 ffad 	bl	8019cf4 <uxr_init_input_reliable_stream>
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	2102      	movs	r1, #2
 8012d9e:	4620      	mov	r0, r4
 8012da0:	b004      	add	sp, #16
 8012da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012da6:	f7ff bf21 	b.w	8012bec <uxr_stream_id>
 8012daa:	bf00      	nop

08012dac <uxr_get_output_best_effort_stream>:
 8012dac:	7c03      	ldrb	r3, [r0, #16]
 8012dae:	428b      	cmp	r3, r1
 8012db0:	bf8c      	ite	hi
 8012db2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012db6:	2000      	movls	r0, #0
 8012db8:	4770      	bx	lr
 8012dba:	bf00      	nop

08012dbc <uxr_get_output_reliable_stream>:
 8012dbc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012dc0:	428b      	cmp	r3, r1
 8012dc2:	bf83      	ittte	hi
 8012dc4:	2328      	movhi	r3, #40	@ 0x28
 8012dc6:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012dca:	3018      	addhi	r0, #24
 8012dcc:	2000      	movls	r0, #0
 8012dce:	4770      	bx	lr

08012dd0 <uxr_get_input_best_effort_stream>:
 8012dd0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012dd4:	428b      	cmp	r3, r1
 8012dd6:	bf86      	itte	hi
 8012dd8:	3121      	addhi	r1, #33	@ 0x21
 8012dda:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012dde:	2000      	movls	r0, #0
 8012de0:	4770      	bx	lr
 8012de2:	bf00      	nop

08012de4 <uxr_get_input_reliable_stream>:
 8012de4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012de8:	428b      	cmp	r3, r1
 8012dea:	bf83      	ittte	hi
 8012dec:	2318      	movhi	r3, #24
 8012dee:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012df2:	3048      	addhi	r0, #72	@ 0x48
 8012df4:	2000      	movls	r0, #0
 8012df6:	4770      	bx	lr

08012df8 <uxr_output_streams_confirmed>:
 8012df8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012dfc:	b183      	cbz	r3, 8012e20 <uxr_output_streams_confirmed+0x28>
 8012dfe:	b570      	push	{r4, r5, r6, lr}
 8012e00:	4606      	mov	r6, r0
 8012e02:	f100 0518 	add.w	r5, r0, #24
 8012e06:	2400      	movs	r4, #0
 8012e08:	e001      	b.n	8012e0e <uxr_output_streams_confirmed+0x16>
 8012e0a:	3528      	adds	r5, #40	@ 0x28
 8012e0c:	b138      	cbz	r0, 8012e1e <uxr_output_streams_confirmed+0x26>
 8012e0e:	4628      	mov	r0, r5
 8012e10:	f007 fc2e 	bl	801a670 <uxr_is_output_up_to_date>
 8012e14:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012e18:	3401      	adds	r4, #1
 8012e1a:	42a3      	cmp	r3, r4
 8012e1c:	d8f5      	bhi.n	8012e0a <uxr_output_streams_confirmed+0x12>
 8012e1e:	bd70      	pop	{r4, r5, r6, pc}
 8012e20:	2001      	movs	r0, #1
 8012e22:	4770      	bx	lr

08012e24 <uxr_buffer_submessage_header>:
 8012e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e26:	4604      	mov	r4, r0
 8012e28:	460e      	mov	r6, r1
 8012e2a:	2104      	movs	r1, #4
 8012e2c:	4615      	mov	r5, r2
 8012e2e:	461f      	mov	r7, r3
 8012e30:	f7fd fc96 	bl	8010760 <ucdr_align_to>
 8012e34:	2301      	movs	r3, #1
 8012e36:	7523      	strb	r3, [r4, #20]
 8012e38:	f047 0201 	orr.w	r2, r7, #1
 8012e3c:	462b      	mov	r3, r5
 8012e3e:	4631      	mov	r1, r6
 8012e40:	4620      	mov	r0, r4
 8012e42:	f000 fa2b 	bl	801329c <uxr_serialize_submessage_header>
 8012e46:	4620      	mov	r0, r4
 8012e48:	f7fd fca0 	bl	801078c <ucdr_buffer_remaining>
 8012e4c:	42a8      	cmp	r0, r5
 8012e4e:	bf34      	ite	cc
 8012e50:	2000      	movcc	r0, #0
 8012e52:	2001      	movcs	r0, #1
 8012e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e56:	bf00      	nop

08012e58 <uxr_read_submessage_header>:
 8012e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e5c:	4604      	mov	r4, r0
 8012e5e:	460d      	mov	r5, r1
 8012e60:	2104      	movs	r1, #4
 8012e62:	4616      	mov	r6, r2
 8012e64:	4698      	mov	r8, r3
 8012e66:	f7fd fc7b 	bl	8010760 <ucdr_align_to>
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	f7fd fc8e 	bl	801078c <ucdr_buffer_remaining>
 8012e70:	2803      	cmp	r0, #3
 8012e72:	bf8c      	ite	hi
 8012e74:	2701      	movhi	r7, #1
 8012e76:	2700      	movls	r7, #0
 8012e78:	d802      	bhi.n	8012e80 <uxr_read_submessage_header+0x28>
 8012e7a:	4638      	mov	r0, r7
 8012e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e80:	4633      	mov	r3, r6
 8012e82:	4642      	mov	r2, r8
 8012e84:	4620      	mov	r0, r4
 8012e86:	4629      	mov	r1, r5
 8012e88:	f000 fa1a 	bl	80132c0 <uxr_deserialize_submessage_header>
 8012e8c:	f898 3000 	ldrb.w	r3, [r8]
 8012e90:	f003 0201 	and.w	r2, r3, #1
 8012e94:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012e98:	f888 3000 	strb.w	r3, [r8]
 8012e9c:	7522      	strb	r2, [r4, #20]
 8012e9e:	4638      	mov	r0, r7
 8012ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ea4 <uxr_submessage_padding>:
 8012ea4:	f010 0003 	ands.w	r0, r0, #3
 8012ea8:	bf18      	it	ne
 8012eaa:	f1c0 0004 	rsbne	r0, r0, #4
 8012eae:	4770      	bx	lr

08012eb0 <uxr_millis>:
 8012eb0:	b510      	push	{r4, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	4669      	mov	r1, sp
 8012eb6:	2001      	movs	r0, #1
 8012eb8:	f7f0 f886 	bl	8002fc8 <clock_gettime>
 8012ebc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012ec0:	4b06      	ldr	r3, [pc, #24]	@ (8012edc <uxr_millis+0x2c>)
 8012ec2:	fba0 0103 	umull	r0, r1, r0, r3
 8012ec6:	1900      	adds	r0, r0, r4
 8012ec8:	fb03 1102 	mla	r1, r3, r2, r1
 8012ecc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012ed0:	4a03      	ldr	r2, [pc, #12]	@ (8012ee0 <uxr_millis+0x30>)
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	f7ed fdfa 	bl	8000acc <__aeabi_ldivmod>
 8012ed8:	b004      	add	sp, #16
 8012eda:	bd10      	pop	{r4, pc}
 8012edc:	3b9aca00 	.word	0x3b9aca00
 8012ee0:	000f4240 	.word	0x000f4240

08012ee4 <uxr_nanos>:
 8012ee4:	b510      	push	{r4, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	4669      	mov	r1, sp
 8012eea:	2001      	movs	r0, #1
 8012eec:	f7f0 f86c 	bl	8002fc8 <clock_gettime>
 8012ef0:	4a06      	ldr	r2, [pc, #24]	@ (8012f0c <uxr_nanos+0x28>)
 8012ef2:	9800      	ldr	r0, [sp, #0]
 8012ef4:	9902      	ldr	r1, [sp, #8]
 8012ef6:	9c01      	ldr	r4, [sp, #4]
 8012ef8:	fba0 0302 	umull	r0, r3, r0, r2
 8012efc:	1840      	adds	r0, r0, r1
 8012efe:	fb02 3304 	mla	r3, r2, r4, r3
 8012f02:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8012f06:	b004      	add	sp, #16
 8012f08:	bd10      	pop	{r4, pc}
 8012f0a:	bf00      	nop
 8012f0c:	3b9aca00 	.word	0x3b9aca00

08012f10 <on_full_output_buffer_fragmented>:
 8012f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f14:	460c      	mov	r4, r1
 8012f16:	b08a      	sub	sp, #40	@ 0x28
 8012f18:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012f1c:	4606      	mov	r6, r0
 8012f1e:	f104 0008 	add.w	r0, r4, #8
 8012f22:	f7ff ff4b 	bl	8012dbc <uxr_get_output_reliable_stream>
 8012f26:	4605      	mov	r5, r0
 8012f28:	f007 fbac 	bl	801a684 <get_available_free_slots>
 8012f2c:	b968      	cbnz	r0, 8012f4a <on_full_output_buffer_fragmented+0x3a>
 8012f2e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8012f32:	4620      	mov	r0, r4
 8012f34:	4798      	blx	r3
 8012f36:	b918      	cbnz	r0, 8012f40 <on_full_output_buffer_fragmented+0x30>
 8012f38:	2001      	movs	r0, #1
 8012f3a:	b00a      	add	sp, #40	@ 0x28
 8012f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f40:	4628      	mov	r0, r5
 8012f42:	f007 fb9f 	bl	801a684 <get_available_free_slots>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d0f6      	beq.n	8012f38 <on_full_output_buffer_fragmented+0x28>
 8012f4a:	892a      	ldrh	r2, [r5, #8]
 8012f4c:	686b      	ldr	r3, [r5, #4]
 8012f4e:	fbb3 f8f2 	udiv	r8, r3, r2
 8012f52:	89eb      	ldrh	r3, [r5, #14]
 8012f54:	7b29      	ldrb	r1, [r5, #12]
 8012f56:	fbb3 f0f2 	udiv	r0, r3, r2
 8012f5a:	fb02 3310 	mls	r3, r2, r0, r3
 8012f5e:	f5c1 417f 	rsb	r1, r1, #65280	@ 0xff00
 8012f62:	b29b      	uxth	r3, r3
 8012f64:	fb08 f303 	mul.w	r3, r8, r3
 8012f68:	31fc      	adds	r1, #252	@ 0xfc
 8012f6a:	f1a8 0804 	sub.w	r8, r8, #4
 8012f6e:	4441      	add	r1, r8
 8012f70:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012f74:	b28f      	uxth	r7, r1
 8012f76:	6829      	ldr	r1, [r5, #0]
 8012f78:	3304      	adds	r3, #4
 8012f7a:	1bd2      	subs	r2, r2, r7
 8012f7c:	4419      	add	r1, r3
 8012f7e:	f8c4 20c4 	str.w	r2, [r4, #196]	@ 0xc4
 8012f82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f86:	9300      	str	r3, [sp, #0]
 8012f88:	4642      	mov	r2, r8
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	a802      	add	r0, sp, #8
 8012f8e:	f7fd fbbb 	bl	8010708 <ucdr_init_buffer_origin_offset>
 8012f92:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012f96:	f102 0308 	add.w	r3, r2, #8
 8012f9a:	4543      	cmp	r3, r8
 8012f9c:	d928      	bls.n	8012ff0 <on_full_output_buffer_fragmented+0xe0>
 8012f9e:	463a      	mov	r2, r7
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	210d      	movs	r1, #13
 8012fa4:	a802      	add	r0, sp, #8
 8012fa6:	f7ff ff3d 	bl	8012e24 <uxr_buffer_submessage_header>
 8012faa:	8929      	ldrh	r1, [r5, #8]
 8012fac:	89eb      	ldrh	r3, [r5, #14]
 8012fae:	fbb3 f2f1 	udiv	r2, r3, r1
 8012fb2:	fb01 3312 	mls	r3, r1, r2, r3
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	686a      	ldr	r2, [r5, #4]
 8012fba:	fbb2 f2f1 	udiv	r2, r2, r1
 8012fbe:	fb02 f303 	mul.w	r3, r2, r3
 8012fc2:	682a      	ldr	r2, [r5, #0]
 8012fc4:	f842 8003 	str.w	r8, [r2, r3]
 8012fc8:	89e8      	ldrh	r0, [r5, #14]
 8012fca:	2101      	movs	r1, #1
 8012fcc:	f007 fcae 	bl	801a92c <uxr_seq_num_add>
 8012fd0:	9904      	ldr	r1, [sp, #16]
 8012fd2:	9a03      	ldr	r2, [sp, #12]
 8012fd4:	81e8      	strh	r0, [r5, #14]
 8012fd6:	1a52      	subs	r2, r2, r1
 8012fd8:	4630      	mov	r0, r6
 8012fda:	f7fd fba7 	bl	801072c <ucdr_init_buffer>
 8012fde:	4630      	mov	r0, r6
 8012fe0:	4910      	ldr	r1, [pc, #64]	@ (8013024 <on_full_output_buffer_fragmented+0x114>)
 8012fe2:	4622      	mov	r2, r4
 8012fe4:	f7fd fb76 	bl	80106d4 <ucdr_set_on_full_buffer_callback>
 8012fe8:	2000      	movs	r0, #0
 8012fea:	b00a      	add	sp, #40	@ 0x28
 8012fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ff0:	b292      	uxth	r2, r2
 8012ff2:	2302      	movs	r3, #2
 8012ff4:	210d      	movs	r1, #13
 8012ff6:	a802      	add	r0, sp, #8
 8012ff8:	f7ff ff14 	bl	8012e24 <uxr_buffer_submessage_header>
 8012ffc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013000:	8928      	ldrh	r0, [r5, #8]
 8013002:	f103 0208 	add.w	r2, r3, #8
 8013006:	89eb      	ldrh	r3, [r5, #14]
 8013008:	fbb3 f1f0 	udiv	r1, r3, r0
 801300c:	fb00 3311 	mls	r3, r0, r1, r3
 8013010:	b29b      	uxth	r3, r3
 8013012:	6869      	ldr	r1, [r5, #4]
 8013014:	fbb1 f1f0 	udiv	r1, r1, r0
 8013018:	fb01 f303 	mul.w	r3, r1, r3
 801301c:	6829      	ldr	r1, [r5, #0]
 801301e:	50ca      	str	r2, [r1, r3]
 8013020:	e7d2      	b.n	8012fc8 <on_full_output_buffer_fragmented+0xb8>
 8013022:	bf00      	nop
 8013024:	08012f11 	.word	0x08012f11

08013028 <uxr_prepare_output_stream>:
 8013028:	b5f0      	push	{r4, r5, r6, r7, lr}
 801302a:	b087      	sub	sp, #28
 801302c:	2707      	movs	r7, #7
 801302e:	9202      	str	r2, [sp, #8]
 8013030:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8013032:	2500      	movs	r5, #0
 8013034:	3204      	adds	r2, #4
 8013036:	e9cd 7500 	strd	r7, r5, [sp]
 801303a:	461c      	mov	r4, r3
 801303c:	4606      	mov	r6, r0
 801303e:	f7ff f807 	bl	8012050 <uxr_prepare_stream_to_write_submessage>
 8013042:	f080 0201 	eor.w	r2, r0, #1
 8013046:	b2d2      	uxtb	r2, r2
 8013048:	75a2      	strb	r2, [r4, #22]
 801304a:	b112      	cbz	r2, 8013052 <uxr_prepare_output_stream+0x2a>
 801304c:	4628      	mov	r0, r5
 801304e:	b007      	add	sp, #28
 8013050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013052:	aa05      	add	r2, sp, #20
 8013054:	9902      	ldr	r1, [sp, #8]
 8013056:	4630      	mov	r0, r6
 8013058:	f7ff f934 	bl	80122c4 <uxr_init_base_object_request>
 801305c:	a905      	add	r1, sp, #20
 801305e:	4605      	mov	r5, r0
 8013060:	4620      	mov	r0, r4
 8013062:	f001 f879 	bl	8014158 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013066:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801306a:	69a6      	ldr	r6, [r4, #24]
 801306c:	69e7      	ldr	r7, [r4, #28]
 801306e:	1a52      	subs	r2, r2, r1
 8013070:	4620      	mov	r0, r4
 8013072:	f7fd fb5b 	bl	801072c <ucdr_init_buffer>
 8013076:	4620      	mov	r0, r4
 8013078:	463a      	mov	r2, r7
 801307a:	4631      	mov	r1, r6
 801307c:	f7fd fb2a 	bl	80106d4 <ucdr_set_on_full_buffer_callback>
 8013080:	4628      	mov	r0, r5
 8013082:	b007      	add	sp, #28
 8013084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013086:	bf00      	nop

08013088 <uxr_prepare_output_stream_fragmented>:
 8013088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801308c:	b093      	sub	sp, #76	@ 0x4c
 801308e:	4605      	mov	r5, r0
 8013090:	9107      	str	r1, [sp, #28]
 8013092:	3008      	adds	r0, #8
 8013094:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013098:	9303      	str	r3, [sp, #12]
 801309a:	9206      	str	r2, [sp, #24]
 801309c:	f7ff fe8e 	bl	8012dbc <uxr_get_output_reliable_stream>
 80130a0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80130a4:	2b01      	cmp	r3, #1
 80130a6:	f000 8095 	beq.w	80131d4 <uxr_prepare_output_stream_fragmented+0x14c>
 80130aa:	4604      	mov	r4, r0
 80130ac:	2800      	cmp	r0, #0
 80130ae:	f000 8091 	beq.w	80131d4 <uxr_prepare_output_stream_fragmented+0x14c>
 80130b2:	f007 fae7 	bl	801a684 <get_available_free_slots>
 80130b6:	2800      	cmp	r0, #0
 80130b8:	f000 8087 	beq.w	80131ca <uxr_prepare_output_stream_fragmented+0x142>
 80130bc:	8922      	ldrh	r2, [r4, #8]
 80130be:	89e7      	ldrh	r7, [r4, #14]
 80130c0:	fbb7 f3f2 	udiv	r3, r7, r2
 80130c4:	fb02 7313 	mls	r3, r2, r3, r7
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	6861      	ldr	r1, [r4, #4]
 80130cc:	fbb1 f1f2 	udiv	r1, r1, r2
 80130d0:	6822      	ldr	r2, [r4, #0]
 80130d2:	9105      	str	r1, [sp, #20]
 80130d4:	fb01 f303 	mul.w	r3, r1, r3
 80130d8:	3304      	adds	r3, #4
 80130da:	eb02 0903 	add.w	r9, r2, r3
 80130de:	7b23      	ldrb	r3, [r4, #12]
 80130e0:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80130e4:	4543      	cmp	r3, r8
 80130e6:	f1a1 0b04 	sub.w	fp, r1, #4
 80130ea:	d37f      	bcc.n	80131ec <uxr_prepare_output_stream_fragmented+0x164>
 80130ec:	f1ab 0a04 	sub.w	sl, fp, #4
 80130f0:	ebaa 0a03 	sub.w	sl, sl, r3
 80130f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80130f6:	f8cd 8000 	str.w	r8, [sp]
 80130fa:	fa1f f38a 	uxth.w	r3, sl
 80130fe:	9304      	str	r3, [sp, #16]
 8013100:	465a      	mov	r2, fp
 8013102:	2300      	movs	r3, #0
 8013104:	4649      	mov	r1, r9
 8013106:	a80a      	add	r0, sp, #40	@ 0x28
 8013108:	f7fd fafe 	bl	8010708 <ucdr_init_buffer_origin_offset>
 801310c:	f106 0a08 	add.w	sl, r6, #8
 8013110:	45da      	cmp	sl, fp
 8013112:	bf2c      	ite	cs
 8013114:	2300      	movcs	r3, #0
 8013116:	2301      	movcc	r3, #1
 8013118:	9a04      	ldr	r2, [sp, #16]
 801311a:	005b      	lsls	r3, r3, #1
 801311c:	210d      	movs	r1, #13
 801311e:	a80a      	add	r0, sp, #40	@ 0x28
 8013120:	f7ff fe80 	bl	8012e24 <uxr_buffer_submessage_header>
 8013124:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013128:	fbb7 f2fc 	udiv	r2, r7, ip
 801312c:	fb0c 7212 	mls	r2, ip, r2, r7
 8013130:	b292      	uxth	r2, r2
 8013132:	6863      	ldr	r3, [r4, #4]
 8013134:	fbb3 f3fc 	udiv	r3, r3, ip
 8013138:	fb02 f303 	mul.w	r3, r2, r3
 801313c:	6822      	ldr	r2, [r4, #0]
 801313e:	2101      	movs	r1, #1
 8013140:	f842 b003 	str.w	fp, [r2, r3]
 8013144:	4638      	mov	r0, r7
 8013146:	f007 fbf1 	bl	801a92c <uxr_seq_num_add>
 801314a:	9b05      	ldr	r3, [sp, #20]
 801314c:	9e03      	ldr	r6, [sp, #12]
 801314e:	f1a3 0208 	sub.w	r2, r3, #8
 8013152:	f108 0104 	add.w	r1, r8, #4
 8013156:	4607      	mov	r7, r0
 8013158:	eba2 0208 	sub.w	r2, r2, r8
 801315c:	4449      	add	r1, r9
 801315e:	4630      	mov	r0, r6
 8013160:	f7fd fae4 	bl	801072c <ucdr_init_buffer>
 8013164:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8013166:	81e7      	strh	r7, [r4, #14]
 8013168:	1d1a      	adds	r2, r3, #4
 801316a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801316e:	bf28      	it	cs
 8013170:	2200      	movcs	r2, #0
 8013172:	2300      	movs	r3, #0
 8013174:	b292      	uxth	r2, r2
 8013176:	2107      	movs	r1, #7
 8013178:	4630      	mov	r0, r6
 801317a:	f7ff fe53 	bl	8012e24 <uxr_buffer_submessage_header>
 801317e:	9906      	ldr	r1, [sp, #24]
 8013180:	aa09      	add	r2, sp, #36	@ 0x24
 8013182:	4628      	mov	r0, r5
 8013184:	f7ff f89e 	bl	80122c4 <uxr_init_base_object_request>
 8013188:	4604      	mov	r4, r0
 801318a:	b320      	cbz	r0, 80131d6 <uxr_prepare_output_stream_fragmented+0x14e>
 801318c:	9e03      	ldr	r6, [sp, #12]
 801318e:	a909      	add	r1, sp, #36	@ 0x24
 8013190:	4630      	mov	r0, r6
 8013192:	f000 ffe1 	bl	8014158 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013196:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801319a:	4630      	mov	r0, r6
 801319c:	1a52      	subs	r2, r2, r1
 801319e:	f7fd fac5 	bl	801072c <ucdr_init_buffer>
 80131a2:	9b07      	ldr	r3, [sp, #28]
 80131a4:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80131a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80131aa:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80131ae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80131b0:	491a      	ldr	r1, [pc, #104]	@ (801321c <uxr_prepare_output_stream_fragmented+0x194>)
 80131b2:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80131b6:	4630      	mov	r0, r6
 80131b8:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80131bc:	462a      	mov	r2, r5
 80131be:	f7fd fa89 	bl	80106d4 <ucdr_set_on_full_buffer_callback>
 80131c2:	4620      	mov	r0, r4
 80131c4:	b013      	add	sp, #76	@ 0x4c
 80131c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ca:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80131cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80131ce:	4628      	mov	r0, r5
 80131d0:	4798      	blx	r3
 80131d2:	b920      	cbnz	r0, 80131de <uxr_prepare_output_stream_fragmented+0x156>
 80131d4:	2400      	movs	r4, #0
 80131d6:	4620      	mov	r0, r4
 80131d8:	b013      	add	sp, #76	@ 0x4c
 80131da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131de:	4620      	mov	r0, r4
 80131e0:	f007 fa50 	bl	801a684 <get_available_free_slots>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	f47f af69 	bne.w	80130bc <uxr_prepare_output_stream_fragmented+0x34>
 80131ea:	e7f3      	b.n	80131d4 <uxr_prepare_output_stream_fragmented+0x14c>
 80131ec:	4638      	mov	r0, r7
 80131ee:	2101      	movs	r1, #1
 80131f0:	f007 fb9c 	bl	801a92c <uxr_seq_num_add>
 80131f4:	8921      	ldrh	r1, [r4, #8]
 80131f6:	fbb0 f2f1 	udiv	r2, r0, r1
 80131fa:	fb01 0212 	mls	r2, r1, r2, r0
 80131fe:	b292      	uxth	r2, r2
 8013200:	6863      	ldr	r3, [r4, #4]
 8013202:	fbb3 f3f1 	udiv	r3, r3, r1
 8013206:	fb02 f303 	mul.w	r3, r2, r3
 801320a:	6822      	ldr	r2, [r4, #0]
 801320c:	3304      	adds	r3, #4
 801320e:	eb02 0903 	add.w	r9, r2, r3
 8013212:	4607      	mov	r7, r0
 8013214:	7b23      	ldrb	r3, [r4, #12]
 8013216:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801321a:	e767      	b.n	80130ec <uxr_prepare_output_stream_fragmented+0x64>
 801321c:	08012f11 	.word	0x08012f11

08013220 <uxr_serialize_message_header>:
 8013220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013224:	4617      	mov	r7, r2
 8013226:	4604      	mov	r4, r0
 8013228:	461e      	mov	r6, r3
 801322a:	460d      	mov	r5, r1
 801322c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013230:	f7fb fc5a 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013234:	4639      	mov	r1, r7
 8013236:	4620      	mov	r0, r4
 8013238:	f7fb fc56 	bl	800eae8 <ucdr_serialize_uint8_t>
 801323c:	4632      	mov	r2, r6
 801323e:	2101      	movs	r1, #1
 8013240:	4620      	mov	r0, r4
 8013242:	f7fb fd07 	bl	800ec54 <ucdr_serialize_endian_uint16_t>
 8013246:	062b      	lsls	r3, r5, #24
 8013248:	d501      	bpl.n	801324e <uxr_serialize_message_header+0x2e>
 801324a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801324e:	4641      	mov	r1, r8
 8013250:	4620      	mov	r0, r4
 8013252:	2204      	movs	r2, #4
 8013254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013258:	f7fb b8a6 	b.w	800e3a8 <ucdr_serialize_array_uint8_t>

0801325c <uxr_deserialize_message_header>:
 801325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013260:	4617      	mov	r7, r2
 8013262:	4604      	mov	r4, r0
 8013264:	461e      	mov	r6, r3
 8013266:	460d      	mov	r5, r1
 8013268:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801326c:	f7fb fc52 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8013270:	4639      	mov	r1, r7
 8013272:	4620      	mov	r0, r4
 8013274:	f7fb fc4e 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8013278:	4632      	mov	r2, r6
 801327a:	2101      	movs	r1, #1
 801327c:	4620      	mov	r0, r4
 801327e:	f7fb fddf 	bl	800ee40 <ucdr_deserialize_endian_uint16_t>
 8013282:	f995 3000 	ldrsb.w	r3, [r5]
 8013286:	2b00      	cmp	r3, #0
 8013288:	da01      	bge.n	801328e <uxr_deserialize_message_header+0x32>
 801328a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801328e:	4641      	mov	r1, r8
 8013290:	4620      	mov	r0, r4
 8013292:	2204      	movs	r2, #4
 8013294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013298:	f7fb b8ea 	b.w	800e470 <ucdr_deserialize_array_uint8_t>

0801329c <uxr_serialize_submessage_header>:
 801329c:	b570      	push	{r4, r5, r6, lr}
 801329e:	4616      	mov	r6, r2
 80132a0:	4604      	mov	r4, r0
 80132a2:	461d      	mov	r5, r3
 80132a4:	f7fb fc20 	bl	800eae8 <ucdr_serialize_uint8_t>
 80132a8:	4631      	mov	r1, r6
 80132aa:	4620      	mov	r0, r4
 80132ac:	f7fb fc1c 	bl	800eae8 <ucdr_serialize_uint8_t>
 80132b0:	462a      	mov	r2, r5
 80132b2:	4620      	mov	r0, r4
 80132b4:	2101      	movs	r1, #1
 80132b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132ba:	f7fb bccb 	b.w	800ec54 <ucdr_serialize_endian_uint16_t>
 80132be:	bf00      	nop

080132c0 <uxr_deserialize_submessage_header>:
 80132c0:	b570      	push	{r4, r5, r6, lr}
 80132c2:	4616      	mov	r6, r2
 80132c4:	4604      	mov	r4, r0
 80132c6:	461d      	mov	r5, r3
 80132c8:	f7fb fc24 	bl	800eb14 <ucdr_deserialize_uint8_t>
 80132cc:	4631      	mov	r1, r6
 80132ce:	4620      	mov	r0, r4
 80132d0:	f7fb fc20 	bl	800eb14 <ucdr_deserialize_uint8_t>
 80132d4:	462a      	mov	r2, r5
 80132d6:	4620      	mov	r0, r4
 80132d8:	2101      	movs	r1, #1
 80132da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132de:	f7fb bdaf 	b.w	800ee40 <ucdr_deserialize_endian_uint16_t>
 80132e2:	bf00      	nop

080132e4 <uxr_serialize_CLIENT_Representation>:
 80132e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132e8:	2204      	movs	r2, #4
 80132ea:	460e      	mov	r6, r1
 80132ec:	4605      	mov	r5, r0
 80132ee:	f7fb f85b 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 80132f2:	2202      	movs	r2, #2
 80132f4:	1d31      	adds	r1, r6, #4
 80132f6:	4604      	mov	r4, r0
 80132f8:	4628      	mov	r0, r5
 80132fa:	f7fb f855 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 80132fe:	2202      	movs	r2, #2
 8013300:	4004      	ands	r4, r0
 8013302:	1db1      	adds	r1, r6, #6
 8013304:	4628      	mov	r0, r5
 8013306:	f7fb f84f 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 801330a:	b2e4      	uxtb	r4, r4
 801330c:	2204      	movs	r2, #4
 801330e:	4004      	ands	r4, r0
 8013310:	f106 0108 	add.w	r1, r6, #8
 8013314:	4628      	mov	r0, r5
 8013316:	f7fb f847 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 801331a:	7b31      	ldrb	r1, [r6, #12]
 801331c:	ea00 0804 	and.w	r8, r0, r4
 8013320:	4628      	mov	r0, r5
 8013322:	f7fb fbe1 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013326:	7b71      	ldrb	r1, [r6, #13]
 8013328:	ea08 0800 	and.w	r8, r8, r0
 801332c:	4628      	mov	r0, r5
 801332e:	f7fb fbad 	bl	800ea8c <ucdr_serialize_bool>
 8013332:	7b73      	ldrb	r3, [r6, #13]
 8013334:	ea08 0800 	and.w	r8, r8, r0
 8013338:	b93b      	cbnz	r3, 801334a <uxr_serialize_CLIENT_Representation+0x66>
 801333a:	8bb1      	ldrh	r1, [r6, #28]
 801333c:	4628      	mov	r0, r5
 801333e:	f7fb fbff 	bl	800eb40 <ucdr_serialize_uint16_t>
 8013342:	ea08 0000 	and.w	r0, r8, r0
 8013346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801334a:	6931      	ldr	r1, [r6, #16]
 801334c:	4628      	mov	r0, r5
 801334e:	f7fb fde7 	bl	800ef20 <ucdr_serialize_uint32_t>
 8013352:	6933      	ldr	r3, [r6, #16]
 8013354:	b1e3      	cbz	r3, 8013390 <uxr_serialize_CLIENT_Representation+0xac>
 8013356:	b1c0      	cbz	r0, 801338a <uxr_serialize_CLIENT_Representation+0xa6>
 8013358:	4637      	mov	r7, r6
 801335a:	f04f 0900 	mov.w	r9, #0
 801335e:	e001      	b.n	8013364 <uxr_serialize_CLIENT_Representation+0x80>
 8013360:	3708      	adds	r7, #8
 8013362:	b194      	cbz	r4, 801338a <uxr_serialize_CLIENT_Representation+0xa6>
 8013364:	6979      	ldr	r1, [r7, #20]
 8013366:	4628      	mov	r0, r5
 8013368:	f006 fc66 	bl	8019c38 <ucdr_serialize_string>
 801336c:	69b9      	ldr	r1, [r7, #24]
 801336e:	4604      	mov	r4, r0
 8013370:	4628      	mov	r0, r5
 8013372:	f006 fc61 	bl	8019c38 <ucdr_serialize_string>
 8013376:	6933      	ldr	r3, [r6, #16]
 8013378:	f109 0901 	add.w	r9, r9, #1
 801337c:	4004      	ands	r4, r0
 801337e:	4599      	cmp	r9, r3
 8013380:	b2e4      	uxtb	r4, r4
 8013382:	d3ed      	bcc.n	8013360 <uxr_serialize_CLIENT_Representation+0x7c>
 8013384:	ea08 0804 	and.w	r8, r8, r4
 8013388:	e7d7      	b.n	801333a <uxr_serialize_CLIENT_Representation+0x56>
 801338a:	f04f 0800 	mov.w	r8, #0
 801338e:	e7d4      	b.n	801333a <uxr_serialize_CLIENT_Representation+0x56>
 8013390:	ea08 0800 	and.w	r8, r8, r0
 8013394:	e7d1      	b.n	801333a <uxr_serialize_CLIENT_Representation+0x56>
 8013396:	bf00      	nop

08013398 <uxr_deserialize_CLIENT_Representation>:
 8013398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801339c:	2204      	movs	r2, #4
 801339e:	460c      	mov	r4, r1
 80133a0:	4605      	mov	r5, r0
 80133a2:	f7fb f865 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 80133a6:	2202      	movs	r2, #2
 80133a8:	1d21      	adds	r1, r4, #4
 80133aa:	4606      	mov	r6, r0
 80133ac:	4628      	mov	r0, r5
 80133ae:	f7fb f85f 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 80133b2:	2202      	movs	r2, #2
 80133b4:	4006      	ands	r6, r0
 80133b6:	1da1      	adds	r1, r4, #6
 80133b8:	4628      	mov	r0, r5
 80133ba:	f7fb f859 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 80133be:	b2f6      	uxtb	r6, r6
 80133c0:	2204      	movs	r2, #4
 80133c2:	4006      	ands	r6, r0
 80133c4:	f104 0108 	add.w	r1, r4, #8
 80133c8:	4628      	mov	r0, r5
 80133ca:	f7fb f851 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 80133ce:	f104 010c 	add.w	r1, r4, #12
 80133d2:	ea00 0706 	and.w	r7, r0, r6
 80133d6:	4628      	mov	r0, r5
 80133d8:	f7fb fb9c 	bl	800eb14 <ucdr_deserialize_uint8_t>
 80133dc:	f104 010d 	add.w	r1, r4, #13
 80133e0:	4007      	ands	r7, r0
 80133e2:	4628      	mov	r0, r5
 80133e4:	f7fb fb68 	bl	800eab8 <ucdr_deserialize_bool>
 80133e8:	7b63      	ldrb	r3, [r4, #13]
 80133ea:	4007      	ands	r7, r0
 80133ec:	b93b      	cbnz	r3, 80133fe <uxr_deserialize_CLIENT_Representation+0x66>
 80133ee:	f104 011c 	add.w	r1, r4, #28
 80133f2:	4628      	mov	r0, r5
 80133f4:	f7fb fca8 	bl	800ed48 <ucdr_deserialize_uint16_t>
 80133f8:	4038      	ands	r0, r7
 80133fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133fe:	f104 0110 	add.w	r1, r4, #16
 8013402:	4628      	mov	r0, r5
 8013404:	f7fb feb6 	bl	800f174 <ucdr_deserialize_uint32_t>
 8013408:	6923      	ldr	r3, [r4, #16]
 801340a:	2b01      	cmp	r3, #1
 801340c:	d903      	bls.n	8013416 <uxr_deserialize_CLIENT_Representation+0x7e>
 801340e:	2301      	movs	r3, #1
 8013410:	75ab      	strb	r3, [r5, #22]
 8013412:	2700      	movs	r7, #0
 8013414:	e7eb      	b.n	80133ee <uxr_deserialize_CLIENT_Representation+0x56>
 8013416:	b30b      	cbz	r3, 801345c <uxr_deserialize_CLIENT_Representation+0xc4>
 8013418:	2800      	cmp	r0, #0
 801341a:	d0fa      	beq.n	8013412 <uxr_deserialize_CLIENT_Representation+0x7a>
 801341c:	46a0      	mov	r8, r4
 801341e:	f04f 0900 	mov.w	r9, #0
 8013422:	e003      	b.n	801342c <uxr_deserialize_CLIENT_Representation+0x94>
 8013424:	f108 0808 	add.w	r8, r8, #8
 8013428:	2e00      	cmp	r6, #0
 801342a:	d0f2      	beq.n	8013412 <uxr_deserialize_CLIENT_Representation+0x7a>
 801342c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013434:	4628      	mov	r0, r5
 8013436:	f006 fc0d 	bl	8019c54 <ucdr_deserialize_string>
 801343a:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801343e:	4606      	mov	r6, r0
 8013440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013444:	4628      	mov	r0, r5
 8013446:	f006 fc05 	bl	8019c54 <ucdr_deserialize_string>
 801344a:	6923      	ldr	r3, [r4, #16]
 801344c:	f109 0901 	add.w	r9, r9, #1
 8013450:	4006      	ands	r6, r0
 8013452:	4599      	cmp	r9, r3
 8013454:	b2f6      	uxtb	r6, r6
 8013456:	d3e5      	bcc.n	8013424 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013458:	4037      	ands	r7, r6
 801345a:	e7c8      	b.n	80133ee <uxr_deserialize_CLIENT_Representation+0x56>
 801345c:	4007      	ands	r7, r0
 801345e:	e7c6      	b.n	80133ee <uxr_deserialize_CLIENT_Representation+0x56>

08013460 <uxr_serialize_AGENT_Representation>:
 8013460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013464:	2204      	movs	r2, #4
 8013466:	460f      	mov	r7, r1
 8013468:	4605      	mov	r5, r0
 801346a:	f7fa ff9d 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 801346e:	2202      	movs	r2, #2
 8013470:	4604      	mov	r4, r0
 8013472:	1d39      	adds	r1, r7, #4
 8013474:	4628      	mov	r0, r5
 8013476:	f7fa ff97 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 801347a:	4020      	ands	r0, r4
 801347c:	2202      	movs	r2, #2
 801347e:	b2c4      	uxtb	r4, r0
 8013480:	1db9      	adds	r1, r7, #6
 8013482:	4628      	mov	r0, r5
 8013484:	f7fa ff90 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013488:	7a39      	ldrb	r1, [r7, #8]
 801348a:	4004      	ands	r4, r0
 801348c:	4628      	mov	r0, r5
 801348e:	f7fb fafd 	bl	800ea8c <ucdr_serialize_bool>
 8013492:	7a3b      	ldrb	r3, [r7, #8]
 8013494:	ea00 0804 	and.w	r8, r0, r4
 8013498:	b913      	cbnz	r3, 80134a0 <uxr_serialize_AGENT_Representation+0x40>
 801349a:	4640      	mov	r0, r8
 801349c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134a0:	68f9      	ldr	r1, [r7, #12]
 80134a2:	4628      	mov	r0, r5
 80134a4:	f7fb fd3c 	bl	800ef20 <ucdr_serialize_uint32_t>
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	b303      	cbz	r3, 80134ee <uxr_serialize_AGENT_Representation+0x8e>
 80134ac:	b1d0      	cbz	r0, 80134e4 <uxr_serialize_AGENT_Representation+0x84>
 80134ae:	463e      	mov	r6, r7
 80134b0:	f04f 0900 	mov.w	r9, #0
 80134b4:	e001      	b.n	80134ba <uxr_serialize_AGENT_Representation+0x5a>
 80134b6:	3608      	adds	r6, #8
 80134b8:	b1a4      	cbz	r4, 80134e4 <uxr_serialize_AGENT_Representation+0x84>
 80134ba:	6931      	ldr	r1, [r6, #16]
 80134bc:	4628      	mov	r0, r5
 80134be:	f006 fbbb 	bl	8019c38 <ucdr_serialize_string>
 80134c2:	6971      	ldr	r1, [r6, #20]
 80134c4:	4604      	mov	r4, r0
 80134c6:	4628      	mov	r0, r5
 80134c8:	f006 fbb6 	bl	8019c38 <ucdr_serialize_string>
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	f109 0901 	add.w	r9, r9, #1
 80134d2:	4004      	ands	r4, r0
 80134d4:	4599      	cmp	r9, r3
 80134d6:	b2e4      	uxtb	r4, r4
 80134d8:	d3ed      	bcc.n	80134b6 <uxr_serialize_AGENT_Representation+0x56>
 80134da:	ea08 0804 	and.w	r8, r8, r4
 80134de:	4640      	mov	r0, r8
 80134e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134e4:	f04f 0800 	mov.w	r8, #0
 80134e8:	4640      	mov	r0, r8
 80134ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ee:	ea08 0800 	and.w	r8, r8, r0
 80134f2:	e7d2      	b.n	801349a <uxr_serialize_AGENT_Representation+0x3a>

080134f4 <uxr_serialize_DATAWRITER_Representation>:
 80134f4:	b570      	push	{r4, r5, r6, lr}
 80134f6:	460d      	mov	r5, r1
 80134f8:	7809      	ldrb	r1, [r1, #0]
 80134fa:	4606      	mov	r6, r0
 80134fc:	f7fb faf4 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013500:	4604      	mov	r4, r0
 8013502:	b130      	cbz	r0, 8013512 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013504:	782b      	ldrb	r3, [r5, #0]
 8013506:	2b02      	cmp	r3, #2
 8013508:	d00c      	beq.n	8013524 <uxr_serialize_DATAWRITER_Representation+0x30>
 801350a:	2b03      	cmp	r3, #3
 801350c:	d010      	beq.n	8013530 <uxr_serialize_DATAWRITER_Representation+0x3c>
 801350e:	2b01      	cmp	r3, #1
 8013510:	d008      	beq.n	8013524 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013512:	2202      	movs	r2, #2
 8013514:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013518:	4630      	mov	r0, r6
 801351a:	f7fa ff45 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 801351e:	4020      	ands	r0, r4
 8013520:	b2c0      	uxtb	r0, r0
 8013522:	bd70      	pop	{r4, r5, r6, pc}
 8013524:	6869      	ldr	r1, [r5, #4]
 8013526:	4630      	mov	r0, r6
 8013528:	f006 fb86 	bl	8019c38 <ucdr_serialize_string>
 801352c:	4604      	mov	r4, r0
 801352e:	e7f0      	b.n	8013512 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013530:	4629      	mov	r1, r5
 8013532:	4630      	mov	r0, r6
 8013534:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013538:	3104      	adds	r1, #4
 801353a:	f7fd f995 	bl	8010868 <ucdr_serialize_sequence_uint8_t>
 801353e:	4604      	mov	r4, r0
 8013540:	e7e7      	b.n	8013512 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013542:	bf00      	nop

08013544 <uxr_serialize_ObjectVariant.part.0>:
 8013544:	b570      	push	{r4, r5, r6, lr}
 8013546:	780b      	ldrb	r3, [r1, #0]
 8013548:	3b01      	subs	r3, #1
 801354a:	460c      	mov	r4, r1
 801354c:	4605      	mov	r5, r0
 801354e:	2b0d      	cmp	r3, #13
 8013550:	d816      	bhi.n	8013580 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013552:	e8df f003 	tbb	[pc, r3]
 8013556:	0733      	.short	0x0733
 8013558:	07071717 	.word	0x07071717
 801355c:	0c150707 	.word	0x0c150707
 8013560:	4c510c0c 	.word	0x4c510c0c
 8013564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013568:	3104      	adds	r1, #4
 801356a:	f7ff bfc3 	b.w	80134f4 <uxr_serialize_DATAWRITER_Representation>
 801356e:	7909      	ldrb	r1, [r1, #4]
 8013570:	f7fb faba 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013574:	b300      	cbz	r0, 80135b8 <uxr_serialize_ObjectVariant.part.0+0x74>
 8013576:	7923      	ldrb	r3, [r4, #4]
 8013578:	2b01      	cmp	r3, #1
 801357a:	d042      	beq.n	8013602 <uxr_serialize_ObjectVariant.part.0+0xbe>
 801357c:	2b02      	cmp	r3, #2
 801357e:	d040      	beq.n	8013602 <uxr_serialize_ObjectVariant.part.0+0xbe>
 8013580:	2001      	movs	r0, #1
 8013582:	bd70      	pop	{r4, r5, r6, pc}
 8013584:	7909      	ldrb	r1, [r1, #4]
 8013586:	f7fb faaf 	bl	800eae8 <ucdr_serialize_uint8_t>
 801358a:	4606      	mov	r6, r0
 801358c:	b158      	cbz	r0, 80135a6 <uxr_serialize_ObjectVariant.part.0+0x62>
 801358e:	7923      	ldrb	r3, [r4, #4]
 8013590:	2b02      	cmp	r3, #2
 8013592:	d03c      	beq.n	801360e <uxr_serialize_ObjectVariant.part.0+0xca>
 8013594:	2b03      	cmp	r3, #3
 8013596:	d106      	bne.n	80135a6 <uxr_serialize_ObjectVariant.part.0+0x62>
 8013598:	68a2      	ldr	r2, [r4, #8]
 801359a:	f104 010c 	add.w	r1, r4, #12
 801359e:	4628      	mov	r0, r5
 80135a0:	f7fd f962 	bl	8010868 <ucdr_serialize_sequence_uint8_t>
 80135a4:	4606      	mov	r6, r0
 80135a6:	2202      	movs	r2, #2
 80135a8:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80135ac:	4628      	mov	r0, r5
 80135ae:	f7fa fefb 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 80135b2:	4030      	ands	r0, r6
 80135b4:	b2c0      	uxtb	r0, r0
 80135b6:	bd70      	pop	{r4, r5, r6, pc}
 80135b8:	2000      	movs	r0, #0
 80135ba:	bd70      	pop	{r4, r5, r6, pc}
 80135bc:	7909      	ldrb	r1, [r1, #4]
 80135be:	f7fb fa93 	bl	800eae8 <ucdr_serialize_uint8_t>
 80135c2:	4606      	mov	r6, r0
 80135c4:	b158      	cbz	r0, 80135de <uxr_serialize_ObjectVariant.part.0+0x9a>
 80135c6:	7923      	ldrb	r3, [r4, #4]
 80135c8:	2b02      	cmp	r3, #2
 80135ca:	d003      	beq.n	80135d4 <uxr_serialize_ObjectVariant.part.0+0x90>
 80135cc:	2b03      	cmp	r3, #3
 80135ce:	d024      	beq.n	801361a <uxr_serialize_ObjectVariant.part.0+0xd6>
 80135d0:	2b01      	cmp	r3, #1
 80135d2:	d104      	bne.n	80135de <uxr_serialize_ObjectVariant.part.0+0x9a>
 80135d4:	68a1      	ldr	r1, [r4, #8]
 80135d6:	4628      	mov	r0, r5
 80135d8:	f006 fb2e 	bl	8019c38 <ucdr_serialize_string>
 80135dc:	4606      	mov	r6, r0
 80135de:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80135e2:	4628      	mov	r0, r5
 80135e4:	f7fb ffa8 	bl	800f538 <ucdr_serialize_int16_t>
 80135e8:	4030      	ands	r0, r6
 80135ea:	b2c0      	uxtb	r0, r0
 80135ec:	bd70      	pop	{r4, r5, r6, pc}
 80135ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135f2:	3104      	adds	r1, #4
 80135f4:	f7ff be76 	b.w	80132e4 <uxr_serialize_CLIENT_Representation>
 80135f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135fc:	3104      	adds	r1, #4
 80135fe:	f7ff bf2f 	b.w	8013460 <uxr_serialize_AGENT_Representation>
 8013602:	68a1      	ldr	r1, [r4, #8]
 8013604:	4628      	mov	r0, r5
 8013606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801360a:	f006 bb15 	b.w	8019c38 <ucdr_serialize_string>
 801360e:	68a1      	ldr	r1, [r4, #8]
 8013610:	4628      	mov	r0, r5
 8013612:	f006 fb11 	bl	8019c38 <ucdr_serialize_string>
 8013616:	4606      	mov	r6, r0
 8013618:	e7c5      	b.n	80135a6 <uxr_serialize_ObjectVariant.part.0+0x62>
 801361a:	68a2      	ldr	r2, [r4, #8]
 801361c:	f104 010c 	add.w	r1, r4, #12
 8013620:	4628      	mov	r0, r5
 8013622:	f7fd f921 	bl	8010868 <ucdr_serialize_sequence_uint8_t>
 8013626:	4606      	mov	r6, r0
 8013628:	e7d9      	b.n	80135de <uxr_serialize_ObjectVariant.part.0+0x9a>
 801362a:	bf00      	nop

0801362c <uxr_deserialize_DATAWRITER_Representation>:
 801362c:	b570      	push	{r4, r5, r6, lr}
 801362e:	4606      	mov	r6, r0
 8013630:	460d      	mov	r5, r1
 8013632:	f7fb fa6f 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8013636:	4604      	mov	r4, r0
 8013638:	b130      	cbz	r0, 8013648 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801363a:	782b      	ldrb	r3, [r5, #0]
 801363c:	2b02      	cmp	r3, #2
 801363e:	d00c      	beq.n	801365a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013640:	2b03      	cmp	r3, #3
 8013642:	d012      	beq.n	801366a <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013644:	2b01      	cmp	r3, #1
 8013646:	d008      	beq.n	801365a <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013648:	2202      	movs	r2, #2
 801364a:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801364e:	4630      	mov	r0, r6
 8013650:	f7fa ff0e 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013654:	4020      	ands	r0, r4
 8013656:	b2c0      	uxtb	r0, r0
 8013658:	bd70      	pop	{r4, r5, r6, pc}
 801365a:	6869      	ldr	r1, [r5, #4]
 801365c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013660:	4630      	mov	r0, r6
 8013662:	f006 faf7 	bl	8019c54 <ucdr_deserialize_string>
 8013666:	4604      	mov	r4, r0
 8013668:	e7ee      	b.n	8013648 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801366a:	1d2b      	adds	r3, r5, #4
 801366c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013670:	f105 0108 	add.w	r1, r5, #8
 8013674:	4630      	mov	r0, r6
 8013676:	f7fd f909 	bl	801088c <ucdr_deserialize_sequence_uint8_t>
 801367a:	4604      	mov	r4, r0
 801367c:	e7e4      	b.n	8013648 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801367e:	bf00      	nop

08013680 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013680:	b570      	push	{r4, r5, r6, lr}
 8013682:	460d      	mov	r5, r1
 8013684:	7809      	ldrb	r1, [r1, #0]
 8013686:	4606      	mov	r6, r0
 8013688:	f7fb fa00 	bl	800ea8c <ucdr_serialize_bool>
 801368c:	782b      	ldrb	r3, [r5, #0]
 801368e:	4604      	mov	r4, r0
 8013690:	b94b      	cbnz	r3, 80136a6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013692:	7a29      	ldrb	r1, [r5, #8]
 8013694:	4630      	mov	r0, r6
 8013696:	f7fb f9f9 	bl	800ea8c <ucdr_serialize_bool>
 801369a:	7a2b      	ldrb	r3, [r5, #8]
 801369c:	4004      	ands	r4, r0
 801369e:	b2e4      	uxtb	r4, r4
 80136a0:	b943      	cbnz	r3, 80136b4 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80136a2:	4620      	mov	r0, r4
 80136a4:	bd70      	pop	{r4, r5, r6, pc}
 80136a6:	6869      	ldr	r1, [r5, #4]
 80136a8:	4630      	mov	r0, r6
 80136aa:	f006 fac5 	bl	8019c38 <ucdr_serialize_string>
 80136ae:	4004      	ands	r4, r0
 80136b0:	b2e4      	uxtb	r4, r4
 80136b2:	e7ee      	b.n	8013692 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80136b4:	68e9      	ldr	r1, [r5, #12]
 80136b6:	4630      	mov	r0, r6
 80136b8:	f006 fabe 	bl	8019c38 <ucdr_serialize_string>
 80136bc:	4004      	ands	r4, r0
 80136be:	4620      	mov	r0, r4
 80136c0:	bd70      	pop	{r4, r5, r6, pc}
 80136c2:	bf00      	nop

080136c4 <uxr_serialize_OBJK_Topic_Binary>:
 80136c4:	b570      	push	{r4, r5, r6, lr}
 80136c6:	460d      	mov	r5, r1
 80136c8:	6809      	ldr	r1, [r1, #0]
 80136ca:	4606      	mov	r6, r0
 80136cc:	f006 fab4 	bl	8019c38 <ucdr_serialize_string>
 80136d0:	7929      	ldrb	r1, [r5, #4]
 80136d2:	4604      	mov	r4, r0
 80136d4:	4630      	mov	r0, r6
 80136d6:	f7fb f9d9 	bl	800ea8c <ucdr_serialize_bool>
 80136da:	792b      	ldrb	r3, [r5, #4]
 80136dc:	4004      	ands	r4, r0
 80136de:	b2e4      	uxtb	r4, r4
 80136e0:	b943      	cbnz	r3, 80136f4 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80136e2:	7b29      	ldrb	r1, [r5, #12]
 80136e4:	4630      	mov	r0, r6
 80136e6:	f7fb f9d1 	bl	800ea8c <ucdr_serialize_bool>
 80136ea:	7b2b      	ldrb	r3, [r5, #12]
 80136ec:	4004      	ands	r4, r0
 80136ee:	b93b      	cbnz	r3, 8013700 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80136f0:	4620      	mov	r0, r4
 80136f2:	bd70      	pop	{r4, r5, r6, pc}
 80136f4:	68a9      	ldr	r1, [r5, #8]
 80136f6:	4630      	mov	r0, r6
 80136f8:	f006 fa9e 	bl	8019c38 <ucdr_serialize_string>
 80136fc:	4004      	ands	r4, r0
 80136fe:	e7f0      	b.n	80136e2 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013700:	6929      	ldr	r1, [r5, #16]
 8013702:	4630      	mov	r0, r6
 8013704:	f006 fa98 	bl	8019c38 <ucdr_serialize_string>
 8013708:	4004      	ands	r4, r0
 801370a:	b2e4      	uxtb	r4, r4
 801370c:	4620      	mov	r0, r4
 801370e:	bd70      	pop	{r4, r5, r6, pc}

08013710 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013714:	460c      	mov	r4, r1
 8013716:	7809      	ldrb	r1, [r1, #0]
 8013718:	4606      	mov	r6, r0
 801371a:	f7fb f9b7 	bl	800ea8c <ucdr_serialize_bool>
 801371e:	7823      	ldrb	r3, [r4, #0]
 8013720:	4605      	mov	r5, r0
 8013722:	b96b      	cbnz	r3, 8013740 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013724:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013728:	4630      	mov	r0, r6
 801372a:	f7fb f9af 	bl	800ea8c <ucdr_serialize_bool>
 801372e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013732:	4005      	ands	r5, r0
 8013734:	b2ed      	uxtb	r5, r5
 8013736:	2b00      	cmp	r3, #0
 8013738:	d16a      	bne.n	8013810 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x100>
 801373a:	4628      	mov	r0, r5
 801373c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013740:	6861      	ldr	r1, [r4, #4]
 8013742:	4630      	mov	r0, r6
 8013744:	f7fb fbec 	bl	800ef20 <ucdr_serialize_uint32_t>
 8013748:	6863      	ldr	r3, [r4, #4]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d06c      	beq.n	8013828 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x118>
 801374e:	2800      	cmp	r0, #0
 8013750:	d068      	beq.n	8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013752:	68a1      	ldr	r1, [r4, #8]
 8013754:	4630      	mov	r0, r6
 8013756:	f006 fa6f 	bl	8019c38 <ucdr_serialize_string>
 801375a:	6862      	ldr	r2, [r4, #4]
 801375c:	2a01      	cmp	r2, #1
 801375e:	d953      	bls.n	8013808 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013760:	2800      	cmp	r0, #0
 8013762:	d05f      	beq.n	8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013764:	68e1      	ldr	r1, [r4, #12]
 8013766:	4630      	mov	r0, r6
 8013768:	f006 fa66 	bl	8019c38 <ucdr_serialize_string>
 801376c:	6862      	ldr	r2, [r4, #4]
 801376e:	2a02      	cmp	r2, #2
 8013770:	d94a      	bls.n	8013808 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013772:	2800      	cmp	r0, #0
 8013774:	d056      	beq.n	8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013776:	6921      	ldr	r1, [r4, #16]
 8013778:	4630      	mov	r0, r6
 801377a:	f006 fa5d 	bl	8019c38 <ucdr_serialize_string>
 801377e:	6862      	ldr	r2, [r4, #4]
 8013780:	2a03      	cmp	r2, #3
 8013782:	d941      	bls.n	8013808 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013784:	2800      	cmp	r0, #0
 8013786:	d04d      	beq.n	8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 8013788:	6961      	ldr	r1, [r4, #20]
 801378a:	4630      	mov	r0, r6
 801378c:	f006 fa54 	bl	8019c38 <ucdr_serialize_string>
 8013790:	6862      	ldr	r2, [r4, #4]
 8013792:	2a04      	cmp	r2, #4
 8013794:	d938      	bls.n	8013808 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013796:	2800      	cmp	r0, #0
 8013798:	d044      	beq.n	8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 801379a:	69a1      	ldr	r1, [r4, #24]
 801379c:	4630      	mov	r0, r6
 801379e:	f006 fa4b 	bl	8019c38 <ucdr_serialize_string>
 80137a2:	6862      	ldr	r2, [r4, #4]
 80137a4:	2a05      	cmp	r2, #5
 80137a6:	d92f      	bls.n	8013808 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80137a8:	2800      	cmp	r0, #0
 80137aa:	d03b      	beq.n	8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80137ac:	69e1      	ldr	r1, [r4, #28]
 80137ae:	4630      	mov	r0, r6
 80137b0:	f006 fa42 	bl	8019c38 <ucdr_serialize_string>
 80137b4:	6862      	ldr	r2, [r4, #4]
 80137b6:	2a06      	cmp	r2, #6
 80137b8:	d926      	bls.n	8013808 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80137ba:	b398      	cbz	r0, 8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80137bc:	6a21      	ldr	r1, [r4, #32]
 80137be:	4630      	mov	r0, r6
 80137c0:	f006 fa3a 	bl	8019c38 <ucdr_serialize_string>
 80137c4:	6862      	ldr	r2, [r4, #4]
 80137c6:	2a07      	cmp	r2, #7
 80137c8:	d91e      	bls.n	8013808 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80137ca:	b358      	cbz	r0, 8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80137cc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80137ce:	4630      	mov	r0, r6
 80137d0:	f006 fa32 	bl	8019c38 <ucdr_serialize_string>
 80137d4:	6862      	ldr	r2, [r4, #4]
 80137d6:	2a08      	cmp	r2, #8
 80137d8:	d916      	bls.n	8013808 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80137da:	b318      	cbz	r0, 8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80137dc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80137de:	4630      	mov	r0, r6
 80137e0:	f006 fa2a 	bl	8019c38 <ucdr_serialize_string>
 80137e4:	6862      	ldr	r2, [r4, #4]
 80137e6:	2a09      	cmp	r2, #9
 80137e8:	d90e      	bls.n	8013808 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80137ea:	b1d8      	cbz	r0, 8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80137ec:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 80137f0:	2709      	movs	r7, #9
 80137f2:	e000      	b.n	80137f6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80137f4:	b1b0      	cbz	r0, 8013824 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x114>
 80137f6:	f858 1f04 	ldr.w	r1, [r8, #4]!
 80137fa:	4630      	mov	r0, r6
 80137fc:	f006 fa1c 	bl	8019c38 <ucdr_serialize_string>
 8013800:	6862      	ldr	r2, [r4, #4]
 8013802:	3701      	adds	r7, #1
 8013804:	4297      	cmp	r7, r2
 8013806:	d3f5      	bcc.n	80137f4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013808:	ea05 0300 	and.w	r3, r5, r0
 801380c:	b2dd      	uxtb	r5, r3
 801380e:	e789      	b.n	8013724 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013810:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013812:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013816:	4630      	mov	r0, r6
 8013818:	f7fd f826 	bl	8010868 <ucdr_serialize_sequence_uint8_t>
 801381c:	4005      	ands	r5, r0
 801381e:	4628      	mov	r0, r5
 8013820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013824:	2500      	movs	r5, #0
 8013826:	e77d      	b.n	8013724 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013828:	4028      	ands	r0, r5
 801382a:	b2c5      	uxtb	r5, r0
 801382c:	e77a      	b.n	8013724 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801382e:	bf00      	nop

08013830 <uxr_serialize_OBJK_Publisher_Binary>:
 8013830:	b570      	push	{r4, r5, r6, lr}
 8013832:	460d      	mov	r5, r1
 8013834:	7809      	ldrb	r1, [r1, #0]
 8013836:	4606      	mov	r6, r0
 8013838:	f7fb f928 	bl	800ea8c <ucdr_serialize_bool>
 801383c:	782b      	ldrb	r3, [r5, #0]
 801383e:	4604      	mov	r4, r0
 8013840:	b94b      	cbnz	r3, 8013856 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013842:	7a29      	ldrb	r1, [r5, #8]
 8013844:	4630      	mov	r0, r6
 8013846:	f7fb f921 	bl	800ea8c <ucdr_serialize_bool>
 801384a:	7a2b      	ldrb	r3, [r5, #8]
 801384c:	4004      	ands	r4, r0
 801384e:	b2e4      	uxtb	r4, r4
 8013850:	b943      	cbnz	r3, 8013864 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013852:	4620      	mov	r0, r4
 8013854:	bd70      	pop	{r4, r5, r6, pc}
 8013856:	6869      	ldr	r1, [r5, #4]
 8013858:	4630      	mov	r0, r6
 801385a:	f006 f9ed 	bl	8019c38 <ucdr_serialize_string>
 801385e:	4004      	ands	r4, r0
 8013860:	b2e4      	uxtb	r4, r4
 8013862:	e7ee      	b.n	8013842 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013864:	f105 010c 	add.w	r1, r5, #12
 8013868:	4630      	mov	r0, r6
 801386a:	f7ff ff51 	bl	8013710 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801386e:	4004      	ands	r4, r0
 8013870:	4620      	mov	r0, r4
 8013872:	bd70      	pop	{r4, r5, r6, pc}

08013874 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013878:	460c      	mov	r4, r1
 801387a:	7809      	ldrb	r1, [r1, #0]
 801387c:	4606      	mov	r6, r0
 801387e:	f7fb f905 	bl	800ea8c <ucdr_serialize_bool>
 8013882:	7823      	ldrb	r3, [r4, #0]
 8013884:	4605      	mov	r5, r0
 8013886:	b96b      	cbnz	r3, 80138a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013888:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801388c:	4630      	mov	r0, r6
 801388e:	f7fb f8fd 	bl	800ea8c <ucdr_serialize_bool>
 8013892:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013896:	4005      	ands	r5, r0
 8013898:	b2ed      	uxtb	r5, r5
 801389a:	2b00      	cmp	r3, #0
 801389c:	d16a      	bne.n	8013974 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x100>
 801389e:	4628      	mov	r0, r5
 80138a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138a4:	6861      	ldr	r1, [r4, #4]
 80138a6:	4630      	mov	r0, r6
 80138a8:	f7fb fb3a 	bl	800ef20 <ucdr_serialize_uint32_t>
 80138ac:	6863      	ldr	r3, [r4, #4]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d06c      	beq.n	801398c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x118>
 80138b2:	2800      	cmp	r0, #0
 80138b4:	d068      	beq.n	8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80138b6:	68a1      	ldr	r1, [r4, #8]
 80138b8:	4630      	mov	r0, r6
 80138ba:	f006 f9bd 	bl	8019c38 <ucdr_serialize_string>
 80138be:	6862      	ldr	r2, [r4, #4]
 80138c0:	2a01      	cmp	r2, #1
 80138c2:	d953      	bls.n	801396c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80138c4:	2800      	cmp	r0, #0
 80138c6:	d05f      	beq.n	8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80138c8:	68e1      	ldr	r1, [r4, #12]
 80138ca:	4630      	mov	r0, r6
 80138cc:	f006 f9b4 	bl	8019c38 <ucdr_serialize_string>
 80138d0:	6862      	ldr	r2, [r4, #4]
 80138d2:	2a02      	cmp	r2, #2
 80138d4:	d94a      	bls.n	801396c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80138d6:	2800      	cmp	r0, #0
 80138d8:	d056      	beq.n	8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80138da:	6921      	ldr	r1, [r4, #16]
 80138dc:	4630      	mov	r0, r6
 80138de:	f006 f9ab 	bl	8019c38 <ucdr_serialize_string>
 80138e2:	6862      	ldr	r2, [r4, #4]
 80138e4:	2a03      	cmp	r2, #3
 80138e6:	d941      	bls.n	801396c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80138e8:	2800      	cmp	r0, #0
 80138ea:	d04d      	beq.n	8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80138ec:	6961      	ldr	r1, [r4, #20]
 80138ee:	4630      	mov	r0, r6
 80138f0:	f006 f9a2 	bl	8019c38 <ucdr_serialize_string>
 80138f4:	6862      	ldr	r2, [r4, #4]
 80138f6:	2a04      	cmp	r2, #4
 80138f8:	d938      	bls.n	801396c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80138fa:	2800      	cmp	r0, #0
 80138fc:	d044      	beq.n	8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 80138fe:	69a1      	ldr	r1, [r4, #24]
 8013900:	4630      	mov	r0, r6
 8013902:	f006 f999 	bl	8019c38 <ucdr_serialize_string>
 8013906:	6862      	ldr	r2, [r4, #4]
 8013908:	2a05      	cmp	r2, #5
 801390a:	d92f      	bls.n	801396c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801390c:	2800      	cmp	r0, #0
 801390e:	d03b      	beq.n	8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013910:	69e1      	ldr	r1, [r4, #28]
 8013912:	4630      	mov	r0, r6
 8013914:	f006 f990 	bl	8019c38 <ucdr_serialize_string>
 8013918:	6862      	ldr	r2, [r4, #4]
 801391a:	2a06      	cmp	r2, #6
 801391c:	d926      	bls.n	801396c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801391e:	b398      	cbz	r0, 8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013920:	6a21      	ldr	r1, [r4, #32]
 8013922:	4630      	mov	r0, r6
 8013924:	f006 f988 	bl	8019c38 <ucdr_serialize_string>
 8013928:	6862      	ldr	r2, [r4, #4]
 801392a:	2a07      	cmp	r2, #7
 801392c:	d91e      	bls.n	801396c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801392e:	b358      	cbz	r0, 8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013930:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013932:	4630      	mov	r0, r6
 8013934:	f006 f980 	bl	8019c38 <ucdr_serialize_string>
 8013938:	6862      	ldr	r2, [r4, #4]
 801393a:	2a08      	cmp	r2, #8
 801393c:	d916      	bls.n	801396c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801393e:	b318      	cbz	r0, 8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013940:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013942:	4630      	mov	r0, r6
 8013944:	f006 f978 	bl	8019c38 <ucdr_serialize_string>
 8013948:	6862      	ldr	r2, [r4, #4]
 801394a:	2a09      	cmp	r2, #9
 801394c:	d90e      	bls.n	801396c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801394e:	b1d8      	cbz	r0, 8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 8013950:	f104 0828 	add.w	r8, r4, #40	@ 0x28
 8013954:	2709      	movs	r7, #9
 8013956:	e000      	b.n	801395a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013958:	b1b0      	cbz	r0, 8013988 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x114>
 801395a:	f858 1f04 	ldr.w	r1, [r8, #4]!
 801395e:	4630      	mov	r0, r6
 8013960:	f006 f96a 	bl	8019c38 <ucdr_serialize_string>
 8013964:	6862      	ldr	r2, [r4, #4]
 8013966:	3701      	adds	r7, #1
 8013968:	4297      	cmp	r7, r2
 801396a:	d3f5      	bcc.n	8013958 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 801396c:	ea05 0300 	and.w	r3, r5, r0
 8013970:	b2dd      	uxtb	r5, r3
 8013972:	e789      	b.n	8013888 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013974:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013976:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801397a:	4630      	mov	r0, r6
 801397c:	f7fc ff74 	bl	8010868 <ucdr_serialize_sequence_uint8_t>
 8013980:	4005      	ands	r5, r0
 8013982:	4628      	mov	r0, r5
 8013984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013988:	2500      	movs	r5, #0
 801398a:	e77d      	b.n	8013888 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801398c:	4028      	ands	r0, r5
 801398e:	b2c5      	uxtb	r5, r0
 8013990:	e77a      	b.n	8013888 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013992:	bf00      	nop

08013994 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013994:	b570      	push	{r4, r5, r6, lr}
 8013996:	460d      	mov	r5, r1
 8013998:	7809      	ldrb	r1, [r1, #0]
 801399a:	4606      	mov	r6, r0
 801399c:	f7fb f876 	bl	800ea8c <ucdr_serialize_bool>
 80139a0:	782b      	ldrb	r3, [r5, #0]
 80139a2:	4604      	mov	r4, r0
 80139a4:	b94b      	cbnz	r3, 80139ba <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80139a6:	7a29      	ldrb	r1, [r5, #8]
 80139a8:	4630      	mov	r0, r6
 80139aa:	f7fb f86f 	bl	800ea8c <ucdr_serialize_bool>
 80139ae:	7a2b      	ldrb	r3, [r5, #8]
 80139b0:	4004      	ands	r4, r0
 80139b2:	b2e4      	uxtb	r4, r4
 80139b4:	b943      	cbnz	r3, 80139c8 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80139b6:	4620      	mov	r0, r4
 80139b8:	bd70      	pop	{r4, r5, r6, pc}
 80139ba:	6869      	ldr	r1, [r5, #4]
 80139bc:	4630      	mov	r0, r6
 80139be:	f006 f93b 	bl	8019c38 <ucdr_serialize_string>
 80139c2:	4004      	ands	r4, r0
 80139c4:	b2e4      	uxtb	r4, r4
 80139c6:	e7ee      	b.n	80139a6 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80139c8:	f105 010c 	add.w	r1, r5, #12
 80139cc:	4630      	mov	r0, r6
 80139ce:	f7ff ff51 	bl	8013874 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80139d2:	4004      	ands	r4, r0
 80139d4:	4620      	mov	r0, r4
 80139d6:	bd70      	pop	{r4, r5, r6, pc}

080139d8 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80139d8:	b570      	push	{r4, r5, r6, lr}
 80139da:	460d      	mov	r5, r1
 80139dc:	8809      	ldrh	r1, [r1, #0]
 80139de:	4606      	mov	r6, r0
 80139e0:	f7fb f8ae 	bl	800eb40 <ucdr_serialize_uint16_t>
 80139e4:	78a9      	ldrb	r1, [r5, #2]
 80139e6:	4604      	mov	r4, r0
 80139e8:	4630      	mov	r0, r6
 80139ea:	f7fb f84f 	bl	800ea8c <ucdr_serialize_bool>
 80139ee:	78ab      	ldrb	r3, [r5, #2]
 80139f0:	4004      	ands	r4, r0
 80139f2:	b2e4      	uxtb	r4, r4
 80139f4:	b9b3      	cbnz	r3, 8013a24 <uxr_serialize_OBJK_Endpoint_QosBinary+0x4c>
 80139f6:	79a9      	ldrb	r1, [r5, #6]
 80139f8:	4630      	mov	r0, r6
 80139fa:	f7fb f847 	bl	800ea8c <ucdr_serialize_bool>
 80139fe:	79ab      	ldrb	r3, [r5, #6]
 8013a00:	4004      	ands	r4, r0
 8013a02:	bb33      	cbnz	r3, 8013a52 <uxr_serialize_OBJK_Endpoint_QosBinary+0x7a>
 8013a04:	7b29      	ldrb	r1, [r5, #12]
 8013a06:	4630      	mov	r0, r6
 8013a08:	f7fb f840 	bl	800ea8c <ucdr_serialize_bool>
 8013a0c:	7b2b      	ldrb	r3, [r5, #12]
 8013a0e:	4004      	ands	r4, r0
 8013a10:	b9c3      	cbnz	r3, 8013a44 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6c>
 8013a12:	7d29      	ldrb	r1, [r5, #20]
 8013a14:	4630      	mov	r0, r6
 8013a16:	f7fb f839 	bl	800ea8c <ucdr_serialize_bool>
 8013a1a:	7d2b      	ldrb	r3, [r5, #20]
 8013a1c:	4004      	ands	r4, r0
 8013a1e:	b93b      	cbnz	r3, 8013a30 <uxr_serialize_OBJK_Endpoint_QosBinary+0x58>
 8013a20:	4620      	mov	r0, r4
 8013a22:	bd70      	pop	{r4, r5, r6, pc}
 8013a24:	88a9      	ldrh	r1, [r5, #4]
 8013a26:	4630      	mov	r0, r6
 8013a28:	f7fb f88a 	bl	800eb40 <ucdr_serialize_uint16_t>
 8013a2c:	4004      	ands	r4, r0
 8013a2e:	e7e2      	b.n	80139f6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x1e>
 8013a30:	69aa      	ldr	r2, [r5, #24]
 8013a32:	f105 011c 	add.w	r1, r5, #28
 8013a36:	4630      	mov	r0, r6
 8013a38:	f7fc ff16 	bl	8010868 <ucdr_serialize_sequence_uint8_t>
 8013a3c:	4004      	ands	r4, r0
 8013a3e:	b2e4      	uxtb	r4, r4
 8013a40:	4620      	mov	r0, r4
 8013a42:	bd70      	pop	{r4, r5, r6, pc}
 8013a44:	6929      	ldr	r1, [r5, #16]
 8013a46:	4630      	mov	r0, r6
 8013a48:	f7fb fa6a 	bl	800ef20 <ucdr_serialize_uint32_t>
 8013a4c:	4004      	ands	r4, r0
 8013a4e:	b2e4      	uxtb	r4, r4
 8013a50:	e7df      	b.n	8013a12 <uxr_serialize_OBJK_Endpoint_QosBinary+0x3a>
 8013a52:	68a9      	ldr	r1, [r5, #8]
 8013a54:	4630      	mov	r0, r6
 8013a56:	f7fb fa63 	bl	800ef20 <ucdr_serialize_uint32_t>
 8013a5a:	4004      	ands	r4, r0
 8013a5c:	b2e4      	uxtb	r4, r4
 8013a5e:	e7d1      	b.n	8013a04 <uxr_serialize_OBJK_Endpoint_QosBinary+0x2c>

08013a60 <uxr_serialize_OBJK_DataReader_Binary>:
 8013a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a62:	2202      	movs	r2, #2
 8013a64:	460c      	mov	r4, r1
 8013a66:	4606      	mov	r6, r0
 8013a68:	f7fa fc9e 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013a6c:	78a1      	ldrb	r1, [r4, #2]
 8013a6e:	4605      	mov	r5, r0
 8013a70:	4630      	mov	r0, r6
 8013a72:	f7fb f80b 	bl	800ea8c <ucdr_serialize_bool>
 8013a76:	78a3      	ldrb	r3, [r4, #2]
 8013a78:	4005      	ands	r5, r0
 8013a7a:	b2ed      	uxtb	r5, r5
 8013a7c:	b90b      	cbnz	r3, 8013a82 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013a7e:	4628      	mov	r0, r5
 8013a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a82:	f104 0108 	add.w	r1, r4, #8
 8013a86:	4630      	mov	r0, r6
 8013a88:	f7ff ffa6 	bl	80139d8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013a8c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013a90:	4607      	mov	r7, r0
 8013a92:	4630      	mov	r0, r6
 8013a94:	f7fa fffa 	bl	800ea8c <ucdr_serialize_bool>
 8013a98:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013a9c:	4007      	ands	r7, r0
 8013a9e:	b2ff      	uxtb	r7, r7
 8013aa0:	b95b      	cbnz	r3, 8013aba <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8013aa2:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 8013aa6:	4630      	mov	r0, r6
 8013aa8:	f7fa fff0 	bl	800ea8c <ucdr_serialize_bool>
 8013aac:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013ab0:	4007      	ands	r7, r0
 8013ab2:	b94b      	cbnz	r3, 8013ac8 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013ab4:	403d      	ands	r5, r7
 8013ab6:	4628      	mov	r0, r5
 8013ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013aba:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8013abe:	4630      	mov	r0, r6
 8013ac0:	f7fb fc72 	bl	800f3a8 <ucdr_serialize_uint64_t>
 8013ac4:	4007      	ands	r7, r0
 8013ac6:	e7ec      	b.n	8013aa2 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8013ac8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8013aca:	4630      	mov	r0, r6
 8013acc:	f006 f8b4 	bl	8019c38 <ucdr_serialize_string>
 8013ad0:	4007      	ands	r7, r0
 8013ad2:	b2ff      	uxtb	r7, r7
 8013ad4:	e7ee      	b.n	8013ab4 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8013ad6:	bf00      	nop

08013ad8 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ada:	2202      	movs	r2, #2
 8013adc:	460d      	mov	r5, r1
 8013ade:	4606      	mov	r6, r0
 8013ae0:	f7fa fc62 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013ae4:	78a9      	ldrb	r1, [r5, #2]
 8013ae6:	4604      	mov	r4, r0
 8013ae8:	4630      	mov	r0, r6
 8013aea:	f7fa ffcf 	bl	800ea8c <ucdr_serialize_bool>
 8013aee:	78ab      	ldrb	r3, [r5, #2]
 8013af0:	4004      	ands	r4, r0
 8013af2:	b2e4      	uxtb	r4, r4
 8013af4:	b90b      	cbnz	r3, 8013afa <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013af6:	4620      	mov	r0, r4
 8013af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013afa:	f105 0108 	add.w	r1, r5, #8
 8013afe:	4630      	mov	r0, r6
 8013b00:	f7ff ff6a 	bl	80139d8 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013b04:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8013b08:	4607      	mov	r7, r0
 8013b0a:	4630      	mov	r0, r6
 8013b0c:	f7fa ffbe 	bl	800ea8c <ucdr_serialize_bool>
 8013b10:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013b14:	4007      	ands	r7, r0
 8013b16:	b2ff      	uxtb	r7, r7
 8013b18:	b913      	cbnz	r3, 8013b20 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013b1a:	403c      	ands	r4, r7
 8013b1c:	4620      	mov	r0, r4
 8013b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b20:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013b24:	4630      	mov	r0, r6
 8013b26:	f7fb fc3f 	bl	800f3a8 <ucdr_serialize_uint64_t>
 8013b2a:	4007      	ands	r7, r0
 8013b2c:	e7f5      	b.n	8013b1a <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013b2e:	bf00      	nop

08013b30 <uxr_deserialize_ObjectVariant>:
 8013b30:	b570      	push	{r4, r5, r6, lr}
 8013b32:	4605      	mov	r5, r0
 8013b34:	460e      	mov	r6, r1
 8013b36:	f7fa ffed 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8013b3a:	b168      	cbz	r0, 8013b58 <uxr_deserialize_ObjectVariant+0x28>
 8013b3c:	7833      	ldrb	r3, [r6, #0]
 8013b3e:	3b01      	subs	r3, #1
 8013b40:	4604      	mov	r4, r0
 8013b42:	2b0d      	cmp	r3, #13
 8013b44:	d809      	bhi.n	8013b5a <uxr_deserialize_ObjectVariant+0x2a>
 8013b46:	e8df f003 	tbb	[pc, r3]
 8013b4a:	0a64      	.short	0x0a64
 8013b4c:	0a0a2323 	.word	0x0a0a2323
 8013b50:	10080a0a 	.word	0x10080a0a
 8013b54:	5e411010 	.word	0x5e411010
 8013b58:	2400      	movs	r4, #0
 8013b5a:	4620      	mov	r0, r4
 8013b5c:	bd70      	pop	{r4, r5, r6, pc}
 8013b5e:	1d31      	adds	r1, r6, #4
 8013b60:	4628      	mov	r0, r5
 8013b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b66:	f7ff bd61 	b.w	801362c <uxr_deserialize_DATAWRITER_Representation>
 8013b6a:	1d31      	adds	r1, r6, #4
 8013b6c:	4628      	mov	r0, r5
 8013b6e:	f7fa ffd1 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8013b72:	2800      	cmp	r0, #0
 8013b74:	d0f0      	beq.n	8013b58 <uxr_deserialize_ObjectVariant+0x28>
 8013b76:	7933      	ldrb	r3, [r6, #4]
 8013b78:	2b01      	cmp	r3, #1
 8013b7a:	d001      	beq.n	8013b80 <uxr_deserialize_ObjectVariant+0x50>
 8013b7c:	2b02      	cmp	r3, #2
 8013b7e:	d1ec      	bne.n	8013b5a <uxr_deserialize_ObjectVariant+0x2a>
 8013b80:	68b1      	ldr	r1, [r6, #8]
 8013b82:	4628      	mov	r0, r5
 8013b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b8c:	f006 b862 	b.w	8019c54 <ucdr_deserialize_string>
 8013b90:	1d31      	adds	r1, r6, #4
 8013b92:	4628      	mov	r0, r5
 8013b94:	f7fa ffbe 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8013b98:	4604      	mov	r4, r0
 8013b9a:	b170      	cbz	r0, 8013bba <uxr_deserialize_ObjectVariant+0x8a>
 8013b9c:	7933      	ldrb	r3, [r6, #4]
 8013b9e:	2b02      	cmp	r3, #2
 8013ba0:	d053      	beq.n	8013c4a <uxr_deserialize_ObjectVariant+0x11a>
 8013ba2:	2b03      	cmp	r3, #3
 8013ba4:	d109      	bne.n	8013bba <uxr_deserialize_ObjectVariant+0x8a>
 8013ba6:	f106 0308 	add.w	r3, r6, #8
 8013baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013bae:	f106 010c 	add.w	r1, r6, #12
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	f7fc fe6a 	bl	801088c <ucdr_deserialize_sequence_uint8_t>
 8013bb8:	4604      	mov	r4, r0
 8013bba:	2202      	movs	r2, #2
 8013bbc:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013bc0:	4628      	mov	r0, r5
 8013bc2:	f7fa fc55 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013bc6:	4004      	ands	r4, r0
 8013bc8:	b2e4      	uxtb	r4, r4
 8013bca:	e7c6      	b.n	8013b5a <uxr_deserialize_ObjectVariant+0x2a>
 8013bcc:	2204      	movs	r2, #4
 8013bce:	18b1      	adds	r1, r6, r2
 8013bd0:	4628      	mov	r0, r5
 8013bd2:	f7fa fc4d 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013bd6:	2202      	movs	r2, #2
 8013bd8:	f106 0108 	add.w	r1, r6, #8
 8013bdc:	4604      	mov	r4, r0
 8013bde:	4628      	mov	r0, r5
 8013be0:	f7fa fc46 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013be4:	2202      	movs	r2, #2
 8013be6:	4004      	ands	r4, r0
 8013be8:	f106 010a 	add.w	r1, r6, #10
 8013bec:	4628      	mov	r0, r5
 8013bee:	f7fa fc3f 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013bf2:	b2e4      	uxtb	r4, r4
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	f106 010c 	add.w	r1, r6, #12
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	401c      	ands	r4, r3
 8013bfe:	f7fa ff5b 	bl	800eab8 <ucdr_deserialize_bool>
 8013c02:	4004      	ands	r4, r0
 8013c04:	e7a9      	b.n	8013b5a <uxr_deserialize_ObjectVariant+0x2a>
 8013c06:	1d31      	adds	r1, r6, #4
 8013c08:	4628      	mov	r0, r5
 8013c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c0e:	f7ff bbc3 	b.w	8013398 <uxr_deserialize_CLIENT_Representation>
 8013c12:	1d31      	adds	r1, r6, #4
 8013c14:	4628      	mov	r0, r5
 8013c16:	f7fa ff7d 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8013c1a:	4604      	mov	r4, r0
 8013c1c:	b168      	cbz	r0, 8013c3a <uxr_deserialize_ObjectVariant+0x10a>
 8013c1e:	7933      	ldrb	r3, [r6, #4]
 8013c20:	2b02      	cmp	r3, #2
 8013c22:	d003      	beq.n	8013c2c <uxr_deserialize_ObjectVariant+0xfc>
 8013c24:	2b03      	cmp	r3, #3
 8013c26:	d018      	beq.n	8013c5a <uxr_deserialize_ObjectVariant+0x12a>
 8013c28:	2b01      	cmp	r3, #1
 8013c2a:	d106      	bne.n	8013c3a <uxr_deserialize_ObjectVariant+0x10a>
 8013c2c:	68b1      	ldr	r1, [r6, #8]
 8013c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c32:	4628      	mov	r0, r5
 8013c34:	f006 f80e 	bl	8019c54 <ucdr_deserialize_string>
 8013c38:	4604      	mov	r4, r0
 8013c3a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013c3e:	4628      	mov	r0, r5
 8013c40:	f7fb fd04 	bl	800f64c <ucdr_deserialize_int16_t>
 8013c44:	4004      	ands	r4, r0
 8013c46:	b2e4      	uxtb	r4, r4
 8013c48:	e787      	b.n	8013b5a <uxr_deserialize_ObjectVariant+0x2a>
 8013c4a:	68b1      	ldr	r1, [r6, #8]
 8013c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c50:	4628      	mov	r0, r5
 8013c52:	f005 ffff 	bl	8019c54 <ucdr_deserialize_string>
 8013c56:	4604      	mov	r4, r0
 8013c58:	e7af      	b.n	8013bba <uxr_deserialize_ObjectVariant+0x8a>
 8013c5a:	f106 0308 	add.w	r3, r6, #8
 8013c5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c62:	f106 010c 	add.w	r1, r6, #12
 8013c66:	4628      	mov	r0, r5
 8013c68:	f7fc fe10 	bl	801088c <ucdr_deserialize_sequence_uint8_t>
 8013c6c:	4604      	mov	r4, r0
 8013c6e:	e7e4      	b.n	8013c3a <uxr_deserialize_ObjectVariant+0x10a>

08013c70 <uxr_deserialize_BaseObjectRequest>:
 8013c70:	b570      	push	{r4, r5, r6, lr}
 8013c72:	2202      	movs	r2, #2
 8013c74:	4605      	mov	r5, r0
 8013c76:	460e      	mov	r6, r1
 8013c78:	f7fa fbfa 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013c7c:	2202      	movs	r2, #2
 8013c7e:	4604      	mov	r4, r0
 8013c80:	18b1      	adds	r1, r6, r2
 8013c82:	4628      	mov	r0, r5
 8013c84:	f7fa fbf4 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013c88:	4020      	ands	r0, r4
 8013c8a:	b2c0      	uxtb	r0, r0
 8013c8c:	bd70      	pop	{r4, r5, r6, pc}
 8013c8e:	bf00      	nop

08013c90 <uxr_serialize_ActivityInfoVariant>:
 8013c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c94:	460d      	mov	r5, r1
 8013c96:	7809      	ldrb	r1, [r1, #0]
 8013c98:	4606      	mov	r6, r0
 8013c9a:	f7fa ff25 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013c9e:	b130      	cbz	r0, 8013cae <uxr_serialize_ActivityInfoVariant+0x1e>
 8013ca0:	782b      	ldrb	r3, [r5, #0]
 8013ca2:	2b06      	cmp	r3, #6
 8013ca4:	d014      	beq.n	8013cd0 <uxr_serialize_ActivityInfoVariant+0x40>
 8013ca6:	2b0d      	cmp	r3, #13
 8013ca8:	d019      	beq.n	8013cde <uxr_serialize_ActivityInfoVariant+0x4e>
 8013caa:	2b05      	cmp	r3, #5
 8013cac:	d001      	beq.n	8013cb2 <uxr_serialize_ActivityInfoVariant+0x22>
 8013cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cb2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013cb6:	4630      	mov	r0, r6
 8013cb8:	f7fb fc3e 	bl	800f538 <ucdr_serialize_int16_t>
 8013cbc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013cc0:	4604      	mov	r4, r0
 8013cc2:	4630      	mov	r0, r6
 8013cc4:	f7fb fb70 	bl	800f3a8 <ucdr_serialize_uint64_t>
 8013cc8:	4020      	ands	r0, r4
 8013cca:	b2c0      	uxtb	r0, r0
 8013ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cd0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013cd4:	4630      	mov	r0, r6
 8013cd6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cda:	f7fb bc2d 	b.w	800f538 <ucdr_serialize_int16_t>
 8013cde:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013ce2:	4630      	mov	r0, r6
 8013ce4:	f7fb fc28 	bl	800f538 <ucdr_serialize_int16_t>
 8013ce8:	68e9      	ldr	r1, [r5, #12]
 8013cea:	4681      	mov	r9, r0
 8013cec:	4630      	mov	r0, r6
 8013cee:	f7fb f917 	bl	800ef20 <ucdr_serialize_uint32_t>
 8013cf2:	68eb      	ldr	r3, [r5, #12]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d051      	beq.n	8013d9c <uxr_serialize_ActivityInfoVariant+0x10c>
 8013cf8:	b1e8      	cbz	r0, 8013d36 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013cfa:	f105 0714 	add.w	r7, r5, #20
 8013cfe:	f04f 0800 	mov.w	r8, #0
 8013d02:	f817 1c04 	ldrb.w	r1, [r7, #-4]
 8013d06:	4630      	mov	r0, r6
 8013d08:	f7fa feee 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013d0c:	b198      	cbz	r0, 8013d36 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013d0e:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8013d12:	2b03      	cmp	r3, #3
 8013d14:	d839      	bhi.n	8013d8a <uxr_serialize_ActivityInfoVariant+0xfa>
 8013d16:	e8df f003 	tbb	[pc, r3]
 8013d1a:	1e2b      	.short	0x1e2b
 8013d1c:	0211      	.short	0x0211
 8013d1e:	6839      	ldr	r1, [r7, #0]
 8013d20:	4630      	mov	r0, r6
 8013d22:	f005 ff89 	bl	8019c38 <ucdr_serialize_string>
 8013d26:	68eb      	ldr	r3, [r5, #12]
 8013d28:	f108 0801 	add.w	r8, r8, #1
 8013d2c:	4598      	cmp	r8, r3
 8013d2e:	d231      	bcs.n	8013d94 <uxr_serialize_ActivityInfoVariant+0x104>
 8013d30:	3718      	adds	r7, #24
 8013d32:	2800      	cmp	r0, #0
 8013d34:	d1e5      	bne.n	8013d02 <uxr_serialize_ActivityInfoVariant+0x72>
 8013d36:	2000      	movs	r0, #0
 8013d38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d3c:	2210      	movs	r2, #16
 8013d3e:	4639      	mov	r1, r7
 8013d40:	4630      	mov	r0, r6
 8013d42:	f7fa fb31 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013d46:	6939      	ldr	r1, [r7, #16]
 8013d48:	4604      	mov	r4, r0
 8013d4a:	4630      	mov	r0, r6
 8013d4c:	f7fb f8e8 	bl	800ef20 <ucdr_serialize_uint32_t>
 8013d50:	4020      	ands	r0, r4
 8013d52:	b2c0      	uxtb	r0, r0
 8013d54:	e7e7      	b.n	8013d26 <uxr_serialize_ActivityInfoVariant+0x96>
 8013d56:	2204      	movs	r2, #4
 8013d58:	4639      	mov	r1, r7
 8013d5a:	4630      	mov	r0, r6
 8013d5c:	f7fa fb24 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013d60:	88b9      	ldrh	r1, [r7, #4]
 8013d62:	4604      	mov	r4, r0
 8013d64:	4630      	mov	r0, r6
 8013d66:	f7fa feeb 	bl	800eb40 <ucdr_serialize_uint16_t>
 8013d6a:	4020      	ands	r0, r4
 8013d6c:	b2c0      	uxtb	r0, r0
 8013d6e:	e7da      	b.n	8013d26 <uxr_serialize_ActivityInfoVariant+0x96>
 8013d70:	2202      	movs	r2, #2
 8013d72:	4639      	mov	r1, r7
 8013d74:	4630      	mov	r0, r6
 8013d76:	f7fa fb17 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013d7a:	78b9      	ldrb	r1, [r7, #2]
 8013d7c:	4604      	mov	r4, r0
 8013d7e:	4630      	mov	r0, r6
 8013d80:	f7fa feb2 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013d84:	4020      	ands	r0, r4
 8013d86:	b2c0      	uxtb	r0, r0
 8013d88:	e7cd      	b.n	8013d26 <uxr_serialize_ActivityInfoVariant+0x96>
 8013d8a:	68eb      	ldr	r3, [r5, #12]
 8013d8c:	f108 0801 	add.w	r8, r8, #1
 8013d90:	4598      	cmp	r8, r3
 8013d92:	d308      	bcc.n	8013da6 <uxr_serialize_ActivityInfoVariant+0x116>
 8013d94:	ea09 0000 	and.w	r0, r9, r0
 8013d98:	b2c0      	uxtb	r0, r0
 8013d9a:	e788      	b.n	8013cae <uxr_serialize_ActivityInfoVariant+0x1e>
 8013d9c:	ea09 0900 	and.w	r9, r9, r0
 8013da0:	fa5f f089 	uxtb.w	r0, r9
 8013da4:	e783      	b.n	8013cae <uxr_serialize_ActivityInfoVariant+0x1e>
 8013da6:	3718      	adds	r7, #24
 8013da8:	e7ab      	b.n	8013d02 <uxr_serialize_ActivityInfoVariant+0x72>
 8013daa:	bf00      	nop

08013dac <uxr_deserialize_BaseObjectReply>:
 8013dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db0:	2202      	movs	r2, #2
 8013db2:	4606      	mov	r6, r0
 8013db4:	460f      	mov	r7, r1
 8013db6:	f7fa fb5b 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013dba:	2202      	movs	r2, #2
 8013dbc:	18b9      	adds	r1, r7, r2
 8013dbe:	4605      	mov	r5, r0
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	f7fa fb55 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013dc6:	1d39      	adds	r1, r7, #4
 8013dc8:	4680      	mov	r8, r0
 8013dca:	4630      	mov	r0, r6
 8013dcc:	f7fa fea2 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8013dd0:	1d79      	adds	r1, r7, #5
 8013dd2:	4604      	mov	r4, r0
 8013dd4:	4630      	mov	r0, r6
 8013dd6:	f7fa fe9d 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8013dda:	ea05 0508 	and.w	r5, r5, r8
 8013dde:	402c      	ands	r4, r5
 8013de0:	4020      	ands	r0, r4
 8013de2:	b2c0      	uxtb	r0, r0
 8013de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013de8 <uxr_serialize_ReadSpecification>:
 8013de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dec:	460d      	mov	r5, r1
 8013dee:	7809      	ldrb	r1, [r1, #0]
 8013df0:	4606      	mov	r6, r0
 8013df2:	f7fa fe79 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013df6:	7869      	ldrb	r1, [r5, #1]
 8013df8:	4604      	mov	r4, r0
 8013dfa:	4630      	mov	r0, r6
 8013dfc:	f7fa fe74 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013e00:	78a9      	ldrb	r1, [r5, #2]
 8013e02:	4004      	ands	r4, r0
 8013e04:	4630      	mov	r0, r6
 8013e06:	f7fa fe41 	bl	800ea8c <ucdr_serialize_bool>
 8013e0a:	78ab      	ldrb	r3, [r5, #2]
 8013e0c:	b2e4      	uxtb	r4, r4
 8013e0e:	4004      	ands	r4, r0
 8013e10:	b94b      	cbnz	r3, 8013e26 <uxr_serialize_ReadSpecification+0x3e>
 8013e12:	7a29      	ldrb	r1, [r5, #8]
 8013e14:	4630      	mov	r0, r6
 8013e16:	f7fa fe39 	bl	800ea8c <ucdr_serialize_bool>
 8013e1a:	7a2b      	ldrb	r3, [r5, #8]
 8013e1c:	4004      	ands	r4, r0
 8013e1e:	b943      	cbnz	r3, 8013e32 <uxr_serialize_ReadSpecification+0x4a>
 8013e20:	4620      	mov	r0, r4
 8013e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e26:	6869      	ldr	r1, [r5, #4]
 8013e28:	4630      	mov	r0, r6
 8013e2a:	f005 ff05 	bl	8019c38 <ucdr_serialize_string>
 8013e2e:	4004      	ands	r4, r0
 8013e30:	e7ef      	b.n	8013e12 <uxr_serialize_ReadSpecification+0x2a>
 8013e32:	8969      	ldrh	r1, [r5, #10]
 8013e34:	4630      	mov	r0, r6
 8013e36:	f7fa fe83 	bl	800eb40 <ucdr_serialize_uint16_t>
 8013e3a:	89a9      	ldrh	r1, [r5, #12]
 8013e3c:	4607      	mov	r7, r0
 8013e3e:	4630      	mov	r0, r6
 8013e40:	f7fa fe7e 	bl	800eb40 <ucdr_serialize_uint16_t>
 8013e44:	89e9      	ldrh	r1, [r5, #14]
 8013e46:	4007      	ands	r7, r0
 8013e48:	4630      	mov	r0, r6
 8013e4a:	f7fa fe79 	bl	800eb40 <ucdr_serialize_uint16_t>
 8013e4e:	8a29      	ldrh	r1, [r5, #16]
 8013e50:	4680      	mov	r8, r0
 8013e52:	4630      	mov	r0, r6
 8013e54:	f7fa fe74 	bl	800eb40 <ucdr_serialize_uint16_t>
 8013e58:	b2ff      	uxtb	r7, r7
 8013e5a:	ea04 0507 	and.w	r5, r4, r7
 8013e5e:	ea05 0508 	and.w	r5, r5, r8
 8013e62:	ea00 0405 	and.w	r4, r0, r5
 8013e66:	4620      	mov	r0, r4
 8013e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e6c <uxr_serialize_CREATE_CLIENT_Payload>:
 8013e6c:	f7ff ba3a 	b.w	80132e4 <uxr_serialize_CLIENT_Representation>

08013e70 <uxr_serialize_CREATE_Payload>:
 8013e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e72:	2202      	movs	r2, #2
 8013e74:	4606      	mov	r6, r0
 8013e76:	460d      	mov	r5, r1
 8013e78:	f7fa fa96 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013e7c:	2202      	movs	r2, #2
 8013e7e:	18a9      	adds	r1, r5, r2
 8013e80:	4604      	mov	r4, r0
 8013e82:	4630      	mov	r0, r6
 8013e84:	f7fa fa90 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013e88:	7929      	ldrb	r1, [r5, #4]
 8013e8a:	4607      	mov	r7, r0
 8013e8c:	4630      	mov	r0, r6
 8013e8e:	f7fa fe2b 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013e92:	b170      	cbz	r0, 8013eb2 <uxr_serialize_CREATE_Payload+0x42>
 8013e94:	792b      	ldrb	r3, [r5, #4]
 8013e96:	403c      	ands	r4, r7
 8013e98:	3b01      	subs	r3, #1
 8013e9a:	b2e4      	uxtb	r4, r4
 8013e9c:	2b0d      	cmp	r3, #13
 8013e9e:	d809      	bhi.n	8013eb4 <uxr_serialize_CREATE_Payload+0x44>
 8013ea0:	e8df f003 	tbb	[pc, r3]
 8013ea4:	23230a3e 	.word	0x23230a3e
 8013ea8:	0a0a0a0a 	.word	0x0a0a0a0a
 8013eac:	12121208 	.word	0x12121208
 8013eb0:	5f58      	.short	0x5f58
 8013eb2:	2400      	movs	r4, #0
 8013eb4:	4620      	mov	r0, r4
 8013eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013eb8:	f105 0108 	add.w	r1, r5, #8
 8013ebc:	4630      	mov	r0, r6
 8013ebe:	f7ff fb19 	bl	80134f4 <uxr_serialize_DATAWRITER_Representation>
 8013ec2:	4004      	ands	r4, r0
 8013ec4:	4620      	mov	r0, r4
 8013ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ec8:	7a29      	ldrb	r1, [r5, #8]
 8013eca:	4630      	mov	r0, r6
 8013ecc:	f7fa fe0c 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	d0ee      	beq.n	8013eb2 <uxr_serialize_CREATE_Payload+0x42>
 8013ed4:	7a2b      	ldrb	r3, [r5, #8]
 8013ed6:	2b01      	cmp	r3, #1
 8013ed8:	d001      	beq.n	8013ede <uxr_serialize_CREATE_Payload+0x6e>
 8013eda:	2b02      	cmp	r3, #2
 8013edc:	d1ea      	bne.n	8013eb4 <uxr_serialize_CREATE_Payload+0x44>
 8013ede:	68e9      	ldr	r1, [r5, #12]
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	f005 fea9 	bl	8019c38 <ucdr_serialize_string>
 8013ee6:	4004      	ands	r4, r0
 8013ee8:	e7e4      	b.n	8013eb4 <uxr_serialize_CREATE_Payload+0x44>
 8013eea:	7a29      	ldrb	r1, [r5, #8]
 8013eec:	4630      	mov	r0, r6
 8013eee:	f7fa fdfb 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013ef2:	4607      	mov	r7, r0
 8013ef4:	b158      	cbz	r0, 8013f0e <uxr_serialize_CREATE_Payload+0x9e>
 8013ef6:	7a2b      	ldrb	r3, [r5, #8]
 8013ef8:	2b02      	cmp	r3, #2
 8013efa:	d039      	beq.n	8013f70 <uxr_serialize_CREATE_Payload+0x100>
 8013efc:	2b03      	cmp	r3, #3
 8013efe:	d106      	bne.n	8013f0e <uxr_serialize_CREATE_Payload+0x9e>
 8013f00:	68ea      	ldr	r2, [r5, #12]
 8013f02:	f105 0110 	add.w	r1, r5, #16
 8013f06:	4630      	mov	r0, r6
 8013f08:	f7fc fcae 	bl	8010868 <ucdr_serialize_sequence_uint8_t>
 8013f0c:	4607      	mov	r7, r0
 8013f0e:	2202      	movs	r2, #2
 8013f10:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8013f14:	4630      	mov	r0, r6
 8013f16:	f7fa fa47 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013f1a:	4038      	ands	r0, r7
 8013f1c:	4004      	ands	r4, r0
 8013f1e:	e7c9      	b.n	8013eb4 <uxr_serialize_CREATE_Payload+0x44>
 8013f20:	7a29      	ldrb	r1, [r5, #8]
 8013f22:	4630      	mov	r0, r6
 8013f24:	f7fa fde0 	bl	800eae8 <ucdr_serialize_uint8_t>
 8013f28:	4607      	mov	r7, r0
 8013f2a:	b158      	cbz	r0, 8013f44 <uxr_serialize_CREATE_Payload+0xd4>
 8013f2c:	7a2b      	ldrb	r3, [r5, #8]
 8013f2e:	2b02      	cmp	r3, #2
 8013f30:	d003      	beq.n	8013f3a <uxr_serialize_CREATE_Payload+0xca>
 8013f32:	2b03      	cmp	r3, #3
 8013f34:	d022      	beq.n	8013f7c <uxr_serialize_CREATE_Payload+0x10c>
 8013f36:	2b01      	cmp	r3, #1
 8013f38:	d104      	bne.n	8013f44 <uxr_serialize_CREATE_Payload+0xd4>
 8013f3a:	68e9      	ldr	r1, [r5, #12]
 8013f3c:	4630      	mov	r0, r6
 8013f3e:	f005 fe7b 	bl	8019c38 <ucdr_serialize_string>
 8013f42:	4607      	mov	r7, r0
 8013f44:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8013f48:	4630      	mov	r0, r6
 8013f4a:	f7fb faf5 	bl	800f538 <ucdr_serialize_int16_t>
 8013f4e:	4038      	ands	r0, r7
 8013f50:	4004      	ands	r4, r0
 8013f52:	e7af      	b.n	8013eb4 <uxr_serialize_CREATE_Payload+0x44>
 8013f54:	f105 0108 	add.w	r1, r5, #8
 8013f58:	4630      	mov	r0, r6
 8013f5a:	f7ff fa81 	bl	8013460 <uxr_serialize_AGENT_Representation>
 8013f5e:	4004      	ands	r4, r0
 8013f60:	e7a8      	b.n	8013eb4 <uxr_serialize_CREATE_Payload+0x44>
 8013f62:	f105 0108 	add.w	r1, r5, #8
 8013f66:	4630      	mov	r0, r6
 8013f68:	f7ff f9bc 	bl	80132e4 <uxr_serialize_CLIENT_Representation>
 8013f6c:	4004      	ands	r4, r0
 8013f6e:	e7a1      	b.n	8013eb4 <uxr_serialize_CREATE_Payload+0x44>
 8013f70:	68e9      	ldr	r1, [r5, #12]
 8013f72:	4630      	mov	r0, r6
 8013f74:	f005 fe60 	bl	8019c38 <ucdr_serialize_string>
 8013f78:	4607      	mov	r7, r0
 8013f7a:	e7c8      	b.n	8013f0e <uxr_serialize_CREATE_Payload+0x9e>
 8013f7c:	68ea      	ldr	r2, [r5, #12]
 8013f7e:	f105 0110 	add.w	r1, r5, #16
 8013f82:	4630      	mov	r0, r6
 8013f84:	f7fc fc70 	bl	8010868 <ucdr_serialize_sequence_uint8_t>
 8013f88:	4607      	mov	r7, r0
 8013f8a:	e7db      	b.n	8013f44 <uxr_serialize_CREATE_Payload+0xd4>

08013f8c <uxr_serialize_GET_INFO_Payload>:
 8013f8c:	b570      	push	{r4, r5, r6, lr}
 8013f8e:	2202      	movs	r2, #2
 8013f90:	4605      	mov	r5, r0
 8013f92:	460e      	mov	r6, r1
 8013f94:	f7fa fa08 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013f98:	2202      	movs	r2, #2
 8013f9a:	18b1      	adds	r1, r6, r2
 8013f9c:	4604      	mov	r4, r0
 8013f9e:	4628      	mov	r0, r5
 8013fa0:	f7fa fa02 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013fa4:	6871      	ldr	r1, [r6, #4]
 8013fa6:	4004      	ands	r4, r0
 8013fa8:	4628      	mov	r0, r5
 8013faa:	f7fa ffb9 	bl	800ef20 <ucdr_serialize_uint32_t>
 8013fae:	b2e4      	uxtb	r4, r4
 8013fb0:	4020      	ands	r0, r4
 8013fb2:	bd70      	pop	{r4, r5, r6, pc}

08013fb4 <uxr_deserialize_GET_INFO_Payload>:
 8013fb4:	b570      	push	{r4, r5, r6, lr}
 8013fb6:	2202      	movs	r2, #2
 8013fb8:	4605      	mov	r5, r0
 8013fba:	460e      	mov	r6, r1
 8013fbc:	f7fa fa58 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013fc0:	2202      	movs	r2, #2
 8013fc2:	18b1      	adds	r1, r6, r2
 8013fc4:	4604      	mov	r4, r0
 8013fc6:	4628      	mov	r0, r5
 8013fc8:	f7fa fa52 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8013fcc:	1d31      	adds	r1, r6, #4
 8013fce:	4004      	ands	r4, r0
 8013fd0:	4628      	mov	r0, r5
 8013fd2:	f7fb f8cf 	bl	800f174 <ucdr_deserialize_uint32_t>
 8013fd6:	b2e4      	uxtb	r4, r4
 8013fd8:	4020      	ands	r0, r4
 8013fda:	bd70      	pop	{r4, r5, r6, pc}

08013fdc <uxr_serialize_DELETE_Payload>:
 8013fdc:	b570      	push	{r4, r5, r6, lr}
 8013fde:	2202      	movs	r2, #2
 8013fe0:	4605      	mov	r5, r0
 8013fe2:	460e      	mov	r6, r1
 8013fe4:	f7fa f9e0 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013fe8:	2202      	movs	r2, #2
 8013fea:	4604      	mov	r4, r0
 8013fec:	18b1      	adds	r1, r6, r2
 8013fee:	4628      	mov	r0, r5
 8013ff0:	f7fa f9da 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8013ff4:	4020      	ands	r0, r4
 8013ff6:	b2c0      	uxtb	r0, r0
 8013ff8:	bd70      	pop	{r4, r5, r6, pc}
 8013ffa:	bf00      	nop

08013ffc <uxr_deserialize_STATUS_AGENT_Payload>:
 8013ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014000:	4605      	mov	r5, r0
 8014002:	460e      	mov	r6, r1
 8014004:	f7fa fd86 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8014008:	1c71      	adds	r1, r6, #1
 801400a:	4604      	mov	r4, r0
 801400c:	4628      	mov	r0, r5
 801400e:	f7fa fd81 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8014012:	2204      	movs	r2, #4
 8014014:	18b1      	adds	r1, r6, r2
 8014016:	4681      	mov	r9, r0
 8014018:	4628      	mov	r0, r5
 801401a:	f7fa fa29 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 801401e:	f106 0108 	add.w	r1, r6, #8
 8014022:	4680      	mov	r8, r0
 8014024:	2202      	movs	r2, #2
 8014026:	4628      	mov	r0, r5
 8014028:	f7fa fa22 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 801402c:	2202      	movs	r2, #2
 801402e:	f106 010a 	add.w	r1, r6, #10
 8014032:	4607      	mov	r7, r0
 8014034:	4628      	mov	r0, r5
 8014036:	f7fa fa1b 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 801403a:	ea04 0409 	and.w	r4, r4, r9
 801403e:	4603      	mov	r3, r0
 8014040:	f106 010c 	add.w	r1, r6, #12
 8014044:	4628      	mov	r0, r5
 8014046:	b2e4      	uxtb	r4, r4
 8014048:	461d      	mov	r5, r3
 801404a:	ea04 0408 	and.w	r4, r4, r8
 801404e:	f7fa fd33 	bl	800eab8 <ucdr_deserialize_bool>
 8014052:	4027      	ands	r7, r4
 8014054:	403d      	ands	r5, r7
 8014056:	4028      	ands	r0, r5
 8014058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801405c <uxr_deserialize_STATUS_Payload>:
 801405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014060:	2202      	movs	r2, #2
 8014062:	4606      	mov	r6, r0
 8014064:	460f      	mov	r7, r1
 8014066:	f7fa fa03 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 801406a:	2202      	movs	r2, #2
 801406c:	18b9      	adds	r1, r7, r2
 801406e:	4605      	mov	r5, r0
 8014070:	4630      	mov	r0, r6
 8014072:	f7fa f9fd 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 8014076:	1d39      	adds	r1, r7, #4
 8014078:	4680      	mov	r8, r0
 801407a:	4630      	mov	r0, r6
 801407c:	f7fa fd4a 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8014080:	1d79      	adds	r1, r7, #5
 8014082:	4604      	mov	r4, r0
 8014084:	4630      	mov	r0, r6
 8014086:	f7fa fd45 	bl	800eb14 <ucdr_deserialize_uint8_t>
 801408a:	ea05 0508 	and.w	r5, r5, r8
 801408e:	402c      	ands	r4, r5
 8014090:	4020      	ands	r0, r4
 8014092:	b2c0      	uxtb	r0, r0
 8014094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014098 <uxr_serialize_INFO_Payload>:
 8014098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801409c:	2202      	movs	r2, #2
 801409e:	460c      	mov	r4, r1
 80140a0:	4605      	mov	r5, r0
 80140a2:	f7fa f981 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 80140a6:	2202      	movs	r2, #2
 80140a8:	18a1      	adds	r1, r4, r2
 80140aa:	4680      	mov	r8, r0
 80140ac:	4628      	mov	r0, r5
 80140ae:	f7fa f97b 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 80140b2:	7921      	ldrb	r1, [r4, #4]
 80140b4:	4607      	mov	r7, r0
 80140b6:	4628      	mov	r0, r5
 80140b8:	f7fa fd16 	bl	800eae8 <ucdr_serialize_uint8_t>
 80140bc:	7961      	ldrb	r1, [r4, #5]
 80140be:	4606      	mov	r6, r0
 80140c0:	4628      	mov	r0, r5
 80140c2:	f7fa fd11 	bl	800eae8 <ucdr_serialize_uint8_t>
 80140c6:	ea08 0807 	and.w	r8, r8, r7
 80140ca:	ea06 0608 	and.w	r6, r6, r8
 80140ce:	ea00 0706 	and.w	r7, r0, r6
 80140d2:	7a21      	ldrb	r1, [r4, #8]
 80140d4:	4628      	mov	r0, r5
 80140d6:	f7fa fcd9 	bl	800ea8c <ucdr_serialize_bool>
 80140da:	7a23      	ldrb	r3, [r4, #8]
 80140dc:	b2ff      	uxtb	r7, r7
 80140de:	4606      	mov	r6, r0
 80140e0:	b96b      	cbnz	r3, 80140fe <uxr_serialize_INFO_Payload+0x66>
 80140e2:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80140e6:	4628      	mov	r0, r5
 80140e8:	f7fa fcd0 	bl	800ea8c <ucdr_serialize_bool>
 80140ec:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80140f0:	4030      	ands	r0, r6
 80140f2:	b2c6      	uxtb	r6, r0
 80140f4:	b983      	cbnz	r3, 8014118 <uxr_serialize_INFO_Payload+0x80>
 80140f6:	ea06 0007 	and.w	r0, r6, r7
 80140fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140fe:	7b21      	ldrb	r1, [r4, #12]
 8014100:	4628      	mov	r0, r5
 8014102:	f7fa fcf1 	bl	800eae8 <ucdr_serialize_uint8_t>
 8014106:	b188      	cbz	r0, 801412c <uxr_serialize_INFO_Payload+0x94>
 8014108:	f104 010c 	add.w	r1, r4, #12
 801410c:	4628      	mov	r0, r5
 801410e:	f7ff fa19 	bl	8013544 <uxr_serialize_ObjectVariant.part.0>
 8014112:	4030      	ands	r0, r6
 8014114:	b2c6      	uxtb	r6, r0
 8014116:	e7e4      	b.n	80140e2 <uxr_serialize_INFO_Payload+0x4a>
 8014118:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801411c:	4628      	mov	r0, r5
 801411e:	f7ff fdb7 	bl	8013c90 <uxr_serialize_ActivityInfoVariant>
 8014122:	4006      	ands	r6, r0
 8014124:	ea06 0007 	and.w	r0, r6, r7
 8014128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801412c:	4606      	mov	r6, r0
 801412e:	e7d8      	b.n	80140e2 <uxr_serialize_INFO_Payload+0x4a>

08014130 <uxr_serialize_READ_DATA_Payload>:
 8014130:	b570      	push	{r4, r5, r6, lr}
 8014132:	2202      	movs	r2, #2
 8014134:	4605      	mov	r5, r0
 8014136:	460e      	mov	r6, r1
 8014138:	f7fa f936 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 801413c:	2202      	movs	r2, #2
 801413e:	18b1      	adds	r1, r6, r2
 8014140:	4604      	mov	r4, r0
 8014142:	4628      	mov	r0, r5
 8014144:	f7fa f930 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8014148:	1d31      	adds	r1, r6, #4
 801414a:	4004      	ands	r4, r0
 801414c:	4628      	mov	r0, r5
 801414e:	f7ff fe4b 	bl	8013de8 <uxr_serialize_ReadSpecification>
 8014152:	b2e4      	uxtb	r4, r4
 8014154:	4020      	ands	r0, r4
 8014156:	bd70      	pop	{r4, r5, r6, pc}

08014158 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014158:	b570      	push	{r4, r5, r6, lr}
 801415a:	2202      	movs	r2, #2
 801415c:	4605      	mov	r5, r0
 801415e:	460e      	mov	r6, r1
 8014160:	f7fa f922 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8014164:	2202      	movs	r2, #2
 8014166:	4604      	mov	r4, r0
 8014168:	18b1      	adds	r1, r6, r2
 801416a:	4628      	mov	r0, r5
 801416c:	f7fa f91c 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8014170:	4020      	ands	r0, r4
 8014172:	b2c0      	uxtb	r0, r0
 8014174:	bd70      	pop	{r4, r5, r6, pc}
 8014176:	bf00      	nop

08014178 <uxr_serialize_ACKNACK_Payload>:
 8014178:	b570      	push	{r4, r5, r6, lr}
 801417a:	460c      	mov	r4, r1
 801417c:	460e      	mov	r6, r1
 801417e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8014182:	4605      	mov	r5, r0
 8014184:	f7fa fcdc 	bl	800eb40 <ucdr_serialize_uint16_t>
 8014188:	2202      	movs	r2, #2
 801418a:	4621      	mov	r1, r4
 801418c:	4604      	mov	r4, r0
 801418e:	4628      	mov	r0, r5
 8014190:	f7fa f90a 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 8014194:	7931      	ldrb	r1, [r6, #4]
 8014196:	4004      	ands	r4, r0
 8014198:	4628      	mov	r0, r5
 801419a:	f7fa fca5 	bl	800eae8 <ucdr_serialize_uint8_t>
 801419e:	b2e4      	uxtb	r4, r4
 80141a0:	4020      	ands	r0, r4
 80141a2:	bd70      	pop	{r4, r5, r6, pc}

080141a4 <uxr_deserialize_ACKNACK_Payload>:
 80141a4:	b570      	push	{r4, r5, r6, lr}
 80141a6:	4605      	mov	r5, r0
 80141a8:	460e      	mov	r6, r1
 80141aa:	f7fa fdcd 	bl	800ed48 <ucdr_deserialize_uint16_t>
 80141ae:	2202      	movs	r2, #2
 80141b0:	18b1      	adds	r1, r6, r2
 80141b2:	4604      	mov	r4, r0
 80141b4:	4628      	mov	r0, r5
 80141b6:	f7fa f95b 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 80141ba:	1d31      	adds	r1, r6, #4
 80141bc:	4004      	ands	r4, r0
 80141be:	4628      	mov	r0, r5
 80141c0:	f7fa fca8 	bl	800eb14 <ucdr_deserialize_uint8_t>
 80141c4:	b2e4      	uxtb	r4, r4
 80141c6:	4020      	ands	r0, r4
 80141c8:	bd70      	pop	{r4, r5, r6, pc}
 80141ca:	bf00      	nop

080141cc <uxr_serialize_HEARTBEAT_Payload>:
 80141cc:	b570      	push	{r4, r5, r6, lr}
 80141ce:	460d      	mov	r5, r1
 80141d0:	8809      	ldrh	r1, [r1, #0]
 80141d2:	4606      	mov	r6, r0
 80141d4:	f7fa fcb4 	bl	800eb40 <ucdr_serialize_uint16_t>
 80141d8:	8869      	ldrh	r1, [r5, #2]
 80141da:	4604      	mov	r4, r0
 80141dc:	4630      	mov	r0, r6
 80141de:	f7fa fcaf 	bl	800eb40 <ucdr_serialize_uint16_t>
 80141e2:	7929      	ldrb	r1, [r5, #4]
 80141e4:	4004      	ands	r4, r0
 80141e6:	4630      	mov	r0, r6
 80141e8:	f7fa fc7e 	bl	800eae8 <ucdr_serialize_uint8_t>
 80141ec:	b2e4      	uxtb	r4, r4
 80141ee:	4020      	ands	r0, r4
 80141f0:	bd70      	pop	{r4, r5, r6, pc}
 80141f2:	bf00      	nop

080141f4 <uxr_deserialize_HEARTBEAT_Payload>:
 80141f4:	b570      	push	{r4, r5, r6, lr}
 80141f6:	4605      	mov	r5, r0
 80141f8:	460e      	mov	r6, r1
 80141fa:	f7fa fda5 	bl	800ed48 <ucdr_deserialize_uint16_t>
 80141fe:	1cb1      	adds	r1, r6, #2
 8014200:	4604      	mov	r4, r0
 8014202:	4628      	mov	r0, r5
 8014204:	f7fa fda0 	bl	800ed48 <ucdr_deserialize_uint16_t>
 8014208:	1d31      	adds	r1, r6, #4
 801420a:	4004      	ands	r4, r0
 801420c:	4628      	mov	r0, r5
 801420e:	f7fa fc81 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8014212:	b2e4      	uxtb	r4, r4
 8014214:	4020      	ands	r0, r4
 8014216:	bd70      	pop	{r4, r5, r6, pc}

08014218 <uxr_serialize_TIMESTAMP_Payload>:
 8014218:	b570      	push	{r4, r5, r6, lr}
 801421a:	460d      	mov	r5, r1
 801421c:	6809      	ldr	r1, [r1, #0]
 801421e:	4606      	mov	r6, r0
 8014220:	f7fb fa90 	bl	800f744 <ucdr_serialize_int32_t>
 8014224:	6869      	ldr	r1, [r5, #4]
 8014226:	4604      	mov	r4, r0
 8014228:	4630      	mov	r0, r6
 801422a:	f7fa fe79 	bl	800ef20 <ucdr_serialize_uint32_t>
 801422e:	4020      	ands	r0, r4
 8014230:	b2c0      	uxtb	r0, r0
 8014232:	bd70      	pop	{r4, r5, r6, pc}

08014234 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014238:	4605      	mov	r5, r0
 801423a:	460e      	mov	r6, r1
 801423c:	f7fb fbac 	bl	800f998 <ucdr_deserialize_int32_t>
 8014240:	1d31      	adds	r1, r6, #4
 8014242:	4607      	mov	r7, r0
 8014244:	4628      	mov	r0, r5
 8014246:	f7fa ff95 	bl	800f174 <ucdr_deserialize_uint32_t>
 801424a:	f106 0108 	add.w	r1, r6, #8
 801424e:	4680      	mov	r8, r0
 8014250:	4628      	mov	r0, r5
 8014252:	f7fb fba1 	bl	800f998 <ucdr_deserialize_int32_t>
 8014256:	f106 010c 	add.w	r1, r6, #12
 801425a:	4604      	mov	r4, r0
 801425c:	4628      	mov	r0, r5
 801425e:	f7fa ff89 	bl	800f174 <ucdr_deserialize_uint32_t>
 8014262:	ea07 0708 	and.w	r7, r7, r8
 8014266:	403c      	ands	r4, r7
 8014268:	f106 0110 	add.w	r1, r6, #16
 801426c:	4004      	ands	r4, r0
 801426e:	4628      	mov	r0, r5
 8014270:	f7fb fb92 	bl	800f998 <ucdr_deserialize_int32_t>
 8014274:	f106 0114 	add.w	r1, r6, #20
 8014278:	4607      	mov	r7, r0
 801427a:	4628      	mov	r0, r5
 801427c:	f7fa ff7a 	bl	800f174 <ucdr_deserialize_uint32_t>
 8014280:	b2e4      	uxtb	r4, r4
 8014282:	403c      	ands	r4, r7
 8014284:	4020      	ands	r0, r4
 8014286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801428a:	bf00      	nop

0801428c <uxr_serialize_SampleIdentity>:
 801428c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014290:	220c      	movs	r2, #12
 8014292:	4604      	mov	r4, r0
 8014294:	460d      	mov	r5, r1
 8014296:	f7fa f887 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 801429a:	2203      	movs	r2, #3
 801429c:	f105 010c 	add.w	r1, r5, #12
 80142a0:	4680      	mov	r8, r0
 80142a2:	4620      	mov	r0, r4
 80142a4:	f7fa f880 	bl	800e3a8 <ucdr_serialize_array_uint8_t>
 80142a8:	7be9      	ldrb	r1, [r5, #15]
 80142aa:	4681      	mov	r9, r0
 80142ac:	4620      	mov	r0, r4
 80142ae:	f7fa fc1b 	bl	800eae8 <ucdr_serialize_uint8_t>
 80142b2:	6929      	ldr	r1, [r5, #16]
 80142b4:	4607      	mov	r7, r0
 80142b6:	4620      	mov	r0, r4
 80142b8:	f7fb fa44 	bl	800f744 <ucdr_serialize_int32_t>
 80142bc:	6969      	ldr	r1, [r5, #20]
 80142be:	4606      	mov	r6, r0
 80142c0:	4620      	mov	r0, r4
 80142c2:	f7fa fe2d 	bl	800ef20 <ucdr_serialize_uint32_t>
 80142c6:	ea08 0809 	and.w	r8, r8, r9
 80142ca:	ea07 0708 	and.w	r7, r7, r8
 80142ce:	403e      	ands	r6, r7
 80142d0:	4030      	ands	r0, r6
 80142d2:	b2c0      	uxtb	r0, r0
 80142d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080142d8 <uxr_deserialize_SampleIdentity>:
 80142d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142dc:	220c      	movs	r2, #12
 80142de:	4604      	mov	r4, r0
 80142e0:	460d      	mov	r5, r1
 80142e2:	f7fa f8c5 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 80142e6:	2203      	movs	r2, #3
 80142e8:	f105 010c 	add.w	r1, r5, #12
 80142ec:	4680      	mov	r8, r0
 80142ee:	4620      	mov	r0, r4
 80142f0:	f7fa f8be 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 80142f4:	f105 010f 	add.w	r1, r5, #15
 80142f8:	4681      	mov	r9, r0
 80142fa:	4620      	mov	r0, r4
 80142fc:	f7fa fc0a 	bl	800eb14 <ucdr_deserialize_uint8_t>
 8014300:	f105 0110 	add.w	r1, r5, #16
 8014304:	4607      	mov	r7, r0
 8014306:	4620      	mov	r0, r4
 8014308:	f7fb fb46 	bl	800f998 <ucdr_deserialize_int32_t>
 801430c:	f105 0114 	add.w	r1, r5, #20
 8014310:	4606      	mov	r6, r0
 8014312:	4620      	mov	r0, r4
 8014314:	f7fa ff2e 	bl	800f174 <ucdr_deserialize_uint32_t>
 8014318:	ea08 0809 	and.w	r8, r8, r9
 801431c:	ea07 0708 	and.w	r7, r7, r8
 8014320:	403e      	ands	r6, r7
 8014322:	4030      	ands	r0, r6
 8014324:	b2c0      	uxtb	r0, r0
 8014326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801432a:	bf00      	nop

0801432c <rcl_client_get_rmw_handle>:
 801432c:	b118      	cbz	r0, 8014336 <rcl_client_get_rmw_handle+0xa>
 801432e:	6800      	ldr	r0, [r0, #0]
 8014330:	b108      	cbz	r0, 8014336 <rcl_client_get_rmw_handle+0xa>
 8014332:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014336:	4770      	bx	lr

08014338 <rcl_send_request>:
 8014338:	2800      	cmp	r0, #0
 801433a:	d048      	beq.n	80143ce <rcl_send_request+0x96>
 801433c:	b570      	push	{r4, r5, r6, lr}
 801433e:	4604      	mov	r4, r0
 8014340:	6800      	ldr	r0, [r0, #0]
 8014342:	b08a      	sub	sp, #40	@ 0x28
 8014344:	b1c0      	cbz	r0, 8014378 <rcl_send_request+0x40>
 8014346:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 801434a:	b1ab      	cbz	r3, 8014378 <rcl_send_request+0x40>
 801434c:	460e      	mov	r6, r1
 801434e:	b1b9      	cbz	r1, 8014380 <rcl_send_request+0x48>
 8014350:	4615      	mov	r5, r2
 8014352:	b1aa      	cbz	r2, 8014380 <rcl_send_request+0x48>
 8014354:	2105      	movs	r1, #5
 8014356:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 801435a:	f002 ff89 	bl	8017270 <__atomic_load_8>
 801435e:	6823      	ldr	r3, [r4, #0]
 8014360:	e9c5 0100 	strd	r0, r1, [r5]
 8014364:	462a      	mov	r2, r5
 8014366:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801436a:	4631      	mov	r1, r6
 801436c:	f004 f942 	bl	80185f4 <rmw_send_request>
 8014370:	b148      	cbz	r0, 8014386 <rcl_send_request+0x4e>
 8014372:	2001      	movs	r0, #1
 8014374:	b00a      	add	sp, #40	@ 0x28
 8014376:	bd70      	pop	{r4, r5, r6, pc}
 8014378:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 801437c:	b00a      	add	sp, #40	@ 0x28
 801437e:	bd70      	pop	{r4, r5, r6, pc}
 8014380:	200b      	movs	r0, #11
 8014382:	b00a      	add	sp, #40	@ 0x28
 8014384:	bd70      	pop	{r4, r5, r6, pc}
 8014386:	6820      	ldr	r0, [r4, #0]
 8014388:	2305      	movs	r3, #5
 801438a:	9300      	str	r3, [sp, #0]
 801438c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014390:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014394:	f002 ffd8 	bl	8017348 <__atomic_exchange_8>
 8014398:	6823      	ldr	r3, [r4, #0]
 801439a:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 801439e:	b1a2      	cbz	r2, 80143ca <rcl_send_request+0x92>
 80143a0:	a905      	add	r1, sp, #20
 80143a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80143a6:	f003 fd21 	bl	8017dec <rmw_get_gid_for_client>
 80143aa:	4601      	mov	r1, r0
 80143ac:	b990      	cbnz	r0, 80143d4 <rcl_send_request+0x9c>
 80143ae:	6822      	ldr	r2, [r4, #0]
 80143b0:	ab06      	add	r3, sp, #24
 80143b2:	f8d2 0118 	ldr.w	r0, [r2, #280]	@ 0x118
 80143b6:	9302      	str	r3, [sp, #8]
 80143b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80143bc:	4632      	mov	r2, r6
 80143be:	e9cd 4500 	strd	r4, r5, [sp]
 80143c2:	f000 fe15 	bl	8014ff0 <rcl_send_service_event_message>
 80143c6:	2800      	cmp	r0, #0
 80143c8:	d1d4      	bne.n	8014374 <rcl_send_request+0x3c>
 80143ca:	2000      	movs	r0, #0
 80143cc:	e7d2      	b.n	8014374 <rcl_send_request+0x3c>
 80143ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80143d2:	4770      	bx	lr
 80143d4:	f000 f87a 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 80143d8:	e7cc      	b.n	8014374 <rcl_send_request+0x3c>
 80143da:	bf00      	nop
 80143dc:	0000      	movs	r0, r0
	...

080143e0 <rcl_take_response>:
 80143e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143e2:	468e      	mov	lr, r1
 80143e4:	460c      	mov	r4, r1
 80143e6:	4617      	mov	r7, r2
 80143e8:	4605      	mov	r5, r0
 80143ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80143ee:	b095      	sub	sp, #84	@ 0x54
 80143f0:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 80143f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80143f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80143fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014400:	2d00      	cmp	r5, #0
 8014402:	d044      	beq.n	801448e <rcl_take_response+0xae>
 8014404:	682b      	ldr	r3, [r5, #0]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d041      	beq.n	801448e <rcl_take_response+0xae>
 801440a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801440e:	2800      	cmp	r0, #0
 8014410:	d03d      	beq.n	801448e <rcl_take_response+0xae>
 8014412:	2f00      	cmp	r7, #0
 8014414:	d03e      	beq.n	8014494 <rcl_take_response+0xb4>
 8014416:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 80144b0 <rcl_take_response+0xd0>
 801441a:	2300      	movs	r3, #0
 801441c:	f88d 3013 	strb.w	r3, [sp, #19]
 8014420:	463a      	mov	r2, r7
 8014422:	f10d 0313 	add.w	r3, sp, #19
 8014426:	a90a      	add	r1, sp, #40	@ 0x28
 8014428:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801442c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014430:	f004 f9e0 	bl	80187f4 <rmw_take_response>
 8014434:	4606      	mov	r6, r0
 8014436:	bb78      	cbnz	r0, 8014498 <rcl_take_response+0xb8>
 8014438:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801443c:	b373      	cbz	r3, 801449c <rcl_take_response+0xbc>
 801443e:	682b      	ldr	r3, [r5, #0]
 8014440:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8014444:	b1aa      	cbz	r2, 8014472 <rcl_take_response+0x92>
 8014446:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801444a:	a905      	add	r1, sp, #20
 801444c:	f003 fcce 	bl	8017dec <rmw_get_gid_for_client>
 8014450:	bb38      	cbnz	r0, 80144a2 <rcl_take_response+0xc2>
 8014452:	682b      	ldr	r3, [r5, #0]
 8014454:	ed9d 7b12 	vldr	d7, [sp, #72]	@ 0x48
 8014458:	f8d3 0118 	ldr.w	r0, [r3, #280]	@ 0x118
 801445c:	ab06      	add	r3, sp, #24
 801445e:	ed8d 7b00 	vstr	d7, [sp]
 8014462:	463a      	mov	r2, r7
 8014464:	9302      	str	r3, [sp, #8]
 8014466:	2103      	movs	r1, #3
 8014468:	f000 fdc2 	bl	8014ff0 <rcl_send_service_event_message>
 801446c:	2800      	cmp	r0, #0
 801446e:	bf18      	it	ne
 8014470:	4606      	movne	r6, r0
 8014472:	f10d 0e38 	add.w	lr, sp, #56	@ 0x38
 8014476:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801447a:	46a4      	mov	ip, r4
 801447c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014480:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014484:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014488:	4630      	mov	r0, r6
 801448a:	b015      	add	sp, #84	@ 0x54
 801448c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801448e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8014492:	e7ee      	b.n	8014472 <rcl_take_response+0x92>
 8014494:	260b      	movs	r6, #11
 8014496:	e7ec      	b.n	8014472 <rcl_take_response+0x92>
 8014498:	2601      	movs	r6, #1
 801449a:	e7ea      	b.n	8014472 <rcl_take_response+0x92>
 801449c:	f240 16f5 	movw	r6, #501	@ 0x1f5
 80144a0:	e7e7      	b.n	8014472 <rcl_take_response+0x92>
 80144a2:	f000 f813 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 80144a6:	4606      	mov	r6, r0
 80144a8:	e7e3      	b.n	8014472 <rcl_take_response+0x92>
 80144aa:	bf00      	nop
 80144ac:	f3af 8000 	nop.w
	...

080144b8 <rcl_client_is_valid>:
 80144b8:	b130      	cbz	r0, 80144c8 <rcl_client_is_valid+0x10>
 80144ba:	6800      	ldr	r0, [r0, #0]
 80144bc:	b120      	cbz	r0, 80144c8 <rcl_client_is_valid+0x10>
 80144be:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80144c2:	3800      	subs	r0, #0
 80144c4:	bf18      	it	ne
 80144c6:	2001      	movne	r0, #1
 80144c8:	4770      	bx	lr
 80144ca:	bf00      	nop

080144cc <rcl_convert_rmw_ret_to_rcl_ret>:
 80144cc:	280b      	cmp	r0, #11
 80144ce:	dc0d      	bgt.n	80144ec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80144d0:	2800      	cmp	r0, #0
 80144d2:	db09      	blt.n	80144e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80144d4:	280b      	cmp	r0, #11
 80144d6:	d807      	bhi.n	80144e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80144d8:	e8df f000 	tbb	[pc, r0]
 80144dc:	07060607 	.word	0x07060607
 80144e0:	06060606 	.word	0x06060606
 80144e4:	07070606 	.word	0x07070606
 80144e8:	2001      	movs	r0, #1
 80144ea:	4770      	bx	lr
 80144ec:	28cb      	cmp	r0, #203	@ 0xcb
 80144ee:	bf14      	ite	ne
 80144f0:	2001      	movne	r0, #1
 80144f2:	20cb      	moveq	r0, #203	@ 0xcb
 80144f4:	4770      	bx	lr
 80144f6:	bf00      	nop

080144f8 <rcl_get_zero_initialized_context>:
 80144f8:	2200      	movs	r2, #0
 80144fa:	e9c0 2200 	strd	r2, r2, [r0]
 80144fe:	4770      	bx	lr

08014500 <rcl_context_is_valid>:
 8014500:	b118      	cbz	r0, 801450a <rcl_context_is_valid+0xa>
 8014502:	6840      	ldr	r0, [r0, #4]
 8014504:	3800      	subs	r0, #0
 8014506:	bf18      	it	ne
 8014508:	2001      	movne	r0, #1
 801450a:	4770      	bx	lr

0801450c <__cleanup_context>:
 801450c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014510:	4606      	mov	r6, r0
 8014512:	6800      	ldr	r0, [r0, #0]
 8014514:	2300      	movs	r3, #0
 8014516:	6073      	str	r3, [r6, #4]
 8014518:	2800      	cmp	r0, #0
 801451a:	d042      	beq.n	80145a2 <__cleanup_context+0x96>
 801451c:	6943      	ldr	r3, [r0, #20]
 801451e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014522:	6907      	ldr	r7, [r0, #16]
 8014524:	b39b      	cbz	r3, 801458e <__cleanup_context+0x82>
 8014526:	3014      	adds	r0, #20
 8014528:	f000 f9b2 	bl	8014890 <rcl_init_options_fini>
 801452c:	4680      	mov	r8, r0
 801452e:	2800      	cmp	r0, #0
 8014530:	d144      	bne.n	80145bc <__cleanup_context+0xb0>
 8014532:	6830      	ldr	r0, [r6, #0]
 8014534:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014536:	b123      	cbz	r3, 8014542 <__cleanup_context+0x36>
 8014538:	3028      	adds	r0, #40	@ 0x28
 801453a:	f003 fe9f 	bl	801827c <rmw_context_fini>
 801453e:	bbb8      	cbnz	r0, 80145b0 <__cleanup_context+0xa4>
 8014540:	6830      	ldr	r0, [r6, #0]
 8014542:	6a03      	ldr	r3, [r0, #32]
 8014544:	b1db      	cbz	r3, 801457e <__cleanup_context+0x72>
 8014546:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801454a:	2a01      	cmp	r2, #1
 801454c:	f17c 0100 	sbcs.w	r1, ip, #0
 8014550:	db11      	blt.n	8014576 <__cleanup_context+0x6a>
 8014552:	2400      	movs	r4, #0
 8014554:	4625      	mov	r5, r4
 8014556:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801455a:	4639      	mov	r1, r7
 801455c:	b1c8      	cbz	r0, 8014592 <__cleanup_context+0x86>
 801455e:	47c8      	blx	r9
 8014560:	6833      	ldr	r3, [r6, #0]
 8014562:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8014566:	3401      	adds	r4, #1
 8014568:	f145 0500 	adc.w	r5, r5, #0
 801456c:	4294      	cmp	r4, r2
 801456e:	eb75 010c 	sbcs.w	r1, r5, ip
 8014572:	6a1b      	ldr	r3, [r3, #32]
 8014574:	dbef      	blt.n	8014556 <__cleanup_context+0x4a>
 8014576:	4618      	mov	r0, r3
 8014578:	4639      	mov	r1, r7
 801457a:	47c8      	blx	r9
 801457c:	6830      	ldr	r0, [r6, #0]
 801457e:	4639      	mov	r1, r7
 8014580:	47c8      	blx	r9
 8014582:	2300      	movs	r3, #0
 8014584:	e9c6 3300 	strd	r3, r3, [r6]
 8014588:	4640      	mov	r0, r8
 801458a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801458e:	4698      	mov	r8, r3
 8014590:	e7d0      	b.n	8014534 <__cleanup_context+0x28>
 8014592:	3401      	adds	r4, #1
 8014594:	f145 0500 	adc.w	r5, r5, #0
 8014598:	4294      	cmp	r4, r2
 801459a:	eb75 010c 	sbcs.w	r1, r5, ip
 801459e:	dbda      	blt.n	8014556 <__cleanup_context+0x4a>
 80145a0:	e7e9      	b.n	8014576 <__cleanup_context+0x6a>
 80145a2:	4680      	mov	r8, r0
 80145a4:	2300      	movs	r3, #0
 80145a6:	e9c6 3300 	strd	r3, r3, [r6]
 80145aa:	4640      	mov	r0, r8
 80145ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145b0:	f1b8 0f00 	cmp.w	r8, #0
 80145b4:	d005      	beq.n	80145c2 <__cleanup_context+0xb6>
 80145b6:	f7f7 fb83 	bl	800bcc0 <rcutils_reset_error>
 80145ba:	e7c1      	b.n	8014540 <__cleanup_context+0x34>
 80145bc:	f7f7 fb80 	bl	800bcc0 <rcutils_reset_error>
 80145c0:	e7b7      	b.n	8014532 <__cleanup_context+0x26>
 80145c2:	f7ff ff83 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 80145c6:	4680      	mov	r8, r0
 80145c8:	e7f5      	b.n	80145b6 <__cleanup_context+0xaa>
 80145ca:	bf00      	nop

080145cc <rcl_init>:
 80145cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d0:	1e04      	subs	r4, r0, #0
 80145d2:	b0a5      	sub	sp, #148	@ 0x94
 80145d4:	460d      	mov	r5, r1
 80145d6:	4617      	mov	r7, r2
 80145d8:	461e      	mov	r6, r3
 80145da:	dd13      	ble.n	8014604 <rcl_init+0x38>
 80145dc:	b161      	cbz	r1, 80145f8 <rcl_init+0x2c>
 80145de:	f1a1 0e04 	sub.w	lr, r1, #4
 80145e2:	f04f 0c00 	mov.w	ip, #0
 80145e6:	e001      	b.n	80145ec <rcl_init+0x20>
 80145e8:	4564      	cmp	r4, ip
 80145ea:	d00d      	beq.n	8014608 <rcl_init+0x3c>
 80145ec:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 80145f0:	f10c 0c01 	add.w	ip, ip, #1
 80145f4:	2800      	cmp	r0, #0
 80145f6:	d1f7      	bne.n	80145e8 <rcl_init+0x1c>
 80145f8:	f04f 080b 	mov.w	r8, #11
 80145fc:	4640      	mov	r0, r8
 80145fe:	b025      	add	sp, #148	@ 0x94
 8014600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014604:	2900      	cmp	r1, #0
 8014606:	d1f7      	bne.n	80145f8 <rcl_init+0x2c>
 8014608:	2f00      	cmp	r7, #0
 801460a:	d0f5      	beq.n	80145f8 <rcl_init+0x2c>
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d0f2      	beq.n	80145f8 <rcl_init+0x2c>
 8014612:	469c      	mov	ip, r3
 8014614:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014618:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 801461c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014620:	f8dc 3000 	ldr.w	r3, [ip]
 8014624:	f8ce 3000 	str.w	r3, [lr]
 8014628:	a81f      	add	r0, sp, #124	@ 0x7c
 801462a:	f7f7 fb1d 	bl	800bc68 <rcutils_allocator_is_valid>
 801462e:	2800      	cmp	r0, #0
 8014630:	d0e2      	beq.n	80145f8 <rcl_init+0x2c>
 8014632:	2e00      	cmp	r6, #0
 8014634:	d0e0      	beq.n	80145f8 <rcl_init+0x2c>
 8014636:	6833      	ldr	r3, [r6, #0]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d173      	bne.n	8014724 <rcl_init+0x158>
 801463c:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 8014640:	2198      	movs	r1, #152	@ 0x98
 8014642:	2001      	movs	r0, #1
 8014644:	4798      	blx	r3
 8014646:	4680      	mov	r8, r0
 8014648:	6030      	str	r0, [r6, #0]
 801464a:	2800      	cmp	r0, #0
 801464c:	f000 80ac 	beq.w	80147a8 <rcl_init+0x1dc>
 8014650:	a802      	add	r0, sp, #8
 8014652:	f003 f965 	bl	8017920 <rmw_get_zero_initialized_context>
 8014656:	a902      	add	r1, sp, #8
 8014658:	f108 0028 	add.w	r0, r8, #40	@ 0x28
 801465c:	2270      	movs	r2, #112	@ 0x70
 801465e:	f007 fdfe 	bl	801c25e <memcpy>
 8014662:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
 8014666:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801466a:	f8d6 8000 	ldr.w	r8, [r6]
 801466e:	46c4      	mov	ip, r8
 8014670:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014674:	f8de 3000 	ldr.w	r3, [lr]
 8014678:	f8cc 3000 	str.w	r3, [ip]
 801467c:	f108 0114 	add.w	r1, r8, #20
 8014680:	4638      	mov	r0, r7
 8014682:	f000 f92f 	bl	80148e4 <rcl_init_options_copy>
 8014686:	4680      	mov	r8, r0
 8014688:	2800      	cmp	r0, #0
 801468a:	d147      	bne.n	801471c <rcl_init+0x150>
 801468c:	f8d6 9000 	ldr.w	r9, [r6]
 8014690:	ea4f 7ae4 	mov.w	sl, r4, asr #31
 8014694:	f8c9 0020 	str.w	r0, [r9, #32]
 8014698:	f8c9 4018 	str.w	r4, [r9, #24]
 801469c:	f8c9 a01c 	str.w	sl, [r9, #28]
 80146a0:	2c00      	cmp	r4, #0
 80146a2:	d047      	beq.n	8014734 <rcl_init+0x168>
 80146a4:	2d00      	cmp	r5, #0
 80146a6:	d045      	beq.n	8014734 <rcl_init+0x168>
 80146a8:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	@ 0x88
 80146ac:	2104      	movs	r1, #4
 80146ae:	4620      	mov	r0, r4
 80146b0:	4798      	blx	r3
 80146b2:	f8c9 0020 	str.w	r0, [r9, #32]
 80146b6:	f8d6 9000 	ldr.w	r9, [r6]
 80146ba:	f8d9 b020 	ldr.w	fp, [r9, #32]
 80146be:	f1bb 0f00 	cmp.w	fp, #0
 80146c2:	d029      	beq.n	8014718 <rcl_init+0x14c>
 80146c4:	2c01      	cmp	r4, #1
 80146c6:	f17a 0300 	sbcs.w	r3, sl, #0
 80146ca:	db33      	blt.n	8014734 <rcl_init+0x168>
 80146cc:	f04f 0800 	mov.w	r8, #0
 80146d0:	3d04      	subs	r5, #4
 80146d2:	46c1      	mov	r9, r8
 80146d4:	e00d      	b.n	80146f2 <rcl_init+0x126>
 80146d6:	6829      	ldr	r1, [r5, #0]
 80146d8:	f007 fdc1 	bl	801c25e <memcpy>
 80146dc:	f118 0801 	adds.w	r8, r8, #1
 80146e0:	f149 0900 	adc.w	r9, r9, #0
 80146e4:	45ca      	cmp	sl, r9
 80146e6:	bf08      	it	eq
 80146e8:	4544      	cmpeq	r4, r8
 80146ea:	d021      	beq.n	8014730 <rcl_init+0x164>
 80146ec:	6833      	ldr	r3, [r6, #0]
 80146ee:	f8d3 b020 	ldr.w	fp, [r3, #32]
 80146f2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80146f6:	f7eb fdeb 	bl	80002d0 <strlen>
 80146fa:	1c42      	adds	r2, r0, #1
 80146fc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80146fe:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8014700:	9201      	str	r2, [sp, #4]
 8014702:	4610      	mov	r0, r2
 8014704:	4798      	blx	r3
 8014706:	6833      	ldr	r3, [r6, #0]
 8014708:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
 801470c:	6a1b      	ldr	r3, [r3, #32]
 801470e:	9a01      	ldr	r2, [sp, #4]
 8014710:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8014714:	2800      	cmp	r0, #0
 8014716:	d1de      	bne.n	80146d6 <rcl_init+0x10a>
 8014718:	f04f 080a 	mov.w	r8, #10
 801471c:	4630      	mov	r0, r6
 801471e:	f7ff fef5 	bl	801450c <__cleanup_context>
 8014722:	e76b      	b.n	80145fc <rcl_init+0x30>
 8014724:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8014728:	4640      	mov	r0, r8
 801472a:	b025      	add	sp, #148	@ 0x94
 801472c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014730:	f8d6 9000 	ldr.w	r9, [r6]
 8014734:	4a26      	ldr	r2, [pc, #152]	@ (80147d0 <rcl_init+0x204>)
 8014736:	6813      	ldr	r3, [r2, #0]
 8014738:	3301      	adds	r3, #1
 801473a:	d030      	beq.n	801479e <rcl_init+0x1d2>
 801473c:	461d      	mov	r5, r3
 801473e:	2000      	movs	r0, #0
 8014740:	4619      	mov	r1, r3
 8014742:	f8d9 4014 	ldr.w	r4, [r9, #20]
 8014746:	6073      	str	r3, [r6, #4]
 8014748:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801474a:	6011      	str	r1, [r2, #0]
 801474c:	3301      	adds	r3, #1
 801474e:	e9c4 5006 	strd	r5, r0, [r4, #24]
 8014752:	d033      	beq.n	80147bc <rcl_init+0x1f0>
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801475a:	f104 0530 	add.w	r5, r4, #48	@ 0x30
 801475e:	b333      	cbz	r3, 80147ae <rcl_init+0x1e2>
 8014760:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8014762:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 8014766:	b953      	cbnz	r3, 801477e <rcl_init+0x1b2>
 8014768:	2801      	cmp	r0, #1
 801476a:	d008      	beq.n	801477e <rcl_init+0x1b2>
 801476c:	a91f      	add	r1, sp, #124	@ 0x7c
 801476e:	4628      	mov	r0, r5
 8014770:	f006 f946 	bl	801aa00 <rcl_get_discovery_static_peers>
 8014774:	4680      	mov	r8, r0
 8014776:	2800      	cmp	r0, #0
 8014778:	d1d0      	bne.n	801471c <rcl_init+0x150>
 801477a:	f894 0030 	ldrb.w	r0, [r4, #48]	@ 0x30
 801477e:	f006 f935 	bl	801a9ec <rcl_automatic_discovery_range_to_string>
 8014782:	6831      	ldr	r1, [r6, #0]
 8014784:	6948      	ldr	r0, [r1, #20]
 8014786:	3128      	adds	r1, #40	@ 0x28
 8014788:	3018      	adds	r0, #24
 801478a:	f003 fc43 	bl	8018014 <rmw_init>
 801478e:	4680      	mov	r8, r0
 8014790:	2800      	cmp	r0, #0
 8014792:	f43f af33 	beq.w	80145fc <rcl_init+0x30>
 8014796:	f7ff fe99 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 801479a:	4680      	mov	r8, r0
 801479c:	e7be      	b.n	801471c <rcl_init+0x150>
 801479e:	2101      	movs	r1, #1
 80147a0:	4618      	mov	r0, r3
 80147a2:	460d      	mov	r5, r1
 80147a4:	460b      	mov	r3, r1
 80147a6:	e7cc      	b.n	8014742 <rcl_init+0x176>
 80147a8:	f04f 080a 	mov.w	r8, #10
 80147ac:	e726      	b.n	80145fc <rcl_init+0x30>
 80147ae:	4628      	mov	r0, r5
 80147b0:	f006 f8da 	bl	801a968 <rcl_get_automatic_discovery_range>
 80147b4:	4680      	mov	r8, r0
 80147b6:	2800      	cmp	r0, #0
 80147b8:	d0d2      	beq.n	8014760 <rcl_init+0x194>
 80147ba:	e7af      	b.n	801471c <rcl_init+0x150>
 80147bc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80147c0:	f006 f988 	bl	801aad4 <rcl_get_default_domain_id>
 80147c4:	4680      	mov	r8, r0
 80147c6:	2800      	cmp	r0, #0
 80147c8:	d1a8      	bne.n	801471c <rcl_init+0x150>
 80147ca:	6833      	ldr	r3, [r6, #0]
 80147cc:	695c      	ldr	r4, [r3, #20]
 80147ce:	e7c1      	b.n	8014754 <rcl_init+0x188>
 80147d0:	200123e4 	.word	0x200123e4

080147d4 <rcl_get_zero_initialized_init_options>:
 80147d4:	2000      	movs	r0, #0
 80147d6:	4770      	bx	lr

080147d8 <rcl_init_options_init>:
 80147d8:	b084      	sub	sp, #16
 80147da:	b570      	push	{r4, r5, r6, lr}
 80147dc:	b09e      	sub	sp, #120	@ 0x78
 80147de:	ad23      	add	r5, sp, #140	@ 0x8c
 80147e0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80147e4:	2800      	cmp	r0, #0
 80147e6:	d046      	beq.n	8014876 <rcl_init_options_init+0x9e>
 80147e8:	6803      	ldr	r3, [r0, #0]
 80147ea:	4604      	mov	r4, r0
 80147ec:	b133      	cbz	r3, 80147fc <rcl_init_options_init+0x24>
 80147ee:	2564      	movs	r5, #100	@ 0x64
 80147f0:	4628      	mov	r0, r5
 80147f2:	b01e      	add	sp, #120	@ 0x78
 80147f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147f8:	b004      	add	sp, #16
 80147fa:	4770      	bx	lr
 80147fc:	4628      	mov	r0, r5
 80147fe:	f7f7 fa33 	bl	800bc68 <rcutils_allocator_is_valid>
 8014802:	2800      	cmp	r0, #0
 8014804:	d037      	beq.n	8014876 <rcl_init_options_init+0x9e>
 8014806:	46ae      	mov	lr, r5
 8014808:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801480c:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8014810:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014814:	f8de 3000 	ldr.w	r3, [lr]
 8014818:	f8cc 3000 	str.w	r3, [ip]
 801481c:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 801481e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014820:	2070      	movs	r0, #112	@ 0x70
 8014822:	4798      	blx	r3
 8014824:	4606      	mov	r6, r0
 8014826:	6020      	str	r0, [r4, #0]
 8014828:	b338      	cbz	r0, 801487a <rcl_init_options_init+0xa2>
 801482a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801482e:	4686      	mov	lr, r0
 8014830:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014834:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014838:	f8dc 3000 	ldr.w	r3, [ip]
 801483c:	f8ce 3000 	str.w	r3, [lr]
 8014840:	a802      	add	r0, sp, #8
 8014842:	f003 f877 	bl	8017934 <rmw_get_zero_initialized_init_options>
 8014846:	2258      	movs	r2, #88	@ 0x58
 8014848:	a902      	add	r1, sp, #8
 801484a:	f106 0018 	add.w	r0, r6, #24
 801484e:	f007 fd06 	bl	801c25e <memcpy>
 8014852:	ab26      	add	r3, sp, #152	@ 0x98
 8014854:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014858:	6826      	ldr	r6, [r4, #0]
 801485a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801485e:	f106 0018 	add.w	r0, r6, #24
 8014862:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8014866:	f003 fae5 	bl	8017e34 <rmw_init_options_init>
 801486a:	4605      	mov	r5, r0
 801486c:	b938      	cbnz	r0, 801487e <rcl_init_options_init+0xa6>
 801486e:	6823      	ldr	r3, [r4, #0]
 8014870:	f883 0030 	strb.w	r0, [r3, #48]	@ 0x30
 8014874:	e7bc      	b.n	80147f0 <rcl_init_options_init+0x18>
 8014876:	250b      	movs	r5, #11
 8014878:	e7ba      	b.n	80147f0 <rcl_init_options_init+0x18>
 801487a:	250a      	movs	r5, #10
 801487c:	e7b8      	b.n	80147f0 <rcl_init_options_init+0x18>
 801487e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8014880:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8014882:	6820      	ldr	r0, [r4, #0]
 8014884:	4798      	blx	r3
 8014886:	4628      	mov	r0, r5
 8014888:	f7ff fe20 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 801488c:	4605      	mov	r5, r0
 801488e:	e7af      	b.n	80147f0 <rcl_init_options_init+0x18>

08014890 <rcl_init_options_fini>:
 8014890:	b530      	push	{r4, r5, lr}
 8014892:	b087      	sub	sp, #28
 8014894:	b1f0      	cbz	r0, 80148d4 <rcl_init_options_fini+0x44>
 8014896:	6803      	ldr	r3, [r0, #0]
 8014898:	4604      	mov	r4, r0
 801489a:	b1db      	cbz	r3, 80148d4 <rcl_init_options_fini+0x44>
 801489c:	469c      	mov	ip, r3
 801489e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148a2:	f10d 0e04 	add.w	lr, sp, #4
 80148a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80148aa:	f8dc 3000 	ldr.w	r3, [ip]
 80148ae:	f8ce 3000 	str.w	r3, [lr]
 80148b2:	a801      	add	r0, sp, #4
 80148b4:	f7f7 f9d8 	bl	800bc68 <rcutils_allocator_is_valid>
 80148b8:	b160      	cbz	r0, 80148d4 <rcl_init_options_fini+0x44>
 80148ba:	6820      	ldr	r0, [r4, #0]
 80148bc:	3018      	adds	r0, #24
 80148be:	f003 fb6b 	bl	8017f98 <rmw_init_options_fini>
 80148c2:	4605      	mov	r5, r0
 80148c4:	b950      	cbnz	r0, 80148dc <rcl_init_options_fini+0x4c>
 80148c6:	6820      	ldr	r0, [r4, #0]
 80148c8:	9b02      	ldr	r3, [sp, #8]
 80148ca:	9905      	ldr	r1, [sp, #20]
 80148cc:	4798      	blx	r3
 80148ce:	4628      	mov	r0, r5
 80148d0:	b007      	add	sp, #28
 80148d2:	bd30      	pop	{r4, r5, pc}
 80148d4:	250b      	movs	r5, #11
 80148d6:	4628      	mov	r0, r5
 80148d8:	b007      	add	sp, #28
 80148da:	bd30      	pop	{r4, r5, pc}
 80148dc:	f7ff fdf6 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 80148e0:	4605      	mov	r5, r0
 80148e2:	e7f8      	b.n	80148d6 <rcl_init_options_fini+0x46>

080148e4 <rcl_init_options_copy>:
 80148e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148e6:	b09d      	sub	sp, #116	@ 0x74
 80148e8:	2800      	cmp	r0, #0
 80148ea:	d04a      	beq.n	8014982 <rcl_init_options_copy+0x9e>
 80148ec:	4604      	mov	r4, r0
 80148ee:	6800      	ldr	r0, [r0, #0]
 80148f0:	2800      	cmp	r0, #0
 80148f2:	d046      	beq.n	8014982 <rcl_init_options_copy+0x9e>
 80148f4:	460d      	mov	r5, r1
 80148f6:	f7f7 f9b7 	bl	800bc68 <rcutils_allocator_is_valid>
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d041      	beq.n	8014982 <rcl_init_options_copy+0x9e>
 80148fe:	2d00      	cmp	r5, #0
 8014900:	d03f      	beq.n	8014982 <rcl_init_options_copy+0x9e>
 8014902:	682b      	ldr	r3, [r5, #0]
 8014904:	b11b      	cbz	r3, 801490e <rcl_init_options_copy+0x2a>
 8014906:	2464      	movs	r4, #100	@ 0x64
 8014908:	4620      	mov	r0, r4
 801490a:	b01d      	add	sp, #116	@ 0x74
 801490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801490e:	6826      	ldr	r6, [r4, #0]
 8014910:	46b6      	mov	lr, r6
 8014912:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014916:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 801491a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801491e:	f8de 3000 	ldr.w	r3, [lr]
 8014922:	6837      	ldr	r7, [r6, #0]
 8014924:	f8cc 3000 	str.w	r3, [ip]
 8014928:	4619      	mov	r1, r3
 801492a:	2070      	movs	r0, #112	@ 0x70
 801492c:	47b8      	blx	r7
 801492e:	4606      	mov	r6, r0
 8014930:	6028      	str	r0, [r5, #0]
 8014932:	b350      	cbz	r0, 801498a <rcl_init_options_copy+0xa6>
 8014934:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 8014938:	4686      	mov	lr, r0
 801493a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801493e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014942:	f8dc 3000 	ldr.w	r3, [ip]
 8014946:	f8ce 3000 	str.w	r3, [lr]
 801494a:	4668      	mov	r0, sp
 801494c:	f002 fff2 	bl	8017934 <rmw_get_zero_initialized_init_options>
 8014950:	2258      	movs	r2, #88	@ 0x58
 8014952:	4669      	mov	r1, sp
 8014954:	f106 0018 	add.w	r0, r6, #24
 8014958:	f007 fc81 	bl	801c25e <memcpy>
 801495c:	6820      	ldr	r0, [r4, #0]
 801495e:	6829      	ldr	r1, [r5, #0]
 8014960:	3018      	adds	r0, #24
 8014962:	3118      	adds	r1, #24
 8014964:	f003 fac8 	bl	8017ef8 <rmw_init_options_copy>
 8014968:	4604      	mov	r4, r0
 801496a:	2800      	cmp	r0, #0
 801496c:	d0cc      	beq.n	8014908 <rcl_init_options_copy+0x24>
 801496e:	f7f7 f98f 	bl	800bc90 <rcutils_get_error_string>
 8014972:	f7f7 f9a5 	bl	800bcc0 <rcutils_reset_error>
 8014976:	4628      	mov	r0, r5
 8014978:	f7ff ff8a 	bl	8014890 <rcl_init_options_fini>
 801497c:	b138      	cbz	r0, 801498e <rcl_init_options_copy+0xaa>
 801497e:	4604      	mov	r4, r0
 8014980:	e7c2      	b.n	8014908 <rcl_init_options_copy+0x24>
 8014982:	240b      	movs	r4, #11
 8014984:	4620      	mov	r0, r4
 8014986:	b01d      	add	sp, #116	@ 0x74
 8014988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801498a:	240a      	movs	r4, #10
 801498c:	e7bc      	b.n	8014908 <rcl_init_options_copy+0x24>
 801498e:	4620      	mov	r0, r4
 8014990:	b01d      	add	sp, #116	@ 0x74
 8014992:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014996:	f7ff bd99 	b.w	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 801499a:	bf00      	nop

0801499c <rcl_get_zero_initialized_node>:
 801499c:	4a03      	ldr	r2, [pc, #12]	@ (80149ac <rcl_get_zero_initialized_node+0x10>)
 801499e:	4603      	mov	r3, r0
 80149a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80149a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80149a8:	4618      	mov	r0, r3
 80149aa:	4770      	bx	lr
 80149ac:	0801e424 	.word	0x0801e424

080149b0 <rcl_node_init>:
 80149b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149b4:	b0ab      	sub	sp, #172	@ 0xac
 80149b6:	4604      	mov	r4, r0
 80149b8:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 80149ba:	a825      	add	r0, sp, #148	@ 0x94
 80149bc:	4689      	mov	r9, r1
 80149be:	4690      	mov	r8, r2
 80149c0:	461f      	mov	r7, r3
 80149c2:	f006 faf9 	bl	801afb8 <rcl_guard_condition_get_default_options>
 80149c6:	2d00      	cmp	r5, #0
 80149c8:	f000 80d8 	beq.w	8014b7c <rcl_node_init+0x1cc>
 80149cc:	4628      	mov	r0, r5
 80149ce:	f7f7 f94b 	bl	800bc68 <rcutils_allocator_is_valid>
 80149d2:	2800      	cmp	r0, #0
 80149d4:	f000 80d2 	beq.w	8014b7c <rcl_node_init+0x1cc>
 80149d8:	f1b9 0f00 	cmp.w	r9, #0
 80149dc:	f000 80ce 	beq.w	8014b7c <rcl_node_init+0x1cc>
 80149e0:	f1b8 0f00 	cmp.w	r8, #0
 80149e4:	f000 80ca 	beq.w	8014b7c <rcl_node_init+0x1cc>
 80149e8:	2c00      	cmp	r4, #0
 80149ea:	f000 80c7 	beq.w	8014b7c <rcl_node_init+0x1cc>
 80149ee:	6866      	ldr	r6, [r4, #4]
 80149f0:	2e00      	cmp	r6, #0
 80149f2:	f040 80ca 	bne.w	8014b8a <rcl_node_init+0x1da>
 80149f6:	2f00      	cmp	r7, #0
 80149f8:	f000 80c0 	beq.w	8014b7c <rcl_node_init+0x1cc>
 80149fc:	4638      	mov	r0, r7
 80149fe:	f7ff fd7f 	bl	8014500 <rcl_context_is_valid>
 8014a02:	2800      	cmp	r0, #0
 8014a04:	f000 80bf 	beq.w	8014b86 <rcl_node_init+0x1d6>
 8014a08:	4632      	mov	r2, r6
 8014a0a:	a924      	add	r1, sp, #144	@ 0x90
 8014a0c:	4648      	mov	r0, r9
 8014a0e:	9624      	str	r6, [sp, #144]	@ 0x90
 8014a10:	f003 f92c 	bl	8017c6c <rmw_validate_node_name>
 8014a14:	4606      	mov	r6, r0
 8014a16:	2800      	cmp	r0, #0
 8014a18:	f040 80b1 	bne.w	8014b7e <rcl_node_init+0x1ce>
 8014a1c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8014a1e:	2800      	cmp	r0, #0
 8014a20:	f040 8104 	bne.w	8014c2c <rcl_node_init+0x27c>
 8014a24:	f898 3000 	ldrb.w	r3, [r8]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	f000 80f0 	beq.w	8014c0e <rcl_node_init+0x25e>
 8014a2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8014a30:	f000 80b0 	beq.w	8014b94 <rcl_node_init+0x1e4>
 8014a34:	4b85      	ldr	r3, [pc, #532]	@ (8014c4c <rcl_node_init+0x29c>)
 8014a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a3a:	9302      	str	r3, [sp, #8]
 8014a3c:	692b      	ldr	r3, [r5, #16]
 8014a3e:	9300      	str	r3, [sp, #0]
 8014a40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014a44:	9301      	str	r3, [sp, #4]
 8014a46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014a4a:	f002 fccf 	bl	80173ec <rcutils_format_string_limit>
 8014a4e:	4680      	mov	r8, r0
 8014a50:	f1b8 0f00 	cmp.w	r8, #0
 8014a54:	f000 80e8 	beq.w	8014c28 <rcl_node_init+0x278>
 8014a58:	2200      	movs	r2, #0
 8014a5a:	a924      	add	r1, sp, #144	@ 0x90
 8014a5c:	4640      	mov	r0, r8
 8014a5e:	9224      	str	r2, [sp, #144]	@ 0x90
 8014a60:	f003 f8e6 	bl	8017c30 <rmw_validate_namespace>
 8014a64:	4606      	mov	r6, r0
 8014a66:	2800      	cmp	r0, #0
 8014a68:	f040 80a4 	bne.w	8014bb4 <rcl_node_init+0x204>
 8014a6c:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8014a6e:	2800      	cmp	r0, #0
 8014a70:	f040 809d 	bne.w	8014bae <rcl_node_init+0x1fe>
 8014a74:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8014a78:	2178      	movs	r1, #120	@ 0x78
 8014a7a:	2001      	movs	r0, #1
 8014a7c:	4798      	blx	r3
 8014a7e:	4606      	mov	r6, r0
 8014a80:	6060      	str	r0, [r4, #4]
 8014a82:	2800      	cmp	r0, #0
 8014a84:	f000 80d6 	beq.w	8014c34 <rcl_node_init+0x284>
 8014a88:	a80a      	add	r0, sp, #40	@ 0x28
 8014a8a:	f000 f92f 	bl	8014cec <rcl_node_get_default_options>
 8014a8e:	a90a      	add	r1, sp, #40	@ 0x28
 8014a90:	4630      	mov	r0, r6
 8014a92:	2268      	movs	r2, #104	@ 0x68
 8014a94:	f007 fbe3 	bl	801c25e <memcpy>
 8014a98:	6861      	ldr	r1, [r4, #4]
 8014a9a:	6027      	str	r7, [r4, #0]
 8014a9c:	4628      	mov	r0, r5
 8014a9e:	f000 f933 	bl	8014d08 <rcl_node_options_copy>
 8014aa2:	4606      	mov	r6, r0
 8014aa4:	2800      	cmp	r0, #0
 8014aa6:	f040 8085 	bne.w	8014bb4 <rcl_node_init+0x204>
 8014aaa:	4640      	mov	r0, r8
 8014aac:	f7eb fc10 	bl	80002d0 <strlen>
 8014ab0:	eb08 0300 	add.w	r3, r8, r0
 8014ab4:	6866      	ldr	r6, [r4, #4]
 8014ab6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014aba:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8014abe:	2b2f      	cmp	r3, #47	@ 0x2f
 8014ac0:	bf0c      	ite	eq
 8014ac2:	4b63      	ldreq	r3, [pc, #396]	@ (8014c50 <rcl_node_init+0x2a0>)
 8014ac4:	4b63      	ldrne	r3, [pc, #396]	@ (8014c54 <rcl_node_init+0x2a4>)
 8014ac6:	9302      	str	r3, [sp, #8]
 8014ac8:	692b      	ldr	r3, [r5, #16]
 8014aca:	9300      	str	r3, [sp, #0]
 8014acc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014ad0:	9301      	str	r3, [sp, #4]
 8014ad2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8014ad6:	f002 fc89 	bl	80173ec <rcutils_format_string_limit>
 8014ada:	6863      	ldr	r3, [r4, #4]
 8014adc:	6770      	str	r0, [r6, #116]	@ 0x74
 8014ade:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8014ae0:	2a00      	cmp	r2, #0
 8014ae2:	f000 80a9 	beq.w	8014c38 <rcl_node_init+0x288>
 8014ae6:	6822      	ldr	r2, [r4, #0]
 8014ae8:	9307      	str	r3, [sp, #28]
 8014aea:	6810      	ldr	r0, [r2, #0]
 8014aec:	4649      	mov	r1, r9
 8014aee:	3028      	adds	r0, #40	@ 0x28
 8014af0:	4642      	mov	r2, r8
 8014af2:	f003 fce7 	bl	80184c4 <rmw_create_node>
 8014af6:	9b07      	ldr	r3, [sp, #28]
 8014af8:	6698      	str	r0, [r3, #104]	@ 0x68
 8014afa:	6863      	ldr	r3, [r4, #4]
 8014afc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014afe:	2800      	cmp	r0, #0
 8014b00:	f000 809d 	beq.w	8014c3e <rcl_node_init+0x28e>
 8014b04:	f003 fd70 	bl	80185e8 <rmw_node_get_graph_guard_condition>
 8014b08:	4681      	mov	r9, r0
 8014b0a:	2800      	cmp	r0, #0
 8014b0c:	f000 809c 	beq.w	8014c48 <rcl_node_init+0x298>
 8014b10:	682b      	ldr	r3, [r5, #0]
 8014b12:	6929      	ldr	r1, [r5, #16]
 8014b14:	6866      	ldr	r6, [r4, #4]
 8014b16:	2008      	movs	r0, #8
 8014b18:	4798      	blx	r3
 8014b1a:	6863      	ldr	r3, [r4, #4]
 8014b1c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8014b1e:	f8d3 a06c 	ldr.w	sl, [r3, #108]	@ 0x6c
 8014b22:	f1ba 0f00 	cmp.w	sl, #0
 8014b26:	f000 808d 	beq.w	8014c44 <rcl_node_init+0x294>
 8014b2a:	f10d 0b20 	add.w	fp, sp, #32
 8014b2e:	4658      	mov	r0, fp
 8014b30:	f006 f96a 	bl	801ae08 <rcl_get_zero_initialized_guard_condition>
 8014b34:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8014b38:	6863      	ldr	r3, [r4, #4]
 8014b3a:	46ac      	mov	ip, r5
 8014b3c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014b40:	e88a 0003 	stmia.w	sl, {r0, r1}
 8014b44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b48:	ae25      	add	r6, sp, #148	@ 0x94
 8014b4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014b4c:	f8dc 3000 	ldr.w	r3, [ip]
 8014b50:	6033      	str	r3, [r6, #0]
 8014b52:	ab2a      	add	r3, sp, #168	@ 0xa8
 8014b54:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014b58:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014b5c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8014b5e:	463a      	mov	r2, r7
 8014b60:	4649      	mov	r1, r9
 8014b62:	4670      	mov	r0, lr
 8014b64:	f006 f9a6 	bl	801aeb4 <rcl_guard_condition_init_from_rmw>
 8014b68:	4606      	mov	r6, r0
 8014b6a:	bb18      	cbnz	r0, 8014bb4 <rcl_node_init+0x204>
 8014b6c:	686b      	ldr	r3, [r5, #4]
 8014b6e:	6929      	ldr	r1, [r5, #16]
 8014b70:	4798      	blx	r3
 8014b72:	686b      	ldr	r3, [r5, #4]
 8014b74:	6929      	ldr	r1, [r5, #16]
 8014b76:	4640      	mov	r0, r8
 8014b78:	4798      	blx	r3
 8014b7a:	e000      	b.n	8014b7e <rcl_node_init+0x1ce>
 8014b7c:	260b      	movs	r6, #11
 8014b7e:	4630      	mov	r0, r6
 8014b80:	b02b      	add	sp, #172	@ 0xac
 8014b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b86:	2665      	movs	r6, #101	@ 0x65
 8014b88:	e7f9      	b.n	8014b7e <rcl_node_init+0x1ce>
 8014b8a:	2664      	movs	r6, #100	@ 0x64
 8014b8c:	4630      	mov	r0, r6
 8014b8e:	b02b      	add	sp, #172	@ 0xac
 8014b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b94:	f105 030c 	add.w	r3, r5, #12
 8014b98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014b9c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014ba0:	4640      	mov	r0, r8
 8014ba2:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8014ba6:	f002 fd3f 	bl	8017628 <rcutils_strdup>
 8014baa:	4680      	mov	r8, r0
 8014bac:	e750      	b.n	8014a50 <rcl_node_init+0xa0>
 8014bae:	f003 f851 	bl	8017c54 <rmw_namespace_validation_result_string>
 8014bb2:	26ca      	movs	r6, #202	@ 0xca
 8014bb4:	6863      	ldr	r3, [r4, #4]
 8014bb6:	b1f3      	cbz	r3, 8014bf6 <rcl_node_init+0x246>
 8014bb8:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014bba:	b138      	cbz	r0, 8014bcc <rcl_node_init+0x21c>
 8014bbc:	f006 f9da 	bl	801af74 <rcl_guard_condition_fini>
 8014bc0:	6863      	ldr	r3, [r4, #4]
 8014bc2:	6929      	ldr	r1, [r5, #16]
 8014bc4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014bc6:	686b      	ldr	r3, [r5, #4]
 8014bc8:	4798      	blx	r3
 8014bca:	6863      	ldr	r3, [r4, #4]
 8014bcc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014bce:	b110      	cbz	r0, 8014bd6 <rcl_node_init+0x226>
 8014bd0:	f003 fc8e 	bl	80184f0 <rmw_destroy_node>
 8014bd4:	6863      	ldr	r3, [r4, #4]
 8014bd6:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8014bd8:	6929      	ldr	r1, [r5, #16]
 8014bda:	686b      	ldr	r3, [r5, #4]
 8014bdc:	4798      	blx	r3
 8014bde:	6863      	ldr	r3, [r4, #4]
 8014be0:	6929      	ldr	r1, [r5, #16]
 8014be2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014be4:	686b      	ldr	r3, [r5, #4]
 8014be6:	4798      	blx	r3
 8014be8:	6860      	ldr	r0, [r4, #4]
 8014bea:	f000 f8ab 	bl	8014d44 <rcl_node_options_fini>
 8014bee:	686b      	ldr	r3, [r5, #4]
 8014bf0:	6929      	ldr	r1, [r5, #16]
 8014bf2:	6860      	ldr	r0, [r4, #4]
 8014bf4:	4798      	blx	r3
 8014bf6:	686b      	ldr	r3, [r5, #4]
 8014bf8:	6929      	ldr	r1, [r5, #16]
 8014bfa:	2000      	movs	r0, #0
 8014bfc:	4798      	blx	r3
 8014bfe:	686b      	ldr	r3, [r5, #4]
 8014c00:	6929      	ldr	r1, [r5, #16]
 8014c02:	4640      	mov	r0, r8
 8014c04:	4798      	blx	r3
 8014c06:	2300      	movs	r3, #0
 8014c08:	e9c4 3300 	strd	r3, r3, [r4]
 8014c0c:	e7b7      	b.n	8014b7e <rcl_node_init+0x1ce>
 8014c0e:	f105 030c 	add.w	r3, r5, #12
 8014c12:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014c16:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014c1a:	480f      	ldr	r0, [pc, #60]	@ (8014c58 <rcl_node_init+0x2a8>)
 8014c1c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8014c20:	f002 fd02 	bl	8017628 <rcutils_strdup>
 8014c24:	4680      	mov	r8, r0
 8014c26:	e713      	b.n	8014a50 <rcl_node_init+0xa0>
 8014c28:	260a      	movs	r6, #10
 8014c2a:	e7a8      	b.n	8014b7e <rcl_node_init+0x1ce>
 8014c2c:	f003 f86a 	bl	8017d04 <rmw_node_name_validation_result_string>
 8014c30:	26c9      	movs	r6, #201	@ 0xc9
 8014c32:	e7a4      	b.n	8014b7e <rcl_node_init+0x1ce>
 8014c34:	260a      	movs	r6, #10
 8014c36:	e7de      	b.n	8014bf6 <rcl_node_init+0x246>
 8014c38:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014c3a:	260a      	movs	r6, #10
 8014c3c:	e7bd      	b.n	8014bba <rcl_node_init+0x20a>
 8014c3e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014c40:	2601      	movs	r6, #1
 8014c42:	e7ba      	b.n	8014bba <rcl_node_init+0x20a>
 8014c44:	260a      	movs	r6, #10
 8014c46:	e7c1      	b.n	8014bcc <rcl_node_init+0x21c>
 8014c48:	2601      	movs	r6, #1
 8014c4a:	e7b3      	b.n	8014bb4 <rcl_node_init+0x204>
 8014c4c:	0801daec 	.word	0x0801daec
 8014c50:	0801d2d4 	.word	0x0801d2d4
 8014c54:	0801daf0 	.word	0x0801daf0
 8014c58:	0801dae8 	.word	0x0801dae8

08014c5c <rcl_node_is_valid>:
 8014c5c:	b130      	cbz	r0, 8014c6c <rcl_node_is_valid+0x10>
 8014c5e:	6843      	ldr	r3, [r0, #4]
 8014c60:	b123      	cbz	r3, 8014c6c <rcl_node_is_valid+0x10>
 8014c62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014c64:	b113      	cbz	r3, 8014c6c <rcl_node_is_valid+0x10>
 8014c66:	6800      	ldr	r0, [r0, #0]
 8014c68:	f7ff bc4a 	b.w	8014500 <rcl_context_is_valid>
 8014c6c:	2000      	movs	r0, #0
 8014c6e:	4770      	bx	lr

08014c70 <rcl_node_get_name>:
 8014c70:	b120      	cbz	r0, 8014c7c <rcl_node_get_name+0xc>
 8014c72:	6840      	ldr	r0, [r0, #4]
 8014c74:	b110      	cbz	r0, 8014c7c <rcl_node_get_name+0xc>
 8014c76:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014c78:	b100      	cbz	r0, 8014c7c <rcl_node_get_name+0xc>
 8014c7a:	6880      	ldr	r0, [r0, #8]
 8014c7c:	4770      	bx	lr
 8014c7e:	bf00      	nop

08014c80 <rcl_node_get_namespace>:
 8014c80:	b120      	cbz	r0, 8014c8c <rcl_node_get_namespace+0xc>
 8014c82:	6840      	ldr	r0, [r0, #4]
 8014c84:	b110      	cbz	r0, 8014c8c <rcl_node_get_namespace+0xc>
 8014c86:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014c88:	b100      	cbz	r0, 8014c8c <rcl_node_get_namespace+0xc>
 8014c8a:	68c0      	ldr	r0, [r0, #12]
 8014c8c:	4770      	bx	lr
 8014c8e:	bf00      	nop

08014c90 <rcl_node_get_options>:
 8014c90:	b128      	cbz	r0, 8014c9e <rcl_node_get_options+0xe>
 8014c92:	6840      	ldr	r0, [r0, #4]
 8014c94:	b118      	cbz	r0, 8014c9e <rcl_node_get_options+0xe>
 8014c96:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	bf08      	it	eq
 8014c9c:	2000      	moveq	r0, #0
 8014c9e:	4770      	bx	lr

08014ca0 <rcl_node_get_rmw_handle>:
 8014ca0:	b110      	cbz	r0, 8014ca8 <rcl_node_get_rmw_handle+0x8>
 8014ca2:	6840      	ldr	r0, [r0, #4]
 8014ca4:	b100      	cbz	r0, 8014ca8 <rcl_node_get_rmw_handle+0x8>
 8014ca6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014ca8:	4770      	bx	lr
 8014caa:	bf00      	nop

08014cac <rcl_get_disable_loaned_message>:
 8014cac:	b510      	push	{r4, lr}
 8014cae:	b082      	sub	sp, #8
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	9301      	str	r3, [sp, #4]
 8014cb4:	b1a0      	cbz	r0, 8014ce0 <rcl_get_disable_loaned_message+0x34>
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	a901      	add	r1, sp, #4
 8014cba:	480b      	ldr	r0, [pc, #44]	@ (8014ce8 <rcl_get_disable_loaned_message+0x3c>)
 8014cbc:	f002 fb7e 	bl	80173bc <rcutils_get_env>
 8014cc0:	b110      	cbz	r0, 8014cc8 <rcl_get_disable_loaned_message+0x1c>
 8014cc2:	2001      	movs	r0, #1
 8014cc4:	b002      	add	sp, #8
 8014cc6:	bd10      	pop	{r4, pc}
 8014cc8:	9a01      	ldr	r2, [sp, #4]
 8014cca:	7813      	ldrb	r3, [r2, #0]
 8014ccc:	3b31      	subs	r3, #49	@ 0x31
 8014cce:	bf08      	it	eq
 8014cd0:	7853      	ldrbeq	r3, [r2, #1]
 8014cd2:	fab3 f383 	clz	r3, r3
 8014cd6:	095b      	lsrs	r3, r3, #5
 8014cd8:	2000      	movs	r0, #0
 8014cda:	7023      	strb	r3, [r4, #0]
 8014cdc:	b002      	add	sp, #8
 8014cde:	bd10      	pop	{r4, pc}
 8014ce0:	200b      	movs	r0, #11
 8014ce2:	b002      	add	sp, #8
 8014ce4:	bd10      	pop	{r4, pc}
 8014ce6:	bf00      	nop
 8014ce8:	0801daf8 	.word	0x0801daf8

08014cec <rcl_node_get_default_options>:
 8014cec:	b510      	push	{r4, lr}
 8014cee:	2253      	movs	r2, #83	@ 0x53
 8014cf0:	4604      	mov	r4, r0
 8014cf2:	2100      	movs	r1, #0
 8014cf4:	3015      	adds	r0, #21
 8014cf6:	f007 f9d7 	bl	801c0a8 <memset>
 8014cfa:	4620      	mov	r0, r4
 8014cfc:	f7f6 ff88 	bl	800bc10 <rcutils_get_default_allocator>
 8014d00:	2301      	movs	r3, #1
 8014d02:	7523      	strb	r3, [r4, #20]
 8014d04:	4620      	mov	r0, r4
 8014d06:	bd10      	pop	{r4, pc}

08014d08 <rcl_node_options_copy>:
 8014d08:	b1d0      	cbz	r0, 8014d40 <rcl_node_options_copy+0x38>
 8014d0a:	b570      	push	{r4, r5, r6, lr}
 8014d0c:	460c      	mov	r4, r1
 8014d0e:	b1a9      	cbz	r1, 8014d3c <rcl_node_options_copy+0x34>
 8014d10:	4288      	cmp	r0, r1
 8014d12:	4684      	mov	ip, r0
 8014d14:	d012      	beq.n	8014d3c <rcl_node_options_copy+0x34>
 8014d16:	4605      	mov	r5, r0
 8014d18:	8a86      	ldrh	r6, [r0, #20]
 8014d1a:	468e      	mov	lr, r1
 8014d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d22:	682b      	ldr	r3, [r5, #0]
 8014d24:	f8ce 3000 	str.w	r3, [lr]
 8014d28:	f10c 0118 	add.w	r1, ip, #24
 8014d2c:	2250      	movs	r2, #80	@ 0x50
 8014d2e:	82a6      	strh	r6, [r4, #20]
 8014d30:	f104 0018 	add.w	r0, r4, #24
 8014d34:	f007 fa93 	bl	801c25e <memcpy>
 8014d38:	2000      	movs	r0, #0
 8014d3a:	bd70      	pop	{r4, r5, r6, pc}
 8014d3c:	200b      	movs	r0, #11
 8014d3e:	bd70      	pop	{r4, r5, r6, pc}
 8014d40:	200b      	movs	r0, #11
 8014d42:	4770      	bx	lr

08014d44 <rcl_node_options_fini>:
 8014d44:	b1c0      	cbz	r0, 8014d78 <rcl_node_options_fini+0x34>
 8014d46:	b500      	push	{lr}
 8014d48:	4684      	mov	ip, r0
 8014d4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d4e:	b087      	sub	sp, #28
 8014d50:	f10d 0e04 	add.w	lr, sp, #4
 8014d54:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d58:	f8dc 3000 	ldr.w	r3, [ip]
 8014d5c:	f8ce 3000 	str.w	r3, [lr]
 8014d60:	a801      	add	r0, sp, #4
 8014d62:	f7f6 ff81 	bl	800bc68 <rcutils_allocator_is_valid>
 8014d66:	b118      	cbz	r0, 8014d70 <rcl_node_options_fini+0x2c>
 8014d68:	2000      	movs	r0, #0
 8014d6a:	b007      	add	sp, #28
 8014d6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d70:	200b      	movs	r0, #11
 8014d72:	b007      	add	sp, #28
 8014d74:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d78:	200b      	movs	r0, #11
 8014d7a:	4770      	bx	lr

08014d7c <rcl_node_resolve_name>:
 8014d7c:	b082      	sub	sp, #8
 8014d7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d82:	b091      	sub	sp, #68	@ 0x44
 8014d84:	ac1a      	add	r4, sp, #104	@ 0x68
 8014d86:	e884 000c 	stmia.w	r4, {r2, r3}
 8014d8a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014d8e:	2800      	cmp	r0, #0
 8014d90:	d03a      	beq.n	8014e08 <rcl_node_resolve_name+0x8c>
 8014d92:	460c      	mov	r4, r1
 8014d94:	4605      	mov	r5, r0
 8014d96:	f7ff ff7b 	bl	8014c90 <rcl_node_get_options>
 8014d9a:	b370      	cbz	r0, 8014dfa <rcl_node_resolve_name+0x7e>
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	f7ff ff67 	bl	8014c70 <rcl_node_get_name>
 8014da2:	4681      	mov	r9, r0
 8014da4:	4628      	mov	r0, r5
 8014da6:	f7ff ff6b 	bl	8014c80 <rcl_node_get_namespace>
 8014daa:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014dae:	4607      	mov	r7, r0
 8014db0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014db4:	ad0b      	add	r5, sp, #44	@ 0x2c
 8014db6:	46ac      	mov	ip, r5
 8014db8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014dbc:	f8de 3000 	ldr.w	r3, [lr]
 8014dc0:	f8cc 3000 	str.w	r3, [ip]
 8014dc4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014dc6:	b1fb      	cbz	r3, 8014e08 <rcl_node_resolve_name+0x8c>
 8014dc8:	468a      	mov	sl, r1
 8014dca:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8014dce:	f002 fc8b 	bl	80176e8 <rcutils_get_zero_initialized_string_map>
 8014dd2:	ab10      	add	r3, sp, #64	@ 0x40
 8014dd4:	9008      	str	r0, [sp, #32]
 8014dd6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014dda:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014dde:	2100      	movs	r1, #0
 8014de0:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014de4:	a808      	add	r0, sp, #32
 8014de6:	f002 fcd9 	bl	801779c <rcutils_string_map_init>
 8014dea:	4606      	mov	r6, r0
 8014dec:	b170      	cbz	r0, 8014e0c <rcl_node_resolve_name+0x90>
 8014dee:	f7f6 ff4f 	bl	800bc90 <rcutils_get_error_string>
 8014df2:	f7f6 ff65 	bl	800bcc0 <rcutils_reset_error>
 8014df6:	2e0a      	cmp	r6, #10
 8014df8:	d000      	beq.n	8014dfc <rcl_node_resolve_name+0x80>
 8014dfa:	2601      	movs	r6, #1
 8014dfc:	4630      	mov	r0, r6
 8014dfe:	b011      	add	sp, #68	@ 0x44
 8014e00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e04:	b002      	add	sp, #8
 8014e06:	4770      	bx	lr
 8014e08:	260b      	movs	r6, #11
 8014e0a:	e7f7      	b.n	8014dfc <rcl_node_resolve_name+0x80>
 8014e0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8014e0e:	9007      	str	r0, [sp, #28]
 8014e10:	a808      	add	r0, sp, #32
 8014e12:	f005 fff3 	bl	801adfc <rcl_get_default_topic_name_substitutions>
 8014e16:	4606      	mov	r6, r0
 8014e18:	b1b0      	cbz	r0, 8014e48 <rcl_node_resolve_name+0xcc>
 8014e1a:	280a      	cmp	r0, #10
 8014e1c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8014e20:	d000      	beq.n	8014e24 <rcl_node_resolve_name+0xa8>
 8014e22:	2601      	movs	r6, #1
 8014e24:	a808      	add	r0, sp, #32
 8014e26:	f002 fcf7 	bl	8017818 <rcutils_string_map_fini>
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	d132      	bne.n	8014e94 <rcl_node_resolve_name+0x118>
 8014e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014e30:	4659      	mov	r1, fp
 8014e32:	47d0      	blx	sl
 8014e34:	4659      	mov	r1, fp
 8014e36:	4648      	mov	r0, r9
 8014e38:	47d0      	blx	sl
 8014e3a:	f1b8 0f00 	cmp.w	r8, #0
 8014e3e:	d0dd      	beq.n	8014dfc <rcl_node_resolve_name+0x80>
 8014e40:	2e67      	cmp	r6, #103	@ 0x67
 8014e42:	bf08      	it	eq
 8014e44:	2668      	moveq	r6, #104	@ 0x68
 8014e46:	e7d9      	b.n	8014dfc <rcl_node_resolve_name+0x80>
 8014e48:	ab09      	add	r3, sp, #36	@ 0x24
 8014e4a:	9305      	str	r3, [sp, #20]
 8014e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e4e:	46ec      	mov	ip, sp
 8014e50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e54:	682b      	ldr	r3, [r5, #0]
 8014e56:	f8cc 3000 	str.w	r3, [ip]
 8014e5a:	463a      	mov	r2, r7
 8014e5c:	4649      	mov	r1, r9
 8014e5e:	4620      	mov	r0, r4
 8014e60:	ab08      	add	r3, sp, #32
 8014e62:	f005 fe65 	bl	801ab30 <rcl_expand_topic_name>
 8014e66:	4606      	mov	r6, r0
 8014e68:	b9c8      	cbnz	r0, 8014e9e <rcl_node_resolve_name+0x122>
 8014e6a:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8014e6e:	9009      	str	r0, [sp, #36]	@ 0x24
 8014e70:	4602      	mov	r2, r0
 8014e72:	a90a      	add	r1, sp, #40	@ 0x28
 8014e74:	4648      	mov	r0, r9
 8014e76:	f002 fe23 	bl	8017ac0 <rmw_validate_full_topic_name>
 8014e7a:	b998      	cbnz	r0, 8014ea4 <rcl_node_resolve_name+0x128>
 8014e7c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014e7e:	bb14      	cbnz	r4, 8014ec6 <rcl_node_resolve_name+0x14a>
 8014e80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014e82:	a808      	add	r0, sp, #32
 8014e84:	f8c3 9000 	str.w	r9, [r3]
 8014e88:	f002 fcc6 	bl	8017818 <rcutils_string_map_fini>
 8014e8c:	4606      	mov	r6, r0
 8014e8e:	b978      	cbnz	r0, 8014eb0 <rcl_node_resolve_name+0x134>
 8014e90:	4681      	mov	r9, r0
 8014e92:	e7cc      	b.n	8014e2e <rcl_node_resolve_name+0xb2>
 8014e94:	f7f6 fefc 	bl	800bc90 <rcutils_get_error_string>
 8014e98:	f7f6 ff12 	bl	800bcc0 <rcutils_reset_error>
 8014e9c:	e7c7      	b.n	8014e2e <rcl_node_resolve_name+0xb2>
 8014e9e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8014ea2:	e7bf      	b.n	8014e24 <rcl_node_resolve_name+0xa8>
 8014ea4:	f7f6 fef4 	bl	800bc90 <rcutils_get_error_string>
 8014ea8:	2601      	movs	r6, #1
 8014eaa:	f7f6 ff09 	bl	800bcc0 <rcutils_reset_error>
 8014eae:	e7b9      	b.n	8014e24 <rcl_node_resolve_name+0xa8>
 8014eb0:	f7f6 feee 	bl	800bc90 <rcutils_get_error_string>
 8014eb4:	f7f6 ff04 	bl	800bcc0 <rcutils_reset_error>
 8014eb8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014eba:	4659      	mov	r1, fp
 8014ebc:	47d0      	blx	sl
 8014ebe:	4659      	mov	r1, fp
 8014ec0:	4620      	mov	r0, r4
 8014ec2:	47d0      	blx	sl
 8014ec4:	e799      	b.n	8014dfa <rcl_node_resolve_name+0x7e>
 8014ec6:	2667      	movs	r6, #103	@ 0x67
 8014ec8:	e7ac      	b.n	8014e24 <rcl_node_resolve_name+0xa8>
 8014eca:	bf00      	nop

08014ecc <rcl_service_get_rmw_handle>:
 8014ecc:	b118      	cbz	r0, 8014ed6 <rcl_service_get_rmw_handle+0xa>
 8014ece:	6800      	ldr	r0, [r0, #0]
 8014ed0:	b108      	cbz	r0, 8014ed6 <rcl_service_get_rmw_handle+0xa>
 8014ed2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014ed6:	4770      	bx	lr

08014ed8 <rcl_take_request>:
 8014ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eda:	468e      	mov	lr, r1
 8014edc:	460c      	mov	r4, r1
 8014ede:	4617      	mov	r7, r2
 8014ee0:	4605      	mov	r5, r0
 8014ee2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ee6:	b091      	sub	sp, #68	@ 0x44
 8014ee8:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8014eec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ef0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014ef4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014ef8:	b30d      	cbz	r5, 8014f3e <rcl_take_request+0x66>
 8014efa:	682b      	ldr	r3, [r5, #0]
 8014efc:	b1fb      	cbz	r3, 8014f3e <rcl_take_request+0x66>
 8014efe:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014f02:	b1e0      	cbz	r0, 8014f3e <rcl_take_request+0x66>
 8014f04:	b397      	cbz	r7, 8014f6c <rcl_take_request+0x94>
 8014f06:	2300      	movs	r3, #0
 8014f08:	f88d 3017 	strb.w	r3, [sp, #23]
 8014f0c:	463a      	mov	r2, r7
 8014f0e:	f10d 0317 	add.w	r3, sp, #23
 8014f12:	a906      	add	r1, sp, #24
 8014f14:	f003 fbb6 	bl	8018684 <rmw_take_request>
 8014f18:	4606      	mov	r6, r0
 8014f1a:	b198      	cbz	r0, 8014f44 <rcl_take_request+0x6c>
 8014f1c:	280a      	cmp	r0, #10
 8014f1e:	bf18      	it	ne
 8014f20:	2601      	movne	r6, #1
 8014f22:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8014f26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014f2a:	46a6      	mov	lr, r4
 8014f2c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014f30:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8014f34:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014f38:	4630      	mov	r0, r6
 8014f3a:	b011      	add	sp, #68	@ 0x44
 8014f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f3e:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8014f42:	e7ee      	b.n	8014f22 <rcl_take_request+0x4a>
 8014f44:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8014f48:	b193      	cbz	r3, 8014f70 <rcl_take_request+0x98>
 8014f4a:	682b      	ldr	r3, [r5, #0]
 8014f4c:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
 8014f50:	2800      	cmp	r0, #0
 8014f52:	d0e6      	beq.n	8014f22 <rcl_take_request+0x4a>
 8014f54:	463a      	mov	r2, r7
 8014f56:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	@ 0x38
 8014f5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8014f5c:	e9cd 6700 	strd	r6, r7, [sp]
 8014f60:	9302      	str	r3, [sp, #8]
 8014f62:	2101      	movs	r1, #1
 8014f64:	f000 f844 	bl	8014ff0 <rcl_send_service_event_message>
 8014f68:	4606      	mov	r6, r0
 8014f6a:	e7da      	b.n	8014f22 <rcl_take_request+0x4a>
 8014f6c:	260b      	movs	r6, #11
 8014f6e:	e7d8      	b.n	8014f22 <rcl_take_request+0x4a>
 8014f70:	f240 2659 	movw	r6, #601	@ 0x259
 8014f74:	e7d5      	b.n	8014f22 <rcl_take_request+0x4a>
 8014f76:	bf00      	nop

08014f78 <rcl_send_response>:
 8014f78:	b350      	cbz	r0, 8014fd0 <rcl_send_response+0x58>
 8014f7a:	b570      	push	{r4, r5, r6, lr}
 8014f7c:	6803      	ldr	r3, [r0, #0]
 8014f7e:	b084      	sub	sp, #16
 8014f80:	4604      	mov	r4, r0
 8014f82:	b1cb      	cbz	r3, 8014fb8 <rcl_send_response+0x40>
 8014f84:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014f88:	b1b0      	cbz	r0, 8014fb8 <rcl_send_response+0x40>
 8014f8a:	460e      	mov	r6, r1
 8014f8c:	b1e9      	cbz	r1, 8014fca <rcl_send_response+0x52>
 8014f8e:	4615      	mov	r5, r2
 8014f90:	b1da      	cbz	r2, 8014fca <rcl_send_response+0x52>
 8014f92:	f003 fbd5 	bl	8018740 <rmw_send_response>
 8014f96:	b998      	cbnz	r0, 8014fc0 <rcl_send_response+0x48>
 8014f98:	6823      	ldr	r3, [r4, #0]
 8014f9a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8014f9e:	b16b      	cbz	r3, 8014fbc <rcl_send_response+0x44>
 8014fa0:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
 8014fa4:	462a      	mov	r2, r5
 8014fa6:	e9cd 0100 	strd	r0, r1, [sp]
 8014faa:	9602      	str	r6, [sp, #8]
 8014fac:	2102      	movs	r1, #2
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f000 f81e 	bl	8014ff0 <rcl_send_service_event_message>
 8014fb4:	b004      	add	sp, #16
 8014fb6:	bd70      	pop	{r4, r5, r6, pc}
 8014fb8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014fbc:	b004      	add	sp, #16
 8014fbe:	bd70      	pop	{r4, r5, r6, pc}
 8014fc0:	2802      	cmp	r0, #2
 8014fc2:	bf18      	it	ne
 8014fc4:	2001      	movne	r0, #1
 8014fc6:	b004      	add	sp, #16
 8014fc8:	bd70      	pop	{r4, r5, r6, pc}
 8014fca:	200b      	movs	r0, #11
 8014fcc:	b004      	add	sp, #16
 8014fce:	bd70      	pop	{r4, r5, r6, pc}
 8014fd0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014fd4:	4770      	bx	lr
 8014fd6:	bf00      	nop

08014fd8 <rcl_service_is_valid>:
 8014fd8:	b130      	cbz	r0, 8014fe8 <rcl_service_is_valid+0x10>
 8014fda:	6800      	ldr	r0, [r0, #0]
 8014fdc:	b120      	cbz	r0, 8014fe8 <rcl_service_is_valid+0x10>
 8014fde:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014fe2:	3800      	subs	r0, #0
 8014fe4:	bf18      	it	ne
 8014fe6:	2001      	movne	r0, #1
 8014fe8:	4770      	bx	lr
 8014fea:	bf00      	nop
 8014fec:	0000      	movs	r0, r0
	...

08014ff0 <rcl_send_service_event_message>:
 8014ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ff2:	b093      	sub	sp, #76	@ 0x4c
 8014ff4:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8014ff6:	b17a      	cbz	r2, 8015018 <rcl_send_service_event_message+0x28>
 8014ff8:	b176      	cbz	r6, 8015018 <rcl_send_service_event_message+0x28>
 8014ffa:	4604      	mov	r4, r0
 8014ffc:	b150      	cbz	r0, 8015014 <rcl_send_service_event_message+0x24>
 8014ffe:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8015002:	b13b      	cbz	r3, 8015014 <rcl_send_service_event_message+0x24>
 8015004:	68c0      	ldr	r0, [r0, #12]
 8015006:	460f      	mov	r7, r1
 8015008:	4615      	mov	r5, r2
 801500a:	f000 f9bb 	bl	8015384 <rcl_clock_valid>
 801500e:	b108      	cbz	r0, 8015014 <rcl_send_service_event_message+0x24>
 8015010:	7a23      	ldrb	r3, [r4, #8]
 8015012:	b92b      	cbnz	r3, 8015020 <rcl_send_service_event_message+0x30>
 8015014:	2501      	movs	r5, #1
 8015016:	e000      	b.n	801501a <rcl_send_service_event_message+0x2a>
 8015018:	250b      	movs	r5, #11
 801501a:	4628      	mov	r0, r5
 801501c:	b013      	add	sp, #76	@ 0x4c
 801501e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015020:	f104 0e60 	add.w	lr, r4, #96	@ 0x60
 8015024:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015028:	f10d 0c0c 	add.w	ip, sp, #12
 801502c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015030:	f8de 3000 	ldr.w	r3, [lr]
 8015034:	f8cc 3000 	str.w	r3, [ip]
 8015038:	a803      	add	r0, sp, #12
 801503a:	f7f6 fe15 	bl	800bc68 <rcutils_allocator_is_valid>
 801503e:	2800      	cmp	r0, #0
 8015040:	d0ea      	beq.n	8015018 <rcl_send_service_event_message+0x28>
 8015042:	6820      	ldr	r0, [r4, #0]
 8015044:	f7f5 feac 	bl	800ada0 <rcl_publisher_is_valid>
 8015048:	2800      	cmp	r0, #0
 801504a:	d045      	beq.n	80150d8 <rcl_send_service_event_message+0xe8>
 801504c:	4669      	mov	r1, sp
 801504e:	68e0      	ldr	r0, [r4, #12]
 8015050:	f000 fa10 	bl	8015474 <rcl_clock_get_now>
 8015054:	4601      	mov	r1, r0
 8015056:	2800      	cmp	r0, #0
 8015058:	d13b      	bne.n	80150d2 <rcl_send_service_event_message+0xe2>
 801505a:	2220      	movs	r2, #32
 801505c:	eb0d 0002 	add.w	r0, sp, r2
 8015060:	f007 f822 	bl	801c0a8 <memset>
 8015064:	a324      	add	r3, pc, #144	@ (adr r3, 80150f8 <rcl_send_service_event_message+0x108>)
 8015066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801506a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801506e:	f88d 7020 	strb.w	r7, [sp, #32]
 8015072:	f7eb fd2b 	bl	8000acc <__aeabi_ldivmod>
 8015076:	e9cd 0209 	strd	r0, r2, [sp, #36]	@ 0x24
 801507a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	@ 0x60
 801507e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015082:	7a23      	ldrb	r3, [r4, #8]
 8015084:	6830      	ldr	r0, [r6, #0]
 8015086:	6871      	ldr	r1, [r6, #4]
 8015088:	68b2      	ldr	r2, [r6, #8]
 801508a:	2b01      	cmp	r3, #1
 801508c:	68f3      	ldr	r3, [r6, #12]
 801508e:	bf08      	it	eq
 8015090:	2500      	moveq	r5, #0
 8015092:	ae0b      	add	r6, sp, #44	@ 0x2c
 8015094:	2f01      	cmp	r7, #1
 8015096:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015098:	d821      	bhi.n	80150de <rcl_send_service_event_message+0xee>
 801509a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801509e:	462a      	mov	r2, r5
 80150a0:	a808      	add	r0, sp, #32
 80150a2:	699d      	ldr	r5, [r3, #24]
 80150a4:	a903      	add	r1, sp, #12
 80150a6:	2300      	movs	r3, #0
 80150a8:	47a8      	blx	r5
 80150aa:	4606      	mov	r6, r0
 80150ac:	2e00      	cmp	r6, #0
 80150ae:	d0b1      	beq.n	8015014 <rcl_send_service_event_message+0x24>
 80150b0:	4631      	mov	r1, r6
 80150b2:	6820      	ldr	r0, [r4, #0]
 80150b4:	2200      	movs	r2, #0
 80150b6:	f7f5 fe4d 	bl	800ad54 <rcl_publish>
 80150ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80150be:	4605      	mov	r5, r0
 80150c0:	69db      	ldr	r3, [r3, #28]
 80150c2:	a903      	add	r1, sp, #12
 80150c4:	4630      	mov	r0, r6
 80150c6:	4798      	blx	r3
 80150c8:	2d00      	cmp	r5, #0
 80150ca:	d0a6      	beq.n	801501a <rcl_send_service_event_message+0x2a>
 80150cc:	f7f6 fdf8 	bl	800bcc0 <rcutils_reset_error>
 80150d0:	e7a3      	b.n	801501a <rcl_send_service_event_message+0x2a>
 80150d2:	f7f6 fdf5 	bl	800bcc0 <rcutils_reset_error>
 80150d6:	e79d      	b.n	8015014 <rcl_send_service_event_message+0x24>
 80150d8:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80150dc:	e79d      	b.n	801501a <rcl_send_service_event_message+0x2a>
 80150de:	1eb9      	subs	r1, r7, #2
 80150e0:	2901      	cmp	r1, #1
 80150e2:	d8f6      	bhi.n	80150d2 <rcl_send_service_event_message+0xe2>
 80150e4:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80150e8:	462b      	mov	r3, r5
 80150ea:	a808      	add	r0, sp, #32
 80150ec:	6995      	ldr	r5, [r2, #24]
 80150ee:	a903      	add	r1, sp, #12
 80150f0:	2200      	movs	r2, #0
 80150f2:	47a8      	blx	r5
 80150f4:	4606      	mov	r6, r0
 80150f6:	e7d9      	b.n	80150ac <rcl_send_service_event_message+0xbc>
 80150f8:	3b9aca00 	.word	0x3b9aca00
 80150fc:	00000000 	.word	0x00000000

08015100 <rcl_get_zero_initialized_subscription>:
 8015100:	4b01      	ldr	r3, [pc, #4]	@ (8015108 <rcl_get_zero_initialized_subscription+0x8>)
 8015102:	6818      	ldr	r0, [r3, #0]
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop
 8015108:	0801e42c 	.word	0x0801e42c

0801510c <rcl_subscription_init>:
 801510c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015110:	b089      	sub	sp, #36	@ 0x24
 8015112:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8015114:	b1d6      	cbz	r6, 801514c <rcl_subscription_init+0x40>
 8015116:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801511a:	4604      	mov	r4, r0
 801511c:	4648      	mov	r0, r9
 801511e:	460d      	mov	r5, r1
 8015120:	4690      	mov	r8, r2
 8015122:	461f      	mov	r7, r3
 8015124:	f7f6 fda0 	bl	800bc68 <rcutils_allocator_is_valid>
 8015128:	b180      	cbz	r0, 801514c <rcl_subscription_init+0x40>
 801512a:	b17c      	cbz	r4, 801514c <rcl_subscription_init+0x40>
 801512c:	4628      	mov	r0, r5
 801512e:	f7ff fd95 	bl	8014c5c <rcl_node_is_valid>
 8015132:	2800      	cmp	r0, #0
 8015134:	d054      	beq.n	80151e0 <rcl_subscription_init+0xd4>
 8015136:	f1b8 0f00 	cmp.w	r8, #0
 801513a:	d007      	beq.n	801514c <rcl_subscription_init+0x40>
 801513c:	b137      	cbz	r7, 801514c <rcl_subscription_init+0x40>
 801513e:	6823      	ldr	r3, [r4, #0]
 8015140:	b14b      	cbz	r3, 8015156 <rcl_subscription_init+0x4a>
 8015142:	2764      	movs	r7, #100	@ 0x64
 8015144:	4638      	mov	r0, r7
 8015146:	b009      	add	sp, #36	@ 0x24
 8015148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801514c:	270b      	movs	r7, #11
 801514e:	4638      	mov	r0, r7
 8015150:	b009      	add	sp, #36	@ 0x24
 8015152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015156:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801515a:	aa07      	add	r2, sp, #28
 801515c:	9205      	str	r2, [sp, #20]
 801515e:	9307      	str	r3, [sp, #28]
 8015160:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8015164:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015168:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801516c:	4639      	mov	r1, r7
 801516e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015172:	4628      	mov	r0, r5
 8015174:	f7ff fe02 	bl	8014d7c <rcl_node_resolve_name>
 8015178:	4607      	mov	r7, r0
 801517a:	2800      	cmp	r0, #0
 801517c:	d15f      	bne.n	801523e <rcl_subscription_init+0x132>
 801517e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8015182:	21d0      	movs	r1, #208	@ 0xd0
 8015184:	2001      	movs	r0, #1
 8015186:	4798      	blx	r3
 8015188:	6020      	str	r0, [r4, #0]
 801518a:	2800      	cmp	r0, #0
 801518c:	d05d      	beq.n	801524a <rcl_subscription_init+0x13e>
 801518e:	2278      	movs	r2, #120	@ 0x78
 8015190:	4631      	mov	r1, r6
 8015192:	f007 f864 	bl	801c25e <memcpy>
 8015196:	4628      	mov	r0, r5
 8015198:	f7ff fd82 	bl	8014ca0 <rcl_node_get_rmw_handle>
 801519c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80151a0:	9300      	str	r3, [sp, #0]
 80151a2:	9a07      	ldr	r2, [sp, #28]
 80151a4:	6827      	ldr	r7, [r4, #0]
 80151a6:	4641      	mov	r1, r8
 80151a8:	4633      	mov	r3, r6
 80151aa:	f003 fbb1 	bl	8018910 <rmw_create_subscription>
 80151ae:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
 80151b2:	6827      	ldr	r7, [r4, #0]
 80151b4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 80151b8:	b338      	cbz	r0, 801520a <rcl_subscription_init+0xfe>
 80151ba:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80151be:	f003 fc87 	bl	8018ad0 <rmw_subscription_get_actual_qos>
 80151c2:	4607      	mov	r7, r0
 80151c4:	b988      	cbnz	r0, 80151ea <rcl_subscription_init+0xde>
 80151c6:	6823      	ldr	r3, [r4, #0]
 80151c8:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 80151cc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 80151d0:	9807      	ldr	r0, [sp, #28]
 80151d2:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80151d4:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80151d6:	4798      	blx	r3
 80151d8:	4638      	mov	r0, r7
 80151da:	b009      	add	sp, #36	@ 0x24
 80151dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151e0:	27c8      	movs	r7, #200	@ 0xc8
 80151e2:	4638      	mov	r0, r7
 80151e4:	b009      	add	sp, #36	@ 0x24
 80151e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151ea:	6827      	ldr	r7, [r4, #0]
 80151ec:	b32f      	cbz	r7, 801523a <rcl_subscription_init+0x12e>
 80151ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80151f2:	b153      	cbz	r3, 801520a <rcl_subscription_init+0xfe>
 80151f4:	4628      	mov	r0, r5
 80151f6:	f7ff fd53 	bl	8014ca0 <rcl_node_get_rmw_handle>
 80151fa:	6823      	ldr	r3, [r4, #0]
 80151fc:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8015200:	f003 fc74 	bl	8018aec <rmw_destroy_subscription>
 8015204:	6827      	ldr	r7, [r4, #0]
 8015206:	4638      	mov	r0, r7
 8015208:	b197      	cbz	r7, 8015230 <rcl_subscription_init+0x124>
 801520a:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 801520e:	4628      	mov	r0, r5
 8015210:	f7f6 fd2a 	bl	800bc68 <rcutils_allocator_is_valid>
 8015214:	b1e8      	cbz	r0, 8015252 <rcl_subscription_init+0x146>
 8015216:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015218:	b1d8      	cbz	r0, 8015252 <rcl_subscription_init+0x146>
 801521a:	4629      	mov	r1, r5
 801521c:	f002 fb94 	bl	8017948 <rmw_subscription_content_filter_options_fini>
 8015220:	4605      	mov	r5, r0
 8015222:	b9a0      	cbnz	r0, 801524e <rcl_subscription_init+0x142>
 8015224:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015228:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801522a:	4798      	blx	r3
 801522c:	6820      	ldr	r0, [r4, #0]
 801522e:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8015230:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8015232:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8015234:	4798      	blx	r3
 8015236:	2300      	movs	r3, #0
 8015238:	6023      	str	r3, [r4, #0]
 801523a:	2701      	movs	r7, #1
 801523c:	e7c8      	b.n	80151d0 <rcl_subscription_init+0xc4>
 801523e:	2867      	cmp	r0, #103	@ 0x67
 8015240:	d0c6      	beq.n	80151d0 <rcl_subscription_init+0xc4>
 8015242:	2869      	cmp	r0, #105	@ 0x69
 8015244:	d007      	beq.n	8015256 <rcl_subscription_init+0x14a>
 8015246:	280a      	cmp	r0, #10
 8015248:	d1f7      	bne.n	801523a <rcl_subscription_init+0x12e>
 801524a:	270a      	movs	r7, #10
 801524c:	e7c0      	b.n	80151d0 <rcl_subscription_init+0xc4>
 801524e:	f7ff f93d 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 8015252:	6820      	ldr	r0, [r4, #0]
 8015254:	e7ec      	b.n	8015230 <rcl_subscription_init+0x124>
 8015256:	2767      	movs	r7, #103	@ 0x67
 8015258:	e7ba      	b.n	80151d0 <rcl_subscription_init+0xc4>
 801525a:	bf00      	nop

0801525c <rcl_subscription_get_default_options>:
 801525c:	b510      	push	{r4, lr}
 801525e:	4907      	ldr	r1, [pc, #28]	@ (801527c <rcl_subscription_get_default_options+0x20>)
 8015260:	4604      	mov	r4, r0
 8015262:	2250      	movs	r2, #80	@ 0x50
 8015264:	f006 fffb 	bl	801c25e <memcpy>
 8015268:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801526c:	f7f6 fcd0 	bl	800bc10 <rcutils_get_default_allocator>
 8015270:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8015274:	f002 fb82 	bl	801797c <rmw_get_default_subscription_options>
 8015278:	4620      	mov	r0, r4
 801527a:	bd10      	pop	{r4, pc}
 801527c:	0801e430 	.word	0x0801e430

08015280 <rcl_take>:
 8015280:	2800      	cmp	r0, #0
 8015282:	d04b      	beq.n	801531c <rcl_take+0x9c>
 8015284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015288:	4615      	mov	r5, r2
 801528a:	6802      	ldr	r2, [r0, #0]
 801528c:	b0a0      	sub	sp, #128	@ 0x80
 801528e:	4604      	mov	r4, r0
 8015290:	2a00      	cmp	r2, #0
 8015292:	d03b      	beq.n	801530c <rcl_take+0x8c>
 8015294:	461f      	mov	r7, r3
 8015296:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
 801529a:	2b00      	cmp	r3, #0
 801529c:	d036      	beq.n	801530c <rcl_take+0x8c>
 801529e:	460e      	mov	r6, r1
 80152a0:	2900      	cmp	r1, #0
 80152a2:	d039      	beq.n	8015318 <rcl_take+0x98>
 80152a4:	2d00      	cmp	r5, #0
 80152a6:	d03d      	beq.n	8015324 <rcl_take+0xa4>
 80152a8:	a802      	add	r0, sp, #8
 80152aa:	f002 fbf3 	bl	8017a94 <rmw_get_zero_initialized_message_info>
 80152ae:	6823      	ldr	r3, [r4, #0]
 80152b0:	f10d 0c08 	add.w	ip, sp, #8
 80152b4:	f8d3 40c8 	ldr.w	r4, [r3, #200]	@ 0xc8
 80152b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80152bc:	46ae      	mov	lr, r5
 80152be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80152c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80152c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80152ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80152ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80152d2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80152d6:	462b      	mov	r3, r5
 80152d8:	e88e 0003 	stmia.w	lr, {r0, r1}
 80152dc:	f04f 0800 	mov.w	r8, #0
 80152e0:	f10d 0247 	add.w	r2, sp, #71	@ 0x47
 80152e4:	4631      	mov	r1, r6
 80152e6:	4620      	mov	r0, r4
 80152e8:	f88d 8047 	strb.w	r8, [sp, #71]	@ 0x47
 80152ec:	9700      	str	r7, [sp, #0]
 80152ee:	f003 fc5d 	bl	8018bac <rmw_take_with_info>
 80152f2:	4603      	mov	r3, r0
 80152f4:	b9c0      	cbnz	r0, 8015328 <rcl_take+0xa8>
 80152f6:	f89d 1047 	ldrb.w	r1, [sp, #71]	@ 0x47
 80152fa:	f240 1291 	movw	r2, #401	@ 0x191
 80152fe:	2900      	cmp	r1, #0
 8015300:	bf08      	it	eq
 8015302:	4613      	moveq	r3, r2
 8015304:	4618      	mov	r0, r3
 8015306:	b020      	add	sp, #128	@ 0x80
 8015308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801530c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015310:	4618      	mov	r0, r3
 8015312:	b020      	add	sp, #128	@ 0x80
 8015314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015318:	230b      	movs	r3, #11
 801531a:	e7f3      	b.n	8015304 <rcl_take+0x84>
 801531c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015320:	4618      	mov	r0, r3
 8015322:	4770      	bx	lr
 8015324:	ad12      	add	r5, sp, #72	@ 0x48
 8015326:	e7bf      	b.n	80152a8 <rcl_take+0x28>
 8015328:	f7ff f8d0 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 801532c:	4603      	mov	r3, r0
 801532e:	e7e9      	b.n	8015304 <rcl_take+0x84>

08015330 <rcl_subscription_get_rmw_handle>:
 8015330:	b118      	cbz	r0, 801533a <rcl_subscription_get_rmw_handle+0xa>
 8015332:	6800      	ldr	r0, [r0, #0]
 8015334:	b108      	cbz	r0, 801533a <rcl_subscription_get_rmw_handle+0xa>
 8015336:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 801533a:	4770      	bx	lr

0801533c <rcl_subscription_is_valid>:
 801533c:	b130      	cbz	r0, 801534c <rcl_subscription_is_valid+0x10>
 801533e:	6800      	ldr	r0, [r0, #0]
 8015340:	b120      	cbz	r0, 801534c <rcl_subscription_is_valid+0x10>
 8015342:	f8d0 00c8 	ldr.w	r0, [r0, #200]	@ 0xc8
 8015346:	3800      	subs	r0, #0
 8015348:	bf18      	it	ne
 801534a:	2001      	movne	r0, #1
 801534c:	4770      	bx	lr
 801534e:	bf00      	nop

08015350 <rcl_get_system_time>:
 8015350:	4608      	mov	r0, r1
 8015352:	f7f6 bcd1 	b.w	800bcf8 <rcutils_system_time_now>
 8015356:	bf00      	nop

08015358 <rcl_get_steady_time>:
 8015358:	4608      	mov	r0, r1
 801535a:	f7f6 bcf7 	b.w	800bd4c <rcutils_steady_time_now>
 801535e:	bf00      	nop

08015360 <rcl_get_ros_time>:
 8015360:	7a03      	ldrb	r3, [r0, #8]
 8015362:	b510      	push	{r4, lr}
 8015364:	460c      	mov	r4, r1
 8015366:	b143      	cbz	r3, 801537a <rcl_get_ros_time+0x1a>
 8015368:	2105      	movs	r1, #5
 801536a:	f001 ff81 	bl	8017270 <__atomic_load_8>
 801536e:	4602      	mov	r2, r0
 8015370:	460b      	mov	r3, r1
 8015372:	e9c4 2300 	strd	r2, r3, [r4]
 8015376:	2000      	movs	r0, #0
 8015378:	bd10      	pop	{r4, pc}
 801537a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801537e:	4608      	mov	r0, r1
 8015380:	f7f6 bcba 	b.w	800bcf8 <rcutils_system_time_now>

08015384 <rcl_clock_valid>:
 8015384:	b138      	cbz	r0, 8015396 <rcl_clock_valid+0x12>
 8015386:	7803      	ldrb	r3, [r0, #0]
 8015388:	b123      	cbz	r3, 8015394 <rcl_clock_valid+0x10>
 801538a:	68c0      	ldr	r0, [r0, #12]
 801538c:	3800      	subs	r0, #0
 801538e:	bf18      	it	ne
 8015390:	2001      	movne	r0, #1
 8015392:	4770      	bx	lr
 8015394:	4618      	mov	r0, r3
 8015396:	4770      	bx	lr

08015398 <rcl_clock_init>:
 8015398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801539a:	4605      	mov	r5, r0
 801539c:	4610      	mov	r0, r2
 801539e:	4614      	mov	r4, r2
 80153a0:	460e      	mov	r6, r1
 80153a2:	f7f6 fc61 	bl	800bc68 <rcutils_allocator_is_valid>
 80153a6:	b128      	cbz	r0, 80153b4 <rcl_clock_init+0x1c>
 80153a8:	2d03      	cmp	r5, #3
 80153aa:	d803      	bhi.n	80153b4 <rcl_clock_init+0x1c>
 80153ac:	e8df f005 	tbb	[pc, r5]
 80153b0:	044c291a 	.word	0x044c291a
 80153b4:	200b      	movs	r0, #11
 80153b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153b8:	2e00      	cmp	r6, #0
 80153ba:	d0fb      	beq.n	80153b4 <rcl_clock_init+0x1c>
 80153bc:	2c00      	cmp	r4, #0
 80153be:	d0f9      	beq.n	80153b4 <rcl_clock_init+0x1c>
 80153c0:	2300      	movs	r3, #0
 80153c2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80153c6:	f8df c0a4 	ldr.w	ip, [pc, #164]	@ 801546c <rcl_clock_init+0xd4>
 80153ca:	6133      	str	r3, [r6, #16]
 80153cc:	f106 0514 	add.w	r5, r6, #20
 80153d0:	2703      	movs	r7, #3
 80153d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80153d6:	6823      	ldr	r3, [r4, #0]
 80153d8:	602b      	str	r3, [r5, #0]
 80153da:	f8c6 c00c 	str.w	ip, [r6, #12]
 80153de:	7037      	strb	r7, [r6, #0]
 80153e0:	2000      	movs	r0, #0
 80153e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153e4:	2e00      	cmp	r6, #0
 80153e6:	d0e5      	beq.n	80153b4 <rcl_clock_init+0x1c>
 80153e8:	2300      	movs	r3, #0
 80153ea:	7033      	strb	r3, [r6, #0]
 80153ec:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80153f0:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80153f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153f6:	f106 0514 	add.w	r5, r6, #20
 80153fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80153fc:	6823      	ldr	r3, [r4, #0]
 80153fe:	602b      	str	r3, [r5, #0]
 8015400:	e7ee      	b.n	80153e0 <rcl_clock_init+0x48>
 8015402:	2e00      	cmp	r6, #0
 8015404:	d0d6      	beq.n	80153b4 <rcl_clock_init+0x1c>
 8015406:	2c00      	cmp	r4, #0
 8015408:	d0d4      	beq.n	80153b4 <rcl_clock_init+0x1c>
 801540a:	2700      	movs	r7, #0
 801540c:	7037      	strb	r7, [r6, #0]
 801540e:	46a4      	mov	ip, r4
 8015410:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015414:	f106 0514 	add.w	r5, r6, #20
 8015418:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801541c:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8015420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015422:	f8dc 3000 	ldr.w	r3, [ip]
 8015426:	602b      	str	r3, [r5, #0]
 8015428:	6921      	ldr	r1, [r4, #16]
 801542a:	6823      	ldr	r3, [r4, #0]
 801542c:	2010      	movs	r0, #16
 801542e:	4798      	blx	r3
 8015430:	6130      	str	r0, [r6, #16]
 8015432:	b1b8      	cbz	r0, 8015464 <rcl_clock_init+0xcc>
 8015434:	2200      	movs	r2, #0
 8015436:	2300      	movs	r3, #0
 8015438:	e9c0 2300 	strd	r2, r3, [r0]
 801543c:	4a0a      	ldr	r2, [pc, #40]	@ (8015468 <rcl_clock_init+0xd0>)
 801543e:	7207      	strb	r7, [r0, #8]
 8015440:	2301      	movs	r3, #1
 8015442:	60f2      	str	r2, [r6, #12]
 8015444:	7033      	strb	r3, [r6, #0]
 8015446:	e7cb      	b.n	80153e0 <rcl_clock_init+0x48>
 8015448:	2e00      	cmp	r6, #0
 801544a:	d0b3      	beq.n	80153b4 <rcl_clock_init+0x1c>
 801544c:	2c00      	cmp	r4, #0
 801544e:	d0b1      	beq.n	80153b4 <rcl_clock_init+0x1c>
 8015450:	2300      	movs	r3, #0
 8015452:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015456:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8015470 <rcl_clock_init+0xd8>
 801545a:	6133      	str	r3, [r6, #16]
 801545c:	f106 0514 	add.w	r5, r6, #20
 8015460:	2702      	movs	r7, #2
 8015462:	e7b6      	b.n	80153d2 <rcl_clock_init+0x3a>
 8015464:	200a      	movs	r0, #10
 8015466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015468:	08015361 	.word	0x08015361
 801546c:	08015359 	.word	0x08015359
 8015470:	08015351 	.word	0x08015351

08015474 <rcl_clock_get_now>:
 8015474:	b140      	cbz	r0, 8015488 <rcl_clock_get_now+0x14>
 8015476:	b139      	cbz	r1, 8015488 <rcl_clock_get_now+0x14>
 8015478:	7803      	ldrb	r3, [r0, #0]
 801547a:	b11b      	cbz	r3, 8015484 <rcl_clock_get_now+0x10>
 801547c:	68c3      	ldr	r3, [r0, #12]
 801547e:	b10b      	cbz	r3, 8015484 <rcl_clock_get_now+0x10>
 8015480:	6900      	ldr	r0, [r0, #16]
 8015482:	4718      	bx	r3
 8015484:	2001      	movs	r0, #1
 8015486:	4770      	bx	lr
 8015488:	200b      	movs	r0, #11
 801548a:	4770      	bx	lr

0801548c <rcl_is_enabled_ros_time_override>:
 801548c:	b158      	cbz	r0, 80154a6 <rcl_is_enabled_ros_time_override+0x1a>
 801548e:	b151      	cbz	r1, 80154a6 <rcl_is_enabled_ros_time_override+0x1a>
 8015490:	7803      	ldrb	r3, [r0, #0]
 8015492:	2b01      	cmp	r3, #1
 8015494:	d105      	bne.n	80154a2 <rcl_is_enabled_ros_time_override+0x16>
 8015496:	6902      	ldr	r2, [r0, #16]
 8015498:	b11a      	cbz	r2, 80154a2 <rcl_is_enabled_ros_time_override+0x16>
 801549a:	7a13      	ldrb	r3, [r2, #8]
 801549c:	700b      	strb	r3, [r1, #0]
 801549e:	2000      	movs	r0, #0
 80154a0:	4770      	bx	lr
 80154a2:	2001      	movs	r0, #1
 80154a4:	4770      	bx	lr
 80154a6:	200b      	movs	r0, #11
 80154a8:	4770      	bx	lr
 80154aa:	bf00      	nop

080154ac <rcl_clock_add_jump_callback>:
 80154ac:	b082      	sub	sp, #8
 80154ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154b2:	a906      	add	r1, sp, #24
 80154b4:	e881 000c 	stmia.w	r1, {r2, r3}
 80154b8:	e9dd 760c 	ldrd	r7, r6, [sp, #48]	@ 0x30
 80154bc:	b320      	cbz	r0, 8015508 <rcl_clock_add_jump_callback+0x5c>
 80154be:	4605      	mov	r5, r0
 80154c0:	3014      	adds	r0, #20
 80154c2:	f7f6 fbd1 	bl	800bc68 <rcutils_allocator_is_valid>
 80154c6:	b1f8      	cbz	r0, 8015508 <rcl_clock_add_jump_callback+0x5c>
 80154c8:	b1f7      	cbz	r7, 8015508 <rcl_clock_add_jump_callback+0x5c>
 80154ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	db1b      	blt.n	8015508 <rcl_clock_add_jump_callback+0x5c>
 80154d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80154d4:	2a01      	cmp	r2, #1
 80154d6:	f173 0300 	sbcs.w	r3, r3, #0
 80154da:	da15      	bge.n	8015508 <rcl_clock_add_jump_callback+0x5c>
 80154dc:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
 80154e0:	2c00      	cmp	r4, #0
 80154e2:	d042      	beq.n	801556a <rcl_clock_add_jump_callback+0xbe>
 80154e4:	4603      	mov	r3, r0
 80154e6:	2200      	movs	r2, #0
 80154e8:	e003      	b.n	80154f2 <rcl_clock_add_jump_callback+0x46>
 80154ea:	4294      	cmp	r4, r2
 80154ec:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80154f0:	d011      	beq.n	8015516 <rcl_clock_add_jump_callback+0x6a>
 80154f2:	6819      	ldr	r1, [r3, #0]
 80154f4:	42b9      	cmp	r1, r7
 80154f6:	f102 0201 	add.w	r2, r2, #1
 80154fa:	d1f6      	bne.n	80154ea <rcl_clock_add_jump_callback+0x3e>
 80154fc:	6a19      	ldr	r1, [r3, #32]
 80154fe:	42b1      	cmp	r1, r6
 8015500:	d1f3      	bne.n	80154ea <rcl_clock_add_jump_callback+0x3e>
 8015502:	f04f 0e01 	mov.w	lr, #1
 8015506:	e001      	b.n	801550c <rcl_clock_add_jump_callback+0x60>
 8015508:	f04f 0e0b 	mov.w	lr, #11
 801550c:	4670      	mov	r0, lr
 801550e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015512:	b002      	add	sp, #8
 8015514:	4770      	bx	lr
 8015516:	3401      	adds	r4, #1
 8015518:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801551c:	00e1      	lsls	r1, r4, #3
 801551e:	69eb      	ldr	r3, [r5, #28]
 8015520:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015522:	4798      	blx	r3
 8015524:	b1f0      	cbz	r0, 8015564 <rcl_clock_add_jump_callback+0xb8>
 8015526:	68ab      	ldr	r3, [r5, #8]
 8015528:	6068      	str	r0, [r5, #4]
 801552a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801552e:	f10d 0c18 	add.w	ip, sp, #24
 8015532:	f840 7032 	str.w	r7, [r0, r2, lsl #3]
 8015536:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
 801553a:	f103 0801 	add.w	r8, r3, #1
 801553e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015542:	f104 0708 	add.w	r7, r4, #8
 8015546:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015548:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801554c:	f04f 0e00 	mov.w	lr, #0
 8015550:	e887 0003 	stmia.w	r7, {r0, r1}
 8015554:	6226      	str	r6, [r4, #32]
 8015556:	4670      	mov	r0, lr
 8015558:	f8c5 8008 	str.w	r8, [r5, #8]
 801555c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015560:	b002      	add	sp, #8
 8015562:	4770      	bx	lr
 8015564:	f04f 0e0a 	mov.w	lr, #10
 8015568:	e7d0      	b.n	801550c <rcl_clock_add_jump_callback+0x60>
 801556a:	2128      	movs	r1, #40	@ 0x28
 801556c:	e7d7      	b.n	801551e <rcl_clock_add_jump_callback+0x72>
 801556e:	bf00      	nop

08015570 <rcl_clock_remove_jump_callback>:
 8015570:	2800      	cmp	r0, #0
 8015572:	d05a      	beq.n	801562a <rcl_clock_remove_jump_callback+0xba>
 8015574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015578:	4605      	mov	r5, r0
 801557a:	3014      	adds	r0, #20
 801557c:	460f      	mov	r7, r1
 801557e:	4692      	mov	sl, r2
 8015580:	f7f6 fb72 	bl	800bc68 <rcutils_allocator_is_valid>
 8015584:	2800      	cmp	r0, #0
 8015586:	d03f      	beq.n	8015608 <rcl_clock_remove_jump_callback+0x98>
 8015588:	2f00      	cmp	r7, #0
 801558a:	d03d      	beq.n	8015608 <rcl_clock_remove_jump_callback+0x98>
 801558c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8015590:	f1b8 0f00 	cmp.w	r8, #0
 8015594:	d00c      	beq.n	80155b0 <rcl_clock_remove_jump_callback+0x40>
 8015596:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801559a:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 801559e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 80155a2:	464c      	mov	r4, r9
 80155a4:	6823      	ldr	r3, [r4, #0]
 80155a6:	42bb      	cmp	r3, r7
 80155a8:	d005      	beq.n	80155b6 <rcl_clock_remove_jump_callback+0x46>
 80155aa:	3428      	adds	r4, #40	@ 0x28
 80155ac:	42b4      	cmp	r4, r6
 80155ae:	d1f9      	bne.n	80155a4 <rcl_clock_remove_jump_callback+0x34>
 80155b0:	2001      	movs	r0, #1
 80155b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155b6:	6a23      	ldr	r3, [r4, #32]
 80155b8:	3428      	adds	r4, #40	@ 0x28
 80155ba:	42b4      	cmp	r4, r6
 80155bc:	d02c      	beq.n	8015618 <rcl_clock_remove_jump_callback+0xa8>
 80155be:	4553      	cmp	r3, sl
 80155c0:	d1f0      	bne.n	80155a4 <rcl_clock_remove_jump_callback+0x34>
 80155c2:	46a6      	mov	lr, r4
 80155c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80155c8:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80155cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80155d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80155dc:	3428      	adds	r4, #40	@ 0x28
 80155de:	42a6      	cmp	r6, r4
 80155e0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80155e4:	d1ed      	bne.n	80155c2 <rcl_clock_remove_jump_callback+0x52>
 80155e6:	f108 34ff 	add.w	r4, r8, #4294967295
 80155ea:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80155ec:	60ac      	str	r4, [r5, #8]
 80155ee:	b174      	cbz	r4, 801560e <rcl_clock_remove_jump_callback+0x9e>
 80155f0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80155f4:	00e1      	lsls	r1, r4, #3
 80155f6:	69eb      	ldr	r3, [r5, #28]
 80155f8:	4648      	mov	r0, r9
 80155fa:	4798      	blx	r3
 80155fc:	4604      	mov	r4, r0
 80155fe:	b1b0      	cbz	r0, 801562e <rcl_clock_remove_jump_callback+0xbe>
 8015600:	606c      	str	r4, [r5, #4]
 8015602:	2000      	movs	r0, #0
 8015604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015608:	200b      	movs	r0, #11
 801560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801560e:	69ab      	ldr	r3, [r5, #24]
 8015610:	4611      	mov	r1, r2
 8015612:	4648      	mov	r0, r9
 8015614:	4798      	blx	r3
 8015616:	e7f3      	b.n	8015600 <rcl_clock_remove_jump_callback+0x90>
 8015618:	4553      	cmp	r3, sl
 801561a:	d1c9      	bne.n	80155b0 <rcl_clock_remove_jump_callback+0x40>
 801561c:	f108 34ff 	add.w	r4, r8, #4294967295
 8015620:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015622:	60ac      	str	r4, [r5, #8]
 8015624:	2c00      	cmp	r4, #0
 8015626:	d1e3      	bne.n	80155f0 <rcl_clock_remove_jump_callback+0x80>
 8015628:	e7f1      	b.n	801560e <rcl_clock_remove_jump_callback+0x9e>
 801562a:	200b      	movs	r0, #11
 801562c:	4770      	bx	lr
 801562e:	200a      	movs	r0, #10
 8015630:	e7eb      	b.n	801560a <rcl_clock_remove_jump_callback+0x9a>
 8015632:	bf00      	nop

08015634 <_rcl_timer_time_jump>:
 8015634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015638:	4681      	mov	r9, r0
 801563a:	b087      	sub	sp, #28
 801563c:	4614      	mov	r4, r2
 801563e:	b131      	cbz	r1, 801564e <_rcl_timer_time_jump+0x1a>
 8015640:	7803      	ldrb	r3, [r0, #0]
 8015642:	3b02      	subs	r3, #2
 8015644:	2b01      	cmp	r3, #1
 8015646:	d93e      	bls.n	80156c6 <_rcl_timer_time_jump+0x92>
 8015648:	b007      	add	sp, #28
 801564a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801564e:	6810      	ldr	r0, [r2, #0]
 8015650:	a904      	add	r1, sp, #16
 8015652:	f7ff ff0f 	bl	8015474 <rcl_clock_get_now>
 8015656:	2800      	cmp	r0, #0
 8015658:	d1f6      	bne.n	8015648 <_rcl_timer_time_jump+0x14>
 801565a:	f104 0a20 	add.w	sl, r4, #32
 801565e:	2105      	movs	r1, #5
 8015660:	4650      	mov	r0, sl
 8015662:	f001 fe05 	bl	8017270 <__atomic_load_8>
 8015666:	f104 0b28 	add.w	fp, r4, #40	@ 0x28
 801566a:	4680      	mov	r8, r0
 801566c:	460e      	mov	r6, r1
 801566e:	4658      	mov	r0, fp
 8015670:	2105      	movs	r1, #5
 8015672:	f001 fdfd 	bl	8017270 <__atomic_load_8>
 8015676:	4607      	mov	r7, r0
 8015678:	460d      	mov	r5, r1
 801567a:	f104 0018 	add.w	r0, r4, #24
 801567e:	2105      	movs	r1, #5
 8015680:	f001 fdf6 	bl	8017270 <__atomic_load_8>
 8015684:	f899 3000 	ldrb.w	r3, [r9]
 8015688:	9003      	str	r0, [sp, #12]
 801568a:	3b02      	subs	r3, #2
 801568c:	2b01      	cmp	r3, #1
 801568e:	4689      	mov	r9, r1
 8015690:	d935      	bls.n	80156fe <_rcl_timer_time_jump+0xca>
 8015692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015696:	42ba      	cmp	r2, r7
 8015698:	eb73 0505 	sbcs.w	r5, r3, r5
 801569c:	da57      	bge.n	801574e <_rcl_timer_time_jump+0x11a>
 801569e:	4542      	cmp	r2, r8
 80156a0:	eb73 0606 	sbcs.w	r6, r3, r6
 80156a4:	dad0      	bge.n	8015648 <_rcl_timer_time_jump+0x14>
 80156a6:	1882      	adds	r2, r0, r2
 80156a8:	f04f 0405 	mov.w	r4, #5
 80156ac:	eb43 0309 	adc.w	r3, r3, r9
 80156b0:	4658      	mov	r0, fp
 80156b2:	9400      	str	r4, [sp, #0]
 80156b4:	f001 fe12 	bl	80172dc <__atomic_store_8>
 80156b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156bc:	9400      	str	r4, [sp, #0]
 80156be:	4650      	mov	r0, sl
 80156c0:	f001 fe0c 	bl	80172dc <__atomic_store_8>
 80156c4:	e7c0      	b.n	8015648 <_rcl_timer_time_jump+0x14>
 80156c6:	6810      	ldr	r0, [r2, #0]
 80156c8:	a904      	add	r1, sp, #16
 80156ca:	f7ff fed3 	bl	8015474 <rcl_clock_get_now>
 80156ce:	2800      	cmp	r0, #0
 80156d0:	d1ba      	bne.n	8015648 <_rcl_timer_time_jump+0x14>
 80156d2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80156d6:	4313      	orrs	r3, r2
 80156d8:	d0b6      	beq.n	8015648 <_rcl_timer_time_jump+0x14>
 80156da:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80156de:	2105      	movs	r1, #5
 80156e0:	f001 fdc6 	bl	8017270 <__atomic_load_8>
 80156e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156e8:	1a82      	subs	r2, r0, r2
 80156ea:	f04f 0005 	mov.w	r0, #5
 80156ee:	9000      	str	r0, [sp, #0]
 80156f0:	eb61 0303 	sbc.w	r3, r1, r3
 80156f4:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80156f8:	f001 fdf0 	bl	80172dc <__atomic_store_8>
 80156fc:	e7a4      	b.n	8015648 <_rcl_timer_time_jump+0x14>
 80156fe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015702:	4313      	orrs	r3, r2
 8015704:	d0a0      	beq.n	8015648 <_rcl_timer_time_jump+0x14>
 8015706:	2605      	movs	r6, #5
 8015708:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 801570c:	2300      	movs	r3, #0
 801570e:	9600      	str	r6, [sp, #0]
 8015710:	2200      	movs	r2, #0
 8015712:	f001 fe19 	bl	8017348 <__atomic_exchange_8>
 8015716:	ea51 0300 	orrs.w	r3, r1, r0
 801571a:	4604      	mov	r4, r0
 801571c:	460d      	mov	r5, r1
 801571e:	d093      	beq.n	8015648 <_rcl_timer_time_jump+0x14>
 8015720:	9a04      	ldr	r2, [sp, #16]
 8015722:	9b05      	ldr	r3, [sp, #20]
 8015724:	9600      	str	r6, [sp, #0]
 8015726:	1b12      	subs	r2, r2, r4
 8015728:	eb63 0301 	sbc.w	r3, r3, r1
 801572c:	9903      	ldr	r1, [sp, #12]
 801572e:	1852      	adds	r2, r2, r1
 8015730:	eb43 0309 	adc.w	r3, r3, r9
 8015734:	4658      	mov	r0, fp
 8015736:	f001 fdd1 	bl	80172dc <__atomic_store_8>
 801573a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801573e:	1b12      	subs	r2, r2, r4
 8015740:	9600      	str	r6, [sp, #0]
 8015742:	eb63 0305 	sbc.w	r3, r3, r5
 8015746:	4650      	mov	r0, sl
 8015748:	f001 fdc8 	bl	80172dc <__atomic_store_8>
 801574c:	e77c      	b.n	8015648 <_rcl_timer_time_jump+0x14>
 801574e:	f104 0008 	add.w	r0, r4, #8
 8015752:	f005 fc37 	bl	801afc4 <rcl_trigger_guard_condition>
 8015756:	e777      	b.n	8015648 <_rcl_timer_time_jump+0x14>

08015758 <rcl_get_zero_initialized_timer>:
 8015758:	4b01      	ldr	r3, [pc, #4]	@ (8015760 <rcl_get_zero_initialized_timer+0x8>)
 801575a:	6818      	ldr	r0, [r3, #0]
 801575c:	4770      	bx	lr
 801575e:	bf00      	nop
 8015760:	0801e480 	.word	0x0801e480
 8015764:	00000000 	.word	0x00000000

08015768 <rcl_timer_init2>:
 8015768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801576c:	b0ae      	sub	sp, #184	@ 0xb8
 801576e:	4604      	mov	r4, r0
 8015770:	a839      	add	r0, sp, #228	@ 0xe4
 8015772:	f89d 80f8 	ldrb.w	r8, [sp, #248]	@ 0xf8
 8015776:	460d      	mov	r5, r1
 8015778:	4691      	mov	r9, r2
 801577a:	f7f6 fa75 	bl	800bc68 <rcutils_allocator_is_valid>
 801577e:	2800      	cmp	r0, #0
 8015780:	f000 8097 	beq.w	80158b2 <rcl_timer_init2+0x14a>
 8015784:	2c00      	cmp	r4, #0
 8015786:	f000 8094 	beq.w	80158b2 <rcl_timer_init2+0x14a>
 801578a:	2d00      	cmp	r5, #0
 801578c:	f000 8091 	beq.w	80158b2 <rcl_timer_init2+0x14a>
 8015790:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8015792:	2b00      	cmp	r3, #0
 8015794:	f2c0 808d 	blt.w	80158b2 <rcl_timer_init2+0x14a>
 8015798:	6823      	ldr	r3, [r4, #0]
 801579a:	b123      	cbz	r3, 80157a6 <rcl_timer_init2+0x3e>
 801579c:	2664      	movs	r6, #100	@ 0x64
 801579e:	4630      	mov	r0, r6
 80157a0:	b02e      	add	sp, #184	@ 0xb8
 80157a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157a6:	a908      	add	r1, sp, #32
 80157a8:	4628      	mov	r0, r5
 80157aa:	f7ff fe63 	bl	8015474 <rcl_clock_get_now>
 80157ae:	4606      	mov	r6, r0
 80157b0:	2800      	cmp	r0, #0
 80157b2:	d1f4      	bne.n	801579e <rcl_timer_init2+0x36>
 80157b4:	ae06      	add	r6, sp, #24
 80157b6:	4630      	mov	r0, r6
 80157b8:	e9cd 5916 	strd	r5, r9, [sp, #88]	@ 0x58
 80157bc:	f005 fb24 	bl	801ae08 <rcl_get_zero_initialized_guard_condition>
 80157c0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80157c4:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80157c8:	ae0b      	add	r6, sp, #44	@ 0x2c
 80157ca:	e88a 0003 	stmia.w	sl, {r0, r1}
 80157ce:	4630      	mov	r0, r6
 80157d0:	f005 fbf2 	bl	801afb8 <rcl_guard_condition_get_default_options>
 80157d4:	ab0d      	add	r3, sp, #52	@ 0x34
 80157d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80157da:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80157de:	4649      	mov	r1, r9
 80157e0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80157e4:	4650      	mov	r0, sl
 80157e6:	f005 fb19 	bl	801ae1c <rcl_guard_condition_init>
 80157ea:	4606      	mov	r6, r0
 80157ec:	2800      	cmp	r0, #0
 80157ee:	d1d6      	bne.n	801579e <rcl_timer_init2+0x36>
 80157f0:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80157f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80157f4:	e9dd 2336 	ldrd	r2, r3, [sp, #216]	@ 0xd8
 80157f8:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80157fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015800:	9f36      	ldr	r7, [sp, #216]	@ 0xd8
 8015802:	902a      	str	r0, [sp, #168]	@ 0xa8
 8015804:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
 8015808:	ed9f 7b35 	vldr	d7, [pc, #212]	@ 80158e0 <rcl_timer_init2+0x178>
 801580c:	19d0      	adds	r0, r2, r7
 801580e:	9f37      	ldr	r7, [sp, #220]	@ 0xdc
 8015810:	f10d 0ce4 	add.w	ip, sp, #228	@ 0xe4
 8015814:	eb43 0107 	adc.w	r1, r3, r7
 8015818:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801581c:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8015820:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8015824:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015828:	f10d 0e94 	add.w	lr, sp, #148	@ 0x94
 801582c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015830:	f8dc 3000 	ldr.w	r3, [ip]
 8015834:	f8ce 3000 	str.w	r3, [lr]
 8015838:	f088 0801 	eor.w	r8, r8, #1
 801583c:	f88d 8090 	strb.w	r8, [sp, #144]	@ 0x90
 8015840:	4619      	mov	r1, r3
 8015842:	2060      	movs	r0, #96	@ 0x60
 8015844:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8015846:	4798      	blx	r3
 8015848:	4680      	mov	r8, r0
 801584a:	6020      	str	r0, [r4, #0]
 801584c:	2800      	cmp	r0, #0
 801584e:	d035      	beq.n	80158bc <rcl_timer_init2+0x154>
 8015850:	a916      	add	r1, sp, #88	@ 0x58
 8015852:	2260      	movs	r2, #96	@ 0x60
 8015854:	f006 fd03 	bl	801c25e <memcpy>
 8015858:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	2b01      	cmp	r3, #1
 801585e:	d19e      	bne.n	801579e <rcl_timer_init2+0x36>
 8015860:	2001      	movs	r0, #1
 8015862:	2100      	movs	r1, #0
 8015864:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8015868:	f04f 30ff 	mov.w	r0, #4294967295
 801586c:	f04f 31ff 	mov.w	r1, #4294967295
 8015870:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8015874:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8015878:	4b1b      	ldr	r3, [pc, #108]	@ (80158e8 <rcl_timer_init2+0x180>)
 801587a:	9304      	str	r3, [sp, #16]
 801587c:	f8cd 8014 	str.w	r8, [sp, #20]
 8015880:	ab12      	add	r3, sp, #72	@ 0x48
 8015882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015884:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015888:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801588c:	4628      	mov	r0, r5
 801588e:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8015892:	f7ff fe0b 	bl	80154ac <rcl_clock_add_jump_callback>
 8015896:	4605      	mov	r5, r0
 8015898:	2800      	cmp	r0, #0
 801589a:	d080      	beq.n	801579e <rcl_timer_init2+0x36>
 801589c:	4650      	mov	r0, sl
 801589e:	f005 fb69 	bl	801af74 <rcl_guard_condition_fini>
 80158a2:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 80158a4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80158a6:	6820      	ldr	r0, [r4, #0]
 80158a8:	4798      	blx	r3
 80158aa:	2300      	movs	r3, #0
 80158ac:	6023      	str	r3, [r4, #0]
 80158ae:	462e      	mov	r6, r5
 80158b0:	e775      	b.n	801579e <rcl_timer_init2+0x36>
 80158b2:	260b      	movs	r6, #11
 80158b4:	4630      	mov	r0, r6
 80158b6:	b02e      	add	sp, #184	@ 0xb8
 80158b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158bc:	4650      	mov	r0, sl
 80158be:	f005 fb59 	bl	801af74 <rcl_guard_condition_fini>
 80158c2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	2b01      	cmp	r3, #1
 80158c8:	d001      	beq.n	80158ce <rcl_timer_init2+0x166>
 80158ca:	260a      	movs	r6, #10
 80158cc:	e767      	b.n	801579e <rcl_timer_init2+0x36>
 80158ce:	4906      	ldr	r1, [pc, #24]	@ (80158e8 <rcl_timer_init2+0x180>)
 80158d0:	4622      	mov	r2, r4
 80158d2:	4628      	mov	r0, r5
 80158d4:	f7ff fe4c 	bl	8015570 <rcl_clock_remove_jump_callback>
 80158d8:	e7f7      	b.n	80158ca <rcl_timer_init2+0x162>
 80158da:	bf00      	nop
 80158dc:	f3af 8000 	nop.w
	...
 80158e8:	08015635 	.word	0x08015635

080158ec <rcl_timer_clock>:
 80158ec:	b130      	cbz	r0, 80158fc <rcl_timer_clock+0x10>
 80158ee:	b129      	cbz	r1, 80158fc <rcl_timer_clock+0x10>
 80158f0:	6803      	ldr	r3, [r0, #0]
 80158f2:	b12b      	cbz	r3, 8015900 <rcl_timer_clock+0x14>
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	600b      	str	r3, [r1, #0]
 80158f8:	2000      	movs	r0, #0
 80158fa:	4770      	bx	lr
 80158fc:	200b      	movs	r0, #11
 80158fe:	4770      	bx	lr
 8015900:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8015904:	4770      	bx	lr
 8015906:	bf00      	nop

08015908 <rcl_timer_call>:
 8015908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801590c:	b087      	sub	sp, #28
 801590e:	2800      	cmp	r0, #0
 8015910:	d067      	beq.n	80159e2 <rcl_timer_call+0xda>
 8015912:	6803      	ldr	r3, [r0, #0]
 8015914:	4604      	mov	r4, r0
 8015916:	2b00      	cmp	r3, #0
 8015918:	d068      	beq.n	80159ec <rcl_timer_call+0xe4>
 801591a:	f3bf 8f5b 	dmb	ish
 801591e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015922:	f3bf 8f5b 	dmb	ish
 8015926:	2b00      	cmp	r3, #0
 8015928:	d150      	bne.n	80159cc <rcl_timer_call+0xc4>
 801592a:	6803      	ldr	r3, [r0, #0]
 801592c:	a904      	add	r1, sp, #16
 801592e:	6818      	ldr	r0, [r3, #0]
 8015930:	f7ff fda0 	bl	8015474 <rcl_clock_get_now>
 8015934:	4605      	mov	r5, r0
 8015936:	2800      	cmp	r0, #0
 8015938:	d144      	bne.n	80159c4 <rcl_timer_call+0xbc>
 801593a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801593e:	2b00      	cmp	r3, #0
 8015940:	db4a      	blt.n	80159d8 <rcl_timer_call+0xd0>
 8015942:	6820      	ldr	r0, [r4, #0]
 8015944:	f04f 0a05 	mov.w	sl, #5
 8015948:	f8cd a000 	str.w	sl, [sp]
 801594c:	3020      	adds	r0, #32
 801594e:	f001 fcfb 	bl	8017348 <__atomic_exchange_8>
 8015952:	6823      	ldr	r3, [r4, #0]
 8015954:	f3bf 8f5b 	dmb	ish
 8015958:	4680      	mov	r8, r0
 801595a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801595e:	f3bf 8f5b 	dmb	ish
 8015962:	6820      	ldr	r0, [r4, #0]
 8015964:	4689      	mov	r9, r1
 8015966:	3028      	adds	r0, #40	@ 0x28
 8015968:	4651      	mov	r1, sl
 801596a:	f001 fc81 	bl	8017270 <__atomic_load_8>
 801596e:	4606      	mov	r6, r0
 8015970:	6820      	ldr	r0, [r4, #0]
 8015972:	460f      	mov	r7, r1
 8015974:	3018      	adds	r0, #24
 8015976:	4651      	mov	r1, sl
 8015978:	f001 fc7a 	bl	8017270 <__atomic_load_8>
 801597c:	1836      	adds	r6, r6, r0
 801597e:	eb41 0707 	adc.w	r7, r1, r7
 8015982:	4602      	mov	r2, r0
 8015984:	460b      	mov	r3, r1
 8015986:	4682      	mov	sl, r0
 8015988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801598c:	42b0      	cmp	r0, r6
 801598e:	eb71 0c07 	sbcs.w	ip, r1, r7
 8015992:	db04      	blt.n	801599e <rcl_timer_call+0x96>
 8015994:	ea53 0c02 	orrs.w	ip, r3, r2
 8015998:	d12b      	bne.n	80159f2 <rcl_timer_call+0xea>
 801599a:	4606      	mov	r6, r0
 801599c:	460f      	mov	r7, r1
 801599e:	6820      	ldr	r0, [r4, #0]
 80159a0:	2105      	movs	r1, #5
 80159a2:	4632      	mov	r2, r6
 80159a4:	463b      	mov	r3, r7
 80159a6:	3028      	adds	r0, #40	@ 0x28
 80159a8:	9100      	str	r1, [sp, #0]
 80159aa:	f001 fc97 	bl	80172dc <__atomic_store_8>
 80159ae:	f1bb 0f00 	cmp.w	fp, #0
 80159b2:	d007      	beq.n	80159c4 <rcl_timer_call+0xbc>
 80159b4:	9a04      	ldr	r2, [sp, #16]
 80159b6:	9b05      	ldr	r3, [sp, #20]
 80159b8:	ebb2 0208 	subs.w	r2, r2, r8
 80159bc:	4620      	mov	r0, r4
 80159be:	eb63 0309 	sbc.w	r3, r3, r9
 80159c2:	47d8      	blx	fp
 80159c4:	4628      	mov	r0, r5
 80159c6:	b007      	add	sp, #28
 80159c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159cc:	f240 3521 	movw	r5, #801	@ 0x321
 80159d0:	4628      	mov	r0, r5
 80159d2:	b007      	add	sp, #28
 80159d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d8:	2501      	movs	r5, #1
 80159da:	4628      	mov	r0, r5
 80159dc:	b007      	add	sp, #28
 80159de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159e2:	250b      	movs	r5, #11
 80159e4:	4628      	mov	r0, r5
 80159e6:	b007      	add	sp, #28
 80159e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ec:	f44f 7548 	mov.w	r5, #800	@ 0x320
 80159f0:	e7e8      	b.n	80159c4 <rcl_timer_call+0xbc>
 80159f2:	1b80      	subs	r0, r0, r6
 80159f4:	eb61 0107 	sbc.w	r1, r1, r7
 80159f8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80159fc:	f7eb f866 	bl	8000acc <__aeabi_ldivmod>
 8015a00:	9b02      	ldr	r3, [sp, #8]
 8015a02:	3001      	adds	r0, #1
 8015a04:	f141 0100 	adc.w	r1, r1, #0
 8015a08:	fb00 f303 	mul.w	r3, r0, r3
 8015a0c:	fb01 330a 	mla	r3, r1, sl, r3
 8015a10:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015a14:	1830      	adds	r0, r6, r0
 8015a16:	4453      	add	r3, sl
 8015a18:	eb43 0707 	adc.w	r7, r3, r7
 8015a1c:	4606      	mov	r6, r0
 8015a1e:	e7be      	b.n	801599e <rcl_timer_call+0x96>

08015a20 <rcl_timer_is_ready>:
 8015a20:	b398      	cbz	r0, 8015a8a <rcl_timer_is_ready+0x6a>
 8015a22:	b530      	push	{r4, r5, lr}
 8015a24:	6803      	ldr	r3, [r0, #0]
 8015a26:	b083      	sub	sp, #12
 8015a28:	4604      	mov	r4, r0
 8015a2a:	b383      	cbz	r3, 8015a8e <rcl_timer_is_ready+0x6e>
 8015a2c:	460d      	mov	r5, r1
 8015a2e:	b349      	cbz	r1, 8015a84 <rcl_timer_is_ready+0x64>
 8015a30:	f3bf 8f5b 	dmb	ish
 8015a34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015a38:	f3bf 8f5b 	dmb	ish
 8015a3c:	b9fb      	cbnz	r3, 8015a7e <rcl_timer_is_ready+0x5e>
 8015a3e:	6803      	ldr	r3, [r0, #0]
 8015a40:	4669      	mov	r1, sp
 8015a42:	6818      	ldr	r0, [r3, #0]
 8015a44:	f7ff fd16 	bl	8015474 <rcl_clock_get_now>
 8015a48:	b128      	cbz	r0, 8015a56 <rcl_timer_is_ready+0x36>
 8015a4a:	f240 3321 	movw	r3, #801	@ 0x321
 8015a4e:	4298      	cmp	r0, r3
 8015a50:	d015      	beq.n	8015a7e <rcl_timer_is_ready+0x5e>
 8015a52:	b003      	add	sp, #12
 8015a54:	bd30      	pop	{r4, r5, pc}
 8015a56:	6820      	ldr	r0, [r4, #0]
 8015a58:	2105      	movs	r1, #5
 8015a5a:	3028      	adds	r0, #40	@ 0x28
 8015a5c:	f001 fc08 	bl	8017270 <__atomic_load_8>
 8015a60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015a64:	1ac0      	subs	r0, r0, r3
 8015a66:	eb61 0102 	sbc.w	r1, r1, r2
 8015a6a:	2801      	cmp	r0, #1
 8015a6c:	f171 0100 	sbcs.w	r1, r1, #0
 8015a70:	bfb4      	ite	lt
 8015a72:	2301      	movlt	r3, #1
 8015a74:	2300      	movge	r3, #0
 8015a76:	702b      	strb	r3, [r5, #0]
 8015a78:	2000      	movs	r0, #0
 8015a7a:	b003      	add	sp, #12
 8015a7c:	bd30      	pop	{r4, r5, pc}
 8015a7e:	2300      	movs	r3, #0
 8015a80:	702b      	strb	r3, [r5, #0]
 8015a82:	e7f9      	b.n	8015a78 <rcl_timer_is_ready+0x58>
 8015a84:	200b      	movs	r0, #11
 8015a86:	b003      	add	sp, #12
 8015a88:	bd30      	pop	{r4, r5, pc}
 8015a8a:	200b      	movs	r0, #11
 8015a8c:	4770      	bx	lr
 8015a8e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8015a92:	e7de      	b.n	8015a52 <rcl_timer_is_ready+0x32>

08015a94 <rcl_timer_get_next_call_time>:
 8015a94:	b1d8      	cbz	r0, 8015ace <rcl_timer_get_next_call_time+0x3a>
 8015a96:	b538      	push	{r3, r4, r5, lr}
 8015a98:	6803      	ldr	r3, [r0, #0]
 8015a9a:	b1d3      	cbz	r3, 8015ad2 <rcl_timer_get_next_call_time+0x3e>
 8015a9c:	460c      	mov	r4, r1
 8015a9e:	b1a1      	cbz	r1, 8015aca <rcl_timer_get_next_call_time+0x36>
 8015aa0:	f3bf 8f5b 	dmb	ish
 8015aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015aa8:	f3bf 8f5b 	dmb	ish
 8015aac:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8015ab0:	b943      	cbnz	r3, 8015ac4 <rcl_timer_get_next_call_time+0x30>
 8015ab2:	6800      	ldr	r0, [r0, #0]
 8015ab4:	2105      	movs	r1, #5
 8015ab6:	3028      	adds	r0, #40	@ 0x28
 8015ab8:	f001 fbda 	bl	8017270 <__atomic_load_8>
 8015abc:	e9c4 0100 	strd	r0, r1, [r4]
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	bd38      	pop	{r3, r4, r5, pc}
 8015ac4:	f240 3021 	movw	r0, #801	@ 0x321
 8015ac8:	bd38      	pop	{r3, r4, r5, pc}
 8015aca:	200b      	movs	r0, #11
 8015acc:	bd38      	pop	{r3, r4, r5, pc}
 8015ace:	200b      	movs	r0, #11
 8015ad0:	4770      	bx	lr
 8015ad2:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8015ad6:	bd38      	pop	{r3, r4, r5, pc}

08015ad8 <rcl_timer_get_guard_condition>:
 8015ad8:	b130      	cbz	r0, 8015ae8 <rcl_timer_get_guard_condition+0x10>
 8015ada:	6800      	ldr	r0, [r0, #0]
 8015adc:	b120      	cbz	r0, 8015ae8 <rcl_timer_get_guard_condition+0x10>
 8015ade:	68c3      	ldr	r3, [r0, #12]
 8015ae0:	b10b      	cbz	r3, 8015ae6 <rcl_timer_get_guard_condition+0xe>
 8015ae2:	3008      	adds	r0, #8
 8015ae4:	4770      	bx	lr
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	4770      	bx	lr
 8015aea:	bf00      	nop

08015aec <rcl_get_zero_initialized_wait_set>:
 8015aec:	b510      	push	{r4, lr}
 8015aee:	4c08      	ldr	r4, [pc, #32]	@ (8015b10 <rcl_get_zero_initialized_wait_set+0x24>)
 8015af0:	4686      	mov	lr, r0
 8015af2:	4684      	mov	ip, r0
 8015af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015af6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015afc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b06:	6823      	ldr	r3, [r4, #0]
 8015b08:	f8cc 3000 	str.w	r3, [ip]
 8015b0c:	4670      	mov	r0, lr
 8015b0e:	bd10      	pop	{r4, pc}
 8015b10:	0801e484 	.word	0x0801e484

08015b14 <rcl_wait_set_is_valid>:
 8015b14:	b118      	cbz	r0, 8015b1e <rcl_wait_set_is_valid+0xa>
 8015b16:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015b18:	3800      	subs	r0, #0
 8015b1a:	bf18      	it	ne
 8015b1c:	2001      	movne	r0, #1
 8015b1e:	4770      	bx	lr

08015b20 <rcl_wait_set_fini>:
 8015b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b24:	2800      	cmp	r0, #0
 8015b26:	f000 80ab 	beq.w	8015c80 <rcl_wait_set_fini+0x160>
 8015b2a:	4605      	mov	r5, r0
 8015b2c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015b2e:	2800      	cmp	r0, #0
 8015b30:	f000 809c 	beq.w	8015c6c <rcl_wait_set_fini+0x14c>
 8015b34:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8015b36:	f003 fa17 	bl	8018f68 <rmw_destroy_wait_set>
 8015b3a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b3c:	4680      	mov	r8, r0
 8015b3e:	2800      	cmp	r0, #0
 8015b40:	f040 808e 	bne.w	8015c60 <rcl_wait_set_fini+0x140>
 8015b44:	2c00      	cmp	r4, #0
 8015b46:	f000 80a0 	beq.w	8015c8a <rcl_wait_set_fini+0x16a>
 8015b4a:	6828      	ldr	r0, [r5, #0]
 8015b4c:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015b4e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015b52:	2600      	movs	r6, #0
 8015b54:	606e      	str	r6, [r5, #4]
 8015b56:	6026      	str	r6, [r4, #0]
 8015b58:	b118      	cbz	r0, 8015b62 <rcl_wait_set_fini+0x42>
 8015b5a:	4649      	mov	r1, r9
 8015b5c:	47b8      	blx	r7
 8015b5e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b60:	602e      	str	r6, [r5, #0]
 8015b62:	68a0      	ldr	r0, [r4, #8]
 8015b64:	b128      	cbz	r0, 8015b72 <rcl_wait_set_fini+0x52>
 8015b66:	4649      	mov	r1, r9
 8015b68:	47b8      	blx	r7
 8015b6a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015b72:	68a8      	ldr	r0, [r5, #8]
 8015b74:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8015b76:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015b78:	f04f 0900 	mov.w	r9, #0
 8015b7c:	f8c5 900c 	str.w	r9, [r5, #12]
 8015b80:	f8c4 900c 	str.w	r9, [r4, #12]
 8015b84:	b130      	cbz	r0, 8015b94 <rcl_wait_set_fini+0x74>
 8015b86:	4639      	mov	r1, r7
 8015b88:	47b0      	blx	r6
 8015b8a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b8c:	f8c5 9008 	str.w	r9, [r5, #8]
 8015b90:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8015b92:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015b94:	6960      	ldr	r0, [r4, #20]
 8015b96:	f04f 0900 	mov.w	r9, #0
 8015b9a:	f8c4 9010 	str.w	r9, [r4, #16]
 8015b9e:	b130      	cbz	r0, 8015bae <rcl_wait_set_fini+0x8e>
 8015ba0:	4639      	mov	r1, r7
 8015ba2:	47b0      	blx	r6
 8015ba4:	f8c4 9014 	str.w	r9, [r4, #20]
 8015ba8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015baa:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8015bac:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015bae:	6928      	ldr	r0, [r5, #16]
 8015bb0:	f04f 0900 	mov.w	r9, #0
 8015bb4:	f8c5 9014 	str.w	r9, [r5, #20]
 8015bb8:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
 8015bbc:	b130      	cbz	r0, 8015bcc <rcl_wait_set_fini+0xac>
 8015bbe:	4639      	mov	r1, r7
 8015bc0:	47b0      	blx	r6
 8015bc2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015bc4:	f8c5 9010 	str.w	r9, [r5, #16]
 8015bc8:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8015bca:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015bcc:	69a8      	ldr	r0, [r5, #24]
 8015bce:	f04f 0900 	mov.w	r9, #0
 8015bd2:	f8c5 901c 	str.w	r9, [r5, #28]
 8015bd6:	f8c4 9018 	str.w	r9, [r4, #24]
 8015bda:	b120      	cbz	r0, 8015be6 <rcl_wait_set_fini+0xc6>
 8015bdc:	4639      	mov	r1, r7
 8015bde:	47b0      	blx	r6
 8015be0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015be2:	f8c5 9018 	str.w	r9, [r5, #24]
 8015be6:	6a20      	ldr	r0, [r4, #32]
 8015be8:	b128      	cbz	r0, 8015bf6 <rcl_wait_set_fini+0xd6>
 8015bea:	4639      	mov	r1, r7
 8015bec:	47b0      	blx	r6
 8015bee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015bf6:	6a28      	ldr	r0, [r5, #32]
 8015bf8:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015bfa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015bfe:	2600      	movs	r6, #0
 8015c00:	626e      	str	r6, [r5, #36]	@ 0x24
 8015c02:	6266      	str	r6, [r4, #36]	@ 0x24
 8015c04:	b118      	cbz	r0, 8015c0e <rcl_wait_set_fini+0xee>
 8015c06:	4649      	mov	r1, r9
 8015c08:	47b8      	blx	r7
 8015c0a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c0c:	622e      	str	r6, [r5, #32]
 8015c0e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015c10:	b128      	cbz	r0, 8015c1e <rcl_wait_set_fini+0xfe>
 8015c12:	4649      	mov	r1, r9
 8015c14:	47b8      	blx	r7
 8015c16:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c18:	2300      	movs	r3, #0
 8015c1a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015c1e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015c20:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8015c22:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015c26:	2600      	movs	r6, #0
 8015c28:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8015c2a:	6326      	str	r6, [r4, #48]	@ 0x30
 8015c2c:	b118      	cbz	r0, 8015c36 <rcl_wait_set_fini+0x116>
 8015c2e:	4649      	mov	r1, r9
 8015c30:	47b8      	blx	r7
 8015c32:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c34:	62ae      	str	r6, [r5, #40]	@ 0x28
 8015c36:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015c38:	b1e0      	cbz	r0, 8015c74 <rcl_wait_set_fini+0x154>
 8015c3a:	4649      	mov	r1, r9
 8015c3c:	47b8      	blx	r7
 8015c3e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015c40:	2300      	movs	r3, #0
 8015c42:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 8015c46:	4598      	cmp	r8, r3
 8015c48:	bf18      	it	ne
 8015c4a:	f44f 7861 	movne.w	r8, #900	@ 0x384
 8015c4e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015c50:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015c52:	4620      	mov	r0, r4
 8015c54:	4798      	blx	r3
 8015c56:	2300      	movs	r3, #0
 8015c58:	632b      	str	r3, [r5, #48]	@ 0x30
 8015c5a:	4640      	mov	r0, r8
 8015c5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c60:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8015c64:	2c00      	cmp	r4, #0
 8015c66:	f47f af70 	bne.w	8015b4a <rcl_wait_set_fini+0x2a>
 8015c6a:	e7f6      	b.n	8015c5a <rcl_wait_set_fini+0x13a>
 8015c6c:	4680      	mov	r8, r0
 8015c6e:	4640      	mov	r0, r8
 8015c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c74:	f1b8 0f00 	cmp.w	r8, #0
 8015c78:	bf18      	it	ne
 8015c7a:	f44f 7861 	movne.w	r8, #900	@ 0x384
 8015c7e:	e7e6      	b.n	8015c4e <rcl_wait_set_fini+0x12e>
 8015c80:	f04f 080b 	mov.w	r8, #11
 8015c84:	4640      	mov	r0, r8
 8015c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c8a:	f44f 7861 	mov.w	r8, #900	@ 0x384
 8015c8e:	e7e4      	b.n	8015c5a <rcl_wait_set_fini+0x13a>

08015c90 <rcl_wait_set_add_subscription>:
 8015c90:	b318      	cbz	r0, 8015cda <rcl_wait_set_add_subscription+0x4a>
 8015c92:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015c94:	b570      	push	{r4, r5, r6, lr}
 8015c96:	4604      	mov	r4, r0
 8015c98:	b30b      	cbz	r3, 8015cde <rcl_wait_set_add_subscription+0x4e>
 8015c9a:	b319      	cbz	r1, 8015ce4 <rcl_wait_set_add_subscription+0x54>
 8015c9c:	681d      	ldr	r5, [r3, #0]
 8015c9e:	6840      	ldr	r0, [r0, #4]
 8015ca0:	4285      	cmp	r5, r0
 8015ca2:	d217      	bcs.n	8015cd4 <rcl_wait_set_add_subscription+0x44>
 8015ca4:	6820      	ldr	r0, [r4, #0]
 8015ca6:	1c6e      	adds	r6, r5, #1
 8015ca8:	601e      	str	r6, [r3, #0]
 8015caa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015cae:	b102      	cbz	r2, 8015cb2 <rcl_wait_set_add_subscription+0x22>
 8015cb0:	6015      	str	r5, [r2, #0]
 8015cb2:	4608      	mov	r0, r1
 8015cb4:	f7ff fb3c 	bl	8015330 <rcl_subscription_get_rmw_handle>
 8015cb8:	b150      	cbz	r0, 8015cd0 <rcl_wait_set_add_subscription+0x40>
 8015cba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015cbc:	6842      	ldr	r2, [r0, #4]
 8015cbe:	689b      	ldr	r3, [r3, #8]
 8015cc0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015cc4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015cc6:	6853      	ldr	r3, [r2, #4]
 8015cc8:	3301      	adds	r3, #1
 8015cca:	2000      	movs	r0, #0
 8015ccc:	6053      	str	r3, [r2, #4]
 8015cce:	bd70      	pop	{r4, r5, r6, pc}
 8015cd0:	2001      	movs	r0, #1
 8015cd2:	bd70      	pop	{r4, r5, r6, pc}
 8015cd4:	f240 3086 	movw	r0, #902	@ 0x386
 8015cd8:	bd70      	pop	{r4, r5, r6, pc}
 8015cda:	200b      	movs	r0, #11
 8015cdc:	4770      	bx	lr
 8015cde:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ce2:	bd70      	pop	{r4, r5, r6, pc}
 8015ce4:	200b      	movs	r0, #11
 8015ce6:	bd70      	pop	{r4, r5, r6, pc}

08015ce8 <rcl_wait_set_clear>:
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	d074      	beq.n	8015dd6 <rcl_wait_set_clear+0xee>
 8015cec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015cee:	b510      	push	{r4, lr}
 8015cf0:	4604      	mov	r4, r0
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d071      	beq.n	8015dda <rcl_wait_set_clear+0xf2>
 8015cf6:	6800      	ldr	r0, [r0, #0]
 8015cf8:	b138      	cbz	r0, 8015d0a <rcl_wait_set_clear+0x22>
 8015cfa:	6862      	ldr	r2, [r4, #4]
 8015cfc:	2100      	movs	r1, #0
 8015cfe:	0092      	lsls	r2, r2, #2
 8015d00:	f006 f9d2 	bl	801c0a8 <memset>
 8015d04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d06:	2200      	movs	r2, #0
 8015d08:	601a      	str	r2, [r3, #0]
 8015d0a:	68a0      	ldr	r0, [r4, #8]
 8015d0c:	b138      	cbz	r0, 8015d1e <rcl_wait_set_clear+0x36>
 8015d0e:	68e2      	ldr	r2, [r4, #12]
 8015d10:	2100      	movs	r1, #0
 8015d12:	0092      	lsls	r2, r2, #2
 8015d14:	f006 f9c8 	bl	801c0a8 <memset>
 8015d18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	60da      	str	r2, [r3, #12]
 8015d1e:	69a0      	ldr	r0, [r4, #24]
 8015d20:	b138      	cbz	r0, 8015d32 <rcl_wait_set_clear+0x4a>
 8015d22:	69e2      	ldr	r2, [r4, #28]
 8015d24:	2100      	movs	r1, #0
 8015d26:	0092      	lsls	r2, r2, #2
 8015d28:	f006 f9be 	bl	801c0a8 <memset>
 8015d2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d2e:	2200      	movs	r2, #0
 8015d30:	619a      	str	r2, [r3, #24]
 8015d32:	6a20      	ldr	r0, [r4, #32]
 8015d34:	b138      	cbz	r0, 8015d46 <rcl_wait_set_clear+0x5e>
 8015d36:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015d38:	2100      	movs	r1, #0
 8015d3a:	0092      	lsls	r2, r2, #2
 8015d3c:	f006 f9b4 	bl	801c0a8 <memset>
 8015d40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d42:	2200      	movs	r2, #0
 8015d44:	625a      	str	r2, [r3, #36]	@ 0x24
 8015d46:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015d48:	b138      	cbz	r0, 8015d5a <rcl_wait_set_clear+0x72>
 8015d4a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015d4c:	2100      	movs	r1, #0
 8015d4e:	0092      	lsls	r2, r2, #2
 8015d50:	f006 f9aa 	bl	801c0a8 <memset>
 8015d54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d56:	2200      	movs	r2, #0
 8015d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8015d5a:	6920      	ldr	r0, [r4, #16]
 8015d5c:	b138      	cbz	r0, 8015d6e <rcl_wait_set_clear+0x86>
 8015d5e:	6962      	ldr	r2, [r4, #20]
 8015d60:	2100      	movs	r1, #0
 8015d62:	0092      	lsls	r2, r2, #2
 8015d64:	f006 f9a0 	bl	801c0a8 <memset>
 8015d68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8015d6e:	6898      	ldr	r0, [r3, #8]
 8015d70:	b138      	cbz	r0, 8015d82 <rcl_wait_set_clear+0x9a>
 8015d72:	685a      	ldr	r2, [r3, #4]
 8015d74:	2100      	movs	r1, #0
 8015d76:	0092      	lsls	r2, r2, #2
 8015d78:	f006 f996 	bl	801c0a8 <memset>
 8015d7c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d7e:	2200      	movs	r2, #0
 8015d80:	605a      	str	r2, [r3, #4]
 8015d82:	6958      	ldr	r0, [r3, #20]
 8015d84:	b138      	cbz	r0, 8015d96 <rcl_wait_set_clear+0xae>
 8015d86:	691a      	ldr	r2, [r3, #16]
 8015d88:	2100      	movs	r1, #0
 8015d8a:	0092      	lsls	r2, r2, #2
 8015d8c:	f006 f98c 	bl	801c0a8 <memset>
 8015d90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d92:	2200      	movs	r2, #0
 8015d94:	611a      	str	r2, [r3, #16]
 8015d96:	6a18      	ldr	r0, [r3, #32]
 8015d98:	b138      	cbz	r0, 8015daa <rcl_wait_set_clear+0xc2>
 8015d9a:	69da      	ldr	r2, [r3, #28]
 8015d9c:	2100      	movs	r1, #0
 8015d9e:	0092      	lsls	r2, r2, #2
 8015da0:	f006 f982 	bl	801c0a8 <memset>
 8015da4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015da6:	2200      	movs	r2, #0
 8015da8:	61da      	str	r2, [r3, #28]
 8015daa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015dac:	b138      	cbz	r0, 8015dbe <rcl_wait_set_clear+0xd6>
 8015dae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015db0:	2100      	movs	r1, #0
 8015db2:	0092      	lsls	r2, r2, #2
 8015db4:	f006 f978 	bl	801c0a8 <memset>
 8015db8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015dba:	2200      	movs	r2, #0
 8015dbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8015dbe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015dc0:	b138      	cbz	r0, 8015dd2 <rcl_wait_set_clear+0xea>
 8015dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015dc4:	2100      	movs	r1, #0
 8015dc6:	0092      	lsls	r2, r2, #2
 8015dc8:	f006 f96e 	bl	801c0a8 <memset>
 8015dcc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015dce:	2200      	movs	r2, #0
 8015dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8015dd2:	2000      	movs	r0, #0
 8015dd4:	bd10      	pop	{r4, pc}
 8015dd6:	200b      	movs	r0, #11
 8015dd8:	4770      	bx	lr
 8015dda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015dde:	bd10      	pop	{r4, pc}

08015de0 <rcl_wait_set_resize>:
 8015de0:	2800      	cmp	r0, #0
 8015de2:	f000 81a1 	beq.w	8016128 <rcl_wait_set_resize+0x348>
 8015de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dea:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8015dee:	b083      	sub	sp, #12
 8015df0:	4604      	mov	r4, r0
 8015df2:	f1ba 0f00 	cmp.w	sl, #0
 8015df6:	f000 8199 	beq.w	801612c <rcl_wait_set_resize+0x34c>
 8015dfa:	f04f 0800 	mov.w	r8, #0
 8015dfe:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8015e02:	461e      	mov	r6, r3
 8015e04:	460f      	mov	r7, r1
 8015e06:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8015e0a:	4615      	mov	r5, r2
 8015e0c:	f8c0 8004 	str.w	r8, [r0, #4]
 8015e10:	6800      	ldr	r0, [r0, #0]
 8015e12:	f8ca 8000 	str.w	r8, [sl]
 8015e16:	2900      	cmp	r1, #0
 8015e18:	f000 80cf 	beq.w	8015fba <rcl_wait_set_resize+0x1da>
 8015e1c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8015e20:	464a      	mov	r2, r9
 8015e22:	4651      	mov	r1, sl
 8015e24:	9301      	str	r3, [sp, #4]
 8015e26:	4798      	blx	r3
 8015e28:	9b01      	ldr	r3, [sp, #4]
 8015e2a:	6020      	str	r0, [r4, #0]
 8015e2c:	2800      	cmp	r0, #0
 8015e2e:	f000 8109 	beq.w	8016044 <rcl_wait_set_resize+0x264>
 8015e32:	4652      	mov	r2, sl
 8015e34:	4641      	mov	r1, r8
 8015e36:	9301      	str	r3, [sp, #4]
 8015e38:	f006 f936 	bl	801c0a8 <memset>
 8015e3c:	6067      	str	r7, [r4, #4]
 8015e3e:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8015e40:	9b01      	ldr	r3, [sp, #4]
 8015e42:	68b8      	ldr	r0, [r7, #8]
 8015e44:	f8c7 8004 	str.w	r8, [r7, #4]
 8015e48:	464a      	mov	r2, r9
 8015e4a:	4651      	mov	r1, sl
 8015e4c:	4798      	blx	r3
 8015e4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e50:	60b8      	str	r0, [r7, #8]
 8015e52:	689f      	ldr	r7, [r3, #8]
 8015e54:	2f00      	cmp	r7, #0
 8015e56:	f000 80f0 	beq.w	801603a <rcl_wait_set_resize+0x25a>
 8015e5a:	4652      	mov	r2, sl
 8015e5c:	4641      	mov	r1, r8
 8015e5e:	4638      	mov	r0, r7
 8015e60:	f006 f922 	bl	801c0a8 <memset>
 8015e64:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015e68:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015e6c:	68a0      	ldr	r0, [r4, #8]
 8015e6e:	2700      	movs	r7, #0
 8015e70:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8015e74:	60e7      	str	r7, [r4, #12]
 8015e76:	f8ca 700c 	str.w	r7, [sl, #12]
 8015e7a:	2d00      	cmp	r5, #0
 8015e7c:	f040 80b0 	bne.w	8015fe0 <rcl_wait_set_resize+0x200>
 8015e80:	b130      	cbz	r0, 8015e90 <rcl_wait_set_resize+0xb0>
 8015e82:	4641      	mov	r1, r8
 8015e84:	4790      	blx	r2
 8015e86:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015e8a:	60a5      	str	r5, [r4, #8]
 8015e8c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015e90:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015e94:	2700      	movs	r7, #0
 8015e96:	19ad      	adds	r5, r5, r6
 8015e98:	f8ca 7010 	str.w	r7, [sl, #16]
 8015e9c:	f040 80b8 	bne.w	8016010 <rcl_wait_set_resize+0x230>
 8015ea0:	b148      	cbz	r0, 8015eb6 <rcl_wait_set_resize+0xd6>
 8015ea2:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8015ea6:	4641      	mov	r1, r8
 8015ea8:	4798      	blx	r3
 8015eaa:	f8ca 5014 	str.w	r5, [sl, #20]
 8015eae:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015eb2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015eb6:	6920      	ldr	r0, [r4, #16]
 8015eb8:	2500      	movs	r5, #0
 8015eba:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015ebe:	6165      	str	r5, [r4, #20]
 8015ec0:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8015ec4:	2e00      	cmp	r6, #0
 8015ec6:	f040 80c1 	bne.w	801604c <rcl_wait_set_resize+0x26c>
 8015eca:	b140      	cbz	r0, 8015ede <rcl_wait_set_resize+0xfe>
 8015ecc:	4641      	mov	r1, r8
 8015ece:	47c8      	blx	r9
 8015ed0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015ed4:	6126      	str	r6, [r4, #16]
 8015ed6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015eda:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015ede:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ee0:	69a0      	ldr	r0, [r4, #24]
 8015ee2:	2500      	movs	r5, #0
 8015ee4:	61e5      	str	r5, [r4, #28]
 8015ee6:	f8ca 5018 	str.w	r5, [sl, #24]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	f040 80c2 	bne.w	8016074 <rcl_wait_set_resize+0x294>
 8015ef0:	b128      	cbz	r0, 8015efe <rcl_wait_set_resize+0x11e>
 8015ef2:	4641      	mov	r1, r8
 8015ef4:	47c8      	blx	r9
 8015ef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ef8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015efc:	61a3      	str	r3, [r4, #24]
 8015efe:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015f02:	b130      	cbz	r0, 8015f12 <rcl_wait_set_resize+0x132>
 8015f04:	4641      	mov	r1, r8
 8015f06:	47c8      	blx	r9
 8015f08:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8015f12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015f14:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8015f18:	6a20      	ldr	r0, [r4, #32]
 8015f1a:	2500      	movs	r5, #0
 8015f1c:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8015f20:	6265      	str	r5, [r4, #36]	@ 0x24
 8015f22:	f8ca 5024 	str.w	r5, [sl, #36]	@ 0x24
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	f000 80c8 	beq.w	80160bc <rcl_wait_set_resize+0x2dc>
 8015f2c:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8015f30:	4632      	mov	r2, r6
 8015f32:	4649      	mov	r1, r9
 8015f34:	47c0      	blx	r8
 8015f36:	6220      	str	r0, [r4, #32]
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	f000 8083 	beq.w	8016044 <rcl_wait_set_resize+0x264>
 8015f3e:	464a      	mov	r2, r9
 8015f40:	4629      	mov	r1, r5
 8015f42:	f006 f8b1 	bl	801c0a8 <memset>
 8015f46:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015f4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015f4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8015f4e:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8015f52:	f8ca 5028 	str.w	r5, [sl, #40]	@ 0x28
 8015f56:	4632      	mov	r2, r6
 8015f58:	4649      	mov	r1, r9
 8015f5a:	47c0      	blx	r8
 8015f5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f5e:	f8ca 002c 	str.w	r0, [sl, #44]	@ 0x2c
 8015f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	f000 80fb 	beq.w	8016160 <rcl_wait_set_resize+0x380>
 8015f6a:	464a      	mov	r2, r9
 8015f6c:	4629      	mov	r1, r5
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f006 f89a 	bl	801c0a8 <memset>
 8015f74:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015f78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f7a:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8015f7e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015f80:	2500      	movs	r5, #0
 8015f82:	e9da 7813 	ldrd	r7, r8, [sl, #76]	@ 0x4c
 8015f86:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8015f88:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	f040 80a9 	bne.w	80160e4 <rcl_wait_set_resize+0x304>
 8015f92:	b128      	cbz	r0, 8015fa0 <rcl_wait_set_resize+0x1c0>
 8015f94:	4631      	mov	r1, r6
 8015f96:	47b8      	blx	r7
 8015f98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f9a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015f9e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015fa0:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015fa4:	b128      	cbz	r0, 8015fb2 <rcl_wait_set_resize+0x1d2>
 8015fa6:	4631      	mov	r1, r6
 8015fa8:	47b8      	blx	r7
 8015faa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015fac:	2200      	movs	r2, #0
 8015fae:	e9c3 220d 	strd	r2, r2, [r3, #52]	@ 0x34
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	b003      	add	sp, #12
 8015fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fba:	b120      	cbz	r0, 8015fc6 <rcl_wait_set_resize+0x1e6>
 8015fbc:	4649      	mov	r1, r9
 8015fbe:	47d8      	blx	fp
 8015fc0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015fc4:	6027      	str	r7, [r4, #0]
 8015fc6:	f8da 0008 	ldr.w	r0, [sl, #8]
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	f43f af4c 	beq.w	8015e68 <rcl_wait_set_resize+0x88>
 8015fd0:	4649      	mov	r1, r9
 8015fd2:	47d8      	blx	fp
 8015fd4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015fd8:	2300      	movs	r3, #0
 8015fda:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8015fde:	e743      	b.n	8015e68 <rcl_wait_set_resize+0x88>
 8015fe0:	4642      	mov	r2, r8
 8015fe2:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8015fe6:	4641      	mov	r1, r8
 8015fe8:	4798      	blx	r3
 8015fea:	60a0      	str	r0, [r4, #8]
 8015fec:	b350      	cbz	r0, 8016044 <rcl_wait_set_resize+0x264>
 8015fee:	4642      	mov	r2, r8
 8015ff0:	4639      	mov	r1, r7
 8015ff2:	f006 f859 	bl	801c0a8 <memset>
 8015ff6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015ffa:	60e5      	str	r5, [r4, #12]
 8015ffc:	2700      	movs	r7, #0
 8015ffe:	19ad      	adds	r5, r5, r6
 8016000:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8016004:	f8da 0014 	ldr.w	r0, [sl, #20]
 8016008:	f8ca 7010 	str.w	r7, [sl, #16]
 801600c:	f43f af48 	beq.w	8015ea0 <rcl_wait_set_resize+0xc0>
 8016010:	00ad      	lsls	r5, r5, #2
 8016012:	4642      	mov	r2, r8
 8016014:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8016018:	4629      	mov	r1, r5
 801601a:	4798      	blx	r3
 801601c:	4680      	mov	r8, r0
 801601e:	f8ca 0014 	str.w	r0, [sl, #20]
 8016022:	2800      	cmp	r0, #0
 8016024:	f000 8085 	beq.w	8016132 <rcl_wait_set_resize+0x352>
 8016028:	462a      	mov	r2, r5
 801602a:	4639      	mov	r1, r7
 801602c:	f006 f83c 	bl	801c0a8 <memset>
 8016030:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016034:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8016038:	e73d      	b.n	8015eb6 <rcl_wait_set_resize+0xd6>
 801603a:	6820      	ldr	r0, [r4, #0]
 801603c:	4649      	mov	r1, r9
 801603e:	47d8      	blx	fp
 8016040:	e9c4 7700 	strd	r7, r7, [r4]
 8016044:	200a      	movs	r0, #10
 8016046:	b003      	add	sp, #12
 8016048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801604c:	4642      	mov	r2, r8
 801604e:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8016052:	4641      	mov	r1, r8
 8016054:	47b8      	blx	r7
 8016056:	6120      	str	r0, [r4, #16]
 8016058:	2800      	cmp	r0, #0
 801605a:	d0f3      	beq.n	8016044 <rcl_wait_set_resize+0x264>
 801605c:	4642      	mov	r2, r8
 801605e:	4629      	mov	r1, r5
 8016060:	f006 f822 	bl	801c0a8 <memset>
 8016064:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016068:	6166      	str	r6, [r4, #20]
 801606a:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 801606e:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8016072:	e734      	b.n	8015ede <rcl_wait_set_resize+0xfe>
 8016074:	009e      	lsls	r6, r3, #2
 8016076:	4642      	mov	r2, r8
 8016078:	4631      	mov	r1, r6
 801607a:	47b8      	blx	r7
 801607c:	61a0      	str	r0, [r4, #24]
 801607e:	2800      	cmp	r0, #0
 8016080:	d0e0      	beq.n	8016044 <rcl_wait_set_resize+0x264>
 8016082:	4632      	mov	r2, r6
 8016084:	4629      	mov	r1, r5
 8016086:	f006 f80f 	bl	801c0a8 <memset>
 801608a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 801608e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016090:	61e3      	str	r3, [r4, #28]
 8016092:	f8da 0020 	ldr.w	r0, [sl, #32]
 8016096:	f8ca 501c 	str.w	r5, [sl, #28]
 801609a:	4642      	mov	r2, r8
 801609c:	4631      	mov	r1, r6
 801609e:	47b8      	blx	r7
 80160a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160a2:	f8ca 0020 	str.w	r0, [sl, #32]
 80160a6:	6a1f      	ldr	r7, [r3, #32]
 80160a8:	2f00      	cmp	r7, #0
 80160aa:	d053      	beq.n	8016154 <rcl_wait_set_resize+0x374>
 80160ac:	4632      	mov	r2, r6
 80160ae:	4629      	mov	r1, r5
 80160b0:	4638      	mov	r0, r7
 80160b2:	f005 fff9 	bl	801c0a8 <memset>
 80160b6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80160ba:	e72a      	b.n	8015f12 <rcl_wait_set_resize+0x132>
 80160bc:	b128      	cbz	r0, 80160ca <rcl_wait_set_resize+0x2ea>
 80160be:	4631      	mov	r1, r6
 80160c0:	47b8      	blx	r7
 80160c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80160c4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80160c8:	6223      	str	r3, [r4, #32]
 80160ca:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 80160ce:	2800      	cmp	r0, #0
 80160d0:	f43f af52 	beq.w	8015f78 <rcl_wait_set_resize+0x198>
 80160d4:	4631      	mov	r1, r6
 80160d6:	47b8      	blx	r7
 80160d8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80160dc:	2300      	movs	r3, #0
 80160de:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 80160e2:	e749      	b.n	8015f78 <rcl_wait_set_resize+0x198>
 80160e4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80160e8:	4632      	mov	r2, r6
 80160ea:	4649      	mov	r1, r9
 80160ec:	47c0      	blx	r8
 80160ee:	62a0      	str	r0, [r4, #40]	@ 0x28
 80160f0:	2800      	cmp	r0, #0
 80160f2:	d0a7      	beq.n	8016044 <rcl_wait_set_resize+0x264>
 80160f4:	464a      	mov	r2, r9
 80160f6:	4629      	mov	r1, r5
 80160f8:	f005 ffd6 	bl	801c0a8 <memset>
 80160fc:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8016100:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016102:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016104:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8016108:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 801610c:	4632      	mov	r2, r6
 801610e:	4649      	mov	r1, r9
 8016110:	47c0      	blx	r8
 8016112:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016114:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8016118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801611a:	b34b      	cbz	r3, 8016170 <rcl_wait_set_resize+0x390>
 801611c:	464a      	mov	r2, r9
 801611e:	4629      	mov	r1, r5
 8016120:	4618      	mov	r0, r3
 8016122:	f005 ffc1 	bl	801c0a8 <memset>
 8016126:	e744      	b.n	8015fb2 <rcl_wait_set_resize+0x1d2>
 8016128:	200b      	movs	r0, #11
 801612a:	4770      	bx	lr
 801612c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016130:	e789      	b.n	8016046 <rcl_wait_set_resize+0x266>
 8016132:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016134:	68a0      	ldr	r0, [r4, #8]
 8016136:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016138:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801613a:	4790      	blx	r2
 801613c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801613e:	6920      	ldr	r0, [r4, #16]
 8016140:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016142:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8016144:	f8c4 800c 	str.w	r8, [r4, #12]
 8016148:	f8c4 8008 	str.w	r8, [r4, #8]
 801614c:	4790      	blx	r2
 801614e:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8016152:	e777      	b.n	8016044 <rcl_wait_set_resize+0x264>
 8016154:	69a0      	ldr	r0, [r4, #24]
 8016156:	4641      	mov	r1, r8
 8016158:	47c8      	blx	r9
 801615a:	e9c4 7706 	strd	r7, r7, [r4, #24]
 801615e:	e771      	b.n	8016044 <rcl_wait_set_resize+0x264>
 8016160:	6a20      	ldr	r0, [r4, #32]
 8016162:	9301      	str	r3, [sp, #4]
 8016164:	4631      	mov	r1, r6
 8016166:	47b8      	blx	r7
 8016168:	9b01      	ldr	r3, [sp, #4]
 801616a:	e9c4 3308 	strd	r3, r3, [r4, #32]
 801616e:	e769      	b.n	8016044 <rcl_wait_set_resize+0x264>
 8016170:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016172:	9301      	str	r3, [sp, #4]
 8016174:	4631      	mov	r1, r6
 8016176:	47b8      	blx	r7
 8016178:	9b01      	ldr	r3, [sp, #4]
 801617a:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801617e:	e761      	b.n	8016044 <rcl_wait_set_resize+0x264>

08016180 <rcl_wait_set_init>:
 8016180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016184:	b084      	sub	sp, #16
 8016186:	4604      	mov	r4, r0
 8016188:	a810      	add	r0, sp, #64	@ 0x40
 801618a:	460d      	mov	r5, r1
 801618c:	4690      	mov	r8, r2
 801618e:	461f      	mov	r7, r3
 8016190:	f7f5 fd6a 	bl	800bc68 <rcutils_allocator_is_valid>
 8016194:	2800      	cmp	r0, #0
 8016196:	d068      	beq.n	801626a <rcl_wait_set_init+0xea>
 8016198:	2c00      	cmp	r4, #0
 801619a:	d066      	beq.n	801626a <rcl_wait_set_init+0xea>
 801619c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801619e:	b126      	cbz	r6, 80161aa <rcl_wait_set_init+0x2a>
 80161a0:	2564      	movs	r5, #100	@ 0x64
 80161a2:	4628      	mov	r0, r5
 80161a4:	b004      	add	sp, #16
 80161a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d05c      	beq.n	801626a <rcl_wait_set_init+0xea>
 80161b0:	4618      	mov	r0, r3
 80161b2:	f7fe f9a5 	bl	8014500 <rcl_context_is_valid>
 80161b6:	2800      	cmp	r0, #0
 80161b8:	d05c      	beq.n	8016274 <rcl_wait_set_init+0xf4>
 80161ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80161bc:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80161be:	205c      	movs	r0, #92	@ 0x5c
 80161c0:	4798      	blx	r3
 80161c2:	6320      	str	r0, [r4, #48]	@ 0x30
 80161c4:	2800      	cmp	r0, #0
 80161c6:	d059      	beq.n	801627c <rcl_wait_set_init+0xfc>
 80161c8:	4631      	mov	r1, r6
 80161ca:	225c      	movs	r2, #92	@ 0x5c
 80161cc:	f005 ff6c 	bl	801c0a8 <memset>
 80161d0:	f8d4 9030 	ldr.w	r9, [r4, #48]	@ 0x30
 80161d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161d6:	f8c9 3044 	str.w	r3, [r9, #68]	@ 0x44
 80161da:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80161de:	eb03 0e02 	add.w	lr, r3, r2
 80161e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80161e4:	449e      	add	lr, r3
 80161e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161e8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80161ec:	f8d3 a000 	ldr.w	sl, [r3]
 80161f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80161f4:	e9c9 6601 	strd	r6, r6, [r9, #4]
 80161f8:	e9c9 6604 	strd	r6, r6, [r9, #16]
 80161fc:	e9c9 6607 	strd	r6, r6, [r9, #28]
 8016200:	e9c9 660a 	strd	r6, r6, [r9, #40]	@ 0x28
 8016204:	e9c9 660d 	strd	r6, r6, [r9, #52]	@ 0x34
 8016208:	f109 0648 	add.w	r6, r9, #72	@ 0x48
 801620c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801620e:	44c6      	add	lr, r8
 8016210:	f8dc 3000 	ldr.w	r3, [ip]
 8016214:	6033      	str	r3, [r6, #0]
 8016216:	eb0e 0145 	add.w	r1, lr, r5, lsl #1
 801621a:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801621e:	f002 fe99 	bl	8018f54 <rmw_create_wait_set>
 8016222:	f8c9 003c 	str.w	r0, [r9, #60]	@ 0x3c
 8016226:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016228:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801622a:	b32b      	cbz	r3, 8016278 <rcl_wait_set_init+0xf8>
 801622c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801622e:	9302      	str	r3, [sp, #8]
 8016230:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016232:	9301      	str	r3, [sp, #4]
 8016234:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016236:	9300      	str	r3, [sp, #0]
 8016238:	4629      	mov	r1, r5
 801623a:	463b      	mov	r3, r7
 801623c:	4642      	mov	r2, r8
 801623e:	4620      	mov	r0, r4
 8016240:	f7ff fdce 	bl	8015de0 <rcl_wait_set_resize>
 8016244:	4605      	mov	r5, r0
 8016246:	2800      	cmp	r0, #0
 8016248:	d0ab      	beq.n	80161a2 <rcl_wait_set_init+0x22>
 801624a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801624c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801624e:	b133      	cbz	r3, 801625e <rcl_wait_set_init+0xde>
 8016250:	4618      	mov	r0, r3
 8016252:	f002 fe89 	bl	8018f68 <rmw_destroy_wait_set>
 8016256:	b198      	cbz	r0, 8016280 <rcl_wait_set_init+0x100>
 8016258:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801625a:	f44f 7561 	mov.w	r5, #900	@ 0x384
 801625e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016260:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8016262:	4798      	blx	r3
 8016264:	2300      	movs	r3, #0
 8016266:	6323      	str	r3, [r4, #48]	@ 0x30
 8016268:	e79b      	b.n	80161a2 <rcl_wait_set_init+0x22>
 801626a:	250b      	movs	r5, #11
 801626c:	4628      	mov	r0, r5
 801626e:	b004      	add	sp, #16
 8016270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016274:	2565      	movs	r5, #101	@ 0x65
 8016276:	e794      	b.n	80161a2 <rcl_wait_set_init+0x22>
 8016278:	250a      	movs	r5, #10
 801627a:	e7f0      	b.n	801625e <rcl_wait_set_init+0xde>
 801627c:	250a      	movs	r5, #10
 801627e:	e790      	b.n	80161a2 <rcl_wait_set_init+0x22>
 8016280:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8016282:	e7ec      	b.n	801625e <rcl_wait_set_init+0xde>

08016284 <rcl_wait_set_add_guard_condition>:
 8016284:	b318      	cbz	r0, 80162ce <rcl_wait_set_add_guard_condition+0x4a>
 8016286:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016288:	b570      	push	{r4, r5, r6, lr}
 801628a:	4604      	mov	r4, r0
 801628c:	b30b      	cbz	r3, 80162d2 <rcl_wait_set_add_guard_condition+0x4e>
 801628e:	b319      	cbz	r1, 80162d8 <rcl_wait_set_add_guard_condition+0x54>
 8016290:	68dd      	ldr	r5, [r3, #12]
 8016292:	68c0      	ldr	r0, [r0, #12]
 8016294:	4285      	cmp	r5, r0
 8016296:	d217      	bcs.n	80162c8 <rcl_wait_set_add_guard_condition+0x44>
 8016298:	68a0      	ldr	r0, [r4, #8]
 801629a:	1c6e      	adds	r6, r5, #1
 801629c:	60de      	str	r6, [r3, #12]
 801629e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80162a2:	b102      	cbz	r2, 80162a6 <rcl_wait_set_add_guard_condition+0x22>
 80162a4:	6015      	str	r5, [r2, #0]
 80162a6:	4608      	mov	r0, r1
 80162a8:	f004 fe9c 	bl	801afe4 <rcl_guard_condition_get_rmw_handle>
 80162ac:	b150      	cbz	r0, 80162c4 <rcl_wait_set_add_guard_condition+0x40>
 80162ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80162b0:	6842      	ldr	r2, [r0, #4]
 80162b2:	695b      	ldr	r3, [r3, #20]
 80162b4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80162b8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80162ba:	6913      	ldr	r3, [r2, #16]
 80162bc:	3301      	adds	r3, #1
 80162be:	2000      	movs	r0, #0
 80162c0:	6113      	str	r3, [r2, #16]
 80162c2:	bd70      	pop	{r4, r5, r6, pc}
 80162c4:	2001      	movs	r0, #1
 80162c6:	bd70      	pop	{r4, r5, r6, pc}
 80162c8:	f240 3086 	movw	r0, #902	@ 0x386
 80162cc:	bd70      	pop	{r4, r5, r6, pc}
 80162ce:	200b      	movs	r0, #11
 80162d0:	4770      	bx	lr
 80162d2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80162d6:	bd70      	pop	{r4, r5, r6, pc}
 80162d8:	200b      	movs	r0, #11
 80162da:	bd70      	pop	{r4, r5, r6, pc}

080162dc <rcl_wait_set_add_timer>:
 80162dc:	b328      	cbz	r0, 801632a <rcl_wait_set_add_timer+0x4e>
 80162de:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80162e0:	b570      	push	{r4, r5, r6, lr}
 80162e2:	4604      	mov	r4, r0
 80162e4:	b31b      	cbz	r3, 801632e <rcl_wait_set_add_timer+0x52>
 80162e6:	b329      	cbz	r1, 8016334 <rcl_wait_set_add_timer+0x58>
 80162e8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80162ea:	6965      	ldr	r5, [r4, #20]
 80162ec:	42a8      	cmp	r0, r5
 80162ee:	d219      	bcs.n	8016324 <rcl_wait_set_add_timer+0x48>
 80162f0:	6925      	ldr	r5, [r4, #16]
 80162f2:	1c46      	adds	r6, r0, #1
 80162f4:	641e      	str	r6, [r3, #64]	@ 0x40
 80162f6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80162fa:	b102      	cbz	r2, 80162fe <rcl_wait_set_add_timer+0x22>
 80162fc:	6010      	str	r0, [r2, #0]
 80162fe:	4608      	mov	r0, r1
 8016300:	f7ff fbea 	bl	8015ad8 <rcl_timer_get_guard_condition>
 8016304:	b160      	cbz	r0, 8016320 <rcl_wait_set_add_timer+0x44>
 8016306:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016308:	68e3      	ldr	r3, [r4, #12]
 801630a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801630c:	3b01      	subs	r3, #1
 801630e:	441d      	add	r5, r3
 8016310:	f004 fe68 	bl	801afe4 <rcl_guard_condition_get_rmw_handle>
 8016314:	b180      	cbz	r0, 8016338 <rcl_wait_set_add_timer+0x5c>
 8016316:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016318:	6842      	ldr	r2, [r0, #4]
 801631a:	695b      	ldr	r3, [r3, #20]
 801631c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016320:	2000      	movs	r0, #0
 8016322:	bd70      	pop	{r4, r5, r6, pc}
 8016324:	f240 3086 	movw	r0, #902	@ 0x386
 8016328:	bd70      	pop	{r4, r5, r6, pc}
 801632a:	200b      	movs	r0, #11
 801632c:	4770      	bx	lr
 801632e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016332:	bd70      	pop	{r4, r5, r6, pc}
 8016334:	200b      	movs	r0, #11
 8016336:	bd70      	pop	{r4, r5, r6, pc}
 8016338:	2001      	movs	r0, #1
 801633a:	bd70      	pop	{r4, r5, r6, pc}

0801633c <rcl_wait_set_add_client>:
 801633c:	b318      	cbz	r0, 8016386 <rcl_wait_set_add_client+0x4a>
 801633e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016340:	b570      	push	{r4, r5, r6, lr}
 8016342:	4604      	mov	r4, r0
 8016344:	b30b      	cbz	r3, 801638a <rcl_wait_set_add_client+0x4e>
 8016346:	b319      	cbz	r1, 8016390 <rcl_wait_set_add_client+0x54>
 8016348:	699d      	ldr	r5, [r3, #24]
 801634a:	69c0      	ldr	r0, [r0, #28]
 801634c:	4285      	cmp	r5, r0
 801634e:	d217      	bcs.n	8016380 <rcl_wait_set_add_client+0x44>
 8016350:	69a0      	ldr	r0, [r4, #24]
 8016352:	1c6e      	adds	r6, r5, #1
 8016354:	619e      	str	r6, [r3, #24]
 8016356:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801635a:	b102      	cbz	r2, 801635e <rcl_wait_set_add_client+0x22>
 801635c:	6015      	str	r5, [r2, #0]
 801635e:	4608      	mov	r0, r1
 8016360:	f7fd ffe4 	bl	801432c <rcl_client_get_rmw_handle>
 8016364:	b150      	cbz	r0, 801637c <rcl_wait_set_add_client+0x40>
 8016366:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016368:	6842      	ldr	r2, [r0, #4]
 801636a:	6a1b      	ldr	r3, [r3, #32]
 801636c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016370:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016372:	69d3      	ldr	r3, [r2, #28]
 8016374:	3301      	adds	r3, #1
 8016376:	2000      	movs	r0, #0
 8016378:	61d3      	str	r3, [r2, #28]
 801637a:	bd70      	pop	{r4, r5, r6, pc}
 801637c:	2001      	movs	r0, #1
 801637e:	bd70      	pop	{r4, r5, r6, pc}
 8016380:	f240 3086 	movw	r0, #902	@ 0x386
 8016384:	bd70      	pop	{r4, r5, r6, pc}
 8016386:	200b      	movs	r0, #11
 8016388:	4770      	bx	lr
 801638a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801638e:	bd70      	pop	{r4, r5, r6, pc}
 8016390:	200b      	movs	r0, #11
 8016392:	bd70      	pop	{r4, r5, r6, pc}

08016394 <rcl_wait_set_add_service>:
 8016394:	b318      	cbz	r0, 80163de <rcl_wait_set_add_service+0x4a>
 8016396:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016398:	b570      	push	{r4, r5, r6, lr}
 801639a:	4604      	mov	r4, r0
 801639c:	b30b      	cbz	r3, 80163e2 <rcl_wait_set_add_service+0x4e>
 801639e:	b319      	cbz	r1, 80163e8 <rcl_wait_set_add_service+0x54>
 80163a0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80163a2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80163a4:	4285      	cmp	r5, r0
 80163a6:	d217      	bcs.n	80163d8 <rcl_wait_set_add_service+0x44>
 80163a8:	6a20      	ldr	r0, [r4, #32]
 80163aa:	1c6e      	adds	r6, r5, #1
 80163ac:	625e      	str	r6, [r3, #36]	@ 0x24
 80163ae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80163b2:	b102      	cbz	r2, 80163b6 <rcl_wait_set_add_service+0x22>
 80163b4:	6015      	str	r5, [r2, #0]
 80163b6:	4608      	mov	r0, r1
 80163b8:	f7fe fd88 	bl	8014ecc <rcl_service_get_rmw_handle>
 80163bc:	b150      	cbz	r0, 80163d4 <rcl_wait_set_add_service+0x40>
 80163be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80163c0:	6842      	ldr	r2, [r0, #4]
 80163c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80163c8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80163ca:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80163cc:	3301      	adds	r3, #1
 80163ce:	2000      	movs	r0, #0
 80163d0:	6293      	str	r3, [r2, #40]	@ 0x28
 80163d2:	bd70      	pop	{r4, r5, r6, pc}
 80163d4:	2001      	movs	r0, #1
 80163d6:	bd70      	pop	{r4, r5, r6, pc}
 80163d8:	f240 3086 	movw	r0, #902	@ 0x386
 80163dc:	bd70      	pop	{r4, r5, r6, pc}
 80163de:	200b      	movs	r0, #11
 80163e0:	4770      	bx	lr
 80163e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80163e6:	bd70      	pop	{r4, r5, r6, pc}
 80163e8:	200b      	movs	r0, #11
 80163ea:	bd70      	pop	{r4, r5, r6, pc}
 80163ec:	0000      	movs	r0, r0
	...

080163f0 <rcl_wait>:
 80163f0:	2800      	cmp	r0, #0
 80163f2:	f000 81d4 	beq.w	801679e <rcl_wait+0x3ae>
 80163f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163fa:	ed2d 8b02 	vpush	{d8}
 80163fe:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8016400:	b099      	sub	sp, #100	@ 0x64
 8016402:	4604      	mov	r4, r0
 8016404:	2d00      	cmp	r5, #0
 8016406:	f000 8178 	beq.w	80166fa <rcl_wait+0x30a>
 801640a:	461f      	mov	r7, r3
 801640c:	6843      	ldr	r3, [r0, #4]
 801640e:	4690      	mov	r8, r2
 8016410:	2b00      	cmp	r3, #0
 8016412:	f000 809b 	beq.w	801654c <rcl_wait+0x15c>
 8016416:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 8016418:	2e00      	cmp	r6, #0
 801641a:	f000 80b2 	beq.w	8016582 <rcl_wait+0x192>
 801641e:	2100      	movs	r1, #0
 8016420:	468c      	mov	ip, r1
 8016422:	460a      	mov	r2, r1
 8016424:	46a6      	mov	lr, r4
 8016426:	f8de 3010 	ldr.w	r3, [lr, #16]
 801642a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801642e:	b173      	cbz	r3, 801644e <rcl_wait+0x5e>
 8016430:	f8de 300c 	ldr.w	r3, [lr, #12]
 8016434:	6968      	ldr	r0, [r5, #20]
 8016436:	440b      	add	r3, r1
 8016438:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 801643c:	b13c      	cbz	r4, 801644e <rcl_wait+0x5e>
 801643e:	692b      	ldr	r3, [r5, #16]
 8016440:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
 8016444:	3301      	adds	r3, #1
 8016446:	612b      	str	r3, [r5, #16]
 8016448:	f8de 5030 	ldr.w	r5, [lr, #48]	@ 0x30
 801644c:	6c2e      	ldr	r6, [r5, #64]	@ 0x40
 801644e:	3101      	adds	r1, #1
 8016450:	f14c 0c00 	adc.w	ip, ip, #0
 8016454:	42b1      	cmp	r1, r6
 8016456:	f17c 0300 	sbcs.w	r3, ip, #0
 801645a:	d3e4      	bcc.n	8016426 <rcl_wait+0x36>
 801645c:	ed9f 8baa 	vldr	d8, [pc, #680]	@ 8016708 <rcl_wait+0x318>
 8016460:	ea58 0307 	orrs.w	r3, r8, r7
 8016464:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
 8016468:	e9cd 220e 	strd	r2, r2, [sp, #56]	@ 0x38
 801646c:	ed8d 8b12 	vstr	d8, [sp, #72]	@ 0x48
 8016470:	ed8d 8b14 	vstr	d8, [sp, #80]	@ 0x50
 8016474:	ed8d 8b16 	vstr	d8, [sp, #88]	@ 0x58
 8016478:	4674      	mov	r4, lr
 801647a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 801647e:	f000 8094 	beq.w	80165aa <rcl_wait+0x1ba>
 8016482:	2e00      	cmp	r6, #0
 8016484:	f000 8145 	beq.w	8016712 <rcl_wait+0x322>
 8016488:	2500      	movs	r5, #0
 801648a:	46bb      	mov	fp, r7
 801648c:	e02c      	b.n	80164e8 <rcl_wait+0xf8>
 801648e:	6923      	ldr	r3, [r4, #16]
 8016490:	f853 0009 	ldr.w	r0, [r3, r9]
 8016494:	a908      	add	r1, sp, #32
 8016496:	ed8d 8b08 	vstr	d8, [sp, #32]
 801649a:	f7ff fafb 	bl	8015a94 <rcl_timer_get_next_call_time>
 801649e:	f240 3321 	movw	r3, #801	@ 0x321
 80164a2:	4298      	cmp	r0, r3
 80164a4:	f000 80bb 	beq.w	801661e <rcl_wait+0x22e>
 80164a8:	2800      	cmp	r0, #0
 80164aa:	d165      	bne.n	8016578 <rcl_wait+0x188>
 80164ac:	e9dd 6707 	ldrd	r6, r7, [sp, #28]
 80164b0:	7830      	ldrb	r0, [r6, #0]
 80164b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80164b4:	ab18      	add	r3, sp, #96	@ 0x60
 80164b6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80164ba:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80164be:	9205      	str	r2, [sp, #20]
 80164c0:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80164c4:	4297      	cmp	r7, r2
 80164c6:	9a05      	ldr	r2, [sp, #20]
 80164c8:	eb71 0202 	sbcs.w	r2, r1, r2
 80164cc:	da06      	bge.n	80164dc <rcl_wait+0xec>
 80164ce:	e943 7108 	strd	r7, r1, [r3, #-32]
 80164d2:	ab18      	add	r3, sp, #96	@ 0x60
 80164d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80164d8:	f840 6c30 	str.w	r6, [r0, #-48]
 80164dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80164de:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 80164e0:	3501      	adds	r5, #1
 80164e2:	42b5      	cmp	r5, r6
 80164e4:	f080 8114 	bcs.w	8016710 <rcl_wait+0x320>
 80164e8:	6923      	ldr	r3, [r4, #16]
 80164ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80164ee:	ea4f 0985 	mov.w	r9, r5, lsl #2
 80164f2:	2800      	cmp	r0, #0
 80164f4:	d0f4      	beq.n	80164e0 <rcl_wait+0xf0>
 80164f6:	a907      	add	r1, sp, #28
 80164f8:	f7ff f9f8 	bl	80158ec <rcl_timer_clock>
 80164fc:	4603      	mov	r3, r0
 80164fe:	2800      	cmp	r0, #0
 8016500:	f040 8141 	bne.w	8016786 <rcl_wait+0x396>
 8016504:	9807      	ldr	r0, [sp, #28]
 8016506:	7802      	ldrb	r2, [r0, #0]
 8016508:	2a01      	cmp	r2, #1
 801650a:	d1c0      	bne.n	801648e <rcl_wait+0x9e>
 801650c:	f10d 011b 	add.w	r1, sp, #27
 8016510:	f88d 301b 	strb.w	r3, [sp, #27]
 8016514:	f7fe ffba 	bl	801548c <rcl_is_enabled_ros_time_override>
 8016518:	4602      	mov	r2, r0
 801651a:	2800      	cmp	r0, #0
 801651c:	f040 8133 	bne.w	8016786 <rcl_wait+0x396>
 8016520:	6923      	ldr	r3, [r4, #16]
 8016522:	f89d 101b 	ldrb.w	r1, [sp, #27]
 8016526:	f853 0009 	ldr.w	r0, [r3, r9]
 801652a:	2900      	cmp	r1, #0
 801652c:	d0b0      	beq.n	8016490 <rcl_wait+0xa0>
 801652e:	ae08      	add	r6, sp, #32
 8016530:	4631      	mov	r1, r6
 8016532:	f88d 2020 	strb.w	r2, [sp, #32]
 8016536:	f7ff fa73 	bl	8015a20 <rcl_timer_is_ready>
 801653a:	2800      	cmp	r0, #0
 801653c:	f040 8123 	bne.w	8016786 <rcl_wait+0x396>
 8016540:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d0c9      	beq.n	80164dc <rcl_wait+0xec>
 8016548:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801654a:	e02f      	b.n	80165ac <rcl_wait+0x1bc>
 801654c:	68c3      	ldr	r3, [r0, #12]
 801654e:	2b00      	cmp	r3, #0
 8016550:	f47f af61 	bne.w	8016416 <rcl_wait+0x26>
 8016554:	6943      	ldr	r3, [r0, #20]
 8016556:	2b00      	cmp	r3, #0
 8016558:	f47f af5d 	bne.w	8016416 <rcl_wait+0x26>
 801655c:	69c3      	ldr	r3, [r0, #28]
 801655e:	2b00      	cmp	r3, #0
 8016560:	f47f af59 	bne.w	8016416 <rcl_wait+0x26>
 8016564:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8016566:	2b00      	cmp	r3, #0
 8016568:	f47f af55 	bne.w	8016416 <rcl_wait+0x26>
 801656c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801656e:	2b00      	cmp	r3, #0
 8016570:	f47f af51 	bne.w	8016416 <rcl_wait+0x26>
 8016574:	f240 3085 	movw	r0, #901	@ 0x385
 8016578:	b019      	add	sp, #100	@ 0x64
 801657a:	ecbd 8b02 	vpop	{d8}
 801657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016582:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016586:	f04f 32ff 	mov.w	r2, #4294967295
 801658a:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 801658e:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8016592:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8016596:	ea58 0307 	orrs.w	r3, r8, r7
 801659a:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
 801659e:	e9cd 660e 	strd	r6, r6, [sp, #56]	@ 0x38
 80165a2:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 80165a6:	f040 80b4 	bne.w	8016712 <rcl_wait+0x322>
 80165aa:	ae08      	add	r6, sp, #32
 80165ac:	2200      	movs	r2, #0
 80165ae:	2300      	movs	r3, #0
 80165b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80165b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80165b8:	9602      	str	r6, [sp, #8]
 80165ba:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 80165bc:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80165c0:	e9cd 3200 	strd	r3, r2, [sp]
 80165c4:	f105 0110 	add.w	r1, r5, #16
 80165c8:	f105 031c 	add.w	r3, r5, #28
 80165cc:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 80165d0:	1d28      	adds	r0, r5, #4
 80165d2:	f002 fb3d 	bl	8018c50 <rmw_wait>
 80165d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80165da:	4680      	mov	r8, r0
 80165dc:	b332      	cbz	r2, 801662c <rcl_wait+0x23c>
 80165de:	2500      	movs	r5, #0
 80165e0:	462f      	mov	r7, r5
 80165e2:	462e      	mov	r6, r5
 80165e4:	e007      	b.n	80165f6 <rcl_wait+0x206>
 80165e6:	6922      	ldr	r2, [r4, #16]
 80165e8:	f842 3009 	str.w	r3, [r2, r9]
 80165ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80165ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80165f0:	3501      	adds	r5, #1
 80165f2:	4295      	cmp	r5, r2
 80165f4:	d21b      	bcs.n	801662e <rcl_wait+0x23e>
 80165f6:	6920      	ldr	r0, [r4, #16]
 80165f8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80165fc:	a907      	add	r1, sp, #28
 80165fe:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8016602:	2800      	cmp	r0, #0
 8016604:	d0f4      	beq.n	80165f0 <rcl_wait+0x200>
 8016606:	f88d 601c 	strb.w	r6, [sp, #28]
 801660a:	f7ff fa09 	bl	8015a20 <rcl_timer_is_ready>
 801660e:	2800      	cmp	r0, #0
 8016610:	d1b2      	bne.n	8016578 <rcl_wait+0x188>
 8016612:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d0e5      	beq.n	80165e6 <rcl_wait+0x1f6>
 801661a:	461f      	mov	r7, r3
 801661c:	e7e6      	b.n	80165ec <rcl_wait+0x1fc>
 801661e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016620:	6923      	ldr	r3, [r4, #16]
 8016622:	6c16      	ldr	r6, [r2, #64]	@ 0x40
 8016624:	2200      	movs	r2, #0
 8016626:	f843 2009 	str.w	r2, [r3, r9]
 801662a:	e759      	b.n	80164e0 <rcl_wait+0xf0>
 801662c:	4617      	mov	r7, r2
 801662e:	f038 0002 	bics.w	r0, r8, #2
 8016632:	f040 80a8 	bne.w	8016786 <rcl_wait+0x396>
 8016636:	6866      	ldr	r6, [r4, #4]
 8016638:	4602      	mov	r2, r0
 801663a:	b91e      	cbnz	r6, 8016644 <rcl_wait+0x254>
 801663c:	e00d      	b.n	801665a <rcl_wait+0x26a>
 801663e:	3201      	adds	r2, #1
 8016640:	4296      	cmp	r6, r2
 8016642:	d00a      	beq.n	801665a <rcl_wait+0x26a>
 8016644:	6899      	ldr	r1, [r3, #8]
 8016646:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801664a:	2900      	cmp	r1, #0
 801664c:	d1f7      	bne.n	801663e <rcl_wait+0x24e>
 801664e:	6825      	ldr	r5, [r4, #0]
 8016650:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016654:	3201      	adds	r2, #1
 8016656:	4296      	cmp	r6, r2
 8016658:	d1f4      	bne.n	8016644 <rcl_wait+0x254>
 801665a:	68e6      	ldr	r6, [r4, #12]
 801665c:	2200      	movs	r2, #0
 801665e:	b91e      	cbnz	r6, 8016668 <rcl_wait+0x278>
 8016660:	e00d      	b.n	801667e <rcl_wait+0x28e>
 8016662:	3201      	adds	r2, #1
 8016664:	42b2      	cmp	r2, r6
 8016666:	d00a      	beq.n	801667e <rcl_wait+0x28e>
 8016668:	6959      	ldr	r1, [r3, #20]
 801666a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801666e:	2900      	cmp	r1, #0
 8016670:	d1f7      	bne.n	8016662 <rcl_wait+0x272>
 8016672:	68a5      	ldr	r5, [r4, #8]
 8016674:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016678:	3201      	adds	r2, #1
 801667a:	42b2      	cmp	r2, r6
 801667c:	d1f4      	bne.n	8016668 <rcl_wait+0x278>
 801667e:	69e6      	ldr	r6, [r4, #28]
 8016680:	2200      	movs	r2, #0
 8016682:	b91e      	cbnz	r6, 801668c <rcl_wait+0x29c>
 8016684:	e00d      	b.n	80166a2 <rcl_wait+0x2b2>
 8016686:	3201      	adds	r2, #1
 8016688:	4296      	cmp	r6, r2
 801668a:	d00a      	beq.n	80166a2 <rcl_wait+0x2b2>
 801668c:	6a19      	ldr	r1, [r3, #32]
 801668e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016692:	2900      	cmp	r1, #0
 8016694:	d1f7      	bne.n	8016686 <rcl_wait+0x296>
 8016696:	69a5      	ldr	r5, [r4, #24]
 8016698:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801669c:	3201      	adds	r2, #1
 801669e:	4296      	cmp	r6, r2
 80166a0:	d1f4      	bne.n	801668c <rcl_wait+0x29c>
 80166a2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80166a4:	2200      	movs	r2, #0
 80166a6:	b91e      	cbnz	r6, 80166b0 <rcl_wait+0x2c0>
 80166a8:	e00d      	b.n	80166c6 <rcl_wait+0x2d6>
 80166aa:	3201      	adds	r2, #1
 80166ac:	42b2      	cmp	r2, r6
 80166ae:	d00a      	beq.n	80166c6 <rcl_wait+0x2d6>
 80166b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80166b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80166b6:	2900      	cmp	r1, #0
 80166b8:	d1f7      	bne.n	80166aa <rcl_wait+0x2ba>
 80166ba:	6a25      	ldr	r5, [r4, #32]
 80166bc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80166c0:	3201      	adds	r2, #1
 80166c2:	42b2      	cmp	r2, r6
 80166c4:	d1f4      	bne.n	80166b0 <rcl_wait+0x2c0>
 80166c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80166c8:	2200      	movs	r2, #0
 80166ca:	b91e      	cbnz	r6, 80166d4 <rcl_wait+0x2e4>
 80166cc:	e00d      	b.n	80166ea <rcl_wait+0x2fa>
 80166ce:	3201      	adds	r2, #1
 80166d0:	42b2      	cmp	r2, r6
 80166d2:	d00a      	beq.n	80166ea <rcl_wait+0x2fa>
 80166d4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80166d6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80166da:	2900      	cmp	r1, #0
 80166dc:	d1f7      	bne.n	80166ce <rcl_wait+0x2de>
 80166de:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80166e0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80166e4:	3201      	adds	r2, #1
 80166e6:	42b2      	cmp	r2, r6
 80166e8:	d1f4      	bne.n	80166d4 <rcl_wait+0x2e4>
 80166ea:	f1b8 0f02 	cmp.w	r8, #2
 80166ee:	f47f af43 	bne.w	8016578 <rcl_wait+0x188>
 80166f2:	f087 0701 	eor.w	r7, r7, #1
 80166f6:	0078      	lsls	r0, r7, #1
 80166f8:	e73e      	b.n	8016578 <rcl_wait+0x188>
 80166fa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80166fe:	b019      	add	sp, #100	@ 0x64
 8016700:	ecbd 8b02 	vpop	{d8}
 8016704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016708:	ffffffff 	.word	0xffffffff
 801670c:	7fffffff 	.word	0x7fffffff
 8016710:	465f      	mov	r7, fp
 8016712:	f1b8 0f01 	cmp.w	r8, #1
 8016716:	f177 0300 	sbcs.w	r3, r7, #0
 801671a:	db3a      	blt.n	8016792 <rcl_wait+0x3a2>
 801671c:	2601      	movs	r6, #1
 801671e:	ad10      	add	r5, sp, #64	@ 0x40
 8016720:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 8016724:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8016728:	a908      	add	r1, sp, #32
 801672a:	b1a0      	cbz	r0, 8016756 <rcl_wait+0x366>
 801672c:	f7fe fea2 	bl	8015474 <rcl_clock_get_now>
 8016730:	2800      	cmp	r0, #0
 8016732:	f47f af21 	bne.w	8016578 <rcl_wait+0x188>
 8016736:	9a08      	ldr	r2, [sp, #32]
 8016738:	68ab      	ldr	r3, [r5, #8]
 801673a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801673c:	1a9b      	subs	r3, r3, r2
 801673e:	68ea      	ldr	r2, [r5, #12]
 8016740:	eb62 0201 	sbc.w	r2, r2, r1
 8016744:	4598      	cmp	r8, r3
 8016746:	eb77 0102 	sbcs.w	r1, r7, r2
 801674a:	bfba      	itte	lt
 801674c:	4643      	movlt	r3, r8
 801674e:	463a      	movlt	r2, r7
 8016750:	2601      	movge	r6, #1
 8016752:	4698      	mov	r8, r3
 8016754:	4617      	mov	r7, r2
 8016756:	3508      	adds	r5, #8
 8016758:	45a9      	cmp	r9, r5
 801675a:	d1e3      	bne.n	8016724 <rcl_wait+0x334>
 801675c:	2f00      	cmp	r7, #0
 801675e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016760:	bfab      	itete	ge
 8016762:	4640      	movge	r0, r8
 8016764:	2000      	movlt	r0, #0
 8016766:	4639      	movge	r1, r7
 8016768:	2100      	movlt	r1, #0
 801676a:	2e00      	cmp	r6, #0
 801676c:	f43f af24 	beq.w	80165b8 <rcl_wait+0x1c8>
 8016770:	a30d      	add	r3, pc, #52	@ (adr r3, 80167a8 <rcl_wait+0x3b8>)
 8016772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016776:	f7ea f9a9 	bl	8000acc <__aeabi_ldivmod>
 801677a:	ae08      	add	r6, sp, #32
 801677c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016780:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016784:	e718      	b.n	80165b8 <rcl_wait+0x1c8>
 8016786:	2001      	movs	r0, #1
 8016788:	b019      	add	sp, #100	@ 0x64
 801678a:	ecbd 8b02 	vpop	{d8}
 801678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016792:	2600      	movs	r6, #0
 8016794:	f04f 38ff 	mov.w	r8, #4294967295
 8016798:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801679c:	e7bf      	b.n	801671e <rcl_wait+0x32e>
 801679e:	200b      	movs	r0, #11
 80167a0:	4770      	bx	lr
 80167a2:	bf00      	nop
 80167a4:	f3af 8000 	nop.w
 80167a8:	3b9aca00 	.word	0x3b9aca00
 80167ac:	00000000 	.word	0x00000000

080167b0 <rcl_action_take_goal_response>:
 80167b0:	b3b0      	cbz	r0, 8016820 <rcl_action_take_goal_response+0x70>
 80167b2:	b570      	push	{r4, r5, r6, lr}
 80167b4:	4604      	mov	r4, r0
 80167b6:	6800      	ldr	r0, [r0, #0]
 80167b8:	b368      	cbz	r0, 8016816 <rcl_action_take_goal_response+0x66>
 80167ba:	460d      	mov	r5, r1
 80167bc:	4616      	mov	r6, r2
 80167be:	f7fd fe7b 	bl	80144b8 <rcl_client_is_valid>
 80167c2:	b330      	cbz	r0, 8016812 <rcl_action_take_goal_response+0x62>
 80167c4:	6820      	ldr	r0, [r4, #0]
 80167c6:	3004      	adds	r0, #4
 80167c8:	f7fd fe76 	bl	80144b8 <rcl_client_is_valid>
 80167cc:	b308      	cbz	r0, 8016812 <rcl_action_take_goal_response+0x62>
 80167ce:	6820      	ldr	r0, [r4, #0]
 80167d0:	3008      	adds	r0, #8
 80167d2:	f7fd fe71 	bl	80144b8 <rcl_client_is_valid>
 80167d6:	b1e0      	cbz	r0, 8016812 <rcl_action_take_goal_response+0x62>
 80167d8:	6820      	ldr	r0, [r4, #0]
 80167da:	300c      	adds	r0, #12
 80167dc:	f7fe fdae 	bl	801533c <rcl_subscription_is_valid>
 80167e0:	b1b8      	cbz	r0, 8016812 <rcl_action_take_goal_response+0x62>
 80167e2:	6820      	ldr	r0, [r4, #0]
 80167e4:	3010      	adds	r0, #16
 80167e6:	f7fe fda9 	bl	801533c <rcl_subscription_is_valid>
 80167ea:	b190      	cbz	r0, 8016812 <rcl_action_take_goal_response+0x62>
 80167ec:	b1b5      	cbz	r5, 801681c <rcl_action_take_goal_response+0x6c>
 80167ee:	b1ae      	cbz	r6, 801681c <rcl_action_take_goal_response+0x6c>
 80167f0:	6820      	ldr	r0, [r4, #0]
 80167f2:	4632      	mov	r2, r6
 80167f4:	4629      	mov	r1, r5
 80167f6:	f7fd fdf3 	bl	80143e0 <rcl_take_response>
 80167fa:	b148      	cbz	r0, 8016810 <rcl_action_take_goal_response+0x60>
 80167fc:	280a      	cmp	r0, #10
 80167fe:	d007      	beq.n	8016810 <rcl_action_take_goal_response+0x60>
 8016800:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016804:	f241 0307 	movw	r3, #4103	@ 0x1007
 8016808:	4290      	cmp	r0, r2
 801680a:	bf0c      	ite	eq
 801680c:	4618      	moveq	r0, r3
 801680e:	2001      	movne	r0, #1
 8016810:	bd70      	pop	{r4, r5, r6, pc}
 8016812:	f7f5 fa55 	bl	800bcc0 <rcutils_reset_error>
 8016816:	f241 0006 	movw	r0, #4102	@ 0x1006
 801681a:	bd70      	pop	{r4, r5, r6, pc}
 801681c:	200b      	movs	r0, #11
 801681e:	bd70      	pop	{r4, r5, r6, pc}
 8016820:	f241 0006 	movw	r0, #4102	@ 0x1006
 8016824:	4770      	bx	lr
 8016826:	bf00      	nop

08016828 <rcl_action_send_result_request>:
 8016828:	b378      	cbz	r0, 801688a <rcl_action_send_result_request+0x62>
 801682a:	b570      	push	{r4, r5, r6, lr}
 801682c:	4604      	mov	r4, r0
 801682e:	6800      	ldr	r0, [r0, #0]
 8016830:	b330      	cbz	r0, 8016880 <rcl_action_send_result_request+0x58>
 8016832:	460d      	mov	r5, r1
 8016834:	4616      	mov	r6, r2
 8016836:	f7fd fe3f 	bl	80144b8 <rcl_client_is_valid>
 801683a:	b1f8      	cbz	r0, 801687c <rcl_action_send_result_request+0x54>
 801683c:	6820      	ldr	r0, [r4, #0]
 801683e:	3004      	adds	r0, #4
 8016840:	f7fd fe3a 	bl	80144b8 <rcl_client_is_valid>
 8016844:	b1d0      	cbz	r0, 801687c <rcl_action_send_result_request+0x54>
 8016846:	6820      	ldr	r0, [r4, #0]
 8016848:	3008      	adds	r0, #8
 801684a:	f7fd fe35 	bl	80144b8 <rcl_client_is_valid>
 801684e:	b1a8      	cbz	r0, 801687c <rcl_action_send_result_request+0x54>
 8016850:	6820      	ldr	r0, [r4, #0]
 8016852:	300c      	adds	r0, #12
 8016854:	f7fe fd72 	bl	801533c <rcl_subscription_is_valid>
 8016858:	b180      	cbz	r0, 801687c <rcl_action_send_result_request+0x54>
 801685a:	6820      	ldr	r0, [r4, #0]
 801685c:	3010      	adds	r0, #16
 801685e:	f7fe fd6d 	bl	801533c <rcl_subscription_is_valid>
 8016862:	b158      	cbz	r0, 801687c <rcl_action_send_result_request+0x54>
 8016864:	b17d      	cbz	r5, 8016886 <rcl_action_send_result_request+0x5e>
 8016866:	b176      	cbz	r6, 8016886 <rcl_action_send_result_request+0x5e>
 8016868:	6820      	ldr	r0, [r4, #0]
 801686a:	4632      	mov	r2, r6
 801686c:	4629      	mov	r1, r5
 801686e:	3008      	adds	r0, #8
 8016870:	f7fd fd62 	bl	8014338 <rcl_send_request>
 8016874:	3800      	subs	r0, #0
 8016876:	bf18      	it	ne
 8016878:	2001      	movne	r0, #1
 801687a:	bd70      	pop	{r4, r5, r6, pc}
 801687c:	f7f5 fa20 	bl	800bcc0 <rcutils_reset_error>
 8016880:	f241 0006 	movw	r0, #4102	@ 0x1006
 8016884:	bd70      	pop	{r4, r5, r6, pc}
 8016886:	200b      	movs	r0, #11
 8016888:	bd70      	pop	{r4, r5, r6, pc}
 801688a:	f241 0006 	movw	r0, #4102	@ 0x1006
 801688e:	4770      	bx	lr

08016890 <rcl_action_take_result_response>:
 8016890:	2800      	cmp	r0, #0
 8016892:	d037      	beq.n	8016904 <rcl_action_take_result_response+0x74>
 8016894:	b570      	push	{r4, r5, r6, lr}
 8016896:	4604      	mov	r4, r0
 8016898:	6800      	ldr	r0, [r0, #0]
 801689a:	b370      	cbz	r0, 80168fa <rcl_action_take_result_response+0x6a>
 801689c:	460d      	mov	r5, r1
 801689e:	4616      	mov	r6, r2
 80168a0:	f7fd fe0a 	bl	80144b8 <rcl_client_is_valid>
 80168a4:	b338      	cbz	r0, 80168f6 <rcl_action_take_result_response+0x66>
 80168a6:	6820      	ldr	r0, [r4, #0]
 80168a8:	3004      	adds	r0, #4
 80168aa:	f7fd fe05 	bl	80144b8 <rcl_client_is_valid>
 80168ae:	b310      	cbz	r0, 80168f6 <rcl_action_take_result_response+0x66>
 80168b0:	6820      	ldr	r0, [r4, #0]
 80168b2:	3008      	adds	r0, #8
 80168b4:	f7fd fe00 	bl	80144b8 <rcl_client_is_valid>
 80168b8:	b1e8      	cbz	r0, 80168f6 <rcl_action_take_result_response+0x66>
 80168ba:	6820      	ldr	r0, [r4, #0]
 80168bc:	300c      	adds	r0, #12
 80168be:	f7fe fd3d 	bl	801533c <rcl_subscription_is_valid>
 80168c2:	b1c0      	cbz	r0, 80168f6 <rcl_action_take_result_response+0x66>
 80168c4:	6820      	ldr	r0, [r4, #0]
 80168c6:	3010      	adds	r0, #16
 80168c8:	f7fe fd38 	bl	801533c <rcl_subscription_is_valid>
 80168cc:	b198      	cbz	r0, 80168f6 <rcl_action_take_result_response+0x66>
 80168ce:	b1bd      	cbz	r5, 8016900 <rcl_action_take_result_response+0x70>
 80168d0:	b1b6      	cbz	r6, 8016900 <rcl_action_take_result_response+0x70>
 80168d2:	6820      	ldr	r0, [r4, #0]
 80168d4:	4632      	mov	r2, r6
 80168d6:	4629      	mov	r1, r5
 80168d8:	3008      	adds	r0, #8
 80168da:	f7fd fd81 	bl	80143e0 <rcl_take_response>
 80168de:	b148      	cbz	r0, 80168f4 <rcl_action_take_result_response+0x64>
 80168e0:	280a      	cmp	r0, #10
 80168e2:	d007      	beq.n	80168f4 <rcl_action_take_result_response+0x64>
 80168e4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80168e8:	f241 0307 	movw	r3, #4103	@ 0x1007
 80168ec:	4290      	cmp	r0, r2
 80168ee:	bf0c      	ite	eq
 80168f0:	4618      	moveq	r0, r3
 80168f2:	2001      	movne	r0, #1
 80168f4:	bd70      	pop	{r4, r5, r6, pc}
 80168f6:	f7f5 f9e3 	bl	800bcc0 <rcutils_reset_error>
 80168fa:	f241 0006 	movw	r0, #4102	@ 0x1006
 80168fe:	bd70      	pop	{r4, r5, r6, pc}
 8016900:	200b      	movs	r0, #11
 8016902:	bd70      	pop	{r4, r5, r6, pc}
 8016904:	f241 0006 	movw	r0, #4102	@ 0x1006
 8016908:	4770      	bx	lr
 801690a:	bf00      	nop

0801690c <rcl_action_take_cancel_response>:
 801690c:	2800      	cmp	r0, #0
 801690e:	d037      	beq.n	8016980 <rcl_action_take_cancel_response+0x74>
 8016910:	b570      	push	{r4, r5, r6, lr}
 8016912:	4604      	mov	r4, r0
 8016914:	6800      	ldr	r0, [r0, #0]
 8016916:	b370      	cbz	r0, 8016976 <rcl_action_take_cancel_response+0x6a>
 8016918:	460d      	mov	r5, r1
 801691a:	4616      	mov	r6, r2
 801691c:	f7fd fdcc 	bl	80144b8 <rcl_client_is_valid>
 8016920:	b338      	cbz	r0, 8016972 <rcl_action_take_cancel_response+0x66>
 8016922:	6820      	ldr	r0, [r4, #0]
 8016924:	3004      	adds	r0, #4
 8016926:	f7fd fdc7 	bl	80144b8 <rcl_client_is_valid>
 801692a:	b310      	cbz	r0, 8016972 <rcl_action_take_cancel_response+0x66>
 801692c:	6820      	ldr	r0, [r4, #0]
 801692e:	3008      	adds	r0, #8
 8016930:	f7fd fdc2 	bl	80144b8 <rcl_client_is_valid>
 8016934:	b1e8      	cbz	r0, 8016972 <rcl_action_take_cancel_response+0x66>
 8016936:	6820      	ldr	r0, [r4, #0]
 8016938:	300c      	adds	r0, #12
 801693a:	f7fe fcff 	bl	801533c <rcl_subscription_is_valid>
 801693e:	b1c0      	cbz	r0, 8016972 <rcl_action_take_cancel_response+0x66>
 8016940:	6820      	ldr	r0, [r4, #0]
 8016942:	3010      	adds	r0, #16
 8016944:	f7fe fcfa 	bl	801533c <rcl_subscription_is_valid>
 8016948:	b198      	cbz	r0, 8016972 <rcl_action_take_cancel_response+0x66>
 801694a:	b1bd      	cbz	r5, 801697c <rcl_action_take_cancel_response+0x70>
 801694c:	b1b6      	cbz	r6, 801697c <rcl_action_take_cancel_response+0x70>
 801694e:	6820      	ldr	r0, [r4, #0]
 8016950:	4632      	mov	r2, r6
 8016952:	4629      	mov	r1, r5
 8016954:	3004      	adds	r0, #4
 8016956:	f7fd fd43 	bl	80143e0 <rcl_take_response>
 801695a:	b148      	cbz	r0, 8016970 <rcl_action_take_cancel_response+0x64>
 801695c:	280a      	cmp	r0, #10
 801695e:	d007      	beq.n	8016970 <rcl_action_take_cancel_response+0x64>
 8016960:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016964:	f241 0307 	movw	r3, #4103	@ 0x1007
 8016968:	4290      	cmp	r0, r2
 801696a:	bf0c      	ite	eq
 801696c:	4618      	moveq	r0, r3
 801696e:	2001      	movne	r0, #1
 8016970:	bd70      	pop	{r4, r5, r6, pc}
 8016972:	f7f5 f9a5 	bl	800bcc0 <rcutils_reset_error>
 8016976:	f241 0006 	movw	r0, #4102	@ 0x1006
 801697a:	bd70      	pop	{r4, r5, r6, pc}
 801697c:	200b      	movs	r0, #11
 801697e:	bd70      	pop	{r4, r5, r6, pc}
 8016980:	f241 0006 	movw	r0, #4102	@ 0x1006
 8016984:	4770      	bx	lr
 8016986:	bf00      	nop

08016988 <rcl_action_take_feedback>:
 8016988:	2800      	cmp	r0, #0
 801698a:	d037      	beq.n	80169fc <rcl_action_take_feedback+0x74>
 801698c:	b530      	push	{r4, r5, lr}
 801698e:	4604      	mov	r4, r0
 8016990:	6800      	ldr	r0, [r0, #0]
 8016992:	b08f      	sub	sp, #60	@ 0x3c
 8016994:	b358      	cbz	r0, 80169ee <rcl_action_take_feedback+0x66>
 8016996:	460d      	mov	r5, r1
 8016998:	f7fd fd8e 	bl	80144b8 <rcl_client_is_valid>
 801699c:	b328      	cbz	r0, 80169ea <rcl_action_take_feedback+0x62>
 801699e:	6820      	ldr	r0, [r4, #0]
 80169a0:	3004      	adds	r0, #4
 80169a2:	f7fd fd89 	bl	80144b8 <rcl_client_is_valid>
 80169a6:	b300      	cbz	r0, 80169ea <rcl_action_take_feedback+0x62>
 80169a8:	6820      	ldr	r0, [r4, #0]
 80169aa:	3008      	adds	r0, #8
 80169ac:	f7fd fd84 	bl	80144b8 <rcl_client_is_valid>
 80169b0:	b1d8      	cbz	r0, 80169ea <rcl_action_take_feedback+0x62>
 80169b2:	6820      	ldr	r0, [r4, #0]
 80169b4:	300c      	adds	r0, #12
 80169b6:	f7fe fcc1 	bl	801533c <rcl_subscription_is_valid>
 80169ba:	b1b0      	cbz	r0, 80169ea <rcl_action_take_feedback+0x62>
 80169bc:	6820      	ldr	r0, [r4, #0]
 80169be:	3010      	adds	r0, #16
 80169c0:	f7fe fcbc 	bl	801533c <rcl_subscription_is_valid>
 80169c4:	b188      	cbz	r0, 80169ea <rcl_action_take_feedback+0x62>
 80169c6:	b1b5      	cbz	r5, 80169f6 <rcl_action_take_feedback+0x6e>
 80169c8:	6820      	ldr	r0, [r4, #0]
 80169ca:	2300      	movs	r3, #0
 80169cc:	466a      	mov	r2, sp
 80169ce:	4629      	mov	r1, r5
 80169d0:	300c      	adds	r0, #12
 80169d2:	f7fe fc55 	bl	8015280 <rcl_take>
 80169d6:	b160      	cbz	r0, 80169f2 <rcl_action_take_feedback+0x6a>
 80169d8:	f240 1391 	movw	r3, #401	@ 0x191
 80169dc:	4298      	cmp	r0, r3
 80169de:	d010      	beq.n	8016a02 <rcl_action_take_feedback+0x7a>
 80169e0:	280a      	cmp	r0, #10
 80169e2:	bf18      	it	ne
 80169e4:	2001      	movne	r0, #1
 80169e6:	b00f      	add	sp, #60	@ 0x3c
 80169e8:	bd30      	pop	{r4, r5, pc}
 80169ea:	f7f5 f969 	bl	800bcc0 <rcutils_reset_error>
 80169ee:	f241 0006 	movw	r0, #4102	@ 0x1006
 80169f2:	b00f      	add	sp, #60	@ 0x3c
 80169f4:	bd30      	pop	{r4, r5, pc}
 80169f6:	200b      	movs	r0, #11
 80169f8:	b00f      	add	sp, #60	@ 0x3c
 80169fa:	bd30      	pop	{r4, r5, pc}
 80169fc:	f241 0006 	movw	r0, #4102	@ 0x1006
 8016a00:	4770      	bx	lr
 8016a02:	f241 0007 	movw	r0, #4103	@ 0x1007
 8016a06:	e7f4      	b.n	80169f2 <rcl_action_take_feedback+0x6a>

08016a08 <rcl_action_wait_set_add_action_client>:
 8016a08:	2800      	cmp	r0, #0
 8016a0a:	d045      	beq.n	8016a98 <rcl_action_wait_set_add_action_client+0x90>
 8016a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a0e:	460c      	mov	r4, r1
 8016a10:	2900      	cmp	r1, #0
 8016a12:	d03e      	beq.n	8016a92 <rcl_action_wait_set_add_action_client+0x8a>
 8016a14:	4605      	mov	r5, r0
 8016a16:	6808      	ldr	r0, [r1, #0]
 8016a18:	2800      	cmp	r0, #0
 8016a1a:	d03a      	beq.n	8016a92 <rcl_action_wait_set_add_action_client+0x8a>
 8016a1c:	4617      	mov	r7, r2
 8016a1e:	461e      	mov	r6, r3
 8016a20:	f7fd fd4a 	bl	80144b8 <rcl_client_is_valid>
 8016a24:	b398      	cbz	r0, 8016a8e <rcl_action_wait_set_add_action_client+0x86>
 8016a26:	6820      	ldr	r0, [r4, #0]
 8016a28:	3004      	adds	r0, #4
 8016a2a:	f7fd fd45 	bl	80144b8 <rcl_client_is_valid>
 8016a2e:	b370      	cbz	r0, 8016a8e <rcl_action_wait_set_add_action_client+0x86>
 8016a30:	6820      	ldr	r0, [r4, #0]
 8016a32:	3008      	adds	r0, #8
 8016a34:	f7fd fd40 	bl	80144b8 <rcl_client_is_valid>
 8016a38:	b348      	cbz	r0, 8016a8e <rcl_action_wait_set_add_action_client+0x86>
 8016a3a:	6820      	ldr	r0, [r4, #0]
 8016a3c:	300c      	adds	r0, #12
 8016a3e:	f7fe fc7d 	bl	801533c <rcl_subscription_is_valid>
 8016a42:	b320      	cbz	r0, 8016a8e <rcl_action_wait_set_add_action_client+0x86>
 8016a44:	6820      	ldr	r0, [r4, #0]
 8016a46:	3010      	adds	r0, #16
 8016a48:	f7fe fc78 	bl	801533c <rcl_subscription_is_valid>
 8016a4c:	b1f8      	cbz	r0, 8016a8e <rcl_action_wait_set_add_action_client+0x86>
 8016a4e:	6821      	ldr	r1, [r4, #0]
 8016a50:	4628      	mov	r0, r5
 8016a52:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8016a56:	f7ff fc71 	bl	801633c <rcl_wait_set_add_client>
 8016a5a:	b9b8      	cbnz	r0, 8016a8c <rcl_action_wait_set_add_action_client+0x84>
 8016a5c:	6821      	ldr	r1, [r4, #0]
 8016a5e:	4628      	mov	r0, r5
 8016a60:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8016a64:	3104      	adds	r1, #4
 8016a66:	f7ff fc69 	bl	801633c <rcl_wait_set_add_client>
 8016a6a:	b978      	cbnz	r0, 8016a8c <rcl_action_wait_set_add_action_client+0x84>
 8016a6c:	6821      	ldr	r1, [r4, #0]
 8016a6e:	4628      	mov	r0, r5
 8016a70:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8016a74:	3108      	adds	r1, #8
 8016a76:	f7ff fc61 	bl	801633c <rcl_wait_set_add_client>
 8016a7a:	b938      	cbnz	r0, 8016a8c <rcl_action_wait_set_add_action_client+0x84>
 8016a7c:	6821      	ldr	r1, [r4, #0]
 8016a7e:	4628      	mov	r0, r5
 8016a80:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016a84:	310c      	adds	r1, #12
 8016a86:	f7ff f903 	bl	8015c90 <rcl_wait_set_add_subscription>
 8016a8a:	b140      	cbz	r0, 8016a9e <rcl_action_wait_set_add_action_client+0x96>
 8016a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a8e:	f7f5 f917 	bl	800bcc0 <rcutils_reset_error>
 8016a92:	f241 0006 	movw	r0, #4102	@ 0x1006
 8016a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a98:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016a9c:	4770      	bx	lr
 8016a9e:	6821      	ldr	r1, [r4, #0]
 8016aa0:	4628      	mov	r0, r5
 8016aa2:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8016aa6:	3110      	adds	r1, #16
 8016aa8:	f7ff f8f2 	bl	8015c90 <rcl_wait_set_add_subscription>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	d1ed      	bne.n	8016a8c <rcl_action_wait_set_add_action_client+0x84>
 8016ab0:	b11f      	cbz	r7, 8016aba <rcl_action_wait_set_add_action_client+0xb2>
 8016ab2:	6823      	ldr	r3, [r4, #0]
 8016ab4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8016ab8:	603b      	str	r3, [r7, #0]
 8016aba:	2e00      	cmp	r6, #0
 8016abc:	d0e6      	beq.n	8016a8c <rcl_action_wait_set_add_action_client+0x84>
 8016abe:	6823      	ldr	r3, [r4, #0]
 8016ac0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8016ac4:	6033      	str	r3, [r6, #0]
 8016ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016ac8 <rcl_action_client_wait_set_get_entities_ready>:
 8016ac8:	2800      	cmp	r0, #0
 8016aca:	f000 8089 	beq.w	8016be0 <rcl_action_client_wait_set_get_entities_ready+0x118>
 8016ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ad2:	460c      	mov	r4, r1
 8016ad4:	2900      	cmp	r1, #0
 8016ad6:	d079      	beq.n	8016bcc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016ad8:	4605      	mov	r5, r0
 8016ada:	6808      	ldr	r0, [r1, #0]
 8016adc:	2800      	cmp	r0, #0
 8016ade:	d075      	beq.n	8016bcc <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016ae0:	4616      	mov	r6, r2
 8016ae2:	461f      	mov	r7, r3
 8016ae4:	f7fd fce8 	bl	80144b8 <rcl_client_is_valid>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d06d      	beq.n	8016bc8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016aec:	6820      	ldr	r0, [r4, #0]
 8016aee:	3004      	adds	r0, #4
 8016af0:	f7fd fce2 	bl	80144b8 <rcl_client_is_valid>
 8016af4:	2800      	cmp	r0, #0
 8016af6:	d067      	beq.n	8016bc8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016af8:	6820      	ldr	r0, [r4, #0]
 8016afa:	3008      	adds	r0, #8
 8016afc:	f7fd fcdc 	bl	80144b8 <rcl_client_is_valid>
 8016b00:	2800      	cmp	r0, #0
 8016b02:	d061      	beq.n	8016bc8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016b04:	6820      	ldr	r0, [r4, #0]
 8016b06:	300c      	adds	r0, #12
 8016b08:	f7fe fc18 	bl	801533c <rcl_subscription_is_valid>
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	d05b      	beq.n	8016bc8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016b10:	6820      	ldr	r0, [r4, #0]
 8016b12:	3010      	adds	r0, #16
 8016b14:	f7fe fc12 	bl	801533c <rcl_subscription_is_valid>
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	d055      	beq.n	8016bc8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016b1c:	2e00      	cmp	r6, #0
 8016b1e:	d05c      	beq.n	8016bda <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016b20:	2f00      	cmp	r7, #0
 8016b22:	d05a      	beq.n	8016bda <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016b24:	9b06      	ldr	r3, [sp, #24]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d057      	beq.n	8016bda <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016b2a:	9b07      	ldr	r3, [sp, #28]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d054      	beq.n	8016bda <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016b30:	9b08      	ldr	r3, [sp, #32]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d051      	beq.n	8016bda <rcl_action_client_wait_set_get_entities_ready+0x112>
 8016b36:	6823      	ldr	r3, [r4, #0]
 8016b38:	686a      	ldr	r2, [r5, #4]
 8016b3a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8016b3e:	428a      	cmp	r2, r1
 8016b40:	d948      	bls.n	8016bd4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016b42:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8016b46:	4282      	cmp	r2, r0
 8016b48:	d944      	bls.n	8016bd4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016b4a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8016b4e:	69ea      	ldr	r2, [r5, #28]
 8016b50:	42a2      	cmp	r2, r4
 8016b52:	d93f      	bls.n	8016bd4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016b54:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8016b58:	4562      	cmp	r2, ip
 8016b5a:	d93b      	bls.n	8016bd4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016b5c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8016b60:	4572      	cmp	r2, lr
 8016b62:	d937      	bls.n	8016bd4 <rcl_action_client_wait_set_get_entities_ready+0x10c>
 8016b64:	69aa      	ldr	r2, [r5, #24]
 8016b66:	682d      	ldr	r5, [r5, #0]
 8016b68:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8016b6c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8016b70:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8016b74:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016b78:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016b7c:	f103 0c0c 	add.w	ip, r3, #12
 8016b80:	eba5 050c 	sub.w	r5, r5, ip
 8016b84:	fab5 f585 	clz	r5, r5
 8016b88:	096d      	lsrs	r5, r5, #5
 8016b8a:	7035      	strb	r5, [r6, #0]
 8016b8c:	f103 0510 	add.w	r5, r3, #16
 8016b90:	1b64      	subs	r4, r4, r5
 8016b92:	fab4 f484 	clz	r4, r4
 8016b96:	0964      	lsrs	r4, r4, #5
 8016b98:	703c      	strb	r4, [r7, #0]
 8016b9a:	eba3 0008 	sub.w	r0, r3, r8
 8016b9e:	1d1c      	adds	r4, r3, #4
 8016ba0:	3308      	adds	r3, #8
 8016ba2:	1ad3      	subs	r3, r2, r3
 8016ba4:	fab0 f080 	clz	r0, r0
 8016ba8:	9a06      	ldr	r2, [sp, #24]
 8016baa:	0940      	lsrs	r0, r0, #5
 8016bac:	1b09      	subs	r1, r1, r4
 8016bae:	7010      	strb	r0, [r2, #0]
 8016bb0:	fab1 f181 	clz	r1, r1
 8016bb4:	9a07      	ldr	r2, [sp, #28]
 8016bb6:	0949      	lsrs	r1, r1, #5
 8016bb8:	7011      	strb	r1, [r2, #0]
 8016bba:	fab3 f383 	clz	r3, r3
 8016bbe:	9a08      	ldr	r2, [sp, #32]
 8016bc0:	095b      	lsrs	r3, r3, #5
 8016bc2:	2000      	movs	r0, #0
 8016bc4:	7013      	strb	r3, [r2, #0]
 8016bc6:	e003      	b.n	8016bd0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016bc8:	f7f5 f87a 	bl	800bcc0 <rcutils_reset_error>
 8016bcc:	f241 0006 	movw	r0, #4102	@ 0x1006
 8016bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bd4:	2001      	movs	r0, #1
 8016bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bda:	200b      	movs	r0, #11
 8016bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016be0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016be4:	4770      	bx	lr
 8016be6:	bf00      	nop

08016be8 <rcl_action_take_goal_request>:
 8016be8:	b3b0      	cbz	r0, 8016c58 <rcl_action_take_goal_request+0x70>
 8016bea:	b570      	push	{r4, r5, r6, lr}
 8016bec:	4604      	mov	r4, r0
 8016bee:	6800      	ldr	r0, [r0, #0]
 8016bf0:	b368      	cbz	r0, 8016c4e <rcl_action_take_goal_request+0x66>
 8016bf2:	460d      	mov	r5, r1
 8016bf4:	4616      	mov	r6, r2
 8016bf6:	f7fe f9ef 	bl	8014fd8 <rcl_service_is_valid>
 8016bfa:	b330      	cbz	r0, 8016c4a <rcl_action_take_goal_request+0x62>
 8016bfc:	6820      	ldr	r0, [r4, #0]
 8016bfe:	3004      	adds	r0, #4
 8016c00:	f7fe f9ea 	bl	8014fd8 <rcl_service_is_valid>
 8016c04:	b308      	cbz	r0, 8016c4a <rcl_action_take_goal_request+0x62>
 8016c06:	6820      	ldr	r0, [r4, #0]
 8016c08:	3008      	adds	r0, #8
 8016c0a:	f7fe f9e5 	bl	8014fd8 <rcl_service_is_valid>
 8016c0e:	b1e0      	cbz	r0, 8016c4a <rcl_action_take_goal_request+0x62>
 8016c10:	6820      	ldr	r0, [r4, #0]
 8016c12:	300c      	adds	r0, #12
 8016c14:	f7f4 f8c4 	bl	800ada0 <rcl_publisher_is_valid>
 8016c18:	b1b8      	cbz	r0, 8016c4a <rcl_action_take_goal_request+0x62>
 8016c1a:	6820      	ldr	r0, [r4, #0]
 8016c1c:	3010      	adds	r0, #16
 8016c1e:	f7f4 f8bf 	bl	800ada0 <rcl_publisher_is_valid>
 8016c22:	b190      	cbz	r0, 8016c4a <rcl_action_take_goal_request+0x62>
 8016c24:	b1b5      	cbz	r5, 8016c54 <rcl_action_take_goal_request+0x6c>
 8016c26:	b1ae      	cbz	r6, 8016c54 <rcl_action_take_goal_request+0x6c>
 8016c28:	6820      	ldr	r0, [r4, #0]
 8016c2a:	4632      	mov	r2, r6
 8016c2c:	4629      	mov	r1, r5
 8016c2e:	f7fe f953 	bl	8014ed8 <rcl_take_request>
 8016c32:	b148      	cbz	r0, 8016c48 <rcl_action_take_goal_request+0x60>
 8016c34:	280a      	cmp	r0, #10
 8016c36:	d007      	beq.n	8016c48 <rcl_action_take_goal_request+0x60>
 8016c38:	f240 2259 	movw	r2, #601	@ 0x259
 8016c3c:	f241 0369 	movw	r3, #4201	@ 0x1069
 8016c40:	4290      	cmp	r0, r2
 8016c42:	bf0c      	ite	eq
 8016c44:	4618      	moveq	r0, r3
 8016c46:	2001      	movne	r0, #1
 8016c48:	bd70      	pop	{r4, r5, r6, pc}
 8016c4a:	f7f5 f839 	bl	800bcc0 <rcutils_reset_error>
 8016c4e:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016c52:	bd70      	pop	{r4, r5, r6, pc}
 8016c54:	200b      	movs	r0, #11
 8016c56:	bd70      	pop	{r4, r5, r6, pc}
 8016c58:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016c5c:	4770      	bx	lr
 8016c5e:	bf00      	nop

08016c60 <rcl_action_send_goal_response>:
 8016c60:	b378      	cbz	r0, 8016cc2 <rcl_action_send_goal_response+0x62>
 8016c62:	b570      	push	{r4, r5, r6, lr}
 8016c64:	4604      	mov	r4, r0
 8016c66:	6800      	ldr	r0, [r0, #0]
 8016c68:	b330      	cbz	r0, 8016cb8 <rcl_action_send_goal_response+0x58>
 8016c6a:	460d      	mov	r5, r1
 8016c6c:	4616      	mov	r6, r2
 8016c6e:	f7fe f9b3 	bl	8014fd8 <rcl_service_is_valid>
 8016c72:	b1f8      	cbz	r0, 8016cb4 <rcl_action_send_goal_response+0x54>
 8016c74:	6820      	ldr	r0, [r4, #0]
 8016c76:	3004      	adds	r0, #4
 8016c78:	f7fe f9ae 	bl	8014fd8 <rcl_service_is_valid>
 8016c7c:	b1d0      	cbz	r0, 8016cb4 <rcl_action_send_goal_response+0x54>
 8016c7e:	6820      	ldr	r0, [r4, #0]
 8016c80:	3008      	adds	r0, #8
 8016c82:	f7fe f9a9 	bl	8014fd8 <rcl_service_is_valid>
 8016c86:	b1a8      	cbz	r0, 8016cb4 <rcl_action_send_goal_response+0x54>
 8016c88:	6820      	ldr	r0, [r4, #0]
 8016c8a:	300c      	adds	r0, #12
 8016c8c:	f7f4 f888 	bl	800ada0 <rcl_publisher_is_valid>
 8016c90:	b180      	cbz	r0, 8016cb4 <rcl_action_send_goal_response+0x54>
 8016c92:	6820      	ldr	r0, [r4, #0]
 8016c94:	3010      	adds	r0, #16
 8016c96:	f7f4 f883 	bl	800ada0 <rcl_publisher_is_valid>
 8016c9a:	b158      	cbz	r0, 8016cb4 <rcl_action_send_goal_response+0x54>
 8016c9c:	b17d      	cbz	r5, 8016cbe <rcl_action_send_goal_response+0x5e>
 8016c9e:	b176      	cbz	r6, 8016cbe <rcl_action_send_goal_response+0x5e>
 8016ca0:	6820      	ldr	r0, [r4, #0]
 8016ca2:	4632      	mov	r2, r6
 8016ca4:	4629      	mov	r1, r5
 8016ca6:	f7fe f967 	bl	8014f78 <rcl_send_response>
 8016caa:	b110      	cbz	r0, 8016cb2 <rcl_action_send_goal_response+0x52>
 8016cac:	2802      	cmp	r0, #2
 8016cae:	bf18      	it	ne
 8016cb0:	2001      	movne	r0, #1
 8016cb2:	bd70      	pop	{r4, r5, r6, pc}
 8016cb4:	f7f5 f804 	bl	800bcc0 <rcutils_reset_error>
 8016cb8:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016cbc:	bd70      	pop	{r4, r5, r6, pc}
 8016cbe:	200b      	movs	r0, #11
 8016cc0:	bd70      	pop	{r4, r5, r6, pc}
 8016cc2:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016cc6:	4770      	bx	lr

08016cc8 <rcl_action_take_result_request>:
 8016cc8:	2800      	cmp	r0, #0
 8016cca:	d037      	beq.n	8016d3c <rcl_action_take_result_request+0x74>
 8016ccc:	b570      	push	{r4, r5, r6, lr}
 8016cce:	4604      	mov	r4, r0
 8016cd0:	6800      	ldr	r0, [r0, #0]
 8016cd2:	b370      	cbz	r0, 8016d32 <rcl_action_take_result_request+0x6a>
 8016cd4:	460d      	mov	r5, r1
 8016cd6:	4616      	mov	r6, r2
 8016cd8:	f7fe f97e 	bl	8014fd8 <rcl_service_is_valid>
 8016cdc:	b338      	cbz	r0, 8016d2e <rcl_action_take_result_request+0x66>
 8016cde:	6820      	ldr	r0, [r4, #0]
 8016ce0:	3004      	adds	r0, #4
 8016ce2:	f7fe f979 	bl	8014fd8 <rcl_service_is_valid>
 8016ce6:	b310      	cbz	r0, 8016d2e <rcl_action_take_result_request+0x66>
 8016ce8:	6820      	ldr	r0, [r4, #0]
 8016cea:	3008      	adds	r0, #8
 8016cec:	f7fe f974 	bl	8014fd8 <rcl_service_is_valid>
 8016cf0:	b1e8      	cbz	r0, 8016d2e <rcl_action_take_result_request+0x66>
 8016cf2:	6820      	ldr	r0, [r4, #0]
 8016cf4:	300c      	adds	r0, #12
 8016cf6:	f7f4 f853 	bl	800ada0 <rcl_publisher_is_valid>
 8016cfa:	b1c0      	cbz	r0, 8016d2e <rcl_action_take_result_request+0x66>
 8016cfc:	6820      	ldr	r0, [r4, #0]
 8016cfe:	3010      	adds	r0, #16
 8016d00:	f7f4 f84e 	bl	800ada0 <rcl_publisher_is_valid>
 8016d04:	b198      	cbz	r0, 8016d2e <rcl_action_take_result_request+0x66>
 8016d06:	b1bd      	cbz	r5, 8016d38 <rcl_action_take_result_request+0x70>
 8016d08:	b1b6      	cbz	r6, 8016d38 <rcl_action_take_result_request+0x70>
 8016d0a:	6820      	ldr	r0, [r4, #0]
 8016d0c:	4632      	mov	r2, r6
 8016d0e:	4629      	mov	r1, r5
 8016d10:	3008      	adds	r0, #8
 8016d12:	f7fe f8e1 	bl	8014ed8 <rcl_take_request>
 8016d16:	b148      	cbz	r0, 8016d2c <rcl_action_take_result_request+0x64>
 8016d18:	280a      	cmp	r0, #10
 8016d1a:	d007      	beq.n	8016d2c <rcl_action_take_result_request+0x64>
 8016d1c:	f240 2259 	movw	r2, #601	@ 0x259
 8016d20:	f241 0369 	movw	r3, #4201	@ 0x1069
 8016d24:	4290      	cmp	r0, r2
 8016d26:	bf0c      	ite	eq
 8016d28:	4618      	moveq	r0, r3
 8016d2a:	2001      	movne	r0, #1
 8016d2c:	bd70      	pop	{r4, r5, r6, pc}
 8016d2e:	f7f4 ffc7 	bl	800bcc0 <rcutils_reset_error>
 8016d32:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016d36:	bd70      	pop	{r4, r5, r6, pc}
 8016d38:	200b      	movs	r0, #11
 8016d3a:	bd70      	pop	{r4, r5, r6, pc}
 8016d3c:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016d40:	4770      	bx	lr
 8016d42:	bf00      	nop

08016d44 <rcl_action_take_cancel_request>:
 8016d44:	2800      	cmp	r0, #0
 8016d46:	d037      	beq.n	8016db8 <rcl_action_take_cancel_request+0x74>
 8016d48:	b570      	push	{r4, r5, r6, lr}
 8016d4a:	4604      	mov	r4, r0
 8016d4c:	6800      	ldr	r0, [r0, #0]
 8016d4e:	b370      	cbz	r0, 8016dae <rcl_action_take_cancel_request+0x6a>
 8016d50:	460d      	mov	r5, r1
 8016d52:	4616      	mov	r6, r2
 8016d54:	f7fe f940 	bl	8014fd8 <rcl_service_is_valid>
 8016d58:	b338      	cbz	r0, 8016daa <rcl_action_take_cancel_request+0x66>
 8016d5a:	6820      	ldr	r0, [r4, #0]
 8016d5c:	3004      	adds	r0, #4
 8016d5e:	f7fe f93b 	bl	8014fd8 <rcl_service_is_valid>
 8016d62:	b310      	cbz	r0, 8016daa <rcl_action_take_cancel_request+0x66>
 8016d64:	6820      	ldr	r0, [r4, #0]
 8016d66:	3008      	adds	r0, #8
 8016d68:	f7fe f936 	bl	8014fd8 <rcl_service_is_valid>
 8016d6c:	b1e8      	cbz	r0, 8016daa <rcl_action_take_cancel_request+0x66>
 8016d6e:	6820      	ldr	r0, [r4, #0]
 8016d70:	300c      	adds	r0, #12
 8016d72:	f7f4 f815 	bl	800ada0 <rcl_publisher_is_valid>
 8016d76:	b1c0      	cbz	r0, 8016daa <rcl_action_take_cancel_request+0x66>
 8016d78:	6820      	ldr	r0, [r4, #0]
 8016d7a:	3010      	adds	r0, #16
 8016d7c:	f7f4 f810 	bl	800ada0 <rcl_publisher_is_valid>
 8016d80:	b198      	cbz	r0, 8016daa <rcl_action_take_cancel_request+0x66>
 8016d82:	b1bd      	cbz	r5, 8016db4 <rcl_action_take_cancel_request+0x70>
 8016d84:	b1b6      	cbz	r6, 8016db4 <rcl_action_take_cancel_request+0x70>
 8016d86:	6820      	ldr	r0, [r4, #0]
 8016d88:	4632      	mov	r2, r6
 8016d8a:	4629      	mov	r1, r5
 8016d8c:	3004      	adds	r0, #4
 8016d8e:	f7fe f8a3 	bl	8014ed8 <rcl_take_request>
 8016d92:	b148      	cbz	r0, 8016da8 <rcl_action_take_cancel_request+0x64>
 8016d94:	280a      	cmp	r0, #10
 8016d96:	d007      	beq.n	8016da8 <rcl_action_take_cancel_request+0x64>
 8016d98:	f240 2259 	movw	r2, #601	@ 0x259
 8016d9c:	f241 0369 	movw	r3, #4201	@ 0x1069
 8016da0:	4290      	cmp	r0, r2
 8016da2:	bf0c      	ite	eq
 8016da4:	4618      	moveq	r0, r3
 8016da6:	2001      	movne	r0, #1
 8016da8:	bd70      	pop	{r4, r5, r6, pc}
 8016daa:	f7f4 ff89 	bl	800bcc0 <rcutils_reset_error>
 8016dae:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016db2:	bd70      	pop	{r4, r5, r6, pc}
 8016db4:	200b      	movs	r0, #11
 8016db6:	bd70      	pop	{r4, r5, r6, pc}
 8016db8:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop

08016dc0 <rcl_action_send_cancel_response>:
 8016dc0:	b380      	cbz	r0, 8016e24 <rcl_action_send_cancel_response+0x64>
 8016dc2:	b570      	push	{r4, r5, r6, lr}
 8016dc4:	4604      	mov	r4, r0
 8016dc6:	6800      	ldr	r0, [r0, #0]
 8016dc8:	b338      	cbz	r0, 8016e1a <rcl_action_send_cancel_response+0x5a>
 8016dca:	460d      	mov	r5, r1
 8016dcc:	4616      	mov	r6, r2
 8016dce:	f7fe f903 	bl	8014fd8 <rcl_service_is_valid>
 8016dd2:	b300      	cbz	r0, 8016e16 <rcl_action_send_cancel_response+0x56>
 8016dd4:	6820      	ldr	r0, [r4, #0]
 8016dd6:	3004      	adds	r0, #4
 8016dd8:	f7fe f8fe 	bl	8014fd8 <rcl_service_is_valid>
 8016ddc:	b1d8      	cbz	r0, 8016e16 <rcl_action_send_cancel_response+0x56>
 8016dde:	6820      	ldr	r0, [r4, #0]
 8016de0:	3008      	adds	r0, #8
 8016de2:	f7fe f8f9 	bl	8014fd8 <rcl_service_is_valid>
 8016de6:	b1b0      	cbz	r0, 8016e16 <rcl_action_send_cancel_response+0x56>
 8016de8:	6820      	ldr	r0, [r4, #0]
 8016dea:	300c      	adds	r0, #12
 8016dec:	f7f3 ffd8 	bl	800ada0 <rcl_publisher_is_valid>
 8016df0:	b188      	cbz	r0, 8016e16 <rcl_action_send_cancel_response+0x56>
 8016df2:	6820      	ldr	r0, [r4, #0]
 8016df4:	3010      	adds	r0, #16
 8016df6:	f7f3 ffd3 	bl	800ada0 <rcl_publisher_is_valid>
 8016dfa:	b160      	cbz	r0, 8016e16 <rcl_action_send_cancel_response+0x56>
 8016dfc:	b185      	cbz	r5, 8016e20 <rcl_action_send_cancel_response+0x60>
 8016dfe:	b17e      	cbz	r6, 8016e20 <rcl_action_send_cancel_response+0x60>
 8016e00:	6820      	ldr	r0, [r4, #0]
 8016e02:	4632      	mov	r2, r6
 8016e04:	4629      	mov	r1, r5
 8016e06:	3004      	adds	r0, #4
 8016e08:	f7fe f8b6 	bl	8014f78 <rcl_send_response>
 8016e0c:	b110      	cbz	r0, 8016e14 <rcl_action_send_cancel_response+0x54>
 8016e0e:	2802      	cmp	r0, #2
 8016e10:	bf18      	it	ne
 8016e12:	2001      	movne	r0, #1
 8016e14:	bd70      	pop	{r4, r5, r6, pc}
 8016e16:	f7f4 ff53 	bl	800bcc0 <rcutils_reset_error>
 8016e1a:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016e1e:	bd70      	pop	{r4, r5, r6, pc}
 8016e20:	200b      	movs	r0, #11
 8016e22:	bd70      	pop	{r4, r5, r6, pc}
 8016e24:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016e28:	4770      	bx	lr
 8016e2a:	bf00      	nop

08016e2c <rcl_action_wait_set_add_action_server>:
 8016e2c:	2800      	cmp	r0, #0
 8016e2e:	d04a      	beq.n	8016ec6 <rcl_action_wait_set_add_action_server+0x9a>
 8016e30:	b570      	push	{r4, r5, r6, lr}
 8016e32:	460c      	mov	r4, r1
 8016e34:	2900      	cmp	r1, #0
 8016e36:	d043      	beq.n	8016ec0 <rcl_action_wait_set_add_action_server+0x94>
 8016e38:	4605      	mov	r5, r0
 8016e3a:	6808      	ldr	r0, [r1, #0]
 8016e3c:	2800      	cmp	r0, #0
 8016e3e:	d03f      	beq.n	8016ec0 <rcl_action_wait_set_add_action_server+0x94>
 8016e40:	4616      	mov	r6, r2
 8016e42:	f7fe f8c9 	bl	8014fd8 <rcl_service_is_valid>
 8016e46:	2800      	cmp	r0, #0
 8016e48:	d038      	beq.n	8016ebc <rcl_action_wait_set_add_action_server+0x90>
 8016e4a:	6820      	ldr	r0, [r4, #0]
 8016e4c:	3004      	adds	r0, #4
 8016e4e:	f7fe f8c3 	bl	8014fd8 <rcl_service_is_valid>
 8016e52:	b398      	cbz	r0, 8016ebc <rcl_action_wait_set_add_action_server+0x90>
 8016e54:	6820      	ldr	r0, [r4, #0]
 8016e56:	3008      	adds	r0, #8
 8016e58:	f7fe f8be 	bl	8014fd8 <rcl_service_is_valid>
 8016e5c:	b370      	cbz	r0, 8016ebc <rcl_action_wait_set_add_action_server+0x90>
 8016e5e:	6820      	ldr	r0, [r4, #0]
 8016e60:	300c      	adds	r0, #12
 8016e62:	f7f3 ffb7 	bl	800add4 <rcl_publisher_is_valid_except_context>
 8016e66:	b348      	cbz	r0, 8016ebc <rcl_action_wait_set_add_action_server+0x90>
 8016e68:	6820      	ldr	r0, [r4, #0]
 8016e6a:	3010      	adds	r0, #16
 8016e6c:	f7f3 ffb2 	bl	800add4 <rcl_publisher_is_valid_except_context>
 8016e70:	b320      	cbz	r0, 8016ebc <rcl_action_wait_set_add_action_server+0x90>
 8016e72:	6821      	ldr	r1, [r4, #0]
 8016e74:	4628      	mov	r0, r5
 8016e76:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8016e7a:	f7ff fa8b 	bl	8016394 <rcl_wait_set_add_service>
 8016e7e:	b9e0      	cbnz	r0, 8016eba <rcl_action_wait_set_add_action_server+0x8e>
 8016e80:	6821      	ldr	r1, [r4, #0]
 8016e82:	4628      	mov	r0, r5
 8016e84:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8016e88:	3104      	adds	r1, #4
 8016e8a:	f7ff fa83 	bl	8016394 <rcl_wait_set_add_service>
 8016e8e:	b9a0      	cbnz	r0, 8016eba <rcl_action_wait_set_add_action_server+0x8e>
 8016e90:	6821      	ldr	r1, [r4, #0]
 8016e92:	4628      	mov	r0, r5
 8016e94:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8016e98:	3108      	adds	r1, #8
 8016e9a:	f7ff fa7b 	bl	8016394 <rcl_wait_set_add_service>
 8016e9e:	b960      	cbnz	r0, 8016eba <rcl_action_wait_set_add_action_server+0x8e>
 8016ea0:	6821      	ldr	r1, [r4, #0]
 8016ea2:	4628      	mov	r0, r5
 8016ea4:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016ea8:	3114      	adds	r1, #20
 8016eaa:	f7ff fa17 	bl	80162dc <rcl_wait_set_add_timer>
 8016eae:	b920      	cbnz	r0, 8016eba <rcl_action_wait_set_add_action_server+0x8e>
 8016eb0:	b11e      	cbz	r6, 8016eba <rcl_action_wait_set_add_action_server+0x8e>
 8016eb2:	6823      	ldr	r3, [r4, #0]
 8016eb4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016eb8:	6033      	str	r3, [r6, #0]
 8016eba:	bd70      	pop	{r4, r5, r6, pc}
 8016ebc:	f7f4 ff00 	bl	800bcc0 <rcutils_reset_error>
 8016ec0:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016ec4:	bd70      	pop	{r4, r5, r6, pc}
 8016ec6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016eca:	4770      	bx	lr

08016ecc <rcl_action_server_wait_set_get_entities_ready>:
 8016ecc:	2800      	cmp	r0, #0
 8016ece:	d060      	beq.n	8016f92 <rcl_action_server_wait_set_get_entities_ready+0xc6>
 8016ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ed2:	460c      	mov	r4, r1
 8016ed4:	2900      	cmp	r1, #0
 8016ed6:	d057      	beq.n	8016f88 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8016ed8:	4605      	mov	r5, r0
 8016eda:	6808      	ldr	r0, [r1, #0]
 8016edc:	2800      	cmp	r0, #0
 8016ede:	d053      	beq.n	8016f88 <rcl_action_server_wait_set_get_entities_ready+0xbc>
 8016ee0:	4616      	mov	r6, r2
 8016ee2:	461f      	mov	r7, r3
 8016ee4:	f7fe f878 	bl	8014fd8 <rcl_service_is_valid>
 8016ee8:	2800      	cmp	r0, #0
 8016eea:	d04b      	beq.n	8016f84 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8016eec:	6820      	ldr	r0, [r4, #0]
 8016eee:	3004      	adds	r0, #4
 8016ef0:	f7fe f872 	bl	8014fd8 <rcl_service_is_valid>
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	d045      	beq.n	8016f84 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8016ef8:	6820      	ldr	r0, [r4, #0]
 8016efa:	3008      	adds	r0, #8
 8016efc:	f7fe f86c 	bl	8014fd8 <rcl_service_is_valid>
 8016f00:	2800      	cmp	r0, #0
 8016f02:	d03f      	beq.n	8016f84 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8016f04:	6820      	ldr	r0, [r4, #0]
 8016f06:	300c      	adds	r0, #12
 8016f08:	f7f3 ff64 	bl	800add4 <rcl_publisher_is_valid_except_context>
 8016f0c:	2800      	cmp	r0, #0
 8016f0e:	d039      	beq.n	8016f84 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8016f10:	6820      	ldr	r0, [r4, #0]
 8016f12:	3010      	adds	r0, #16
 8016f14:	f7f3 ff5e 	bl	800add4 <rcl_publisher_is_valid_except_context>
 8016f18:	b3a0      	cbz	r0, 8016f84 <rcl_action_server_wait_set_get_entities_ready+0xb8>
 8016f1a:	b3c6      	cbz	r6, 8016f8e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8016f1c:	b3bf      	cbz	r7, 8016f8e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8016f1e:	9b06      	ldr	r3, [sp, #24]
 8016f20:	b3ab      	cbz	r3, 8016f8e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8016f22:	9b07      	ldr	r3, [sp, #28]
 8016f24:	b39b      	cbz	r3, 8016f8e <rcl_action_server_wait_set_get_entities_ready+0xc2>
 8016f26:	6823      	ldr	r3, [r4, #0]
 8016f28:	692a      	ldr	r2, [r5, #16]
 8016f2a:	6a2c      	ldr	r4, [r5, #32]
 8016f2c:	f8d3 11e0 	ldr.w	r1, [r3, #480]	@ 0x1e0
 8016f30:	f8d3 51e8 	ldr.w	r5, [r3, #488]	@ 0x1e8
 8016f34:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
 8016f38:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8016f3c:	f8d3 11e4 	ldr.w	r1, [r3, #484]	@ 0x1e4
 8016f40:	f8d3 51dc 	ldr.w	r5, [r3, #476]	@ 0x1dc
 8016f44:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8016f48:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016f4c:	1ae4      	subs	r4, r4, r3
 8016f4e:	fab4 f484 	clz	r4, r4
 8016f52:	0964      	lsrs	r4, r4, #5
 8016f54:	7034      	strb	r4, [r6, #0]
 8016f56:	1d1c      	adds	r4, r3, #4
 8016f58:	1b00      	subs	r0, r0, r4
 8016f5a:	fab0 f080 	clz	r0, r0
 8016f5e:	0940      	lsrs	r0, r0, #5
 8016f60:	7038      	strb	r0, [r7, #0]
 8016f62:	f103 0008 	add.w	r0, r3, #8
 8016f66:	1a09      	subs	r1, r1, r0
 8016f68:	3314      	adds	r3, #20
 8016f6a:	1ad3      	subs	r3, r2, r3
 8016f6c:	fab1 f181 	clz	r1, r1
 8016f70:	9a06      	ldr	r2, [sp, #24]
 8016f72:	0949      	lsrs	r1, r1, #5
 8016f74:	7011      	strb	r1, [r2, #0]
 8016f76:	fab3 f383 	clz	r3, r3
 8016f7a:	9a07      	ldr	r2, [sp, #28]
 8016f7c:	095b      	lsrs	r3, r3, #5
 8016f7e:	2000      	movs	r0, #0
 8016f80:	7013      	strb	r3, [r2, #0]
 8016f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f84:	f7f4 fe9c 	bl	800bcc0 <rcutils_reset_error>
 8016f88:	f241 0068 	movw	r0, #4200	@ 0x1068
 8016f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f8e:	200b      	movs	r0, #11
 8016f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f92:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016f96:	4770      	bx	lr

08016f98 <_execute_event_handler>:
 8016f98:	2002      	movs	r0, #2
 8016f9a:	4770      	bx	lr

08016f9c <_cancel_goal_event_handler>:
 8016f9c:	2003      	movs	r0, #3
 8016f9e:	4770      	bx	lr

08016fa0 <_succeed_event_handler>:
 8016fa0:	2004      	movs	r0, #4
 8016fa2:	4770      	bx	lr

08016fa4 <_abort_event_handler>:
 8016fa4:	2006      	movs	r0, #6
 8016fa6:	4770      	bx	lr

08016fa8 <_canceled_event_handler>:
 8016fa8:	2005      	movs	r0, #5
 8016faa:	4770      	bx	lr

08016fac <rcl_action_transition_goal_state>:
 8016fac:	fa5f fc80 	uxtb.w	ip, r0
 8016fb0:	f1bc 0f06 	cmp.w	ip, #6
 8016fb4:	d80c      	bhi.n	8016fd0 <rcl_action_transition_goal_state+0x24>
 8016fb6:	2904      	cmp	r1, #4
 8016fb8:	d80a      	bhi.n	8016fd0 <rcl_action_transition_goal_state+0x24>
 8016fba:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8016fbe:	b410      	push	{r4}
 8016fc0:	440b      	add	r3, r1
 8016fc2:	4c06      	ldr	r4, [pc, #24]	@ (8016fdc <rcl_action_transition_goal_state+0x30>)
 8016fc4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016fc8:	b123      	cbz	r3, 8016fd4 <rcl_action_transition_goal_state+0x28>
 8016fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fce:	4718      	bx	r3
 8016fd0:	2000      	movs	r0, #0
 8016fd2:	4770      	bx	lr
 8016fd4:	2000      	movs	r0, #0
 8016fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fda:	4770      	bx	lr
 8016fdc:	0801e4b8 	.word	0x0801e4b8

08016fe0 <rcl_action_get_zero_initialized_cancel_response>:
 8016fe0:	b510      	push	{r4, lr}
 8016fe2:	4c07      	ldr	r4, [pc, #28]	@ (8017000 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8016fe4:	4686      	mov	lr, r0
 8016fe6:	4684      	mov	ip, r0
 8016fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016fea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ff0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ff4:	6823      	ldr	r3, [r4, #0]
 8016ff6:	f8cc 3000 	str.w	r3, [ip]
 8016ffa:	4670      	mov	r0, lr
 8016ffc:	bd10      	pop	{r4, pc}
 8016ffe:	bf00      	nop
 8017000:	0801e544 	.word	0x0801e544

08017004 <rclc_action_send_result_request>:
 8017004:	b1d0      	cbz	r0, 801703c <rclc_action_send_result_request+0x38>
 8017006:	b500      	push	{lr}
 8017008:	4684      	mov	ip, r0
 801700a:	b087      	sub	sp, #28
 801700c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017010:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017014:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017018:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801701c:	f10d 0e08 	add.w	lr, sp, #8
 8017020:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017024:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017028:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801702c:	a902      	add	r1, sp, #8
 801702e:	3010      	adds	r0, #16
 8017030:	f7ff fbfa 	bl	8016828 <rcl_action_send_result_request>
 8017034:	b920      	cbnz	r0, 8017040 <rclc_action_send_result_request+0x3c>
 8017036:	b007      	add	sp, #28
 8017038:	f85d fb04 	ldr.w	pc, [sp], #4
 801703c:	200b      	movs	r0, #11
 801703e:	4770      	bx	lr
 8017040:	9001      	str	r0, [sp, #4]
 8017042:	f7f4 fe3d 	bl	800bcc0 <rcutils_reset_error>
 8017046:	9801      	ldr	r0, [sp, #4]
 8017048:	b007      	add	sp, #28
 801704a:	f85d fb04 	ldr.w	pc, [sp], #4
 801704e:	bf00      	nop

08017050 <rclc_action_take_goal_handle>:
 8017050:	4603      	mov	r3, r0
 8017052:	b158      	cbz	r0, 801706c <rclc_action_take_goal_handle+0x1c>
 8017054:	6880      	ldr	r0, [r0, #8]
 8017056:	b148      	cbz	r0, 801706c <rclc_action_take_goal_handle+0x1c>
 8017058:	6801      	ldr	r1, [r0, #0]
 801705a:	6099      	str	r1, [r3, #8]
 801705c:	2200      	movs	r2, #0
 801705e:	7202      	strb	r2, [r0, #8]
 8017060:	68d9      	ldr	r1, [r3, #12]
 8017062:	6001      	str	r1, [r0, #0]
 8017064:	6202      	str	r2, [r0, #32]
 8017066:	8482      	strh	r2, [r0, #36]	@ 0x24
 8017068:	60d8      	str	r0, [r3, #12]
 801706a:	4770      	bx	lr
 801706c:	4770      	bx	lr
 801706e:	bf00      	nop

08017070 <rclc_action_remove_used_goal_handle>:
 8017070:	b180      	cbz	r0, 8017094 <rclc_action_remove_used_goal_handle+0x24>
 8017072:	b179      	cbz	r1, 8017094 <rclc_action_remove_used_goal_handle+0x24>
 8017074:	68c3      	ldr	r3, [r0, #12]
 8017076:	4299      	cmp	r1, r3
 8017078:	d00d      	beq.n	8017096 <rclc_action_remove_used_goal_handle+0x26>
 801707a:	b12b      	cbz	r3, 8017088 <rclc_action_remove_used_goal_handle+0x18>
 801707c:	681a      	ldr	r2, [r3, #0]
 801707e:	4291      	cmp	r1, r2
 8017080:	d003      	beq.n	801708a <rclc_action_remove_used_goal_handle+0x1a>
 8017082:	4613      	mov	r3, r2
 8017084:	2b00      	cmp	r3, #0
 8017086:	d1f9      	bne.n	801707c <rclc_action_remove_used_goal_handle+0xc>
 8017088:	4770      	bx	lr
 801708a:	680a      	ldr	r2, [r1, #0]
 801708c:	601a      	str	r2, [r3, #0]
 801708e:	6883      	ldr	r3, [r0, #8]
 8017090:	600b      	str	r3, [r1, #0]
 8017092:	6081      	str	r1, [r0, #8]
 8017094:	4770      	bx	lr
 8017096:	680b      	ldr	r3, [r1, #0]
 8017098:	60c3      	str	r3, [r0, #12]
 801709a:	e7f8      	b.n	801708e <rclc_action_remove_used_goal_handle+0x1e>

0801709c <rclc_action_find_goal_handle_by_uuid>:
 801709c:	b538      	push	{r3, r4, r5, lr}
 801709e:	b180      	cbz	r0, 80170c2 <rclc_action_find_goal_handle_by_uuid+0x26>
 80170a0:	460d      	mov	r5, r1
 80170a2:	b181      	cbz	r1, 80170c6 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80170a4:	68c4      	ldr	r4, [r0, #12]
 80170a6:	b914      	cbnz	r4, 80170ae <rclc_action_find_goal_handle_by_uuid+0x12>
 80170a8:	e009      	b.n	80170be <rclc_action_find_goal_handle_by_uuid+0x22>
 80170aa:	6824      	ldr	r4, [r4, #0]
 80170ac:	b13c      	cbz	r4, 80170be <rclc_action_find_goal_handle_by_uuid+0x22>
 80170ae:	2210      	movs	r2, #16
 80170b0:	4629      	mov	r1, r5
 80170b2:	f104 0009 	add.w	r0, r4, #9
 80170b6:	f004 ffcd 	bl	801c054 <memcmp>
 80170ba:	2800      	cmp	r0, #0
 80170bc:	d1f5      	bne.n	80170aa <rclc_action_find_goal_handle_by_uuid+0xe>
 80170be:	4620      	mov	r0, r4
 80170c0:	bd38      	pop	{r3, r4, r5, pc}
 80170c2:	4604      	mov	r4, r0
 80170c4:	e7fb      	b.n	80170be <rclc_action_find_goal_handle_by_uuid+0x22>
 80170c6:	460c      	mov	r4, r1
 80170c8:	e7f9      	b.n	80170be <rclc_action_find_goal_handle_by_uuid+0x22>
 80170ca:	bf00      	nop

080170cc <rclc_action_find_first_handle_by_status>:
 80170cc:	b140      	cbz	r0, 80170e0 <rclc_action_find_first_handle_by_status+0x14>
 80170ce:	68c0      	ldr	r0, [r0, #12]
 80170d0:	b910      	cbnz	r0, 80170d8 <rclc_action_find_first_handle_by_status+0xc>
 80170d2:	e005      	b.n	80170e0 <rclc_action_find_first_handle_by_status+0x14>
 80170d4:	6800      	ldr	r0, [r0, #0]
 80170d6:	b118      	cbz	r0, 80170e0 <rclc_action_find_first_handle_by_status+0x14>
 80170d8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80170dc:	428b      	cmp	r3, r1
 80170de:	d1f9      	bne.n	80170d4 <rclc_action_find_first_handle_by_status+0x8>
 80170e0:	4770      	bx	lr
 80170e2:	bf00      	nop

080170e4 <rclc_action_find_first_terminated_handle>:
 80170e4:	b140      	cbz	r0, 80170f8 <rclc_action_find_first_terminated_handle+0x14>
 80170e6:	68c0      	ldr	r0, [r0, #12]
 80170e8:	b910      	cbnz	r0, 80170f0 <rclc_action_find_first_terminated_handle+0xc>
 80170ea:	e005      	b.n	80170f8 <rclc_action_find_first_terminated_handle+0x14>
 80170ec:	6800      	ldr	r0, [r0, #0]
 80170ee:	b118      	cbz	r0, 80170f8 <rclc_action_find_first_terminated_handle+0x14>
 80170f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80170f4:	2b03      	cmp	r3, #3
 80170f6:	ddf9      	ble.n	80170ec <rclc_action_find_first_terminated_handle+0x8>
 80170f8:	4770      	bx	lr
 80170fa:	bf00      	nop

080170fc <rclc_action_find_handle_by_goal_request_sequence_number>:
 80170fc:	b170      	cbz	r0, 801711c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80170fe:	68c0      	ldr	r0, [r0, #12]
 8017100:	b160      	cbz	r0, 801711c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017102:	b410      	push	{r4}
 8017104:	e001      	b.n	801710a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8017106:	6800      	ldr	r0, [r0, #0]
 8017108:	b128      	cbz	r0, 8017116 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801710a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801710e:	4299      	cmp	r1, r3
 8017110:	bf08      	it	eq
 8017112:	4294      	cmpeq	r4, r2
 8017114:	d1f7      	bne.n	8017106 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8017116:	f85d 4b04 	ldr.w	r4, [sp], #4
 801711a:	4770      	bx	lr
 801711c:	4770      	bx	lr
 801711e:	bf00      	nop

08017120 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017120:	b170      	cbz	r0, 8017140 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017122:	68c0      	ldr	r0, [r0, #12]
 8017124:	b160      	cbz	r0, 8017140 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8017126:	b410      	push	{r4}
 8017128:	e001      	b.n	801712e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801712a:	6800      	ldr	r0, [r0, #0]
 801712c:	b128      	cbz	r0, 801713a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801712e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8017132:	4299      	cmp	r1, r3
 8017134:	bf08      	it	eq
 8017136:	4294      	cmpeq	r4, r2
 8017138:	d1f7      	bne.n	801712a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801713a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801713e:	4770      	bx	lr
 8017140:	4770      	bx	lr
 8017142:	bf00      	nop

08017144 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8017144:	b170      	cbz	r0, 8017164 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017146:	68c0      	ldr	r0, [r0, #12]
 8017148:	b160      	cbz	r0, 8017164 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801714a:	b410      	push	{r4}
 801714c:	e001      	b.n	8017152 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801714e:	6800      	ldr	r0, [r0, #0]
 8017150:	b128      	cbz	r0, 801715e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8017152:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8017156:	4299      	cmp	r1, r3
 8017158:	bf08      	it	eq
 801715a:	4294      	cmpeq	r4, r2
 801715c:	d1f7      	bne.n	801714e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801715e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017162:	4770      	bx	lr
 8017164:	4770      	bx	lr
 8017166:	bf00      	nop

08017168 <rclc_action_find_first_handle_with_goal_response>:
 8017168:	b140      	cbz	r0, 801717c <rclc_action_find_first_handle_with_goal_response+0x14>
 801716a:	68c0      	ldr	r0, [r0, #12]
 801716c:	b910      	cbnz	r0, 8017174 <rclc_action_find_first_handle_with_goal_response+0xc>
 801716e:	e005      	b.n	801717c <rclc_action_find_first_handle_with_goal_response+0x14>
 8017170:	6800      	ldr	r0, [r0, #0]
 8017172:	b118      	cbz	r0, 801717c <rclc_action_find_first_handle_with_goal_response+0x14>
 8017174:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017178:	2b00      	cmp	r3, #0
 801717a:	d0f9      	beq.n	8017170 <rclc_action_find_first_handle_with_goal_response+0x8>
 801717c:	4770      	bx	lr
 801717e:	bf00      	nop

08017180 <rclc_action_find_first_handle_with_result_response>:
 8017180:	b140      	cbz	r0, 8017194 <rclc_action_find_first_handle_with_result_response+0x14>
 8017182:	68c0      	ldr	r0, [r0, #12]
 8017184:	b910      	cbnz	r0, 801718c <rclc_action_find_first_handle_with_result_response+0xc>
 8017186:	e005      	b.n	8017194 <rclc_action_find_first_handle_with_result_response+0x14>
 8017188:	6800      	ldr	r0, [r0, #0]
 801718a:	b118      	cbz	r0, 8017194 <rclc_action_find_first_handle_with_result_response+0x14>
 801718c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8017190:	2b00      	cmp	r3, #0
 8017192:	d0f9      	beq.n	8017188 <rclc_action_find_first_handle_with_result_response+0x8>
 8017194:	4770      	bx	lr
 8017196:	bf00      	nop

08017198 <rclc_action_server_response_goal_request>:
 8017198:	b198      	cbz	r0, 80171c2 <rclc_action_server_response_goal_request+0x2a>
 801719a:	b510      	push	{r4, lr}
 801719c:	6844      	ldr	r4, [r0, #4]
 801719e:	b086      	sub	sp, #24
 80171a0:	2200      	movs	r2, #0
 80171a2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80171a6:	460b      	mov	r3, r1
 80171a8:	9205      	str	r2, [sp, #20]
 80171aa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80171ae:	aa03      	add	r2, sp, #12
 80171b0:	f104 0010 	add.w	r0, r4, #16
 80171b4:	f88d 300c 	strb.w	r3, [sp, #12]
 80171b8:	f7ff fd52 	bl	8016c60 <rcl_action_send_goal_response>
 80171bc:	b918      	cbnz	r0, 80171c6 <rclc_action_server_response_goal_request+0x2e>
 80171be:	b006      	add	sp, #24
 80171c0:	bd10      	pop	{r4, pc}
 80171c2:	200b      	movs	r0, #11
 80171c4:	4770      	bx	lr
 80171c6:	9001      	str	r0, [sp, #4]
 80171c8:	f7f4 fd7a 	bl	800bcc0 <rcutils_reset_error>
 80171cc:	9801      	ldr	r0, [sp, #4]
 80171ce:	b006      	add	sp, #24
 80171d0:	bd10      	pop	{r4, pc}
 80171d2:	bf00      	nop
 80171d4:	0000      	movs	r0, r0
	...

080171d8 <rclc_action_server_goal_cancel_accept>:
 80171d8:	b310      	cbz	r0, 8017220 <rclc_action_server_goal_cancel_accept+0x48>
 80171da:	b510      	push	{r4, lr}
 80171dc:	b090      	sub	sp, #64	@ 0x40
 80171de:	4604      	mov	r4, r0
 80171e0:	a806      	add	r0, sp, #24
 80171e2:	f7ff fefd 	bl	8016fe0 <rcl_action_get_zero_initialized_cancel_response>
 80171e6:	2300      	movs	r3, #0
 80171e8:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80171ec:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80171f0:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80171f4:	f88d 3018 	strb.w	r3, [sp, #24]
 80171f8:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80171fc:	f8cd d01c 	str.w	sp, [sp, #28]
 8017200:	46ec      	mov	ip, sp
 8017202:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017206:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8017228 <rclc_action_server_goal_cancel_accept+0x50>
 801720a:	6860      	ldr	r0, [r4, #4]
 801720c:	aa06      	add	r2, sp, #24
 801720e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8017212:	3010      	adds	r0, #16
 8017214:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017218:	f7ff fdd2 	bl	8016dc0 <rcl_action_send_cancel_response>
 801721c:	b010      	add	sp, #64	@ 0x40
 801721e:	bd10      	pop	{r4, pc}
 8017220:	200b      	movs	r0, #11
 8017222:	4770      	bx	lr
 8017224:	f3af 8000 	nop.w
 8017228:	00000001 	.word	0x00000001
 801722c:	00000001 	.word	0x00000001

08017230 <rclc_action_server_goal_cancel_reject>:
 8017230:	b082      	sub	sp, #8
 8017232:	b530      	push	{r4, r5, lr}
 8017234:	b08b      	sub	sp, #44	@ 0x2c
 8017236:	ac0e      	add	r4, sp, #56	@ 0x38
 8017238:	e884 000c 	stmia.w	r4, {r2, r3}
 801723c:	b188      	cbz	r0, 8017262 <rclc_action_server_goal_cancel_reject+0x32>
 801723e:	4604      	mov	r4, r0
 8017240:	a801      	add	r0, sp, #4
 8017242:	460d      	mov	r5, r1
 8017244:	f7ff fecc 	bl	8016fe0 <rcl_action_get_zero_initialized_cancel_response>
 8017248:	aa01      	add	r2, sp, #4
 801724a:	a90e      	add	r1, sp, #56	@ 0x38
 801724c:	f104 0010 	add.w	r0, r4, #16
 8017250:	f88d 5004 	strb.w	r5, [sp, #4]
 8017254:	f7ff fdb4 	bl	8016dc0 <rcl_action_send_cancel_response>
 8017258:	b00b      	add	sp, #44	@ 0x2c
 801725a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801725e:	b002      	add	sp, #8
 8017260:	4770      	bx	lr
 8017262:	200b      	movs	r0, #11
 8017264:	b00b      	add	sp, #44	@ 0x2c
 8017266:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801726a:	b002      	add	sp, #8
 801726c:	4770      	bx	lr
 801726e:	bf00      	nop

08017270 <__atomic_load_8>:
 8017270:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8017274:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8017278:	4a15      	ldr	r2, [pc, #84]	@ (80172d0 <__atomic_load_8+0x60>)
 801727a:	4b16      	ldr	r3, [pc, #88]	@ (80172d4 <__atomic_load_8+0x64>)
 801727c:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8017280:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017284:	fb02 f101 	mul.w	r1, r2, r1
 8017288:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801728c:	fba3 2301 	umull	r2, r3, r3, r1
 8017290:	091b      	lsrs	r3, r3, #4
 8017292:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017296:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801729a:	b4f0      	push	{r4, r5, r6, r7}
 801729c:	4d0e      	ldr	r5, [pc, #56]	@ (80172d8 <__atomic_load_8+0x68>)
 801729e:	1ac9      	subs	r1, r1, r3
 80172a0:	194a      	adds	r2, r1, r5
 80172a2:	f04f 0c01 	mov.w	ip, #1
 80172a6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80172aa:	e8c2 cf44 	strexb	r4, ip, [r2]
 80172ae:	2c00      	cmp	r4, #0
 80172b0:	d1f9      	bne.n	80172a6 <__atomic_load_8+0x36>
 80172b2:	f3bf 8f5b 	dmb	ish
 80172b6:	b2dc      	uxtb	r4, r3
 80172b8:	2c00      	cmp	r4, #0
 80172ba:	d1f4      	bne.n	80172a6 <__atomic_load_8+0x36>
 80172bc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80172c0:	f3bf 8f5b 	dmb	ish
 80172c4:	546b      	strb	r3, [r5, r1]
 80172c6:	4630      	mov	r0, r6
 80172c8:	4639      	mov	r1, r7
 80172ca:	bcf0      	pop	{r4, r5, r6, r7}
 80172cc:	4770      	bx	lr
 80172ce:	bf00      	nop
 80172d0:	27d4eb2d 	.word	0x27d4eb2d
 80172d4:	b21642c9 	.word	0xb21642c9
 80172d8:	200123e8 	.word	0x200123e8

080172dc <__atomic_store_8>:
 80172dc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80172e0:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80172e4:	b570      	push	{r4, r5, r6, lr}
 80172e6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80172ea:	4c14      	ldr	r4, [pc, #80]	@ (801733c <__atomic_store_8+0x60>)
 80172ec:	4e14      	ldr	r6, [pc, #80]	@ (8017340 <__atomic_store_8+0x64>)
 80172ee:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80172f2:	fb04 f101 	mul.w	r1, r4, r1
 80172f6:	4c13      	ldr	r4, [pc, #76]	@ (8017344 <__atomic_store_8+0x68>)
 80172f8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80172fc:	fba4 5401 	umull	r5, r4, r4, r1
 8017300:	0924      	lsrs	r4, r4, #4
 8017302:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8017306:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801730a:	eba1 0e04 	sub.w	lr, r1, r4
 801730e:	f04f 0501 	mov.w	r5, #1
 8017312:	eb0e 0c06 	add.w	ip, lr, r6
 8017316:	e8dc 1f4f 	ldrexb	r1, [ip]
 801731a:	e8cc 5f44 	strexb	r4, r5, [ip]
 801731e:	2c00      	cmp	r4, #0
 8017320:	d1f9      	bne.n	8017316 <__atomic_store_8+0x3a>
 8017322:	f3bf 8f5b 	dmb	ish
 8017326:	b2cc      	uxtb	r4, r1
 8017328:	2c00      	cmp	r4, #0
 801732a:	d1f4      	bne.n	8017316 <__atomic_store_8+0x3a>
 801732c:	e9c0 2300 	strd	r2, r3, [r0]
 8017330:	f3bf 8f5b 	dmb	ish
 8017334:	f806 100e 	strb.w	r1, [r6, lr]
 8017338:	bd70      	pop	{r4, r5, r6, pc}
 801733a:	bf00      	nop
 801733c:	27d4eb2d 	.word	0x27d4eb2d
 8017340:	200123e8 	.word	0x200123e8
 8017344:	b21642c9 	.word	0xb21642c9

08017348 <__atomic_exchange_8>:
 8017348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801734a:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801734e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8017352:	4917      	ldr	r1, [pc, #92]	@ (80173b0 <__atomic_exchange_8+0x68>)
 8017354:	4f17      	ldr	r7, [pc, #92]	@ (80173b4 <__atomic_exchange_8+0x6c>)
 8017356:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 801735a:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801735e:	fb01 fe0e 	mul.w	lr, r1, lr
 8017362:	4915      	ldr	r1, [pc, #84]	@ (80173b8 <__atomic_exchange_8+0x70>)
 8017364:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8017368:	4606      	mov	r6, r0
 801736a:	fba1 010e 	umull	r0, r1, r1, lr
 801736e:	0909      	lsrs	r1, r1, #4
 8017370:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8017374:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8017378:	ebae 0e01 	sub.w	lr, lr, r1
 801737c:	f04f 0501 	mov.w	r5, #1
 8017380:	eb0e 0107 	add.w	r1, lr, r7
 8017384:	e8d1 cf4f 	ldrexb	ip, [r1]
 8017388:	e8c1 5f40 	strexb	r0, r5, [r1]
 801738c:	2800      	cmp	r0, #0
 801738e:	d1f9      	bne.n	8017384 <__atomic_exchange_8+0x3c>
 8017390:	f3bf 8f5b 	dmb	ish
 8017394:	fa5f f48c 	uxtb.w	r4, ip
 8017398:	2c00      	cmp	r4, #0
 801739a:	d1f3      	bne.n	8017384 <__atomic_exchange_8+0x3c>
 801739c:	e9d6 0100 	ldrd	r0, r1, [r6]
 80173a0:	e9c6 2300 	strd	r2, r3, [r6]
 80173a4:	f3bf 8f5b 	dmb	ish
 80173a8:	f807 c00e 	strb.w	ip, [r7, lr]
 80173ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173ae:	bf00      	nop
 80173b0:	27d4eb2d 	.word	0x27d4eb2d
 80173b4:	200123e8 	.word	0x200123e8
 80173b8:	b21642c9 	.word	0xb21642c9

080173bc <rcutils_get_env>:
 80173bc:	b150      	cbz	r0, 80173d4 <rcutils_get_env+0x18>
 80173be:	b510      	push	{r4, lr}
 80173c0:	460c      	mov	r4, r1
 80173c2:	b909      	cbnz	r1, 80173c8 <rcutils_get_env+0xc>
 80173c4:	4806      	ldr	r0, [pc, #24]	@ (80173e0 <rcutils_get_env+0x24>)
 80173c6:	bd10      	pop	{r4, pc}
 80173c8:	f004 f9be 	bl	801b748 <getenv>
 80173cc:	b120      	cbz	r0, 80173d8 <rcutils_get_env+0x1c>
 80173ce:	6020      	str	r0, [r4, #0]
 80173d0:	2000      	movs	r0, #0
 80173d2:	bd10      	pop	{r4, pc}
 80173d4:	4803      	ldr	r0, [pc, #12]	@ (80173e4 <rcutils_get_env+0x28>)
 80173d6:	4770      	bx	lr
 80173d8:	4b03      	ldr	r3, [pc, #12]	@ (80173e8 <rcutils_get_env+0x2c>)
 80173da:	6023      	str	r3, [r4, #0]
 80173dc:	e7f8      	b.n	80173d0 <rcutils_get_env+0x14>
 80173de:	bf00      	nop
 80173e0:	0801db30 	.word	0x0801db30
 80173e4:	0801db14 	.word	0x0801db14
 80173e8:	0801d328 	.word	0x0801d328

080173ec <rcutils_format_string_limit>:
 80173ec:	b40f      	push	{r0, r1, r2, r3}
 80173ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173f0:	b083      	sub	sp, #12
 80173f2:	ac08      	add	r4, sp, #32
 80173f4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80173f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80173fa:	b376      	cbz	r6, 801745a <rcutils_format_string_limit+0x6e>
 80173fc:	4620      	mov	r0, r4
 80173fe:	f7f4 fc33 	bl	800bc68 <rcutils_allocator_is_valid>
 8017402:	b350      	cbz	r0, 801745a <rcutils_format_string_limit+0x6e>
 8017404:	2100      	movs	r1, #0
 8017406:	ab0f      	add	r3, sp, #60	@ 0x3c
 8017408:	4632      	mov	r2, r6
 801740a:	4608      	mov	r0, r1
 801740c:	e9cd 3300 	strd	r3, r3, [sp]
 8017410:	f000 f8f8 	bl	8017604 <rcutils_vsnprintf>
 8017414:	1c43      	adds	r3, r0, #1
 8017416:	4605      	mov	r5, r0
 8017418:	d01f      	beq.n	801745a <rcutils_format_string_limit+0x6e>
 801741a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801741c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801741e:	1c47      	adds	r7, r0, #1
 8017420:	429f      	cmp	r7, r3
 8017422:	bf84      	itt	hi
 8017424:	461f      	movhi	r7, r3
 8017426:	f103 35ff 	addhi.w	r5, r3, #4294967295
 801742a:	4638      	mov	r0, r7
 801742c:	9b08      	ldr	r3, [sp, #32]
 801742e:	4798      	blx	r3
 8017430:	4604      	mov	r4, r0
 8017432:	b190      	cbz	r0, 801745a <rcutils_format_string_limit+0x6e>
 8017434:	9b01      	ldr	r3, [sp, #4]
 8017436:	4632      	mov	r2, r6
 8017438:	4639      	mov	r1, r7
 801743a:	f000 f8e3 	bl	8017604 <rcutils_vsnprintf>
 801743e:	2800      	cmp	r0, #0
 8017440:	db07      	blt.n	8017452 <rcutils_format_string_limit+0x66>
 8017442:	2300      	movs	r3, #0
 8017444:	5563      	strb	r3, [r4, r5]
 8017446:	4620      	mov	r0, r4
 8017448:	b003      	add	sp, #12
 801744a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801744e:	b004      	add	sp, #16
 8017450:	4770      	bx	lr
 8017452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017454:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8017456:	4620      	mov	r0, r4
 8017458:	4798      	blx	r3
 801745a:	2400      	movs	r4, #0
 801745c:	e7f3      	b.n	8017446 <rcutils_format_string_limit+0x5a>
 801745e:	bf00      	nop

08017460 <rcutils_repl_str>:
 8017460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017464:	4699      	mov	r9, r3
 8017466:	b089      	sub	sp, #36	@ 0x24
 8017468:	4603      	mov	r3, r0
 801746a:	4648      	mov	r0, r9
 801746c:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8017470:	4698      	mov	r8, r3
 8017472:	9300      	str	r3, [sp, #0]
 8017474:	460c      	mov	r4, r1
 8017476:	f7f4 fbf7 	bl	800bc68 <rcutils_allocator_is_valid>
 801747a:	2800      	cmp	r0, #0
 801747c:	f000 80a3 	beq.w	80175c6 <rcutils_repl_str+0x166>
 8017480:	4620      	mov	r0, r4
 8017482:	f7e8 ff25 	bl	80002d0 <strlen>
 8017486:	f04f 0a00 	mov.w	sl, #0
 801748a:	f8d9 b010 	ldr.w	fp, [r9, #16]
 801748e:	9001      	str	r0, [sp, #4]
 8017490:	4657      	mov	r7, sl
 8017492:	4655      	mov	r5, sl
 8017494:	2610      	movs	r6, #16
 8017496:	e01e      	b.n	80174d6 <rcutils_repl_str+0x76>
 8017498:	3501      	adds	r5, #1
 801749a:	45aa      	cmp	sl, r5
 801749c:	d212      	bcs.n	80174c4 <rcutils_repl_str+0x64>
 801749e:	44b2      	add	sl, r6
 80174a0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80174a4:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80174a8:	4798      	blx	r3
 80174aa:	2800      	cmp	r0, #0
 80174ac:	f000 8088 	beq.w	80175c0 <rcutils_repl_str+0x160>
 80174b0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80174b4:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
 80174b8:	f8d9 b010 	ldr.w	fp, [r9, #16]
 80174bc:	4607      	mov	r7, r0
 80174be:	bf28      	it	cs
 80174c0:	f44f 1680 	movcs.w	r6, #1048576	@ 0x100000
 80174c4:	9a00      	ldr	r2, [sp, #0]
 80174c6:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 80174ca:	1aa2      	subs	r2, r4, r2
 80174cc:	f843 2c04 	str.w	r2, [r3, #-4]
 80174d0:	9b01      	ldr	r3, [sp, #4]
 80174d2:	eb04 0803 	add.w	r8, r4, r3
 80174d6:	9902      	ldr	r1, [sp, #8]
 80174d8:	4640      	mov	r0, r8
 80174da:	f004 fe1f 	bl	801c11c <strstr>
 80174de:	4604      	mov	r4, r0
 80174e0:	465a      	mov	r2, fp
 80174e2:	4638      	mov	r0, r7
 80174e4:	2c00      	cmp	r4, #0
 80174e6:	d1d7      	bne.n	8017498 <rcutils_repl_str+0x38>
 80174e8:	4640      	mov	r0, r8
 80174ea:	f7e8 fef1 	bl	80002d0 <strlen>
 80174ee:	9b00      	ldr	r3, [sp, #0]
 80174f0:	eba8 0803 	sub.w	r8, r8, r3
 80174f4:	eb08 0300 	add.w	r3, r8, r0
 80174f8:	9304      	str	r3, [sp, #16]
 80174fa:	f8d9 8000 	ldr.w	r8, [r9]
 80174fe:	2d00      	cmp	r5, #0
 8017500:	d03f      	beq.n	8017582 <rcutils_repl_str+0x122>
 8017502:	9803      	ldr	r0, [sp, #12]
 8017504:	f7e8 fee4 	bl	80002d0 <strlen>
 8017508:	4606      	mov	r6, r0
 801750a:	9801      	ldr	r0, [sp, #4]
 801750c:	9a04      	ldr	r2, [sp, #16]
 801750e:	1a33      	subs	r3, r6, r0
 8017510:	fb05 2a03 	mla	sl, r5, r3, r2
 8017514:	4659      	mov	r1, fp
 8017516:	f10a 0001 	add.w	r0, sl, #1
 801751a:	47c0      	blx	r8
 801751c:	4683      	mov	fp, r0
 801751e:	2800      	cmp	r0, #0
 8017520:	d04e      	beq.n	80175c0 <rcutils_repl_str+0x160>
 8017522:	683a      	ldr	r2, [r7, #0]
 8017524:	9900      	ldr	r1, [sp, #0]
 8017526:	f004 fe9a 	bl	801c25e <memcpy>
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	9706      	str	r7, [sp, #24]
 801752e:	1e6a      	subs	r2, r5, #1
 8017530:	445b      	add	r3, fp
 8017532:	46a8      	mov	r8, r5
 8017534:	9202      	str	r2, [sp, #8]
 8017536:	4625      	mov	r5, r4
 8017538:	f8cd 901c 	str.w	r9, [sp, #28]
 801753c:	461c      	mov	r4, r3
 801753e:	9903      	ldr	r1, [sp, #12]
 8017540:	4632      	mov	r2, r6
 8017542:	4620      	mov	r0, r4
 8017544:	f004 fe8b 	bl	801c25e <memcpy>
 8017548:	9b01      	ldr	r3, [sp, #4]
 801754a:	f857 2b04 	ldr.w	r2, [r7], #4
 801754e:	eb02 0c03 	add.w	ip, r2, r3
 8017552:	9b00      	ldr	r3, [sp, #0]
 8017554:	eb03 010c 	add.w	r1, r3, ip
 8017558:	9b02      	ldr	r3, [sp, #8]
 801755a:	4434      	add	r4, r6
 801755c:	429d      	cmp	r5, r3
 801755e:	4620      	mov	r0, r4
 8017560:	d022      	beq.n	80175a8 <rcutils_repl_str+0x148>
 8017562:	683a      	ldr	r2, [r7, #0]
 8017564:	eba2 090c 	sub.w	r9, r2, ip
 8017568:	464a      	mov	r2, r9
 801756a:	3501      	adds	r5, #1
 801756c:	f004 fe77 	bl	801c25e <memcpy>
 8017570:	45a8      	cmp	r8, r5
 8017572:	444c      	add	r4, r9
 8017574:	d1e3      	bne.n	801753e <rcutils_repl_str+0xde>
 8017576:	2300      	movs	r3, #0
 8017578:	e9dd 7906 	ldrd	r7, r9, [sp, #24]
 801757c:	f80b 300a 	strb.w	r3, [fp, sl]
 8017580:	e008      	b.n	8017594 <rcutils_repl_str+0x134>
 8017582:	4618      	mov	r0, r3
 8017584:	4659      	mov	r1, fp
 8017586:	3001      	adds	r0, #1
 8017588:	47c0      	blx	r8
 801758a:	4683      	mov	fp, r0
 801758c:	b110      	cbz	r0, 8017594 <rcutils_repl_str+0x134>
 801758e:	9900      	ldr	r1, [sp, #0]
 8017590:	f004 fe5d 	bl	801c24e <strcpy>
 8017594:	4638      	mov	r0, r7
 8017596:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801759a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801759e:	4798      	blx	r3
 80175a0:	4658      	mov	r0, fp
 80175a2:	b009      	add	sp, #36	@ 0x24
 80175a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175a8:	9b04      	ldr	r3, [sp, #16]
 80175aa:	eba3 020c 	sub.w	r2, r3, ip
 80175ae:	9205      	str	r2, [sp, #20]
 80175b0:	3501      	adds	r5, #1
 80175b2:	f004 fe54 	bl	801c25e <memcpy>
 80175b6:	9a05      	ldr	r2, [sp, #20]
 80175b8:	45a8      	cmp	r8, r5
 80175ba:	4414      	add	r4, r2
 80175bc:	d1bf      	bne.n	801753e <rcutils_repl_str+0xde>
 80175be:	e7da      	b.n	8017576 <rcutils_repl_str+0x116>
 80175c0:	f04f 0b00 	mov.w	fp, #0
 80175c4:	e7e6      	b.n	8017594 <rcutils_repl_str+0x134>
 80175c6:	4683      	mov	fp, r0
 80175c8:	4658      	mov	r0, fp
 80175ca:	b009      	add	sp, #36	@ 0x24
 80175cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080175d0 <rcutils_snprintf>:
 80175d0:	b40c      	push	{r2, r3}
 80175d2:	b530      	push	{r4, r5, lr}
 80175d4:	b083      	sub	sp, #12
 80175d6:	ab06      	add	r3, sp, #24
 80175d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80175dc:	9301      	str	r3, [sp, #4]
 80175de:	b152      	cbz	r2, 80175f6 <rcutils_snprintf+0x26>
 80175e0:	b138      	cbz	r0, 80175f2 <rcutils_snprintf+0x22>
 80175e2:	b141      	cbz	r1, 80175f6 <rcutils_snprintf+0x26>
 80175e4:	f004 fc94 	bl	801bf10 <vsniprintf>
 80175e8:	b003      	add	sp, #12
 80175ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80175ee:	b002      	add	sp, #8
 80175f0:	4770      	bx	lr
 80175f2:	2900      	cmp	r1, #0
 80175f4:	d0f6      	beq.n	80175e4 <rcutils_snprintf+0x14>
 80175f6:	f004 fdfd 	bl	801c1f4 <__errno>
 80175fa:	2316      	movs	r3, #22
 80175fc:	6003      	str	r3, [r0, #0]
 80175fe:	f04f 30ff 	mov.w	r0, #4294967295
 8017602:	e7f1      	b.n	80175e8 <rcutils_snprintf+0x18>

08017604 <rcutils_vsnprintf>:
 8017604:	b570      	push	{r4, r5, r6, lr}
 8017606:	b13a      	cbz	r2, 8017618 <rcutils_vsnprintf+0x14>
 8017608:	b120      	cbz	r0, 8017614 <rcutils_vsnprintf+0x10>
 801760a:	b129      	cbz	r1, 8017618 <rcutils_vsnprintf+0x14>
 801760c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017610:	f004 bc7e 	b.w	801bf10 <vsniprintf>
 8017614:	2900      	cmp	r1, #0
 8017616:	d0f9      	beq.n	801760c <rcutils_vsnprintf+0x8>
 8017618:	f004 fdec 	bl	801c1f4 <__errno>
 801761c:	2316      	movs	r3, #22
 801761e:	6003      	str	r3, [r0, #0]
 8017620:	f04f 30ff 	mov.w	r0, #4294967295
 8017624:	bd70      	pop	{r4, r5, r6, pc}
 8017626:	bf00      	nop

08017628 <rcutils_strdup>:
 8017628:	b084      	sub	sp, #16
 801762a:	b570      	push	{r4, r5, r6, lr}
 801762c:	b086      	sub	sp, #24
 801762e:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8017632:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8017636:	4604      	mov	r4, r0
 8017638:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801763c:	f10d 0e04 	add.w	lr, sp, #4
 8017640:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017644:	f8dc 3000 	ldr.w	r3, [ip]
 8017648:	f8ce 3000 	str.w	r3, [lr]
 801764c:	b304      	cbz	r4, 8017690 <rcutils_strdup+0x68>
 801764e:	a801      	add	r0, sp, #4
 8017650:	f7f4 fb0a 	bl	800bc68 <rcutils_allocator_is_valid>
 8017654:	b1e0      	cbz	r0, 8017690 <rcutils_strdup+0x68>
 8017656:	f04f 32ff 	mov.w	r2, #4294967295
 801765a:	2100      	movs	r1, #0
 801765c:	4620      	mov	r0, r4
 801765e:	f7e8 fde7 	bl	8000230 <memchr>
 8017662:	b190      	cbz	r0, 801768a <rcutils_strdup+0x62>
 8017664:	1b06      	subs	r6, r0, r4
 8017666:	1c70      	adds	r0, r6, #1
 8017668:	9b01      	ldr	r3, [sp, #4]
 801766a:	9905      	ldr	r1, [sp, #20]
 801766c:	4798      	blx	r3
 801766e:	4605      	mov	r5, r0
 8017670:	b128      	cbz	r0, 801767e <rcutils_strdup+0x56>
 8017672:	4632      	mov	r2, r6
 8017674:	4621      	mov	r1, r4
 8017676:	f004 fdf2 	bl	801c25e <memcpy>
 801767a:	2300      	movs	r3, #0
 801767c:	55ab      	strb	r3, [r5, r6]
 801767e:	4628      	mov	r0, r5
 8017680:	b006      	add	sp, #24
 8017682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017686:	b004      	add	sp, #16
 8017688:	4770      	bx	lr
 801768a:	f04f 36ff 	mov.w	r6, #4294967295
 801768e:	e7eb      	b.n	8017668 <rcutils_strdup+0x40>
 8017690:	2500      	movs	r5, #0
 8017692:	e7f4      	b.n	801767e <rcutils_strdup+0x56>

08017694 <rcutils_strndup>:
 8017694:	b082      	sub	sp, #8
 8017696:	b570      	push	{r4, r5, r6, lr}
 8017698:	ac04      	add	r4, sp, #16
 801769a:	e884 000c 	stmia.w	r4, {r2, r3}
 801769e:	b1e8      	cbz	r0, 80176dc <rcutils_strndup+0x48>
 80176a0:	4605      	mov	r5, r0
 80176a2:	a804      	add	r0, sp, #16
 80176a4:	460c      	mov	r4, r1
 80176a6:	f7f4 fadf 	bl	800bc68 <rcutils_allocator_is_valid>
 80176aa:	b1b8      	cbz	r0, 80176dc <rcutils_strndup+0x48>
 80176ac:	4622      	mov	r2, r4
 80176ae:	2100      	movs	r1, #0
 80176b0:	4628      	mov	r0, r5
 80176b2:	f7e8 fdbd 	bl	8000230 <memchr>
 80176b6:	b100      	cbz	r0, 80176ba <rcutils_strndup+0x26>
 80176b8:	1b44      	subs	r4, r0, r5
 80176ba:	9b04      	ldr	r3, [sp, #16]
 80176bc:	9908      	ldr	r1, [sp, #32]
 80176be:	1c60      	adds	r0, r4, #1
 80176c0:	4798      	blx	r3
 80176c2:	4606      	mov	r6, r0
 80176c4:	b128      	cbz	r0, 80176d2 <rcutils_strndup+0x3e>
 80176c6:	4622      	mov	r2, r4
 80176c8:	4629      	mov	r1, r5
 80176ca:	f004 fdc8 	bl	801c25e <memcpy>
 80176ce:	2300      	movs	r3, #0
 80176d0:	5533      	strb	r3, [r6, r4]
 80176d2:	4630      	mov	r0, r6
 80176d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176d8:	b002      	add	sp, #8
 80176da:	4770      	bx	lr
 80176dc:	2600      	movs	r6, #0
 80176de:	4630      	mov	r0, r6
 80176e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176e4:	b002      	add	sp, #8
 80176e6:	4770      	bx	lr

080176e8 <rcutils_get_zero_initialized_string_map>:
 80176e8:	4b01      	ldr	r3, [pc, #4]	@ (80176f0 <rcutils_get_zero_initialized_string_map+0x8>)
 80176ea:	6818      	ldr	r0, [r3, #0]
 80176ec:	4770      	bx	lr
 80176ee:	bf00      	nop
 80176f0:	0801e568 	.word	0x0801e568

080176f4 <rcutils_string_map_reserve>:
 80176f4:	2800      	cmp	r0, #0
 80176f6:	d04e      	beq.n	8017796 <rcutils_string_map_reserve+0xa2>
 80176f8:	b530      	push	{r4, r5, lr}
 80176fa:	6803      	ldr	r3, [r0, #0]
 80176fc:	b087      	sub	sp, #28
 80176fe:	4604      	mov	r4, r0
 8017700:	2b00      	cmp	r3, #0
 8017702:	d043      	beq.n	801778c <rcutils_string_map_reserve+0x98>
 8017704:	f103 0c0c 	add.w	ip, r3, #12
 8017708:	460d      	mov	r5, r1
 801770a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801770e:	f10d 0e04 	add.w	lr, sp, #4
 8017712:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017716:	f8dc 3000 	ldr.w	r3, [ip]
 801771a:	f8ce 3000 	str.w	r3, [lr]
 801771e:	a801      	add	r0, sp, #4
 8017720:	f7f4 faa2 	bl	800bc68 <rcutils_allocator_is_valid>
 8017724:	b308      	cbz	r0, 801776a <rcutils_string_map_reserve+0x76>
 8017726:	6823      	ldr	r3, [r4, #0]
 8017728:	6899      	ldr	r1, [r3, #8]
 801772a:	42a9      	cmp	r1, r5
 801772c:	d829      	bhi.n	8017782 <rcutils_string_map_reserve+0x8e>
 801772e:	685a      	ldr	r2, [r3, #4]
 8017730:	42aa      	cmp	r2, r5
 8017732:	d024      	beq.n	801777e <rcutils_string_map_reserve+0x8a>
 8017734:	b1e5      	cbz	r5, 8017770 <rcutils_string_map_reserve+0x7c>
 8017736:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
 801773a:	d22a      	bcs.n	8017792 <rcutils_string_map_reserve+0x9e>
 801773c:	6818      	ldr	r0, [r3, #0]
 801773e:	9a05      	ldr	r2, [sp, #20]
 8017740:	9b03      	ldr	r3, [sp, #12]
 8017742:	00e9      	lsls	r1, r5, #3
 8017744:	4798      	blx	r3
 8017746:	b320      	cbz	r0, 8017792 <rcutils_string_map_reserve+0x9e>
 8017748:	6824      	ldr	r4, [r4, #0]
 801774a:	6861      	ldr	r1, [r4, #4]
 801774c:	6020      	str	r0, [r4, #0]
 801774e:	42a9      	cmp	r1, r5
 8017750:	d214      	bcs.n	801777c <rcutils_string_map_reserve+0x88>
 8017752:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
 8017756:	1a69      	subs	r1, r5, r1
 8017758:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 801775c:	2200      	movs	r2, #0
 801775e:	e9c3 2200 	strd	r2, r2, [r3]
 8017762:	3308      	adds	r3, #8
 8017764:	428b      	cmp	r3, r1
 8017766:	d1fa      	bne.n	801775e <rcutils_string_map_reserve+0x6a>
 8017768:	e008      	b.n	801777c <rcutils_string_map_reserve+0x88>
 801776a:	200b      	movs	r0, #11
 801776c:	b007      	add	sp, #28
 801776e:	bd30      	pop	{r4, r5, pc}
 8017770:	9a02      	ldr	r2, [sp, #8]
 8017772:	9905      	ldr	r1, [sp, #20]
 8017774:	6818      	ldr	r0, [r3, #0]
 8017776:	4790      	blx	r2
 8017778:	6824      	ldr	r4, [r4, #0]
 801777a:	6025      	str	r5, [r4, #0]
 801777c:	6065      	str	r5, [r4, #4]
 801777e:	2000      	movs	r0, #0
 8017780:	e7f4      	b.n	801776c <rcutils_string_map_reserve+0x78>
 8017782:	4620      	mov	r0, r4
 8017784:	f7ff ffb6 	bl	80176f4 <rcutils_string_map_reserve>
 8017788:	b007      	add	sp, #28
 801778a:	bd30      	pop	{r4, r5, pc}
 801778c:	201f      	movs	r0, #31
 801778e:	b007      	add	sp, #28
 8017790:	bd30      	pop	{r4, r5, pc}
 8017792:	200a      	movs	r0, #10
 8017794:	e7ea      	b.n	801776c <rcutils_string_map_reserve+0x78>
 8017796:	200b      	movs	r0, #11
 8017798:	4770      	bx	lr
 801779a:	bf00      	nop

0801779c <rcutils_string_map_init>:
 801779c:	b082      	sub	sp, #8
 801779e:	b570      	push	{r4, r5, r6, lr}
 80177a0:	ac04      	add	r4, sp, #16
 80177a2:	e884 000c 	stmia.w	r4, {r2, r3}
 80177a6:	b378      	cbz	r0, 8017808 <rcutils_string_map_init+0x6c>
 80177a8:	6806      	ldr	r6, [r0, #0]
 80177aa:	4604      	mov	r4, r0
 80177ac:	b12e      	cbz	r6, 80177ba <rcutils_string_map_init+0x1e>
 80177ae:	251e      	movs	r5, #30
 80177b0:	4628      	mov	r0, r5
 80177b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80177b6:	b002      	add	sp, #8
 80177b8:	4770      	bx	lr
 80177ba:	a804      	add	r0, sp, #16
 80177bc:	460d      	mov	r5, r1
 80177be:	f7f4 fa53 	bl	800bc68 <rcutils_allocator_is_valid>
 80177c2:	b308      	cbz	r0, 8017808 <rcutils_string_map_init+0x6c>
 80177c4:	9b04      	ldr	r3, [sp, #16]
 80177c6:	9908      	ldr	r1, [sp, #32]
 80177c8:	2020      	movs	r0, #32
 80177ca:	4798      	blx	r3
 80177cc:	6020      	str	r0, [r4, #0]
 80177ce:	b308      	cbz	r0, 8017814 <rcutils_string_map_init+0x78>
 80177d0:	f10d 0e10 	add.w	lr, sp, #16
 80177d4:	e9c0 6600 	strd	r6, r6, [r0]
 80177d8:	6086      	str	r6, [r0, #8]
 80177da:	f100 0c0c 	add.w	ip, r0, #12
 80177de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80177e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80177e6:	f8de 3000 	ldr.w	r3, [lr]
 80177ea:	f8cc 3000 	str.w	r3, [ip]
 80177ee:	4629      	mov	r1, r5
 80177f0:	4620      	mov	r0, r4
 80177f2:	f7ff ff7f 	bl	80176f4 <rcutils_string_map_reserve>
 80177f6:	4605      	mov	r5, r0
 80177f8:	2800      	cmp	r0, #0
 80177fa:	d0d9      	beq.n	80177b0 <rcutils_string_map_init+0x14>
 80177fc:	9b05      	ldr	r3, [sp, #20]
 80177fe:	9908      	ldr	r1, [sp, #32]
 8017800:	6820      	ldr	r0, [r4, #0]
 8017802:	4798      	blx	r3
 8017804:	6026      	str	r6, [r4, #0]
 8017806:	e7d3      	b.n	80177b0 <rcutils_string_map_init+0x14>
 8017808:	250b      	movs	r5, #11
 801780a:	4628      	mov	r0, r5
 801780c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017810:	b002      	add	sp, #8
 8017812:	4770      	bx	lr
 8017814:	250a      	movs	r5, #10
 8017816:	e7cb      	b.n	80177b0 <rcutils_string_map_init+0x14>

08017818 <rcutils_string_map_fini>:
 8017818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801781c:	b086      	sub	sp, #24
 801781e:	2800      	cmp	r0, #0
 8017820:	d04f      	beq.n	80178c2 <rcutils_string_map_fini+0xaa>
 8017822:	6805      	ldr	r5, [r0, #0]
 8017824:	4606      	mov	r6, r0
 8017826:	2d00      	cmp	r5, #0
 8017828:	d046      	beq.n	80178b8 <rcutils_string_map_fini+0xa0>
 801782a:	686b      	ldr	r3, [r5, #4]
 801782c:	b353      	cbz	r3, 8017884 <rcutils_string_map_fini+0x6c>
 801782e:	2400      	movs	r4, #0
 8017830:	682a      	ldr	r2, [r5, #0]
 8017832:	4627      	mov	r7, r4
 8017834:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8017838:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801783c:	b1f8      	cbz	r0, 801787e <rcutils_string_map_fini+0x66>
 801783e:	f8d5 a01c 	ldr.w	sl, [r5, #28]
 8017842:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017846:	4651      	mov	r1, sl
 8017848:	47c8      	blx	r9
 801784a:	682b      	ldr	r3, [r5, #0]
 801784c:	eb03 0208 	add.w	r2, r3, r8
 8017850:	f843 7034 	str.w	r7, [r3, r4, lsl #3]
 8017854:	6850      	ldr	r0, [r2, #4]
 8017856:	4651      	mov	r1, sl
 8017858:	47c8      	blx	r9
 801785a:	682a      	ldr	r2, [r5, #0]
 801785c:	68ab      	ldr	r3, [r5, #8]
 801785e:	4442      	add	r2, r8
 8017860:	3b01      	subs	r3, #1
 8017862:	6057      	str	r7, [r2, #4]
 8017864:	60ab      	str	r3, [r5, #8]
 8017866:	6835      	ldr	r5, [r6, #0]
 8017868:	686b      	ldr	r3, [r5, #4]
 801786a:	3401      	adds	r4, #1
 801786c:	429c      	cmp	r4, r3
 801786e:	d209      	bcs.n	8017884 <rcutils_string_map_fini+0x6c>
 8017870:	682a      	ldr	r2, [r5, #0]
 8017872:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
 8017876:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 801787a:	2800      	cmp	r0, #0
 801787c:	d1df      	bne.n	801783e <rcutils_string_map_fini+0x26>
 801787e:	3401      	adds	r4, #1
 8017880:	42a3      	cmp	r3, r4
 8017882:	d8d7      	bhi.n	8017834 <rcutils_string_map_fini+0x1c>
 8017884:	2100      	movs	r1, #0
 8017886:	4630      	mov	r0, r6
 8017888:	f7ff ff34 	bl	80176f4 <rcutils_string_map_reserve>
 801788c:	4604      	mov	r4, r0
 801788e:	b118      	cbz	r0, 8017898 <rcutils_string_map_fini+0x80>
 8017890:	4620      	mov	r0, r4
 8017892:	b006      	add	sp, #24
 8017894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017898:	6835      	ldr	r5, [r6, #0]
 801789a:	350c      	adds	r5, #12
 801789c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801789e:	af01      	add	r7, sp, #4
 80178a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80178a2:	682b      	ldr	r3, [r5, #0]
 80178a4:	603b      	str	r3, [r7, #0]
 80178a6:	a801      	add	r0, sp, #4
 80178a8:	f7f4 f9de 	bl	800bc68 <rcutils_allocator_is_valid>
 80178ac:	b148      	cbz	r0, 80178c2 <rcutils_string_map_fini+0xaa>
 80178ae:	9b02      	ldr	r3, [sp, #8]
 80178b0:	9905      	ldr	r1, [sp, #20]
 80178b2:	6830      	ldr	r0, [r6, #0]
 80178b4:	4798      	blx	r3
 80178b6:	6034      	str	r4, [r6, #0]
 80178b8:	2400      	movs	r4, #0
 80178ba:	4620      	mov	r0, r4
 80178bc:	b006      	add	sp, #24
 80178be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178c2:	240b      	movs	r4, #11
 80178c4:	4620      	mov	r0, r4
 80178c6:	b006      	add	sp, #24
 80178c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080178cc <rcutils_string_map_getn>:
 80178cc:	b338      	cbz	r0, 801791e <rcutils_string_map_getn+0x52>
 80178ce:	6800      	ldr	r0, [r0, #0]
 80178d0:	b328      	cbz	r0, 801791e <rcutils_string_map_getn+0x52>
 80178d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178d6:	460e      	mov	r6, r1
 80178d8:	b1c1      	cbz	r1, 801790c <rcutils_string_map_getn+0x40>
 80178da:	e9d0 9800 	ldrd	r9, r8, [r0]
 80178de:	f1b8 0f00 	cmp.w	r8, #0
 80178e2:	d013      	beq.n	801790c <rcutils_string_map_getn+0x40>
 80178e4:	4617      	mov	r7, r2
 80178e6:	2400      	movs	r4, #0
 80178e8:	f859 5034 	ldr.w	r5, [r9, r4, lsl #3]
 80178ec:	4628      	mov	r0, r5
 80178ee:	b155      	cbz	r5, 8017906 <rcutils_string_map_getn+0x3a>
 80178f0:	f7e8 fcee 	bl	80002d0 <strlen>
 80178f4:	42b8      	cmp	r0, r7
 80178f6:	4602      	mov	r2, r0
 80178f8:	4629      	mov	r1, r5
 80178fa:	bf38      	it	cc
 80178fc:	463a      	movcc	r2, r7
 80178fe:	4630      	mov	r0, r6
 8017900:	f004 fbe7 	bl	801c0d2 <strncmp>
 8017904:	b128      	cbz	r0, 8017912 <rcutils_string_map_getn+0x46>
 8017906:	3401      	adds	r4, #1
 8017908:	45a0      	cmp	r8, r4
 801790a:	d1ed      	bne.n	80178e8 <rcutils_string_map_getn+0x1c>
 801790c:	2000      	movs	r0, #0
 801790e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017912:	eb09 09c4 	add.w	r9, r9, r4, lsl #3
 8017916:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801791e:	4770      	bx	lr

08017920 <rmw_get_zero_initialized_context>:
 8017920:	b510      	push	{r4, lr}
 8017922:	4903      	ldr	r1, [pc, #12]	@ (8017930 <rmw_get_zero_initialized_context+0x10>)
 8017924:	4604      	mov	r4, r0
 8017926:	2270      	movs	r2, #112	@ 0x70
 8017928:	f004 fc99 	bl	801c25e <memcpy>
 801792c:	4620      	mov	r0, r4
 801792e:	bd10      	pop	{r4, pc}
 8017930:	0801e570 	.word	0x0801e570

08017934 <rmw_get_zero_initialized_init_options>:
 8017934:	b510      	push	{r4, lr}
 8017936:	4903      	ldr	r1, [pc, #12]	@ (8017944 <rmw_get_zero_initialized_init_options+0x10>)
 8017938:	4604      	mov	r4, r0
 801793a:	2258      	movs	r2, #88	@ 0x58
 801793c:	f004 fc8f 	bl	801c25e <memcpy>
 8017940:	4620      	mov	r0, r4
 8017942:	bd10      	pop	{r4, pc}
 8017944:	0801e5e0 	.word	0x0801e5e0

08017948 <rmw_subscription_content_filter_options_fini>:
 8017948:	b1b0      	cbz	r0, 8017978 <rmw_subscription_content_filter_options_fini+0x30>
 801794a:	b538      	push	{r3, r4, r5, lr}
 801794c:	4604      	mov	r4, r0
 801794e:	4608      	mov	r0, r1
 8017950:	460d      	mov	r5, r1
 8017952:	f7f4 f989 	bl	800bc68 <rcutils_allocator_is_valid>
 8017956:	b168      	cbz	r0, 8017974 <rmw_subscription_content_filter_options_fini+0x2c>
 8017958:	6820      	ldr	r0, [r4, #0]
 801795a:	b120      	cbz	r0, 8017966 <rmw_subscription_content_filter_options_fini+0x1e>
 801795c:	686b      	ldr	r3, [r5, #4]
 801795e:	6929      	ldr	r1, [r5, #16]
 8017960:	4798      	blx	r3
 8017962:	2300      	movs	r3, #0
 8017964:	6023      	str	r3, [r4, #0]
 8017966:	1d20      	adds	r0, r4, #4
 8017968:	f003 fd16 	bl	801b398 <rcutils_string_array_fini>
 801796c:	3800      	subs	r0, #0
 801796e:	bf18      	it	ne
 8017970:	2001      	movne	r0, #1
 8017972:	bd38      	pop	{r3, r4, r5, pc}
 8017974:	200b      	movs	r0, #11
 8017976:	bd38      	pop	{r3, r4, r5, pc}
 8017978:	200b      	movs	r0, #11
 801797a:	4770      	bx	lr

0801797c <rmw_get_default_subscription_options>:
 801797c:	2200      	movs	r2, #0
 801797e:	e9c0 2200 	strd	r2, r2, [r0]
 8017982:	6082      	str	r2, [r0, #8]
 8017984:	4770      	bx	lr
 8017986:	bf00      	nop

08017988 <rmw_time_equal>:
 8017988:	b570      	push	{r4, r5, r6, lr}
 801798a:	b084      	sub	sp, #16
 801798c:	ac04      	add	r4, sp, #16
 801798e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017992:	4925      	ldr	r1, [pc, #148]	@ (8017a28 <rmw_time_equal+0xa0>)
 8017994:	9c01      	ldr	r4, [sp, #4]
 8017996:	2202      	movs	r2, #2
 8017998:	4281      	cmp	r1, r0
 801799a:	41a2      	sbcs	r2, r4
 801799c:	d333      	bcc.n	8017a06 <rmw_time_equal+0x7e>
 801799e:	4603      	mov	r3, r0
 80179a0:	4822      	ldr	r0, [pc, #136]	@ (8017a2c <rmw_time_equal+0xa4>)
 80179a2:	e9dd 1502 	ldrd	r1, r5, [sp, #8]
 80179a6:	fba3 3200 	umull	r3, r2, r3, r0
 80179aa:	fb00 2204 	mla	r2, r0, r4, r2
 80179ae:	43de      	mvns	r6, r3
 80179b0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80179b4:	1a84      	subs	r4, r0, r2
 80179b6:	428e      	cmp	r6, r1
 80179b8:	41ac      	sbcs	r4, r5
 80179ba:	d332      	bcc.n	8017a22 <rmw_time_equal+0x9a>
 80179bc:	eb11 0e03 	adds.w	lr, r1, r3
 80179c0:	eb42 0005 	adc.w	r0, r2, r5
 80179c4:	9b08      	ldr	r3, [sp, #32]
 80179c6:	4918      	ldr	r1, [pc, #96]	@ (8017a28 <rmw_time_equal+0xa0>)
 80179c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80179ca:	2202      	movs	r2, #2
 80179cc:	4299      	cmp	r1, r3
 80179ce:	41aa      	sbcs	r2, r5
 80179d0:	d31e      	bcc.n	8017a10 <rmw_time_equal+0x88>
 80179d2:	4c16      	ldr	r4, [pc, #88]	@ (8017a2c <rmw_time_equal+0xa4>)
 80179d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80179d6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80179d8:	fba3 3104 	umull	r3, r1, r3, r4
 80179dc:	fb04 1105 	mla	r1, r4, r5, r1
 80179e0:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 80179e4:	43dd      	mvns	r5, r3
 80179e6:	ebac 0401 	sub.w	r4, ip, r1
 80179ea:	4295      	cmp	r5, r2
 80179ec:	41b4      	sbcs	r4, r6
 80179ee:	d314      	bcc.n	8017a1a <rmw_time_equal+0x92>
 80179f0:	18d2      	adds	r2, r2, r3
 80179f2:	eb41 0306 	adc.w	r3, r1, r6
 80179f6:	4283      	cmp	r3, r0
 80179f8:	bf08      	it	eq
 80179fa:	4572      	cmpeq	r2, lr
 80179fc:	bf0c      	ite	eq
 80179fe:	2001      	moveq	r0, #1
 8017a00:	2000      	movne	r0, #0
 8017a02:	b004      	add	sp, #16
 8017a04:	bd70      	pop	{r4, r5, r6, pc}
 8017a06:	f04f 3eff 	mov.w	lr, #4294967295
 8017a0a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017a0e:	e7d9      	b.n	80179c4 <rmw_time_equal+0x3c>
 8017a10:	f04f 32ff 	mov.w	r2, #4294967295
 8017a14:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8017a18:	e7ed      	b.n	80179f6 <rmw_time_equal+0x6e>
 8017a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8017a1e:	4663      	mov	r3, ip
 8017a20:	e7e9      	b.n	80179f6 <rmw_time_equal+0x6e>
 8017a22:	f04f 3eff 	mov.w	lr, #4294967295
 8017a26:	e7cd      	b.n	80179c4 <rmw_time_equal+0x3c>
 8017a28:	25c17d04 	.word	0x25c17d04
 8017a2c:	3b9aca00 	.word	0x3b9aca00

08017a30 <rmw_time_total_nsec>:
 8017a30:	b430      	push	{r4, r5}
 8017a32:	b084      	sub	sp, #16
 8017a34:	ac04      	add	r4, sp, #16
 8017a36:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017a3a:	4914      	ldr	r1, [pc, #80]	@ (8017a8c <rmw_time_total_nsec+0x5c>)
 8017a3c:	9c01      	ldr	r4, [sp, #4]
 8017a3e:	2202      	movs	r2, #2
 8017a40:	4281      	cmp	r1, r0
 8017a42:	41a2      	sbcs	r2, r4
 8017a44:	d315      	bcc.n	8017a72 <rmw_time_total_nsec+0x42>
 8017a46:	4912      	ldr	r1, [pc, #72]	@ (8017a90 <rmw_time_total_nsec+0x60>)
 8017a48:	4603      	mov	r3, r0
 8017a4a:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
 8017a4e:	fba3 3201 	umull	r3, r2, r3, r1
 8017a52:	fb01 2204 	mla	r2, r1, r4, r2
 8017a56:	ea6f 0c03 	mvn.w	ip, r3
 8017a5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017a5e:	1a8c      	subs	r4, r1, r2
 8017a60:	4584      	cmp	ip, r0
 8017a62:	41ac      	sbcs	r4, r5
 8017a64:	d30c      	bcc.n	8017a80 <rmw_time_total_nsec+0x50>
 8017a66:	1818      	adds	r0, r3, r0
 8017a68:	eb42 0105 	adc.w	r1, r2, r5
 8017a6c:	b004      	add	sp, #16
 8017a6e:	bc30      	pop	{r4, r5}
 8017a70:	4770      	bx	lr
 8017a72:	f04f 30ff 	mov.w	r0, #4294967295
 8017a76:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017a7a:	b004      	add	sp, #16
 8017a7c:	bc30      	pop	{r4, r5}
 8017a7e:	4770      	bx	lr
 8017a80:	f04f 30ff 	mov.w	r0, #4294967295
 8017a84:	b004      	add	sp, #16
 8017a86:	bc30      	pop	{r4, r5}
 8017a88:	4770      	bx	lr
 8017a8a:	bf00      	nop
 8017a8c:	25c17d04 	.word	0x25c17d04
 8017a90:	3b9aca00 	.word	0x3b9aca00

08017a94 <rmw_get_zero_initialized_message_info>:
 8017a94:	b510      	push	{r4, lr}
 8017a96:	4c09      	ldr	r4, [pc, #36]	@ (8017abc <rmw_get_zero_initialized_message_info+0x28>)
 8017a98:	4686      	mov	lr, r0
 8017a9a:	4684      	mov	ip, r0
 8017a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017aa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017aaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017aae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8017ab2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017ab6:	4670      	mov	r0, lr
 8017ab8:	bd10      	pop	{r4, pc}
 8017aba:	bf00      	nop
 8017abc:	0801e638 	.word	0x0801e638

08017ac0 <rmw_validate_full_topic_name>:
 8017ac0:	2800      	cmp	r0, #0
 8017ac2:	d049      	beq.n	8017b58 <rmw_validate_full_topic_name+0x98>
 8017ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ac8:	460e      	mov	r6, r1
 8017aca:	2900      	cmp	r1, #0
 8017acc:	d056      	beq.n	8017b7c <rmw_validate_full_topic_name+0xbc>
 8017ace:	4615      	mov	r5, r2
 8017ad0:	4604      	mov	r4, r0
 8017ad2:	f7e8 fbfd 	bl	80002d0 <strlen>
 8017ad6:	b150      	cbz	r0, 8017aee <rmw_validate_full_topic_name+0x2e>
 8017ad8:	7823      	ldrb	r3, [r4, #0]
 8017ada:	2b2f      	cmp	r3, #47	@ 0x2f
 8017adc:	d00c      	beq.n	8017af8 <rmw_validate_full_topic_name+0x38>
 8017ade:	2302      	movs	r3, #2
 8017ae0:	6033      	str	r3, [r6, #0]
 8017ae2:	b10d      	cbz	r5, 8017ae8 <rmw_validate_full_topic_name+0x28>
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	602b      	str	r3, [r5, #0]
 8017ae8:	2000      	movs	r0, #0
 8017aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aee:	2301      	movs	r3, #1
 8017af0:	6033      	str	r3, [r6, #0]
 8017af2:	2d00      	cmp	r5, #0
 8017af4:	d1f6      	bne.n	8017ae4 <rmw_validate_full_topic_name+0x24>
 8017af6:	e7f7      	b.n	8017ae8 <rmw_validate_full_topic_name+0x28>
 8017af8:	1e47      	subs	r7, r0, #1
 8017afa:	5de3      	ldrb	r3, [r4, r7]
 8017afc:	2b2f      	cmp	r3, #47	@ 0x2f
 8017afe:	d03f      	beq.n	8017b80 <rmw_validate_full_topic_name+0xc0>
 8017b00:	1e63      	subs	r3, r4, #1
 8017b02:	4621      	mov	r1, r4
 8017b04:	eb03 0e00 	add.w	lr, r3, r0
 8017b08:	469c      	mov	ip, r3
 8017b0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8017b0e:	2a5f      	cmp	r2, #95	@ 0x5f
 8017b10:	d006      	beq.n	8017b20 <rmw_validate_full_topic_name+0x60>
 8017b12:	d823      	bhi.n	8017b5c <rmw_validate_full_topic_name+0x9c>
 8017b14:	2a39      	cmp	r2, #57	@ 0x39
 8017b16:	f1a2 0841 	sub.w	r8, r2, #65	@ 0x41
 8017b1a:	d82b      	bhi.n	8017b74 <rmw_validate_full_topic_name+0xb4>
 8017b1c:	2a2e      	cmp	r2, #46	@ 0x2e
 8017b1e:	d920      	bls.n	8017b62 <rmw_validate_full_topic_name+0xa2>
 8017b20:	4573      	cmp	r3, lr
 8017b22:	d1f1      	bne.n	8017b08 <rmw_validate_full_topic_name+0x48>
 8017b24:	4c21      	ldr	r4, [pc, #132]	@ (8017bac <rmw_validate_full_topic_name+0xec>)
 8017b26:	2300      	movs	r3, #0
 8017b28:	e003      	b.n	8017b32 <rmw_validate_full_topic_name+0x72>
 8017b2a:	4298      	cmp	r0, r3
 8017b2c:	f101 0101 	add.w	r1, r1, #1
 8017b30:	d02c      	beq.n	8017b8c <rmw_validate_full_topic_name+0xcc>
 8017b32:	429f      	cmp	r7, r3
 8017b34:	f103 0301 	add.w	r3, r3, #1
 8017b38:	d0f7      	beq.n	8017b2a <rmw_validate_full_topic_name+0x6a>
 8017b3a:	780a      	ldrb	r2, [r1, #0]
 8017b3c:	2a2f      	cmp	r2, #47	@ 0x2f
 8017b3e:	d1f4      	bne.n	8017b2a <rmw_validate_full_topic_name+0x6a>
 8017b40:	784a      	ldrb	r2, [r1, #1]
 8017b42:	2a2f      	cmp	r2, #47	@ 0x2f
 8017b44:	d02d      	beq.n	8017ba2 <rmw_validate_full_topic_name+0xe2>
 8017b46:	5ca2      	ldrb	r2, [r4, r2]
 8017b48:	0752      	lsls	r2, r2, #29
 8017b4a:	d5ee      	bpl.n	8017b2a <rmw_validate_full_topic_name+0x6a>
 8017b4c:	2206      	movs	r2, #6
 8017b4e:	6032      	str	r2, [r6, #0]
 8017b50:	2d00      	cmp	r5, #0
 8017b52:	d0c9      	beq.n	8017ae8 <rmw_validate_full_topic_name+0x28>
 8017b54:	602b      	str	r3, [r5, #0]
 8017b56:	e7c7      	b.n	8017ae8 <rmw_validate_full_topic_name+0x28>
 8017b58:	200b      	movs	r0, #11
 8017b5a:	4770      	bx	lr
 8017b5c:	3a61      	subs	r2, #97	@ 0x61
 8017b5e:	2a19      	cmp	r2, #25
 8017b60:	d9de      	bls.n	8017b20 <rmw_validate_full_topic_name+0x60>
 8017b62:	2304      	movs	r3, #4
 8017b64:	6033      	str	r3, [r6, #0]
 8017b66:	2d00      	cmp	r5, #0
 8017b68:	d0be      	beq.n	8017ae8 <rmw_validate_full_topic_name+0x28>
 8017b6a:	f1c4 0401 	rsb	r4, r4, #1
 8017b6e:	4464      	add	r4, ip
 8017b70:	602c      	str	r4, [r5, #0]
 8017b72:	e7b9      	b.n	8017ae8 <rmw_validate_full_topic_name+0x28>
 8017b74:	f1b8 0f19 	cmp.w	r8, #25
 8017b78:	d9d2      	bls.n	8017b20 <rmw_validate_full_topic_name+0x60>
 8017b7a:	e7f2      	b.n	8017b62 <rmw_validate_full_topic_name+0xa2>
 8017b7c:	200b      	movs	r0, #11
 8017b7e:	e7b4      	b.n	8017aea <rmw_validate_full_topic_name+0x2a>
 8017b80:	2303      	movs	r3, #3
 8017b82:	6033      	str	r3, [r6, #0]
 8017b84:	2d00      	cmp	r5, #0
 8017b86:	d0af      	beq.n	8017ae8 <rmw_validate_full_topic_name+0x28>
 8017b88:	602f      	str	r7, [r5, #0]
 8017b8a:	e7ad      	b.n	8017ae8 <rmw_validate_full_topic_name+0x28>
 8017b8c:	28f7      	cmp	r0, #247	@ 0xf7
 8017b8e:	d802      	bhi.n	8017b96 <rmw_validate_full_topic_name+0xd6>
 8017b90:	2300      	movs	r3, #0
 8017b92:	6033      	str	r3, [r6, #0]
 8017b94:	e7a8      	b.n	8017ae8 <rmw_validate_full_topic_name+0x28>
 8017b96:	2307      	movs	r3, #7
 8017b98:	6033      	str	r3, [r6, #0]
 8017b9a:	2d00      	cmp	r5, #0
 8017b9c:	d0a4      	beq.n	8017ae8 <rmw_validate_full_topic_name+0x28>
 8017b9e:	23f6      	movs	r3, #246	@ 0xf6
 8017ba0:	e7d8      	b.n	8017b54 <rmw_validate_full_topic_name+0x94>
 8017ba2:	2205      	movs	r2, #5
 8017ba4:	6032      	str	r2, [r6, #0]
 8017ba6:	2d00      	cmp	r5, #0
 8017ba8:	d1d4      	bne.n	8017b54 <rmw_validate_full_topic_name+0x94>
 8017baa:	e79d      	b.n	8017ae8 <rmw_validate_full_topic_name+0x28>
 8017bac:	0801ebcf 	.word	0x0801ebcf

08017bb0 <rmw_validate_namespace_with_size>:
 8017bb0:	2800      	cmp	r0, #0
 8017bb2:	d031      	beq.n	8017c18 <rmw_validate_namespace_with_size+0x68>
 8017bb4:	b570      	push	{r4, r5, r6, lr}
 8017bb6:	4614      	mov	r4, r2
 8017bb8:	b0c2      	sub	sp, #264	@ 0x108
 8017bba:	b1ba      	cbz	r2, 8017bec <rmw_validate_namespace_with_size+0x3c>
 8017bbc:	2901      	cmp	r1, #1
 8017bbe:	460e      	mov	r6, r1
 8017bc0:	461d      	mov	r5, r3
 8017bc2:	d102      	bne.n	8017bca <rmw_validate_namespace_with_size+0x1a>
 8017bc4:	7803      	ldrb	r3, [r0, #0]
 8017bc6:	2b2f      	cmp	r3, #47	@ 0x2f
 8017bc8:	d015      	beq.n	8017bf6 <rmw_validate_namespace_with_size+0x46>
 8017bca:	aa01      	add	r2, sp, #4
 8017bcc:	4669      	mov	r1, sp
 8017bce:	f7ff ff77 	bl	8017ac0 <rmw_validate_full_topic_name>
 8017bd2:	b960      	cbnz	r0, 8017bee <rmw_validate_namespace_with_size+0x3e>
 8017bd4:	9b00      	ldr	r3, [sp, #0]
 8017bd6:	b163      	cbz	r3, 8017bf2 <rmw_validate_namespace_with_size+0x42>
 8017bd8:	2b07      	cmp	r3, #7
 8017bda:	d00a      	beq.n	8017bf2 <rmw_validate_namespace_with_size+0x42>
 8017bdc:	1e5a      	subs	r2, r3, #1
 8017bde:	2a05      	cmp	r2, #5
 8017be0:	d81c      	bhi.n	8017c1c <rmw_validate_namespace_with_size+0x6c>
 8017be2:	e8df f002 	tbb	[pc, r2]
 8017be6:	0c0c      	.short	0x0c0c
 8017be8:	0c0c0c0c 	.word	0x0c0c0c0c
 8017bec:	200b      	movs	r0, #11
 8017bee:	b042      	add	sp, #264	@ 0x108
 8017bf0:	bd70      	pop	{r4, r5, r6, pc}
 8017bf2:	2ef5      	cmp	r6, #245	@ 0xf5
 8017bf4:	d809      	bhi.n	8017c0a <rmw_validate_namespace_with_size+0x5a>
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	6023      	str	r3, [r4, #0]
 8017bfa:	2000      	movs	r0, #0
 8017bfc:	e7f7      	b.n	8017bee <rmw_validate_namespace_with_size+0x3e>
 8017bfe:	6023      	str	r3, [r4, #0]
 8017c00:	2d00      	cmp	r5, #0
 8017c02:	d0fa      	beq.n	8017bfa <rmw_validate_namespace_with_size+0x4a>
 8017c04:	9b01      	ldr	r3, [sp, #4]
 8017c06:	602b      	str	r3, [r5, #0]
 8017c08:	e7f7      	b.n	8017bfa <rmw_validate_namespace_with_size+0x4a>
 8017c0a:	2307      	movs	r3, #7
 8017c0c:	6023      	str	r3, [r4, #0]
 8017c0e:	2d00      	cmp	r5, #0
 8017c10:	d0f3      	beq.n	8017bfa <rmw_validate_namespace_with_size+0x4a>
 8017c12:	23f4      	movs	r3, #244	@ 0xf4
 8017c14:	602b      	str	r3, [r5, #0]
 8017c16:	e7f0      	b.n	8017bfa <rmw_validate_namespace_with_size+0x4a>
 8017c18:	200b      	movs	r0, #11
 8017c1a:	4770      	bx	lr
 8017c1c:	4a03      	ldr	r2, [pc, #12]	@ (8017c2c <rmw_validate_namespace_with_size+0x7c>)
 8017c1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017c22:	a802      	add	r0, sp, #8
 8017c24:	f7ff fcd4 	bl	80175d0 <rcutils_snprintf>
 8017c28:	2001      	movs	r0, #1
 8017c2a:	e7e0      	b.n	8017bee <rmw_validate_namespace_with_size+0x3e>
 8017c2c:	0801db4c 	.word	0x0801db4c

08017c30 <rmw_validate_namespace>:
 8017c30:	b168      	cbz	r0, 8017c4e <rmw_validate_namespace+0x1e>
 8017c32:	b570      	push	{r4, r5, r6, lr}
 8017c34:	460d      	mov	r5, r1
 8017c36:	4616      	mov	r6, r2
 8017c38:	4604      	mov	r4, r0
 8017c3a:	f7e8 fb49 	bl	80002d0 <strlen>
 8017c3e:	4633      	mov	r3, r6
 8017c40:	4601      	mov	r1, r0
 8017c42:	462a      	mov	r2, r5
 8017c44:	4620      	mov	r0, r4
 8017c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c4a:	f7ff bfb1 	b.w	8017bb0 <rmw_validate_namespace_with_size>
 8017c4e:	200b      	movs	r0, #11
 8017c50:	4770      	bx	lr
 8017c52:	bf00      	nop

08017c54 <rmw_namespace_validation_result_string>:
 8017c54:	2807      	cmp	r0, #7
 8017c56:	bf9a      	itte	ls
 8017c58:	4b02      	ldrls	r3, [pc, #8]	@ (8017c64 <rmw_namespace_validation_result_string+0x10>)
 8017c5a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017c5e:	4802      	ldrhi	r0, [pc, #8]	@ (8017c68 <rmw_namespace_validation_result_string+0x14>)
 8017c60:	4770      	bx	lr
 8017c62:	bf00      	nop
 8017c64:	0801e670 	.word	0x0801e670
 8017c68:	0801db9c 	.word	0x0801db9c

08017c6c <rmw_validate_node_name>:
 8017c6c:	2800      	cmp	r0, #0
 8017c6e:	d037      	beq.n	8017ce0 <rmw_validate_node_name+0x74>
 8017c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c72:	460e      	mov	r6, r1
 8017c74:	2900      	cmp	r1, #0
 8017c76:	d035      	beq.n	8017ce4 <rmw_validate_node_name+0x78>
 8017c78:	4617      	mov	r7, r2
 8017c7a:	4604      	mov	r4, r0
 8017c7c:	f7e8 fb28 	bl	80002d0 <strlen>
 8017c80:	b1d8      	cbz	r0, 8017cba <rmw_validate_node_name+0x4e>
 8017c82:	1e63      	subs	r3, r4, #1
 8017c84:	1819      	adds	r1, r3, r0
 8017c86:	461a      	mov	r2, r3
 8017c88:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017c8c:	f1ae 0530 	sub.w	r5, lr, #48	@ 0x30
 8017c90:	f02e 0c20 	bic.w	ip, lr, #32
 8017c94:	2d09      	cmp	r5, #9
 8017c96:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8017c9a:	d915      	bls.n	8017cc8 <rmw_validate_node_name+0x5c>
 8017c9c:	f1bc 0f19 	cmp.w	ip, #25
 8017ca0:	d912      	bls.n	8017cc8 <rmw_validate_node_name+0x5c>
 8017ca2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8017ca6:	d00f      	beq.n	8017cc8 <rmw_validate_node_name+0x5c>
 8017ca8:	2302      	movs	r3, #2
 8017caa:	6033      	str	r3, [r6, #0]
 8017cac:	b11f      	cbz	r7, 8017cb6 <rmw_validate_node_name+0x4a>
 8017cae:	f1c4 0401 	rsb	r4, r4, #1
 8017cb2:	4414      	add	r4, r2
 8017cb4:	603c      	str	r4, [r7, #0]
 8017cb6:	2000      	movs	r0, #0
 8017cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cba:	2301      	movs	r3, #1
 8017cbc:	6033      	str	r3, [r6, #0]
 8017cbe:	2f00      	cmp	r7, #0
 8017cc0:	d0f9      	beq.n	8017cb6 <rmw_validate_node_name+0x4a>
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	603b      	str	r3, [r7, #0]
 8017cc6:	e7f6      	b.n	8017cb6 <rmw_validate_node_name+0x4a>
 8017cc8:	4299      	cmp	r1, r3
 8017cca:	d1dc      	bne.n	8017c86 <rmw_validate_node_name+0x1a>
 8017ccc:	7823      	ldrb	r3, [r4, #0]
 8017cce:	4a0c      	ldr	r2, [pc, #48]	@ (8017d00 <rmw_validate_node_name+0x94>)
 8017cd0:	5cd3      	ldrb	r3, [r2, r3]
 8017cd2:	f013 0304 	ands.w	r3, r3, #4
 8017cd6:	d10e      	bne.n	8017cf6 <rmw_validate_node_name+0x8a>
 8017cd8:	28ff      	cmp	r0, #255	@ 0xff
 8017cda:	d805      	bhi.n	8017ce8 <rmw_validate_node_name+0x7c>
 8017cdc:	6033      	str	r3, [r6, #0]
 8017cde:	e7ea      	b.n	8017cb6 <rmw_validate_node_name+0x4a>
 8017ce0:	200b      	movs	r0, #11
 8017ce2:	4770      	bx	lr
 8017ce4:	200b      	movs	r0, #11
 8017ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ce8:	2304      	movs	r3, #4
 8017cea:	6033      	str	r3, [r6, #0]
 8017cec:	2f00      	cmp	r7, #0
 8017cee:	d0e2      	beq.n	8017cb6 <rmw_validate_node_name+0x4a>
 8017cf0:	23fe      	movs	r3, #254	@ 0xfe
 8017cf2:	603b      	str	r3, [r7, #0]
 8017cf4:	e7df      	b.n	8017cb6 <rmw_validate_node_name+0x4a>
 8017cf6:	2303      	movs	r3, #3
 8017cf8:	6033      	str	r3, [r6, #0]
 8017cfa:	2f00      	cmp	r7, #0
 8017cfc:	d1e1      	bne.n	8017cc2 <rmw_validate_node_name+0x56>
 8017cfe:	e7da      	b.n	8017cb6 <rmw_validate_node_name+0x4a>
 8017d00:	0801ebcf 	.word	0x0801ebcf

08017d04 <rmw_node_name_validation_result_string>:
 8017d04:	2804      	cmp	r0, #4
 8017d06:	bf9a      	itte	ls
 8017d08:	4b02      	ldrls	r3, [pc, #8]	@ (8017d14 <rmw_node_name_validation_result_string+0x10>)
 8017d0a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017d0e:	4802      	ldrhi	r0, [pc, #8]	@ (8017d18 <rmw_node_name_validation_result_string+0x14>)
 8017d10:	4770      	bx	lr
 8017d12:	bf00      	nop
 8017d14:	0801e690 	.word	0x0801e690
 8017d18:	0801dd44 	.word	0x0801dd44

08017d1c <get_memory>:
 8017d1c:	4603      	mov	r3, r0
 8017d1e:	6840      	ldr	r0, [r0, #4]
 8017d20:	b158      	cbz	r0, 8017d3a <get_memory+0x1e>
 8017d22:	6842      	ldr	r2, [r0, #4]
 8017d24:	605a      	str	r2, [r3, #4]
 8017d26:	b10a      	cbz	r2, 8017d2c <get_memory+0x10>
 8017d28:	2100      	movs	r1, #0
 8017d2a:	6011      	str	r1, [r2, #0]
 8017d2c:	681a      	ldr	r2, [r3, #0]
 8017d2e:	6042      	str	r2, [r0, #4]
 8017d30:	b102      	cbz	r2, 8017d34 <get_memory+0x18>
 8017d32:	6010      	str	r0, [r2, #0]
 8017d34:	2200      	movs	r2, #0
 8017d36:	6002      	str	r2, [r0, #0]
 8017d38:	6018      	str	r0, [r3, #0]
 8017d3a:	4770      	bx	lr

08017d3c <put_memory>:
 8017d3c:	680b      	ldr	r3, [r1, #0]
 8017d3e:	b10b      	cbz	r3, 8017d44 <put_memory+0x8>
 8017d40:	684a      	ldr	r2, [r1, #4]
 8017d42:	605a      	str	r2, [r3, #4]
 8017d44:	684a      	ldr	r2, [r1, #4]
 8017d46:	b102      	cbz	r2, 8017d4a <put_memory+0xe>
 8017d48:	6013      	str	r3, [r2, #0]
 8017d4a:	6803      	ldr	r3, [r0, #0]
 8017d4c:	428b      	cmp	r3, r1
 8017d4e:	6843      	ldr	r3, [r0, #4]
 8017d50:	bf08      	it	eq
 8017d52:	6002      	streq	r2, [r0, #0]
 8017d54:	604b      	str	r3, [r1, #4]
 8017d56:	b103      	cbz	r3, 8017d5a <put_memory+0x1e>
 8017d58:	6019      	str	r1, [r3, #0]
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	600b      	str	r3, [r1, #0]
 8017d5e:	6041      	str	r1, [r0, #4]
 8017d60:	4770      	bx	lr
 8017d62:	bf00      	nop

08017d64 <rmw_destroy_client>:
 8017d64:	b570      	push	{r4, r5, r6, lr}
 8017d66:	b128      	cbz	r0, 8017d74 <rmw_destroy_client+0x10>
 8017d68:	4604      	mov	r4, r0
 8017d6a:	6800      	ldr	r0, [r0, #0]
 8017d6c:	460d      	mov	r5, r1
 8017d6e:	f7f4 fdb7 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 8017d72:	b910      	cbnz	r0, 8017d7a <rmw_destroy_client+0x16>
 8017d74:	2401      	movs	r4, #1
 8017d76:	4620      	mov	r0, r4
 8017d78:	bd70      	pop	{r4, r5, r6, pc}
 8017d7a:	6863      	ldr	r3, [r4, #4]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d0f9      	beq.n	8017d74 <rmw_destroy_client+0x10>
 8017d80:	2d00      	cmp	r5, #0
 8017d82:	d0f7      	beq.n	8017d74 <rmw_destroy_client+0x10>
 8017d84:	6828      	ldr	r0, [r5, #0]
 8017d86:	f7f4 fdab 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 8017d8a:	2800      	cmp	r0, #0
 8017d8c:	d0f2      	beq.n	8017d74 <rmw_destroy_client+0x10>
 8017d8e:	686e      	ldr	r6, [r5, #4]
 8017d90:	2e00      	cmp	r6, #0
 8017d92:	d0ef      	beq.n	8017d74 <rmw_destroy_client+0x10>
 8017d94:	6864      	ldr	r4, [r4, #4]
 8017d96:	6932      	ldr	r2, [r6, #16]
 8017d98:	6920      	ldr	r0, [r4, #16]
 8017d9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017d9e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017da2:	6819      	ldr	r1, [r3, #0]
 8017da4:	f002 fcc4 	bl	801a730 <uxr_buffer_cancel_data>
 8017da8:	4602      	mov	r2, r0
 8017daa:	6920      	ldr	r0, [r4, #16]
 8017dac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017db0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017db4:	f7f4 fd0e 	bl	800c7d4 <run_xrce_session>
 8017db8:	6920      	ldr	r0, [r4, #16]
 8017dba:	6932      	ldr	r2, [r6, #16]
 8017dbc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017dc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017dc4:	6819      	ldr	r1, [r3, #0]
 8017dc6:	f7f8 fe07 	bl	80109d8 <uxr_buffer_delete_entity>
 8017dca:	4602      	mov	r2, r0
 8017dcc:	6920      	ldr	r0, [r4, #16]
 8017dce:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017dd2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017dd6:	f7f4 fcfd 	bl	800c7d4 <run_xrce_session>
 8017dda:	f080 0401 	eor.w	r4, r0, #1
 8017dde:	b2e4      	uxtb	r4, r4
 8017de0:	4628      	mov	r0, r5
 8017de2:	0064      	lsls	r4, r4, #1
 8017de4:	f7f4 fbd8 	bl	800c598 <rmw_uxrce_fini_client_memory>
 8017de8:	e7c5      	b.n	8017d76 <rmw_destroy_client+0x12>
 8017dea:	bf00      	nop

08017dec <rmw_get_gid_for_client>:
 8017dec:	b1a8      	cbz	r0, 8017e1a <rmw_get_gid_for_client+0x2e>
 8017dee:	b538      	push	{r3, r4, r5, lr}
 8017df0:	460c      	mov	r4, r1
 8017df2:	b1a1      	cbz	r1, 8017e1e <rmw_get_gid_for_client+0x32>
 8017df4:	4605      	mov	r5, r0
 8017df6:	6800      	ldr	r0, [r0, #0]
 8017df8:	b120      	cbz	r0, 8017e04 <rmw_get_gid_for_client+0x18>
 8017dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8017e24 <rmw_get_gid_for_client+0x38>)
 8017dfc:	6819      	ldr	r1, [r3, #0]
 8017dfe:	f7e8 fa07 	bl	8000210 <strcmp>
 8017e02:	b940      	cbnz	r0, 8017e16 <rmw_get_gid_for_client+0x2a>
 8017e04:	686b      	ldr	r3, [r5, #4]
 8017e06:	2000      	movs	r0, #0
 8017e08:	6060      	str	r0, [r4, #4]
 8017e0a:	60a0      	str	r0, [r4, #8]
 8017e0c:	60e0      	str	r0, [r4, #12]
 8017e0e:	6120      	str	r0, [r4, #16]
 8017e10:	691b      	ldr	r3, [r3, #16]
 8017e12:	6063      	str	r3, [r4, #4]
 8017e14:	bd38      	pop	{r3, r4, r5, pc}
 8017e16:	200c      	movs	r0, #12
 8017e18:	bd38      	pop	{r3, r4, r5, pc}
 8017e1a:	200b      	movs	r0, #11
 8017e1c:	4770      	bx	lr
 8017e1e:	200b      	movs	r0, #11
 8017e20:	bd38      	pop	{r3, r4, r5, pc}
 8017e22:	bf00      	nop
 8017e24:	0801e6a4 	.word	0x0801e6a4

08017e28 <rmw_get_implementation_identifier>:
 8017e28:	4b01      	ldr	r3, [pc, #4]	@ (8017e30 <rmw_get_implementation_identifier+0x8>)
 8017e2a:	6818      	ldr	r0, [r3, #0]
 8017e2c:	4770      	bx	lr
 8017e2e:	bf00      	nop
 8017e30:	0801e6a4 	.word	0x0801e6a4

08017e34 <rmw_init_options_init>:
 8017e34:	b084      	sub	sp, #16
 8017e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e38:	b083      	sub	sp, #12
 8017e3a:	ad09      	add	r5, sp, #36	@ 0x24
 8017e3c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8017e40:	b130      	cbz	r0, 8017e50 <rmw_init_options_init+0x1c>
 8017e42:	4604      	mov	r4, r0
 8017e44:	4628      	mov	r0, r5
 8017e46:	f7f3 ff0f 	bl	800bc68 <rcutils_allocator_is_valid>
 8017e4a:	b108      	cbz	r0, 8017e50 <rmw_init_options_init+0x1c>
 8017e4c:	68a6      	ldr	r6, [r4, #8]
 8017e4e:	b12e      	cbz	r6, 8017e5c <rmw_init_options_init+0x28>
 8017e50:	200b      	movs	r0, #11
 8017e52:	b003      	add	sp, #12
 8017e54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017e58:	b004      	add	sp, #16
 8017e5a:	4770      	bx	lr
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	2300      	movs	r3, #0
 8017e60:	e9c4 2300 	strd	r2, r3, [r4]
 8017e64:	4b20      	ldr	r3, [pc, #128]	@ (8017ee8 <rmw_init_options_init+0xb4>)
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	60a3      	str	r3, [r4, #8]
 8017e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e6c:	f104 0c3c 	add.w	ip, r4, #60	@ 0x3c
 8017e70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017e74:	466f      	mov	r7, sp
 8017e76:	682b      	ldr	r3, [r5, #0]
 8017e78:	f8cc 3000 	str.w	r3, [ip]
 8017e7c:	4638      	mov	r0, r7
 8017e7e:	63a6      	str	r6, [r4, #56]	@ 0x38
 8017e80:	60e6      	str	r6, [r4, #12]
 8017e82:	f003 fb0f 	bl	801b4a4 <rmw_get_default_security_options>
 8017e86:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017e8a:	f104 0310 	add.w	r3, r4, #16
 8017e8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017e92:	2203      	movs	r2, #3
 8017e94:	4815      	ldr	r0, [pc, #84]	@ (8017eec <rmw_init_options_init+0xb8>)
 8017e96:	4916      	ldr	r1, [pc, #88]	@ (8017ef0 <rmw_init_options_init+0xbc>)
 8017e98:	f7f4 fabe 	bl	800c418 <rmw_uxrce_init_init_options_impl_memory>
 8017e9c:	4813      	ldr	r0, [pc, #76]	@ (8017eec <rmw_init_options_init+0xb8>)
 8017e9e:	f7ff ff3d 	bl	8017d1c <get_memory>
 8017ea2:	b1f0      	cbz	r0, 8017ee2 <rmw_init_options_init+0xae>
 8017ea4:	4a13      	ldr	r2, [pc, #76]	@ (8017ef4 <rmw_init_options_init+0xc0>)
 8017ea6:	6883      	ldr	r3, [r0, #8]
 8017ea8:	6851      	ldr	r1, [r2, #4]
 8017eaa:	7810      	ldrb	r0, [r2, #0]
 8017eac:	6523      	str	r3, [r4, #80]	@ 0x50
 8017eae:	7418      	strb	r0, [r3, #16]
 8017eb0:	6159      	str	r1, [r3, #20]
 8017eb2:	68d1      	ldr	r1, [r2, #12]
 8017eb4:	61d9      	str	r1, [r3, #28]
 8017eb6:	6911      	ldr	r1, [r2, #16]
 8017eb8:	6219      	str	r1, [r3, #32]
 8017eba:	6951      	ldr	r1, [r2, #20]
 8017ebc:	6892      	ldr	r2, [r2, #8]
 8017ebe:	619a      	str	r2, [r3, #24]
 8017ec0:	6259      	str	r1, [r3, #36]	@ 0x24
 8017ec2:	f7fb f80f 	bl	8012ee4 <uxr_nanos>
 8017ec6:	f003 fd45 	bl	801b954 <srand>
 8017eca:	f003 fd71 	bl	801b9b0 <rand>
 8017ece:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8017ed0:	6298      	str	r0, [r3, #40]	@ 0x28
 8017ed2:	2800      	cmp	r0, #0
 8017ed4:	d0f9      	beq.n	8017eca <rmw_init_options_init+0x96>
 8017ed6:	2000      	movs	r0, #0
 8017ed8:	b003      	add	sp, #12
 8017eda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017ede:	b004      	add	sp, #16
 8017ee0:	4770      	bx	lr
 8017ee2:	2001      	movs	r0, #1
 8017ee4:	e7b5      	b.n	8017e52 <rmw_init_options_init+0x1e>
 8017ee6:	bf00      	nop
 8017ee8:	0801e6a4 	.word	0x0801e6a4
 8017eec:	2000dc20 	.word	0x2000dc20
 8017ef0:	2000db9c 	.word	0x2000db9c
 8017ef4:	2000da70 	.word	0x2000da70

08017ef8 <rmw_init_options_copy>:
 8017ef8:	2800      	cmp	r0, #0
 8017efa:	d03e      	beq.n	8017f7a <rmw_init_options_copy+0x82>
 8017efc:	b570      	push	{r4, r5, r6, lr}
 8017efe:	460d      	mov	r5, r1
 8017f00:	b149      	cbz	r1, 8017f16 <rmw_init_options_copy+0x1e>
 8017f02:	4604      	mov	r4, r0
 8017f04:	6880      	ldr	r0, [r0, #8]
 8017f06:	b120      	cbz	r0, 8017f12 <rmw_init_options_copy+0x1a>
 8017f08:	4b21      	ldr	r3, [pc, #132]	@ (8017f90 <rmw_init_options_copy+0x98>)
 8017f0a:	6819      	ldr	r1, [r3, #0]
 8017f0c:	f7e8 f980 	bl	8000210 <strcmp>
 8017f10:	bb78      	cbnz	r0, 8017f72 <rmw_init_options_copy+0x7a>
 8017f12:	68ab      	ldr	r3, [r5, #8]
 8017f14:	b11b      	cbz	r3, 8017f1e <rmw_init_options_copy+0x26>
 8017f16:	f04f 0c0b 	mov.w	ip, #11
 8017f1a:	4660      	mov	r0, ip
 8017f1c:	bd70      	pop	{r4, r5, r6, pc}
 8017f1e:	2258      	movs	r2, #88	@ 0x58
 8017f20:	4621      	mov	r1, r4
 8017f22:	4628      	mov	r0, r5
 8017f24:	f104 063c 	add.w	r6, r4, #60	@ 0x3c
 8017f28:	f004 f999 	bl	801c25e <memcpy>
 8017f2c:	4630      	mov	r0, r6
 8017f2e:	f7f3 fe9b 	bl	800bc68 <rcutils_allocator_is_valid>
 8017f32:	2800      	cmp	r0, #0
 8017f34:	d0ef      	beq.n	8017f16 <rmw_init_options_copy+0x1e>
 8017f36:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017f38:	b138      	cbz	r0, 8017f4a <rmw_init_options_copy+0x52>
 8017f3a:	f105 0238 	add.w	r2, r5, #56	@ 0x38
 8017f3e:	4631      	mov	r1, r6
 8017f40:	f003 fa7c 	bl	801b43c <rmw_enclave_options_copy>
 8017f44:	4684      	mov	ip, r0
 8017f46:	2800      	cmp	r0, #0
 8017f48:	d1e7      	bne.n	8017f1a <rmw_init_options_copy+0x22>
 8017f4a:	4812      	ldr	r0, [pc, #72]	@ (8017f94 <rmw_init_options_copy+0x9c>)
 8017f4c:	f7ff fee6 	bl	8017d1c <get_memory>
 8017f50:	b1b8      	cbz	r0, 8017f82 <rmw_init_options_copy+0x8a>
 8017f52:	6883      	ldr	r3, [r0, #8]
 8017f54:	652b      	str	r3, [r5, #80]	@ 0x50
 8017f56:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8017f58:	3510      	adds	r5, #16
 8017f5a:	f103 0410 	add.w	r4, r3, #16
 8017f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017f62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017f66:	f04f 0c00 	mov.w	ip, #0
 8017f6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017f6e:	4660      	mov	r0, ip
 8017f70:	bd70      	pop	{r4, r5, r6, pc}
 8017f72:	f04f 0c0c 	mov.w	ip, #12
 8017f76:	4660      	mov	r0, ip
 8017f78:	bd70      	pop	{r4, r5, r6, pc}
 8017f7a:	f04f 0c0b 	mov.w	ip, #11
 8017f7e:	4660      	mov	r0, ip
 8017f80:	4770      	bx	lr
 8017f82:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8017f84:	4631      	mov	r1, r6
 8017f86:	f003 fa7b 	bl	801b480 <rmw_enclave_options_fini>
 8017f8a:	f04f 0c01 	mov.w	ip, #1
 8017f8e:	e7c4      	b.n	8017f1a <rmw_init_options_copy+0x22>
 8017f90:	0801e6a4 	.word	0x0801e6a4
 8017f94:	2000dc20 	.word	0x2000dc20

08017f98 <rmw_init_options_fini>:
 8017f98:	2800      	cmp	r0, #0
 8017f9a:	d035      	beq.n	8018008 <rmw_init_options_fini+0x70>
 8017f9c:	b530      	push	{r4, r5, lr}
 8017f9e:	f100 053c 	add.w	r5, r0, #60	@ 0x3c
 8017fa2:	b097      	sub	sp, #92	@ 0x5c
 8017fa4:	4604      	mov	r4, r0
 8017fa6:	4628      	mov	r0, r5
 8017fa8:	f7f3 fe5e 	bl	800bc68 <rcutils_allocator_is_valid>
 8017fac:	b320      	cbz	r0, 8017ff8 <rmw_init_options_fini+0x60>
 8017fae:	68a0      	ldr	r0, [r4, #8]
 8017fb0:	b120      	cbz	r0, 8017fbc <rmw_init_options_fini+0x24>
 8017fb2:	4b16      	ldr	r3, [pc, #88]	@ (801800c <rmw_init_options_fini+0x74>)
 8017fb4:	6819      	ldr	r1, [r3, #0]
 8017fb6:	f7e8 f92b 	bl	8000210 <strcmp>
 8017fba:	bb18      	cbnz	r0, 8018004 <rmw_init_options_fini+0x6c>
 8017fbc:	4b14      	ldr	r3, [pc, #80]	@ (8018010 <rmw_init_options_fini+0x78>)
 8017fbe:	6819      	ldr	r1, [r3, #0]
 8017fc0:	b1e9      	cbz	r1, 8017ffe <rmw_init_options_fini+0x66>
 8017fc2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8017fc4:	e001      	b.n	8017fca <rmw_init_options_fini+0x32>
 8017fc6:	6849      	ldr	r1, [r1, #4]
 8017fc8:	b1c9      	cbz	r1, 8017ffe <rmw_init_options_fini+0x66>
 8017fca:	688b      	ldr	r3, [r1, #8]
 8017fcc:	429a      	cmp	r2, r3
 8017fce:	d1fa      	bne.n	8017fc6 <rmw_init_options_fini+0x2e>
 8017fd0:	480f      	ldr	r0, [pc, #60]	@ (8018010 <rmw_init_options_fini+0x78>)
 8017fd2:	f7ff feb3 	bl	8017d3c <put_memory>
 8017fd6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017fd8:	b118      	cbz	r0, 8017fe2 <rmw_init_options_fini+0x4a>
 8017fda:	4629      	mov	r1, r5
 8017fdc:	f003 fa50 	bl	801b480 <rmw_enclave_options_fini>
 8017fe0:	b940      	cbnz	r0, 8017ff4 <rmw_init_options_fini+0x5c>
 8017fe2:	4668      	mov	r0, sp
 8017fe4:	f7ff fca6 	bl	8017934 <rmw_get_zero_initialized_init_options>
 8017fe8:	2258      	movs	r2, #88	@ 0x58
 8017fea:	4669      	mov	r1, sp
 8017fec:	4620      	mov	r0, r4
 8017fee:	f004 f936 	bl	801c25e <memcpy>
 8017ff2:	2000      	movs	r0, #0
 8017ff4:	b017      	add	sp, #92	@ 0x5c
 8017ff6:	bd30      	pop	{r4, r5, pc}
 8017ff8:	200b      	movs	r0, #11
 8017ffa:	b017      	add	sp, #92	@ 0x5c
 8017ffc:	bd30      	pop	{r4, r5, pc}
 8017ffe:	2001      	movs	r0, #1
 8018000:	b017      	add	sp, #92	@ 0x5c
 8018002:	bd30      	pop	{r4, r5, pc}
 8018004:	200c      	movs	r0, #12
 8018006:	e7f5      	b.n	8017ff4 <rmw_init_options_fini+0x5c>
 8018008:	200b      	movs	r0, #11
 801800a:	4770      	bx	lr
 801800c:	0801e6a4 	.word	0x0801e6a4
 8018010:	2000dc20 	.word	0x2000dc20

08018014 <rmw_init>:
 8018014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018018:	b083      	sub	sp, #12
 801801a:	2800      	cmp	r0, #0
 801801c:	f000 80d4 	beq.w	80181c8 <rmw_init+0x1b4>
 8018020:	460e      	mov	r6, r1
 8018022:	2900      	cmp	r1, #0
 8018024:	f000 80d0 	beq.w	80181c8 <rmw_init+0x1b4>
 8018028:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801802a:	4605      	mov	r5, r0
 801802c:	2b00      	cmp	r3, #0
 801802e:	f000 80cb 	beq.w	80181c8 <rmw_init+0x1b4>
 8018032:	4b77      	ldr	r3, [pc, #476]	@ (8018210 <rmw_init+0x1fc>)
 8018034:	6880      	ldr	r0, [r0, #8]
 8018036:	681f      	ldr	r7, [r3, #0]
 8018038:	b128      	cbz	r0, 8018046 <rmw_init+0x32>
 801803a:	4639      	mov	r1, r7
 801803c:	f7e8 f8e8 	bl	8000210 <strcmp>
 8018040:	2800      	cmp	r0, #0
 8018042:	f040 80d3 	bne.w	80181ec <rmw_init+0x1d8>
 8018046:	e9d5 2300 	ldrd	r2, r3, [r5]
 801804a:	4c72      	ldr	r4, [pc, #456]	@ (8018214 <rmw_init+0x200>)
 801804c:	4972      	ldr	r1, [pc, #456]	@ (8018218 <rmw_init+0x204>)
 801804e:	4873      	ldr	r0, [pc, #460]	@ (801821c <rmw_init+0x208>)
 8018050:	60b7      	str	r7, [r6, #8]
 8018052:	e9c6 2300 	strd	r2, r3, [r6]
 8018056:	68eb      	ldr	r3, [r5, #12]
 8018058:	66b3      	str	r3, [r6, #104]	@ 0x68
 801805a:	2201      	movs	r2, #1
 801805c:	f7f4 f97c 	bl	800c358 <rmw_uxrce_init_session_memory>
 8018060:	4620      	mov	r0, r4
 8018062:	496f      	ldr	r1, [pc, #444]	@ (8018220 <rmw_init+0x20c>)
 8018064:	2204      	movs	r2, #4
 8018066:	f7f4 f9b7 	bl	800c3d8 <rmw_uxrce_init_static_input_buffer_memory>
 801806a:	f04f 0800 	mov.w	r8, #0
 801806e:	486b      	ldr	r0, [pc, #428]	@ (801821c <rmw_init+0x208>)
 8018070:	f884 800d 	strb.w	r8, [r4, #13]
 8018074:	f7ff fe52 	bl	8017d1c <get_memory>
 8018078:	2800      	cmp	r0, #0
 801807a:	f000 80b2 	beq.w	80181e2 <rmw_init+0x1ce>
 801807e:	6884      	ldr	r4, [r0, #8]
 8018080:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8018082:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8018084:	f890 c010 	ldrb.w	ip, [r0, #16]
 8018088:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801808c:	9101      	str	r1, [sp, #4]
 801808e:	6a00      	ldr	r0, [r0, #32]
 8018090:	9000      	str	r0, [sp, #0]
 8018092:	f104 0910 	add.w	r9, r4, #16
 8018096:	4661      	mov	r1, ip
 8018098:	4648      	mov	r0, r9
 801809a:	f7f8 fef1 	bl	8010e80 <uxr_set_custom_transport_callbacks>
 801809e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80180a2:	e9c4 33e3 	strd	r3, r3, [r4, #908]	@ 0x38c
 80180a6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80180aa:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80180ae:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80180b2:	495c      	ldr	r1, [pc, #368]	@ (8018224 <rmw_init+0x210>)
 80180b4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80180b8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80180bc:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80180c0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80180c4:	4858      	ldr	r0, [pc, #352]	@ (8018228 <rmw_init+0x214>)
 80180c6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80180ca:	2201      	movs	r2, #1
 80180cc:	66f4      	str	r4, [r6, #108]	@ 0x6c
 80180ce:	f7f4 f923 	bl	800c318 <rmw_uxrce_init_node_memory>
 80180d2:	4956      	ldr	r1, [pc, #344]	@ (801822c <rmw_init+0x218>)
 80180d4:	4856      	ldr	r0, [pc, #344]	@ (8018230 <rmw_init+0x21c>)
 80180d6:	2205      	movs	r2, #5
 80180d8:	f7f4 f8fe 	bl	800c2d8 <rmw_uxrce_init_subscription_memory>
 80180dc:	4955      	ldr	r1, [pc, #340]	@ (8018234 <rmw_init+0x220>)
 80180de:	4856      	ldr	r0, [pc, #344]	@ (8018238 <rmw_init+0x224>)
 80180e0:	220a      	movs	r2, #10
 80180e2:	f7f4 f8d9 	bl	800c298 <rmw_uxrce_init_publisher_memory>
 80180e6:	4955      	ldr	r1, [pc, #340]	@ (801823c <rmw_init+0x228>)
 80180e8:	4855      	ldr	r0, [pc, #340]	@ (8018240 <rmw_init+0x22c>)
 80180ea:	2201      	movs	r2, #1
 80180ec:	f7f4 f894 	bl	800c218 <rmw_uxrce_init_service_memory>
 80180f0:	4954      	ldr	r1, [pc, #336]	@ (8018244 <rmw_init+0x230>)
 80180f2:	4855      	ldr	r0, [pc, #340]	@ (8018248 <rmw_init+0x234>)
 80180f4:	2201      	movs	r2, #1
 80180f6:	f7f4 f8af 	bl	800c258 <rmw_uxrce_init_client_memory>
 80180fa:	4954      	ldr	r1, [pc, #336]	@ (801824c <rmw_init+0x238>)
 80180fc:	4854      	ldr	r0, [pc, #336]	@ (8018250 <rmw_init+0x23c>)
 80180fe:	220f      	movs	r2, #15
 8018100:	f7f4 f94a 	bl	800c398 <rmw_uxrce_init_topic_memory>
 8018104:	4953      	ldr	r1, [pc, #332]	@ (8018254 <rmw_init+0x240>)
 8018106:	4854      	ldr	r0, [pc, #336]	@ (8018258 <rmw_init+0x244>)
 8018108:	2203      	movs	r2, #3
 801810a:	f7f4 f985 	bl	800c418 <rmw_uxrce_init_init_options_impl_memory>
 801810e:	4953      	ldr	r1, [pc, #332]	@ (801825c <rmw_init+0x248>)
 8018110:	4853      	ldr	r0, [pc, #332]	@ (8018260 <rmw_init+0x24c>)
 8018112:	2204      	movs	r2, #4
 8018114:	f7f4 f9a0 	bl	800c458 <rmw_uxrce_init_wait_set_memory>
 8018118:	4952      	ldr	r1, [pc, #328]	@ (8018264 <rmw_init+0x250>)
 801811a:	4853      	ldr	r0, [pc, #332]	@ (8018268 <rmw_init+0x254>)
 801811c:	2204      	movs	r2, #4
 801811e:	f7f4 f9bb 	bl	800c498 <rmw_uxrce_init_guard_condition_memory>
 8018122:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8018124:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8018126:	4642      	mov	r2, r8
 8018128:	f7f4 f83e 	bl	800c1a8 <rmw_uxrce_transport_init>
 801812c:	4607      	mov	r7, r0
 801812e:	2800      	cmp	r0, #0
 8018130:	d161      	bne.n	80181f6 <rmw_init+0x1e2>
 8018132:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8018134:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8018138:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801813a:	4628      	mov	r0, r5
 801813c:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8018140:	f7f9 f8aa 	bl	8011298 <uxr_init_session>
 8018144:	4628      	mov	r0, r5
 8018146:	4949      	ldr	r1, [pc, #292]	@ (801826c <rmw_init+0x258>)
 8018148:	4622      	mov	r2, r4
 801814a:	f7f9 f8c9 	bl	80112e0 <uxr_set_topic_callback>
 801814e:	4628      	mov	r0, r5
 8018150:	4947      	ldr	r1, [pc, #284]	@ (8018270 <rmw_init+0x25c>)
 8018152:	463a      	mov	r2, r7
 8018154:	f7f9 f8c0 	bl	80112d8 <uxr_set_status_callback>
 8018158:	4628      	mov	r0, r5
 801815a:	4946      	ldr	r1, [pc, #280]	@ (8018274 <rmw_init+0x260>)
 801815c:	463a      	mov	r2, r7
 801815e:	f7f9 f8c3 	bl	80112e8 <uxr_set_request_callback>
 8018162:	4628      	mov	r0, r5
 8018164:	4944      	ldr	r1, [pc, #272]	@ (8018278 <rmw_init+0x264>)
 8018166:	463a      	mov	r2, r7
 8018168:	f7f9 f8c2 	bl	80112f0 <uxr_set_reply_callback>
 801816c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018170:	2304      	movs	r3, #4
 8018172:	0092      	lsls	r2, r2, #2
 8018174:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8018178:	4628      	mov	r0, r5
 801817a:	f7f9 f8e7 	bl	801134c <uxr_create_input_reliable_stream>
 801817e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8018182:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8018186:	2304      	movs	r3, #4
 8018188:	0092      	lsls	r2, r2, #2
 801818a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801818e:	4628      	mov	r0, r5
 8018190:	f7f9 f8c4 	bl	801131c <uxr_create_output_reliable_stream>
 8018194:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8018198:	4628      	mov	r0, r5
 801819a:	f7f9 f8d1 	bl	8011340 <uxr_create_input_best_effort_stream>
 801819e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80181a2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80181a6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80181aa:	3114      	adds	r1, #20
 80181ac:	4628      	mov	r0, r5
 80181ae:	f7f9 f8a3 	bl	80112f8 <uxr_create_output_best_effort_stream>
 80181b2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80181b6:	4628      	mov	r0, r5
 80181b8:	f7f9 fe64 	bl	8011e84 <uxr_create_session>
 80181bc:	4605      	mov	r5, r0
 80181be:	b140      	cbz	r0, 80181d2 <rmw_init+0x1be>
 80181c0:	4638      	mov	r0, r7
 80181c2:	b003      	add	sp, #12
 80181c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181c8:	270b      	movs	r7, #11
 80181ca:	4638      	mov	r0, r7
 80181cc:	b003      	add	sp, #12
 80181ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181d2:	4648      	mov	r0, r9
 80181d4:	f7f8 fe96 	bl	8010f04 <uxr_close_custom_transport>
 80181d8:	4810      	ldr	r0, [pc, #64]	@ (801821c <rmw_init+0x208>)
 80181da:	4621      	mov	r1, r4
 80181dc:	f7ff fdae 	bl	8017d3c <put_memory>
 80181e0:	66f5      	str	r5, [r6, #108]	@ 0x6c
 80181e2:	2701      	movs	r7, #1
 80181e4:	4638      	mov	r0, r7
 80181e6:	b003      	add	sp, #12
 80181e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181ec:	270c      	movs	r7, #12
 80181ee:	4638      	mov	r0, r7
 80181f0:	b003      	add	sp, #12
 80181f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181f6:	4648      	mov	r0, r9
 80181f8:	f7f8 fe84 	bl	8010f04 <uxr_close_custom_transport>
 80181fc:	4807      	ldr	r0, [pc, #28]	@ (801821c <rmw_init+0x208>)
 80181fe:	4621      	mov	r1, r4
 8018200:	f7ff fd9c 	bl	8017d3c <put_memory>
 8018204:	4638      	mov	r0, r7
 8018206:	f8c6 806c 	str.w	r8, [r6, #108]	@ 0x6c
 801820a:	b003      	add	sp, #12
 801820c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018210:	0801e6a4 	.word	0x0801e6a4
 8018214:	2000fd30 	.word	0x2000fd30
 8018218:	20010e28 	.word	0x20010e28
 801821c:	200123d0 	.word	0x200123d0
 8018220:	2000dc30 	.word	0x2000dc30
 8018224:	20010d70 	.word	0x20010d70
 8018228:	20010e14 	.word	0x20010e14
 801822c:	200100a8 	.word	0x200100a8
 8018230:	200104e0 	.word	0x200104e0
 8018234:	200104f0 	.word	0x200104f0
 8018238:	20010d60 	.word	0x20010d60
 801823c:	2000ffd0 	.word	0x2000ffd0
 8018240:	20010098 	.word	0x20010098
 8018244:	2000fef8 	.word	0x2000fef8
 8018248:	2000ffc0 	.word	0x2000ffc0
 801824c:	2000fd40 	.word	0x2000fd40
 8018250:	2000fee4 	.word	0x2000fee4
 8018254:	2000db9c 	.word	0x2000db9c
 8018258:	2000dc20 	.word	0x2000dc20
 801825c:	2000db1c 	.word	0x2000db1c
 8018260:	2000db8c 	.word	0x2000db8c
 8018264:	2000da8c 	.word	0x2000da8c
 8018268:	2000db0c 	.word	0x2000db0c
 801826c:	0801b4b5 	.word	0x0801b4b5
 8018270:	0801b4ad 	.word	0x0801b4ad
 8018274:	0801b54d 	.word	0x0801b54d
 8018278:	0801b5e9 	.word	0x0801b5e9

0801827c <rmw_context_fini>:
 801827c:	4b17      	ldr	r3, [pc, #92]	@ (80182dc <rmw_context_fini+0x60>)
 801827e:	b570      	push	{r4, r5, r6, lr}
 8018280:	681c      	ldr	r4, [r3, #0]
 8018282:	4605      	mov	r5, r0
 8018284:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8018286:	b33c      	cbz	r4, 80182d8 <rmw_context_fini+0x5c>
 8018288:	2600      	movs	r6, #0
 801828a:	e9d4 4301 	ldrd	r4, r3, [r4, #4]
 801828e:	691a      	ldr	r2, [r3, #16]
 8018290:	4282      	cmp	r2, r0
 8018292:	d018      	beq.n	80182c6 <rmw_context_fini+0x4a>
 8018294:	2c00      	cmp	r4, #0
 8018296:	d1f8      	bne.n	801828a <rmw_context_fini+0xe>
 8018298:	b188      	cbz	r0, 80182be <rmw_context_fini+0x42>
 801829a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801829e:	789b      	ldrb	r3, [r3, #2]
 80182a0:	2b01      	cmp	r3, #1
 80182a2:	bf14      	ite	ne
 80182a4:	210a      	movne	r1, #10
 80182a6:	2100      	moveq	r1, #0
 80182a8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80182ac:	f7f9 fdc2 	bl	8011e34 <uxr_delete_session_retries>
 80182b0:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80182b2:	f7f4 f911 	bl	800c4d8 <rmw_uxrce_fini_session_memory>
 80182b6:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80182b8:	3010      	adds	r0, #16
 80182ba:	f7f8 fe23 	bl	8010f04 <uxr_close_custom_transport>
 80182be:	2300      	movs	r3, #0
 80182c0:	66eb      	str	r3, [r5, #108]	@ 0x6c
 80182c2:	4630      	mov	r0, r6
 80182c4:	bd70      	pop	{r4, r5, r6, pc}
 80182c6:	f103 0018 	add.w	r0, r3, #24
 80182ca:	f000 f911 	bl	80184f0 <rmw_destroy_node>
 80182ce:	4606      	mov	r6, r0
 80182d0:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 80182d2:	2c00      	cmp	r4, #0
 80182d4:	d1d9      	bne.n	801828a <rmw_context_fini+0xe>
 80182d6:	e7df      	b.n	8018298 <rmw_context_fini+0x1c>
 80182d8:	4626      	mov	r6, r4
 80182da:	e7dd      	b.n	8018298 <rmw_context_fini+0x1c>
 80182dc:	20010e14 	.word	0x20010e14

080182e0 <create_topic>:
 80182e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182e4:	4604      	mov	r4, r0
 80182e6:	b084      	sub	sp, #16
 80182e8:	4824      	ldr	r0, [pc, #144]	@ (801837c <create_topic+0x9c>)
 80182ea:	460f      	mov	r7, r1
 80182ec:	4616      	mov	r6, r2
 80182ee:	f7ff fd15 	bl	8017d1c <get_memory>
 80182f2:	2800      	cmp	r0, #0
 80182f4:	d03c      	beq.n	8018370 <create_topic+0x90>
 80182f6:	6923      	ldr	r3, [r4, #16]
 80182f8:	6885      	ldr	r5, [r0, #8]
 80182fa:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8018384 <create_topic+0xa4>
 80182fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018302:	e9c5 6405 	strd	r6, r4, [r5, #20]
 8018306:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801830a:	1c42      	adds	r2, r0, #1
 801830c:	2102      	movs	r1, #2
 801830e:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8018312:	f7f8 fdfb 	bl	8010f0c <uxr_object_id>
 8018316:	223c      	movs	r2, #60	@ 0x3c
 8018318:	6128      	str	r0, [r5, #16]
 801831a:	4641      	mov	r1, r8
 801831c:	4638      	mov	r0, r7
 801831e:	f7f4 fac5 	bl	800c8ac <generate_topic_name>
 8018322:	b310      	cbz	r0, 801836a <create_topic+0x8a>
 8018324:	4f16      	ldr	r7, [pc, #88]	@ (8018380 <create_topic+0xa0>)
 8018326:	4630      	mov	r0, r6
 8018328:	2264      	movs	r2, #100	@ 0x64
 801832a:	4639      	mov	r1, r7
 801832c:	f7f4 fa8e 	bl	800c84c <generate_type_name>
 8018330:	b1d8      	cbz	r0, 801836a <create_topic+0x8a>
 8018332:	6920      	ldr	r0, [r4, #16]
 8018334:	2306      	movs	r3, #6
 8018336:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801833a:	f8cd 8000 	str.w	r8, [sp]
 801833e:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8018342:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018346:	6811      	ldr	r1, [r2, #0]
 8018348:	6963      	ldr	r3, [r4, #20]
 801834a:	692a      	ldr	r2, [r5, #16]
 801834c:	f7f8 fbc0 	bl	8010ad0 <uxr_buffer_create_topic_bin>
 8018350:	4602      	mov	r2, r0
 8018352:	6920      	ldr	r0, [r4, #16]
 8018354:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018358:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801835c:	f7f4 fa3a 	bl	800c7d4 <run_xrce_session>
 8018360:	b118      	cbz	r0, 801836a <create_topic+0x8a>
 8018362:	4628      	mov	r0, r5
 8018364:	b004      	add	sp, #16
 8018366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801836a:	4628      	mov	r0, r5
 801836c:	f7f4 f92a 	bl	800c5c4 <rmw_uxrce_fini_topic_memory>
 8018370:	2500      	movs	r5, #0
 8018372:	4628      	mov	r0, r5
 8018374:	b004      	add	sp, #16
 8018376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801837a:	bf00      	nop
 801837c:	2000fee4 	.word	0x2000fee4
 8018380:	20012400 	.word	0x20012400
 8018384:	20012464 	.word	0x20012464

08018388 <destroy_topic>:
 8018388:	b538      	push	{r3, r4, r5, lr}
 801838a:	6984      	ldr	r4, [r0, #24]
 801838c:	b1d4      	cbz	r4, 80183c4 <destroy_topic+0x3c>
 801838e:	4605      	mov	r5, r0
 8018390:	6920      	ldr	r0, [r4, #16]
 8018392:	692a      	ldr	r2, [r5, #16]
 8018394:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018398:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801839c:	6819      	ldr	r1, [r3, #0]
 801839e:	f7f8 fb1b 	bl	80109d8 <uxr_buffer_delete_entity>
 80183a2:	4602      	mov	r2, r0
 80183a4:	6920      	ldr	r0, [r4, #16]
 80183a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80183aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80183ae:	f7f4 fa11 	bl	800c7d4 <run_xrce_session>
 80183b2:	f080 0401 	eor.w	r4, r0, #1
 80183b6:	b2e4      	uxtb	r4, r4
 80183b8:	4628      	mov	r0, r5
 80183ba:	0064      	lsls	r4, r4, #1
 80183bc:	f7f4 f902 	bl	800c5c4 <rmw_uxrce_fini_topic_memory>
 80183c0:	4620      	mov	r0, r4
 80183c2:	bd38      	pop	{r3, r4, r5, pc}
 80183c4:	2401      	movs	r4, #1
 80183c6:	4620      	mov	r0, r4
 80183c8:	bd38      	pop	{r3, r4, r5, pc}
 80183ca:	bf00      	nop

080183cc <create_node>:
 80183cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183d0:	b083      	sub	sp, #12
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d063      	beq.n	801849e <create_node+0xd2>
 80183d6:	4606      	mov	r6, r0
 80183d8:	4836      	ldr	r0, [pc, #216]	@ (80184b4 <create_node+0xe8>)
 80183da:	460f      	mov	r7, r1
 80183dc:	4690      	mov	r8, r2
 80183de:	461d      	mov	r5, r3
 80183e0:	f7ff fc9c 	bl	8017d1c <get_memory>
 80183e4:	2800      	cmp	r0, #0
 80183e6:	d05a      	beq.n	801849e <create_node+0xd2>
 80183e8:	6884      	ldr	r4, [r0, #8]
 80183ea:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 80183ec:	6123      	str	r3, [r4, #16]
 80183ee:	f7ff fd1b 	bl	8017e28 <rmw_get_implementation_identifier>
 80183f2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80183f6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80183fa:	f8c4 9020 	str.w	r9, [r4, #32]
 80183fe:	4630      	mov	r0, r6
 8018400:	f7e7 ff66 	bl	80002d0 <strlen>
 8018404:	1c42      	adds	r2, r0, #1
 8018406:	2a3c      	cmp	r2, #60	@ 0x3c
 8018408:	f104 0518 	add.w	r5, r4, #24
 801840c:	d844      	bhi.n	8018498 <create_node+0xcc>
 801840e:	4648      	mov	r0, r9
 8018410:	4631      	mov	r1, r6
 8018412:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8018416:	f003 ff22 	bl	801c25e <memcpy>
 801841a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801841e:	4638      	mov	r0, r7
 8018420:	f7e7 ff56 	bl	80002d0 <strlen>
 8018424:	1c42      	adds	r2, r0, #1
 8018426:	2a3c      	cmp	r2, #60	@ 0x3c
 8018428:	d836      	bhi.n	8018498 <create_node+0xcc>
 801842a:	4639      	mov	r1, r7
 801842c:	4648      	mov	r0, r9
 801842e:	f003 ff16 	bl	801c25e <memcpy>
 8018432:	6923      	ldr	r3, [r4, #16]
 8018434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018438:	2101      	movs	r1, #1
 801843a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801843e:	1842      	adds	r2, r0, r1
 8018440:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8018444:	f7f8 fd62 	bl	8010f0c <uxr_object_id>
 8018448:	6160      	str	r0, [r4, #20]
 801844a:	783b      	ldrb	r3, [r7, #0]
 801844c:	2b2f      	cmp	r3, #47	@ 0x2f
 801844e:	d128      	bne.n	80184a2 <create_node+0xd6>
 8018450:	787b      	ldrb	r3, [r7, #1]
 8018452:	bb33      	cbnz	r3, 80184a2 <create_node+0xd6>
 8018454:	4a18      	ldr	r2, [pc, #96]	@ (80184b8 <create_node+0xec>)
 8018456:	4819      	ldr	r0, [pc, #100]	@ (80184bc <create_node+0xf0>)
 8018458:	4633      	mov	r3, r6
 801845a:	213c      	movs	r1, #60	@ 0x3c
 801845c:	f003 fcb0 	bl	801bdc0 <sniprintf>
 8018460:	6920      	ldr	r0, [r4, #16]
 8018462:	4916      	ldr	r1, [pc, #88]	@ (80184bc <create_node+0xf0>)
 8018464:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8018468:	9100      	str	r1, [sp, #0]
 801846a:	2106      	movs	r1, #6
 801846c:	9101      	str	r1, [sp, #4]
 801846e:	6811      	ldr	r1, [r2, #0]
 8018470:	6962      	ldr	r2, [r4, #20]
 8018472:	fa1f f388 	uxth.w	r3, r8
 8018476:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801847a:	f7f8 faf7 	bl	8010a6c <uxr_buffer_create_participant_bin>
 801847e:	4602      	mov	r2, r0
 8018480:	6920      	ldr	r0, [r4, #16]
 8018482:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018486:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801848a:	f7f4 f9a3 	bl	800c7d4 <run_xrce_session>
 801848e:	b118      	cbz	r0, 8018498 <create_node+0xcc>
 8018490:	4628      	mov	r0, r5
 8018492:	b003      	add	sp, #12
 8018494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018498:	4628      	mov	r0, r5
 801849a:	f7f4 f823 	bl	800c4e4 <rmw_uxrce_fini_node_memory>
 801849e:	2500      	movs	r5, #0
 80184a0:	e7f6      	b.n	8018490 <create_node+0xc4>
 80184a2:	4a07      	ldr	r2, [pc, #28]	@ (80184c0 <create_node+0xf4>)
 80184a4:	9600      	str	r6, [sp, #0]
 80184a6:	463b      	mov	r3, r7
 80184a8:	213c      	movs	r1, #60	@ 0x3c
 80184aa:	4804      	ldr	r0, [pc, #16]	@ (80184bc <create_node+0xf0>)
 80184ac:	f003 fc88 	bl	801bdc0 <sniprintf>
 80184b0:	e7d6      	b.n	8018460 <create_node+0x94>
 80184b2:	bf00      	nop
 80184b4:	20010e14 	.word	0x20010e14
 80184b8:	0801d2c8 	.word	0x0801d2c8
 80184bc:	200124a0 	.word	0x200124a0
 80184c0:	0801daf0 	.word	0x0801daf0

080184c4 <rmw_create_node>:
 80184c4:	b191      	cbz	r1, 80184ec <rmw_create_node+0x28>
 80184c6:	b410      	push	{r4}
 80184c8:	4614      	mov	r4, r2
 80184ca:	780a      	ldrb	r2, [r1, #0]
 80184cc:	4603      	mov	r3, r0
 80184ce:	4608      	mov	r0, r1
 80184d0:	b142      	cbz	r2, 80184e4 <rmw_create_node+0x20>
 80184d2:	b13c      	cbz	r4, 80184e4 <rmw_create_node+0x20>
 80184d4:	7822      	ldrb	r2, [r4, #0]
 80184d6:	b12a      	cbz	r2, 80184e4 <rmw_create_node+0x20>
 80184d8:	4621      	mov	r1, r4
 80184da:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80184dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184e0:	f7ff bf74 	b.w	80183cc <create_node>
 80184e4:	2000      	movs	r0, #0
 80184e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184ea:	4770      	bx	lr
 80184ec:	2000      	movs	r0, #0
 80184ee:	4770      	bx	lr

080184f0 <rmw_destroy_node>:
 80184f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184f2:	b328      	cbz	r0, 8018540 <rmw_destroy_node+0x50>
 80184f4:	4607      	mov	r7, r0
 80184f6:	6800      	ldr	r0, [r0, #0]
 80184f8:	b120      	cbz	r0, 8018504 <rmw_destroy_node+0x14>
 80184fa:	4b36      	ldr	r3, [pc, #216]	@ (80185d4 <rmw_destroy_node+0xe4>)
 80184fc:	6819      	ldr	r1, [r3, #0]
 80184fe:	f7e7 fe87 	bl	8000210 <strcmp>
 8018502:	b9e8      	cbnz	r0, 8018540 <rmw_destroy_node+0x50>
 8018504:	687d      	ldr	r5, [r7, #4]
 8018506:	b1dd      	cbz	r5, 8018540 <rmw_destroy_node+0x50>
 8018508:	4b33      	ldr	r3, [pc, #204]	@ (80185d8 <rmw_destroy_node+0xe8>)
 801850a:	681c      	ldr	r4, [r3, #0]
 801850c:	2c00      	cmp	r4, #0
 801850e:	d05f      	beq.n	80185d0 <rmw_destroy_node+0xe0>
 8018510:	2600      	movs	r6, #0
 8018512:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018516:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801851a:	429d      	cmp	r5, r3
 801851c:	d013      	beq.n	8018546 <rmw_destroy_node+0x56>
 801851e:	2c00      	cmp	r4, #0
 8018520:	d1f7      	bne.n	8018512 <rmw_destroy_node+0x22>
 8018522:	4b2e      	ldr	r3, [pc, #184]	@ (80185dc <rmw_destroy_node+0xec>)
 8018524:	681c      	ldr	r4, [r3, #0]
 8018526:	b1c4      	cbz	r4, 801855a <rmw_destroy_node+0x6a>
 8018528:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801852c:	6a0b      	ldr	r3, [r1, #32]
 801852e:	429d      	cmp	r5, r3
 8018530:	d1f9      	bne.n	8018526 <rmw_destroy_node+0x36>
 8018532:	317c      	adds	r1, #124	@ 0x7c
 8018534:	4638      	mov	r0, r7
 8018536:	f000 fad9 	bl	8018aec <rmw_destroy_subscription>
 801853a:	2801      	cmp	r0, #1
 801853c:	4606      	mov	r6, r0
 801853e:	d1f2      	bne.n	8018526 <rmw_destroy_node+0x36>
 8018540:	2601      	movs	r6, #1
 8018542:	4630      	mov	r0, r6
 8018544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018546:	3184      	adds	r1, #132	@ 0x84
 8018548:	4638      	mov	r0, r7
 801854a:	f7f3 fddb 	bl	800c104 <rmw_destroy_publisher>
 801854e:	2801      	cmp	r0, #1
 8018550:	4606      	mov	r6, r0
 8018552:	d0f5      	beq.n	8018540 <rmw_destroy_node+0x50>
 8018554:	2c00      	cmp	r4, #0
 8018556:	d1dc      	bne.n	8018512 <rmw_destroy_node+0x22>
 8018558:	e7e3      	b.n	8018522 <rmw_destroy_node+0x32>
 801855a:	4b21      	ldr	r3, [pc, #132]	@ (80185e0 <rmw_destroy_node+0xf0>)
 801855c:	681c      	ldr	r4, [r3, #0]
 801855e:	b16c      	cbz	r4, 801857c <rmw_destroy_node+0x8c>
 8018560:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018564:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018566:	429d      	cmp	r5, r3
 8018568:	d1f9      	bne.n	801855e <rmw_destroy_node+0x6e>
 801856a:	317c      	adds	r1, #124	@ 0x7c
 801856c:	4638      	mov	r0, r7
 801856e:	f000 f98b 	bl	8018888 <rmw_destroy_service>
 8018572:	2801      	cmp	r0, #1
 8018574:	4606      	mov	r6, r0
 8018576:	d0e3      	beq.n	8018540 <rmw_destroy_node+0x50>
 8018578:	2c00      	cmp	r4, #0
 801857a:	d1f1      	bne.n	8018560 <rmw_destroy_node+0x70>
 801857c:	4b19      	ldr	r3, [pc, #100]	@ (80185e4 <rmw_destroy_node+0xf4>)
 801857e:	681c      	ldr	r4, [r3, #0]
 8018580:	b16c      	cbz	r4, 801859e <rmw_destroy_node+0xae>
 8018582:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018586:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8018588:	429d      	cmp	r5, r3
 801858a:	d1f9      	bne.n	8018580 <rmw_destroy_node+0x90>
 801858c:	317c      	adds	r1, #124	@ 0x7c
 801858e:	4638      	mov	r0, r7
 8018590:	f7ff fbe8 	bl	8017d64 <rmw_destroy_client>
 8018594:	2801      	cmp	r0, #1
 8018596:	4606      	mov	r6, r0
 8018598:	d0d2      	beq.n	8018540 <rmw_destroy_node+0x50>
 801859a:	2c00      	cmp	r4, #0
 801859c:	d1f1      	bne.n	8018582 <rmw_destroy_node+0x92>
 801859e:	6928      	ldr	r0, [r5, #16]
 80185a0:	696a      	ldr	r2, [r5, #20]
 80185a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80185a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80185aa:	6819      	ldr	r1, [r3, #0]
 80185ac:	f7f8 fa14 	bl	80109d8 <uxr_buffer_delete_entity>
 80185b0:	4602      	mov	r2, r0
 80185b2:	6928      	ldr	r0, [r5, #16]
 80185b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80185b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80185bc:	f7f4 f90a 	bl	800c7d4 <run_xrce_session>
 80185c0:	2800      	cmp	r0, #0
 80185c2:	bf08      	it	eq
 80185c4:	2602      	moveq	r6, #2
 80185c6:	4638      	mov	r0, r7
 80185c8:	f7f3 ff8c 	bl	800c4e4 <rmw_uxrce_fini_node_memory>
 80185cc:	4630      	mov	r0, r6
 80185ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185d0:	4626      	mov	r6, r4
 80185d2:	e7a6      	b.n	8018522 <rmw_destroy_node+0x32>
 80185d4:	0801e6a4 	.word	0x0801e6a4
 80185d8:	20010d60 	.word	0x20010d60
 80185dc:	200104e0 	.word	0x200104e0
 80185e0:	20010098 	.word	0x20010098
 80185e4:	2000ffc0 	.word	0x2000ffc0

080185e8 <rmw_node_get_graph_guard_condition>:
 80185e8:	6843      	ldr	r3, [r0, #4]
 80185ea:	6918      	ldr	r0, [r3, #16]
 80185ec:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80185f0:	4770      	bx	lr
 80185f2:	bf00      	nop

080185f4 <rmw_send_request>:
 80185f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185f8:	4604      	mov	r4, r0
 80185fa:	6800      	ldr	r0, [r0, #0]
 80185fc:	b08a      	sub	sp, #40	@ 0x28
 80185fe:	460e      	mov	r6, r1
 8018600:	4615      	mov	r5, r2
 8018602:	b128      	cbz	r0, 8018610 <rmw_send_request+0x1c>
 8018604:	4b1e      	ldr	r3, [pc, #120]	@ (8018680 <rmw_send_request+0x8c>)
 8018606:	6819      	ldr	r1, [r3, #0]
 8018608:	f7e7 fe02 	bl	8000210 <strcmp>
 801860c:	2800      	cmp	r0, #0
 801860e:	d133      	bne.n	8018678 <rmw_send_request+0x84>
 8018610:	6864      	ldr	r4, [r4, #4]
 8018612:	6963      	ldr	r3, [r4, #20]
 8018614:	6fa7      	ldr	r7, [r4, #120]	@ 0x78
 8018616:	689b      	ldr	r3, [r3, #8]
 8018618:	4798      	blx	r3
 801861a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801861e:	4630      	mov	r0, r6
 8018620:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018624:	4798      	blx	r3
 8018626:	693b      	ldr	r3, [r7, #16]
 8018628:	9000      	str	r0, [sp, #0]
 801862a:	6922      	ldr	r2, [r4, #16]
 801862c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801862e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8018632:	ab02      	add	r3, sp, #8
 8018634:	f7fa fcf8 	bl	8013028 <uxr_prepare_output_stream>
 8018638:	2300      	movs	r3, #0
 801863a:	6028      	str	r0, [r5, #0]
 801863c:	606b      	str	r3, [r5, #4]
 801863e:	b190      	cbz	r0, 8018666 <rmw_send_request+0x72>
 8018640:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018644:	a902      	add	r1, sp, #8
 8018646:	4630      	mov	r0, r6
 8018648:	4798      	blx	r3
 801864a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801864e:	6938      	ldr	r0, [r7, #16]
 8018650:	2b01      	cmp	r3, #1
 8018652:	d00c      	beq.n	801866e <rmw_send_request+0x7a>
 8018654:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8018656:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801865a:	f7f9 fa25 	bl	8011aa8 <uxr_run_session_until_confirm_delivery>
 801865e:	2000      	movs	r0, #0
 8018660:	b00a      	add	sp, #40	@ 0x28
 8018662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018666:	2001      	movs	r0, #1
 8018668:	b00a      	add	sp, #40	@ 0x28
 801866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801866e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018672:	f7f8 fe81 	bl	8011378 <uxr_flash_output_streams>
 8018676:	e7f2      	b.n	801865e <rmw_send_request+0x6a>
 8018678:	200c      	movs	r0, #12
 801867a:	b00a      	add	sp, #40	@ 0x28
 801867c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018680:	0801e6a4 	.word	0x0801e6a4

08018684 <rmw_take_request>:
 8018684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018688:	4605      	mov	r5, r0
 801868a:	6800      	ldr	r0, [r0, #0]
 801868c:	b089      	sub	sp, #36	@ 0x24
 801868e:	460c      	mov	r4, r1
 8018690:	4690      	mov	r8, r2
 8018692:	461e      	mov	r6, r3
 8018694:	b128      	cbz	r0, 80186a2 <rmw_take_request+0x1e>
 8018696:	4b28      	ldr	r3, [pc, #160]	@ (8018738 <rmw_take_request+0xb4>)
 8018698:	6819      	ldr	r1, [r3, #0]
 801869a:	f7e7 fdb9 	bl	8000210 <strcmp>
 801869e:	2800      	cmp	r0, #0
 80186a0:	d146      	bne.n	8018730 <rmw_take_request+0xac>
 80186a2:	b10e      	cbz	r6, 80186a8 <rmw_take_request+0x24>
 80186a4:	2300      	movs	r3, #0
 80186a6:	7033      	strb	r3, [r6, #0]
 80186a8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80186ac:	f7f4 f814 	bl	800c6d8 <rmw_uxrce_clean_expired_static_input_buffer>
 80186b0:	4648      	mov	r0, r9
 80186b2:	f7f3 ffeb 	bl	800c68c <rmw_uxrce_find_static_input_buffer_by_owner>
 80186b6:	4607      	mov	r7, r0
 80186b8:	b3b0      	cbz	r0, 8018728 <rmw_take_request+0xa4>
 80186ba:	6885      	ldr	r5, [r0, #8]
 80186bc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 80186c0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 80186c4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80186c8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 80186cc:	7423      	strb	r3, [r4, #16]
 80186ce:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 80186d2:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 80186d6:	74e2      	strb	r2, [r4, #19]
 80186d8:	f8a4 3011 	strh.w	r3, [r4, #17]
 80186dc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80186e0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80186e4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80186e8:	61e1      	str	r1, [r4, #28]
 80186ea:	6162      	str	r2, [r4, #20]
 80186ec:	61a3      	str	r3, [r4, #24]
 80186ee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80186f2:	689b      	ldr	r3, [r3, #8]
 80186f4:	4798      	blx	r3
 80186f6:	6844      	ldr	r4, [r0, #4]
 80186f8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80186fc:	f105 0110 	add.w	r1, r5, #16
 8018700:	4668      	mov	r0, sp
 8018702:	f7f8 f813 	bl	801072c <ucdr_init_buffer>
 8018706:	68e3      	ldr	r3, [r4, #12]
 8018708:	4641      	mov	r1, r8
 801870a:	4668      	mov	r0, sp
 801870c:	4798      	blx	r3
 801870e:	4639      	mov	r1, r7
 8018710:	4604      	mov	r4, r0
 8018712:	480a      	ldr	r0, [pc, #40]	@ (801873c <rmw_take_request+0xb8>)
 8018714:	f7ff fb12 	bl	8017d3c <put_memory>
 8018718:	b106      	cbz	r6, 801871c <rmw_take_request+0x98>
 801871a:	7034      	strb	r4, [r6, #0]
 801871c:	f084 0001 	eor.w	r0, r4, #1
 8018720:	b2c0      	uxtb	r0, r0
 8018722:	b009      	add	sp, #36	@ 0x24
 8018724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018728:	2001      	movs	r0, #1
 801872a:	b009      	add	sp, #36	@ 0x24
 801872c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018730:	200c      	movs	r0, #12
 8018732:	b009      	add	sp, #36	@ 0x24
 8018734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018738:	0801e6a4 	.word	0x0801e6a4
 801873c:	2000fd30 	.word	0x2000fd30

08018740 <rmw_send_response>:
 8018740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018742:	4605      	mov	r5, r0
 8018744:	6800      	ldr	r0, [r0, #0]
 8018746:	b091      	sub	sp, #68	@ 0x44
 8018748:	460c      	mov	r4, r1
 801874a:	4616      	mov	r6, r2
 801874c:	b128      	cbz	r0, 801875a <rmw_send_response+0x1a>
 801874e:	4b28      	ldr	r3, [pc, #160]	@ (80187f0 <rmw_send_response+0xb0>)
 8018750:	6819      	ldr	r1, [r3, #0]
 8018752:	f7e7 fd5d 	bl	8000210 <strcmp>
 8018756:	2800      	cmp	r0, #0
 8018758:	d141      	bne.n	80187de <rmw_send_response+0x9e>
 801875a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801875e:	9306      	str	r3, [sp, #24]
 8018760:	4623      	mov	r3, r4
 8018762:	9207      	str	r2, [sp, #28]
 8018764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018768:	686d      	ldr	r5, [r5, #4]
 801876a:	789b      	ldrb	r3, [r3, #2]
 801876c:	68a1      	ldr	r1, [r4, #8]
 801876e:	f88d 2017 	strb.w	r2, [sp, #23]
 8018772:	f88d 3016 	strb.w	r3, [sp, #22]
 8018776:	68e2      	ldr	r2, [r4, #12]
 8018778:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801877c:	6860      	ldr	r0, [r4, #4]
 801877e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018782:	ab02      	add	r3, sp, #8
 8018784:	c307      	stmia	r3!, {r0, r1, r2}
 8018786:	696b      	ldr	r3, [r5, #20]
 8018788:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801878a:	68db      	ldr	r3, [r3, #12]
 801878c:	4798      	blx	r3
 801878e:	6844      	ldr	r4, [r0, #4]
 8018790:	4630      	mov	r0, r6
 8018792:	6923      	ldr	r3, [r4, #16]
 8018794:	4798      	blx	r3
 8018796:	f100 0318 	add.w	r3, r0, #24
 801879a:	6938      	ldr	r0, [r7, #16]
 801879c:	9300      	str	r3, [sp, #0]
 801879e:	692a      	ldr	r2, [r5, #16]
 80187a0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80187a2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80187a6:	ab08      	add	r3, sp, #32
 80187a8:	f7fa fc3e 	bl	8013028 <uxr_prepare_output_stream>
 80187ac:	b910      	cbnz	r0, 80187b4 <rmw_send_response+0x74>
 80187ae:	2001      	movs	r0, #1
 80187b0:	b011      	add	sp, #68	@ 0x44
 80187b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187b4:	a902      	add	r1, sp, #8
 80187b6:	a808      	add	r0, sp, #32
 80187b8:	f7fb fd68 	bl	801428c <uxr_serialize_SampleIdentity>
 80187bc:	68a3      	ldr	r3, [r4, #8]
 80187be:	a908      	add	r1, sp, #32
 80187c0:	4630      	mov	r0, r6
 80187c2:	4798      	blx	r3
 80187c4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 80187c8:	6938      	ldr	r0, [r7, #16]
 80187ca:	2b01      	cmp	r3, #1
 80187cc:	d00a      	beq.n	80187e4 <rmw_send_response+0xa4>
 80187ce:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 80187d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80187d4:	f7f9 f968 	bl	8011aa8 <uxr_run_session_until_confirm_delivery>
 80187d8:	2000      	movs	r0, #0
 80187da:	b011      	add	sp, #68	@ 0x44
 80187dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187de:	200c      	movs	r0, #12
 80187e0:	b011      	add	sp, #68	@ 0x44
 80187e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80187e8:	f7f8 fdc6 	bl	8011378 <uxr_flash_output_streams>
 80187ec:	e7f4      	b.n	80187d8 <rmw_send_response+0x98>
 80187ee:	bf00      	nop
 80187f0:	0801e6a4 	.word	0x0801e6a4

080187f4 <rmw_take_response>:
 80187f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187f8:	4604      	mov	r4, r0
 80187fa:	6800      	ldr	r0, [r0, #0]
 80187fc:	b088      	sub	sp, #32
 80187fe:	4688      	mov	r8, r1
 8018800:	4617      	mov	r7, r2
 8018802:	461d      	mov	r5, r3
 8018804:	b120      	cbz	r0, 8018810 <rmw_take_response+0x1c>
 8018806:	4b1e      	ldr	r3, [pc, #120]	@ (8018880 <rmw_take_response+0x8c>)
 8018808:	6819      	ldr	r1, [r3, #0]
 801880a:	f7e7 fd01 	bl	8000210 <strcmp>
 801880e:	bb78      	cbnz	r0, 8018870 <rmw_take_response+0x7c>
 8018810:	b10d      	cbz	r5, 8018816 <rmw_take_response+0x22>
 8018812:	2300      	movs	r3, #0
 8018814:	702b      	strb	r3, [r5, #0]
 8018816:	6864      	ldr	r4, [r4, #4]
 8018818:	f7f3 ff5e 	bl	800c6d8 <rmw_uxrce_clean_expired_static_input_buffer>
 801881c:	4620      	mov	r0, r4
 801881e:	f7f3 ff35 	bl	800c68c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018822:	4606      	mov	r6, r0
 8018824:	b340      	cbz	r0, 8018878 <rmw_take_response+0x84>
 8018826:	6963      	ldr	r3, [r4, #20]
 8018828:	6884      	ldr	r4, [r0, #8]
 801882a:	68db      	ldr	r3, [r3, #12]
 801882c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8018830:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8018834:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8018838:	4798      	blx	r3
 801883a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801883e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8018842:	f104 0110 	add.w	r1, r4, #16
 8018846:	4668      	mov	r0, sp
 8018848:	f7f7 ff70 	bl	801072c <ucdr_init_buffer>
 801884c:	4639      	mov	r1, r7
 801884e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018852:	4668      	mov	r0, sp
 8018854:	4798      	blx	r3
 8018856:	4631      	mov	r1, r6
 8018858:	4604      	mov	r4, r0
 801885a:	480a      	ldr	r0, [pc, #40]	@ (8018884 <rmw_take_response+0x90>)
 801885c:	f7ff fa6e 	bl	8017d3c <put_memory>
 8018860:	b105      	cbz	r5, 8018864 <rmw_take_response+0x70>
 8018862:	702c      	strb	r4, [r5, #0]
 8018864:	f084 0001 	eor.w	r0, r4, #1
 8018868:	b2c0      	uxtb	r0, r0
 801886a:	b008      	add	sp, #32
 801886c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018870:	200c      	movs	r0, #12
 8018872:	b008      	add	sp, #32
 8018874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018878:	2001      	movs	r0, #1
 801887a:	b008      	add	sp, #32
 801887c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018880:	0801e6a4 	.word	0x0801e6a4
 8018884:	2000fd30 	.word	0x2000fd30

08018888 <rmw_destroy_service>:
 8018888:	b570      	push	{r4, r5, r6, lr}
 801888a:	b128      	cbz	r0, 8018898 <rmw_destroy_service+0x10>
 801888c:	4604      	mov	r4, r0
 801888e:	6800      	ldr	r0, [r0, #0]
 8018890:	460d      	mov	r5, r1
 8018892:	f7f4 f825 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 8018896:	b910      	cbnz	r0, 801889e <rmw_destroy_service+0x16>
 8018898:	2401      	movs	r4, #1
 801889a:	4620      	mov	r0, r4
 801889c:	bd70      	pop	{r4, r5, r6, pc}
 801889e:	6863      	ldr	r3, [r4, #4]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d0f9      	beq.n	8018898 <rmw_destroy_service+0x10>
 80188a4:	2d00      	cmp	r5, #0
 80188a6:	d0f7      	beq.n	8018898 <rmw_destroy_service+0x10>
 80188a8:	6828      	ldr	r0, [r5, #0]
 80188aa:	f7f4 f819 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 80188ae:	2800      	cmp	r0, #0
 80188b0:	d0f2      	beq.n	8018898 <rmw_destroy_service+0x10>
 80188b2:	686e      	ldr	r6, [r5, #4]
 80188b4:	2e00      	cmp	r6, #0
 80188b6:	d0ef      	beq.n	8018898 <rmw_destroy_service+0x10>
 80188b8:	6864      	ldr	r4, [r4, #4]
 80188ba:	6932      	ldr	r2, [r6, #16]
 80188bc:	6920      	ldr	r0, [r4, #16]
 80188be:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80188c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80188c6:	6819      	ldr	r1, [r3, #0]
 80188c8:	f001 ff32 	bl	801a730 <uxr_buffer_cancel_data>
 80188cc:	4602      	mov	r2, r0
 80188ce:	6920      	ldr	r0, [r4, #16]
 80188d0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80188d4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80188d8:	f7f3 ff7c 	bl	800c7d4 <run_xrce_session>
 80188dc:	6920      	ldr	r0, [r4, #16]
 80188de:	6932      	ldr	r2, [r6, #16]
 80188e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80188e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80188e8:	6819      	ldr	r1, [r3, #0]
 80188ea:	f7f8 f875 	bl	80109d8 <uxr_buffer_delete_entity>
 80188ee:	4602      	mov	r2, r0
 80188f0:	6920      	ldr	r0, [r4, #16]
 80188f2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80188f6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80188fa:	f7f3 ff6b 	bl	800c7d4 <run_xrce_session>
 80188fe:	f080 0401 	eor.w	r4, r0, #1
 8018902:	b2e4      	uxtb	r4, r4
 8018904:	4628      	mov	r0, r5
 8018906:	0064      	lsls	r4, r4, #1
 8018908:	f7f3 fe30 	bl	800c56c <rmw_uxrce_fini_service_memory>
 801890c:	e7c5      	b.n	801889a <rmw_destroy_service+0x12>
 801890e:	bf00      	nop

08018910 <rmw_create_subscription>:
 8018910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018914:	b08d      	sub	sp, #52	@ 0x34
 8018916:	2800      	cmp	r0, #0
 8018918:	f000 80d1 	beq.w	8018abe <rmw_create_subscription+0x1ae>
 801891c:	460f      	mov	r7, r1
 801891e:	2900      	cmp	r1, #0
 8018920:	f000 80cd 	beq.w	8018abe <rmw_create_subscription+0x1ae>
 8018924:	4604      	mov	r4, r0
 8018926:	6800      	ldr	r0, [r0, #0]
 8018928:	4615      	mov	r5, r2
 801892a:	461e      	mov	r6, r3
 801892c:	f7f3 ffd8 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 8018930:	2800      	cmp	r0, #0
 8018932:	f000 80c4 	beq.w	8018abe <rmw_create_subscription+0x1ae>
 8018936:	2d00      	cmp	r5, #0
 8018938:	f000 80c1 	beq.w	8018abe <rmw_create_subscription+0x1ae>
 801893c:	782b      	ldrb	r3, [r5, #0]
 801893e:	2b00      	cmp	r3, #0
 8018940:	f000 80bd 	beq.w	8018abe <rmw_create_subscription+0x1ae>
 8018944:	2e00      	cmp	r6, #0
 8018946:	f000 80ba 	beq.w	8018abe <rmw_create_subscription+0x1ae>
 801894a:	485e      	ldr	r0, [pc, #376]	@ (8018ac4 <rmw_create_subscription+0x1b4>)
 801894c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8018950:	f7ff f9e4 	bl	8017d1c <get_memory>
 8018954:	2800      	cmp	r0, #0
 8018956:	f000 80b2 	beq.w	8018abe <rmw_create_subscription+0x1ae>
 801895a:	6884      	ldr	r4, [r0, #8]
 801895c:	f8c4 4080 	str.w	r4, [r4, #128]	@ 0x80
 8018960:	f7ff fa62 	bl	8017e28 <rmw_get_implementation_identifier>
 8018964:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8018968:	67e0      	str	r0, [r4, #124]	@ 0x7c
 801896a:	f8c4 a084 	str.w	sl, [r4, #132]	@ 0x84
 801896e:	4628      	mov	r0, r5
 8018970:	f7e7 fcae 	bl	80002d0 <strlen>
 8018974:	3001      	adds	r0, #1
 8018976:	283c      	cmp	r0, #60	@ 0x3c
 8018978:	f104 087c 	add.w	r8, r4, #124	@ 0x7c
 801897c:	f200 8098 	bhi.w	8018ab0 <rmw_create_subscription+0x1a0>
 8018980:	4a51      	ldr	r2, [pc, #324]	@ (8018ac8 <rmw_create_subscription+0x1b8>)
 8018982:	462b      	mov	r3, r5
 8018984:	213c      	movs	r1, #60	@ 0x3c
 8018986:	4650      	mov	r0, sl
 8018988:	f003 fa1a 	bl	801bdc0 <sniprintf>
 801898c:	4631      	mov	r1, r6
 801898e:	f8c4 9020 	str.w	r9, [r4, #32]
 8018992:	2250      	movs	r2, #80	@ 0x50
 8018994:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8018998:	f003 fc61 	bl	801c25e <memcpy>
 801899c:	494b      	ldr	r1, [pc, #300]	@ (8018acc <rmw_create_subscription+0x1bc>)
 801899e:	4638      	mov	r0, r7
 80189a0:	f7f3 ffac 	bl	800c8fc <get_message_typesupport_handle>
 80189a4:	2800      	cmp	r0, #0
 80189a6:	f000 8083 	beq.w	8018ab0 <rmw_create_subscription+0x1a0>
 80189aa:	6842      	ldr	r2, [r0, #4]
 80189ac:	61a2      	str	r2, [r4, #24]
 80189ae:	2a00      	cmp	r2, #0
 80189b0:	d07e      	beq.n	8018ab0 <rmw_create_subscription+0x1a0>
 80189b2:	4629      	mov	r1, r5
 80189b4:	4633      	mov	r3, r6
 80189b6:	4648      	mov	r0, r9
 80189b8:	f7ff fc92 	bl	80182e0 <create_topic>
 80189bc:	61e0      	str	r0, [r4, #28]
 80189be:	2800      	cmp	r0, #0
 80189c0:	d07a      	beq.n	8018ab8 <rmw_create_subscription+0x1a8>
 80189c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80189c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189ca:	2104      	movs	r1, #4
 80189cc:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 80189d0:	1c42      	adds	r2, r0, #1
 80189d2:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 80189d6:	f7f8 fa99 	bl	8010f0c <uxr_object_id>
 80189da:	6120      	str	r0, [r4, #16]
 80189dc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80189e0:	2506      	movs	r5, #6
 80189e2:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 80189e6:	9500      	str	r5, [sp, #0]
 80189e8:	6819      	ldr	r1, [r3, #0]
 80189ea:	6922      	ldr	r2, [r4, #16]
 80189ec:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80189f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80189f4:	f7f8 f8ce 	bl	8010b94 <uxr_buffer_create_subscriber_bin>
 80189f8:	4602      	mov	r2, r0
 80189fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80189fe:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018a02:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018a06:	f7f3 fee5 	bl	800c7d4 <run_xrce_session>
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	d050      	beq.n	8018ab0 <rmw_create_subscription+0x1a0>
 8018a0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a16:	4629      	mov	r1, r5
 8018a18:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 8018a1c:	1c42      	adds	r2, r0, #1
 8018a1e:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 8018a22:	f7f8 fa73 	bl	8010f0c <uxr_object_id>
 8018a26:	af08      	add	r7, sp, #32
 8018a28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018a2c:	69e3      	ldr	r3, [r4, #28]
 8018a2e:	6160      	str	r0, [r4, #20]
 8018a30:	4631      	mov	r1, r6
 8018a32:	4638      	mov	r0, r7
 8018a34:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 8018a38:	9305      	str	r3, [sp, #20]
 8018a3a:	f7f3 feeb 	bl	800c814 <convert_qos_profile>
 8018a3e:	9503      	str	r5, [sp, #12]
 8018a40:	e897 0003 	ldmia.w	r7, {r0, r1}
 8018a44:	9b05      	ldr	r3, [sp, #20]
 8018a46:	9001      	str	r0, [sp, #4]
 8018a48:	f8ad 1008 	strh.w	r1, [sp, #8]
 8018a4c:	691b      	ldr	r3, [r3, #16]
 8018a4e:	9300      	str	r3, [sp, #0]
 8018a50:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8018a54:	f8db 1000 	ldr.w	r1, [fp]
 8018a58:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 8018a5c:	f7f8 f92e 	bl	8010cbc <uxr_buffer_create_datareader_bin>
 8018a60:	4602      	mov	r2, r0
 8018a62:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018a66:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8018a6a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018a6e:	f7f3 feb1 	bl	800c7d4 <run_xrce_session>
 8018a72:	b1e8      	cbz	r0, 8018ab0 <rmw_create_subscription+0x1a0>
 8018a74:	7a33      	ldrb	r3, [r6, #8]
 8018a76:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8018a7a:	2b02      	cmp	r3, #2
 8018a7c:	bf0c      	ite	eq
 8018a7e:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 8018a82:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 8018a86:	9307      	str	r3, [sp, #28]
 8018a88:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 8018a92:	ab0a      	add	r3, sp, #40	@ 0x28
 8018a94:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8018a98:	9300      	str	r3, [sp, #0]
 8018a9a:	6962      	ldr	r2, [r4, #20]
 8018a9c:	9b07      	ldr	r3, [sp, #28]
 8018a9e:	6809      	ldr	r1, [r1, #0]
 8018aa0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018aa4:	f001 fe0c 	bl	801a6c0 <uxr_buffer_request_data>
 8018aa8:	4640      	mov	r0, r8
 8018aaa:	b00d      	add	sp, #52	@ 0x34
 8018aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ab0:	69e0      	ldr	r0, [r4, #28]
 8018ab2:	b108      	cbz	r0, 8018ab8 <rmw_create_subscription+0x1a8>
 8018ab4:	f7f3 fd86 	bl	800c5c4 <rmw_uxrce_fini_topic_memory>
 8018ab8:	4640      	mov	r0, r8
 8018aba:	f7f3 fd41 	bl	800c540 <rmw_uxrce_fini_subscription_memory>
 8018abe:	f04f 0800 	mov.w	r8, #0
 8018ac2:	e7f1      	b.n	8018aa8 <rmw_create_subscription+0x198>
 8018ac4:	200104e0 	.word	0x200104e0
 8018ac8:	0801d2c8 	.word	0x0801d2c8
 8018acc:	0801d294 	.word	0x0801d294

08018ad0 <rmw_subscription_get_actual_qos>:
 8018ad0:	b508      	push	{r3, lr}
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	b140      	cbz	r0, 8018ae8 <rmw_subscription_get_actual_qos+0x18>
 8018ad6:	4608      	mov	r0, r1
 8018ad8:	b131      	cbz	r1, 8018ae8 <rmw_subscription_get_actual_qos+0x18>
 8018ada:	6859      	ldr	r1, [r3, #4]
 8018adc:	2250      	movs	r2, #80	@ 0x50
 8018ade:	3128      	adds	r1, #40	@ 0x28
 8018ae0:	f003 fbbd 	bl	801c25e <memcpy>
 8018ae4:	2000      	movs	r0, #0
 8018ae6:	bd08      	pop	{r3, pc}
 8018ae8:	200b      	movs	r0, #11
 8018aea:	bd08      	pop	{r3, pc}

08018aec <rmw_destroy_subscription>:
 8018aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018af0:	b128      	cbz	r0, 8018afe <rmw_destroy_subscription+0x12>
 8018af2:	4604      	mov	r4, r0
 8018af4:	6800      	ldr	r0, [r0, #0]
 8018af6:	460d      	mov	r5, r1
 8018af8:	f7f3 fef2 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 8018afc:	b918      	cbnz	r0, 8018b06 <rmw_destroy_subscription+0x1a>
 8018afe:	2401      	movs	r4, #1
 8018b00:	4620      	mov	r0, r4
 8018b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b06:	6863      	ldr	r3, [r4, #4]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d0f8      	beq.n	8018afe <rmw_destroy_subscription+0x12>
 8018b0c:	2d00      	cmp	r5, #0
 8018b0e:	d0f6      	beq.n	8018afe <rmw_destroy_subscription+0x12>
 8018b10:	6828      	ldr	r0, [r5, #0]
 8018b12:	f7f3 fee5 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 8018b16:	2800      	cmp	r0, #0
 8018b18:	d0f1      	beq.n	8018afe <rmw_destroy_subscription+0x12>
 8018b1a:	686c      	ldr	r4, [r5, #4]
 8018b1c:	2c00      	cmp	r4, #0
 8018b1e:	d0ee      	beq.n	8018afe <rmw_destroy_subscription+0x12>
 8018b20:	6a26      	ldr	r6, [r4, #32]
 8018b22:	6962      	ldr	r2, [r4, #20]
 8018b24:	6930      	ldr	r0, [r6, #16]
 8018b26:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018b2a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b2e:	6819      	ldr	r1, [r3, #0]
 8018b30:	f001 fdfe 	bl	801a730 <uxr_buffer_cancel_data>
 8018b34:	4602      	mov	r2, r0
 8018b36:	6930      	ldr	r0, [r6, #16]
 8018b38:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018b3c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018b40:	f7f3 fe48 	bl	800c7d4 <run_xrce_session>
 8018b44:	69e0      	ldr	r0, [r4, #28]
 8018b46:	f7ff fc1f 	bl	8018388 <destroy_topic>
 8018b4a:	6a23      	ldr	r3, [r4, #32]
 8018b4c:	6962      	ldr	r2, [r4, #20]
 8018b4e:	6918      	ldr	r0, [r3, #16]
 8018b50:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018b54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b58:	6819      	ldr	r1, [r3, #0]
 8018b5a:	f7f7 ff3d 	bl	80109d8 <uxr_buffer_delete_entity>
 8018b5e:	6a23      	ldr	r3, [r4, #32]
 8018b60:	6922      	ldr	r2, [r4, #16]
 8018b62:	4680      	mov	r8, r0
 8018b64:	6918      	ldr	r0, [r3, #16]
 8018b66:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8018b6a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018b6e:	6819      	ldr	r1, [r3, #0]
 8018b70:	f7f7 ff32 	bl	80109d8 <uxr_buffer_delete_entity>
 8018b74:	4607      	mov	r7, r0
 8018b76:	6930      	ldr	r0, [r6, #16]
 8018b78:	4642      	mov	r2, r8
 8018b7a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018b7e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018b82:	f7f3 fe27 	bl	800c7d4 <run_xrce_session>
 8018b86:	4604      	mov	r4, r0
 8018b88:	6930      	ldr	r0, [r6, #16]
 8018b8a:	463a      	mov	r2, r7
 8018b8c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8018b90:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8018b94:	f7f3 fe1e 	bl	800c7d4 <run_xrce_session>
 8018b98:	4004      	ands	r4, r0
 8018b9a:	f084 0401 	eor.w	r4, r4, #1
 8018b9e:	b2e4      	uxtb	r4, r4
 8018ba0:	4628      	mov	r0, r5
 8018ba2:	0064      	lsls	r4, r4, #1
 8018ba4:	f7f3 fccc 	bl	800c540 <rmw_uxrce_fini_subscription_memory>
 8018ba8:	e7aa      	b.n	8018b00 <rmw_destroy_subscription+0x14>
 8018baa:	bf00      	nop

08018bac <rmw_take_with_info>:
 8018bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bae:	4604      	mov	r4, r0
 8018bb0:	6800      	ldr	r0, [r0, #0]
 8018bb2:	b089      	sub	sp, #36	@ 0x24
 8018bb4:	460f      	mov	r7, r1
 8018bb6:	4615      	mov	r5, r2
 8018bb8:	b128      	cbz	r0, 8018bc6 <rmw_take_with_info+0x1a>
 8018bba:	4b23      	ldr	r3, [pc, #140]	@ (8018c48 <rmw_take_with_info+0x9c>)
 8018bbc:	6819      	ldr	r1, [r3, #0]
 8018bbe:	f7e7 fb27 	bl	8000210 <strcmp>
 8018bc2:	2800      	cmp	r0, #0
 8018bc4:	d13d      	bne.n	8018c42 <rmw_take_with_info+0x96>
 8018bc6:	6864      	ldr	r4, [r4, #4]
 8018bc8:	b1fd      	cbz	r5, 8018c0a <rmw_take_with_info+0x5e>
 8018bca:	2300      	movs	r3, #0
 8018bcc:	702b      	strb	r3, [r5, #0]
 8018bce:	f7f3 fd83 	bl	800c6d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018bd2:	4620      	mov	r0, r4
 8018bd4:	f7f3 fd5a 	bl	800c68c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018bd8:	4606      	mov	r6, r0
 8018bda:	b1e8      	cbz	r0, 8018c18 <rmw_take_with_info+0x6c>
 8018bdc:	6881      	ldr	r1, [r0, #8]
 8018bde:	4668      	mov	r0, sp
 8018be0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018be4:	3110      	adds	r1, #16
 8018be6:	f7f7 fda1 	bl	801072c <ucdr_init_buffer>
 8018bea:	69a3      	ldr	r3, [r4, #24]
 8018bec:	4639      	mov	r1, r7
 8018bee:	68db      	ldr	r3, [r3, #12]
 8018bf0:	4668      	mov	r0, sp
 8018bf2:	4798      	blx	r3
 8018bf4:	4631      	mov	r1, r6
 8018bf6:	4604      	mov	r4, r0
 8018bf8:	4814      	ldr	r0, [pc, #80]	@ (8018c4c <rmw_take_with_info+0xa0>)
 8018bfa:	f7ff f89f 	bl	8017d3c <put_memory>
 8018bfe:	702c      	strb	r4, [r5, #0]
 8018c00:	f084 0001 	eor.w	r0, r4, #1
 8018c04:	b2c0      	uxtb	r0, r0
 8018c06:	b009      	add	sp, #36	@ 0x24
 8018c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c0a:	f7f3 fd65 	bl	800c6d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018c0e:	4620      	mov	r0, r4
 8018c10:	f7f3 fd3c 	bl	800c68c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018c14:	4605      	mov	r5, r0
 8018c16:	b910      	cbnz	r0, 8018c1e <rmw_take_with_info+0x72>
 8018c18:	2001      	movs	r0, #1
 8018c1a:	b009      	add	sp, #36	@ 0x24
 8018c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c1e:	68a9      	ldr	r1, [r5, #8]
 8018c20:	4668      	mov	r0, sp
 8018c22:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8018c26:	3110      	adds	r1, #16
 8018c28:	f7f7 fd80 	bl	801072c <ucdr_init_buffer>
 8018c2c:	69a3      	ldr	r3, [r4, #24]
 8018c2e:	4639      	mov	r1, r7
 8018c30:	68db      	ldr	r3, [r3, #12]
 8018c32:	4668      	mov	r0, sp
 8018c34:	4798      	blx	r3
 8018c36:	4629      	mov	r1, r5
 8018c38:	4604      	mov	r4, r0
 8018c3a:	4804      	ldr	r0, [pc, #16]	@ (8018c4c <rmw_take_with_info+0xa0>)
 8018c3c:	f7ff f87e 	bl	8017d3c <put_memory>
 8018c40:	e7de      	b.n	8018c00 <rmw_take_with_info+0x54>
 8018c42:	200c      	movs	r0, #12
 8018c44:	b009      	add	sp, #36	@ 0x24
 8018c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c48:	0801e6a4 	.word	0x0801e6a4
 8018c4c:	2000fd30 	.word	0x2000fd30

08018c50 <rmw_wait>:
 8018c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c54:	b089      	sub	sp, #36	@ 0x24
 8018c56:	4607      	mov	r7, r0
 8018c58:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8018c5a:	460e      	mov	r6, r1
 8018c5c:	4698      	mov	r8, r3
 8018c5e:	4691      	mov	r9, r2
 8018c60:	2a00      	cmp	r2, #0
 8018c62:	f000 811e 	beq.w	8018ea2 <rmw_wait+0x252>
 8018c66:	2c00      	cmp	r4, #0
 8018c68:	f000 80ef 	beq.w	8018e4a <rmw_wait+0x1fa>
 8018c6c:	4bb5      	ldr	r3, [pc, #724]	@ (8018f44 <rmw_wait+0x2f4>)
 8018c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018c70:	ad04      	add	r5, sp, #16
 8018c72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8018c76:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8018c7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018c7e:	f7fe fe83 	bl	8017988 <rmw_time_equal>
 8018c82:	2800      	cmp	r0, #0
 8018c84:	f000 811b 	beq.w	8018ebe <rmw_wait+0x26e>
 8018c88:	f04f 35ff 	mov.w	r5, #4294967295
 8018c8c:	f7f3 fd24 	bl	800c6d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018c90:	4bad      	ldr	r3, [pc, #692]	@ (8018f48 <rmw_wait+0x2f8>)
 8018c92:	681c      	ldr	r4, [r3, #0]
 8018c94:	b14c      	cbz	r4, 8018caa <rmw_wait+0x5a>
 8018c96:	4623      	mov	r3, r4
 8018c98:	2100      	movs	r1, #0
 8018c9a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8018c9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018ca2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d1f7      	bne.n	8018c9a <rmw_wait+0x4a>
 8018caa:	f1b9 0f00 	cmp.w	r9, #0
 8018cae:	d011      	beq.n	8018cd4 <rmw_wait+0x84>
 8018cb0:	f8d9 1000 	ldr.w	r1, [r9]
 8018cb4:	b171      	cbz	r1, 8018cd4 <rmw_wait+0x84>
 8018cb6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8018cba:	2300      	movs	r3, #0
 8018cbc:	2001      	movs	r0, #1
 8018cbe:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018cc2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018cc4:	6912      	ldr	r2, [r2, #16]
 8018cc6:	3301      	adds	r3, #1
 8018cc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018ccc:	4299      	cmp	r1, r3
 8018cce:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018cd2:	d1f4      	bne.n	8018cbe <rmw_wait+0x6e>
 8018cd4:	f1b8 0f00 	cmp.w	r8, #0
 8018cd8:	f000 8109 	beq.w	8018eee <rmw_wait+0x29e>
 8018cdc:	f8d8 1000 	ldr.w	r1, [r8]
 8018ce0:	2900      	cmp	r1, #0
 8018ce2:	f000 8116 	beq.w	8018f12 <rmw_wait+0x2c2>
 8018ce6:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8018cea:	2300      	movs	r3, #0
 8018cec:	2001      	movs	r0, #1
 8018cee:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018cf2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8018cf4:	6912      	ldr	r2, [r2, #16]
 8018cf6:	3301      	adds	r3, #1
 8018cf8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018cfc:	4299      	cmp	r1, r3
 8018cfe:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018d02:	d1f4      	bne.n	8018cee <rmw_wait+0x9e>
 8018d04:	2f00      	cmp	r7, #0
 8018d06:	f000 8114 	beq.w	8018f32 <rmw_wait+0x2e2>
 8018d0a:	6839      	ldr	r1, [r7, #0]
 8018d0c:	b171      	cbz	r1, 8018d2c <rmw_wait+0xdc>
 8018d0e:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8018d12:	2300      	movs	r3, #0
 8018d14:	2001      	movs	r0, #1
 8018d16:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8018d1a:	6a12      	ldr	r2, [r2, #32]
 8018d1c:	6912      	ldr	r2, [r2, #16]
 8018d1e:	3301      	adds	r3, #1
 8018d20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018d24:	4299      	cmp	r1, r3
 8018d26:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8018d2a:	d1f4      	bne.n	8018d16 <rmw_wait+0xc6>
 8018d2c:	b344      	cbz	r4, 8018d80 <rmw_wait+0x130>
 8018d2e:	4622      	mov	r2, r4
 8018d30:	2300      	movs	r3, #0
 8018d32:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8018d36:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8018d3a:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8018d3e:	440b      	add	r3, r1
 8018d40:	b2db      	uxtb	r3, r3
 8018d42:	2a00      	cmp	r2, #0
 8018d44:	d1f5      	bne.n	8018d32 <rmw_wait+0xe2>
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d075      	beq.n	8018e36 <rmw_wait+0x1e6>
 8018d4a:	1c6a      	adds	r2, r5, #1
 8018d4c:	d00d      	beq.n	8018d6a <rmw_wait+0x11a>
 8018d4e:	ee07 5a90 	vmov	s15, r5
 8018d52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018d56:	ee07 3a90 	vmov	s15, r3
 8018d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8018d62:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8018d66:	ee17 5a90 	vmov	r5, s15
 8018d6a:	68a0      	ldr	r0, [r4, #8]
 8018d6c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8018d70:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	f040 808a 	bne.w	8018e8e <rmw_wait+0x23e>
 8018d7a:	6864      	ldr	r4, [r4, #4]
 8018d7c:	2c00      	cmp	r4, #0
 8018d7e:	d1f4      	bne.n	8018d6a <rmw_wait+0x11a>
 8018d80:	f1b9 0f00 	cmp.w	r9, #0
 8018d84:	f000 80c3 	beq.w	8018f0e <rmw_wait+0x2be>
 8018d88:	f8d9 5000 	ldr.w	r5, [r9]
 8018d8c:	b185      	cbz	r5, 8018db0 <rmw_wait+0x160>
 8018d8e:	2400      	movs	r4, #0
 8018d90:	4625      	mov	r5, r4
 8018d92:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018d96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018d9a:	f7f3 fc77 	bl	800c68c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018d9e:	2800      	cmp	r0, #0
 8018da0:	d06d      	beq.n	8018e7e <rmw_wait+0x22e>
 8018da2:	f8d9 3000 	ldr.w	r3, [r9]
 8018da6:	3401      	adds	r4, #1
 8018da8:	42a3      	cmp	r3, r4
 8018daa:	f04f 0501 	mov.w	r5, #1
 8018dae:	d8f0      	bhi.n	8018d92 <rmw_wait+0x142>
 8018db0:	f1b8 0f00 	cmp.w	r8, #0
 8018db4:	d012      	beq.n	8018ddc <rmw_wait+0x18c>
 8018db6:	f8d8 1000 	ldr.w	r1, [r8]
 8018dba:	2400      	movs	r4, #0
 8018dbc:	b171      	cbz	r1, 8018ddc <rmw_wait+0x18c>
 8018dbe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018dc2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018dc6:	f7f3 fc61 	bl	800c68c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018dca:	2800      	cmp	r0, #0
 8018dcc:	d047      	beq.n	8018e5e <rmw_wait+0x20e>
 8018dce:	f8d8 3000 	ldr.w	r3, [r8]
 8018dd2:	3401      	adds	r4, #1
 8018dd4:	42a3      	cmp	r3, r4
 8018dd6:	f04f 0501 	mov.w	r5, #1
 8018dda:	d8f0      	bhi.n	8018dbe <rmw_wait+0x16e>
 8018ddc:	b17f      	cbz	r7, 8018dfe <rmw_wait+0x1ae>
 8018dde:	683b      	ldr	r3, [r7, #0]
 8018de0:	2400      	movs	r4, #0
 8018de2:	b163      	cbz	r3, 8018dfe <rmw_wait+0x1ae>
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018dea:	f7f3 fc4f 	bl	800c68c <rmw_uxrce_find_static_input_buffer_by_owner>
 8018dee:	2800      	cmp	r0, #0
 8018df0:	d03d      	beq.n	8018e6e <rmw_wait+0x21e>
 8018df2:	683b      	ldr	r3, [r7, #0]
 8018df4:	3401      	adds	r4, #1
 8018df6:	42a3      	cmp	r3, r4
 8018df8:	f04f 0501 	mov.w	r5, #1
 8018dfc:	d8f2      	bhi.n	8018de4 <rmw_wait+0x194>
 8018dfe:	b1a6      	cbz	r6, 8018e2a <rmw_wait+0x1da>
 8018e00:	6834      	ldr	r4, [r6, #0]
 8018e02:	b194      	cbz	r4, 8018e2a <rmw_wait+0x1da>
 8018e04:	2300      	movs	r3, #0
 8018e06:	461f      	mov	r7, r3
 8018e08:	e004      	b.n	8018e14 <rmw_wait+0x1c4>
 8018e0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8018e0e:	3301      	adds	r3, #1
 8018e10:	429c      	cmp	r4, r3
 8018e12:	d00a      	beq.n	8018e2a <rmw_wait+0x1da>
 8018e14:	6870      	ldr	r0, [r6, #4]
 8018e16:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8018e1a:	7c0a      	ldrb	r2, [r1, #16]
 8018e1c:	2a00      	cmp	r2, #0
 8018e1e:	d0f4      	beq.n	8018e0a <rmw_wait+0x1ba>
 8018e20:	3301      	adds	r3, #1
 8018e22:	429c      	cmp	r4, r3
 8018e24:	740f      	strb	r7, [r1, #16]
 8018e26:	4615      	mov	r5, r2
 8018e28:	d1f4      	bne.n	8018e14 <rmw_wait+0x1c4>
 8018e2a:	f085 0001 	eor.w	r0, r5, #1
 8018e2e:	0040      	lsls	r0, r0, #1
 8018e30:	b009      	add	sp, #36	@ 0x24
 8018e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e36:	68a0      	ldr	r0, [r4, #8]
 8018e38:	2100      	movs	r1, #0
 8018e3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e3e:	f7f8 fdf9 	bl	8011a34 <uxr_run_session_timeout>
 8018e42:	6864      	ldr	r4, [r4, #4]
 8018e44:	2c00      	cmp	r4, #0
 8018e46:	d1f6      	bne.n	8018e36 <rmw_wait+0x1e6>
 8018e48:	e79a      	b.n	8018d80 <rmw_wait+0x130>
 8018e4a:	f7f3 fc45 	bl	800c6d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8018f48 <rmw_wait+0x2f8>)
 8018e50:	681c      	ldr	r4, [r3, #0]
 8018e52:	f04f 35ff 	mov.w	r5, #4294967295
 8018e56:	2c00      	cmp	r4, #0
 8018e58:	f47f af1d 	bne.w	8018c96 <rmw_wait+0x46>
 8018e5c:	e728      	b.n	8018cb0 <rmw_wait+0x60>
 8018e5e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8018e62:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018e66:	3401      	adds	r4, #1
 8018e68:	429c      	cmp	r4, r3
 8018e6a:	d3a8      	bcc.n	8018dbe <rmw_wait+0x16e>
 8018e6c:	e7b6      	b.n	8018ddc <rmw_wait+0x18c>
 8018e6e:	e9d7 3200 	ldrd	r3, r2, [r7]
 8018e72:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018e76:	3401      	adds	r4, #1
 8018e78:	42a3      	cmp	r3, r4
 8018e7a:	d8b3      	bhi.n	8018de4 <rmw_wait+0x194>
 8018e7c:	e7bf      	b.n	8018dfe <rmw_wait+0x1ae>
 8018e7e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8018e82:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018e86:	3401      	adds	r4, #1
 8018e88:	42a3      	cmp	r3, r4
 8018e8a:	d882      	bhi.n	8018d92 <rmw_wait+0x142>
 8018e8c:	e790      	b.n	8018db0 <rmw_wait+0x160>
 8018e8e:	4629      	mov	r1, r5
 8018e90:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018e94:	f7f8 fde8 	bl	8011a68 <uxr_run_session_until_data>
 8018e98:	6864      	ldr	r4, [r4, #4]
 8018e9a:	2c00      	cmp	r4, #0
 8018e9c:	f47f af65 	bne.w	8018d6a <rmw_wait+0x11a>
 8018ea0:	e76e      	b.n	8018d80 <rmw_wait+0x130>
 8018ea2:	b1f3      	cbz	r3, 8018ee2 <rmw_wait+0x292>
 8018ea4:	2c00      	cmp	r4, #0
 8018ea6:	f47f aee1 	bne.w	8018c6c <rmw_wait+0x1c>
 8018eaa:	f7f3 fc15 	bl	800c6d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018eae:	4b26      	ldr	r3, [pc, #152]	@ (8018f48 <rmw_wait+0x2f8>)
 8018eb0:	681c      	ldr	r4, [r3, #0]
 8018eb2:	f04f 35ff 	mov.w	r5, #4294967295
 8018eb6:	2c00      	cmp	r4, #0
 8018eb8:	f47f aeed 	bne.w	8018c96 <rmw_wait+0x46>
 8018ebc:	e70a      	b.n	8018cd4 <rmw_wait+0x84>
 8018ebe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018ec2:	f7fe fdb5 	bl	8017a30 <rmw_time_total_nsec>
 8018ec6:	4a21      	ldr	r2, [pc, #132]	@ (8018f4c <rmw_wait+0x2fc>)
 8018ec8:	2300      	movs	r3, #0
 8018eca:	f7e7 fe4f 	bl	8000b6c <__aeabi_uldivmod>
 8018ece:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8018ed2:	f171 0100 	sbcs.w	r1, r1, #0
 8018ed6:	4605      	mov	r5, r0
 8018ed8:	f6ff aed8 	blt.w	8018c8c <rmw_wait+0x3c>
 8018edc:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8018ee0:	e6d4      	b.n	8018c8c <rmw_wait+0x3c>
 8018ee2:	2800      	cmp	r0, #0
 8018ee4:	d1de      	bne.n	8018ea4 <rmw_wait+0x254>
 8018ee6:	2900      	cmp	r1, #0
 8018ee8:	d1dc      	bne.n	8018ea4 <rmw_wait+0x254>
 8018eea:	4608      	mov	r0, r1
 8018eec:	e7a0      	b.n	8018e30 <rmw_wait+0x1e0>
 8018eee:	2f00      	cmp	r7, #0
 8018ef0:	f47f af0b 	bne.w	8018d0a <rmw_wait+0xba>
 8018ef4:	2c00      	cmp	r4, #0
 8018ef6:	f47f af1a 	bne.w	8018d2e <rmw_wait+0xde>
 8018efa:	f1b9 0f00 	cmp.w	r9, #0
 8018efe:	d027      	beq.n	8018f50 <rmw_wait+0x300>
 8018f00:	f8d9 3000 	ldr.w	r3, [r9]
 8018f04:	4625      	mov	r5, r4
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	f47f af41 	bne.w	8018d8e <rmw_wait+0x13e>
 8018f0c:	e777      	b.n	8018dfe <rmw_wait+0x1ae>
 8018f0e:	464d      	mov	r5, r9
 8018f10:	e74e      	b.n	8018db0 <rmw_wait+0x160>
 8018f12:	2f00      	cmp	r7, #0
 8018f14:	f47f aef9 	bne.w	8018d0a <rmw_wait+0xba>
 8018f18:	2c00      	cmp	r4, #0
 8018f1a:	f47f af08 	bne.w	8018d2e <rmw_wait+0xde>
 8018f1e:	f1b9 0f00 	cmp.w	r9, #0
 8018f22:	d015      	beq.n	8018f50 <rmw_wait+0x300>
 8018f24:	f8d9 3000 	ldr.w	r3, [r9]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	f47f af30 	bne.w	8018d8e <rmw_wait+0x13e>
 8018f2e:	2500      	movs	r5, #0
 8018f30:	e743      	b.n	8018dba <rmw_wait+0x16a>
 8018f32:	2c00      	cmp	r4, #0
 8018f34:	f47f aefb 	bne.w	8018d2e <rmw_wait+0xde>
 8018f38:	f1b9 0f00 	cmp.w	r9, #0
 8018f3c:	f47f af24 	bne.w	8018d88 <rmw_wait+0x138>
 8018f40:	e7f5      	b.n	8018f2e <rmw_wait+0x2de>
 8018f42:	bf00      	nop
 8018f44:	0801d058 	.word	0x0801d058
 8018f48:	200123d0 	.word	0x200123d0
 8018f4c:	000f4240 	.word	0x000f4240
 8018f50:	464d      	mov	r5, r9
 8018f52:	e754      	b.n	8018dfe <rmw_wait+0x1ae>

08018f54 <rmw_create_wait_set>:
 8018f54:	b508      	push	{r3, lr}
 8018f56:	4803      	ldr	r0, [pc, #12]	@ (8018f64 <rmw_create_wait_set+0x10>)
 8018f58:	f7fe fee0 	bl	8017d1c <get_memory>
 8018f5c:	b108      	cbz	r0, 8018f62 <rmw_create_wait_set+0xe>
 8018f5e:	6880      	ldr	r0, [r0, #8]
 8018f60:	3010      	adds	r0, #16
 8018f62:	bd08      	pop	{r3, pc}
 8018f64:	2000db8c 	.word	0x2000db8c

08018f68 <rmw_destroy_wait_set>:
 8018f68:	b508      	push	{r3, lr}
 8018f6a:	4b08      	ldr	r3, [pc, #32]	@ (8018f8c <rmw_destroy_wait_set+0x24>)
 8018f6c:	6819      	ldr	r1, [r3, #0]
 8018f6e:	b911      	cbnz	r1, 8018f76 <rmw_destroy_wait_set+0xe>
 8018f70:	e00a      	b.n	8018f88 <rmw_destroy_wait_set+0x20>
 8018f72:	6849      	ldr	r1, [r1, #4]
 8018f74:	b141      	cbz	r1, 8018f88 <rmw_destroy_wait_set+0x20>
 8018f76:	688b      	ldr	r3, [r1, #8]
 8018f78:	3310      	adds	r3, #16
 8018f7a:	4298      	cmp	r0, r3
 8018f7c:	d1f9      	bne.n	8018f72 <rmw_destroy_wait_set+0xa>
 8018f7e:	4803      	ldr	r0, [pc, #12]	@ (8018f8c <rmw_destroy_wait_set+0x24>)
 8018f80:	f7fe fedc 	bl	8017d3c <put_memory>
 8018f84:	2000      	movs	r0, #0
 8018f86:	bd08      	pop	{r3, pc}
 8018f88:	2001      	movs	r0, #1
 8018f8a:	bd08      	pop	{r3, pc}
 8018f8c:	2000db8c 	.word	0x2000db8c

08018f90 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8018f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f94:	6805      	ldr	r5, [r0, #0]
 8018f96:	4604      	mov	r4, r0
 8018f98:	4628      	mov	r0, r5
 8018f9a:	460e      	mov	r6, r1
 8018f9c:	f7e7 f938 	bl	8000210 <strcmp>
 8018fa0:	b308      	cbz	r0, 8018fe6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8018fa2:	4b12      	ldr	r3, [pc, #72]	@ (8018fec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x5c>)
 8018fa4:	4628      	mov	r0, r5
 8018fa6:	6819      	ldr	r1, [r3, #0]
 8018fa8:	f7e7 f932 	bl	8000210 <strcmp>
 8018fac:	4605      	mov	r5, r0
 8018fae:	b980      	cbnz	r0, 8018fd2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x42>
 8018fb0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8018fb4:	f8d8 4000 	ldr.w	r4, [r8]
 8018fb8:	b1ac      	cbz	r4, 8018fe6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x56>
 8018fba:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8018fbe:	3f04      	subs	r7, #4
 8018fc0:	f857 0f04 	ldr.w	r0, [r7, #4]!
 8018fc4:	4631      	mov	r1, r6
 8018fc6:	f7e7 f923 	bl	8000210 <strcmp>
 8018fca:	b128      	cbz	r0, 8018fd8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x48>
 8018fcc:	3501      	adds	r5, #1
 8018fce:	42a5      	cmp	r5, r4
 8018fd0:	d1f6      	bne.n	8018fc0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x30>
 8018fd2:	2000      	movs	r0, #0
 8018fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fd8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018fdc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8018fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fe4:	4718      	bx	r3
 8018fe6:	4620      	mov	r0, r4
 8018fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fec:	20000d70 	.word	0x20000d70

08018ff0 <sensor_msgs__msg__Imu__get_type_hash>:
 8018ff0:	4800      	ldr	r0, [pc, #0]	@ (8018ff4 <sensor_msgs__msg__Imu__get_type_hash+0x4>)
 8018ff2:	4770      	bx	lr
 8018ff4:	20000d78 	.word	0x20000d78

08018ff8 <sensor_msgs__msg__Imu__get_type_description>:
 8018ff8:	b570      	push	{r4, r5, r6, lr}
 8018ffa:	4e15      	ldr	r6, [pc, #84]	@ (8019050 <sensor_msgs__msg__Imu__get_type_description+0x58>)
 8018ffc:	7835      	ldrb	r5, [r6, #0]
 8018ffe:	b10d      	cbz	r5, 8019004 <sensor_msgs__msg__Imu__get_type_description+0xc>
 8019000:	4814      	ldr	r0, [pc, #80]	@ (8019054 <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 8019002:	bd70      	pop	{r4, r5, r6, pc}
 8019004:	4628      	mov	r0, r5
 8019006:	f000 fd67 	bl	8019ad8 <builtin_interfaces__msg__Time__get_type_description>
 801900a:	300c      	adds	r0, #12
 801900c:	c807      	ldmia	r0, {r0, r1, r2}
 801900e:	4c12      	ldr	r4, [pc, #72]	@ (8019058 <sensor_msgs__msg__Imu__get_type_description+0x60>)
 8019010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019014:	4628      	mov	r0, r5
 8019016:	f000 fd95 	bl	8019b44 <geometry_msgs__msg__Quaternion__get_type_description>
 801901a:	300c      	adds	r0, #12
 801901c:	c807      	ldmia	r0, {r0, r1, r2}
 801901e:	f104 0318 	add.w	r3, r4, #24
 8019022:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019026:	4628      	mov	r0, r5
 8019028:	f000 fdd4 	bl	8019bd4 <geometry_msgs__msg__Vector3__get_type_description>
 801902c:	300c      	adds	r0, #12
 801902e:	c807      	ldmia	r0, {r0, r1, r2}
 8019030:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8019034:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019038:	4628      	mov	r0, r5
 801903a:	f000 fae1 	bl	8019600 <std_msgs__msg__Header__get_type_description>
 801903e:	300c      	adds	r0, #12
 8019040:	c807      	ldmia	r0, {r0, r1, r2}
 8019042:	3448      	adds	r4, #72	@ 0x48
 8019044:	2301      	movs	r3, #1
 8019046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801904a:	7033      	strb	r3, [r6, #0]
 801904c:	4801      	ldr	r0, [pc, #4]	@ (8019054 <sensor_msgs__msg__Imu__get_type_description+0x5c>)
 801904e:	bd70      	pop	{r4, r5, r6, pc}
 8019050:	20012591 	.word	0x20012591
 8019054:	0801e6d8 	.word	0x0801e6d8
 8019058:	20001268 	.word	0x20001268

0801905c <sensor_msgs__msg__Imu__get_type_description_sources>:
 801905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801905e:	4d26      	ldr	r5, [pc, #152]	@ (80190f8 <sensor_msgs__msg__Imu__get_type_description_sources+0x9c>)
 8019060:	782f      	ldrb	r7, [r5, #0]
 8019062:	b10f      	cbz	r7, 8019068 <sensor_msgs__msg__Imu__get_type_description_sources+0xc>
 8019064:	4825      	ldr	r0, [pc, #148]	@ (80190fc <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 8019066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019068:	4e25      	ldr	r6, [pc, #148]	@ (8019100 <sensor_msgs__msg__Imu__get_type_description_sources+0xa4>)
 801906a:	4c26      	ldr	r4, [pc, #152]	@ (8019104 <sensor_msgs__msg__Imu__get_type_description_sources+0xa8>)
 801906c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801906e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019070:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019074:	6833      	ldr	r3, [r6, #0]
 8019076:	4626      	mov	r6, r4
 8019078:	4638      	mov	r0, r7
 801907a:	f846 3b04 	str.w	r3, [r6], #4
 801907e:	f000 fd37 	bl	8019af0 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8019082:	4684      	mov	ip, r0
 8019084:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019088:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801908a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801908e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8019090:	4638      	mov	r0, r7
 8019092:	f8dc 3000 	ldr.w	r3, [ip]
 8019096:	6033      	str	r3, [r6, #0]
 8019098:	f000 fd60 	bl	8019b5c <geometry_msgs__msg__Quaternion__get_individual_type_description_source>
 801909c:	4684      	mov	ip, r0
 801909e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80190a2:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 80190a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80190a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80190ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80190ae:	4638      	mov	r0, r7
 80190b0:	f8dc 3000 	ldr.w	r3, [ip]
 80190b4:	6033      	str	r3, [r6, #0]
 80190b6:	f000 fd99 	bl	8019bec <geometry_msgs__msg__Vector3__get_individual_type_description_source>
 80190ba:	4684      	mov	ip, r0
 80190bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80190c0:	f104 064c 	add.w	r6, r4, #76	@ 0x4c
 80190c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80190c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80190ca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80190cc:	4638      	mov	r0, r7
 80190ce:	f8dc 3000 	ldr.w	r3, [ip]
 80190d2:	6033      	str	r3, [r6, #0]
 80190d4:	f000 faac 	bl	8019630 <std_msgs__msg__Header__get_individual_type_description_source>
 80190d8:	2301      	movs	r3, #1
 80190da:	4684      	mov	ip, r0
 80190dc:	702b      	strb	r3, [r5, #0]
 80190de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80190e2:	3470      	adds	r4, #112	@ 0x70
 80190e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80190e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80190ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80190ec:	f8dc 3000 	ldr.w	r3, [ip]
 80190f0:	4802      	ldr	r0, [pc, #8]	@ (80190fc <sensor_msgs__msg__Imu__get_type_description_sources+0xa0>)
 80190f2:	6023      	str	r3, [r4, #0]
 80190f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190f6:	bf00      	nop
 80190f8:	20012590 	.word	0x20012590
 80190fc:	0801e6a8 	.word	0x0801e6a8
 8019100:	0801e6b4 	.word	0x0801e6b4
 8019104:	200124dc 	.word	0x200124dc

08019108 <sensor_msgs__msg__Imu__init>:
 8019108:	b3d8      	cbz	r0, 8019182 <sensor_msgs__msg__Imu__init+0x7a>
 801910a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801910c:	4604      	mov	r4, r0
 801910e:	f000 fabb 	bl	8019688 <std_msgs__msg__Header__init>
 8019112:	b190      	cbz	r0, 801913a <sensor_msgs__msg__Imu__init+0x32>
 8019114:	f104 0518 	add.w	r5, r4, #24
 8019118:	4628      	mov	r0, r5
 801911a:	f000 fd41 	bl	8019ba0 <geometry_msgs__msg__Quaternion__init>
 801911e:	b358      	cbz	r0, 8019178 <sensor_msgs__msg__Imu__init+0x70>
 8019120:	f104 0680 	add.w	r6, r4, #128	@ 0x80
 8019124:	4630      	mov	r0, r6
 8019126:	f000 fd81 	bl	8019c2c <geometry_msgs__msg__Vector3__init>
 801912a:	b1b8      	cbz	r0, 801915c <sensor_msgs__msg__Imu__init+0x54>
 801912c:	f104 07e0 	add.w	r7, r4, #224	@ 0xe0
 8019130:	4638      	mov	r0, r7
 8019132:	f000 fd7b 	bl	8019c2c <geometry_msgs__msg__Vector3__init>
 8019136:	b330      	cbz	r0, 8019186 <sensor_msgs__msg__Imu__init+0x7e>
 8019138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801913a:	4620      	mov	r0, r4
 801913c:	f000 fac4 	bl	80196c8 <std_msgs__msg__Header__fini>
 8019140:	f104 0018 	add.w	r0, r4, #24
 8019144:	f000 fd40 	bl	8019bc8 <geometry_msgs__msg__Quaternion__fini>
 8019148:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 801914c:	f000 fd72 	bl	8019c34 <geometry_msgs__msg__Vector3__fini>
 8019150:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8019154:	f000 fd6e 	bl	8019c34 <geometry_msgs__msg__Vector3__fini>
 8019158:	2000      	movs	r0, #0
 801915a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801915c:	4620      	mov	r0, r4
 801915e:	f000 fab3 	bl	80196c8 <std_msgs__msg__Header__fini>
 8019162:	4628      	mov	r0, r5
 8019164:	f000 fd30 	bl	8019bc8 <geometry_msgs__msg__Quaternion__fini>
 8019168:	4630      	mov	r0, r6
 801916a:	f000 fd63 	bl	8019c34 <geometry_msgs__msg__Vector3__fini>
 801916e:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 8019172:	f000 fd5f 	bl	8019c34 <geometry_msgs__msg__Vector3__fini>
 8019176:	e7ef      	b.n	8019158 <sensor_msgs__msg__Imu__init+0x50>
 8019178:	4620      	mov	r0, r4
 801917a:	f000 faa5 	bl	80196c8 <std_msgs__msg__Header__fini>
 801917e:	4628      	mov	r0, r5
 8019180:	e7e0      	b.n	8019144 <sensor_msgs__msg__Imu__init+0x3c>
 8019182:	2000      	movs	r0, #0
 8019184:	4770      	bx	lr
 8019186:	4620      	mov	r0, r4
 8019188:	f000 fa9e 	bl	80196c8 <std_msgs__msg__Header__fini>
 801918c:	4628      	mov	r0, r5
 801918e:	f000 fd1b 	bl	8019bc8 <geometry_msgs__msg__Quaternion__fini>
 8019192:	4630      	mov	r0, r6
 8019194:	f000 fd4e 	bl	8019c34 <geometry_msgs__msg__Vector3__fini>
 8019198:	4638      	mov	r0, r7
 801919a:	f000 fd4b 	bl	8019c34 <geometry_msgs__msg__Vector3__fini>
 801919e:	e7db      	b.n	8019158 <sensor_msgs__msg__Imu__init+0x50>

080191a0 <sensor_msgs__msg__Imu__fini>:
 80191a0:	b188      	cbz	r0, 80191c6 <sensor_msgs__msg__Imu__fini+0x26>
 80191a2:	b510      	push	{r4, lr}
 80191a4:	4604      	mov	r4, r0
 80191a6:	f000 fa8f 	bl	80196c8 <std_msgs__msg__Header__fini>
 80191aa:	f104 0018 	add.w	r0, r4, #24
 80191ae:	f000 fd0b 	bl	8019bc8 <geometry_msgs__msg__Quaternion__fini>
 80191b2:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 80191b6:	f000 fd3d 	bl	8019c34 <geometry_msgs__msg__Vector3__fini>
 80191ba:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 80191be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191c2:	f000 bd37 	b.w	8019c34 <geometry_msgs__msg__Vector3__fini>
 80191c6:	4770      	bx	lr

080191c8 <sensor_msgs__msg__JointState__get_type_hash>:
 80191c8:	4800      	ldr	r0, [pc, #0]	@ (80191cc <sensor_msgs__msg__JointState__get_type_hash+0x4>)
 80191ca:	4770      	bx	lr
 80191cc:	200015c8 	.word	0x200015c8

080191d0 <sensor_msgs__msg__JointState__get_type_description>:
 80191d0:	b570      	push	{r4, r5, r6, lr}
 80191d2:	4e0c      	ldr	r6, [pc, #48]	@ (8019204 <sensor_msgs__msg__JointState__get_type_description+0x34>)
 80191d4:	7835      	ldrb	r5, [r6, #0]
 80191d6:	b10d      	cbz	r5, 80191dc <sensor_msgs__msg__JointState__get_type_description+0xc>
 80191d8:	480b      	ldr	r0, [pc, #44]	@ (8019208 <sensor_msgs__msg__JointState__get_type_description+0x38>)
 80191da:	bd70      	pop	{r4, r5, r6, pc}
 80191dc:	4628      	mov	r0, r5
 80191de:	f000 fc7b 	bl	8019ad8 <builtin_interfaces__msg__Time__get_type_description>
 80191e2:	300c      	adds	r0, #12
 80191e4:	c807      	ldmia	r0, {r0, r1, r2}
 80191e6:	4c09      	ldr	r4, [pc, #36]	@ (801920c <sensor_msgs__msg__JointState__get_type_description+0x3c>)
 80191e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80191ec:	4628      	mov	r0, r5
 80191ee:	f000 fa07 	bl	8019600 <std_msgs__msg__Header__get_type_description>
 80191f2:	300c      	adds	r0, #12
 80191f4:	c807      	ldmia	r0, {r0, r1, r2}
 80191f6:	3418      	adds	r4, #24
 80191f8:	2301      	movs	r3, #1
 80191fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80191fe:	7033      	strb	r3, [r6, #0]
 8019200:	4801      	ldr	r0, [pc, #4]	@ (8019208 <sensor_msgs__msg__JointState__get_type_description+0x38>)
 8019202:	bd70      	pop	{r4, r5, r6, pc}
 8019204:	20012601 	.word	0x20012601
 8019208:	0801e72c 	.word	0x0801e72c
 801920c:	200019e4 	.word	0x200019e4

08019210 <sensor_msgs__msg__JointState__get_type_description_sources>:
 8019210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019212:	4e17      	ldr	r6, [pc, #92]	@ (8019270 <sensor_msgs__msg__JointState__get_type_description_sources+0x60>)
 8019214:	7837      	ldrb	r7, [r6, #0]
 8019216:	b10f      	cbz	r7, 801921c <sensor_msgs__msg__JointState__get_type_description_sources+0xc>
 8019218:	4816      	ldr	r0, [pc, #88]	@ (8019274 <sensor_msgs__msg__JointState__get_type_description_sources+0x64>)
 801921a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801921c:	4d16      	ldr	r5, [pc, #88]	@ (8019278 <sensor_msgs__msg__JointState__get_type_description_sources+0x68>)
 801921e:	4c17      	ldr	r4, [pc, #92]	@ (801927c <sensor_msgs__msg__JointState__get_type_description_sources+0x6c>)
 8019220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019228:	682b      	ldr	r3, [r5, #0]
 801922a:	4625      	mov	r5, r4
 801922c:	4638      	mov	r0, r7
 801922e:	f845 3b04 	str.w	r3, [r5], #4
 8019232:	f000 fc5d 	bl	8019af0 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8019236:	4684      	mov	ip, r0
 8019238:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801923c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801923e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019242:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019244:	4638      	mov	r0, r7
 8019246:	f8dc 3000 	ldr.w	r3, [ip]
 801924a:	602b      	str	r3, [r5, #0]
 801924c:	f000 f9f0 	bl	8019630 <std_msgs__msg__Header__get_individual_type_description_source>
 8019250:	2301      	movs	r3, #1
 8019252:	4684      	mov	ip, r0
 8019254:	7033      	strb	r3, [r6, #0]
 8019256:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801925a:	3428      	adds	r4, #40	@ 0x28
 801925c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801925e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019264:	f8dc 3000 	ldr.w	r3, [ip]
 8019268:	4802      	ldr	r0, [pc, #8]	@ (8019274 <sensor_msgs__msg__JointState__get_type_description_sources+0x64>)
 801926a:	6023      	str	r3, [r4, #0]
 801926c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801926e:	bf00      	nop
 8019270:	20012600 	.word	0x20012600
 8019274:	0801e6fc 	.word	0x0801e6fc
 8019278:	0801e708 	.word	0x0801e708
 801927c:	20012594 	.word	0x20012594

08019280 <sensor_msgs__msg__JointState__init>:
 8019280:	2800      	cmp	r0, #0
 8019282:	d046      	beq.n	8019312 <sensor_msgs__msg__JointState__init+0x92>
 8019284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019288:	4604      	mov	r4, r0
 801928a:	f000 f9fd 	bl	8019688 <std_msgs__msg__Header__init>
 801928e:	b1e8      	cbz	r0, 80192cc <sensor_msgs__msg__JointState__init+0x4c>
 8019290:	f104 0514 	add.w	r5, r4, #20
 8019294:	2100      	movs	r1, #0
 8019296:	4628      	mov	r0, r5
 8019298:	f7f3 fc56 	bl	800cb48 <rosidl_runtime_c__String__Sequence__init>
 801929c:	b3a0      	cbz	r0, 8019308 <sensor_msgs__msg__JointState__init+0x88>
 801929e:	f104 0620 	add.w	r6, r4, #32
 80192a2:	2100      	movs	r1, #0
 80192a4:	4630      	mov	r0, r6
 80192a6:	f7f3 fb63 	bl	800c970 <rosidl_runtime_c__double__Sequence__init>
 80192aa:	b328      	cbz	r0, 80192f8 <sensor_msgs__msg__JointState__init+0x78>
 80192ac:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 80192b0:	2100      	movs	r1, #0
 80192b2:	4638      	mov	r0, r7
 80192b4:	f7f3 fb5c 	bl	800c970 <rosidl_runtime_c__double__Sequence__init>
 80192b8:	b368      	cbz	r0, 8019316 <sensor_msgs__msg__JointState__init+0x96>
 80192ba:	f104 0838 	add.w	r8, r4, #56	@ 0x38
 80192be:	2100      	movs	r1, #0
 80192c0:	4640      	mov	r0, r8
 80192c2:	f7f3 fb55 	bl	800c970 <rosidl_runtime_c__double__Sequence__init>
 80192c6:	b3b8      	cbz	r0, 8019338 <sensor_msgs__msg__JointState__init+0xb8>
 80192c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192cc:	4620      	mov	r0, r4
 80192ce:	f000 f9fb 	bl	80196c8 <std_msgs__msg__Header__fini>
 80192d2:	f104 0014 	add.w	r0, r4, #20
 80192d6:	f7f3 fc83 	bl	800cbe0 <rosidl_runtime_c__String__Sequence__fini>
 80192da:	f104 0020 	add.w	r0, r4, #32
 80192de:	f7f3 fb61 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 80192e2:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80192e6:	f7f3 fb5d 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 80192ea:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80192ee:	f7f3 fb59 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 80192f2:	2000      	movs	r0, #0
 80192f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192f8:	4620      	mov	r0, r4
 80192fa:	f000 f9e5 	bl	80196c8 <std_msgs__msg__Header__fini>
 80192fe:	4628      	mov	r0, r5
 8019300:	f7f3 fc6e 	bl	800cbe0 <rosidl_runtime_c__String__Sequence__fini>
 8019304:	4630      	mov	r0, r6
 8019306:	e7ea      	b.n	80192de <sensor_msgs__msg__JointState__init+0x5e>
 8019308:	4620      	mov	r0, r4
 801930a:	f000 f9dd 	bl	80196c8 <std_msgs__msg__Header__fini>
 801930e:	4628      	mov	r0, r5
 8019310:	e7e1      	b.n	80192d6 <sensor_msgs__msg__JointState__init+0x56>
 8019312:	2000      	movs	r0, #0
 8019314:	4770      	bx	lr
 8019316:	4620      	mov	r0, r4
 8019318:	f000 f9d6 	bl	80196c8 <std_msgs__msg__Header__fini>
 801931c:	4628      	mov	r0, r5
 801931e:	f7f3 fc5f 	bl	800cbe0 <rosidl_runtime_c__String__Sequence__fini>
 8019322:	4630      	mov	r0, r6
 8019324:	f7f3 fb3e 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 8019328:	4638      	mov	r0, r7
 801932a:	f7f3 fb3b 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 801932e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8019332:	f7f3 fb37 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 8019336:	e7dc      	b.n	80192f2 <sensor_msgs__msg__JointState__init+0x72>
 8019338:	4620      	mov	r0, r4
 801933a:	f000 f9c5 	bl	80196c8 <std_msgs__msg__Header__fini>
 801933e:	4628      	mov	r0, r5
 8019340:	f7f3 fc4e 	bl	800cbe0 <rosidl_runtime_c__String__Sequence__fini>
 8019344:	4630      	mov	r0, r6
 8019346:	f7f3 fb2d 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 801934a:	4638      	mov	r0, r7
 801934c:	f7f3 fb2a 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 8019350:	4640      	mov	r0, r8
 8019352:	f7f3 fb27 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 8019356:	e7cc      	b.n	80192f2 <sensor_msgs__msg__JointState__init+0x72>

08019358 <sensor_msgs__msg__JointState__fini>:
 8019358:	b1a8      	cbz	r0, 8019386 <sensor_msgs__msg__JointState__fini+0x2e>
 801935a:	b510      	push	{r4, lr}
 801935c:	4604      	mov	r4, r0
 801935e:	f000 f9b3 	bl	80196c8 <std_msgs__msg__Header__fini>
 8019362:	f104 0014 	add.w	r0, r4, #20
 8019366:	f7f3 fc3b 	bl	800cbe0 <rosidl_runtime_c__String__Sequence__fini>
 801936a:	f104 0020 	add.w	r0, r4, #32
 801936e:	f7f3 fb19 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 8019372:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8019376:	f7f3 fb15 	bl	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 801937a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801937e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019382:	f7f3 bb0f 	b.w	800c9a4 <rosidl_runtime_c__double__Sequence__fini>
 8019386:	4770      	bx	lr

08019388 <sensor_msgs__msg__Range__get_type_hash>:
 8019388:	4800      	ldr	r0, [pc, #0]	@ (801938c <sensor_msgs__msg__Range__get_type_hash+0x4>)
 801938a:	4770      	bx	lr
 801938c:	20001bec 	.word	0x20001bec

08019390 <sensor_msgs__msg__Range__get_type_description>:
 8019390:	b570      	push	{r4, r5, r6, lr}
 8019392:	4e0c      	ldr	r6, [pc, #48]	@ (80193c4 <sensor_msgs__msg__Range__get_type_description+0x34>)
 8019394:	7835      	ldrb	r5, [r6, #0]
 8019396:	b10d      	cbz	r5, 801939c <sensor_msgs__msg__Range__get_type_description+0xc>
 8019398:	480b      	ldr	r0, [pc, #44]	@ (80193c8 <sensor_msgs__msg__Range__get_type_description+0x38>)
 801939a:	bd70      	pop	{r4, r5, r6, pc}
 801939c:	4628      	mov	r0, r5
 801939e:	f000 fb9b 	bl	8019ad8 <builtin_interfaces__msg__Time__get_type_description>
 80193a2:	300c      	adds	r0, #12
 80193a4:	c807      	ldmia	r0, {r0, r1, r2}
 80193a6:	4c09      	ldr	r4, [pc, #36]	@ (80193cc <sensor_msgs__msg__Range__get_type_description+0x3c>)
 80193a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80193ac:	4628      	mov	r0, r5
 80193ae:	f000 f927 	bl	8019600 <std_msgs__msg__Header__get_type_description>
 80193b2:	300c      	adds	r0, #12
 80193b4:	c807      	ldmia	r0, {r0, r1, r2}
 80193b6:	3418      	adds	r4, #24
 80193b8:	2301      	movs	r3, #1
 80193ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80193be:	7033      	strb	r3, [r6, #0]
 80193c0:	4801      	ldr	r0, [pc, #4]	@ (80193c8 <sensor_msgs__msg__Range__get_type_description+0x38>)
 80193c2:	bd70      	pop	{r4, r5, r6, pc}
 80193c4:	20012671 	.word	0x20012671
 80193c8:	0801e780 	.word	0x0801e780
 80193cc:	2000246c 	.word	0x2000246c

080193d0 <sensor_msgs__msg__Range__get_type_description_sources>:
 80193d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193d2:	4e17      	ldr	r6, [pc, #92]	@ (8019430 <sensor_msgs__msg__Range__get_type_description_sources+0x60>)
 80193d4:	7837      	ldrb	r7, [r6, #0]
 80193d6:	b10f      	cbz	r7, 80193dc <sensor_msgs__msg__Range__get_type_description_sources+0xc>
 80193d8:	4816      	ldr	r0, [pc, #88]	@ (8019434 <sensor_msgs__msg__Range__get_type_description_sources+0x64>)
 80193da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193dc:	4d16      	ldr	r5, [pc, #88]	@ (8019438 <sensor_msgs__msg__Range__get_type_description_sources+0x68>)
 80193de:	4c17      	ldr	r4, [pc, #92]	@ (801943c <sensor_msgs__msg__Range__get_type_description_sources+0x6c>)
 80193e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80193e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80193e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193e8:	682b      	ldr	r3, [r5, #0]
 80193ea:	4625      	mov	r5, r4
 80193ec:	4638      	mov	r0, r7
 80193ee:	f845 3b04 	str.w	r3, [r5], #4
 80193f2:	f000 fb7d 	bl	8019af0 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80193f6:	4684      	mov	ip, r0
 80193f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80193fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80193fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019404:	4638      	mov	r0, r7
 8019406:	f8dc 3000 	ldr.w	r3, [ip]
 801940a:	602b      	str	r3, [r5, #0]
 801940c:	f000 f910 	bl	8019630 <std_msgs__msg__Header__get_individual_type_description_source>
 8019410:	2301      	movs	r3, #1
 8019412:	4684      	mov	ip, r0
 8019414:	7033      	strb	r3, [r6, #0]
 8019416:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801941a:	3428      	adds	r4, #40	@ 0x28
 801941c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801941e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019424:	f8dc 3000 	ldr.w	r3, [ip]
 8019428:	4802      	ldr	r0, [pc, #8]	@ (8019434 <sensor_msgs__msg__Range__get_type_description_sources+0x64>)
 801942a:	6023      	str	r3, [r4, #0]
 801942c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801942e:	bf00      	nop
 8019430:	20012670 	.word	0x20012670
 8019434:	0801e750 	.word	0x0801e750
 8019438:	0801e75c 	.word	0x0801e75c
 801943c:	20012604 	.word	0x20012604

08019440 <sensor_msgs__msg__Range__init>:
 8019440:	b150      	cbz	r0, 8019458 <sensor_msgs__msg__Range__init+0x18>
 8019442:	b510      	push	{r4, lr}
 8019444:	4604      	mov	r4, r0
 8019446:	f000 f91f 	bl	8019688 <std_msgs__msg__Header__init>
 801944a:	b100      	cbz	r0, 801944e <sensor_msgs__msg__Range__init+0xe>
 801944c:	bd10      	pop	{r4, pc}
 801944e:	4620      	mov	r0, r4
 8019450:	f000 f93a 	bl	80196c8 <std_msgs__msg__Header__fini>
 8019454:	2000      	movs	r0, #0
 8019456:	bd10      	pop	{r4, pc}
 8019458:	2000      	movs	r0, #0
 801945a:	4770      	bx	lr

0801945c <sensor_msgs__msg__Range__fini>:
 801945c:	b108      	cbz	r0, 8019462 <sensor_msgs__msg__Range__fini+0x6>
 801945e:	f000 b933 	b.w	80196c8 <std_msgs__msg__Header__fini>
 8019462:	4770      	bx	lr

08019464 <sensor_msgs__msg__Temperature__get_type_hash>:
 8019464:	4800      	ldr	r0, [pc, #0]	@ (8019468 <sensor_msgs__msg__Temperature__get_type_hash+0x4>)
 8019466:	4770      	bx	lr
 8019468:	20002724 	.word	0x20002724

0801946c <sensor_msgs__msg__Temperature__get_type_description>:
 801946c:	b570      	push	{r4, r5, r6, lr}
 801946e:	4e0c      	ldr	r6, [pc, #48]	@ (80194a0 <sensor_msgs__msg__Temperature__get_type_description+0x34>)
 8019470:	7835      	ldrb	r5, [r6, #0]
 8019472:	b10d      	cbz	r5, 8019478 <sensor_msgs__msg__Temperature__get_type_description+0xc>
 8019474:	480b      	ldr	r0, [pc, #44]	@ (80194a4 <sensor_msgs__msg__Temperature__get_type_description+0x38>)
 8019476:	bd70      	pop	{r4, r5, r6, pc}
 8019478:	4628      	mov	r0, r5
 801947a:	f000 fb2d 	bl	8019ad8 <builtin_interfaces__msg__Time__get_type_description>
 801947e:	300c      	adds	r0, #12
 8019480:	c807      	ldmia	r0, {r0, r1, r2}
 8019482:	4c09      	ldr	r4, [pc, #36]	@ (80194a8 <sensor_msgs__msg__Temperature__get_type_description+0x3c>)
 8019484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019488:	4628      	mov	r0, r5
 801948a:	f000 f8b9 	bl	8019600 <std_msgs__msg__Header__get_type_description>
 801948e:	300c      	adds	r0, #12
 8019490:	c807      	ldmia	r0, {r0, r1, r2}
 8019492:	3418      	adds	r4, #24
 8019494:	2301      	movs	r3, #1
 8019496:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801949a:	7033      	strb	r3, [r6, #0]
 801949c:	4801      	ldr	r0, [pc, #4]	@ (80194a4 <sensor_msgs__msg__Temperature__get_type_description+0x38>)
 801949e:	bd70      	pop	{r4, r5, r6, pc}
 80194a0:	200126e1 	.word	0x200126e1
 80194a4:	0801e7d4 	.word	0x0801e7d4
 80194a8:	200028b0 	.word	0x200028b0

080194ac <sensor_msgs__msg__Temperature__get_type_description_sources>:
 80194ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194ae:	4e17      	ldr	r6, [pc, #92]	@ (801950c <sensor_msgs__msg__Temperature__get_type_description_sources+0x60>)
 80194b0:	7837      	ldrb	r7, [r6, #0]
 80194b2:	b10f      	cbz	r7, 80194b8 <sensor_msgs__msg__Temperature__get_type_description_sources+0xc>
 80194b4:	4816      	ldr	r0, [pc, #88]	@ (8019510 <sensor_msgs__msg__Temperature__get_type_description_sources+0x64>)
 80194b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194b8:	4d16      	ldr	r5, [pc, #88]	@ (8019514 <sensor_msgs__msg__Temperature__get_type_description_sources+0x68>)
 80194ba:	4c17      	ldr	r4, [pc, #92]	@ (8019518 <sensor_msgs__msg__Temperature__get_type_description_sources+0x6c>)
 80194bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194c4:	682b      	ldr	r3, [r5, #0]
 80194c6:	4625      	mov	r5, r4
 80194c8:	4638      	mov	r0, r7
 80194ca:	f845 3b04 	str.w	r3, [r5], #4
 80194ce:	f000 fb0f 	bl	8019af0 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80194d2:	4684      	mov	ip, r0
 80194d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80194d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80194da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80194de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80194e0:	4638      	mov	r0, r7
 80194e2:	f8dc 3000 	ldr.w	r3, [ip]
 80194e6:	602b      	str	r3, [r5, #0]
 80194e8:	f000 f8a2 	bl	8019630 <std_msgs__msg__Header__get_individual_type_description_source>
 80194ec:	2301      	movs	r3, #1
 80194ee:	4684      	mov	ip, r0
 80194f0:	7033      	strb	r3, [r6, #0]
 80194f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80194f6:	3428      	adds	r4, #40	@ 0x28
 80194f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80194fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80194fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019500:	f8dc 3000 	ldr.w	r3, [ip]
 8019504:	4802      	ldr	r0, [pc, #8]	@ (8019510 <sensor_msgs__msg__Temperature__get_type_description_sources+0x64>)
 8019506:	6023      	str	r3, [r4, #0]
 8019508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801950a:	bf00      	nop
 801950c:	200126e0 	.word	0x200126e0
 8019510:	0801e7a4 	.word	0x0801e7a4
 8019514:	0801e7b0 	.word	0x0801e7b0
 8019518:	20012674 	.word	0x20012674

0801951c <sensor_msgs__msg__Temperature__init>:
 801951c:	b150      	cbz	r0, 8019534 <sensor_msgs__msg__Temperature__init+0x18>
 801951e:	b510      	push	{r4, lr}
 8019520:	4604      	mov	r4, r0
 8019522:	f000 f8b1 	bl	8019688 <std_msgs__msg__Header__init>
 8019526:	b100      	cbz	r0, 801952a <sensor_msgs__msg__Temperature__init+0xe>
 8019528:	bd10      	pop	{r4, pc}
 801952a:	4620      	mov	r0, r4
 801952c:	f000 f8cc 	bl	80196c8 <std_msgs__msg__Header__fini>
 8019530:	2000      	movs	r0, #0
 8019532:	bd10      	pop	{r4, pc}
 8019534:	2000      	movs	r0, #0
 8019536:	4770      	bx	lr

08019538 <sensor_msgs__msg__Temperature__fini>:
 8019538:	b108      	cbz	r0, 801953e <sensor_msgs__msg__Temperature__fini+0x6>
 801953a:	f000 b8c5 	b.w	80196c8 <std_msgs__msg__Header__fini>
 801953e:	4770      	bx	lr

08019540 <std_msgs__msg__Float32MultiArray__get_type_hash>:
 8019540:	4800      	ldr	r0, [pc, #0]	@ (8019544 <std_msgs__msg__Float32MultiArray__get_type_hash+0x4>)
 8019542:	4770      	bx	lr
 8019544:	20002a1c 	.word	0x20002a1c

08019548 <std_msgs__msg__Float32MultiArray__get_type_description>:
 8019548:	b570      	push	{r4, r5, r6, lr}
 801954a:	4e0c      	ldr	r6, [pc, #48]	@ (801957c <std_msgs__msg__Float32MultiArray__get_type_description+0x34>)
 801954c:	7835      	ldrb	r5, [r6, #0]
 801954e:	b10d      	cbz	r5, 8019554 <std_msgs__msg__Float32MultiArray__get_type_description+0xc>
 8019550:	480b      	ldr	r0, [pc, #44]	@ (8019580 <std_msgs__msg__Float32MultiArray__get_type_description+0x38>)
 8019552:	bd70      	pop	{r4, r5, r6, pc}
 8019554:	4628      	mov	r0, r5
 8019556:	f000 f923 	bl	80197a0 <std_msgs__msg__MultiArrayDimension__get_type_description>
 801955a:	300c      	adds	r0, #12
 801955c:	c807      	ldmia	r0, {r0, r1, r2}
 801955e:	4c09      	ldr	r4, [pc, #36]	@ (8019584 <std_msgs__msg__Float32MultiArray__get_type_description+0x3c>)
 8019560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019564:	4628      	mov	r0, r5
 8019566:	f000 f9c9 	bl	80198fc <std_msgs__msg__MultiArrayLayout__get_type_description>
 801956a:	300c      	adds	r0, #12
 801956c:	c807      	ldmia	r0, {r0, r1, r2}
 801956e:	3418      	adds	r4, #24
 8019570:	2301      	movs	r3, #1
 8019572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019576:	7033      	strb	r3, [r6, #0]
 8019578:	4801      	ldr	r0, [pc, #4]	@ (8019580 <std_msgs__msg__Float32MultiArray__get_type_description+0x38>)
 801957a:	bd70      	pop	{r4, r5, r6, pc}
 801957c:	20012751 	.word	0x20012751
 8019580:	0801e828 	.word	0x0801e828
 8019584:	20002c1c 	.word	0x20002c1c

08019588 <std_msgs__msg__Float32MultiArray__get_type_description_sources>:
 8019588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801958a:	4e17      	ldr	r6, [pc, #92]	@ (80195e8 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x60>)
 801958c:	7837      	ldrb	r7, [r6, #0]
 801958e:	b10f      	cbz	r7, 8019594 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0xc>
 8019590:	4816      	ldr	r0, [pc, #88]	@ (80195ec <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x64>)
 8019592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019594:	4d16      	ldr	r5, [pc, #88]	@ (80195f0 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x68>)
 8019596:	4c17      	ldr	r4, [pc, #92]	@ (80195f4 <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x6c>)
 8019598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801959a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801959c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801959e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195a0:	682b      	ldr	r3, [r5, #0]
 80195a2:	4625      	mov	r5, r4
 80195a4:	4638      	mov	r0, r7
 80195a6:	f845 3b04 	str.w	r3, [r5], #4
 80195aa:	f000 f905 	bl	80197b8 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 80195ae:	4684      	mov	ip, r0
 80195b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80195b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80195b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80195ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80195bc:	4638      	mov	r0, r7
 80195be:	f8dc 3000 	ldr.w	r3, [ip]
 80195c2:	602b      	str	r3, [r5, #0]
 80195c4:	f000 f9b2 	bl	801992c <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>
 80195c8:	2301      	movs	r3, #1
 80195ca:	4684      	mov	ip, r0
 80195cc:	7033      	strb	r3, [r6, #0]
 80195ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80195d2:	3428      	adds	r4, #40	@ 0x28
 80195d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80195da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80195dc:	f8dc 3000 	ldr.w	r3, [ip]
 80195e0:	4802      	ldr	r0, [pc, #8]	@ (80195ec <std_msgs__msg__Float32MultiArray__get_type_description_sources+0x64>)
 80195e2:	6023      	str	r3, [r4, #0]
 80195e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195e6:	bf00      	nop
 80195e8:	20012750 	.word	0x20012750
 80195ec:	0801e7f8 	.word	0x0801e7f8
 80195f0:	0801e804 	.word	0x0801e804
 80195f4:	200126e4 	.word	0x200126e4

080195f8 <std_msgs__msg__Header__get_type_hash>:
 80195f8:	4800      	ldr	r0, [pc, #0]	@ (80195fc <std_msgs__msg__Header__get_type_hash+0x4>)
 80195fa:	4770      	bx	lr
 80195fc:	20002d44 	.word	0x20002d44

08019600 <std_msgs__msg__Header__get_type_description>:
 8019600:	b510      	push	{r4, lr}
 8019602:	4c08      	ldr	r4, [pc, #32]	@ (8019624 <std_msgs__msg__Header__get_type_description+0x24>)
 8019604:	7820      	ldrb	r0, [r4, #0]
 8019606:	b108      	cbz	r0, 801960c <std_msgs__msg__Header__get_type_description+0xc>
 8019608:	4807      	ldr	r0, [pc, #28]	@ (8019628 <std_msgs__msg__Header__get_type_description+0x28>)
 801960a:	bd10      	pop	{r4, pc}
 801960c:	f000 fa64 	bl	8019ad8 <builtin_interfaces__msg__Time__get_type_description>
 8019610:	300c      	adds	r0, #12
 8019612:	c807      	ldmia	r0, {r0, r1, r2}
 8019614:	4b05      	ldr	r3, [pc, #20]	@ (801962c <std_msgs__msg__Header__get_type_description+0x2c>)
 8019616:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801961a:	2301      	movs	r3, #1
 801961c:	4802      	ldr	r0, [pc, #8]	@ (8019628 <std_msgs__msg__Header__get_type_description+0x28>)
 801961e:	7023      	strb	r3, [r4, #0]
 8019620:	bd10      	pop	{r4, pc}
 8019622:	bf00      	nop
 8019624:	2001279d 	.word	0x2001279d
 8019628:	0801e87c 	.word	0x0801e87c
 801962c:	20002ebc 	.word	0x20002ebc

08019630 <std_msgs__msg__Header__get_individual_type_description_source>:
 8019630:	4800      	ldr	r0, [pc, #0]	@ (8019634 <std_msgs__msg__Header__get_individual_type_description_source+0x4>)
 8019632:	4770      	bx	lr
 8019634:	0801e858 	.word	0x0801e858

08019638 <std_msgs__msg__Header__get_type_description_sources>:
 8019638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801963a:	4e0f      	ldr	r6, [pc, #60]	@ (8019678 <std_msgs__msg__Header__get_type_description_sources+0x40>)
 801963c:	7837      	ldrb	r7, [r6, #0]
 801963e:	b10f      	cbz	r7, 8019644 <std_msgs__msg__Header__get_type_description_sources+0xc>
 8019640:	480e      	ldr	r0, [pc, #56]	@ (801967c <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8019642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019644:	4d0e      	ldr	r5, [pc, #56]	@ (8019680 <std_msgs__msg__Header__get_type_description_sources+0x48>)
 8019646:	4c0f      	ldr	r4, [pc, #60]	@ (8019684 <std_msgs__msg__Header__get_type_description_sources+0x4c>)
 8019648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801964a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801964c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801964e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019650:	682b      	ldr	r3, [r5, #0]
 8019652:	f844 3b04 	str.w	r3, [r4], #4
 8019656:	4638      	mov	r0, r7
 8019658:	f000 fa4a 	bl	8019af0 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801965c:	2301      	movs	r3, #1
 801965e:	4684      	mov	ip, r0
 8019660:	7033      	strb	r3, [r6, #0]
 8019662:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019668:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801966c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801966e:	f8dc 3000 	ldr.w	r3, [ip]
 8019672:	4802      	ldr	r0, [pc, #8]	@ (801967c <std_msgs__msg__Header__get_type_description_sources+0x44>)
 8019674:	6023      	str	r3, [r4, #0]
 8019676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019678:	2001279c 	.word	0x2001279c
 801967c:	0801e84c 	.word	0x0801e84c
 8019680:	0801e858 	.word	0x0801e858
 8019684:	20012754 	.word	0x20012754

08019688 <std_msgs__msg__Header__init>:
 8019688:	b1d8      	cbz	r0, 80196c2 <std_msgs__msg__Header__init+0x3a>
 801968a:	b538      	push	{r3, r4, r5, lr}
 801968c:	4604      	mov	r4, r0
 801968e:	f000 fa4f 	bl	8019b30 <builtin_interfaces__msg__Time__init>
 8019692:	b130      	cbz	r0, 80196a2 <std_msgs__msg__Header__init+0x1a>
 8019694:	f104 0508 	add.w	r5, r4, #8
 8019698:	4628      	mov	r0, r5
 801969a:	f7f3 f9c5 	bl	800ca28 <rosidl_runtime_c__String__init>
 801969e:	b148      	cbz	r0, 80196b4 <std_msgs__msg__Header__init+0x2c>
 80196a0:	bd38      	pop	{r3, r4, r5, pc}
 80196a2:	4620      	mov	r0, r4
 80196a4:	f000 fa48 	bl	8019b38 <builtin_interfaces__msg__Time__fini>
 80196a8:	f104 0008 	add.w	r0, r4, #8
 80196ac:	f7f3 f9d6 	bl	800ca5c <rosidl_runtime_c__String__fini>
 80196b0:	2000      	movs	r0, #0
 80196b2:	bd38      	pop	{r3, r4, r5, pc}
 80196b4:	4620      	mov	r0, r4
 80196b6:	f000 fa3f 	bl	8019b38 <builtin_interfaces__msg__Time__fini>
 80196ba:	4628      	mov	r0, r5
 80196bc:	f7f3 f9ce 	bl	800ca5c <rosidl_runtime_c__String__fini>
 80196c0:	e7f6      	b.n	80196b0 <std_msgs__msg__Header__init+0x28>
 80196c2:	2000      	movs	r0, #0
 80196c4:	4770      	bx	lr
 80196c6:	bf00      	nop

080196c8 <std_msgs__msg__Header__fini>:
 80196c8:	b148      	cbz	r0, 80196de <std_msgs__msg__Header__fini+0x16>
 80196ca:	b510      	push	{r4, lr}
 80196cc:	4604      	mov	r4, r0
 80196ce:	f000 fa33 	bl	8019b38 <builtin_interfaces__msg__Time__fini>
 80196d2:	f104 0008 	add.w	r0, r4, #8
 80196d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196da:	f7f3 b9bf 	b.w	800ca5c <rosidl_runtime_c__String__fini>
 80196de:	4770      	bx	lr

080196e0 <std_msgs__msg__Int32MultiArray__get_type_hash>:
 80196e0:	4800      	ldr	r0, [pc, #0]	@ (80196e4 <std_msgs__msg__Int32MultiArray__get_type_hash+0x4>)
 80196e2:	4770      	bx	lr
 80196e4:	20002f9c 	.word	0x20002f9c

080196e8 <std_msgs__msg__Int32MultiArray__get_type_description>:
 80196e8:	b570      	push	{r4, r5, r6, lr}
 80196ea:	4e0c      	ldr	r6, [pc, #48]	@ (801971c <std_msgs__msg__Int32MultiArray__get_type_description+0x34>)
 80196ec:	7835      	ldrb	r5, [r6, #0]
 80196ee:	b10d      	cbz	r5, 80196f4 <std_msgs__msg__Int32MultiArray__get_type_description+0xc>
 80196f0:	480b      	ldr	r0, [pc, #44]	@ (8019720 <std_msgs__msg__Int32MultiArray__get_type_description+0x38>)
 80196f2:	bd70      	pop	{r4, r5, r6, pc}
 80196f4:	4628      	mov	r0, r5
 80196f6:	f000 f853 	bl	80197a0 <std_msgs__msg__MultiArrayDimension__get_type_description>
 80196fa:	300c      	adds	r0, #12
 80196fc:	c807      	ldmia	r0, {r0, r1, r2}
 80196fe:	4c09      	ldr	r4, [pc, #36]	@ (8019724 <std_msgs__msg__Int32MultiArray__get_type_description+0x3c>)
 8019700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019704:	4628      	mov	r0, r5
 8019706:	f000 f8f9 	bl	80198fc <std_msgs__msg__MultiArrayLayout__get_type_description>
 801970a:	300c      	adds	r0, #12
 801970c:	c807      	ldmia	r0, {r0, r1, r2}
 801970e:	3418      	adds	r4, #24
 8019710:	2301      	movs	r3, #1
 8019712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019716:	7033      	strb	r3, [r6, #0]
 8019718:	4801      	ldr	r0, [pc, #4]	@ (8019720 <std_msgs__msg__Int32MultiArray__get_type_description+0x38>)
 801971a:	bd70      	pop	{r4, r5, r6, pc}
 801971c:	2001280d 	.word	0x2001280d
 8019720:	0801e8d0 	.word	0x0801e8d0
 8019724:	2000319c 	.word	0x2000319c

08019728 <std_msgs__msg__Int32MultiArray__get_type_description_sources>:
 8019728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801972a:	4e17      	ldr	r6, [pc, #92]	@ (8019788 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x60>)
 801972c:	7837      	ldrb	r7, [r6, #0]
 801972e:	b10f      	cbz	r7, 8019734 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0xc>
 8019730:	4816      	ldr	r0, [pc, #88]	@ (801978c <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x64>)
 8019732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019734:	4d16      	ldr	r5, [pc, #88]	@ (8019790 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x68>)
 8019736:	4c17      	ldr	r4, [pc, #92]	@ (8019794 <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x6c>)
 8019738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801973a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801973c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801973e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019740:	682b      	ldr	r3, [r5, #0]
 8019742:	4625      	mov	r5, r4
 8019744:	4638      	mov	r0, r7
 8019746:	f845 3b04 	str.w	r3, [r5], #4
 801974a:	f000 f835 	bl	80197b8 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 801974e:	4684      	mov	ip, r0
 8019750:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019756:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801975a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801975c:	4638      	mov	r0, r7
 801975e:	f8dc 3000 	ldr.w	r3, [ip]
 8019762:	602b      	str	r3, [r5, #0]
 8019764:	f000 f8e2 	bl	801992c <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>
 8019768:	2301      	movs	r3, #1
 801976a:	4684      	mov	ip, r0
 801976c:	7033      	strb	r3, [r6, #0]
 801976e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019772:	3428      	adds	r4, #40	@ 0x28
 8019774:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019776:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801977a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801977c:	f8dc 3000 	ldr.w	r3, [ip]
 8019780:	4802      	ldr	r0, [pc, #8]	@ (801978c <std_msgs__msg__Int32MultiArray__get_type_description_sources+0x64>)
 8019782:	6023      	str	r3, [r4, #0]
 8019784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019786:	bf00      	nop
 8019788:	2001280c 	.word	0x2001280c
 801978c:	0801e8a0 	.word	0x0801e8a0
 8019790:	0801e8ac 	.word	0x0801e8ac
 8019794:	200127a0 	.word	0x200127a0

08019798 <std_msgs__msg__MultiArrayDimension__get_type_hash>:
 8019798:	4800      	ldr	r0, [pc, #0]	@ (801979c <std_msgs__msg__MultiArrayDimension__get_type_hash+0x4>)
 801979a:	4770      	bx	lr
 801979c:	200032c4 	.word	0x200032c4

080197a0 <std_msgs__msg__MultiArrayDimension__get_type_description>:
 80197a0:	4b03      	ldr	r3, [pc, #12]	@ (80197b0 <std_msgs__msg__MultiArrayDimension__get_type_description+0x10>)
 80197a2:	781a      	ldrb	r2, [r3, #0]
 80197a4:	b90a      	cbnz	r2, 80197aa <std_msgs__msg__MultiArrayDimension__get_type_description+0xa>
 80197a6:	2201      	movs	r2, #1
 80197a8:	701a      	strb	r2, [r3, #0]
 80197aa:	4802      	ldr	r0, [pc, #8]	@ (80197b4 <std_msgs__msg__MultiArrayDimension__get_type_description+0x14>)
 80197ac:	4770      	bx	lr
 80197ae:	bf00      	nop
 80197b0:	20012835 	.word	0x20012835
 80197b4:	0801e924 	.word	0x0801e924

080197b8 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>:
 80197b8:	4800      	ldr	r0, [pc, #0]	@ (80197bc <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source+0x4>)
 80197ba:	4770      	bx	lr
 80197bc:	0801e900 	.word	0x0801e900

080197c0 <std_msgs__msg__MultiArrayDimension__get_type_description_sources>:
 80197c0:	4b09      	ldr	r3, [pc, #36]	@ (80197e8 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x28>)
 80197c2:	781a      	ldrb	r2, [r3, #0]
 80197c4:	b96a      	cbnz	r2, 80197e2 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x22>
 80197c6:	b430      	push	{r4, r5}
 80197c8:	4d08      	ldr	r5, [pc, #32]	@ (80197ec <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x2c>)
 80197ca:	4c09      	ldr	r4, [pc, #36]	@ (80197f0 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x30>)
 80197cc:	2201      	movs	r2, #1
 80197ce:	701a      	strb	r2, [r3, #0]
 80197d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197d8:	682b      	ldr	r3, [r5, #0]
 80197da:	4806      	ldr	r0, [pc, #24]	@ (80197f4 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 80197dc:	6023      	str	r3, [r4, #0]
 80197de:	bc30      	pop	{r4, r5}
 80197e0:	4770      	bx	lr
 80197e2:	4804      	ldr	r0, [pc, #16]	@ (80197f4 <std_msgs__msg__MultiArrayDimension__get_type_description_sources+0x34>)
 80197e4:	4770      	bx	lr
 80197e6:	bf00      	nop
 80197e8:	20012834 	.word	0x20012834
 80197ec:	0801e900 	.word	0x0801e900
 80197f0:	20012810 	.word	0x20012810
 80197f4:	0801e8f4 	.word	0x0801e8f4

080197f8 <std_msgs__msg__MultiArrayDimension__init>:
 80197f8:	b150      	cbz	r0, 8019810 <std_msgs__msg__MultiArrayDimension__init+0x18>
 80197fa:	b510      	push	{r4, lr}
 80197fc:	4604      	mov	r4, r0
 80197fe:	f7f3 f913 	bl	800ca28 <rosidl_runtime_c__String__init>
 8019802:	b100      	cbz	r0, 8019806 <std_msgs__msg__MultiArrayDimension__init+0xe>
 8019804:	bd10      	pop	{r4, pc}
 8019806:	4620      	mov	r0, r4
 8019808:	f7f3 f928 	bl	800ca5c <rosidl_runtime_c__String__fini>
 801980c:	2000      	movs	r0, #0
 801980e:	bd10      	pop	{r4, pc}
 8019810:	2000      	movs	r0, #0
 8019812:	4770      	bx	lr

08019814 <std_msgs__msg__MultiArrayDimension__fini>:
 8019814:	b108      	cbz	r0, 801981a <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8019816:	f7f3 b921 	b.w	800ca5c <rosidl_runtime_c__String__fini>
 801981a:	4770      	bx	lr

0801981c <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 801981c:	2800      	cmp	r0, #0
 801981e:	d03f      	beq.n	80198a0 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x84>
 8019820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019824:	b087      	sub	sp, #28
 8019826:	460d      	mov	r5, r1
 8019828:	4681      	mov	r9, r0
 801982a:	a801      	add	r0, sp, #4
 801982c:	f7f2 f9f0 	bl	800bc10 <rcutils_get_default_allocator>
 8019830:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8019834:	b35d      	cbz	r5, 801988e <std_msgs__msg__MultiArrayDimension__Sequence__init+0x72>
 8019836:	9b04      	ldr	r3, [sp, #16]
 8019838:	4642      	mov	r2, r8
 801983a:	2114      	movs	r1, #20
 801983c:	4628      	mov	r0, r5
 801983e:	4798      	blx	r3
 8019840:	4607      	mov	r7, r0
 8019842:	b310      	cbz	r0, 801988a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6e>
 8019844:	4606      	mov	r6, r0
 8019846:	2400      	movs	r4, #0
 8019848:	e004      	b.n	8019854 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x38>
 801984a:	3401      	adds	r4, #1
 801984c:	42a5      	cmp	r5, r4
 801984e:	f106 0614 	add.w	r6, r6, #20
 8019852:	d01d      	beq.n	8019890 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8019854:	4630      	mov	r0, r6
 8019856:	f7f3 f8e7 	bl	800ca28 <rosidl_runtime_c__String__init>
 801985a:	2800      	cmp	r0, #0
 801985c:	d1f5      	bne.n	801984a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x2e>
 801985e:	4630      	mov	r0, r6
 8019860:	f7f3 f8fc 	bl	800ca5c <rosidl_runtime_c__String__fini>
 8019864:	42a5      	cmp	r5, r4
 8019866:	d913      	bls.n	8019890 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x74>
 8019868:	b15c      	cbz	r4, 8019882 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x66>
 801986a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801986e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8019872:	3c14      	subs	r4, #20
 8019874:	4620      	mov	r0, r4
 8019876:	f7f3 f8f1 	bl	800ca5c <rosidl_runtime_c__String__fini>
 801987a:	42bc      	cmp	r4, r7
 801987c:	f1a4 0414 	sub.w	r4, r4, #20
 8019880:	d1f8      	bne.n	8019874 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x58>
 8019882:	9b02      	ldr	r3, [sp, #8]
 8019884:	4641      	mov	r1, r8
 8019886:	4638      	mov	r0, r7
 8019888:	4798      	blx	r3
 801988a:	2000      	movs	r0, #0
 801988c:	e005      	b.n	801989a <std_msgs__msg__MultiArrayDimension__Sequence__init+0x7e>
 801988e:	462f      	mov	r7, r5
 8019890:	e9c9 7500 	strd	r7, r5, [r9]
 8019894:	f8c9 5008 	str.w	r5, [r9, #8]
 8019898:	2001      	movs	r0, #1
 801989a:	b007      	add	sp, #28
 801989c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198a0:	2000      	movs	r0, #0
 80198a2:	4770      	bx	lr

080198a4 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 80198a4:	b320      	cbz	r0, 80198f0 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 80198a6:	b530      	push	{r4, r5, lr}
 80198a8:	4605      	mov	r5, r0
 80198aa:	b087      	sub	sp, #28
 80198ac:	a801      	add	r0, sp, #4
 80198ae:	f7f2 f9af 	bl	800bc10 <rcutils_get_default_allocator>
 80198b2:	682a      	ldr	r2, [r5, #0]
 80198b4:	b1b2      	cbz	r2, 80198e4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 80198b6:	68a9      	ldr	r1, [r5, #8]
 80198b8:	b161      	cbz	r1, 80198d4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80198ba:	2400      	movs	r4, #0
 80198bc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80198c0:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 80198c4:	d010      	beq.n	80198e8 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 80198c6:	f7f3 f8c9 	bl	800ca5c <rosidl_runtime_c__String__fini>
 80198ca:	68a9      	ldr	r1, [r5, #8]
 80198cc:	682a      	ldr	r2, [r5, #0]
 80198ce:	3401      	adds	r4, #1
 80198d0:	428c      	cmp	r4, r1
 80198d2:	d3f3      	bcc.n	80198bc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80198d4:	9b02      	ldr	r3, [sp, #8]
 80198d6:	9905      	ldr	r1, [sp, #20]
 80198d8:	4610      	mov	r0, r2
 80198da:	4798      	blx	r3
 80198dc:	2300      	movs	r3, #0
 80198de:	e9c5 3300 	strd	r3, r3, [r5]
 80198e2:	60ab      	str	r3, [r5, #8]
 80198e4:	b007      	add	sp, #28
 80198e6:	bd30      	pop	{r4, r5, pc}
 80198e8:	3401      	adds	r4, #1
 80198ea:	428c      	cmp	r4, r1
 80198ec:	d3e6      	bcc.n	80198bc <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 80198ee:	e7f1      	b.n	80198d4 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 80198f0:	4770      	bx	lr
 80198f2:	bf00      	nop

080198f4 <std_msgs__msg__MultiArrayLayout__get_type_hash>:
 80198f4:	4800      	ldr	r0, [pc, #0]	@ (80198f8 <std_msgs__msg__MultiArrayLayout__get_type_hash+0x4>)
 80198f6:	4770      	bx	lr
 80198f8:	2000358c 	.word	0x2000358c

080198fc <std_msgs__msg__MultiArrayLayout__get_type_description>:
 80198fc:	b510      	push	{r4, lr}
 80198fe:	4c08      	ldr	r4, [pc, #32]	@ (8019920 <std_msgs__msg__MultiArrayLayout__get_type_description+0x24>)
 8019900:	7820      	ldrb	r0, [r4, #0]
 8019902:	b108      	cbz	r0, 8019908 <std_msgs__msg__MultiArrayLayout__get_type_description+0xc>
 8019904:	4807      	ldr	r0, [pc, #28]	@ (8019924 <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 8019906:	bd10      	pop	{r4, pc}
 8019908:	f7ff ff4a 	bl	80197a0 <std_msgs__msg__MultiArrayDimension__get_type_description>
 801990c:	300c      	adds	r0, #12
 801990e:	c807      	ldmia	r0, {r0, r1, r2}
 8019910:	4b05      	ldr	r3, [pc, #20]	@ (8019928 <std_msgs__msg__MultiArrayLayout__get_type_description+0x2c>)
 8019912:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019916:	2301      	movs	r3, #1
 8019918:	4802      	ldr	r0, [pc, #8]	@ (8019924 <std_msgs__msg__MultiArrayLayout__get_type_description+0x28>)
 801991a:	7023      	strb	r3, [r4, #0]
 801991c:	bd10      	pop	{r4, pc}
 801991e:	bf00      	nop
 8019920:	20012881 	.word	0x20012881
 8019924:	0801e978 	.word	0x0801e978
 8019928:	20003a48 	.word	0x20003a48

0801992c <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source>:
 801992c:	4800      	ldr	r0, [pc, #0]	@ (8019930 <std_msgs__msg__MultiArrayLayout__get_individual_type_description_source+0x4>)
 801992e:	4770      	bx	lr
 8019930:	0801e954 	.word	0x0801e954

08019934 <std_msgs__msg__MultiArrayLayout__get_type_description_sources>:
 8019934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019936:	4e0f      	ldr	r6, [pc, #60]	@ (8019974 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x40>)
 8019938:	7837      	ldrb	r7, [r6, #0]
 801993a:	b10f      	cbz	r7, 8019940 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0xc>
 801993c:	480e      	ldr	r0, [pc, #56]	@ (8019978 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 801993e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019940:	4d0e      	ldr	r5, [pc, #56]	@ (801997c <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x48>)
 8019942:	4c0f      	ldr	r4, [pc, #60]	@ (8019980 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x4c>)
 8019944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801994a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801994c:	682b      	ldr	r3, [r5, #0]
 801994e:	f844 3b04 	str.w	r3, [r4], #4
 8019952:	4638      	mov	r0, r7
 8019954:	f7ff ff30 	bl	80197b8 <std_msgs__msg__MultiArrayDimension__get_individual_type_description_source>
 8019958:	2301      	movs	r3, #1
 801995a:	4684      	mov	ip, r0
 801995c:	7033      	strb	r3, [r6, #0]
 801995e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019964:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801996a:	f8dc 3000 	ldr.w	r3, [ip]
 801996e:	4802      	ldr	r0, [pc, #8]	@ (8019978 <std_msgs__msg__MultiArrayLayout__get_type_description_sources+0x44>)
 8019970:	6023      	str	r3, [r4, #0]
 8019972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019974:	20012880 	.word	0x20012880
 8019978:	0801e948 	.word	0x0801e948
 801997c:	0801e954 	.word	0x0801e954
 8019980:	20012838 	.word	0x20012838

08019984 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8019984:	f7ff bf38 	b.w	80197f8 <std_msgs__msg__MultiArrayDimension__init>

08019988 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8019988:	f7ff bf44 	b.w	8019814 <std_msgs__msg__MultiArrayDimension__fini>

0801998c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 801998c:	4b04      	ldr	r3, [pc, #16]	@ (80199a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801998e:	681a      	ldr	r2, [r3, #0]
 8019990:	b10a      	cbz	r2, 8019996 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8019992:	4803      	ldr	r0, [pc, #12]	@ (80199a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019994:	4770      	bx	lr
 8019996:	4a03      	ldr	r2, [pc, #12]	@ (80199a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8019998:	4801      	ldr	r0, [pc, #4]	@ (80199a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801999a:	6812      	ldr	r2, [r2, #0]
 801999c:	601a      	str	r2, [r3, #0]
 801999e:	4770      	bx	lr
 80199a0:	20003b3c 	.word	0x20003b3c
 80199a4:	20000d74 	.word	0x20000d74

080199a8 <_MultiArrayDimension__cdr_serialize>:
 80199a8:	b1d0      	cbz	r0, 80199e0 <_MultiArrayDimension__cdr_serialize+0x38>
 80199aa:	b570      	push	{r4, r5, r6, lr}
 80199ac:	6806      	ldr	r6, [r0, #0]
 80199ae:	460d      	mov	r5, r1
 80199b0:	4604      	mov	r4, r0
 80199b2:	b196      	cbz	r6, 80199da <_MultiArrayDimension__cdr_serialize+0x32>
 80199b4:	4630      	mov	r0, r6
 80199b6:	f7e6 fc8b 	bl	80002d0 <strlen>
 80199ba:	1c42      	adds	r2, r0, #1
 80199bc:	6060      	str	r0, [r4, #4]
 80199be:	4631      	mov	r1, r6
 80199c0:	4628      	mov	r0, r5
 80199c2:	f7f6 ff23 	bl	801080c <ucdr_serialize_sequence_char>
 80199c6:	68e1      	ldr	r1, [r4, #12]
 80199c8:	4628      	mov	r0, r5
 80199ca:	f7f5 faa9 	bl	800ef20 <ucdr_serialize_uint32_t>
 80199ce:	6921      	ldr	r1, [r4, #16]
 80199d0:	4628      	mov	r0, r5
 80199d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80199d6:	f7f5 baa3 	b.w	800ef20 <ucdr_serialize_uint32_t>
 80199da:	4632      	mov	r2, r6
 80199dc:	4630      	mov	r0, r6
 80199de:	e7ed      	b.n	80199bc <_MultiArrayDimension__cdr_serialize+0x14>
 80199e0:	4770      	bx	lr
 80199e2:	bf00      	nop

080199e4 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 80199e4:	b570      	push	{r4, r5, r6, lr}
 80199e6:	4604      	mov	r4, r0
 80199e8:	b1b0      	cbz	r0, 8019a18 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 80199ea:	460d      	mov	r5, r1
 80199ec:	4628      	mov	r0, r5
 80199ee:	2104      	movs	r1, #4
 80199f0:	f7f6 fea0 	bl	8010734 <ucdr_alignment>
 80199f4:	6863      	ldr	r3, [r4, #4]
 80199f6:	1d6e      	adds	r6, r5, #5
 80199f8:	441e      	add	r6, r3
 80199fa:	4406      	add	r6, r0
 80199fc:	2104      	movs	r1, #4
 80199fe:	4630      	mov	r0, r6
 8019a00:	f7f6 fe98 	bl	8010734 <ucdr_alignment>
 8019a04:	1d04      	adds	r4, r0, #4
 8019a06:	4434      	add	r4, r6
 8019a08:	2104      	movs	r1, #4
 8019a0a:	4620      	mov	r0, r4
 8019a0c:	f7f6 fe92 	bl	8010734 <ucdr_alignment>
 8019a10:	f1c5 0504 	rsb	r5, r5, #4
 8019a14:	4405      	add	r5, r0
 8019a16:	1928      	adds	r0, r5, r4
 8019a18:	bd70      	pop	{r4, r5, r6, pc}
 8019a1a:	bf00      	nop

08019a1c <_MultiArrayDimension__cdr_deserialize>:
 8019a1c:	b570      	push	{r4, r5, r6, lr}
 8019a1e:	460c      	mov	r4, r1
 8019a20:	b082      	sub	sp, #8
 8019a22:	b1d9      	cbz	r1, 8019a5c <_MultiArrayDimension__cdr_deserialize+0x40>
 8019a24:	688e      	ldr	r6, [r1, #8]
 8019a26:	6809      	ldr	r1, [r1, #0]
 8019a28:	ab01      	add	r3, sp, #4
 8019a2a:	4632      	mov	r2, r6
 8019a2c:	4605      	mov	r5, r0
 8019a2e:	f7f6 feff 	bl	8010830 <ucdr_deserialize_sequence_char>
 8019a32:	9b01      	ldr	r3, [sp, #4]
 8019a34:	b970      	cbnz	r0, 8019a54 <_MultiArrayDimension__cdr_deserialize+0x38>
 8019a36:	429e      	cmp	r6, r3
 8019a38:	d313      	bcc.n	8019a62 <_MultiArrayDimension__cdr_deserialize+0x46>
 8019a3a:	f104 010c 	add.w	r1, r4, #12
 8019a3e:	4628      	mov	r0, r5
 8019a40:	f7f5 fb98 	bl	800f174 <ucdr_deserialize_uint32_t>
 8019a44:	f104 0110 	add.w	r1, r4, #16
 8019a48:	4628      	mov	r0, r5
 8019a4a:	b002      	add	sp, #8
 8019a4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a50:	f7f5 bb90 	b.w	800f174 <ucdr_deserialize_uint32_t>
 8019a54:	b103      	cbz	r3, 8019a58 <_MultiArrayDimension__cdr_deserialize+0x3c>
 8019a56:	3b01      	subs	r3, #1
 8019a58:	6063      	str	r3, [r4, #4]
 8019a5a:	e7ee      	b.n	8019a3a <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019a5c:	4608      	mov	r0, r1
 8019a5e:	b002      	add	sp, #8
 8019a60:	bd70      	pop	{r4, r5, r6, pc}
 8019a62:	2101      	movs	r1, #1
 8019a64:	75a8      	strb	r0, [r5, #22]
 8019a66:	7569      	strb	r1, [r5, #21]
 8019a68:	6060      	str	r0, [r4, #4]
 8019a6a:	4628      	mov	r0, r5
 8019a6c:	f7f6 fe78 	bl	8010760 <ucdr_align_to>
 8019a70:	9901      	ldr	r1, [sp, #4]
 8019a72:	4628      	mov	r0, r5
 8019a74:	f7f6 feaa 	bl	80107cc <ucdr_advance_buffer>
 8019a78:	e7df      	b.n	8019a3a <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019a7a:	bf00      	nop

08019a7c <_MultiArrayDimension__max_serialized_size>:
 8019a7c:	b510      	push	{r4, lr}
 8019a7e:	2104      	movs	r1, #4
 8019a80:	2000      	movs	r0, #0
 8019a82:	f7f6 fe57 	bl	8010734 <ucdr_alignment>
 8019a86:	1d04      	adds	r4, r0, #4
 8019a88:	2104      	movs	r1, #4
 8019a8a:	4620      	mov	r0, r4
 8019a8c:	f7f6 fe52 	bl	8010734 <ucdr_alignment>
 8019a90:	3004      	adds	r0, #4
 8019a92:	4420      	add	r0, r4
 8019a94:	bd10      	pop	{r4, pc}
 8019a96:	bf00      	nop

08019a98 <_MultiArrayDimension__get_serialized_size>:
 8019a98:	b538      	push	{r3, r4, r5, lr}
 8019a9a:	4604      	mov	r4, r0
 8019a9c:	b190      	cbz	r0, 8019ac4 <_MultiArrayDimension__get_serialized_size+0x2c>
 8019a9e:	2104      	movs	r1, #4
 8019aa0:	2000      	movs	r0, #0
 8019aa2:	f7f6 fe47 	bl	8010734 <ucdr_alignment>
 8019aa6:	6865      	ldr	r5, [r4, #4]
 8019aa8:	3505      	adds	r5, #5
 8019aaa:	4405      	add	r5, r0
 8019aac:	2104      	movs	r1, #4
 8019aae:	4628      	mov	r0, r5
 8019ab0:	f7f6 fe40 	bl	8010734 <ucdr_alignment>
 8019ab4:	1d04      	adds	r4, r0, #4
 8019ab6:	442c      	add	r4, r5
 8019ab8:	2104      	movs	r1, #4
 8019aba:	4620      	mov	r0, r4
 8019abc:	f7f6 fe3a 	bl	8010734 <ucdr_alignment>
 8019ac0:	3004      	adds	r0, #4
 8019ac2:	4420      	add	r0, r4
 8019ac4:	bd38      	pop	{r3, r4, r5, pc}
 8019ac6:	bf00      	nop

08019ac8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019ac8:	4800      	ldr	r0, [pc, #0]	@ (8019acc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8019aca:	4770      	bx	lr
 8019acc:	20003c08 	.word	0x20003c08

08019ad0 <builtin_interfaces__msg__Time__get_type_hash>:
 8019ad0:	4800      	ldr	r0, [pc, #0]	@ (8019ad4 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 8019ad2:	4770      	bx	lr
 8019ad4:	20003c3c 	.word	0x20003c3c

08019ad8 <builtin_interfaces__msg__Time__get_type_description>:
 8019ad8:	4b03      	ldr	r3, [pc, #12]	@ (8019ae8 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8019ada:	781a      	ldrb	r2, [r3, #0]
 8019adc:	b90a      	cbnz	r2, 8019ae2 <builtin_interfaces__msg__Time__get_type_description+0xa>
 8019ade:	2201      	movs	r2, #1
 8019ae0:	701a      	strb	r2, [r3, #0]
 8019ae2:	4802      	ldr	r0, [pc, #8]	@ (8019aec <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8019ae4:	4770      	bx	lr
 8019ae6:	bf00      	nop
 8019ae8:	200128a9 	.word	0x200128a9
 8019aec:	0801e9ec 	.word	0x0801e9ec

08019af0 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8019af0:	4800      	ldr	r0, [pc, #0]	@ (8019af4 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 8019af2:	4770      	bx	lr
 8019af4:	0801e9c8 	.word	0x0801e9c8

08019af8 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8019af8:	4b09      	ldr	r3, [pc, #36]	@ (8019b20 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8019afa:	781a      	ldrb	r2, [r3, #0]
 8019afc:	b96a      	cbnz	r2, 8019b1a <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8019afe:	b430      	push	{r4, r5}
 8019b00:	4d08      	ldr	r5, [pc, #32]	@ (8019b24 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 8019b02:	4c09      	ldr	r4, [pc, #36]	@ (8019b28 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8019b04:	2201      	movs	r2, #1
 8019b06:	701a      	strb	r2, [r3, #0]
 8019b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b10:	682b      	ldr	r3, [r5, #0]
 8019b12:	4806      	ldr	r0, [pc, #24]	@ (8019b2c <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8019b14:	6023      	str	r3, [r4, #0]
 8019b16:	bc30      	pop	{r4, r5}
 8019b18:	4770      	bx	lr
 8019b1a:	4804      	ldr	r0, [pc, #16]	@ (8019b2c <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8019b1c:	4770      	bx	lr
 8019b1e:	bf00      	nop
 8019b20:	200128a8 	.word	0x200128a8
 8019b24:	0801e9c8 	.word	0x0801e9c8
 8019b28:	20012884 	.word	0x20012884
 8019b2c:	0801e9bc 	.word	0x0801e9bc

08019b30 <builtin_interfaces__msg__Time__init>:
 8019b30:	3800      	subs	r0, #0
 8019b32:	bf18      	it	ne
 8019b34:	2001      	movne	r0, #1
 8019b36:	4770      	bx	lr

08019b38 <builtin_interfaces__msg__Time__fini>:
 8019b38:	4770      	bx	lr
 8019b3a:	bf00      	nop

08019b3c <geometry_msgs__msg__Quaternion__get_type_hash>:
 8019b3c:	4800      	ldr	r0, [pc, #0]	@ (8019b40 <geometry_msgs__msg__Quaternion__get_type_hash+0x4>)
 8019b3e:	4770      	bx	lr
 8019b40:	20003ec8 	.word	0x20003ec8

08019b44 <geometry_msgs__msg__Quaternion__get_type_description>:
 8019b44:	4b03      	ldr	r3, [pc, #12]	@ (8019b54 <geometry_msgs__msg__Quaternion__get_type_description+0x10>)
 8019b46:	781a      	ldrb	r2, [r3, #0]
 8019b48:	b90a      	cbnz	r2, 8019b4e <geometry_msgs__msg__Quaternion__get_type_description+0xa>
 8019b4a:	2201      	movs	r2, #1
 8019b4c:	701a      	strb	r2, [r3, #0]
 8019b4e:	4802      	ldr	r0, [pc, #8]	@ (8019b58 <geometry_msgs__msg__Quaternion__get_type_description+0x14>)
 8019b50:	4770      	bx	lr
 8019b52:	bf00      	nop
 8019b54:	200128d1 	.word	0x200128d1
 8019b58:	0801ea40 	.word	0x0801ea40

08019b5c <geometry_msgs__msg__Quaternion__get_individual_type_description_source>:
 8019b5c:	4800      	ldr	r0, [pc, #0]	@ (8019b60 <geometry_msgs__msg__Quaternion__get_individual_type_description_source+0x4>)
 8019b5e:	4770      	bx	lr
 8019b60:	0801ea1c 	.word	0x0801ea1c

08019b64 <geometry_msgs__msg__Quaternion__get_type_description_sources>:
 8019b64:	4b09      	ldr	r3, [pc, #36]	@ (8019b8c <geometry_msgs__msg__Quaternion__get_type_description_sources+0x28>)
 8019b66:	781a      	ldrb	r2, [r3, #0]
 8019b68:	b96a      	cbnz	r2, 8019b86 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x22>
 8019b6a:	b430      	push	{r4, r5}
 8019b6c:	4d08      	ldr	r5, [pc, #32]	@ (8019b90 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x2c>)
 8019b6e:	4c09      	ldr	r4, [pc, #36]	@ (8019b94 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x30>)
 8019b70:	2201      	movs	r2, #1
 8019b72:	701a      	strb	r2, [r3, #0]
 8019b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019b7c:	682b      	ldr	r3, [r5, #0]
 8019b7e:	4806      	ldr	r0, [pc, #24]	@ (8019b98 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8019b80:	6023      	str	r3, [r4, #0]
 8019b82:	bc30      	pop	{r4, r5}
 8019b84:	4770      	bx	lr
 8019b86:	4804      	ldr	r0, [pc, #16]	@ (8019b98 <geometry_msgs__msg__Quaternion__get_type_description_sources+0x34>)
 8019b88:	4770      	bx	lr
 8019b8a:	bf00      	nop
 8019b8c:	200128d0 	.word	0x200128d0
 8019b90:	0801ea1c 	.word	0x0801ea1c
 8019b94:	200128ac 	.word	0x200128ac
 8019b98:	0801ea10 	.word	0x0801ea10
 8019b9c:	00000000 	.word	0x00000000

08019ba0 <geometry_msgs__msg__Quaternion__init>:
 8019ba0:	b160      	cbz	r0, 8019bbc <geometry_msgs__msg__Quaternion__init+0x1c>
 8019ba2:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8019bc0 <geometry_msgs__msg__Quaternion__init+0x20>
 8019ba6:	2200      	movs	r2, #0
 8019ba8:	2300      	movs	r3, #0
 8019baa:	e9c0 2300 	strd	r2, r3, [r0]
 8019bae:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019bb2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019bb6:	ed80 7b06 	vstr	d7, [r0, #24]
 8019bba:	2001      	movs	r0, #1
 8019bbc:	4770      	bx	lr
 8019bbe:	bf00      	nop
 8019bc0:	00000000 	.word	0x00000000
 8019bc4:	3ff00000 	.word	0x3ff00000

08019bc8 <geometry_msgs__msg__Quaternion__fini>:
 8019bc8:	4770      	bx	lr
 8019bca:	bf00      	nop

08019bcc <geometry_msgs__msg__Vector3__get_type_hash>:
 8019bcc:	4800      	ldr	r0, [pc, #0]	@ (8019bd0 <geometry_msgs__msg__Vector3__get_type_hash+0x4>)
 8019bce:	4770      	bx	lr
 8019bd0:	200040c8 	.word	0x200040c8

08019bd4 <geometry_msgs__msg__Vector3__get_type_description>:
 8019bd4:	4b03      	ldr	r3, [pc, #12]	@ (8019be4 <geometry_msgs__msg__Vector3__get_type_description+0x10>)
 8019bd6:	781a      	ldrb	r2, [r3, #0]
 8019bd8:	b90a      	cbnz	r2, 8019bde <geometry_msgs__msg__Vector3__get_type_description+0xa>
 8019bda:	2201      	movs	r2, #1
 8019bdc:	701a      	strb	r2, [r3, #0]
 8019bde:	4802      	ldr	r0, [pc, #8]	@ (8019be8 <geometry_msgs__msg__Vector3__get_type_description+0x14>)
 8019be0:	4770      	bx	lr
 8019be2:	bf00      	nop
 8019be4:	200128f9 	.word	0x200128f9
 8019be8:	0801ea94 	.word	0x0801ea94

08019bec <geometry_msgs__msg__Vector3__get_individual_type_description_source>:
 8019bec:	4800      	ldr	r0, [pc, #0]	@ (8019bf0 <geometry_msgs__msg__Vector3__get_individual_type_description_source+0x4>)
 8019bee:	4770      	bx	lr
 8019bf0:	0801ea70 	.word	0x0801ea70

08019bf4 <geometry_msgs__msg__Vector3__get_type_description_sources>:
 8019bf4:	4b09      	ldr	r3, [pc, #36]	@ (8019c1c <geometry_msgs__msg__Vector3__get_type_description_sources+0x28>)
 8019bf6:	781a      	ldrb	r2, [r3, #0]
 8019bf8:	b96a      	cbnz	r2, 8019c16 <geometry_msgs__msg__Vector3__get_type_description_sources+0x22>
 8019bfa:	b430      	push	{r4, r5}
 8019bfc:	4d08      	ldr	r5, [pc, #32]	@ (8019c20 <geometry_msgs__msg__Vector3__get_type_description_sources+0x2c>)
 8019bfe:	4c09      	ldr	r4, [pc, #36]	@ (8019c24 <geometry_msgs__msg__Vector3__get_type_description_sources+0x30>)
 8019c00:	2201      	movs	r2, #1
 8019c02:	701a      	strb	r2, [r3, #0]
 8019c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019c0c:	682b      	ldr	r3, [r5, #0]
 8019c0e:	4806      	ldr	r0, [pc, #24]	@ (8019c28 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 8019c10:	6023      	str	r3, [r4, #0]
 8019c12:	bc30      	pop	{r4, r5}
 8019c14:	4770      	bx	lr
 8019c16:	4804      	ldr	r0, [pc, #16]	@ (8019c28 <geometry_msgs__msg__Vector3__get_type_description_sources+0x34>)
 8019c18:	4770      	bx	lr
 8019c1a:	bf00      	nop
 8019c1c:	200128f8 	.word	0x200128f8
 8019c20:	0801ea70 	.word	0x0801ea70
 8019c24:	200128d4 	.word	0x200128d4
 8019c28:	0801ea64 	.word	0x0801ea64

08019c2c <geometry_msgs__msg__Vector3__init>:
 8019c2c:	3800      	subs	r0, #0
 8019c2e:	bf18      	it	ne
 8019c30:	2001      	movne	r0, #1
 8019c32:	4770      	bx	lr

08019c34 <geometry_msgs__msg__Vector3__fini>:
 8019c34:	4770      	bx	lr
 8019c36:	bf00      	nop

08019c38 <ucdr_serialize_string>:
 8019c38:	b538      	push	{r3, r4, r5, lr}
 8019c3a:	4605      	mov	r5, r0
 8019c3c:	4608      	mov	r0, r1
 8019c3e:	460c      	mov	r4, r1
 8019c40:	f7e6 fb46 	bl	80002d0 <strlen>
 8019c44:	4621      	mov	r1, r4
 8019c46:	1c42      	adds	r2, r0, #1
 8019c48:	4628      	mov	r0, r5
 8019c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019c4e:	f7f6 bddd 	b.w	801080c <ucdr_serialize_sequence_char>
 8019c52:	bf00      	nop

08019c54 <ucdr_deserialize_string>:
 8019c54:	b500      	push	{lr}
 8019c56:	b083      	sub	sp, #12
 8019c58:	ab01      	add	r3, sp, #4
 8019c5a:	f7f6 fde9 	bl	8010830 <ucdr_deserialize_sequence_char>
 8019c5e:	b003      	add	sp, #12
 8019c60:	f85d fb04 	ldr.w	pc, [sp], #4

08019c64 <uxr_init_input_best_effort_stream>:
 8019c64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019c68:	8003      	strh	r3, [r0, #0]
 8019c6a:	4770      	bx	lr

08019c6c <uxr_reset_input_best_effort_stream>:
 8019c6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019c70:	8003      	strh	r3, [r0, #0]
 8019c72:	4770      	bx	lr

08019c74 <uxr_receive_best_effort_message>:
 8019c74:	b538      	push	{r3, r4, r5, lr}
 8019c76:	4604      	mov	r4, r0
 8019c78:	8800      	ldrh	r0, [r0, #0]
 8019c7a:	460d      	mov	r5, r1
 8019c7c:	f000 fe5e 	bl	801a93c <uxr_seq_num_cmp>
 8019c80:	4603      	mov	r3, r0
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8019c88:	bfb8      	it	lt
 8019c8a:	8025      	strhlt	r5, [r4, #0]
 8019c8c:	bd38      	pop	{r3, r4, r5, pc}
 8019c8e:	bf00      	nop

08019c90 <on_full_input_buffer>:
 8019c90:	b570      	push	{r4, r5, r6, lr}
 8019c92:	4605      	mov	r5, r0
 8019c94:	460c      	mov	r4, r1
 8019c96:	682b      	ldr	r3, [r5, #0]
 8019c98:	6809      	ldr	r1, [r1, #0]
 8019c9a:	8920      	ldrh	r0, [r4, #8]
 8019c9c:	6862      	ldr	r2, [r4, #4]
 8019c9e:	fbb2 f2f0 	udiv	r2, r2, r0
 8019ca2:	1a5b      	subs	r3, r3, r1
 8019ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ca8:	3301      	adds	r3, #1
 8019caa:	b29b      	uxth	r3, r3
 8019cac:	fbb3 f6f0 	udiv	r6, r3, r0
 8019cb0:	fb00 3316 	mls	r3, r0, r6, r3
 8019cb4:	b29b      	uxth	r3, r3
 8019cb6:	fb02 f303 	mul.w	r3, r2, r3
 8019cba:	1d18      	adds	r0, r3, #4
 8019cbc:	4408      	add	r0, r1
 8019cbe:	7d26      	ldrb	r6, [r4, #20]
 8019cc0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019cc4:	b116      	cbz	r6, 8019ccc <on_full_input_buffer+0x3c>
 8019cc6:	2600      	movs	r6, #0
 8019cc8:	f840 6c04 	str.w	r6, [r0, #-4]
 8019ccc:	2a03      	cmp	r2, #3
 8019cce:	d801      	bhi.n	8019cd4 <on_full_input_buffer+0x44>
 8019cd0:	2001      	movs	r0, #1
 8019cd2:	bd70      	pop	{r4, r5, r6, pc}
 8019cd4:	3308      	adds	r3, #8
 8019cd6:	4419      	add	r1, r3
 8019cd8:	4628      	mov	r0, r5
 8019cda:	692b      	ldr	r3, [r5, #16]
 8019cdc:	3a04      	subs	r2, #4
 8019cde:	f7f6 fd1d 	bl	801071c <ucdr_init_buffer_origin>
 8019ce2:	4628      	mov	r0, r5
 8019ce4:	4902      	ldr	r1, [pc, #8]	@ (8019cf0 <on_full_input_buffer+0x60>)
 8019ce6:	4622      	mov	r2, r4
 8019ce8:	f7f6 fcf4 	bl	80106d4 <ucdr_set_on_full_buffer_callback>
 8019cec:	2000      	movs	r0, #0
 8019cee:	bd70      	pop	{r4, r5, r6, pc}
 8019cf0:	08019c91 	.word	0x08019c91

08019cf4 <uxr_init_input_reliable_stream>:
 8019cf4:	b500      	push	{lr}
 8019cf6:	e9c0 1200 	strd	r1, r2, [r0]
 8019cfa:	f04f 0e00 	mov.w	lr, #0
 8019cfe:	9a01      	ldr	r2, [sp, #4]
 8019d00:	8103      	strh	r3, [r0, #8]
 8019d02:	6102      	str	r2, [r0, #16]
 8019d04:	f880 e014 	strb.w	lr, [r0, #20]
 8019d08:	b1d3      	cbz	r3, 8019d40 <uxr_init_input_reliable_stream+0x4c>
 8019d0a:	f8c1 e000 	str.w	lr, [r1]
 8019d0e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019d12:	f1bc 0f01 	cmp.w	ip, #1
 8019d16:	d913      	bls.n	8019d40 <uxr_init_input_reliable_stream+0x4c>
 8019d18:	2301      	movs	r3, #1
 8019d1a:	fbb3 f1fc 	udiv	r1, r3, ip
 8019d1e:	fb0c 3111 	mls	r1, ip, r1, r3
 8019d22:	b289      	uxth	r1, r1
 8019d24:	6842      	ldr	r2, [r0, #4]
 8019d26:	fbb2 f2fc 	udiv	r2, r2, ip
 8019d2a:	fb01 f202 	mul.w	r2, r1, r2
 8019d2e:	6801      	ldr	r1, [r0, #0]
 8019d30:	f841 e002 	str.w	lr, [r1, r2]
 8019d34:	3301      	adds	r3, #1
 8019d36:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019d3a:	b29b      	uxth	r3, r3
 8019d3c:	459c      	cmp	ip, r3
 8019d3e:	d8ec      	bhi.n	8019d1a <uxr_init_input_reliable_stream+0x26>
 8019d40:	f04f 33ff 	mov.w	r3, #4294967295
 8019d44:	60c3      	str	r3, [r0, #12]
 8019d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d4a:	bf00      	nop

08019d4c <uxr_reset_input_reliable_stream>:
 8019d4c:	8901      	ldrh	r1, [r0, #8]
 8019d4e:	b1e9      	cbz	r1, 8019d8c <uxr_reset_input_reliable_stream+0x40>
 8019d50:	f04f 0c00 	mov.w	ip, #0
 8019d54:	b500      	push	{lr}
 8019d56:	4663      	mov	r3, ip
 8019d58:	46e6      	mov	lr, ip
 8019d5a:	fbb3 f2f1 	udiv	r2, r3, r1
 8019d5e:	fb01 3312 	mls	r3, r1, r2, r3
 8019d62:	b29b      	uxth	r3, r3
 8019d64:	6842      	ldr	r2, [r0, #4]
 8019d66:	fbb2 f2f1 	udiv	r2, r2, r1
 8019d6a:	fb03 f202 	mul.w	r2, r3, r2
 8019d6e:	6803      	ldr	r3, [r0, #0]
 8019d70:	f843 e002 	str.w	lr, [r3, r2]
 8019d74:	f10c 0c01 	add.w	ip, ip, #1
 8019d78:	8901      	ldrh	r1, [r0, #8]
 8019d7a:	fa1f f38c 	uxth.w	r3, ip
 8019d7e:	4299      	cmp	r1, r3
 8019d80:	d8eb      	bhi.n	8019d5a <uxr_reset_input_reliable_stream+0xe>
 8019d82:	f04f 33ff 	mov.w	r3, #4294967295
 8019d86:	60c3      	str	r3, [r0, #12]
 8019d88:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019d90:	60c3      	str	r3, [r0, #12]
 8019d92:	4770      	bx	lr

08019d94 <uxr_receive_reliable_message>:
 8019d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d98:	4604      	mov	r4, r0
 8019d9a:	460d      	mov	r5, r1
 8019d9c:	8901      	ldrh	r1, [r0, #8]
 8019d9e:	8980      	ldrh	r0, [r0, #12]
 8019da0:	4690      	mov	r8, r2
 8019da2:	461f      	mov	r7, r3
 8019da4:	f000 fdc2 	bl	801a92c <uxr_seq_num_add>
 8019da8:	4629      	mov	r1, r5
 8019daa:	4606      	mov	r6, r0
 8019dac:	89a0      	ldrh	r0, [r4, #12]
 8019dae:	f000 fdc5 	bl	801a93c <uxr_seq_num_cmp>
 8019db2:	2800      	cmp	r0, #0
 8019db4:	db0a      	blt.n	8019dcc <uxr_receive_reliable_message+0x38>
 8019db6:	2600      	movs	r6, #0
 8019db8:	89e0      	ldrh	r0, [r4, #14]
 8019dba:	4629      	mov	r1, r5
 8019dbc:	f000 fdbe 	bl	801a93c <uxr_seq_num_cmp>
 8019dc0:	2800      	cmp	r0, #0
 8019dc2:	bfb8      	it	lt
 8019dc4:	81e5      	strhlt	r5, [r4, #14]
 8019dc6:	4630      	mov	r0, r6
 8019dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dcc:	4630      	mov	r0, r6
 8019dce:	4629      	mov	r1, r5
 8019dd0:	f000 fdb4 	bl	801a93c <uxr_seq_num_cmp>
 8019dd4:	2800      	cmp	r0, #0
 8019dd6:	dbee      	blt.n	8019db6 <uxr_receive_reliable_message+0x22>
 8019dd8:	6923      	ldr	r3, [r4, #16]
 8019dda:	4640      	mov	r0, r8
 8019ddc:	4798      	blx	r3
 8019dde:	2101      	movs	r1, #1
 8019de0:	4606      	mov	r6, r0
 8019de2:	89a0      	ldrh	r0, [r4, #12]
 8019de4:	f000 fda2 	bl	801a92c <uxr_seq_num_add>
 8019de8:	b90e      	cbnz	r6, 8019dee <uxr_receive_reliable_message+0x5a>
 8019dea:	4285      	cmp	r5, r0
 8019dec:	d046      	beq.n	8019e7c <uxr_receive_reliable_message+0xe8>
 8019dee:	8921      	ldrh	r1, [r4, #8]
 8019df0:	fbb5 f2f1 	udiv	r2, r5, r1
 8019df4:	fb01 5212 	mls	r2, r1, r2, r5
 8019df8:	b292      	uxth	r2, r2
 8019dfa:	6863      	ldr	r3, [r4, #4]
 8019dfc:	6820      	ldr	r0, [r4, #0]
 8019dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e02:	fb02 f303 	mul.w	r3, r2, r3
 8019e06:	3304      	adds	r3, #4
 8019e08:	4418      	add	r0, r3
 8019e0a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d1d1      	bne.n	8019db6 <uxr_receive_reliable_message+0x22>
 8019e12:	4641      	mov	r1, r8
 8019e14:	463a      	mov	r2, r7
 8019e16:	f002 fa22 	bl	801c25e <memcpy>
 8019e1a:	8921      	ldrh	r1, [r4, #8]
 8019e1c:	fbb5 f2f1 	udiv	r2, r5, r1
 8019e20:	fb01 5212 	mls	r2, r1, r2, r5
 8019e24:	b292      	uxth	r2, r2
 8019e26:	6863      	ldr	r3, [r4, #4]
 8019e28:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e2c:	fb02 f303 	mul.w	r3, r2, r3
 8019e30:	6822      	ldr	r2, [r4, #0]
 8019e32:	50d7      	str	r7, [r2, r3]
 8019e34:	9a06      	ldr	r2, [sp, #24]
 8019e36:	2301      	movs	r3, #1
 8019e38:	7013      	strb	r3, [r2, #0]
 8019e3a:	2e00      	cmp	r6, #0
 8019e3c:	d0bb      	beq.n	8019db6 <uxr_receive_reliable_message+0x22>
 8019e3e:	89a6      	ldrh	r6, [r4, #12]
 8019e40:	2101      	movs	r1, #1
 8019e42:	4630      	mov	r0, r6
 8019e44:	f000 fd72 	bl	801a92c <uxr_seq_num_add>
 8019e48:	8921      	ldrh	r1, [r4, #8]
 8019e4a:	fbb0 f2f1 	udiv	r2, r0, r1
 8019e4e:	fb01 0212 	mls	r2, r1, r2, r0
 8019e52:	b292      	uxth	r2, r2
 8019e54:	6863      	ldr	r3, [r4, #4]
 8019e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e5a:	4606      	mov	r6, r0
 8019e5c:	fb02 f303 	mul.w	r3, r2, r3
 8019e60:	6820      	ldr	r0, [r4, #0]
 8019e62:	3304      	adds	r3, #4
 8019e64:	4418      	add	r0, r3
 8019e66:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d0a3      	beq.n	8019db6 <uxr_receive_reliable_message+0x22>
 8019e6e:	6923      	ldr	r3, [r4, #16]
 8019e70:	4798      	blx	r3
 8019e72:	2802      	cmp	r0, #2
 8019e74:	d005      	beq.n	8019e82 <uxr_receive_reliable_message+0xee>
 8019e76:	2801      	cmp	r0, #1
 8019e78:	d0e2      	beq.n	8019e40 <uxr_receive_reliable_message+0xac>
 8019e7a:	e79c      	b.n	8019db6 <uxr_receive_reliable_message+0x22>
 8019e7c:	9b06      	ldr	r3, [sp, #24]
 8019e7e:	81a5      	strh	r5, [r4, #12]
 8019e80:	701e      	strb	r6, [r3, #0]
 8019e82:	2601      	movs	r6, #1
 8019e84:	e798      	b.n	8019db8 <uxr_receive_reliable_message+0x24>
 8019e86:	bf00      	nop

08019e88 <uxr_next_input_reliable_buffer_available>:
 8019e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e8c:	4604      	mov	r4, r0
 8019e8e:	460f      	mov	r7, r1
 8019e90:	8980      	ldrh	r0, [r0, #12]
 8019e92:	2101      	movs	r1, #1
 8019e94:	4690      	mov	r8, r2
 8019e96:	f000 fd49 	bl	801a92c <uxr_seq_num_add>
 8019e9a:	8921      	ldrh	r1, [r4, #8]
 8019e9c:	fbb0 f2f1 	udiv	r2, r0, r1
 8019ea0:	fb01 0212 	mls	r2, r1, r2, r0
 8019ea4:	b292      	uxth	r2, r2
 8019ea6:	6863      	ldr	r3, [r4, #4]
 8019ea8:	6826      	ldr	r6, [r4, #0]
 8019eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8019eae:	fb02 f303 	mul.w	r3, r2, r3
 8019eb2:	3304      	adds	r3, #4
 8019eb4:	441e      	add	r6, r3
 8019eb6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8019eba:	f1b9 0f00 	cmp.w	r9, #0
 8019ebe:	d023      	beq.n	8019f08 <uxr_next_input_reliable_buffer_available+0x80>
 8019ec0:	6923      	ldr	r3, [r4, #16]
 8019ec2:	4605      	mov	r5, r0
 8019ec4:	4630      	mov	r0, r6
 8019ec6:	4798      	blx	r3
 8019ec8:	4682      	mov	sl, r0
 8019eca:	b300      	cbz	r0, 8019f0e <uxr_next_input_reliable_buffer_available+0x86>
 8019ecc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019ed0:	2101      	movs	r1, #1
 8019ed2:	4650      	mov	r0, sl
 8019ed4:	f000 fd2a 	bl	801a92c <uxr_seq_num_add>
 8019ed8:	8921      	ldrh	r1, [r4, #8]
 8019eda:	fbb0 f2f1 	udiv	r2, r0, r1
 8019ede:	4682      	mov	sl, r0
 8019ee0:	fb01 0212 	mls	r2, r1, r2, r0
 8019ee4:	e9d4 0300 	ldrd	r0, r3, [r4]
 8019ee8:	b292      	uxth	r2, r2
 8019eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8019eee:	fb02 f303 	mul.w	r3, r2, r3
 8019ef2:	3304      	adds	r3, #4
 8019ef4:	4418      	add	r0, r3
 8019ef6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019efa:	b12b      	cbz	r3, 8019f08 <uxr_next_input_reliable_buffer_available+0x80>
 8019efc:	6923      	ldr	r3, [r4, #16]
 8019efe:	4798      	blx	r3
 8019f00:	2802      	cmp	r0, #2
 8019f02:	d01b      	beq.n	8019f3c <uxr_next_input_reliable_buffer_available+0xb4>
 8019f04:	2801      	cmp	r0, #1
 8019f06:	d0e3      	beq.n	8019ed0 <uxr_next_input_reliable_buffer_available+0x48>
 8019f08:	2000      	movs	r0, #0
 8019f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f0e:	464a      	mov	r2, r9
 8019f10:	4631      	mov	r1, r6
 8019f12:	4638      	mov	r0, r7
 8019f14:	f7f6 fc0a 	bl	801072c <ucdr_init_buffer>
 8019f18:	8921      	ldrh	r1, [r4, #8]
 8019f1a:	fbb5 f2f1 	udiv	r2, r5, r1
 8019f1e:	fb01 5212 	mls	r2, r1, r2, r5
 8019f22:	b292      	uxth	r2, r2
 8019f24:	6863      	ldr	r3, [r4, #4]
 8019f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8019f2a:	fb02 f303 	mul.w	r3, r2, r3
 8019f2e:	6822      	ldr	r2, [r4, #0]
 8019f30:	f842 a003 	str.w	sl, [r2, r3]
 8019f34:	81a5      	strh	r5, [r4, #12]
 8019f36:	2001      	movs	r0, #1
 8019f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f3c:	eb06 0108 	add.w	r1, r6, r8
 8019f40:	8926      	ldrh	r6, [r4, #8]
 8019f42:	fbb5 f0f6 	udiv	r0, r5, r6
 8019f46:	fb06 5010 	mls	r0, r6, r0, r5
 8019f4a:	b280      	uxth	r0, r0
 8019f4c:	6863      	ldr	r3, [r4, #4]
 8019f4e:	fbb3 f3f6 	udiv	r3, r3, r6
 8019f52:	fb00 f303 	mul.w	r3, r0, r3
 8019f56:	6820      	ldr	r0, [r4, #0]
 8019f58:	2500      	movs	r5, #0
 8019f5a:	50c5      	str	r5, [r0, r3]
 8019f5c:	eba9 0208 	sub.w	r2, r9, r8
 8019f60:	4638      	mov	r0, r7
 8019f62:	f7f6 fbe3 	bl	801072c <ucdr_init_buffer>
 8019f66:	4903      	ldr	r1, [pc, #12]	@ (8019f74 <uxr_next_input_reliable_buffer_available+0xec>)
 8019f68:	4622      	mov	r2, r4
 8019f6a:	4638      	mov	r0, r7
 8019f6c:	f7f6 fbb2 	bl	80106d4 <ucdr_set_on_full_buffer_callback>
 8019f70:	4655      	mov	r5, sl
 8019f72:	e7df      	b.n	8019f34 <uxr_next_input_reliable_buffer_available+0xac>
 8019f74:	08019c91 	.word	0x08019c91

08019f78 <uxr_process_heartbeat>:
 8019f78:	b538      	push	{r3, r4, r5, lr}
 8019f7a:	4611      	mov	r1, r2
 8019f7c:	4604      	mov	r4, r0
 8019f7e:	89c0      	ldrh	r0, [r0, #14]
 8019f80:	4615      	mov	r5, r2
 8019f82:	f000 fcdb 	bl	801a93c <uxr_seq_num_cmp>
 8019f86:	2800      	cmp	r0, #0
 8019f88:	bfb8      	it	lt
 8019f8a:	81e5      	strhlt	r5, [r4, #14]
 8019f8c:	bd38      	pop	{r3, r4, r5, pc}
 8019f8e:	bf00      	nop

08019f90 <uxr_compute_acknack>:
 8019f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f94:	8903      	ldrh	r3, [r0, #8]
 8019f96:	8985      	ldrh	r5, [r0, #12]
 8019f98:	4604      	mov	r4, r0
 8019f9a:	460e      	mov	r6, r1
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d048      	beq.n	801a032 <uxr_compute_acknack+0xa2>
 8019fa0:	4628      	mov	r0, r5
 8019fa2:	2701      	movs	r7, #1
 8019fa4:	e003      	b.n	8019fae <uxr_compute_acknack+0x1e>
 8019fa6:	4567      	cmp	r7, ip
 8019fa8:	d243      	bcs.n	801a032 <uxr_compute_acknack+0xa2>
 8019faa:	89a0      	ldrh	r0, [r4, #12]
 8019fac:	3701      	adds	r7, #1
 8019fae:	b2b9      	uxth	r1, r7
 8019fb0:	f000 fcbc 	bl	801a92c <uxr_seq_num_add>
 8019fb4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019fb8:	fbb0 f2fc 	udiv	r2, r0, ip
 8019fbc:	e9d4 1300 	ldrd	r1, r3, [r4]
 8019fc0:	fb0c 0212 	mls	r2, ip, r2, r0
 8019fc4:	b292      	uxth	r2, r2
 8019fc6:	fbb3 f3fc 	udiv	r3, r3, ip
 8019fca:	fb02 f303 	mul.w	r3, r2, r3
 8019fce:	58cb      	ldr	r3, [r1, r3]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d1e8      	bne.n	8019fa6 <uxr_compute_acknack+0x16>
 8019fd4:	8030      	strh	r0, [r6, #0]
 8019fd6:	2101      	movs	r1, #1
 8019fd8:	89e5      	ldrh	r5, [r4, #14]
 8019fda:	f000 fcab 	bl	801a934 <uxr_seq_num_sub>
 8019fde:	4601      	mov	r1, r0
 8019fe0:	4628      	mov	r0, r5
 8019fe2:	f000 fca7 	bl	801a934 <uxr_seq_num_sub>
 8019fe6:	4605      	mov	r5, r0
 8019fe8:	4607      	mov	r7, r0
 8019fea:	b1f8      	cbz	r0, 801a02c <uxr_compute_acknack+0x9c>
 8019fec:	f04f 0900 	mov.w	r9, #0
 8019ff0:	464d      	mov	r5, r9
 8019ff2:	f04f 0801 	mov.w	r8, #1
 8019ff6:	fa1f f189 	uxth.w	r1, r9
 8019ffa:	8830      	ldrh	r0, [r6, #0]
 8019ffc:	f000 fc96 	bl	801a92c <uxr_seq_num_add>
 801a000:	8921      	ldrh	r1, [r4, #8]
 801a002:	fbb0 f3f1 	udiv	r3, r0, r1
 801a006:	fb03 0011 	mls	r0, r3, r1, r0
 801a00a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a00e:	b280      	uxth	r0, r0
 801a010:	fbb3 f3f1 	udiv	r3, r3, r1
 801a014:	fb00 f303 	mul.w	r3, r0, r3
 801a018:	fa08 f109 	lsl.w	r1, r8, r9
 801a01c:	58d3      	ldr	r3, [r2, r3]
 801a01e:	f109 0901 	add.w	r9, r9, #1
 801a022:	b90b      	cbnz	r3, 801a028 <uxr_compute_acknack+0x98>
 801a024:	4329      	orrs	r1, r5
 801a026:	b28d      	uxth	r5, r1
 801a028:	454f      	cmp	r7, r9
 801a02a:	d1e4      	bne.n	8019ff6 <uxr_compute_acknack+0x66>
 801a02c:	4628      	mov	r0, r5
 801a02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a032:	4628      	mov	r0, r5
 801a034:	e7ce      	b.n	8019fd4 <uxr_compute_acknack+0x44>
 801a036:	bf00      	nop

0801a038 <uxr_init_output_best_effort_stream>:
 801a038:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a03c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a040:	6001      	str	r1, [r0, #0]
 801a042:	7303      	strb	r3, [r0, #12]
 801a044:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a048:	4770      	bx	lr
 801a04a:	bf00      	nop

0801a04c <uxr_reset_output_best_effort_stream>:
 801a04c:	7b02      	ldrb	r2, [r0, #12]
 801a04e:	6042      	str	r2, [r0, #4]
 801a050:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a054:	81c3      	strh	r3, [r0, #14]
 801a056:	4770      	bx	lr

0801a058 <uxr_prepare_best_effort_buffer_to_write>:
 801a058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a05a:	4604      	mov	r4, r0
 801a05c:	b083      	sub	sp, #12
 801a05e:	6840      	ldr	r0, [r0, #4]
 801a060:	460d      	mov	r5, r1
 801a062:	4616      	mov	r6, r2
 801a064:	f7f8 ff1e 	bl	8012ea4 <uxr_submessage_padding>
 801a068:	6863      	ldr	r3, [r4, #4]
 801a06a:	4418      	add	r0, r3
 801a06c:	68a3      	ldr	r3, [r4, #8]
 801a06e:	1942      	adds	r2, r0, r5
 801a070:	4293      	cmp	r3, r2
 801a072:	bf2c      	ite	cs
 801a074:	2701      	movcs	r7, #1
 801a076:	2700      	movcc	r7, #0
 801a078:	d202      	bcs.n	801a080 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a07a:	4638      	mov	r0, r7
 801a07c:	b003      	add	sp, #12
 801a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a080:	9000      	str	r0, [sp, #0]
 801a082:	6821      	ldr	r1, [r4, #0]
 801a084:	4630      	mov	r0, r6
 801a086:	2300      	movs	r3, #0
 801a088:	f7f6 fb3e 	bl	8010708 <ucdr_init_buffer_origin_offset>
 801a08c:	6863      	ldr	r3, [r4, #4]
 801a08e:	4638      	mov	r0, r7
 801a090:	442b      	add	r3, r5
 801a092:	6063      	str	r3, [r4, #4]
 801a094:	b003      	add	sp, #12
 801a096:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a098 <uxr_prepare_best_effort_buffer_to_send>:
 801a098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a09c:	4604      	mov	r4, r0
 801a09e:	461d      	mov	r5, r3
 801a0a0:	6840      	ldr	r0, [r0, #4]
 801a0a2:	7b23      	ldrb	r3, [r4, #12]
 801a0a4:	4298      	cmp	r0, r3
 801a0a6:	bf8c      	ite	hi
 801a0a8:	2601      	movhi	r6, #1
 801a0aa:	2600      	movls	r6, #0
 801a0ac:	d802      	bhi.n	801a0b4 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a0ae:	4630      	mov	r0, r6
 801a0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0b4:	4688      	mov	r8, r1
 801a0b6:	89e0      	ldrh	r0, [r4, #14]
 801a0b8:	2101      	movs	r1, #1
 801a0ba:	4617      	mov	r7, r2
 801a0bc:	f000 fc36 	bl	801a92c <uxr_seq_num_add>
 801a0c0:	6823      	ldr	r3, [r4, #0]
 801a0c2:	81e0      	strh	r0, [r4, #14]
 801a0c4:	8028      	strh	r0, [r5, #0]
 801a0c6:	f8c8 3000 	str.w	r3, [r8]
 801a0ca:	6863      	ldr	r3, [r4, #4]
 801a0cc:	603b      	str	r3, [r7, #0]
 801a0ce:	7b23      	ldrb	r3, [r4, #12]
 801a0d0:	6063      	str	r3, [r4, #4]
 801a0d2:	4630      	mov	r0, r6
 801a0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a0d8 <on_full_output_buffer>:
 801a0d8:	b538      	push	{r3, r4, r5, lr}
 801a0da:	460c      	mov	r4, r1
 801a0dc:	6803      	ldr	r3, [r0, #0]
 801a0de:	6809      	ldr	r1, [r1, #0]
 801a0e0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a0e4:	6862      	ldr	r2, [r4, #4]
 801a0e6:	fbb2 f2fc 	udiv	r2, r2, ip
 801a0ea:	1a5b      	subs	r3, r3, r1
 801a0ec:	fbb3 f3f2 	udiv	r3, r3, r2
 801a0f0:	3301      	adds	r3, #1
 801a0f2:	b29b      	uxth	r3, r3
 801a0f4:	fbb3 fefc 	udiv	lr, r3, ip
 801a0f8:	fb0c 331e 	mls	r3, ip, lr, r3
 801a0fc:	b29b      	uxth	r3, r3
 801a0fe:	fb02 f303 	mul.w	r3, r2, r3
 801a102:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a106:	58ca      	ldr	r2, [r1, r3]
 801a108:	4463      	add	r3, ip
 801a10a:	eba2 020c 	sub.w	r2, r2, ip
 801a10e:	3308      	adds	r3, #8
 801a110:	4605      	mov	r5, r0
 801a112:	4419      	add	r1, r3
 801a114:	3a04      	subs	r2, #4
 801a116:	6903      	ldr	r3, [r0, #16]
 801a118:	f7f6 fb00 	bl	801071c <ucdr_init_buffer_origin>
 801a11c:	4628      	mov	r0, r5
 801a11e:	4903      	ldr	r1, [pc, #12]	@ (801a12c <on_full_output_buffer+0x54>)
 801a120:	4622      	mov	r2, r4
 801a122:	f7f6 fad7 	bl	80106d4 <ucdr_set_on_full_buffer_callback>
 801a126:	2000      	movs	r0, #0
 801a128:	bd38      	pop	{r3, r4, r5, pc}
 801a12a:	bf00      	nop
 801a12c:	0801a0d9 	.word	0x0801a0d9

0801a130 <uxr_init_output_reliable_stream>:
 801a130:	b410      	push	{r4}
 801a132:	f89d c004 	ldrb.w	ip, [sp, #4]
 801a136:	8103      	strh	r3, [r0, #8]
 801a138:	e9c0 1200 	strd	r1, r2, [r0]
 801a13c:	f880 c00c 	strb.w	ip, [r0, #12]
 801a140:	b1d3      	cbz	r3, 801a178 <uxr_init_output_reliable_stream+0x48>
 801a142:	f8c1 c000 	str.w	ip, [r1]
 801a146:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a14a:	f1bc 0f01 	cmp.w	ip, #1
 801a14e:	d913      	bls.n	801a178 <uxr_init_output_reliable_stream+0x48>
 801a150:	2301      	movs	r3, #1
 801a152:	fbb3 f1fc 	udiv	r1, r3, ip
 801a156:	fb0c 3111 	mls	r1, ip, r1, r3
 801a15a:	b289      	uxth	r1, r1
 801a15c:	6842      	ldr	r2, [r0, #4]
 801a15e:	6804      	ldr	r4, [r0, #0]
 801a160:	fbb2 f2fc 	udiv	r2, r2, ip
 801a164:	fb01 f202 	mul.w	r2, r1, r2
 801a168:	7b01      	ldrb	r1, [r0, #12]
 801a16a:	50a1      	str	r1, [r4, r2]
 801a16c:	3301      	adds	r3, #1
 801a16e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a172:	b29b      	uxth	r3, r3
 801a174:	459c      	cmp	ip, r3
 801a176:	d8ec      	bhi.n	801a152 <uxr_init_output_reliable_stream+0x22>
 801a178:	f04f 32ff 	mov.w	r2, #4294967295
 801a17c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a180:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a184:	4905      	ldr	r1, [pc, #20]	@ (801a19c <uxr_init_output_reliable_stream+0x6c>)
 801a186:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a18a:	f8c0 100e 	str.w	r1, [r0, #14]
 801a18e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a192:	2300      	movs	r3, #0
 801a194:	8242      	strh	r2, [r0, #18]
 801a196:	8403      	strh	r3, [r0, #32]
 801a198:	4770      	bx	lr
 801a19a:	bf00      	nop
 801a19c:	ffff0000 	.word	0xffff0000

0801a1a0 <uxr_reset_output_reliable_stream>:
 801a1a0:	8901      	ldrh	r1, [r0, #8]
 801a1a2:	b1b1      	cbz	r1, 801a1d2 <uxr_reset_output_reliable_stream+0x32>
 801a1a4:	f04f 0c00 	mov.w	ip, #0
 801a1a8:	4663      	mov	r3, ip
 801a1aa:	fbb3 f2f1 	udiv	r2, r3, r1
 801a1ae:	fb01 3312 	mls	r3, r1, r2, r3
 801a1b2:	b29b      	uxth	r3, r3
 801a1b4:	6842      	ldr	r2, [r0, #4]
 801a1b6:	fbb2 f2f1 	udiv	r2, r2, r1
 801a1ba:	6801      	ldr	r1, [r0, #0]
 801a1bc:	fb03 f202 	mul.w	r2, r3, r2
 801a1c0:	7b03      	ldrb	r3, [r0, #12]
 801a1c2:	508b      	str	r3, [r1, r2]
 801a1c4:	f10c 0c01 	add.w	ip, ip, #1
 801a1c8:	8901      	ldrh	r1, [r0, #8]
 801a1ca:	fa1f f38c 	uxth.w	r3, ip
 801a1ce:	4299      	cmp	r1, r3
 801a1d0:	d8eb      	bhi.n	801a1aa <uxr_reset_output_reliable_stream+0xa>
 801a1d2:	f04f 32ff 	mov.w	r2, #4294967295
 801a1d6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801a1da:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801a1de:	4904      	ldr	r1, [pc, #16]	@ (801a1f0 <uxr_reset_output_reliable_stream+0x50>)
 801a1e0:	f8c0 100e 	str.w	r1, [r0, #14]
 801a1e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a1e8:	2300      	movs	r3, #0
 801a1ea:	8242      	strh	r2, [r0, #18]
 801a1ec:	8403      	strh	r3, [r0, #32]
 801a1ee:	4770      	bx	lr
 801a1f0:	ffff0000 	.word	0xffff0000

0801a1f4 <uxr_prepare_reliable_buffer_to_write>:
 801a1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1f8:	4604      	mov	r4, r0
 801a1fa:	b091      	sub	sp, #68	@ 0x44
 801a1fc:	8900      	ldrh	r0, [r0, #8]
 801a1fe:	89e7      	ldrh	r7, [r4, #14]
 801a200:	6823      	ldr	r3, [r4, #0]
 801a202:	9204      	str	r2, [sp, #16]
 801a204:	fbb7 f2f0 	udiv	r2, r7, r0
 801a208:	fb00 7212 	mls	r2, r0, r2, r7
 801a20c:	b292      	uxth	r2, r2
 801a20e:	6865      	ldr	r5, [r4, #4]
 801a210:	fbb5 f5f0 	udiv	r5, r5, r0
 801a214:	fb05 3202 	mla	r2, r5, r2, r3
 801a218:	3204      	adds	r2, #4
 801a21a:	f852 ac04 	ldr.w	sl, [r2, #-4]
 801a21e:	f894 b00c 	ldrb.w	fp, [r4, #12]
 801a222:	9203      	str	r2, [sp, #12]
 801a224:	4688      	mov	r8, r1
 801a226:	f1a5 0904 	sub.w	r9, r5, #4
 801a22a:	2800      	cmp	r0, #0
 801a22c:	f000 8143 	beq.w	801a4b6 <uxr_prepare_reliable_buffer_to_write+0x2c2>
 801a230:	2100      	movs	r1, #0
 801a232:	460e      	mov	r6, r1
 801a234:	b28a      	uxth	r2, r1
 801a236:	fbb2 fcf0 	udiv	ip, r2, r0
 801a23a:	fb00 221c 	mls	r2, r0, ip, r2
 801a23e:	b292      	uxth	r2, r2
 801a240:	fb05 f202 	mul.w	r2, r5, r2
 801a244:	3101      	adds	r1, #1
 801a246:	589a      	ldr	r2, [r3, r2]
 801a248:	455a      	cmp	r2, fp
 801a24a:	bf04      	itt	eq
 801a24c:	3601      	addeq	r6, #1
 801a24e:	b2b6      	uxtheq	r6, r6
 801a250:	4281      	cmp	r1, r0
 801a252:	d1ef      	bne.n	801a234 <uxr_prepare_reliable_buffer_to_write+0x40>
 801a254:	4650      	mov	r0, sl
 801a256:	2104      	movs	r1, #4
 801a258:	9605      	str	r6, [sp, #20]
 801a25a:	f7f6 fa6b 	bl	8010734 <ucdr_alignment>
 801a25e:	4482      	add	sl, r0
 801a260:	eb0a 0208 	add.w	r2, sl, r8
 801a264:	454a      	cmp	r2, r9
 801a266:	f240 80ca 	bls.w	801a3fe <uxr_prepare_reliable_buffer_to_write+0x20a>
 801a26a:	7b22      	ldrb	r2, [r4, #12]
 801a26c:	4442      	add	r2, r8
 801a26e:	454a      	cmp	r2, r9
 801a270:	f240 80b2 	bls.w	801a3d8 <uxr_prepare_reliable_buffer_to_write+0x1e4>
 801a274:	f5cb 427f 	rsb	r2, fp, #65280	@ 0xff00
 801a278:	32fc      	adds	r2, #252	@ 0xfc
 801a27a:	fa1f f389 	uxth.w	r3, r9
 801a27e:	441a      	add	r2, r3
 801a280:	b292      	uxth	r2, r2
 801a282:	fb06 fb02 	mul.w	fp, r6, r2
 801a286:	45c3      	cmp	fp, r8
 801a288:	9205      	str	r2, [sp, #20]
 801a28a:	9206      	str	r2, [sp, #24]
 801a28c:	f0c0 80b3 	bcc.w	801a3f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 801a290:	f10a 0204 	add.w	r2, sl, #4
 801a294:	454a      	cmp	r2, r9
 801a296:	f080 80db 	bcs.w	801a450 <uxr_prepare_reliable_buffer_to_write+0x25c>
 801a29a:	f1a3 0b04 	sub.w	fp, r3, #4
 801a29e:	ebab 0b0a 	sub.w	fp, fp, sl
 801a2a2:	9b05      	ldr	r3, [sp, #20]
 801a2a4:	fa1f fb8b 	uxth.w	fp, fp
 801a2a8:	eba8 080b 	sub.w	r8, r8, fp
 801a2ac:	fbb8 fcf3 	udiv	ip, r8, r3
 801a2b0:	fb03 831c 	mls	r3, r3, ip, r8
 801a2b4:	fa1f fc8c 	uxth.w	ip, ip
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	f040 80c1 	bne.w	801a440 <uxr_prepare_reliable_buffer_to_write+0x24c>
 801a2be:	45b4      	cmp	ip, r6
 801a2c0:	f200 8099 	bhi.w	801a3f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 801a2c4:	f10d 0820 	add.w	r8, sp, #32
 801a2c8:	f1bc 0f00 	cmp.w	ip, #0
 801a2cc:	d040      	beq.n	801a350 <uxr_prepare_reliable_buffer_to_write+0x15c>
 801a2ce:	f8cd a01c 	str.w	sl, [sp, #28]
 801a2d2:	2600      	movs	r6, #0
 801a2d4:	f8dd a014 	ldr.w	sl, [sp, #20]
 801a2d8:	9505      	str	r5, [sp, #20]
 801a2da:	f10d 0820 	add.w	r8, sp, #32
 801a2de:	4665      	mov	r5, ip
 801a2e0:	e000      	b.n	801a2e4 <uxr_prepare_reliable_buffer_to_write+0xf0>
 801a2e2:	46d3      	mov	fp, sl
 801a2e4:	8921      	ldrh	r1, [r4, #8]
 801a2e6:	fbb7 f2f1 	udiv	r2, r7, r1
 801a2ea:	fb01 7212 	mls	r2, r1, r2, r7
 801a2ee:	b292      	uxth	r2, r2
 801a2f0:	6863      	ldr	r3, [r4, #4]
 801a2f2:	fbb3 f3f1 	udiv	r3, r3, r1
 801a2f6:	6821      	ldr	r1, [r4, #0]
 801a2f8:	fb02 f303 	mul.w	r3, r2, r3
 801a2fc:	3304      	adds	r3, #4
 801a2fe:	4419      	add	r1, r3
 801a300:	4640      	mov	r0, r8
 801a302:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801a306:	9200      	str	r2, [sp, #0]
 801a308:	2300      	movs	r3, #0
 801a30a:	464a      	mov	r2, r9
 801a30c:	f7f6 f9fc 	bl	8010708 <ucdr_init_buffer_origin_offset>
 801a310:	465a      	mov	r2, fp
 801a312:	2300      	movs	r3, #0
 801a314:	210d      	movs	r1, #13
 801a316:	4640      	mov	r0, r8
 801a318:	f7f8 fd84 	bl	8012e24 <uxr_buffer_submessage_header>
 801a31c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a320:	fbb7 f2fc 	udiv	r2, r7, ip
 801a324:	fb0c 7212 	mls	r2, ip, r2, r7
 801a328:	b292      	uxth	r2, r2
 801a32a:	6863      	ldr	r3, [r4, #4]
 801a32c:	fbb3 f3fc 	udiv	r3, r3, ip
 801a330:	fb02 f303 	mul.w	r3, r2, r3
 801a334:	6822      	ldr	r2, [r4, #0]
 801a336:	4638      	mov	r0, r7
 801a338:	f842 9003 	str.w	r9, [r2, r3]
 801a33c:	2101      	movs	r1, #1
 801a33e:	f000 faf5 	bl	801a92c <uxr_seq_num_add>
 801a342:	3601      	adds	r6, #1
 801a344:	42ae      	cmp	r6, r5
 801a346:	4607      	mov	r7, r0
 801a348:	d1cb      	bne.n	801a2e2 <uxr_prepare_reliable_buffer_to_write+0xee>
 801a34a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a34e:	9d05      	ldr	r5, [sp, #20]
 801a350:	8920      	ldrh	r0, [r4, #8]
 801a352:	fbb7 f1f0 	udiv	r1, r7, r0
 801a356:	fb00 7111 	mls	r1, r0, r1, r7
 801a35a:	b289      	uxth	r1, r1
 801a35c:	6863      	ldr	r3, [r4, #4]
 801a35e:	fbb3 f3f0 	udiv	r3, r3, r0
 801a362:	fb01 f303 	mul.w	r3, r1, r3
 801a366:	6821      	ldr	r1, [r4, #0]
 801a368:	3304      	adds	r3, #4
 801a36a:	4419      	add	r1, r3
 801a36c:	464a      	mov	r2, r9
 801a36e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801a372:	9000      	str	r0, [sp, #0]
 801a374:	2300      	movs	r3, #0
 801a376:	4640      	mov	r0, r8
 801a378:	f7f6 f9c6 	bl	8010708 <ucdr_init_buffer_origin_offset>
 801a37c:	4640      	mov	r0, r8
 801a37e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a382:	2302      	movs	r3, #2
 801a384:	fa1f f288 	uxth.w	r2, r8
 801a388:	210d      	movs	r1, #13
 801a38a:	f7f8 fd4b 	bl	8012e24 <uxr_buffer_submessage_header>
 801a38e:	8926      	ldrh	r6, [r4, #8]
 801a390:	9b03      	ldr	r3, [sp, #12]
 801a392:	7b20      	ldrb	r0, [r4, #12]
 801a394:	f1a5 0208 	sub.w	r2, r5, #8
 801a398:	f10a 0104 	add.w	r1, sl, #4
 801a39c:	fbb7 f5f6 	udiv	r5, r7, r6
 801a3a0:	fb06 7515 	mls	r5, r6, r5, r7
 801a3a4:	440b      	add	r3, r1
 801a3a6:	b2ad      	uxth	r5, r5
 801a3a8:	4619      	mov	r1, r3
 801a3aa:	3004      	adds	r0, #4
 801a3ac:	6863      	ldr	r3, [r4, #4]
 801a3ae:	fbb3 f3f6 	udiv	r3, r3, r6
 801a3b2:	fb05 f303 	mul.w	r3, r5, r3
 801a3b6:	6825      	ldr	r5, [r4, #0]
 801a3b8:	4440      	add	r0, r8
 801a3ba:	50e8      	str	r0, [r5, r3]
 801a3bc:	9d04      	ldr	r5, [sp, #16]
 801a3be:	eba2 020a 	sub.w	r2, r2, sl
 801a3c2:	4628      	mov	r0, r5
 801a3c4:	f7f6 f9b2 	bl	801072c <ucdr_init_buffer>
 801a3c8:	493c      	ldr	r1, [pc, #240]	@ (801a4bc <uxr_prepare_reliable_buffer_to_write+0x2c8>)
 801a3ca:	4622      	mov	r2, r4
 801a3cc:	4628      	mov	r0, r5
 801a3ce:	f7f6 f981 	bl	80106d4 <ucdr_set_on_full_buffer_callback>
 801a3d2:	81e7      	strh	r7, [r4, #14]
 801a3d4:	2001      	movs	r0, #1
 801a3d6:	e00f      	b.n	801a3f8 <uxr_prepare_reliable_buffer_to_write+0x204>
 801a3d8:	2101      	movs	r1, #1
 801a3da:	89e0      	ldrh	r0, [r4, #14]
 801a3dc:	f000 faa6 	bl	801a92c <uxr_seq_num_add>
 801a3e0:	8921      	ldrh	r1, [r4, #8]
 801a3e2:	4605      	mov	r5, r0
 801a3e4:	8a60      	ldrh	r0, [r4, #18]
 801a3e6:	f000 faa1 	bl	801a92c <uxr_seq_num_add>
 801a3ea:	4601      	mov	r1, r0
 801a3ec:	4628      	mov	r0, r5
 801a3ee:	f000 faa5 	bl	801a93c <uxr_seq_num_cmp>
 801a3f2:	2800      	cmp	r0, #0
 801a3f4:	dd45      	ble.n	801a482 <uxr_prepare_reliable_buffer_to_write+0x28e>
 801a3f6:	2000      	movs	r0, #0
 801a3f8:	b011      	add	sp, #68	@ 0x44
 801a3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3fe:	8921      	ldrh	r1, [r4, #8]
 801a400:	8a60      	ldrh	r0, [r4, #18]
 801a402:	9205      	str	r2, [sp, #20]
 801a404:	f000 fa92 	bl	801a92c <uxr_seq_num_add>
 801a408:	4601      	mov	r1, r0
 801a40a:	4638      	mov	r0, r7
 801a40c:	f000 fa96 	bl	801a93c <uxr_seq_num_cmp>
 801a410:	2800      	cmp	r0, #0
 801a412:	9a05      	ldr	r2, [sp, #20]
 801a414:	dcef      	bgt.n	801a3f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 801a416:	8926      	ldrh	r6, [r4, #8]
 801a418:	fbb7 f5f6 	udiv	r5, r7, r6
 801a41c:	fb06 7515 	mls	r5, r6, r5, r7
 801a420:	b2ad      	uxth	r5, r5
 801a422:	6863      	ldr	r3, [r4, #4]
 801a424:	6824      	ldr	r4, [r4, #0]
 801a426:	fbb3 f3f6 	udiv	r3, r3, r6
 801a42a:	fb05 f303 	mul.w	r3, r5, r3
 801a42e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a432:	50e2      	str	r2, [r4, r3]
 801a434:	2300      	movs	r3, #0
 801a436:	f8cd a000 	str.w	sl, [sp]
 801a43a:	f7f6 f965 	bl	8010708 <ucdr_init_buffer_origin_offset>
 801a43e:	e7c9      	b.n	801a3d4 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801a440:	f10c 0c01 	add.w	ip, ip, #1
 801a444:	fa1f fc8c 	uxth.w	ip, ip
 801a448:	45b4      	cmp	ip, r6
 801a44a:	9306      	str	r3, [sp, #24]
 801a44c:	d8d3      	bhi.n	801a3f6 <uxr_prepare_reliable_buffer_to_write+0x202>
 801a44e:	e739      	b.n	801a2c4 <uxr_prepare_reliable_buffer_to_write+0xd0>
 801a450:	4638      	mov	r0, r7
 801a452:	2101      	movs	r1, #1
 801a454:	9307      	str	r3, [sp, #28]
 801a456:	f000 fa69 	bl	801a92c <uxr_seq_num_add>
 801a45a:	8921      	ldrh	r1, [r4, #8]
 801a45c:	6862      	ldr	r2, [r4, #4]
 801a45e:	4607      	mov	r7, r0
 801a460:	fbb0 f0f1 	udiv	r0, r0, r1
 801a464:	fb01 7010 	mls	r0, r1, r0, r7
 801a468:	b280      	uxth	r0, r0
 801a46a:	fbb2 f1f1 	udiv	r1, r2, r1
 801a46e:	6822      	ldr	r2, [r4, #0]
 801a470:	fb00 f101 	mul.w	r1, r0, r1
 801a474:	3104      	adds	r1, #4
 801a476:	1853      	adds	r3, r2, r1
 801a478:	9303      	str	r3, [sp, #12]
 801a47a:	f853 ac04 	ldr.w	sl, [r3, #-4]
 801a47e:	9b07      	ldr	r3, [sp, #28]
 801a480:	e70b      	b.n	801a29a <uxr_prepare_reliable_buffer_to_write+0xa6>
 801a482:	8921      	ldrh	r1, [r4, #8]
 801a484:	fbb5 f2f1 	udiv	r2, r5, r1
 801a488:	fb01 5212 	mls	r2, r1, r2, r5
 801a48c:	b292      	uxth	r2, r2
 801a48e:	6863      	ldr	r3, [r4, #4]
 801a490:	fbb3 f3f1 	udiv	r3, r3, r1
 801a494:	6821      	ldr	r1, [r4, #0]
 801a496:	9804      	ldr	r0, [sp, #16]
 801a498:	fb02 f303 	mul.w	r3, r2, r3
 801a49c:	3304      	adds	r3, #4
 801a49e:	7b22      	ldrb	r2, [r4, #12]
 801a4a0:	4419      	add	r1, r3
 801a4a2:	4442      	add	r2, r8
 801a4a4:	f841 2c04 	str.w	r2, [r1, #-4]
 801a4a8:	7b23      	ldrb	r3, [r4, #12]
 801a4aa:	9300      	str	r3, [sp, #0]
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	f7f6 f92b 	bl	8010708 <ucdr_init_buffer_origin_offset>
 801a4b2:	81e5      	strh	r5, [r4, #14]
 801a4b4:	e78e      	b.n	801a3d4 <uxr_prepare_reliable_buffer_to_write+0x1e0>
 801a4b6:	4606      	mov	r6, r0
 801a4b8:	e6cc      	b.n	801a254 <uxr_prepare_reliable_buffer_to_write+0x60>
 801a4ba:	bf00      	nop
 801a4bc:	0801a0d9 	.word	0x0801a0d9

0801a4c0 <uxr_prepare_next_reliable_buffer_to_send>:
 801a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4c2:	4604      	mov	r4, r0
 801a4c4:	460f      	mov	r7, r1
 801a4c6:	8a00      	ldrh	r0, [r0, #16]
 801a4c8:	2101      	movs	r1, #1
 801a4ca:	4615      	mov	r5, r2
 801a4cc:	461e      	mov	r6, r3
 801a4ce:	f000 fa2d 	bl	801a92c <uxr_seq_num_add>
 801a4d2:	8030      	strh	r0, [r6, #0]
 801a4d4:	8922      	ldrh	r2, [r4, #8]
 801a4d6:	fbb0 f3f2 	udiv	r3, r0, r2
 801a4da:	fb02 0c13 	mls	ip, r2, r3, r0
 801a4de:	fa1f fc8c 	uxth.w	ip, ip
 801a4e2:	6863      	ldr	r3, [r4, #4]
 801a4e4:	fbb3 f3f2 	udiv	r3, r3, r2
 801a4e8:	fb0c fc03 	mul.w	ip, ip, r3
 801a4ec:	6823      	ldr	r3, [r4, #0]
 801a4ee:	89e1      	ldrh	r1, [r4, #14]
 801a4f0:	f10c 0c04 	add.w	ip, ip, #4
 801a4f4:	4463      	add	r3, ip
 801a4f6:	603b      	str	r3, [r7, #0]
 801a4f8:	6823      	ldr	r3, [r4, #0]
 801a4fa:	4463      	add	r3, ip
 801a4fc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a500:	602b      	str	r3, [r5, #0]
 801a502:	f000 fa1b 	bl	801a93c <uxr_seq_num_cmp>
 801a506:	2800      	cmp	r0, #0
 801a508:	dd01      	ble.n	801a50e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a50a:	2000      	movs	r0, #0
 801a50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a50e:	7b23      	ldrb	r3, [r4, #12]
 801a510:	682a      	ldr	r2, [r5, #0]
 801a512:	429a      	cmp	r2, r3
 801a514:	d9f9      	bls.n	801a50a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a516:	8a61      	ldrh	r1, [r4, #18]
 801a518:	8a20      	ldrh	r0, [r4, #16]
 801a51a:	f000 fa0b 	bl	801a934 <uxr_seq_num_sub>
 801a51e:	8923      	ldrh	r3, [r4, #8]
 801a520:	4283      	cmp	r3, r0
 801a522:	d0f2      	beq.n	801a50a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a524:	8830      	ldrh	r0, [r6, #0]
 801a526:	89e3      	ldrh	r3, [r4, #14]
 801a528:	8220      	strh	r0, [r4, #16]
 801a52a:	4298      	cmp	r0, r3
 801a52c:	d001      	beq.n	801a532 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a52e:	2001      	movs	r0, #1
 801a530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a532:	2101      	movs	r1, #1
 801a534:	f000 f9fa 	bl	801a92c <uxr_seq_num_add>
 801a538:	81e0      	strh	r0, [r4, #14]
 801a53a:	e7f8      	b.n	801a52e <uxr_prepare_next_reliable_buffer_to_send+0x6e>

0801a53c <uxr_update_output_stream_heartbeat_timestamp>:
 801a53c:	b570      	push	{r4, r5, r6, lr}
 801a53e:	8a01      	ldrh	r1, [r0, #16]
 801a540:	4604      	mov	r4, r0
 801a542:	8a40      	ldrh	r0, [r0, #18]
 801a544:	4615      	mov	r5, r2
 801a546:	461e      	mov	r6, r3
 801a548:	f000 f9f8 	bl	801a93c <uxr_seq_num_cmp>
 801a54c:	2800      	cmp	r0, #0
 801a54e:	db07      	blt.n	801a560 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a550:	f04f 35ff 	mov.w	r5, #4294967295
 801a554:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801a558:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a55c:	2000      	movs	r0, #0
 801a55e:	bd70      	pop	{r4, r5, r6, pc}
 801a560:	f894 3020 	ldrb.w	r3, [r4, #32]
 801a564:	b953      	cbnz	r3, 801a57c <uxr_update_output_stream_heartbeat_timestamp+0x40>
 801a566:	2301      	movs	r3, #1
 801a568:	f884 3020 	strb.w	r3, [r4, #32]
 801a56c:	3564      	adds	r5, #100	@ 0x64
 801a56e:	f04f 0000 	mov.w	r0, #0
 801a572:	f146 0600 	adc.w	r6, r6, #0
 801a576:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a57a:	bd70      	pop	{r4, r5, r6, pc}
 801a57c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a580:	428d      	cmp	r5, r1
 801a582:	eb76 0202 	sbcs.w	r2, r6, r2
 801a586:	dbf1      	blt.n	801a56c <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a588:	3301      	adds	r3, #1
 801a58a:	3564      	adds	r5, #100	@ 0x64
 801a58c:	f884 3020 	strb.w	r3, [r4, #32]
 801a590:	f04f 0001 	mov.w	r0, #1
 801a594:	f146 0600 	adc.w	r6, r6, #0
 801a598:	e7ed      	b.n	801a576 <uxr_update_output_stream_heartbeat_timestamp+0x3a>
 801a59a:	bf00      	nop

0801a59c <uxr_begin_output_nack_buffer_it>:
 801a59c:	8a40      	ldrh	r0, [r0, #18]
 801a59e:	4770      	bx	lr

0801a5a0 <uxr_next_reliable_nack_buffer_to_send>:
 801a5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5a4:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801a5a8:	f1b8 0f00 	cmp.w	r8, #0
 801a5ac:	d104      	bne.n	801a5b8 <uxr_next_reliable_nack_buffer_to_send+0x18>
 801a5ae:	f04f 0800 	mov.w	r8, #0
 801a5b2:	4640      	mov	r0, r8
 801a5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5b8:	4604      	mov	r4, r0
 801a5ba:	460e      	mov	r6, r1
 801a5bc:	8818      	ldrh	r0, [r3, #0]
 801a5be:	4617      	mov	r7, r2
 801a5c0:	461d      	mov	r5, r3
 801a5c2:	e019      	b.n	801a5f8 <uxr_next_reliable_nack_buffer_to_send+0x58>
 801a5c4:	8921      	ldrh	r1, [r4, #8]
 801a5c6:	8828      	ldrh	r0, [r5, #0]
 801a5c8:	fbb0 fcf1 	udiv	ip, r0, r1
 801a5cc:	e9d4 3200 	ldrd	r3, r2, [r4]
 801a5d0:	fb01 0c1c 	mls	ip, r1, ip, r0
 801a5d4:	fa1f fc8c 	uxth.w	ip, ip
 801a5d8:	fbb2 f2f1 	udiv	r2, r2, r1
 801a5dc:	fb02 fc0c 	mul.w	ip, r2, ip
 801a5e0:	f10c 0c04 	add.w	ip, ip, #4
 801a5e4:	4463      	add	r3, ip
 801a5e6:	6033      	str	r3, [r6, #0]
 801a5e8:	6823      	ldr	r3, [r4, #0]
 801a5ea:	4463      	add	r3, ip
 801a5ec:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a5f0:	603b      	str	r3, [r7, #0]
 801a5f2:	7b22      	ldrb	r2, [r4, #12]
 801a5f4:	429a      	cmp	r2, r3
 801a5f6:	d1dc      	bne.n	801a5b2 <uxr_next_reliable_nack_buffer_to_send+0x12>
 801a5f8:	2101      	movs	r1, #1
 801a5fa:	f000 f997 	bl	801a92c <uxr_seq_num_add>
 801a5fe:	8028      	strh	r0, [r5, #0]
 801a600:	8a21      	ldrh	r1, [r4, #16]
 801a602:	f000 f99b 	bl	801a93c <uxr_seq_num_cmp>
 801a606:	2800      	cmp	r0, #0
 801a608:	dddc      	ble.n	801a5c4 <uxr_next_reliable_nack_buffer_to_send+0x24>
 801a60a:	2300      	movs	r3, #0
 801a60c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
 801a610:	e7cd      	b.n	801a5ae <uxr_next_reliable_nack_buffer_to_send+0xe>
 801a612:	bf00      	nop

0801a614 <uxr_process_acknack>:
 801a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a616:	4604      	mov	r4, r0
 801a618:	460e      	mov	r6, r1
 801a61a:	4610      	mov	r0, r2
 801a61c:	2101      	movs	r1, #1
 801a61e:	f000 f989 	bl	801a934 <uxr_seq_num_sub>
 801a622:	8a61      	ldrh	r1, [r4, #18]
 801a624:	f000 f986 	bl	801a934 <uxr_seq_num_sub>
 801a628:	b1c0      	cbz	r0, 801a65c <uxr_process_acknack+0x48>
 801a62a:	4605      	mov	r5, r0
 801a62c:	2700      	movs	r7, #0
 801a62e:	2101      	movs	r1, #1
 801a630:	8a60      	ldrh	r0, [r4, #18]
 801a632:	f000 f97b 	bl	801a92c <uxr_seq_num_add>
 801a636:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a63a:	fbb0 f1fc 	udiv	r1, r0, ip
 801a63e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a642:	fb0c 0111 	mls	r1, ip, r1, r0
 801a646:	b289      	uxth	r1, r1
 801a648:	3701      	adds	r7, #1
 801a64a:	fbb3 f3fc 	udiv	r3, r3, ip
 801a64e:	fb01 f303 	mul.w	r3, r1, r3
 801a652:	42bd      	cmp	r5, r7
 801a654:	7b21      	ldrb	r1, [r4, #12]
 801a656:	8260      	strh	r0, [r4, #18]
 801a658:	50d1      	str	r1, [r2, r3]
 801a65a:	d1e8      	bne.n	801a62e <uxr_process_acknack+0x1a>
 801a65c:	3e00      	subs	r6, #0
 801a65e:	f04f 0300 	mov.w	r3, #0
 801a662:	bf18      	it	ne
 801a664:	2601      	movne	r6, #1
 801a666:	f884 3020 	strb.w	r3, [r4, #32]
 801a66a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801a66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a670 <uxr_is_output_up_to_date>:
 801a670:	8a01      	ldrh	r1, [r0, #16]
 801a672:	8a40      	ldrh	r0, [r0, #18]
 801a674:	b508      	push	{r3, lr}
 801a676:	f000 f961 	bl	801a93c <uxr_seq_num_cmp>
 801a67a:	fab0 f080 	clz	r0, r0
 801a67e:	0940      	lsrs	r0, r0, #5
 801a680:	bd08      	pop	{r3, pc}
 801a682:	bf00      	nop

0801a684 <get_available_free_slots>:
 801a684:	8901      	ldrh	r1, [r0, #8]
 801a686:	b1c1      	cbz	r1, 801a6ba <get_available_free_slots+0x36>
 801a688:	b530      	push	{r4, r5, lr}
 801a68a:	2200      	movs	r2, #0
 801a68c:	6843      	ldr	r3, [r0, #4]
 801a68e:	6805      	ldr	r5, [r0, #0]
 801a690:	7b04      	ldrb	r4, [r0, #12]
 801a692:	fbb3 fef1 	udiv	lr, r3, r1
 801a696:	4610      	mov	r0, r2
 801a698:	b293      	uxth	r3, r2
 801a69a:	fbb3 fcf1 	udiv	ip, r3, r1
 801a69e:	fb01 331c 	mls	r3, r1, ip, r3
 801a6a2:	b29b      	uxth	r3, r3
 801a6a4:	fb0e f303 	mul.w	r3, lr, r3
 801a6a8:	3201      	adds	r2, #1
 801a6aa:	58eb      	ldr	r3, [r5, r3]
 801a6ac:	429c      	cmp	r4, r3
 801a6ae:	bf04      	itt	eq
 801a6b0:	3001      	addeq	r0, #1
 801a6b2:	b280      	uxtheq	r0, r0
 801a6b4:	4291      	cmp	r1, r2
 801a6b6:	d1ef      	bne.n	801a698 <get_available_free_slots+0x14>
 801a6b8:	bd30      	pop	{r4, r5, pc}
 801a6ba:	4608      	mov	r0, r1
 801a6bc:	4770      	bx	lr
 801a6be:	bf00      	nop

0801a6c0 <uxr_buffer_request_data>:
 801a6c0:	b530      	push	{r4, r5, lr}
 801a6c2:	b095      	sub	sp, #84	@ 0x54
 801a6c4:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801a6c8:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801a6ca:	f88d 301c 	strb.w	r3, [sp, #28]
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	2d00      	cmp	r5, #0
 801a6d2:	bf14      	ite	ne
 801a6d4:	2101      	movne	r1, #1
 801a6d6:	4611      	moveq	r1, r2
 801a6d8:	4604      	mov	r4, r0
 801a6da:	f88d 201d 	strb.w	r2, [sp, #29]
 801a6de:	f88d 201e 	strb.w	r2, [sp, #30]
 801a6e2:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801a6e6:	d021      	beq.n	801a72c <uxr_buffer_request_data+0x6c>
 801a6e8:	682a      	ldr	r2, [r5, #0]
 801a6ea:	686b      	ldr	r3, [r5, #4]
 801a6ec:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801a6f0:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801a6f4:	2210      	movs	r2, #16
 801a6f6:	2308      	movs	r3, #8
 801a6f8:	2100      	movs	r1, #0
 801a6fa:	e9cd 3100 	strd	r3, r1, [sp]
 801a6fe:	4620      	mov	r0, r4
 801a700:	9905      	ldr	r1, [sp, #20]
 801a702:	ab0c      	add	r3, sp, #48	@ 0x30
 801a704:	f7f7 fca4 	bl	8012050 <uxr_prepare_stream_to_write_submessage>
 801a708:	b918      	cbnz	r0, 801a712 <uxr_buffer_request_data+0x52>
 801a70a:	4604      	mov	r4, r0
 801a70c:	4620      	mov	r0, r4
 801a70e:	b015      	add	sp, #84	@ 0x54
 801a710:	bd30      	pop	{r4, r5, pc}
 801a712:	9904      	ldr	r1, [sp, #16]
 801a714:	aa06      	add	r2, sp, #24
 801a716:	4620      	mov	r0, r4
 801a718:	f7f7 fdd4 	bl	80122c4 <uxr_init_base_object_request>
 801a71c:	a906      	add	r1, sp, #24
 801a71e:	4604      	mov	r4, r0
 801a720:	a80c      	add	r0, sp, #48	@ 0x30
 801a722:	f7f9 fd05 	bl	8014130 <uxr_serialize_READ_DATA_Payload>
 801a726:	4620      	mov	r0, r4
 801a728:	b015      	add	sp, #84	@ 0x54
 801a72a:	bd30      	pop	{r4, r5, pc}
 801a72c:	2208      	movs	r2, #8
 801a72e:	e7e2      	b.n	801a6f6 <uxr_buffer_request_data+0x36>

0801a730 <uxr_buffer_cancel_data>:
 801a730:	b510      	push	{r4, lr}
 801a732:	b094      	sub	sp, #80	@ 0x50
 801a734:	2300      	movs	r3, #0
 801a736:	9301      	str	r3, [sp, #4]
 801a738:	9205      	str	r2, [sp, #20]
 801a73a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a73e:	2201      	movs	r2, #1
 801a740:	f88d 301e 	strb.w	r3, [sp, #30]
 801a744:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801a748:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801a74c:	2308      	movs	r3, #8
 801a74e:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801a752:	9300      	str	r3, [sp, #0]
 801a754:	2210      	movs	r2, #16
 801a756:	ab0c      	add	r3, sp, #48	@ 0x30
 801a758:	4604      	mov	r4, r0
 801a75a:	f7f7 fc79 	bl	8012050 <uxr_prepare_stream_to_write_submessage>
 801a75e:	b918      	cbnz	r0, 801a768 <uxr_buffer_cancel_data+0x38>
 801a760:	4604      	mov	r4, r0
 801a762:	4620      	mov	r0, r4
 801a764:	b014      	add	sp, #80	@ 0x50
 801a766:	bd10      	pop	{r4, pc}
 801a768:	9905      	ldr	r1, [sp, #20]
 801a76a:	aa06      	add	r2, sp, #24
 801a76c:	4620      	mov	r0, r4
 801a76e:	f7f7 fda9 	bl	80122c4 <uxr_init_base_object_request>
 801a772:	a906      	add	r1, sp, #24
 801a774:	4604      	mov	r4, r0
 801a776:	a80c      	add	r0, sp, #48	@ 0x30
 801a778:	f7f9 fcda 	bl	8014130 <uxr_serialize_READ_DATA_Payload>
 801a77c:	4620      	mov	r0, r4
 801a77e:	b014      	add	sp, #80	@ 0x50
 801a780:	bd10      	pop	{r4, pc}
 801a782:	bf00      	nop

0801a784 <read_submessage_format>:
 801a784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a788:	b095      	sub	sp, #84	@ 0x54
 801a78a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 801a78e:	b113      	cbz	r3, 801a796 <read_submessage_format+0x12>
 801a790:	b015      	add	sp, #84	@ 0x54
 801a792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a796:	460c      	mov	r4, r1
 801a798:	4616      	mov	r6, r2
 801a79a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801a79e:	461d      	mov	r5, r3
 801a7a0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a7a2:	9304      	str	r3, [sp, #16]
 801a7a4:	1a52      	subs	r2, r2, r1
 801a7a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a7a8:	9305      	str	r3, [sp, #20]
 801a7aa:	4680      	mov	r8, r0
 801a7ac:	a80c      	add	r0, sp, #48	@ 0x30
 801a7ae:	f89d 9076 	ldrb.w	r9, [sp, #118]	@ 0x76
 801a7b2:	f7f5 ffbb 	bl	801072c <ucdr_init_buffer>
 801a7b6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a7ba:	a80c      	add	r0, sp, #48	@ 0x30
 801a7bc:	f7f5 ff8a 	bl	80106d4 <ucdr_set_on_full_buffer_callback>
 801a7c0:	69e3      	ldr	r3, [r4, #28]
 801a7c2:	b35b      	cbz	r3, 801a81c <read_submessage_format+0x98>
 801a7c4:	f1b9 0f07 	cmp.w	r9, #7
 801a7c8:	751d      	strb	r5, [r3, #20]
 801a7ca:	d043      	beq.n	801a854 <read_submessage_format+0xd0>
 801a7cc:	f1b9 0f08 	cmp.w	r9, #8
 801a7d0:	d032      	beq.n	801a838 <read_submessage_format+0xb4>
 801a7d2:	f1b9 0f06 	cmp.w	r9, #6
 801a7d6:	d008      	beq.n	801a7ea <read_submessage_format+0x66>
 801a7d8:	2201      	movs	r2, #1
 801a7da:	751a      	strb	r2, [r3, #20]
 801a7dc:	4631      	mov	r1, r6
 801a7de:	4620      	mov	r0, r4
 801a7e0:	f7f5 fff4 	bl	80107cc <ucdr_advance_buffer>
 801a7e4:	b015      	add	sp, #84	@ 0x54
 801a7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7ea:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801a7ee:	2d00      	cmp	r5, #0
 801a7f0:	d0f2      	beq.n	801a7d8 <read_submessage_format+0x54>
 801a7f2:	ab0c      	add	r3, sp, #48	@ 0x30
 801a7f4:	e9cd 3600 	strd	r3, r6, [sp]
 801a7f8:	2306      	movs	r3, #6
 801a7fa:	f88d 3016 	strb.w	r3, [sp, #22]
 801a7fe:	f8d8 308c 	ldr.w	r3, [r8, #140]	@ 0x8c
 801a802:	9302      	str	r3, [sp, #8]
 801a804:	463a      	mov	r2, r7
 801a806:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801a80a:	4640      	mov	r0, r8
 801a80c:	47a8      	blx	r5
 801a80e:	69e3      	ldr	r3, [r4, #28]
 801a810:	2201      	movs	r2, #1
 801a812:	f888 20b4 	strb.w	r2, [r8, #180]	@ 0xb4
 801a816:	2b00      	cmp	r3, #0
 801a818:	d1de      	bne.n	801a7d8 <read_submessage_format+0x54>
 801a81a:	e7df      	b.n	801a7dc <read_submessage_format+0x58>
 801a81c:	f1b9 0f07 	cmp.w	r9, #7
 801a820:	d032      	beq.n	801a888 <read_submessage_format+0x104>
 801a822:	f1b9 0f08 	cmp.w	r9, #8
 801a826:	d02a      	beq.n	801a87e <read_submessage_format+0xfa>
 801a828:	f1b9 0f06 	cmp.w	r9, #6
 801a82c:	d1d6      	bne.n	801a7dc <read_submessage_format+0x58>
 801a82e:	f8d8 5088 	ldr.w	r5, [r8, #136]	@ 0x88
 801a832:	2d00      	cmp	r5, #0
 801a834:	d1dd      	bne.n	801a7f2 <read_submessage_format+0x6e>
 801a836:	e7d1      	b.n	801a7dc <read_submessage_format+0x58>
 801a838:	f8d8 20a4 	ldr.w	r2, [r8, #164]	@ 0xa4
 801a83c:	2a00      	cmp	r2, #0
 801a83e:	d0cb      	beq.n	801a7d8 <read_submessage_format+0x54>
 801a840:	a906      	add	r1, sp, #24
 801a842:	a80c      	add	r0, sp, #48	@ 0x30
 801a844:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801a846:	f7f9 fd47 	bl	80142d8 <uxr_deserialize_SampleIdentity>
 801a84a:	bb28      	cbnz	r0, 801a898 <read_submessage_format+0x114>
 801a84c:	69e3      	ldr	r3, [r4, #28]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d1c2      	bne.n	801a7d8 <read_submessage_format+0x54>
 801a852:	e7c3      	b.n	801a7dc <read_submessage_format+0x58>
 801a854:	f8d8 20ac 	ldr.w	r2, [r8, #172]	@ 0xac
 801a858:	b16a      	cbz	r2, 801a876 <read_submessage_format+0xf2>
 801a85a:	a906      	add	r1, sp, #24
 801a85c:	a80c      	add	r0, sp, #48	@ 0x30
 801a85e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801a860:	f7f9 fa06 	bl	8013c70 <uxr_deserialize_BaseObjectRequest>
 801a864:	2800      	cmp	r0, #0
 801a866:	d13a      	bne.n	801a8de <read_submessage_format+0x15a>
 801a868:	68a2      	ldr	r2, [r4, #8]
 801a86a:	69e3      	ldr	r3, [r4, #28]
 801a86c:	4432      	add	r2, r6
 801a86e:	60a2      	str	r2, [r4, #8]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d1b1      	bne.n	801a7d8 <read_submessage_format+0x54>
 801a874:	e7b2      	b.n	801a7dc <read_submessage_format+0x58>
 801a876:	68a2      	ldr	r2, [r4, #8]
 801a878:	4432      	add	r2, r6
 801a87a:	60a2      	str	r2, [r4, #8]
 801a87c:	e7ac      	b.n	801a7d8 <read_submessage_format+0x54>
 801a87e:	f8d8 30a4 	ldr.w	r3, [r8, #164]	@ 0xa4
 801a882:	2b00      	cmp	r3, #0
 801a884:	d1dc      	bne.n	801a840 <read_submessage_format+0xbc>
 801a886:	e7a9      	b.n	801a7dc <read_submessage_format+0x58>
 801a888:	f8d8 30ac 	ldr.w	r3, [r8, #172]	@ 0xac
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d1e4      	bne.n	801a85a <read_submessage_format+0xd6>
 801a890:	68a3      	ldr	r3, [r4, #8]
 801a892:	4433      	add	r3, r6
 801a894:	60a3      	str	r3, [r4, #8]
 801a896:	e7a1      	b.n	801a7dc <read_submessage_format+0x58>
 801a898:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801a89c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a89e:	1a52      	subs	r2, r2, r1
 801a8a0:	1aed      	subs	r5, r5, r3
 801a8a2:	a80c      	add	r0, sp, #48	@ 0x30
 801a8a4:	f7f5 ff42 	bl	801072c <ucdr_init_buffer>
 801a8a8:	4435      	add	r5, r6
 801a8aa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a8ae:	a80c      	add	r0, sp, #48	@ 0x30
 801a8b0:	f7f5 ff10 	bl	80106d4 <ucdr_set_on_full_buffer_callback>
 801a8b4:	b2ad      	uxth	r5, r5
 801a8b6:	ab0c      	add	r3, sp, #48	@ 0x30
 801a8b8:	9300      	str	r3, [sp, #0]
 801a8ba:	9501      	str	r5, [sp, #4]
 801a8bc:	2108      	movs	r1, #8
 801a8be:	f88d 1016 	strb.w	r1, [sp, #22]
 801a8c2:	f8d8 10a8 	ldr.w	r1, [r8, #168]	@ 0xa8
 801a8c6:	9102      	str	r1, [sp, #8]
 801a8c8:	ab06      	add	r3, sp, #24
 801a8ca:	f8d8 50a4 	ldr.w	r5, [r8, #164]	@ 0xa4
 801a8ce:	9905      	ldr	r1, [sp, #20]
 801a8d0:	463a      	mov	r2, r7
 801a8d2:	4640      	mov	r0, r8
 801a8d4:	47a8      	blx	r5
 801a8d6:	2301      	movs	r3, #1
 801a8d8:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 801a8dc:	e7b6      	b.n	801a84c <read_submessage_format+0xc8>
 801a8de:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801a8e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a8e4:	1a52      	subs	r2, r2, r1
 801a8e6:	1aed      	subs	r5, r5, r3
 801a8e8:	a80c      	add	r0, sp, #48	@ 0x30
 801a8ea:	f7f5 ff1f 	bl	801072c <ucdr_init_buffer>
 801a8ee:	4435      	add	r5, r6
 801a8f0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a8f4:	a80c      	add	r0, sp, #48	@ 0x30
 801a8f6:	f7f5 feed 	bl	80106d4 <ucdr_set_on_full_buffer_callback>
 801a8fa:	b2ad      	uxth	r5, r5
 801a8fc:	ab0c      	add	r3, sp, #48	@ 0x30
 801a8fe:	9300      	str	r3, [sp, #0]
 801a900:	9501      	str	r5, [sp, #4]
 801a902:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801a906:	2107      	movs	r1, #7
 801a908:	f88d 1016 	strb.w	r1, [sp, #22]
 801a90c:	f8d8 10b0 	ldr.w	r1, [r8, #176]	@ 0xb0
 801a910:	9102      	str	r1, [sp, #8]
 801a912:	ba5b      	rev16	r3, r3
 801a914:	b29b      	uxth	r3, r3
 801a916:	f8d8 50ac 	ldr.w	r5, [r8, #172]	@ 0xac
 801a91a:	9905      	ldr	r1, [sp, #20]
 801a91c:	463a      	mov	r2, r7
 801a91e:	4640      	mov	r0, r8
 801a920:	47a8      	blx	r5
 801a922:	2301      	movs	r3, #1
 801a924:	f888 30b4 	strb.w	r3, [r8, #180]	@ 0xb4
 801a928:	e79e      	b.n	801a868 <read_submessage_format+0xe4>
 801a92a:	bf00      	nop

0801a92c <uxr_seq_num_add>:
 801a92c:	4408      	add	r0, r1
 801a92e:	b280      	uxth	r0, r0
 801a930:	4770      	bx	lr
 801a932:	bf00      	nop

0801a934 <uxr_seq_num_sub>:
 801a934:	1a40      	subs	r0, r0, r1
 801a936:	b280      	uxth	r0, r0
 801a938:	4770      	bx	lr
 801a93a:	bf00      	nop

0801a93c <uxr_seq_num_cmp>:
 801a93c:	4288      	cmp	r0, r1
 801a93e:	d010      	beq.n	801a962 <uxr_seq_num_cmp+0x26>
 801a940:	d207      	bcs.n	801a952 <uxr_seq_num_cmp+0x16>
 801a942:	1a09      	subs	r1, r1, r0
 801a944:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801a948:	bfb4      	ite	lt
 801a94a:	f04f 30ff 	movlt.w	r0, #4294967295
 801a94e:	2001      	movge	r0, #1
 801a950:	4770      	bx	lr
 801a952:	1a41      	subs	r1, r0, r1
 801a954:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 801a958:	bfcc      	ite	gt
 801a95a:	f04f 30ff 	movgt.w	r0, #4294967295
 801a95e:	2001      	movle	r0, #1
 801a960:	4770      	bx	lr
 801a962:	2000      	movs	r0, #0
 801a964:	4770      	bx	lr
 801a966:	bf00      	nop

0801a968 <rcl_get_automatic_discovery_range>:
 801a968:	b530      	push	{r4, r5, lr}
 801a96a:	b083      	sub	sp, #12
 801a96c:	2300      	movs	r3, #0
 801a96e:	9301      	str	r3, [sp, #4]
 801a970:	b1c0      	cbz	r0, 801a9a4 <rcl_get_automatic_discovery_range+0x3c>
 801a972:	4604      	mov	r4, r0
 801a974:	a901      	add	r1, sp, #4
 801a976:	4818      	ldr	r0, [pc, #96]	@ (801a9d8 <rcl_get_automatic_discovery_range+0x70>)
 801a978:	f7fc fd20 	bl	80173bc <rcutils_get_env>
 801a97c:	b110      	cbz	r0, 801a984 <rcl_get_automatic_discovery_range+0x1c>
 801a97e:	2001      	movs	r0, #1
 801a980:	b003      	add	sp, #12
 801a982:	bd30      	pop	{r4, r5, pc}
 801a984:	9d01      	ldr	r5, [sp, #4]
 801a986:	782b      	ldrb	r3, [r5, #0]
 801a988:	b923      	cbnz	r3, 801a994 <rcl_get_automatic_discovery_range+0x2c>
 801a98a:	2303      	movs	r3, #3
 801a98c:	7023      	strb	r3, [r4, #0]
 801a98e:	2000      	movs	r0, #0
 801a990:	b003      	add	sp, #12
 801a992:	bd30      	pop	{r4, r5, pc}
 801a994:	4911      	ldr	r1, [pc, #68]	@ (801a9dc <rcl_get_automatic_discovery_range+0x74>)
 801a996:	4628      	mov	r0, r5
 801a998:	f7e5 fc3a 	bl	8000210 <strcmp>
 801a99c:	b928      	cbnz	r0, 801a9aa <rcl_get_automatic_discovery_range+0x42>
 801a99e:	2301      	movs	r3, #1
 801a9a0:	7023      	strb	r3, [r4, #0]
 801a9a2:	e7f4      	b.n	801a98e <rcl_get_automatic_discovery_range+0x26>
 801a9a4:	200b      	movs	r0, #11
 801a9a6:	b003      	add	sp, #12
 801a9a8:	bd30      	pop	{r4, r5, pc}
 801a9aa:	490d      	ldr	r1, [pc, #52]	@ (801a9e0 <rcl_get_automatic_discovery_range+0x78>)
 801a9ac:	4628      	mov	r0, r5
 801a9ae:	f7e5 fc2f 	bl	8000210 <strcmp>
 801a9b2:	b168      	cbz	r0, 801a9d0 <rcl_get_automatic_discovery_range+0x68>
 801a9b4:	490b      	ldr	r1, [pc, #44]	@ (801a9e4 <rcl_get_automatic_discovery_range+0x7c>)
 801a9b6:	4628      	mov	r0, r5
 801a9b8:	f7e5 fc2a 	bl	8000210 <strcmp>
 801a9bc:	2800      	cmp	r0, #0
 801a9be:	d0e4      	beq.n	801a98a <rcl_get_automatic_discovery_range+0x22>
 801a9c0:	4909      	ldr	r1, [pc, #36]	@ (801a9e8 <rcl_get_automatic_discovery_range+0x80>)
 801a9c2:	4628      	mov	r0, r5
 801a9c4:	f7e5 fc24 	bl	8000210 <strcmp>
 801a9c8:	b910      	cbnz	r0, 801a9d0 <rcl_get_automatic_discovery_range+0x68>
 801a9ca:	2304      	movs	r3, #4
 801a9cc:	7023      	strb	r3, [r4, #0]
 801a9ce:	e7de      	b.n	801a98e <rcl_get_automatic_discovery_range+0x26>
 801a9d0:	2302      	movs	r3, #2
 801a9d2:	7023      	strb	r3, [r4, #0]
 801a9d4:	e7db      	b.n	801a98e <rcl_get_automatic_discovery_range+0x26>
 801a9d6:	bf00      	nop
 801a9d8:	0801de8c 	.word	0x0801de8c
 801a9dc:	0801deac 	.word	0x0801deac
 801a9e0:	0801deb0 	.word	0x0801deb0
 801a9e4:	0801debc 	.word	0x0801debc
 801a9e8:	0801dec4 	.word	0x0801dec4

0801a9ec <rcl_automatic_discovery_range_to_string>:
 801a9ec:	2804      	cmp	r0, #4
 801a9ee:	bf9a      	itte	ls
 801a9f0:	4b02      	ldrls	r3, [pc, #8]	@ (801a9fc <rcl_automatic_discovery_range_to_string+0x10>)
 801a9f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801a9f6:	2000      	movhi	r0, #0
 801a9f8:	4770      	bx	lr
 801a9fa:	bf00      	nop
 801a9fc:	0801eab8 	.word	0x0801eab8

0801aa00 <rcl_get_discovery_static_peers>:
 801aa00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa04:	b08c      	sub	sp, #48	@ 0x30
 801aa06:	2300      	movs	r3, #0
 801aa08:	9304      	str	r3, [sp, #16]
 801aa0a:	2800      	cmp	r0, #0
 801aa0c:	d04e      	beq.n	801aaac <rcl_get_discovery_static_peers+0xac>
 801aa0e:	460d      	mov	r5, r1
 801aa10:	2900      	cmp	r1, #0
 801aa12:	d04b      	beq.n	801aaac <rcl_get_discovery_static_peers+0xac>
 801aa14:	4604      	mov	r4, r0
 801aa16:	a904      	add	r1, sp, #16
 801aa18:	482d      	ldr	r0, [pc, #180]	@ (801aad0 <rcl_get_discovery_static_peers+0xd0>)
 801aa1a:	f7fc fccf 	bl	80173bc <rcutils_get_env>
 801aa1e:	b118      	cbz	r0, 801aa28 <rcl_get_discovery_static_peers+0x28>
 801aa20:	2001      	movs	r0, #1
 801aa22:	b00c      	add	sp, #48	@ 0x30
 801aa24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa28:	9b04      	ldr	r3, [sp, #16]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d0f8      	beq.n	801aa20 <rcl_get_discovery_static_peers+0x20>
 801aa2e:	af05      	add	r7, sp, #20
 801aa30:	4638      	mov	r0, r7
 801aa32:	f000 fc7f 	bl	801b334 <rcutils_get_zero_initialized_string_array>
 801aa36:	f105 0308 	add.w	r3, r5, #8
 801aa3a:	9703      	str	r7, [sp, #12]
 801aa3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801aa40:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801aa44:	9804      	ldr	r0, [sp, #16]
 801aa46:	e895 000c 	ldmia.w	r5, {r2, r3}
 801aa4a:	213b      	movs	r1, #59	@ 0x3b
 801aa4c:	f000 fbc2 	bl	801b1d4 <rcutils_split>
 801aa50:	2800      	cmp	r0, #0
 801aa52:	d1e5      	bne.n	801aa20 <rcl_get_discovery_static_peers+0x20>
 801aa54:	9905      	ldr	r1, [sp, #20]
 801aa56:	462a      	mov	r2, r5
 801aa58:	4620      	mov	r0, r4
 801aa5a:	f000 fcc3 	bl	801b3e4 <rmw_discovery_options_init>
 801aa5e:	4606      	mov	r6, r0
 801aa60:	bb90      	cbnz	r0, 801aac8 <rcl_get_discovery_static_peers+0xc8>
 801aa62:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801aa66:	f1b9 0f00 	cmp.w	r9, #0
 801aa6a:	d026      	beq.n	801aaba <rcl_get_discovery_static_peers+0xba>
 801aa6c:	f8dd a018 	ldr.w	sl, [sp, #24]
 801aa70:	4680      	mov	r8, r0
 801aa72:	f85a 5026 	ldr.w	r5, [sl, r6, lsl #2]
 801aa76:	4628      	mov	r0, r5
 801aa78:	f7e5 fc2a 	bl	80002d0 <strlen>
 801aa7c:	28ff      	cmp	r0, #255	@ 0xff
 801aa7e:	4629      	mov	r1, r5
 801aa80:	ea4f 2506 	mov.w	r5, r6, lsl #8
 801aa84:	d816      	bhi.n	801aab4 <rcl_get_discovery_static_peers+0xb4>
 801aa86:	6860      	ldr	r0, [r4, #4]
 801aa88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801aa8c:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 801aa90:	f001 fb31 	bl	801c0f6 <strncpy>
 801aa94:	6863      	ldr	r3, [r4, #4]
 801aa96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801aa9a:	3601      	adds	r6, #1
 801aa9c:	442b      	add	r3, r5
 801aa9e:	454e      	cmp	r6, r9
 801aaa0:	f883 80ff 	strb.w	r8, [r3, #255]	@ 0xff
 801aaa4:	d209      	bcs.n	801aaba <rcl_get_discovery_static_peers+0xba>
 801aaa6:	f8dd a018 	ldr.w	sl, [sp, #24]
 801aaaa:	e7e2      	b.n	801aa72 <rcl_get_discovery_static_peers+0x72>
 801aaac:	200b      	movs	r0, #11
 801aaae:	b00c      	add	sp, #48	@ 0x30
 801aab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aab4:	3601      	adds	r6, #1
 801aab6:	454e      	cmp	r6, r9
 801aab8:	d3db      	bcc.n	801aa72 <rcl_get_discovery_static_peers+0x72>
 801aaba:	4638      	mov	r0, r7
 801aabc:	f000 fc6c 	bl	801b398 <rcutils_string_array_fini>
 801aac0:	3800      	subs	r0, #0
 801aac2:	bf18      	it	ne
 801aac4:	2001      	movne	r0, #1
 801aac6:	e7ac      	b.n	801aa22 <rcl_get_discovery_static_peers+0x22>
 801aac8:	f7f9 fd00 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 801aacc:	e7a9      	b.n	801aa22 <rcl_get_discovery_static_peers+0x22>
 801aace:	bf00      	nop
 801aad0:	0801ded4 	.word	0x0801ded4

0801aad4 <rcl_get_default_domain_id>:
 801aad4:	b530      	push	{r4, r5, lr}
 801aad6:	b083      	sub	sp, #12
 801aad8:	2300      	movs	r3, #0
 801aada:	9300      	str	r3, [sp, #0]
 801aadc:	b1f0      	cbz	r0, 801ab1c <rcl_get_default_domain_id+0x48>
 801aade:	4604      	mov	r4, r0
 801aae0:	4669      	mov	r1, sp
 801aae2:	4812      	ldr	r0, [pc, #72]	@ (801ab2c <rcl_get_default_domain_id+0x58>)
 801aae4:	f7fc fc6a 	bl	80173bc <rcutils_get_env>
 801aae8:	4602      	mov	r2, r0
 801aaea:	b108      	cbz	r0, 801aaf0 <rcl_get_default_domain_id+0x1c>
 801aaec:	2001      	movs	r0, #1
 801aaee:	e004      	b.n	801aafa <rcl_get_default_domain_id+0x26>
 801aaf0:	9800      	ldr	r0, [sp, #0]
 801aaf2:	b108      	cbz	r0, 801aaf8 <rcl_get_default_domain_id+0x24>
 801aaf4:	7803      	ldrb	r3, [r0, #0]
 801aaf6:	b913      	cbnz	r3, 801aafe <rcl_get_default_domain_id+0x2a>
 801aaf8:	2000      	movs	r0, #0
 801aafa:	b003      	add	sp, #12
 801aafc:	bd30      	pop	{r4, r5, pc}
 801aafe:	a901      	add	r1, sp, #4
 801ab00:	9201      	str	r2, [sp, #4]
 801ab02:	f001 f837 	bl	801bb74 <strtoul>
 801ab06:	4605      	mov	r5, r0
 801ab08:	b158      	cbz	r0, 801ab22 <rcl_get_default_domain_id+0x4e>
 801ab0a:	1c43      	adds	r3, r0, #1
 801ab0c:	d104      	bne.n	801ab18 <rcl_get_default_domain_id+0x44>
 801ab0e:	f001 fb71 	bl	801c1f4 <__errno>
 801ab12:	6803      	ldr	r3, [r0, #0]
 801ab14:	2b22      	cmp	r3, #34	@ 0x22
 801ab16:	d0e9      	beq.n	801aaec <rcl_get_default_domain_id+0x18>
 801ab18:	6025      	str	r5, [r4, #0]
 801ab1a:	e7ed      	b.n	801aaf8 <rcl_get_default_domain_id+0x24>
 801ab1c:	200b      	movs	r0, #11
 801ab1e:	b003      	add	sp, #12
 801ab20:	bd30      	pop	{r4, r5, pc}
 801ab22:	9b01      	ldr	r3, [sp, #4]
 801ab24:	781b      	ldrb	r3, [r3, #0]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d0f6      	beq.n	801ab18 <rcl_get_default_domain_id+0x44>
 801ab2a:	e7df      	b.n	801aaec <rcl_get_default_domain_id+0x18>
 801ab2c:	0801dfb4 	.word	0x0801dfb4

0801ab30 <rcl_expand_topic_name>:
 801ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab34:	b08b      	sub	sp, #44	@ 0x2c
 801ab36:	9306      	str	r3, [sp, #24]
 801ab38:	2800      	cmp	r0, #0
 801ab3a:	f000 80ad 	beq.w	801ac98 <rcl_expand_topic_name+0x168>
 801ab3e:	460e      	mov	r6, r1
 801ab40:	2900      	cmp	r1, #0
 801ab42:	f000 80a9 	beq.w	801ac98 <rcl_expand_topic_name+0x168>
 801ab46:	4617      	mov	r7, r2
 801ab48:	2a00      	cmp	r2, #0
 801ab4a:	f000 80a5 	beq.w	801ac98 <rcl_expand_topic_name+0x168>
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	f000 80a2 	beq.w	801ac98 <rcl_expand_topic_name+0x168>
 801ab54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	f000 809e 	beq.w	801ac98 <rcl_expand_topic_name+0x168>
 801ab5c:	2200      	movs	r2, #0
 801ab5e:	a909      	add	r1, sp, #36	@ 0x24
 801ab60:	4680      	mov	r8, r0
 801ab62:	f000 fa45 	bl	801aff0 <rcl_validate_topic_name>
 801ab66:	4605      	mov	r5, r0
 801ab68:	2800      	cmp	r0, #0
 801ab6a:	f040 8096 	bne.w	801ac9a <rcl_expand_topic_name+0x16a>
 801ab6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	f040 809a 	bne.w	801acaa <rcl_expand_topic_name+0x17a>
 801ab76:	4602      	mov	r2, r0
 801ab78:	a909      	add	r1, sp, #36	@ 0x24
 801ab7a:	4630      	mov	r0, r6
 801ab7c:	f7fd f876 	bl	8017c6c <rmw_validate_node_name>
 801ab80:	2800      	cmp	r0, #0
 801ab82:	f040 808e 	bne.w	801aca2 <rcl_expand_topic_name+0x172>
 801ab86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ab88:	2a00      	cmp	r2, #0
 801ab8a:	f040 8093 	bne.w	801acb4 <rcl_expand_topic_name+0x184>
 801ab8e:	a909      	add	r1, sp, #36	@ 0x24
 801ab90:	4638      	mov	r0, r7
 801ab92:	f7fd f84d 	bl	8017c30 <rmw_validate_namespace>
 801ab96:	2800      	cmp	r0, #0
 801ab98:	f040 8083 	bne.w	801aca2 <rcl_expand_topic_name+0x172>
 801ab9c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801ab9e:	2d00      	cmp	r5, #0
 801aba0:	f040 80f5 	bne.w	801ad8e <rcl_expand_topic_name+0x25e>
 801aba4:	217b      	movs	r1, #123	@ 0x7b
 801aba6:	4640      	mov	r0, r8
 801aba8:	f001 fa86 	bl	801c0b8 <strchr>
 801abac:	f898 3000 	ldrb.w	r3, [r8]
 801abb0:	2b2f      	cmp	r3, #47	@ 0x2f
 801abb2:	4604      	mov	r4, r0
 801abb4:	f000 809f 	beq.w	801acf6 <rcl_expand_topic_name+0x1c6>
 801abb8:	2b7e      	cmp	r3, #126	@ 0x7e
 801abba:	f040 80ea 	bne.w	801ad92 <rcl_expand_topic_name+0x262>
 801abbe:	4638      	mov	r0, r7
 801abc0:	f7e5 fb86 	bl	80002d0 <strlen>
 801abc4:	4a86      	ldr	r2, [pc, #536]	@ (801ade0 <rcl_expand_topic_name+0x2b0>)
 801abc6:	4b87      	ldr	r3, [pc, #540]	@ (801ade4 <rcl_expand_topic_name+0x2b4>)
 801abc8:	2801      	cmp	r0, #1
 801abca:	bf08      	it	eq
 801abcc:	4613      	moveq	r3, r2
 801abce:	9302      	str	r3, [sp, #8]
 801abd0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801abd2:	9300      	str	r3, [sp, #0]
 801abd4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801abd8:	f108 0301 	add.w	r3, r8, #1
 801abdc:	9305      	str	r3, [sp, #20]
 801abde:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801abe2:	9301      	str	r3, [sp, #4]
 801abe4:	ab14      	add	r3, sp, #80	@ 0x50
 801abe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801abe8:	f7fc fc00 	bl	80173ec <rcutils_format_string_limit>
 801abec:	4682      	mov	sl, r0
 801abee:	2800      	cmp	r0, #0
 801abf0:	f000 80e1 	beq.w	801adb6 <rcl_expand_topic_name+0x286>
 801abf4:	2c00      	cmp	r4, #0
 801abf6:	f000 8085 	beq.w	801ad04 <rcl_expand_topic_name+0x1d4>
 801abfa:	217b      	movs	r1, #123	@ 0x7b
 801abfc:	f001 fa5c 	bl	801c0b8 <strchr>
 801ac00:	46d1      	mov	r9, sl
 801ac02:	4604      	mov	r4, r0
 801ac04:	9507      	str	r5, [sp, #28]
 801ac06:	464d      	mov	r5, r9
 801ac08:	2c00      	cmp	r4, #0
 801ac0a:	f000 80a1 	beq.w	801ad50 <rcl_expand_topic_name+0x220>
 801ac0e:	217d      	movs	r1, #125	@ 0x7d
 801ac10:	4628      	mov	r0, r5
 801ac12:	f001 fa51 	bl	801c0b8 <strchr>
 801ac16:	eba0 0904 	sub.w	r9, r0, r4
 801ac1a:	f109 0b01 	add.w	fp, r9, #1
 801ac1e:	4872      	ldr	r0, [pc, #456]	@ (801ade8 <rcl_expand_topic_name+0x2b8>)
 801ac20:	465a      	mov	r2, fp
 801ac22:	4621      	mov	r1, r4
 801ac24:	f001 fa55 	bl	801c0d2 <strncmp>
 801ac28:	2800      	cmp	r0, #0
 801ac2a:	d069      	beq.n	801ad00 <rcl_expand_topic_name+0x1d0>
 801ac2c:	486f      	ldr	r0, [pc, #444]	@ (801adec <rcl_expand_topic_name+0x2bc>)
 801ac2e:	465a      	mov	r2, fp
 801ac30:	4621      	mov	r1, r4
 801ac32:	f001 fa4e 	bl	801c0d2 <strncmp>
 801ac36:	b130      	cbz	r0, 801ac46 <rcl_expand_topic_name+0x116>
 801ac38:	486d      	ldr	r0, [pc, #436]	@ (801adf0 <rcl_expand_topic_name+0x2c0>)
 801ac3a:	465a      	mov	r2, fp
 801ac3c:	4621      	mov	r1, r4
 801ac3e:	f001 fa48 	bl	801c0d2 <strncmp>
 801ac42:	2800      	cmp	r0, #0
 801ac44:	d138      	bne.n	801acb8 <rcl_expand_topic_name+0x188>
 801ac46:	46b9      	mov	r9, r7
 801ac48:	ab16      	add	r3, sp, #88	@ 0x58
 801ac4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ac4e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ac52:	ab14      	add	r3, sp, #80	@ 0x50
 801ac54:	4620      	mov	r0, r4
 801ac56:	cb0c      	ldmia	r3, {r2, r3}
 801ac58:	4659      	mov	r1, fp
 801ac5a:	f7fc fd1b 	bl	8017694 <rcutils_strndup>
 801ac5e:	4604      	mov	r4, r0
 801ac60:	2800      	cmp	r0, #0
 801ac62:	f000 8099 	beq.w	801ad98 <rcl_expand_topic_name+0x268>
 801ac66:	464a      	mov	r2, r9
 801ac68:	4628      	mov	r0, r5
 801ac6a:	ab14      	add	r3, sp, #80	@ 0x50
 801ac6c:	4621      	mov	r1, r4
 801ac6e:	f7fc fbf7 	bl	8017460 <rcutils_repl_str>
 801ac72:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ac74:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ac76:	4605      	mov	r5, r0
 801ac78:	4620      	mov	r0, r4
 801ac7a:	4798      	blx	r3
 801ac7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ac7e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ac80:	4650      	mov	r0, sl
 801ac82:	4798      	blx	r3
 801ac84:	2d00      	cmp	r5, #0
 801ac86:	f000 8091 	beq.w	801adac <rcl_expand_topic_name+0x27c>
 801ac8a:	217b      	movs	r1, #123	@ 0x7b
 801ac8c:	4628      	mov	r0, r5
 801ac8e:	f001 fa13 	bl	801c0b8 <strchr>
 801ac92:	46aa      	mov	sl, r5
 801ac94:	4604      	mov	r4, r0
 801ac96:	e7b7      	b.n	801ac08 <rcl_expand_topic_name+0xd8>
 801ac98:	250b      	movs	r5, #11
 801ac9a:	4628      	mov	r0, r5
 801ac9c:	b00b      	add	sp, #44	@ 0x2c
 801ac9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aca2:	f7f9 fc13 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 801aca6:	4605      	mov	r5, r0
 801aca8:	e7f7      	b.n	801ac9a <rcl_expand_topic_name+0x16a>
 801acaa:	2567      	movs	r5, #103	@ 0x67
 801acac:	4628      	mov	r0, r5
 801acae:	b00b      	add	sp, #44	@ 0x2c
 801acb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acb4:	25c9      	movs	r5, #201	@ 0xc9
 801acb6:	e7f0      	b.n	801ac9a <rcl_expand_topic_name+0x16a>
 801acb8:	f109 32ff 	add.w	r2, r9, #4294967295
 801acbc:	9806      	ldr	r0, [sp, #24]
 801acbe:	1c61      	adds	r1, r4, #1
 801acc0:	f7fc fe04 	bl	80178cc <rcutils_string_map_getn>
 801acc4:	4681      	mov	r9, r0
 801acc6:	2800      	cmp	r0, #0
 801acc8:	d1be      	bne.n	801ac48 <rcl_expand_topic_name+0x118>
 801acca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801accc:	ab16      	add	r3, sp, #88	@ 0x58
 801acce:	6010      	str	r0, [r2, #0]
 801acd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801acd4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801acd8:	ab14      	add	r3, sp, #80	@ 0x50
 801acda:	cb0c      	ldmia	r3, {r2, r3}
 801acdc:	4659      	mov	r1, fp
 801acde:	4620      	mov	r0, r4
 801ace0:	f7fc fcd8 	bl	8017694 <rcutils_strndup>
 801ace4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ace6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ace8:	4798      	blx	r3
 801acea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801acec:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801acee:	4650      	mov	r0, sl
 801acf0:	4798      	blx	r3
 801acf2:	2569      	movs	r5, #105	@ 0x69
 801acf4:	e7d1      	b.n	801ac9a <rcl_expand_topic_name+0x16a>
 801acf6:	2800      	cmp	r0, #0
 801acf8:	d061      	beq.n	801adbe <rcl_expand_topic_name+0x28e>
 801acfa:	46c1      	mov	r9, r8
 801acfc:	46aa      	mov	sl, r5
 801acfe:	e781      	b.n	801ac04 <rcl_expand_topic_name+0xd4>
 801ad00:	46b1      	mov	r9, r6
 801ad02:	e7a1      	b.n	801ac48 <rcl_expand_topic_name+0x118>
 801ad04:	f89a 3000 	ldrb.w	r3, [sl]
 801ad08:	2b2f      	cmp	r3, #47	@ 0x2f
 801ad0a:	d01d      	beq.n	801ad48 <rcl_expand_topic_name+0x218>
 801ad0c:	4638      	mov	r0, r7
 801ad0e:	f7e5 fadf 	bl	80002d0 <strlen>
 801ad12:	4a38      	ldr	r2, [pc, #224]	@ (801adf4 <rcl_expand_topic_name+0x2c4>)
 801ad14:	4b38      	ldr	r3, [pc, #224]	@ (801adf8 <rcl_expand_topic_name+0x2c8>)
 801ad16:	f8cd a010 	str.w	sl, [sp, #16]
 801ad1a:	2801      	cmp	r0, #1
 801ad1c:	bf18      	it	ne
 801ad1e:	4613      	movne	r3, r2
 801ad20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801ad24:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ad28:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ad2a:	9703      	str	r7, [sp, #12]
 801ad2c:	9200      	str	r2, [sp, #0]
 801ad2e:	ab14      	add	r3, sp, #80	@ 0x50
 801ad30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ad32:	f7fc fb5b 	bl	80173ec <rcutils_format_string_limit>
 801ad36:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ad38:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ad3a:	4604      	mov	r4, r0
 801ad3c:	4650      	mov	r0, sl
 801ad3e:	4798      	blx	r3
 801ad40:	46a2      	mov	sl, r4
 801ad42:	4653      	mov	r3, sl
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d036      	beq.n	801adb6 <rcl_expand_topic_name+0x286>
 801ad48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ad4a:	f8c3 a000 	str.w	sl, [r3]
 801ad4e:	e7a4      	b.n	801ac9a <rcl_expand_topic_name+0x16a>
 801ad50:	4653      	mov	r3, sl
 801ad52:	9d07      	ldr	r5, [sp, #28]
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d1d5      	bne.n	801ad04 <rcl_expand_topic_name+0x1d4>
 801ad58:	f898 3000 	ldrb.w	r3, [r8]
 801ad5c:	2b2f      	cmp	r3, #47	@ 0x2f
 801ad5e:	d0f3      	beq.n	801ad48 <rcl_expand_topic_name+0x218>
 801ad60:	4638      	mov	r0, r7
 801ad62:	f7e5 fab5 	bl	80002d0 <strlen>
 801ad66:	4a23      	ldr	r2, [pc, #140]	@ (801adf4 <rcl_expand_topic_name+0x2c4>)
 801ad68:	4b23      	ldr	r3, [pc, #140]	@ (801adf8 <rcl_expand_topic_name+0x2c8>)
 801ad6a:	f8cd 8010 	str.w	r8, [sp, #16]
 801ad6e:	2801      	cmp	r0, #1
 801ad70:	bf18      	it	ne
 801ad72:	4613      	movne	r3, r2
 801ad74:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801ad78:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ad7c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ad7e:	9703      	str	r7, [sp, #12]
 801ad80:	9200      	str	r2, [sp, #0]
 801ad82:	ab14      	add	r3, sp, #80	@ 0x50
 801ad84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ad86:	f7fc fb31 	bl	80173ec <rcutils_format_string_limit>
 801ad8a:	4682      	mov	sl, r0
 801ad8c:	e7d9      	b.n	801ad42 <rcl_expand_topic_name+0x212>
 801ad8e:	25ca      	movs	r5, #202	@ 0xca
 801ad90:	e783      	b.n	801ac9a <rcl_expand_topic_name+0x16a>
 801ad92:	2800      	cmp	r0, #0
 801ad94:	d1b1      	bne.n	801acfa <rcl_expand_topic_name+0x1ca>
 801ad96:	e7e3      	b.n	801ad60 <rcl_expand_topic_name+0x230>
 801ad98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ad9a:	6018      	str	r0, [r3, #0]
 801ad9c:	f7f0 ff90 	bl	800bcc0 <rcutils_reset_error>
 801ada0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ada2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801ada4:	4650      	mov	r0, sl
 801ada6:	4798      	blx	r3
 801ada8:	250a      	movs	r5, #10
 801adaa:	e776      	b.n	801ac9a <rcl_expand_topic_name+0x16a>
 801adac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801adae:	601d      	str	r5, [r3, #0]
 801adb0:	f7f0 ff86 	bl	800bcc0 <rcutils_reset_error>
 801adb4:	e7f8      	b.n	801ada8 <rcl_expand_topic_name+0x278>
 801adb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801adb8:	2300      	movs	r3, #0
 801adba:	6013      	str	r3, [r2, #0]
 801adbc:	e7f4      	b.n	801ada8 <rcl_expand_topic_name+0x278>
 801adbe:	ab17      	add	r3, sp, #92	@ 0x5c
 801adc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801adc4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801adc8:	ab14      	add	r3, sp, #80	@ 0x50
 801adca:	cb0e      	ldmia	r3, {r1, r2, r3}
 801adcc:	4640      	mov	r0, r8
 801adce:	f7fc fc2b 	bl	8017628 <rcutils_strdup>
 801add2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801add4:	6018      	str	r0, [r3, #0]
 801add6:	2800      	cmp	r0, #0
 801add8:	f47f af5f 	bne.w	801ac9a <rcl_expand_topic_name+0x16a>
 801addc:	e7e8      	b.n	801adb0 <rcl_expand_topic_name+0x280>
 801adde:	bf00      	nop
 801ade0:	0801d2c4 	.word	0x0801d2c4
 801ade4:	0801dfc4 	.word	0x0801dfc4
 801ade8:	0801dfcc 	.word	0x0801dfcc
 801adec:	0801dfd4 	.word	0x0801dfd4
 801adf0:	0801dfdc 	.word	0x0801dfdc
 801adf4:	0801daf0 	.word	0x0801daf0
 801adf8:	0801d2d4 	.word	0x0801d2d4

0801adfc <rcl_get_default_topic_name_substitutions>:
 801adfc:	2800      	cmp	r0, #0
 801adfe:	bf0c      	ite	eq
 801ae00:	200b      	moveq	r0, #11
 801ae02:	2000      	movne	r0, #0
 801ae04:	4770      	bx	lr
 801ae06:	bf00      	nop

0801ae08 <rcl_get_zero_initialized_guard_condition>:
 801ae08:	4a03      	ldr	r2, [pc, #12]	@ (801ae18 <rcl_get_zero_initialized_guard_condition+0x10>)
 801ae0a:	4603      	mov	r3, r0
 801ae0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ae10:	e883 0003 	stmia.w	r3, {r0, r1}
 801ae14:	4618      	mov	r0, r3
 801ae16:	4770      	bx	lr
 801ae18:	0801eacc 	.word	0x0801eacc

0801ae1c <rcl_guard_condition_init>:
 801ae1c:	b082      	sub	sp, #8
 801ae1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae20:	b087      	sub	sp, #28
 801ae22:	ac0c      	add	r4, sp, #48	@ 0x30
 801ae24:	e884 000c 	stmia.w	r4, {r2, r3}
 801ae28:	46a6      	mov	lr, r4
 801ae2a:	460d      	mov	r5, r1
 801ae2c:	4604      	mov	r4, r0
 801ae2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801ae32:	f10d 0c04 	add.w	ip, sp, #4
 801ae36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801ae3a:	f8de 3000 	ldr.w	r3, [lr]
 801ae3e:	f8cc 3000 	str.w	r3, [ip]
 801ae42:	a801      	add	r0, sp, #4
 801ae44:	f7f0 ff10 	bl	800bc68 <rcutils_allocator_is_valid>
 801ae48:	b338      	cbz	r0, 801ae9a <rcl_guard_condition_init+0x7e>
 801ae4a:	b334      	cbz	r4, 801ae9a <rcl_guard_condition_init+0x7e>
 801ae4c:	6866      	ldr	r6, [r4, #4]
 801ae4e:	b9ee      	cbnz	r6, 801ae8c <rcl_guard_condition_init+0x70>
 801ae50:	b31d      	cbz	r5, 801ae9a <rcl_guard_condition_init+0x7e>
 801ae52:	4628      	mov	r0, r5
 801ae54:	f7f9 fb54 	bl	8014500 <rcl_context_is_valid>
 801ae58:	b308      	cbz	r0, 801ae9e <rcl_guard_condition_init+0x82>
 801ae5a:	9b01      	ldr	r3, [sp, #4]
 801ae5c:	9905      	ldr	r1, [sp, #20]
 801ae5e:	201c      	movs	r0, #28
 801ae60:	4798      	blx	r3
 801ae62:	4607      	mov	r7, r0
 801ae64:	6060      	str	r0, [r4, #4]
 801ae66:	b310      	cbz	r0, 801aeae <rcl_guard_condition_init+0x92>
 801ae68:	6828      	ldr	r0, [r5, #0]
 801ae6a:	3028      	adds	r0, #40	@ 0x28
 801ae6c:	f000 fc06 	bl	801b67c <rmw_create_guard_condition>
 801ae70:	6038      	str	r0, [r7, #0]
 801ae72:	6860      	ldr	r0, [r4, #4]
 801ae74:	6807      	ldr	r7, [r0, #0]
 801ae76:	b1a7      	cbz	r7, 801aea2 <rcl_guard_condition_init+0x86>
 801ae78:	2301      	movs	r3, #1
 801ae7a:	ac01      	add	r4, sp, #4
 801ae7c:	7103      	strb	r3, [r0, #4]
 801ae7e:	f100 0708 	add.w	r7, r0, #8
 801ae82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ae84:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ae86:	6823      	ldr	r3, [r4, #0]
 801ae88:	603b      	str	r3, [r7, #0]
 801ae8a:	e000      	b.n	801ae8e <rcl_guard_condition_init+0x72>
 801ae8c:	2664      	movs	r6, #100	@ 0x64
 801ae8e:	4630      	mov	r0, r6
 801ae90:	b007      	add	sp, #28
 801ae92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ae96:	b002      	add	sp, #8
 801ae98:	4770      	bx	lr
 801ae9a:	260b      	movs	r6, #11
 801ae9c:	e7f7      	b.n	801ae8e <rcl_guard_condition_init+0x72>
 801ae9e:	2665      	movs	r6, #101	@ 0x65
 801aea0:	e7f5      	b.n	801ae8e <rcl_guard_condition_init+0x72>
 801aea2:	9b02      	ldr	r3, [sp, #8]
 801aea4:	9905      	ldr	r1, [sp, #20]
 801aea6:	4798      	blx	r3
 801aea8:	2601      	movs	r6, #1
 801aeaa:	6067      	str	r7, [r4, #4]
 801aeac:	e7ef      	b.n	801ae8e <rcl_guard_condition_init+0x72>
 801aeae:	260a      	movs	r6, #10
 801aeb0:	e7ed      	b.n	801ae8e <rcl_guard_condition_init+0x72>
 801aeb2:	bf00      	nop

0801aeb4 <rcl_guard_condition_init_from_rmw>:
 801aeb4:	b082      	sub	sp, #8
 801aeb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aeba:	b086      	sub	sp, #24
 801aebc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801aec0:	4604      	mov	r4, r0
 801aec2:	f84c 3f04 	str.w	r3, [ip, #4]!
 801aec6:	460e      	mov	r6, r1
 801aec8:	4617      	mov	r7, r2
 801aeca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801aece:	f10d 0e04 	add.w	lr, sp, #4
 801aed2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801aed6:	f8dc 3000 	ldr.w	r3, [ip]
 801aeda:	f8ce 3000 	str.w	r3, [lr]
 801aede:	a801      	add	r0, sp, #4
 801aee0:	f7f0 fec2 	bl	800bc68 <rcutils_allocator_is_valid>
 801aee4:	b350      	cbz	r0, 801af3c <rcl_guard_condition_init_from_rmw+0x88>
 801aee6:	b34c      	cbz	r4, 801af3c <rcl_guard_condition_init_from_rmw+0x88>
 801aee8:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801aeec:	f1b8 0f00 	cmp.w	r8, #0
 801aef0:	d11e      	bne.n	801af30 <rcl_guard_condition_init_from_rmw+0x7c>
 801aef2:	b31f      	cbz	r7, 801af3c <rcl_guard_condition_init_from_rmw+0x88>
 801aef4:	4638      	mov	r0, r7
 801aef6:	f7f9 fb03 	bl	8014500 <rcl_context_is_valid>
 801aefa:	b328      	cbz	r0, 801af48 <rcl_guard_condition_init_from_rmw+0x94>
 801aefc:	9b01      	ldr	r3, [sp, #4]
 801aefe:	9905      	ldr	r1, [sp, #20]
 801af00:	201c      	movs	r0, #28
 801af02:	4798      	blx	r3
 801af04:	4605      	mov	r5, r0
 801af06:	6060      	str	r0, [r4, #4]
 801af08:	b358      	cbz	r0, 801af62 <rcl_guard_condition_init_from_rmw+0xae>
 801af0a:	b1fe      	cbz	r6, 801af4c <rcl_guard_condition_init_from_rmw+0x98>
 801af0c:	6006      	str	r6, [r0, #0]
 801af0e:	f880 8004 	strb.w	r8, [r0, #4]
 801af12:	ac01      	add	r4, sp, #4
 801af14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af16:	f105 0c08 	add.w	ip, r5, #8
 801af1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801af1e:	6823      	ldr	r3, [r4, #0]
 801af20:	f8cc 3000 	str.w	r3, [ip]
 801af24:	2000      	movs	r0, #0
 801af26:	b006      	add	sp, #24
 801af28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af2c:	b002      	add	sp, #8
 801af2e:	4770      	bx	lr
 801af30:	2064      	movs	r0, #100	@ 0x64
 801af32:	b006      	add	sp, #24
 801af34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af38:	b002      	add	sp, #8
 801af3a:	4770      	bx	lr
 801af3c:	200b      	movs	r0, #11
 801af3e:	b006      	add	sp, #24
 801af40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af44:	b002      	add	sp, #8
 801af46:	4770      	bx	lr
 801af48:	2065      	movs	r0, #101	@ 0x65
 801af4a:	e7f2      	b.n	801af32 <rcl_guard_condition_init_from_rmw+0x7e>
 801af4c:	6838      	ldr	r0, [r7, #0]
 801af4e:	3028      	adds	r0, #40	@ 0x28
 801af50:	f000 fb94 	bl	801b67c <rmw_create_guard_condition>
 801af54:	6028      	str	r0, [r5, #0]
 801af56:	6865      	ldr	r5, [r4, #4]
 801af58:	682e      	ldr	r6, [r5, #0]
 801af5a:	b126      	cbz	r6, 801af66 <rcl_guard_condition_init_from_rmw+0xb2>
 801af5c:	2301      	movs	r3, #1
 801af5e:	712b      	strb	r3, [r5, #4]
 801af60:	e7d7      	b.n	801af12 <rcl_guard_condition_init_from_rmw+0x5e>
 801af62:	200a      	movs	r0, #10
 801af64:	e7e5      	b.n	801af32 <rcl_guard_condition_init_from_rmw+0x7e>
 801af66:	4628      	mov	r0, r5
 801af68:	9b02      	ldr	r3, [sp, #8]
 801af6a:	9905      	ldr	r1, [sp, #20]
 801af6c:	4798      	blx	r3
 801af6e:	2001      	movs	r0, #1
 801af70:	6066      	str	r6, [r4, #4]
 801af72:	e7de      	b.n	801af32 <rcl_guard_condition_init_from_rmw+0x7e>

0801af74 <rcl_guard_condition_fini>:
 801af74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af76:	b1d8      	cbz	r0, 801afb0 <rcl_guard_condition_fini+0x3c>
 801af78:	4604      	mov	r4, r0
 801af7a:	6840      	ldr	r0, [r0, #4]
 801af7c:	b158      	cbz	r0, 801af96 <rcl_guard_condition_fini+0x22>
 801af7e:	6803      	ldr	r3, [r0, #0]
 801af80:	68c6      	ldr	r6, [r0, #12]
 801af82:	6987      	ldr	r7, [r0, #24]
 801af84:	b153      	cbz	r3, 801af9c <rcl_guard_condition_fini+0x28>
 801af86:	7905      	ldrb	r5, [r0, #4]
 801af88:	b955      	cbnz	r5, 801afa0 <rcl_guard_condition_fini+0x2c>
 801af8a:	4639      	mov	r1, r7
 801af8c:	47b0      	blx	r6
 801af8e:	2300      	movs	r3, #0
 801af90:	6063      	str	r3, [r4, #4]
 801af92:	4628      	mov	r0, r5
 801af94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af96:	4605      	mov	r5, r0
 801af98:	4628      	mov	r0, r5
 801af9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af9c:	461d      	mov	r5, r3
 801af9e:	e7f4      	b.n	801af8a <rcl_guard_condition_fini+0x16>
 801afa0:	4618      	mov	r0, r3
 801afa2:	f000 fb7f 	bl	801b6a4 <rmw_destroy_guard_condition>
 801afa6:	1e05      	subs	r5, r0, #0
 801afa8:	bf18      	it	ne
 801afaa:	2501      	movne	r5, #1
 801afac:	6860      	ldr	r0, [r4, #4]
 801afae:	e7ec      	b.n	801af8a <rcl_guard_condition_fini+0x16>
 801afb0:	250b      	movs	r5, #11
 801afb2:	4628      	mov	r0, r5
 801afb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afb6:	bf00      	nop

0801afb8 <rcl_guard_condition_get_default_options>:
 801afb8:	b510      	push	{r4, lr}
 801afba:	4604      	mov	r4, r0
 801afbc:	f7f0 fe28 	bl	800bc10 <rcutils_get_default_allocator>
 801afc0:	4620      	mov	r0, r4
 801afc2:	bd10      	pop	{r4, pc}

0801afc4 <rcl_trigger_guard_condition>:
 801afc4:	b148      	cbz	r0, 801afda <rcl_trigger_guard_condition+0x16>
 801afc6:	b508      	push	{r3, lr}
 801afc8:	6843      	ldr	r3, [r0, #4]
 801afca:	b143      	cbz	r3, 801afde <rcl_trigger_guard_condition+0x1a>
 801afcc:	6818      	ldr	r0, [r3, #0]
 801afce:	f000 fb7d 	bl	801b6cc <rmw_trigger_guard_condition>
 801afd2:	3800      	subs	r0, #0
 801afd4:	bf18      	it	ne
 801afd6:	2001      	movne	r0, #1
 801afd8:	bd08      	pop	{r3, pc}
 801afda:	200b      	movs	r0, #11
 801afdc:	4770      	bx	lr
 801afde:	200b      	movs	r0, #11
 801afe0:	bd08      	pop	{r3, pc}
 801afe2:	bf00      	nop

0801afe4 <rcl_guard_condition_get_rmw_handle>:
 801afe4:	b110      	cbz	r0, 801afec <rcl_guard_condition_get_rmw_handle+0x8>
 801afe6:	6840      	ldr	r0, [r0, #4]
 801afe8:	b100      	cbz	r0, 801afec <rcl_guard_condition_get_rmw_handle+0x8>
 801afea:	6800      	ldr	r0, [r0, #0]
 801afec:	4770      	bx	lr
 801afee:	bf00      	nop

0801aff0 <rcl_validate_topic_name>:
 801aff0:	2800      	cmp	r0, #0
 801aff2:	d06b      	beq.n	801b0cc <rcl_validate_topic_name+0xdc>
 801aff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aff8:	460d      	mov	r5, r1
 801affa:	2900      	cmp	r1, #0
 801affc:	d06d      	beq.n	801b0da <rcl_validate_topic_name+0xea>
 801affe:	4616      	mov	r6, r2
 801b000:	4604      	mov	r4, r0
 801b002:	f7e5 f965 	bl	80002d0 <strlen>
 801b006:	b190      	cbz	r0, 801b02e <rcl_validate_topic_name+0x3e>
 801b008:	7821      	ldrb	r1, [r4, #0]
 801b00a:	4a71      	ldr	r2, [pc, #452]	@ (801b1d0 <rcl_validate_topic_name+0x1e0>)
 801b00c:	5c53      	ldrb	r3, [r2, r1]
 801b00e:	f013 0304 	ands.w	r3, r3, #4
 801b012:	d15d      	bne.n	801b0d0 <rcl_validate_topic_name+0xe0>
 801b014:	1e47      	subs	r7, r0, #1
 801b016:	f814 c007 	ldrb.w	ip, [r4, r7]
 801b01a:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 801b01e:	d10d      	bne.n	801b03c <rcl_validate_topic_name+0x4c>
 801b020:	2302      	movs	r3, #2
 801b022:	602b      	str	r3, [r5, #0]
 801b024:	b146      	cbz	r6, 801b038 <rcl_validate_topic_name+0x48>
 801b026:	6037      	str	r7, [r6, #0]
 801b028:	2000      	movs	r0, #0
 801b02a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b02e:	2301      	movs	r3, #1
 801b030:	602b      	str	r3, [r5, #0]
 801b032:	b10e      	cbz	r6, 801b038 <rcl_validate_topic_name+0x48>
 801b034:	2300      	movs	r3, #0
 801b036:	6033      	str	r3, [r6, #0]
 801b038:	2000      	movs	r0, #0
 801b03a:	e7f6      	b.n	801b02a <rcl_validate_topic_name+0x3a>
 801b03c:	f104 38ff 	add.w	r8, r4, #4294967295
 801b040:	469a      	mov	sl, r3
 801b042:	469e      	mov	lr, r3
 801b044:	f818 9f01 	ldrb.w	r9, [r8, #1]!
 801b048:	f1a9 0c2f 	sub.w	ip, r9, #47	@ 0x2f
 801b04c:	f1bc 0f4f 	cmp.w	ip, #79	@ 0x4f
 801b050:	d85b      	bhi.n	801b10a <rcl_validate_topic_name+0x11a>
 801b052:	e8df f00c 	tbb	[pc, ip]
 801b056:	4463      	.short	0x4463
 801b058:	44444444 	.word	0x44444444
 801b05c:	44444444 	.word	0x44444444
 801b060:	5a5a5a44 	.word	0x5a5a5a44
 801b064:	5a5a5a5a 	.word	0x5a5a5a5a
 801b068:	44444444 	.word	0x44444444
 801b06c:	44444444 	.word	0x44444444
 801b070:	44444444 	.word	0x44444444
 801b074:	44444444 	.word	0x44444444
 801b078:	44444444 	.word	0x44444444
 801b07c:	44444444 	.word	0x44444444
 801b080:	5a5a4444 	.word	0x5a5a4444
 801b084:	5a2e5a5a 	.word	0x5a2e5a5a
 801b088:	44444444 	.word	0x44444444
 801b08c:	44444444 	.word	0x44444444
 801b090:	44444444 	.word	0x44444444
 801b094:	44444444 	.word	0x44444444
 801b098:	44444444 	.word	0x44444444
 801b09c:	44444444 	.word	0x44444444
 801b0a0:	5a284444 	.word	0x5a284444
 801b0a4:	6b73      	.short	0x6b73
 801b0a6:	f1ba 0f00 	cmp.w	sl, #0
 801b0aa:	d13a      	bne.n	801b122 <rcl_validate_topic_name+0x132>
 801b0ac:	4673      	mov	r3, lr
 801b0ae:	f04f 0a01 	mov.w	sl, #1
 801b0b2:	f10e 0e01 	add.w	lr, lr, #1
 801b0b6:	4570      	cmp	r0, lr
 801b0b8:	d1c4      	bne.n	801b044 <rcl_validate_topic_name+0x54>
 801b0ba:	f1ba 0f00 	cmp.w	sl, #0
 801b0be:	d048      	beq.n	801b152 <rcl_validate_topic_name+0x162>
 801b0c0:	2205      	movs	r2, #5
 801b0c2:	602a      	str	r2, [r5, #0]
 801b0c4:	2e00      	cmp	r6, #0
 801b0c6:	d0b7      	beq.n	801b038 <rcl_validate_topic_name+0x48>
 801b0c8:	6033      	str	r3, [r6, #0]
 801b0ca:	e7b5      	b.n	801b038 <rcl_validate_topic_name+0x48>
 801b0cc:	200b      	movs	r0, #11
 801b0ce:	4770      	bx	lr
 801b0d0:	2304      	movs	r3, #4
 801b0d2:	602b      	str	r3, [r5, #0]
 801b0d4:	2e00      	cmp	r6, #0
 801b0d6:	d1ad      	bne.n	801b034 <rcl_validate_topic_name+0x44>
 801b0d8:	e7ae      	b.n	801b038 <rcl_validate_topic_name+0x48>
 801b0da:	200b      	movs	r0, #11
 801b0dc:	e7a5      	b.n	801b02a <rcl_validate_topic_name+0x3a>
 801b0de:	f812 c009 	ldrb.w	ip, [r2, r9]
 801b0e2:	f01c 0f04 	tst.w	ip, #4
 801b0e6:	d0e4      	beq.n	801b0b2 <rcl_validate_topic_name+0xc2>
 801b0e8:	f1ba 0f00 	cmp.w	sl, #0
 801b0ec:	d0e1      	beq.n	801b0b2 <rcl_validate_topic_name+0xc2>
 801b0ee:	f1be 0f00 	cmp.w	lr, #0
 801b0f2:	d0de      	beq.n	801b0b2 <rcl_validate_topic_name+0xc2>
 801b0f4:	f10e 3cff 	add.w	ip, lr, #4294967295
 801b0f8:	4563      	cmp	r3, ip
 801b0fa:	d1da      	bne.n	801b0b2 <rcl_validate_topic_name+0xc2>
 801b0fc:	2309      	movs	r3, #9
 801b0fe:	602b      	str	r3, [r5, #0]
 801b100:	2e00      	cmp	r6, #0
 801b102:	d099      	beq.n	801b038 <rcl_validate_topic_name+0x48>
 801b104:	f8c6 e000 	str.w	lr, [r6]
 801b108:	e796      	b.n	801b038 <rcl_validate_topic_name+0x48>
 801b10a:	f1ba 0f00 	cmp.w	sl, #0
 801b10e:	bf0c      	ite	eq
 801b110:	2303      	moveq	r3, #3
 801b112:	2308      	movne	r3, #8
 801b114:	602b      	str	r3, [r5, #0]
 801b116:	2e00      	cmp	r6, #0
 801b118:	d1f4      	bne.n	801b104 <rcl_validate_topic_name+0x114>
 801b11a:	e78d      	b.n	801b038 <rcl_validate_topic_name+0x48>
 801b11c:	f1ba 0f00 	cmp.w	sl, #0
 801b120:	d0c7      	beq.n	801b0b2 <rcl_validate_topic_name+0xc2>
 801b122:	2308      	movs	r3, #8
 801b124:	602b      	str	r3, [r5, #0]
 801b126:	2e00      	cmp	r6, #0
 801b128:	d1ec      	bne.n	801b104 <rcl_validate_topic_name+0x114>
 801b12a:	e785      	b.n	801b038 <rcl_validate_topic_name+0x48>
 801b12c:	f1be 0f00 	cmp.w	lr, #0
 801b130:	d0bf      	beq.n	801b0b2 <rcl_validate_topic_name+0xc2>
 801b132:	2306      	movs	r3, #6
 801b134:	602b      	str	r3, [r5, #0]
 801b136:	2e00      	cmp	r6, #0
 801b138:	d1e4      	bne.n	801b104 <rcl_validate_topic_name+0x114>
 801b13a:	e77d      	b.n	801b038 <rcl_validate_topic_name+0x48>
 801b13c:	f1ba 0f00 	cmp.w	sl, #0
 801b140:	d104      	bne.n	801b14c <rcl_validate_topic_name+0x15c>
 801b142:	2305      	movs	r3, #5
 801b144:	602b      	str	r3, [r5, #0]
 801b146:	2e00      	cmp	r6, #0
 801b148:	d1dc      	bne.n	801b104 <rcl_validate_topic_name+0x114>
 801b14a:	e775      	b.n	801b038 <rcl_validate_topic_name+0x48>
 801b14c:	f04f 0a00 	mov.w	sl, #0
 801b150:	e7af      	b.n	801b0b2 <rcl_validate_topic_name+0xc2>
 801b152:	297e      	cmp	r1, #126	@ 0x7e
 801b154:	d01d      	beq.n	801b192 <rcl_validate_topic_name+0x1a2>
 801b156:	2101      	movs	r1, #1
 801b158:	e006      	b.n	801b168 <rcl_validate_topic_name+0x178>
 801b15a:	458e      	cmp	lr, r1
 801b15c:	f104 0401 	add.w	r4, r4, #1
 801b160:	f101 0301 	add.w	r3, r1, #1
 801b164:	d912      	bls.n	801b18c <rcl_validate_topic_name+0x19c>
 801b166:	4619      	mov	r1, r3
 801b168:	4557      	cmp	r7, sl
 801b16a:	f10a 0a01 	add.w	sl, sl, #1
 801b16e:	d0f4      	beq.n	801b15a <rcl_validate_topic_name+0x16a>
 801b170:	7823      	ldrb	r3, [r4, #0]
 801b172:	2b2f      	cmp	r3, #47	@ 0x2f
 801b174:	d1f1      	bne.n	801b15a <rcl_validate_topic_name+0x16a>
 801b176:	7863      	ldrb	r3, [r4, #1]
 801b178:	5cd3      	ldrb	r3, [r2, r3]
 801b17a:	075b      	lsls	r3, r3, #29
 801b17c:	d5ed      	bpl.n	801b15a <rcl_validate_topic_name+0x16a>
 801b17e:	2304      	movs	r3, #4
 801b180:	602b      	str	r3, [r5, #0]
 801b182:	2e00      	cmp	r6, #0
 801b184:	f43f af58 	beq.w	801b038 <rcl_validate_topic_name+0x48>
 801b188:	6031      	str	r1, [r6, #0]
 801b18a:	e755      	b.n	801b038 <rcl_validate_topic_name+0x48>
 801b18c:	2300      	movs	r3, #0
 801b18e:	602b      	str	r3, [r5, #0]
 801b190:	e752      	b.n	801b038 <rcl_validate_topic_name+0x48>
 801b192:	4653      	mov	r3, sl
 801b194:	2101      	movs	r1, #1
 801b196:	e00a      	b.n	801b1ae <rcl_validate_topic_name+0x1be>
 801b198:	2b01      	cmp	r3, #1
 801b19a:	d012      	beq.n	801b1c2 <rcl_validate_topic_name+0x1d2>
 801b19c:	458e      	cmp	lr, r1
 801b19e:	f103 0301 	add.w	r3, r3, #1
 801b1a2:	f104 0401 	add.w	r4, r4, #1
 801b1a6:	f101 0001 	add.w	r0, r1, #1
 801b1aa:	d9ef      	bls.n	801b18c <rcl_validate_topic_name+0x19c>
 801b1ac:	4601      	mov	r1, r0
 801b1ae:	429f      	cmp	r7, r3
 801b1b0:	d0f4      	beq.n	801b19c <rcl_validate_topic_name+0x1ac>
 801b1b2:	7820      	ldrb	r0, [r4, #0]
 801b1b4:	282f      	cmp	r0, #47	@ 0x2f
 801b1b6:	d1ef      	bne.n	801b198 <rcl_validate_topic_name+0x1a8>
 801b1b8:	7860      	ldrb	r0, [r4, #1]
 801b1ba:	5c10      	ldrb	r0, [r2, r0]
 801b1bc:	0740      	lsls	r0, r0, #29
 801b1be:	d5ed      	bpl.n	801b19c <rcl_validate_topic_name+0x1ac>
 801b1c0:	e7dd      	b.n	801b17e <rcl_validate_topic_name+0x18e>
 801b1c2:	2207      	movs	r2, #7
 801b1c4:	602a      	str	r2, [r5, #0]
 801b1c6:	2e00      	cmp	r6, #0
 801b1c8:	f47f af7e 	bne.w	801b0c8 <rcl_validate_topic_name+0xd8>
 801b1cc:	e734      	b.n	801b038 <rcl_validate_topic_name+0x48>
 801b1ce:	bf00      	nop
 801b1d0:	0801ebcf 	.word	0x0801ebcf

0801b1d4 <rcutils_split>:
 801b1d4:	b082      	sub	sp, #8
 801b1d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1da:	b08b      	sub	sp, #44	@ 0x2c
 801b1dc:	ac14      	add	r4, sp, #80	@ 0x50
 801b1de:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 801b1e0:	e884 000c 	stmia.w	r4, {r2, r3}
 801b1e4:	2f00      	cmp	r7, #0
 801b1e6:	f000 8091 	beq.w	801b30c <rcutils_split+0x138>
 801b1ea:	4606      	mov	r6, r0
 801b1ec:	2800      	cmp	r0, #0
 801b1ee:	d072      	beq.n	801b2d6 <rcutils_split+0x102>
 801b1f0:	7804      	ldrb	r4, [r0, #0]
 801b1f2:	2c00      	cmp	r4, #0
 801b1f4:	d06f      	beq.n	801b2d6 <rcutils_split+0x102>
 801b1f6:	460d      	mov	r5, r1
 801b1f8:	f7e5 f86a 	bl	80002d0 <strlen>
 801b1fc:	1833      	adds	r3, r6, r0
 801b1fe:	1b64      	subs	r4, r4, r5
 801b200:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b204:	4681      	mov	r9, r0
 801b206:	fab4 f484 	clz	r4, r4
 801b20a:	0964      	lsrs	r4, r4, #5
 801b20c:	42ab      	cmp	r3, r5
 801b20e:	bf08      	it	eq
 801b210:	f1a9 0901 	subeq.w	r9, r9, #1
 801b214:	454c      	cmp	r4, r9
 801b216:	d26a      	bcs.n	801b2ee <rcutils_split+0x11a>
 801b218:	1933      	adds	r3, r6, r4
 801b21a:	eb06 0009 	add.w	r0, r6, r9
 801b21e:	2101      	movs	r1, #1
 801b220:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b224:	42aa      	cmp	r2, r5
 801b226:	bf08      	it	eq
 801b228:	3101      	addeq	r1, #1
 801b22a:	4283      	cmp	r3, r0
 801b22c:	d1f8      	bne.n	801b220 <rcutils_split+0x4c>
 801b22e:	aa14      	add	r2, sp, #80	@ 0x50
 801b230:	4638      	mov	r0, r7
 801b232:	f000 f88f 	bl	801b354 <rcutils_string_array_init>
 801b236:	2800      	cmp	r0, #0
 801b238:	d141      	bne.n	801b2be <rcutils_split+0xea>
 801b23a:	687a      	ldr	r2, [r7, #4]
 801b23c:	4680      	mov	r8, r0
 801b23e:	46a2      	mov	sl, r4
 801b240:	e002      	b.n	801b248 <rcutils_split+0x74>
 801b242:	3401      	adds	r4, #1
 801b244:	454c      	cmp	r4, r9
 801b246:	d222      	bcs.n	801b28e <rcutils_split+0xba>
 801b248:	5d33      	ldrb	r3, [r6, r4]
 801b24a:	42ab      	cmp	r3, r5
 801b24c:	d1f9      	bne.n	801b242 <rcutils_split+0x6e>
 801b24e:	4554      	cmp	r4, sl
 801b250:	eba4 0b0a 	sub.w	fp, r4, sl
 801b254:	d038      	beq.n	801b2c8 <rcutils_split+0xf4>
 801b256:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b258:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b25a:	9201      	str	r2, [sp, #4]
 801b25c:	f10b 0002 	add.w	r0, fp, #2
 801b260:	4798      	blx	r3
 801b262:	9a01      	ldr	r2, [sp, #4]
 801b264:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 801b268:	687a      	ldr	r2, [r7, #4]
 801b26a:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 801b26e:	eb06 030a 	add.w	r3, r6, sl
 801b272:	f10b 0101 	add.w	r1, fp, #1
 801b276:	2800      	cmp	r0, #0
 801b278:	d04e      	beq.n	801b318 <rcutils_split+0x144>
 801b27a:	4a2d      	ldr	r2, [pc, #180]	@ (801b330 <rcutils_split+0x15c>)
 801b27c:	f000 fda0 	bl	801bdc0 <sniprintf>
 801b280:	687a      	ldr	r2, [r7, #4]
 801b282:	f108 0801 	add.w	r8, r8, #1
 801b286:	3401      	adds	r4, #1
 801b288:	454c      	cmp	r4, r9
 801b28a:	46a2      	mov	sl, r4
 801b28c:	d3dc      	bcc.n	801b248 <rcutils_split+0x74>
 801b28e:	4554      	cmp	r4, sl
 801b290:	d035      	beq.n	801b2fe <rcutils_split+0x12a>
 801b292:	eba4 040a 	sub.w	r4, r4, sl
 801b296:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b298:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801b29a:	9201      	str	r2, [sp, #4]
 801b29c:	1ca0      	adds	r0, r4, #2
 801b29e:	4798      	blx	r3
 801b2a0:	9a01      	ldr	r2, [sp, #4]
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	f842 0028 	str.w	r0, [r2, r8, lsl #2]
 801b2a8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801b2ac:	2800      	cmp	r0, #0
 801b2ae:	d035      	beq.n	801b31c <rcutils_split+0x148>
 801b2b0:	4a1f      	ldr	r2, [pc, #124]	@ (801b330 <rcutils_split+0x15c>)
 801b2b2:	eb06 030a 	add.w	r3, r6, sl
 801b2b6:	1c61      	adds	r1, r4, #1
 801b2b8:	f000 fd82 	bl	801bdc0 <sniprintf>
 801b2bc:	2000      	movs	r0, #0
 801b2be:	b00b      	add	sp, #44	@ 0x2c
 801b2c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2c4:	b002      	add	sp, #8
 801b2c6:	4770      	bx	lr
 801b2c8:	683b      	ldr	r3, [r7, #0]
 801b2ca:	3b01      	subs	r3, #1
 801b2cc:	2100      	movs	r1, #0
 801b2ce:	603b      	str	r3, [r7, #0]
 801b2d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801b2d4:	e7d7      	b.n	801b286 <rcutils_split+0xb2>
 801b2d6:	a802      	add	r0, sp, #8
 801b2d8:	ac02      	add	r4, sp, #8
 801b2da:	f000 f82b 	bl	801b334 <rcutils_get_zero_initialized_string_array>
 801b2de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b2e0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b2e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801b2e6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801b2ea:	2000      	movs	r0, #0
 801b2ec:	e7e7      	b.n	801b2be <rcutils_split+0xea>
 801b2ee:	aa14      	add	r2, sp, #80	@ 0x50
 801b2f0:	2101      	movs	r1, #1
 801b2f2:	4638      	mov	r0, r7
 801b2f4:	f000 f82e 	bl	801b354 <rcutils_string_array_init>
 801b2f8:	2800      	cmp	r0, #0
 801b2fa:	d1e0      	bne.n	801b2be <rcutils_split+0xea>
 801b2fc:	687a      	ldr	r2, [r7, #4]
 801b2fe:	683b      	ldr	r3, [r7, #0]
 801b300:	3b01      	subs	r3, #1
 801b302:	2100      	movs	r1, #0
 801b304:	603b      	str	r3, [r7, #0]
 801b306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801b30a:	e7ee      	b.n	801b2ea <rcutils_split+0x116>
 801b30c:	200b      	movs	r0, #11
 801b30e:	b00b      	add	sp, #44	@ 0x2c
 801b310:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b314:	b002      	add	sp, #8
 801b316:	4770      	bx	lr
 801b318:	f8c7 8000 	str.w	r8, [r7]
 801b31c:	4638      	mov	r0, r7
 801b31e:	f000 f83b 	bl	801b398 <rcutils_string_array_fini>
 801b322:	b908      	cbnz	r0, 801b328 <rcutils_split+0x154>
 801b324:	200a      	movs	r0, #10
 801b326:	e7ca      	b.n	801b2be <rcutils_split+0xea>
 801b328:	f7f0 fcca 	bl	800bcc0 <rcutils_reset_error>
 801b32c:	e7fa      	b.n	801b324 <rcutils_split+0x150>
 801b32e:	bf00      	nop
 801b330:	0801d2c8 	.word	0x0801d2c8

0801b334 <rcutils_get_zero_initialized_string_array>:
 801b334:	b510      	push	{r4, lr}
 801b336:	4c06      	ldr	r4, [pc, #24]	@ (801b350 <rcutils_get_zero_initialized_string_array+0x1c>)
 801b338:	4686      	mov	lr, r0
 801b33a:	4684      	mov	ip, r0
 801b33c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b33e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b342:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801b346:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 801b34a:	4670      	mov	r0, lr
 801b34c:	bd10      	pop	{r4, pc}
 801b34e:	bf00      	nop
 801b350:	0801ead4 	.word	0x0801ead4

0801b354 <rcutils_string_array_init>:
 801b354:	b1da      	cbz	r2, 801b38e <rcutils_string_array_init+0x3a>
 801b356:	b570      	push	{r4, r5, r6, lr}
 801b358:	4605      	mov	r5, r0
 801b35a:	b1d0      	cbz	r0, 801b392 <rcutils_string_array_init+0x3e>
 801b35c:	460e      	mov	r6, r1
 801b35e:	4614      	mov	r4, r2
 801b360:	e9d2 3203 	ldrd	r3, r2, [r2, #12]
 801b364:	6001      	str	r1, [r0, #0]
 801b366:	2104      	movs	r1, #4
 801b368:	4630      	mov	r0, r6
 801b36a:	4798      	blx	r3
 801b36c:	6068      	str	r0, [r5, #4]
 801b36e:	b150      	cbz	r0, 801b386 <rcutils_string_array_init+0x32>
 801b370:	46a4      	mov	ip, r4
 801b372:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b376:	f105 0408 	add.w	r4, r5, #8
 801b37a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b37c:	f8dc 3000 	ldr.w	r3, [ip]
 801b380:	6023      	str	r3, [r4, #0]
 801b382:	2000      	movs	r0, #0
 801b384:	bd70      	pop	{r4, r5, r6, pc}
 801b386:	2e00      	cmp	r6, #0
 801b388:	d0f2      	beq.n	801b370 <rcutils_string_array_init+0x1c>
 801b38a:	200a      	movs	r0, #10
 801b38c:	bd70      	pop	{r4, r5, r6, pc}
 801b38e:	200b      	movs	r0, #11
 801b390:	4770      	bx	lr
 801b392:	200b      	movs	r0, #11
 801b394:	bd70      	pop	{r4, r5, r6, pc}
 801b396:	bf00      	nop

0801b398 <rcutils_string_array_fini>:
 801b398:	b310      	cbz	r0, 801b3e0 <rcutils_string_array_fini+0x48>
 801b39a:	6843      	ldr	r3, [r0, #4]
 801b39c:	b570      	push	{r4, r5, r6, lr}
 801b39e:	4604      	mov	r4, r0
 801b3a0:	b1d3      	cbz	r3, 801b3d8 <rcutils_string_array_fini+0x40>
 801b3a2:	3008      	adds	r0, #8
 801b3a4:	f7f0 fc60 	bl	800bc68 <rcutils_allocator_is_valid>
 801b3a8:	b1c0      	cbz	r0, 801b3dc <rcutils_string_array_fini+0x44>
 801b3aa:	e9d4 3000 	ldrd	r3, r0, [r4]
 801b3ae:	b16b      	cbz	r3, 801b3cc <rcutils_string_array_fini+0x34>
 801b3b0:	2500      	movs	r5, #0
 801b3b2:	462e      	mov	r6, r5
 801b3b4:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801b3b8:	68e3      	ldr	r3, [r4, #12]
 801b3ba:	69a1      	ldr	r1, [r4, #24]
 801b3bc:	4798      	blx	r3
 801b3be:	e9d4 3000 	ldrd	r3, r0, [r4]
 801b3c2:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801b3c6:	3501      	adds	r5, #1
 801b3c8:	42ab      	cmp	r3, r5
 801b3ca:	d8f3      	bhi.n	801b3b4 <rcutils_string_array_fini+0x1c>
 801b3cc:	68e3      	ldr	r3, [r4, #12]
 801b3ce:	69a1      	ldr	r1, [r4, #24]
 801b3d0:	4798      	blx	r3
 801b3d2:	2300      	movs	r3, #0
 801b3d4:	e9c4 3300 	strd	r3, r3, [r4]
 801b3d8:	2000      	movs	r0, #0
 801b3da:	bd70      	pop	{r4, r5, r6, pc}
 801b3dc:	200b      	movs	r0, #11
 801b3de:	bd70      	pop	{r4, r5, r6, pc}
 801b3e0:	200b      	movs	r0, #11
 801b3e2:	4770      	bx	lr

0801b3e4 <rmw_discovery_options_init>:
 801b3e4:	b328      	cbz	r0, 801b432 <rmw_discovery_options_init+0x4e>
 801b3e6:	b570      	push	{r4, r5, r6, lr}
 801b3e8:	4604      	mov	r4, r0
 801b3ea:	4610      	mov	r0, r2
 801b3ec:	460e      	mov	r6, r1
 801b3ee:	4615      	mov	r5, r2
 801b3f0:	f7f0 fc3a 	bl	800bc68 <rcutils_allocator_is_valid>
 801b3f4:	b1d8      	cbz	r0, 801b42e <rmw_discovery_options_init+0x4a>
 801b3f6:	68a3      	ldr	r3, [r4, #8]
 801b3f8:	b9cb      	cbnz	r3, 801b42e <rmw_discovery_options_init+0x4a>
 801b3fa:	6863      	ldr	r3, [r4, #4]
 801b3fc:	b9bb      	cbnz	r3, 801b42e <rmw_discovery_options_init+0x4a>
 801b3fe:	7823      	ldrb	r3, [r4, #0]
 801b400:	b90b      	cbnz	r3, 801b406 <rmw_discovery_options_init+0x22>
 801b402:	2302      	movs	r3, #2
 801b404:	7023      	strb	r3, [r4, #0]
 801b406:	b186      	cbz	r6, 801b42a <rmw_discovery_options_init+0x46>
 801b408:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801b40c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b410:	4630      	mov	r0, r6
 801b412:	4798      	blx	r3
 801b414:	6060      	str	r0, [r4, #4]
 801b416:	b170      	cbz	r0, 801b436 <rmw_discovery_options_init+0x52>
 801b418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b41a:	f104 0c0c 	add.w	ip, r4, #12
 801b41e:	60a6      	str	r6, [r4, #8]
 801b420:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b424:	682b      	ldr	r3, [r5, #0]
 801b426:	f8cc 3000 	str.w	r3, [ip]
 801b42a:	2000      	movs	r0, #0
 801b42c:	bd70      	pop	{r4, r5, r6, pc}
 801b42e:	200b      	movs	r0, #11
 801b430:	bd70      	pop	{r4, r5, r6, pc}
 801b432:	200b      	movs	r0, #11
 801b434:	4770      	bx	lr
 801b436:	200a      	movs	r0, #10
 801b438:	bd70      	pop	{r4, r5, r6, pc}
 801b43a:	bf00      	nop

0801b43c <rmw_enclave_options_copy>:
 801b43c:	b1e0      	cbz	r0, 801b478 <rmw_enclave_options_copy+0x3c>
 801b43e:	b570      	push	{r4, r5, r6, lr}
 801b440:	4616      	mov	r6, r2
 801b442:	b082      	sub	sp, #8
 801b444:	b1aa      	cbz	r2, 801b472 <rmw_enclave_options_copy+0x36>
 801b446:	4605      	mov	r5, r0
 801b448:	4608      	mov	r0, r1
 801b44a:	460c      	mov	r4, r1
 801b44c:	f7f0 fc0c 	bl	800bc68 <rcutils_allocator_is_valid>
 801b450:	b178      	cbz	r0, 801b472 <rmw_enclave_options_copy+0x36>
 801b452:	f104 030c 	add.w	r3, r4, #12
 801b456:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b45a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b45e:	4628      	mov	r0, r5
 801b460:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801b464:	f7fc f8e0 	bl	8017628 <rcutils_strdup>
 801b468:	b140      	cbz	r0, 801b47c <rmw_enclave_options_copy+0x40>
 801b46a:	6030      	str	r0, [r6, #0]
 801b46c:	2000      	movs	r0, #0
 801b46e:	b002      	add	sp, #8
 801b470:	bd70      	pop	{r4, r5, r6, pc}
 801b472:	200b      	movs	r0, #11
 801b474:	b002      	add	sp, #8
 801b476:	bd70      	pop	{r4, r5, r6, pc}
 801b478:	200b      	movs	r0, #11
 801b47a:	4770      	bx	lr
 801b47c:	200a      	movs	r0, #10
 801b47e:	e7f6      	b.n	801b46e <rmw_enclave_options_copy+0x32>

0801b480 <rmw_enclave_options_fini>:
 801b480:	b170      	cbz	r0, 801b4a0 <rmw_enclave_options_fini+0x20>
 801b482:	b538      	push	{r3, r4, r5, lr}
 801b484:	4605      	mov	r5, r0
 801b486:	4608      	mov	r0, r1
 801b488:	460c      	mov	r4, r1
 801b48a:	f7f0 fbed 	bl	800bc68 <rcutils_allocator_is_valid>
 801b48e:	b128      	cbz	r0, 801b49c <rmw_enclave_options_fini+0x1c>
 801b490:	4628      	mov	r0, r5
 801b492:	6863      	ldr	r3, [r4, #4]
 801b494:	6921      	ldr	r1, [r4, #16]
 801b496:	4798      	blx	r3
 801b498:	2000      	movs	r0, #0
 801b49a:	bd38      	pop	{r3, r4, r5, pc}
 801b49c:	200b      	movs	r0, #11
 801b49e:	bd38      	pop	{r3, r4, r5, pc}
 801b4a0:	200b      	movs	r0, #11
 801b4a2:	4770      	bx	lr

0801b4a4 <rmw_get_default_security_options>:
 801b4a4:	2200      	movs	r2, #0
 801b4a6:	7002      	strb	r2, [r0, #0]
 801b4a8:	6042      	str	r2, [r0, #4]
 801b4aa:	4770      	bx	lr

0801b4ac <on_status>:
 801b4ac:	b082      	sub	sp, #8
 801b4ae:	b002      	add	sp, #8
 801b4b0:	4770      	bx	lr
 801b4b2:	bf00      	nop

0801b4b4 <on_topic>:
 801b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4b8:	4a22      	ldr	r2, [pc, #136]	@ (801b544 <on_topic+0x90>)
 801b4ba:	b094      	sub	sp, #80	@ 0x50
 801b4bc:	6812      	ldr	r2, [r2, #0]
 801b4be:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801b4c0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b4c4:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801b4c8:	b3c2      	cbz	r2, 801b53c <on_topic+0x88>
 801b4ca:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801b4ce:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801b4d2:	e001      	b.n	801b4d8 <on_topic+0x24>
 801b4d4:	6852      	ldr	r2, [r2, #4]
 801b4d6:	b38a      	cbz	r2, 801b53c <on_topic+0x88>
 801b4d8:	6894      	ldr	r4, [r2, #8]
 801b4da:	8aa3      	ldrh	r3, [r4, #20]
 801b4dc:	428b      	cmp	r3, r1
 801b4de:	d1f9      	bne.n	801b4d4 <on_topic+0x20>
 801b4e0:	7da3      	ldrb	r3, [r4, #22]
 801b4e2:	4283      	cmp	r3, r0
 801b4e4:	d1f6      	bne.n	801b4d4 <on_topic+0x20>
 801b4e6:	2248      	movs	r2, #72	@ 0x48
 801b4e8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801b4ec:	4668      	mov	r0, sp
 801b4ee:	f000 feb6 	bl	801c25e <memcpy>
 801b4f2:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801b4f6:	cb0c      	ldmia	r3, {r2, r3}
 801b4f8:	4620      	mov	r0, r4
 801b4fa:	f7f1 f86f 	bl	800c5dc <rmw_uxrce_get_static_input_buffer_for_entity>
 801b4fe:	4607      	mov	r7, r0
 801b500:	b1e0      	cbz	r0, 801b53c <on_topic+0x88>
 801b502:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801b506:	4632      	mov	r2, r6
 801b508:	4628      	mov	r0, r5
 801b50a:	f108 0110 	add.w	r1, r8, #16
 801b50e:	f7f2 ffaf 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 801b512:	b930      	cbnz	r0, 801b522 <on_topic+0x6e>
 801b514:	480c      	ldr	r0, [pc, #48]	@ (801b548 <on_topic+0x94>)
 801b516:	4639      	mov	r1, r7
 801b518:	b014      	add	sp, #80	@ 0x50
 801b51a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b51e:	f7fc bc0d 	b.w	8017d3c <put_memory>
 801b522:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801b526:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801b52a:	f7f0 fe55 	bl	800c1d8 <rmw_uros_epoch_nanos>
 801b52e:	2305      	movs	r3, #5
 801b530:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801b534:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b538:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801b53c:	b014      	add	sp, #80	@ 0x50
 801b53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b542:	bf00      	nop
 801b544:	200104e0 	.word	0x200104e0
 801b548:	2000fd30 	.word	0x2000fd30

0801b54c <on_request>:
 801b54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b550:	4823      	ldr	r0, [pc, #140]	@ (801b5e0 <on_request+0x94>)
 801b552:	b094      	sub	sp, #80	@ 0x50
 801b554:	6800      	ldr	r0, [r0, #0]
 801b556:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b558:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b55c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b55e:	2800      	cmp	r0, #0
 801b560:	d03b      	beq.n	801b5da <on_request+0x8e>
 801b562:	461d      	mov	r5, r3
 801b564:	e001      	b.n	801b56a <on_request+0x1e>
 801b566:	6840      	ldr	r0, [r0, #4]
 801b568:	b3b8      	cbz	r0, 801b5da <on_request+0x8e>
 801b56a:	6884      	ldr	r4, [r0, #8]
 801b56c:	8b21      	ldrh	r1, [r4, #24]
 801b56e:	4291      	cmp	r1, r2
 801b570:	d1f9      	bne.n	801b566 <on_request+0x1a>
 801b572:	2248      	movs	r2, #72	@ 0x48
 801b574:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b578:	4668      	mov	r0, sp
 801b57a:	f000 fe70 	bl	801c25e <memcpy>
 801b57e:	f104 0320 	add.w	r3, r4, #32
 801b582:	cb0c      	ldmia	r3, {r2, r3}
 801b584:	4620      	mov	r0, r4
 801b586:	f7f1 f829 	bl	800c5dc <rmw_uxrce_get_static_input_buffer_for_entity>
 801b58a:	4680      	mov	r8, r0
 801b58c:	b328      	cbz	r0, 801b5da <on_request+0x8e>
 801b58e:	4638      	mov	r0, r7
 801b590:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b594:	4632      	mov	r2, r6
 801b596:	f107 0110 	add.w	r1, r7, #16
 801b59a:	f7f2 ff69 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 801b59e:	b930      	cbnz	r0, 801b5ae <on_request+0x62>
 801b5a0:	4810      	ldr	r0, [pc, #64]	@ (801b5e4 <on_request+0x98>)
 801b5a2:	4641      	mov	r1, r8
 801b5a4:	b014      	add	sp, #80	@ 0x50
 801b5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b5aa:	f7fc bbc7 	b.w	8017d3c <put_memory>
 801b5ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5b0:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801b5b4:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b5b8:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b5bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b5c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b5c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 801b5c8:	f7f0 fe06 	bl	800c1d8 <rmw_uros_epoch_nanos>
 801b5cc:	2303      	movs	r3, #3
 801b5ce:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b5d2:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b5d6:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b5da:	b014      	add	sp, #80	@ 0x50
 801b5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5e0:	20010098 	.word	0x20010098
 801b5e4:	2000fd30 	.word	0x2000fd30

0801b5e8 <on_reply>:
 801b5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b5ec:	4821      	ldr	r0, [pc, #132]	@ (801b674 <on_reply+0x8c>)
 801b5ee:	b094      	sub	sp, #80	@ 0x50
 801b5f0:	6800      	ldr	r0, [r0, #0]
 801b5f2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b5f4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801b5f8:	9113      	str	r1, [sp, #76]	@ 0x4c
 801b5fa:	b3b8      	cbz	r0, 801b66c <on_reply+0x84>
 801b5fc:	461d      	mov	r5, r3
 801b5fe:	e001      	b.n	801b604 <on_reply+0x1c>
 801b600:	6840      	ldr	r0, [r0, #4]
 801b602:	b398      	cbz	r0, 801b66c <on_reply+0x84>
 801b604:	6884      	ldr	r4, [r0, #8]
 801b606:	8b21      	ldrh	r1, [r4, #24]
 801b608:	4291      	cmp	r1, r2
 801b60a:	d1f9      	bne.n	801b600 <on_reply+0x18>
 801b60c:	2248      	movs	r2, #72	@ 0x48
 801b60e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801b612:	4668      	mov	r0, sp
 801b614:	f000 fe23 	bl	801c25e <memcpy>
 801b618:	f104 0320 	add.w	r3, r4, #32
 801b61c:	cb0c      	ldmia	r3, {r2, r3}
 801b61e:	4620      	mov	r0, r4
 801b620:	f7f0 ffdc 	bl	800c5dc <rmw_uxrce_get_static_input_buffer_for_entity>
 801b624:	4680      	mov	r8, r0
 801b626:	b308      	cbz	r0, 801b66c <on_reply+0x84>
 801b628:	4638      	mov	r0, r7
 801b62a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801b62e:	4632      	mov	r2, r6
 801b630:	f107 0110 	add.w	r1, r7, #16
 801b634:	f7f2 ff1c 	bl	800e470 <ucdr_deserialize_array_uint8_t>
 801b638:	b930      	cbnz	r0, 801b648 <on_reply+0x60>
 801b63a:	480f      	ldr	r0, [pc, #60]	@ (801b678 <on_reply+0x90>)
 801b63c:	4641      	mov	r1, r8
 801b63e:	b014      	add	sp, #80	@ 0x50
 801b640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b644:	f7fc bb7a 	b.w	8017d3c <put_memory>
 801b648:	2200      	movs	r2, #0
 801b64a:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801b64e:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801b652:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801b656:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801b65a:	f7f0 fdbd 	bl	800c1d8 <rmw_uros_epoch_nanos>
 801b65e:	2304      	movs	r3, #4
 801b660:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801b664:	e942 0102 	strd	r0, r1, [r2, #-8]
 801b668:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801b66c:	b014      	add	sp, #80	@ 0x50
 801b66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b672:	bf00      	nop
 801b674:	2000ffc0 	.word	0x2000ffc0
 801b678:	2000fd30 	.word	0x2000fd30

0801b67c <rmw_create_guard_condition>:
 801b67c:	b538      	push	{r3, r4, r5, lr}
 801b67e:	4605      	mov	r5, r0
 801b680:	4807      	ldr	r0, [pc, #28]	@ (801b6a0 <rmw_create_guard_condition+0x24>)
 801b682:	f7fc fb4b 	bl	8017d1c <get_memory>
 801b686:	b148      	cbz	r0, 801b69c <rmw_create_guard_condition+0x20>
 801b688:	6884      	ldr	r4, [r0, #8]
 801b68a:	2300      	movs	r3, #0
 801b68c:	7423      	strb	r3, [r4, #16]
 801b68e:	61e5      	str	r5, [r4, #28]
 801b690:	f7fc fbca 	bl	8017e28 <rmw_get_implementation_identifier>
 801b694:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801b698:	f104 0014 	add.w	r0, r4, #20
 801b69c:	bd38      	pop	{r3, r4, r5, pc}
 801b69e:	bf00      	nop
 801b6a0:	2000db0c 	.word	0x2000db0c

0801b6a4 <rmw_destroy_guard_condition>:
 801b6a4:	b508      	push	{r3, lr}
 801b6a6:	4b08      	ldr	r3, [pc, #32]	@ (801b6c8 <rmw_destroy_guard_condition+0x24>)
 801b6a8:	6819      	ldr	r1, [r3, #0]
 801b6aa:	b911      	cbnz	r1, 801b6b2 <rmw_destroy_guard_condition+0xe>
 801b6ac:	e00a      	b.n	801b6c4 <rmw_destroy_guard_condition+0x20>
 801b6ae:	6849      	ldr	r1, [r1, #4]
 801b6b0:	b141      	cbz	r1, 801b6c4 <rmw_destroy_guard_condition+0x20>
 801b6b2:	688b      	ldr	r3, [r1, #8]
 801b6b4:	3314      	adds	r3, #20
 801b6b6:	4298      	cmp	r0, r3
 801b6b8:	d1f9      	bne.n	801b6ae <rmw_destroy_guard_condition+0xa>
 801b6ba:	4803      	ldr	r0, [pc, #12]	@ (801b6c8 <rmw_destroy_guard_condition+0x24>)
 801b6bc:	f7fc fb3e 	bl	8017d3c <put_memory>
 801b6c0:	2000      	movs	r0, #0
 801b6c2:	bd08      	pop	{r3, pc}
 801b6c4:	2001      	movs	r0, #1
 801b6c6:	bd08      	pop	{r3, pc}
 801b6c8:	2000db0c 	.word	0x2000db0c

0801b6cc <rmw_trigger_guard_condition>:
 801b6cc:	b160      	cbz	r0, 801b6e8 <rmw_trigger_guard_condition+0x1c>
 801b6ce:	b510      	push	{r4, lr}
 801b6d0:	4604      	mov	r4, r0
 801b6d2:	6800      	ldr	r0, [r0, #0]
 801b6d4:	f7f1 f904 	bl	800c8e0 <is_uxrce_rmw_identifier_valid>
 801b6d8:	b908      	cbnz	r0, 801b6de <rmw_trigger_guard_condition+0x12>
 801b6da:	2001      	movs	r0, #1
 801b6dc:	bd10      	pop	{r4, pc}
 801b6de:	6863      	ldr	r3, [r4, #4]
 801b6e0:	2201      	movs	r2, #1
 801b6e2:	741a      	strb	r2, [r3, #16]
 801b6e4:	2000      	movs	r0, #0
 801b6e6:	bd10      	pop	{r4, pc}
 801b6e8:	2001      	movs	r0, #1
 801b6ea:	4770      	bx	lr

0801b6ec <calloc>:
 801b6ec:	4b02      	ldr	r3, [pc, #8]	@ (801b6f8 <calloc+0xc>)
 801b6ee:	460a      	mov	r2, r1
 801b6f0:	4601      	mov	r1, r0
 801b6f2:	6818      	ldr	r0, [r3, #0]
 801b6f4:	f000 b802 	b.w	801b6fc <_calloc_r>
 801b6f8:	200042fc 	.word	0x200042fc

0801b6fc <_calloc_r>:
 801b6fc:	b570      	push	{r4, r5, r6, lr}
 801b6fe:	fba1 5402 	umull	r5, r4, r1, r2
 801b702:	b934      	cbnz	r4, 801b712 <_calloc_r+0x16>
 801b704:	4629      	mov	r1, r5
 801b706:	f000 f899 	bl	801b83c <_malloc_r>
 801b70a:	4606      	mov	r6, r0
 801b70c:	b928      	cbnz	r0, 801b71a <_calloc_r+0x1e>
 801b70e:	4630      	mov	r0, r6
 801b710:	bd70      	pop	{r4, r5, r6, pc}
 801b712:	220c      	movs	r2, #12
 801b714:	6002      	str	r2, [r0, #0]
 801b716:	2600      	movs	r6, #0
 801b718:	e7f9      	b.n	801b70e <_calloc_r+0x12>
 801b71a:	462a      	mov	r2, r5
 801b71c:	4621      	mov	r1, r4
 801b71e:	f000 fcc3 	bl	801c0a8 <memset>
 801b722:	e7f4      	b.n	801b70e <_calloc_r+0x12>

0801b724 <exit>:
 801b724:	b508      	push	{r3, lr}
 801b726:	4b06      	ldr	r3, [pc, #24]	@ (801b740 <exit+0x1c>)
 801b728:	4604      	mov	r4, r0
 801b72a:	b113      	cbz	r3, 801b732 <exit+0xe>
 801b72c:	2100      	movs	r1, #0
 801b72e:	f3af 8000 	nop.w
 801b732:	4b04      	ldr	r3, [pc, #16]	@ (801b744 <exit+0x20>)
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	b103      	cbz	r3, 801b73a <exit+0x16>
 801b738:	4798      	blx	r3
 801b73a:	4620      	mov	r0, r4
 801b73c:	f7e8 f940 	bl	80039c0 <_exit>
 801b740:	00000000 	.word	0x00000000
 801b744:	20012a3c 	.word	0x20012a3c

0801b748 <getenv>:
 801b748:	b507      	push	{r0, r1, r2, lr}
 801b74a:	4b04      	ldr	r3, [pc, #16]	@ (801b75c <getenv+0x14>)
 801b74c:	4601      	mov	r1, r0
 801b74e:	aa01      	add	r2, sp, #4
 801b750:	6818      	ldr	r0, [r3, #0]
 801b752:	f000 f805 	bl	801b760 <_findenv_r>
 801b756:	b003      	add	sp, #12
 801b758:	f85d fb04 	ldr.w	pc, [sp], #4
 801b75c:	200042fc 	.word	0x200042fc

0801b760 <_findenv_r>:
 801b760:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b764:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801b7d4 <_findenv_r+0x74>
 801b768:	4606      	mov	r6, r0
 801b76a:	4689      	mov	r9, r1
 801b76c:	4617      	mov	r7, r2
 801b76e:	f000 fda3 	bl	801c2b8 <__env_lock>
 801b772:	f8da 4000 	ldr.w	r4, [sl]
 801b776:	b134      	cbz	r4, 801b786 <_findenv_r+0x26>
 801b778:	464b      	mov	r3, r9
 801b77a:	4698      	mov	r8, r3
 801b77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b780:	b13a      	cbz	r2, 801b792 <_findenv_r+0x32>
 801b782:	2a3d      	cmp	r2, #61	@ 0x3d
 801b784:	d1f9      	bne.n	801b77a <_findenv_r+0x1a>
 801b786:	4630      	mov	r0, r6
 801b788:	f000 fd9c 	bl	801c2c4 <__env_unlock>
 801b78c:	2000      	movs	r0, #0
 801b78e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b792:	eba8 0809 	sub.w	r8, r8, r9
 801b796:	46a3      	mov	fp, r4
 801b798:	f854 0b04 	ldr.w	r0, [r4], #4
 801b79c:	2800      	cmp	r0, #0
 801b79e:	d0f2      	beq.n	801b786 <_findenv_r+0x26>
 801b7a0:	4642      	mov	r2, r8
 801b7a2:	4649      	mov	r1, r9
 801b7a4:	f000 fc95 	bl	801c0d2 <strncmp>
 801b7a8:	2800      	cmp	r0, #0
 801b7aa:	d1f4      	bne.n	801b796 <_findenv_r+0x36>
 801b7ac:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b7b0:	eb03 0508 	add.w	r5, r3, r8
 801b7b4:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b7b8:	2b3d      	cmp	r3, #61	@ 0x3d
 801b7ba:	d1ec      	bne.n	801b796 <_findenv_r+0x36>
 801b7bc:	f8da 3000 	ldr.w	r3, [sl]
 801b7c0:	ebab 0303 	sub.w	r3, fp, r3
 801b7c4:	109b      	asrs	r3, r3, #2
 801b7c6:	4630      	mov	r0, r6
 801b7c8:	603b      	str	r3, [r7, #0]
 801b7ca:	f000 fd7b 	bl	801c2c4 <__env_unlock>
 801b7ce:	1c68      	adds	r0, r5, #1
 801b7d0:	e7dd      	b.n	801b78e <_findenv_r+0x2e>
 801b7d2:	bf00      	nop
 801b7d4:	20000020 	.word	0x20000020

0801b7d8 <malloc>:
 801b7d8:	4b02      	ldr	r3, [pc, #8]	@ (801b7e4 <malloc+0xc>)
 801b7da:	4601      	mov	r1, r0
 801b7dc:	6818      	ldr	r0, [r3, #0]
 801b7de:	f000 b82d 	b.w	801b83c <_malloc_r>
 801b7e2:	bf00      	nop
 801b7e4:	200042fc 	.word	0x200042fc

0801b7e8 <free>:
 801b7e8:	4b02      	ldr	r3, [pc, #8]	@ (801b7f4 <free+0xc>)
 801b7ea:	4601      	mov	r1, r0
 801b7ec:	6818      	ldr	r0, [r3, #0]
 801b7ee:	f000 bd6f 	b.w	801c2d0 <_free_r>
 801b7f2:	bf00      	nop
 801b7f4:	200042fc 	.word	0x200042fc

0801b7f8 <sbrk_aligned>:
 801b7f8:	b570      	push	{r4, r5, r6, lr}
 801b7fa:	4e0f      	ldr	r6, [pc, #60]	@ (801b838 <sbrk_aligned+0x40>)
 801b7fc:	460c      	mov	r4, r1
 801b7fe:	6831      	ldr	r1, [r6, #0]
 801b800:	4605      	mov	r5, r0
 801b802:	b911      	cbnz	r1, 801b80a <sbrk_aligned+0x12>
 801b804:	f000 fcd4 	bl	801c1b0 <_sbrk_r>
 801b808:	6030      	str	r0, [r6, #0]
 801b80a:	4621      	mov	r1, r4
 801b80c:	4628      	mov	r0, r5
 801b80e:	f000 fccf 	bl	801c1b0 <_sbrk_r>
 801b812:	1c43      	adds	r3, r0, #1
 801b814:	d103      	bne.n	801b81e <sbrk_aligned+0x26>
 801b816:	f04f 34ff 	mov.w	r4, #4294967295
 801b81a:	4620      	mov	r0, r4
 801b81c:	bd70      	pop	{r4, r5, r6, pc}
 801b81e:	1cc4      	adds	r4, r0, #3
 801b820:	f024 0403 	bic.w	r4, r4, #3
 801b824:	42a0      	cmp	r0, r4
 801b826:	d0f8      	beq.n	801b81a <sbrk_aligned+0x22>
 801b828:	1a21      	subs	r1, r4, r0
 801b82a:	4628      	mov	r0, r5
 801b82c:	f000 fcc0 	bl	801c1b0 <_sbrk_r>
 801b830:	3001      	adds	r0, #1
 801b832:	d1f2      	bne.n	801b81a <sbrk_aligned+0x22>
 801b834:	e7ef      	b.n	801b816 <sbrk_aligned+0x1e>
 801b836:	bf00      	nop
 801b838:	200128fc 	.word	0x200128fc

0801b83c <_malloc_r>:
 801b83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b840:	1ccd      	adds	r5, r1, #3
 801b842:	f025 0503 	bic.w	r5, r5, #3
 801b846:	3508      	adds	r5, #8
 801b848:	2d0c      	cmp	r5, #12
 801b84a:	bf38      	it	cc
 801b84c:	250c      	movcc	r5, #12
 801b84e:	2d00      	cmp	r5, #0
 801b850:	4606      	mov	r6, r0
 801b852:	db01      	blt.n	801b858 <_malloc_r+0x1c>
 801b854:	42a9      	cmp	r1, r5
 801b856:	d904      	bls.n	801b862 <_malloc_r+0x26>
 801b858:	230c      	movs	r3, #12
 801b85a:	6033      	str	r3, [r6, #0]
 801b85c:	2000      	movs	r0, #0
 801b85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b862:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b938 <_malloc_r+0xfc>
 801b866:	f000 f869 	bl	801b93c <__malloc_lock>
 801b86a:	f8d8 3000 	ldr.w	r3, [r8]
 801b86e:	461c      	mov	r4, r3
 801b870:	bb44      	cbnz	r4, 801b8c4 <_malloc_r+0x88>
 801b872:	4629      	mov	r1, r5
 801b874:	4630      	mov	r0, r6
 801b876:	f7ff ffbf 	bl	801b7f8 <sbrk_aligned>
 801b87a:	1c43      	adds	r3, r0, #1
 801b87c:	4604      	mov	r4, r0
 801b87e:	d158      	bne.n	801b932 <_malloc_r+0xf6>
 801b880:	f8d8 4000 	ldr.w	r4, [r8]
 801b884:	4627      	mov	r7, r4
 801b886:	2f00      	cmp	r7, #0
 801b888:	d143      	bne.n	801b912 <_malloc_r+0xd6>
 801b88a:	2c00      	cmp	r4, #0
 801b88c:	d04b      	beq.n	801b926 <_malloc_r+0xea>
 801b88e:	6823      	ldr	r3, [r4, #0]
 801b890:	4639      	mov	r1, r7
 801b892:	4630      	mov	r0, r6
 801b894:	eb04 0903 	add.w	r9, r4, r3
 801b898:	f000 fc8a 	bl	801c1b0 <_sbrk_r>
 801b89c:	4581      	cmp	r9, r0
 801b89e:	d142      	bne.n	801b926 <_malloc_r+0xea>
 801b8a0:	6821      	ldr	r1, [r4, #0]
 801b8a2:	1a6d      	subs	r5, r5, r1
 801b8a4:	4629      	mov	r1, r5
 801b8a6:	4630      	mov	r0, r6
 801b8a8:	f7ff ffa6 	bl	801b7f8 <sbrk_aligned>
 801b8ac:	3001      	adds	r0, #1
 801b8ae:	d03a      	beq.n	801b926 <_malloc_r+0xea>
 801b8b0:	6823      	ldr	r3, [r4, #0]
 801b8b2:	442b      	add	r3, r5
 801b8b4:	6023      	str	r3, [r4, #0]
 801b8b6:	f8d8 3000 	ldr.w	r3, [r8]
 801b8ba:	685a      	ldr	r2, [r3, #4]
 801b8bc:	bb62      	cbnz	r2, 801b918 <_malloc_r+0xdc>
 801b8be:	f8c8 7000 	str.w	r7, [r8]
 801b8c2:	e00f      	b.n	801b8e4 <_malloc_r+0xa8>
 801b8c4:	6822      	ldr	r2, [r4, #0]
 801b8c6:	1b52      	subs	r2, r2, r5
 801b8c8:	d420      	bmi.n	801b90c <_malloc_r+0xd0>
 801b8ca:	2a0b      	cmp	r2, #11
 801b8cc:	d917      	bls.n	801b8fe <_malloc_r+0xc2>
 801b8ce:	1961      	adds	r1, r4, r5
 801b8d0:	42a3      	cmp	r3, r4
 801b8d2:	6025      	str	r5, [r4, #0]
 801b8d4:	bf18      	it	ne
 801b8d6:	6059      	strne	r1, [r3, #4]
 801b8d8:	6863      	ldr	r3, [r4, #4]
 801b8da:	bf08      	it	eq
 801b8dc:	f8c8 1000 	streq.w	r1, [r8]
 801b8e0:	5162      	str	r2, [r4, r5]
 801b8e2:	604b      	str	r3, [r1, #4]
 801b8e4:	4630      	mov	r0, r6
 801b8e6:	f000 f82f 	bl	801b948 <__malloc_unlock>
 801b8ea:	f104 000b 	add.w	r0, r4, #11
 801b8ee:	1d23      	adds	r3, r4, #4
 801b8f0:	f020 0007 	bic.w	r0, r0, #7
 801b8f4:	1ac2      	subs	r2, r0, r3
 801b8f6:	bf1c      	itt	ne
 801b8f8:	1a1b      	subne	r3, r3, r0
 801b8fa:	50a3      	strne	r3, [r4, r2]
 801b8fc:	e7af      	b.n	801b85e <_malloc_r+0x22>
 801b8fe:	6862      	ldr	r2, [r4, #4]
 801b900:	42a3      	cmp	r3, r4
 801b902:	bf0c      	ite	eq
 801b904:	f8c8 2000 	streq.w	r2, [r8]
 801b908:	605a      	strne	r2, [r3, #4]
 801b90a:	e7eb      	b.n	801b8e4 <_malloc_r+0xa8>
 801b90c:	4623      	mov	r3, r4
 801b90e:	6864      	ldr	r4, [r4, #4]
 801b910:	e7ae      	b.n	801b870 <_malloc_r+0x34>
 801b912:	463c      	mov	r4, r7
 801b914:	687f      	ldr	r7, [r7, #4]
 801b916:	e7b6      	b.n	801b886 <_malloc_r+0x4a>
 801b918:	461a      	mov	r2, r3
 801b91a:	685b      	ldr	r3, [r3, #4]
 801b91c:	42a3      	cmp	r3, r4
 801b91e:	d1fb      	bne.n	801b918 <_malloc_r+0xdc>
 801b920:	2300      	movs	r3, #0
 801b922:	6053      	str	r3, [r2, #4]
 801b924:	e7de      	b.n	801b8e4 <_malloc_r+0xa8>
 801b926:	230c      	movs	r3, #12
 801b928:	6033      	str	r3, [r6, #0]
 801b92a:	4630      	mov	r0, r6
 801b92c:	f000 f80c 	bl	801b948 <__malloc_unlock>
 801b930:	e794      	b.n	801b85c <_malloc_r+0x20>
 801b932:	6005      	str	r5, [r0, #0]
 801b934:	e7d6      	b.n	801b8e4 <_malloc_r+0xa8>
 801b936:	bf00      	nop
 801b938:	20012900 	.word	0x20012900

0801b93c <__malloc_lock>:
 801b93c:	4801      	ldr	r0, [pc, #4]	@ (801b944 <__malloc_lock+0x8>)
 801b93e:	f000 bc84 	b.w	801c24a <__retarget_lock_acquire_recursive>
 801b942:	bf00      	nop
 801b944:	20012a45 	.word	0x20012a45

0801b948 <__malloc_unlock>:
 801b948:	4801      	ldr	r0, [pc, #4]	@ (801b950 <__malloc_unlock+0x8>)
 801b94a:	f000 bc7f 	b.w	801c24c <__retarget_lock_release_recursive>
 801b94e:	bf00      	nop
 801b950:	20012a45 	.word	0x20012a45

0801b954 <srand>:
 801b954:	b538      	push	{r3, r4, r5, lr}
 801b956:	4b10      	ldr	r3, [pc, #64]	@ (801b998 <srand+0x44>)
 801b958:	681d      	ldr	r5, [r3, #0]
 801b95a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b95c:	4604      	mov	r4, r0
 801b95e:	b9b3      	cbnz	r3, 801b98e <srand+0x3a>
 801b960:	2018      	movs	r0, #24
 801b962:	f7ff ff39 	bl	801b7d8 <malloc>
 801b966:	4602      	mov	r2, r0
 801b968:	6328      	str	r0, [r5, #48]	@ 0x30
 801b96a:	b920      	cbnz	r0, 801b976 <srand+0x22>
 801b96c:	4b0b      	ldr	r3, [pc, #44]	@ (801b99c <srand+0x48>)
 801b96e:	480c      	ldr	r0, [pc, #48]	@ (801b9a0 <srand+0x4c>)
 801b970:	2146      	movs	r1, #70	@ 0x46
 801b972:	f000 fc83 	bl	801c27c <__assert_func>
 801b976:	490b      	ldr	r1, [pc, #44]	@ (801b9a4 <srand+0x50>)
 801b978:	4b0b      	ldr	r3, [pc, #44]	@ (801b9a8 <srand+0x54>)
 801b97a:	e9c0 1300 	strd	r1, r3, [r0]
 801b97e:	4b0b      	ldr	r3, [pc, #44]	@ (801b9ac <srand+0x58>)
 801b980:	6083      	str	r3, [r0, #8]
 801b982:	230b      	movs	r3, #11
 801b984:	8183      	strh	r3, [r0, #12]
 801b986:	2100      	movs	r1, #0
 801b988:	2001      	movs	r0, #1
 801b98a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b98e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b990:	2200      	movs	r2, #0
 801b992:	611c      	str	r4, [r3, #16]
 801b994:	615a      	str	r2, [r3, #20]
 801b996:	bd38      	pop	{r3, r4, r5, pc}
 801b998:	200042fc 	.word	0x200042fc
 801b99c:	0801eaf0 	.word	0x0801eaf0
 801b9a0:	0801eb07 	.word	0x0801eb07
 801b9a4:	abcd330e 	.word	0xabcd330e
 801b9a8:	e66d1234 	.word	0xe66d1234
 801b9ac:	0005deec 	.word	0x0005deec

0801b9b0 <rand>:
 801b9b0:	4b16      	ldr	r3, [pc, #88]	@ (801ba0c <rand+0x5c>)
 801b9b2:	b510      	push	{r4, lr}
 801b9b4:	681c      	ldr	r4, [r3, #0]
 801b9b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b9b8:	b9b3      	cbnz	r3, 801b9e8 <rand+0x38>
 801b9ba:	2018      	movs	r0, #24
 801b9bc:	f7ff ff0c 	bl	801b7d8 <malloc>
 801b9c0:	4602      	mov	r2, r0
 801b9c2:	6320      	str	r0, [r4, #48]	@ 0x30
 801b9c4:	b920      	cbnz	r0, 801b9d0 <rand+0x20>
 801b9c6:	4b12      	ldr	r3, [pc, #72]	@ (801ba10 <rand+0x60>)
 801b9c8:	4812      	ldr	r0, [pc, #72]	@ (801ba14 <rand+0x64>)
 801b9ca:	2152      	movs	r1, #82	@ 0x52
 801b9cc:	f000 fc56 	bl	801c27c <__assert_func>
 801b9d0:	4911      	ldr	r1, [pc, #68]	@ (801ba18 <rand+0x68>)
 801b9d2:	4b12      	ldr	r3, [pc, #72]	@ (801ba1c <rand+0x6c>)
 801b9d4:	e9c0 1300 	strd	r1, r3, [r0]
 801b9d8:	4b11      	ldr	r3, [pc, #68]	@ (801ba20 <rand+0x70>)
 801b9da:	6083      	str	r3, [r0, #8]
 801b9dc:	230b      	movs	r3, #11
 801b9de:	8183      	strh	r3, [r0, #12]
 801b9e0:	2100      	movs	r1, #0
 801b9e2:	2001      	movs	r0, #1
 801b9e4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b9e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b9ea:	480e      	ldr	r0, [pc, #56]	@ (801ba24 <rand+0x74>)
 801b9ec:	690b      	ldr	r3, [r1, #16]
 801b9ee:	694c      	ldr	r4, [r1, #20]
 801b9f0:	4a0d      	ldr	r2, [pc, #52]	@ (801ba28 <rand+0x78>)
 801b9f2:	4358      	muls	r0, r3
 801b9f4:	fb02 0004 	mla	r0, r2, r4, r0
 801b9f8:	fba3 3202 	umull	r3, r2, r3, r2
 801b9fc:	3301      	adds	r3, #1
 801b9fe:	eb40 0002 	adc.w	r0, r0, r2
 801ba02:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ba06:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ba0a:	bd10      	pop	{r4, pc}
 801ba0c:	200042fc 	.word	0x200042fc
 801ba10:	0801eaf0 	.word	0x0801eaf0
 801ba14:	0801eb07 	.word	0x0801eb07
 801ba18:	abcd330e 	.word	0xabcd330e
 801ba1c:	e66d1234 	.word	0xe66d1234
 801ba20:	0005deec 	.word	0x0005deec
 801ba24:	5851f42d 	.word	0x5851f42d
 801ba28:	4c957f2d 	.word	0x4c957f2d

0801ba2c <realloc>:
 801ba2c:	4b02      	ldr	r3, [pc, #8]	@ (801ba38 <realloc+0xc>)
 801ba2e:	460a      	mov	r2, r1
 801ba30:	4601      	mov	r1, r0
 801ba32:	6818      	ldr	r0, [r3, #0]
 801ba34:	f000 b802 	b.w	801ba3c <_realloc_r>
 801ba38:	200042fc 	.word	0x200042fc

0801ba3c <_realloc_r>:
 801ba3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba40:	4607      	mov	r7, r0
 801ba42:	4614      	mov	r4, r2
 801ba44:	460d      	mov	r5, r1
 801ba46:	b921      	cbnz	r1, 801ba52 <_realloc_r+0x16>
 801ba48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba4c:	4611      	mov	r1, r2
 801ba4e:	f7ff bef5 	b.w	801b83c <_malloc_r>
 801ba52:	b92a      	cbnz	r2, 801ba60 <_realloc_r+0x24>
 801ba54:	f000 fc3c 	bl	801c2d0 <_free_r>
 801ba58:	4625      	mov	r5, r4
 801ba5a:	4628      	mov	r0, r5
 801ba5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba60:	f000 fc80 	bl	801c364 <_malloc_usable_size_r>
 801ba64:	4284      	cmp	r4, r0
 801ba66:	4606      	mov	r6, r0
 801ba68:	d802      	bhi.n	801ba70 <_realloc_r+0x34>
 801ba6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801ba6e:	d8f4      	bhi.n	801ba5a <_realloc_r+0x1e>
 801ba70:	4621      	mov	r1, r4
 801ba72:	4638      	mov	r0, r7
 801ba74:	f7ff fee2 	bl	801b83c <_malloc_r>
 801ba78:	4680      	mov	r8, r0
 801ba7a:	b908      	cbnz	r0, 801ba80 <_realloc_r+0x44>
 801ba7c:	4645      	mov	r5, r8
 801ba7e:	e7ec      	b.n	801ba5a <_realloc_r+0x1e>
 801ba80:	42b4      	cmp	r4, r6
 801ba82:	4622      	mov	r2, r4
 801ba84:	4629      	mov	r1, r5
 801ba86:	bf28      	it	cs
 801ba88:	4632      	movcs	r2, r6
 801ba8a:	f000 fbe8 	bl	801c25e <memcpy>
 801ba8e:	4629      	mov	r1, r5
 801ba90:	4638      	mov	r0, r7
 801ba92:	f000 fc1d 	bl	801c2d0 <_free_r>
 801ba96:	e7f1      	b.n	801ba7c <_realloc_r+0x40>

0801ba98 <_strtoul_l.isra.0>:
 801ba98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba9c:	4e34      	ldr	r6, [pc, #208]	@ (801bb70 <_strtoul_l.isra.0+0xd8>)
 801ba9e:	4686      	mov	lr, r0
 801baa0:	460d      	mov	r5, r1
 801baa2:	4628      	mov	r0, r5
 801baa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801baa8:	5d37      	ldrb	r7, [r6, r4]
 801baaa:	f017 0708 	ands.w	r7, r7, #8
 801baae:	d1f8      	bne.n	801baa2 <_strtoul_l.isra.0+0xa>
 801bab0:	2c2d      	cmp	r4, #45	@ 0x2d
 801bab2:	d110      	bne.n	801bad6 <_strtoul_l.isra.0+0x3e>
 801bab4:	782c      	ldrb	r4, [r5, #0]
 801bab6:	2701      	movs	r7, #1
 801bab8:	1c85      	adds	r5, r0, #2
 801baba:	f033 0010 	bics.w	r0, r3, #16
 801babe:	d115      	bne.n	801baec <_strtoul_l.isra.0+0x54>
 801bac0:	2c30      	cmp	r4, #48	@ 0x30
 801bac2:	d10d      	bne.n	801bae0 <_strtoul_l.isra.0+0x48>
 801bac4:	7828      	ldrb	r0, [r5, #0]
 801bac6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801baca:	2858      	cmp	r0, #88	@ 0x58
 801bacc:	d108      	bne.n	801bae0 <_strtoul_l.isra.0+0x48>
 801bace:	786c      	ldrb	r4, [r5, #1]
 801bad0:	3502      	adds	r5, #2
 801bad2:	2310      	movs	r3, #16
 801bad4:	e00a      	b.n	801baec <_strtoul_l.isra.0+0x54>
 801bad6:	2c2b      	cmp	r4, #43	@ 0x2b
 801bad8:	bf04      	itt	eq
 801bada:	782c      	ldrbeq	r4, [r5, #0]
 801badc:	1c85      	addeq	r5, r0, #2
 801bade:	e7ec      	b.n	801baba <_strtoul_l.isra.0+0x22>
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d1f6      	bne.n	801bad2 <_strtoul_l.isra.0+0x3a>
 801bae4:	2c30      	cmp	r4, #48	@ 0x30
 801bae6:	bf14      	ite	ne
 801bae8:	230a      	movne	r3, #10
 801baea:	2308      	moveq	r3, #8
 801baec:	f04f 38ff 	mov.w	r8, #4294967295
 801baf0:	2600      	movs	r6, #0
 801baf2:	fbb8 f8f3 	udiv	r8, r8, r3
 801baf6:	fb03 f908 	mul.w	r9, r3, r8
 801bafa:	ea6f 0909 	mvn.w	r9, r9
 801bafe:	4630      	mov	r0, r6
 801bb00:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801bb04:	f1bc 0f09 	cmp.w	ip, #9
 801bb08:	d810      	bhi.n	801bb2c <_strtoul_l.isra.0+0x94>
 801bb0a:	4664      	mov	r4, ip
 801bb0c:	42a3      	cmp	r3, r4
 801bb0e:	dd1e      	ble.n	801bb4e <_strtoul_l.isra.0+0xb6>
 801bb10:	f1b6 3fff 	cmp.w	r6, #4294967295
 801bb14:	d007      	beq.n	801bb26 <_strtoul_l.isra.0+0x8e>
 801bb16:	4580      	cmp	r8, r0
 801bb18:	d316      	bcc.n	801bb48 <_strtoul_l.isra.0+0xb0>
 801bb1a:	d101      	bne.n	801bb20 <_strtoul_l.isra.0+0x88>
 801bb1c:	45a1      	cmp	r9, r4
 801bb1e:	db13      	blt.n	801bb48 <_strtoul_l.isra.0+0xb0>
 801bb20:	fb00 4003 	mla	r0, r0, r3, r4
 801bb24:	2601      	movs	r6, #1
 801bb26:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bb2a:	e7e9      	b.n	801bb00 <_strtoul_l.isra.0+0x68>
 801bb2c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801bb30:	f1bc 0f19 	cmp.w	ip, #25
 801bb34:	d801      	bhi.n	801bb3a <_strtoul_l.isra.0+0xa2>
 801bb36:	3c37      	subs	r4, #55	@ 0x37
 801bb38:	e7e8      	b.n	801bb0c <_strtoul_l.isra.0+0x74>
 801bb3a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801bb3e:	f1bc 0f19 	cmp.w	ip, #25
 801bb42:	d804      	bhi.n	801bb4e <_strtoul_l.isra.0+0xb6>
 801bb44:	3c57      	subs	r4, #87	@ 0x57
 801bb46:	e7e1      	b.n	801bb0c <_strtoul_l.isra.0+0x74>
 801bb48:	f04f 36ff 	mov.w	r6, #4294967295
 801bb4c:	e7eb      	b.n	801bb26 <_strtoul_l.isra.0+0x8e>
 801bb4e:	1c73      	adds	r3, r6, #1
 801bb50:	d106      	bne.n	801bb60 <_strtoul_l.isra.0+0xc8>
 801bb52:	2322      	movs	r3, #34	@ 0x22
 801bb54:	f8ce 3000 	str.w	r3, [lr]
 801bb58:	4630      	mov	r0, r6
 801bb5a:	b932      	cbnz	r2, 801bb6a <_strtoul_l.isra.0+0xd2>
 801bb5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bb60:	b107      	cbz	r7, 801bb64 <_strtoul_l.isra.0+0xcc>
 801bb62:	4240      	negs	r0, r0
 801bb64:	2a00      	cmp	r2, #0
 801bb66:	d0f9      	beq.n	801bb5c <_strtoul_l.isra.0+0xc4>
 801bb68:	b106      	cbz	r6, 801bb6c <_strtoul_l.isra.0+0xd4>
 801bb6a:	1e69      	subs	r1, r5, #1
 801bb6c:	6011      	str	r1, [r2, #0]
 801bb6e:	e7f5      	b.n	801bb5c <_strtoul_l.isra.0+0xc4>
 801bb70:	0801ebcf 	.word	0x0801ebcf

0801bb74 <strtoul>:
 801bb74:	4613      	mov	r3, r2
 801bb76:	460a      	mov	r2, r1
 801bb78:	4601      	mov	r1, r0
 801bb7a:	4802      	ldr	r0, [pc, #8]	@ (801bb84 <strtoul+0x10>)
 801bb7c:	6800      	ldr	r0, [r0, #0]
 801bb7e:	f7ff bf8b 	b.w	801ba98 <_strtoul_l.isra.0>
 801bb82:	bf00      	nop
 801bb84:	200042fc 	.word	0x200042fc

0801bb88 <std>:
 801bb88:	2300      	movs	r3, #0
 801bb8a:	b510      	push	{r4, lr}
 801bb8c:	4604      	mov	r4, r0
 801bb8e:	e9c0 3300 	strd	r3, r3, [r0]
 801bb92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bb96:	6083      	str	r3, [r0, #8]
 801bb98:	8181      	strh	r1, [r0, #12]
 801bb9a:	6643      	str	r3, [r0, #100]	@ 0x64
 801bb9c:	81c2      	strh	r2, [r0, #14]
 801bb9e:	6183      	str	r3, [r0, #24]
 801bba0:	4619      	mov	r1, r3
 801bba2:	2208      	movs	r2, #8
 801bba4:	305c      	adds	r0, #92	@ 0x5c
 801bba6:	f000 fa7f 	bl	801c0a8 <memset>
 801bbaa:	4b0d      	ldr	r3, [pc, #52]	@ (801bbe0 <std+0x58>)
 801bbac:	6263      	str	r3, [r4, #36]	@ 0x24
 801bbae:	4b0d      	ldr	r3, [pc, #52]	@ (801bbe4 <std+0x5c>)
 801bbb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801bbb2:	4b0d      	ldr	r3, [pc, #52]	@ (801bbe8 <std+0x60>)
 801bbb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801bbb6:	4b0d      	ldr	r3, [pc, #52]	@ (801bbec <std+0x64>)
 801bbb8:	6323      	str	r3, [r4, #48]	@ 0x30
 801bbba:	4b0d      	ldr	r3, [pc, #52]	@ (801bbf0 <std+0x68>)
 801bbbc:	6224      	str	r4, [r4, #32]
 801bbbe:	429c      	cmp	r4, r3
 801bbc0:	d006      	beq.n	801bbd0 <std+0x48>
 801bbc2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801bbc6:	4294      	cmp	r4, r2
 801bbc8:	d002      	beq.n	801bbd0 <std+0x48>
 801bbca:	33d0      	adds	r3, #208	@ 0xd0
 801bbcc:	429c      	cmp	r4, r3
 801bbce:	d105      	bne.n	801bbdc <std+0x54>
 801bbd0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801bbd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bbd8:	f000 bb36 	b.w	801c248 <__retarget_lock_init_recursive>
 801bbdc:	bd10      	pop	{r4, pc}
 801bbde:	bf00      	nop
 801bbe0:	0801be2d 	.word	0x0801be2d
 801bbe4:	0801be4f 	.word	0x0801be4f
 801bbe8:	0801be87 	.word	0x0801be87
 801bbec:	0801beab 	.word	0x0801beab
 801bbf0:	20012904 	.word	0x20012904

0801bbf4 <stdio_exit_handler>:
 801bbf4:	4a02      	ldr	r2, [pc, #8]	@ (801bc00 <stdio_exit_handler+0xc>)
 801bbf6:	4903      	ldr	r1, [pc, #12]	@ (801bc04 <stdio_exit_handler+0x10>)
 801bbf8:	4803      	ldr	r0, [pc, #12]	@ (801bc08 <stdio_exit_handler+0x14>)
 801bbfa:	f000 b869 	b.w	801bcd0 <_fwalk_sglue>
 801bbfe:	bf00      	nop
 801bc00:	200042f0 	.word	0x200042f0
 801bc04:	0801ca45 	.word	0x0801ca45
 801bc08:	20004300 	.word	0x20004300

0801bc0c <cleanup_stdio>:
 801bc0c:	6841      	ldr	r1, [r0, #4]
 801bc0e:	4b0c      	ldr	r3, [pc, #48]	@ (801bc40 <cleanup_stdio+0x34>)
 801bc10:	4299      	cmp	r1, r3
 801bc12:	b510      	push	{r4, lr}
 801bc14:	4604      	mov	r4, r0
 801bc16:	d001      	beq.n	801bc1c <cleanup_stdio+0x10>
 801bc18:	f000 ff14 	bl	801ca44 <_fflush_r>
 801bc1c:	68a1      	ldr	r1, [r4, #8]
 801bc1e:	4b09      	ldr	r3, [pc, #36]	@ (801bc44 <cleanup_stdio+0x38>)
 801bc20:	4299      	cmp	r1, r3
 801bc22:	d002      	beq.n	801bc2a <cleanup_stdio+0x1e>
 801bc24:	4620      	mov	r0, r4
 801bc26:	f000 ff0d 	bl	801ca44 <_fflush_r>
 801bc2a:	68e1      	ldr	r1, [r4, #12]
 801bc2c:	4b06      	ldr	r3, [pc, #24]	@ (801bc48 <cleanup_stdio+0x3c>)
 801bc2e:	4299      	cmp	r1, r3
 801bc30:	d004      	beq.n	801bc3c <cleanup_stdio+0x30>
 801bc32:	4620      	mov	r0, r4
 801bc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc38:	f000 bf04 	b.w	801ca44 <_fflush_r>
 801bc3c:	bd10      	pop	{r4, pc}
 801bc3e:	bf00      	nop
 801bc40:	20012904 	.word	0x20012904
 801bc44:	2001296c 	.word	0x2001296c
 801bc48:	200129d4 	.word	0x200129d4

0801bc4c <global_stdio_init.part.0>:
 801bc4c:	b510      	push	{r4, lr}
 801bc4e:	4b0b      	ldr	r3, [pc, #44]	@ (801bc7c <global_stdio_init.part.0+0x30>)
 801bc50:	4c0b      	ldr	r4, [pc, #44]	@ (801bc80 <global_stdio_init.part.0+0x34>)
 801bc52:	4a0c      	ldr	r2, [pc, #48]	@ (801bc84 <global_stdio_init.part.0+0x38>)
 801bc54:	601a      	str	r2, [r3, #0]
 801bc56:	4620      	mov	r0, r4
 801bc58:	2200      	movs	r2, #0
 801bc5a:	2104      	movs	r1, #4
 801bc5c:	f7ff ff94 	bl	801bb88 <std>
 801bc60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801bc64:	2201      	movs	r2, #1
 801bc66:	2109      	movs	r1, #9
 801bc68:	f7ff ff8e 	bl	801bb88 <std>
 801bc6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801bc70:	2202      	movs	r2, #2
 801bc72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bc76:	2112      	movs	r1, #18
 801bc78:	f7ff bf86 	b.w	801bb88 <std>
 801bc7c:	20012a3c 	.word	0x20012a3c
 801bc80:	20012904 	.word	0x20012904
 801bc84:	0801bbf5 	.word	0x0801bbf5

0801bc88 <__sfp_lock_acquire>:
 801bc88:	4801      	ldr	r0, [pc, #4]	@ (801bc90 <__sfp_lock_acquire+0x8>)
 801bc8a:	f000 bade 	b.w	801c24a <__retarget_lock_acquire_recursive>
 801bc8e:	bf00      	nop
 801bc90:	20012a46 	.word	0x20012a46

0801bc94 <__sfp_lock_release>:
 801bc94:	4801      	ldr	r0, [pc, #4]	@ (801bc9c <__sfp_lock_release+0x8>)
 801bc96:	f000 bad9 	b.w	801c24c <__retarget_lock_release_recursive>
 801bc9a:	bf00      	nop
 801bc9c:	20012a46 	.word	0x20012a46

0801bca0 <__sinit>:
 801bca0:	b510      	push	{r4, lr}
 801bca2:	4604      	mov	r4, r0
 801bca4:	f7ff fff0 	bl	801bc88 <__sfp_lock_acquire>
 801bca8:	6a23      	ldr	r3, [r4, #32]
 801bcaa:	b11b      	cbz	r3, 801bcb4 <__sinit+0x14>
 801bcac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcb0:	f7ff bff0 	b.w	801bc94 <__sfp_lock_release>
 801bcb4:	4b04      	ldr	r3, [pc, #16]	@ (801bcc8 <__sinit+0x28>)
 801bcb6:	6223      	str	r3, [r4, #32]
 801bcb8:	4b04      	ldr	r3, [pc, #16]	@ (801bccc <__sinit+0x2c>)
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d1f5      	bne.n	801bcac <__sinit+0xc>
 801bcc0:	f7ff ffc4 	bl	801bc4c <global_stdio_init.part.0>
 801bcc4:	e7f2      	b.n	801bcac <__sinit+0xc>
 801bcc6:	bf00      	nop
 801bcc8:	0801bc0d 	.word	0x0801bc0d
 801bccc:	20012a3c 	.word	0x20012a3c

0801bcd0 <_fwalk_sglue>:
 801bcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bcd4:	4607      	mov	r7, r0
 801bcd6:	4688      	mov	r8, r1
 801bcd8:	4614      	mov	r4, r2
 801bcda:	2600      	movs	r6, #0
 801bcdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bce0:	f1b9 0901 	subs.w	r9, r9, #1
 801bce4:	d505      	bpl.n	801bcf2 <_fwalk_sglue+0x22>
 801bce6:	6824      	ldr	r4, [r4, #0]
 801bce8:	2c00      	cmp	r4, #0
 801bcea:	d1f7      	bne.n	801bcdc <_fwalk_sglue+0xc>
 801bcec:	4630      	mov	r0, r6
 801bcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bcf2:	89ab      	ldrh	r3, [r5, #12]
 801bcf4:	2b01      	cmp	r3, #1
 801bcf6:	d907      	bls.n	801bd08 <_fwalk_sglue+0x38>
 801bcf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bcfc:	3301      	adds	r3, #1
 801bcfe:	d003      	beq.n	801bd08 <_fwalk_sglue+0x38>
 801bd00:	4629      	mov	r1, r5
 801bd02:	4638      	mov	r0, r7
 801bd04:	47c0      	blx	r8
 801bd06:	4306      	orrs	r6, r0
 801bd08:	3568      	adds	r5, #104	@ 0x68
 801bd0a:	e7e9      	b.n	801bce0 <_fwalk_sglue+0x10>

0801bd0c <_fwrite_r>:
 801bd0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd10:	9c08      	ldr	r4, [sp, #32]
 801bd12:	468a      	mov	sl, r1
 801bd14:	4690      	mov	r8, r2
 801bd16:	fb02 f903 	mul.w	r9, r2, r3
 801bd1a:	4606      	mov	r6, r0
 801bd1c:	b118      	cbz	r0, 801bd26 <_fwrite_r+0x1a>
 801bd1e:	6a03      	ldr	r3, [r0, #32]
 801bd20:	b90b      	cbnz	r3, 801bd26 <_fwrite_r+0x1a>
 801bd22:	f7ff ffbd 	bl	801bca0 <__sinit>
 801bd26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bd28:	07dd      	lsls	r5, r3, #31
 801bd2a:	d405      	bmi.n	801bd38 <_fwrite_r+0x2c>
 801bd2c:	89a3      	ldrh	r3, [r4, #12]
 801bd2e:	0598      	lsls	r0, r3, #22
 801bd30:	d402      	bmi.n	801bd38 <_fwrite_r+0x2c>
 801bd32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bd34:	f000 fa89 	bl	801c24a <__retarget_lock_acquire_recursive>
 801bd38:	89a3      	ldrh	r3, [r4, #12]
 801bd3a:	0719      	lsls	r1, r3, #28
 801bd3c:	d516      	bpl.n	801bd6c <_fwrite_r+0x60>
 801bd3e:	6923      	ldr	r3, [r4, #16]
 801bd40:	b1a3      	cbz	r3, 801bd6c <_fwrite_r+0x60>
 801bd42:	2500      	movs	r5, #0
 801bd44:	454d      	cmp	r5, r9
 801bd46:	d01f      	beq.n	801bd88 <_fwrite_r+0x7c>
 801bd48:	68a7      	ldr	r7, [r4, #8]
 801bd4a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801bd4e:	3f01      	subs	r7, #1
 801bd50:	2f00      	cmp	r7, #0
 801bd52:	60a7      	str	r7, [r4, #8]
 801bd54:	da04      	bge.n	801bd60 <_fwrite_r+0x54>
 801bd56:	69a3      	ldr	r3, [r4, #24]
 801bd58:	429f      	cmp	r7, r3
 801bd5a:	db0f      	blt.n	801bd7c <_fwrite_r+0x70>
 801bd5c:	290a      	cmp	r1, #10
 801bd5e:	d00d      	beq.n	801bd7c <_fwrite_r+0x70>
 801bd60:	6823      	ldr	r3, [r4, #0]
 801bd62:	1c5a      	adds	r2, r3, #1
 801bd64:	6022      	str	r2, [r4, #0]
 801bd66:	7019      	strb	r1, [r3, #0]
 801bd68:	3501      	adds	r5, #1
 801bd6a:	e7eb      	b.n	801bd44 <_fwrite_r+0x38>
 801bd6c:	4621      	mov	r1, r4
 801bd6e:	4630      	mov	r0, r6
 801bd70:	f000 f91a 	bl	801bfa8 <__swsetup_r>
 801bd74:	2800      	cmp	r0, #0
 801bd76:	d0e4      	beq.n	801bd42 <_fwrite_r+0x36>
 801bd78:	2500      	movs	r5, #0
 801bd7a:	e005      	b.n	801bd88 <_fwrite_r+0x7c>
 801bd7c:	4622      	mov	r2, r4
 801bd7e:	4630      	mov	r0, r6
 801bd80:	f000 f8d4 	bl	801bf2c <__swbuf_r>
 801bd84:	3001      	adds	r0, #1
 801bd86:	d1ef      	bne.n	801bd68 <_fwrite_r+0x5c>
 801bd88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801bd8a:	07da      	lsls	r2, r3, #31
 801bd8c:	d405      	bmi.n	801bd9a <_fwrite_r+0x8e>
 801bd8e:	89a3      	ldrh	r3, [r4, #12]
 801bd90:	059b      	lsls	r3, r3, #22
 801bd92:	d402      	bmi.n	801bd9a <_fwrite_r+0x8e>
 801bd94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801bd96:	f000 fa59 	bl	801c24c <__retarget_lock_release_recursive>
 801bd9a:	fbb5 f0f8 	udiv	r0, r5, r8
 801bd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801bda4 <fwrite>:
 801bda4:	b507      	push	{r0, r1, r2, lr}
 801bda6:	9300      	str	r3, [sp, #0]
 801bda8:	4613      	mov	r3, r2
 801bdaa:	460a      	mov	r2, r1
 801bdac:	4601      	mov	r1, r0
 801bdae:	4803      	ldr	r0, [pc, #12]	@ (801bdbc <fwrite+0x18>)
 801bdb0:	6800      	ldr	r0, [r0, #0]
 801bdb2:	f7ff ffab 	bl	801bd0c <_fwrite_r>
 801bdb6:	b003      	add	sp, #12
 801bdb8:	f85d fb04 	ldr.w	pc, [sp], #4
 801bdbc:	200042fc 	.word	0x200042fc

0801bdc0 <sniprintf>:
 801bdc0:	b40c      	push	{r2, r3}
 801bdc2:	b530      	push	{r4, r5, lr}
 801bdc4:	4b18      	ldr	r3, [pc, #96]	@ (801be28 <sniprintf+0x68>)
 801bdc6:	1e0c      	subs	r4, r1, #0
 801bdc8:	681d      	ldr	r5, [r3, #0]
 801bdca:	b09d      	sub	sp, #116	@ 0x74
 801bdcc:	da08      	bge.n	801bde0 <sniprintf+0x20>
 801bdce:	238b      	movs	r3, #139	@ 0x8b
 801bdd0:	602b      	str	r3, [r5, #0]
 801bdd2:	f04f 30ff 	mov.w	r0, #4294967295
 801bdd6:	b01d      	add	sp, #116	@ 0x74
 801bdd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bddc:	b002      	add	sp, #8
 801bdde:	4770      	bx	lr
 801bde0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801bde4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801bde8:	f04f 0300 	mov.w	r3, #0
 801bdec:	931b      	str	r3, [sp, #108]	@ 0x6c
 801bdee:	bf14      	ite	ne
 801bdf0:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bdf4:	4623      	moveq	r3, r4
 801bdf6:	9304      	str	r3, [sp, #16]
 801bdf8:	9307      	str	r3, [sp, #28]
 801bdfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bdfe:	9002      	str	r0, [sp, #8]
 801be00:	9006      	str	r0, [sp, #24]
 801be02:	f8ad 3016 	strh.w	r3, [sp, #22]
 801be06:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801be08:	ab21      	add	r3, sp, #132	@ 0x84
 801be0a:	a902      	add	r1, sp, #8
 801be0c:	4628      	mov	r0, r5
 801be0e:	9301      	str	r3, [sp, #4]
 801be10:	f000 fb0c 	bl	801c42c <_svfiprintf_r>
 801be14:	1c43      	adds	r3, r0, #1
 801be16:	bfbc      	itt	lt
 801be18:	238b      	movlt	r3, #139	@ 0x8b
 801be1a:	602b      	strlt	r3, [r5, #0]
 801be1c:	2c00      	cmp	r4, #0
 801be1e:	d0da      	beq.n	801bdd6 <sniprintf+0x16>
 801be20:	9b02      	ldr	r3, [sp, #8]
 801be22:	2200      	movs	r2, #0
 801be24:	701a      	strb	r2, [r3, #0]
 801be26:	e7d6      	b.n	801bdd6 <sniprintf+0x16>
 801be28:	200042fc 	.word	0x200042fc

0801be2c <__sread>:
 801be2c:	b510      	push	{r4, lr}
 801be2e:	460c      	mov	r4, r1
 801be30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be34:	f000 f9aa 	bl	801c18c <_read_r>
 801be38:	2800      	cmp	r0, #0
 801be3a:	bfab      	itete	ge
 801be3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801be3e:	89a3      	ldrhlt	r3, [r4, #12]
 801be40:	181b      	addge	r3, r3, r0
 801be42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801be46:	bfac      	ite	ge
 801be48:	6563      	strge	r3, [r4, #84]	@ 0x54
 801be4a:	81a3      	strhlt	r3, [r4, #12]
 801be4c:	bd10      	pop	{r4, pc}

0801be4e <__swrite>:
 801be4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be52:	461f      	mov	r7, r3
 801be54:	898b      	ldrh	r3, [r1, #12]
 801be56:	05db      	lsls	r3, r3, #23
 801be58:	4605      	mov	r5, r0
 801be5a:	460c      	mov	r4, r1
 801be5c:	4616      	mov	r6, r2
 801be5e:	d505      	bpl.n	801be6c <__swrite+0x1e>
 801be60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be64:	2302      	movs	r3, #2
 801be66:	2200      	movs	r2, #0
 801be68:	f000 f97e 	bl	801c168 <_lseek_r>
 801be6c:	89a3      	ldrh	r3, [r4, #12]
 801be6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801be72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801be76:	81a3      	strh	r3, [r4, #12]
 801be78:	4632      	mov	r2, r6
 801be7a:	463b      	mov	r3, r7
 801be7c:	4628      	mov	r0, r5
 801be7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be82:	f000 b9a5 	b.w	801c1d0 <_write_r>

0801be86 <__sseek>:
 801be86:	b510      	push	{r4, lr}
 801be88:	460c      	mov	r4, r1
 801be8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be8e:	f000 f96b 	bl	801c168 <_lseek_r>
 801be92:	1c43      	adds	r3, r0, #1
 801be94:	89a3      	ldrh	r3, [r4, #12]
 801be96:	bf15      	itete	ne
 801be98:	6560      	strne	r0, [r4, #84]	@ 0x54
 801be9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801be9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801bea2:	81a3      	strheq	r3, [r4, #12]
 801bea4:	bf18      	it	ne
 801bea6:	81a3      	strhne	r3, [r4, #12]
 801bea8:	bd10      	pop	{r4, pc}

0801beaa <__sclose>:
 801beaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801beae:	f000 b94b 	b.w	801c148 <_close_r>

0801beb2 <_vsniprintf_r>:
 801beb2:	b530      	push	{r4, r5, lr}
 801beb4:	4614      	mov	r4, r2
 801beb6:	2c00      	cmp	r4, #0
 801beb8:	b09b      	sub	sp, #108	@ 0x6c
 801beba:	4605      	mov	r5, r0
 801bebc:	461a      	mov	r2, r3
 801bebe:	da05      	bge.n	801becc <_vsniprintf_r+0x1a>
 801bec0:	238b      	movs	r3, #139	@ 0x8b
 801bec2:	6003      	str	r3, [r0, #0]
 801bec4:	f04f 30ff 	mov.w	r0, #4294967295
 801bec8:	b01b      	add	sp, #108	@ 0x6c
 801beca:	bd30      	pop	{r4, r5, pc}
 801becc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801bed0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bed4:	f04f 0300 	mov.w	r3, #0
 801bed8:	9319      	str	r3, [sp, #100]	@ 0x64
 801beda:	bf14      	ite	ne
 801bedc:	f104 33ff 	addne.w	r3, r4, #4294967295
 801bee0:	4623      	moveq	r3, r4
 801bee2:	9302      	str	r3, [sp, #8]
 801bee4:	9305      	str	r3, [sp, #20]
 801bee6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801beea:	9100      	str	r1, [sp, #0]
 801beec:	9104      	str	r1, [sp, #16]
 801beee:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bef2:	4669      	mov	r1, sp
 801bef4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bef6:	f000 fa99 	bl	801c42c <_svfiprintf_r>
 801befa:	1c43      	adds	r3, r0, #1
 801befc:	bfbc      	itt	lt
 801befe:	238b      	movlt	r3, #139	@ 0x8b
 801bf00:	602b      	strlt	r3, [r5, #0]
 801bf02:	2c00      	cmp	r4, #0
 801bf04:	d0e0      	beq.n	801bec8 <_vsniprintf_r+0x16>
 801bf06:	9b00      	ldr	r3, [sp, #0]
 801bf08:	2200      	movs	r2, #0
 801bf0a:	701a      	strb	r2, [r3, #0]
 801bf0c:	e7dc      	b.n	801bec8 <_vsniprintf_r+0x16>
	...

0801bf10 <vsniprintf>:
 801bf10:	b507      	push	{r0, r1, r2, lr}
 801bf12:	9300      	str	r3, [sp, #0]
 801bf14:	4613      	mov	r3, r2
 801bf16:	460a      	mov	r2, r1
 801bf18:	4601      	mov	r1, r0
 801bf1a:	4803      	ldr	r0, [pc, #12]	@ (801bf28 <vsniprintf+0x18>)
 801bf1c:	6800      	ldr	r0, [r0, #0]
 801bf1e:	f7ff ffc8 	bl	801beb2 <_vsniprintf_r>
 801bf22:	b003      	add	sp, #12
 801bf24:	f85d fb04 	ldr.w	pc, [sp], #4
 801bf28:	200042fc 	.word	0x200042fc

0801bf2c <__swbuf_r>:
 801bf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf2e:	460e      	mov	r6, r1
 801bf30:	4614      	mov	r4, r2
 801bf32:	4605      	mov	r5, r0
 801bf34:	b118      	cbz	r0, 801bf3e <__swbuf_r+0x12>
 801bf36:	6a03      	ldr	r3, [r0, #32]
 801bf38:	b90b      	cbnz	r3, 801bf3e <__swbuf_r+0x12>
 801bf3a:	f7ff feb1 	bl	801bca0 <__sinit>
 801bf3e:	69a3      	ldr	r3, [r4, #24]
 801bf40:	60a3      	str	r3, [r4, #8]
 801bf42:	89a3      	ldrh	r3, [r4, #12]
 801bf44:	071a      	lsls	r2, r3, #28
 801bf46:	d501      	bpl.n	801bf4c <__swbuf_r+0x20>
 801bf48:	6923      	ldr	r3, [r4, #16]
 801bf4a:	b943      	cbnz	r3, 801bf5e <__swbuf_r+0x32>
 801bf4c:	4621      	mov	r1, r4
 801bf4e:	4628      	mov	r0, r5
 801bf50:	f000 f82a 	bl	801bfa8 <__swsetup_r>
 801bf54:	b118      	cbz	r0, 801bf5e <__swbuf_r+0x32>
 801bf56:	f04f 37ff 	mov.w	r7, #4294967295
 801bf5a:	4638      	mov	r0, r7
 801bf5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf5e:	6823      	ldr	r3, [r4, #0]
 801bf60:	6922      	ldr	r2, [r4, #16]
 801bf62:	1a98      	subs	r0, r3, r2
 801bf64:	6963      	ldr	r3, [r4, #20]
 801bf66:	b2f6      	uxtb	r6, r6
 801bf68:	4283      	cmp	r3, r0
 801bf6a:	4637      	mov	r7, r6
 801bf6c:	dc05      	bgt.n	801bf7a <__swbuf_r+0x4e>
 801bf6e:	4621      	mov	r1, r4
 801bf70:	4628      	mov	r0, r5
 801bf72:	f000 fd67 	bl	801ca44 <_fflush_r>
 801bf76:	2800      	cmp	r0, #0
 801bf78:	d1ed      	bne.n	801bf56 <__swbuf_r+0x2a>
 801bf7a:	68a3      	ldr	r3, [r4, #8]
 801bf7c:	3b01      	subs	r3, #1
 801bf7e:	60a3      	str	r3, [r4, #8]
 801bf80:	6823      	ldr	r3, [r4, #0]
 801bf82:	1c5a      	adds	r2, r3, #1
 801bf84:	6022      	str	r2, [r4, #0]
 801bf86:	701e      	strb	r6, [r3, #0]
 801bf88:	6962      	ldr	r2, [r4, #20]
 801bf8a:	1c43      	adds	r3, r0, #1
 801bf8c:	429a      	cmp	r2, r3
 801bf8e:	d004      	beq.n	801bf9a <__swbuf_r+0x6e>
 801bf90:	89a3      	ldrh	r3, [r4, #12]
 801bf92:	07db      	lsls	r3, r3, #31
 801bf94:	d5e1      	bpl.n	801bf5a <__swbuf_r+0x2e>
 801bf96:	2e0a      	cmp	r6, #10
 801bf98:	d1df      	bne.n	801bf5a <__swbuf_r+0x2e>
 801bf9a:	4621      	mov	r1, r4
 801bf9c:	4628      	mov	r0, r5
 801bf9e:	f000 fd51 	bl	801ca44 <_fflush_r>
 801bfa2:	2800      	cmp	r0, #0
 801bfa4:	d0d9      	beq.n	801bf5a <__swbuf_r+0x2e>
 801bfa6:	e7d6      	b.n	801bf56 <__swbuf_r+0x2a>

0801bfa8 <__swsetup_r>:
 801bfa8:	b538      	push	{r3, r4, r5, lr}
 801bfaa:	4b29      	ldr	r3, [pc, #164]	@ (801c050 <__swsetup_r+0xa8>)
 801bfac:	4605      	mov	r5, r0
 801bfae:	6818      	ldr	r0, [r3, #0]
 801bfb0:	460c      	mov	r4, r1
 801bfb2:	b118      	cbz	r0, 801bfbc <__swsetup_r+0x14>
 801bfb4:	6a03      	ldr	r3, [r0, #32]
 801bfb6:	b90b      	cbnz	r3, 801bfbc <__swsetup_r+0x14>
 801bfb8:	f7ff fe72 	bl	801bca0 <__sinit>
 801bfbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfc0:	0719      	lsls	r1, r3, #28
 801bfc2:	d422      	bmi.n	801c00a <__swsetup_r+0x62>
 801bfc4:	06da      	lsls	r2, r3, #27
 801bfc6:	d407      	bmi.n	801bfd8 <__swsetup_r+0x30>
 801bfc8:	2209      	movs	r2, #9
 801bfca:	602a      	str	r2, [r5, #0]
 801bfcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bfd0:	81a3      	strh	r3, [r4, #12]
 801bfd2:	f04f 30ff 	mov.w	r0, #4294967295
 801bfd6:	e033      	b.n	801c040 <__swsetup_r+0x98>
 801bfd8:	0758      	lsls	r0, r3, #29
 801bfda:	d512      	bpl.n	801c002 <__swsetup_r+0x5a>
 801bfdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bfde:	b141      	cbz	r1, 801bff2 <__swsetup_r+0x4a>
 801bfe0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bfe4:	4299      	cmp	r1, r3
 801bfe6:	d002      	beq.n	801bfee <__swsetup_r+0x46>
 801bfe8:	4628      	mov	r0, r5
 801bfea:	f000 f971 	bl	801c2d0 <_free_r>
 801bfee:	2300      	movs	r3, #0
 801bff0:	6363      	str	r3, [r4, #52]	@ 0x34
 801bff2:	89a3      	ldrh	r3, [r4, #12]
 801bff4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801bff8:	81a3      	strh	r3, [r4, #12]
 801bffa:	2300      	movs	r3, #0
 801bffc:	6063      	str	r3, [r4, #4]
 801bffe:	6923      	ldr	r3, [r4, #16]
 801c000:	6023      	str	r3, [r4, #0]
 801c002:	89a3      	ldrh	r3, [r4, #12]
 801c004:	f043 0308 	orr.w	r3, r3, #8
 801c008:	81a3      	strh	r3, [r4, #12]
 801c00a:	6923      	ldr	r3, [r4, #16]
 801c00c:	b94b      	cbnz	r3, 801c022 <__swsetup_r+0x7a>
 801c00e:	89a3      	ldrh	r3, [r4, #12]
 801c010:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c018:	d003      	beq.n	801c022 <__swsetup_r+0x7a>
 801c01a:	4621      	mov	r1, r4
 801c01c:	4628      	mov	r0, r5
 801c01e:	f000 fd71 	bl	801cb04 <__smakebuf_r>
 801c022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c026:	f013 0201 	ands.w	r2, r3, #1
 801c02a:	d00a      	beq.n	801c042 <__swsetup_r+0x9a>
 801c02c:	2200      	movs	r2, #0
 801c02e:	60a2      	str	r2, [r4, #8]
 801c030:	6962      	ldr	r2, [r4, #20]
 801c032:	4252      	negs	r2, r2
 801c034:	61a2      	str	r2, [r4, #24]
 801c036:	6922      	ldr	r2, [r4, #16]
 801c038:	b942      	cbnz	r2, 801c04c <__swsetup_r+0xa4>
 801c03a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c03e:	d1c5      	bne.n	801bfcc <__swsetup_r+0x24>
 801c040:	bd38      	pop	{r3, r4, r5, pc}
 801c042:	0799      	lsls	r1, r3, #30
 801c044:	bf58      	it	pl
 801c046:	6962      	ldrpl	r2, [r4, #20]
 801c048:	60a2      	str	r2, [r4, #8]
 801c04a:	e7f4      	b.n	801c036 <__swsetup_r+0x8e>
 801c04c:	2000      	movs	r0, #0
 801c04e:	e7f7      	b.n	801c040 <__swsetup_r+0x98>
 801c050:	200042fc 	.word	0x200042fc

0801c054 <memcmp>:
 801c054:	b510      	push	{r4, lr}
 801c056:	3901      	subs	r1, #1
 801c058:	4402      	add	r2, r0
 801c05a:	4290      	cmp	r0, r2
 801c05c:	d101      	bne.n	801c062 <memcmp+0xe>
 801c05e:	2000      	movs	r0, #0
 801c060:	e005      	b.n	801c06e <memcmp+0x1a>
 801c062:	7803      	ldrb	r3, [r0, #0]
 801c064:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c068:	42a3      	cmp	r3, r4
 801c06a:	d001      	beq.n	801c070 <memcmp+0x1c>
 801c06c:	1b18      	subs	r0, r3, r4
 801c06e:	bd10      	pop	{r4, pc}
 801c070:	3001      	adds	r0, #1
 801c072:	e7f2      	b.n	801c05a <memcmp+0x6>

0801c074 <memmove>:
 801c074:	4288      	cmp	r0, r1
 801c076:	b510      	push	{r4, lr}
 801c078:	eb01 0402 	add.w	r4, r1, r2
 801c07c:	d902      	bls.n	801c084 <memmove+0x10>
 801c07e:	4284      	cmp	r4, r0
 801c080:	4623      	mov	r3, r4
 801c082:	d807      	bhi.n	801c094 <memmove+0x20>
 801c084:	1e43      	subs	r3, r0, #1
 801c086:	42a1      	cmp	r1, r4
 801c088:	d008      	beq.n	801c09c <memmove+0x28>
 801c08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c092:	e7f8      	b.n	801c086 <memmove+0x12>
 801c094:	4402      	add	r2, r0
 801c096:	4601      	mov	r1, r0
 801c098:	428a      	cmp	r2, r1
 801c09a:	d100      	bne.n	801c09e <memmove+0x2a>
 801c09c:	bd10      	pop	{r4, pc}
 801c09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c0a6:	e7f7      	b.n	801c098 <memmove+0x24>

0801c0a8 <memset>:
 801c0a8:	4402      	add	r2, r0
 801c0aa:	4603      	mov	r3, r0
 801c0ac:	4293      	cmp	r3, r2
 801c0ae:	d100      	bne.n	801c0b2 <memset+0xa>
 801c0b0:	4770      	bx	lr
 801c0b2:	f803 1b01 	strb.w	r1, [r3], #1
 801c0b6:	e7f9      	b.n	801c0ac <memset+0x4>

0801c0b8 <strchr>:
 801c0b8:	b2c9      	uxtb	r1, r1
 801c0ba:	4603      	mov	r3, r0
 801c0bc:	4618      	mov	r0, r3
 801c0be:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c0c2:	b112      	cbz	r2, 801c0ca <strchr+0x12>
 801c0c4:	428a      	cmp	r2, r1
 801c0c6:	d1f9      	bne.n	801c0bc <strchr+0x4>
 801c0c8:	4770      	bx	lr
 801c0ca:	2900      	cmp	r1, #0
 801c0cc:	bf18      	it	ne
 801c0ce:	2000      	movne	r0, #0
 801c0d0:	4770      	bx	lr

0801c0d2 <strncmp>:
 801c0d2:	b510      	push	{r4, lr}
 801c0d4:	b16a      	cbz	r2, 801c0f2 <strncmp+0x20>
 801c0d6:	3901      	subs	r1, #1
 801c0d8:	1884      	adds	r4, r0, r2
 801c0da:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c0de:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c0e2:	429a      	cmp	r2, r3
 801c0e4:	d103      	bne.n	801c0ee <strncmp+0x1c>
 801c0e6:	42a0      	cmp	r0, r4
 801c0e8:	d001      	beq.n	801c0ee <strncmp+0x1c>
 801c0ea:	2a00      	cmp	r2, #0
 801c0ec:	d1f5      	bne.n	801c0da <strncmp+0x8>
 801c0ee:	1ad0      	subs	r0, r2, r3
 801c0f0:	bd10      	pop	{r4, pc}
 801c0f2:	4610      	mov	r0, r2
 801c0f4:	e7fc      	b.n	801c0f0 <strncmp+0x1e>

0801c0f6 <strncpy>:
 801c0f6:	b510      	push	{r4, lr}
 801c0f8:	3901      	subs	r1, #1
 801c0fa:	4603      	mov	r3, r0
 801c0fc:	b132      	cbz	r2, 801c10c <strncpy+0x16>
 801c0fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c102:	f803 4b01 	strb.w	r4, [r3], #1
 801c106:	3a01      	subs	r2, #1
 801c108:	2c00      	cmp	r4, #0
 801c10a:	d1f7      	bne.n	801c0fc <strncpy+0x6>
 801c10c:	441a      	add	r2, r3
 801c10e:	2100      	movs	r1, #0
 801c110:	4293      	cmp	r3, r2
 801c112:	d100      	bne.n	801c116 <strncpy+0x20>
 801c114:	bd10      	pop	{r4, pc}
 801c116:	f803 1b01 	strb.w	r1, [r3], #1
 801c11a:	e7f9      	b.n	801c110 <strncpy+0x1a>

0801c11c <strstr>:
 801c11c:	780a      	ldrb	r2, [r1, #0]
 801c11e:	b570      	push	{r4, r5, r6, lr}
 801c120:	b96a      	cbnz	r2, 801c13e <strstr+0x22>
 801c122:	bd70      	pop	{r4, r5, r6, pc}
 801c124:	429a      	cmp	r2, r3
 801c126:	d109      	bne.n	801c13c <strstr+0x20>
 801c128:	460c      	mov	r4, r1
 801c12a:	4605      	mov	r5, r0
 801c12c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c130:	2b00      	cmp	r3, #0
 801c132:	d0f6      	beq.n	801c122 <strstr+0x6>
 801c134:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c138:	429e      	cmp	r6, r3
 801c13a:	d0f7      	beq.n	801c12c <strstr+0x10>
 801c13c:	3001      	adds	r0, #1
 801c13e:	7803      	ldrb	r3, [r0, #0]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d1ef      	bne.n	801c124 <strstr+0x8>
 801c144:	4618      	mov	r0, r3
 801c146:	e7ec      	b.n	801c122 <strstr+0x6>

0801c148 <_close_r>:
 801c148:	b538      	push	{r3, r4, r5, lr}
 801c14a:	4d06      	ldr	r5, [pc, #24]	@ (801c164 <_close_r+0x1c>)
 801c14c:	2300      	movs	r3, #0
 801c14e:	4604      	mov	r4, r0
 801c150:	4608      	mov	r0, r1
 801c152:	602b      	str	r3, [r5, #0]
 801c154:	f7e7 fc78 	bl	8003a48 <_close>
 801c158:	1c43      	adds	r3, r0, #1
 801c15a:	d102      	bne.n	801c162 <_close_r+0x1a>
 801c15c:	682b      	ldr	r3, [r5, #0]
 801c15e:	b103      	cbz	r3, 801c162 <_close_r+0x1a>
 801c160:	6023      	str	r3, [r4, #0]
 801c162:	bd38      	pop	{r3, r4, r5, pc}
 801c164:	20012a40 	.word	0x20012a40

0801c168 <_lseek_r>:
 801c168:	b538      	push	{r3, r4, r5, lr}
 801c16a:	4d07      	ldr	r5, [pc, #28]	@ (801c188 <_lseek_r+0x20>)
 801c16c:	4604      	mov	r4, r0
 801c16e:	4608      	mov	r0, r1
 801c170:	4611      	mov	r1, r2
 801c172:	2200      	movs	r2, #0
 801c174:	602a      	str	r2, [r5, #0]
 801c176:	461a      	mov	r2, r3
 801c178:	f7e7 fc8d 	bl	8003a96 <_lseek>
 801c17c:	1c43      	adds	r3, r0, #1
 801c17e:	d102      	bne.n	801c186 <_lseek_r+0x1e>
 801c180:	682b      	ldr	r3, [r5, #0]
 801c182:	b103      	cbz	r3, 801c186 <_lseek_r+0x1e>
 801c184:	6023      	str	r3, [r4, #0]
 801c186:	bd38      	pop	{r3, r4, r5, pc}
 801c188:	20012a40 	.word	0x20012a40

0801c18c <_read_r>:
 801c18c:	b538      	push	{r3, r4, r5, lr}
 801c18e:	4d07      	ldr	r5, [pc, #28]	@ (801c1ac <_read_r+0x20>)
 801c190:	4604      	mov	r4, r0
 801c192:	4608      	mov	r0, r1
 801c194:	4611      	mov	r1, r2
 801c196:	2200      	movs	r2, #0
 801c198:	602a      	str	r2, [r5, #0]
 801c19a:	461a      	mov	r2, r3
 801c19c:	f7e7 fc1b 	bl	80039d6 <_read>
 801c1a0:	1c43      	adds	r3, r0, #1
 801c1a2:	d102      	bne.n	801c1aa <_read_r+0x1e>
 801c1a4:	682b      	ldr	r3, [r5, #0]
 801c1a6:	b103      	cbz	r3, 801c1aa <_read_r+0x1e>
 801c1a8:	6023      	str	r3, [r4, #0]
 801c1aa:	bd38      	pop	{r3, r4, r5, pc}
 801c1ac:	20012a40 	.word	0x20012a40

0801c1b0 <_sbrk_r>:
 801c1b0:	b538      	push	{r3, r4, r5, lr}
 801c1b2:	4d06      	ldr	r5, [pc, #24]	@ (801c1cc <_sbrk_r+0x1c>)
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	4604      	mov	r4, r0
 801c1b8:	4608      	mov	r0, r1
 801c1ba:	602b      	str	r3, [r5, #0]
 801c1bc:	f7e7 fc78 	bl	8003ab0 <_sbrk>
 801c1c0:	1c43      	adds	r3, r0, #1
 801c1c2:	d102      	bne.n	801c1ca <_sbrk_r+0x1a>
 801c1c4:	682b      	ldr	r3, [r5, #0]
 801c1c6:	b103      	cbz	r3, 801c1ca <_sbrk_r+0x1a>
 801c1c8:	6023      	str	r3, [r4, #0]
 801c1ca:	bd38      	pop	{r3, r4, r5, pc}
 801c1cc:	20012a40 	.word	0x20012a40

0801c1d0 <_write_r>:
 801c1d0:	b538      	push	{r3, r4, r5, lr}
 801c1d2:	4d07      	ldr	r5, [pc, #28]	@ (801c1f0 <_write_r+0x20>)
 801c1d4:	4604      	mov	r4, r0
 801c1d6:	4608      	mov	r0, r1
 801c1d8:	4611      	mov	r1, r2
 801c1da:	2200      	movs	r2, #0
 801c1dc:	602a      	str	r2, [r5, #0]
 801c1de:	461a      	mov	r2, r3
 801c1e0:	f7e7 fc16 	bl	8003a10 <_write>
 801c1e4:	1c43      	adds	r3, r0, #1
 801c1e6:	d102      	bne.n	801c1ee <_write_r+0x1e>
 801c1e8:	682b      	ldr	r3, [r5, #0]
 801c1ea:	b103      	cbz	r3, 801c1ee <_write_r+0x1e>
 801c1ec:	6023      	str	r3, [r4, #0]
 801c1ee:	bd38      	pop	{r3, r4, r5, pc}
 801c1f0:	20012a40 	.word	0x20012a40

0801c1f4 <__errno>:
 801c1f4:	4b01      	ldr	r3, [pc, #4]	@ (801c1fc <__errno+0x8>)
 801c1f6:	6818      	ldr	r0, [r3, #0]
 801c1f8:	4770      	bx	lr
 801c1fa:	bf00      	nop
 801c1fc:	200042fc 	.word	0x200042fc

0801c200 <__libc_init_array>:
 801c200:	b570      	push	{r4, r5, r6, lr}
 801c202:	4d0d      	ldr	r5, [pc, #52]	@ (801c238 <__libc_init_array+0x38>)
 801c204:	4c0d      	ldr	r4, [pc, #52]	@ (801c23c <__libc_init_array+0x3c>)
 801c206:	1b64      	subs	r4, r4, r5
 801c208:	10a4      	asrs	r4, r4, #2
 801c20a:	2600      	movs	r6, #0
 801c20c:	42a6      	cmp	r6, r4
 801c20e:	d109      	bne.n	801c224 <__libc_init_array+0x24>
 801c210:	4d0b      	ldr	r5, [pc, #44]	@ (801c240 <__libc_init_array+0x40>)
 801c212:	4c0c      	ldr	r4, [pc, #48]	@ (801c244 <__libc_init_array+0x44>)
 801c214:	f000 fe60 	bl	801ced8 <_init>
 801c218:	1b64      	subs	r4, r4, r5
 801c21a:	10a4      	asrs	r4, r4, #2
 801c21c:	2600      	movs	r6, #0
 801c21e:	42a6      	cmp	r6, r4
 801c220:	d105      	bne.n	801c22e <__libc_init_array+0x2e>
 801c222:	bd70      	pop	{r4, r5, r6, pc}
 801c224:	f855 3b04 	ldr.w	r3, [r5], #4
 801c228:	4798      	blx	r3
 801c22a:	3601      	adds	r6, #1
 801c22c:	e7ee      	b.n	801c20c <__libc_init_array+0xc>
 801c22e:	f855 3b04 	ldr.w	r3, [r5], #4
 801c232:	4798      	blx	r3
 801c234:	3601      	adds	r6, #1
 801c236:	e7f2      	b.n	801c21e <__libc_init_array+0x1e>
 801c238:	0801ecd8 	.word	0x0801ecd8
 801c23c:	0801ecd8 	.word	0x0801ecd8
 801c240:	0801ecd8 	.word	0x0801ecd8
 801c244:	0801ecf4 	.word	0x0801ecf4

0801c248 <__retarget_lock_init_recursive>:
 801c248:	4770      	bx	lr

0801c24a <__retarget_lock_acquire_recursive>:
 801c24a:	4770      	bx	lr

0801c24c <__retarget_lock_release_recursive>:
 801c24c:	4770      	bx	lr

0801c24e <strcpy>:
 801c24e:	4603      	mov	r3, r0
 801c250:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c254:	f803 2b01 	strb.w	r2, [r3], #1
 801c258:	2a00      	cmp	r2, #0
 801c25a:	d1f9      	bne.n	801c250 <strcpy+0x2>
 801c25c:	4770      	bx	lr

0801c25e <memcpy>:
 801c25e:	440a      	add	r2, r1
 801c260:	4291      	cmp	r1, r2
 801c262:	f100 33ff 	add.w	r3, r0, #4294967295
 801c266:	d100      	bne.n	801c26a <memcpy+0xc>
 801c268:	4770      	bx	lr
 801c26a:	b510      	push	{r4, lr}
 801c26c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c270:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c274:	4291      	cmp	r1, r2
 801c276:	d1f9      	bne.n	801c26c <memcpy+0xe>
 801c278:	bd10      	pop	{r4, pc}
	...

0801c27c <__assert_func>:
 801c27c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c27e:	4614      	mov	r4, r2
 801c280:	461a      	mov	r2, r3
 801c282:	4b09      	ldr	r3, [pc, #36]	@ (801c2a8 <__assert_func+0x2c>)
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	4605      	mov	r5, r0
 801c288:	68d8      	ldr	r0, [r3, #12]
 801c28a:	b14c      	cbz	r4, 801c2a0 <__assert_func+0x24>
 801c28c:	4b07      	ldr	r3, [pc, #28]	@ (801c2ac <__assert_func+0x30>)
 801c28e:	9100      	str	r1, [sp, #0]
 801c290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c294:	4906      	ldr	r1, [pc, #24]	@ (801c2b0 <__assert_func+0x34>)
 801c296:	462b      	mov	r3, r5
 801c298:	f000 fbfc 	bl	801ca94 <fiprintf>
 801c29c:	f000 fc90 	bl	801cbc0 <abort>
 801c2a0:	4b04      	ldr	r3, [pc, #16]	@ (801c2b4 <__assert_func+0x38>)
 801c2a2:	461c      	mov	r4, r3
 801c2a4:	e7f3      	b.n	801c28e <__assert_func+0x12>
 801c2a6:	bf00      	nop
 801c2a8:	200042fc 	.word	0x200042fc
 801c2ac:	0801eb5f 	.word	0x0801eb5f
 801c2b0:	0801eb6c 	.word	0x0801eb6c
 801c2b4:	0801eb9a 	.word	0x0801eb9a

0801c2b8 <__env_lock>:
 801c2b8:	4801      	ldr	r0, [pc, #4]	@ (801c2c0 <__env_lock+0x8>)
 801c2ba:	f7ff bfc6 	b.w	801c24a <__retarget_lock_acquire_recursive>
 801c2be:	bf00      	nop
 801c2c0:	20012a44 	.word	0x20012a44

0801c2c4 <__env_unlock>:
 801c2c4:	4801      	ldr	r0, [pc, #4]	@ (801c2cc <__env_unlock+0x8>)
 801c2c6:	f7ff bfc1 	b.w	801c24c <__retarget_lock_release_recursive>
 801c2ca:	bf00      	nop
 801c2cc:	20012a44 	.word	0x20012a44

0801c2d0 <_free_r>:
 801c2d0:	b538      	push	{r3, r4, r5, lr}
 801c2d2:	4605      	mov	r5, r0
 801c2d4:	2900      	cmp	r1, #0
 801c2d6:	d041      	beq.n	801c35c <_free_r+0x8c>
 801c2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c2dc:	1f0c      	subs	r4, r1, #4
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	bfb8      	it	lt
 801c2e2:	18e4      	addlt	r4, r4, r3
 801c2e4:	f7ff fb2a 	bl	801b93c <__malloc_lock>
 801c2e8:	4a1d      	ldr	r2, [pc, #116]	@ (801c360 <_free_r+0x90>)
 801c2ea:	6813      	ldr	r3, [r2, #0]
 801c2ec:	b933      	cbnz	r3, 801c2fc <_free_r+0x2c>
 801c2ee:	6063      	str	r3, [r4, #4]
 801c2f0:	6014      	str	r4, [r2, #0]
 801c2f2:	4628      	mov	r0, r5
 801c2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c2f8:	f7ff bb26 	b.w	801b948 <__malloc_unlock>
 801c2fc:	42a3      	cmp	r3, r4
 801c2fe:	d908      	bls.n	801c312 <_free_r+0x42>
 801c300:	6820      	ldr	r0, [r4, #0]
 801c302:	1821      	adds	r1, r4, r0
 801c304:	428b      	cmp	r3, r1
 801c306:	bf01      	itttt	eq
 801c308:	6819      	ldreq	r1, [r3, #0]
 801c30a:	685b      	ldreq	r3, [r3, #4]
 801c30c:	1809      	addeq	r1, r1, r0
 801c30e:	6021      	streq	r1, [r4, #0]
 801c310:	e7ed      	b.n	801c2ee <_free_r+0x1e>
 801c312:	461a      	mov	r2, r3
 801c314:	685b      	ldr	r3, [r3, #4]
 801c316:	b10b      	cbz	r3, 801c31c <_free_r+0x4c>
 801c318:	42a3      	cmp	r3, r4
 801c31a:	d9fa      	bls.n	801c312 <_free_r+0x42>
 801c31c:	6811      	ldr	r1, [r2, #0]
 801c31e:	1850      	adds	r0, r2, r1
 801c320:	42a0      	cmp	r0, r4
 801c322:	d10b      	bne.n	801c33c <_free_r+0x6c>
 801c324:	6820      	ldr	r0, [r4, #0]
 801c326:	4401      	add	r1, r0
 801c328:	1850      	adds	r0, r2, r1
 801c32a:	4283      	cmp	r3, r0
 801c32c:	6011      	str	r1, [r2, #0]
 801c32e:	d1e0      	bne.n	801c2f2 <_free_r+0x22>
 801c330:	6818      	ldr	r0, [r3, #0]
 801c332:	685b      	ldr	r3, [r3, #4]
 801c334:	6053      	str	r3, [r2, #4]
 801c336:	4408      	add	r0, r1
 801c338:	6010      	str	r0, [r2, #0]
 801c33a:	e7da      	b.n	801c2f2 <_free_r+0x22>
 801c33c:	d902      	bls.n	801c344 <_free_r+0x74>
 801c33e:	230c      	movs	r3, #12
 801c340:	602b      	str	r3, [r5, #0]
 801c342:	e7d6      	b.n	801c2f2 <_free_r+0x22>
 801c344:	6820      	ldr	r0, [r4, #0]
 801c346:	1821      	adds	r1, r4, r0
 801c348:	428b      	cmp	r3, r1
 801c34a:	bf04      	itt	eq
 801c34c:	6819      	ldreq	r1, [r3, #0]
 801c34e:	685b      	ldreq	r3, [r3, #4]
 801c350:	6063      	str	r3, [r4, #4]
 801c352:	bf04      	itt	eq
 801c354:	1809      	addeq	r1, r1, r0
 801c356:	6021      	streq	r1, [r4, #0]
 801c358:	6054      	str	r4, [r2, #4]
 801c35a:	e7ca      	b.n	801c2f2 <_free_r+0x22>
 801c35c:	bd38      	pop	{r3, r4, r5, pc}
 801c35e:	bf00      	nop
 801c360:	20012900 	.word	0x20012900

0801c364 <_malloc_usable_size_r>:
 801c364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c368:	1f18      	subs	r0, r3, #4
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	bfbc      	itt	lt
 801c36e:	580b      	ldrlt	r3, [r1, r0]
 801c370:	18c0      	addlt	r0, r0, r3
 801c372:	4770      	bx	lr

0801c374 <__ssputs_r>:
 801c374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c378:	688e      	ldr	r6, [r1, #8]
 801c37a:	461f      	mov	r7, r3
 801c37c:	42be      	cmp	r6, r7
 801c37e:	680b      	ldr	r3, [r1, #0]
 801c380:	4682      	mov	sl, r0
 801c382:	460c      	mov	r4, r1
 801c384:	4690      	mov	r8, r2
 801c386:	d82d      	bhi.n	801c3e4 <__ssputs_r+0x70>
 801c388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c38c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c390:	d026      	beq.n	801c3e0 <__ssputs_r+0x6c>
 801c392:	6965      	ldr	r5, [r4, #20]
 801c394:	6909      	ldr	r1, [r1, #16]
 801c396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c39a:	eba3 0901 	sub.w	r9, r3, r1
 801c39e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c3a2:	1c7b      	adds	r3, r7, #1
 801c3a4:	444b      	add	r3, r9
 801c3a6:	106d      	asrs	r5, r5, #1
 801c3a8:	429d      	cmp	r5, r3
 801c3aa:	bf38      	it	cc
 801c3ac:	461d      	movcc	r5, r3
 801c3ae:	0553      	lsls	r3, r2, #21
 801c3b0:	d527      	bpl.n	801c402 <__ssputs_r+0x8e>
 801c3b2:	4629      	mov	r1, r5
 801c3b4:	f7ff fa42 	bl	801b83c <_malloc_r>
 801c3b8:	4606      	mov	r6, r0
 801c3ba:	b360      	cbz	r0, 801c416 <__ssputs_r+0xa2>
 801c3bc:	6921      	ldr	r1, [r4, #16]
 801c3be:	464a      	mov	r2, r9
 801c3c0:	f7ff ff4d 	bl	801c25e <memcpy>
 801c3c4:	89a3      	ldrh	r3, [r4, #12]
 801c3c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c3ce:	81a3      	strh	r3, [r4, #12]
 801c3d0:	6126      	str	r6, [r4, #16]
 801c3d2:	6165      	str	r5, [r4, #20]
 801c3d4:	444e      	add	r6, r9
 801c3d6:	eba5 0509 	sub.w	r5, r5, r9
 801c3da:	6026      	str	r6, [r4, #0]
 801c3dc:	60a5      	str	r5, [r4, #8]
 801c3de:	463e      	mov	r6, r7
 801c3e0:	42be      	cmp	r6, r7
 801c3e2:	d900      	bls.n	801c3e6 <__ssputs_r+0x72>
 801c3e4:	463e      	mov	r6, r7
 801c3e6:	6820      	ldr	r0, [r4, #0]
 801c3e8:	4632      	mov	r2, r6
 801c3ea:	4641      	mov	r1, r8
 801c3ec:	f7ff fe42 	bl	801c074 <memmove>
 801c3f0:	68a3      	ldr	r3, [r4, #8]
 801c3f2:	1b9b      	subs	r3, r3, r6
 801c3f4:	60a3      	str	r3, [r4, #8]
 801c3f6:	6823      	ldr	r3, [r4, #0]
 801c3f8:	4433      	add	r3, r6
 801c3fa:	6023      	str	r3, [r4, #0]
 801c3fc:	2000      	movs	r0, #0
 801c3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c402:	462a      	mov	r2, r5
 801c404:	f7ff fb1a 	bl	801ba3c <_realloc_r>
 801c408:	4606      	mov	r6, r0
 801c40a:	2800      	cmp	r0, #0
 801c40c:	d1e0      	bne.n	801c3d0 <__ssputs_r+0x5c>
 801c40e:	6921      	ldr	r1, [r4, #16]
 801c410:	4650      	mov	r0, sl
 801c412:	f7ff ff5d 	bl	801c2d0 <_free_r>
 801c416:	230c      	movs	r3, #12
 801c418:	f8ca 3000 	str.w	r3, [sl]
 801c41c:	89a3      	ldrh	r3, [r4, #12]
 801c41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c422:	81a3      	strh	r3, [r4, #12]
 801c424:	f04f 30ff 	mov.w	r0, #4294967295
 801c428:	e7e9      	b.n	801c3fe <__ssputs_r+0x8a>
	...

0801c42c <_svfiprintf_r>:
 801c42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c430:	4698      	mov	r8, r3
 801c432:	898b      	ldrh	r3, [r1, #12]
 801c434:	061b      	lsls	r3, r3, #24
 801c436:	b09d      	sub	sp, #116	@ 0x74
 801c438:	4607      	mov	r7, r0
 801c43a:	460d      	mov	r5, r1
 801c43c:	4614      	mov	r4, r2
 801c43e:	d510      	bpl.n	801c462 <_svfiprintf_r+0x36>
 801c440:	690b      	ldr	r3, [r1, #16]
 801c442:	b973      	cbnz	r3, 801c462 <_svfiprintf_r+0x36>
 801c444:	2140      	movs	r1, #64	@ 0x40
 801c446:	f7ff f9f9 	bl	801b83c <_malloc_r>
 801c44a:	6028      	str	r0, [r5, #0]
 801c44c:	6128      	str	r0, [r5, #16]
 801c44e:	b930      	cbnz	r0, 801c45e <_svfiprintf_r+0x32>
 801c450:	230c      	movs	r3, #12
 801c452:	603b      	str	r3, [r7, #0]
 801c454:	f04f 30ff 	mov.w	r0, #4294967295
 801c458:	b01d      	add	sp, #116	@ 0x74
 801c45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c45e:	2340      	movs	r3, #64	@ 0x40
 801c460:	616b      	str	r3, [r5, #20]
 801c462:	2300      	movs	r3, #0
 801c464:	9309      	str	r3, [sp, #36]	@ 0x24
 801c466:	2320      	movs	r3, #32
 801c468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c46c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c470:	2330      	movs	r3, #48	@ 0x30
 801c472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c610 <_svfiprintf_r+0x1e4>
 801c476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c47a:	f04f 0901 	mov.w	r9, #1
 801c47e:	4623      	mov	r3, r4
 801c480:	469a      	mov	sl, r3
 801c482:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c486:	b10a      	cbz	r2, 801c48c <_svfiprintf_r+0x60>
 801c488:	2a25      	cmp	r2, #37	@ 0x25
 801c48a:	d1f9      	bne.n	801c480 <_svfiprintf_r+0x54>
 801c48c:	ebba 0b04 	subs.w	fp, sl, r4
 801c490:	d00b      	beq.n	801c4aa <_svfiprintf_r+0x7e>
 801c492:	465b      	mov	r3, fp
 801c494:	4622      	mov	r2, r4
 801c496:	4629      	mov	r1, r5
 801c498:	4638      	mov	r0, r7
 801c49a:	f7ff ff6b 	bl	801c374 <__ssputs_r>
 801c49e:	3001      	adds	r0, #1
 801c4a0:	f000 80a7 	beq.w	801c5f2 <_svfiprintf_r+0x1c6>
 801c4a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c4a6:	445a      	add	r2, fp
 801c4a8:	9209      	str	r2, [sp, #36]	@ 0x24
 801c4aa:	f89a 3000 	ldrb.w	r3, [sl]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	f000 809f 	beq.w	801c5f2 <_svfiprintf_r+0x1c6>
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	f04f 32ff 	mov.w	r2, #4294967295
 801c4ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c4be:	f10a 0a01 	add.w	sl, sl, #1
 801c4c2:	9304      	str	r3, [sp, #16]
 801c4c4:	9307      	str	r3, [sp, #28]
 801c4c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c4ca:	931a      	str	r3, [sp, #104]	@ 0x68
 801c4cc:	4654      	mov	r4, sl
 801c4ce:	2205      	movs	r2, #5
 801c4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c4d4:	484e      	ldr	r0, [pc, #312]	@ (801c610 <_svfiprintf_r+0x1e4>)
 801c4d6:	f7e3 feab 	bl	8000230 <memchr>
 801c4da:	9a04      	ldr	r2, [sp, #16]
 801c4dc:	b9d8      	cbnz	r0, 801c516 <_svfiprintf_r+0xea>
 801c4de:	06d0      	lsls	r0, r2, #27
 801c4e0:	bf44      	itt	mi
 801c4e2:	2320      	movmi	r3, #32
 801c4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c4e8:	0711      	lsls	r1, r2, #28
 801c4ea:	bf44      	itt	mi
 801c4ec:	232b      	movmi	r3, #43	@ 0x2b
 801c4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c4f2:	f89a 3000 	ldrb.w	r3, [sl]
 801c4f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801c4f8:	d015      	beq.n	801c526 <_svfiprintf_r+0xfa>
 801c4fa:	9a07      	ldr	r2, [sp, #28]
 801c4fc:	4654      	mov	r4, sl
 801c4fe:	2000      	movs	r0, #0
 801c500:	f04f 0c0a 	mov.w	ip, #10
 801c504:	4621      	mov	r1, r4
 801c506:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c50a:	3b30      	subs	r3, #48	@ 0x30
 801c50c:	2b09      	cmp	r3, #9
 801c50e:	d94b      	bls.n	801c5a8 <_svfiprintf_r+0x17c>
 801c510:	b1b0      	cbz	r0, 801c540 <_svfiprintf_r+0x114>
 801c512:	9207      	str	r2, [sp, #28]
 801c514:	e014      	b.n	801c540 <_svfiprintf_r+0x114>
 801c516:	eba0 0308 	sub.w	r3, r0, r8
 801c51a:	fa09 f303 	lsl.w	r3, r9, r3
 801c51e:	4313      	orrs	r3, r2
 801c520:	9304      	str	r3, [sp, #16]
 801c522:	46a2      	mov	sl, r4
 801c524:	e7d2      	b.n	801c4cc <_svfiprintf_r+0xa0>
 801c526:	9b03      	ldr	r3, [sp, #12]
 801c528:	1d19      	adds	r1, r3, #4
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	9103      	str	r1, [sp, #12]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	bfbb      	ittet	lt
 801c532:	425b      	neglt	r3, r3
 801c534:	f042 0202 	orrlt.w	r2, r2, #2
 801c538:	9307      	strge	r3, [sp, #28]
 801c53a:	9307      	strlt	r3, [sp, #28]
 801c53c:	bfb8      	it	lt
 801c53e:	9204      	strlt	r2, [sp, #16]
 801c540:	7823      	ldrb	r3, [r4, #0]
 801c542:	2b2e      	cmp	r3, #46	@ 0x2e
 801c544:	d10a      	bne.n	801c55c <_svfiprintf_r+0x130>
 801c546:	7863      	ldrb	r3, [r4, #1]
 801c548:	2b2a      	cmp	r3, #42	@ 0x2a
 801c54a:	d132      	bne.n	801c5b2 <_svfiprintf_r+0x186>
 801c54c:	9b03      	ldr	r3, [sp, #12]
 801c54e:	1d1a      	adds	r2, r3, #4
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	9203      	str	r2, [sp, #12]
 801c554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c558:	3402      	adds	r4, #2
 801c55a:	9305      	str	r3, [sp, #20]
 801c55c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c620 <_svfiprintf_r+0x1f4>
 801c560:	7821      	ldrb	r1, [r4, #0]
 801c562:	2203      	movs	r2, #3
 801c564:	4650      	mov	r0, sl
 801c566:	f7e3 fe63 	bl	8000230 <memchr>
 801c56a:	b138      	cbz	r0, 801c57c <_svfiprintf_r+0x150>
 801c56c:	9b04      	ldr	r3, [sp, #16]
 801c56e:	eba0 000a 	sub.w	r0, r0, sl
 801c572:	2240      	movs	r2, #64	@ 0x40
 801c574:	4082      	lsls	r2, r0
 801c576:	4313      	orrs	r3, r2
 801c578:	3401      	adds	r4, #1
 801c57a:	9304      	str	r3, [sp, #16]
 801c57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c580:	4824      	ldr	r0, [pc, #144]	@ (801c614 <_svfiprintf_r+0x1e8>)
 801c582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c586:	2206      	movs	r2, #6
 801c588:	f7e3 fe52 	bl	8000230 <memchr>
 801c58c:	2800      	cmp	r0, #0
 801c58e:	d036      	beq.n	801c5fe <_svfiprintf_r+0x1d2>
 801c590:	4b21      	ldr	r3, [pc, #132]	@ (801c618 <_svfiprintf_r+0x1ec>)
 801c592:	bb1b      	cbnz	r3, 801c5dc <_svfiprintf_r+0x1b0>
 801c594:	9b03      	ldr	r3, [sp, #12]
 801c596:	3307      	adds	r3, #7
 801c598:	f023 0307 	bic.w	r3, r3, #7
 801c59c:	3308      	adds	r3, #8
 801c59e:	9303      	str	r3, [sp, #12]
 801c5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5a2:	4433      	add	r3, r6
 801c5a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c5a6:	e76a      	b.n	801c47e <_svfiprintf_r+0x52>
 801c5a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c5ac:	460c      	mov	r4, r1
 801c5ae:	2001      	movs	r0, #1
 801c5b0:	e7a8      	b.n	801c504 <_svfiprintf_r+0xd8>
 801c5b2:	2300      	movs	r3, #0
 801c5b4:	3401      	adds	r4, #1
 801c5b6:	9305      	str	r3, [sp, #20]
 801c5b8:	4619      	mov	r1, r3
 801c5ba:	f04f 0c0a 	mov.w	ip, #10
 801c5be:	4620      	mov	r0, r4
 801c5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c5c4:	3a30      	subs	r2, #48	@ 0x30
 801c5c6:	2a09      	cmp	r2, #9
 801c5c8:	d903      	bls.n	801c5d2 <_svfiprintf_r+0x1a6>
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d0c6      	beq.n	801c55c <_svfiprintf_r+0x130>
 801c5ce:	9105      	str	r1, [sp, #20]
 801c5d0:	e7c4      	b.n	801c55c <_svfiprintf_r+0x130>
 801c5d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801c5d6:	4604      	mov	r4, r0
 801c5d8:	2301      	movs	r3, #1
 801c5da:	e7f0      	b.n	801c5be <_svfiprintf_r+0x192>
 801c5dc:	ab03      	add	r3, sp, #12
 801c5de:	9300      	str	r3, [sp, #0]
 801c5e0:	462a      	mov	r2, r5
 801c5e2:	4b0e      	ldr	r3, [pc, #56]	@ (801c61c <_svfiprintf_r+0x1f0>)
 801c5e4:	a904      	add	r1, sp, #16
 801c5e6:	4638      	mov	r0, r7
 801c5e8:	f3af 8000 	nop.w
 801c5ec:	1c42      	adds	r2, r0, #1
 801c5ee:	4606      	mov	r6, r0
 801c5f0:	d1d6      	bne.n	801c5a0 <_svfiprintf_r+0x174>
 801c5f2:	89ab      	ldrh	r3, [r5, #12]
 801c5f4:	065b      	lsls	r3, r3, #25
 801c5f6:	f53f af2d 	bmi.w	801c454 <_svfiprintf_r+0x28>
 801c5fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c5fc:	e72c      	b.n	801c458 <_svfiprintf_r+0x2c>
 801c5fe:	ab03      	add	r3, sp, #12
 801c600:	9300      	str	r3, [sp, #0]
 801c602:	462a      	mov	r2, r5
 801c604:	4b05      	ldr	r3, [pc, #20]	@ (801c61c <_svfiprintf_r+0x1f0>)
 801c606:	a904      	add	r1, sp, #16
 801c608:	4638      	mov	r0, r7
 801c60a:	f000 f879 	bl	801c700 <_printf_i>
 801c60e:	e7ed      	b.n	801c5ec <_svfiprintf_r+0x1c0>
 801c610:	0801eb9b 	.word	0x0801eb9b
 801c614:	0801eba5 	.word	0x0801eba5
 801c618:	00000000 	.word	0x00000000
 801c61c:	0801c375 	.word	0x0801c375
 801c620:	0801eba1 	.word	0x0801eba1

0801c624 <_printf_common>:
 801c624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c628:	4616      	mov	r6, r2
 801c62a:	4698      	mov	r8, r3
 801c62c:	688a      	ldr	r2, [r1, #8]
 801c62e:	690b      	ldr	r3, [r1, #16]
 801c630:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c634:	4293      	cmp	r3, r2
 801c636:	bfb8      	it	lt
 801c638:	4613      	movlt	r3, r2
 801c63a:	6033      	str	r3, [r6, #0]
 801c63c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c640:	4607      	mov	r7, r0
 801c642:	460c      	mov	r4, r1
 801c644:	b10a      	cbz	r2, 801c64a <_printf_common+0x26>
 801c646:	3301      	adds	r3, #1
 801c648:	6033      	str	r3, [r6, #0]
 801c64a:	6823      	ldr	r3, [r4, #0]
 801c64c:	0699      	lsls	r1, r3, #26
 801c64e:	bf42      	ittt	mi
 801c650:	6833      	ldrmi	r3, [r6, #0]
 801c652:	3302      	addmi	r3, #2
 801c654:	6033      	strmi	r3, [r6, #0]
 801c656:	6825      	ldr	r5, [r4, #0]
 801c658:	f015 0506 	ands.w	r5, r5, #6
 801c65c:	d106      	bne.n	801c66c <_printf_common+0x48>
 801c65e:	f104 0a19 	add.w	sl, r4, #25
 801c662:	68e3      	ldr	r3, [r4, #12]
 801c664:	6832      	ldr	r2, [r6, #0]
 801c666:	1a9b      	subs	r3, r3, r2
 801c668:	42ab      	cmp	r3, r5
 801c66a:	dc26      	bgt.n	801c6ba <_printf_common+0x96>
 801c66c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c670:	6822      	ldr	r2, [r4, #0]
 801c672:	3b00      	subs	r3, #0
 801c674:	bf18      	it	ne
 801c676:	2301      	movne	r3, #1
 801c678:	0692      	lsls	r2, r2, #26
 801c67a:	d42b      	bmi.n	801c6d4 <_printf_common+0xb0>
 801c67c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c680:	4641      	mov	r1, r8
 801c682:	4638      	mov	r0, r7
 801c684:	47c8      	blx	r9
 801c686:	3001      	adds	r0, #1
 801c688:	d01e      	beq.n	801c6c8 <_printf_common+0xa4>
 801c68a:	6823      	ldr	r3, [r4, #0]
 801c68c:	6922      	ldr	r2, [r4, #16]
 801c68e:	f003 0306 	and.w	r3, r3, #6
 801c692:	2b04      	cmp	r3, #4
 801c694:	bf02      	ittt	eq
 801c696:	68e5      	ldreq	r5, [r4, #12]
 801c698:	6833      	ldreq	r3, [r6, #0]
 801c69a:	1aed      	subeq	r5, r5, r3
 801c69c:	68a3      	ldr	r3, [r4, #8]
 801c69e:	bf0c      	ite	eq
 801c6a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c6a4:	2500      	movne	r5, #0
 801c6a6:	4293      	cmp	r3, r2
 801c6a8:	bfc4      	itt	gt
 801c6aa:	1a9b      	subgt	r3, r3, r2
 801c6ac:	18ed      	addgt	r5, r5, r3
 801c6ae:	2600      	movs	r6, #0
 801c6b0:	341a      	adds	r4, #26
 801c6b2:	42b5      	cmp	r5, r6
 801c6b4:	d11a      	bne.n	801c6ec <_printf_common+0xc8>
 801c6b6:	2000      	movs	r0, #0
 801c6b8:	e008      	b.n	801c6cc <_printf_common+0xa8>
 801c6ba:	2301      	movs	r3, #1
 801c6bc:	4652      	mov	r2, sl
 801c6be:	4641      	mov	r1, r8
 801c6c0:	4638      	mov	r0, r7
 801c6c2:	47c8      	blx	r9
 801c6c4:	3001      	adds	r0, #1
 801c6c6:	d103      	bne.n	801c6d0 <_printf_common+0xac>
 801c6c8:	f04f 30ff 	mov.w	r0, #4294967295
 801c6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6d0:	3501      	adds	r5, #1
 801c6d2:	e7c6      	b.n	801c662 <_printf_common+0x3e>
 801c6d4:	18e1      	adds	r1, r4, r3
 801c6d6:	1c5a      	adds	r2, r3, #1
 801c6d8:	2030      	movs	r0, #48	@ 0x30
 801c6da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c6de:	4422      	add	r2, r4
 801c6e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c6e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c6e8:	3302      	adds	r3, #2
 801c6ea:	e7c7      	b.n	801c67c <_printf_common+0x58>
 801c6ec:	2301      	movs	r3, #1
 801c6ee:	4622      	mov	r2, r4
 801c6f0:	4641      	mov	r1, r8
 801c6f2:	4638      	mov	r0, r7
 801c6f4:	47c8      	blx	r9
 801c6f6:	3001      	adds	r0, #1
 801c6f8:	d0e6      	beq.n	801c6c8 <_printf_common+0xa4>
 801c6fa:	3601      	adds	r6, #1
 801c6fc:	e7d9      	b.n	801c6b2 <_printf_common+0x8e>
	...

0801c700 <_printf_i>:
 801c700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c704:	7e0f      	ldrb	r7, [r1, #24]
 801c706:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c708:	2f78      	cmp	r7, #120	@ 0x78
 801c70a:	4691      	mov	r9, r2
 801c70c:	4680      	mov	r8, r0
 801c70e:	460c      	mov	r4, r1
 801c710:	469a      	mov	sl, r3
 801c712:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c716:	d807      	bhi.n	801c728 <_printf_i+0x28>
 801c718:	2f62      	cmp	r7, #98	@ 0x62
 801c71a:	d80a      	bhi.n	801c732 <_printf_i+0x32>
 801c71c:	2f00      	cmp	r7, #0
 801c71e:	f000 80d1 	beq.w	801c8c4 <_printf_i+0x1c4>
 801c722:	2f58      	cmp	r7, #88	@ 0x58
 801c724:	f000 80b8 	beq.w	801c898 <_printf_i+0x198>
 801c728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c72c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c730:	e03a      	b.n	801c7a8 <_printf_i+0xa8>
 801c732:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c736:	2b15      	cmp	r3, #21
 801c738:	d8f6      	bhi.n	801c728 <_printf_i+0x28>
 801c73a:	a101      	add	r1, pc, #4	@ (adr r1, 801c740 <_printf_i+0x40>)
 801c73c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c740:	0801c799 	.word	0x0801c799
 801c744:	0801c7ad 	.word	0x0801c7ad
 801c748:	0801c729 	.word	0x0801c729
 801c74c:	0801c729 	.word	0x0801c729
 801c750:	0801c729 	.word	0x0801c729
 801c754:	0801c729 	.word	0x0801c729
 801c758:	0801c7ad 	.word	0x0801c7ad
 801c75c:	0801c729 	.word	0x0801c729
 801c760:	0801c729 	.word	0x0801c729
 801c764:	0801c729 	.word	0x0801c729
 801c768:	0801c729 	.word	0x0801c729
 801c76c:	0801c8ab 	.word	0x0801c8ab
 801c770:	0801c7d7 	.word	0x0801c7d7
 801c774:	0801c865 	.word	0x0801c865
 801c778:	0801c729 	.word	0x0801c729
 801c77c:	0801c729 	.word	0x0801c729
 801c780:	0801c8cd 	.word	0x0801c8cd
 801c784:	0801c729 	.word	0x0801c729
 801c788:	0801c7d7 	.word	0x0801c7d7
 801c78c:	0801c729 	.word	0x0801c729
 801c790:	0801c729 	.word	0x0801c729
 801c794:	0801c86d 	.word	0x0801c86d
 801c798:	6833      	ldr	r3, [r6, #0]
 801c79a:	1d1a      	adds	r2, r3, #4
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	6032      	str	r2, [r6, #0]
 801c7a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c7a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c7a8:	2301      	movs	r3, #1
 801c7aa:	e09c      	b.n	801c8e6 <_printf_i+0x1e6>
 801c7ac:	6833      	ldr	r3, [r6, #0]
 801c7ae:	6820      	ldr	r0, [r4, #0]
 801c7b0:	1d19      	adds	r1, r3, #4
 801c7b2:	6031      	str	r1, [r6, #0]
 801c7b4:	0606      	lsls	r6, r0, #24
 801c7b6:	d501      	bpl.n	801c7bc <_printf_i+0xbc>
 801c7b8:	681d      	ldr	r5, [r3, #0]
 801c7ba:	e003      	b.n	801c7c4 <_printf_i+0xc4>
 801c7bc:	0645      	lsls	r5, r0, #25
 801c7be:	d5fb      	bpl.n	801c7b8 <_printf_i+0xb8>
 801c7c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c7c4:	2d00      	cmp	r5, #0
 801c7c6:	da03      	bge.n	801c7d0 <_printf_i+0xd0>
 801c7c8:	232d      	movs	r3, #45	@ 0x2d
 801c7ca:	426d      	negs	r5, r5
 801c7cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c7d0:	4858      	ldr	r0, [pc, #352]	@ (801c934 <_printf_i+0x234>)
 801c7d2:	230a      	movs	r3, #10
 801c7d4:	e011      	b.n	801c7fa <_printf_i+0xfa>
 801c7d6:	6821      	ldr	r1, [r4, #0]
 801c7d8:	6833      	ldr	r3, [r6, #0]
 801c7da:	0608      	lsls	r0, r1, #24
 801c7dc:	f853 5b04 	ldr.w	r5, [r3], #4
 801c7e0:	d402      	bmi.n	801c7e8 <_printf_i+0xe8>
 801c7e2:	0649      	lsls	r1, r1, #25
 801c7e4:	bf48      	it	mi
 801c7e6:	b2ad      	uxthmi	r5, r5
 801c7e8:	2f6f      	cmp	r7, #111	@ 0x6f
 801c7ea:	4852      	ldr	r0, [pc, #328]	@ (801c934 <_printf_i+0x234>)
 801c7ec:	6033      	str	r3, [r6, #0]
 801c7ee:	bf14      	ite	ne
 801c7f0:	230a      	movne	r3, #10
 801c7f2:	2308      	moveq	r3, #8
 801c7f4:	2100      	movs	r1, #0
 801c7f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c7fa:	6866      	ldr	r6, [r4, #4]
 801c7fc:	60a6      	str	r6, [r4, #8]
 801c7fe:	2e00      	cmp	r6, #0
 801c800:	db05      	blt.n	801c80e <_printf_i+0x10e>
 801c802:	6821      	ldr	r1, [r4, #0]
 801c804:	432e      	orrs	r6, r5
 801c806:	f021 0104 	bic.w	r1, r1, #4
 801c80a:	6021      	str	r1, [r4, #0]
 801c80c:	d04b      	beq.n	801c8a6 <_printf_i+0x1a6>
 801c80e:	4616      	mov	r6, r2
 801c810:	fbb5 f1f3 	udiv	r1, r5, r3
 801c814:	fb03 5711 	mls	r7, r3, r1, r5
 801c818:	5dc7      	ldrb	r7, [r0, r7]
 801c81a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c81e:	462f      	mov	r7, r5
 801c820:	42bb      	cmp	r3, r7
 801c822:	460d      	mov	r5, r1
 801c824:	d9f4      	bls.n	801c810 <_printf_i+0x110>
 801c826:	2b08      	cmp	r3, #8
 801c828:	d10b      	bne.n	801c842 <_printf_i+0x142>
 801c82a:	6823      	ldr	r3, [r4, #0]
 801c82c:	07df      	lsls	r7, r3, #31
 801c82e:	d508      	bpl.n	801c842 <_printf_i+0x142>
 801c830:	6923      	ldr	r3, [r4, #16]
 801c832:	6861      	ldr	r1, [r4, #4]
 801c834:	4299      	cmp	r1, r3
 801c836:	bfde      	ittt	le
 801c838:	2330      	movle	r3, #48	@ 0x30
 801c83a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c83e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c842:	1b92      	subs	r2, r2, r6
 801c844:	6122      	str	r2, [r4, #16]
 801c846:	f8cd a000 	str.w	sl, [sp]
 801c84a:	464b      	mov	r3, r9
 801c84c:	aa03      	add	r2, sp, #12
 801c84e:	4621      	mov	r1, r4
 801c850:	4640      	mov	r0, r8
 801c852:	f7ff fee7 	bl	801c624 <_printf_common>
 801c856:	3001      	adds	r0, #1
 801c858:	d14a      	bne.n	801c8f0 <_printf_i+0x1f0>
 801c85a:	f04f 30ff 	mov.w	r0, #4294967295
 801c85e:	b004      	add	sp, #16
 801c860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c864:	6823      	ldr	r3, [r4, #0]
 801c866:	f043 0320 	orr.w	r3, r3, #32
 801c86a:	6023      	str	r3, [r4, #0]
 801c86c:	4832      	ldr	r0, [pc, #200]	@ (801c938 <_printf_i+0x238>)
 801c86e:	2778      	movs	r7, #120	@ 0x78
 801c870:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c874:	6823      	ldr	r3, [r4, #0]
 801c876:	6831      	ldr	r1, [r6, #0]
 801c878:	061f      	lsls	r7, r3, #24
 801c87a:	f851 5b04 	ldr.w	r5, [r1], #4
 801c87e:	d402      	bmi.n	801c886 <_printf_i+0x186>
 801c880:	065f      	lsls	r7, r3, #25
 801c882:	bf48      	it	mi
 801c884:	b2ad      	uxthmi	r5, r5
 801c886:	6031      	str	r1, [r6, #0]
 801c888:	07d9      	lsls	r1, r3, #31
 801c88a:	bf44      	itt	mi
 801c88c:	f043 0320 	orrmi.w	r3, r3, #32
 801c890:	6023      	strmi	r3, [r4, #0]
 801c892:	b11d      	cbz	r5, 801c89c <_printf_i+0x19c>
 801c894:	2310      	movs	r3, #16
 801c896:	e7ad      	b.n	801c7f4 <_printf_i+0xf4>
 801c898:	4826      	ldr	r0, [pc, #152]	@ (801c934 <_printf_i+0x234>)
 801c89a:	e7e9      	b.n	801c870 <_printf_i+0x170>
 801c89c:	6823      	ldr	r3, [r4, #0]
 801c89e:	f023 0320 	bic.w	r3, r3, #32
 801c8a2:	6023      	str	r3, [r4, #0]
 801c8a4:	e7f6      	b.n	801c894 <_printf_i+0x194>
 801c8a6:	4616      	mov	r6, r2
 801c8a8:	e7bd      	b.n	801c826 <_printf_i+0x126>
 801c8aa:	6833      	ldr	r3, [r6, #0]
 801c8ac:	6825      	ldr	r5, [r4, #0]
 801c8ae:	6961      	ldr	r1, [r4, #20]
 801c8b0:	1d18      	adds	r0, r3, #4
 801c8b2:	6030      	str	r0, [r6, #0]
 801c8b4:	062e      	lsls	r6, r5, #24
 801c8b6:	681b      	ldr	r3, [r3, #0]
 801c8b8:	d501      	bpl.n	801c8be <_printf_i+0x1be>
 801c8ba:	6019      	str	r1, [r3, #0]
 801c8bc:	e002      	b.n	801c8c4 <_printf_i+0x1c4>
 801c8be:	0668      	lsls	r0, r5, #25
 801c8c0:	d5fb      	bpl.n	801c8ba <_printf_i+0x1ba>
 801c8c2:	8019      	strh	r1, [r3, #0]
 801c8c4:	2300      	movs	r3, #0
 801c8c6:	6123      	str	r3, [r4, #16]
 801c8c8:	4616      	mov	r6, r2
 801c8ca:	e7bc      	b.n	801c846 <_printf_i+0x146>
 801c8cc:	6833      	ldr	r3, [r6, #0]
 801c8ce:	1d1a      	adds	r2, r3, #4
 801c8d0:	6032      	str	r2, [r6, #0]
 801c8d2:	681e      	ldr	r6, [r3, #0]
 801c8d4:	6862      	ldr	r2, [r4, #4]
 801c8d6:	2100      	movs	r1, #0
 801c8d8:	4630      	mov	r0, r6
 801c8da:	f7e3 fca9 	bl	8000230 <memchr>
 801c8de:	b108      	cbz	r0, 801c8e4 <_printf_i+0x1e4>
 801c8e0:	1b80      	subs	r0, r0, r6
 801c8e2:	6060      	str	r0, [r4, #4]
 801c8e4:	6863      	ldr	r3, [r4, #4]
 801c8e6:	6123      	str	r3, [r4, #16]
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c8ee:	e7aa      	b.n	801c846 <_printf_i+0x146>
 801c8f0:	6923      	ldr	r3, [r4, #16]
 801c8f2:	4632      	mov	r2, r6
 801c8f4:	4649      	mov	r1, r9
 801c8f6:	4640      	mov	r0, r8
 801c8f8:	47d0      	blx	sl
 801c8fa:	3001      	adds	r0, #1
 801c8fc:	d0ad      	beq.n	801c85a <_printf_i+0x15a>
 801c8fe:	6823      	ldr	r3, [r4, #0]
 801c900:	079b      	lsls	r3, r3, #30
 801c902:	d413      	bmi.n	801c92c <_printf_i+0x22c>
 801c904:	68e0      	ldr	r0, [r4, #12]
 801c906:	9b03      	ldr	r3, [sp, #12]
 801c908:	4298      	cmp	r0, r3
 801c90a:	bfb8      	it	lt
 801c90c:	4618      	movlt	r0, r3
 801c90e:	e7a6      	b.n	801c85e <_printf_i+0x15e>
 801c910:	2301      	movs	r3, #1
 801c912:	4632      	mov	r2, r6
 801c914:	4649      	mov	r1, r9
 801c916:	4640      	mov	r0, r8
 801c918:	47d0      	blx	sl
 801c91a:	3001      	adds	r0, #1
 801c91c:	d09d      	beq.n	801c85a <_printf_i+0x15a>
 801c91e:	3501      	adds	r5, #1
 801c920:	68e3      	ldr	r3, [r4, #12]
 801c922:	9903      	ldr	r1, [sp, #12]
 801c924:	1a5b      	subs	r3, r3, r1
 801c926:	42ab      	cmp	r3, r5
 801c928:	dcf2      	bgt.n	801c910 <_printf_i+0x210>
 801c92a:	e7eb      	b.n	801c904 <_printf_i+0x204>
 801c92c:	2500      	movs	r5, #0
 801c92e:	f104 0619 	add.w	r6, r4, #25
 801c932:	e7f5      	b.n	801c920 <_printf_i+0x220>
 801c934:	0801ebac 	.word	0x0801ebac
 801c938:	0801ebbd 	.word	0x0801ebbd

0801c93c <__sflush_r>:
 801c93c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c944:	0716      	lsls	r6, r2, #28
 801c946:	4605      	mov	r5, r0
 801c948:	460c      	mov	r4, r1
 801c94a:	d454      	bmi.n	801c9f6 <__sflush_r+0xba>
 801c94c:	684b      	ldr	r3, [r1, #4]
 801c94e:	2b00      	cmp	r3, #0
 801c950:	dc02      	bgt.n	801c958 <__sflush_r+0x1c>
 801c952:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c954:	2b00      	cmp	r3, #0
 801c956:	dd48      	ble.n	801c9ea <__sflush_r+0xae>
 801c958:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c95a:	2e00      	cmp	r6, #0
 801c95c:	d045      	beq.n	801c9ea <__sflush_r+0xae>
 801c95e:	2300      	movs	r3, #0
 801c960:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c964:	682f      	ldr	r7, [r5, #0]
 801c966:	6a21      	ldr	r1, [r4, #32]
 801c968:	602b      	str	r3, [r5, #0]
 801c96a:	d030      	beq.n	801c9ce <__sflush_r+0x92>
 801c96c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c96e:	89a3      	ldrh	r3, [r4, #12]
 801c970:	0759      	lsls	r1, r3, #29
 801c972:	d505      	bpl.n	801c980 <__sflush_r+0x44>
 801c974:	6863      	ldr	r3, [r4, #4]
 801c976:	1ad2      	subs	r2, r2, r3
 801c978:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c97a:	b10b      	cbz	r3, 801c980 <__sflush_r+0x44>
 801c97c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c97e:	1ad2      	subs	r2, r2, r3
 801c980:	2300      	movs	r3, #0
 801c982:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c984:	6a21      	ldr	r1, [r4, #32]
 801c986:	4628      	mov	r0, r5
 801c988:	47b0      	blx	r6
 801c98a:	1c43      	adds	r3, r0, #1
 801c98c:	89a3      	ldrh	r3, [r4, #12]
 801c98e:	d106      	bne.n	801c99e <__sflush_r+0x62>
 801c990:	6829      	ldr	r1, [r5, #0]
 801c992:	291d      	cmp	r1, #29
 801c994:	d82b      	bhi.n	801c9ee <__sflush_r+0xb2>
 801c996:	4a2a      	ldr	r2, [pc, #168]	@ (801ca40 <__sflush_r+0x104>)
 801c998:	40ca      	lsrs	r2, r1
 801c99a:	07d6      	lsls	r6, r2, #31
 801c99c:	d527      	bpl.n	801c9ee <__sflush_r+0xb2>
 801c99e:	2200      	movs	r2, #0
 801c9a0:	6062      	str	r2, [r4, #4]
 801c9a2:	04d9      	lsls	r1, r3, #19
 801c9a4:	6922      	ldr	r2, [r4, #16]
 801c9a6:	6022      	str	r2, [r4, #0]
 801c9a8:	d504      	bpl.n	801c9b4 <__sflush_r+0x78>
 801c9aa:	1c42      	adds	r2, r0, #1
 801c9ac:	d101      	bne.n	801c9b2 <__sflush_r+0x76>
 801c9ae:	682b      	ldr	r3, [r5, #0]
 801c9b0:	b903      	cbnz	r3, 801c9b4 <__sflush_r+0x78>
 801c9b2:	6560      	str	r0, [r4, #84]	@ 0x54
 801c9b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c9b6:	602f      	str	r7, [r5, #0]
 801c9b8:	b1b9      	cbz	r1, 801c9ea <__sflush_r+0xae>
 801c9ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c9be:	4299      	cmp	r1, r3
 801c9c0:	d002      	beq.n	801c9c8 <__sflush_r+0x8c>
 801c9c2:	4628      	mov	r0, r5
 801c9c4:	f7ff fc84 	bl	801c2d0 <_free_r>
 801c9c8:	2300      	movs	r3, #0
 801c9ca:	6363      	str	r3, [r4, #52]	@ 0x34
 801c9cc:	e00d      	b.n	801c9ea <__sflush_r+0xae>
 801c9ce:	2301      	movs	r3, #1
 801c9d0:	4628      	mov	r0, r5
 801c9d2:	47b0      	blx	r6
 801c9d4:	4602      	mov	r2, r0
 801c9d6:	1c50      	adds	r0, r2, #1
 801c9d8:	d1c9      	bne.n	801c96e <__sflush_r+0x32>
 801c9da:	682b      	ldr	r3, [r5, #0]
 801c9dc:	2b00      	cmp	r3, #0
 801c9de:	d0c6      	beq.n	801c96e <__sflush_r+0x32>
 801c9e0:	2b1d      	cmp	r3, #29
 801c9e2:	d001      	beq.n	801c9e8 <__sflush_r+0xac>
 801c9e4:	2b16      	cmp	r3, #22
 801c9e6:	d11e      	bne.n	801ca26 <__sflush_r+0xea>
 801c9e8:	602f      	str	r7, [r5, #0]
 801c9ea:	2000      	movs	r0, #0
 801c9ec:	e022      	b.n	801ca34 <__sflush_r+0xf8>
 801c9ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c9f2:	b21b      	sxth	r3, r3
 801c9f4:	e01b      	b.n	801ca2e <__sflush_r+0xf2>
 801c9f6:	690f      	ldr	r7, [r1, #16]
 801c9f8:	2f00      	cmp	r7, #0
 801c9fa:	d0f6      	beq.n	801c9ea <__sflush_r+0xae>
 801c9fc:	0793      	lsls	r3, r2, #30
 801c9fe:	680e      	ldr	r6, [r1, #0]
 801ca00:	bf08      	it	eq
 801ca02:	694b      	ldreq	r3, [r1, #20]
 801ca04:	600f      	str	r7, [r1, #0]
 801ca06:	bf18      	it	ne
 801ca08:	2300      	movne	r3, #0
 801ca0a:	eba6 0807 	sub.w	r8, r6, r7
 801ca0e:	608b      	str	r3, [r1, #8]
 801ca10:	f1b8 0f00 	cmp.w	r8, #0
 801ca14:	dde9      	ble.n	801c9ea <__sflush_r+0xae>
 801ca16:	6a21      	ldr	r1, [r4, #32]
 801ca18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ca1a:	4643      	mov	r3, r8
 801ca1c:	463a      	mov	r2, r7
 801ca1e:	4628      	mov	r0, r5
 801ca20:	47b0      	blx	r6
 801ca22:	2800      	cmp	r0, #0
 801ca24:	dc08      	bgt.n	801ca38 <__sflush_r+0xfc>
 801ca26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ca2e:	81a3      	strh	r3, [r4, #12]
 801ca30:	f04f 30ff 	mov.w	r0, #4294967295
 801ca34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca38:	4407      	add	r7, r0
 801ca3a:	eba8 0800 	sub.w	r8, r8, r0
 801ca3e:	e7e7      	b.n	801ca10 <__sflush_r+0xd4>
 801ca40:	20400001 	.word	0x20400001

0801ca44 <_fflush_r>:
 801ca44:	b538      	push	{r3, r4, r5, lr}
 801ca46:	690b      	ldr	r3, [r1, #16]
 801ca48:	4605      	mov	r5, r0
 801ca4a:	460c      	mov	r4, r1
 801ca4c:	b913      	cbnz	r3, 801ca54 <_fflush_r+0x10>
 801ca4e:	2500      	movs	r5, #0
 801ca50:	4628      	mov	r0, r5
 801ca52:	bd38      	pop	{r3, r4, r5, pc}
 801ca54:	b118      	cbz	r0, 801ca5e <_fflush_r+0x1a>
 801ca56:	6a03      	ldr	r3, [r0, #32]
 801ca58:	b90b      	cbnz	r3, 801ca5e <_fflush_r+0x1a>
 801ca5a:	f7ff f921 	bl	801bca0 <__sinit>
 801ca5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d0f3      	beq.n	801ca4e <_fflush_r+0xa>
 801ca66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ca68:	07d0      	lsls	r0, r2, #31
 801ca6a:	d404      	bmi.n	801ca76 <_fflush_r+0x32>
 801ca6c:	0599      	lsls	r1, r3, #22
 801ca6e:	d402      	bmi.n	801ca76 <_fflush_r+0x32>
 801ca70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ca72:	f7ff fbea 	bl	801c24a <__retarget_lock_acquire_recursive>
 801ca76:	4628      	mov	r0, r5
 801ca78:	4621      	mov	r1, r4
 801ca7a:	f7ff ff5f 	bl	801c93c <__sflush_r>
 801ca7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ca80:	07da      	lsls	r2, r3, #31
 801ca82:	4605      	mov	r5, r0
 801ca84:	d4e4      	bmi.n	801ca50 <_fflush_r+0xc>
 801ca86:	89a3      	ldrh	r3, [r4, #12]
 801ca88:	059b      	lsls	r3, r3, #22
 801ca8a:	d4e1      	bmi.n	801ca50 <_fflush_r+0xc>
 801ca8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ca8e:	f7ff fbdd 	bl	801c24c <__retarget_lock_release_recursive>
 801ca92:	e7dd      	b.n	801ca50 <_fflush_r+0xc>

0801ca94 <fiprintf>:
 801ca94:	b40e      	push	{r1, r2, r3}
 801ca96:	b503      	push	{r0, r1, lr}
 801ca98:	4601      	mov	r1, r0
 801ca9a:	ab03      	add	r3, sp, #12
 801ca9c:	4805      	ldr	r0, [pc, #20]	@ (801cab4 <fiprintf+0x20>)
 801ca9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801caa2:	6800      	ldr	r0, [r0, #0]
 801caa4:	9301      	str	r3, [sp, #4]
 801caa6:	f000 f8bb 	bl	801cc20 <_vfiprintf_r>
 801caaa:	b002      	add	sp, #8
 801caac:	f85d eb04 	ldr.w	lr, [sp], #4
 801cab0:	b003      	add	sp, #12
 801cab2:	4770      	bx	lr
 801cab4:	200042fc 	.word	0x200042fc

0801cab8 <__swhatbuf_r>:
 801cab8:	b570      	push	{r4, r5, r6, lr}
 801caba:	460c      	mov	r4, r1
 801cabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cac0:	2900      	cmp	r1, #0
 801cac2:	b096      	sub	sp, #88	@ 0x58
 801cac4:	4615      	mov	r5, r2
 801cac6:	461e      	mov	r6, r3
 801cac8:	da0d      	bge.n	801cae6 <__swhatbuf_r+0x2e>
 801caca:	89a3      	ldrh	r3, [r4, #12]
 801cacc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801cad0:	f04f 0100 	mov.w	r1, #0
 801cad4:	bf14      	ite	ne
 801cad6:	2340      	movne	r3, #64	@ 0x40
 801cad8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801cadc:	2000      	movs	r0, #0
 801cade:	6031      	str	r1, [r6, #0]
 801cae0:	602b      	str	r3, [r5, #0]
 801cae2:	b016      	add	sp, #88	@ 0x58
 801cae4:	bd70      	pop	{r4, r5, r6, pc}
 801cae6:	466a      	mov	r2, sp
 801cae8:	f000 f848 	bl	801cb7c <_fstat_r>
 801caec:	2800      	cmp	r0, #0
 801caee:	dbec      	blt.n	801caca <__swhatbuf_r+0x12>
 801caf0:	9901      	ldr	r1, [sp, #4]
 801caf2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801caf6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801cafa:	4259      	negs	r1, r3
 801cafc:	4159      	adcs	r1, r3
 801cafe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cb02:	e7eb      	b.n	801cadc <__swhatbuf_r+0x24>

0801cb04 <__smakebuf_r>:
 801cb04:	898b      	ldrh	r3, [r1, #12]
 801cb06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cb08:	079d      	lsls	r5, r3, #30
 801cb0a:	4606      	mov	r6, r0
 801cb0c:	460c      	mov	r4, r1
 801cb0e:	d507      	bpl.n	801cb20 <__smakebuf_r+0x1c>
 801cb10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801cb14:	6023      	str	r3, [r4, #0]
 801cb16:	6123      	str	r3, [r4, #16]
 801cb18:	2301      	movs	r3, #1
 801cb1a:	6163      	str	r3, [r4, #20]
 801cb1c:	b003      	add	sp, #12
 801cb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb20:	ab01      	add	r3, sp, #4
 801cb22:	466a      	mov	r2, sp
 801cb24:	f7ff ffc8 	bl	801cab8 <__swhatbuf_r>
 801cb28:	9f00      	ldr	r7, [sp, #0]
 801cb2a:	4605      	mov	r5, r0
 801cb2c:	4639      	mov	r1, r7
 801cb2e:	4630      	mov	r0, r6
 801cb30:	f7fe fe84 	bl	801b83c <_malloc_r>
 801cb34:	b948      	cbnz	r0, 801cb4a <__smakebuf_r+0x46>
 801cb36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb3a:	059a      	lsls	r2, r3, #22
 801cb3c:	d4ee      	bmi.n	801cb1c <__smakebuf_r+0x18>
 801cb3e:	f023 0303 	bic.w	r3, r3, #3
 801cb42:	f043 0302 	orr.w	r3, r3, #2
 801cb46:	81a3      	strh	r3, [r4, #12]
 801cb48:	e7e2      	b.n	801cb10 <__smakebuf_r+0xc>
 801cb4a:	89a3      	ldrh	r3, [r4, #12]
 801cb4c:	6020      	str	r0, [r4, #0]
 801cb4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cb52:	81a3      	strh	r3, [r4, #12]
 801cb54:	9b01      	ldr	r3, [sp, #4]
 801cb56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801cb5a:	b15b      	cbz	r3, 801cb74 <__smakebuf_r+0x70>
 801cb5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cb60:	4630      	mov	r0, r6
 801cb62:	f000 f81d 	bl	801cba0 <_isatty_r>
 801cb66:	b128      	cbz	r0, 801cb74 <__smakebuf_r+0x70>
 801cb68:	89a3      	ldrh	r3, [r4, #12]
 801cb6a:	f023 0303 	bic.w	r3, r3, #3
 801cb6e:	f043 0301 	orr.w	r3, r3, #1
 801cb72:	81a3      	strh	r3, [r4, #12]
 801cb74:	89a3      	ldrh	r3, [r4, #12]
 801cb76:	431d      	orrs	r5, r3
 801cb78:	81a5      	strh	r5, [r4, #12]
 801cb7a:	e7cf      	b.n	801cb1c <__smakebuf_r+0x18>

0801cb7c <_fstat_r>:
 801cb7c:	b538      	push	{r3, r4, r5, lr}
 801cb7e:	4d07      	ldr	r5, [pc, #28]	@ (801cb9c <_fstat_r+0x20>)
 801cb80:	2300      	movs	r3, #0
 801cb82:	4604      	mov	r4, r0
 801cb84:	4608      	mov	r0, r1
 801cb86:	4611      	mov	r1, r2
 801cb88:	602b      	str	r3, [r5, #0]
 801cb8a:	f7e6 ff69 	bl	8003a60 <_fstat>
 801cb8e:	1c43      	adds	r3, r0, #1
 801cb90:	d102      	bne.n	801cb98 <_fstat_r+0x1c>
 801cb92:	682b      	ldr	r3, [r5, #0]
 801cb94:	b103      	cbz	r3, 801cb98 <_fstat_r+0x1c>
 801cb96:	6023      	str	r3, [r4, #0]
 801cb98:	bd38      	pop	{r3, r4, r5, pc}
 801cb9a:	bf00      	nop
 801cb9c:	20012a40 	.word	0x20012a40

0801cba0 <_isatty_r>:
 801cba0:	b538      	push	{r3, r4, r5, lr}
 801cba2:	4d06      	ldr	r5, [pc, #24]	@ (801cbbc <_isatty_r+0x1c>)
 801cba4:	2300      	movs	r3, #0
 801cba6:	4604      	mov	r4, r0
 801cba8:	4608      	mov	r0, r1
 801cbaa:	602b      	str	r3, [r5, #0]
 801cbac:	f7e6 ff68 	bl	8003a80 <_isatty>
 801cbb0:	1c43      	adds	r3, r0, #1
 801cbb2:	d102      	bne.n	801cbba <_isatty_r+0x1a>
 801cbb4:	682b      	ldr	r3, [r5, #0]
 801cbb6:	b103      	cbz	r3, 801cbba <_isatty_r+0x1a>
 801cbb8:	6023      	str	r3, [r4, #0]
 801cbba:	bd38      	pop	{r3, r4, r5, pc}
 801cbbc:	20012a40 	.word	0x20012a40

0801cbc0 <abort>:
 801cbc0:	b508      	push	{r3, lr}
 801cbc2:	2006      	movs	r0, #6
 801cbc4:	f000 f96c 	bl	801cea0 <raise>
 801cbc8:	2001      	movs	r0, #1
 801cbca:	f7e6 fef9 	bl	80039c0 <_exit>

0801cbce <__sfputc_r>:
 801cbce:	6893      	ldr	r3, [r2, #8]
 801cbd0:	3b01      	subs	r3, #1
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	b410      	push	{r4}
 801cbd6:	6093      	str	r3, [r2, #8]
 801cbd8:	da08      	bge.n	801cbec <__sfputc_r+0x1e>
 801cbda:	6994      	ldr	r4, [r2, #24]
 801cbdc:	42a3      	cmp	r3, r4
 801cbde:	db01      	blt.n	801cbe4 <__sfputc_r+0x16>
 801cbe0:	290a      	cmp	r1, #10
 801cbe2:	d103      	bne.n	801cbec <__sfputc_r+0x1e>
 801cbe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cbe8:	f7ff b9a0 	b.w	801bf2c <__swbuf_r>
 801cbec:	6813      	ldr	r3, [r2, #0]
 801cbee:	1c58      	adds	r0, r3, #1
 801cbf0:	6010      	str	r0, [r2, #0]
 801cbf2:	7019      	strb	r1, [r3, #0]
 801cbf4:	4608      	mov	r0, r1
 801cbf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cbfa:	4770      	bx	lr

0801cbfc <__sfputs_r>:
 801cbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbfe:	4606      	mov	r6, r0
 801cc00:	460f      	mov	r7, r1
 801cc02:	4614      	mov	r4, r2
 801cc04:	18d5      	adds	r5, r2, r3
 801cc06:	42ac      	cmp	r4, r5
 801cc08:	d101      	bne.n	801cc0e <__sfputs_r+0x12>
 801cc0a:	2000      	movs	r0, #0
 801cc0c:	e007      	b.n	801cc1e <__sfputs_r+0x22>
 801cc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc12:	463a      	mov	r2, r7
 801cc14:	4630      	mov	r0, r6
 801cc16:	f7ff ffda 	bl	801cbce <__sfputc_r>
 801cc1a:	1c43      	adds	r3, r0, #1
 801cc1c:	d1f3      	bne.n	801cc06 <__sfputs_r+0xa>
 801cc1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cc20 <_vfiprintf_r>:
 801cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc24:	460d      	mov	r5, r1
 801cc26:	b09d      	sub	sp, #116	@ 0x74
 801cc28:	4614      	mov	r4, r2
 801cc2a:	4698      	mov	r8, r3
 801cc2c:	4606      	mov	r6, r0
 801cc2e:	b118      	cbz	r0, 801cc38 <_vfiprintf_r+0x18>
 801cc30:	6a03      	ldr	r3, [r0, #32]
 801cc32:	b90b      	cbnz	r3, 801cc38 <_vfiprintf_r+0x18>
 801cc34:	f7ff f834 	bl	801bca0 <__sinit>
 801cc38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cc3a:	07d9      	lsls	r1, r3, #31
 801cc3c:	d405      	bmi.n	801cc4a <_vfiprintf_r+0x2a>
 801cc3e:	89ab      	ldrh	r3, [r5, #12]
 801cc40:	059a      	lsls	r2, r3, #22
 801cc42:	d402      	bmi.n	801cc4a <_vfiprintf_r+0x2a>
 801cc44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cc46:	f7ff fb00 	bl	801c24a <__retarget_lock_acquire_recursive>
 801cc4a:	89ab      	ldrh	r3, [r5, #12]
 801cc4c:	071b      	lsls	r3, r3, #28
 801cc4e:	d501      	bpl.n	801cc54 <_vfiprintf_r+0x34>
 801cc50:	692b      	ldr	r3, [r5, #16]
 801cc52:	b99b      	cbnz	r3, 801cc7c <_vfiprintf_r+0x5c>
 801cc54:	4629      	mov	r1, r5
 801cc56:	4630      	mov	r0, r6
 801cc58:	f7ff f9a6 	bl	801bfa8 <__swsetup_r>
 801cc5c:	b170      	cbz	r0, 801cc7c <_vfiprintf_r+0x5c>
 801cc5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cc60:	07dc      	lsls	r4, r3, #31
 801cc62:	d504      	bpl.n	801cc6e <_vfiprintf_r+0x4e>
 801cc64:	f04f 30ff 	mov.w	r0, #4294967295
 801cc68:	b01d      	add	sp, #116	@ 0x74
 801cc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc6e:	89ab      	ldrh	r3, [r5, #12]
 801cc70:	0598      	lsls	r0, r3, #22
 801cc72:	d4f7      	bmi.n	801cc64 <_vfiprintf_r+0x44>
 801cc74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cc76:	f7ff fae9 	bl	801c24c <__retarget_lock_release_recursive>
 801cc7a:	e7f3      	b.n	801cc64 <_vfiprintf_r+0x44>
 801cc7c:	2300      	movs	r3, #0
 801cc7e:	9309      	str	r3, [sp, #36]	@ 0x24
 801cc80:	2320      	movs	r3, #32
 801cc82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cc86:	f8cd 800c 	str.w	r8, [sp, #12]
 801cc8a:	2330      	movs	r3, #48	@ 0x30
 801cc8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ce3c <_vfiprintf_r+0x21c>
 801cc90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cc94:	f04f 0901 	mov.w	r9, #1
 801cc98:	4623      	mov	r3, r4
 801cc9a:	469a      	mov	sl, r3
 801cc9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cca0:	b10a      	cbz	r2, 801cca6 <_vfiprintf_r+0x86>
 801cca2:	2a25      	cmp	r2, #37	@ 0x25
 801cca4:	d1f9      	bne.n	801cc9a <_vfiprintf_r+0x7a>
 801cca6:	ebba 0b04 	subs.w	fp, sl, r4
 801ccaa:	d00b      	beq.n	801ccc4 <_vfiprintf_r+0xa4>
 801ccac:	465b      	mov	r3, fp
 801ccae:	4622      	mov	r2, r4
 801ccb0:	4629      	mov	r1, r5
 801ccb2:	4630      	mov	r0, r6
 801ccb4:	f7ff ffa2 	bl	801cbfc <__sfputs_r>
 801ccb8:	3001      	adds	r0, #1
 801ccba:	f000 80a7 	beq.w	801ce0c <_vfiprintf_r+0x1ec>
 801ccbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ccc0:	445a      	add	r2, fp
 801ccc2:	9209      	str	r2, [sp, #36]	@ 0x24
 801ccc4:	f89a 3000 	ldrb.w	r3, [sl]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	f000 809f 	beq.w	801ce0c <_vfiprintf_r+0x1ec>
 801ccce:	2300      	movs	r3, #0
 801ccd0:	f04f 32ff 	mov.w	r2, #4294967295
 801ccd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ccd8:	f10a 0a01 	add.w	sl, sl, #1
 801ccdc:	9304      	str	r3, [sp, #16]
 801ccde:	9307      	str	r3, [sp, #28]
 801cce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cce4:	931a      	str	r3, [sp, #104]	@ 0x68
 801cce6:	4654      	mov	r4, sl
 801cce8:	2205      	movs	r2, #5
 801ccea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ccee:	4853      	ldr	r0, [pc, #332]	@ (801ce3c <_vfiprintf_r+0x21c>)
 801ccf0:	f7e3 fa9e 	bl	8000230 <memchr>
 801ccf4:	9a04      	ldr	r2, [sp, #16]
 801ccf6:	b9d8      	cbnz	r0, 801cd30 <_vfiprintf_r+0x110>
 801ccf8:	06d1      	lsls	r1, r2, #27
 801ccfa:	bf44      	itt	mi
 801ccfc:	2320      	movmi	r3, #32
 801ccfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cd02:	0713      	lsls	r3, r2, #28
 801cd04:	bf44      	itt	mi
 801cd06:	232b      	movmi	r3, #43	@ 0x2b
 801cd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cd0c:	f89a 3000 	ldrb.w	r3, [sl]
 801cd10:	2b2a      	cmp	r3, #42	@ 0x2a
 801cd12:	d015      	beq.n	801cd40 <_vfiprintf_r+0x120>
 801cd14:	9a07      	ldr	r2, [sp, #28]
 801cd16:	4654      	mov	r4, sl
 801cd18:	2000      	movs	r0, #0
 801cd1a:	f04f 0c0a 	mov.w	ip, #10
 801cd1e:	4621      	mov	r1, r4
 801cd20:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd24:	3b30      	subs	r3, #48	@ 0x30
 801cd26:	2b09      	cmp	r3, #9
 801cd28:	d94b      	bls.n	801cdc2 <_vfiprintf_r+0x1a2>
 801cd2a:	b1b0      	cbz	r0, 801cd5a <_vfiprintf_r+0x13a>
 801cd2c:	9207      	str	r2, [sp, #28]
 801cd2e:	e014      	b.n	801cd5a <_vfiprintf_r+0x13a>
 801cd30:	eba0 0308 	sub.w	r3, r0, r8
 801cd34:	fa09 f303 	lsl.w	r3, r9, r3
 801cd38:	4313      	orrs	r3, r2
 801cd3a:	9304      	str	r3, [sp, #16]
 801cd3c:	46a2      	mov	sl, r4
 801cd3e:	e7d2      	b.n	801cce6 <_vfiprintf_r+0xc6>
 801cd40:	9b03      	ldr	r3, [sp, #12]
 801cd42:	1d19      	adds	r1, r3, #4
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	9103      	str	r1, [sp, #12]
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	bfbb      	ittet	lt
 801cd4c:	425b      	neglt	r3, r3
 801cd4e:	f042 0202 	orrlt.w	r2, r2, #2
 801cd52:	9307      	strge	r3, [sp, #28]
 801cd54:	9307      	strlt	r3, [sp, #28]
 801cd56:	bfb8      	it	lt
 801cd58:	9204      	strlt	r2, [sp, #16]
 801cd5a:	7823      	ldrb	r3, [r4, #0]
 801cd5c:	2b2e      	cmp	r3, #46	@ 0x2e
 801cd5e:	d10a      	bne.n	801cd76 <_vfiprintf_r+0x156>
 801cd60:	7863      	ldrb	r3, [r4, #1]
 801cd62:	2b2a      	cmp	r3, #42	@ 0x2a
 801cd64:	d132      	bne.n	801cdcc <_vfiprintf_r+0x1ac>
 801cd66:	9b03      	ldr	r3, [sp, #12]
 801cd68:	1d1a      	adds	r2, r3, #4
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	9203      	str	r2, [sp, #12]
 801cd6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cd72:	3402      	adds	r4, #2
 801cd74:	9305      	str	r3, [sp, #20]
 801cd76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ce4c <_vfiprintf_r+0x22c>
 801cd7a:	7821      	ldrb	r1, [r4, #0]
 801cd7c:	2203      	movs	r2, #3
 801cd7e:	4650      	mov	r0, sl
 801cd80:	f7e3 fa56 	bl	8000230 <memchr>
 801cd84:	b138      	cbz	r0, 801cd96 <_vfiprintf_r+0x176>
 801cd86:	9b04      	ldr	r3, [sp, #16]
 801cd88:	eba0 000a 	sub.w	r0, r0, sl
 801cd8c:	2240      	movs	r2, #64	@ 0x40
 801cd8e:	4082      	lsls	r2, r0
 801cd90:	4313      	orrs	r3, r2
 801cd92:	3401      	adds	r4, #1
 801cd94:	9304      	str	r3, [sp, #16]
 801cd96:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd9a:	4829      	ldr	r0, [pc, #164]	@ (801ce40 <_vfiprintf_r+0x220>)
 801cd9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cda0:	2206      	movs	r2, #6
 801cda2:	f7e3 fa45 	bl	8000230 <memchr>
 801cda6:	2800      	cmp	r0, #0
 801cda8:	d03f      	beq.n	801ce2a <_vfiprintf_r+0x20a>
 801cdaa:	4b26      	ldr	r3, [pc, #152]	@ (801ce44 <_vfiprintf_r+0x224>)
 801cdac:	bb1b      	cbnz	r3, 801cdf6 <_vfiprintf_r+0x1d6>
 801cdae:	9b03      	ldr	r3, [sp, #12]
 801cdb0:	3307      	adds	r3, #7
 801cdb2:	f023 0307 	bic.w	r3, r3, #7
 801cdb6:	3308      	adds	r3, #8
 801cdb8:	9303      	str	r3, [sp, #12]
 801cdba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdbc:	443b      	add	r3, r7
 801cdbe:	9309      	str	r3, [sp, #36]	@ 0x24
 801cdc0:	e76a      	b.n	801cc98 <_vfiprintf_r+0x78>
 801cdc2:	fb0c 3202 	mla	r2, ip, r2, r3
 801cdc6:	460c      	mov	r4, r1
 801cdc8:	2001      	movs	r0, #1
 801cdca:	e7a8      	b.n	801cd1e <_vfiprintf_r+0xfe>
 801cdcc:	2300      	movs	r3, #0
 801cdce:	3401      	adds	r4, #1
 801cdd0:	9305      	str	r3, [sp, #20]
 801cdd2:	4619      	mov	r1, r3
 801cdd4:	f04f 0c0a 	mov.w	ip, #10
 801cdd8:	4620      	mov	r0, r4
 801cdda:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cdde:	3a30      	subs	r2, #48	@ 0x30
 801cde0:	2a09      	cmp	r2, #9
 801cde2:	d903      	bls.n	801cdec <_vfiprintf_r+0x1cc>
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d0c6      	beq.n	801cd76 <_vfiprintf_r+0x156>
 801cde8:	9105      	str	r1, [sp, #20]
 801cdea:	e7c4      	b.n	801cd76 <_vfiprintf_r+0x156>
 801cdec:	fb0c 2101 	mla	r1, ip, r1, r2
 801cdf0:	4604      	mov	r4, r0
 801cdf2:	2301      	movs	r3, #1
 801cdf4:	e7f0      	b.n	801cdd8 <_vfiprintf_r+0x1b8>
 801cdf6:	ab03      	add	r3, sp, #12
 801cdf8:	9300      	str	r3, [sp, #0]
 801cdfa:	462a      	mov	r2, r5
 801cdfc:	4b12      	ldr	r3, [pc, #72]	@ (801ce48 <_vfiprintf_r+0x228>)
 801cdfe:	a904      	add	r1, sp, #16
 801ce00:	4630      	mov	r0, r6
 801ce02:	f3af 8000 	nop.w
 801ce06:	4607      	mov	r7, r0
 801ce08:	1c78      	adds	r0, r7, #1
 801ce0a:	d1d6      	bne.n	801cdba <_vfiprintf_r+0x19a>
 801ce0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ce0e:	07d9      	lsls	r1, r3, #31
 801ce10:	d405      	bmi.n	801ce1e <_vfiprintf_r+0x1fe>
 801ce12:	89ab      	ldrh	r3, [r5, #12]
 801ce14:	059a      	lsls	r2, r3, #22
 801ce16:	d402      	bmi.n	801ce1e <_vfiprintf_r+0x1fe>
 801ce18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ce1a:	f7ff fa17 	bl	801c24c <__retarget_lock_release_recursive>
 801ce1e:	89ab      	ldrh	r3, [r5, #12]
 801ce20:	065b      	lsls	r3, r3, #25
 801ce22:	f53f af1f 	bmi.w	801cc64 <_vfiprintf_r+0x44>
 801ce26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ce28:	e71e      	b.n	801cc68 <_vfiprintf_r+0x48>
 801ce2a:	ab03      	add	r3, sp, #12
 801ce2c:	9300      	str	r3, [sp, #0]
 801ce2e:	462a      	mov	r2, r5
 801ce30:	4b05      	ldr	r3, [pc, #20]	@ (801ce48 <_vfiprintf_r+0x228>)
 801ce32:	a904      	add	r1, sp, #16
 801ce34:	4630      	mov	r0, r6
 801ce36:	f7ff fc63 	bl	801c700 <_printf_i>
 801ce3a:	e7e4      	b.n	801ce06 <_vfiprintf_r+0x1e6>
 801ce3c:	0801eb9b 	.word	0x0801eb9b
 801ce40:	0801eba5 	.word	0x0801eba5
 801ce44:	00000000 	.word	0x00000000
 801ce48:	0801cbfd 	.word	0x0801cbfd
 801ce4c:	0801eba1 	.word	0x0801eba1

0801ce50 <_raise_r>:
 801ce50:	291f      	cmp	r1, #31
 801ce52:	b538      	push	{r3, r4, r5, lr}
 801ce54:	4605      	mov	r5, r0
 801ce56:	460c      	mov	r4, r1
 801ce58:	d904      	bls.n	801ce64 <_raise_r+0x14>
 801ce5a:	2316      	movs	r3, #22
 801ce5c:	6003      	str	r3, [r0, #0]
 801ce5e:	f04f 30ff 	mov.w	r0, #4294967295
 801ce62:	bd38      	pop	{r3, r4, r5, pc}
 801ce64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ce66:	b112      	cbz	r2, 801ce6e <_raise_r+0x1e>
 801ce68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ce6c:	b94b      	cbnz	r3, 801ce82 <_raise_r+0x32>
 801ce6e:	4628      	mov	r0, r5
 801ce70:	f000 f830 	bl	801ced4 <_getpid_r>
 801ce74:	4622      	mov	r2, r4
 801ce76:	4601      	mov	r1, r0
 801ce78:	4628      	mov	r0, r5
 801ce7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce7e:	f000 b817 	b.w	801ceb0 <_kill_r>
 801ce82:	2b01      	cmp	r3, #1
 801ce84:	d00a      	beq.n	801ce9c <_raise_r+0x4c>
 801ce86:	1c59      	adds	r1, r3, #1
 801ce88:	d103      	bne.n	801ce92 <_raise_r+0x42>
 801ce8a:	2316      	movs	r3, #22
 801ce8c:	6003      	str	r3, [r0, #0]
 801ce8e:	2001      	movs	r0, #1
 801ce90:	e7e7      	b.n	801ce62 <_raise_r+0x12>
 801ce92:	2100      	movs	r1, #0
 801ce94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ce98:	4620      	mov	r0, r4
 801ce9a:	4798      	blx	r3
 801ce9c:	2000      	movs	r0, #0
 801ce9e:	e7e0      	b.n	801ce62 <_raise_r+0x12>

0801cea0 <raise>:
 801cea0:	4b02      	ldr	r3, [pc, #8]	@ (801ceac <raise+0xc>)
 801cea2:	4601      	mov	r1, r0
 801cea4:	6818      	ldr	r0, [r3, #0]
 801cea6:	f7ff bfd3 	b.w	801ce50 <_raise_r>
 801ceaa:	bf00      	nop
 801ceac:	200042fc 	.word	0x200042fc

0801ceb0 <_kill_r>:
 801ceb0:	b538      	push	{r3, r4, r5, lr}
 801ceb2:	4d07      	ldr	r5, [pc, #28]	@ (801ced0 <_kill_r+0x20>)
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	4604      	mov	r4, r0
 801ceb8:	4608      	mov	r0, r1
 801ceba:	4611      	mov	r1, r2
 801cebc:	602b      	str	r3, [r5, #0]
 801cebe:	f7e6 fd6f 	bl	80039a0 <_kill>
 801cec2:	1c43      	adds	r3, r0, #1
 801cec4:	d102      	bne.n	801cecc <_kill_r+0x1c>
 801cec6:	682b      	ldr	r3, [r5, #0]
 801cec8:	b103      	cbz	r3, 801cecc <_kill_r+0x1c>
 801ceca:	6023      	str	r3, [r4, #0]
 801cecc:	bd38      	pop	{r3, r4, r5, pc}
 801cece:	bf00      	nop
 801ced0:	20012a40 	.word	0x20012a40

0801ced4 <_getpid_r>:
 801ced4:	f7e6 bd5c 	b.w	8003990 <_getpid>

0801ced8 <_init>:
 801ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ceda:	bf00      	nop
 801cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cede:	bc08      	pop	{r3}
 801cee0:	469e      	mov	lr, r3
 801cee2:	4770      	bx	lr

0801cee4 <_fini>:
 801cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cee6:	bf00      	nop
 801cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ceea:	bc08      	pop	{r3}
 801ceec:	469e      	mov	lr, r3
 801ceee:	4770      	bx	lr
